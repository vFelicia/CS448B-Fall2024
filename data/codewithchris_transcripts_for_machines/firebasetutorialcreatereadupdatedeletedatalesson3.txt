Haeckel crew in this firebase tutorial I'm going to show you how to perform crud operations on a fire store database crud you say yes create read update and delete I know I know it's an incredibly unfortunate acronym but so great for jokes right hey what's up my name is Chris Ching and welcome to code with Chris where everyday people like you and I can learn how to crud and to build apps but before we start let's help each other out I'll stop making bad puns and you visit our sponsor hosting er hosting our offers fast and secure web site hosting with an easytouse website builder that I haven't seen anywhere else so you can host and create websites to market your apps even if you don't know anything about web development and if you're planning to use a CMS like WordPress which by the way code with Chris comm uses then you'll be happy to hear that hosting er is optimized for WordPress speed with affordable pricing starting at $0.99 a month with an additional 15% off discount when you use the coupon code code with Chris what is there not to like check out the link below or click on the link in the description to sign up for your account today alright now let's get started with our firebase tutorial alright so this video is going to be a continuation of lessons 1 & 2 in our firebase firestore tutorial series just in case you haven't watched those yet let me do a quick recap in the first video I showed you how to sign up for a firebase account how to create your firebase app and then how to create the Xcode project finally how to integrate those firebase libraries into your Xcode project so that it can communicate with the firebase servers and we got that working in Lesson one so if you haven't done that yet go ahead and watch lesson one you can click on the upper left hand corner for that video I'll list it out there also in lesson two I explained a little bit about how the firestore data model works we talked about collections and documents inside collections if that doesn't ring a bell I would recommend to go and review lesson two now I'll also link to it there so now in lesson three I am going to continue from that point on we've got our Xcode project set up here we're going to start our first store database and I'm gonna show you those crud operations and I'm going to just run through all of the different things you can do with it so we're going to learn how to create documents and collections we're gonna learn how to get the document ID that's autogenerated I'm gonna show you how to update a specific document I'm gonna show you how to delete a document delete a specific field in a document and you're also going to learn how to read the data back alright so if all that sounds good let's get started so here I'm looking at my firebase dashboard what you're gonna want to do is click on database now you probably don't have yours set up yet but I do what you're gonna see is an option to choose either the firebase real time database or the firestore database I think they're pushing firestore it's their newer product it's the secondgeneration one so it's gonna be at the top so create a fire stored at abase there's gonna be a big button prompting you to create one when you create one it's gonna ask you where you want to host that database or where you want it to be located now I would just choose the location that's closest to you the second thing it's going to ask you is what sort of security rules you want to put on it you can put it in test mode which is what I've done here the rules that are defined our public so that anybody can steal modify or delete your data as it's saying right here it's very alarming because it is very important but in the development phase and as we're doing a demo here we don't have any authentication built into our app yet so test mode is going to be the easiest for us once we have implemented some sort of authentication into our app then we can go ahead and switch those database rules so that only authenticated users can read and write and so on and so forth so right now I would recommend to put it into test mode or public mode or whatever they call it you're gonna get a prompt like this which is looks concerning but it's okay for now and then finally you're going to be presented with your brand new empty firestore database now true to what I said there our collections in this column right here and when you click on a collection you're gonna see all the documents in that collection now I don't have any collections right here but we're gonna jump into Xcode right now and I'm gonna show you what sort of statements you can run to start adding some data into your database all right so let's jump into Xcode so here don't worry about this right now let's just do a quick recap of where we left off in Lesson one so in Lesson one we had added the Google service info.plist into our Xcode project we had also added the firebase libraries as pods and then in the app delegate we had imported firebase up here and then we had ran this command or have this command here in the did finish launching so that as soon as the app launches it's going to run this statement which is going to set up our database and make it ready to use for us now if you haven't done any of that yet this was all part of lesson one again go back and watch that alright so we're gonna go into the view controller here i've got some sample code that i've set up and i'm gonna run through it with you and I'm gonna type out new code so this is just going to be samples all right so let's start at the top the first thing you're going to need to do is to import firebase if you're going to want Xcode to recognize those classes you need to do that and then the next thing you need to do is to get a reference to your firestore database and to do that you call the fire store type method of the fire store class and that is going to give you a reference to your database store it in a constant or variable in this case I've declared a constant called DB and I've started there so that's going to be how we run methods and commands against our database all right let's start with this adding a document this is very very simple use your database reference and then you're going to specify a collection now this could be an existing collection it could be a collection that doesn't exist if it doesn't exist then it's going to automatically create it in our case we have no data all right so I'm going to type in collection I'm just gonna make one up and I call it wine because I just went to Niagara Falls in Toronto and I did a bunch of wine tour so that's what's on my mind all right so we're specifying the wine collection and we're gonna add a document now adding a document it's going to automatically generate a document ID for you what we're going to specify next is actually the data for that document so the data is going to be a dictionary where the keys are strings and the data is a variety of different formats that you could put in there we discussed all of those different data formats you can use in lesson two back then so you can go back and watch that video if you need to jog your memory and if you're completely brandnew to app development I forgot to mention that this video series is not meant for the complete beginner I have another video series to get you up to speed make sure you check out my beginner lessons you can click in the upper lefthand corner that's going to go through the different data types dictionaries that we're going to use here and all of that stuff so that this video is going to make a lot more sense if you have that sort of knowledge first again this video series is not for complete beginners all right so we're going to specify a dictionary here with key value pairs according to the data that we want to store it in this document so for example all right I'm gonna have a key called year and it's going to be a number 2017 and I'm gonna have a type and the value for that is maybe gonna be a Pinot Noir now this can be whatever format you want obviously and the label maybe I'm gonna put it as color Estates that's one of the wineries I went to as simple as that let's run our app right now and let's see what happens what it's going to do is create the wine collection because that is it doesn't exist and then it's going to add a document to that collection so let's check out our database them just a refresher right here and sure enough there it is our wine collection and this is the autogenerated document ID and here is the data for that document label as Peller States type as Pinot Noir and year is 2017 exactly like I've specified in here so that's how you basically add data to your database now in some cases you might want the document ID alright that is generated for your document so there is a way to do that let me oh so let's go back to the controller let me show you how to do that the way you do that is you use DB again actually let me just type it out for you so it's gonna make a little more sense instead of only call my thing decoded so you use your reference to the database and then you go ahead and call your collection again we were going to use wine again and this time you just call the document method that's going to create a brand new document in that collection now what you're gonna do is assign that document reference to a variable or a constant so in this case I'm gonna put it into a constant called new document and the thing is now you have a reference to that newly generated document so that you can access the ID property of it and you can get access to that document ID so here let's go new document this is the one that's just created and we're going to call a different method here called set data now set data is basically going to as it suggests replace that data in that document with whatever dictionary that you pass in now there is an optional merge property or parameter sorry that instead of replacing you're going to be merging the data with the existing record but I'm getting ahead of myself let's first do this let's set data and I'll show you this example so here we are setting the data for our document so here I'm gonna say year 2017 again let's if the type is let's do a different type of wine and label is and yes I wanted to do an additional key value pair here where I specify the document ID so here I just want to demonstrate that you have access to that document and you can access the document ID property which is a string ID so let's run this code and see what happens oh yes we don't see anything so you can see that it's updated now check this out this is our new document that we just added it's the second type of wine that I whoops that I added but check this out I had a reference to that autogenerated document ID and I was able to put it in here so that's useful to know in case you need the autogenerated ID now let's take a look at some other ways of setting data now what happens if you want to add a document to your collection with a specific ID you don't always have to use the autogenerated one so you can do that it's very simple let's take a look here adding a document with a specific ID so it's just like adding a new document up here the difference is that this time you're going to manually specify the document ID that you want so the collection for us is white and then you're going to go dot document and you're going to choose this one and you're going to be able to specify a document path or in this case it would be the document ID so let us let us specify one like that and then we would call the set data off of that so up here we did collection and then add document that's just going to auto generate the ID for that document this time we are saying that collection we're specifying the document that we want and then we are going to set the data for that document now if that document doesn't exist right if this document ID doesn't exist it's going to create a brand new document with that ID for you and it's so I'm just gonna put some dummy data here we don't need to go through it again let me do that all right and run it and then in here you're gonna see that appear so that is the specific document ID that I wanted now what happens if the document ID already exists so here my data was test and test so if this document ID already exists and you're calling set data well it's essentially going to replace whatever data is already in that document with the data that you're passing in here so here I'm gonna go you know test let's just do something else that so you can tell the difference so I'm going to do hello and hello right and if we take a look now you can see that it got it basically replaced whatever was in that document all right so this is essentially also a way to update an existing document right it's a way to specify a new document with your own custom document ID but it's also a way to update an existing document if you know the document ID already and that is going to replace the data but what if you don't want to replace the data what if you want to add to it or you want to just update a specific field well check this out if I wanted to update the hello field or hello data I would just put I would just specify that same key and then specify a different value and what that's going to do is it's going to replace the existing value with my new data so that's how you would update an existing field if you wanted to add a new field like a new key value pair you could do that you could say a new key and new value however this is where you need to use that second parameter that I showed you it was called merge and here you would put true and what happens when you specify the merge parameter with passing in true it is going to essentially add whatever field that doesn't exist it'll just tack it on to the document so here you can see that it hasn't replaced it it's actually just added that to there all right so that I actually skipped ahead a little bit so that was what I was trying to show here in this example updating a specific document ID all right so there's that and you probably have noticed that you're a little more experienced that there is a completion handler when you're adding documents and stuff like that so you can check for errors and this is how that would work so let's say that I'm gonna add a new document so to my wine collection you can see here that I can pass in the data but I can also specify a completion closure where I would basically get the results back any errors that might have happened so let's let's take a look at that some of the error is the test and test and this completion handler let's open that up there's a parameter in there called error I'm going to give that a parameter name and all you have to do is just check if that error parameter is nil or not so if error equals error then there was an error this is just in case you're not familiar with it a way to check if if this is nil or not so if error is not nil it's going to be signed to error and I'm going to be able to access it in here now otherwise there is nil so operation completed successfully so that is how you would detect for errors in your write operations all right now let's take a look at deleting so I realize I'm commenting out a lot of the code but if you download the sample code in the link below the description I'll clean it up for you guys so you only have like one set of sample code or not like two sets like this because that looks kind of messy and confusing alright so deleting a document it's pretty simple I don't think I need to type this out so I'm just gonna uncomment my example here you specify the collection you specify the specific document that you want to delete and then you just call the delete method on it you can also just delete a single field and this is how you would do that again you'd specify the collection and then the document and then you call an update data method not a set data like we did up there this is update data and then you just pass in the field that you want to get rid of and the value instead you it would be this and that would essentially remove that key value pair from that document and all of this guys is in the documentation so always have this handy right here like always in the upper right hand corner you'll see a link that says go to Docs and when you go there it's just in case you don't know how to navigate that or where to go you can go to get started for iOS and then down here look for a cloud fire store open that up go to add and manage data and this is the stuff in this section this is stuff that I'm showing you guys right here alright alright detecting for errors is exactly the same way there's an example here but essentially it is the same thing that we did up here where you pass in a closure to that completion handler and there's an air parameter and you just check if that error is nil or not just to see if your delete you're deleting was successful or not actually here I'm going to just show you an example here since there wasn't a sample I just realized so let's do wine let's do document and one of the ones that one of the document IDs I just added was this and then you're going to call delete so you can just call regular delete or you can call delete with completion parameter right and then you'd open that up and there would be an error parameter in there and you'd just you know use optional binding again or an easier way if you don't really understand this syntax is just you know if error is not equal to nil then we have an error else delete was successful so that's using a simple if statement and that might be easier to understand if you're unfamiliar with the Swift syntax all right now we're gonna get into the reading so let's go ahead and comment out this deletion code and let's check out reading a specific document first let's take a look at the simplest example which would be if you knew the collection that you wanted to access and you knew the specific document that you wanted as well so let's say Pino or 2017 then you would be able to call get document just like that and that's it There is obviously a completion Handler so that you can get the data that's double click that to open it up there is a document snapshot and there is an error so let's go ahead and put some parameter names for that and so you'd check if there is no errors first you would let's say if error is nil meaning that there is no error then it first check for an error and then you would check that this document exists because tell you what this document that we specify here might not exist in that collection right and if it does not exist there that's not necessarily an error per se but what would happen is that the document has a in exists property that would tell you if that document exists or not very simply and you kind of have to check if the you have to check two things if the document is not nil and document exists is true that means that there is a document right and here's the document data inside this document variable so you can either use simple if statements right to do that or you can use optional binding again but just in case I will use the simpler syntax so you can go ahead and force unwrap that because you've already checked that it's not nil here so you can safely force and wrap and check the exist property because it's going to stop here if it's nil all right so you're gonna say you know let actual or let document data equals document dot data and there you see that that return value of this data method is your dictionary containing all of the key value pairs for that document so that is how you would get the data for and then obviously you'd have to parse it into whatever object you'd want or maybe you want to keep it as a dictionary you know that's up to you but that's how you would get that dictionary data out of firestore database so that's a very simple example of getting a single document now what if you wanted to get all the documents in a certain collection well you could do that documents getting all documents from a collection you would go DB dot collection and then it will specify our wine collection and instead of get document this time it's pluralized and we say get documents that's this one right here with the completion parameter and again opening this up will give us the two parameters of this closure which is the well this would be actually you would call it the snapshot and this would be error the reason is because the the actual documents are in a property of the snapshot so let me demonstrate so if error is nil so that means there was no error then if you take a look at snapshot in here documents right this is where each document will live so you would do something like you know if error is not equal nil and then you could you could combine up here you could say and snapshot is not equal to nil as well then maybe you will say for document in snapshot documents right and then in here you would say let document data equal document dot data so here you're just looping through each document that was returned inside a for loop and then here you're accessing that particular documents dictionary data so that's how you're going to get the data out of every single document of the wine collection you know but this is all fine and good typically you wouldn't want to retrieve all of the documents in the collection you'd want to somehow filter them right or query so there are various ways to do that getting a sub set of documents so here let's specify the wine collection that's what we want to look in and we can specify a where clause where you can indicate a specific field that you want to look at where it's equal to something or less than something maybe or maybe greater than or that specific array contains some sort of value and there's different ones that you can take a look at but that is how you would kind of specify a subset of those documents so why don't we just say something very simple like where where type is equal true well hmm let's say year is equal to 2017 all right so we're gonna grab all the wines that were of this year and then you would say get documents and then you would proceed as you did up here right because you're getting back a collection of documents so you're going to check if the error is nil you're going to check that the snapshot is not nil and then you're gonna grab the documents we're going to loop through the documents of the snapshot and then for each document you're gonna grab its data and that's how you're gonna get that data out now in a future video I will show you more concretely because we're definitely going to be building apps with these skills that we're learning here and so I'm gonna show you concretely how to declare a structures of maybe like a wine structure with has all of our properties and then we can extract this dictionary data and create an array of wine objects or something like that now there is even more that you can do but for this initial video on crud operations this is where I want to stop some of the things that I'm gonna cover in a future video about fire stir or some of these topics you can also feel free to go and check out those URLs but for now this is a great place to stop as an introduction so now you know how to create read update and delete data in your fire store database but fire store is only a fraction of what you can do on the firebase platform if you want to watch more firebase tutorials check out the play list over there and if you don't want to miss the next firebase tutorial make sure you hit that subscribe button below and click on that Bell notification icon as well and finally if you want to download any of the source code you saw today check out the links below and don't forget to check out our sponsor hosting er alright I'll see you in the next lesson