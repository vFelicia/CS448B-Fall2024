now that we have our mp connection manager class created we can start to use it we're going to use this in our start view where we have to take care of our last game type remember we hit that start button because what we want to do is to display all of our peers who have advertised their willingness to play and select one of them so i'm going to break this out into its own view that i can embed in the start view this will need access to our connection manager as well our game so it's best to inject this into the environment but remember we'll need to pass the name of a player when we instantiate it so we can't do this in our app entry point but we can do that in our start view since we pass in that value in our initializer so in start view create a state object for this connection manager that is of type mp connection manager then since this object has not been initialized we can do that in our init function and since it's a property wrapper we'll need to use an underscore to address it then we can create a state object type using the wrapped value argument where we create a new instance of our mp connection manager passing in your name when we inject this new object into the environment our other views and their subviews will have access to it and remember in our mp connection manager class i have that setup function that will have to be called from our game view that means whenever we present our game view from here at the full screen cover we should inject our connection manager into the environment let's go to game view then and create the environment object there and also make sure that our preview gets an instance then on the on appear function where we reset our game we can if our game type is peer call the connection manager setup function passing in the game services game object so that our connection manager can use any of those functions now we need a view that will present all who are going to advertise their availability to play so inside that multipure connectivity group let's create a new swift ui file and call it mp peers view it will require access to both our game service and our connection manager environment objects so we'll create two environment objects for them again we'll need to fix the preview and for the connection manager object we'll have to use a string for your name so again we'll just use sample next we'll be using this view to invite someone to play or accept an invitation so if accepted by either we'll want to trigger the presentation of the game and that's handled by the start game property in our start view so we'll need to pass in that as a binding then we'll need to add a constant binding to false for that property in our preview now in the body let's embed the text view inside a vstack and i'm going to change the string to just say available players i'll follow that with a list that iterates over all of the connection managers available peers where the id is self and we can do that because each mcpeer id is unique and we made sure that we only add new users to that array if they don't already exist so this will provide us with a peer that we can iterate over within the h stack we'll create a text view using the peers display name and follow that with a spacer then we'll have a button that will allow us to select them so that the label will be select and then in the action we'll set the game's game type to appear we'll use the connection manager's nearby service browser to invite the peer passing in our peer to our connection manager session and then the contacts will be nil because we're not sending any additional data and we'll set a timeout of 30. then we can set the game's player one's name to the connection manager's my peer id dot display name which is the display name for my peer id which is my name or the your name property and then the game two player's name will be the display name of the selected peer that we'll be inviting and let's set that button to a bordered prominent style while in start view which will be displaying this view if we receive an invitation before we get a chance to send one out we'll have the option to accept or reject it and this comes by way of the connection manager's invitation handler but remember we also created a boolean property in connection manager that is received invite that is set to true when it gets one so we can use this to present an alert so let's attach that to our h stack and for the title we can use the string received invitation from and then use string interpolation to use the connection managers received from property that is a mcpier and we'll use the display name from there now this is optional so if it doesn't exist it actually will but instead of force unwrapping let's just enter unknown as the name is presented is bound to the connection managers received invite property won't be needing a message closure so let's remove that and stick with just actions for this alert for our actions we'll have two buttons one for accept invite and one for reject for the accept action we can unwrap the closure which is the invitation handler from our connection manager if it exists then we can use that function passing in true and the connection manager session this now establishes a new session we can set our game player1 name to the display name that received from the invite which is the same string we used in the alert player two name then will be my device so we can use the connection manager's my peer ids display name and then we can set our game type to pier for the rejection we can again unwrap the invitation handler function but this time pass in false instead of true and nil for the session when we tap on this button then we'll be sending information to our connected user which will be received by our delegate function as a start of the game this then gives us enough information to complete that function that we left incomplete in the last section of our mp connection manager class so let's return to it and scroll down to the did receive delegate function of the mcsession delegate extension so here's the case where we broke so first we'll do a guard check to unwrap the player name from our game move object to make sure that we got one otherwise we'll just return then we can check to see if that name matches the name already established for player 1 of our game object and if so we can make that player current if not we'll make the other player current back in mp piers view let me find the closing bracket on that h stack now when our view appears we want to advertise our availability to play and start browsing for others so let me add that on a peer modifier to our v stack then we can set the connection managers is available to play property to true and then we can call the connection manager start browsing function now when we accept an invite or have an invitation accepted this view will disappear and the game view will be presented so let's add an on disappear block after the on appear one and within there we can stop browsing and we can stop advertising and we can set our is available to play option to false then we can watch for changes on the paired property which initially is false but when it changes we'll get a new value and we'll set our start game to that new value now in start view we can replace the empty view for the game type switch statement in the v stack for our peercase which will present the mcpeerview passing in our startgamestate boolean property that triggers the gameview's full screen cover and we can inject our connection manager state object into the environment so our mppeerview will have access to those game functions and properties now i don't know if you notice but i have my test iphone connected to xcode and it's running ios 15. so let me run it on this device i'm using quicktime to display to my screen so let me bring it into view now because it's a first launch i'm required to enter my name as expected so let's enter collin which is actually my first name now i'm going to select the challenge a friend mode now the first time i use this app i'm presented with a request to find and connect to devices on the local network and that string here is the one that we entered in the p list so let me just tap ok i see that there is no one yet who wants to play but i am advertising my availability as call it so let me now run on my iphone 14 pro simulator at the same time i'm going to minimize xcode so that we can see both of our devices clearly i'm not asked to enter my name here because i entered it already and this device is stuart so let me challenge a friend on the simulator when this screen appears i see that colin is available to play on the simulator and on the phone i see that stewart is available to play and the game can be initiated by either player so let me tap on the select button on my real phone to invite stuart on the simulator the request is made and stewart on the simulator gets that alert where he can accept or reject well let's accept and when that's done the items are paired and start gain gets set to true on both devices and the game view appears all we have to do now is to fix our code that will send our next actions over so we'll need to add code in our actions to send our paired player if the game type is peer so within game view for our first start button for player 1 if the game type is equal to pier we can create a gamemove object that will be an mpgamemove object where the action is start and the player name will be the game.player1.name and since we're not making any moves the index will be nil having that then we can use the connection manager's send function to send this game move over to the other paired device well the second button for the second player is going to be pretty much identical the only difference is that our player name will be the player 2 name in the new game button we do a similar check for the game move and this time though for our game move the action will be reset and there'll be no need to pass in a player name or an index so both will be nil and once we do that we can send it on using that send function from our connection manager for the end game once more we'll do a check on the game type and we'll create the same kind of mp game move as we did for our new game but the action is end and then pass that on i do want to add some more conditions to our game board's disabled check though so add an or operator and we'll check if the game type is a peer and the connection manager's my peer display name is not equal to the game dot current player name and this will prevent me from making a move while it's not my turn switching now over to square view i'll need access to the connection manager object from the environment and as always we'll have to inject an instance in the preview provider now when a button is tapped then if the game game type is pure we can create our mp game move with an action of move this time and pass along the my peer ids display name from our connection manager property and this time we'll have to pass in the index of the object that's being moved and send that over i think we're done so let's test first let me run on my simulator then let me run on the test iphone se as i see when i select challenge a friend on both devices we see the opposing player is available i'll have the simulator challenge collin on the iphone se and i'll accept on the phone on the simulator i'm going to tell the iphone to start and that action is sent over and the game is started with collins player button showing in green and now when on the iphone i tap on a square the move is sent over and stuart is now active i can continue on back and forth now until a winner is declared or we've reached a stalemate on the simulator after we have ended a game i decide that i no longer want to play against holland i can choose a different game mode and when i do that colin on the iphone no longer sees me as being available because i've stopped advertising now there's one thing i don't like though and that's that not displaying while on the iphone se and that's because i added that extra button to change the name and originally i had not counted on that so let's go back and adjust the frame of the image so that it will fit on the smallest device so back in start view then i can find that image of the launch screen and make it first resizable scale to fit and i'll set a frame of a width 200. let's test then once more on the iphone se that's much better so just for completeness sake then let's commit our finished project to the git repository well i hope you've learned some things from this video series and i would really like to thank chris ching for allowing me to share my passion on his channel thanks so much for sharing your time with me i hope you enjoyed it