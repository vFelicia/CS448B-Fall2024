hi and welcome to lesson six in the previous lesson you learned how to write some basic Swift code well let me ask you something how does a user usually interact with an app well it's usually they tap on something on the screen let's say a news headline and then the app gives a reaction such as showing that news article action and reaction well that implies that when the user takes an action depending on what that action is the app needs to react accordingly and run the appropriate block of code depending on what the user is doing so we need a way to organize our code into bitesized chunks so that when the user takes this action we run that chunk of code and when the user takes that action we run that chunk of code well Swift has something called a function and this is basically a block of code where you wrap it up with a name and when you want to run that block of code you can just call it by its name so that's what you're going to learn how to do today let's roll all right so we're gonna create a brand new playground here and we're gonna try out these functions so let's get started with a playground under iOS let's choose blank and I'm just gonna save it on my desktop and call it my playground all right so we're gonna just go down here create a new line and we're gonna type in f U and C space now that keyword is used to declare a new function next part of the function is the name of the function now this is important because whenever we want to run the code that is inside this function we're going to call it by this name that we're gonna give it right now so I'm gonna call this function say hello now the next part of the function is a pair of rounded brackets so find that on your keyboard typically it's right above the 9 and the 0 so you're gonna have to hold down shift I'm gonna type those two rounded brackets now inside those rounded brackets right now we're not going to put anything in there but you can have something called parameters which is something you're gonna learn a little later in this lesson all right now next we're gonna hit space and we're gonna open up a pair of curly brackets or squiggly brackets some people call them and you got to find these on your keyboard for my keyboard layout it's above the square brackets so I'm gonna hold down shift and type in a pair of squiggly brackets or curly brackets I'm go inside it and press ENTER a couple of times to create a few lines you're going to write your code for your function in between these two curly brackets think of it as the guts of the function so whenever you call say hello the code in between these curly brackets it's going to get run I'm gonna print out in here hello right now let's go outside of the function and by outside I mean after this ending curly bracket we're gonna just call the function by its name say hello and notice that autocomplete already brings this up but let's type it out just for extra practice so we're gonna use the name of the function followed by the curly brackets all right now let's run this line of code you'll see down here it's going to execute this print statement and it's going to print out hello and if you don't have this tray at the bottom you can open it up like that when you write a function you're usually writing some code to perform a specific task in our example before you wrote a function to display the full article and when the user taps on a news headline in the app you're going to call that function to display the full article for that headline now let me present another scenario what if there are 10 news headlines in your news app are you going to write 10 different functions one to display the full article for each headline of course not furthermore the news changes every day so you wouldn't be able to write a function to show a news article that hasn't happened yet right instead you're writing a function to do the work to present and display a full article to the user that function doesn't care or doesn't know about what sort of article it's going to be presenting and displaying you as the coder basically pass that information into the function when you call that function you can do this with something called function parameters remember those rounded brackets in the function call well you can specify the parameters in between those rounded brackets that indicate what sort of data you're passing into the function when you're calling it in the example below we declared a function called say hello to in the rounded brackets you have a parameter called name and it's of the data type string now that kind of looks like a variable declaration without the VAR keyword whenever you call to say hello to function you're going to have to supply a piece of string data into that function call now let's jump back into our playground and see this in action all right before we jump into an example with parameters let's first add a comment up here in terms of call this a basic function remember this is something you should get into the habit of doing and I also want to show you if it wasn't clear how to use the autocomplete feature because trust me you're gonna be using it a lot so why don't I type say hello you're gonna notice that it pops up right here now you can either hit enter right now or you can press up and down on your keyboard to select a different one and you can even use your mouse and you can scroll down the list and so here I'm just gonna double click it alright so now let's do a function with parameters so again we're going to type in a few and see space for declaring a new function and this time I'm gonna call it say hello to and we're gonna specify the rounded brackets just like before except that this time I'm gonna move my cursor inside the rounded brackets and we're gonna put a single parameter in here let's call this parameter name we're going to specify the data type it's just like almost like declaring a variable like we did in the previous lesson alright so now we're going to open up a pair of curly brackets and we're going to some space in there and here we are going to print out the name that gets passed in and the way you can do that is just by referencing that parameter name so we since we called it name we can just say print name so what effort data gets passed into this function when it gets called we are going to be printing it out into the console so right now even if we run the code it's not going to do anything we actually have to call the function so here below the function let's type in sa Y and you can see that now autocomplete shows you the second function that we just wrote so go ahead and select that and press Enter and this highlighted blue part is telling you that you need to specify a piece of string data along with this function call so why don't we go ahead and I've been Tom there and then let's run this line of code at this point so you're gonna see Tom there right and that's just a result of us passing this piece of data into the say hello to function so that's going to come in through here and then it's going to take that string data and print it out to the console and that's why we get this result down here now what if we wanted to say hello Tom instead well we can't do that and I'm going to show you a really neat way to do that so let's erase this name here and instead let's print out a string called hello space and we can actually insert that name parameter into the string and the way you do that is backslash and then type in a pair of rounded brackets and inside the pair of rounded brackets you would just put the name of your parameter or variable or whatever you want to insert into the string now let's run this function call again now you get hello Tom now in this example we've done one parameter you can actually include multiple parameters into your function all you would have to do is inside the rounded bracket after the first parameter just have been comma and now you can require a second parameter so let's make this one age and this datatype for the age is going to be an integer so immediately the playground is going to complain that this function call is no longer valid and it's right it's missing an argument it's missing this parameter called H so what I'm going to do is just completely get rid of this line I'm going to type in s a Y and you can see here that autocomplete has detected we've changed that function so the double click it or press ENTER and we're going to fill in the parameters that are needed now here's a neat trick as you're filling in the parameters here if you press tab on your keyboard it just automatically jumps to the next parameter that you need to fill in so that's a shortcut that's going to help you so let's type in something like 20 years old and let's run this code now again it just says hello tom because we haven't included the H parameter in this print statement so why don't we modify this piece of text you our backslash rounded brackets let's insert that H years old and now let's run this function again and now you're going to see down here hello Tom you're 20 years old now you can actually specify more parameters but I wouldn't go to too crazy with this in the future as you're going to get more advanced with Swift are going to learn ways to combine pieces of data together into one parameter and so you don't have a long long parameter list that you are going to require but for now if you wanted to include you know two three four or five parameters just to play around feel free to do so it's going to be good practice there's one thing that I want to mention and that is that you can actually omit these parameter names right here so it's going to I guess save you a little bit of typing sometimes it can be nice to have them so that it's really clear what sort of data you need to pass in but let me show you how you could do a function call where you can omit this all you would need to do is back in your function declaration here you would just include an underscore space in front of that parameter so we're gonna do the same thing with the age here and then we're going to get rid of this line in fact Xcode is now or a playground is now telling you that you don't need these things so let's get rid of this line and again use autocomplete and you can see there's our function visually here it doesn't look any different but if you press ENTER you can see that this whole thing is highlighted now and when you add your parameters right it's just gonna look like that for your function call so what you're actually doing here by adding this underscore is you're omitting something called the argument label now I'm not gonna get too much into it right now because I don't want to confuse you with a lot of knowledge that you don't need right now but just know that that's something that you can do I will link to some resources in the description if you want to read more into it but if even if you don't as your going to get a little more advanced with Swift and you're going to learn more about functions you will come across this knowledge anyways so it's not nothing to nothing that you need right at this moment now you know how to write functions which expect some sort of input data to work with another great use of functions is to take that input data processed it and transform it and then return it back to us now functions can do this using the return keyword in the function below it takes an integer input it adds 4 to it and then it returns the result back to us now notice that after the rounded brackets there's an arrow followed by the data type int now this describes the type of data that the function will return when you call it now let's go back to our playground and we'll try this out alright so now let's try out a function with the return value so why don't we just type in a new comment here with return value and I'm going to create a new function by typing F UNC space and then I'm going to call this function add four two and you guess that we're going to add a parameter in here I'm going to call the parameter X and it's going to be an into data type and here is where we get to the return value part so we're going to type in a a greater than sign space and here we indicate the data type of the value that is going to get returned by this function so since we are simply taking it in an integer and we're going to add 4 to it it makes sense that what we're returning out of this function is also an integer so that's what we type in there and then we are going to hit space and write in our curly brackets there now I'm going to open up the curly brackets a little bit so we can type some code in between them and what we're going to do here is we're going to create a brand new variable here let's just call this sum and the sum is going to be equal to X which is the value that gets passed in that integer and we're going to add 4 to it now from here you can see that the playground is complaining that we're missing the return in a function that is expected to return an int datatype and it's right because we need to return this sum the keyword that we use is actually just a return so type in return space and we are going to pass back the sum so if you let let Xcode run or maybe you can run your code at this point you're gonna get rid of that error so let's try this out let's try calling this function ad d4 and autocomplete brings it up let's hit enter here we're gonna pass in let's say 10 let's go ahead and run this function at this point we don't really see anything I mean you see some you see the result in the preview here but like I said we're gonna pay attention to the so nothing gets output here well where did that 14 go right what's actually happening here is it's passing intent into this function right through this parameter then it's adding four and then it's returning the sum and we are actually responsible for capturing that data so in fact what we have to do here is we have to type in var and say result equals the execution or the return result by executing this function so if we print result and we run this code we're gonna see 14 down there in the console so just to run it through one more time what's happening here is we're executing this function we're passing intent as a parameter then this code inside this function gets run right it's gonna take 10 which we passed in it's gonna add 4 to it it's gonna sign it to the variables sum and then it's going to return the data sum right and that's going to come back here and that sum gets assigned to result and we're printing the result now one question you might be asking yourself now is why do I have to use return values why do I have to use this return keyword here why can't I just access some right here why can't I just say print sum so why don't you go ahead and try that and run your code and you're gonna get an error that says use of unresolved identifier sum and if you scroll up here you know that's the same error message but it's basically saying that it cannot find anything called sum well what do you mean we have some declared right here inside this function this brings me to my next topic which is variable scope you see the code that is inside this function right here is inside of its own scope so any variables you declare in here only exists within that function and that's why in order to get that data out you have to use the return keyword what I find helps beginners to grasp this concept is by thinking of the code inside of the function as existing in its own little bubble so anything that you know the code that you write here the variables that you declare inside that function is in its own little bubble and in order to get that data out you're going to use the return statement here now another thing I might add is that each function has its own scope or its own bubble so if I let's say declared another function let's just call this C and I you know I try to print some in here I'm also going to get an error right because some exists in this functions scope I can't access it anywhere else each function has its own variable scope now I know this variable scope concept is a little bit abstract but what's going to happen is that as you're writing more Swift code and you're building your apps you're going to run into issues where you're trying to access this variable inside the scope and then you realize that you can't and it's just something over time that you're going to realize and it's gonna click if it hasn't already clicked for you so I guess what I'm saying is that give it some time and don't worry if it's kind of confusing to you right now what I'm saying is that as you're writing more code and you're building or apps you're writing more functions these things are gonna fall into place for you so let's erase that test function and let's address this thing it's so annoying this variable sum was never mutated consider changing to a let constant so this goes back to what we talked about in the previous lesson when should you use variables and when should you use constants well I told you that you should default to using constants and then if you find out that you need to change up that data and you get an error to say that you can't change it up then you can consider changing that led to a var and using a variable instead so here Xcode is warning you that hey you know you declared some as a variable but in fact after you've assigned some data to it you never ended up changing it so why not use a constant and so Xcode is being very helpful not annoying in fact let's change that to a let and we're all good now Before we jump to the next lesson one last thing about autocomplete so I want you to notice when we typed in ad for this right here this is the return value so when you're looking through different functions to call this is very handy to understand what sort of data this function returns what happens if we try to now call one of these guys say hello or say hello in fact these guys they don't have return values right so what happens when we try to autocomplete that well it says void void basically means no return value so that's what it means and why why does void say that because in fact let's go back to the basic function here in fact right here the return value is actually void it's just that we don't have to type it when it's void so you can actually specify a return value of void which is basically no return value and you don't need a return keyword so that's just a neat little fact all right when you don't need a return value you don't need to specify this part of the function declaration you can kind of omit it but the interesting part is when you use autocomplete to call this function it still says that the return value is void all right so today you learned about how to organize code into functions you've learned about input parameters which let you supply functions with input data you've also learned about return values which let functions return data back to us and finally you've learned about variable scope which is basically all of the variables and code inside of a function only exists within the scope of that believe it or not there's still a lot more to functions but what we've covered so far is more than sufficient for now now I've got a worksheet for you to practice and solidify what you've learned you can grab it by clicking the card over there or checking the description below now I want to turn it over to you we're two lessons into Swift with one more to go do you feel like you've got a grip on things so far let me know below by saying yes or no now if you liked this video please consider subscribing to my channel by hitting that subscribe button below and also click on that bell notification icon if you don't want to miss the next episode now go ahead and click on that thumbnail over there and I'll see you in the next lesson