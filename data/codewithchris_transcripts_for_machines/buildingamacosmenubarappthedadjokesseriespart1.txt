hi my name is stuart lynch and in this video i'm very pleased to be able to offer you a tutorial on how to create a mac menu bar app this is an app that runs from and is attached to an icon in the menu bar you likely have many of these right now in your menu bar i have so many that i use an app called bartender to manage them and i have a 39 inch monitor so what are we going to build well i'm an old man and my son groans when i tell him some pathetic joke these are commonly known as dad jokes well for me and my old crony friends it brings a smile to our faces so i want to get a new joke whenever i feel like it i found this website hosted by gillian gilsing a dutch student and web developer that generates a random joke it has an open api that allows us to fetch a joke from one of four different categories the api is a json api so we can use our swift skills to create a codable struct that we can use the new asynchronous methods of ios 15 to fetch the data and then decode it to present the joke now i'm going to be borrowing code that i used in another series i prepared for chris and there'll be a link in the description the main focus of this video is to create a menu bar app and this is what we're going to create when we build and run our app you'll see a new code with chris icon in the menu bar when you tap on the menu for the first time a new joke from the dad's joke category is presented to you you can tap on it once more and another joke is generated tapping on any of the other buttons will generate and present a joke from that category and it saves your selection so that when you return to the menu the next time the generated joke is from that category this view here is a simple view built with swift ui in addition though there are some other menu items there's an about menu that generates the about information for your app and it retrieves information from the info.plist to display on the screen including an app icon and we're presenting some additional custom information here that allows us to provide credits to those individuals whose knowledge has helped in the creation of this app there's another menu called code with chris that simply opens your web browser and goes to the code with chris website and finally there's the quit menu with a command key shortcut that we can use to exit the application and remove it from our menu bar so that's what we're going to be building and i'll also show you how you can notarize your app so that you can pass it on to others so they can install it without having to go through the app store if you're interested keep watching okay the first thing we need to do is to create a new app what is important is that you select mac os template and the app application click on next and call it dad jokes making sure that the interface is swift ui in the language swift click on next and save it to your own location of choice as always for me i create a git repository this is important for me because i actually code the next part of the video first in preparation and then i roll back to my class commit and code it again while recording this video i've created a number of resources for this tutorial to speed things up a bit and you can find those and download them from the link in the description i have this app icon so i can go to the assets folder of my app and delete the app.icon folder here and replace it with the one in that resources folder it's a code with chris icon and it only has the mac assets in it no ios ones i have two images as well that we'll be using first is the dad i.e me so drag and drop it to the assets folder this will create a 1x image which is fine though not optimum on large monitors but it'll do for here the second is an svg image of the code with chris image and we'll be using that for the menu bar icon so drag it into the assets folder as well but for this item we can change the scale to single scale and we do that by revealing the inspector and changing the scale there and finally as i mentioned i'm going to be fetching data from the api so i'll use an api service that i created in that series again the links are in the description so add that to your project making sure that you copy items if needed and that your dad jokes target is selected most of the action for our app happens in this single joke view so what i want to do is to change the name of content view so that it is joke view and we can do that via the refactor menu don't forget to change content view previews as well so this is what our view is going to look like but before we do that we have to set our joke categories and for this i'm going to create an enum with an associated type of string so create a new file and call it joke type inside that file create an enum of the same name with an associated type of string it will have four cases each representing one of the different types or categories and for the string representation i'll just use a more descriptive string so chuck norris which is the name chuck space norris will split up dad joke to be dad jokes random will be random capitalized and yo mama will be yo space mama next i want to have another computed property that's called type and that is a string property that will be exactly the same as the cases representation as a string so we can switch on self and then we'll let xcode generate the cases for us and return the same thing also because we'll be decoding from the api we'll need to make the enum conform to codable and i'm also going to be looping through each case to create four buttons so i'll make it case iterable as well so let's return to that api and we'll see that the api provides a standard format in json each request returns a single json object with four key value pairs one for status as an int one for response one for joke and one for type and they are all strings so we can go back and create a struct called joke that will have these four properties and as long as it's marked as being codable we can decode to an object of that type so we'll return to xcode and create that new file called joke inside there we'll create a new struct called joke and conform it to the codable protocol next we'll create those four properties and since we'll only be reading and not updating these properties they can all be let's status as i mentioned as an int response as a string joke as a string and type as a string well now we have enough information then to code the joke view and actually test it in the canvas now joke view is going to need three properties one for the actual joke so this was a string state property that i'll call joke string and we'll initialize it first simply saying no joke available while we're fetching our joke we want to display a spinning progress view so we can show this or hide it using a boolean state property so let's call it fetching and initialize it as false and then finally i want to be able to remember my last selected category well i can use app storage for that and give it a key joke type and declare a variable of the same name as joke type type and default it to the dad joke case so the first time the app launches it'll fetch a joke from the dad joke category for the view then i want to replace the content of the body with a vstack inside there i want an hstack let's change that alignment of the hstack to center on the hand side i want to display that image of the dad me i'll set it as resizable and then set a frame to be 60 by 60. to the right of that i want a v stack with four buttons for each one of our different four categories or enum cases and because it's case iterable we can use a for each loop on our joke type dot all cases so long as we specify the id as self this provides us with an item that we can reiterate over so i'm going to create a button and the label will be a text view displaying the item's raw value now i seem to be getting an error here it doesn't recognize the joke type oh i see i have a typo in the enum definition so let me fix that that's better for the foreground color which is the color of the text on the button if the item is the same as our stored property joke type then we'll make it red else we'll change the color to the primary color i'm also going to set the frame of the entire vstack to be a height of 130. now if we're fetching a new joke we want to display a progress view else will display a text view using our fetched joke string and just in case it's too long to fit we can set a minimum scale factor of 0.5 let's push it all up to the top of the view using a spacer and then add some padding i'm also going to set the frame of our preview to look more like what i'm going to have in our menu so i'm going to set the frame here to be a width of 225 and a height of 225 to fetch the json let me return to the website and i see that they have here an async function this is not swift but i can capture the url string so let me do that and copy it to my clipboard back in our joke view i'm going to create a new function called get joke that has one parameter and that's the type that is a string and this is going to be an asynchronous function i'll paste in that copied url and i'll change the single quotes to double quote and use string interpolation for the type if we check out the api services get json function that we created in another series i see that it'll fetch and decode the json asynchronously and return some type and we'll have to specify that as being a joke if there's an error it throws an error using an api error and that api error has a localized description error string that we can use so we can now create an instance of that api service class and i can pass in the url as the string before we fetch however we can toggle the fetching boolean so that the progress view starts spinning and then we can use a defer block so that when this api service fetch is completed it'll toggle it back again and remove that spinner now since the get json function is a synchronous and can throw an error we can use a do catch block we'll let the joke of type joke be the result of trying and waiting for the api service get json result when it's completed we'll set the joke string our state property to be the decoded jokes joke property and then if there is an error we can simply set that joke string to be that errors localized description now whenever the view appears we can use the task function to get json passing in the joke type and a wait for it since it's asynchronous also when we tap the button to change the type we'll set the joke type to that type's type property and then create a unit of work called a task that will again await for the get json for that type to return if i resume the canvas now i see that there is an error in our string and this is a transport security error and that means we're using http instead of https this url fortunately can also be https so i can solve that issue right now it produces another error saying that the host name couldn't be found and i believe that's because we're sandboxed and since this will not be sent off to the app store i can go to the entitlements and change this right now to be no if i return to the joke view i'm getting a joke if i click on the preview button unlike ios a mac preview spawns a new window that i can bring forward and i can tap on all the different categories to get new jokes perfect it's time now to move this view into our menu in order to create a menu bar app we'll need to create a mac menu and this is an ns menu and we need to do this when the application launches in the app delegate well we don't have one yet but we'll get to it first let's create a class that will generate that menu showing our custom joke view so create a new file and call it application menu import swift ui create a class called application menu that conforms to ns object then create a property called menu and initialize it as an ns menu object next create a function that we can call when we get everything set up in our app delegate that will add all of our menu items right now we'll only have one and let's call it create menu and it will return our completed ns menu with all of its items inside there create an instance of joke view next create another property called top view that is an ns hosting controller where the root view is our joke view so this is going to be the top of our application in our menu bar so we'll set the top views view frame size to be a cg size of 225 by 225 and that was the frame size that we use in our preview remember next we'll create a custom menu item and initialize it as an ns menu item we'll set the view of this menu item to the top view view and now we'll need to add this item to the menu i'm going to follow this with a separator because i'll have more menu items to follow and then i can return the menu well we have to now return to where our app launches and no longer launch into the joke view instead we'll need to present this as a menu bar item so for this we'll need an app delegate so start by creating an appdelegate class that conforms to ns object and the ns application delegate protocol we can declare a static private set variable called instance of type app delegate next we lazily declare a status bar item variable that is an nsstatusbar.system.status item with a length that's a variable length and a status item next we can let menu be an instance of our new application menu class we can now then create an application did finish launch function first we'll assign self to the app delegate instance next we can assign the status bar item buttons image to be that image that we have in our assets folder this is an ns image named ns image.name cwc for code with chris we'll set the button's image position to be image leading then we can create the menu by calling the application menus create menu function that we just created back in our struct now we have to set the ns application delegate adapter for appdelegate.self to be our appdelegate variable and then we can replace the body simply with settings of an empty view that's it it's time to test if you run your app now you should see a new code with chris menu bar item and when you tap on it the spinner shows and then a random dad joke is generated and posted to the screen you can click on any one of the buttons and a random joke in that category is generated and presented there is one issue though not only is this icon in the menu bar but it's also in the dock and we don't need it in the dock we'll need to remove it from there so return to xcode and then select your target and go to the info plist tab if you hover over the last item in the list click on that plus button and select then application is agent ui element press enter and then change the boolean value for the entry that we just made to yes the next time you run the app there will be no icon in the dock well we're getting there but we still need to do a couple more things and that is to add some more menu items below our custom view one to show an about menu one to take the user to the code with chris website and then one to exit the application so let's create that about menu like all mac apps should have and we do this by creating an about menu item but we'll need a function that will present this so within our application menu class create a function that's marked with the object c attribute so that it's exposed to the objectivec runtime call the function about with a single argument sender that's an ns menu item and then the body of this function is simply nsapp dot order front standard about panel well now we can create that new about menu item and that's an ns menu item that has three properties for the title it'll be the string about dad jokes the action will be a selector using our just created about function and for this we're not going to add any command key equivalent so we'll just use an empty string now that we have that we can set the about menu item target to self and then add that item to the menu if we run the app and choose about dad jokes from the menu item shown below the custom view we can see the about menu that's taken its information directly from the info p list but i also want to use this about panel to display credits to those articles that help me develop this app in the resources folder there's an about menu credits text file it lists the three websites that i've used one for the api one for the inspiration and help with the code and the last one about what we're doing right here right now so copy this string here to your clipboard return to xcode and create a new xcode file and search for rich text file and call it exactly credits make sure you use a capital c you can paste that code in there and it's simply a rich text editor and we'll select and center that code that's all we have to do if i run the app once more and select that same menu item you'll see now the credits that was easy two more things to go next up i want to provide a menu item that will open safari and take me directly to the code with chris website so like before let's create the function first it's just like the previous one in that we give it an object c attribute i'll call the function open link with that single argument sender which is an ns menu item now i'm going to have to let the link be the senders represented object we haven't got that yet but we'll cast it as a string and then i can do a guard check to see if it's a valid url else i'll just back out and return if it is then we can call the nsworkspace.shareds open function for that url and it will open the web browser now the ns menu item is formed the same way as the last one so let me just copy it and i can change the name to be web link menu item the title that we'll use will say code with chris and the selector will be our open link function and we'll leave the key equivalent to be empty here as well we'll set the weblink menuitem's target to be self but we do need that additional property now and that's the represented object and for that represented object we can use the code with chris website string and then once we have that we can add it to the menu now before we test let's just add one final item the quit menu again first the function and it's another objective c function that we'll simply call quit again having that single argument sender which is an ns menu item in the body of the function we simply call the nsapps terminate function passing in self for the menu item then let's copy the code from that first menu item and change the values we'll call it quit menu item the title will simply be quit and the selector is that quit function this time however i'm going to pass in a command key and i'll use q this is the quit menu item and then finally we'll add it to the menu when we test now we see those two new menu items the last one having the command key shown first if we test the code with chris item a web browser opens and takes us directly to the code with chris website and finally i can either use the keyboard equivalent of command q to quit the application and remove it from the menu bar or simply select it use my mouse one final thing before you can share this with others you have to notarize the app and that means you have to have an apple developer account to build and notarize an app the first thing you do is from the product menu choose archive once it's been archived the organizer window will be displayed choose your app and click distribute app choose developer id from the list and then click on next choose upload to send it to the notary service and then next again resign the app for distribution then click on next once more and click on upload once it's been uploaded you can close this window shortly you'll get an email from apple like this telling you that the app has been notarized back in the organizer then you can choose your app and click on the export notarized app this build can now be shared with others you can zip it up and send it off for distribution this was a lot of fun to put together and i hope you have some ideas for your own menu bar apps thank you so much to chris for hosting this video and thank you for watching