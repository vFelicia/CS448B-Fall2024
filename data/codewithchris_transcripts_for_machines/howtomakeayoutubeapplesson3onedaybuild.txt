hey coke crew in this lesson we're going to do quite a bit we're going to review the YouTube data API together and then we're going to create all of the classes and structures in our Xcode project that we're going to need in order to work with the API and finally we're going to implement the API call to the YouTube data API so that we can fire off the call from our app and see if we can get a response and I'm also going to show you a cool network debugging tool that's going to come in really handy for working with api's in the future just a quick note if you're jumping into the series at this point you kind of need to watch these lessons in a progression for it to make sense first make sure you've watched the 29 lesson beginner series to get the basic skills then make sure you're watching this YouTube app one day build lessons in order links to both of these playlists will be in the description all right let's start by looking at the YouTube API if you just Google YouTube API you'll find this YouTube data API result that's the one we want click into it and actually one thing I want to explain if you don't know what an API is I've got a video I'll put on the screen right now that describes to you what it is it's basically a way for you to interact with other platforms such as Twitter Facebook Spotify you can pull data from the platform you can write data to it but that API really controls what you can do and each platform is different so there's documentation for every for each API on each platform so this is the YouTube one let's go down to api's explorer to see what we can do with this API now before we dive into the endpoints on the lefthand side for the API I just want to draw to your attention that every time you make an API call to the YouTube API you need to specify some sort of identification now that comes in one of two forms either an API key or an OAuth token so in terms of the API key that's something that you can sign up for for free and it identifies you as a developer so every API call that your app makes to the YouTube API will have that API key and it's going to identify your app this is to make sure that they can identify who accesses the API and also to set limits for each key again that's something that you can sign up for for free however you with an API key you're limited in what you can do you can only read data if you want to insert update or delete data on the platform then you need to also use this second form or rather instead to use that form of authentication and this is where the user actually signs in so I'm sure you've used the apps before where you actually have to maybe like Instagram apps or u2 apps where you have to sign in with your account and that's what this is and the reason why this is needed to insert update or delete requests is because those actions are associated with a specific person right so if a person wants to subscribe to a channel that action you know write some data to their database but they have to identify you know who is subscribing so that's why they need to sign in and generate this AA token for our demo app right here an API key will suffice because we're only pulling data from the API we're reading the playlist data and the video data so we will be using this form of authentication all right on the left hand side there are various endpoints where you can get data from and write data to channels you can see playlists playlists items videos and so on and so forth the one we are actually interested in for this app is playlist items now play this endpoint right here this endpoint only gives you information about the playlist it doesn't actually tell you what's inside and so that's why we want playlist items so let's dive into one of these documentation pages in your own time you can dive into these individual pages if you'd like but all of them follow the same format in terms of the documentation first of all it explains to you what this endpoint is you know why you would want to use it and also it tells you the different methods you can do with this endpoint and so listing is just gathering info or reading info inserting updating and delete that's pretty selfexplanatory and then in terms of the response that you get it's in JSON format this is an example of a response if you don't know what JSON is again I have a video for that it usually goes handinhand with working with api's because API is usually return data in a format like JSON so if you haven't seen that before I'll put the video on the screen and you can learn more about JSON and how to read it so yes this is a an example of it the other cool thing that you can do is you can actually try this API so for example if you click list right here there will be this API Explorer pane on the right hand side you can actually just click this blue button to bring it back up now each API call has a set of parameters right that you need to specify some are required some are optional the ones in red are required so let's take a look at what this required parameter is and you know what sort of info you need to pass in you scroll down a little bit there's this table here called required parameters and part you can read what it means here but in general or basically it it dictates how much data you want to get back for each video playlist item so for us we're gonna want snippet and that's gonna give us the at least the video ID the thumbnail the title description the publish date those are the pieces of info that we want and with specifying snippet we're going to can it's going to contain all of the properties we need I think content details is the most indepth one now the reason you wouldn't just want to specify the most indepth one is because the more data that you need coming back at the longer the API call is going to take and plus I mentioned the quota it might take more quota points you know in each in this case specify snippet costs to units and content details also cost to units but again I don't need that much detail and I would rather have the eight i call come back faster all right so let's try it so in here I'm gonna specify snippet for the rest of these I don't need to specify except playlist ID you scroll down this specifies the unique ID of the playlist for which you want to retrieve the playlist items so I definitely want to specify that the playlist I want to get is actually my most recent uploads from my channel and I'll show you how to get the playlist ID for any channel so whenever you click on a playlist on YouTube so let's just go to mine first I'm gonna go to my channel click on videos and then I'm gonna click on play all and when you do that let me just pause that at the top you're going to see a parameter called list and that represents playlist so you see list equals and then you're going to see an ID this is the playlist ID so let me just copy that and go back here and specify that as my playlist ID now again there are those two different ways you need to identify yourself either o auth token or API key since we haven't signed up for an API key yet we're gonna do oo so when you execute this it's gonna pop up a little window for you to sign in with your YouTube account so it can identify you and so this action requesting data from this playlist is going to be done against your account right so it can identify that you're the person who's doing it so I'm gonna choose execute it's gonna pop up so I'm gonna go ahead and choose my account and I'm gonna grant permission to it to execute that API call and here you can see the response is 200 which represents it was a success and you can see the response that has come back now this is JSON right here with all the data you can see in particular this is this key items contains all of our video items it's an array if you know how to read JSON that square bracket is the start of an array and inside the array or you know the data for each of the videos so here is let's see here's the published date we're gonna need to change that to a pretty date there's the title of the video description of the video thumbnails different resolutions and also if you scroll down a little bit more there is the video ID and this is something we're going to need in order to play it the video clicking show code is actually very interesting because it's going to also show you well it's going to give you a bigger window which lets you see the data in a better way but it's also going to show you the exact API call that it made so if you take a look at this this is the API URL you know for the playlist items endpoint and you can see the parameters that we specified here snippet right here is playlist ID and that points to my playlist and the last parameter is key we're going to be using API key like I mentioned and we're going to be pasting that key in here so we're gonna take note of this URL because we're going to specify this inside of our Xcode project for the app to call alright so why don't we actually dive into our Xcode project this is the project we created from the last lesson and the first thing we're going to do is create a brand new file a constants file to store all of the configuration details so that we can update them from one place if we need to and that way we don't have these hardcoded strings floating around basically pieces of text if we need to specify that API key more than once we can use the constant instead so I'll show you how to do that I'll make more sense let's use Swift file and let's choose constants and then here we're gonna create a new struct called constants and we're gonna specify our API key here make a static far some people like to use all capitals to specify their constants and you can definitely do that it's really a stylistic preference choice just make sure you're consistent with it in this case I will do it in all caps so we have our API key we have our and in case you're wondering if you're not sure what this key word means it it the basic gist of it is that we're going to be able to access these variables without having to create a new instance of constants so it's perfect for for what we need here okay so we have also playlist ID and then we're gonna have the API URL okay so let's start filling in some of these details so if we go back to this I mentioned we're going to need this URL so I'm just going to copy this guy right here and that is our API URL but we're going to replace some of the data in here with these two other constants here so for example this playlist ID we can extract it from this URL just in case you know in the future we want to change it so I'm gonna cut that and paste it right there and instead I'm gonna replace it make sure you don't lose your place write equals and I'm gonna sort of substitute that variable constants dot playlist ID all right that's how we're able to access this variable right without creating a brand new instance of constants and this is how you would do it throughout your project same thing with API key instead of API key we would actually put the API key in there once we have it but we would do that right here all right so now we have to actually sign up for an API key right and then we'll be start we'll be able to start hitting this API okay so how do we do that if you go all the way back to overview where it told you how to call the API you'll see this link to the developer console by clicking this she I'm going to just open it in a new window it might ask you to sign in but creating an API key is free and it's pretty straightforward alright so this is taking too long to load so I'm just going to close it and use the window that I had that was open so you should see something that looks like this go up here under API project and what you want to do is create a brand new project that represents you know your app here so I'm going to call this YouTube API demo 2 since I've done this twice let's click create and it's going to start creating your project so you can see here I created one just an hour ago preparing to record this video so give it a second all right it's done so let's you can either click view or here in the dropdown you should see it here so go ahead and click into your new project and this is where you're going to choose the api's you want to work with in this project so click enable api's and services and let's look for YouTube and we're going to choose YouTube data API v3 so go ahead and hit enable as soon as the buttons gonna show up boom and then alright after that you're going to click credentials here and you're going to generate a brand new API key see you have nothing here click create credentials and then choose API key I'm gonna copy this and then I am going to just change the browser window go back here and I'm gonna paste it alright at this point we are done with our constants file so now let's go and create some of the classes we'll need to work with this API the first one we're going to need is a class to represent each of the videos that we are going to get from the API so let's create a new struct called video so let's choose new swift file and we're going to name this video and this is going to be a struct called video and we're gonna put the properties that we need in here earlier I mentioned the ones that we need and we looked at the JSON response from the API and I pointed out all of the different places we're gonna need to pull that information out right if you remember it was video ID it was the title of the video it was the description of the video it was also the thumbnail URL and lastly it was the publish date so we'll just call this published so this struct is going to represent each instance of this is going to represent a video that we're going to display next we're going to create a model class which is going to actually make the API call and pull back the data and then send it over to the view controller so let's go ahead and choose new file let's choose Swift file again and we're gonna create the model this one's going to be a class and right now we'll just have one function called get videos and in here we're going to make that API call now if you watch that JSON video about parsing JSON we show an example of making an API call or it might have been the API video in either case you'll find the links for them in the description below but the Iowas networking classes we need are URL so first we need to create a URL object and this points to the endpoint right of that the YouTube data API and then we're going to need to get a your all session object and URL session is a class that basically does all of the networking stuff I'm you know I don't actually know the inner workings of it to be honest with you but it contains all of the does all of the networking heavy lifting and get a data task a data task represents a single call to the API and by air kickoff the task and this is very important because I always forget to do this I you know create the data task and I write the code for what happens when the response comes back but I always forget to kick off the pass so this is going to make sure that I hang remember all right so let u RL equals u RL a new object and there is this initializer where you just pass in the string it returns an optional Ural object so it may it may create it it may not let's go ahead and specify our API URL and because this may be this may be nil so let's guard against that guard URL not equals nil else for now I'm just going to return let the session equals URL session dot and shared Oh before I do that let me just show you what it is shared singleton session object and if I just put my cursor on this we should be able to see object had coordinates a group of related network data transfer tasks providing an API for downloading data and uploading data to endpoints indicated by the URLs all right now we're going to create a data task so did let data task equals and we create one the session the URL session and it has a method called data task where you pass in the endpoint URL you want to hit there's this one but this one doesn't give us a chance to write code for what happens when it comes back and so I actually really want to use this one instead with this completion handler parameter so let's double click that and for the first parameter we're gonna specify URL for the second parameter we get this specified closure or a block of code to handle the response so in this response we're gonna get three input parameters we're going to get the data contained in the response we're gonna get the URL response object itself which will give us the status code and and other information with the HTTP response that we get back and finally an error parameter that contains any sort of error if it would have happened so let's double click that to open up a new closure and I'm going to give names to each of these parameters so let's say data response and error now the first thing we want to do is just check if there were any errors so if error is not equal nil that means there is an error or maybe the data is nil there's no data then we are going to return we'll probably should log some sort of error but for now as we're as we're building I'm just going to set a breakpoint if it ever happens in here then it will stop execution and then we can peek in and see what's wrong and before we go on the parsing the data into video objects before we do that why don't we kick off the task data task resume to kick it off and just see if the app is able to hit the endpoint and come back with a response so inside view controller let's create a new instance of model and call that method so that we can actually kick off that Network call so far model equals new model object and then viewdidload let's go model dot and get videos that's a set yeah let's set a breakpoint right there all right and the way we're going to see if it was a success is to basically use a network what do you call these things a network debugging tool I have one called proxy man and you can get different ones there's Charles proxy man and I can't remember some other ones but this one has a really nice UI and I'm still using the free version perfectly okay what this will do is just monitor the traffic coming in and out of your computer or different apps and allow you to see what you know what was the cross what's the response and then it's really helpful when you're trying to debug Network calls with your apps so let's go ahead and run this app in the simulator and hopefully we're gonna see it show up in oops in proxy man and then we can take a look at the network call okay so first of all it's hit this endpoint it hasn't made the network call just yet I'm going to continue execution like that and okay so it's made the network call and we actually have an error so actually let me see what that error is and SSL error has occurred and a secure connection to the server cannot be made what was the URL that we had was it not the API URL is under HTTPS so okay that's a little strange but let's go to approximate and take a look at to see if we can see that so you can see here under apps this is the our app in this simulator so let's go ahead and pin this guy pin it so we can see it at the top always and before we can actually peek into it we have to install a certificate to see the HTTP response so let's go ahead and do that so that they make it really easy here install to Iowa simulators installed successfully reset simulators boom so those are the three steps all right so let's launch the simulator what I'm going to do is just rerun my project here oh that was pro max I was completely different simulator okay so let's continue execution to fire off the network call I'll just remove that breakpoint and yeah and here see this is the network call that just went out and so we can see what the request and response was okay so the request you can see here this is the request right with the snippet with the playlist ID and actually with my API key and let's take a look at the response so here is the response right we can take a look at the body you can see this time it didn't error out for some reason the first time we ran it you can see it was this one it's red and we got that error this one is status code 200 right it was completed successfully and in the body we can see you know this is all the data that we need right so now we've confirmed that our app can hit the YouTube API and make that call and the parameters are correct we're getting that the JSON response that we need so now what we need to do is just parse this JSON response into those video objects and then we can send it to the view controller to display wow we've done quite a bit in this lesson from here on out I think it's gonna be pretty smooth sailing to be honest if you want to grab my project there's a link to it in the description below just one note I've removed my YouTube API key you're gonna have to create your own and then put it in the constants file alright now I want to turn over to you now that you've gotten a taste of what the YouTube data API is like is it easier or is it harder than you imagined let me know by leaving a quick comment below now in the next lesson we're going to start displaying those API results in our UI make sure you're subscribed so you don't miss it thanks for watching all the way to the end and I'll see you in the next lesson