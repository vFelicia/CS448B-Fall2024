hello welcome to lesson 5 of the firebase tutorials video series in this lesson we're going to go over how data is stored in the firebase real time database so right now I'm looking at the firebase app that we created back in lesson 2 and I simply clicked on database right here on the left hand side and what it presents to me is this empty database here so this is the URL or path to our database that we don't really have to worry about because it's in the config file which we put into the the Xcode project and this line here says that the default security rules users need to be authenticated before they can read or write and we're just going to dismiss this now because we're going to change those rules in the next lesson when we actually read or write data for now I want to talk about this this empty database right here and if you're coming from traditional database background with SQL you're used to tables and rows but you don't see any of that here all of the data in our firebase database is stored as a JSON tree and if you're unfamiliar with JSON it's a notation used to describe objects using key value pairs and they're organized in collections like dictionaries and arrays forming a tree like structure when you're working with thirdparty api's and feeds oftentimes the data is transmitted as JSON because it's lightweight and fast so right here we're going to put in some data into our JSON tree you're not really going to get to see the JSON syntax because this is sort of a visual way but what's important for this right now is that you understand how the data is stored as key value pairs or name value pairs as firebase calls it ok so let's create a simple piece of data here I'm going to click this plus icon and this messaging app see 3680 this is kind of our root node right here and what I'm creating underneath is a key value pair or a name value pair you can think of this name or key as an ID for this value right here I'm going to put customer 1 as Harry that's a simple key value pair where the key is customer 1 and the value is Harry and if I wanted this piece of data Harry I would simply go down this path pass in customer one and get Harry back let's do another one let's say I have another customer and it's Tom so in order for me to fetch Tom I would need customer two now things start to get interesting because we can nest data so let me show you what that means if I add a note here let's make the key customers and for the value instead of specifying a value I'm going to hit plus again and the value of customers is another key value pair so now I have customers and the value what would I get back if I pass in customers is I get back this key value pair instead so now I can start to build out my data like this if I retrieve all the data at this node customers I would get back customer 1 Harry customer 2 Tom now let's build upon this let's say that we have more data per customer we don't just have a certain name like that so oops I think I deleted all of my data here customers and let's say I have customer 1 but instead of the value just being Harry what if we had even more data on him and we had his name was Harry so let's add that but in addition we also have let's say Harry's age so let's say he's 20 so that's you know one customer and we have another ID customer two and the value instead of being Tom you know is another set of key value pairs like that and I have Tom's age as well so now you can start to see why it looks like a tree or why it's called the JSON tree because we have our root node here and then we have this branch customers and then inside there we have a bunch of other key value pairs if I you know go down this path customer one that's the ID I get back another two key value pairs like that so even though you can start to nest things like this you don't want to go too far you can actually go down 32 levels deep in terms of nesting right now I think we're at two or three levels but you don't want to get much further than that because when it comes time to retrieving your data and you retrieve this node here it actually retrieves all of the nested data below it even if you're only looking for one little piece of data you're going to retrieve everything under it so it doesn't it's not efficient to have giant nested trees instead you want to flatten your data so that's something that you want to keep in mind when you're designing your data there is a good article here in the documentation I'm just going to put this link in the description and you can read this little article here it tells you how the data is structured like we've covered a JSON tree here but there's also some best practices for structuring your data and it gives you a couple of examples which you can follow okay going back to the database here so an example of keeping our structure flat would be let's say that I also have purchased data so customer one here Harry he bought let's say he bought two products I could create some more data underneath this tree right here but I can also do it this way where let's say we have another node here orders and the value for that would be let's say you know customer one and the value for that would be let's say order one something like that and it's just that in order to something like that so now I've separated the order data from the customer data so if I just wanted a little detail on customer one I could come through this customers path and grab that data without also downloading all of the order data and if I wanted order data on customer one I could come down this node or this branch of the tree and go down orders and grab customer one and kind of get his orders that way so it requires a little bit of foresight on how you're going to use your data in your app but what you want to think about is how to efficiently download only the data you need for the screen that you're presented to the user essentially so in our messages app the structure is actually going to be pretty simple we're just going to have one node called posts and then each post is going to have an automatic ID I'll show you how to create that and then the message body or the text for that post so now that you know how the data is structured we can start to save data and write data into this database in the next lesson so thanks for watching and I'll see you in the next one bye for now you