in this video we will learn about test driven development and how to write a new feature using tdd hey everyone my name is michaela karen i am a fulltime ios developer and freelancer let's get started learning about tdd so what is tdd it is called test driven development so that means our tests drive our development meaning we write the test before we actually write our future code some of the advantages of tdd is that you only write the code that is needed because we only write the code that we need to get our test to pass our code is then easier to maintain because our tests cover what the functionality is supposed to do so when we end up refactoring something we know our tests must pass if they don't that means we broke something so this helps us with what is called regressions which is when you inadvertently change something that you didn't mean to because you were changing one part of functionality but something else broke our tests also end up documenting our code because the tests tell you what the code should or should not be doing so when you can look at the test you can then see what is the code supposed to do and lastly we have a higher test coverage because we are writing our tests before writing the code what we will be doing is following what is called red green refactor so red means that our tests fail and they don't pass green means we write enough code to make our test pass and then refactor is we make we clean up the code and write it better so i'll show you what that is now so the first step is writing our tests what we are going to do is create a new unit test case so we go here click command n and let's do a new unit test case class and let's call this add update song test and we'll save it there and hit enter and there we go so the first time we did this we tested our song list view model so now we are going to test the add update song view model so maybe we can let's rename this or no yeah let's rename this let's do refactor so right click it refactor rename and when you click the little plus here that make sure to also rename the comment let's say add update song view model test because we are specifically testing the view model not the view and you'll see here the file name is going to be changing as well so we hit enter and then like this little swift icon like disappears because it like loses what happens so i just click command w and close it and then click on it and open it again and then see the icon is like not dimmed anymore so xcode like kind of knows what's happening so again let's go through and delete everything and instead write our own setup in our own teardown so we want to do the calling each test method yeah that one so it's not the one that says the word class somewhere here and let's just type super.setup and do the same with teardown so yeah cleanup after each test method not the test case that one let's do super dot tear down and what we are going to be testing is the add update song view model let's call it so other times you'll see sometimes is what's called sut so that's called system under test we could call this that but uh not that one it's update we could call this like this but it's kind of not clear sometimes it's the class name does make it more clear but i kind of it goes back and forth if you want to call it this or not it's usually dependent on whatever your company says what you should call everything so i'd say follow whatever your company says if you're just doing this on your own do whatever is most clear to you so i like add update song vm so we were using the add update song view model and we will force unwrap that so we don't have to declare an initializer and again we clicked command b and that means build the project of our app target not our test target so if we click command u the build fails because we tried to run our um test target and this doesn't build because when we click on it says it can't find it in the scope and it still says we don't have initializers but it can't find it in scope because we haven't added that at testable import so our last one up at the top we have at testable import and then this is our project name so we will do the same thing over here and we should get this and then this actually needs to be a variable not a initializer so if we instead click the little diamond to run it everything runs and tests succeeds because we don't even have a test in the here um we are going to be testing our add update song view model and let's set up what we have in a setup like last time over here is we declare a new instance of it because here we are just saying this is the type but we want to actually test um we need to actually set it to a value so let's do add update song vm equals add update song view model with a new instance and you can see it takes in an http client and instead of using the real one again we want to use the mock one this allows us to use our mock http client so we are testing our own code not going and testing the network the internet so let's do that and then also in the teardown we will do add up not app add update do i need to put it before okay i did that in the last one too now i did it the other way around okay autumn autocomplete just kind of didn't want to work let's put it back in that order so there we go what we are going to be testing because i haven't actually said is we are going to make sure that we cannot add a blank song because right now if we were to go to the add song so let's click command r and actually run the app we have we've run the app and when we go to add a new song by clicking the plus button we can click add song and we can add a blank row right now we don't want that that to happen typically you'll go through some kind of validation if you want it in a specific format we are only doing strings so it's not super important but we don't want to add an empty string so let's go ahead and delete that from here but that's what we're trying to prevent and we're adding that feature using tdd so we are writing our test first so this is the red part because you're going to write a test right now that fails let's stop the project and an ad update song test let's do funk test no empty song can be added let's do it like that so it's very clear of what this is testing and we want to test we want to assert xct assert whoops true that update song vm dot is valid whoops song is true because we want to make sure that our song is always true and then we can also add a message after here so i don't think we did that in the last one but this would be like your message for more context meaning we cannot or this is more context to what this test is saying because if this just said xct assert true and it's like okay assert true that is valid song if this just said is valid it's kind of confusing like what is valid so in your description here which is part of if you command click on this and then click show quick help this is part of this message and it says that an optional description of a failure so this would say like the song must be valid and it could be written like this so if we run our test the build fails well it's failed because is valid song does not exist yet which is correct because we've written our test but our actual code has not been written so let's go to add update song view model and let's make a new function funk is valid song and this will return a boolean and right now let's just return false because we haven't written anything yet so let's go back to our test and run our test so the build succeeded because all the code is valid but we have a test failed and then you can see when you click on that it says xct assert true failed and then it gives us this message of the song must be valid which gives you more context about what this test is actually asserting what it's trying to say and this is correct it's we are in the red part meaning we have written the test so this is what will happen in the end but we actually haven't provided the code to make this functionality work let's go into that part which would be the green of we make our test pass so let's actually write our function so we want to make sure that our song title is not empty before we actually go and go about adding it so we're just writing the function part right here so let's we have song title declared way up at the top here as a published variable and it's just a normal string so we want to say if song title equals empty so if it is empty we return false because that means it's not valid else if the song is not empty we want to return true because this would mean our song is valid and there's real characters here so let's go ahead and erase that and just write this much so if we go back to our test let's go back and run it and our tests still fail because the is valid song is returning false because we have not set the song title equal to something so if we then add add update songviewmodel.songtitle and we change this to lisa because that's another one of the songs of the band that i have been using if we change our test sort of now and we run it there we go we got a green because this meant that our this is our setup that our we are giving our song a title so this sort of simulates as if we were typing it and then we go ahead and assert that this is a valid song and this returned true because that it meant over here our song title was not empty so it returned true and our test checks that it is true okay so that would be the red green refactor so we've done the red of we wrote a failing test we now just did the green of we made our test pass but let's do a refactor meaning write this in a different way we know that our code will not break because we have written a test for this so let's go ahead and change this to use a ternary operator so if we type sung title dot is empty and let's also trim the white space characters while we do this so if we do sun title trimming characters white space new lines is empty oops false and then true if i take that off so this one line is doing the same thing that this one is doing so we did add something here of trimming any white space so if we were to go to the app click the plus and we typed a bunch of spaces then this would actually fail so we can test that as well by commenting this out so it's still all the old stuff and if we went into here and change that to look like this and let me close that but if we did this so it's a bunch of spaces and ran our test whoops not the breakpoint we ran our test our test succeeds but this is still blank to us so let's go back and change that back to lisa and then over here comment this back in of song title we are trimming all of white space and new lines and then based on what comes out of that then we're checking if it is empty which is the same thing as what's happening here and then we do the same thing if this was empty that means it's not valid so we returned false and if it is empty we if it is not empty we return true so it looks more confusing but we know that our logic will be okay because we have a test that's covering this so if we go ahead and comment all of this out with command and then slash then that should be yep it builds because you don't need the return keyword here because it's technically if you don't count the comments it's the only line in the function so let's go back to here and run our test and we have test succeeded so we know it works but we can also check as well we can even write a new test so we can check everything at once as opposed to putting it keep changing one test because that doesn't really make sense let's do funk test white space song fails so if we do add update song vm dot song title is equal to let's do a bunch of spaces and when we run validate song we want it to fail so we can use xct assert false and do add update song vm dot is valid song and our message could be the song should not be valid so this should the test should pass and the assert is saying is valid song should be false so we can go ahead and run both of these and there we go both of our tests pass and it passes with if we filled nothing in or sorry if passes when we fill something in or when we don't fill anything in and just use spaces so let's go ahead and delete our commented code here and we just have that one line as the function and we have really done tdd test driven development because we've added something new to our um to our application of that function of is valid song we've added it and it is covered completely in code coverage and it's covered by all of our unit tests and there we go that was tdd we were able to add a new function called is valid song and it's completely covered in our unit tests with two different scenarios we have run through what is tdd test driven development where we write our tests before writing our feature code we use the red green refactor methodology and we know that our new function is valid song will always work the the way that we've tested so far so we've tested is valid song with two different scenarios of where we are saying what the song is with the title filling it in and if we just use white spaces so we know for a fact it works under those two cases and we've covered both of those in tests so if we were to ever go back and change our function we know that our test must pass and our function will always perform that exact same way