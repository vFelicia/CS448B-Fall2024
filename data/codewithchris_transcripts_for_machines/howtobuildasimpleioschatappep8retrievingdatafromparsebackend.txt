hello welcome to this lesson where we are going to implement retrieving data from parse into our IOS app right now I'm looking at the parse backend where we saved a couple of messages to um our message table we have howdy and hello and in our xcode project we're going to create a new method to retrieve this data from parse first of all let's go into the documentation here and take a look at retrieving objects right here we have saving objects which is what we went through in the last lesson there's another section for retrieving objects so we get introduced to this class called PF query and let's see change it to Swift first so we create a new query object for a particular class name for us it's going to be message because that's our table right here and then here this method get object in background with ID so what is the ID the ID is something that gets automatically assigned when you insert a row however we don't want to retrieve a single object by specifying its ID and that's the code sample that it gives here uh scrolling a little bit down I didn't see another code sample in this section for retrieving objects uh to demonstrate how to retrieve multiple objects of the same class uh but if we go into xcode we can take a look at the autocomplete methods to see uh what sorts of methods are available with a PF query and actually if we go back into uh the parse documentation here this is the documentation for objects if we go down here for queries and go to basic queries actually this is what we want to look at instead so let's change that to Swift right here uh and here we find that we create a query right for a class name you can specify uh a wear Clause where a certain column would be equal to a certain value if you wanted to and you call this method called find objects in background with block and that will retrieve all of the objects that match this class name and match this criteria where key equals to whatever but we don't have to specify this because we just want all of the message objects so we're going to go back to our xcode project and create a new method in the viewcontroller.swift file I'm going to call it retrieve messages all right and here what we want to do is create a new PF query um call find objects in background okay so VAR query let's explicitly say that it's a PF query create a new PF query object for the class name message which is our table uh and now we're going to say query dot uh find objects and background with block and this block you can doubleclick it this parameter here to expand it uh so the two parameters for this block of code uh there's an array of any object and NS error let's go back to the documentation see what they put here uh they put a labeled called objects for this any object array and error you can put anything in there double click it I'm just going to use what they put as our labels as well double click that and then in here we can Loop through the objects array uh retrieve the text column value of each object and they're PF objects assign it into our messages array what is our messages array if we scroll all the way up here we created a variable up here which is a string which is an array of strings and then in our viewed load method we assigned we appended into it test one test two test three and that's what our table view displays it reads messages array and displays all the strings in there so if we go back to the retrieve messages function what we want to do right we want to Loop through the objects that are returned from the query want to retrieve the value in the text column for each of those objects and we want to assign it into our messages array and then finally reload the table view so that it displays the latest messages from there actually before we do that also we should clear the messages array so uh we don't get duplicate messages you know you're not you're not appending um you're not refreshing the messages and then appending all of the duplicates on there we want to clear all of the messages out of the array and then just have the ones that are returned from the query okay so let's implement this so clear the messages array self. messages array uh just going to assign it a new array object Loop through the objects right so we can use a for Loop here so for message object in objects like that and these two will go into that Loop and after we've looped through all of those message objects then we will reload the table once so retrieve the text column value of each PF object let message text VI a string equals actually it's going to be an optional message object as PF object text why do I have to write it like this let's see any object okay so we got a do that let's do optional casting okay let me explain this line here so I'm creating a new variable called message text it's going to be of string optional type what does optional mean that means that this message text could be nil or it could be an actual string object why could it be nil because I'm not sure what's in this text column of this object now let's explain the part on the right so it's going through the objects array right this is the array that gets return to us from the query and the type of it is an array of any object now any object is essentially what the name applies it could be any object so I have to cast it using this keyword as to tell xcode to treat it as a PF object I know for a fact that the objects that are returned uh with this PF query are all PF objects uh that that's essentially just a parse object so I'm telling xcode to treat this message object as a PF object and then only then can I use the square bracket notation and specify the column uh because that works with PF objects and then it basically gets the value for this column and then I got to tell X code to treat it as a string because xcode doesn't know you know what value comes out of this column we know it's a string so we're going to cast it as a string and why is there a question mark here well this is I declared my variable as an optional string type so using this as question mark will basically make it so that if the value coming out of this text column is not a string it's going to assign nil to my variable and if it is a string then it's going to assign the actual string object into my message text variable so I'm going to say here if message text is not equals to nil which means that there actually is a string object then self. messages array. append the m message text and I have to put an exclamation mark there because message text is an optional value and this exclamation mark will unwrap that optional value to get at the actual object now if this is the first time you've ever heard of optional values and stuff like that it's going to be really confusing for you guys but if you take my beginner course on my site we go in depth into optionals and you're going to get a good grasp on it alternatively you can just Google Swift optionals and I'm sure you can find a lot of text and documentation about what they are as well okay so now this chunk of code basically goes through the returned objects right it takes the text uh column takes the value from that assigns it to a variable called message text and if there's actually text it appends it into our messages array finally here we can call selfthought message table view. reload data and basically this forces the table view to read the messages array again and display all of the strings in there uh finally we got to call this method so let's go up here let's erase this dummy data now we don't need test one test two and test three instead let's say retrieve messages from parse self. retrieve messages okay now let's run it okay so we see something happening and there we go these are the two messages or the two pieces of data in our parse back end right here uh the next thing I'd want to do actually is fix this little margin up here um add some space to the top and actually I want want to uh reload the messages when I add a new one so I'm going to stop the project I'm going to go into the storyboard to add that margin at the top first so here's the table view if I open the constraints I have a vertical space constraint up here and if we go to the right hand side we can see that table view. toop is equal to superview dotop do margin uh and the constant is zero I'm just going to put 20 there adds a little bit of a separation there that should be enough okay I'm going to go back to view controller now and the send button tapped method okay this is where I want to add a call to the retrieve messages so let's take a look create a PF object set the text column to the text in the text field save in the background with block and then if it's successful we have a todo here retrieve the latest messages and reload the table so here let's just call self. retrieve messages okay so let's run the app now and then following this there's one Improvement to the code which I'm going to show you guys okay so our messages are retrieved from the parse back end with you know that margin or that space at the top I'm going to add a new one let's just put hey send um wow that happened really quick okay so you can see from the console down here that message saved successfully and it also retrieved the latest messages so that we see that here okay so about that Improvement now this may get a little technical for you guys but try to follow along and see if it makes sense now normally your app runs on the main thread now what's a thread think of it as a series of code being executed so when it gets here send button tapped is executing these lines of code uh it's updating the user interface if necessary and it gets to this this one where it says save in background with block now at this point something has to happen in the background while the main thread continues going to update the UI or respond to user events or whatever so what it does is it spawns a new thread that will happen in parallel and that thread that gets dispatched or that parallel thread that gets spawned will execute this code you know when the time comes but what's really bad is to update the UI from that spawned thread you only want to update the UI and UI means user interface you only want to update the UI from the main thread and so what we can do you can see here in this code that's going to be run by that spawned thread we're updating the UI with this code right here and then we're calling retrieve messages and in this code it's going to start a new thread it's going to run this code right here and it's going to call reload data for the table View and that's going to update the UR so those two places right here you know where we're enabling uh the text fields and this part right here where we're loading the data we want to run those on the main thread instead and there's actually a way we can do that this is what we're going to do here there's something called dispatch async where we can specify a q and we're going to say dispatch get main q and put that UI code that code that updates the UI we're going to put it in there and so you know this code gets dispatched to a parallel thread uh but it's going to run this code on the main queue or on the main thread when it can so we're going to do the same thing in retrieve messages just before it reloads the table here oops like that okay so let's run it again in our case even when we didn't have that dispatch async to the main thread uh we still saw the uh UI update but if you were doing a lot of work there you would actually um see the UI freeze and that's not a good thing so let's type in yo send okay so there it goes you don't even notice a difference because we're not doing too much work here but that's a good practice to follow all right so we've got a very very very basic messaging app here that sends messages to our parse back end let's refresh the data here and retrieves those messages and that data back into our IOS app now this demonstrates how to use parse as a backend and database for your app if your app were more complex or if this chat app were more complex we could have a users table you know where you would actually create a user account and so the messages could be tagged to a specific user uh your queries would be more complex because you would maybe retrieve messages from only particular users but I hope this simple demo serves as a starting point for you to dig deeper into Parson and find out all it has to offer all right thanks for watching and I'll see you guys next time