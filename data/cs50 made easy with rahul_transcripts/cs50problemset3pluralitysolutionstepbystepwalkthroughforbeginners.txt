00:00 - hey guys in today's video we're going to
00:02 - be going over cs50 problem set 3
00:04 - plurality but before you jump into that
00:06 - make sure you subscribe to the channel
00:08 - with notifications on so you never miss
00:10 - a single cs50 solution
00:12 - okay now let's jump straight into the
00:13 - program
00:15 - okay so what is this program about
00:17 - basically it's based on one simple rule
00:19 - which is that whoever gets the most
00:21 - votes wins the election okay so we need
00:23 - to make some sort of election program
00:25 - so what it's really about let me just
00:27 - take you through a quick scenario so you
00:28 - understand what it's about
00:30 - so the user inputs dot slash plurality
00:33 - which is the name of the program
00:35 - and it's a command line argument they
00:36 - also write alice bob and charlie right
00:38 - you may recall command line arguments
00:40 - from previous problem sets so we're
00:41 - using it again here
00:43 - so
00:44 - these are the names of the candidates
00:45 - that they want to include so they run
00:47 - the program with the names of the
00:48 - candidates as a command line argument
00:51 - okay
00:52 - and then our program should prompt them
00:54 - for number of voters
00:56 - and let's just say for an example here
00:57 - the user inputs four
00:59 - the user then has to type the name of
01:01 - the candidate that they want to vote for
01:03 - so let's say voter one votes for alice
01:06 - they type alice and second voter also
01:08 - works for alice third was for charlie
01:10 - and fourth votes for bob so
01:13 - over here the winner is the person with
01:15 - the most votes and that's whose name we
01:17 - need to print so we can clearly see that
01:19 - alice has two votes whereas charlie and
01:21 - bob have one vote each so based on this
01:23 - program we know that the program needs
01:25 - to print the name alice because alice
01:27 - won and so our program is to output
01:29 - alice
01:30 - pretty simple so far just one thing we
01:32 - need to mention here
01:34 - is that our program also needs to check
01:35 - whether or not
01:37 - uh the name they typed has is actually a
01:41 - name of candidate in the command line
01:42 - argument right so they need to vote for
01:44 - someone who's a candidate right
01:47 - so okay it's a pretty simple program
01:49 - let's just go through a different
01:50 - scenario very quickly
01:52 - once again the user inputs the same
01:54 - thing alice bob and charlie when he runs
01:55 - the program so these are the names of
01:57 - the candidates
01:59 - and our program again prompts them for
02:02 - how many voters there are and there are
02:03 - four voters in this case
02:05 - and this time no one votes for bob for
02:07 - bob um
02:08 - but they vote for alice and charlie so
02:11 - alice over here has two votes and
02:13 - charlie has two votes
02:14 - so in this case remember whoever gets
02:17 - the most votes wins the election and
02:18 - that's whose name we need to print
02:20 - but over here no one really wins because
02:22 - they get two votes each it's a tie
02:24 - so in the event of a tie we need to
02:26 - print both users names okay whoever has
02:29 - the most votes that's whose name we need
02:31 - to print so it doesn't matter we need to
02:33 - print both people's names
02:35 - okay so in this case when it's two votes
02:37 - for ellis tools for charlie our program
02:39 - will have to output alice charlie the
02:41 - two winners of the election
02:43 - okay so it's a pretty a simple program
02:46 - speaking logically uh but let's take a
02:48 - look at how we actually implement that
02:49 - in code
02:51 - okay
02:52 - so this is the plurality file it's a
02:53 - source code right cs50 gives this to us
02:55 - i do not write this code
02:57 - and okay so let's just go through the
02:58 - code real quick so we have an idea of
03:00 - what we're dealing with here
03:02 - so
03:03 - first things first they have some header
03:04 - files include cs50 standard io and
03:06 - string okay
03:08 - then they say default define max nine
03:11 - okay as the maximum number of candidates
03:13 - okay
03:14 - and over here we have a struct right if
03:16 - you recall from the lectures i think the
03:19 - first problem set that involves structs
03:20 - but it's basically just grouping data
03:22 - types together right it can have one or
03:24 - more variables
03:25 - so over here it has a string called name
03:28 - and an int called votes okay which makes
03:30 - sense because a candidate has a name and
03:31 - has a certain number of votes right
03:34 - and over here candidate is not the name
03:36 - of the struct it's the data type that
03:38 - comes out so candidate now becomes a
03:41 - data type right it's just like an it's
03:43 - just like a string now it's new data
03:44 - type called candidate which has a string
03:47 - and an int
03:48 - okay sort of make that clear
03:50 - and next it says okay
03:53 - candidate candidates max okay so this
03:54 - might seem a bit vague but uh just break
03:56 - it down here
03:57 - if we had an array this is just
03:59 - basically defining an array right so the
04:01 - data type is not an entire string it's
04:02 - now the data type as candidate
04:05 - and the name of the array is candidates
04:08 - and the population of the array is max
04:11 - and over here we can see that they
04:13 - defined max as nine which means there
04:15 - can be a maximum of nine candidates
04:18 - okay
04:19 - and now they have
04:21 - they make a function here called
04:22 - candidate account they make a variable
04:23 - called candidate count and they define
04:25 - it as an end okay
04:27 - and over here we have some prototypes
04:30 - bool vote string name okay so it's a
04:32 - function called vote that takes name as
04:34 - an input
04:35 - and outputs a bool true or false
04:38 - and then we have a print winner function
04:40 - which uh doesn't give any opera it's
04:42 - just printing
04:43 - so okay now the main program starts
04:46 - into main entire c string rgb right
04:49 - because we have command line arguments
04:51 - so first things first it checks for
04:52 - invalid usage
04:54 - so what does this mean
04:56 - rc needs to be greater than 2 obviously
04:58 - because
05:00 - if you remember dot slash plurality the
05:02 - name of the program itself
05:04 - is already this is this is already
05:07 - an argument this is already an argument
05:08 - right so this is arc v zero
05:11 - so it needs to be greater than two
05:12 - because you can't just type dot slash
05:14 - plurality because then you won't have
05:15 - any candidates and you can't just have
05:18 - two because then it's just plurality and
05:19 - bob there's only one candidate so it
05:21 - needs to be
05:22 - priority alice bob that's the minimum
05:24 - right it should be greater than two so
05:26 - it needs to be at least three candidates
05:27 - that people get to vote for
05:30 - at least two candidates people get to
05:31 - vote between
05:32 - so it should so
05:34 - greater than two because
05:36 - plurality is one and then alice has one
05:38 - and bob is another right so it's three
05:40 - command line arguments
05:42 - so rxc needs to be greater than two
05:44 - obviously
05:45 - so they've already checked for invalid
05:46 - usage here so again this is code that
05:48 - they give us
05:49 - and now they want to populate the area
05:51 - of candidates okay
05:53 - so they say candidate count equals arg c
05:55 - minus one okay and why is this again i
05:58 - just explained it right
05:59 - so over here rx is three
06:02 - but we don't count plurality is a
06:03 - candidate dot slash polarity so that's
06:05 - why we have two candidates in this case
06:08 - right
06:09 - just an example
06:11 - and over here
06:12 - if candidate count is greater than max
06:15 - print maximum number of candidates is
06:18 - nine right so again they don't want us
06:21 - to have more than nine candidates this
06:23 - is an arbitrary rule that they give us
06:24 - right we don't have more than nine
06:26 - candidates okay fair enough so once
06:28 - again they've already done most of the
06:29 - heavy lifting for us they've done the
06:31 - error checking things like that
06:33 - so we know that we're going to get a
06:34 - valid number uh a valid uh input from
06:37 - our users right
06:39 - okay
06:40 - now let's move on okay so now they have
06:42 - a for loop
06:44 - and i equal to zero so they're looping
06:46 - through the candidates right ios and
06:47 - cannot account i plus plus which just
06:49 - means moves through the candidates one
06:50 - by one
06:52 - and
06:53 - candidates i dot name okay so this is
06:55 - this candidate is an array right but
06:58 - remember
07:00 - uh has two two variables in the array
07:02 - there's a struct so there's name and
07:04 - there's votes
07:06 - so candid name
07:07 - is arg v i plus one
07:09 - and why is it i plus one because again
07:12 - the zeroth is dot slash polarity
07:15 - plurality
07:17 - so that's full of the alice
07:18 - let's say alice's candidate one
07:21 - is yeah so this is arc v one we can't
07:24 - have arc v zero because r v zero is
07:26 - pluralty okay
07:28 - so that's my candidate name is rbi i
07:30 - plus one
07:31 - and candidate votes obviously starts at
07:33 - zero right
07:35 - okay because no one has gotten any votes
07:37 - yet
07:38 - so let's move on uh int voter count and
07:41 - this is just prompting the user for some
07:42 - input right so you're saying get into
07:44 - number of orders so prompting the user
07:46 - for the number of voters there are as we
07:48 - said in our earlier example here
07:50 - right voters and the user inputs how
07:52 - many voters there are
07:54 - so now we need to loop all
07:56 - loop through all the voters to ask them
07:58 - for their vote
07:59 - right so it depends on how many voters
08:01 - there are look to the voters one by one
08:03 - and keep on asking vote would you vote
08:05 - for right vote vote vote
08:07 - okay
08:08 - and again they're checking for
08:10 - invaluable again they're doing all the
08:11 - error checking for us so
08:13 - again our job is pretty easy
08:15 - and finally they just print winner
08:18 - okay
08:19 - so you notice here there may be two
08:21 - things there are two things that we need
08:22 - to do right
08:24 - we need to write the vote function and
08:26 - finally we write the print winner
08:27 - function right
08:28 - because they're prototypes
08:30 - but they don't actually define the
08:31 - function
08:33 - so that's our job most of the heavy
08:35 - lifting is done we just need to fill out
08:36 - that we just need to fill out two
08:38 - functions right that's all we have to
08:39 - write code for
08:40 - so bool vote string name okay so it's a
08:43 - function called vote that takes name as
08:45 - an input and gives out a bool true or
08:47 - false
08:49 - okay it seems pretty simple what we need
08:50 - to do
08:52 - what so what is this word function about
08:54 - what do we need to do in the board
08:55 - function
08:56 - so basically we just need to see
08:58 - whether the name the user typed
09:01 - matches any of the names in the array of
09:03 - candidates right so whoever the user
09:05 - voted for it needs to match with at
09:07 - least one name in the candidates array
09:10 - which is the command line argument
09:12 - so
09:13 - if the user typed
09:15 - if if what the user type matches with a
09:17 - name of the in the array of candidates
09:19 - then update their vote total and return
09:21 - true right so if alice is a candidate
09:24 - and the user types alice they vote for
09:25 - alice we need to update alice's vote
09:27 - total right we need to add one to it
09:30 - and if it doesn't match if they type for
09:31 - example the candidates are alice bob and
09:33 - charlie and they type david right then
09:35 - we don't up we don't want to update
09:37 - anyone's vote totals right there will be
09:38 - an error
09:40 - okay so this is what the word function
09:42 - is about it's very simple so let's see
09:43 - how we just implement this in code
09:46 - okay let's see if the name of the user
09:48 - type matches any of the names in the re
09:49 - of candidates right
09:52 - so how do we do this it's very very
09:53 - simple
09:54 - so first things first we obviously need
09:56 - to loop through the array of candidates
09:59 - so let's make a simple for loop
10:01 - 4 and i equal to 0 set it to zero and
10:04 - again we need to loop through all the
10:05 - candidates so we go through
10:07 - ils and canada count
10:10 - and i plus plus just loop through them
10:11 - one by one
10:14 - so
10:15 - okay so we need to see
10:17 - if the name of the user
10:19 - if the name the user typed
10:21 - matches any of the names and the array
10:23 - of candidates right
10:25 - so how can we check that it sounds like
10:27 - we need an if right if the name of the
10:29 - user if the name of the user type
10:30 - matches under your candidate so if
10:34 - let me just do this simply here if
10:38 - the
10:38 - name
10:40 - right which is what the user typed
10:42 - is equal to candidates
10:44 - i dot name
10:47 - what do we need to do
10:49 - we want to update the candidates vote
10:52 - right so candidates
10:57 - i
11:01 - dot votes
11:02 - plus plus right so this is very simple
11:05 - right it's exactly what we said earlier
11:07 - if the name of the user typed matches
11:08 - any of the names in the array of
11:10 - candidates
11:11 - update the vote total because that's who
11:13 - they're voting for right
11:15 - so but there's something wrong here if
11:17 - you notice because
11:19 - this this works for ins right when you
11:21 - say equals equal so if this is equal to
11:23 - this i'll be the vote total but that's
11:26 - not how quite uh that's not how it works
11:28 - for strings
11:29 - so for strings it turns out the specific
11:31 - function you have to use
11:33 - which is stir comp string compare it
11:35 - compares two strings okay
11:38 - so again if you want to compare ends
11:40 - this way would work but we're not
11:41 - comparing against we're comparing
11:42 - strings so we'll need to follow how to
11:45 - compare strings which is
11:46 - in this format
11:48 - all right again this is not something
11:49 - you would know it's something you have
11:51 - to read through the manual for right you
11:52 - need to read through the
11:54 - guide
11:55 - so there's not a common sense or
11:57 - anything like that
11:59 - so if you compare strings and apparently
12:00 - the way we do that is
12:02 - stir com
12:03 - string compare
12:05 - name
12:07 - comma candidate name
12:09 - equals equal zero and this is just the
12:10 - way to write it right it doesn't really
12:12 - mean anything but this is just how we
12:13 - compare two strings together
12:17 - all right
12:18 - so if stir compare so basically if the
12:20 - name matches any of the name of the
12:22 - candidates if the name of the user types
12:24 - might say any of the name of the
12:25 - candidates increase that candidate's
12:26 - votes right because that's what the user
12:28 - voted for
12:30 - okay oh and obviously we need to
12:32 - return true
12:34 - right
12:35 - because it's a bool so if this happens
12:37 - then return true
12:38 - otherwise if the name doesn't match then
12:40 - return false
12:42 - makes sense so far it's very simple
12:44 - right we just updated the vote total of
12:46 - the candidates
12:47 - now we just need to print the winner
12:50 - so how exactly do we tell the computer
12:52 - hey whoever has the most votes just
12:54 - print that name
12:56 - so it turns out the computer is not
12:57 - smart enough to do that
12:59 - so we need to break it down for the
13:01 - computer
13:02 - so
13:03 - so the objective of the print winner
13:05 - function is
13:06 - print whoever has the most votes right
13:08 - that's obvious
13:09 - the computer can't do that we do not
13:11 - tell the computer to do that
13:13 - so instead we'll break it down at two
13:14 - steps
13:17 - find out the maximum number of votes
13:18 - that someone got
13:21 - and then print the names of the people
13:24 - whose votes equals the max votes okay so
13:27 - that sounds a bit confusing let me just
13:28 - give you a quick example
13:30 - so
13:31 - what is the most number of votes anyone
13:33 - got okay
13:34 - so
13:35 - let's say well let's create a function
13:37 - let's create a variable called max votes
13:39 - and let's set it to zero
13:41 - and now let's say this is a different
13:43 - example so let's say alice got three
13:45 - votes billy got two and charlie got 4
13:47 - votes
13:48 - and we know this because
13:51 - we know the total vote count because
13:52 - we've already done the vote function
13:54 - right over here we've already calculated
13:56 - the votes how many votes each person has
13:57 - now we still print the winner
14:00 - so first we need to find out the maximum
14:02 - number of votes that someone got
14:05 - so maxwell starts at zero and then we
14:07 - need to loop through the array of
14:08 - candidates right
14:10 - so again we see that alice has three
14:12 - votes okay so so far the computer knows
14:14 - that okay the most number of votes
14:16 - anyone has got so far is three so it's
14:18 - going to update the max votes to three
14:20 - and this is this is just um just
14:22 - speaking it out logically here but we
14:23 - need to implement this in code obviously
14:26 - then it's gonna go to billy it's gonna
14:27 - check
14:29 - uh billy got two votes so the maximum
14:31 - number of what someone got is still
14:33 - three
14:34 - and then finally it goes to charlie
14:36 - and it says oh charlie you got four
14:37 - votes so the maximum number of what
14:39 - someone got is actually four
14:42 - right and then we need to print the
14:45 - names of the people whose votes equals
14:47 - the max votes so whoever got four votes
14:50 - we need to print the names of those
14:52 - people right and it's actually very
14:54 - simple
14:56 - this is just a two-step process of
14:58 - printing whoever has the most votes
14:59 - because the computer can't simply print
15:01 - whoever has the most votes
15:03 - so how do we do this in code find out
15:04 - the maximum vote someone got and it's
15:07 - just exactly how i explained it in this
15:09 - scenario here
15:11 - how do we do that
15:12 - well
15:13 - let's take a look well first things
15:14 - first we need to know that we know we
15:16 - know that we need to loop through the
15:17 - array of candidates right because we
15:18 - need to go to candidates one by one
15:21 - but before that
15:23 - let's start a variable let's call it max
15:24 - votes right and just initialize it to
15:26 - zero
15:27 - so let's just say int max votes the name
15:30 - of the
15:31 - name of the variable into maxwell's
15:33 - equal to zero
15:35 - and then now we need a for loop and i
15:38 - equal to zero right this set uh
15:40 - initialize it to zero the index
15:42 - and we need to keep on going
15:44 - with the number of candidates right
15:47 - so in canada count and i plus plus it
15:49 - just means go through it one by one
15:52 - okay
15:53 - so now what what is this condition here
15:56 - we need to check
15:59 - if
16:00 - if any candidate's vote totals is
16:01 - greater than the max votes we want to
16:04 - update the max votes to that total right
16:08 - that sounds a bit confusing but let me
16:09 - just type it out here
16:11 - so if
16:13 - the candidate's votes right candidates
16:16 - i dot was which you've already
16:18 - calculated in the previous function
16:21 - is greater than max votes
16:24 - what do we want to do
16:26 - we want update the max votes total
16:29 - to that candidate's votes right
16:33 - and again it sounds a bit confusing i
16:35 - understand but
16:37 - this is that's that's the logical
16:38 - explanation of it right
16:40 - so
16:42 - if that's the maximum zero right it
16:44 - comes back to the example
16:45 - it's gonna keep on going so it's gonna
16:46 - update the vote total accordingly as it
16:48 - sees alice it says okay the max vote so
16:50 - far is three
16:51 - because it's you can see that
16:53 - if canada votes is greater than max
16:54 - votes right so three is greater than
16:56 - zero
16:58 - so it's gonna update from zero it's
16:59 - gonna update to three
17:00 - and this is gonna go to billy's votes
17:02 - and it's to check uh is candidates
17:05 - what's greater than the max votes at the
17:06 - moment uh 2 is not greater than 3 so no
17:09 - it's going to go to charlie it's going
17:11 - to check is the candidate's votes
17:12 - greater than our max votes total at the
17:14 - moment yes it is 4 is greater than 3.
17:17 - so max votes will now need to be updated
17:19 - to whatever charlie's votes is
17:21 - so this is a simple way of doing that
17:24 - if the candidate's vote is greater than
17:25 - the max votes
17:27 - set the max votes equal to that
17:29 - candidate's votes right and the reason
17:32 - this might be confusing is you may see
17:34 - the equal sign as being equal to but
17:36 - that's not how it is in programming
17:38 - right
17:39 - so what this means is
17:41 - assign the value of the right hand side
17:43 - to the left hand side right so it's not
17:45 - equal to
17:47 - but rather whoever has the most votes
17:48 - right
17:49 - if the candidate has greater votes than
17:50 - the max votes set the max votes equal to
17:53 - that number right that's a very
17:54 - important distinction and it's why most
17:56 - people will be confused in this part
17:58 - we found out so far
18:01 - how many votes does the person with the
18:03 - maximum number of votes have right so
18:05 - what's the most number of votes anyone
18:07 - got in this case it's four in my example
18:10 - so the max votes is four
18:12 - now we need to print the names of people
18:14 - whose votes equal to max votes in other
18:16 - words whoever got four votes we want to
18:18 - print their names right
18:21 - so how do we go about doing that
18:23 - well once again we know that we need to
18:24 - loop through the entire
18:26 - uh candidates right we want to look
18:28 - through the entire list of candidates so
18:30 - once again same thing and i equal to
18:32 - zero
18:33 - keep on going as long as highest less
18:35 - than candidate account right we're going
18:36 - to look through all the candidates
18:38 - and we want to go one by one so i plus
18:39 - plus
18:41 - so now what we want to do here
18:43 - it's the same logic right
18:46 - so now
18:47 - if
18:48 - the candidate's votes is equal to the
18:51 - max votes we want to print that
18:53 - candidate's name right
18:55 - so if
18:59 - candidates
19:01 - right if the candidate's votes
19:05 - equals equal to the max votes and this
19:06 - is equals equals which means equal to
19:08 - not assigning any value anywhere over
19:10 - here we're assigning the value over here
19:12 - we're saying if if if the cannot got the
19:14 - maximum number of words
19:17 - then what do you want to do you want to
19:19 - print the candidate's name and how do we
19:21 - do that
19:22 - well it's obviously a string the name is
19:24 - a string so percent s
19:29 - and
19:30 - let's make a new line
19:32 - and what do we want to print
19:34 - we're going to print the candidates
19:38 - name
19:40 - okay
19:41 - so this might be a little bit confusing
19:43 - but just go through one more time and
19:45 - i'm sure you'll get it
19:46 - so this is this is basically the pseudo
19:49 - code
19:51 - find out the maximum number what someone
19:52 - got
19:53 - and in this case it's four right so we
19:55 - looped through and we found out that the
19:56 - maximum number of votes anyone got was
19:58 - four so now we know max votes is four
20:01 - print the names of the people whose
20:03 - votes equal to max votes so print out
20:05 - the name of whoever got four votes
20:07 - and again the objective is simply print
20:09 - out whoever is the most votes we just
20:10 - need to break it down so that the
20:11 - computer understands it right break it
20:13 - down in two simple steps
20:15 - okay
20:16 - and so far this has made complete sense
20:19 - right it's a very logical program
20:21 - a lot of the heavy lifting was done for
20:23 - us
20:24 - okay so now let's go ahead and make
20:25 - plurality
20:28 - reality
20:29 - okay compile so that's good sign
20:32 - now let's go ahead and just try running
20:35 - it
20:35 - let's say alice bob and charlie as we've
20:38 - been doing number of voters let's say
20:40 - four
20:41 - and let's just try alice alice bob
20:45 - charlie
20:46 - okay prints out alice which is correct
20:48 - let's go two votes uh let's try one more
20:50 - time
20:52 - uh let's say alice bob charlie once
20:54 - again are the candidates
20:55 - this time for voters as well but this
20:57 - time no one votes for poor old bob
21:00 - so it's alice alice charlie
21:02 - charlie
21:03 - and it prints out alice charlie okay so
21:05 - everything seems to be correct but once
21:06 - again just double check
21:08 - never hurts to
21:10 - check with cs50 themselves and this is
21:12 - um copy and pasting code from the cs50
21:14 - website
21:16 - so let me go ahead and do that
21:20 - it's going to go ahead and check the
21:21 - code for any errors right so far seems
21:24 - to be correct everything's working well
21:26 - and guys
21:28 - if you're not subscribed to the channel
21:29 - please make sure to subscribe make sure
21:31 - to leave a like on this video if it
21:32 - helped at all because i put my all into
21:34 - these videos and i really hope it helps
21:36 - you guys so please
21:38 - return the favor if you can subscribe to
21:40 - the channel put notifications on
21:42 - and let's see if we're correct over here
21:45 - page sorry
21:46 - so yeah
21:48 - everything seems to be correct right
21:50 - it's a very simple program as long as
21:51 - you i think the main thing people
21:53 - struggle with
21:54 - is breaking this down the print winner
21:56 - function
21:57 - and to print whoever has the most votes
21:59 - right it just seems so logical but we
22:00 - need to break it down into find out the
22:02 - maximum of what someone got
22:04 - and then print the names of the people
22:05 - who got the maximum number of votes
22:07 - right
22:08 - the biggest struggle here but once you
22:09 - understand that logical part of it
22:11 - everything else becomes much much easier
22:13 - and we can see here everything's green
22:15 - which means everything's good to go
22:16 - before submitting you can just go ahead
22:17 - and do style 50 i'm not going to do it
22:19 - now but
22:21 - style 50 and then finally can just
22:22 - submit thank you so much for watching
22:24 - guys make sure to leave a like on this
22:25 - video if it helped make sure to
22:26 - subscribe the channel support me and
22:28 - thank you so much for watching bye david