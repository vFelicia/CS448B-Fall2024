00:00 - hey guys in today's video we're going to
00:02 - be going over cs50 lab 3 sort but before
00:05 - we jump into that make sure you
00:07 - subscribe to the channel with
00:08 - notifications on because i'm going to be
00:09 - posting videos every single week so you
00:11 - don't want to miss that now let's jump
00:13 - straight into sort
00:15 - okay so in this problem set they give us
00:18 - three different programs called sort one
00:20 - sort two and sort three
00:22 - and they correspond to one of the
00:24 - sorting algorithms it can either be
00:25 - merge sort bubble sort or selection sort
00:29 - right so our objective here is to find
00:31 - out
00:32 - which sorting algorithms belongs to
00:34 - which sort okay
00:36 - so and they give us some data files to
00:38 - help with that as well and we'll see how
00:40 - it's relevant a little later on
00:42 - but first let's go over each of the
00:43 - sorts
00:44 - so these were explained very clearly in
00:46 - the lecture so i'm not going to go over
00:48 - them too much i'm just going to um
00:50 - briefly explain them
00:52 - so bubble sort if you remember from the
00:53 - lecture
00:55 - compares pairs of adjacent value one at
00:57 - a time and swaps them if they're in
00:59 - incorrect order and this continues until
01:02 - the list is sorted right
01:04 - so basically
01:06 - bubble sort has an order or a big o of n
01:09 - squared right which means in the worst
01:11 - case scenario when there is an unsorted
01:14 - array
01:15 - it takes n square steps for bubble sort
01:18 - to completely sort them
01:19 - okay
01:20 - and bubble sort has an omega of n
01:23 - which means that when there is already a
01:25 - sorted array or in the best case
01:27 - scenario
01:28 - bubble sort only takes n steps to sort
01:30 - them
01:32 - okay now for selection sort
01:34 - okay so selection sort has an order of n
01:37 - squared
01:38 - which means that in the worst case
01:40 - scenario in an unsorted array it's going
01:42 - to take n square steps for selection
01:44 - sort to sort the array
01:46 - now
01:47 - selection sort also has omega of n
01:49 - squared which means that in whether it's
01:52 - whether the list is sorted or unsorted
01:55 - selection sort still takes n square
01:57 - steps right best and worst case scenario
01:59 - it still takes the same amount of steps
02:00 - which is n squared
02:02 - now when a sort has the same order and
02:05 - omega
02:06 - it has a theta of n squared right it's
02:08 - the same thing
02:10 - the best case and worst case scenario is
02:11 - going to take n square steps to sort it
02:13 - so selection sort has a theta of n
02:15 - squared
02:17 - and now merge sort if you remember
02:20 - was proposed in the lecture as the most
02:22 - efficient sort right so the most
02:24 - efficient sorting algorithm
02:26 - so we can see here that merge sort has
02:29 - an order of n log n which means in the
02:31 - worst case scenario when there is an
02:32 - unsorted array it's going to take n log
02:35 - n steps for merge sort to sort it
02:37 - and
02:38 - it also has an omega which means in the
02:40 - best case scenario it's also going to
02:41 - take n log n steps first merge sort to
02:44 - sort it
02:44 - so merge sort has a theta of n log n
02:47 - right because that is the same big o
02:48 - notation which is order and has the same
02:50 - omega which means in the best case and
02:52 - worst case scenario it's still going to
02:54 - take roughly n log n steps from resort
02:56 - to sort the data
02:58 - okay
02:59 - so what can we kind of conclude from
03:01 - this
03:03 - okay so we can see that let's let's
03:05 - let's just take the worst case scenarios
03:06 - first
03:07 - so the worst case scenario bubble sort
03:09 - takes n squared steps
03:11 - selection sort and the worst case
03:13 - scenario takes n squared steps as well
03:15 - okay
03:17 - now merge sort in the worst case
03:18 - scenario only takes n log n steps right
03:22 - an n log n is less than n squared so it
03:25 - takes less steps right
03:27 - so we can conclude
03:30 - that
03:30 - for an unsorted array right in the worst
03:32 - case scenario
03:34 - merge sort will perform the quickest
03:36 - right because it's on the order of n log
03:38 - n
03:39 - and bubble sort and selection sort will
03:41 - perform relatively similar because they
03:43 - both have an order of n squared right
03:47 - so we know that bubble sort and
03:48 - selection sort are going to be slower
03:49 - than merge sort when sorting an unsorted
03:52 - array right because of their orders
03:55 - what about the best case scenario the
03:57 - best case scenario here is obviously a
03:59 - sorted array
04:01 - so bubble sort has an omega of n which
04:03 - means that it's only going to take n
04:04 - steps to sort an already sorted array
04:08 - okay
04:08 - where selection sort again has an omega
04:11 - of n squared which means it's going to
04:12 - take longer than verbal sort for sure
04:15 - and merge sort takes n log n steps in
04:18 - the best case scenario as well
04:20 - so
04:22 - um over here n squared is obviously the
04:24 - biggest so selection sort is going to
04:26 - take the longest
04:27 - and
04:28 - we can see that merge sort is analog n
04:30 - steps so that's pretty slow as well
04:32 - that's larger than m
04:34 - so we can say that in the best case
04:35 - scenario with a sorted array bubble sort
04:38 - should be the quickest because it has an
04:39 - omega of n
04:41 - and in second place it should be merge
04:43 - sort
04:44 - and finally the longest is selection
04:46 - sort
04:47 - so what conclusions can we draw from
04:49 - this
04:50 - well we can say that bubble sort is
04:51 - going to be the quickest right when it's
04:53 - when a when it's in a sorted array
04:56 - and selection sort is going to be the
04:58 - longest in an unsorted array right for
05:00 - an uncertain array because it has an
05:02 - omega of n squared which is larger than
05:03 - both n log n and n
05:06 - okay
05:07 - so the conclusions we can draw from this
05:09 - is that
05:10 - for a sorted array
05:12 - bubble sort will perform the quickest
05:14 - because that is an omega of m and
05:16 - selection sort will perform the slowest
05:17 - because that has an omega of n squared
05:20 - right
05:21 - okay so how do we now take this these
05:23 - conclusions and
05:25 - find out which sorting algorithm
05:26 - corresponds to which sort in this code
05:29 - that they give us
05:30 - so let's go ahead and try that
05:33 - so again for an uncertain array merge
05:34 - sort will form the quickest okay let's
05:36 - keep that in mind for an unsorted array
05:39 - merge sort will perform the quickest
05:41 - okay
05:43 - okay so now let's try to run an unsorted
05:47 - array right random random 50 000 let's
05:49 - say
05:50 - so how we do this is we want to time it
05:53 - right the one that takes the least
05:54 - amount of time
05:55 - is going to be merge sort obviously
05:57 - so
05:59 - let's just see the time taken here okay
06:02 - so let's try to run this now and the way
06:04 - we run it as time
06:07 - dot slash sort 1 let's say we want to
06:09 - test out sort 1 first
06:11 - random
06:12 - 50 000
06:14 - dot text
06:15 - and over here basically cs50 gave us
06:18 - three types of files uh a file where
06:22 - things are randomly ordered right an
06:24 - unsorted array
06:25 - reversed where it's just uh sorted
06:28 - backwards
06:29 - and a fully sorted array so we don't
06:31 - really need reversed for our scenarios
06:34 - here so we're going to be focusing on
06:36 - random and sorted arrays only
06:38 - okay so first of all
06:41 - uh let's just sort um
06:43 - let's see what's let's see how long sort
06:45 - 1 takes to sort this file of unsorted
06:47 - areas
06:48 - okay and this is how we do it time dot
06:51 - slash sort one run sort one
06:53 - on this file random fifty thousand dot
06:55 - text
06:57 - and let's see what it gives us
07:03 - taking quite a while here okay
07:06 - so uh let's see let's take a look at the
07:08 - real time okay because that's what
07:09 - matters to us
07:11 - so it took us
07:12 - sort one for an unsorted array of fifty
07:14 - thousand took us
07:17 - seven point eight seven one seconds
07:20 - okay sorry seven buckets
07:23 - let's see how sword two does
07:25 - so let's time dot slash sword two
07:28 - and let's run the same file again random
07:30 - fifty thousand
07:32 - dot text
07:33 - let's see how long story two takes us
07:35 - and we can already see that it was a lot
07:36 - quicker
07:38 - so that took us
07:40 - 0.663 seconds
07:43 - what about sort three
07:45 - let's do time
07:47 - dot slash sort three
07:49 - random fifty thousand
07:52 - dot text
07:56 - and we can see this one is not very
07:58 - quick as well okay that took us
08:02 - 3.519 seconds
08:05 - okay
08:06 - so
08:07 - from this what's very clear
08:10 - is that there's one very clear winner
08:12 - right sword two was obviously the
08:13 - quickest
08:15 - so based on that logic based on our
08:16 - conclusions earlier for an unsorted
08:19 - array merge sort will perform the
08:20 - quickest
08:22 - okay
08:23 - so from this we can kind of reduce that
08:25 - sword two is going to be merge sort okay
08:29 - because it performed the quickest for an
08:30 - unsorted array that's an omega of n log
08:33 - n sorry it has a it's on the order of n
08:35 - log n which means for unsorted array it
08:37 - only takes n log n steps where selection
08:40 - and bubble sort take n squared steps
08:44 - okay
08:44 - so now it's clear that sort two is merge
08:47 - sort
08:48 - but we don't really know whether sort
08:51 - one like sort one merge or bubble or
08:53 - sorry three merger or bubble we don't
08:54 - know that yet
08:56 - right so let's take a look at a sorted
08:57 - list let's run the source for sorted
08:59 - list now
09:01 - and let's just run sorted 50 000 again
09:05 - so
09:06 - let's take the time so time
09:08 - dot slash sort one
09:14 - sorted
09:15 - fifty thousand dot text
09:20 - oh that's pretty quick
09:21 - so sword one zero point four four zero
09:24 - seconds right i'm just copying the time
09:26 - from here
09:28 - this is so i remember the time it took
09:31 - now let's run the time again for sword
09:33 - two this time
09:34 - and for the same file sorted
09:37 - 50000
09:38 - dot text
09:40 - okay let's run it
09:42 - it's pretty quick as well
09:45 - so it took 0.407
09:48 - seconds
09:51 - and next up let's do time dot slash sort
09:55 - three
09:56 - sorted fifty thousand dot text
10:03 - okay that took us
10:04 - three point one five six seconds
10:09 - okay let's just
10:11 - these are a bit close so let's try to
10:12 - run these again
10:13 - um
10:15 - time dot slash sort
10:17 - one
10:19 - let's run
10:21 - two sorted
10:22 - fifty thousand dot text
10:25 - okay
10:26 - so it took
10:27 - 0.577 seconds
10:30 - 0.577 seconds okay
10:33 - so over here
10:35 - for the sorted list
10:36 - we know that bubble sort is going to
10:38 - perform the quickest because it has an
10:40 - omega of n which means in the best case
10:42 - scenario for solid array it only takes n
10:44 - steps
10:45 - so according to our conclusions here
10:47 - bubble sort will perform the quickest
10:50 - so from here
10:51 - we can deduce that
10:54 - sort 1 should be
10:55 - bubble sort right because it took the
10:57 - quickest for a sorted array
10:59 - and we know from our previous experiment
11:00 - that
11:01 - merged sort of sort two
11:03 - so sword three has to be
11:05 - selection sort right
11:07 - and this also kind of makes sense
11:09 - because
11:10 - we can see that
11:11 - uh
11:12 - sword three right which we switch we
11:14 - propose selection sort takes roughly the
11:17 - same amount of time for an unsorted and
11:19 - a sorted list right n squared has a
11:20 - theta of n squared
11:22 - and we can also see that sword two takes
11:25 - roughly the same amount of time for
11:27 - an unsorted and assorted list because it
11:29 - has a theta of n log n so it's going to
11:31 - be faster than selection sort with both
11:33 - and it's going to take roughly the same
11:34 - amount of time in both an unsorted and
11:36 - sorted list right
11:38 - okay
11:39 - so we figured this out now that sort 1
11:43 - is bubble sort and we've confirmed it
11:45 - again
11:46 - sword two is merge sword right and sword
11:48 - three is selection sort
11:51 - so why did we need to do for both an
11:52 - unsorted and assorted list because we
11:55 - could we we figured out only the merge
11:56 - sort of sort two
11:58 - but we didn't know whether sort one a
12:00 - selection or bubble that's why we had to
12:01 - run it again through a sorted list and
12:03 - now we have the answers right
12:05 - so let's go ahead and go to answers dot
12:08 - text which is again this is all in the
12:09 - distribution code so sort one uses we
12:12 - know the answer now is bubble sort
12:15 - sort two uses
12:17 - uh the answer is merge sort right from
12:19 - our two experiments we did
12:21 - and sort three uses selection sort
12:24 - selection sort okay
12:26 - so how do you know that sword one uses
12:27 - bubble sort well because
12:31 - it
12:32 - uh
12:33 - it ran the fastest
12:36 - on
12:37 - a sorted array right on a sorted list
12:41 - so to use merge sort how do you know
12:43 - because it ran the fastest when using an
12:45 - unsorted list right remember has a theta
12:48 - of n log n
12:52 - so that's faster than both bubble sort
12:54 - and selection sort because they both
12:55 - have omegas of n squared
12:57 - right it
12:59 - ran the fastest
13:02 - on a random or unsorted list right
13:07 - and finally
13:09 - it's our three selection sort we said
13:11 - that because
13:13 - where do we say that
13:14 - well a sort uh one is bubble sort and
13:16 - sword two is merged sort so three has to
13:18 - be selection all right so basically it
13:20 - was the only option left
13:23 - but also
13:24 - we know that it took roughly the same
13:26 - amount of time for both uh unsorted and
13:28 - sorted which means it should be correct
13:30 - right it has a theta of n squared
13:32 - and we can see that merge sort also took
13:34 - roughly the same amount of time because
13:35 - it has a theta of n log n right so for
13:37 - both unsorted and sword it took roughly
13:39 - the same amount of time
13:40 - and bubble sort
13:42 - was the very clear winner in a sorted
13:44 - list so that's why it was sort one so
13:47 - this actually conforms with our theories
13:49 - with our conclusions that we made over
13:50 - here
13:51 - based on the big o notations which is
13:53 - the order of
13:54 - and the omegas of each of these sort
13:56 - starting algorithms
13:58 - right so i hope that all made sense
14:00 - today guys if it didn't make sense it's
14:02 - probably because you didn't understand
14:03 - the fundamentals of what uh selection
14:06 - sword bubbles or n-word swords are so i
14:08 - urge you to go back and watch the
14:09 - lecture if you don't understand that
14:11 - but this is one of the simplest problems
14:13 - that we'll ever get in cs50 right it was
14:15 - very straightforward i hope everything
14:16 - was clear today make sure to leave a
14:18 - like on this video if you enjoyed if it
14:20 - helped at all and make sure to subscribe
14:21 - to the channel because i'm gonna be
14:22 - posting videos every single week that's
14:24 - all for today guys bye david