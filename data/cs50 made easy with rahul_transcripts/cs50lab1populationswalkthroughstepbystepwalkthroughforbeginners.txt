00:00 - hey guys today i'm going to be going
00:02 - over cs50
00:03 - lab 1 populations now this is going to
00:06 - be a step-by-step guide for beginners
00:08 - so please don't skip to the code don't
00:10 - skip to the solution
00:11 - but actually understand this step by
00:13 - step
00:15 - so let's first look at the information
00:17 - that they give us
00:19 - so assuming we have a population of n
00:21 - llamas and number of llamas let's say
00:24 - every year we gain n over three llamas
00:26 - as n over three llamas are born
00:28 - and we lose and over four llamas and
00:30 - over four llamas let's say die
00:33 - so the the population for the next year
00:36 - will be
00:37 - n the starting population plus n over
00:40 - three
00:40 - as we gain energy llamas minus n over 4
00:44 - as we lose n over 4 llamas
00:46 - so given that let's say how many years
00:49 - will it take to reach 25
00:51 - llamas ending population if the starting
00:54 - population
00:55 - is 20 llamas right
00:58 - so for this uh let's go over a quick
01:01 - example
01:02 - so the starting population let's say in
01:04 - this example is 20
01:06 - and let's say we gain 20 over three
01:08 - llamas
01:10 - and when you put this on a calculator 20
01:11 - divided by 3 is actually 6.6667 whatever
01:15 - but since we can't have 0.666 llamas
01:18 - we can't have a fraction of a lama we
01:21 - just ignore whatever is after the
01:22 - decimal
01:23 - so let's say we gain 6 and we lose
01:26 - 20 over 4 and over 4 llamas which is 5.
01:30 - so 20 plus 6 minus 5 gives us an ending
01:34 - population of 21.
01:37 - so now the ending population of year 1
01:39 - carries over as the starting population
01:41 - of year two
01:43 - so now once again we repeat the same
01:45 - formula
01:46 - n over three and over four so 21
01:51 - plus 21 over three minus 21 over 4 which
01:55 - is 21
01:56 - plus 7 minus 5 which gives us 23
02:00 - and once again this carries over to year
02:02 - 3 starting population 23
02:05 - plus 7 minus 5 following the same
02:07 - formula
02:08 - the ending population is 25.
02:11 - so we can see that it takes us three
02:14 - years to get
02:15 - from 20 to 25 right
02:18 - so now let's say the user inputs a
02:21 - starting size of 20
02:23 - an ending size of 25 our program needs
02:27 - to output
02:28 - years three all right so it seems pretty
02:30 - simple logically
02:31 - now let's jump right into the code and
02:34 - one more thing we need to keep in mind
02:36 - is that the minimum number of starting
02:37 - population for llamas
02:39 - is nine so there needs to be a minimum
02:41 - of nine llamas
02:43 - all right so since we know there's first
02:46 - thing we need to do
02:47 - is prompt for start size right this is
02:50 - the notes given by the program itself
02:53 - so prompt for start size how do we do
02:54 - that well first of all we need to make a
02:57 - variable right we need to declare a
02:58 - variable
02:59 - called uh for to capture the start size
03:03 - and we can just call it a start for
03:04 - simplicity you can call anything you
03:06 - want you can call it n even can call it
03:07 - mg whatever you want
03:09 - i'm calling it start for logical
03:10 - purposes just to help me kind of focus
03:12 - on it and know that
03:13 - that's the start size so we call
03:16 - in start and again i'm declaring it as
03:19 - an int
03:19 - because it's a number right we need to
03:21 - get some form of number from the user
03:23 - so that's why it's an integer or a
03:24 - number and now we need to use a loop
03:27 - to keep on asking the user for some
03:30 - input
03:31 - right so we can use a do while loop
03:33 - which basically means
03:34 - do the following while a certain
03:36 - condition is true
03:38 - so what do we need to do we need to ask
03:40 - the user for some input
03:41 - right so let's say start
03:45 - equals and how do we get some input from
03:47 - the user
03:48 - we're using the get function so get
03:51 - underscore and we need to get an integer
03:54 - from the user
03:54 - so get underscore int and let's prompt
03:58 - them let's say
03:59 - starting population starting
04:02 - population
04:06 - and so we need to keep on re-prompting
04:08 - them for starting population
04:11 - if they input a number less than nine
04:13 - right that's just what
04:14 - what they tell us to do that's the
04:15 - instructions so while
04:18 - start is less than nine
04:22 - keep on prompting for a start size and
04:25 - let's see how this works so far
04:27 - make populations okay compiles dot slash
04:30 - populations
04:32 - okay so it asks us for starting
04:33 - population let's try putting in let's
04:35 - say two
04:36 - and it asks us again because it doesn't
04:38 - fulfill the condition
04:41 - so let's say 8 and again 8 is less than
04:44 - 9 so it's going to keep on asking us for
04:46 - a new
04:46 - starting population now let's say 10 and
04:49 - it doesn't ask us anymore because 10 is
04:51 - greater than 9
04:52 - so it seems like this part of the
04:54 - program is correct already
04:56 - now we need to prompt the user for a
04:57 - certain end size so let's once again
05:00 - declare it in called end just for
05:02 - clarity purposes again you can call this
05:04 - anything you want
05:06 - um and again we use a do while loop
05:09 - because there is certain condition
05:11 - attached to the end
05:12 - to the number that we need to get so we
05:15 - do the following while a certain
05:16 - condition is true
05:17 - and again end equals get
05:20 - underscore data type is int again
05:22 - because we need to get a number from the
05:24 - user
05:25 - get underscore end this time we'll say
05:28 - ending population
05:31 - all right and what should the condition
05:33 - be here
05:34 - well thinking about it logically the
05:36 - ending population always needs to be
05:38 - greater than the starting population
05:40 - right so we can have the condition here
05:44 - while start is greater than end
05:47 - keep on asking the user for a new ending
05:49 - population
05:51 - right so let's try once again make
05:53 - populations
05:55 - okay compiles dot slash populations
05:58 - uh starting population let's say 10
06:01 - ending population let's try to trick
06:03 - let's give it five
06:04 - and it asks us again because we said
06:07 - when you keep on asking if start is less
06:09 - than end
06:10 - and in this case we have input and n
06:12 - number which is less than start it's
06:13 - going to ask us again
06:15 - and let's try 9
06:18 - and again it asks us because 9 is less
06:20 - than 10
06:22 - and let's say 11. okay so it doesn't
06:24 - prompt us for an ending once again
06:27 - because we have finally fulfilled the
06:28 - condition that end is greater than start
06:32 - so we've gotten we've got the user input
06:35 - now we need to actually make the program
06:37 - that calculates the number of years and
06:39 - once again kind of intuitively
06:42 - you can sort of guess that we need
06:43 - another integer called years
06:45 - right but this time we don't want to ask
06:47 - the user for the number of years
06:49 - but rather our program is to calculate
06:51 - that integer
06:53 - so let's just say in tiers
06:56 - and once again we need to keep on
06:58 - calculating the number of years we need
06:59 - to keep on
07:00 - updating the number of years right so
07:02 - once again we can
07:03 - infer that we need to use a sort of loop
07:06 - and just to keep things simple let's use
07:07 - a do while loop
07:08 - same loops as we used previously so do
07:11 - the following while a certain condition
07:12 - is true
07:14 - and so for this case what do we need to
07:16 - do
07:18 - well we need to calculate the population
07:20 - in the next year
07:21 - like in the following years right and
07:23 - for that if you recall from earlier
07:25 - we have some sort of formula n plus n
07:29 - over three as we gain n over three
07:30 - minus n over four as we lose n over four
07:34 - so from there we can kind of infer let's
07:37 - just try to write it in the encoding
07:39 - right start equals
07:43 - start right n equals n
07:46 - plus start divided by three
07:49 - as we gain n over three llamas minus
07:53 - start divided by four
07:56 - as we lose enough for llamas so
08:00 - every time this happens we're basically
08:02 - telling the computer hey
08:03 - computer update the starting population
08:08 - and this is the value to update it to
08:10 - start
08:11 - plus start over 3 minus start over 4.
08:15 - and this is just nothing more than what
08:16 - we've deduced in the very beginning here
08:18 - which is n plus n over 3 minus n over 4.
08:21 - so every time this happens what do we
08:22 - need to do
08:24 - we need to update the number of years
08:26 - right we need to add an attach
08:27 - an additional year so to do that we can
08:30 - type year
08:32 - plus plus right
08:35 - so every time this happens
08:38 - it's another year so what condition
08:41 - should be here
08:43 - while start
08:47 - is less than end okay and why is this
08:50 - condition here don't worry i'm not gonna
08:51 - leave it at that
08:52 - let's actually look deeper into it now
08:56 - all right so why should the condition be
08:58 - start less than end
09:00 - so let's once again take the same
09:01 - example if the user inputs a starting
09:04 - size of 20
09:06 - an ending size of 25 all right
09:09 - and the condition is start less than end
09:12 - so in year one it's going to check
09:14 - starting population is 20 is start less
09:17 - than end
09:17 - so is 20 less than 25 yes
09:21 - so we add one year as we said here
09:24 - if this is true then add one year
09:27 - so then we'll go to the next year where
09:30 - the starting population is 21.
09:32 - so is start less than end is 21 less
09:35 - than 25
09:36 - yes so we add a year again and then we
09:39 - move to the next year
09:41 - and here the starting population is 23
09:43 - just like we calculated earlier
09:45 - so is 23 less than 25 is start less than
09:48 - end
09:49 - yes 23 is less than 25 so add a year
09:53 - and again this is a loop so it's going
09:55 - to go to the next year again
09:57 - and here the starting population becomes
09:59 - 25.
10:00 - so is 25 less than 25 no
10:03 - 25 is equal to 25 it's not less than 25
10:07 - so here the loop will not continue so we
10:09 - don't add another year
10:10 - and we stop the loop here all right
10:13 - so this is why the condition is start
10:15 - less than end
10:17 - so hopefully everything's clear so far
10:20 - and now all that's left to do
10:22 - is print the number of years and for
10:24 - that we use a very simple function
10:26 - called printf
10:28 - printf let's say years colon
10:32 - and we need to print the number of years
10:34 - right but we don't know how
10:35 - but the number of years is not a fixed
10:37 - amount it depends on the user input
10:40 - so for that we can use a placeholder an
10:42 - integer
10:44 - percent i and the value percent i needs
10:48 - to take
10:48 - is from the variable called year all
10:51 - right
10:52 - so how we do that is we put comma here
10:54 - which basically means that
10:56 - print the number of years that is there
10:58 - was character that was calculated
11:00 - earlier and so we do that
11:03 - but if you notice now the program is not
11:05 - quite done
11:07 - and that's because every year i mean
11:09 - every time this happens
11:11 - every time this happens we're going to
11:13 - want to keep on adding a year
11:15 - but what's the starting number of years
11:18 - well the years start at zero
11:20 - so we actually need to first initialize
11:22 - the variable year
11:24 - to zero all right so interior equals
11:28 - zero
11:28 - and every time this happens do a year
11:30 - plus plus
11:32 - while the while start is less than end
11:34 - right so so far everything makes sense
11:36 - logically hopefully
11:38 - if it doesn't re-watch the video
11:39 - re-watch this part
11:41 - or maybe leave a comment down below if
11:42 - you really don't understand i can help
11:43 - explain it further
11:45 - but everything makes sense so far
11:47 - logically we initialize here to zero
11:49 - we do year plus plus every time this
11:52 - happens
11:53 - while this condition is true
11:56 - and then we print the number of years
11:58 - finally
11:59 - so let's try make populations compile
12:02 - the program
12:03 - okay everything's gone smoothly dot
12:05 - slash populations to run it
12:07 - okay starting populations let's say from
12:10 - the example area
12:11 - 20 ending population 25
12:14 - and it says years three so it's correct
12:17 - but just one stylistic issue here is
12:19 - that
12:20 - it's prompting me for the next line of
12:22 - code in the same line
12:24 - so we don't want that it looks not very
12:26 - pretty so let's make a new line here
12:28 - let's do backslash n
12:29 - for a new line and let's compile it
12:32 - again make populations
12:35 - all right dot slash populations
12:38 - starting population 20 ending population
12:40 - 25 and now it looks nice right
12:42 - everything is in one line
12:43 - starting populations ending populations
12:45 - and years and it prompts us for the code
12:47 - in the next line
12:48 - so let's just look at the instructions
12:50 - here let's try one of their examples
12:52 - just to make sure that our code is
12:53 - correct
12:55 - start size of 100. let's run our program
12:58 - again dot slash populations
13:00 - start size is 100 ending population they
13:02 - want us to put
13:04 - a million and years should be 115 if our
13:07 - program is correct
13:09 - so a million ending population
13:14 - and here is one on five so our program
13:16 - appears to be correct
13:17 - but just to double check you can use you
13:20 - copy this
13:20 - it's from the i'll put the link down
13:22 - below but it's just from cs50s website
13:24 - you copy this and you paste it into your
13:25 - terminal window
13:27 - all right i've already done it so i'm
13:28 - not going to do it again but you can do
13:29 - it
13:30 - check make sure it's correct and it
13:32 - should show everything green
13:34 - and once you do that don't forget to
13:36 - check the style as well
13:37 - just to make sure there are points for
13:39 - style so to maximize your number of
13:41 - points
13:42 - your grade you should check for style as
13:44 - well and when everything's correct
13:46 - all you have to do is submit do that by
13:48 - copying this code over here
13:50 - so that's it for this video guys thank
13:53 - you so much for watching make sure to
13:54 - like and subscribe if this video helped
13:56 - comment down below if you have any
13:57 - questions and i'll do my best to answer
13:59 - every single question
14:00 - and that's all for today thanks for
14:02 - watching guys bye david