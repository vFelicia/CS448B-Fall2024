00:00 - the jump from week 0 to Week 1 in cs50
00:03 - can be very challenging that's why they
00:05 - recently introduced practice problems as
00:07 - a way to bridge that Gap now before we
00:08 - move further make sure to leave a like
00:10 - on this video And subscribe to this
00:11 - channel for regular cs50 content and
00:12 - without further Ado let's jump straight
00:14 - into the first practice problem debug so
00:17 - basically what's going to happen here is
00:19 - they're going to give us some code and
00:20 - our job is not to write code from
00:22 - scratch but rather to correct problems
00:24 - with that code right they're going to
00:25 - give us faulty code and we have to kind
00:27 - of fix it to make it a working program
00:28 - but first things first is we need to go
00:31 - to code.cs30.io and log in using our
00:34 - GitHub account so if you don't have that
00:35 - I recommend just signing up it takes two
00:37 - minutes it's very simple when you have
00:39 - that it says to go inside a terminal
00:40 - window and type CD right okay and by the
00:44 - way guys you won't have any of these
00:45 - files on the left here I have them
00:47 - because I've done other problem sets but
00:48 - your left side is going to be completely
00:50 - empty let's type CD and enter
00:52 - okay let's see what we do next and the
00:55 - prompt type mkdir debug okay which
00:57 - stands for maker directory called debug
00:59 - okay make dirt debug
01:01 - and we'll see that sadly there's a file
01:03 - that appeared here called debug okay
01:04 - that's going to be your only file so far
01:07 - CD debug which means change directory to
01:10 - debug and again that's not very
01:11 - important you don't really have to know
01:12 - that but that's what CD stands for and
01:14 - now before the prompt we see we have a
01:16 - debug here which is good they write the
01:18 - word debug and then copy and paste this
01:21 - thing into your terminal window to
01:23 - download the slab's distribution code
01:24 - okay whatever that means we don't care
01:27 - let's go ahead and copy and paste it
01:28 - let's do what it tells us to okay some
01:31 - fancy lines here again we don't care
01:33 - about that let's go into our debug
01:35 - folder now that we care about and let's
01:37 - go into debug.c okay and here is our
01:40 - code again the objective is to become
01:42 - familiar with C syntax and learn to
01:44 - debug buggy code right so before we get
01:47 - to debugging it let's try to understand
01:48 - what the program is trying to do let's
01:50 - go through line by line include cs50.h
01:53 - okay that's including the cs50 library
01:55 - int main void okay that's the equivalent
01:58 - of saying when green flags clicks on
02:00 - scratched it has a command ask for your
02:02 - name and where you live it has a
02:04 - variable called name
02:05 - and get string is used to get some
02:09 - string from the user right it's
02:10 - prompting the user for some input and
02:12 - says what is your name okay so the
02:14 - program should ask the user what is your
02:16 - name and then it has a variable called
02:18 - location and get string where do you
02:21 - live okay so we need to make a program
02:22 - that prompts the user and asks them what
02:25 - is your name and then ask them where do
02:27 - you live okay seems pretty
02:28 - straightforward and then we want to say
02:30 - hello so we want to print hello
02:33 - blank from blank and these when you see
02:36 - a percentage sign that's called a
02:37 - placeholder so we don't know what we
02:39 - want to say yet but we know that we're
02:41 - going to get what we want to say from
02:42 - the user so hello blank from blank and
02:45 - take these from name and location so it
02:47 - basically means hello name from location
02:49 - so let's say the user inputs what is
02:51 - your name they say David and ask them
02:53 - where do you live they say Boston right
02:55 - so it's going to print out hello David
02:57 - from Boston if you're completely new to
02:59 - programming as most people are we don't
03:01 - really know what's wrong with this code
03:02 - nothing really jumps out at us so
03:04 - easiest way to check what's wrong with
03:05 - the code is by trying to compile it okay
03:07 - so let's clear this how we compile code
03:09 - is make and then the name of the
03:11 - programs we literally type make and then
03:14 - the name of the program is debug so
03:15 - debug so let's compile it
03:17 - okay and it immediately gives us an
03:19 - error and let's try to sort of decode
03:21 - what this is saying debug.c 9 colon 5.
03:25 - okay so what this means how do you read
03:27 - this is there is an error on line 9 in
03:31 - the fifth character let's try to read
03:33 - what the error says use of Undeclared
03:36 - identifier name so what does that mean
03:38 - so over here when you define a variable
03:40 - you need to assign some sort of a data
03:42 - type to it right we can't just say name
03:44 - what is a name we need to tell the
03:45 - computer the name is indeed as we know
03:47 - we want to get a string from the user
03:50 - and stored in name so name is obviously
03:52 - going to be a string right the computer
03:54 - doesn't know that we have to tell it
03:56 - that and that's what this error tells us
03:58 - here use of Undeclared identifier name
04:00 - so let's go ahead and type string name
04:03 - so string name equals get string what is
04:05 - your name okay so we've solved that that
04:07 - problem let's go ahead and try to
04:08 - compile the program again
04:10 - and again we get another error and let's
04:12 - try to read this 952 which means it's on
04:15 - the ninth line the 52nd character and
04:18 - what's the error it expected a semicolon
04:21 - at the end of Declaration okay and it
04:23 - literally says to insert a semicolon at
04:25 - the end of this right semicolon in C is
04:28 - like a full stop in English we have to
04:30 - say it so let's go ahead and get the
04:31 - syntax correct semicolon here let's
04:34 - solve this error right and now we can
04:37 - kind of intuitively tell that you know
04:38 - we did this for name do we have to do
04:40 - the same thing for location as well well
04:42 - let's go ahead and see let's go ahead
04:44 - and make debug compile the code and
04:47 - again it says there is the enter on line
04:49 - 10 use of Undeclared identifier location
04:51 - and again that's because we didn't
04:53 - declare what data type location is right
04:55 - just like we did for name let's go ahead
04:57 - and say location is a string right and
04:59 - now do we need a semicolon to the end
05:01 - here well it's kind of obvious we do but
05:03 - just for the purpose of taking it step
05:05 - by step let's see what the computer
05:06 - tells us let's try to make debug and
05:09 - again as expected on line 10 there is
05:11 - another error expected semicolon at the
05:14 - end of Declaration okay so let's go
05:15 - ahead and put that in and by the way
05:17 - guys I'm doing this step by step so you
05:19 - kind of get the feel for how to read
05:20 - errors right how to interpret errors so
05:23 - line 10 expected this right it's a bit
05:25 - vague but as you do more and more of it
05:28 - you're gonna get more comfortable with
05:29 - reading errors now there's no clear
05:31 - errors right we don't know what what
05:33 - else is wrong so let's try to make debug
05:35 - again compile the code and okay we see
05:37 - there is an error in line 13 implicit
05:40 - Declaration of function print is invalid
05:42 - okay so if you remember from the
05:45 - lectures when we want to print something
05:46 - out we don't say print right the
05:49 - function is called print F in C the
05:51 - function is called print F to output
05:53 - something so if you're in Python then
05:55 - print would be enough but here we're
05:56 - doing in C so it's called print F Okay
05:58 - so we've made a print F now let's try
06:00 - once again to compile the code
06:03 - and okay we have an error in the same
06:06 - line in line 13 again with the same
06:08 - printf so did we really solve that
06:10 - problem let's read the error message
06:11 - implicitly declaring Library function
06:14 - print f
06:16 - and let's see what the solution is they
06:17 - said include the header standard io.h
06:19 - okay so this time it literally gives us
06:21 - the solution which is include the header
06:23 - standard iodar H so the function print f
06:26 - is in the standard i o Library okay so
06:29 - just like we included csfd.h we now
06:32 - include standard io.h
06:35 - and now let's go ahead and try to
06:38 - compile the program once again let's
06:39 - make debug okay and we are met with
06:42 - another error okay it's on line 14.
06:44 - hello percent I from percent I okay so
06:47 - there is an error here in the percentage
06:48 - that's because percent I is a
06:51 - placeholder for an integer right so
06:53 - hello percent I for percent I is wrong
06:56 - because the values that we want to input
06:58 - here are not integers right it's name
07:00 - and location which are both strings
07:03 - right so a placeholder for a string is
07:05 - not denoted by percent I but rather
07:08 - present s so let's replace these I's
07:11 - okay so hello percent s from present s
07:14 - again because both name and location are
07:15 - strings so hopefully we've solved it all
07:18 - here make debug
07:19 - and again we get another error on line
07:21 - 14 again problematic line here expected
07:24 - semicolon after expression right we
07:26 - forgot to put the semicolon after the
07:27 - print okay so let's go ahead and do that
07:29 - and now let's try to make our program
07:32 - again make debug okay thankfully no
07:34 - error messages here so right let's go
07:36 - ahead and run the code and how you run
07:38 - something is dot slash the program name
07:41 - so in this case it would be dot slash
07:43 - debug run it okay what is your name
07:45 - that's good it asks us for a name let's
07:47 - say our name is David where do you live
07:49 - let's say Boston hello David from Boston
07:52 - okay so it seems to be working well here
07:53 - but if you notice it just looks a little
07:55 - bit ugly right because it prompts us for
07:57 - New command on the same line which
07:59 - doesn't look very nice so let's try to
08:01 - create a new line and how we create a
08:03 - new line in C is by typing backslash n
08:06 - now you wouldn't know this is not common
08:08 - knowledge this is the syntax of c and
08:11 - that's what we're trying to learn in
08:12 - this practice problem right so let's
08:13 - make a new line let's once again compile
08:15 - let's make debug okay it works dot slash
08:17 - debug once again let's say we're it from
08:20 - Boston and hello Dave from Boston and
08:23 - this time prompt us for a command on a
08:24 - completely new line so it just looks a
08:26 - little bit better right it doesn't make
08:27 - the code more correct the code was
08:29 - already correct it just makes it a
08:30 - little more readable a little more user
08:32 - friendly and now at the end of every
08:34 - problem set we need to check our code
08:36 - right the way we do that
08:38 - is using cs50s check 50 function okay so
08:41 - let's copy and paste this from Harvard's
08:43 - website check 50.
08:46 - this is going to go and check for the
08:47 - correctness of our code so while waiting
08:49 - guys please make sure to like this video
08:51 - if it was helpful make sure to subscribe
08:52 - to this Channel with notifications on if
08:54 - you want me to continue posting these
08:56 - videos right I'm going to be posting
08:57 - videos every single week so please
08:59 - subscribe with notifications on go ahead
09:00 - and leave a like on this video okay all
09:02 - green which means it's all good and
09:04 - we've conquered this process problem now
09:06 - this is one of the easier practice
09:07 - problems right the next one is going to
09:09 - be a little more difficult so stay tuned
09:11 - for that that's coming in the next week
09:12 - or so so make sure to subscribe with
09:14 - notifications on and I'll see you guys
09:16 - in the next one bye David
09:18 - [Music]