in this video we will look at eight python programming tips and tricks you might not have known about learning about these features will help you write more pythonic code and become a better python programmer so let's get started the number one trick is unpacking unpacking is an operation that can be used to assign the values of an iterable to a number of variables with a single assignment statement let me show you what i mean i'll go to my code editor and i'll say a comma b comma c equals 1 comma 2 comma 3 now let me print a print b and print c and when i press run then you can see that 1 was assigned to a 2 was assigned to b and 3 was assigned to c python assignment statements are evaluated from right to left so we can even use unpacking to swap the values of two variables in a single line and i'll remove this old code and define two variables as x equals 66 and y equals 44. i'll swap the values of variables x and y for that i can write something like x comma y equals y comma x and now print x equals and x similarly print y equals and y and when i press run you can see that access value is now 44 and y's value is now 66 where the variables have been swapped the second tip is negative indexing python programming supports negative index values for iterables like lists strings and tuples using a negative index gives us items from the last so minus 1 gives us the last item 2 gives us the second last item and so on i'll go back to my code editor remove this old code and i'll create a variable called numbers equals it'll be a list of the multiples of 5 so 5 10 15 20 and 25 now let me print something like print numbers minus one when i run this program then you should be able to get the last element similarly i can do print numbers minus 3 and when i press run then you can see that i get the third element from the last by the way if you find this video useful a sub to the channel would be much appreciated the third trick i want to talk about today is slicing python supports the slice notation for sequential data types like lists strings and tuples slicing allows us to create a new sequence from an existing sequence let me give you an example i'll go to my code editor and suppose we have a list like this so let me remove or let me remove this code now let me create a new list containing the first three items of this list so for that i can say new numbers equals numbers column 0 comma 3 here 0 is the start index and 3 is the end index of the slice i want of this list now when i run this code oh i haven't printed it so i'll say print new underscore numbers and when i run this code then you can see that i got the first three elements of the list the thing you need to remember about slicing is that the first index is inclusive and the last index is exclusive that is why i got the indexes from 0 1 and 2 which were the element 1 2 and 3 respectively but the element at index 3 was skipped also we can skip the start and end index as well if we skip the start index then slicing starts from the zero index the first element and if we skip the last index the slicing ends at the last element in our code i can remove this zero and because anyways i wanted to start from the first index when i press run i get the same output as before the complete slicing notation syntax looks like this it has the start index the end index and step step determines the interval in which we want to get a new list if we skip it we get a list at an interval of 1 like in our previous examples let me now show you an example using a different value of step i'll remove this old code from my editor and i'll say numbers equals let's say 1 2 3 4 5 6 7 and 8. now i'll say print numbers 1 column 6 column 2 here this code means creating a list starting from the second item or the item with index 1. up to the sixth item with a step size of two let me run this code as expected this code prints a list with second fourth and the sixth items now let me show you a neat hack to reverse a list in python here i'll say print numbers and colon column minus one when i run this code you get this list reversed the fourth trick i want to talk about today is list set and dictionary comprehension comprehensions allow us to create lists sets and dictionaries in a more elegant and pythonic way using a single line expression suppose we have to create a list of the first five powers of two for this we would normally use a for loop and append every item to the list let me run the code i have on the screen and you can see that we get the expected result now wouldn't it be neat if you could do this same task in a single line list comprehension allows us to do exactly that let me show you how i'll define the numbers list directly with the expression which is 2 to the power i in this case so here i'll say numbers equals 2 to the power i now i'll add a for loop in the same line so i'll say for i in range of 1 2 6 and let me close the bracket now let me print numbers and when i press run i get the same output this code is much more simpler and elegant than before and it almost feels like you're reading english let me read this code out and you can decide for yourself why it works create a numbers list with elements in the form 2 to the power i where i takes values from 1 up to 6 that means 1 to 5. this results in the list of first 5 powers of 2. the next trick i want to talk about is star args and star star kw args star args is used to accept a variable number of arguments it can be used in a function to take any arbitrary amount of arguments let me show you what i mean i will create a function called add and for the arguments i'll say starags so let me remove this old code and i'll say def add and instead of just a regular argument i'll say star args let me define total as 0 and then in a loop i'll say total plus equals n and outside the loop i'll say return total now let me call this i'll say print add first let me try with nothing let me try one more so i'll say print add one comma two and let me try one more with three variables so i'll say add or maybe five one two three four and five the name arcs is arbitrary but is used as the standard convention when i press run you can see that this function worked no matter how many arguments i gave it now let's talk about star star kw args similar to starags star star kwrx is used to accept an arbitrary number of key value pairs it can be used in a function when we do not know how many keyword arguments are being passed let me show you what i mean so i'll remove this old code let me create another function i'll say def printer and the keyword args now inside this i can say for x comma y in keyword args dot items i've used the unpacking i've talked about before and here i can say print f i just want to print the key and the value like this now let me put this to the test so i'll say printer language equals python with just one key value pair and the next one i can try with two so i can say printer let's say name equals bill gates and company equals microsoft and when i press run no matter how many keyword arguments i give the printer function is able to seamlessly handle them before moving to the next section of the video the programming team has created an app that allows you to learn python from your phone the app contains bit size lessons that are easier to understand a builtin interpreter so that you can run python on your phone quizzes and many more the app is available on both ios and android the links are in the video description below the next trick i want to talk about is sets and set operations sets in python are like sets in mathematics a set cannot contain duplicate items and these items are not in any particular order in python we can perform different mathematical set operations intuitively using various python operators let me show you what i mean so i'll remove this old code and create two sets so i can say a equals for instance 10 20 20 30 and 40 and then let me create another set so 30 30 40 let's say 50 60 and 70. now if i want to find the difference between these two sets i can simply use the minus operator i can just say print a minus b and when i press run i get the difference of those two sets and if i want to find the union of these two sets i can simply use the or operator so here let me try print a pipe b pipe here is the or operator and when i press run then i get the union of these two sets similarly if i wanted the interest section i can say print a and b the and is the intersection operator and when i press run then i get the intersection of these two sets the seventh tip that i want to share with you is the chaining of comparison operators suppose we have to check if the age of a person is greater than 18 but less than 60. for this we would normally check each condition and use the logical operator and let me show you what i mean so i'll remove this old code and i'll say age equals let me convert to integer and say enter age now i'll say if age greater than 18 and age less than 60 i want to accept the person else let me say print rejected i save a file now when i run this code and enter age as 30 then i get accepted let me make this accepted i'll run this again let's say 30 and i get accepted as expected however in python there is a better way of writing this condition using operator chaining let me show you what i mean and i'll change this to say age sorry 18 less than age less than 60. now when i run this code again it says enter age and i can say something like 30 and i get the same output as before but this code is much more readable than before the last tip i want to talk about is the ternary operator ternary operators allow us to make our code more concise by allowing us to write if conditionals in a single line expression let me show you what i mean suppose we have to create a program that checks if a number is odd or even for this we would normally say we'll accept a number so let me remove this and say number equals to enter a number now obviously i'll need an if statement so i will say if number modulus 2 equals equals 0 print even and else oops i should have used modulus else i'll say print or let me run this code and i'll enter odd number like 31 and you can see that it prints odd using alternative operator we can shorten this program even more here i'll say result equals even if number modulus 2 equals equals 0 else odd now i'll print the result i'll say print parity is result now when i run this program it asks me to enter a number let me enter 31 again and this time i get parity is odd and you can see that this program also works like before but is much more concise that's it for this video if you want to revise these concepts you can find all these programs in our github repository i'll also put this link in the video description and if you like this video hit that like button and subscribe to the channel and i'll see you in the next one happy programming