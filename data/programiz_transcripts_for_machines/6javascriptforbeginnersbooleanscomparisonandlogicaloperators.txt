what's up guys i'm puny from programmers and welcome back to this series on javascript in this video we will learn about the boolean data type which allows us to store true and false then we will learn about comparison and logical operators which are used in decision making in programming let's get started basically booleans are data types like numbers and strings one interesting thing about boolean is that it can be of two values either true or false let me give you a quick example in my code editor i'll create two variables value 1 and value 2 and assign them boolean values of true and false respectively so i can select value 1 equals true and let value to equals false now let me print these variables so i'll say console.log value 1 similarly console.log value 2. now when i press run you can see that values of true and false are printed respectively we can also verify the data type of these variables using the type of operator i'll wrap value 1 and value 2 inside the type of operator and print them so in this i'll add console.log type of value 1 similarly console.log type of value 2. now when i press run in addition to true and false i can see that the type of value 1 is boolean and the type of value 2 is also boolean one thing you should remember is that true and false should not be used inside codes because if we use quotes they will be considered as strings and not boolean let's see an example i'll put quotes before and after true and similarly let me try the single quote before and after false when i press run now i can see the data type of value 1 and value 2 a string this time let me clean this code and get our original code back so i'll remove this and let me also remove these another thing we need to remember is that javascript is a case sensitive language and we cannot use true and false with capital t and f let me show you let me replace the small t with capital t and this small false with capital f false now when i try to run the code you can see that it says reference error true is not defined this is because true with small t is different from true with a capital t now that we know about booleans let's learn about comparison and logical operators these operators are used to create expressions that result in boolean values let's start with comparison operators first i'll copy all the comparison operators in the code editor so that it's easier for us to see them in action i'll remove this old code and paste all the operators here now let's go through them one by one let's start with the greater than operator the greater than operator checks if a value is greater than another value let's see an example so i'll say console.log and then i can say 8 greater than 5. here i'm comparing two values and simply printing them i'm simply checking if 8 is greater than 5 since 8 is greater than 5 the greater than operator in this case will return true let me run this code and see the output and as expected it returns true now let's change the value of 8 to 3 and see what happens so here i'll say 3 greater than 5 and when i press run this time i get false because 3 is not greater than 5. similarly we can use the less than operator to check if a value is less than another value in this code i will now change the greater than sign to less than so i can say 3 less than 5 and this time when i press run i get true because 3 is indeed less than 5 and let me replace this 3 by 5 what do you think will be the result when i press run you must have guessed it by now when i press run i get false because 5 is not less than 5 now let's see the greater than or equal to operator next as the name suggests the greater than or equal to operator returns true if a value is either greater than or equal to another value now let me change this less than 5 less than 5 to 5 greater than equals 5 now when i press run i get true because although 5 greater than 5 is true 5 is equal to 5 and this is also included with the greater than or equal to sine similarly we can also use the less than or equal to operator let me flip this operator to 5 less than equals 5. again although 5 is less than 5 is untrue 5 is equal to 5 and when i press run i get true this time as well equal to operator returns true if both the compared values are equal i'll use the previous code and change the less than or equal to operator to the equal to operator so here i can say equal 5 equal equals 5. mind you this is different from the assignment operator which is the single equal so for the equality check we use double equal instead of single equal here since 5 is equal to 5 we should get true as the output let me verify and press run and as expected i get true let me change the value to 6 and this time you must have guessed the output by now when i press run i get false now let's try something interesting i'll change the number 5 to a string so instead of 6 i can say 5 and now i'm comparing the string 5 to number 5 let's run the code as you can see we get true as output this is because the equal to operator checks only the data and not the data type since both string 5 and number 5 has the data 5 the equal to operator returns true similarly there is not equal to operator it does exactly opposite of what equal to operator does it checks if two values are not equal let me show you i'll change the previous code and i'll say 5 not equals 5 here i'm using the not equal to operator to compare 5 with 5 let's run the code this time i get false because obviously 5 is equal to 5 and 5 not equals to 5 will obviously be false now let me change one of the values to 6 and when i press run this time i get true because 6 is not equal to 5 is true if you're enjoying this video please also check out programs pro where we provide tutorials along with quizzes and challenges which will help you practice and test your learning in real time also the course includes projects to give you an awesome experience of how programming works in the real world and for our youtube subscribers we are giving 50 off on the yearly plan sign up by scanning this qr code or use the link in the video description to claim your discount in javascript similar to equal operator there's another operator called strict equal to operator the strict equal to operator compares two values and the data types as well so unlike the equal to operator the strict equal to operator won't consider a string value and a numeric value equal even if they have the same data let me show you in this code before we saw that five string 5 equals equals 5 was true but this time let me put another equals to here changing this to the strict equal to operator now when i press run as you can see the output is false this is because the strict equal operator checks both the data and the data type while making the comparison and here although data 5 is the same the data type of one is string and another is number hence they are not strictly equal similarly the strict not equal to operator also considers the data type while making the comparison let me change the strict equal to operator to strict not equals to operator so here i can say 5 string five not equals equals five and when i press run i get the opposite result which is true because obviously string five is not equal to number five when you consider it the strict comparison till now we have used the comparison operators to compare two values however we can also use comparison operators to compare two variables let's see an example i will create two variables number one with value five so let me remove this old code i'll say const number 1 equals 5 and i'll create another variable number 2 with the value of 9 now let me use a comparison operator with these variables so i can say const result equals number one less than number two here i'm checking if number one is less than number two let me print the result and see what i get so console.log result when i press run i get true because the value stored in number 1 which is 5 is less than the value stored in number 2 which is 9. we can also compare a variable and a value let me change the code i'll remove number two variable and directly compare the number one variable with nine so let me remove this and i'll say number one less than nine when i press run i get the same output as before these are all the comparison operators that are used in javascript they all return a boolean value and the expression where they are used are called boolean expressions in our previous example the code number one less than nine is a boolean expression boolean expressions are used to check a particular condition and perform actions based on the result of the condition we will see how to use comparison operators and boolean values to check conditions using if else in the next video now that we know about comparison operators let's learn about logical operators logical operators are used with boolean expressions to perform logical operations javascript has three logical operators and they are and or and not let's copy them in our code editor and see how we can use them let's start with the and operator the and operator returns true if both boolean expressions are true let's see an example let me create a variable age with value 18 and i'll create a height variable with value 5.5 now let's try using the greater than or equal to operator for age and greater than operator for height so i'll say let result equals age greater than equals 18 and height greater than 5 and now let me print the result variable so i'll say console.log result here we have used two billion expressions a is greater than equals 18 and height greater than 5 and we have used the logical and operator between them so for the result variable to be true both of these expressions need to be true since age is equal to 18 a is greater than equals to 18 is true similarly since height is greater than 5 this is also true hence the result of this and will be true let me run this and as expected we get true as the output now let me change the code to make one of the expressions false so i'll change height greater than 5 to height less than 5 and now when i press run i get false because the second expression is false and the and operator requires both expressions to be true for the result to be true okay guys we need your support to keep this kind of content free for all users youtube really likes engagement on the video so leave a comment below press that like button and hit subscribe if you haven't already let's get the engagement score high up so that more people can discover and enjoy these courses now let's learn about logical or operators the or operator returns true if one of the boolean expressions is true let's see an example i'll use the previous code and change the and operator to or you must have already guessed the output of this program let me run it and see if you guessed it correctly i'll press run and you can see that i got true this is because although the second half of the expression which is height less than 5 is false a is greater than equals to 18 is still true and for the or operator to return true any one of the expressions can be true unlike logical and and logical or the logical not operator is used with only one boolean expression it simply reverses the result the boolean expression is true it returns false and if the boolean expression is false it returns true let's see an example i'll remove this old code and i'll say const height equals 5.5 now let me say cons result equals height less than 6 now i can say console.log result and you must have guessed by now this will be true but let me put the not operator in front when i press run instead of true i get false because this expression is true the value of result is true but the not operator reverses that result and makes it false now let me change this expression by making this smaller than to greater than when i press run this time i get true because this expression is false and the not operator again reverses that to true boolean expressions are the very foundations of programming they're very useful in decision making and loops they are used to check particular conditions and based on the conditions we can make decisions in code suppose we want to check if a person is eligible to vote or not then we can use a boolean expression to check if the age of that person is greater than 18. if true the person is eligible to vote otherwise not eligible so boolean values and expressions are useful in programming this covers the basics of the booleans comparison and logical operators we will learn to use them in creating decision making statements in the next video now that we have reached the end of this video it's time for the programming quiz which of the following code returns true comment the answer below and if you want to revise these concepts you can find all the programs in our github repository i'll put the link in the video description below happy programming you