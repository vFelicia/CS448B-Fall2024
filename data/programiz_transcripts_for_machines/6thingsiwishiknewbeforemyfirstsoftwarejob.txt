today i want to talk about some of the things that i wish i knew when i started my first developer job the reason i want to talk about this topic is because when i started my first developer job as a professional software developer there were so many things so many things that you know i realized that i had the wrong concepts about when i was in college i used to think that writing software development or software developers career is all about wearing a hoodie and you know writing code in front of a black screen but when i started my journey as a professional software developer i realized that i had so many misconceptions about the career of a software engineer especially not just you know and software engineering or software development can be such a broad term there's mobile app development there's web app development there's data science there's so many fields and each field can be so different in its approach to a problem that you know you might need to work differently or you might need to think differently even for instance if you're if you want to go into cyber security the kind of mindset that you need to be a cyber security researcher or an ethical hacker is so different from someone who wants to work in enterprise software that you know the good practices of one field can be bad practices in another field so before i continue i want to talk a little bit about my history as a software developer and what i've learned through that history after graduation my first job was in a company in hyderabad india where i was working on csharp and and the microsoft suit of business intelligence software so it was called ssrs sscs nssis and i was also working on windows 8 metro applications so there was something called windows 8 metro applications that were full screen applications for windows 8 and it was a lot of legacy code so i was working on fixing other people's codes and it was kind of a shocker for me because you know i was thinking okay i would get a fresh code base to work on i would get to start something new but then that was probably the first shock that i got as a entrylevel software developer i also got introduced to javascript during that time and after a few months i felt that you know uh so the company i was working for was like more like a corporate setup with 300 employees and i always felt that i was more of a startup kind of guy so when and when i got an opportunity to work in a startup i just grabbed it and i changed my location to noida in india so it's more in north india where the technology stack was completely different so here i had to work on java linux distributed systems i had to write code that simulated statistical equations so in programming language called r i have to build complex graph graphs using javascript and a framework called d3 so it was this whole new ecosystem of programming languages and you know deployment strategies and a completely new world basically after i came back to nepal and started programming with my friends it was a different challenge because we were then working on content writing content making the website very good usable and now i'm being focused on building more advanced tools like our compiler or our mobile app and also creating these videos one thing i was not aware of uh when i was in college or when i before i started my first professional job was you know how how fast the technology was growing and how fast i would need to adopt to new check technologies as i mentioned i started as a csharp developer then moved on to javascript then again went back to backend so doing java r you know doing a lot of graphs using technology like apache storm so distributed systems all these things and in the matter of six months i had to completely change even my you know the operating system my laptop was running and literally everything so when i was in college or before i got those experiences the image of a software development career i had was working on a programming language for two years then slowly maybe learning another language i was not prepared for the pace at which uh technologies are growing and that is why throughout these python videos and these unscripted videos one thing that i've always focused on is mastering the key concepts don't call yourself a python programmer or a javascript program or a csharp programmer call yourself a programmer so that if the technology changes if there's new concepts that's coming in you are always ready to learn them and you're not sticking to one or two programming languages so the thing about software development that i love and also i hate is that you have to learn so much every day uh the intuition i had was i would be a beginner for six months then i would be a six after six months i would be a midlevel developer then maybe after two years i'd be a senior developer but the reality is not uh like that the more i learned the more i feel like a beginner and the more i realize that there's so much to learn there's so much to learn every day another thing i wish i knew was the importance of starting out with the right programming language because i was lucky in college the company in which i got my first job even before my college had ended they gave me a training on javascript and even after six or seven years i'm still writing a lot of javascript code it's one of my favorite programming languages along with python and the reason i'm so grateful that i started with javascript is i started a programming language that was growing very rapidly and that is why you know i i got a good paying job in the like right out of college and that is why that sort of gave me the momentum for the rest of my career now i'm not trying to bash on programming languages that are not as popular today like c or c plus plus but what i'm trying to say is if you're going to a market place where you know there's a demand for certain programming languages based on the market market value of those programmers then you have to be a bit smart about it so if you're starting out in your career it's always better to choose the right programming language do your research find out which technologies are in demand and make sure that you learn those technologies that is something that i would have told a younger myself quick announcement guys our python holiday sale ends today grab it now the links are in the description below another thing i would have told myself or told a younger punit is don't focus on learning too many programming languages instead focus on the key concepts of software development what do i mean by that let me give you an example so i there's this one person i know she is doing she did this 100 days of code challenge and she did like every day she would post the solution of some problem for 100 days in one programming language so she started with python i think then she went on to see and then then she went on to dart so she did this 100 days of coding challenge for three different programming languages not really solving new problems so the same problems in different programming languages i do not suggest that because you know learning too many programming languages isn't helpful instead if you are a master at one programming language and if you know the basics and not just the syntax of a programming language if you know you know what surrounds programming like networks cyber security deployment debugging testing so if you know all these things then no matter which programming language you pick up you will always become a good software developer another thing i wish i knew before was uh the importance of people skills now you are not going to be building software alone there is going to be a team so the way you communicate with the team the you the way you uh pose questions and answer to your team can make or break your career as a software developer what do i mean by that when you know you're working in a team setting then there are going to be conflicts there are going to be partnerships you form with people and if you are able to build trust and you know build good relationship with those people then definitely your life as a software developer is going to be hard and instead if you do not manage those conflicts properly if you have uh quarrels and disagreements with those people and you are not able to resolve them then you know life is going to be very difficult that is something that i did not know you know i was only doing software development alone or maybe just this one friend who was comfortable with me now if you're going to be in a professional job you have to work with people who you might not be totally comfortable with sometimes and that is where you have to show a true test of character where you have to balance those communications and those disagreements and you know sometimes you need to take a stand sometimes you need to step back so people skills are really underrated in any field but especially in computer science there's this whole godly treatment for coding the coding part and not really a lot of focus on the communication part so that is something that i wished i knew another thing that i did not appreciate as much as before is that software is built to solve other people's problems not your problems and if you are going to build a good software then you know your ability to ask good questions to the client understand what they really want to build understand what their budget is and what you can build within the budget by budget i mean not just money but also time and your approach to you know the software development really depends on these so many factors that are outside the paradigm of just coding and i wish that i was better at that now after six or seven years after working with many clients i will sometimes flat out say no to some clients sometimes i'll tell them no this cannot be done within your budget or sometimes i'll tell them this is what you're going to get for this amount of money or this amount of time and this ability to set realistic expectations with client talk to them consult them on not just the programming side but also the business side of their idea is something that i learned over time and i wish if i was better at these things in the early stages of my career maybe you know it life would have been much easier for me maybe i would have been able to help my clients much better than i am i was able to do before another thing i wish i was good at before or i knew before was the importance of building relationships and building your networks there's a lot of focus on this public networking side of it so people say you should go to meetups people should say you should go to events yes all these do help in fact i myself was very active in organizing meetups when i was in early stage of my career and when i came back to nepal but now uh there's i also see this other aspect of networking which is a private networking what do i mean by that well what i mean by that is you know building on the relationship that you already have with your peers an example for instance could be say you're in college still in college and you're trying to learn programming or you're interested in say machine learning or competitive programming or some or cyber security some aspect of that now what you could do is you could start a cyber security club in your college or you could start a machine learning enthusiast group on a messaging platform like telegram or whatsapp but that is not enough because then you know you might get lost now what i wish i had done before is what i do now is i also set some discipline that you know this group or four or five people for example who are interested in cyber security we will meet once a week or once a month and do some activity related to the field that i'm that we're all interested in for instance right now i have a group of bloggers uh or content creators who meet on the last saturday every month and on that date we discuss you know ideas we discuss new concepts we discuss what's happening in the industry and that is an aspect of networking that i did not know existed so this private networking and public networking both are equally important you have to be active on sites like linkedin you have to share your work on github you have to you know interact with other people who are doing good work you have to support others and you have to also ask for help when you're stuck another thing i wish i knew was the importance of writing clean and maintainable code before when i was not a professional software developer i was the only right person who was writing a piece of code and maintaining it and i you know underestimated the amount of effort that would go into making sure that the code you write today survives for years and years because once you write get into this habit of writing in unmaintainable code that is a habit that can uh really take over you and that can be a habit that is very hard to get rid of so because people spend a lot more time reading code than writing code and as a professional developer i have spent much more time reading other people's code fixing other people's code maintaining other people's code than writing my own code that is sort of a myth i had in college or when i was not a software developer i had this image of a software developer really creating things from scratch always building new things and that is i realized that that's not the case so for your own sanity and for the sanity of other people who are going to be reading your code make sure that your code is very clean very maintainable variable names are good function names are good you divide your code into modules and packages another thing that i used to do that i wish i did less of was using clever tricks in my code so um especially when you know you are the only person maintaining code you want to be very clever you want to use mathematical tricks in your code or shortcuts in your code to do things in a creative way and while that creativity might be useful in some fields like competitive programming where you know or there's also some sort of competitions where you are challenged to write some piece of code in in the less least number of characters except those few exceptions it's always good to write code that is clear to read and that is that this clearly describes what it is doing without being too tricky because a lot of people are going to be reading your code and if they confuse if they get confused then they are going to waste a lot of time so one thing that i wish i did less of or i wish i told i could have told myself is don't use too many tricks your code is going to be read by a lot of people a lot of people are going to be working on your code in the future so don't use tricks make your code as readable or as easy to read as possible another thing i wish i knew was there's a lot of maintenance work to be done in software so i talked about this before as well the image that i have i had of software development was starting you know writing always writing code always writing code but after i came into the industry i realized that i had to work on a lot of legacy systems i had to work with programming languages that were not popular at that time and that was like you know 10 years back they were popular but in hindsight i think it was a good experience i'll tell you one exact experience i had so there was this old legacy code and the brief that i got was the design guidelines or the other guidelines followed in this code are not up to the standards of the company so uh these guidelines were some of them about how comments were written some of them were about how strings were converted to integers or floats so little things that you know the guidelines were not being followed and i had to make sure that all those code followed the guidelines now imagine having to do that for thousands and thousands of lines of code and across hundreds and hundreds of files and it was not obviously exciting work but then i i turned it into a challenge so i wrote my own regular expressions to detect places where there were comments that were based on the old guidelines and i i while doing that work i also made a presentation about how i was doing that i was sending those presentations to my manager in fact after i had done done that work my manager was so impressed with the fact that i was so enthusiastic even with when working with legacy code or fixing legacy code that he put me in a more ambitious project so this will happen to you as well you will sometimes get a legacy piece of code or you'll have to maintain some code that that is not very exciting but you have to find the challenge in it as well now the things i mentioned right now are not the only things i wish because uh again i'm not you know a master at programming or i'm not one of the best programmers in the world but even even in with so little experience i i feel i've learned so much and that is the reason why this video is so long and i wish somebody had prepared this video for me when i was fresh out of college or someone would have told me these things that way probably i would not have had to struggle so much with so many of the things that i had to struggle with stay curious and i'll see you in the next one you