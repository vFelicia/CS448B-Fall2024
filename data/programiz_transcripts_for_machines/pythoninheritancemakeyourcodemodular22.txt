before we learn about python inheritance let's see an example of why it is used and what problem it solves suppose we are creating a racing game that will have cars and motorcycles to solve this problem we can create two separate classes to handle each of their functionalities however both cars and motorcycles are vehicles and they will share some common attributes and methods so instead of creating two independent classes what we can do is create a vehicle class that shares the common features of both cars and motorcycles we can then derive a car class from the vehicle class in doing so the car class will inherit all the attributes and methods of the vehicle class and we can later add car specific features to the car class we can also create a motorcycle class that inherits from vehicle in a similar way this is the basic concept of inheritance it allows us to inherit attributes and methods from a parent class to a child class in this example vehicle is our parent or base class while car and motorcycle are our child or derived classes by writing programs in this way we can reuse code that is common for different classes and also makes our code easier to use and maintain now that we know about inheritance let's learn how to implement it in python with the help of examples in the upcoming example we will derive a dot class from an animal class and get a feel of how inheritance works then we will move on to create a more practical example so i'll say class animal let's define a method named eat inside it so here i'll say def eat self and inside i'll say print i can eat this is our base or parent class now let's derive the dog class from this class so here i'll say class dog and before parenthesis i'll add animal inside braces inside this class i will create the bark method which is specific to the doc class so here i'll say def bark self and inside the function definition i'll say print i can bark this door class inherits all the attributes and methods of the animal class this means objects of dog can also access attributes and methods of animal let's see how so here i'll say i'll create a new object called dog1 and i'll say dog one equals dog now i can call this bark method on the dog one object so i'll say dog one dot bark now when i run this code you must have imagined the output already it says i can bark since our dog class is inherited from the animal class dog one can also call the eat method defined in animal so i can say dog one dot eat and now when i press run then i can eat is also printed because dog one has access to the eat method of the animal class let's see from the very beginning what's happening here we derived the dog class from the animal class so the dog class inherits all the features of the animal class now this object of the animal class can access attributes and methods of both the dot class and the animal class similarly if we want we can derive another class called cat from the animal class like this so here i can say class cat and inside braces i'll say animal so inside this class i'll define a method called get grumpy so i'll say def get underscore grumpy self and inside this i'll say print i am getting grumpy now let me create an object of the cat class cat one equals cat and let's call the eat method to see if it is accessible to cat so here i'll say cat1 dot eat and when i press run then as you can see i can eat is printed from the cat1 object as well as we just saw cat objects can also use the eat method defined in the parent class even from this very simple example we can see that inheritance makes our code more organized and reusable and if you're finding this video useful a sub to the channel would be tremendous before moving to the next section of the video the programmers team has created an app that allows you to learn python from your phone the app contains bit size lessons that are easier to understand a builtin interpreter so that you can run python on your phone quizzes and many more features the app is available on both ios and android the links are in the description below let's now look at a more practical example of inheritance and we will also cover the concept of method overriding in our example we are going to implement a program to calculate the perimeter of different polygons like triangles and quadrilaterals using inheritance here's what we will do we will first create a polygon class that has an init method a method to calculate perimeter and a method to display the definition of a polygon we will then derive two classes triangle and quadrilateral from it in these classes we will add methods specific to them let me first create a base class called polygon so in my code editor i'll remove the old code and i'll say class polygon and inside it i'll create an init function def underscore underscore init underscore underscore and pass in self and i'll pass in the sides as the second argument so here i'll say self dot sides equals sides to make things easier we will make the sides attribute a list that will contain all the sides of a polygon now let me add a display info method to display information about this polygon so here i'll say def display underscore info it will also take the self parameter by default and inside i'll say print a polygon is a two dimensional shape with straight lines let me also add a perimeter method that will find the perimeter of this polygon remember that perimeter is the sum of all sides of a polygon so in my code editor i'll define the perimeter method as i'll say def get underscore perimeter self perimeter perimeter equals self sorry sum self dot sides sum is a function that can act on a list and provide the sum of the elements of that list so then i'll say return perimeter this will be our base class all polygons like triangles and quadrilaterals will derive these features now that we are done creating the base class let's create a triangle class that will inherit from the polygon class so i'll go here and i'll say class triangle and then because we want to inherit from the polygon class inside parenthesis i will say polygon and i have my regular colon inside the triangle class i'll define a function called display underscore info so i'll say def display underscore info self and the definition of a triangle is print a triangle is a polygon with three edges i'll also define the new quadrilateral class so i'll say class quadri lateral and also again derived from polygon and inside it i'll say def display underscore info self now let me define a quadrilateral as a print a quadri lateral is a polygon with four edges here in each of these cases we have defined a child class from the parent polygon class that will inherit all the attributes and methods of the polygon class now let's find the perimeter of a triangle first i'll create an object of a triangle class so i'll say t1 equals triangle let me pass in the sides of the triangle when we create the t1 object the init method of the polygon class is called automatically now let's find its parameter so here i'll say perimeter equals t1 dot get underscore perimeter this code calls the get parameter method in that is defined inside the polygon class and returns the perimeter of the t1 triangle let's print parameter and run the code to see if our program is working correctly so i'll go back down and i'll say print the perimeter is and i'll say perimeter now when i press run then there seems to be an error okay triangle object has no attribute get parameter so i have forget underscore parameter correctly oh i'm i am i've misspelled parameter here now when i press run then it says the perimeter is 18 so 5 plus 6 plus 7 is 18 that means my answer is correct as we can see we get the perimeter as expected if you've noticed we have this display underscore info method in both the polygon class and the two derived classes as well let's see what will happen if we call the display info method for the t1 triangle so here i'll say t1 dot display underscore info and when i run the code we can see that the display info method of the triangle class is called instead of the display info method of the parent class this is called method overriding if the same method is defined in both the base and the derived class then the method of the derived class overrides the method of the base class let's see from the very beginning what's happening here we defined a polygon class and created three methods inside it the init method the display info method and the get parameter method then we derive two classes triangle and quadrilateral where we again define the display underscore info method inside the display method of the triangle and the quadrilateral classes we defined specific details of both triangles and quadrilaterals this is called method overriding due to this when we call display info using triangle objects it doesn't use display info of polygon rather its own display method is called by the way if we need we can call the display info method of our parent polygon class from inside its child classes like this here inside the display info method of the triangle class i can say polygon dot display underscore info and self when i run the code then it also prints a polygon is a two dimensional shape which means the display underscore info method of the polygon class was called correctly as you can see the print function inside the display info of the triangle method was called first and then only after that the polygon classes display info function or method was called here polygon is the name of the parent class since we are calling the method using the class rather than an object we need to pass self explicitly here this code is a bit more unorthodox than what we have been using there is a more elegant way to achieve the same task by using the super function like this so here instead of polygon i'll say super and when i press run it says display info takes one positional argument but two were given this means i don't need to pass self when i press run then i get the same output the super function returns a temporary object of the superclass for a subclass simply speaking super is an object of polygon in this example and we are using it to call display info of the polygon class that is why it through an error when i add herself here because super is an object and not the class name we can use this to access the method and attributes of a parent class from inside a child class at this point we have covered all the fundamentals of python inheritance by the way we haven't used this quadrilateral class in our example yet if you want feel free to create objects of the quadrilateral class and try accessing the available methods as you please it will help you understand these concepts much better and get a feel of how things work in object oriented programming by the way you can find all the source code mentioned in this video in our github repository the link is in the description below that's it for this video if you like this video hit that like button and subscribe to our channel and i'll see you in the next one happy programming you