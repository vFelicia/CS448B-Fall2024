let's talk about python packages a package is a directory containing multiple modules and other sub packages in this video we will learn about python packages with the help of examples then we will learn about pip the standard package manager python we got a lot to cover so let's get started before we learn to use packages let's see what problems it solves suppose we are developing a large program to simplify this program we can first divide it into modules if our program is very large there might be a lot of these modules so we further need to group related modules together so that everything is organized python packages allow us to do just that they help us to organize related modules together let's look at an example to understand this concept even more clearly suppose we are developing a game with multiple objects so it may have these different modules since these modules are in the same location they look cluttered right now we can structure them in this way instead here the similar player and boss modules are kept under the characters package also gun and knife modules are kept inside the weapons package then both characters and weapons packages are again kept inside the main game package as you can see our project looks much more organized and structured with the use of packages now let's try to implement this in our code to keep this video short and to the point i will only implement the characters package but you will soon see that the core concept will be the same for other packages as well i'll first create a package name game that will contain all our game components so let me go to my code editor and i'll create a directory named game then i'll create a file named init.pi inside it so i'll say underscore underscore init underscore underscore dot pi this is a special file which will tell python that this directory is a python package i'll leave this file empty for now now let me create a sub package inside this game package so here i'll create a new folder called characters since this will also be a package let's not forget to add the init.pi file inside the characters folder as well this will tell python that characters is also a package or it is a sub package of the game package now i'll create two modules inside this package so let me create the player.5 module first so here i'll say player dot pi and inside this file let me add a function so i'll say def get player info and inside this function let me just say print i am the main player so let me save this file and then i'll create another module called boss dot pi so i'll say boss dot pi and inside this boss dot file let me just add one function i'll say def get boss info and inside this function i'll just write print i am the enemy player and save this file here i have just used the simple function to illustrate python packages however while actually developing such large programs these modules might contain classes and multiple functions now let's try to import each of these components by using the import statement i'll create a new file outside the game package and i'll call it main dot pi so here i'll say main dot pi then i will say import game and use the dot notation to access the player module inside the characters package so i'll say import dot characters dot player now i can use all definitions inside the player module let's use the get player info function of the player module so i'll say game dot characters dot player dot get player info let me wrap this up so that you can see it okay i said info so i'll save this file and here on the terminal i'll say python main dot pi and as you can see the function was correctly called and i am the main player is printed we can also use the from import statement to import only certain modules from the package let me show you how to do this i'll first remove this old code and here i'll say from game dot characters import player here we have only imported the player module of the characters sub package so we can access the get player info function without using the game package so i'll only type player dot get player info i'll save this file run main dot pi again and you can see that i got the same result as before while writing lesser code we can also import only certain definitions from inside these modules as well i will now import only the get boss info of the boss module so here i'll say from game dot characters dot boss import get boss info now i can call the get boss info directly and if i save this file and run the code then you can see i am the nme player was also printed both functions work as expected a tip for you when you use packages always try to give descriptive names to functions and classes so that you don't get confused now we have created this init files without doing anything inside them the code inside this file runs automatically when we import the package let me add a line here inside the init file of the game package here i'll say print initializing the game now let me go back to my main dot pi file and if i run the code again so here i'll say python main dot pi and when i press enter you can see that initializing the game was also printed to the screen that means the code within the init file was executed when the package was imported and that is why initializing the game was printed here by the way if you're finding these videos useful i would appreciate if you could give a sub to the channel now that we have implemented the characters package i hope you have the basic idea of working with packages i highly encourage you to try and implement various functions for the weapons package by yourself before moving to the next section of the video the programmer's team has created an app that allows you to learn python from your phone the app contains bit size lessons that are easier to understand a builtin interpreter so that you can run python on your phone quizzes and many more features the app is available on both ios and android the links are in the video description in our previous example we looked at how to create a python package there are thousands of such useful packages tailored for specific tasks that are developed and maintained by the active python community when you start working on more advanced projects you will have to use these packages at some point rather than building everything from scratch for example if you're working with web development you will probably use packages like django or flask to use these packages we first need to install them this is where pip comes in pip is the standard package manager for python that helps to install and manage additional packages that are not available in the python standard library let's use pip to install a package called pandas it is a popular package for data analysis in python to install this package i'll say pip install pandas and when i press enter as you can see it's downloading the pandas package depending upon the size of the package it may take a while one cool thing about pip is that it also automatically installs all required dependencies to run pandas like numpy which is another popular package for scientific computing now that the process is complete i will open a new file and inside it i'll write from import pandas as pde now i just want to check if the partners module is working so here i'll just say print pd and save this file now here i'll say python main dot pi as you can see pandas is correctly installed and we can start using it in our code sometimes you may have to install a specific version of a certain package in that case you can specify the package version using the double equal syntax let me show you i'll go to my terminal and i'll type pip install requests equals equals 2.21.0 and as you can see it is collecting and installing the specific version of request that i requested for if you want to list all the installed packages you can use the pip list command so in my terminal i'll clear this out and i'll say pip list as you can see it printed out all the packages that i have installed on my computer as you can see pip is a very useful tool that makes managing external packages a whole lot easier if you want to learn more about pip you can check out our article on it the link will be in the description below that's it for this video if you want to revise these concepts you can find all these programs in our github repository i'll also put this link in the video description and if you like this video hit the like button now and subscribe to the channel and i'll see you in the next one happy programming