what's up guys welcome back to this series on c programming in this video we'll learn about pointers in c more specifically we'll learn to work directly with computer memory address with the help of pointers so let's get started pointer is one of the main features that make c programming so powerful it allow us to work directly with the computer memory before we learn about pointers let's first learn about addresses in c programming whenever we declare a variable a space will be located in the memory for the variable and c allow us to access the address of the variable we use the ampersand symbol with the variable name to access the memory address let's see an example you might be familiar with the basic structure of c program now i'll create an integer variable is so int is and i'll assign value 25 to this now let's use ampersand symbol to access the address where the is variable is stored so printf percent p comma ampersand is here i have used person p format specified to print the address now let me run this code here you can see we get this output which is the memory address where 25 is located when you copy and run the exact same code you may get different output because the output is based on the location where the variable is stored and it varies device to device if you remember we have used ampersand symbol with scanf like this like ampersand is so usually we use this ampersand is with scanf while taking input from the user this is because with scanf we are instructing the compiler to store the input value at the memory address specified by this ampersand is now that you know about memory addresses let's get back to pointers just like a regular variable a pointer is also a variable however a pointer variable stores the memory addresses of the variable not the actual value let's now see how we can create pointers so i'll create pointer int asterix ptr here ptr is a pointer variable let me create a regular variable and compare these two so i'll create int var when comparing these two you can see the only difference between these two is this asterisk symbol now let's see how we can assign value to a pointer variable here is our code from our earlier program now let me create a pointer variable int astrix ptr as we know a pointer variable stores a memory address of a variable and we also know that ampersand is gives the memory address so when we assign ampersand is to the pointer variable the pointer variable should store the memory address of the a's variable so let's do that now i'll assign this pointer to the address of a's variable and i'll print this using printf statement comma ptr now let me run this code here you can see we get the same result for both ampersand is and ptr by the way if you are watching this there is a good chance you want to improve your skills in c programming lucky for you we have a mobile app that provides a wellstructured c programming course with certification at the end and you can use the app alongside the video to practice on the building compiler our course is free so download now by scanning this qr code or click the link in the video description we can also access the value of a variable using the pointer let's see an example in our code from our earlier example i'll remove this print statement and i'll modify this print statement here address colon express n now let's print the value using ptr pointer i'll use printf statement printf value colon percent d comma asterisk ptr here asterix pti gives the value stored in the ptr address and since the value is in integer i have used percent d format specifier now let me run this code as you can see we have successfully accessed the value using the pointer variable remember ptr is a pointer that stores the memory address and asterix pti gives the value stored in the memory address pointed by this ptr in our last example we saw that we can access value of a variable using pointer variable similarly we can also change the value of a variable using pointer variable let's see an example here we have our code from our earlier program here in this program i'll remove these two print statements now let's use pointer variable to change the value from is 25 to 31 so i'll use pointer and assign value 31. since we know astrix pti gives the value pointed by the ptr address so this code assigns a new value to the memory address pointed by the ptr variable now let's print the value of the a's variable i'll use printf statement percent d comma is and i'll run this here you can see the value of ace variable is changed to 31. this is because the ptr pointer points to the address of is variable and we have changed the value pointed by ptr pointer from 25 to 31 so ultimately we have changed the value of the ace variable okay guys we need your support to keep these types of content free for all users youtube really likes engagement on the video so leave a comment below press that like button and hit subscribe if you haven't already let's get the engagement score higher so that more people can discover and enjoy these courses while working with pointers you might encounter these two syntax of creating pointers while both are the valid ways to create pointers you should try to avoid the first one because this syntax sometimes creates a lot of confusion let's try to understand this with the help of an example here we have created a pointer that stores the memory address of the a's variable in this syntax this asterisk symbol is attached to ptr so many things that this asterisk ptr is the pointer and try to print the address using asterisk ptr which is wrong this is because asterisk ptr gives the value pointed by the pointer not the memory address let me show you i'll use printf statement here percent d comma asterix ptr and i'll run this as you can see we get the value of the a's variable not the memory address so to avoid this confusion i highly recommend you to create pointer like this now you can visualize ptr separately as pointer and asterisk as the part of syntax to create a pointer now let's revise pointers here we have a regular variable number and pointer ptr then ptr is equals to number is wrong this is because ptr is pointer which can only store memory address but number is not a memory address so so this is invalid asterisk ptr equals to ampersand number is also wrong this is because asterix pti gives the value stored in the ptr location however ampersand number gives the memory address so so this is also invalid ptr equals to ampersand number is a valid code because both ptr and ampersand number represent the memory address so this is a valid code and asterix ptr is equals to number this is also valid because both asterisk pti and number represent the value stored in the memory location so this is also a valid code now to revise what we have learned in this program here is a programming tax for you create a program to change the value of a variable using a pointer here is how the programs would work get input value for a double variable salary assign the address of salary to a double pointer now use the pointer to print the value of a salary and increase the salary by two times and print the new salary you will find the answer to this question in our github repository and also if you want to revise this concept all this program will be in there i'll also put the link in the video description below now that we have reached the end of this video it's time for programming squeeze which of the following is valid for variable a and pointer p comment or answer below see you in the next video happy programming you