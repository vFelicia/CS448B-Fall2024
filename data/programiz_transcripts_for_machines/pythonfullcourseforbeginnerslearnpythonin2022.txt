are you new to the programming world and haven't done any programming before or have you done some programming before whether in python or in some other programming language but want to learn python if the answer is yes then this video series is for you what's up guys my name is puneet i'm the cofounder of programmers i am also an oracle certified java professional and former microsoft most valuable professional i'm delighted to be an instructor for this video series in this series i'll teach you everything you need to know to get started in programming with python step by step let's get started before we begin let's answer an important question why learn python why not java c c plus plus are the dozens of programming languages out there let me answer this question first from the perspective of a programming beginner python is one of the easiest language to learn because of its easy to use syntax take a look at this program to add two numbers written in java you don't need to understand it yet now let's see how we would write the same program in python as you can see the python code looks much more readable the simplicity of python syntax allows you to focus on the logic rather than focusing on syntax that's the reason why python is taught as the first programming language in many many universities another reason to learn python is because of its growing popularity and applications python is used in machine learning web development data analysis scientific research automation and many more python is used by many companies such as google facebook netflix and so on it is also used by thousands and thousands of small companies so if you're looking for a job in programming you'll find plenty of opportunities if you know python now let's start learning python but before that we need to be able to run python i'll use an online tool created by the programmers team to run python online for this series let me open my browser and i'll go to the url that you can see on the screen i've also posted the link in the description below we will write python in this text area and when i hit run it will execute that code it's that easy you can use the same tool if you want or you can also use a beginner friendly id like tony to run python on your computer i'll also provide a link to run python on tony in the description below now that's out of the way let's write our first python program we will create a program called hello world if you do not know a hello world is a simple program that displays hello world on the screen since it's a very simple program it is used to introduce a new programming language to beginners let's write the hello world program i'll type print parenthesis quotation marks and hello world and when i press run then hello world is printed to the screen before ending this video i have a pro tip for you the only way you can learn programming is by writing code i highly recommend you to write this program and run it on your own if you have tried writing the program and got the output give yourself a pat on the back because you have just created your first program in python if you haven't watched the previous video from this series i highly recommend you watch that first on my screen i have the program from the last video i'll go ahead and run it first as you can see hello world is printed this program is using the print function to print whatever is in between the parentheses in this case hello world is a string a string is simply a sequence of characters either one or many and is always wrapped inside quotation marks now let me take this upper notch and print another string this time i'll use double quotes instead of single quotes so i'll say print oops print python 3 is awesome and this time when i press run then as you can see both hello world and python 3 is awesome are printed now you can use either single or double quotes for strings they're basically the same however you cannot do something like this so i'll change this to single quote and when i press run this time python shows me an error you cannot mix and match single and double quotes so i'll change this back and make this double quote when i press run then you can see the same output as before another data type that's heavily used in python is the numeric data and there are two commonly used numeric data in python integers and floats the difference between integer and float is that integer is a whole number and float is a decimal we can use the print function to print integers and floats as well let me give you an example quickly so i'll say i'll remove this old code and i'll say print 5 and i'll also write print 34.5 when you run the code the integer 5 and 34.5 and the floating point number 34.5 are printed one thing to remember is that if you use a number with quotations it's technically a string so if i surround five by quotes five here is a string and not a number i'll go back and remove this quotation marks for now till now we learned about strings and numeric data and how to print them in the realworld scenarios we may need to store and use this data in our program and not just print them in order to store data and use them later in our program we use something called variables before explaining more about variables let me give you an example so i'll remove the old code and i'll say city kathmandu here i've created the variable city and this variable stores a string data katmandu to store the data in a variable we are using the equals operator now instead of printing the string directly i'll print the city variable and see what we'll get so i'll say print city and this time when i press run then kathmandu is printed to the screen again this is because the city variable stores the string data kathmandu now technically speaking the city variable does not hold the kathmandu string when we write city equals kathmandu city is actually referring to the string kathmandu now storing data and referring to the data may seem like similar concepts but they are very different in python we will learn more about what referring actually means in detail in the future videos for now we'll continue to say that city stores kathmandu for simplicity now let me modify this program and instead of city i'll print city inside quotation marks and see what we get so i'll say city and this time when i press run then instead of kathmandu the string city is printed if i replace the quotes again and press run then this time again kathmandu is printed we can also change the data of variable holds after we print the city let me change the city to new york and print it again so i'll say city equals new york and i'll say print city now this time when i press run then it prints both kathmandu and new york let's try to understand what's happening here on line 1 when i say city equals kathmandu then city holds the string kathmandu on line 2 when i say print city then since the current value of city is kathmandu that's what gets printed on line 4 i change the value that the variable city is holding to new york on line 5 when i print city then since the current value of city is new york that's what got printed on the screen as you can see we can change the value of a variable which is why they are called variables i hope that makes sense it is also possible to assign a value of one variable to another let me give you an example so i'll remove this code and i'll add another variable called destination underscore city equals new york now let me try something different i'll say city equals destination underscore city and when i print city then you must have guessed by now when i press run then it prints new york not kathmandu this is because the value of now city is now the value of destination city which was new york we can also assign numeric data to variables in a similar way we assign strings to variables let's take a look at it so i'll remove this code and i'll say my favorite number equals 5. now let me print this quickly so i'll say my favorite number i'll print that now let me create another variable called pi and i'll say pi equals 3.14 and let me print pi and now let me do the same thing i did before with strings so i'll change my favorite number to pi and then i'll print my favorite number now this time when i press run then i get 5 3.14 and 3.14 again this is because on line 2 the value of five my favorite number was five on line five the value of pi was three point one four and on line eight when i print my favorite number its value has been changed to the value of pi which is three point one four if you need to print more than one variable and data in a single print statement we can separate them by commas let's take an example so i can say print city and i can put a comma here and i can say kathmandu here we are printing two strings city and kathmandu in a single statement one thing to notice here is that when we print objects separate by commas python adds a space in between them by default so when i press run then as you can see it prints city and kathmandu but you can also see that there's a space in between which was not there here and here we can also print variables and strings in a single statement i'll show you an example so i'll say city equals kathmandu and i can say something like print city and instead of string kathmandu i can do the variable city when i press run then i get the same output as before because the value of the variable city which was kathmandu is replaced in the print let's try one last example so i'll add another variable called kfc underscore locations the value of which is 3 and then i can say print city the variable city and then kfc locations comma kfc underscore locations here the city string the city variable the kfc location string and the kfc underscore locations variable are printed in one print statement i'll press run and as you can see all four are printed one by one and separated by space that means the comma operator can be used to separate not just two but any number of objects and python will print them all at this point we have covered all the basics of variables before ending this video let's talk about how to choose a good variable name if you have noticed in our programs we have used simple and descriptive variable names like city kfc underscore locations and destination underscore city we can give variables like c instead of city it works just fine however it is hard to understand what c means just by looking at the code so i can replace city by c here and here as well and i can run the program and i'll get the same output but here you can see for yourself that it is very confusing to know what c really means when we use good descriptive variable names it becomes easier to understand the code to make variable names descriptive we may need to use names having more than one word in that case you can separate the variable name by an underscore like destination underscore city in our program by the way there are some rules you need to know while creating a variable rule number one you cannot create a variable name with space in between like this you also cannot start a variable name with a number rule number three you cannot use certain words as a variable name you cannot use else as a variable name because else is a keyword these keywords have special meaning in python and are part of the python syntax we will learn more about these keywords as we progress through the course before we end this video here's a recap of what we learned we learned about three most common data types in python strings integers and floats a string is a textual data surrounded by codes integers and floats are numeric data integers are whole numbers and floats are decimals we also learned about variables variables allow us to store data so that we can use them later in the program it's possible to change the value a variable can hold and last but not the least we learned to give good descriptive names to variables by the way you can find all the programs from this video on github i've provided the link in the description below feel free to copy the programs and edit them as you please if you're enjoying this video please also check out programs pro where we provide tutorials along with quizzes and challenges which will help you practice and test your learning in real time also the course includes projects to give you an awesome experience of how programming works in the real world and for our youtube subscribers we are giving 50 off on the yearly plan sign up by scanning this qr code or use the link in the video description to claim your discount in the last video we learned to create variables so that we can store data and use them later in the program let me give you an example quickly so i'll go to my compiler and i'll say name equals felix and i can say print name now when i run the code as expected felix is printed to the screen now if you're a skeptic like me you must be thinking this is pretty useless right in the real world we will typically ask the user what the name is instead of putting it ourselves let's see how we can do that to take input from the user we use python's input function so i'll replace this felix by the input function and this time when i press run then python waits for me to input something here i'll type felix as before and when i press enter then i get felix back let's try to understand what's happening here when i pressed enter then whatever i had typed that is the string felix is stored in the variable name and on line 2 when i print name then that the value of that variable name which is felix is printed back this program to take input from the user is working correctly however we haven't provided any clue to the user on what to enter let's change that as we are trying to ask the user for their name inside the input function i will type enter name and when i press run then this time python gives me a hint on what to enter so i'll say felix as before and when i press enter then this string felix is stored in the name variable and when i print the name variable it gives me back felix again now instead of a string let's try to take a numeric input from the user this time let me modify this program so i'll replace name by number and obviously replace the variable names as well and now when i press run then this time i'll enter number five as expected 5 is printed back to the screen it's that easy or is it well the input function takes the input in the string form when we enter 5 rather than the integer 5 the string 5 is stored in the number variable we are getting 5 without quotations because the print function always hides the enclosing quotations when we print a string we can know for sure it's a string rather than a number by using the type function the type function returns the type of a variable inside the print function i'll wrap the number variable by the type function and this time when i press the run button then it says enter a number and when i press 5 and press enter it says class str let's see what we get when we print the type of integers and floats i'll remove this code for now and i'll say number one equals five and here i'll say print type of number one let me create another variable number two and this time i'll say 5.5 and i'll say print number two now when i press run then it says class int and class float here number one is an integer and number two is a floating point number that is why when i run the code you can see that we get class in first which is representation of the type of number one and we get class float second which represents the type of number two which is a floating point number let's get back to our original code of taking numeric input from the user we still haven't solved the problem of taking integer and float input from the user in fact it's not possible to take integer and float input using the input function however what we can do is convert the string to a number after we take the input in this code after i take input from the user i will add a line to convert the string to an integer so here i'll say number equals integer number and now when i press run then it says enter a number i'll enter something like 5 and it prints 5 but i have no way of knowing whether it is an integer or not so here i'll wrap this number by type and this time when i press run it says enter a number i enter 5 and it says class integer which verifies that number indeed is now an integer in our code instead of adding this extra line to convert the string to an integer you can also do something like this so i'll remove this code and i'll add wrap this input function by the in function in the first line itself now when i press run then as usual it says enter a number i'll enter 5 and the class it verifies that indeed the number variable is now an integer here we are taking input from the user converting it to an integer and then storing it in the number variable all at once we can also convert strings to floats we use the float function for that let me change this code and instead of integer i'll use the float function so here i'll replace the int function by the float function and when i press run then i can enter something like 5.5 and it says class float which means this input was converted to a float and that floating point number was stored in the number variable when we pass values we have taken from the user to int and float functions python tries to convert the data to its corresponding integers and floats in our programs we have converted the string 5 to an integer and the string 5.5 to a float these are numeric strings numbers in string format that's the reason it's possible to convert these strings to integers and floats however python cannot convert every string to numbers let's find out what will happen if we try to convert a nonnumeric string to a number so here i have the same code from before and this time i'll press run and when it says enter a number i'll enter a string like felix when i press run then python tells me that it could not convert string to floor here python tried to convert felix to a floating point number but obviously it couldn't which makes kind of sense there is no way for python to know what's the equivalent floating point number for this felix string before we end this video here is a recap of what we learned we use the input function to take input from the user we can make the input function more descriptive by passing a string to it the input function always takes the input in the string form but we can convert a string to an integer using the int function similarly we can convert a string to a float using the float function if you try to convert nonnumeric strings to integers and floats we will get an error by the way you can find all the programs from this video on github i posted the link in the description below feel free to copy the programs and edit them as you please comments are hints that we can add to our program to make our code easier to understand let's take an example i have this program to print a text entered by the user to make this program a bit more readable i can add a comment like this so i'll say program to take the user's input this line that starts with the hash symbol is a comment we added this line with the sole purpose of making sure that anyone who reads our code understands what's going on however python completely ignores them we can also place comments after the code like this so i can say take input and then i can say print the name variable let me run this program as you can see it says enter a name and i'll enter felix when i press enter then it says your name is felix you must have noticed that only these two statements are executed and even for these two statements these lines are simply ignored now let me remove these two comments from my program i am removing them because these two statements are selfexplanatory and we do not want to make our code ugly by adding a lot of unnecessary comments we can also use comments to debug our code it is a common practice to comment out codes so that it is ignored rather than removing them completely let me give you an example let me write a program to take name and age input from the user so i'll remove this whole code and i'll say name equals input enter name and then i'll say age equals input enter is i want to convert it into an integer and then i will say print name is name and i will say print age is and then age suppose in this program it was not required for us to take age input from the user instead of removing these two lines what i can do is i can add a hash at the beginning of both of these lines so that they become comments and are ignored by the python compiler or interpreter let me run this program and as you can see it says enter a name i'll enter felix when i press enter then it says name equals name is felix but these two lines are completely ignored now later on if i want to use the age variable again or i need to accept that input from the user all i need to do is remove these two hashes and then they'll become statements instead of comments a little pro tip for you remember the keyboard shortcuts to apply comments in most text editors it's ctrl forward slash if you're in a windows and command forward slash if you're on a mac this will be very useful in debugging our code python doesn't have multiline comments like other programming languages such as c plus and java however we can use the hash symbol at the beginning of each line to get the same effect suppose we have this code and we want to add comments to all three lines we can do that by selecting all three lines and pressing command slash since i'm on a mac as you can see all three lines have been converted to comments if i want these lines back then i can again select them and press command slash and they will be converted to regular python print statements you can also use multiline strings as comments if you do not know we use triple quotes for multiline strings like this when i press run our string is printed here we are assigning this multiline string i am a multiline string to the test variable and we are printing that test variable however if we do not assign strings to any variable it acts as a comment because python completely ignores unassigned strings for example i can say something like this program takes and integer input from the user and print set then i can write out my program like number equals int input enter and integer then as we have been doing a lot in this video series i'll say print u entered number here this string acts as a comment because it's not assigned to any variable let me run this code it says enter an integer i'll enter something like 7070 and it says you entered 70. as you must have noticed these three lines are completely ignored by python now let's take a moment to discuss why comments are important imagine you're working on a yearlong machine learning project for a client since you were on a tight schedule you decided to ignore comments anyways you successfully delivered it to the client and the client is happy about your work fast forward a couple of months a new government policy was introduced and the client wants the product to comply with that policy since you are the person who developed the app it's your responsibility to maintain it without comments you'll forget the reasons why you wrote a particular piece of code a certain way and you'll end up spending a lot of time looking at your own code trying to understand it comments are even more important if you're working in a group it makes it easier for other developers to understand and use your code that being said comments are not and should not be used as a substitute to explain poorly written code you should always try to write clean understandable code and then use comments as an addition before we end this video here's a quick recap of what we learned comments are hints that we can add to our program to make our code easier to understand python completely ignores them in python the hash symbol is used to write comments comments are also used for debugging code python doesn't have multiline comments however you can use multiline strings having triple quotes that act as multiline comments in programming an operator is a symbol that is used to perform operations on values and variables we've already used the equals operator in our previous videos so we've been saying stuff like name equals puneet here the equals operator takes the value on the right and stores it in the variable on the left we'll get back to more assignment operators in a second let's start with arithmetic operators first we use arithmetic operators to perform arithmetic operations such as addition subtraction multiplication etc i'll copy a list of arithmetic operators here in my text editor so that it's a bit easy for us to use them let's try these operators one by one i'll start with the plus operator so i'll say something like x equals 5 and then i can say result equals x plus 10 and then i can print the result here i'll run this code and as you can see 15 is printed what's happening here is 10 and the value of x which is 5 are being added by the addition operator and the equals to operator is storing the result of these in the result variable on line 12 when i print the result because its value is 5 plus 10 or 15 that's what was printed instead of storing the result of adding 10 and x to the result variable we can also directly print the result like this so i can copy this and i can paste it here i'll remove the result variable for now and when i press run i get the same result because the addition operator still takes the value of x and 10 and adds them up and that's what's get printed by the print function but personally i think using a variable to store the result looks a bit cleaner than this so i'll revert back to the old code we have learned to perform the addition operator at this point now let's try all these operators one by one let me change plus to minus and run this as you can see minus 5 is printed because 5 minus 10 is minus 5. in python we use the asterisk symbol for multiplication so i'll replace this minus by asterisk and when i press run then 5 times 10 50 is printed similarly the forward slash is used for division so i'll replace this asterisk by slash and when i press run then 5 divided by 10 or 0.5 is stored in the result variable and that's what got printed here the symbols of these four operators addition subtraction multiplication and division are similar to symbols in mathematics let's try three more arithmetic operators the single asterisk is used for multiplication but if we use two asterisks without any space in between it's an exponent operator so i'll replace this slash with two asterisk and when i press run i'll remove this 10 and i'll make it 2 and when i press run then as you can see 25 is stored in the result because 5 raised to the power 2 or 5 times 5 is 25 the last two arithmetic operators are percent and two forward slashes using two forward slashes computes the quotient when one number is divided by another similarly the percent symbol computes the remainder when one number is divided by another let me give you an example so here i'll replace this result and i'll say quotient equals x double slash 2 and then i can say remainder equals x modulus 2 so the modulus this sign when used to calculate the remainder is called modulus and then i can say quotient is quotient and remainder is remainder when i press run then it says quotient is 2 and remainder is 1 that is because when 5 is divided by 2 the quotient is 2 obviously because 2 times 2 is 4 and the remainder 1 is stored in the remainder variable at this point we have covered everything we need to know about arithmetic operators when they are used with numbers before ending this section i have a pro tip for you we use a lot of operators in a single statement like this it's harder to understand which operation is performed first in this statement to avoid this we can use parenthesis so i can wrap these by parentheses like this and now it's so much easier to understand in the last section we use the plus operator to add two numbers the plus operator also serves another purpose in python it is used to join two strings let me give you an example so i'll remove this whole code and i'll say str1 equals hey and i'll say str2 equals jude and then i can print the concatenation of hay and jude like this when i press run then hey jude is printed it's working but let me add a space between hey and jude for that i can add a space at the end of hey and when i press run then as you can see there is a space now we have already used the most common assignment operator equals which is used to assign the value on the right to the variable on the left in python you can also do something like this so i i can say x comma y equals 5 comma 6 here 5 is assigned to the x variable and 6 is assigned to the y variable in one statement so this code is equivalent to x equals 5 y equals 6. personally i fee i feel this later syntax of x equals 5 and y equals to 6 is better because it makes the code easier to read there are also some compound assignment operators in python these compound assignment operators combine arithmetic and assignment operators in one single place i'll show you an example so i'll remove this old code and i can say x equals 5 and i'll say x plus equals 10 and i'll also say x minus equals 10. this x plus equals 10 is equivalent to x equals to x plus 10. this plus equals to operator is called the addition assignment operator because it first performs the addition then performs the assignment similarly the x minus equal 10 is equivalent to x equals x minus 10. these compound assignment operators are available with all arithmetic operators there are also other numerous operators in python which we will learn about as we progress further in the video series if you are curious you can visit our website programmers.com for more information on python operators along with numerous examples the link will be in the description below let's put the things we have learnt in this video in action suppose you're a university student and you need to pay 4535 dollars tuition fee for the next semester the college is giving you a discount of 10 percent on early payment of your tuition fee since it's a very good offer you decided to make an early payment now can you find out how much money you have to pay i'll store the fee in a variable called fee so i'll say fee equals 4 5 3 5 now my discount percentage will also go in a variable called discount percent and from here i can calculate the discount amount as discount percent by 100 i'll add parenthesis to form clarity times the fee this should be discount amount and then i can say discounted underscore fee equals fee minus discount amount now let me print the discount amount so i can say print fee after discount is discounted underscore fee and when i press run then ik i get the correct value of the fee after discount now it's time for you to solve a problem can you create a program to convert distance in kilometers to miles suppose you have a distance in kilometers stored in a variable like this so i can say distance underscore km equals 564.5 you need to convert this distance to miles using the formula 1 kilometer equals 0.62133 7 1 miles you will find the answer to this question in our github repository i'll also put this link in the description below before we end this video here's a recap of what we learned today the most common assignment operator is the equals operator it is used to assign the value in the right to the variable on the left we use arithmetic operators to perform basic arithmetic operations such as addition subtraction etc if you use the plus operator with numbers it adds two numbers however if you use the plus operator with strings it joins two strings if you use multiple operators in an expression we can use parenthesis to make our code readable before we learn to use comparison operators we need to understand about booleans the boolean is a logical data type that represents one of two values either true or false let me give you an example quickly so on my compiler screen i'll say result 1 equals true and i'll say result 2 equals false then i can print result 1 and result 2. now here we have assigned a boolean value true to result 1 and a boolean value false to result 2. when we write true and false the first letter is always capitalized also make sure that you don't wrap true and false around with quotes otherwise they would be treated as strings now that we know about booleans let's learn about comparison operators python has a set of comparison operators that allow us to compare two values if the comparison is correct we get true and if the comparison is wrong we get false let me give you an example here the less than symbol is a comparison operator that is comparing the number variable and the integer 10. since the value stored in the number variable is 5 the expression number less than 10 is true and when i press run you can see that it indeed prints true if you change number to 15 then the story is different so here i'll say number equals 15 and when i press run this time i get false because 15 less than 10 is obviously false printing these boolean expressions like this has little to no use in the next video we will learn about the if statement that makes use of these boolean expressions and which allows us to run different codes depending upon whether a boolean expression is true or false however for the sake of this video we will focus on comparison operators back to comparison operators let me copy of list of all comparison operators in our text editor so that it's easier for us to use them so here i'll remove the old code and i'll paste the comparison operators we have already used the less than operator let's try these comparison operators one by one i will start with the greater than operator so here i'll say number equals 15 and i'll say print number greater than 10. when i run it this gives true because number which is 15 is obviously greater than 10 here now if i change the number to 10 and run this again then this time i get false because 10 greater than 10 is false now let's see equal to and not equal to operators the equal to operator gives true if two values are equal so i can say number equals 10 and i can replace this and say number equals equals 10 so when i press run this time i get true because 10 and 10 are equal comparing a floating point value and an integer value which are equal also gives us true so here i can replace this by 10.0 and when i press run i still get true however the comparison of integer 10 and a string 10 gives us false so here let me replace this by the string 10 and then this time when i press run i get false the not equal to operator is the opposite of the equal to operator if i change equal to to not equal to here then this time i'll get true because the string 10 is not equal to the integer 10. the last two comparison operators are less than or equal to and greater than or equal to let's try them in action so i'll replace this code with 10 and then here i'll say number less than equals to 10 the expression number less than equals to 10 returns true if either number is less than 10 or equal to 10. it combines two operators less than and equal to into one now i'll run the code and it returns true because number is equal to 10 and that also counts similarly there is also the greater than or equals to operator so here i could have done greater than equal to and when i press run this also works or this also returns true because of this equal to number equals equals 10 is true and that's why this is true now i could have changed this to something like 12 and this would still be true because number greater than 10 is true in that case python also has three logical operators and or and not for your convenience i have added here the list of all the logical operators and what they do let's start with the and operator i'll create three variables age equals 8 22 gpa equals 3.8 and then i'll say a third variable result equals a is greater than equals 18 and gpa greater than 3.6 here the and operator is telling me that the boolean expression is greater than equals 18 and gpa greater than 3.6 both have to be true for this overall expression to be true now let me print the result here and when i press run i get true this is because both of these expressions are true now let me show you how the and operation works by making the second condition false so here i'll change this to 3.9 and when i press run this time i get false this is because as i explained before both of the expressions have to be true the fact that the first expression is still true doesn't matter because the second expression is false and my result is now false now let's see the or operator i'll replace and with or in this code code means that if either this expression is true or this expression is true the overall expression should be true now when i press run i get true because although the second part of the expression is false the age greater than equals 18 is true and that is enough for the whole expression to be true of course both of these can be true and the result will always be true so i can say 3.6 greater than 3.6 and when i press run the overall expression is true because both of them are true and the final logical operator is not the not operator gives the complement of the result for example i'll replace all this code and i'll say result equals true and print result this time when i press run i get true but i can do not result and this time when i press run then i get false i can also do the reverse i can say result equals false and when i press run i get true because this result was false now result would also have been a boolean expression like age less than equals to 18 and then i obviously i need an age variable 14 now when i press run then i get false because this expression is true and the not operator negates that result we have covered all the basics of comparison and logical operators at this point we'll be using these operators especially comparison operators extensively to create some interesting programs in the next few videos before we end this video here's a task for you can you guess the output of this program i'll give you a couple of seconds to pause the video and reflect on it as always you'll find the answer to the question in our github repository i've also included the link in the description below before we end this video here's a recap of what we learned the boolean is a logical data type that represents one of two values either true or false the comparison operators are used to compare two values if the comparison is right we get true and if the comparison is wrong we get false the logical operators are used on booleans there are three logical operators and or and not in python we use the if statement to create programs that can make decisions let's start with its syntax so on my screen you can see the syntax of the if statement the if statement evaluates the test condition which is a boolean expression if the test condition is true the body of the if statement is executed otherwise it is kept from execution notice the spaces before the statement here this indentation is used to differentiate between the body of the if statement it doesn't matter how many spaces or types we use for indentation however we need to be consistent with it generally it's considered a good practice to use four spaces for indentation now that we know the syntax of the if statement let's try a working example suppose you're a university student and to pass the examination you need to score 50 or more if you score 50 or more we will print you pass the examination let's see how we can implement this program so first i'll take the input from the user as score equals integer input enter your score then i'll say if score greater than equals 50 print you have passed your exams let me add another print statement as a print congratulations let me run this program and here in the score i'll enter something like 75 as you can see you have passed your exam and congratulations are printed to the screen when your score is 75 as in this example our test conditions score greater than or equal 50 is true and that is why these two statements are executed let me run this program again this time instead of 75 i'll enter something like 35 so this time nothing is printed to the screen this is because since score is 35 35 greater than equals 50 is false and the body of the if statement is kept from execution our program is working correctly but it's not printing anything when the score is less than 50. we might want to print something like sorry you failed your exam during this case so i will add another if statement i'll say if score less than 50 print sorry you have failed your exam and we can see that when i press run and enter 35 then it says sorry you have failed your exam this is because again this condition is false and this is skipped but this condition is true and this code is executed i have this code from our last section i have removed the code that takes the user input and instead i have hard coded the value of score so that we can focus on the logic of the if statement in this program we have used two if statements to perform two different tasks we know the student pass the exam if the score is greater than or equals 50. if the criteria is not met we know the student failed the exam in such cases instead of writing the second if statement with the condition we can use the else clause let's first look at the syntax of the if statement with the else clause on your screen you can see how it looks what happens here is that if our test condition is true these statements are executed and if it's false the statements inside the else clause are executed now getting back to our code to print whether the student passed or failed the exam in this program we know for sure that if the score is not greater than or equal to 50 then the student is failing the exam so instead of writing the second if statement we can replace the second if with else so here i'll remove this if and i'll write else and a colon here let me read this code in plain english if score is greater than or equal to 50 then print you have passed your exams and print congratulations else print sorry you have failed your exam the else clause catches everything that's not covered in the if's condition now when i run this code you can see that sorry you have failed your exam is printed the if statement with the else clause allows us to make a choice from two different options but sometimes we need to make a choice from more than two options in those cases we can use the elif clause with the test condition let's see its syntax first the if statement checks the condition inside the if statement or the test condition 1 if it is true then this block of code is executed and statements 2 and statements 3 are skipped however if the first test condition is false the control of the program jumps to the second test condition if this test condition is true its body is executed and other statements are skipped if both test condition 1 and test condition 2 are false finally the else body is executed if necessary we can add as many alif clauses as we want for our program to work and among all those alternatives only a single block of code is executed now we know how the alif clause works let's get back to our code to check whether the student passed a failed exam here this score variable stores the marks obtained by the student so it shouldn't be greater than 100 or a negative number if score is above 100 our test condition is true and you have passed our exam and congratulations is printed even though the score is invalid logically and if score is a negative number sorry you have failed your exam is printed because our test condition is false again score shouldn't be less than zero we need to fix this we can fix this by adding a condition to check if the score is valid or not at the beginning only then we will check if the student passed or failed the exam so in my code i'll make the changes i'll let's try for 105 and here i'll add a condition i'll say if score greater than 100 or score less than 0 then print score is invalid and then i'll turn this if into an alif and now i have put that condition to check if the score is valid or not now if score is greater than 100 or score is less than zero then score is invalid should be printed to the screen as long as score is a valid number our program should work correctly now if you remember this r is a logical operator which we discussed in the last video this test condition is true if either this part or score greater than 100 is true or this part score less than 0 is true as you can see the syntax of the if statement is pretty simple the harder part is the logic behind the test conditions and you will get better at creating test conditions with practice also be sure to check our video on comparison and logical operators that are used to create these test conditions i posted the link in the description below we have covered a lot of material in this video it's time for you to practice what we learned here is one programming challenge for you to solve now can you create a program to check whether a number is positive or negative or zero to create this program create a variable named number and assign a float value to it based on the user input then using a if statement check if the number variable is positive or negative or zero if the number is positive print the number is positive if the number is negative print the number is negative and if the number is zero print the number is zero you'll find the answer to this question in our github repository i posted the link in the description below since this video is already very long we will not explore nested effects in this video if you're interested you can find more information about the if statement in our website programmies.com along with numerous examples i posted the link in the description below before i end this video here's a recap of what we learned today the if statement is used to create programs that can make decisions the if statement evaluates a test condition if the test condition is true it executes the if body but if the test condition is false the if body is escaped from execution to specify the body of the if statement we use indentation in python the if statement can have an optional else clause the else clause is executed if the test condition is false if you need to make a choice from more than two alternatives you can add an optional alif clause with another test condition if you're enjoying this video please also check out programs pro where we provide tutorials along with quizzes and challenges which will help you practice and test your learning in real time also the course includes projects to give you an awesome experience of how programming works in the real world and for our youtube subscribers we are giving 50 off on the yearly plan sign up by scanning this qr code or use the link in the video description to claim your discount before we write the actual code of the while loop let's take a look at its syntax a while loop starts with the keyword while followed by a test condition followed by a colon then we write the body of the loop in the next lines notice the spaces before the body of the loop this indentation is important as it indicates the body of the loop here's how this pseudo code works python checks this condition which is a boolean expression that evaluates to either true or false if it's true the body of the while loop is executed at this point it's similar to the if statement however unlike an if statement that checks the test condition only once after executing the body of the loop it checks the test condition again this process goes on and on until the test condition evaluates to false if the test condition is never false the loop runs forever until the system's memory runs out let me give you an example so i'll remove this old code and i'll say count equals 0 then i'll say while count less than 5 print i am inside a loop let me add one more statement and say print looping is interesting let me run this program and as you can see these two print statements are executed again and again and again let's analyze what this program is doing here count equals 0 in this line count less than 5 or 0 less than 5 is true that is why these two statements are executed now since this is the while loop it will again check the test condition again count or which is 0 less than 5 is true and again these statements are executed this happens again and again and this condition count less than 5 is never false so the loop runs forever this is known as an infinite loop however most of the time rather than running a loop forever and ever we want loops to end at some point let's say we want this loop to run only five times we can do that by adding one statement inside this loop so that this test condition count less than five is false after running five times at the end of the loop i'll add one statement count equals count plus one here we have increased the count variable by one in each iteration of the loop now let's see from the start how the program works initially the count variable is zero that's why count less than five or zero less than five is true and the body of the while loop is executed if you've noticed this new line that we have added is incrementing the value of count by one since its initial value was zero its new value is one now the while loop checks the condition again this time count less than 5 or 1 less than 5 is again true and again the body of the loop is executed but this time since the value of count was 1 its new value is 2. basically this line count equals count plus 1 is increasing the value of count in each iteration of the loop from count equals 0 to count equals 4 which is 5 times after the 5 runs the count variable is increased from 4 to 5 only then the test condition count less than 5 or 5 less than 5 is false let me press the run button and show you so when i press the run button this time i am inside a loop and looping is interesting is printed only five times let me change this program a bit i will remove these two print statements and instead i'll print the count variable inside the for loop so that we can better understand what's happening now when i press the run button as you can see the value of count was 0 and it went up to 1 2 3 4 and 5 and when count was 5 it was this condition was false and the loop exited now let me modify this program again i will change count to 5 and i'll change this test condition to count less than equal to 10. can you guess the output of this program without running it i'll give you a couple of seconds to pause the video you can find the answer to this program in our github repository the link will be in the video description now let's try one more example of the while loop we will print the multiplication table of a number that is entered by the user from 1 to 10. to write this program we need to create a loop that runs 10 times from 1 to 10. let's do that first so i'll remove this old code and i'll say number equals int and then i'll take an input enter a number then i'll say count equals 1 while count less than equals 10 count equals count plus 1. let me run this code and it says enter a number when i enter 6 nothing really gets printed this is because i have not printed anything inside the while loop however this program is still doing something useful it is taking the variable count and increasing it from 1 to 10 in each iteration of the while loop because of the statement count equals count plus 1. now in each iteration of the loop we need to print the row of the multiplication table i will do that by adding a few lines so here i'll say product equals number times count and then i'll say print product we have computed the product by multiplying number by count and in line 6 we have printed the product by using the print statement let me run this program when i run it then it says enter a number and when i enter something like 6 we can see that the output shows the result when 6 is multiplied by numbers from 1 to 10. let's make that a bit more readable here instead of print product i'll say print number times count equals product let me press the run button and it says enter a number i'll enter something like 6 and when i press enter then it shows the multiplication table in nicely formatted manner this is because as we have seen in the previous video the print function takes whatever is in between the commas and prints them with spaces in between as you can see from this example you can write pretty awesome programs using loops the syntax of the while loop is pretty easy however the important part is the logic and how you use it and how do you get good at logic one word practice so here's a task for you to practice can you modify our multiplication table program so that you get a multiplication table from 10 to 1 instead of 1 to 10 you have to modify the same program that i've written here and you can see the expected output on the screen you'll find the answer to this question in our github repository also visit our website programmers.com for more information on why loop with examples i posted the links in the description below by the way if we know that our loop iterates for a certain number of times like 5 times or 10 times in our examples it's easier and better to use the for loop which we will learn about in the next video before we wrap up this video let's recap some of the concepts we have learned loops are used in programming to repeat a block of code the while loop runs continuously until the test condition is false if the test condition of the loop is never false the loop runs infinitely until the memory is full this is known as an infinite loop before we look at the working of the for loop we need to understand about sequences a sequence is a collection of items in an order we have already used strings numerous times in our programs a string is basically a sequence of characters as you can see in the image the string python is a sequence of seven characters p y t h o and n let's look at another type of sequence this sequence has three items separated by commas and enclosed in square brackets this sequence is called a list we will learn about these sequences in detail in the upcoming videos for now just remember that a sequence in python is a collection of items in an order now that we know what sequences are let's get back to our main topic for loop the for loop in python is used to iterate over a sequence and in each iteration we can access individual items of that sequence for example in my code editor i'll show you suppose we have a string like this using a for loop we can access individual items of the string python one by one now i'll create a for loop here i'll say for character in text then i'll print the character using our handy print function when i press run we can see that each character of the string python is printed one by one let's see how this program works during the first iteration of this for loop the variable character will have the value p which is the first letter in the text python and that will be printed to the screen in the next iteration the value of y will be stored in the variable character and when we print character y is printed to the screen this goes on until we reach n after which the for loop exits by the way we are seeing each character in a new line because the print function adds a new line at the end of each line by default before we move on i'll add the syntax of the for loop here so that it's easier for me to explain it to you for each item in sequence execute the body of the loop now let's talk about looping through a list suppose we have a list of languages like this let's use the for loop to iterate through each item of this list one by one just like we did in the strings example i'll say for language in languages print language now when i press run as you can see all three languages are printed one by one let me read out this code in plain english for each language in the languages list store that language in the language variable and print it now let's move on to python range function if you watch the last video of the while loop we used it to repeat a block of code a certain number of times like five times and ten times let me give you an example i'll create a while loop that iterates five times from count equal to one to count equal to five i'll remove the old code and i'll say count equals 1 and then i'll say while count less than equals 5 print count and then i'll increase the value of count like count equals count plus 1. i'll press run and as expected the numbers from 1 to 5 are printed there's an easier way to write the same program using the for loop for that we'll use the range function let me give you an example i'll comment out this old code and then i'll say for count in range 1 to 6. print count this range function creates a sequence of numbers from 1 to 5. it doesn't include the last value 6. let me run this code and as expected it prints one to five range is a very useful function we will learn more about the range function in detail in a future video so be sure to subscribe and hit the bell icon so that you don't miss that video let's try one more example of the for loop we will print a multiplication table of a number entered by the user from 1 to 10. let's first take input from the user so i'll say number equals integer input enter and integer since we want to print the multiplication table from 1 to 10 i will create a loop that iterates 10 times from count equal 1 to 10. so here i'll say 4 count in range 1 comma 11 as we have discussed before 11 will be excluded and this will give me a sequence from 1 to 10 now we need to find the product by multiplying number by count inside the body of the loop so here i'll say product equals number times count now let me use the print function with commas to format the output nicely so i'll say print number comma x or times count equals product when i run it it asks me to enter a number and i'll say something like 9 and when i press enter as you can see the multiplication table is printed in this nice format here count is increased from 1 to 10 and we have calculated the product by multiplying number and count so in the first iteration product will be 9 times 1 which is 9 in the second iteration product will be 9 times 2 and so on before we end this video here's a programming task for you can you create a program to find the sum of numbers from 1 to 100 basically the result should be equal to result equals 1 plus 2 plus 3 plus blah blah blah plus 100 if you're a programming beginner you might find this program a touch harder give it a try you can always find the answer to this program in our github repository if you get stuck i will provide the link in the description below before we end this video let me recap the concepts that we have learned loops are used in programming to repeat a block of code a for loop is used to iterate through items of a sequence if you know that a loop needs to run for a certain number of times like 5 times or 10 times it is better to use the for loop instead of the while loop range is a useful function that creates a sequence of numbers it's common to use range in a for loop to iterate the loop a certain number of times in the last two videos we learned how to repeat a block of code using loops the while loop repeats a block of code until the specified test condition is false and the for loop repeats a block of code until the last item in a sequence is reached sometimes we may need to end the loop without checking the test condition or skip execution of code inside the loop in such cases break and continue statements are used i'll create a loop to print numbers from 1 to 5 to get started so i'll say 4 item in range 1 to 6 and i'll print item and as you can see when i press run then 1 to 5 is printed now let me add a break statement here this time when i press run then only one is printed let's try to figure out what's happening here in the first iteration the item value is one one is printed and then the break statement is encountered as soon as we encounter the break statement we exit the loop now let me try something interesting i'll move this break statement before the print statement and this time when i press run absolutely nothing gets printed because the loop never reaches this print item statement the break statements are almost always used inside decision making statements like if and else because most of the time we may want to end the loop only when a certain condition is met let me show you this with a practical example i'll remove this code and i'll say if item equals equals 3 then break otherwise print item and i also want to see find out when the loop is execute exited so i'll print outside the loop the end here we have a condition to break this loop when item is equal to 3 now when the item becomes 3 the if condition is true and the break statement terminates the loop that's why 3 4 and 5 will not be printed this time let me run this code to show you this so when i run this code then 1 and 2 are printed and the end is printed let's create one more example of the break statement we will use a while loop to take a number input from the user if the user enters a positive number or zero we will print the number and again take another numeric input however if the user enters a negative number we will use the break statement and end the loop to approach this program first we will create a while loop with a test condition that's always true inside the loop we will take input from the user so i'll remove this old code and i'll say while true and i'll say number equals float input enter a number now this is an infinite while loop the only way to end this loop is by using the break statement now let's write our condition to print the number if it is positive and break the loop if it's negative so here i'll say if number less than zero then break otherwise print u entered and here i'll print the number when i run this program then it says enter a number let me enter a positive number like 4 and it says you entered 4.0 and let me enter another positive number 67 it says you entered 67 now let me try entering a number that's negative so i'll say minus 9 and when i press enter then it exited me from the loop and the program as well let's talk about the continue statement in python now the continue statement in python skips the rest of the code inside the loop for that iteration the loop will not terminate but continues on with the next iteration let me explain this with the help of an example so i'll remove this or code and i'll say for i in range five and then i'll say number equals float input enter a number then i'll print the number this program asked me for five numbers so i'll say 1 2 54 34 minus 76 and something like 67 then it existed after five iterations what if you only want to print the positive numbers entered by the user and skip the printing of the negative numbers in such cases we can use the continue statement to skip code inside the loop if the user enters a negative number so here i'll add the continue statement like this i'll add the condition to check if the number is negative and continue the program without printing here so i'll say if number less than 0 continue this time when i run the program then it asks me for an input i'll say 34 it asks me for another input i'll say 56.5 or 7 and it prints the number and now if i enter a number like negative number like minus 87 then it does not print the number it asks me for another number immediately this is because when this condition is true the continue statement takes me to the next iteration of the loop let me continue adding positive numbers so i'll say 23 and then i'll add another negative number like minus 54 and as you can see this whole loop still executed for five times but depending on whether i input a negative number or the positive number i was able to use the continue statement to either print the number or go directly to the next iteration before we end this video here's a little programming task for you suppose we have a list like this can you create a program so that all items of the languages list are printed except swift and c plus you can find the answer to this question in our github repository also visit our website programmings.com for more tutorials and examples i've posted the link to both the github repository and our website in the description below let's recap the concepts we learned in this video the break statement terminates the loop immediately when it is encountered the continue statement skips the code after it when it is encountered most of the time we want to change the way loops work only when a certain condition is met that's why we usually use break and continue inside the decision making statements like if and else suppose you need to create a loop or a decision making statement however we are not sure yet what its body will be in such scenarios we can use the past statement let me give you an example so i'll say number equals 5.5 and then i'll say if number greater than 0.0 and then i'll add this pass statement here when i run this program my code will run without any errors now i can write code after the if statement and run it and implement the statement when it's necessary what would happen if we used comments instead of the past statement in the above program let's find out so i'll say so i'll remove this pass and i'll say to do will figure out later now this time if i press run then python gives me an error it says unexpected uf while parsing this error is basically saying you cannot end the program file like this something is wrong we are getting this error because the body of the if statement is empty and comments don't count because python completely ignores comments so whenever you need to create loops if else statement functions and classes with an empty body you can temporarily use the pass statement before i end this video let me recap the concept that we learned in python pass is a null statement that does nothing the pass statement can be used to create loops if else statement functions and classes with an empty body you will learn about classes and functions in the next few videos in programming a function is a group of related statements that performs a specific task they help us divide a large program into smaller chunks so that it's easier to understand and change suppose you need to create a program that draws circles and rectangles of different colors based on user input instead of creating one big chunk of statements to create this program we can create three functions to solve this first create a circle function then a rectangle function and then the color the shape function this helps us to divide complexity and we can focus on only a small part of the problem at one time now let's see how we can create a function in python to create a function we use the def keyword which stands for the function definition followed by the function name then i'll use the empty parenthesis followed by a column so i'll say d e f def greet empty parenthesis and column here we have defined a function name greet however this code will give us an error because the function body is missing let's fix that for now i'll only add two print statements as its body so i'll say print hello and then let me add another print statement print how do you do remember we need to use indentation to specify that this is the body of the function we have successfully created a function named greet now let me run this code and we don't really see anything this is because defining a function won't do anything in itself to bring the function into action we need to call it our function name is greet with empty parenthesis so to call it i will just use greet with empty parentheses so here i'll say greet and now when i press run then you can see that hello and how do we do are printed here's how this code works when we call the function the control of the program jumps to the function header then the statements inside the function are executed when this task is completed the control of the program goes back to the function call and the next statement after the function call is executed one thing with functions is that once we define a function we can call it any number of times let's call our greet function three times so here i'll say greet and one more greet and now if i press run as you can see the function has run three times that's why these two statements were executed one two and three times so if we need to perform a task again and again we can wrap the codes inside a function and use the function any number of times we just need to call the function again and again one thing to remember when we create a function is that we need to define a function first before we can call it this code for instance will not work let me run this code to show you here when the grade function is called python doesn't know that this function exists because it's defined after the function call so always remember to define a function before you use it now let's talk about python arguments and how our grid function from the previous example can be changed to allow arguments suppose we want to make our greet function a bit more personal so instead of printing hello we want to print something like hello jack or whatever the person's name is in such cases we can pass values to a function these values we pass to a function are called arguments so i'll go back to the code that i started with i'll remove these two greet functions because i want only one and here inside the grid function i'll pass the jack string like this this value that we passed during a function called is called an argument so jack here is an argument and in the function definition i'll add a variable in the greet function i'll call it name this name variable accepts whatever value is sent as an argument during the function call in this case jack is transferred to the variable name now i can use the name parameter inside the function so now i can say hello comma name and when i press run then i get hello jack let's see step by step how this function works when we call the greet function with the argument jack then this is passed to the name variable inside the function definition then the statements inside the function are executed we can use the name parameter inside the body of the function when this task is completed the control of the program comes back to the place from where the function was called and the next statement is executed in this case there's nothing here it's also possible to pass multiple arguments to a function as per our needs if we need to pass multiple arguments to a function we can separate them by commas let's see this in action by creating a function to add two numbers so i'll remove the old code and i'll create a new function called add numbers so i'll say def add underscore numbers obviously i'll need two parameters n1 and n2 and then inside the function i'll say result equals n1 plus n2 print the sum is and here i'll say result now outside the function i'll say number 1 equals 5.4 number 2 equals 6.7 and then i can call add underscore numbers number 1 comma number two in this program we have passed number one and number two as arguments to the add numbers function these arguments will be accepted as n1 and n2 once they are passed to the add numbers function so inside the function n1 will be 5.4 and n2 will be 6.7 then we have added the numbers and printed them inside the function itself let's run this code and see the output as you can see i now have the sum of those two numbers in our program to add two numbers we are finding the sum of numbers and printing it it's working fine however it's better just to find the sum inside the function and print the result somewhere else we can achieve that by using the return statement inside the function i'll remove this print statement and i'll say return result when we return a value it comes back to the function and we can assign this return value to a variable like this so here i can say result equals add numbers number one comma number two and i can print the result as print the sum is and then i can say result let's see step by step how this program works we call the ad numbers function with two arguments number one and number two which are accepted by the function definition as n1 and n2 the sum of n1 and n2 is calculated and the result is returned to the function call this return value is assigned to the result variable and in the next line we just print the result variable outside the add numbers function whenever a return statement is encountered inside a function the control of the program goes back to the place from where it's called let's see an example of this let's get back to our grid function that we wrote before i'm pasting it here when i press run then we get hello jack and how do we do here now let me modify this program a little bit i'll add a return statement after this line and let's see what happens now when i press run then you can see that only hello jack is printed this is because when the return statement is encountered immediately the function terminates and control of the program goes back to the place from where the function is called at this point we have covered all the basics to create a function these functions we created ourselves are known as user defined functions actually we have already used functions numerous times in all of our videos remember print it is also a function the function definition of this print statement is defined somewhere inside the python programming language that's why we can just call the function and it just works these functions defined inside of python are called builtin functions we have also used other builtin functions like float int input and so on in our videos there are numerous builtin functions available in python that make our life a whole lot easier for example suppose we have a list like this now if we need to find the length of this list we can use the len function so here i can say length equals len max and i can print the length of the list as print length is comma length let's run this code and see the output when i press run then as you can see it says length is 5 which is the length of the number of items in this marks list if we instead needed to find the sum of the items of the list we don't need to manually write the code ourselves we can use the sum function that's available in python so here i can say marks underscore sum equals sum of marks and then i can print the sum as print the total marks you got is and then i can say marks underscore sum now when i press run then it says the length is 5 and the total marks you got is 308 which is the sum of these marks if you're interested you can find all the builtin functions available in python in the programming.com website the link will be in the description below let's put all the things we have learnt in this video in action suppose you have just attended a university examination the marks you obtained in various subjects are stored in a list like this you want to find the average marks you obtained in the exam and based on the average marks you want to find your grade the grading rule is like this you'll get grade a if the average marks is equal to or above 80 you'll get grade b if the average marks is equal to or above 60 and less than 80 you'll get grade c if the average max is equal to or above 50 and less than 60 and if the average max is less than 50 you will get great f to solve this problem we will create two functions one to find the average marks and another to compute the grade so let's get started i'll start with the function definition but before that let me add a little comment i'll say function to find average marks now let me define my function as def fine average marks now the argument to this will be a list of marks and inside i'll say sum of marks equals sum marks i also need to find the number of subjects or the number of marks i have so i'll say total underscore subjects equals the length of this marks list and then now i can calculate the average as average underscore marks equals sum of marks divided by total subjects let me return this average marks variable and now outside the function i can say average marks equals find average marks i'll pass in the marks list and here i'll say print your average marks is and i'll say average underscore marks when i press the run button i can see that my average marks is 67.8 which is the average of these five numbers which is calculated as sum of these numbers divided by the total number of subjects which is 5 in this case now we need to create another function to calculate the grade based on the average marks let's do that now i'll create another function but before that let me add a little comment i'll say calculate the grade and return it and then i'll say def compute underscore grade now the parameter or the argument to this will be the average marks so i'll say average marks and inside i'll say if average marks greater than equals 80 then grade is a alif average marks greater equals 60 then the grade is b l if average max greater than equals 50 in this case the grade is c and the else clause i'll say grade equals f and outside the if block i'll say return grade now i can use this compute grade function as grade equals compute underscore grade average marks now let me print this grade as your grade is and the grade variable now when i press it on i can see that my average marks is 67.8 and my grade is b which is not the best result but at least i now know what my grade is before we end this video here's a programming task for you can you create a program to add and multiply two numbers for this create two functions add underscore numbers and multiply underscore numbers these functions should compute the result and return them to the function call and the results should be printed from outside the function you'll find the answer to this question in our github repository also visit our website programmies.com for more tutorials and examples the links will be in the description below now let's recap what we learned a function is a block of code that performs a specific task we use the def keyword to define a function to bring the function into action we need to call the function we can call the same function as many times as we want as per our needs we can pass values to a function these values passed to functions are called arguments or parameters the return statement can be used inside a function the return statement returns a value from a function and exits the function as well if you're enjoying this video please also check out program is pro where we provide tutorials along with quizzes and challenges which will help you practice and test your learning in real time also the course includes projects to give you an awesome experience of how programming works in the real world and for our youtube subscribers we are giving 50 off on the yearly plan sign up by scanning this qr code or use the link in the video description to claim your discount have this program to add two numbers from the last video here we have called the add underscore numbers function with two arguments then our function adds those two numbers and returns the sum these arguments we pass to the function are called positional arguments because the first argument 5.4 is assigned to the first parameter n1 and the second parameter 6.7 is assigned to the second parameter n2 these arguments are passed based on their position now let me modify this program and remove this 6.7 from the function call can you guess what will happen let me run this code as you can see we get an error type error add underscore numbers missing one required positional argument n2 this error message is telling us that we need to pass a second argument during the function call because our add underscore numbers function takes two arguments n1 and n2 in such cases we can provide default values to parameters in the function definition which we will see next i still have this program from the last example which gave us an error it was because there is one argument in the function call but two arguments in the function definition to fix this issue either we can add a second parameter in the function call or we can provide a default value to the parameters let me provide default values to parameters in this program so i'll say n1 equals 100 and i'll say n2 equals 1000 now i have given 100 as the default value to n1 and 1000 as the default value to n2 let me run the program again this time when i ran the program the output was thousand five point four what's happening here well what's happened here is we have provided five point four as an argument this value will be passed to n1 however we haven't provided the second argument so the default value of n2 equals thousand will be used and the sum of five point four and thousand is thousand five point four let me modify this program again and this time i won't pass any arguments so i'll remove 5.4 and in this case the default values of n1 and n2 will be used as we are not passing any values let me run this code and as you can see we're getting 1100 which is the sum of the default values 100 and thousand in python we cannot only pass arguments to function based on position but we can also pass arguments by name let me give you an example here we are passing jack to the name parameter and what's going on to the message parameter these are positional arguments now let me call this function again but this time i will pass arguments by name so i'll say greet message equals howdy and i'll say name equals jill during this second function call we have specified the arguments by name so howdy is passed to the message parameter and jill is passed to the name parameter the order of the arguments doesn't matter here because we are using name to specify which argument is passed where these arguments are called keyword arguments there are a couple of things we haven't mentioned about arguments in this video for simplicity if you're interested to learn more about arguments visit our website programmers.com i've posted the link in the description below now let me recap the concepts we learnt in this video when we pass arguments to a function without specifying the name the arguments in the function call is assigned to parameters in the function definition based on the position that means that the first argument is assigned to the first parameter and the second argument is assigned to the second parameter and so on these are called positional arguments you can also give names to arguments during a function call these arguments are called keyword arguments the order of arguments doesn't matter when we use keyword arguments we can provide default values to parameters in the function definition these values will be used if we do not pass arguments during the function call i have this function to add two numbers on my screen this add underscore numbers function takes two parameters finds the sum and prints the result all in the same function now instead of printing result from inside the function let's see what will happen if we print result after the function call so i'll cut this code and paste it after the function call and this time when i run this code then it gives me an error it says result not defined what python is trying to tell us is that the result variable is not defined on line 6. what's going on here this is where the concept of local variables comes in any variable that is created inside a function is local to it meaning the result variable is local to the add numbers function when this function ends this variable gets destroyed if you remember we can fix this by using a return statement so i can say return result and here i can say output equals add numbers and here i can print the output with the return statement we are not using the local variable directly rather we are returning its value to the function call this concept of a local variable is a good thing because anyone using the add numbers function doesn't have to know what's inside it they just need to know what arguments to pass and what value it returns and they can use this function without a problem this makes our code reusable to not only us but also to our fellow programmers any variables that are created outside a function are called global variables and you can use these global variables from both inside and outside of a function let me give you an example so i'll create a global variable called message and i'll say message equals how you doing and now let me create a function def greet that prints this message and i'll call this greet function here message is a global variable as it's defined outside the scope of the function greet and you can use it anywhere after it is defined let me run this code to show you this so when i press run then it says how you doing now let's see what will happen if you define a variable with the same name message inside the function so i'll say message equals how are you and here to know that i'm printing the message from inside the function i'll say inside message inside function and after greet i'll again print message message outside function and i'll print the message variable here here i'm trying to see what the value of message is by printing it from both inside and outside the function when i press run then you can see message inside function is how are you and message outside function is how you doing inside the function when we update the message variable then rather than changing the global variable message a new local variable called message is created that message has a new value called how are you and that is what gets printed here after the great function the since the global variable message is unchanged when we print it from outside then it shows the global value if we need to change the global variable inside the function we can achieve this by using the global keyword so here i'll add a new line that says global message and this time when i press run then you can see that from inside the function the value is how are you but because i had defined it as global the actual global message got changed and when i come out of the function and try to print message again the outside message or the global message variable has been changed to how are you before we end this video here's a tip for you that will serve you well in the long run try to avoid the use of global keyword inside a function whenever possible it makes our code really hard to understand as you must have seen in the last example now let's recap the concept that we learnt in this video a variable defined inside a function is local to it when the function ends this variable is destroyed variables defined outside a function are called global variables in python inside functions the global keyword can be used to change the value of a variable to a global scope however it's considered a bad practice and you should try to avoid it let's learn how to create a list we'll start with the list data type in python a list is a sequence of items in an order we create lists by placing items inside square brackets separated by commas now it's not necessary for a list to have all of the items of the same type like this we can also create a list having mixed data types and it may also contain duplicate elements let me show you so here i'll say mixed list and then i can say random list equals something like 2.5 let me add in a string called hello and say and a negative integer like minus 5 and i can also repeat a number like 2.5 this list that i've stored in the random list variable has four items a float a string an integer and again the same float we can also create lists that do not have any items like this so here i can say empty list and i can say list 1 equals just the square brackets without any items in between and let me print it out to see what i get now when i press run then i can see that numbers list is printed having four elements and the list one is an empty list that's printed here since there are no items inside list one it's an empty list the size of an empty list is zero to check it we can use the builtin lend function let me remove the mixed list first and then i'll wrap the numbers list and the empty list list one to see what i get now when i press run then i get 4 and 0 which are the lengths of the numbers list and list 1 respectively now let's learn how to access list elements a list is a sequence and its items are always in order suppose we have a list of programming languages like this so i'll say languages equals python javascript c plus plus and kotlin now let me print the languages here i'll say print languages and when i press run then you can see that python javascript c plus plus and kotlin are printed so the first item in this languages list is python the second language is javascript the third one is c plus plus and the last one and the fourth one is kotlin we can access individual items of list by using something called index and it starts from zero so the index of the first item is zero of the second item is one of the third item is 2 and so on now suppose we want to get this first item python to get this item after the name of the list i will type square brackets and inside those square brackets i'll put 0 because i want to access the first element now when i run it then i get python similarly to get c plus plus we need to use index 2 because it's the third element of the list so i'll replace 0 by 2 because i want the third element and when i press run then this time i get c plus plus this languages list we have been working with has four items can you guess what will happen if we try to access the fifth item using four as an index why don't we try it in our code and see it for ourselves so i'll index i'll change index 2 to 4 and now when i press run then python tells me list index out of range this error message means that we are using an index that does not exist because the fifth item doesn't exist now let's talk about negative indexing in python we can also use negative indexing for sequences like lists using a negative index gives us items from the last so minus 1 gives us the last item minus 2 gives us the second last item and so on i have this languages list we have been working with on the screen let me change index to minus 1 and run it so here i'll say minus 1 and when i press run then i get kotlin which is the last item in the list similarly we can get javascript using 3 because it is the third element from the last now when i press run then i get javascript this time as you can see negative indexing is pretty useful when we need to access items from the last because we do not even need to know the size of the list now let's learn about slicing of a list we learned to access an individual item from a list in the last two sections it's also possible to access a whole section of items from the list not just a single item let me give you an example i have the same code that we have been working with on my screen i'll remove the minus three index to access the third last item now let me access the first three items from the list so i'll use zero column three let me run this code this time i get the first three items of the list on the screen if you've been following along that means the items having index 0 1 and 2 were printed the thing you need to remember with slicing is that the first index is inclusive and the last index is exclusive so 0 colon 3 that means 0 column 3 will give me 0 1 and 2 index which are the first three elements of the list now let's try to get the second third and fourth items since the starting index is inclusive we need to use index 1 to get the second item and the end index is exclusive so we need to use 4 as the end index using 4 will give us items up to the index 3 which is technically the fourth item i'll press run and as expected the second third and fourth elements are printed to the screen let me tell you an interesting fact if we use the empty start index the slicing starts from the beginning of the list so here i'll try something like colon 3 and when i press run then i get the first three elements this means that just leaving the first element open or empty is equivalent to putting 0 in front so when i press run i get the same result as before similarly if we use the empty end index the slicing ends at the last index so here i'll remove this and i'll say i want to start from one and i don't know and and i want to go to the end so when i press run then the slicing starts from the one index and is it goes up to the end of the list that means kotlin should be included in the slice by the way we can also use negative indexes during slicing if you're interested you can check out our website programming.com to find more information about it now let's learn how to change items of a list lists in python are pretty dynamic it's super easy to add modify and delete items of a list the term we use for these kinds of changeable objects is mutable so we can say that lists are mutable objects let's see how we can change items of a list i'll start with the same programming languages list we have been working with now let me change the second element from javascript to ruby it's pretty easy in python to do that we just need to assign ruby to the second element like this so here i'll say languages 1 equals ruby and after this if i print languages and press run then now i can see that the second element which was javascript has now been changed to ruby if you don't know then ruby is a popular programming language we can also change the portion of the list in a single statement i'll modify the code i had written where i change javascript to ruby but this time i will change the second and third item of the list in one go here i'll say languages 1 column 3 equals list of ruby and dart now when i press run here i have access the second and third items which are javascript and c plus plus using the slicing operator column and then modified them by putting the new values ruby and dart in their place that is why the elements that were in present in index 1 and 2 are now ruby and dart now let's learn about iterating through a list before we learn to iterate through a list let's learn about the in keyword the in keyword is used to check whether an item is in the list or not i have this languages list from before now let me check if python is in the list or not here i can say print python in languages the python in languages statement prints true because python is in the languages list let me run this code now the python in languages statement prints true because python is indeed in the languages list let me change python to rust and run the code so here i'll say rust in languages and when i press run this time i get false because rust is not in the languages list this can be helpful when we want to check whether an item is present in a list or not we can use this as a test condition in an if statement for decision making we can perform one set of tasks if an item is in the list and another set of tasks if the item is not in the list if you want to get individual items of a list one by one the easiest way to get them is by using a for loop we've already discussed them in the previous videos but let me revise it again here i'll remove the print statement and i'll add a loop so i'll say for language in languages and then i'll say print language this for loop iterates through elements of the list one by one until the end of the list is reached i'll press run and as you can see all four programming languages are printed here one by one this language variable is python in the first iteration javascript in the second iteration and so on and that is what we have printed inside the body of the loop if you want to learn more about the for loop in detail check out our python for loop video the link will be in the description below now let's learn about list methods the reason lists are so versatile is because it's so easy to add change and remove elements from it suppose we have the same languages list we have been working on in this video now let's say we want to add an item to the list we can use the append method to do this this method is already available when we work with list let's say we want to add rust to our list we can just say languages dot append rust so i'll remove this old code and i'll say languages dot append rust and now if i print languages and press run then you can see rust is also included in the languages list let's say instead of adding rust in the end we want to insert it in the second position we can use the insert method for that so i'll replace this append and i'll say insert and because i want to insert it in the second position that means the index one and when i press run then now i can see that the rust programming language has been appended in the second position which is the index one now let's learn how to remove items from a list by removing c plus plus from our list using the remove method so i can just say languages dot remove c plus plus and now when i press run then i can see that c plus plus has been removed from the list sometimes you might have to create a copy of a list to copy a list we can use the list copy method so here i'll remove this old code and i'll say languages 1 equals dot copy and instead of languages if i print languages one then i can see that i get the same programming languages list that i had before the languages dot copy returns a new list and it is assigned to the languages one variable there are many more list methods readily available for use that make working with lists very easy you can find all the list methods and how they work with examples in our websiteprogrammings.com i will also include the link to the list methods page of our website in the video description now that we have covered lists let's talk about tuples or tuples as some people like to call them a tuple in python is similar to a list it's also an ordered collection of items the only difference between the two is that lists are mutable that is we can change elements of a list whereas tuples or tuples are immutables we cannot change the tuples elements to create a tuple we need to wrap items inside parentheses and these items should be separated by commas so let me create a new tuple i'll say numbers equals parenthesis 21 5 6 and 9 and then i'll print the tuples as print numbers let me quickly run this and you can see that tuple is printed we can access elements from a tuple in a similar way we access elements from a list accessing elements from a tuple is possible as long as we do not try to change the value so here i'll say new numbers 2 and when i press run then i get the element in the second index or the third element we can also perform slicing similar to list so here i can say 1 colon 4 and when i press run then i get elements from index 1 to index 3 which is the fourth element like in a list the first index is inclusive and the last index is exclusive we can also loop through a tuple using a loop so here i'll remove this whole code and i'll say for number in numbers and i can say print number now when i press run then i get all the numbers all the things that we have learned till now about tuples is similar to that of lists now let's see how tuples are different from lists as we have mentioned the difference between tuple and list is that the list can be changed but tuple cannot be changed let's see that in action i have this tuple that contains the same programming languages from before let's try to change its first element from python to java so here i'll say languages 0 equals java let me also print the languages here i'm trying to assign java to the first element let me run this code we get an error type error tuple object does not support item assignment this error message is telling us that we are trying to change an item of a tuple by assigning it a new value but it's not allowed with tuples we also cannot add and remove items from a tuple because unlike lists tuple doesn't have methods like append insert and remove so if we are sure that our sequence won't change till the end of the program it's better to use tuples instead of lists if you're interested you can find more information about tuples and tuple methods on our website programming.com i'll include links to some relevant articles in the video description before we end this video here's a little task for you can you guess the output of this program that you see on your screen i'll give you a couple of seconds to pause the video as always you'll find the answer to this question in our github repository i'll also include this link in the description below we have covered a lot in this video let's have a quick recap of what we learned a list is a collection of ordered items to access individual items of a list we use indices python indexing starts at zero there is also a concept of negative indexing in python this is used to access elements from the last we can access a portion of a list by using the slicing operator column we can use loops to iterate through items of a list python has several useful methods that make it easier to add change insert and remove list elements finally we learned about tuples a tuple is similar to a list except tuples are immutable we cannot change elements of a tuple in python we create strings by enclosing characters inside quotations like this this hello there inside single quotations is a string we have assigned it to a variable named text and in the next line we have printed the text variable when i run it as expected hello there is printed instead of single quotes we can also use double quotes like this so i can say text equals double quote hello there and then double quote again when i run it again hello there is printed however we can't use mismatching quotations like this so i cannot say single quotation hello there double quotation if i press run then python tells me that there is an error we can also use triple single quotes or triple double quotes to create a string like this so i can say text equals double quote double quote double quote hello there and then again double three double quotes in the end now when i press run i get hello there like before this is usually used for creating a string that spans multiple lines let me add another line inside triple quotation marks so here i'll say hello there how are you doing now when i press run then i get hello there how are you doing on separate lines now suppose we want to create a string like this he said what's there this string contains both single quotes and double quotes i'll run this code and as you can see we get an error this is because python thinks this part inside quotation marks is the string and whatever is outside of that or following that is regular python code to fix this we can escape characters like quotations by using a backslash before it so here i can say he said backslash what's there and now when i press run then i get the correct output now that we know how we can create strings in python let's see how we can access characters from a string as mentioned before a string is a sequence of characters and these characters are in order so we can access individual characters of a string using indices just like with lists and tuples suppose we have a string like this the index of the first character p is zero the index of the second character y is one the index of the third character t is 2 and so on let's access the first character p from the string to access the first character after the name of the string we need to type square brackets and inside it i will provide the index since we are trying to get the first character we need to use index 0 so here i'll say print text square bracket 0 and when i press run then i get p which is the first character in the string now let's try to get the fourth character from the string to get this character we need to use index 3 inside square brackets so here instead of 0 i'll say 3 and when i press run then i get h which is the fourth character in python string python also supports negative indexing for all sequences including strings using a negative index makes it easier to access characters from the last the index of the last character in the string is 1 the index of the second last character is 2 and so on let's try negative indexing in action i have this program from our last example on my screen let me change the index to minus 1 so i'll say print text minus 1 and now when i press it on and as you can see n which is the last character in the string is printed we can not only access a single character but we can also access the sub string from the string using the slicing operator to get a portion of the string inside the square brackets i'll mention the start index colon then the end index so here i'll say give me text 1 colon 4 let me run the code here i get yth the thing you need to remember with slicing is that the first index is inclusive but the last index is exclusive that's why we got only y t h and not o which is the fourth index now let me remove the start index from our code when i run it we get characters from start to the third index this is equivalent to saying text 0 4 when i run it i get the same output similarly if we do not mention the end index we get a string containing characters from the start index to the last character here i'll say give me all the characters from the second index up to the last and when i press run then i get t h o n that means start from the second index which is t and go to till the end strings in python are immutable and we cannot add or change characters of a string let's see what happens when we try to change characters of a string suppose i have the same text string we have been working with i'll try to modify the first character by saying text 0 equals small p and then let me try to print text here when i press run then python tells me there's a type error str object does not support item assignment this error message is telling us that we are trying to change characters of a string but it's not allowed however we can perform operations on strings without modifying the original string which we will see next strings are one of the most frequently used data types and we can perform various operations on them before we learn about different string methods let's see a couple of operations that we can perform with strings the first operation is string concatenation it means the joining of two strings into one to join two strings we can use the plus operator let me give you an example so here i'll say text 1 equals python and text 2 equals programming now i can say result equals text 1 plus text 2 and let me print the result here we have created a new string by joining text 1 and text 2 which is assigned to the result variable the important thing to note here is that we are not modifying python and we are not modifying programming we are actually creating a new string which is stored in the result variable let me run it and as you can see a new string called python programming is created and printed let me add a space between python and programming so that it looks a bit better so here i'll say text one plus space plus text two and now when i press run then you can see that there's a space in between we can also repeat a string a certain number of times very easily in python we use the asterisk operator for that so here i'll go back to my old code that says text equals python and then i can say new underscore text equals text asterisk 3 now when i print new underscore text and run the code then you can see python three times is printed python also has several string methods for common string tasks but before we check that let's see how we can iterate through a string the easiest way to iterate through characters of a string is by using a for loop let's take an example i'll go back to my old code that says text equals python then i'll say for character in text and inside the for loop i'll say print character when i run this code then you can see that each character is printed one by one this for loop iterates from the starting character p to the end character n in the first iteration the character variable holds p in the second iteration it holds y in the third iteration it holds t and so on and in each iteration we have printed the character variable this slope iterates six times because the size of the string python is six we can check this by using the len built in function it returns the length of any object in python so here i'll say print len text and now when i press run then then you can see that 6 is printed it's also pretty easy to check if a string is inside a string or not let me quickly give you an example so i'll delete this whole code and then i'll say print p in text now when i press run then since p is present in the word python i get true let's try something more interesting so instead of p i'll say y th and when i press run then this time also i get true because yth is inside python now let me try something else i'll say o n t and when i press run this time i get false because o n t is not inside python in that order as i have mentioned before strings are probably the most frequently used data type to make working with strings easier python has numerous string methods readily available for us to use let's try some of the string methods now suppose i have a string like this i like python 3. let's say we want all characters in this string to be lowercase now to do this we can use the lower method so here i can say result equals text dot lower and in the next line i'll say print result now when i press run then you can see i like python 3 with all characters in lower case is stored in the result variable and printed similarly if you want all uppercase characters we can use the upper method so i'll replace lower with upper and when i press run then i get i like python 3 in uppercase now suppose we want to find the index of this python substring then we can use either find or index method i'll change this upper to find and inside it i'll mention what substring i want to find so here i'll say python and now when i press run i get 7 because 7 is the index of the first occurrence of python inside this string let's try one last example suppose we want to replace python 3 with java we can do that by using the replace method i'll use the replace method instead of find and inside it i need to pass two arguments the first argument is the substring we want to replace so i'll put python 3 so here i'll say text dot replace and then python 3 and in the second argument since we want to replace it with java i'll put java this code returns a new string with python 3 replaced with java i'll run the code and as you can see i like java is printed there are numerous other useful string methods in python you can find all the string methods their descriptions and working examples in our website programming.com the link is in the video description before we end this video here's a little task for you can you guess the output of this program i'll give you a couple of seconds to pause the video as always you'll find the answer to this question in our github repository i'll also include this link in the description below we've covered a lot in this video let's have a quick recap of what we learned a string is a sequence of characters to create a string we use either single quotes or double quotes or triple quotes we can access the specified character from the string by using its index we can also get a substring from a string by using the slice notation since a string is a sequence we can iterate through characters of a string using a loop and finally we learned about different string methods if you're enjoying this video please also check out program is pro where we provide tutorials along with quizzes and challenges which will help you practice and test your learning in real time also the course includes projects to give you an awesome experience of how programming works in the real world and for our youtube subscribers we are giving 50 off on the yearly plan sign up by scanning this qr code or use the link in the video description to claim your discount a dictionary is a collection of key value pairs it is similar to associative arrays in other programming languages to create a dictionary in python we need to put these key value pairs inside curly braces separated by commas like this this dictionary has two items separated by commas and each item is a key value pair separated by a column for the first item its key is name and its value is linus similarly for the second item its key is age and its value is 21. let me print this dictionary and run it so here i'll say print person 1 and when i press run then the same dictionary is printed there are a couple of things we need to remember when we create dictionaries first keys of a dictionary can be any immutable object like numbers strings and tuples however they cannot be objects that can be modified like lists second the keys must be unique for identification let me change the name key to 10 and this age key to a tuple and run it so here i'll say instead of name i'll say 10 and i'll turn this age into a tuple and now when i press run then as expected this is a valid dictionary this works because both these keys 10 and this tuple age are immutable objects dictionaries are optimized to get values when the key is known if you remember we use numbered indices like 0 1 and 2 to get elements from sequences like lists and tuples in the case of dictionaries these keys are used as indices i have this program from our last example suppose we want to get linus from this dictionary to get this i'll type square brackets after our dictionary name and inside i'll type the name of the key which is name and now when i press run i get linus similarly to get 21 we need to use age as a key so here instead of name if i type age and press run then this time i get 21. now let's see what happens if you try to access a key that's not in the dictionary i'll change this age to hobbies and when i press run then python tells me that there's a key error because hobbies is not present in this dictionary person one sometimes instead of getting this error we may just want to know if the key exists or not and decide what to do based on it in that case we can use the dictionaries get method like this so here i can say person one dot get and inside parenthesis i can say hobbies let me run this code this time instead of an error we get none this nonobject means empty or no value this can be useful because i can use this in an if statement and run different codes based on it we can also pass a second argument to the get method if the key doesn't exist this default value is returned instead of none i'll provide a list as a default value so here i can say person1.gethobbies and inside let me pass a list saying dancing and fishing now when i press run now instead of none we get this list back i have this person one dictionary we have been working on in my screen now let's change the name to dennis to do so we need to assign a new value to the key like this so here i'll say person 1 name equals dennis i'll run it and we can see the value of the name key is now dennis if you try to assign a value to a key that doesn't exist yet it will add a new item to the dictionary let me show you so here i'll say person 1 hobbies equals dancing and fishing i'll press it on and as you can see a new key hobbies has been added and its equivalent value dancing and fishing has also been added to this dictionary to remove an item from the dictionary we can use the dictionary's pop method let's see how we can remove this item from the dictionary to remove the item we need to pass the key of the item in the pop method like this so here i'll say person1 dot pop name now when i press run then you can see that name linus has been removed from the dictionary this pop method also returns the value of the removed item so if i wrap this code inside the print function and press run then i get linus which was the removed item there are many of these dictionary methods readily available for us to use this makes working with dictionaries much easier you can find all the dictionary methods and how they work along with examples in our websiteprogrammings.com i'll include the link in the video description similar to sequences we can easily iterate through items of a dictionary by using a for loop and in each iteration of the loop we get a key of the dictionary let's see that in action i have this same dictionary we've been working with so here i'll say for key in person one and here i'll say print key now when i press run then as you can see name and age which are the keys of the dictionary are printed when we know these keys we can easily get the corresponding values as well let me add a line to print values of the dictionary in each iteration of the loop so in the next line i'll say print person 1 key now when i press run then as you can see name linus age 21 is printed which are the keys and the corresponding values in this dictionary starting from python 3.7 the order of items in a dictionary is preserved so when we iterate through a dictionary we get the keys in the order in which they are in the dictionary at this point we have pretty much covered the basics of python dictionaries before we end this video here's a task for you can you guess the output of this program i'll give you a couple of seconds to pause the video as always you'll find the answer to this question in our github repository i'll also include this link in the description below here's a recap of what we learnt in this video a dictionary is a compound data type that allows us to work with key value pairs we can easily access a value from a dictionary if its key is known to add or change items from a dictionary we can assign values to the keys we can remove items from a dictionary by using the pop method and finally we learn to iterate through keys of a dictionary using a for loop a set is a collection of items like lists and tuples however there are some important differences between them sets in python are like sets in mathematics a set cannot contain duplicate items and these items are not in any particular order also we can only use immutable objects in set like strings numbers and tuples so a set cannot have mutable objects like lists and dictionaries just three things to remember when we imagine sets in python number one items of a set are not in any particular order number two no duplicate items are allowed and the third one items must be immutable objects now that we know what sets are let's see how we can create them to create a set we place items inside curly brackets separated by commas like this so here i'll say animals equals curly bracket and then i'll add the list of animals as dog cat tiger and elephant let me print this set and run it so i'll say print animals when i press run then you can see the set was printed but you must have noticed that this order of animals is different from this order this is what i meant when i said that the items of a set are not in any particular order this is also the reason why set items also don't have indexes now let's see what happens if we try to create a set having duplicate items inside the set animals i will repeat the dog string twice so here i'll add another dog at the end and now if i press run then you can see that in the output dog is printed only once even though in the set definition dog is repeated twice the duplicate dog was removed from the set because sets in python automatically remove all duplicate items it's also possible to create a set that doesn't have any items to create an empty set we need to use the set function now we cannot use empty curly braces for this because it would create an empty dictionary instead so here i'll remove this old code and i'll say animals equals set and then i'll print animals oops animals now when i press run you can see that an empty set has been printed the set function that you see here can also be used to create nonempty sets i'll show you an example so here i'll add a list inside this set function i'll say cat dog tiger and elephant here we have passed a list inside the set function the set function converts this list into a set when i press run then you can see that this list has been converted to a set because it has curly braces instead of square braces here i have passed a list of four animals cat dog tiger and elephant and the set function has converted it into a set that is why the order has been changed we can convert other iterables like tuples dictionaries and strings into a set in a similar way now let's see how we can add items to a set sets in python are mutable we can add and remove items from them to add a single item to a set we use the add method i have this animal set we have been working on in this video let me add monkey to it to add it after the set's name i will type dot so animals dot and then i'll say add and inside the parenthesis i will pass the monkey string now let me print the animals set so that i can verify if monkey was added correctly or not so i'll say print animals and now when i press run then you can see that monkey was also added to the set we can also add all the elements of iterables like list tuples and other sets to a set for that we can use the update method let's take an example suppose we have a set and a list like this now we want to add all the items of this wired animals list to this animal set we can do that by using the update method like this so i can say animals dot update while animals now i'll print animals and see what i get when i press run you can see that leopard and tiger were added to animals list one thing to note here is that elephant is common in both animals and wild animals since sets cannot have duplicates the output has only one elephant by the way we can also pass multiple iterables to the update method like this so here along with wild animals i'll also add a set containing dolphins when i press run then as you can see dolphins was also added to the set of animals the update function added items from both wild animals and the set containing dolphins to the animal set let's now learn how to remove items from a set to remove an item in a set we can either use the discard method or the remove method let's use the discard method first i have this set of animals now i'll use the discard method as animals dot discard let me discard the cat and now let me print animals to see what i get when i press run you can see that dog elephant and tiger are still in the set but cat has been removed now instead of discard let me try and use the remove method so here i'll say remove and when i press run i get the same output of course in jumbled order both discard and remove are used to remove an item from a set however there's an important difference between them if the item we are trying to remove is not in the set discard returns none whereas the remove method throws an error let me change cat to something like ferret here so i'll say animals dot remove ferret and when i press run then python says there's an key error now when i use discard and run it you can see that no error was thrown we do not get any errors and our animal set is printed what happened here is that this code returned none because ferret is not in the animal set however we haven't assigned the return value to anything then this print statement prints the animal set by the way we can also remove all items in a set at once by using the clear method like this so here i'll remove this code and i'll say animals dot clear and when i press run then you can see that animals is now an empty set let's see how we can find if an item is in the set or not similar to other compound data types we can check if an item is in a set or not by using the in keyword let's see an example so here i'll remove this old code and i'll say print tiger in animals when i press run then i get true because indeed tiger is present in the set of animals if you change tiger to something like ferret and run it so i'll say ferret when i press run then this time i get false because ferret is not present in the set of animals it is also possible to loop through items of a set like other compound data types let's see an example here i have the same old set from before i'll remove this code and i'll say for animal in animals print animal when i press run then you must have guessed the output by now all the animals are printed one by one however the order in which these items are printed is random let's take a look at python set operations now as i mentioned before the way sets work in python is similar to how sets work in mathematics in this video we will cover two set operations union and intersection suppose we have two sets domestic animals and wild animals like this the union of these two sets is a set of all items in both domestic animals and wild animals to find the union of sets we can either use the union method or use the pipe symbol let's see an example so here on my compiler i'll remove the old code and i'll say domestic animals equals dog cat and elephant and then i'll say why animals equals lion tiger and of course elephant again now i can create the union of these sets by saying animals equals domestic underscore animals dot union wild underscore animals let me print the animals variable now i'll say print animals when i press run then i get a set containing animals from both the domestic animal set and the wild animal set the order of sets doesn't matter here i can reverse this order and i can say wild underscore animals dot union domestic underscore animals and when i press run i get the same output as i mentioned before we can also use the pipe symbol to find the union so here i could have also written wild animals pipe domestic animals when i press run i get the same output now let's talk about intersection of sets suppose we have two sets domestic animals and wild animals like before the intersection of these two sets is a set of items that are common in both domestic animals and wild animals to find the intersection of sets we can either use the intersection method or use the ampersand operator let's see an example so i have the same set of domestic animals and wild animals from before and here instead of saying union i'll say wild animals dot intersection domestic animals now when i press run then i get a set containing elephant because elephant is the common element between domestic animals and wild animals now let's use the ampersand operator to find the intersection this time i'll say wild animals ampersand domestic animals and when i press run i get the same output as before you can find more information about different set operations and methods in our website programming dot com i'll include the link in the description below at this point we have covered all the basics of python sets before we end this video here's a task for you can you guess the output of this program i'll give you a couple of seconds to pause the video as always you'll find the answer to this question in our github repository i'll also include the link in the description below now let's recap what we learnt in this video a set is a collection of unordered items since the items do not have any order they also do not have any indexes a set also cannot contain duplicate items and all items of a set must be immutable although the items of a set need to be mutable sets themselves are mutable and we can add and remove items from a set sets in python are similar to sets in mathematics that's why we can perform operations like union and intersection of sets suppose we want a sequence of numbers from 1 to 10 to get the sequence we can use the range function like this so i can say result equals range 1 comma 11 here the start of the sequence is inclusive but the end is exclusive that's why it gives us a sequence from 1 up to 10 and not 1 up to 11 let me print the result so i'll say print result and when i press run instead of getting the result the sequence 1 to 10 i get range 1 11 which is basically the same thing i have typed here so what's happening well the range function returns a range object which is a sequence of characters we can see what's inside this object by converting it to a some other type like a list so here i'll convert the result to a list like this by using the list function and now when i press run then i get the sequence i was asking for that is 1 to 10. one thing to notice here is that by default the step between the numbers 1 2 three four five and up to ten is one we can change this step as you will see later in this video since range generates a sequence of numbers it is commonly used in for loops to iterate the loop a certain number of times let me give you an example so here i'll remove this old code and i'll say for value in range 1 comma 6 and then i'll say print value iteration here this range gives us a sequence from 1 which is included to 5 because 6 is not included now when i press run then it says one iteration two iteration it goes up to five as we can see the loop iterates five times from value equal to one to value equals five in our examples up to now we have passed two parameters to the range function start which is the start of the sequence and stop at which the sequence stops it's also possible to use range without passing the start parameter if the start parameter is not passed 0 is used as the default value let me give you an example so here i'll say result equals range 11 and then i'll say print list result now when i press run then it gives me a value from 0 to 10 because it's the same as saying give me a range from 0 to 11 and when i press run it essentially gives me the same result this makes it even easier to use range function in a for loop suppose i want to iterate a loop five times i can simply pass five to the range function like this so i'll remove this whole code and i'll say for value in range 5 and print value this loop iterates 5 times from the value 0 to the value equals 4 when i press run then you can see it says 0 to 4. if you have noticed in our examples the gap between two consecutive numbers is 1 let me show you again so i'll remove this old code and i'll say result equals list range 1 11 and when i print this as expected it says 1 to 10. as we can see the difference between the numbers is 1. this is because by default step of 1 is used this code is equivalent to adding 1 as the third parameter which is the step that we want to use this range function basically means start from this number go up to this number not including it and use one as the stepping number let me change the step to 3 and see what happens so here i'll replace this one with 3 and when i press run then this time the difference between two consecutive items of this sequence is three we can also use negative numbers in the range function like this so i'll remove this old code and i'll say result equals list range 5 to minus 6 and the step will be 1 now when i print the result and press run then you can see that it started from the number five it went up to minus six but not including minus six and the difference between two consecutive list items is minus one by the way range only works for integers we cannot use floating point numbers inside the range function at this point we have covered all the basics of python's range function before we end this video here's a task for you can you create a list like this using the range function i'll give you a couple of seconds to pause the video here as always you'll find the answer to this question in our github repository i'll also include this link in the description below now here's a recap of what we learnt in this video the range type is used to create a sequence of numbers range is commonly used in for loops to iterate the loop a certain number of times we cannot use floating point numbers inside range you've probably heard that python is an objectoriented programming language in this video you will learn what objectoriented programming is and why it is used after that we will implement the objectoriented style of programming in our code by creating two practical examples so let's get started suppose we need to store the name and marks obtained by university students and based on the marks obtained by the students we also need to find out if they passed or failed their exam then the structure of our code would look something like this now imagine that instead of one student you have to do this for numerous university students if you were to use the same approach our code would be less organized and it would look messy since these data and functions are related it would be amazing if we could treat them as a single entity we can do exactly that by creating objects this helps us to make programs more organized now there are two steps required to create objects first we need to define a class since we are working with students we can create a class name student this student class acts as a blueprint for the objects all objects created from this class have name and marks data and can use the check pass fail function think of a class as a blueprint of a house it contains all the details about the floors doors windows etc based on these descriptions we built the house the actual physical house is the object as many houses can be made from a house's blueprint we can create many objects from a single class so from our student class we can create as many student objects as we want the concept of objectoriented programming is not native to python and is available to most of the programming languages now that we know what objects are let's implement them in python as mentioned before we need to define a class before we can create objects let's do that first and here i'll say class student and then i'll just use pass here i have defined a class named student at the moment our class doesn't have any attributes and methods since classes cannot be empty i have added a pass statement so that i can run the code without any errors by the way when working with objects variables are called attributes and functions are called methods from now on we will be using these terms when working with objects now that we have defined a class we can create as many objects as we want from it let me create two objects of the class i'll say student 1 equals student in parenthesis and then i'll say student 2 equals student and again parentheses here student 1 and student 2 are both objects of the student class now we can start adding different attributes to these object instances first let me remove the student 2 and here i'll say student 1 dot name equals harry here we have assigned harry to the name attribute of the student1 object let me add another attribute to our object so here i'll say student 1 dot marks equals 85 and i'll print these attributes i'll say print student 1 dot name and print student 1 dot marks now when i press run i get harry and 85 back we have successfully added two attributes to a student1 object however this is not the proper way to add attributes to objects usually what we want to do is we want to put attributes inside our class so that all the objects created from the class have these attributes by default similarly we also put all methods inside our class so that every object of the class can access them let's first see how we can add methods inside a class then we will look into the proper way to create attributes here i have defined the check pass fail method inside the class now any object created from this class will have access to the check pass fail method if you have noticed we have used self as an argument here and self.marks inside the method we will talk about that in a moment let's first access this method using the student1 object so at the end here i'll say did underscore pass equals student 1 dot check underscore pass underscore fail and then i'll say i'll remove these two lines and i'll say print did underscore pass now when i press run then as expected it prints true because the student one has enough marks to pass let's see from the very beginning what's going on here we have created a class and we have defined a check pass fail method inside it then we created an object from this class and added two attributes name and marks to it finally we called the check pass fail method using the student1 object we have called this method without passing any arguments however the method definition has an argument called self now you must be thinking shouldn't this give us an error well whenever we define methods for a class we need to use self as the first argument this self represents the object calling it in our example self refers to the student1 object and self.marks refers to the marks attribute of the student1 object so the object is passed as the first argument automatically if you create another object let's say student2 and call this method then self represents the student2 object and self.marks represents the marks attribute of the student2 object let's write out student 2 equals student student 2 dot name equals janet student 2 dot marks equals 30 did underscore pass equals check pass fail oops student two dot check pass fail and let me print did underscore pass now when i press run then i get true first and i get false here marks of student 1 is 85 so in this method self.marks is 85 which is greater than 40 that's why true is returned similarly for student 2 student.2.max is 30 so self.max greater than equals to 40 is false that's why we get false by the way we can use any name instead of self here is just an identifier like variable names using self is a convention and for consistency we will also keep using self adding attributes to the object manually after defining it is not a good practice instead python offers a much more elegant and compact way of defining attributes right while instantiating the object for that we use the init method the init method is a special method that automatically gets called every time objects are created if you're coming from other programming languages like c plus or java the python init method closely resembles constructors so let's see how we can use the init method in our code and i'll remove the student 2 code and i'll also remove the code that adds the attributes of name and marks to the student1 object then i'll say def underscore underscore init underscore underscore self name marks and i'll say self dot name equals name self.marks equals marks and here i'll say harry and 85 now let me also remove this did pass and i'll say print student one dot name and print student one dot marks let's see what's happening here when we create an object this init method is called automatically with the values harry and 85 passed to name and marks automatically remember the first parameter self represents the object calling it while the second and third parameter take the two arguments which were used during object creation now for the student1 object the name attribute will be harry because of the statement self.name equals name and marks will be 85 because of the statement self.marks equals marks when i run this code then i get harry and 85. let's create another object first i'll add another student student 2 equals student janet 30 and let me print those so i'll say print student 2 dot name and print student 2 dot marks now when i press run then i get harry 85 janet and 30. now let me check if student 1 and student 2 passed or failed the exams we already have the check pass fail method defined for this purpose we just need to call it but first i'll remove the code to print the attributes and then i'll say did underscore pass equals student1 dot check pass fail let me print did underscore pass and again i'll modify did pass so that i know the value or the pass field status of state student two so else it did underscore pass equals student two dot check pass fail print did underscore pass you must have guessed the output by now but let me run the code and verify anyways so i'll press run and as expected true and false are returned because in this line did underscore pass will be true since the first student harry has enough marks to pass the exam similarly here did pass will be false because student 2 does not have enough marks to pass the exam let's see how this program works from the very beginning again we have created a class with two methods an init method that initializes the attributes of name and marks and a check pass field method that returns true if the marks is greater than 40 greater than equals 40 and false if it's not greater than equals 40. we then created student1 in this line with the parameters harry and 85 when this object is created the init method is called and name and marks attributes of this student1 object are now harry and 85 then we checked if student1 passed the exam and printed the result we had also created another object student 2 by passing janet and 30 so the name and marks of the student 2 object are janet and 30 and then we calculated if the student had passed or not using the check pass fail method of the student 2 object and we printed the result i hope you have some idea of how classes and objects work by now let's try one more example for extra clarity in this example we will add two complex numbers manually python already handles this by default but we will create our own complex class to better understand the concepts of object oriented programming if you do not know a complex number has real and imaginary parts when we add two complex numbers we need to add the real and imaginary parts separately let's first create a class that represents complex numbers i'll remove this old code and i'll type class complex and here i'll define a unit function so i'll say def init self real image and inside this i'll say self dot real equals real and self dot imaginary equals image and now let me create two objects n one equals complex 5 6 and n 2 equals complex minus 4 and 2. at this point we have created two complex numbers n1 and n2 and initialize the real and imaginary parts now we'll create a method to add these complex numbers so inside our class i'll add the code i'll say def add self number and here i'll say real equals self dot real plus number dot real and i'll say image equals self dot image plus number dot image then i'll say result equals complex real image and i'll return this result object now let me call the add method so here i'll say result equals n1 dot add n2 here we have called the add method on the n1 object and pass the n2 object to it so inside the add method self will be n1 and number will be n2 then the real and imaginary parts of these numbers are added separately so real equals self dot real plus number dot real means n1 dot real plus n2.real similarly image equals self.image.plusnumber.image means n1 because n1 is self n1.image and number is n2 so n2.image we have then created another object of the complex class using the result values and then returned it in the next line now let's print the attributes of the result object i'll say print real equals result dot real and print image equals result dot image now when i press run there seems to be a problem i forgot the column now when i press run then i get real equals 1 image equals 8 let's verify so 5 minus 4 is 1 and 6 plus 2 is 8 so the answer is correct as you can see the real and imaginary parts have been added separately as expected why objectoriented programming as we have seen from our examples creating objects allows us to organize related data and functionalities together this helps us to write structured and flexible code now instead of thinking in terms of individual data and functions we start thinking in terms of objects and how one object interacts with the other this helps us to divide a complex problem into smaller sub problems also using an object oriented style of programming makes our code reusable because we can define multiple objects with similar attributes and functionalities from a single class before we end this video here's a task for you create a class named triangle create an object from it the object will have three attributes named a b and c that represent the sides of the triangle the triangle class will have two methods the init method to initialize the sides and a method to calculate the perimeter of the triangle from its sides the perimeter of the triangle should be printed from outside the class here's the bare bones code for the program you'll find the complete answer to this question along with source code of all the programs in this video in our github repository the link will be in the description below if you're enjoying this video please also check out programs pro where we provide tutorials along with quizzes and challenges which will help you practice and test your learning in real time also the course includes projects to give you an awesome experience of how programming works in the real world and for our youtube subscribers we are giving 50 off on the yearly plan sign up by scanning this qr code or use the link in the video description to claim your discount you probably heard python is an objectoriented programming language numerous times at this point this means python supports userdefined classes and objects one thing that is particularly interesting about python is that you can not only create custom objects but every preexisting thing available in python is already an object whether it's strings numbers functions or even classes in this video we will learn to check the type of objects find their attributes and methods and have a solid understanding of python objects which will help you become a better python programmer everything in python is an object and we can check this using the type function let's try it out i'll go to my code editor and i'll say numbers equals 1 comma 4 comma 9 comma 16 and let me say print type numbers let me run this code in the output we see class list this means the numbers list is an object that is instantiated from the list class let's try a few more examples so let me create a number i'll say n1 equals 5 and let's print the type i'll also try a few other data types so i'll say flag equals true print type flag let me also try a function so i'll say def my underscore function and i'll create an empty function now let me say print type my underscore function now when i press run we can see that all these entities are instantiated from a class which means they are all objects we can list out all the attributes and methods of a given object by using the dir function let's try it out let me remove this code first and i'll say numbers underscore list equals 1 comma 2. in the next line i'll say print dir numbers underscore list now when i press run this means that our list can access all these attributes and methods let's use the underscore underscore add underscore underscore method that's the first element of this list it is used to append all the items of another list to the end of the current list so i can say let me first comment this out then i'll say result equals numbers underscore list dot underscore underscore add underscore underscore and then let me add another list three comma four now let me print the result and see what we get when i press run then i get a list that has one and two and the elements of the other list appended at the end by the way we can also accomplish this task by using the plus operator like this i'll first comment out this code and then i'll say result equals numbers underscore list plus three comma four when i press run then i get the same output as before in fact the plus operator internally calls this same underscore underscore add underscore underscore method when working with lists that's why we can use the operator like this as you can see even though we are working with operators we are actually using attributes and methods of the object internally let me uncomment this code and run it again if you look at the attribute of lists we can see append clear copy count and many other methods that we've been using from before so if you're unsure about what attributes and methods an object can use the dir method can be useful the id function in python every object has an id for identity the id of an object is always unique and constant for this object during its lifetime you can check the id of an object by using the id function let's try it out so in my code editor i'll remove this old code and i'll say number one equals five print id of number one and let me create another number so i'll say number two equals 10 print id of number two now when i press run then you can see two numbers nine 978 two and nine seven eight five one five two are printed this is the id of the number one object and this is the id of the number two object let me modify this program and i'll assign number one to number two so here i'll say number two equals number one and when i press run now you can see that both of these ids are the same this is because we're working with the same object python does this for memory optimization suppose we have a code like this in our previous videos we have been saying that 5 is stored in a but this is technically wrong here a is more like a name tag and it can refer to any value currently it is referring to object 5. now if you create another variable b and assign a to it then both a and b will refer to the same object let me give you another example of this suppose we have a list like this so i'll say a equals 1 comma 2 comma 3 let me assign this variable to another variable so here i'll say b equals a now i'll modify a by adding one more element to it so i'll say a dot append and the element 4 next let me print the values of a and b so here i'll say print a equals a and print b equals b i'll run this code and you can see a and b both have the same value even though i have made no changes to b this is because a and b are referring to the same object as you can see i've done b equals a and if we check the id of the variables a and b they will be the same that's why we use the list copy method to copy one list to another if you do not want this kind of behavior so here i'll say a dot copy and now when i press run then you can see a and b don't have the same value because i have only modified a and b which was a copy of a is not modified at all that's it for this video you can find the source code of all these programs in our github repository the link will be in the description below before we learn about python inheritance let's see an example of why it is used and what problem it solves suppose we are creating a racing game that will have cars and motorcycles to solve this problem we can create two separate classes to handle each of their functionalities however both cars and motorcycles are vehicles and they will share some common attributes and methods so instead of creating two independent classes what we can do is create a vehicle class that shares the common features of both cars and motorcycles we can then derive a car class from the vehicle class in doing so the car class will inherit all the attributes and methods of the vehicle class and we can later add car specific features to the car class we can also create a motorcycle class that inherits from vehicle in a similar way this is the basic concept of inheritance it allows us to inherit attributes and methods from a parent class to a child class in this example vehicle is our parent or base class while car and motorcycle are our child or derived classes by writing programs in this way we can reuse code that is common for different classes and also makes our code easier to use and maintain now that we know about inheritance let's learn how to implement it in python with the help of example we will derive a dot class from an animal class and get a feel of how inheritance works then we will move on to create a more practical example so i'll say class animal let's define a method named eat inside it so here i'll say deaf eat self and inside i'll say print i can eat this is our base or parent class now let's derive the dog class from this class so here i'll say class dog and before parenthesis i'll add animal inside braces inside this class i will create the bark method which is specific to the dot class so here i'll say def bar self and inside the function definition i'll say print i can bark this dog class inherits all the attributes and methods of the animal class this means objects of dog can also access attributes and methods of animal let's see how so here i'll say i'll create a new object called dog one and i'll say dog one equals dog now i can call this bark method on the dog one object so i'll say dog one dot bark now when i run this code you must have imagined the output already it says i can bark since our dog class is inherited from the animal class dog one can also call the eat method defined in animal so i can say dog one dot eat and now when i press run then i can eat is also printed because dog one has access to the eat method of the animal class let's see from the very beginning what's happening here we derived the dog class from the animal class so the dog class inherits all the features of the animal class now this object of the animal class can access attributes and methods of both the dog class and animal class similarly if we want we can derive another class called cat from the animal class like this so here i can say class cat and inside braces i'll say animal so inside this class i'll define a method called get grumpy so i'll say def get underscore grumpy self and inside this i'll say print i am getting grumpy now let me create an object of the cat class cat one equals cat and let's call the eat method to see if it is accessible to cat so here i'll say cat1 dot eat and when i press run then as you can see i can eat is printed from the cat1 object as well as we just saw cat objects can also use the eat method defined in the parent class even from this very simple example we can see that inheritance makes our code more organized and reusable let's now look at a more practical example of inheritance and we will also cover the concept of method overriding in our example we are going to implement a program to calculate the perimeter of different polygons like triangles and quadrilaterals using inheritance here's what we will do we will first create a polygon class that has an init method a method to calculate perimeter and a method to display the definition of a polygon we will then derive two classes triangle and quadrilateral from it in these classes we will add methods specific to them let me first create a base class called polygon so in my code editor i'll remove the old code and i'll say class polygon and inside it i'll create an init function underscore underscore init underscore underscore and pass in self and i'll pass in the sides as the second argument so here i'll say self dot sides equals sides to make things easier we will make the sides attribute a list that will contain all the sides of a polygon now let me add a display info method to display information about this polygon so here i'll say def display underscore info it will also take the self parameter by default and inside i'll say print a polygon is a two dimensional shape with straight lines let me also add a perimeter method that will find the perimeter of this polygon remember that perimeter is the sum of all sides of a polygon so in my code editor i'll define the perimeter method as i'll say def get underscore perimeter self perimeter perimeter equals self oops sorry sum self dot sides sum is a function that can act on a list and provide the sum of the elements of that list so then i'll say return perimeter this will be our base class all polygons like triangles and quadrilaterals will derive these features now that we are done creating the base class let's create a triangle class that will inherit from the polygon class so i'll go here and i'll say class triangle and then because we want to inherit from the polygon class inside parenthesis i will say polygon and i have my regular colon inside the triangle class i'll define a function called display underscore info so i'll say def display underscore info self and the definition of a triangle is print a triangle is a polygon with three edges i'll also define the new quadrilateral class so i'll say class quadri lateral and also again derived from polygon and inside it i'll say def display underscore info self now let me define a pull a quadrilateral i'll say print a quadri lateral is a polygon with four edges here in each of these cases we have defined a child class from the parent polygon class that will inherit all the attributes and methods of the polygon class now let's find the perimeter of a triangle first i'll create an object of a triangle class so i'll say t1 equals triangle let me pass in the sides of the triangle when we create the t1 object the init method of the polygon class is called automatically now let's find its perimeter so here i'll say perimeter equals t1 dot get underscore perimeter this code calls the get parameter method in that is defined inside the polygon class and returns the perimeter of the t1 triangle let's print parameter and run the code to see if our program is working correctly so i'll go back down and i'll say print the perimeter is and i'll say perimeter now when i press run then there seems to be an error okay triangle object has no attribute get parameter so i have forget underscore parameter correctly oh i am i've misspelled perimeter here now when i press run then it says the perimeter is 18 so 5 plus 6 plus 7 is 18 that means my answer is correct as we can see we get the perimeter as expected if you've noticed we have this display underscore info method in both the polygon class and the two derived classes as well let's see what will happen if we call the display info method for the t1 triangle so here i'll say t1 dot display underscore info and when i run the code we can see that the display info method of the triangle class is called instead of the display info method of the parent class this is called method overriding if the same method is defined in both the base and the derived class then the method of the derived class overrides the method of the base class let's see from the very beginning what's happening here we defined a polygon class and created three methods inside it the init method the display info method and the get parameter method then we derive two classes triangle and quadrilateral where we again define the display underscore info method inside the display method of the triangle and the quadrilateral classes we defined specific details of both triangles and quadrilaterals this is called method overriding due to this when we call display info using triangle objects it doesn't use display info of polygon rather its own display method is called by the way if we need we can call the display info method of our parent polygon class from inside its child classes like this here inside the display info method of the triangle class i can say polygon dot display underscore info and self when i run the code then it also prints a polygon is a two dimensional shape which means the display underscore info method of the polygon class was called correctly as we can see the print function inside the display info of the triangle method was called first and then only after that the polygon classes display info function or method was called here polygon is the name of the parent class since we are calling the method using the class rather than an object we need to pass self explicitly here this code is a bit more unorthodox than what we have been using there is a more elegant way to achieve the same task by using the super function like this so here instead of pulling on i'll say super and when i press run it says display info takes one positional argument but two were given this means i don't need to pass self when i press run then i get the same output the super function returns a temporary object of the superclass for a subclass simply speaking super is an object of polygon in this example and we are using it to call display info of the polygon class that is why it through an error when i add herself here because super is an object and not the class name we can use this to access the method and attributes of a parent class from inside a child class at this point we have covered all the fundamentals of python inheritance by the way we haven't used this quadrilateral class in our example yet if you want feel free to create objects of the quadrilateral class and try accessing the available methods as you please it will help you understand these concepts much better and get a feel of how things work in object oriented programming by the way you can find all the source code mentioned in this video in our github repository the link is in the description below let's talk about python modules a module is a file that contains python code that we can use in our program in this video we will learn why modules are used and how we can use them in our program then we will learn to create custom modules with the help of example there are several builtin functions like print input and sum that are readily available to us in addition to these functions python also has several functions that are defined inside a module which we can use after we import them let me give you an example to show you what i mean by this so i'll go to my code editor this time i am using the vs code code editor because i need to be working with multiple files and that feature is not in our online compiler yet so here in my code editor i'll create a new file called main dot pi and inside this file i'll say import math this will import the math module that comes when we install python this module contains many mathematical functions and constants let's use the square root function from this module this function is used to calculate the square root of a number so here i'll say number equals 25 result equals math dot sqrt number and then let me print the result now i'll save this file and to run it i have to say python main dot pi when i press enter then you can see that 5.0 which is the square root of 25 is printed now let's access the pi constant defined inside this module in my code editor i'll say print math dot pi now let me save this file and run this code again and you can see that 3.141592 the value of pi is printed so once we import a module we can use everything inside it using the dot operator while importing a module we can also rename it to a different name as per our needs let me demonstrate this with an example in my code editor i'll add import math as m now we can access the math module and its definitions using m instead of math so here and here i need to replace math with m and i'll save this file and run this code again and as you can see my code still works because math is now imported as m when we import a module like in our previous examples everything in the module is available to us however if we only need to import a specific definition like a function or a constant we can use the from import statement let's write out in my code editor i'll remove this whole code and here i'll say from math import sqrt now num equals sqrt 64 and now let me print the result num and i'll save this file i'll run this code and as you can see 8.0 which is the square root of 64 is printed here only the sqrt function is imported from the math module when we use this syntax instead of math.sqrt we need to directly use the sqrt function we can also import multiple definitions from the module in a single line using this syntax let me import the constant pi and the functions sqrt and sine from the math module so in my code editor i'll say from math import pi sine and sqrt and let me calculate the value of sine pi by 2 so i'll say value equals sine pi by 2 and let me print this value i'll save this file and run my main.pi file and as you can see 1.0 which is the value of sine pi by 2 is printed we can also use this from import statement to import all definitions from a module like this so here instead of manually importing pi sine and sqrt i can also do from math import asterisk i'll save this file i'll clear the screen and then let me say python main dot pi when i press enter then you can see my code still works and sign sqrt and pi are still imported here asterisk means import everything a side tip for you importing every definition name with the asterisk symbol is a bad programming practice and you should try to avoid it in a code the math module comes with many more handy functions and constraints we can list out all the things defined inside a module by using the dir function let's list out all the definitions of the math module so in my code editor i'll remove this old code and here i'll say import math and then i'll say print dir math i'll save this file and again run main dot pi as you can see there are many other mathematical trigonometric and logarithmic functions inside the math module by the way the math module comes when we install python and that's why we can import it directly there are many popular modules that are not natively available for us to use for example numpy is a popular package that is used for scientific computing to use numpy we must first install it similarly you might have heard about django it's a popular framework used for creating web applications it's also available only after we install it to keep this video short and to the point we will not cover about installing such modules here if you're interested you can find plenty of resources about it on the web custom modules now let's learn about creating custom modules in python we can also create our own custom modules as per our needs this helps us to keep our code organized here we'll create a module named calculator that will contain functions to perform arithmetic operations so in my code editor i'll create a new file name calculator dot pi and inside calculator.pi let me create four arithmetic functions so i'll say diff add a comma b this should return the sum of a and b similarly i'll say diff subtract a comma b this should return the difference of a minus b diff multiply a comma b this should return a multiplied by b and lastly diff divide a comma b and this should return a divided by b this file is in itself a module let's import this file from the main file so i'll go to the main file and here i'll say import calculator and let me use the functions using the dot operator as we previously discussed so here i'll say result 1 equals calculator dot add 2 comma 3 now let me print result 1 similarly result 2 equals calculator dot subtract 6 comma 3 here i'll say print result 2 similarly result 3 equals calculator dot multiply 10 comma 3 now let me print result 3 and finally result 4 equals calculator dot divide 6 comma 3 and let me print result four let me save this file and here i'll say python main dot pi now when i press enter then you can see that all these calculations were correctly done in our example we have only used functions and constraints from a module however a module may also contain classes or any other definitions from this very simple example we can already see how useful a module is it helps us in better code management and improves reusability of our code that's it for this video if you want to revise these concepts you can find all these programs in our github repository the link is in the description below talk about python packages a package is a directory containing multiple modules and other sub packages in this video we will learn about python packages with the help of examples then we will learn about pip the standard package manager of python suppose we are developing a large program to simplify this program we can first divide it into modules if our program is very large there might be a lot of these modules so we further need to group related modules together so that everything is organized python packages allow us to do just that they help us to organize related modules together let's look at an example to understand this concept even more clearly suppose we are developing a game with multiple objects so it may have these different modules since these modules are in the same location they look cluttered right now we can structure them in this way instead here the similar player and boss modules are kept under the character's package also gun and knife modules are kept inside the weapons package then both characters and weapons packages are again kept inside the main game package as you can see our project looks much more organized and structured with the use of packages now let's try to implement this in our code to keep this video short and to the point i will only implement the characters package but you will soon see that the core concept will be the same for other packages as well i'll first create a package name game that will contain all our game components so let me go to my code editor and i'll create a directory named game then i'll create a file named init.pi inside it so i'll say underscore underscore init underscore underscore dot pi this is a special file which will tell python that this directory is a python package i'll leave this file empty for now now let me create a sub package inside this game package so here i'll create a new folder called characters since this will also be a package let's not forget to add the init.pi file inside the characters folder as well this will tell python that characters is also a package or it is a sub package of the game package now i'll create two modules inside this package so let me create the player.5 module first so here i'll say player.pie and inside this file let me add a function so i'll say def get player info and inside this function let me just say print i am the main player so let me save this file and then i'll create another module called boss.pi so i'll say boss.pi and inside this boss.file let me just add one function i'll say def get boss info and inside this function i'll just write print i am the enemy player and save this file here i have just used a simple function to illustrate python packages however while actually developing such large programs these modules might contain classes and multiple functions now let's try to import each of these components by using the import statement i'll create a new file outside the game package and i'll call it main dot pi so here i'll say main dot pi then i will say import game and use the dot notation to access the player module inside the characters package so i'll say import dot characters dot player now i can use all definitions inside the player module let's use the get player info function of the player module so i'll say game dot characters dot player dot get player info let me wrap this up so that you can see it okay i said info so i'll save this file and here on the terminal i'll say python main dot pi and as you can see the function was correctly called and i am the main player is printed we can also use the from import statement to import only certain modules from the package let me show you how to do this i'll first remove this old code and here i'll say from game dot characters import player here we have only imported the player module of the characters sub package so we can access the get player info function without using the game package so i'll only type player dot get player info i'll save this file run main dot pi again and you can see that i got the same result as before while writing lesser code we can also import only certain definitions from inside these modules as well i will now import only the get boss info of the boss module so here i'll say from game dot characters dot boss import get boss info now i can call the get boss info directly and if i save this file and run the code then you can see i am the enemy player was also printed both functions work as expected a tip for you when you use packages always try to give descriptive names to functions and classes so that you don't get confused now we have created this init files without doing anything inside them the code inside this file runs automatically when we import the package let me add a line here inside the init file of the game package here i'll say print initializing the game now let me go back to my main dot pi file and if i run the code again so here i'll say python main dot pi and when i press enter you can see that initializing the game was also printed to the screen that means the code within the init file was executed when the package was imported and that is why initializing the game was printed here in our previous example we looked at how to create a python package there are thousands of such useful packages tailored for specific tasks that are developed and maintained by the active python community when you start working on more advanced projects you will have to use these packages at some point rather than building everything from scratch for example if you're working with web development you will probably use packages like django or flask to use these packages we first need to install them this is where pip comes in pip is the standard package manager for python that helps to install and manage additional packages that are not available in the python standard library let's use pip to install a package called pandas it is a popular package for data analysis in python to install this package i'll say pip install pandas and when i press enter as you can see it's downloading the pandas package depending upon the size of the package it may take a while one cool thing about pip is that it also automatically installs all required dependencies to run pandas like numpy which is another popular package for scientific computing now that the process is complete i will open a new file and inside it i'll write from import pandas as pde now i just want to check if the pandas module is working so here i'll just say print pd and save this file now here i'll say python main dot pi as you can see pandas is correctly installed and we can start using it in our code sometimes you may have to install a specific version of a certain package in that case you can specify the package version using the double equal syntax let me show you i'll go to my terminal and i'll type pip install requests equals equals 2.21.0 and as you can see it is collecting and installing the specific version of request that i requested for if you want to list all the installed packages you can use the pip list command so in my terminal and clear this out and i'll say pip list as you can see it printed out all the packages that i have installed on my computer as you can see pip is a very useful tool that makes managing external packages a whole lot easier if you want to learn more about pip you can check out our article on it the link will be in the description below i'm sure you have run into errors numerous times while programming basically these errors are of two types one is syntax errors like missing parentheses wrong indentation etc you can easily fix these errors by fixing the syntax and the other type of error is exception even if your code is syntactically correct it may sometimes result in an error for example if you divide a number by zero you will get an error these types of errors that we encounter during the runtime of the program are called exceptions in this video we will learn about exceptions in detail and then we will see how we can handle them in python let's understand about exceptions first for this i will write a program that will give us an error so in my code editor i'll say numerator equals 10 denominator equals 0 now i'll say print numerator divided by denominator and i'll save this file let me run it i'll say python main dot pi and you can see that when i run the code we can see the zero division error has been raised even though our code was correct syntax wise it's not allowed to divide a number by zero in python this is an exception in this case we are getting the zero division error exception depending upon the error these exceptions can be of different types for example if you try to access a file that doesn't exist we will get the file not found error exception similarly if we try to access the item of a list out of range we will get the index error exception as we know when our program encounters an exception our code ends abruptly with an error message and most of the time rather than showing the default message we may want to show a custom message that's more helpful or run a different set of code this is known as exception handling is the process of responding to exceptions in a custom way during the execution of a program in python we use the try except block to handle exceptions and its syntax goes like this inside the try block we write the code that might throw an exception now if an exception occurs the control of the program jumps immediately to the accept blocks and the program continues and if exceptions don't occur the except block is completely skipped pretty simple right now let's see a working example of it so inside the try block i will write some code that might raise an exception let me remove this and here i'll say numerator equals integer input enter numerator then i'll say denominator equals integer input enter denominator next i'll say result equals numerator divided by denominator and let me print the result here we are taking numerator and denominator from the user dividing the numerator and the by the denominator and then printing the result this code may raise an exception if the user enters 0 as a denominator let's print a simple message inside the accept block if an exception occurs so i'll remove this code and here i'll say print denominator cannot be zero please try again let me also put another print statement outside the try except blocks here i'll say print program ends let me save this and when i run this so i'll go to my terminal and say python main dot pi in the numerator i'll enter 10 in the denominator i'll enter 0 and as you can see denominator cannot be 0 please try again is printed this is because this line result equals numerator divided by denominator raises an exception when denominator is zero in this case the control of the program jumps to the except block and the code inside it is executed let me run this program again so here i'll say python main.pi and this time let me enter the numerator as 4 and denominator as 2. when i press enter as you can see the correct answer which is 4 divided by 2 is printed and the accept block is not executed this time i have this code from our earlier example on my screen here it doesn't matter what type of exception it is this except block is executed whenever an exception is thrown it's also possible to handle different types of exceptions in different ways for example we may want to print different error messages for zero division error and index error exceptions we can do that by specifying the type of exception after the accept keyword so here after accept i will add zero division error now this accept block is only handling the zero division error let me run this code so here i'll clear this and let's say python main dot pi enter numerator 10 and enter denominator again i'll enter 0 because i want to throw the exception and as you can see the code inside the except block was executed handling specific exceptions in this way is particularly useful if our try block may raise more than one type of exception suppose our try block can raise the zero division error and the index error as well we want to handle these two exceptions separately we can do that by adding another except block to handle the index error exception separately let me show you what i mean by this i will add code inside the try block that may raise the index error exception so in my code after the print result here i'll say my underscore list equals 1 comma 2 comma 3 and i'll accept input or the index from the user so here i'll say i equals integer input enter index and then i'll print my underscore list i this code will raise the index exception if the user enters an index greater than two because our list only has three items now to handle the exception i will type another except block so here i'll say accept index error and inside this i'll say print index cannot be greater than size of list let me add the full stop now when i run this code i'll say python main dot pi oops there's an error so the error seems to be print result no print oh i forgot a bracket here okay i'll save this and let me say python main dot pi it says enter numerator so let me enter something like 10 in the denominator i'll enter five now when it says enter index let me enter something like 5 when i press enter then you can see that index cannot be greater than size of list which is the custom message i had put in for the index error is printed a try statement can also have an optional finally block which is executed regardless of whether an exception occurs or not and its syntax goes like this let me run this code first so here i'll say python mean dot pi now let's understand what's going on in this program this block of code gives us the zero division error so the accept block wrong denominator is printed to the screen finally the code inside the finally block is also executed however if an exception doesn't occur in the try block this except block is not executed but this finally block is still executed the final block is usually used to perform cleanup actions that need to be executed under all circumstances suppose we are working with an external file in our program we need to close this file at the end even if there was an error while writing to it in this case we put the close file function inside the finally block at this point we have covered pretty much everything we need to know about exception handling by the way we can also create custom exceptions in python if you're interested you can check that article on our website programmies.com the link will be in the video description if you're enjoying this video please also check out program is pro where we provide tutorials along with quizzes and challenges which will help you practice and test your learning in real time also the course includes projects to give you an awesome experience of how programming works in the real world and for our youtube subscribers we are giving 50 off on the yearly plan sign up by scanning this qr code or use the link in the video description to claim your discount we all know about files they are named locations on our storage device for recording data python provides numerous builtin functions to work with these files in this video we will see how we can perform various file operations such as reading and writing into files with the help of examples there are three steps we need to follow to work with files first open a file second perform the operations such as read content from the file or write data to the file third close the file now let's cover each of these topics in detail in python we use the builtin open function to open files here i have a file named message.txt and inside it i have two lines of text ilo programming and i love program is to open this file i will create a new python file in the same directory and call it main dot pi so here i'll type f equals open message.txt here message.txt is the location of the file if this file was in another directory we would also need to specify the path to this file and this open function is opening the file which returns a file object which is stored in the variable f this file object will be used to perform file operations by default the file will be opened in the read mode meaning we can read contents from the file but we can't modify it instead of this we could also have explicitly specified the file to be opened in the read mode by passing a second argument like this so here i'll add a second argument and say r here r means open the file in read mode similarly if you want to write contents to a file we should open the file in write mode by using w like this so i'll remove this r and i'll write w and this means that i'm opening the file in right mode these are called file modes the mode in which the file is opened and there are three commonly used modes in which we can open a file r for reading contents of the file w for writing contents to the file and a for appending more content to the end of the file now we know how to open a file next we will see how we can read the contents of the file after we open a file like this we can read its contents using the builtin read method so in my code editor i'll say content equals f dot read and then i'll print the content first i have opened the file in read mode this statement returns a file object then using the object we read the entire content of the file and printed before we see the output of this code i will add a line to close the file so here i'll say f dot close we should always close the file after working with them it's a good programming practice now let me run this code so let me hide the explorer open the terminal and here i'll say python main dot pi and you can see that the contents of the file message.txt were printed it's also possible to read only a certain number of characters from a file using the same read method for this we pass an optional size argument let me read only the first characters from the file so here i'll say f dot read six let me save this file and when i run it you can see that only the first six characters of the file were printed now if you read the same file again it starts reading from the seventh character because we have already read up to the sixth character let me show you how that works let me modify this program to read the next characters so here i'll say more underscore content equals f dot read 12 and i'll print more content let me save this and when i run python main dot pi again you can see that programming was also printed so let's try to see what happened here the first read statement or the f dot read six is giving us the first six characters i love and the second read which is more content equals f.12 is giving us the next 12 characters and which is programming we might encounter unexpected errors while working with external files so it's a good practice to open the files using try final statement let me show you how so in my code editor i'll make a few changes here i'll put this inside a try block all of this will go inside the try block and i will put the f dot close inside a finally block here we are adding try and finally blocks because now even if our program encounters an error our file will be closed this is because the finally block always gets executed there's even a better way to write this same code in python using the with open syntax let me show you how so here i'll remove the try block and i'll say with open as f i'll remove this finally code now when i run this code i'll say python main.pi which should have been with i'll save this and i'll just run python main.pi this again seems to be an error i forgot the colon at the end again let me try this once python main dot pi and as you can see i got the same output but using the width syntax automatically closes the file without us having to write the finally ourselves to write content to a file we must first open it in write mode then we can start writing content to it using the right method there are two things you need to remember while writing to a file if you try to open a file that doesn't exist a new file is automatically created if a file already exists its contents are removed and our new content is added to it first let me write to a file that doesn't exist so here in my code editor i'll say with open python dot txt and in write mode as f i'll say f dot write python is awesome and in the next line i'll write f dot write i love python i'll save this and let me run it when i run the code a python.txt file is created with the content python is awesome i love python here both the strings are in the same line we can change that by adding slash n to specify a new line character so here i'll go back to my main dot pi and i'll say python is awesome slash n now let me open up my terminal and run the code again so i'll say python main dot pi and if i go to if i open the now if i open the python.txt file you can see that python is awesome and i love python are on separate lines notice that while running the program for the second time the python.txt file was already there since opening an existing file in write mode will overwrite the file all the previous data was erased and new content was written to it so you have to be very careful while using the right mode because you may accidentally erase the old data without realizing it the final file mode that we will discuss in this video is append as suggested by the name we use this only if you want to add additional data to the end of the file without erasing our previous data at the moment our python.txt file looks like this let me add an additional line to this file and in main dot file i'll open this in append mode and here i'll write f dot write i'll write python is my favorite programming language here i have used a to specify that i want to append to the python.txt file then i have used the same write method to write new lines to the existing file let me run this code so let me hide this here open up my terminal and here i'll say python main dot pi and after running it if i open my python dot txt then you can see that python is my favorite programming language has been appended to the end of the file the read lines method returns a list containing each line of the file let's open the same python.txt file we have been working with on read mode but this time i will use the redlines method i'll remove this old code first let me change the mode to read and then i'll remove this old code i'll say lines equals f dot read lines and let me print lines to see what i get now i'll save this let me run the code so i'll say python main.pi and you can see that i get a list of the lines that are inside the python.txt file now if i want i can use a for loop to iterate through the list to get each line one by one similarly there is also a write lines method to write multiple items into a file it writes the items of a list to the file so i'll go to my code editor i'll remove this old code and instead of python.txt i'll say javascript.txt let me open this in write mode so inside this block i'll say lines equals js is also awesome and in the second item i'll say slash n js is my second favorite programming language now i'll say f dot write lines lines i hope you must have guessed the output by now but let me show you anyways so i'll do python main dot pi and when i press enter then if i let me close my terminal i'll go back to my explorer and you can see that a file called javascript.txt with the two lines js is also awesome and js is my second favorite programming language has been created at this point we have covered pretty much everything we need to know about file handling in python by the way there are many other builtin methods and file modes available to file objects if you're interested you can find more information about it on our website programmings.com the link will be in the video description a folder or directory is a location on a computer to store and organize multiple files and sub directories python has a module named os that makes it really easy to work with directories and file management tasks in this video we will learn to use the os module to perform various directory operations like creating renaming and removing directories with the help of examples let's see how we can get the path to the current directory first for that we use the getcwd function of the os module it returns the current working directory as a string i'll go to my text editor first i need to import the os module so i'll say import os then i can say current underscore dir or current directory equals os dot get cwd and now let me print this variable print current underscore dir i'll save this file run the code say python main dot pi and when i press enter then you can see that it printed the location of the main dot pi file or the current directory in python we can change the current working directory by using the chdir method of the os module as we saw in our previous section the present working directory is the directory containing our python file by default let's change the current working directory i'll start with the old code and i'll say os dot d i r and inside these quotation marks let me put this location and then instead of os i'll say exceptions which is the location of the file from the previous video so here i'm trying to change the default location and then let me print os dot get cwd again to confirm that the current working directory has been changed so let me run python main.pi as you can see os.getcwd first gave me the os folder where main.pi was located when i change the default directory by using os.csdir then when i call os dot get cwd again this time i get the new directory which i had set as the default directory here now if i create a file inside the current directory our file will be created inside this exceptions folder and not this os folder let me show this in action so here i'll write to a new file i'll say with open test dot txt i'll do that in write mode and i will call the file point f then i will say f dot write this is a test file now when i press run python main dot pi a new file has been created and this file if i check here then you can't see that file in the os directory instead if i go to the exceptions directory you can see that test.txt file has been created and inside it you can see that this is a test file is there that means python is considering the exceptions directory to be the current directory for opening file test.txt in write mode in python all files and subdirectories inside a directory can be retrieved using the list dir function of the os module and i'll say print os dot list dir and let me run this so i say python main dot pi and you can see a list of all the files and folders inside this python videos directory can be seen here i can also pass an optional path argument to hdir to return files and subdirectories from a specific path so here i can say exceptions and if i run this program again then you can see the files that are inside the exceptions directory we can create a new directory using the mkdir function of the os module in my code editor i'll say os dot mkdir test and i can run this code so i'll say python main dot pi and if i go into the folder i can see that there's a new folder called test if i wanted this text directory to be created in a specific path i can use the full path location like this so here i'll say mkdir exceptions slash test and now let me run this so python main dot pi and if i go inside the exceptions folder then you can see that there's a test folder inside the exceptions folder we can rename any directory or file using the rename function of the os module let me show you how os dot rename and inside this let me pick any file so our folder i'll call idle name test so here i'll say test and i can say test new and now if i run this co if i run this code so i'll say python mean dot pi then if i go back to my folder structure you can see that test has been renamed to test new as you just saw the rename method takes two arguments the current name of the folder or file and the new name of the folder or file the rename function can also be used to rename a file with the same exact syntax i encourage you to change the name of a file on your own and let me know if it worked in the comments section we can remove a file using the remove function of the os module so i'll go to my folder list and i can see that there's an exceptions 4k dot mov file here i'll remove it using python so on my code editor i'll say print first let me start by listing all the files and directories in this folder and here i'll say python main dot pi as you can see there is a file called python module let's remove this one so i want to remove python modules.mov next i'll say os dot remove python modules dot mov and then let me again print os dot list dir just to make sure that python modules has indeed been removed so now i'll say python main dot pi and as you can see python modules is not here python modules dot mov is not here anymore to remove a directory we use the rmdir function one thing we need to remember when removing a directory is that the directory must be empty otherwise an exception will be raised now we currently already have an empty directory called test new in our current directory which we have created before to remove this directory i will change my previous code and here i'll say os dot rmdir and here i'll say test new now let me run this first let me clear the screen here i'll say python main dot pi and now you can see that test new is here before but it's not in the new list or i can also verify this visually so you can see that test new folder is no longer there that means it has been removed that's it for this video if you want to revise this concept you can find all these programs you know github repository i'll also put this link in the video description iterators are everywhere in python they are elegantly implemented within for loops list and dictionary comprehensions but they are hidden in plain sight in this video we will learn about iterables and iterators in python with the help of examples we will also create our own custom iterator and see how the for loop actually works let's first understand what an iterable is basically anything that you can loop over in python is called an iterable for example a list is an iterable for an object to be considered an iterable it must have the iter or iter method let's check if lists have this special method to check this i will use the dir function which returns all the methods of an object so here on my code editor i'll say print dir numbers now let me run this code and here among all these methods you can see the dunder itr method let's call this method on this numbers list to see what it does so here i'll say value equals numbers dot dunder or double underscore iter double underscore and let me print the value when i press run then you can see that we got a list iterator object and this is the memory location of that object next we will see what iterator objects are iterator in python is simply an object that can return data one at a time while iterating over it for an object to be an iterator it must implement two methods eater or iter and next these are collectively called the iterator protocol now we'll look into the next method in detail suppose we have a list like this so i'll say numbers equals 1 comma 4 comma 9 now i'll get an iterator from this list using the iter method so here i'll say value equals numbers dot dunder or double underscore under iter and next here this variable value is an iterator and we can get each element of this iterator by using the next method the next method returns the next value in the iteration so here i can say item one equals value dot double underscore or dunder next and then i can print item one when i run this code then one which is the first element of this list is printed now if i run the next method again it should return the next item which is four it's because the next method also updates the state of the iterator and here i'll say item 2 equals value dot done.next print item 2 and then item 3 equals value.next and then i'll say print item three now let me run this code as you can see first one was printed then four then nine by the way instead of calling these special methods with an underscore python has an elegant way to call underscore underscore iter simply with the iter function and underscore underscore next underscore underscore with the next function i'll make these changes to my previous code so here instead of calling numbers dot underscore underscore iter i can say iter numbers and instead of calling value dot underscore underscore next underscore underscore i can say next value here to i can say next value and here as well next value when i run this code i get the same output as before but my code looks a lot cleaner than before by the time i get to the third element we have already reached the end of our list now let's see what happens if we further try to get the next value so here i'll say item 4 equals next value and let me try to print item 4. now when i run the code then you can see that the stop iteration exception has been raised since our list had only three elements the call to the fourth next method raised the stop iteration exception did you know that for loops internally use the while loop to iterate through sequences to demonstrate this let me first loop through a list using the while loop so i'll go to my code editor and create a new list i'll say num underscore list equals 1 comma 4 comma 9 and now let me create an iterator object so here i'll say iter underscore obj or iterator object equals iter num underscore list here the iter object is an iterator we can now use an infinite while loop to get the next element using the next method and in case a stop iteration exception occurs we'll break out of this loop so here i'll say while true and then i can say try try to get the next element so next item underscore obj and then if i get the element print that element now if there is an exception then i can say or if there is more specifically i'll say if there an stop iteration exception then break the code here's how this code works first we have created an iterator object from a list using the iter function then we have created an infinite while loop inside the loop we have used the next method to get the next element in the sequence in the next line we have printed that element we have put all this code inside a try block and when all the items of the iterator are iterated the try block raises the stop iteration exception and we break out of the loop let me run this code and you can see that 1 4 and 9 have been printed in fact this is exactly how for loops work behind the scenes a for loop internally creates an iterator object and iterates over it calling the next method until the stop iteration exception is encountered as we have already seen iterators are simply objects that implement the item method and the next method let's try to make our own iterator object here we'll create a program that will generate a sequence of even numbers such as 2 4 6 8 and so on for this i'll create a class with the init method so let me remove this old code and here i'll say class even and inside this let me start by creating the init method so i'll say def underscore underscore init underscore underscore self and max and then let me initialize self dot n equals 2 so that's the first value which is always 2 and self.max is the value that we provide by now we already know that iterators must implement an item method which returns an iterator so i'll simply create an item method that returns the object itself so here i'll say def underscore underscore iter underscore underscore self and here i'll say return self now let's implement the next method this method should give the next element in the stream if it exists if the next element is not available it should raise the stop iteration exception so here i'll say def underscore underscore next underscore underscore oops i forgot a bracket here self and here inside this method we want to generate a sequence up to the max number and if the next element exceeds max we will raise an exception so let me first start with the framework of the code here if self.n as long as it is less than self.max then we need to do one thing and else we need to raise the stop iteration exception now inside this if i need to generate the next number in the sequence so here i'll say result equals self dot n i am temporarily saving the current value of n in the result variable now i want to increase the value of n by 2 so here i'll say self dot n plus equals 2 and then return result because i want to return the old value of n not the new one now our class is finally complete let's create an object from this class which is an iterator because it implements both the iter and the next methods so here outside the class i'll say numbers equals even 10. now when i call the next method i should get even numbers one after another let me print three even numbers i'll say print next numbers print next numbers and print next numbers again now when i press run then you can see that 2 4 and 6 are printed if we use the next method three more times the stop iteration exception is raised as of sequence can only have numbers up to 10 because of this limit here at this point we have covered all the basics of iterators in python but you might be wondering why it is used iterators are powerful tools when dealing with a large stream of data if you use regular list to store these values our computer would run out of memory quickly with iterators however we can save resources as they return only one element at a time so in theory we can deal with infinite data in finite memory generally iterators are implemented in python using something called generators that make it much easier to use them we will cover python generators in detail in our next video that's it for this video if you want to revise these concepts you can find all these programs in our github repository i'll also put this link in the video description a generator is an elegant way to create custom iterators in python that make it really easy to work with iterators if you haven't watched our video about iterators yet i suggest you watch that video first before you proceed before we learn about generators let's see an example of an iterator implemented in python let me run this code and you can see that a sequence of numbers 2 4 and 6 is generated to generate this we have created a custom iterator inside the even class for an object to be an iterator it should implement the item method which will return the iterator object the next method which will return the next value in the stream and possibly raise the stop iteration exception when there are no values to be returned as you can see the process of creating iterators is both lengthy and counterintuitive generators come to the rescue in such situations python generators are a simple way of implementing iterators all the work we mentioned above are automatically handled by generators now let's see how we can use generators to create iterators i have this quote from the last section that creates a sequence of even numbers let me first remove this even class now let's implement this same iterator using a generator a generator is simply a function but with slight modifications in a generator function we use the yield keyword to get the next item of the iterator let's see how first i'll create a generator function named even underscore generator and also change this to even underscore generator so let me remove this and i'll call it e1 underscore generator now let me define the even on the generator function i'll say def even underscore generator inside this for now i'll just say pass now inside of this function i will use the yield keyword instead of the return keyword to yield the next value without terminating the function so here i'll start with n equals 0 and then n i'll increase the value of n by 2 and yield n and then i'll again increase the value of n by 2 and yield n and again let me increase the value of n by 2 and yield n and let me remove this pass let's see from the very beginning what this code is doing first i've created a generator function that has three yield statements there should be an n here when we call this function it returns a generator which is an iterator object then we have called the next method to retrieve elements from this object this code gives us the value of the first yield which is 2 in this case this code will give us the value of the next yield which is n equals 0 plus 2 plus 2 which is 4 and this code gives me the value of the third yield which is 6. the difference between return and yield is that the return statement terminates the function completely while the yield statement pauses the function saving all its states for next successive calls so when we call the next function for the second and third time it gave us the values of 4 which is the second yield and 6 which is the third yield let me run this code so that you can see it for yourself so when i run this code you can see that the same old numbers of 2 4 and 6 were generated that means our generator is working correctly however as of yet it only returns the first three even numbers i will now implement a loop to make this generator return even numbers till a certain max number and here i'll pass in a parameter called max now let me remove this old code now i'll say n equals 2 and then i'll start a while loop so i'll say while n less than equals max yield n and then increase the value of n by 2. now i'll say numbers equals even underscore generator 4 when i press run then you can see that 2 and 4 are generated and after that a stop iteration exception is raised let's compare this generator code with our custom iterator code notice how we have never explicitly defined the item method next method or raised a stop addition exception they are handled implicitly by generators making our program and our life much simpler and easier to understand iterators and generators are generally used to handle a large stream of data theoretically even an infinite stream of data these large streams of data cannot be stored in memory at once to handle this we can use generators to handle only one item at a time now let's build a generator to produce an infinite stream of fibonacci numbers for those of you who don't know the fibonacci series is a series where the next element is the sum of the last two elements so i'll go to my text editor first i'll create a generator function name generate underscore fibonacci and call it here i'll say def generate underscore fibonacci and then inside this i'll just write pass and let me call the generate underscore fibonacci function it should be fibonacci okay now inside this function i will create the first two elements of the fibonacci series so here i'll say n1 equals 0 and n2 equals 1 let me remove this pass then i'll use an infinite while loop and inside it i will yield the value of n1 so here i'll say while true and inside it i will yield n1 and then i'll update the values so that the next term will be the sum of the last two terms so i'll say n1 comma n2 equals n2 comma n1 plus n2 if you're confused about what's happening here what's happening is the sum of n1 and n2 is being assigned to n2 and n2 is being assigned to n1 all in a single line isn't python sweet now let me print the first few elements in this series here i'll say let me assign this iterator so seq equals this now let me say print next seq and i'll copy this and paste it a few times oops all right when i run this code you can see that the fibonacci numbers has been generated if we had used a for loop and a list to store this infinite series we would have run out of memory however with generators we can keep accessing these terms for as long as we want it is because we are just dealing with one item at a time at this point we have covered the basics of python generators by the way we can also create generators on the fly using generator expressions if you want to learn more about it you can check our article on our website programmers.com the link will be in the video description below now i have a little assignment for you why don't you try and modify the generate fibonacci function to instead generate an infinite stream of odd numbers so you can call it generate underscore odd and then use the next method 10 times to print the first 10 odd numbers that's it for this video if you want to revise these concepts you can find all these programs in our github repository i'll also put this link in the video description as simple as date and time may seem in real life they can be challenging to implement in our code because we have to keep record of things such as different date and time formats different time zones and so on fortunately python provides a builtin date time module to simplify this task in this video we will use the datetime module to manipulate date and time in python with the help of examples let's first find the current local date so in my code editor i'll say import date time as dt and i can say current underscore date equals dt dot date dot today and let me print it so i'll say print current underscore date here i have used the today method of the date class of the datetime module which i have imported as dt to get the current local date let me open up my terminal and here i'll say python main dot pi and as you can see i get 27 january 2021 which is today's date in nepal similar to the date class the daytime module has many other useful classes to work with date and time some of the popular classes defined inside the date time module are the date class to work with date the time class to work with time and the date time class that is a combination of date and time classes now let's cover each of these classes in detail the date class of the date time module is used to create date objects that can store year month and day let me create a date object so i'll go to my code editor and here i'll say import datetime as dt and in the next line i can say date1 equals dt.date now the first parameter is the year so i'll say 20 21 and the second parameter is the month between 1 and 12 so let me say january similarly the third parameter is the day of the month so let me give an arbitrary number like 5 because this needs to be between one and thirty one so let me close this and let me print what i get so print date one so i'll save this code open up my terminal and say python main dot pi as you can see i got the date back as expected instead of creating date like this we can also get today's date as we have previously discussed let me get the current date again i'll remove this whole code and i'll say dt dot date dot today and let me print the date 1 again and when i run this code you can see that i get 27 january 2021 which is today's date or the date of this video recording we can also access the year month and day attribute separately let me show you how i'll remove this old code that prints the date and instead i'll say print year and let me print date1.year similarly to print the month i'll say print month and here i'll say date1 dot month and similarly to print the day i'll say print day date1.day now let me save this file run the code and you can see that the year month and day have been printed separately the time class of the daytime module is used to create time objects that can store time of day like hours minutes seconds and microseconds let me create a time object so i'll go to my code editor and i'll remove this whole code i can say time 1 equals dt dot time now the time class takes integer arguments which are 0 by default the first argument is the number of hours between 0 and 24 so here i'll say 10 the second argument is minutes from 0 to 60 so here i'll say 45 the third argument is seconds from 0 to 60 so let me say something arbitrary like 30 and the fourth argument is microseconds from zero to one million so let me add in a number like four five six six seven i'll close this bracket let me print the time one to see what i get i'll save this file let me go to my terminal i'll say python main dot pi and as you can see i got a time object that stored the same time that i had sent in as arguments to the time class and if you need we can also access each individual attribute like the hour and minute separately let me show you how so here i'll say print hour is time 1 dot hour similarly minute is time one dot minute and second is time one dot second let me save this i'll go to my terminal python main dot pi and as you can see i got the hour minute and second separately let's also do micro seconds so i'll say print micro seconds and then i can say time one dot micro seconds if i save this file run this code it says time one dot oh it's micro second and run this file and as you can see i can also get the micro seconds the date times time class provides us some of the basic time functionalities however if you want more control and functionalities related to time we suggest you to use the time module we already have an article on it on our programming website in case you want to check it out the link will be in the video description the date time module has the date class to work with dates and the time class to work with time and if you need to work with both date and time at once the daytime module has also a datetime class the datetime class of the datetime module is used to create objects that contain all the information from a date object as well as a time object let me create a datetime object so i'll say import datetime as dt now let me create a datetime object so i'll say datetime underscore obj equals dt dot datetime the datetime class takes in all the integer arguments that are used by the date and the time class one after the other so here i can say 2021 which is the year 11 the month november 28th so 28th of november then i can say the time is 23 or 11 pm 55 so 11 55 pm and then 59 seconds so almost midnight let me close the bracket and i can say print date time underscore obj and let me see what i get so let me go to the terminal and say python mean dot pi and as you can see i get a daytime object that represents the time based on the arguments that i passed here now if i only need to get the date from this daytime object i can always use the date method so let me hide the terminal and here i'll say print datetime underscore obj and i want to call the date method of this object so here let me save this file and i'll run python main dot pi and as you can see i got the date object separately similarly to get the time i can use the time method so here i'll say print date time underscore obj dot time let me save and run this code and as you can see i get the date time object then by using the date method i separate the date object and similarly by using the time method i separate the time object like with date and time objects we can also access individual attributes like year month and hour as we have previously discussed to get the current local date and time at once we can use the now method of the datetime object so i'll go to my code editor and i'll say import datetime as dt now to get the current date time i can just say current underscore date time equals dt dot datetime.now now let me print this so i'll say print current underscore date time and save this file go to my terminal say main dot pi and as you can see i got the current date and time so it is 5 48 pm on 27 january 2021 right now during the time of this recording a time delta object represents the difference between two dates or times let me show you what i mean to demonstrate this i will find out the time difference between now and the next new year let me go back to my code editor and say import date time as dt now let me get the current time so i'll say current underscore time equals dt dot date time dot now we already know this now the next new year is next underscore new underscore year equals dt dot date time and the integers arguments are 2022 and january is one and again first january is 1. now to calculate the time remaining i can say time underscore remaining equals next new year minus current underscore time let me print this and see what we get so i'll say print time remaining save this file go to my terminal run python main.pi and as you can see it tells me that there are 330 days six hours nine minutes zero seconds and three three five five seven six micro seconds from now to the next new year now let me see what the type of the time remaining variable is so here i'll say print type time remaining and when i run this code you can see that it gives me class date time dot time delta that means the difference between two date times is a time delta object this time delta object can also be added to or subtracted from daytime objects to get new daytime objects the strf time method returns a string representing date and time for the datetime object we know that there are many formats to write the date and time depending on your location if you're in the us you probably use month day year format but if you're in the uk you will generally use the day month year format the strf time method allows us to display the date and time in a custom specific format let me show you what i mean i'll go to my text editor and i'll say import date time as dt let me get the current date time so i say dt dot datetime dot now let me print the current date time so print current underscore date time i'll save this file go to my terminal and say python main.pi and as you can see this is the current date and time during the time of this recording in the standard format if i wanted to print the date in a different way i could convert this datetime object to a date string in a specific format let me show you how string underscore date equals current underscore date time dot because i want to call the str f time method and inside this fdi strf time method i'll pass an argument as percentage capital a comma percentage capital b space percentage d comma percentage capital y let me print this string underscore date i'll go to my terminal and say python mean dot pi and you can see wednesday comma january 27 comma 2021 is printed this date is now in a much more human readable format here i'm taking the current underscore date time object and calling the strf time method on it to get the string in the date format here percentage a represents the weekday name that is wednesday similarly percentage b represents the month's full name which is january percentage d represents the day of the month which is 27 since the time of this recording it's january 27th similarly percentage y is the year which is 2021. i could have also printed the date and time in a different format let me show you how that works so i'll remove the terminal and here let me change the format to something else i'll say percentage b space percentage dash d comma percentage i and percentage p now let me run this code so here i'll say python main dot pi and as you can see i have printed the same date in a different format here these are format codes that made it possible to transform our datetime object to a string in a certain format there are many such format codes available for us to use don't worry you don't need to memorize all these format codes you can visit our article on strf time to search among all the formatting directives as per your needs the link will be in the description below the strp time method is the opposite of the strff time method the strf time method converts date time objects to strings whereas the strp time method converts strings to datetime objects let me show you what i mean and i'll say import datetime as dt then i can say date underscore string equals so let me pass in a date that looks like 21 june 2021 and then i can convert this to a date object by saying date underscore object equals dt dot datetime dot str p time and the first argument is the date string so here i'll say date underscore string the second argument is as before the codes that represent the different parts of the date so i can say percentage d because 21 is the number of the day and then i can say percentage b comma similarly year in numeric format was percentage y and then end the code in the bracket now let me print what date object i get so let me say print date object and here i can say date underscore object let me go to my terminal say python main dot pi and as you can see i got the date object that i was looking for here i have passed both the string and the format in which the date is represented in the string as parameters to the strp time method of the datetime class of the datetime module and this gave me the datetime object as i said before percentage d represents the day of month similarly percentage b represents the month's name in full and percentage y represents the year it's also important for me to leave this comma and space here because it's the format that my date is in while using strp time the string and the format code must match exactly if the string and the format code don't match we will get the value error exception now that we know about strp time and strf time we can convert any date in any format to another for example if i have a date string in the uk format and need to convert it to the us format i can first convert the uk date string to a datetime object using the strp time and then convert this object back to a string in us format using strf time at this point we have covered all the basics of using the datetime module except one important topic handling time zones time zones can be especially tricky if you're working with them for the first time for example in nepal it's currently 6 05 pm which means it's 7 20 am in new york and 5 50 in india as this video is already long we will not cover this topic in this video if you want to learn how to handle time zone issues in python we suggest you to use the pi tz module it's the same module recommended by the official python documentation that's it for this video if you want to revise these concepts you can find all these programs in our github repository i'll also put this link in the video description python decorator is a function that takes in another function add some functionality to it and then returns it in this video you will learn how to create decorators and why you should use them before we learn about decorators we must first understand a few basic things in python we must be comfortable with the fact that everything in python is an object including classes as well as functions variables are simply identifiers bound to these objects if you want to learn more we already have a video on this topic you can refer to that video since functions are also objects we can also pass functions as arguments to other functions let me demonstrate this to you i'll go to my code editor and here i'll say def inc x so i'm defining a function that returns x plus 1 or whatever is passed in plus 1 now i'll create another function which takes a function as an argument so here i'll say def operate and func x this will save result equals func x and then return the result here the operate function takes two arguments the first is a function and the second is a regular argument x let me call operate with the ink function as the first argument so here i'll say operate ink and i'll pass 3 as the parameter now let me print this so here i'll say print and when i press run then you can see that 4 is printed here's how this code works first we have called the operate function with the ink function as the first argument and three as the second argument this ink function is then assigned to the func parameter inside the operate function then we have called the func function and assigned the return value of this func to the result variable and in the next line we have returned whatever result was stored in the result variable in this case since we have pass 3 and ink returns x plus 1 or 3 plus 1 this whole function returns 4 and that is what gets printed to the screen the main takeaway from this example is that a function can take another function as an argument in python we can also define a function inside a function let me show you an example so here let me remove this old code and here i'll say def print underscore message and then let me pass the message as the argument inside this function i'll say greeting equals hello and then let me define another function inside so here i'll say def printer now this does not need any arguments and here i'll say print greeting and then the message now let me call printer from inside the print underscore msg function so here i'll say printer and then from outside the function i can say print underscore msg python is awesome here i have defined an inner printer function inside the scope of the print underscore msc function here's how this code works first we called the print underscore msg function with python is awesome as the parameter inside the print underscore msg function we have called the inner printer function which prints the greeting and message variables let me run this code and you can see that hello which was the value of the greeting variable and python is awesome which was sent as a parameter to print underscore message are both printed the main takeaway from this example is that we can define a function inside another function another thing we need to understand about functions is that they can also return a function as a value now let me modify this code a bit instead of calling the printf function from inside the print underscore msc function i will return the printer function itself we already know that if there are parentheses after a function that function gets called in this case i don't want to call the function but return the function itself so let me remove this parenthesis and here i'll say return printer now i'll assign the return value to a variable named func now outside the print message function here i can say funk equals print underscore msg python is awesome and let me run the func function so f unc and parenthesis let me run this code and you can see i get the same output as before but do you notice something weird here we can see that the outer function print underscore msg is done executing on this line this should mean that all its local scope variables are destroyed after it finishes executing however when we call the func function we still have access to message and greeting variables in the inner printer function such a function is called a closure a closure is simply an inner function that remembers the values and variables in its enclosing scope even if the outer function is done executing python decorators make extensive use of closures now we are finally ready to learn our python decorators a python decorator is a function that takes in a function adds some functionality to it and returns the original function let's try to build a decorator function that prints out some information before and after executing another function i'll go to my code editor and first define a normal function called printer so let me remove this old code and here i'll say def printer this will just print hello world now i'll define a decorator function that takes in a function so outside this i'll say def display underscore info and then i'll pass func or function as a argument now i'll add an inner function that prints out some information before and after executing the function so here i'll say def inner now i'll use the underscore underscore name or dunder name attribute of the function to access its name so here i'll say print executing and i can say funk dot underscore underscore name underscore underscore and then i can say function then i'll call this function so here i'll say funk and after the function is executed i can say finished executing so here print finished execution now inside this outer display underscore info function i'll return the inner function so here i can say return inner now let me run the printer function normally first so i'll go outside and i'll say printer let me run this and you can see that hello world is printed nothing fancy now here comes the magic i'll use the decorator function to run the same printer function this time let me remove this code now i'll call the display info function with the printer function as the argument and store the returned value so i can say decorated underscore func equals display underscore info and this will take in the printer function as an argument now let me call this decorated underscore func function so i'll say decorated underscore func with parentheses and when i run this code you can see that executing printf function and finished execution are printed before and after our hello world here's how this code works when this line of code is executed the display underscore info decorator function gets called with the printer function which gets converted into the func argument inside this display underscore info function there is an inner function this inner function prints out executing the funct name function calls the func parameter or calls the function that is passed as a parameter and then prints finished execution as you can see the decorator function acts as a wrapper it allowed us to add some functionality to the past function without changing the code of the original function in python we have a much more elegant way of writing these lines implicitly using the at symbol let me show you how i'll first remove these lines and rearrange these functions so let me remove these i'll copy this code and put this before printer you will see why i'm doing this soon now comes the magic instead of calling the display info function before the printer function i'll say at display underscore info this code is equivalent to our previous code as you can see adding the add symbol on top of a function definition means that we are passing that function as an argument to the decorator function and reassigning the function to the return function we passed the printer function to display underscore info decorator and reassign the printer function to the returned inner function as you can see adding the add symbol is a sweeter way to do the same thing it also avoids creating one more extra variable we pass the printf function to the display info decorator using the add symbol makes our code much more cleaner and we can now call the printer function directly without assigning the decorated function to another variable so in my code editor i'll directly call the printer function this time i can just say printer and when i press run then you can see that i got the same output as before while writing a lot lesser code and also making it much sweeter or you know much more synthetically pleasing to see the decorator we created in the previous section was simple and it only worked with functions that did not have any parameters now let's discuss how we can create decorators for functions with parameters suppose we have a simple divide function so i'll go to my code editor remove this old code and say def divide a comma b so it's a function with two parameters and it says return a divided by b at this point we already know this code will throw an exception if we pass the value for b as zero now let's make a decorator function called smart underscore divide to prevent this so on top of this function i'll say def smart underscore divide now smart underscore divide will take a function as an argument since the inner function will replace our original function the parameters should be added to the inner function so here i'll say def inner a comma b i will print out some information before dividing so here i will say print dividing a by b i will then check if b is 0 and if so i'll print the message and use return to stop for the execution so here i can say if b equals equals 0 print cannot divide by 0 and then i can say return else i just return the function so i'll say return func a comma b and then on outside i can say return inner now let's add this decorator to our original function so here you must have already guessed what i'm going to do now i'll say add smart underscore divide now let me call the divide function so here i'll say divide first i'll call it with nonzero arguments and then i'll call it again with the zero denominator so divide 15 by 3 let me put this in a variable so i'll say value 1 equals divide 15 3 and let me print value 1 similarly value 2 equals divide and this time i'll say divide 5 by 0 let me put a space here and here i'll say print value 2. let me run this code as you can see in the first call the denominator was a nonzero element so the value after division is returned and it gets printed to the screen in the second call the division was halted and no value was returned that is why none gets printed here in python a function can be decorated multiple times with different or the same decorator let me show you what i mean here i have a simple printer function that prints whatever message is sent to it as a parameter i also have two decorator function star and percent these functions print a series of star and percentage symbols before and after executing the function let's now decorate the printer function with the star and percent decorators and call the function so here i'll say at percent and similarly i can go to the next line and i can say star let me call this printer function so i can say printer decorators are wonderful let me run this code as you can see these decorators are chained and they wrap the original function here we have first added the star decorator and then the percent decorator so the star function wraps the percent function and the percent function wraps the printer function at this point we have covered the basics of python decorators if you want to learn more about decorators you can check our article on our website programmings.com the link will be in the video description if you're enjoying this video please also check out program is pro where we provide tutorials along with quizzes and challenges which will help you practice and test your learning in real time also the course includes projects to give you an awesome experience of how programming works in the real world and for our youtube subscribers we are giving 50 off on the yearly plan sign up by scanning this qr code or use the link in the video description to claim your discount