hey guys this is vimpam from programmies and welcome back to this series on c programming in this video we will learn about dynamic memory allocation in c programming more specifically we will learn to allocate and destroy memory addresses while running the c program so let's get started in c programming dynamic memory allocation allow us to allocate memory dynamically that is after we run the program before we learn about dynamic memory allocation let's first revise the concept of pointers here we have created a pointer variable ptr this pointer variable stores the memory addresses of the var variable in the print statement we have used the pointer variable to access the value pointed by it when i run this code i'll get the output 32 we have already discussed pointers in our earlier videos if you are confused how this program works i highly recommend you to watch earlier videos you can find the link somewhere on the screen now let's get back to our video c provides three major functions to perform dynamic memory allocation malloc reallock and free we will now learn about them one by one the malloc function stands for memory allocation is used to reserve a block of memory of the specified size for example suppose we need to allocate memory to store n variables of double type variable then we can use the malloc function now let's see how we can use the malloc function i want to allocate memory for n variables so let me create the n variable int and now let's create a pointer variable to store the address of allocated memory int asterix ptr now let's use the malloc function i'll write here ptr equals to parenthesis int asterisk malloc and into sizeof int here and into size of int is the memory required to store n number of integer values suppose the value of n is hundred so let's change this to n equals to hundred now we know the size of int is usually 4 bytes so total space needed to store 100 double values is 100 into 4 that is 400 bytes now malloc function allocates 400 bytes of memory finally we have used the typecasting so that the allocated memory is used to store integer type data here we have assigned the allocated memory to the ptr variable in this case the ptr variable stores the address of the first byte of the allocated memory and we can use the ptr variable to access the remaining bytes as well once the work of allocated memory is completed we use the free function to release the dynamically allocated memory here is the syntax to use the free function here the ptr is the pointer variable that stores the address of the memory allocated using malloc now that we know how malloc and free works let's use them together in a program but before that let's get some engagement in the video so that we can keep these types of content free for all users youtube really likes engagement on the video so leave a comment below press that like button and hit subscribe if you haven't already let's get the engagement score higher so that more people can discover and enjoy these courses here we have our code from our earlier program now let's complete this program first so i'll add here has include stdio.h and int main inside the curly braces return zero now i'll cut this and put it there and let's clean this up now it's ready okay so we have our complete code now first i'll change the value of n from hundred to four for simplicity now let's provide four input values to store in the allocated memory so i'll use printf so print f and here i'll write enter input values and i'll use for loop so end i is equals to 0 i is less than n plus plus i and inside the curly braces i'll use scanf function and inside quotation percent d comma ptr plus i here we have allocated spaces for four element and ptr stores the address of the first element so we can treat ptr as an array and ptr plus i gives the ith element of the array which we have already discussed in the pointer and add a video now let's print the input values i'll use the print statement first to print the message input values and i'll use for loop again and i is equals to 0 i is less than n and plus plus i inside the for loop i'll print percent d and comma asterisk ptr plus i so asterisk parenthesis ptr plus i gives the value pointed by the ptr plus i pointer while working with malloc there might be situation where the memory allocation fails in such situation the malloc function returns null so let's create a condition to end the main function if the function cannot memory in our code i'll add if condition if pti equals to null then then we'll print memory memory cannot be allocated and return zero here if the malloc function returns null the condition becomes true and this line memory cannot be allocated will be printed and finally return 0 terminates the main function now finally let's use the free function to release the allocated memory so i'll add here free function now let's run this code i'll enter here 12 21 13 and 9. as you can see we have allocated the memory using the malloc function by the way do you want to take your programming journey to the next level watching tutorials is fine but it has one limitation it's hard to learn and practice together at the same time lucky for you we have recently launched programmies pro that provides tutorials along with quizzes and challenges which will help you practice and test your learning in the real time also the course includes projects to give you an experience of how programming works in the real world and for our youtube subscriber we are giving 50 off on the yearly plan sign up by scanning this qr code or use the link in the video description to claim your discount in our previous example we have allocated 400 bytes of memory to store four integer values now suppose we need to store two more integer data in this case we use the realog function to change the size of dynamically allocated memory now let's see the syntax to use really function here six into size of int is the new size allocated using the real look function let's see an example now here i have the earlier code for simplicity i'll remove this section to take input values so i'll remove this and here i'll print the memory addresses directly so here i'll use printf inside quotation allocated memory and i'll use for loop for and inside for int i is equals to 0 i is less than n and plus plus i inside the curly braces inside the for loop i'll print the memory addresses so percent p comma ptr plus i now suppose i need two more memory spaces so i'll add a new value of n with value six so i'll add here n is equals to six then we will use realloc function to allocate two more spaces so here ptr is equals to reallock function and ptr comma and into size of int finally let's print the memory addresses of new allocated spaces so printf and newly allocated sorry allocated memory backslash n and we'll use for loop again and i is equals to zero i is less than n and here plus plus i inside for loop i'll print the newly allocated memory addresses so printf percent p comma ptr plus i i'll run this code you can see the output here initially four spaces were allocated using the malloc and then we increased the size from 4 to 6 using real lock now to revise what you have learned in this program here is a programming task for you create a program that dynamically change the size of an array create a pointer array like this int astrix aces and then allocate four spaces for the array using the malloc function get four input values for the array print the array element using the pointer resize the array to store six element using reallock assign 32 and 59 as the fifth and sixth element you can see the hint on your screen then finally print all six arrays elements now you will find the answer to this question in our github repository and also if you want to revise this concept all this program will be there as well i'll put the link in the video description below now that we have reached the end of this video it's time for programming squeeze what is the correct way to allocate memory to store 12 double data comment your answer below i'll see you in the next one happy programming you