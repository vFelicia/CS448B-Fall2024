what's up guys i'm punishment programmers and welcome back to this series on javascript in our last videos we have learnt about the working of a javascript array now we'll learn about the map filter and reduce methods that are very useful while performing various operations on an array so let's get started before we learn about these methods let's do a quick brush up on arrays in javascript we use an array to store multiple values together for example i'll go on my code editor and let me create an array called numbers that will store the numbers from 1 to 5. so it's basically just a collection of numbers stored together in one variable now suppose we want to find the square number of each of these elements then we need to loop over the elements and perform the squaring functionality this means to perform any operation on an array we need to first access each element of the array one by one now to easily access each element of the array and perform a certain action we can use map filter and reduce let's start with the easiest the map method to understand the map method let's see an example first i have an array from before now i want to find the square of each element of this array i can use the map method like this now i want to find the square of each element of this array before i use the map method let me first write the equivalent for loop that will do this for me so i would start with a result array or let's call this squared so i'll say squared i would have to start with an empty array then for let i equals 0 i less than numbers dot length so i want to go to the end of the array and i want to add one number to the index then i would say squared dot push numbers times numbers and let me just verify that this indeed works so i'll say console log squared so what i'm doing is i'm looping through all the elements in the array and i actually wanted to do not the array multiplication but so inside the for loop i am taking each element of the array one by one so i will be zero in the first iteration so i want to multiply number zero which is one with numbers zero again and squared array will now contain one times one which is one in the second iteration i will be 1 so i less than numbers that length is 5 so this is true so the loop will continue and square dot push so this will become 2 and this will become 2. this goes on so i will be 3 and this becomes 3.3 so squared should have an array of all the squared numbers in this array i'll press run just to verify and you can see that i got the array of squared numbers now let me simplify this code by using the map method i can instead of doing this what i can also do is i can say const result equals numbers dot map and inside this map i can send a function that will take each number one by one and just return number times number let me console log result just to show you that this works like before i'll press run so you can see that i got the same result as before now let's see what's happening here the map method takes each element from the numbers array so 1 will be transferred to 1 here and imagine this as one times one so whatever value is returned from the function is pushed into the result array so think of this as so one by one we'll do this so numbers zero is 1 1 is passed to this function and the return value 1 times 1 becomes result dot push 1 times 1. similarly in the next iteration we take 2 and put it inside here so the return value is 2 times 2 and think of this as result dot push 2 times 2. in the third iteration this becomes result dot push three times three in the fourth iteration result dot push four times four and in the fifth iteration this becomes result dot push phi times phi so whatever transformation function you define inside will be used on every element of the numbers array one by one so we will always get an array of the same size as the initial array because we are applying the transformation function on each number or in or each element in this case this is a number i hope this was clear this will be more clear in the future videos or as we practice javascript even more now don't get confused so right now we wrote this or we can even give this function a name so square number and then we wrote return number times number now you can see variations of this everywhere so first of all let me first turn this into an arrow function so you will see this variation in many places as well always remember that this is just an arrow function and a different representation of a function and nothing more in fact you'll also see another representation a lot since there is only one line in my function i don't need the parenthesis and i can just say number arrow number times number you will see another variation where even these braces are removed or these parentheses are removed and this works because the function or an arrow function can work without the parenthesis around the parameters when there is only one parameter so you will see all of these variations and i recommend that you spend more time understanding arrow functions before you dig deep into map or filter or all of these methods all right now that's out of the way let's do another example to drive home the point remember that this is one of the most complex parts of javascript so spend time i'll take this one step at a time all right i'll remove this old code and let me say i have an array of names james murray and rosa all right an element an array with three elements suppose all these people belong to the same family and all of them have the same surname now if i want to provide surname to all of them i can simply use the map method i can say const full names equals names.map now remember that map takes a function that takes each element of this array one by one so for each name i want to return name plus their surname let's call it smith with a space in between so this is the concatenation operator and you must have guest output by now i if i say console.log full names and press run i will get an array with smith added to each element again just like before don't get confused if you see an arrow function like this or an arrow function since this function has only one line an arrow function like this or an arrow function like this these all mean the same thing and they will all work as you can see i've successfully added surnames to all of these names using the map method very simply without writing a lot of code if you're enjoying this video please also check out programs pro where we provide tutorials along with quizzes and challenges which will help you practice and test your learning in real time also the course includes projects to give you an awesome experience of how programming works in the real world and for our youtube subscribers we are giving 50 off on the yearly plan sign up by scanning this qr code or use the link in the video description to claim your discount let's move on to the filter method the filter method is used to filter out the array elements based on a particular condition let me give you an example suppose i'll go back to my old numbers array so numbers equals 1 2 3 4 and 5. let me just add spaces here doesn't make a difference but just looks nicer now if we only want those elements from the array that are less than 3 we can use the filter method but before that let me do this using the for loop so if i was going to do this with the for loop i would do let result i'd start with an empty array and then i would say for let i equals 0 i less than numbers dot length and i plus plus and inside i would say if so i would say const number equals numbers i and i would say if number less than 3 only then i want you to add the number to the result array now outside if i say console.log result and press run you can see that i was successfully able to add only those numbers to the result array which satisfy my function or my condition number less than three now let's try to do the same thing using the filter function if you have understood the map function the filter function should seem really easy for you so i can just say const less than 3 equals numbers dot filter and now let me add a function here just like map function takes each number as the parameter inside this function i'll just say if number less than 3 return true and then else return false so compare this to this and you will be able to see that one by one the numbers will be sent to this function so let's do this all right i'll remove this because these are complex concepts i want to spend as much time simulating the output uh as i can alright so i'll just take one and put it here now is one less than three yes return true that means one gets to enter the less than three club so let's say one gets to enter all right now let's move on to the next element 2 is 2 less than 3 yes because this function returns true 2 gets to enter this club of less than 3. now let's go to 3 so we'll go to 3 is 3 less than 3 no this function returns false so 3 does not get to enter this club of less than 3 array that means this filter function removes all the elements that don't satisfy my condition now i can write this more concisely by saying just in one line number arrow number less than 3 why does this work because this is a boolean expression that will return true and false based on whether number is less than 3 or not and this is an arrow function that returns this boolean expression so a filter function as long as it returns true or false and that gives me you know whether should i whether i should send that number to this result array or not as long as it returns that true or false state then it works so let me just make sure that this works console log less than three and i'll press run and as you can see by writing a very small function a very very small function i can get the same result as a long for loop let's see one more example so that this is very clear to you let me change the function so that i filter out the odd elements now we already have this template here but still i'll remove this let me start so i'll even name the function so i can even give the function a name and i know that this function will receive each element of this array so i'll call the element number and i can just say return number modulo t2 equals equals 0 because i wanted to filter out the odd numbers that means i want only the even numbers which this condition gives me so let's again do the same exercise as before i will put 1 here return one percentage to equal sig zero this is false so less than three or let's call it even numbers so even numbers will not have 1 we go to 2 put 2 here 2 modulus 2 or the remainder when 2 is divided by 2 is in fact 0 so 2 gets to go in let's go with 3 3 modulo 3 2 is not 0 so this result is false and 3 does not get to go in and 4 is allowed to go 5 is not allowed to go so once you start visualizing the filter function in this way you will be able to understand it and be writing filter functions in no time i'll again reduce this to a very small manageable function arrow function so i'll call it number and number modulo 2 equals equals 0. this should also do the same thing as before so let me just check even numbers and when i press run you can see that i got an array of 2 and 4 which filter out all the odd numbers okay guys we need your support to keep these kinds of content free for all users youtube really likes engagement on the video so leave a comment below press that like button and hit subscribe if you haven't already let's get the engagement score high up so that more people can discover and enjoy these courses the reduce method is the most advanced of the three array methods that i'm going to talk about in this video we learned about the map and filter functions the reduce method is used to execute a certain function on each element of an array just like map and filter but it works a bit differently i'll show you with an example so i'll start with an array like this so numbers equals 1 1 2 3 4 5. now what if i wanted to find the sum of all these elements let me write a for loop as usual so i'll set sum of numbers equals 0 and then for let i equals 0 i less than numbers dot length i plus plus and what i do is i'll say sum of numbers equals sum of numbers plus numbers i if you're having trouble understanding this for loop i suggest that you go back to our video on for loops and make sure that you understand this first because you will not understand reduce if you're not clear about this one all right so let me just confirm console log sum of numbers and press run and you get 15 which is the sum of these numbers now let's think about how this program works we start with a number called zero so this is sort of the base value and when i is 0 so sum of numbers is 0 and again sum of numbers is 0 and numbers i is 1 so my sort of i can say sum of numbers is 0 plus 1 that means the sum of numbers variable now contains 1. now in the second loop i go to 2 so numbers i becomes 2 and sum of numbers because it was initially 1 now sum of number becomes 1 plus 2 which is 3 now you can see that sum of numbers is really like an accumulator that is accumulating the sum till now in each iteration of the of the for loop this concept is important when we try to use the reduce function so the reduced function is very similar but what we'll do is we'll say sum of numbers equals numbers dot reduce instead of so i know till now that i need to pass a function so let me just put an empty function here like map and filter i cannot just put number here instead the reduce function takes two parameters and accumulator and the current value so inside this function i need to pass the new value of the accumulator first before i do that remember the for loop that i wrote before so let me first copy this code go back and make sure that i have this loop somewhere all right i'll go down here and now let me call this sum of numbers one so remember our accumulator which are sum of numbers the initial value was zero so to the second parameter of the reduced function we pass the initial value of the accumulator now this function should return the new value of the accumulator on each iteration that means just like before what was the new value of the accumulator after each iteration it was the old value of the accumulator plus the current value or the current value of the numbers array which i was iterating through at that iteration so i can just say return accumulator current value and this will give me the sum of the numbers let's just check so console.log sum of numbers 1. this will be clear as we go through more examples and i'll press run you can see that i got 15. now let's try to see what happened here during the first iteration the accumulator is the value 0 because this is the default value that i have given so the accumulator is 0 and the current value will be the first value which is 1 so this will return 0 plus 1 which is 1 now for the next iteration this return value will be passed to the accumulator variable so this will be 1 and the current value which is 2 will be passed to the current value now what will this function return it will return the value 1 which is the current value of the accumulator plus the current value of the iteration or the numbers array which i'm iterating through all right now the accumulator becomes 1 plus 2 so this becomes 3 and we move to the next element which is 3 this becomes the current value now i return 3 plus 3 which becomes the new value of the accumulator so this becomes 6 and the new value is 4 so the current value becomes 4 and what do i return i return 6 plus 4 which is 10 now the accumulator is 10 and the current value becomes 5 and finally i return 10 plus 5 which is 15 and that is what i get in sum of numbers one now this was a bit complex but i will do one or two more examples so that you can understand what reduce really means let's go back to a map and filter function and do things with reduce that we did with map and filter so i will find the squares of all the numbers let's do the for loop that will do that so i'll say squares equals this and then let me uncomment this and we would do squares dot push numbers i times numbers i and i can console log the squares i'll do this and i hope this works all right you can see that by using a for loop i was able to calculate all the squares of each number and put them in a squares array now i can do this using a map function as we've learned but let me try to reduce use reduce instead because this is more challenging and more fun so everything you can do with a map you can also do with reduce all right now i'll remove this old code and i'll say const squares 1 equals numbers dot reduce as before remember that it needs an accumulator and a current value and the second parameter will be the default value of the accumulator which is an empty array in this case so let me put the empty array here now what should be the accumulated value at the end of each iteration it should be the original or i should say accumulator dot push i need to add a new element to the accumulator each time what do i need to push obviously the current value squared so current value times current value and don't forget i need to return the accumulator each time so what's going to happen here is the accumulator will be in the first iteration it will be an empty array and the current value will be 1 so accumulator dot push current value 1 times 1 and the new accumulator becomes 1 an array containing just 1. now the current value becomes 2 so accumulator dot push 2 times 2 and because i'm returning this new array so this was an array containing just one one dot push 2 times 2 so this becomes 1 comma 4 the current value now becomes 3 so this becomes 3 and this becomes 1 comma 4 dot push 3 times 3 and so on and finally the accumulator will contain or the squares one will contain all the squares of the elements let's use reduce to simulate a filter function now remember that i only included the elements which were less than 3 let's do that here as well so less than 3 equals an empty array and i would typically do if numbers i or the current element less than 3 then less than 3 dot push numbers i so this would give me all the elements that are less than three it works like this now always think about the accumulator as the initial value that you take so the initial value is okay now what do i need to change inside here this will be accumulator and this will be current value now i want to add to the accumulator only if the current value is less than three so if current value is less than three then accumulator dot push current value and there's an explicit else that you know don't do anything if the value is greater than 3 and at the end don't forget to return the accumulator so return accumulator and let me remove this for conciseness and this should give me the list of numbers that are less than three let me call it less than three three all right i'll remove this old code and let's simulate what happened here so numbers that reduce function the accumulator was initially this empty array so i'll put an empty array here and the current value was one the one is one less than three yes the accumulator gets pushed the current value so empty array dot push 1 now my accumulator becomes an array with element 1 now i go to the next element which is 2 so is 2 less than 3 yes so 1 dot push 2 and now my accumulator becomes 1 comma 2 now for the next element 3 is 3 less than 3 no false so i just return the existing accumulator which is one comma two and that's why no other elements get added in the next iterations map filter and reduce are a bit complicated for beginners but once you start using them you will never go back to for loops that's my experience with map filter and reduce i really love writing these functions now to practice what you learned here's a programming task for you create an array named greet with values hello hi and welcome use the map method to add a new string word to each element of the array remember two words should be separated by a space from this new array filter out the element that have more than eight characters you'll find the answer to this question in our github repository also if you want to revise these concepts you can find all these programs there as well i'll put the link in the video description below now that we've reached the end of this video it's time for the programming quiz what is the output of this program you can see the options on the screen comment answer below and happy programming