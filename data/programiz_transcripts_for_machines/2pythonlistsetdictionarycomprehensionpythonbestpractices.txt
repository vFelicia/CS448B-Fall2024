there are different compound data types in python like lists sets and dictionaries in this video we will learn to use list set and dictionary comprehension in python with the help of examples these comprehensions will allow you to create lists sets and dictionaries in a more elegant and pythonic way using a single line expression before we learn about list comprehension let's first understand why it is used suppose we have to create a list of the first five powers of two for this we would normally use a for loop and append every item to the list let me show you what i mean so i'll go to my text editor and here i'll start with an empty list i'll say numbers equals an empty list now i'll use a for loop to loop from one to five i'll also use the append method to add elements to the end of the numbers list so here i'll say for i in range one 2 6 and then inside this for loop i'll say numbers dot append 2 to the power of i then i'll print the numbers list so here i'll say print numbers and now when i run this program then verified i got the first five powers of two now wouldn't it be awesome if you could do the same task in a single line list comprehension allows you to do exactly that let me show you how i'll go back to my code editor and let me start by commenting out this old code and here i'll just write one line which is numbers equals 2 to the power of i now what is i let me add a for loop in the same line so here i'll see for i in range 1 to 6 i'll run this code and as you can see i get the same output as before this code is much more elegant and simpler than before and it almost feels like you're reading english let me read this code out so that you can decide for yourself why it works create a numbers list with elements in the form of 2 to the power i where i takes values from 1 to 5. this results in the list of first five powers of two list comprehensions can also have an optional if conditional along with a for loop let me give you an example suppose we have a list like this so i'll say numbers equals 49 64 81 100 and 121 and we want to create a new list that contains the square root of all the even numbers from this list for this i will first import the math module to use the sqrt function so here i'll move this down and i'll say import m a t h math then i'll create a new list called new underscore list so here i'll say new underscore list and let me start with the list comprehension so here i'll say math dot sqrt n and then i'll say for n in numbers now let me print this new list i'll say print new underscore list let me press run button and you can see that i got the square root of all the numbers but that's not exactly what i wanted i want to add i want to get the square roots of only the even numbers so i'll simply add an if statement right at the end so here i'll say if n modulus 2 equals equals 0 because if the remainder when divided by 2 is 0 then the number is definitely even and now when i press run then you can see that i got the square roots of only the even numbers from this list list comprehensions work like magic don't they we can have more than one for loop in list comprehension let me show you an example suppose we have the following code so team one has janet arya and mary similarly team two has even jake and randy here team one and team two contain members of two teams suppose we want to map each element of team one to that of team two and create a new list for this we can use multiple for loops so here i'll say new underscore list equals to now this will be a list of tuples so x y now i need to define what x and y are so x is uh whatever is in team 1 and similarly y is in whatever is in team 2 now let me print this new list print new underscore list let me run this code now let's try to understand what's going on here we have defined new list which will have elements in the form of a tuple which will contain two elements x and y we do this for all values of x in team one that is for janet arya and mary similarly for each of the values in x we also have y that takes values from team 2 that include even jake and randy now these two codes are equivalent but using list comprehension makes our code much more concise we can also write nested list comprehensions it means that we can use a list comprehension inside another list comprehension to give this video short and to the point i will not discuss listed list comprehensions in this video if you want to learn about them you can always visit our article on programming.com and leave the link in the description below remember we generally write list compressions to simplify our code and make it easier to read so avoid using list comprehensions when you have complex and long nested for loops by the way if you're finding this video useful a sub to the channel would be much appreciated before moving to the next section of the video the programs team has created an app that allows you to learn python from your phone the app contains bit size lessons that are easier to understand a builtin interpreter so that you can run python on your phone quizzes and many more features the app is available on both ios and android the links are in the video description we can also use set comprehensions in python to create sets quickly and concisely its syntax is similar to that of list comprehension but we use curly braces instead of square brackets let me show you an example of set comprehension suppose we have a string like this so i can say word equals equals programming and let's try to use set comprehension to get the unique alphabets in this word so here i'll say alphabets equals square bracket x for x in word now let me print the alphabet set so here i'll say print alpha bits and now let's see when what happens when i run this code so i'll press run and as you can see i got all the alphabets in programming but they are not repeated since sets don't repeat elements similar to list and set comprehension dictionary comprehension is an elegant and concise way to create dictionaries in python let me give you an example suppose we have a list like this so numbers equals 1 comma 2 comma 3 comma 4 comma 5 let's create a dictionary that maps elements from this numbers list to its square value so i'll say square underscore dictionary equals now i'll start with an empty dictionary and then i'll say for num in numbers now i can say square underscore dictionary and then the key will be obviously num equals num to the power of 2. next i can print the square underscore dictionary so print square and square underscore dict and when i press run then i get a dictionary having the numbers in the key and the square values in the values now let's try doing the same task using a dictionary comprehension i'll go back to my code editor and comment the old code then i'll directly define square underscore dictionary with the key num and the value as num to the power 2. so here i'll say square underscore dictionary equals the key being num and the value being num to the power 2 and then because i want to do this for each number in the numbers list so i can say for num in numbers i'll close the curly braces and when i press run i get the same output as before let's try one more example suppose we have a dictionary that looks like this and we need to construct a new dictionary with new prices by increasing the price of items by 50 for those that are more than two dollars i will now use dictionary comprehension to do this task in one single expression so here i can say new underscore price equals and then i'll need a key and a value now value will be value obviously times 1.5 if value is greater than 2 otherwise just the value the old value for key value in old underscore price dot dot items that's how you get the items of a dictionary and then i'll close the square bracket or curly bracket and let's see what happens when i print the new price i'll press run and you can see that the prices of the items that whose values were more than 2 have been increased by 50 percent but the price of milk is still the same these two pieces of code are the same that's it for this video if you want to revise these concepts you can find all these programs in our github repository i'll also put this link in the video description and if you like this video hit that like button and subscribe to the channel and i'll see you in the next one happy programming