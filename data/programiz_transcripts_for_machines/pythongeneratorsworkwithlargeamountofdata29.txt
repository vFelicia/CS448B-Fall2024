a generator is an elegant way to create custom iterators in python that make it really easy to work with iterators if you haven't watched our video about iterators yet i suggest you watch that video first before you proceed in this video we will learn to create and use generators in our python programs with the help of examples now why generators before we learn about generators let's see an example of an iterator implemented in python let me run this code and you can see that a sequence of numbers 2 4 and 6 is generated to generate this we have created a custom iterator inside the even class for an object to be an iterator it should implement the item method which will return the iterator object the next method which will return the next value in the stream and possibly raise the stop iteration exception when there are no values to be returned as you can see the process of creating iterators is both lengthy and counter intuitive generators come to the rescue in such situations python generators are a simple way of implementing iterators all the work we mentioned above are automatically handled by generators now let's see how we can use generators to create iterators i have this code from the last section that creates a sequence of even numbers let me first remove this even class now let's implement the same iterator using a generator a generator is simply a function but with slight modifications in a generator function we use the yield keyword to get the next item of the iterator let's see how first i'll create a generator function named even underscore generator and also change this to even underscore generator so let me remove this and i'll call it e1 underscore generator now let me define the even undercooked generator function i'll say def even underscore generator inside this for now i'll just say pass now inside of this function i will use the yield keyword instead of the return keyword to yield the next value without terminating the function so here i'll start with n equals 0 and then n i'll increase the value of n by 2 and yield n and then i'll again increase the value of n by 2 and yield n and again let me increase the value of n by 2 and yield n and let me remove this pass let's see from the very beginning what this code is doing first i've created a generator function that has three yield statements there should be an n here when we call this function it returns a generator which is an iterator object then we have called the next method to retrieve elements from this object this code gives us the value of the first yield which is 2 in this case this code will give us the value of the next yield which is n equals 0 plus 2 plus 2 which is 4 and this code gives me the value of the third yield which is six the difference between return and yield is that the return statement terminates the function completely while the yield statement pauses the function saving all its states for next successive calls so when we call the next function for the second and third time it gave us the values of 4 which is the second yield and 6 which is the third yield let me run this code so that you can see it for yourself so when i run this code you can see that the same old numbers of 2 4 and 6 were generated that means our generator is working correctly however as of yet it only returns the first three even numbers i will now implement a loop to make this generator return even numbers till a certain max number and here i'll pass in a parameter called max now let me remove this old code now i'll say n equals 2 and then i'll start a while loop so i'll say while n less than equals max yield n and then increase the value of n by two now i'll say numbers equals even underscore generator 4 when i press run then you can see that 2 and 4 are generated and after that a stop iteration exception is raised let's compare this generator code with our custom iterator code notice how we have never explicitly defined the item method next method or raised or stop iteration exception they are handled implicitly by generators making our program and our life much simpler and easier to understand by the way if you're finding these videos useful a sub to the channel would be fantastic before moving to the next section of the video the programming team has created an app that allows you to learn python from your phone the app contains bit size lessons that are easier to understand a builtin interpreter so that you can run python on your phone quizzes and many more features the app is available on both ios and android the links are in the video description below iterators and generators are generally used to handle a large stream of data theoretically even an infinite stream of data these large streams of data cannot be stored in memory at once to handle this we can use generators to handle only one item at a time now let's build a generator to produce an infinite stream of fibonacci numbers for those of you who don't know the fibonacci series is a series where the next element is the sum of the last two elements so i'll go to my text editor first i'll create a generator function name generate underscore fibonacci and call it here i'll say def generate underscore fibonacci and then inside this i'll just write pass and let me call the generate underscore fibonacci function it should be fibonacci okay now inside this function i will create the first two elements of the fibonacci series so here i'll say n1 equals 0 and n2 equals 1 let me remove this pass then i'll use an infinite while loop and inside it i will yield the value of n1 so here i'll say while true and inside it i will yield n1 and then i'll update the values so that the next term will be the sum of the last two terms so i'll say n1 comma n2 equals n2 comma n1 plus n2 if you're confused about what's happening here what's happening is the sum of n1 and n2 is being assigned to n2 and n2 is being assigned to n1 all in a single line isn't python sweet now let me print the first few elements in this series here i'll say let me assign this iterator so seq equals this now let me say print next sequence i'll copy this and paste it a few times oops all right when i run this code you can see that the fibonacci numbers has been generated if we had used a for loop and a list to store this infinite series we would have run out of memory however with generators we can keep accessing these terms for as long as we want it is because we are just dealing with one item at a time at this point we have covered the basics of python generators by the way we can also create generators on the fly using generator expressions if you want to learn more about it you can check our article on our website programmers.com the link will be in the video description below now i have a little assignment for you why don't you try and modify the generate fibonacci function to instead generate an infinite stream of odd numbers so you can call it generate underscore odd and then use the next method 10 times to print the first 10 odd numbers that's it for this video if you want to revise these concepts you can find all these programs in our github repository i'll also put this link in the video description and if you like this video hit that like button and subscribe to the channel and i'll see you in the next one happy programming you