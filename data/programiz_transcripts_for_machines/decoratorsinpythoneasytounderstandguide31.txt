python decorator is a function that takes in another function adds some functionality to it and then returns it in this video you will learn how to create decorators and why you should use them but before we learn about decorators we must first understand a few basic things in python we must be comfortable with the fact that everything in python is an object including classes as well as functions variables are simply identifiers bound to these objects if you want to learn more we already have a video on this topic you can refer to that video since functions are also objects we can also pass functions as arguments to other functions let me demonstrate this to you i'll go to my code editor and here i'll say def inc x so i'm defining a function that returns x plus 1 or whatever is passed in plus 1 now i'll create another function which takes a function as an argument so here i'll say def operate and func x this will save result equals func x and then return the result here the operate function takes two arguments the first is a function and the second is a regular argument x let me call operate with the ink function as the first argument so here i'll say operate ink and i'll pass 3 as the parameter now let me print this so here i'll say print and when i press run then you can see that 4 is printed here's how this code works first we have called the operate function with the ink function as the first argument and 3 as the second argument this ink function is then assigned to the func parameter inside the operate function then we have called the func function and assigned the return value of this func to the result variable and in the next line we have returned whatever result was stored in the result variable in this case since we have passed 3 and inc returns x plus 1 or 3 plus 1 this whole function returns 4 and that is what gets printed to the screen the main takeaway from this example is that a function can take another function as an argument in python we can also define a function inside a function let me show you an example so here let me remove this old code and here i'll say def print underscore message and then let me pass the message as the argument inside this function i'll say greeting equals hello and then let me define another function inside so here i'll say def printer now this does not need any arguments and here i'll say print greeting and then the message now let me call printer from inside the print underscore msg function so here i'll say printer and then from outside the function i can say print underscore msg python is awesome here i have defined an inner printer function inside the scope of the print underscore msc function here's how this code works first we called the print underscore msg function with python is awesome as the parameter inside the print under msg function we have called the inner printer function which prints the greeting and message variables let me run this code and you can see that hello which was the value of the greeting variable and python is awesome which was sent as a parameter to print underscore message are both printed the main takeaway from this example is that we can define a function inside another function another thing we need to understand about functions is that they can also return a function as a value now let me modify this code a bit instead of calling the printer function from inside the print underscore msg function i will return the printer function itself we already know that if there are parentheses after a function that function gets called in this case i don't want to call the function but return the function itself so let me remove this parenthesis and here i'll say return printer now i'll assign the return value to a variable named funk now outside the print message function here i can say func equals print underscore msg python is awesome let me run the func function so fu and c and parenthesis let me run this code and you can see i get the same output as before but do you notice something weird here we can see that the outer function print underscore msg is done executing on this line this should mean that all its local scope variables are destroyed after it finishes executing however when we call the func function we still have access to message and greeting variables in the inner printer function such a function is called a closure a closure is simply an inner function that remembers the values and variables in its enclosing scope even if the outer function is done executing python decorators make extensive use of closures now we are finally ready to learn about python decorators a python decorator is a function that takes in a function adds some functionality to it and returns the original function let's try to build a decorator function that prints out some information before and after executing another function i'll go to my code editor and first define a normal function called printer so let me remove this old code and here i'll say def printer this will just print hello world now i'll define a decorator function that takes in a function so outside this i'll say def display underscore info and then i'll pass func or function as a argument now i'll add an inner function that prints out some information before and after executing the function so here i'll say def inner now i'll use the underscore underscore name or dunder name attribute of the function to access its name so here i'll say print executing and i can say funk dot underscore underscore name underscore underscore and then i can say function then i'll call this function so here i'll say func and after the function is executed i can say finished executing so here print finished execution now inside this outer display underscore info function i'll return the inner function so here i can say return inner now let me run the printer function normally first so i'll go outside and i'll say printer let me run this and you can see that hello world is printed nothing fancy now here comes the magic i'll use the decorator function to run the same printer function this time let me remove this code now i'll call the display info function with the printer function as the argument and store the returned value so i can say decorated underscore func equals display underscore info and this will take in the printer function as an argument now let me call this decorated underscore func function so i'll say decorated underscore func with parenthesis and when i run this code you can see that executing printf function and finished execution are printed before and after our hello world here's how this code works when this line of code is executed the display underscore info decorator function gets called with the printer function which gets converted into the func argument inside this display underscore info function there is an inner function this inner function prints out executing the funct name function calls the func parameter or calls the function that is passed as a parameter and then prints finished execution as you can see the decorator function acts as a wrapper it allowed us to add some functionality to the past function without changing the code of the original function in python we have a much more elegant way of writing these lines implicitly using the add symbol let me show you how i'll first remove these lines and rearrange these functions so let me remove these i'll copy this code and put this before printer you will see why i am doing this soon now comes the magic instead of calling the display info function before the printer function i'll say at display underscore info this code is equivalent to our previous code as you can see adding the add symbol on top of a function definition means that we are passing that function as an argument to the decorator function and reassigning the function to the return function we passed the printer function to display underscore info decorator and reassign the printer function to the returned inner function as you can see adding the ad symbol is a sweeter way to do the same thing it also avoids creating one more extra variable we pass the printer function to the display info decorator using the add symbol makes our code much more cleaner and we can now call the printer function directly without assigning the decorated function to another variable so in my code editor i'll directly call the printer function this time i can just say printer and when i press run then you can see that i got the same output as before while writing a lot lesser code and also making it much sweeter or you know much more synthetically pleasing to see by the way if you're finding this video useful a sub to the channel would be awesome before moving to the next section of the video the programmers team has created an app that allows you to learn python from your phone the app contains bit size lessons that are easier to understand a builtin interpreter so that you can run python on your phone quizzes and many more features the app is available on both ios and android the links are in the video description the decorator we created in the previous section was simple and it only worked with functions that did not have any parameters now let's discuss how we can create decorators for functions with parameters suppose we have a simple divide function so i'll go to my code editor remove this old code and say def divide a comma b so it's a function with two parameters and it says return a divided by b at this point we already know this code will throw an exception if we pass the value for b as zero now let's make a decorator function called smart underscore divide to prevent this so on top of this function i'll say diff smart underscore divide now smart underscore divide will take a function as an argument since the inner function will replace our original function the parameters should be added to the inner function so here i'll say diff inner a comma b i'll print out some information before dividing so here i'll say print dividing a by b i will then check if b is 0 and if so i'll print a message and use return to stop for the execution so here i can say if b equals equals 0 print cannot divide by 0 and then i can say return else i just return the function so i'll say return func a comma b and then on outside i can say return inner now let's add this decorator to our original function so here you must have already guessed what i'm going to do now i'll say add smart underscore divide now let me call the divide function so here i'll say divide first i'll call it with nonzero arguments and then i'll call it again with the zero denominator so divide 15 by 3 let me put this in a variable so i'll say value 1 equals divide 15 3 and let me print value 1 similarly value 2 equals divide and this time i'll say divide 5 by 0 let me put a space here and here i'll say print value 2 let me run this code as you can see in the first call the denominator was a nonzero element so the value after division is returned and it gets printed to the screen in the second call the division was halted and no value was returned that is why none gets printed here in python a function can be decorated multiple times with different or the same decorator let me show you what i mean here i have a simple printer function that prints whatever message is sent to it as a parameter i also have two decorator function star and percent these functions print a series of star and percentage symbols before and after executing the function let's now decorate the printer function with the star and percent decorators and call the function so here i'll say at percent and similarly i can go to the next line and i can say star let me call this printer function so i can say printer decorators are wonderful let me run this code as you can see these decorators are chained and they wrap the original function here we have first added the star decorator and then the percent decorator so the star function wraps the percent function and the percent function wraps the printer function at this point we have covered the basics of python decorators if you want to learn more about decorators you can check our article on our website programming.com the link will be in the video description that's it for this video if you want to revise these concepts you can find all these programs in our github repository i'll also put this link in the video description and if you like this video hit that like button and subscribe to our channel and i'll see you in the next one happy programming