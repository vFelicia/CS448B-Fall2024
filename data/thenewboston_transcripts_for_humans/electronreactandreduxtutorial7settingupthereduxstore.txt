With timestamps:

00:00 - already y'all welcome back and now that
00:02 - we have our basic UI put together as the
00:05 - next step I want to go ahead and start
00:07 - setting up Redux however before we set
00:10 - up any Redux State Management tools to
00:12 - manage just app data what I want to do
00:15 - is kind of take a step back and I'll
00:16 - show you how all the data is organized
00:18 - in Redux for tnb OS
00:21 - so let me go ahead and open my Dev tools
00:23 - and I'll pop open this Redux Tab and
00:26 - I'll show you what we have so far and
00:28 - you'll probably get a a pretty good idea
00:30 - of how we're going to structure this
00:32 - so right now at the very top level our
00:35 - store contains two objects one is nested
00:38 - under system and one is nested under
00:40 - chat so we'll start with system right
00:42 - here since this system data if we expand
00:45 - it you'll see that all of the like tnb
00:48 - OS internal system data and this
00:51 - includes things like your accounts and
00:54 - your networks and also like the
00:57 - currently
00:58 - um like the active app which means the
01:00 - app that's currently displaying on the
01:02 - screen all of what you would probably
01:04 - imagine like the internal system data
01:06 - this is all going to be stored under
01:08 - system
01:09 - now for each application that we build
01:12 - the app also needs to maintain its own
01:15 - data for example this chat it needs to
01:17 - know well I only have one account in
01:19 - here right now but what is the currently
01:22 - active account it needs to store your
01:24 - messages it needs to store
01:27 - um like the delivery status if the
01:29 - message was delivered so all of this is
01:32 - going to be nested under an app ID in
01:34 - the app ID for chat is chat
01:37 - so if you just expand this you can see
01:40 - well we don't have any messages but for
01:42 - example the manager right here is going
01:44 - to keep track of the currently active
01:46 - chat so on and so forth so anyways we
01:49 - don't need to dig into this chat store
01:51 - too much but what I'm basically just
01:54 - saying is that the structure at a very
01:56 - high level it's going to have system and
01:58 - then each app is going to maintain its
02:00 - own data under a key which is going to
02:02 - be the same as its app ID So eventually
02:04 - we're going to have system chat and
02:07 - speed test and that's what we're going
02:08 - to be doing in this video setting up our
02:10 - speed test data now in addition to Redux
02:13 - we're also going to be using a tool
02:15 - called electron store and this is going
02:17 - to allow us to persist our app data to
02:20 - our hard drive and that way whenever we
02:22 - shut down tnb Os or just shut down our
02:25 - computer and open it again all of our
02:27 - data is going to be there we're not
02:29 - going to have to reselect the network
02:31 - and account again and all of our
02:33 - historical data is going to be nice and
02:36 - saved from last time so pretty cool and
02:40 - on that note I didn't want to mention
02:41 - one detail as well
02:43 - so you see how in Redux I'll use the
02:47 - chat app as an example you see how in
02:49 - Redux what we have is at a top level
02:52 - all this data is stored under the app ID
02:54 - so for example if we want to access our
02:57 - chat messages we would type something
02:59 - like chat dot messages to access these
03:01 - well whenever we store this data in the
03:04 - electron store that structure is going
03:06 - to be flattened out a little bit
03:08 - and by that I mean let me pop this open
03:11 - so again instead of chat dot messages
03:14 - we're just going to flatten it out and
03:16 - store it under a key called chat
03:18 - messages so kind of the camel case
03:19 - version of that dot separator notation
03:22 - however the reason that we do this is
03:24 - just because whenever we work with
03:25 - electron store it just makes some things
03:27 - easier so that's why we're doing it just
03:30 - to give you some background context and
03:33 - with that said the plan is to yeah just
03:37 - go ahead and get started setting up our
03:39 - Redux store and once we have that
03:41 - structure set up then we're going to go
03:43 - back through each of these components
03:44 - one by one and pretty much just start
03:46 - hooking them up making them work
03:48 - everything from the top down so before
03:50 - we can start actually creating our store
03:53 - what I want to do first is go ahead and
03:55 - create some new data types because we
03:58 - wanted to find the shape of data that's
04:00 - going to be stored in our Redux store so
04:03 - under speed test I'm going to create a
04:05 - new directory I'm going to call it types
04:08 - and the first type that I want to create
04:11 - is going be in a file called
04:13 - manager.ts and for this I'm going to
04:17 - create an interface
04:20 - and this is just going to be called
04:22 - manager and what I'm going to do in this
04:24 - manager little chunk of data right here
04:26 - this manager object is it's going to
04:29 - store the currently selected Network and
04:31 - the currently selected account
04:34 - so I thought manager was a decent name
04:36 - for that and I also am following the
04:38 - same pattern as chat in the chat manager
04:41 - we store things like the currently
04:42 - selected chat app right there so anyways
04:45 - there's some background info so again
04:48 - under manager we're going to do active
04:50 - account number
04:53 - and this is going to be equal to a
04:55 - string or a null because when the app is
04:58 - first initialized it's going to be null
05:00 - and then we'll never like click that
05:01 - pencil icon and select one then we're
05:04 - going to store that account number as a
05:06 - string Under This and we're going to do
05:09 - the same thing for Active network so
05:11 - Active network ID
05:13 - again we don't want to store the network
05:15 - object because I'll show you this the
05:18 - source of Truth for the network object
05:20 - is going to be stored on our system you
05:22 - can see under the New Boston Network
05:24 - this is the ID but we also still store
05:28 - other information like the display name
05:30 - the display image the protocol so on and
05:32 - so forth now if we were just to store
05:34 - this entire network object in
05:38 - um
05:38 - let me pop this open right here then
05:41 - we're almost gonna have like two sources
05:43 - of the truth so instead we just want to
05:45 - store the unique identifier and anytime
05:47 - we need to pull that logo or display
05:49 - name or anything like that then we're
05:51 - just going to reference the system data
05:52 - but either way under manager we're going
05:56 - to be storing the active account number
05:57 - at network ID and this is good go so
06:00 - this is good for manager again basically
06:03 - storing the state for these top elements
06:05 - right here now what I also want to do is
06:08 - create a separate type to store these
06:11 - items right here now initially I wanted
06:14 - to call these tests and then I wanted to
06:17 - call them speed test but the reason that
06:19 - I don't want to call them anything with
06:20 - test in the name even though that's kind
06:22 - of intuitively how I think about it is
06:24 - that whenever we are writing our test I
06:27 - was just imagining in my head well it's
06:29 - just like a million naming conflicts and
06:31 - it's probably going to be kind of messy
06:33 - looking so instead I am calling these
06:35 - things a run so again a run is based
06:39 - basically what you create whenever you
06:40 - hit this button it's going to send a
06:42 - request off to another device and then
06:44 - we're going to get a response back and
06:47 - all of that is going to be stored in one
06:49 - of these things called a run so anyways
06:51 - that's the uh background of that name
06:54 - and on that note let me go ahead and
06:56 - create a new type file and I'll just say
06:59 - run.ts
07:00 - and for this export interface run
07:06 - and all right so what info do we need
07:08 - here well the first thing I want to
07:11 - store is the network ID and this is just
07:14 - going to be equal to a string in other
07:17 - words let me pop this open it's going to
07:19 - be equal to this right here now the
07:22 - reason that I want to store this is
07:24 - because whenever I send a request
07:27 - through a specific Network for example
07:30 - let's say that I want to connect to my
07:32 - MacBook over the New Boston Network
07:34 - whenever my MacBook sends back a
07:37 - response I want to ensure that it's
07:39 - sending it back on the same exact
07:41 - Network now if it's like yeah of course
07:44 - it would well remember that we have that
07:48 - fault tolerance logic where if one
07:49 - network goes down the app is able to
07:52 - communicate through another Network
07:53 - however I want to kind of hard code this
07:56 - in because
07:58 - um just some validation later on I don't
08:00 - want to like be testing the New Boston
08:02 - Network and receive a response through
08:04 - another Network and then have my times
08:05 - almost stop
08:07 - so let me just go ahead and store that
08:10 - right there now another key that we're
08:13 - going to need is the recipient
08:16 - and this is just going to be the account
08:18 - number of for example my whatever device
08:20 - I send it to for example my MacBook and
08:23 - then the request date
08:26 - this is actually going to be a date time
08:28 - object
08:29 - and we're always going to have it so
08:31 - that's actually stored as a string
08:33 - and then we are also going to have our
08:37 - spot state
08:38 - so anyways just uh some context between
08:41 - this whenever we send a block to another
08:45 - device we of course have to say what
08:47 - network we're sending it over who is
08:48 - supposed to be receiving it and this
08:51 - request date as soon as we send it we're
08:53 - going to set this request today they're
08:55 - going to respond pretty much like a ping
08:57 - pong cycle and whenever we get a
08:59 - response back then we're going to set
09:01 - the response date
09:02 - so
09:04 - this response date is going to be a
09:06 - string however it's also going to be
09:09 - null sometimes so whenever we first send
09:12 - this request and we haven't received a
09:15 - response yet we're still waiting for it
09:16 - it's going to be equal to null and again
09:18 - like I said as soon as we get one back
09:20 - then we're going to calculate what the
09:22 - time is and set it as a response date
09:24 - and whenever we do response date pretty
09:28 - much the difference between a request
09:29 - State and response date that's going to
09:31 - give us how fast this request response
09:33 - was
09:35 - now another thing that I'm going to add
09:37 - in is just an ID for basically this
09:41 - object now a lot of the times whenever
09:43 - you're forming like entities in a
09:45 - database you call it the ID either like
09:47 - PK or ID or uuid however when I was
09:51 - developing tnb OS it was it got kind of
09:55 - confusing since so many things had ID in
09:57 - the name and I know this is uh not
10:00 - really convention but well I guess this
10:02 - entire operating system quote unquote is
10:04 - it really conventional either but
10:06 - anyways more of the story is I started
10:09 - naming everything The Entity type in
10:11 - then ID and it's just a lot more
10:13 - intuitive whenever we are um like
10:16 - communicating with other devices as
10:18 - you're going to see soon so this run ID
10:21 - is just going to be unique ID it's going
10:22 - to be a uuid so that's going to be
10:25 - stored as a string and aside from this
10:28 - we're actually going to have one more
10:30 - value in here but before we do that I'll
10:33 - go ahead and create
10:35 - an enum called run
10:38 - status
10:40 - so this run status is either going to be
10:44 - equal to pending and it's going to be
10:46 - pending whenever we first send it out
10:47 - but we haven't received the response yet
10:50 - it can also be equal to success and
10:52 - we'll set it equal to success once we
10:54 - get a successful response back of course
10:56 - now another status that I want to make
10:59 - is a timeout status and this is whenever
11:02 - we send this request pop this open again
11:05 - whenever we hit go and send a request if
11:08 - we'll say like more than 10 seconds has
11:11 - passed and we still haven't heard
11:12 - anything back from the other device then
11:14 - we'll just consider this run timed out
11:16 - and we'll set it equal to timeout that
11:18 - way we don't we aren't like waiting for
11:21 - this uh response for an infinite amount
11:23 - of time
11:24 - so on that note let me just do pending
11:26 - equal
11:29 - ending
11:34 - and then success in timeout
11:42 - all right and now for the run we're
11:45 - gonna store it under status and this is
11:48 - equal to our run status
11:50 - so again by default we'll set it equal
11:52 - to pending and then depending on how it
11:54 - goes either successor timeout to kind of
11:56 - finish it off
11:58 - now
11:59 - the way that we're actually going to
12:01 - structure this in Redux is even though
12:04 - we're going to be storing basically a
12:05 - collection of these I don't want to
12:07 - store them as an array because it makes
12:10 - like finding it updating the array and
12:12 - just kind of updating everything a
12:14 - little difficult so we'll follow the
12:17 - same structure as we do let me see what
12:20 - example I can show you
12:22 - um for accounts for example so you see
12:25 - under accounts right here we have this
12:29 - account data including the display name
12:32 - and display image however everything
12:34 - isn't stored in a list It's actually an
12:37 - object keyed by its unique identifier so
12:40 - for example this accounts unique
12:42 - identifier is this account number AAA
12:44 - yada yada so again the reason that we do
12:48 - this is because it's a lot easier just
12:50 - to say the account dot account number
12:53 - I'm going to update whatever info
12:55 - information this is it's um I don't know
12:58 - it's faster too than having to go
13:00 - through an array iterate and try to find
13:02 - everything
13:03 - so
13:04 - for this
13:07 - again we're going to be storing this
13:09 - under a key which is going to be its run
13:12 - ID and to make this a little bit easier
13:15 - we have
13:18 - I'll type this out for system.types
13:22 - generic
13:25 - I'll show you what this dict type is
13:27 - basically saying that
13:30 - um whatever we specify is the type then
13:32 - its key is going to be a string and the
13:34 - type is just going to be whatever object
13:37 - so
13:39 - export type runs is going to be equal to
13:43 - a dict or dictionary of runs
13:47 - now another thing I want to do before we
13:50 - hop into our store is create a new file
13:52 - called
13:54 - constants
13:55 - and you know how I said before that just
13:58 - like our chat app I'll show you chat
14:00 - store constants
14:02 - how whenever we're working with the
14:04 - electron store we pretty much convert
14:06 - that dot notation to this camel case
14:08 - notation just because it makes some
14:09 - things easier that's what we'll do right
14:12 - here so I'll make export const and I'll
14:15 - say
14:16 - speed test manager and this is just
14:21 - going to be the key for this right here
14:24 - and again the camel case is first
14:28 - the chemical case version of the app
14:30 - name and then
14:33 - whatever slice in this case it's manager
14:36 - and then we're going to do the same
14:38 - thing for run right here
14:40 - so speed test runs
14:45 - and this is just equal to speed test
14:47 - runs
14:49 - and again I just want to use constants
14:51 - for these so anytime we have to refer to
14:53 - this key we aren't like prone to typos
14:56 - we can use the constant and it's just a
14:58 - lot less error prone
15:00 - so closing this and closing this another
15:03 - thing that I like to do let me hop back
15:06 - in my
15:08 - speed test store right here or speed
15:09 - test typing is I like to go ahead and
15:13 - create a file called index
15:17 - and I'm pretty much just going to import
15:18 - all of my different types into this one
15:21 - index file and this just makes it easier
15:24 - whenever you're importing these types
15:26 - later on you only have to import from
15:28 - one file rather than kind of having a
15:30 - million Imports at the top of your file
15:31 - so the first thing I'm going to import
15:33 - is this manager so import
15:37 - manager from apps speed test types
15:41 - manager
15:43 - and then we're also going to be
15:45 - importing
15:46 - run
15:49 - was it runs and run status
15:56 - ROM runs
15:59 - and we'll just export everything
16:03 - part manager and all of this
16:09 - and this was actually supposed to be
16:11 - runs
16:13 - [Music]
16:18 - all right good to go
16:20 - and while I am at it let me actually go
16:22 - ahead and type out my electron store too
16:24 - so I'll make a
16:27 - another
16:30 - typescript file called electron store
16:32 - and again this is going to be how our
16:35 - data is stored using that electron store
16:37 - basically how our data stored on the
16:39 - hard drive
16:40 - and remember that we are going to key
16:43 - everything under these constants right
16:45 - here so um well I first need to import
16:48 - those so speed test manager
16:50 - and speed tester runs
16:54 - from apps speed test
17:01 - constants and what we well it can
17:04 - actually just import the data as well so
17:16 - types all right so the shape
17:22 - of this iron well couldn't call it speed
17:33 - so the shape of our data in the electron
17:35 - store in other words our hard drive
17:38 - first of all our manager data is going
17:40 - to be under the key speed test manager
17:43 - and what is going to be the shape of
17:44 - this data just manager
17:48 - again just this right here
17:50 - and then we also are going to be storing
17:53 - our runs
17:56 - in other words
17:58 - these right here
18:01 - and that is going to be stored under the
18:04 - key speed tester runs and what's the
18:06 - shape of that data it's just the
18:08 - dictionary of runs
18:10 - so basically a dictionary of these
18:14 - all right and by the way this is going
18:16 - to be the exact same as how we store it
18:18 - in Redux just using dot notation instead
18:21 - of these keys right here but now with
18:23 - that so let me actually go ahead and
18:25 - import
18:26 - that as well
18:33 - okay so again everything cleaned up into
18:37 - this one file
18:40 - and there you go so all of our types are
18:42 - unified under types index.ts we can now
18:45 - get started with our Redux store
18:48 - so first thing I'm going to do is create
18:50 - a new directory called store and also
18:52 - I'm going to move this constants file
18:54 - under store I created it in the wrong
18:56 - location
18:57 - and all right so
19:01 - store constants there we go okay
19:05 - now
19:06 - all right so how are we going to set up
19:08 - our Redux store well what we could do is
19:11 - we could just create one gigantic file
19:14 - to manage all of our state logic however
19:16 - if we do that it's going to be a real
19:18 - pain to keep all of our different data
19:21 - organized so instead what we're going to
19:23 - be doing is we're going to be creating
19:25 - one file for each slice and we can think
19:28 - of a slice just as a chunk of data and
19:31 - to make things a little bit more clear
19:33 - I'll show you how we did it in the chat
19:34 - app
19:35 - so in the chat app we have a couple
19:38 - different objects that we stored data
19:40 - under contacts the delivery status the
19:43 - manager messages each of these things
19:45 - right here are their own slice so the
19:50 - slice is pretty much the object that's
19:51 - directly nested under the main app ID
19:55 - so that's what we're going to be doing
19:56 - we'll eventually have two slices one for
19:59 - the manager and then one for the runs so
20:02 - let's go ahead and pop open our editor
20:04 - and we can just create those two files
20:06 - right now so typescript file called
20:09 - manager and then another one called runs
20:16 - and let's start with the manager
20:19 - so this manager slice right here is
20:22 - again going to maintain the data for
20:24 - what is the currently selected Network
20:26 - and what is the currently selected
20:27 - account so in this manager file let's go
20:30 - ahead and get started so the first thing
20:33 - that we need to do is import some stuff
20:35 - from Redux toolkit
20:38 - actually let me do this from
20:41 - redux.js toolkit the first thing is a
20:44 - function called create slice which is
20:46 - well you'll see in just a bit exactly
20:48 - what it is but a helper function that
20:50 - allows us to create this slice of data
20:52 - or a chunk of Redux data and then we'll
20:56 - use something called current and payload
20:58 - action
21:00 - now another thing that we need to import
21:03 - is from our constants
21:05 - this speed test manager
21:07 - so import speed test manager from apps
21:16 - and then we need to we're going to be
21:19 - needing to give it the type
21:21 - of data that we're going to store so
21:23 - reference that manager and that is
21:34 - our manager for SP test types and then
21:37 - some other things which
21:39 - we're going to be getting into these in
21:42 - a little bit but
21:47 - um another thing that we're going to
21:48 - need is IPC Channel and
21:52 - for this I'll talk more about IPC
21:55 - whenever we get into kind of
21:57 - um after the app development tutorials
21:59 - once we like look at the internals of
22:01 - tmbos see how it works
22:04 - um for now just know that IPC is needed
22:07 - whenever we use that electron store
22:09 - because our electron app basically needs
22:13 - to use node to communicate with our
22:15 - operating system and store data on it
22:17 - again not really relevant it's kind of
22:20 - relevant now but uh it's a little
22:22 - getting too deep in the woods for this
22:24 - app development tutorial so I'll save
22:26 - this for a little bit later
22:28 - now aside from that one other thing that
22:30 - we're going to need is another util
22:32 - related to that IPC so system utils
22:37 - dot IPC
22:38 - and that is set local and state reducer
22:42 - and we'll see what that does in just a
22:43 - bit
22:44 - now what we're going to be doing to set
22:47 - up the slice is we're going to be
22:48 - creating a manager variable and this is
22:51 - going to be equal to
22:53 - this crate slice object or this create
22:56 - slice function right here so this crate
22:59 - slice function which is a helper
23:01 - function that redox toolkit gives us
23:03 - it's going to require three main pieces
23:06 - of information it's going to require a
23:08 - name which is really just a unique name
23:10 - for our slice and it's it's not super
23:14 - important however I'll show you how it's
23:16 - used if you look at your Redux log right
23:20 - here
23:21 - you can see that whenever Redux is going
23:25 - to Auto generate some of these action
23:26 - type names in the background it's going
23:28 - to use whatever name we give it as a
23:30 - prefix so for example the chat manager
23:34 - all of these action types are prefixed
23:36 - with this name so again just know that
23:39 - you have to throw in a unique name in
23:41 - here in Redux toolkit it's going to do
23:42 - some stuff in the background but it's
23:44 - like we don't have to like reference it
23:45 - or really care about it at all anymore
23:49 - um another thing is the initial State
23:50 - and let me just go ahead and probably
23:52 - type these out it's probably going to be
23:54 - easier
23:55 - so the initial state for this manager is
24:04 - is first of all what type is it going to
24:06 - be and this is going to be of type
24:08 - manager and if we look at that type
24:11 - right now let me clean some of these up
24:16 - so if we look at the manager type what
24:18 - info does it require well it requires an
24:21 - active account number
24:26 - and a valid value for active account
24:29 - number is either a string which is going
24:31 - to be the actual account number on or
24:33 - null and since this is the initial State
24:36 - and we don't have an account number yet
24:38 - we're just going to set that equal to
24:40 - null and same thing with Active network
24:42 - ID
24:43 - so when this app is first initialized of
24:45 - course we don't have any data we're just
24:47 - going to initialize both of those values
24:48 - to null and then in our app it'll say
24:51 - something like select a network or
24:52 - select an account
24:55 - all right so now that we have the
24:58 - initial State created we can just pass
25:00 - it into this create slice and now the
25:03 - next argument that it takes is a name
25:06 - and again this is just a unique name and
25:08 - for this I'm just going to use this
25:10 - constant right here so name
25:13 - we can just say speed test manager and
25:16 - now the last thing that we need to make
25:19 - are reducers now in this reducers object
25:22 - we are going to be writing quite a few
25:25 - and these are just object where the keys
25:27 - are strings and the values of these are
25:30 - functions that we can call to update our
25:33 - state
25:34 - so behind the scenes what's actually
25:37 - going to happen and you'll see it's it's
25:39 - kind of unique but it's kind of cool at
25:40 - the same time if you have the scenes
25:42 - your Redux toolkit is basically going to
25:44 - merge these keys and functions together
25:46 - to generate action Creator functions and
25:49 - those functions are going to be what we
25:51 - can use in our component to basically
25:54 - whenever we select the network or
25:55 - account we're going to dispatch these
25:57 - generated functions and it's basically
26:00 - just uh well updates Redux for us
26:03 - so the first thing that we'll write is
26:06 - the functionality to set the active
26:08 - account number and I'll name this very
26:10 - creatively set active
26:13 - account number
26:14 - and again that's what you have for the
26:17 - key now for the value it's going to be
26:20 - an anonymous function
26:26 - and for this function the first
26:27 - parameter that it takes is the state
26:29 - itself and what state are you operating
26:32 - on well it's the state of type manager
26:35 - basically saying that this is going to
26:37 - be the state so this is the first
26:39 - parameter in pretty much all these
26:41 - functions that we're going to write and
26:42 - the second one is a payload action
26:46 - uh bring that out soon okay let's do
26:50 - this so This payload action if we take a
26:54 - look at it
26:55 - you okay so it has a payload and a type
26:59 - however we really don't care about this
27:01 - type of L uh we don't use it for
27:02 - anything so what we're going to do is
27:04 - just destructure the payload in the
27:07 - payload is what you can think of is the
27:09 - the value that you pass in whenever you
27:12 - are trying to set this Redux data and
27:14 - for this payload since we're setting the
27:15 - active account number we just need to
27:17 - pass in an account number so payload is
27:20 - equal to account number however I just
27:22 - want to kind of rename it right here
27:25 - so it's a little bit easier more or
27:28 - easier to read and the type of data for
27:31 - this account number is it can either be
27:34 - a string or null
27:36 - so the way that I actually want to write
27:38 - this is that we'll click this and then a
27:41 - list of accounts will pop up and then we
27:43 - can just select one however once we have
27:45 - an account number selected if we click
27:48 - that again then it's going to be
27:49 - deselected so that's why I want to be
27:51 - able to pass in null right here
27:53 - basically if you ever like want to reset
27:55 - your active account or just like wipe it
27:57 - out you can just pass in no and it's
27:59 - going to do that
28:01 - all right so now we pretty much have a
28:03 - function that's going to get created
28:05 - where we're able to pass in an account
28:07 - number either a string or no now how do
28:10 - we update Redux well this is actually
28:13 - pretty easy because what we're going to
28:14 - do is for the state which is pretty much
28:18 - just this slice of data right here we
28:21 - are going to take the active account
28:23 - number property and we're going to set
28:25 - it equal to that account number that we
28:27 - just passed in
28:28 - and uh I know if anyone's familiar with
28:31 - Redux you're probably uh might be
28:33 - pulling your hair out right now because
28:35 - right here we just had a what looks like
28:38 - a big No-No and we're mutating State
28:40 - directly however the reason that we are
28:43 - able to do this and this is a very cool
28:45 - thing about not only Redux toolkit but
28:47 - create slice
28:49 - crate slice right here in the background
28:51 - it's using a library called immer now
28:54 - how this works is that immer is going to
28:57 - keep track of the changes that we make
28:59 - to this state variable right here and
29:02 - this state is pretty much like a copy of
29:06 - the real internal state so once we're
29:08 - done making changes to the state what
29:11 - Imma is going to do and again this takes
29:12 - place all in the background is it pretty
29:15 - much Compares our new placeholder state
29:18 - to the real internal State and then it
29:20 - generates all this proper immutable data
29:23 - for us and the end result is it allows
29:26 - us to write much cleaner code without
29:28 - having to worry about the internals of
29:30 - Redux or creating all these all this
29:33 - immutable data on our own so pretty cool
29:36 - and then the last line of code that I
29:39 - want to write is this let me type it out
29:42 - so window
29:45 - again I'm going to be getting into this
29:47 - in more detail a little bit later on
29:49 - probably in another series but for right
29:51 - now
29:52 - um actually let me type out this entire
29:54 - thing and then okay I'll cut through it
29:55 - says step set store value it's going to
29:58 - be equal to an object where the key
30:03 - to
30:04 - space manager
30:06 - and the state
30:10 - current state
30:16 - so again like I said I'm gonna be
30:17 - getting into the details of how this IPC
30:20 - communication Works a little bit later
30:21 - but for right now just to give you a
30:24 - high level overview what we're going to
30:25 - do is since we need to communicate with
30:28 - node or in other words that electron
30:30 - store to store data on our hard drive
30:32 - then we're going to be sending
30:35 - some information over what's called an
30:37 - IPC Channel basically means like
30:39 - communicate with the node portion of tnb
30:41 - OS
30:42 - and the first param is just saying that
30:44 - hey we're about to set a store value or
30:46 - set some data on a hard drive
30:48 - and we are going to be setting this
30:51 - value
30:52 - which is just the current or the updated
30:54 - version of our state and store this data
30:58 - under the key speed test manager so
31:01 - whenever we shut down tnb OS and pop it
31:04 - back open again what's going to happen
31:06 - is part of that initialization or boot
31:08 - process is it's going to look in our
31:10 - electron store for any data that's
31:13 - currently stored there and instead of
31:15 - populating this manager slice with this
31:18 - initial data right here it's going to
31:19 - say hey I already found something in
31:21 - there
31:22 - from before and that's what we're going
31:24 - to use to initialize this app and we'll
31:26 - be getting into that logic in just a bit
31:28 - but yeah there you go
31:31 - now aside from this we also need to
31:35 - create one more reducer and that is for
31:37 - setting the Active network ID and it's
31:39 - going to be super similar so I'll just
31:41 - say set active
31:44 - network ID for the key again the state
31:48 - we're operating on is just the same
31:49 - state and the payload for this we'll
31:52 - just call it network ID
31:55 - and again it's going to be the same type
31:58 - is valid data that we're going to be
32:00 - passing in either a string which is the
32:02 - network ID itself or null and then
32:05 - instead of updating the active account
32:07 - number we want to update the Active
32:09 - network ID and set it equal to whatever
32:11 - the payload was that we rename network
32:13 - ID that we passed in and then this line
32:16 - of code is the same as well because
32:18 - again this state that we want to update
32:21 - in the slice is just equal to this
32:23 - object right here so now we got our
32:25 - functionality to update the active
32:27 - account number or Active network ID and
32:30 - it looks like that might be all however
32:32 - there is one other
32:36 - thing that I want to create and this is
32:37 - just a utility function that I have in
32:39 - basically all my create slice functions
32:42 - and this is just set manager so you know
32:45 - how this function right here is going to
32:47 - be setting this and this one is setting
32:49 - this well the function that I'm about to
32:52 - write in like five seconds is gonna be a
32:54 - function that enables us to set both at
32:56 - the same time now if you're thinking
32:59 - well when do we really need that because
33:01 - one of these is going to set the account
33:03 - number one of them is going to set the
33:04 - network why would we ever need to set
33:06 - both at the same time well the only time
33:08 - we need this is for that boot process
33:11 - because what that boot process is going
33:14 - to do is it's going to look under this
33:15 - key and it's going to find both of these
33:18 - that's stored on our hard drive that way
33:20 - and then it's just gonna
33:22 - pretty much save us some time instead of
33:24 - like having to call each of these
33:25 - individually I'm just going to say that
33:27 - this is a function to set this entire
33:29 - slice at once
33:31 - now for this I'm just going to pass in
33:34 - manager is the shape and now the only
33:38 - other paramet takes is this key right
33:41 - here because that's where it's going to
33:43 - look in our electron store to try to
33:45 - find this data
33:46 - and all right uh that's all we actually
33:49 - need to write for create slice and now
33:52 - we're just going to export some things
33:53 - and
33:56 - all right so we want to export all of
33:59 - these and I'll show you something a
34:01 - little bit tricky in just a second
34:04 - so what we want to do is we want to
34:06 - export set active account numbers set
34:08 - Active network ID and set manager
34:10 - however what we're going to do is
34:12 - instead of exporting them from manager
34:15 - dot reducers which it looks like you
34:17 - should do we're actually going to import
34:19 - them from manager dot actions now okay a
34:24 - key called initial state name reducers
34:25 - where the heck is manager dot actions so
34:29 - this is part of the Hidden magic of
34:30 - Redux toolkit and specifically create
34:32 - slice because like I said behind the
34:35 - scenes what's going to happen after we
34:36 - call this function is Redux toolkit is
34:39 - going to create these action creators by
34:42 - merging this key with this function and
34:47 - what it's going to allow us to do is
34:49 - basically something like this in our
34:52 - component let me just comment this out
34:54 - so uh you know this is an actual code
34:56 - just demoing something in our component
34:59 - what we're going to do is we're going to
35:00 - dispatch
35:02 - something like this set active account
35:04 - number and we're going to be passing in
35:10 - one two three so we're going to end up
35:13 - with these action Creator functions that
35:15 - are kind of like self-generated by this
35:17 - uh create slice function
35:21 - all right and last but not least I want
35:25 - to export this reducer so export
35:30 - default manager dot reducer so this will
35:34 - be our default default export and yeah
35:38 - everything looks uh good to go so now
35:40 - that we got it taken care of our manager
35:42 - slice we can hop over and create that
35:44 - run slice so we already have that file
35:47 - created for us and since we're
35:51 - going to be using a very similar
35:52 - structure let me just import this
35:55 - and let's see so instead of speed test
35:57 - manager it is speed tester runs and we
36:01 - don't need this manager type anymore
36:03 - instead we are going to need this run
36:05 - type and runs
36:08 - all right everything out should be the
36:10 - same and okay so for the initial run
36:13 - States
36:15 - actually I'm gonna do exports
36:17 - const initial State again the shape of
36:21 - this is just going to be a dictionary of
36:23 - runs
36:24 - so runs and we'll just keep that equal
36:27 - to an empty dictionary at first
36:31 - and then after this let me just go ahead
36:34 - and uh
36:37 - actually let me save some time in a copy
36:40 - all of this
36:41 - Okay so
36:45 - instead of manager this slice is going
36:47 - to be called runs the initial state is
36:50 - equal to this initial state which is the
36:51 - empty date and the name of this is going
36:54 - to be speed test runs
36:57 - so I can delete the speed test manager
37:02 - and alright so instead of set manager
37:04 - we're going to call this set runs
37:07 - again the naming convention I follow is
37:09 - just set and then uh whatever the slice
37:12 - is named so set runs camel case same
37:15 - thing here set manager because it was
37:18 - named manager and again that is to set
37:20 - the entire slice all at once it's kind
37:22 - of the pattern I've been following okay
37:25 - initial test speed test runs and now
37:27 - let's go ahead and
37:31 - just copy these because I want to create
37:34 - one action Creator function and that is
37:37 - to set an individual run
37:40 - so of course the state for this is going
37:43 - to be equal to runs
37:45 - and for payload uh whenever we pass in
37:49 - the payload it's going to be equal to
37:53 - one of these individual runs
37:57 - so the payload action
38:00 - just copy that
38:02 - what we're going to be passing in is a
38:04 - run so we can rename this to run but uh
38:07 - the reason I don't want to do it here
38:09 - you're going to see in just a bit
38:11 - okay so whenever we pass in a run what
38:15 - do we want to do well the first thing I
38:17 - want to do is I want to pluck off this
38:19 - run ID
38:21 - so I'm going to destructure this
38:22 - plucking off the Run ID
38:25 - from payload now the reason that I want
38:27 - to pluck that off is because what I want
38:30 - to do is I want to see if this run
38:31 - already exists in our Redux store
38:34 - so I'm going to create a variable called
38:36 - run and it's going to be equal to state
38:42 - run ID
38:43 - so again the state refers to
38:46 - um this dict or this slice right here
38:49 - and whenever we are setting a run for
38:53 - the very first time then there's not
38:55 - going to be any object matching this in
38:58 - our state however once we have set it
39:01 - and then we're just setting it again to
39:03 - update it then it's going to find it so
39:05 - this run right here is either going to
39:07 - be equal to a run or it's going to be
39:10 - undefined so why do I care about that
39:12 - well from this line of code right here
39:15 - whenever we are setting this we need to
39:19 - find out if the Run already exists or
39:21 - not
39:21 - because if the Run already exists then
39:24 - what we can do is take that previous run
39:27 - or existing data and just update it with
39:30 - any of our new data that we pass in
39:32 - which is going to be from the payload
39:34 - otherwise if the Run does not exist in
39:37 - our store yet then just go ahead and set
39:40 - this chunk of state to our payload
39:44 - just like this
39:46 - and I'm getting an error here
39:48 - runs
39:52 - all right that was because uh this runs
39:55 - which is basically saying that we're
39:57 - going to be storing addictive runs I
40:00 - accidentally had runs in here rather
40:01 - than run right here so there we go
40:04 - okay so this set run is a function that
40:08 - we're going to use both to create a run
40:10 - for the very first time and then also
40:12 - update any existing runs and then what
40:15 - error am I getting here
40:17 - manager because the type of this is not
40:20 - manager it is runs
40:23 - all right
40:26 - all right so initial State let me just
40:29 - review this real quick this is a name
40:30 - reducer
40:32 - looking good and now
40:35 - what I want to do is just export
40:38 - everything
40:39 - so export set run which allows to set an
40:43 - individual run and then set runs which
40:46 - we're going to use on on boot to set
40:48 - this entire slice at once pretty much
40:50 - reading in any previous runs from our
40:52 - hard drive and just setting it
40:54 - and then by default I want to have this
40:57 - runs.reducer
40:59 - is just the default export so now that
41:01 - we have our two main slices created both
41:04 - the manager slice and the Run slice what
41:07 - we're going to do is create a new file
41:09 - and kind of combine those together
41:13 - so again this file is store slash
41:15 - index.ts and to combine slices
41:20 - we are going to import something from
41:22 - Redux toolkit
41:25 - and a combine reducers
41:29 - all right so then we can just import
41:32 - uh we'll call it manager reducer
41:43 - so we're importing the default export
41:46 - which is basically just this manager
41:48 - reducer and then we're going to do the
41:50 - same thing for that runs reducer
41:53 - so from runs
41:55 - import it as runs reducer and now how do
41:58 - we combine these well we can go ahead
42:01 - and create a variable we'll just call it
42:02 - speed test
42:04 - get out of here what am I doing speed
42:06 - test reducer and this is going to be
42:09 - equal to
42:11 - the return value of combiner reducers
42:13 - which is going to take
42:16 - a key value pair with the key being
42:19 - basically what you just want to name
42:21 - that chunk of data and the manager
42:24 - reducer as a value
42:26 - so it runs
42:29 - runs reducer and then we'll just export
42:32 - this entire thing
42:34 - for default speed test reducer
42:38 - all right and that is really all we need
42:40 - to do to set up the Redux portion of our
42:43 - state management for this app however to
42:46 - make tnb OS aware of this we need to go
42:48 - ahead and add it to our app registration
42:51 - file
42:53 - so in here let's see
42:58 - copy this name
42:59 - and that is apps
43:01 - store
43:05 - so import speed test reducer from apps
43:08 - speed test store
43:10 - now as part of our app registration
43:13 - there is another key called reducer and
43:15 - you set this equal to the root reducer
43:17 - for the app and in this case it is speed
43:19 - test reducer and now that we have it in
43:23 - our registration we can go into Apps
43:25 - registry and pretty much just let our
43:28 - app registry know that we now have a
43:30 - reducer so since we already have our
43:32 - registration imported all we need to do
43:34 - is say that we have a new app producer
43:36 - or a new um some more app data that we
43:38 - want to store
43:40 - and we'll Kia under speed test and we
43:43 - just need to give it the reducer
43:45 - and then we're gonna have an exclamation
43:47 - after this and the reason that we need
43:49 - this is because in this app registration
43:51 - type
43:53 - we have this reducer reducer as an
43:56 - optional key value pair and the reason
43:59 - for that is because not all apps need to
44:02 - have a reducer not all apps need to
44:04 - store data in Redux so it is optional
44:06 - however in this case we're saying yes
44:09 - there is definitely a reducer for this
44:12 - speed test registration the reducer that
44:14 - we just created so you know you don't
44:16 - have to guess it's definitely there
44:18 - that's why we do it so now with all of
44:21 - that as long as I didn't miss anything
44:22 - we should have our Redux store structure
44:25 - all set up and ready to go
44:28 - this I think
44:31 - should be good
44:36 - all right so let me minimize this
44:40 - the moment of truth
44:42 - did it appear in our Redux store
44:47 - Redux and check it out all right so now
44:50 - in addition to system in chat we now
44:53 - have this cool speed test slice and of
44:56 - course we have our manager which was
44:57 - initialized with this data
45:03 - right here and then our runs which was
45:07 - just initialized as an empty decked for
45:09 - now and there you go so this is how we
45:12 - set up our Redux structure however the
45:15 - one other thing that we have to do now
45:17 - is we need to say that whenever we have
45:20 - data in here which we don't at the time
45:22 - but whenever tmbos boots up for the very
45:25 - first time we need to tell it how to
45:27 - load that data from our hard drive into
45:31 - this Redux store so let me actually
45:33 - close this
45:35 - and we'll do that right now now for this
45:38 - function under speed test store I'm
45:41 - going to create a new typescript file
45:44 - called initializer and again this is
45:47 - just going to have one function in it
45:48 - and its job is to initialize our Redux
45:52 - store whenever we first boot up tnb OS
45:56 - so let me go ahead and import everything
45:58 - first that we're going to need so from
46:02 - see if I can steal this from anywhere
46:05 - so we're first going to need those
46:07 - constants because remember those
46:08 - constants tell us which key in the
46:11 - electron store or on our hard drive all
46:14 - this data is so speed test manager and
46:16 - speed test runs
46:18 - and now after this
46:22 - we're going to be importing from this we
46:25 - need to import first of all
46:28 - um the initial State because if the
46:31 - logic is basically going to work like
46:33 - this it's going to say first whenever
46:35 - you're booting up check on the hard
46:37 - drive and see if we have any data in
46:39 - there that we can initialize the store
46:40 - with if not then we're just going to
46:43 - initialize it to whatever the initial
46:44 - state is right here
46:46 - so we need to import both this initial
46:48 - State variable and also this is the
46:50 - function that we're going to use to
46:51 - actually set this data
46:53 - so in the initializer we're going to
46:55 - import initial State and we'll just
46:57 - import it as
47:00 - manager initial States
47:02 - and the reason that I want to rename it
47:04 - is because we're also going to be
47:05 - importing initial state
47:08 - from another file as well when we don't
47:10 - want to have like initial State One
47:12 - initial state two so we're going to
47:14 - import the initial State rename it to
47:16 - manager initial State and then also this
47:18 - set manager action creator
47:21 - and we're going to import that
47:23 - from
47:26 - apps.speedtests.store manager
47:30 - just copy this and do the same for runs
47:32 - so import from runs
47:36 - say it runs initial state
47:41 - so our runs initial state is going to be
47:42 - this which it's going to be the fallback
47:45 - if it can't find any runs data currently
47:47 - in there and then to set those runs in
47:49 - Redux we use set runs just like that
47:54 - now another thing that we're going to
47:56 - need is just some type and that is from
48:01 - shared types
48:03 - and that is going to be the local
48:05 - electron store and this is just the
48:07 - shape of our data on our hard drive and
48:10 - then one other thing from system types
48:15 - and that is app dispatch
48:17 - so that dispatch function that we call
48:20 - to basically set data into Redux it's
48:23 - going to be of this type and I just want
48:25 - to make sure everything is typed out
48:26 - properly
48:27 - all right so with all this being said
48:29 - what we can do is we can create a
48:31 - function that's going to be called is
48:33 - pretty much the initialization function
48:34 - for this app and I'll just call it load
48:37 - speed test
48:39 - data and this is first gonna take a
48:49 - the dispatch
48:51 - spell that correctly all right so
48:52 - dispatch of type app dispatch in the
48:55 - store
48:58 - local electron store
49:00 - and this function is going to return
49:01 - void again we don't need to return
49:04 - everything because all it's doing is
49:06 - taking data from our hard drive and
49:07 - setting it in our Redux
49:11 - all right and now let me just export
49:13 - this by default and then we'll get into
49:15 - writing export default all right so the
49:19 - logic for this is actually going to be
49:21 - pretty simple I'll say all right let me
49:24 - make a variable called store manager and
49:27 - again what we need to do first is we
49:29 - need to figure out is there any data on
49:31 - the hard drive or in other words the
49:33 - local electron store already if so then
49:37 - we'll use that to set is the data if not
49:39 - then we'll just use that initial State
49:41 - as default so in order to do that we're
49:43 - going to do store and we'll add this
49:46 - question mark because the very first
49:48 - time that tnbos gets initialized not
49:51 - just this app but like the entire system
49:53 - we have the store optional while
49:55 - everything's being initialized but
49:57 - anyways just to make typescript happy we
50:00 - need to add that question mark right
50:01 - after so from this store which like I
50:05 - said is basically our hard drive we're
50:07 - going to look for data under the key
50:09 - speed test manager and that's going to
50:11 - be any existing data that was there from
50:13 - the previous time whenever we have our
50:16 - Network interactive account selected now
50:20 - if you are initializing this app for the
50:23 - very first time then you're not going to
50:25 - have this data stored yet so instead as
50:28 - a fallback we'll just use that manager
50:30 - initial state which is this this right
50:33 - here with these two keys initialized to
50:35 - null
50:36 - all right so we're either going to have
50:38 - data from the hard drive or the initial
50:41 - State and now once we have that to
50:43 - actually set this we're going to call
50:45 - dispatch
50:46 - set manager
50:50 - set manager and we're just going to pass
50:53 - in whatever this data is right here
50:56 - so again the set manager action Creator
50:59 - was just to set this entire state right
51:02 - here
51:04 - and now actually what error am I getting
51:07 - ah yes so back in our registry in the
51:11 - area that this is throwing us is saying
51:13 - that hey you told me to look in local
51:15 - electron store for a key called speed
51:18 - test manager however if I go to local
51:20 - electron store right here then we
51:24 - basically just need to update this type
51:27 - right here because right now we're
51:29 - saying that our app data it's only equal
51:31 - to
51:33 - chat electron story and what we want to
51:36 - do is we want to make sure that this is
51:37 - equal to both chat electron store and
51:40 - the speed test electron store that we
51:43 - just created
51:44 - so from speed tests we actually have it
51:48 - from registration right here oh we don't
51:50 - even have it yet but anyways what we are
51:52 - looking for is this right here speed
51:55 - test electron store
51:57 - and then we'll just import it right into
51:59 - our registration so we'll say import
52:02 - speed test electron Store for apps
52:05 - test types
52:08 - and then we can just export it right
52:10 - here so speed test electron store
52:15 - all right so we want to have our
52:16 - registration kind of the central point
52:18 - for everything
52:19 - and now
52:21 - we can import that in the app registry
52:25 - and all right and I also want to change
52:27 - this from a type to an interface since
52:30 - we're basically combining a couple
52:31 - different things now so let me
52:34 - actually comment that out and we'll say
52:36 - instead of this app electron store is a
52:39 - type we're going to export it as an
52:41 - interface called app electron store and
52:44 - this is just going to extend both this
52:46 - chat electron store and also this speech
52:49 - speed test electron store and we don't
52:54 - need to put anything in the body of the
52:56 - interface basically just saying that
52:57 - this electron app electron store all
53:00 - right it's a lot of electron Source I'm
53:03 - trying to say kind of a tongue twister
53:04 - but anyways this app electron store type
53:07 - or interface is a combination of chat
53:09 - electron store and speed test electron
53:10 - store easy peasy so now when we pop back
53:13 - in our initializer this local electron
53:15 - store should be good to go and just like
53:17 - we checked if there's any manager data
53:20 - on our hard drive and then dispatched it
53:22 - to Redux during the initialation process
53:24 - we're going to do the exact same thing
53:26 - for runs data
53:28 - so this is speed tester runs
53:31 - so we'll say store
53:33 - runs is equal to any runs data from a
53:36 - hard drive if you can't find any then
53:38 - just use that runs initial state which
53:41 - is just going to be an empty dict
53:43 - and then once you have one of those then
53:46 - just go ahead and set it in Redux
53:51 - so now that we got our initialization
53:53 - function written what we need to do is
53:56 - the very last step is just add it to our
53:58 - registration
53:59 - so we're the store initialization
54:05 - import load speed test store data from
54:09 - same location
54:14 - initializer and then the function that
54:17 - we just imported right here the key for
54:20 - this is
54:23 - initializer
54:25 - and there we go so we don't need to
54:28 - actually explicitly call this anywhere
54:30 - like from our registry or anything
54:32 - because another part of the internal
54:35 - tnbos boot process is it's going to look
54:38 - for all of these registrations and right
54:42 - after the system data is loaded it's
54:44 - going to go through each of these one by
54:45 - one and it's going to check is there an
54:48 - initializer function that exists if
54:50 - there is one that exists then I'm just
54:52 - going to go ahead and call it so again
54:54 - that's why it you know we don't need to
54:57 - like explicitly call it or anything it's
54:58 - just part of the internal interworkings
55:01 - I guess you could say
55:03 - so with this being said let me just go
55:07 - ahead and restart this app and see if
55:10 - anything broke
55:15 - all right it is looking all right but
55:18 - just to kind of verify that let me do
55:22 - this
55:24 - I'll verify that everything is being
55:25 - initialized correctly
55:28 - by doing this so for dispatch
55:33 - so what I'll do even though we never
55:35 - actually want to do this but uh just for
55:37 - testing things out I'm going to set some
55:38 - manager data
55:46 - so I'll just set active account number
55:48 - to like bacon and then the Active
55:51 - network ID the tuna
55:55 - let me pretty up this
55:57 - all right so on a boot if everything's
56:00 - working correctly then it's just going
56:02 - to set like this dummy data for a
56:04 - manager
56:08 - so let's see if it's set that first of
56:11 - all
56:12 - all right speed test manager okay looks
56:16 - like our dummy data was in there so now
56:18 - what I'm gonna do is close this
56:21 - and I'm actually going to be deleting
56:23 - this because right now that data not
56:27 - only should it be set in Redux which we
56:29 - just confirmed but it should also be set
56:31 - on our hard drive now the reason that I
56:35 - wanted to have that is because whenever
56:37 - I boot this up again then instead of
56:39 - pulling this manager initial state it
56:42 - should have found that data on the hard
56:43 - drive even though we just removed that
56:45 - dispatch function and uh as long as we
56:48 - see some bacon and tuna
56:51 - then everything should be working
56:53 - correctly
56:56 - Redux
56:58 - speed test manager bacon and tuna all
57:02 - right so this means that it is correctly
57:04 - loading in that data from our hard drive
57:06 - everything is persisting properly and by
57:10 - the way this
57:12 - uh right here this is basically how
57:14 - we're going to be using or setting this
57:16 - Redux data from our components so yeah I
57:19 - think that's good for this video and in
57:21 - the next one what we'll do is we'll go
57:23 - through and start hooking up all these
57:25 - components to Redux
57:26 - should be pretty sweet so uh yeah see
57:29 - you then

Cleaned transcript:

already y'all welcome back and now that we have our basic UI put together as the next step I want to go ahead and start setting up Redux however before we set up any Redux State Management tools to manage just app data what I want to do is kind of take a step back and I'll show you how all the data is organized in Redux for tnb OS so let me go ahead and open my Dev tools and I'll pop open this Redux Tab and I'll show you what we have so far and you'll probably get a a pretty good idea of how we're going to structure this so right now at the very top level our store contains two objects one is nested under system and one is nested under chat so we'll start with system right here since this system data if we expand it you'll see that all of the like tnb OS internal system data and this includes things like your accounts and your networks and also like the currently um like the active app which means the app that's currently displaying on the screen all of what you would probably imagine like the internal system data this is all going to be stored under system now for each application that we build the app also needs to maintain its own data for example this chat it needs to know well I only have one account in here right now but what is the currently active account it needs to store your messages it needs to store um like the delivery status if the message was delivered so all of this is going to be nested under an app ID in the app ID for chat is chat so if you just expand this you can see well we don't have any messages but for example the manager right here is going to keep track of the currently active chat so on and so forth so anyways we don't need to dig into this chat store too much but what I'm basically just saying is that the structure at a very high level it's going to have system and then each app is going to maintain its own data under a key which is going to be the same as its app ID So eventually we're going to have system chat and speed test and that's what we're going to be doing in this video setting up our speed test data now in addition to Redux we're also going to be using a tool called electron store and this is going to allow us to persist our app data to our hard drive and that way whenever we shut down tnb Os or just shut down our computer and open it again all of our data is going to be there we're not going to have to reselect the network and account again and all of our historical data is going to be nice and saved from last time so pretty cool and on that note I didn't want to mention one detail as well so you see how in Redux I'll use the chat app as an example you see how in Redux what we have is at a top level all this data is stored under the app ID so for example if we want to access our chat messages we would type something like chat dot messages to access these well whenever we store this data in the electron store that structure is going to be flattened out a little bit and by that I mean let me pop this open so again instead of chat dot messages we're just going to flatten it out and store it under a key called chat messages so kind of the camel case version of that dot separator notation however the reason that we do this is just because whenever we work with electron store it just makes some things easier so that's why we're doing it just to give you some background context and with that said the plan is to yeah just go ahead and get started setting up our Redux store and once we have that structure set up then we're going to go back through each of these components one by one and pretty much just start hooking them up making them work everything from the top down so before we can start actually creating our store what I want to do first is go ahead and create some new data types because we wanted to find the shape of data that's going to be stored in our Redux store so under speed test I'm going to create a new directory I'm going to call it types and the first type that I want to create is going be in a file called manager.ts and for this I'm going to create an interface and this is just going to be called manager and what I'm going to do in this manager little chunk of data right here this manager object is it's going to store the currently selected Network and the currently selected account so I thought manager was a decent name for that and I also am following the same pattern as chat in the chat manager we store things like the currently selected chat app right there so anyways there's some background info so again under manager we're going to do active account number and this is going to be equal to a string or a null because when the app is first initialized it's going to be null and then we'll never like click that pencil icon and select one then we're going to store that account number as a string Under This and we're going to do the same thing for Active network so Active network ID again we don't want to store the network object because I'll show you this the source of Truth for the network object is going to be stored on our system you can see under the New Boston Network this is the ID but we also still store other information like the display name the display image the protocol so on and so forth now if we were just to store this entire network object in um let me pop this open right here then we're almost gonna have like two sources of the truth so instead we just want to store the unique identifier and anytime we need to pull that logo or display name or anything like that then we're just going to reference the system data but either way under manager we're going to be storing the active account number at network ID and this is good go so this is good for manager again basically storing the state for these top elements right here now what I also want to do is create a separate type to store these items right here now initially I wanted to call these tests and then I wanted to call them speed test but the reason that I don't want to call them anything with test in the name even though that's kind of intuitively how I think about it is that whenever we are writing our test I was just imagining in my head well it's just like a million naming conflicts and it's probably going to be kind of messy looking so instead I am calling these things a run so again a run is based basically what you create whenever you hit this button it's going to send a request off to another device and then we're going to get a response back and all of that is going to be stored in one of these things called a run so anyways that's the uh background of that name and on that note let me go ahead and create a new type file and I'll just say run.ts and for this export interface run and all right so what info do we need here well the first thing I want to store is the network ID and this is just going to be equal to a string in other words let me pop this open it's going to be equal to this right here now the reason that I want to store this is because whenever I send a request through a specific Network for example let's say that I want to connect to my MacBook over the New Boston Network whenever my MacBook sends back a response I want to ensure that it's sending it back on the same exact Network now if it's like yeah of course it would well remember that we have that fault tolerance logic where if one network goes down the app is able to communicate through another Network however I want to kind of hard code this in because um just some validation later on I don't want to like be testing the New Boston Network and receive a response through another Network and then have my times almost stop so let me just go ahead and store that right there now another key that we're going to need is the recipient and this is just going to be the account number of for example my whatever device I send it to for example my MacBook and then the request date this is actually going to be a date time object and we're always going to have it so that's actually stored as a string and then we are also going to have our spot state so anyways just uh some context between this whenever we send a block to another device we of course have to say what network we're sending it over who is supposed to be receiving it and this request date as soon as we send it we're going to set this request today they're going to respond pretty much like a ping pong cycle and whenever we get a response back then we're going to set the response date so this response date is going to be a string however it's also going to be null sometimes so whenever we first send this request and we haven't received a response yet we're still waiting for it it's going to be equal to null and again like I said as soon as we get one back then we're going to calculate what the time is and set it as a response date and whenever we do response date pretty much the difference between a request State and response date that's going to give us how fast this request response was now another thing that I'm going to add in is just an ID for basically this object now a lot of the times whenever you're forming like entities in a database you call it the ID either like PK or ID or uuid however when I was developing tnb OS it was it got kind of confusing since so many things had ID in the name and I know this is uh not really convention but well I guess this entire operating system quote unquote is it really conventional either but anyways more of the story is I started naming everything The Entity type in then ID and it's just a lot more intuitive whenever we are um like communicating with other devices as you're going to see soon so this run ID is just going to be unique ID it's going to be a uuid so that's going to be stored as a string and aside from this we're actually going to have one more value in here but before we do that I'll go ahead and create an enum called run status so this run status is either going to be equal to pending and it's going to be pending whenever we first send it out but we haven't received the response yet it can also be equal to success and we'll set it equal to success once we get a successful response back of course now another status that I want to make is a timeout status and this is whenever we send this request pop this open again whenever we hit go and send a request if we'll say like more than 10 seconds has passed and we still haven't heard anything back from the other device then we'll just consider this run timed out and we'll set it equal to timeout that way we don't we aren't like waiting for this uh response for an infinite amount of time so on that note let me just do pending equal ending and then success in timeout all right and now for the run we're gonna store it under status and this is equal to our run status so again by default we'll set it equal to pending and then depending on how it goes either successor timeout to kind of finish it off now the way that we're actually going to structure this in Redux is even though we're going to be storing basically a collection of these I don't want to store them as an array because it makes like finding it updating the array and just kind of updating everything a little difficult so we'll follow the same structure as we do let me see what example I can show you um for accounts for example so you see under accounts right here we have this account data including the display name and display image however everything isn't stored in a list It's actually an object keyed by its unique identifier so for example this accounts unique identifier is this account number AAA yada yada so again the reason that we do this is because it's a lot easier just to say the account dot account number I'm going to update whatever info information this is it's um I don't know it's faster too than having to go through an array iterate and try to find everything so for this again we're going to be storing this under a key which is going to be its run ID and to make this a little bit easier we have I'll type this out for system.types generic I'll show you what this dict type is basically saying that um whatever we specify is the type then its key is going to be a string and the type is just going to be whatever object so export type runs is going to be equal to a dict or dictionary of runs now another thing I want to do before we hop into our store is create a new file called constants and you know how I said before that just like our chat app I'll show you chat store constants how whenever we're working with the electron store we pretty much convert that dot notation to this camel case notation just because it makes some things easier that's what we'll do right here so I'll make export const and I'll say speed test manager and this is just going to be the key for this right here and again the camel case is first the chemical case version of the app name and then whatever slice in this case it's manager and then we're going to do the same thing for run right here so speed test runs and this is just equal to speed test runs and again I just want to use constants for these so anytime we have to refer to this key we aren't like prone to typos we can use the constant and it's just a lot less error prone so closing this and closing this another thing that I like to do let me hop back in my speed test store right here or speed test typing is I like to go ahead and create a file called index and I'm pretty much just going to import all of my different types into this one index file and this just makes it easier whenever you're importing these types later on you only have to import from one file rather than kind of having a million Imports at the top of your file so the first thing I'm going to import is this manager so import manager from apps speed test types manager and then we're also going to be importing run was it runs and run status ROM runs and we'll just export everything part manager and all of this and this was actually supposed to be runs all right good to go and while I am at it let me actually go ahead and type out my electron store too so I'll make a another typescript file called electron store and again this is going to be how our data is stored using that electron store basically how our data stored on the hard drive and remember that we are going to key everything under these constants right here so um well I first need to import those so speed test manager and speed tester runs from apps speed test constants and what we well it can actually just import the data as well so types all right so the shape of this iron well couldn't call it speed so the shape of our data in the electron store in other words our hard drive first of all our manager data is going to be under the key speed test manager and what is going to be the shape of this data just manager again just this right here and then we also are going to be storing our runs in other words these right here and that is going to be stored under the key speed tester runs and what's the shape of that data it's just the dictionary of runs so basically a dictionary of these all right and by the way this is going to be the exact same as how we store it in Redux just using dot notation instead of these keys right here but now with that so let me actually go ahead and import that as well okay so again everything cleaned up into this one file and there you go so all of our types are unified under types index.ts we can now get started with our Redux store so first thing I'm going to do is create a new directory called store and also I'm going to move this constants file under store I created it in the wrong location and all right so store constants there we go okay now all right so how are we going to set up our Redux store well what we could do is we could just create one gigantic file to manage all of our state logic however if we do that it's going to be a real pain to keep all of our different data organized so instead what we're going to be doing is we're going to be creating one file for each slice and we can think of a slice just as a chunk of data and to make things a little bit more clear I'll show you how we did it in the chat app so in the chat app we have a couple different objects that we stored data under contacts the delivery status the manager messages each of these things right here are their own slice so the slice is pretty much the object that's directly nested under the main app ID so that's what we're going to be doing we'll eventually have two slices one for the manager and then one for the runs so let's go ahead and pop open our editor and we can just create those two files right now so typescript file called manager and then another one called runs and let's start with the manager so this manager slice right here is again going to maintain the data for what is the currently selected Network and what is the currently selected account so in this manager file let's go ahead and get started so the first thing that we need to do is import some stuff from Redux toolkit actually let me do this from redux.js toolkit the first thing is a function called create slice which is well you'll see in just a bit exactly what it is but a helper function that allows us to create this slice of data or a chunk of Redux data and then we'll use something called current and payload action now another thing that we need to import is from our constants this speed test manager so import speed test manager from apps and then we need to we're going to be needing to give it the type of data that we're going to store so reference that manager and that is our manager for SP test types and then some other things which we're going to be getting into these in a little bit but um another thing that we're going to need is IPC Channel and for this I'll talk more about IPC whenever we get into kind of um after the app development tutorials once we like look at the internals of tmbos see how it works um for now just know that IPC is needed whenever we use that electron store because our electron app basically needs to use node to communicate with our operating system and store data on it again not really relevant it's kind of relevant now but uh it's a little getting too deep in the woods for this app development tutorial so I'll save this for a little bit later now aside from that one other thing that we're going to need is another util related to that IPC so system utils dot IPC and that is set local and state reducer and we'll see what that does in just a bit now what we're going to be doing to set up the slice is we're going to be creating a manager variable and this is going to be equal to this crate slice object or this create slice function right here so this crate slice function which is a helper function that redox toolkit gives us it's going to require three main pieces of information it's going to require a name which is really just a unique name for our slice and it's it's not super important however I'll show you how it's used if you look at your Redux log right here you can see that whenever Redux is going to Auto generate some of these action type names in the background it's going to use whatever name we give it as a prefix so for example the chat manager all of these action types are prefixed with this name so again just know that you have to throw in a unique name in here in Redux toolkit it's going to do some stuff in the background but it's like we don't have to like reference it or really care about it at all anymore um another thing is the initial State and let me just go ahead and probably type these out it's probably going to be easier so the initial state for this manager is is first of all what type is it going to be and this is going to be of type manager and if we look at that type right now let me clean some of these up so if we look at the manager type what info does it require well it requires an active account number and a valid value for active account number is either a string which is going to be the actual account number on or null and since this is the initial State and we don't have an account number yet we're just going to set that equal to null and same thing with Active network ID so when this app is first initialized of course we don't have any data we're just going to initialize both of those values to null and then in our app it'll say something like select a network or select an account all right so now that we have the initial State created we can just pass it into this create slice and now the next argument that it takes is a name and again this is just a unique name and for this I'm just going to use this constant right here so name we can just say speed test manager and now the last thing that we need to make are reducers now in this reducers object we are going to be writing quite a few and these are just object where the keys are strings and the values of these are functions that we can call to update our state so behind the scenes what's actually going to happen and you'll see it's it's kind of unique but it's kind of cool at the same time if you have the scenes your Redux toolkit is basically going to merge these keys and functions together to generate action Creator functions and those functions are going to be what we can use in our component to basically whenever we select the network or account we're going to dispatch these generated functions and it's basically just uh well updates Redux for us so the first thing that we'll write is the functionality to set the active account number and I'll name this very creatively set active account number and again that's what you have for the key now for the value it's going to be an anonymous function and for this function the first parameter that it takes is the state itself and what state are you operating on well it's the state of type manager basically saying that this is going to be the state so this is the first parameter in pretty much all these functions that we're going to write and the second one is a payload action uh bring that out soon okay let's do this so This payload action if we take a look at it you okay so it has a payload and a type however we really don't care about this type of L uh we don't use it for anything so what we're going to do is just destructure the payload in the payload is what you can think of is the the value that you pass in whenever you are trying to set this Redux data and for this payload since we're setting the active account number we just need to pass in an account number so payload is equal to account number however I just want to kind of rename it right here so it's a little bit easier more or easier to read and the type of data for this account number is it can either be a string or null so the way that I actually want to write this is that we'll click this and then a list of accounts will pop up and then we can just select one however once we have an account number selected if we click that again then it's going to be deselected so that's why I want to be able to pass in null right here basically if you ever like want to reset your active account or just like wipe it out you can just pass in no and it's going to do that all right so now we pretty much have a function that's going to get created where we're able to pass in an account number either a string or no now how do we update Redux well this is actually pretty easy because what we're going to do is for the state which is pretty much just this slice of data right here we are going to take the active account number property and we're going to set it equal to that account number that we just passed in and uh I know if anyone's familiar with Redux you're probably uh might be pulling your hair out right now because right here we just had a what looks like a big NoNo and we're mutating State directly however the reason that we are able to do this and this is a very cool thing about not only Redux toolkit but create slice crate slice right here in the background it's using a library called immer now how this works is that immer is going to keep track of the changes that we make to this state variable right here and this state is pretty much like a copy of the real internal state so once we're done making changes to the state what Imma is going to do and again this takes place all in the background is it pretty much Compares our new placeholder state to the real internal State and then it generates all this proper immutable data for us and the end result is it allows us to write much cleaner code without having to worry about the internals of Redux or creating all these all this immutable data on our own so pretty cool and then the last line of code that I want to write is this let me type it out so window again I'm going to be getting into this in more detail a little bit later on probably in another series but for right now um actually let me type out this entire thing and then okay I'll cut through it says step set store value it's going to be equal to an object where the key to space manager and the state current state so again like I said I'm gonna be getting into the details of how this IPC communication Works a little bit later but for right now just to give you a high level overview what we're going to do is since we need to communicate with node or in other words that electron store to store data on our hard drive then we're going to be sending some information over what's called an IPC Channel basically means like communicate with the node portion of tnb OS and the first param is just saying that hey we're about to set a store value or set some data on a hard drive and we are going to be setting this value which is just the current or the updated version of our state and store this data under the key speed test manager so whenever we shut down tnb OS and pop it back open again what's going to happen is part of that initialization or boot process is it's going to look in our electron store for any data that's currently stored there and instead of populating this manager slice with this initial data right here it's going to say hey I already found something in there from before and that's what we're going to use to initialize this app and we'll be getting into that logic in just a bit but yeah there you go now aside from this we also need to create one more reducer and that is for setting the Active network ID and it's going to be super similar so I'll just say set active network ID for the key again the state we're operating on is just the same state and the payload for this we'll just call it network ID and again it's going to be the same type is valid data that we're going to be passing in either a string which is the network ID itself or null and then instead of updating the active account number we want to update the Active network ID and set it equal to whatever the payload was that we rename network ID that we passed in and then this line of code is the same as well because again this state that we want to update in the slice is just equal to this object right here so now we got our functionality to update the active account number or Active network ID and it looks like that might be all however there is one other thing that I want to create and this is just a utility function that I have in basically all my create slice functions and this is just set manager so you know how this function right here is going to be setting this and this one is setting this well the function that I'm about to write in like five seconds is gonna be a function that enables us to set both at the same time now if you're thinking well when do we really need that because one of these is going to set the account number one of them is going to set the network why would we ever need to set both at the same time well the only time we need this is for that boot process because what that boot process is going to do is it's going to look under this key and it's going to find both of these that's stored on our hard drive that way and then it's just gonna pretty much save us some time instead of like having to call each of these individually I'm just going to say that this is a function to set this entire slice at once now for this I'm just going to pass in manager is the shape and now the only other paramet takes is this key right here because that's where it's going to look in our electron store to try to find this data and all right uh that's all we actually need to write for create slice and now we're just going to export some things and all right so we want to export all of these and I'll show you something a little bit tricky in just a second so what we want to do is we want to export set active account numbers set Active network ID and set manager however what we're going to do is instead of exporting them from manager dot reducers which it looks like you should do we're actually going to import them from manager dot actions now okay a key called initial state name reducers where the heck is manager dot actions so this is part of the Hidden magic of Redux toolkit and specifically create slice because like I said behind the scenes what's going to happen after we call this function is Redux toolkit is going to create these action creators by merging this key with this function and what it's going to allow us to do is basically something like this in our component let me just comment this out so uh you know this is an actual code just demoing something in our component what we're going to do is we're going to dispatch something like this set active account number and we're going to be passing in one two three so we're going to end up with these action Creator functions that are kind of like selfgenerated by this uh create slice function all right and last but not least I want to export this reducer so export default manager dot reducer so this will be our default default export and yeah everything looks uh good to go so now that we got it taken care of our manager slice we can hop over and create that run slice so we already have that file created for us and since we're going to be using a very similar structure let me just import this and let's see so instead of speed test manager it is speed tester runs and we don't need this manager type anymore instead we are going to need this run type and runs all right everything out should be the same and okay so for the initial run States actually I'm gonna do exports const initial State again the shape of this is just going to be a dictionary of runs so runs and we'll just keep that equal to an empty dictionary at first and then after this let me just go ahead and uh actually let me save some time in a copy all of this Okay so instead of manager this slice is going to be called runs the initial state is equal to this initial state which is the empty date and the name of this is going to be speed test runs so I can delete the speed test manager and alright so instead of set manager we're going to call this set runs again the naming convention I follow is just set and then uh whatever the slice is named so set runs camel case same thing here set manager because it was named manager and again that is to set the entire slice all at once it's kind of the pattern I've been following okay initial test speed test runs and now let's go ahead and just copy these because I want to create one action Creator function and that is to set an individual run so of course the state for this is going to be equal to runs and for payload uh whenever we pass in the payload it's going to be equal to one of these individual runs so the payload action just copy that what we're going to be passing in is a run so we can rename this to run but uh the reason I don't want to do it here you're going to see in just a bit okay so whenever we pass in a run what do we want to do well the first thing I want to do is I want to pluck off this run ID so I'm going to destructure this plucking off the Run ID from payload now the reason that I want to pluck that off is because what I want to do is I want to see if this run already exists in our Redux store so I'm going to create a variable called run and it's going to be equal to state run ID so again the state refers to um this dict or this slice right here and whenever we are setting a run for the very first time then there's not going to be any object matching this in our state however once we have set it and then we're just setting it again to update it then it's going to find it so this run right here is either going to be equal to a run or it's going to be undefined so why do I care about that well from this line of code right here whenever we are setting this we need to find out if the Run already exists or not because if the Run already exists then what we can do is take that previous run or existing data and just update it with any of our new data that we pass in which is going to be from the payload otherwise if the Run does not exist in our store yet then just go ahead and set this chunk of state to our payload just like this and I'm getting an error here runs all right that was because uh this runs which is basically saying that we're going to be storing addictive runs I accidentally had runs in here rather than run right here so there we go okay so this set run is a function that we're going to use both to create a run for the very first time and then also update any existing runs and then what error am I getting here manager because the type of this is not manager it is runs all right all right so initial State let me just review this real quick this is a name reducer looking good and now what I want to do is just export everything so export set run which allows to set an individual run and then set runs which we're going to use on on boot to set this entire slice at once pretty much reading in any previous runs from our hard drive and just setting it and then by default I want to have this runs.reducer is just the default export so now that we have our two main slices created both the manager slice and the Run slice what we're going to do is create a new file and kind of combine those together so again this file is store slash index.ts and to combine slices we are going to import something from Redux toolkit and a combine reducers all right so then we can just import uh we'll call it manager reducer so we're importing the default export which is basically just this manager reducer and then we're going to do the same thing for that runs reducer so from runs import it as runs reducer and now how do we combine these well we can go ahead and create a variable we'll just call it speed test get out of here what am I doing speed test reducer and this is going to be equal to the return value of combiner reducers which is going to take a key value pair with the key being basically what you just want to name that chunk of data and the manager reducer as a value so it runs runs reducer and then we'll just export this entire thing for default speed test reducer all right and that is really all we need to do to set up the Redux portion of our state management for this app however to make tnb OS aware of this we need to go ahead and add it to our app registration file so in here let's see copy this name and that is apps store so import speed test reducer from apps speed test store now as part of our app registration there is another key called reducer and you set this equal to the root reducer for the app and in this case it is speed test reducer and now that we have it in our registration we can go into Apps registry and pretty much just let our app registry know that we now have a reducer so since we already have our registration imported all we need to do is say that we have a new app producer or a new um some more app data that we want to store and we'll Kia under speed test and we just need to give it the reducer and then we're gonna have an exclamation after this and the reason that we need this is because in this app registration type we have this reducer reducer as an optional key value pair and the reason for that is because not all apps need to have a reducer not all apps need to store data in Redux so it is optional however in this case we're saying yes there is definitely a reducer for this speed test registration the reducer that we just created so you know you don't have to guess it's definitely there that's why we do it so now with all of that as long as I didn't miss anything we should have our Redux store structure all set up and ready to go this I think should be good all right so let me minimize this the moment of truth did it appear in our Redux store Redux and check it out all right so now in addition to system in chat we now have this cool speed test slice and of course we have our manager which was initialized with this data right here and then our runs which was just initialized as an empty decked for now and there you go so this is how we set up our Redux structure however the one other thing that we have to do now is we need to say that whenever we have data in here which we don't at the time but whenever tmbos boots up for the very first time we need to tell it how to load that data from our hard drive into this Redux store so let me actually close this and we'll do that right now now for this function under speed test store I'm going to create a new typescript file called initializer and again this is just going to have one function in it and its job is to initialize our Redux store whenever we first boot up tnb OS so let me go ahead and import everything first that we're going to need so from see if I can steal this from anywhere so we're first going to need those constants because remember those constants tell us which key in the electron store or on our hard drive all this data is so speed test manager and speed test runs and now after this we're going to be importing from this we need to import first of all um the initial State because if the logic is basically going to work like this it's going to say first whenever you're booting up check on the hard drive and see if we have any data in there that we can initialize the store with if not then we're just going to initialize it to whatever the initial state is right here so we need to import both this initial State variable and also this is the function that we're going to use to actually set this data so in the initializer we're going to import initial State and we'll just import it as manager initial States and the reason that I want to rename it is because we're also going to be importing initial state from another file as well when we don't want to have like initial State One initial state two so we're going to import the initial State rename it to manager initial State and then also this set manager action creator and we're going to import that from apps.speedtests.store manager just copy this and do the same for runs so import from runs say it runs initial state so our runs initial state is going to be this which it's going to be the fallback if it can't find any runs data currently in there and then to set those runs in Redux we use set runs just like that now another thing that we're going to need is just some type and that is from shared types and that is going to be the local electron store and this is just the shape of our data on our hard drive and then one other thing from system types and that is app dispatch so that dispatch function that we call to basically set data into Redux it's going to be of this type and I just want to make sure everything is typed out properly all right so with all this being said what we can do is we can create a function that's going to be called is pretty much the initialization function for this app and I'll just call it load speed test data and this is first gonna take a the dispatch spell that correctly all right so dispatch of type app dispatch in the store local electron store and this function is going to return void again we don't need to return everything because all it's doing is taking data from our hard drive and setting it in our Redux all right and now let me just export this by default and then we'll get into writing export default all right so the logic for this is actually going to be pretty simple I'll say all right let me make a variable called store manager and again what we need to do first is we need to figure out is there any data on the hard drive or in other words the local electron store already if so then we'll use that to set is the data if not then we'll just use that initial State as default so in order to do that we're going to do store and we'll add this question mark because the very first time that tnbos gets initialized not just this app but like the entire system we have the store optional while everything's being initialized but anyways just to make typescript happy we need to add that question mark right after so from this store which like I said is basically our hard drive we're going to look for data under the key speed test manager and that's going to be any existing data that was there from the previous time whenever we have our Network interactive account selected now if you are initializing this app for the very first time then you're not going to have this data stored yet so instead as a fallback we'll just use that manager initial state which is this this right here with these two keys initialized to null all right so we're either going to have data from the hard drive or the initial State and now once we have that to actually set this we're going to call dispatch set manager set manager and we're just going to pass in whatever this data is right here so again the set manager action Creator was just to set this entire state right here and now actually what error am I getting ah yes so back in our registry in the area that this is throwing us is saying that hey you told me to look in local electron store for a key called speed test manager however if I go to local electron store right here then we basically just need to update this type right here because right now we're saying that our app data it's only equal to chat electron story and what we want to do is we want to make sure that this is equal to both chat electron store and the speed test electron store that we just created so from speed tests we actually have it from registration right here oh we don't even have it yet but anyways what we are looking for is this right here speed test electron store and then we'll just import it right into our registration so we'll say import speed test electron Store for apps test types and then we can just export it right here so speed test electron store all right so we want to have our registration kind of the central point for everything and now we can import that in the app registry and all right and I also want to change this from a type to an interface since we're basically combining a couple different things now so let me actually comment that out and we'll say instead of this app electron store is a type we're going to export it as an interface called app electron store and this is just going to extend both this chat electron store and also this speech speed test electron store and we don't need to put anything in the body of the interface basically just saying that this electron app electron store all right it's a lot of electron Source I'm trying to say kind of a tongue twister but anyways this app electron store type or interface is a combination of chat electron store and speed test electron store easy peasy so now when we pop back in our initializer this local electron store should be good to go and just like we checked if there's any manager data on our hard drive and then dispatched it to Redux during the initialation process we're going to do the exact same thing for runs data so this is speed tester runs so we'll say store runs is equal to any runs data from a hard drive if you can't find any then just use that runs initial state which is just going to be an empty dict and then once you have one of those then just go ahead and set it in Redux so now that we got our initialization function written what we need to do is the very last step is just add it to our registration so we're the store initialization import load speed test store data from same location initializer and then the function that we just imported right here the key for this is initializer and there we go so we don't need to actually explicitly call this anywhere like from our registry or anything because another part of the internal tnbos boot process is it's going to look for all of these registrations and right after the system data is loaded it's going to go through each of these one by one and it's going to check is there an initializer function that exists if there is one that exists then I'm just going to go ahead and call it so again that's why it you know we don't need to like explicitly call it or anything it's just part of the internal interworkings I guess you could say so with this being said let me just go ahead and restart this app and see if anything broke all right it is looking all right but just to kind of verify that let me do this I'll verify that everything is being initialized correctly by doing this so for dispatch so what I'll do even though we never actually want to do this but uh just for testing things out I'm going to set some manager data so I'll just set active account number to like bacon and then the Active network ID the tuna let me pretty up this all right so on a boot if everything's working correctly then it's just going to set like this dummy data for a manager so let's see if it's set that first of all all right speed test manager okay looks like our dummy data was in there so now what I'm gonna do is close this and I'm actually going to be deleting this because right now that data not only should it be set in Redux which we just confirmed but it should also be set on our hard drive now the reason that I wanted to have that is because whenever I boot this up again then instead of pulling this manager initial state it should have found that data on the hard drive even though we just removed that dispatch function and uh as long as we see some bacon and tuna then everything should be working correctly Redux speed test manager bacon and tuna all right so this means that it is correctly loading in that data from our hard drive everything is persisting properly and by the way this uh right here this is basically how we're going to be using or setting this Redux data from our components so yeah I think that's good for this video and in the next one what we'll do is we'll go through and start hooking up all these components to Redux should be pretty sweet so uh yeah see you then
