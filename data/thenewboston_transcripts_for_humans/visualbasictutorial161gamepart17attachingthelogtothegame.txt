With timestamps:

00:01 - hello YouTube Sam here from youtube.com/
00:04 - onli gamer for the New Boston and in
00:07 - this tutorial we're going to be changing
00:08 - some things about the log um like adding
00:11 - the ability to show or hide the log and
00:14 - also um adding the ability
00:17 - to hook the log to our form so let's say
00:21 - this window is our form whenever this is
00:24 - moved around the log is going to be
00:26 - moved around and connected to it so
00:29 - before we get started I just want to
00:31 - apologize for some of the logic errors
00:33 - in my last tutorials um such as in the
00:36 - first two game tutorials and then
00:38 - tutorial
00:39 - 159 um for the most part I was making up
00:42 - this game as I was going along and I
00:46 - wanted to do that because if I went
00:48 - ahead and pre-wrote the code before I
00:50 - did
00:51 - it first of all it would take a really
00:53 - long time and second of all it would
00:55 - make it seem to you guys that like
00:57 - whenever you're making a program you're
00:59 - going to come up with the best best most
01:00 - efficient code with no errors at first
01:03 - and that's not realistic to what
01:04 - programming is like you when you're
01:06 - programming you come up with ideas as
01:08 - you go along you come up with better
01:10 - ways and you will run into logic errors
01:13 - um that don't actually show up um in
01:14 - your error list because it's something
01:16 - that you did wrong or in this case I did
01:19 - wrong and it's nothing has nothing to do
01:22 - with a compiler or the program so I
01:25 - wanted to apologize for that um I did
01:28 - fix those in tutorial 106
01:30 - um you can see that I added some uh
01:33 - annotations to the tutorials where the
01:35 - errors were created so that I won't get
01:38 - trolled in the comments so now that we
01:41 - got that out of the way um let's go
01:43 - ahead and we will hook our log to the
01:48 - form
01:49 - one so what we're going to do is we're
01:53 - going to set the position of new log so
01:56 - new
01:58 - log. location
02:01 - is going to be equal to a
02:04 - new point now a point is a point that
02:08 - has has X and Y coordinates because the
02:11 - location property for any form is going
02:14 - to be of type point so we have to create
02:17 - a new point and the location is going to
02:20 - be me do
02:24 - location do X so what this is going to
02:28 - do is it's going to get the X Lo
02:30 - of the current form which is form one so
02:33 - the ex location of new log is going to
02:35 - be the same ex location as form one so
02:37 - the X location would be across so we
02:39 - want it to be the same across um as it
02:42 - is form one so it'll be a straight line
02:45 - down each of the
02:48 - sides so we got me. loation
02:51 - dox and then for the y coordinate we'll
02:54 - do me. location
02:58 - doy but we need to to subtract some from
03:00 - it so let's open up the designer for
03:05 - form
03:06 - 1vb and you can see that the size uh 457
03:10 - across 328 down so let's go ahead and
03:14 - try 328 so the Y
03:18 - location and we want to add
03:20 - 328 because all coordinates start from
03:23 - the top left corner of the screen and
03:26 - they go forward you cannot have negative
03:28 - coordinates so it's it's not like a
03:30 - normal grid where it
03:31 - is um across with a point in the middle
03:34 - and then it has negative coordinates the
03:36 - point in the middle would be the top
03:38 - left corner of your screen so let's go
03:41 - ahead and try plus
03:43 - 328 so it's going to set the coordinates
03:45 - of our new log to just below our form
03:49 - one and it's going to be touching the
03:50 - form
03:51 - one but what if they move form one well
03:54 - we want to move that um log with it so
03:58 - go ahead and click the lightning bolt on
04:01 - this and we need to find the move event
04:05 - so you can see here we've got move so
04:09 - whenever form one has moved we will Tye
04:12 - we will set new log.
04:15 - location
04:16 - equals and then we'll do a new
04:20 - point and we'll do me. location
04:24 - dox and then me. location doy and then
04:28 - we're going to add
04:30 - 328 so every time it's moved it's going
04:33 - to update the location so hopefully
04:36 - everything will work here well here and
04:38 - we won't get any logic errors um so you
04:41 - can see that here is our game and here
04:44 - is our
04:45 - log you can see that the log is touching
04:48 - right to the bottom of the game and when
04:50 - we move the game around you can see that
04:52 - the log is attached to the game and it
04:54 - moves with it so this is something very
04:57 - useful very cool that I figured out
05:00 - um if you've ever used team view or
05:01 - you've probably wondered how they did
05:03 - that well this is um a similar method
05:06 - and it works the same way but then you
05:08 - can also move this log away um from the
05:12 - game it looks like I shook it there and
05:16 - so but then once you move the game again
05:19 - it resets it back to the original
05:21 - position which is connected to
05:23 - it and it'll function just like
05:27 - normal

Cleaned transcript:

hello YouTube Sam here from youtube.com/ onli gamer for the New Boston and in this tutorial we're going to be changing some things about the log um like adding the ability to show or hide the log and also um adding the ability to hook the log to our form so let's say this window is our form whenever this is moved around the log is going to be moved around and connected to it so before we get started I just want to apologize for some of the logic errors in my last tutorials um such as in the first two game tutorials and then tutorial 159 um for the most part I was making up this game as I was going along and I wanted to do that because if I went ahead and prewrote the code before I did it first of all it would take a really long time and second of all it would make it seem to you guys that like whenever you're making a program you're going to come up with the best best most efficient code with no errors at first and that's not realistic to what programming is like you when you're programming you come up with ideas as you go along you come up with better ways and you will run into logic errors um that don't actually show up um in your error list because it's something that you did wrong or in this case I did wrong and it's nothing has nothing to do with a compiler or the program so I wanted to apologize for that um I did fix those in tutorial 106 um you can see that I added some uh annotations to the tutorials where the errors were created so that I won't get trolled in the comments so now that we got that out of the way um let's go ahead and we will hook our log to the form one so what we're going to do is we're going to set the position of new log so new log. location is going to be equal to a new point now a point is a point that has has X and Y coordinates because the location property for any form is going to be of type point so we have to create a new point and the location is going to be me do location do X so what this is going to do is it's going to get the X Lo of the current form which is form one so the ex location of new log is going to be the same ex location as form one so the X location would be across so we want it to be the same across um as it is form one so it'll be a straight line down each of the sides so we got me. loation dox and then for the y coordinate we'll do me. location doy but we need to to subtract some from it so let's open up the designer for form 1vb and you can see that the size uh 457 across 328 down so let's go ahead and try 328 so the Y location and we want to add 328 because all coordinates start from the top left corner of the screen and they go forward you cannot have negative coordinates so it's it's not like a normal grid where it is um across with a point in the middle and then it has negative coordinates the point in the middle would be the top left corner of your screen so let's go ahead and try plus 328 so it's going to set the coordinates of our new log to just below our form one and it's going to be touching the form one but what if they move form one well we want to move that um log with it so go ahead and click the lightning bolt on this and we need to find the move event so you can see here we've got move so whenever form one has moved we will Tye we will set new log. location equals and then we'll do a new point and we'll do me. location dox and then me. location doy and then we're going to add 328 so every time it's moved it's going to update the location so hopefully everything will work here well here and we won't get any logic errors um so you can see that here is our game and here is our log you can see that the log is touching right to the bottom of the game and when we move the game around you can see that the log is attached to the game and it moves with it so this is something very useful very cool that I figured out um if you've ever used team view or you've probably wondered how they did that well this is um a similar method and it works the same way but then you can also move this log away um from the game it looks like I shook it there and so but then once you move the game again it resets it back to the original position which is connected to it and it'll function just like normal
