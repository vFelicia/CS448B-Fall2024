With timestamps:

00:00 - already a welcome back and in this video
00:03 - what we're going to be doing is we're
00:05 - going to be working on this address
00:07 - logic I'm hoping that I can knock out
00:10 - four and five in this video
00:12 - however uh we'll see how far we get but
00:15 - basically just a little recap in the
00:17 - last video what we did is we had the
00:19 - logic to add and remove items from our
00:21 - cart
00:22 - now before we go and actually order
00:24 - these of course we need to be able to
00:27 - manage our addresses to be able to say
00:29 - where do we want to receive these items
00:31 - so that's what we're going to be doing
00:33 - today
00:34 - and just a pop in tnb OS to give you a
00:36 - little overview of what we're going to
00:38 - be doing
00:39 - so right now we're going to be building
00:41 - out this my address pages and it's just
00:44 - going to have this little section at the
00:45 - top and we can click this button to add
00:47 - new addresses of course fill out this
00:49 - form
00:50 - and then once we have an address it's
00:51 - going to appear here and we could either
00:54 - delete it or edit it
00:56 - so pretty simple logic and also pretty
01:00 - critical because then whenever we go to
01:03 - place an order we can just go ahead and
01:05 - choose an address
01:07 - and of course that's where our order is
01:10 - going to be sent so
01:12 - now that we got the overview out of the
01:15 - way let's go ahead and start building
01:17 - out this page so
01:19 - let me hop into seeing what we have
01:22 - for our address pages and all it says is
01:25 - by address right now
01:27 - so let's go find in files by address and
01:33 - first of all let's just get the padding
01:36 - situated for all this
01:38 - okay so on the product Details page we
01:42 - have
01:44 - a padding of
01:51 - 24 pixels 32.
01:56 - there we go actually what was it on tnb
01:58 - OS
02:00 - same thing 24 pixels 32 okay so after
02:03 - this we have a section heading and let
02:06 - me actually just pull it up on tnbos
02:08 - since we're going to be copying a bunch
02:10 - of stuff from there
02:12 - so that would be buy addresses
02:17 - and the Styles okay
02:20 - so we have a section heading this is my
02:22 - addresses and the right content is a
02:24 - button
02:27 - that basically takes you to the buy
02:31 - address Details page
02:34 - okay
02:36 - so we already got a section heading
02:39 - component
02:41 - let's figure out where we use that
02:46 - okay so on our cell products we already
02:49 - were using the section heading
02:50 - components so this one's going to have a
02:52 - section heading as well
02:54 - let me just check my overall layout so
02:56 - the container for this
03:01 - oh it's not even Flex or anything and
03:04 - that is just because we have two divs in
03:06 - there
03:07 - so that should work actually
03:14 - so anyways for this section heading
03:19 - why am I styling this one
03:22 - margin bottom so we'll see what we need
03:25 - to do
03:28 - so for the section heading we're just
03:29 - going to say my dresses and the right
03:31 - content is going to be render add
03:32 - address button
03:34 - and for this render at address button
03:37 - we're going to need to import a button
03:39 - component
03:41 - and then
03:42 - Plus
03:53 - I wonder if I can get okay
04:00 - so button component is render out
04:02 - address button render address button
04:05 - and then the MDI Plus
04:12 - and I forgot actually Y is
04:18 - all right I need to turn my AC off also
04:23 - one second
04:32 - okay okay there we go
04:36 - all right now what I'm wondering is for
04:40 - cell products
04:41 - whenever we render this button we didn't
04:44 - have any
04:46 - icon for it but I think I do one icon
04:51 - yeah let's uh keep things consistent
04:53 - here
04:55 - all right so this is kind of um
04:59 - not really part of this
05:02 - session hi
05:08 - oh wait this is on the button
05:13 - all right so the button has a left on
05:15 - click and text left on click and text
05:17 - and do I need can I simplify the naming
05:21 - of this
05:28 - maybe I just say render button
05:32 - since this is the only button in this
05:35 - component okay
05:37 - now on click handle add address click
05:46 - okay so let's just log something out for
05:48 - now
05:51 - so console log
05:57 - ad address
05:59 - and I'm also going to simplify this to
06:02 - handle button click so
06:07 - by the way that fly is uh still flying
06:10 - around me in case anyone wanted to you
06:13 - know know about the fly update
06:16 - okay so this is interesting
06:18 - first of all the button looks a little
06:20 - bit weird oh I know why
06:24 - that is because in my icon buttons
06:30 - have it
06:34 - where the Border radius is six
06:38 - yeah but we just want to make that 50
06:40 - percent like normal
06:45 - now and sell same thing
06:49 - we can also just have it without any
06:51 - icons
06:57 - all right does the icon look better or
06:59 - not actually let me just remove all
07:01 - icons keep it simple for now
07:05 - again from here we are focusing on
07:08 - functionality
07:10 - not the design at the moment although
07:12 - design is a very important part of
07:14 - software development
07:17 - just don't want to do too many things at
07:20 - once here
07:21 - keep it nice and simple
07:23 - okay
07:25 - so add button by my dresses ad and then
07:28 - when I click it it should say add
07:30 - address
07:32 - and why am I getting these errors
07:35 - Okay add address address beautiful okay
07:39 - so the next thing I want to do here is
07:41 - render my addresses or the empty state
07:46 - so let's work on that
07:48 - so
07:53 - okay same thing with products
07:56 - actually let's
08:04 - all right so these products
08:07 - yeah we have an empty State for the cell
08:09 - products as well
08:18 - all right empty text here
08:22 - so here I am having the section heading
08:24 - then rendering content in
08:26 - for the content if I don't have anything
08:29 - to display which is products in this
08:31 - case but it's going to be addresses I'm
08:33 - just going to render this empty text
08:35 - component
08:36 - so let's see what I had in new tnbos
08:39 - yeah pretty much the same thing
08:42 - beautiful Beauty full okay
08:52 - okay all right so where am I now tnb OS
08:57 - render button I'm going to say render
08:59 - content address list we didn't create
09:01 - yet but if I do I'm going to render
09:05 - addresses
09:07 - so if
09:10 - all right I'll just render null for here
09:12 - and then this empty text
09:16 - we'll just go ahead and test out
09:19 - our empty state
09:21 - so for render content
09:27 - what we can do is say
09:33 - all right let's see what we're working
09:34 - with first of all
09:37 - right that looks pretty good and just so
09:40 - we can see so this empty text component
09:43 - has a padding of 16 which is beautiful
09:46 - all right so my address is if you don't
09:49 - have any addresses it says no addresses
09:51 - to display great great
09:54 - great
09:55 - now I'm wondering what we can do from
09:58 - here
10:00 - probably just spelled out the logic to
10:02 - add it
10:07 - yeah let's do that all right
10:10 - so in tnb OS when you add a dress it
10:12 - takes you to the address Details page
10:16 - so let's do the same all right
10:19 - so styling a lot of other styling are we
10:22 - going to need the addresses which we
10:24 - don't have yet but we'll come back to
10:26 - that
10:30 - all right
10:32 - and here's another question do we want
10:35 - to do the same logic as editing
10:37 - products
10:39 - where we have active by address
10:43 - I believe so because that design pattern
10:47 - worked well before
10:50 - so why not do it again
10:57 - yeah that'll work
10:59 - okay
11:01 - so what we're gonna do
11:03 - is
11:06 - we are
11:08 - going to first look at our manager
11:13 - and
11:16 - oh my God two flies now you have got to
11:19 - be kidding me
11:21 - okay all right so we have active product
11:24 - and this gets set right before we
11:27 - navigate
11:28 - to one of our pages
11:32 - yeah
11:34 - so we're gonna follow this same logic
11:36 - where whenever we edit something we're
11:38 - going to be setting the active address
11:39 - and then navigating to the page and then
11:43 - whenever we are creating a new one we'll
11:45 - just set it equal to null and then
11:47 - navigate to that same page and then
11:48 - where when we're at the page we can just
11:51 - check if we have an active address or
11:52 - not if we do we must be editing one if
11:55 - not then we must be creating one
11:57 - so for here let me just go ahead and
12:00 - okay so we need to type out my address
12:03 - first
12:04 - oh my God these bugs are
12:07 - you know I think I might have to go to
12:09 - the uh
12:12 - pretty gross too just
12:14 - it's a random bugs flying around I hope
12:16 - they don't get my coffee or anything
12:18 - okay so
12:21 - let's go ahead and type out
12:24 - the address
12:33 - all right so new types
12:36 - addresses
12:38 - and just like basically everything else
12:41 - actually let's see what the
12:46 - let's um get
12:50 - my addresses
12:54 - okay
12:57 - so let's tell chat gbt to the created
13:00 - typescript interface for this
13:14 - and while it's doing that what I can do
13:17 - is
13:18 - kind of steal some other stuff here so
13:30 - so address
13:34 - all right so what we are going to be
13:37 - doing
13:38 - is we are going to be
13:42 - creating a slice for address the type of
13:44 - it extends from created and modified
13:46 - created in modified also has an ID so
13:49 - address one two
13:52 - so you stay
13:55 - the owner
13:57 - so address one two city state country
14:02 - trust one two city state country zip
14:05 - code is string and owner is a number
14:09 - copy those
14:12 - put them under my dress
14:18 - alphabetize and should be good
14:24 - types
14:25 - create a modified generic okay
14:28 - all right now as usual just going to go
14:31 - ahead and register these in my main
14:34 - types index
14:37 - okay
14:38 - so acid pairs address so I said
14:45 - all right so we created the address
14:48 - which is a single one and addresses
14:50 - which is the shape of how it's going to
14:52 - be stored in Redux basically the
14:54 - addresses
14:57 - keyed by their ID
15:01 - let me just sort this
15:08 - all right
15:09 - so this is the shape that we're going to
15:11 - be storing
15:13 - looking good now as always before I can
15:18 - create this in my store just want to
15:19 - create some constants for it so
15:26 - addresses
15:30 - addresses
15:33 - make sure it's spelled it right looking
15:35 - good
15:36 - and now I can go ahead and create a
15:39 - slice so
15:41 - in my store create a new texture file
15:44 - for addresses
15:46 - and what do we need for these let me
15:49 - think
15:53 - so we are going to be
15:56 - setting an individual one for example
15:58 - whenever we create one
16:00 - setting multiple ones for example
16:02 - whenever we go to this page we just want
16:04 - to fetch all our addresses actual
16:06 - property fetch them as soon as we log
16:07 - into the app that's uh probably more
16:09 - efficient
16:11 - and unset which is the equivalent of
16:13 - deleting
16:14 - so I think we can just copy all this
16:17 - logic
16:20 - okay
16:22 - so for my addresses first of all this is
16:25 - going to be
16:28 - constant which is addresses
16:32 - and then instead of course
16:38 - all right
16:39 - cores can be replaced by addresses
16:43 - and core
16:45 - is going to be replaced by address
16:55 - course is going to be
16:59 - replaced by addresses
17:03 - okay now let's read through this so I
17:06 - have an address slice
17:08 - of course everything internally uses the
17:12 - address constant addresses constant
17:14 - importing address addresses initial
17:16 - State it's just empty thick
17:19 - and then initial stay reduce your set
17:21 - address
17:22 - we're going to be passing in an address
17:24 - keying it under ID to send multiple
17:27 - addresses we're going to be passing in a
17:30 - list of addresses
17:31 - and then we're just going to be king all
17:34 - those by ID and then to delete and
17:36 - address we just delete that slice or
17:40 - that object under the address ID
17:43 - which is just a number
17:46 - export everything send address addresses
17:48 - unset address
17:50 - reducer good go okay
17:52 - under my store
17:54 - now that we got a new slice let's go
17:56 - ahead and just
17:58 - let's see asset pair
18:03 - and then dress above that
18:10 - so addresses what we will say
18:16 - that we have a new slice called the
18:18 - dresses and for the value of that we'll
18:20 - set that equal to addresses reducer
18:24 - and now hopefully in our
18:27 - Redux store we should see addresses
18:30 - looking good okay now what we're going
18:33 - to need to do now that we have those in
18:35 - our store
18:37 - is we're gonna need to write a selector
18:41 - eventually
18:43 - pluck those off
18:47 - the store index
18:52 - what I can do is I can say
18:55 - whenever we call the selector function
18:58 - get addresses then just give me the data
19:01 - under State addresses basically that
19:04 - slice of our Redux store
19:06 - and we don't need this just yet but we
19:08 - will in just a second okay
19:10 - so now what we want to do
19:14 - is we want to go ahead and say
19:18 - um we're gonna have
19:20 - an updated slice in our manager for
19:22 - active address
19:26 - and this is going to determine if we're
19:27 - creating or editing an address so
19:31 - first thing we're going to need to do is
19:34 - import address so types
19:37 - addresses we're going to import address
19:41 - and then for active address
19:45 - that's either going to be equal to an
19:47 - address or null
19:50 - and that's going to all be stored under
19:52 - the manager
19:53 - now in the store for the manager what we
19:56 - need to do is we need to update initial
19:58 - States
20:00 - to say that by default active address is
20:03 - equal to null
20:07 - all right
20:08 - and then to update this
20:14 - okay
20:15 - I'm looking good looking good
20:18 - and now let me just check my
20:21 - manager okay probably gonna need to log
20:23 - out log back in
20:26 - okay
20:27 - so now I have active address being able
20:29 - to store or being stored in my manager
20:32 - slice so now what we can do is we can
20:36 - say that whenever we click this button
20:38 - make sure that this is set to null and
20:40 - then navigate to that page
20:42 - so to do that let's just say let's just
20:46 - steal it from somewhere else
20:53 - okay update Manager
20:57 - actually I can do this might be easier
21:05 - so on the handle button click which is
21:07 - same as this logic right here
21:11 - I'm going to be dispatching update
21:13 - manager and then navigating to this page
21:16 - create a product
21:18 - now the question becomes do I even have
21:22 - this page
21:24 - so page shop
21:27 - no
21:28 - so this is going to be by
21:31 - what was my naming convention buy
21:33 - address details
21:35 - yeah buy product details by address
21:37 - details
21:42 - so let me just get the name of this
21:46 - all right so we're going to be creating
21:48 - a new page
21:49 - and we'll just keep the styles
21:53 - empty it first
22:03 - and refactor rename okay
22:08 - so this page is just going to be empty
22:09 - for now
22:13 - and we'll just say buy address details
22:18 - and now we have an empty page component
22:22 - what we can do
22:24 - just register a URL for it so
22:29 - all right so let me first just import
22:33 - the page
22:36 - by address details and again this page
22:39 - is going to have our add or edit form on
22:41 - it
22:42 - and now what I can do
22:47 - is say something like create edit
22:53 - address
22:55 - all right
22:57 - so the route by slash create edit
23:00 - Address should go to buy address details
23:05 - but does it that's the million dollar
23:07 - question so buy slash create edit
23:09 - Address should go to buy address details
23:12 - fantastic
23:13 - now actually let me go ahead and add
23:16 - some padding right now
23:19 - just for some reason I hate when things
23:20 - are butted up against the corner
23:23 - you should probably standardize this
23:24 - padding too in a bit
23:26 - but
23:29 - yeah
23:30 - do that a little bit later on
23:35 - all right so now the goal
23:39 - to programmatically go to the Spy
23:40 - address Details page so
23:43 - that's going to happen whenever you
23:45 - click the button in order to do that we
23:47 - first need to get this dispatch logic
23:50 - which we don't have already
23:53 - so dispatch is going to require use
23:55 - dispatch and app dispatch
24:01 - dispatch is going to come from the
24:03 - reactor Redux
24:07 - and then we should be able to pluck off
24:09 - this use dispatch
24:15 - all right that is looking good and then
24:17 - what else are we going to need update
24:19 - manager to set
24:24 - all right and then navigate we're gonna
24:26 - need so navigate use navigate come from
24:28 - reactorader Dom hook
24:32 - and then we just are going to use
24:34 - navigate like this
24:36 - nice and easy nice and easy here
24:39 - all right now with all of those Imports
24:43 - what we can do is update our hand
24:46 - handle button click
24:49 - in okay
24:51 - so first of all where are we navigating
24:53 - to and the goal is to navigate the shop
24:56 - by create address
24:59 - so we are going to navigate to shop by
25:03 - create edit Address
25:05 - and before we do that what we need to do
25:10 - is
25:12 - wait for it wait for it the store
25:15 - manager
25:17 - okay
25:19 - so what we're going to do whenever we
25:21 - click this add button
25:24 - right here is we're first going to
25:27 - update our manager
25:28 - and then
25:30 - to set active address to null just in
25:32 - case there's anything in there and then
25:34 - we're going to redirect to this page
25:36 - so update manager set it to null
25:39 - beautiful active address
25:42 - and then
25:44 - be taken to this page
25:46 - looking good okay
25:50 - all right we are doing awesome here
25:53 - let's see where we go from here
25:56 - okay
25:57 - so I think what I want to do
26:04 - mm-hmm
26:08 - I'm just wondering where I can kind of
26:11 - steal some of this logic from so now
26:18 - basically have to create the form right
26:21 - here
26:26 - and I think for this
26:30 - what I can do
26:33 - yeah so I'm thinking we can just steal a
26:36 - lot of the logic from the cell create
26:38 - edit product in other words uh we need a
26:41 - form here to edit the address and we
26:44 - already have this form here although The
26:46 - Styling isn't that pretty
26:49 - and the the only hesitation I have
26:53 - before kind of having chat GPT help us
26:56 - out
26:57 - is that this uses form data because it
27:00 - uses an image
27:01 - however
27:03 - we are not going to need form data
27:07 - because we don't have any image involved
27:10 - with an address
27:14 - so in that case
27:17 - also I need to do some validation here
27:20 - let me make a little note okay
27:29 - all right so in that case
27:35 - we aren't going to need a lot of this
27:39 - however I think
27:41 - can still help us out
27:49 - she let's do this
27:56 - interesting interesting interesting
28:05 - mm-hmm
28:08 - mm-hmm
28:10 - okay let's just uh give check GPT some
28:14 - work and I'll say we can kind of edit
28:17 - that so
28:20 - um here are my
28:30 - update the
28:33 - by address details component
28:43 - Port addresses
28:46 - address
28:47 - creation
28:51 - oops I didn't even
28:55 - give it the component but it doesn't
28:57 - really matter
28:59 - okay so let me just start importing
29:01 - everything that we're going to need
29:09 - Spectra products create edit yada yada
29:12 - don't need any of that but
29:16 - so products
29:18 - we aren't going to need
29:21 - and for development
29:24 - um the first time we submit this we can
29:25 - just log out the values to make sure our
29:27 - form is working correctly and then what
29:29 - we'll do is we will write our API
29:31 - functionality in dispatchers to kind of
29:33 - hook everything up with the API
29:37 - but for now
29:40 - should be good
29:42 - okay
29:44 - all right so what are you coming up with
29:45 - Chad GPT
29:48 - uh dispatch need that as well
29:53 - preview
29:57 - and then after this we're going to
29:59 - navigate back so
30:02 - okay so we're going to submit the form
30:05 - and then navigate them back to the
30:06 - address page
30:08 - and then we need the initial values
30:16 - initial values
30:19 - type foreign values that's interesting
30:22 - interesting interesting
30:36 - all right so edit
30:41 - and then I'll say type of foreign values
30:44 - equal type of initial values
30:47 - all right
30:49 - so I also want to just look at my
30:53 - address
30:55 - see what's going on with this so
30:57 - types of the address okay I've created
31:00 - modified nid which I don't need what do
31:02 - I need address one address two City and
31:05 - Country dress one address two City and
31:07 - Country
31:08 - and then
31:12 - the owner doesn't need to be submitted
31:15 - just State and zip code
31:18 - stay in zip code okay
31:21 - looking good
31:22 - next I just need my form
31:33 - and I'm wondering if there's an easier
31:35 - way to do this
31:38 - performic form
31:43 - yeah let's just steal one of these
31:46 - core modal
31:51 - so next what I'm going to do is this
31:55 - inside this container
31:59 - it's going to have a form
32:04 - and the input okay
32:13 - so let's just do address one and address
32:16 - two for now
32:23 - oh I need the name too
32:28 - so initial value is on some evaluation
32:30 - schema
32:35 - I'm just gonna have an alphabetical
32:37 - order or it's annoying okay
32:40 - so submit submit
32:47 - all right
32:50 - thank you
32:54 - so for the validation schema
32:57 - of address one
33:00 - address two
33:02 - then those are the values now on submit
33:06 - for handling
33:09 - the cement logic
33:13 - what I can do is I can just treat this
33:16 - very easy okay
33:31 - hmm
33:37 - all right so right here we are just kind
33:41 - of patching together a bunch of
33:43 - different stuff
33:45 - got a bunch of imports that we don't
33:47 - need yet
33:55 - you will need in the future so no
33:56 - checkbox needed
34:00 - no file inputs
34:04 - do we need to close no do we need an
34:07 - icon no
34:09 - okay
34:11 - so I should have some kind of form on
34:15 - there now
34:17 - so let's see so
34:19 - I'm gonna buy I'm gonna go to my dresses
34:21 - add a dress this looks good for now
34:27 - and then I'm just gonna have 456 Amy
34:30 - Lane one two three okay just logging out
34:33 - these addresses
34:35 - and why am I logging out oh I see I see
34:38 - I see
34:39 - interesting
34:42 - okay
34:44 - City Country state ZIP code
34:54 - values
34:57 - all right
34:59 - cool
35:01 - all right
35:02 - so I got address one address two and
35:04 - then we're doing City Country State and
35:07 - zip code
35:09 - so in 10 boss
35:14 - we're doing City
35:17 - State country zip code city state ZIP
35:22 - code and Country
35:34 - all right so same thing and then make
35:39 - sure okay so City
35:42 - state is called state ZIP code is
35:47 - snake case and then
35:51 - for the country okay I had this a little
35:53 - bit different too
35:55 - so before I must have had it that except
35:57 - country codes on the back end but now I
35:59 - just want to have it
36:01 - um
36:02 - except a country
36:06 - if you're going to come from country
36:07 - options
36:08 - but either way let's get validation for
36:10 - city state and zip code
36:13 - all right so for City
36:16 - it's just going to be a string
36:19 - and then for state and zip code
36:24 - which zip code is snake case those are
36:27 - also going to be strings
36:29 - now for these country options
36:35 - let me see what I had for this okay
36:45 - so let's just keep the same kind of
36:48 - standard that we're doing right here
36:53 - okay
36:56 - so in other words what we're going to do
36:58 - for these options for countries
37:00 - eventually I'm going to find some
37:02 - Library
37:03 - and then
37:05 - we can
37:07 - one second
37:09 - yeah and then what we'll do is we'll
37:11 - just use that library to get a list of
37:13 - countries but for right now I just want
37:15 - to
37:16 - kind of um
37:19 - hard code everything in so this is going
37:22 - to be uh
37:24 - India and Nigeria
37:29 - and for the select let me just see
37:31 - something real quick so for the select
37:33 - options it's going to take a select
37:36 - option and this is going to have
37:40 - okay a display name is optional
37:44 - and the value is required
37:47 - so
37:50 - the display name
37:52 - okay
37:55 - in the value
38:01 - so what I can do for this
38:04 - um this will make validation a little
38:05 - bit easier where by default
38:08 - let me actually make make sure that
38:11 - I have something okay so by default
38:13 - it'll just have this little hyphen and
38:15 - then the value internally is just going
38:18 - to be zero and then I can just validate
38:21 - if they have anything selected
38:23 - and then hopefully
38:27 - admit that check it out
38:33 - all right looking good looking good
38:34 - looking good
38:36 - looking good okay
38:39 - so now what did I miss validation for
38:41 - the country right
38:44 - all right tnbos how are you validating
38:46 - country so string required is a valid
38:49 - country
38:50 - and you say country is a required field
38:53 - and for the validation
38:57 - it's that country code is not equal to
39:00 - the default select option
39:04 - interesting interesting interesting oh
39:06 - this is good this is good
39:09 - okay
39:11 - so actually I think I want this logic
39:12 - this is a little bit better
39:14 - so
39:17 - actually where is this I really like
39:19 - this so shop constants forms
39:24 - so actually let me do this
39:32 - yeah I am actually going to make a new
39:34 - constants directory top level
39:37 - and I'm going to make a new forms
39:41 - attribute here and for this I'm going to
39:45 - give it this default select option
39:48 - and then what I'm going to do
39:52 - is I'm going to import
40:01 - this default select option
40:03 - and then I can first of all use it
40:09 - place up here
40:11 - and also in place of the value right
40:15 - yeah so then I don't even need this
40:17 - display name value nonsense I can just
40:19 - say that the value of these
40:20 - is equal
40:23 - to either the hyphen
40:26 - or India Nigeria uh USA whatever
40:36 - all right
40:37 - and then in my validation that'll make
40:40 - it pretty easy because for the country
40:45 - I can just say
40:51 - that
40:54 - in order to be valid and also I don't
40:57 - wanna
40:59 - all right so for the country validation
41:02 - what I can do
41:04 - is I can just validate that the country
41:10 - actually let me just say the value that
41:11 - gets passed in
41:14 - is not equal to the default select
41:17 - option so that means
41:20 - that
41:21 - if they have this selected it's going to
41:24 - say country is a required field
41:26 - and it's only valid if you select one
41:28 - that is looking nice okay
41:32 - so now what else needs done here
41:37 - let me just review my
41:39 - logic so far
41:46 - this is good
41:49 - validation taken care of
41:54 - don't need this anymore it says you
41:59 - oh whooping cough all right
42:01 - close tabs to the right and now we can
42:04 - probably start working on
42:08 - my API logic since I think I'm ready to
42:11 - submit this data now
42:18 - yep yep yep yep yep okay
42:21 - so first let me go ahead and
42:28 - actually how are we gonna do this okay
42:29 - let's just start with the API logic as
42:32 - usual so under types just gonna get the
42:35 - name of this refactory name addresses
42:37 - since this file is going to be named the
42:39 - same thing
42:41 - and now let's just say that
42:46 - so it's going to be the same what do we
42:49 - just create cart products
42:52 - and we're going to be creating
42:54 - deleting
42:56 - getting and editing
43:02 - same thing with products great yeah yeah
43:05 - this is what we opened okay
43:12 - oh and you know what we actually don't
43:14 - want
43:19 - all right
43:25 - so this is the end point however we
43:27 - don't want
43:29 - authorization form headers
43:33 - we just need authorization headers for
43:35 - everything
43:36 - because we are not working with any form
43:39 - data
43:41 - and
43:43 - replace products
43:49 - with a dress
43:55 - all right
43:57 - delete
43:58 - okay addresses
44:05 - [Music]
44:07 - all right so now
44:11 - what I can do is first review this okay
44:16 - so for my address endpoints I can create
44:18 - an address I can delete one I can get a
44:21 - list of all my addresses or I can update
44:24 - one of my dresses
44:26 - the base endpoint for this is API
44:28 - addresses
44:30 - now for creating an address first of all
44:33 - this form data is incorrect
44:36 - so instead of that
44:45 - so we're going to be creating a new type
44:50 - of addresses
44:52 - and it's going to be similar to this
44:55 - because we want to say create address
45:00 - request
45:03 - now when you're creating an address what
45:04 - information do you need to pass up and
45:07 - let's find out the hard way okay
45:09 - so you need an address one
45:12 - and address two which is
45:16 - optional but we'll actually keep it
45:19 - required
45:21 - because if we don't have one we can just
45:23 - pass in an empty string
45:26 - all right Justin adjust to city state
45:28 - country zip
45:37 - all right so we're going to be using
45:40 - address one address two City
45:45 - country and zip code so address one is a
45:48 - one two three Maple Lane for address two
45:51 - we'll keep this as empty string city is
45:54 - CityVille
45:56 - state is
45:58 - steady
46:00 - actually we'll just do uh NY
46:03 - uh the country say USA in the zip code
46:06 - is one two three four five
46:10 - all right now let's send this in check
46:12 - it out so address
46:16 - make a typescript interface for this
46:28 - here is typescript in our face for what
46:31 - you just gave me address one address to
46:33 - city state country and some code
46:36 - all right
46:38 - so this is going to be the create
46:40 - address request
46:42 - now I just need the
46:51 - for addresses we want to say create a
46:54 - just request
46:56 - create address
46:59 - request
47:00 - and then when we are creating that
47:02 - address
47:05 - what we're going to need to pass in is
47:06 - the data for create address request
47:11 - and same thing whenever we are updating
47:15 - it
47:17 - okay
47:18 - so now let's read through this one more
47:20 - time
47:20 - so this was all good
47:22 - yep yep yep okay so when creating a
47:26 - dress I'm going to be passing in create
47:27 - address requests which is this data
47:29 - right here
47:31 - and then I'm going to get back and
47:33 - address object
47:36 - and I just need my headers for that now
47:38 - when deleting an address I'm just going
47:40 - to pass in the ID of the address and
47:42 - it's not going to return anything
47:44 - now when getting addresses I don't pass
47:47 - in anything I just ask for their
47:48 - addresses and it gives me back a list of
47:50 - them
47:51 - and then when updating an address I need
47:53 - to give the ID tell me what
47:55 - when I'm updating and then the data uh
47:59 - pretty much whatever I want to update it
48:01 - to okay
48:03 - so that is cool cool cool cool cool cool
48:07 - and now what I can do just make my
48:09 - dispatcher functions
48:14 - all right now in my dispatcher I'm gonna
48:16 - go ahead and make a new typescript file
48:18 - addresses
48:22 - and let me do this
48:28 - um okay chat CPT got another one for you
48:30 - this is
48:33 - coding standard
48:37 - crate
48:40 - functions for me
48:43 - or
48:45 - addresses
48:47 - and then I also need to give it my
48:52 - dress is here
48:55 - and hopefully it can do its thing
49:00 - all right
49:03 - so my dispatchers
49:07 - are going to I'm going to have one two
49:11 - three four
49:16 - and that is all right
49:18 - delete get an update
49:24 - set under set
49:27 - from store addresses
49:34 - all right let's see what we got going on
49:37 - here
49:42 - an update address
49:45 - don't do this
49:52 - all right so update address
50:01 - and I should have gave you something
50:03 - else
50:05 - so let's just say dispatcher products
50:08 - just want to find out my standard for
50:10 - updating all right so for updating you
50:13 - also set that
50:17 - and why
50:21 - okay here we go
50:31 - all right
50:32 - so for my dispatcher functions it called
50:35 - create delete git and update
50:39 - greatly get an update
50:45 - these were my three store functions
50:49 - sure to set set multiple and unset
50:54 - okay so far so good now when you're
50:57 - creating an address you need to pass in
50:59 - that data it's going to hit the end
51:01 - point and then it's going to set it in
51:02 - the store
51:04 - when you're deleting it you just need to
51:06 - give it an ID
51:09 - hits the end point and then deletes it
51:11 - in the store by unsetting it
51:14 - when you get all your addresses you
51:15 - don't need to give it anything you just
51:17 - get the list that it comes back with and
51:20 - then set that that in your store and
51:23 - then
51:25 - when you're updating it you need to give
51:26 - it the idea of when you're updating data
51:29 - make the requests on the back end and
51:31 - then set it in your store with set
51:33 - addresses okay
51:35 - so now
51:36 - what we can do
51:40 - is we can borrow some more logic
51:45 - you know we're going to borrow this from
51:47 - whenever we were working with products
51:53 - actually this may not be the best
51:55 - example
51:58 - let's do it with
52:02 - hmm
52:08 - maybe one of the modals uh core model
52:12 - okay oh wait I forgot
52:19 - what form do I have that doesn't involve
52:22 - this
52:25 - you know what maybe we should do it the
52:27 - hard way
52:29 - all right
52:33 - what is going on outside okay so active
52:36 - product
52:38 - yeah let's see this
52:41 - let's just start kind of grinding this
52:43 - out okay
52:44 - so for active products
52:46 - uh that's one thing we need to determine
52:48 - however instead of active product we
52:51 - need to figure out if we have an active
52:52 - address
52:53 - so in the types the manager that field
52:57 - was called active address okay
53:00 - so if you have an active address it
53:02 - means you're trying to edit something if
53:03 - not you're just trying to update
53:05 - something so let's go ahead and
53:10 - use the same logic right here
53:18 - well I'll say convert this
53:26 - to this format
53:28 - so I don't have to type out all of those
53:44 - assuming you have an active address
53:45 - similar to active product the equivalent
53:47 - would be this beautiful beautiful
53:49 - beautiful beautiful beautiful
53:53 - thank you
53:55 - and thank you for saving me from typing
53:58 - out all that
54:00 - and all right so the initial values of
54:03 - the form are dependent on if you have an
54:05 - active address or not
54:07 - should we say country zip code all of
54:09 - that looks good still
54:12 - all right good go
54:14 - and then I will also say
54:21 - okay I don't think I need to do any of
54:24 - this
54:30 - yeah I can just copy this though
54:34 - and I'll put a try catch
54:37 - all right so whenever you are submitting
54:39 - it
54:40 - try to do something like this and then
54:43 - if you get an error
54:46 - then what we want to do is something
54:48 - like this
54:51 - all right
54:54 - so first let's go ahead and replace
54:58 - actually let's get our dispatchers let's
55:00 - import everything that we're going to
55:01 - need to import
55:04 - all right so dispatchers from address
55:07 - what we are doing with the Swarm is we
55:10 - are either creating a dress or updating
55:13 - an address
55:15 - and then first of all I'm just going to
55:17 - replace active product
55:19 - code that we sold with active address
55:21 - and then
55:23 - what we are saying
55:27 - Let Me patch this together
55:39 - by
55:42 - addresses
55:49 - all right so now
56:01 - all right
56:04 - so I think this is the bulk of the logic
56:08 - now it's actually review what we just
56:11 - wrote okay
56:14 - so the initial values
56:17 - are going to be dependent on if you have
56:19 - an active address basically if you have
56:21 - an active address use all these initial
56:23 - values if not use empty strings
56:26 - now whenever you handle submit what it's
56:28 - going to do is it's going to check if
56:30 - you have an active address or not if you
56:32 - already have an active address that
56:34 - means you're trying to update it and
56:36 - whenever you update it what you need to
56:38 - do is you need to pass the ID in of the
56:40 - address that you're updating which comes
56:42 - from active address ID and also the
56:45 - updated data which is just going to be
56:47 - the form data which is just going to be
56:49 - these values then after that's
56:51 - successful it's just going to say
56:52 - product updated in the in this is wrong
56:59 - should say address updated
57:02 - in a nice display those now if you don't
57:05 - have an active address that means you're
57:06 - creating one for the very first time and
57:09 - you just pass in those form values it's
57:10 - going to say address created and then no
57:13 - matter whether you're updating or adding
57:15 - a new one after it's just going to take
57:17 - you to your address pages so you can see
57:20 - what you just did
57:21 - now if you get an error then we want to
57:23 - log it out and for the error that we're
57:27 - going to display to you
57:29 - if you have an active address it's going
57:31 - to say error updating your address
57:32 - otherwise if you're trying to create one
57:34 - or creating address
57:36 - and all of that should be good
57:43 - Imports are looking good so now let's go
57:46 - ahead and
57:47 - test this and actually on our address
57:49 - page right here we won't see anything
57:51 - because we aren't rendering those
57:52 - addresses yet
57:54 - but let me just go ahead and try to
57:55 - create one if first
57:58 - all right so hopefully if this works let
58:01 - me make sure I just don't have any in my
58:03 - Redux store already Okay so we're going
58:06 - to submit this
58:07 - and it looks like it created it
58:10 - and then
58:13 - yep set it in my store right here
58:17 - Okay cool so it still says no addresses
58:20 - to display
58:21 - however
58:23 - um what we can do now is we can build
58:26 - these address cards and it's part of
58:30 - those address cards we have the edit and
58:32 - delete logic right there so whenever we
58:35 - click this edit what it's going to do is
58:37 - it's going to set the active address and
58:38 - then take us back to this page and then
58:40 - delete of course we can just delete it
58:42 - you know no need to navigate to a new
58:44 - page whenever we delete something
58:46 - we can just delete it and then pop up a
58:48 - toast to say address delete it
58:51 - all right so on that note let's go ahead
58:56 - and make these address cards next
58:59 - so address details this seems to be
59:01 - working for now
59:03 - close out of you
59:07 - don't need these yet
59:10 - to fetch you later
59:14 - fetchy lighter bra
59:16 - and then for this what did I make
59:19 - changes here
59:22 - just added a to-do
59:28 - oh yeah better validation and I'll
59:30 - change this as well
59:33 - okay so close out of you close out of
59:35 - you close out of you close out of you
59:37 - close that up YouTube okay
59:48 - okay okay buy dresses now
59:55 - here
59:58 - you want to check if you actually have
60:00 - addresses now that we got that logic
60:03 - taken care of all right
60:06 - so
60:08 - dresses are just going to come from this
60:10 - the address list
60:13 - huh that's easier didn't even think
60:15 - about doing that
60:17 - but yeah let's just do that
60:21 - okay
60:23 - so what we need to do is select the
60:26 - addresses from our readout store so how
60:28 - do we do that well we already made I
60:32 - think we made Yep this get address is
60:34 - selector
60:35 - and now what I'm going to do is just
60:38 - steal a little something here
60:42 - all right so I'm just going to steal
60:44 - this selector
60:45 - it's going to come from
60:47 - reactor Redux
60:52 - and then I'm also gonna steal something
60:56 - selectors
61:09 - when possible
61:13 - steel code from other places on your app
61:17 - so you don't have to type that's
61:20 - pretty much see if I thought I give to
61:22 - myself every day okay so now we're
61:25 - getting addresses from the store and
61:27 - what I also want to do is I want to use
61:29 - this little pattern here it's a Nifty
61:31 - little thing
61:33 - and
61:35 - import everything that I need all right
61:37 - so all I'm doing here is just converting
61:40 - these addresses to a list by basically
61:43 - getting the values of everything since
61:45 - they're keyed by ID
61:46 - and then whenever I'm rendering content
61:49 - I can move this
61:52 - basically if you have addresses
61:55 - then we're going to be rendering them
61:56 - eventually if not then render this empty
61:59 - State and now we actually do have an
62:01 - address so we don't render that empty
62:03 - State anymore but now we got to render
62:05 - the actual address cards
62:08 - so in order to do that let's
62:12 - okay
62:13 - so for render addresses I'm gonna
62:15 - iterate over the address list and for
62:18 - each one just convert it to an address
62:19 - card and that's going to be stored
62:22 - or it's going to be rendered here and
62:25 - this addresses section
62:31 - first of all let's make a container for
62:33 - where these cards are going to go and
62:34 - then we'll go ahead and create the cards
62:37 - and now for my break points
62:42 - I want to standardize these as well
62:55 - all right so
62:58 - for my break points
63:01 - where am I breaking at eight hundred and
63:03 - a thousand so that's
63:05 - mobile and tablet
63:10 - so I'll say for mobile
63:17 - tablet okay so mobile
63:20 - View and only you can display one column
63:23 - tablet view I'm going to display three
63:25 - or excuse me two columns and then any
63:28 - more than that I'll display three and
63:30 - then we'll kind of play around with that
63:32 - see how it looks I might have to adjust
63:34 - it later on but for now
63:36 - um you know it's responsive enough for
63:38 - uh
63:39 - just testing things out
63:42 - Okay so after this I'm actually going to
63:45 - need my address card component
63:50 - and that is this right here fascinating
63:55 - so this card what we do
64:00 - oh I see what we did oh okay I see
64:02 - what's going on here
64:04 - so
64:05 - I actually made another address card
64:07 - component
64:10 - and this has all my address information
64:13 - on it
64:15 - with optional right content
64:19 - and the reason for this
64:22 - is because
64:25 - um
64:25 - you so
64:28 - I have the address displayed right here
64:31 - but this isn't the only place where I
64:33 - want to render the address I also am
64:35 - rendering it here
64:37 - on my orders page so that's why I made
64:39 - this part a reusable component
64:41 - now in addition you see that
64:43 - on your my address pages each address
64:45 - has a drop down of what you can do
64:47 - however when it's on your orders page it
64:49 - doesn't have that drop down so that's
64:52 - why I kind of build it out this way and
64:53 - it's the same logic that I'm gonna go
64:55 - with in this new app
64:57 - so we'll make a new component called a
64:59 - dress card
65:01 - and this will have all kind of the basic
65:04 - styling on it
65:09 - yeah I don't have a name on any of these
65:11 - addresses I just realized huh
65:14 - interesting
65:16 - well we'll take care of that later for
65:18 - now let's just go ahead and uh copy this
65:21 - address card component
65:24 - so we got another component for our
65:27 - component Library which is an address
65:28 - card
65:29 - and for the styles
65:33 - what we can do is just format these two
65:35 - our styles
65:37 - for the full name I believe we're just
65:40 - getting rid of that straight up
65:47 - okay
65:55 - I won't need to do this either
65:58 - all right
66:00 - so let's just do this
66:05 - so we're going to have a left and a
66:07 - right section left is where the address
66:09 - is going to go and the right is where an
66:11 - optional right content is going to go
66:12 - which is going to be that drop down
66:15 - now for the left I don't need a full
66:17 - name although
66:19 - we're going to have to add a name later
66:20 - on we just kind of forgot it for now we
66:23 - don't have this country list yet for the
66:25 - types
66:27 - what we're going to do is we're going to
66:29 - import address
66:31 - and some functional components
66:34 - and for the address
66:36 - card which is this component is going to
66:39 - take an address
66:42 - an optional right content
66:48 - and for this
66:50 - do we want to pluck everything off here
66:54 - yeah why not so we'll say address one
66:58 - just gonna render on top
67:01 - address two we can just replace it by
67:04 - address
67:05 - to
67:08 - no need for a full name
67:11 - for render country name
67:15 - would you say country
67:20 - and that's in a div
67:27 - all right
67:28 - and then for zip code
67:34 - all right
67:39 - so for this address card
67:42 - it's gonna have border border box shadow
67:46 - all right
67:49 - all right so we're going to pass an
67:51 - address right content
67:54 - it's going to render these on the left
67:55 - optional right contact on the right
67:57 - looking good
68:00 - all right cool
68:02 - so a dress card is taken care of and now
68:05 - what we need to do is still create this
68:11 - address
68:13 - okay
68:15 - so then with that component we're going
68:18 - to be using it and basically just in
68:21 - a parent component
68:24 - there are going to be creating just for
68:27 - this my addresses page we basically use
68:30 - this component but we form the drop down
68:33 - menu that we pass in before
68:37 - okay
68:41 - and no styling needed
68:46 - so let's actually
68:52 - Hmm this is this thing as well
68:55 - yeah let's actually copy this
68:59 - because that might be easier
69:03 - okay
69:05 - so first of all we want our component
69:07 - from a dress card
69:11 - now with unsetting the address
69:15 - what we are getting all right so that is
69:19 - going to be
69:22 - coming from our dispatchers
69:31 - our address dispatchers
69:40 - all right so we are going to want to be
69:42 - able to delete an address
69:47 - whenever we call this delete
69:51 - and what we're going to be doing
70:01 - all right a lot of patching together
70:03 - here
70:07 - drop down menu page don't need that
70:10 - don't need that okay
70:12 - post type
70:21 - set this at this don't need this drop
70:24 - down menu from components
70:34 - and let's just go
70:55 - all right pretty much just get getting
70:57 - everything functional for now
70:59 - then I gotta do a quick mini self review
71:05 - success
71:08 - all right so now let's figure out what I
71:10 - just did okay
71:12 - so for this address
71:14 - what we are going to do
71:18 - is we're pretty much going to use this
71:19 - address card
71:20 - and we're going to use a right drop down
71:24 - menu
71:25 - for the right component so we're
71:27 - importing the address card drop down
71:29 - menu
71:31 - we're going to be deleting the address
71:33 - whenever we click the drop down menu and
71:35 - choose delete
71:38 - so we're going to need that dispatcher
71:40 - function here toast type just a display
71:42 - or toast
71:43 - from our types we are importing address
71:46 - and we have to rename this because the
71:48 - component is named address
71:50 - then our dispatch function and our
71:53 - just our
71:54 - component typing
71:58 - then for the address props we're just
72:00 - going to be passing in an address
72:02 - and then we are saying
72:06 - that we were displaying the address card
72:08 - and on the right we're just playing a
72:10 - drop down menu when you edit it's going
72:12 - to log out edit for now gonna change
72:14 - this to actually update the active
72:17 - address then navigate to that page
72:19 - but just have that as a to do for now
72:22 - and then on delete what we can do is we
72:25 - can call this
72:26 - delete address by passing in the address
72:28 - ID and it says address deleted and all
72:31 - right
72:31 - so a couple things
72:35 - that we can do from here before we even
72:37 - start testing everything out
72:40 - is that
72:42 - let's do the cell products in here
72:53 - yeah okay
72:56 - so first I just want to put this in a
72:58 - try catch so
73:05 - for the catch
73:07 - all right so whenever you click delete
73:09 - it's going to try to delete it and then
73:18 - all right so when you click delete try
73:20 - to delete it make requests to the back
73:22 - end and then delete it in my Redux store
73:26 - and then display the toast address
73:28 - deleted
73:30 - now if you get an error then just log it
73:32 - out and display the erratos that says
73:34 - error deleting address
73:36 - now whenever you click edit what it's
73:39 - going to do is something similar to this
73:44 - it's going to update manager and
73:46 - navigate you to that page so store
73:51 - manager
73:54 - and we need navigate from react router
73:56 - Dom because when editing you go to a new
74:00 - page
74:02 - and then for navigate you plug it from
74:05 - here
74:08 - and then for this it's actually the same
74:12 - thing
74:14 - so whenever you click edit you're going
74:15 - to update the manager and set the active
74:17 - address to basically the one that you
74:20 - are
74:21 - editing and then you're going to
74:23 - navigate to create at address page which
74:26 - will now have an active address
74:28 - all right that looks good so far
74:32 - and now what we need to do is just
74:33 - actually render these addresses out
74:36 - instead of returning null right here
74:39 - okay
74:41 - so create this function to render
74:44 - addresses but first import that
74:48 - so import that address component we're
74:50 - just working on and then create this
74:52 - function to render addresses
74:56 - render addresses and the key is the
74:59 - address ID
75:02 - and then if you have addresses then
75:05 - render them as address cards
75:08 - in this address section
75:15 - so now let's see what we're working with
75:17 - okay looking good okay
75:20 - so I can either click to add a new
75:23 - address
75:24 - from there or
75:27 - I can edit this
75:29 - beautiful and I will say 456 Apple Lane
75:33 - submit that
75:35 - all right address updated my address
75:37 - updated and then before I delete this I
75:40 - do want to add
75:44 - padding
75:46 - to this
75:48 - and what was my padding here
75:53 - 12 I think
75:55 - all right merge modern 12 but we move
75:57 - that away from the section heading so I
76:00 - can have this
76:02 - so in that case
76:06 - what I can do for my dresses is I can
76:08 - just say margin top 12.
76:13 - all right
76:15 - so now that should give me this margin
76:18 - right here I already saw that editing
76:20 - worked and actually let me edit it
76:22 - without any
76:25 - if your S2 is a required field and that
76:28 - should not be the case
76:30 - so let's change this validation right
76:32 - off the bat
76:35 - so the address details for address to
76:39 - it's not required
76:42 - and then
76:45 - all right so no more error and then
76:47 - submit that and then all right looking
76:49 - good
76:52 - all right and then last but not least
76:54 - make sure deletion Works address deleted
76:57 - no addresses to display looking good
77:02 - all right so we can now add edit and
77:06 - delete addresses
77:09 - ah yeah did we knock these two out so
77:11 - buy her my dresses this is the ux for
77:14 - everything by create an edit Address we
77:16 - just tested that out
77:18 - and we got some to Do's but I will
77:21 - consider this feature good for now
77:28 - yeah a lot of cleanup to do
77:31 - but I just want to make sure
77:32 - everything's working correctly for now
77:37 - yeah I think we're looking alright
77:42 - now another thing that I probably want
77:44 - to do is fetch these addresses whenever
77:46 - we log in
77:48 - since on this page we aren't fetching
77:50 - them anywhere
77:52 - and I actually don't think that we want
77:55 - to
77:57 - yeah
77:59 - so we actually don't need to fetch our
78:01 - addresses every time we go to this page
78:03 - because what we can do is whenever we
78:06 - log out and log back in it's part of
78:08 - this like overall app initialization we
78:10 - could just fetchy dresses here and then
78:13 - whenever we are managing our addresses
78:15 - like adding and editing new ones we can
78:17 - just um add and edit it right from the
78:20 - store
78:21 - and then when we come back let's say
78:23 - navigate away and come back to this page
78:26 - like we don't need to fetch it again
78:27 - because everything should already be in
78:29 - sync
78:31 - so
78:34 - yeah I think we'll save that for later
78:36 - though
78:37 - since it's kind of out of scope for this
78:39 - video but for right now yeah uh buyer my
78:44 - dresses create net addresses so in the
78:46 - next video what we'll do is we'll go
78:48 - back to this buyer add to cart button
78:52 - so whenever they're doing this
78:55 - we'll finish that logic remember we were
78:58 - going to make that a warning modal just
79:00 - to give them a heads up they're trying
79:02 - to add products from two different
79:03 - sellers to their cart kind of give them
79:06 - a little bit a better indicator what's
79:08 - going on and why they can't do that
79:10 - and then from there it's really uh yeah
79:13 - the checkout page where you can
79:15 - basically create an order and then as
79:19 - part of this page they would need to
79:21 - select those fancy new addresses that we
79:23 - just created as well and then really
79:24 - just displaying their orders all right
79:27 - so four items left to do deadline is six
79:30 - days away
79:31 - but I think we're on a on a good Pace I
79:34 - got a good feeling about this
79:36 - so yeah as usual uh thank you guys for
79:38 - watching and I'll see you next video

Cleaned transcript:

already a welcome back and in this video what we're going to be doing is we're going to be working on this address logic I'm hoping that I can knock out four and five in this video however uh we'll see how far we get but basically just a little recap in the last video what we did is we had the logic to add and remove items from our cart now before we go and actually order these of course we need to be able to manage our addresses to be able to say where do we want to receive these items so that's what we're going to be doing today and just a pop in tnb OS to give you a little overview of what we're going to be doing so right now we're going to be building out this my address pages and it's just going to have this little section at the top and we can click this button to add new addresses of course fill out this form and then once we have an address it's going to appear here and we could either delete it or edit it so pretty simple logic and also pretty critical because then whenever we go to place an order we can just go ahead and choose an address and of course that's where our order is going to be sent so now that we got the overview out of the way let's go ahead and start building out this page so let me hop into seeing what we have for our address pages and all it says is by address right now so let's go find in files by address and first of all let's just get the padding situated for all this okay so on the product Details page we have a padding of 24 pixels 32. there we go actually what was it on tnb OS same thing 24 pixels 32 okay so after this we have a section heading and let me actually just pull it up on tnbos since we're going to be copying a bunch of stuff from there so that would be buy addresses and the Styles okay so we have a section heading this is my addresses and the right content is a button that basically takes you to the buy address Details page okay so we already got a section heading component let's figure out where we use that okay so on our cell products we already were using the section heading components so this one's going to have a section heading as well let me just check my overall layout so the container for this oh it's not even Flex or anything and that is just because we have two divs in there so that should work actually so anyways for this section heading why am I styling this one margin bottom so we'll see what we need to do so for the section heading we're just going to say my dresses and the right content is going to be render add address button and for this render at address button we're going to need to import a button component and then Plus I wonder if I can get okay so button component is render out address button render address button and then the MDI Plus and I forgot actually Y is all right I need to turn my AC off also one second okay okay there we go all right now what I'm wondering is for cell products whenever we render this button we didn't have any icon for it but I think I do one icon yeah let's uh keep things consistent here all right so this is kind of um not really part of this session hi oh wait this is on the button all right so the button has a left on click and text left on click and text and do I need can I simplify the naming of this maybe I just say render button since this is the only button in this component okay now on click handle add address click okay so let's just log something out for now so console log ad address and I'm also going to simplify this to handle button click so by the way that fly is uh still flying around me in case anyone wanted to you know know about the fly update okay so this is interesting first of all the button looks a little bit weird oh I know why that is because in my icon buttons have it where the Border radius is six yeah but we just want to make that 50 percent like normal now and sell same thing we can also just have it without any icons all right does the icon look better or not actually let me just remove all icons keep it simple for now again from here we are focusing on functionality not the design at the moment although design is a very important part of software development just don't want to do too many things at once here keep it nice and simple okay so add button by my dresses ad and then when I click it it should say add address and why am I getting these errors Okay add address address beautiful okay so the next thing I want to do here is render my addresses or the empty state so let's work on that so okay same thing with products actually let's all right so these products yeah we have an empty State for the cell products as well all right empty text here so here I am having the section heading then rendering content in for the content if I don't have anything to display which is products in this case but it's going to be addresses I'm just going to render this empty text component so let's see what I had in new tnbos yeah pretty much the same thing beautiful Beauty full okay okay all right so where am I now tnb OS render button I'm going to say render content address list we didn't create yet but if I do I'm going to render addresses so if all right I'll just render null for here and then this empty text we'll just go ahead and test out our empty state so for render content what we can do is say all right let's see what we're working with first of all right that looks pretty good and just so we can see so this empty text component has a padding of 16 which is beautiful all right so my address is if you don't have any addresses it says no addresses to display great great great now I'm wondering what we can do from here probably just spelled out the logic to add it yeah let's do that all right so in tnb OS when you add a dress it takes you to the address Details page so let's do the same all right so styling a lot of other styling are we going to need the addresses which we don't have yet but we'll come back to that all right and here's another question do we want to do the same logic as editing products where we have active by address I believe so because that design pattern worked well before so why not do it again yeah that'll work okay so what we're gonna do is we are going to first look at our manager and oh my God two flies now you have got to be kidding me okay all right so we have active product and this gets set right before we navigate to one of our pages yeah so we're gonna follow this same logic where whenever we edit something we're going to be setting the active address and then navigating to the page and then whenever we are creating a new one we'll just set it equal to null and then navigate to that same page and then where when we're at the page we can just check if we have an active address or not if we do we must be editing one if not then we must be creating one so for here let me just go ahead and okay so we need to type out my address first oh my God these bugs are you know I think I might have to go to the uh pretty gross too just it's a random bugs flying around I hope they don't get my coffee or anything okay so let's go ahead and type out the address all right so new types addresses and just like basically everything else actually let's see what the let's um get my addresses okay so let's tell chat gbt to the created typescript interface for this and while it's doing that what I can do is kind of steal some other stuff here so so address all right so what we are going to be doing is we are going to be creating a slice for address the type of it extends from created and modified created in modified also has an ID so address one two so you stay the owner so address one two city state country trust one two city state country zip code is string and owner is a number copy those put them under my dress alphabetize and should be good types create a modified generic okay all right now as usual just going to go ahead and register these in my main types index okay so acid pairs address so I said all right so we created the address which is a single one and addresses which is the shape of how it's going to be stored in Redux basically the addresses keyed by their ID let me just sort this all right so this is the shape that we're going to be storing looking good now as always before I can create this in my store just want to create some constants for it so addresses addresses make sure it's spelled it right looking good and now I can go ahead and create a slice so in my store create a new texture file for addresses and what do we need for these let me think so we are going to be setting an individual one for example whenever we create one setting multiple ones for example whenever we go to this page we just want to fetch all our addresses actual property fetch them as soon as we log into the app that's uh probably more efficient and unset which is the equivalent of deleting so I think we can just copy all this logic okay so for my addresses first of all this is going to be constant which is addresses and then instead of course all right cores can be replaced by addresses and core is going to be replaced by address course is going to be replaced by addresses okay now let's read through this so I have an address slice of course everything internally uses the address constant addresses constant importing address addresses initial State it's just empty thick and then initial stay reduce your set address we're going to be passing in an address keying it under ID to send multiple addresses we're going to be passing in a list of addresses and then we're just going to be king all those by ID and then to delete and address we just delete that slice or that object under the address ID which is just a number export everything send address addresses unset address reducer good go okay under my store now that we got a new slice let's go ahead and just let's see asset pair and then dress above that so addresses what we will say that we have a new slice called the dresses and for the value of that we'll set that equal to addresses reducer and now hopefully in our Redux store we should see addresses looking good okay now what we're going to need to do now that we have those in our store is we're gonna need to write a selector eventually pluck those off the store index what I can do is I can say whenever we call the selector function get addresses then just give me the data under State addresses basically that slice of our Redux store and we don't need this just yet but we will in just a second okay so now what we want to do is we want to go ahead and say um we're gonna have an updated slice in our manager for active address and this is going to determine if we're creating or editing an address so first thing we're going to need to do is import address so types addresses we're going to import address and then for active address that's either going to be equal to an address or null and that's going to all be stored under the manager now in the store for the manager what we need to do is we need to update initial States to say that by default active address is equal to null all right and then to update this okay I'm looking good looking good and now let me just check my manager okay probably gonna need to log out log back in okay so now I have active address being able to store or being stored in my manager slice so now what we can do is we can say that whenever we click this button make sure that this is set to null and then navigate to that page so to do that let's just say let's just steal it from somewhere else okay update Manager actually I can do this might be easier so on the handle button click which is same as this logic right here I'm going to be dispatching update manager and then navigating to this page create a product now the question becomes do I even have this page so page shop no so this is going to be by what was my naming convention buy address details yeah buy product details by address details so let me just get the name of this all right so we're going to be creating a new page and we'll just keep the styles empty it first and refactor rename okay so this page is just going to be empty for now and we'll just say buy address details and now we have an empty page component what we can do just register a URL for it so all right so let me first just import the page by address details and again this page is going to have our add or edit form on it and now what I can do is say something like create edit address all right so the route by slash create edit Address should go to buy address details but does it that's the million dollar question so buy slash create edit Address should go to buy address details fantastic now actually let me go ahead and add some padding right now just for some reason I hate when things are butted up against the corner you should probably standardize this padding too in a bit but yeah do that a little bit later on all right so now the goal to programmatically go to the Spy address Details page so that's going to happen whenever you click the button in order to do that we first need to get this dispatch logic which we don't have already so dispatch is going to require use dispatch and app dispatch dispatch is going to come from the reactor Redux and then we should be able to pluck off this use dispatch all right that is looking good and then what else are we going to need update manager to set all right and then navigate we're gonna need so navigate use navigate come from reactorader Dom hook and then we just are going to use navigate like this nice and easy nice and easy here all right now with all of those Imports what we can do is update our hand handle button click in okay so first of all where are we navigating to and the goal is to navigate the shop by create address so we are going to navigate to shop by create edit Address and before we do that what we need to do is wait for it wait for it the store manager okay so what we're going to do whenever we click this add button right here is we're first going to update our manager and then to set active address to null just in case there's anything in there and then we're going to redirect to this page so update manager set it to null beautiful active address and then be taken to this page looking good okay all right we are doing awesome here let's see where we go from here okay so I think what I want to do mmhmm I'm just wondering where I can kind of steal some of this logic from so now basically have to create the form right here and I think for this what I can do yeah so I'm thinking we can just steal a lot of the logic from the cell create edit product in other words uh we need a form here to edit the address and we already have this form here although The Styling isn't that pretty and the the only hesitation I have before kind of having chat GPT help us out is that this uses form data because it uses an image however we are not going to need form data because we don't have any image involved with an address so in that case also I need to do some validation here let me make a little note okay all right so in that case we aren't going to need a lot of this however I think can still help us out she let's do this interesting interesting interesting mmhmm mmhmm okay let's just uh give check GPT some work and I'll say we can kind of edit that so um here are my update the by address details component Port addresses address creation oops I didn't even give it the component but it doesn't really matter okay so let me just start importing everything that we're going to need Spectra products create edit yada yada don't need any of that but so products we aren't going to need and for development um the first time we submit this we can just log out the values to make sure our form is working correctly and then what we'll do is we will write our API functionality in dispatchers to kind of hook everything up with the API but for now should be good okay all right so what are you coming up with Chad GPT uh dispatch need that as well preview and then after this we're going to navigate back so okay so we're going to submit the form and then navigate them back to the address page and then we need the initial values initial values type foreign values that's interesting interesting interesting all right so edit and then I'll say type of foreign values equal type of initial values all right so I also want to just look at my address see what's going on with this so types of the address okay I've created modified nid which I don't need what do I need address one address two City and Country dress one address two City and Country and then the owner doesn't need to be submitted just State and zip code stay in zip code okay looking good next I just need my form and I'm wondering if there's an easier way to do this performic form yeah let's just steal one of these core modal so next what I'm going to do is this inside this container it's going to have a form and the input okay so let's just do address one and address two for now oh I need the name too so initial value is on some evaluation schema I'm just gonna have an alphabetical order or it's annoying okay so submit submit all right thank you so for the validation schema of address one address two then those are the values now on submit for handling the cement logic what I can do is I can just treat this very easy okay hmm all right so right here we are just kind of patching together a bunch of different stuff got a bunch of imports that we don't need yet you will need in the future so no checkbox needed no file inputs do we need to close no do we need an icon no okay so I should have some kind of form on there now so let's see so I'm gonna buy I'm gonna go to my dresses add a dress this looks good for now and then I'm just gonna have 456 Amy Lane one two three okay just logging out these addresses and why am I logging out oh I see I see I see interesting okay City Country state ZIP code values all right cool all right so I got address one address two and then we're doing City Country State and zip code so in 10 boss we're doing City State country zip code city state ZIP code and Country all right so same thing and then make sure okay so City state is called state ZIP code is snake case and then for the country okay I had this a little bit different too so before I must have had it that except country codes on the back end but now I just want to have it um except a country if you're going to come from country options but either way let's get validation for city state and zip code all right so for City it's just going to be a string and then for state and zip code which zip code is snake case those are also going to be strings now for these country options let me see what I had for this okay so let's just keep the same kind of standard that we're doing right here okay so in other words what we're going to do for these options for countries eventually I'm going to find some Library and then we can one second yeah and then what we'll do is we'll just use that library to get a list of countries but for right now I just want to kind of um hard code everything in so this is going to be uh India and Nigeria and for the select let me just see something real quick so for the select options it's going to take a select option and this is going to have okay a display name is optional and the value is required so the display name okay in the value so what I can do for this um this will make validation a little bit easier where by default let me actually make make sure that I have something okay so by default it'll just have this little hyphen and then the value internally is just going to be zero and then I can just validate if they have anything selected and then hopefully admit that check it out all right looking good looking good looking good looking good okay so now what did I miss validation for the country right all right tnbos how are you validating country so string required is a valid country and you say country is a required field and for the validation it's that country code is not equal to the default select option interesting interesting interesting oh this is good this is good okay so actually I think I want this logic this is a little bit better so actually where is this I really like this so shop constants forms so actually let me do this yeah I am actually going to make a new constants directory top level and I'm going to make a new forms attribute here and for this I'm going to give it this default select option and then what I'm going to do is I'm going to import this default select option and then I can first of all use it place up here and also in place of the value right yeah so then I don't even need this display name value nonsense I can just say that the value of these is equal to either the hyphen or India Nigeria uh USA whatever all right and then in my validation that'll make it pretty easy because for the country I can just say that in order to be valid and also I don't wanna all right so for the country validation what I can do is I can just validate that the country actually let me just say the value that gets passed in is not equal to the default select option so that means that if they have this selected it's going to say country is a required field and it's only valid if you select one that is looking nice okay so now what else needs done here let me just review my logic so far this is good validation taken care of don't need this anymore it says you oh whooping cough all right close tabs to the right and now we can probably start working on my API logic since I think I'm ready to submit this data now yep yep yep yep yep okay so first let me go ahead and actually how are we gonna do this okay let's just start with the API logic as usual so under types just gonna get the name of this refactory name addresses since this file is going to be named the same thing and now let's just say that so it's going to be the same what do we just create cart products and we're going to be creating deleting getting and editing same thing with products great yeah yeah this is what we opened okay oh and you know what we actually don't want all right so this is the end point however we don't want authorization form headers we just need authorization headers for everything because we are not working with any form data and replace products with a dress all right delete okay addresses all right so now what I can do is first review this okay so for my address endpoints I can create an address I can delete one I can get a list of all my addresses or I can update one of my dresses the base endpoint for this is API addresses now for creating an address first of all this form data is incorrect so instead of that so we're going to be creating a new type of addresses and it's going to be similar to this because we want to say create address request now when you're creating an address what information do you need to pass up and let's find out the hard way okay so you need an address one and address two which is optional but we'll actually keep it required because if we don't have one we can just pass in an empty string all right Justin adjust to city state country zip all right so we're going to be using address one address two City country and zip code so address one is a one two three Maple Lane for address two we'll keep this as empty string city is CityVille state is steady actually we'll just do uh NY uh the country say USA in the zip code is one two three four five all right now let's send this in check it out so address make a typescript interface for this here is typescript in our face for what you just gave me address one address to city state country and some code all right so this is going to be the create address request now I just need the for addresses we want to say create a just request create address request and then when we are creating that address what we're going to need to pass in is the data for create address request and same thing whenever we are updating it okay so now let's read through this one more time so this was all good yep yep yep okay so when creating a dress I'm going to be passing in create address requests which is this data right here and then I'm going to get back and address object and I just need my headers for that now when deleting an address I'm just going to pass in the ID of the address and it's not going to return anything now when getting addresses I don't pass in anything I just ask for their addresses and it gives me back a list of them and then when updating an address I need to give the ID tell me what when I'm updating and then the data uh pretty much whatever I want to update it to okay so that is cool cool cool cool cool cool and now what I can do just make my dispatcher functions all right now in my dispatcher I'm gonna go ahead and make a new typescript file addresses and let me do this um okay chat CPT got another one for you this is coding standard crate functions for me or addresses and then I also need to give it my dress is here and hopefully it can do its thing all right so my dispatchers are going to I'm going to have one two three four and that is all right delete get an update set under set from store addresses all right let's see what we got going on here an update address don't do this all right so update address and I should have gave you something else so let's just say dispatcher products just want to find out my standard for updating all right so for updating you also set that and why okay here we go all right so for my dispatcher functions it called create delete git and update greatly get an update these were my three store functions sure to set set multiple and unset okay so far so good now when you're creating an address you need to pass in that data it's going to hit the end point and then it's going to set it in the store when you're deleting it you just need to give it an ID hits the end point and then deletes it in the store by unsetting it when you get all your addresses you don't need to give it anything you just get the list that it comes back with and then set that that in your store and then when you're updating it you need to give it the idea of when you're updating data make the requests on the back end and then set it in your store with set addresses okay so now what we can do is we can borrow some more logic you know we're going to borrow this from whenever we were working with products actually this may not be the best example let's do it with hmm maybe one of the modals uh core model okay oh wait I forgot what form do I have that doesn't involve this you know what maybe we should do it the hard way all right what is going on outside okay so active product yeah let's see this let's just start kind of grinding this out okay so for active products uh that's one thing we need to determine however instead of active product we need to figure out if we have an active address so in the types the manager that field was called active address okay so if you have an active address it means you're trying to edit something if not you're just trying to update something so let's go ahead and use the same logic right here well I'll say convert this to this format so I don't have to type out all of those assuming you have an active address similar to active product the equivalent would be this beautiful beautiful beautiful beautiful beautiful thank you and thank you for saving me from typing out all that and all right so the initial values of the form are dependent on if you have an active address or not should we say country zip code all of that looks good still all right good go and then I will also say okay I don't think I need to do any of this yeah I can just copy this though and I'll put a try catch all right so whenever you are submitting it try to do something like this and then if you get an error then what we want to do is something like this all right so first let's go ahead and replace actually let's get our dispatchers let's import everything that we're going to need to import all right so dispatchers from address what we are doing with the Swarm is we are either creating a dress or updating an address and then first of all I'm just going to replace active product code that we sold with active address and then what we are saying Let Me patch this together by addresses all right so now all right so I think this is the bulk of the logic now it's actually review what we just wrote okay so the initial values are going to be dependent on if you have an active address basically if you have an active address use all these initial values if not use empty strings now whenever you handle submit what it's going to do is it's going to check if you have an active address or not if you already have an active address that means you're trying to update it and whenever you update it what you need to do is you need to pass the ID in of the address that you're updating which comes from active address ID and also the updated data which is just going to be the form data which is just going to be these values then after that's successful it's just going to say product updated in the in this is wrong should say address updated in a nice display those now if you don't have an active address that means you're creating one for the very first time and you just pass in those form values it's going to say address created and then no matter whether you're updating or adding a new one after it's just going to take you to your address pages so you can see what you just did now if you get an error then we want to log it out and for the error that we're going to display to you if you have an active address it's going to say error updating your address otherwise if you're trying to create one or creating address and all of that should be good Imports are looking good so now let's go ahead and test this and actually on our address page right here we won't see anything because we aren't rendering those addresses yet but let me just go ahead and try to create one if first all right so hopefully if this works let me make sure I just don't have any in my Redux store already Okay so we're going to submit this and it looks like it created it and then yep set it in my store right here Okay cool so it still says no addresses to display however um what we can do now is we can build these address cards and it's part of those address cards we have the edit and delete logic right there so whenever we click this edit what it's going to do is it's going to set the active address and then take us back to this page and then delete of course we can just delete it you know no need to navigate to a new page whenever we delete something we can just delete it and then pop up a toast to say address delete it all right so on that note let's go ahead and make these address cards next so address details this seems to be working for now close out of you don't need these yet to fetch you later fetchy lighter bra and then for this what did I make changes here just added a todo oh yeah better validation and I'll change this as well okay so close out of you close out of you close out of you close out of you close that up YouTube okay okay okay buy dresses now here you want to check if you actually have addresses now that we got that logic taken care of all right so dresses are just going to come from this the address list huh that's easier didn't even think about doing that but yeah let's just do that okay so what we need to do is select the addresses from our readout store so how do we do that well we already made I think we made Yep this get address is selector and now what I'm going to do is just steal a little something here all right so I'm just going to steal this selector it's going to come from reactor Redux and then I'm also gonna steal something selectors when possible steel code from other places on your app so you don't have to type that's pretty much see if I thought I give to myself every day okay so now we're getting addresses from the store and what I also want to do is I want to use this little pattern here it's a Nifty little thing and import everything that I need all right so all I'm doing here is just converting these addresses to a list by basically getting the values of everything since they're keyed by ID and then whenever I'm rendering content I can move this basically if you have addresses then we're going to be rendering them eventually if not then render this empty State and now we actually do have an address so we don't render that empty State anymore but now we got to render the actual address cards so in order to do that let's okay so for render addresses I'm gonna iterate over the address list and for each one just convert it to an address card and that's going to be stored or it's going to be rendered here and this addresses section first of all let's make a container for where these cards are going to go and then we'll go ahead and create the cards and now for my break points I want to standardize these as well all right so for my break points where am I breaking at eight hundred and a thousand so that's mobile and tablet so I'll say for mobile tablet okay so mobile View and only you can display one column tablet view I'm going to display three or excuse me two columns and then any more than that I'll display three and then we'll kind of play around with that see how it looks I might have to adjust it later on but for now um you know it's responsive enough for uh just testing things out Okay so after this I'm actually going to need my address card component and that is this right here fascinating so this card what we do oh I see what we did oh okay I see what's going on here so I actually made another address card component and this has all my address information on it with optional right content and the reason for this is because um you so I have the address displayed right here but this isn't the only place where I want to render the address I also am rendering it here on my orders page so that's why I made this part a reusable component now in addition you see that on your my address pages each address has a drop down of what you can do however when it's on your orders page it doesn't have that drop down so that's why I kind of build it out this way and it's the same logic that I'm gonna go with in this new app so we'll make a new component called a dress card and this will have all kind of the basic styling on it yeah I don't have a name on any of these addresses I just realized huh interesting well we'll take care of that later for now let's just go ahead and uh copy this address card component so we got another component for our component Library which is an address card and for the styles what we can do is just format these two our styles for the full name I believe we're just getting rid of that straight up okay I won't need to do this either all right so let's just do this so we're going to have a left and a right section left is where the address is going to go and the right is where an optional right content is going to go which is going to be that drop down now for the left I don't need a full name although we're going to have to add a name later on we just kind of forgot it for now we don't have this country list yet for the types what we're going to do is we're going to import address and some functional components and for the address card which is this component is going to take an address an optional right content and for this do we want to pluck everything off here yeah why not so we'll say address one just gonna render on top address two we can just replace it by address to no need for a full name for render country name would you say country and that's in a div all right and then for zip code all right so for this address card it's gonna have border border box shadow all right all right so we're going to pass an address right content it's going to render these on the left optional right contact on the right looking good all right cool so a dress card is taken care of and now what we need to do is still create this address okay so then with that component we're going to be using it and basically just in a parent component there are going to be creating just for this my addresses page we basically use this component but we form the drop down menu that we pass in before okay and no styling needed so let's actually Hmm this is this thing as well yeah let's actually copy this because that might be easier okay so first of all we want our component from a dress card now with unsetting the address what we are getting all right so that is going to be coming from our dispatchers our address dispatchers all right so we are going to want to be able to delete an address whenever we call this delete and what we're going to be doing all right a lot of patching together here drop down menu page don't need that don't need that okay post type set this at this don't need this drop down menu from components and let's just go all right pretty much just get getting everything functional for now then I gotta do a quick mini self review success all right so now let's figure out what I just did okay so for this address what we are going to do is we're pretty much going to use this address card and we're going to use a right drop down menu for the right component so we're importing the address card drop down menu we're going to be deleting the address whenever we click the drop down menu and choose delete so we're going to need that dispatcher function here toast type just a display or toast from our types we are importing address and we have to rename this because the component is named address then our dispatch function and our just our component typing then for the address props we're just going to be passing in an address and then we are saying that we were displaying the address card and on the right we're just playing a drop down menu when you edit it's going to log out edit for now gonna change this to actually update the active address then navigate to that page but just have that as a to do for now and then on delete what we can do is we can call this delete address by passing in the address ID and it says address deleted and all right so a couple things that we can do from here before we even start testing everything out is that let's do the cell products in here yeah okay so first I just want to put this in a try catch so for the catch all right so whenever you click delete it's going to try to delete it and then all right so when you click delete try to delete it make requests to the back end and then delete it in my Redux store and then display the toast address deleted now if you get an error then just log it out and display the erratos that says error deleting address now whenever you click edit what it's going to do is something similar to this it's going to update manager and navigate you to that page so store manager and we need navigate from react router Dom because when editing you go to a new page and then for navigate you plug it from here and then for this it's actually the same thing so whenever you click edit you're going to update the manager and set the active address to basically the one that you are editing and then you're going to navigate to create at address page which will now have an active address all right that looks good so far and now what we need to do is just actually render these addresses out instead of returning null right here okay so create this function to render addresses but first import that so import that address component we're just working on and then create this function to render addresses render addresses and the key is the address ID and then if you have addresses then render them as address cards in this address section so now let's see what we're working with okay looking good okay so I can either click to add a new address from there or I can edit this beautiful and I will say 456 Apple Lane submit that all right address updated my address updated and then before I delete this I do want to add padding to this and what was my padding here 12 I think all right merge modern 12 but we move that away from the section heading so I can have this so in that case what I can do for my dresses is I can just say margin top 12. all right so now that should give me this margin right here I already saw that editing worked and actually let me edit it without any if your S2 is a required field and that should not be the case so let's change this validation right off the bat so the address details for address to it's not required and then all right so no more error and then submit that and then all right looking good all right and then last but not least make sure deletion Works address deleted no addresses to display looking good all right so we can now add edit and delete addresses ah yeah did we knock these two out so buy her my dresses this is the ux for everything by create an edit Address we just tested that out and we got some to Do's but I will consider this feature good for now yeah a lot of cleanup to do but I just want to make sure everything's working correctly for now yeah I think we're looking alright now another thing that I probably want to do is fetch these addresses whenever we log in since on this page we aren't fetching them anywhere and I actually don't think that we want to yeah so we actually don't need to fetch our addresses every time we go to this page because what we can do is whenever we log out and log back in it's part of this like overall app initialization we could just fetchy dresses here and then whenever we are managing our addresses like adding and editing new ones we can just um add and edit it right from the store and then when we come back let's say navigate away and come back to this page like we don't need to fetch it again because everything should already be in sync so yeah I think we'll save that for later though since it's kind of out of scope for this video but for right now yeah uh buyer my dresses create net addresses so in the next video what we'll do is we'll go back to this buyer add to cart button so whenever they're doing this we'll finish that logic remember we were going to make that a warning modal just to give them a heads up they're trying to add products from two different sellers to their cart kind of give them a little bit a better indicator what's going on and why they can't do that and then from there it's really uh yeah the checkout page where you can basically create an order and then as part of this page they would need to select those fancy new addresses that we just created as well and then really just displaying their orders all right so four items left to do deadline is six days away but I think we're on a on a good Pace I got a good feeling about this so yeah as usual uh thank you guys for watching and I'll see you next video
