With timestamps:

00:00 - alrighty i'll welcome back and in this
00:02 - video we are going to be taking a deeper
00:04 - dive into transactions
00:06 - so just to recap a transaction
00:10 - is basically an instruction from an
00:12 - account
00:13 - requesting some kind of update to the
00:15 - state of the ethereum network
00:17 - now the most simple example would be a
00:20 - transaction
00:22 - requesting a transfer of ether from one
00:25 - account to another
00:26 - and in this example the part of the
00:28 - network that would update is of course
00:30 - the account balance of this blue person
00:32 - and this green person right here
00:35 - now on that note
00:37 - transactions can also be instructions to
00:40 - the network to execute smart contracts
00:42 - now an important point to make is that
00:45 - all transactions are always initiated by
00:48 - an eoa in other words by a human or an
00:51 - account with a private key
00:53 - contracts however once triggered let me
00:56 - draw a little arrow here so once they
00:59 - are initially kicked off by an eoa they
01:02 - can indeed let me find my little red dot
01:05 - here
01:06 - they can call other contracts is part of
01:08 - their execution so again in the ethereum
01:11 - network contracts can indeed call other
01:14 - contracts they just can't initiate the
01:17 - process the process has to be initiated
01:19 - by an account with a private key now
01:22 - another point to make is that all
01:24 - transactions on the ethereum network
01:26 - they are going to require a fee in order
01:29 - to be executed
01:30 - and this is because
01:32 - it does require the nodes in the network
01:34 - to do some amount of work and this work
01:37 - can be something like validating the
01:40 - transfer of ether checking people's
01:42 - account balance or of course executing a
01:44 - smart contract so the nodes since they
01:47 - do have to do some amount of work it
01:49 - does require a fee to execute a
01:51 - transaction
01:52 - all right so now that we have a basic
01:54 - understanding of what a transaction is
01:56 - what they're used for let's go ahead and
01:58 - dive in even deeper and take a look at
02:00 - some of the fields that are included in
02:02 - these transactions
02:04 - so the first thing that we're familiar
02:06 - with is the recipient of the transaction
02:10 - now
02:11 - the recipient of a transaction can
02:13 - either be another eoa which you can just
02:15 - think of as an individual a human
02:18 - or as we said a smart contract
02:21 - now whenever the recipient is another
02:23 - ela
02:24 - then what that means is that the
02:27 - transaction itself is simply a transfer
02:30 - value from one account to another
02:32 - account now when the recipient is a
02:34 - contract account that transaction is
02:37 - going to trigger the code in this
02:39 - contract to run or execute
02:41 - now the value field in transaction you
02:44 - can probably guess this this is just the
02:45 - amount of ether that you want to send to
02:48 - the recipient and the recipient in this
02:50 - case can be both the eoa or
02:53 - a smart contract
02:54 - now moving on from that we have this
02:58 - n-o-n-c-e pronounced nonce so what is
03:01 - the nonce a nonce is a unique number
03:04 - that is required for every single
03:06 - transaction
03:08 - now for eoas this number is the number
03:11 - of transactions sent
03:13 - from the account now for contract
03:15 - accounts it's the number of contracts
03:16 - created by the account
03:18 - now if you're wondering
03:20 - what's the point of having this random
03:22 - value in there it seems kind of uh silly
03:24 - or nonsensical hence the name nonce but
03:28 - it's actually a pretty good reason and
03:29 - that is a different value is needed for
03:32 - every transaction to essentially prevent
03:35 - the network from processing the same
03:36 - transactions over and over again
03:39 - really as an attempt to get more fees
03:41 - now the signature field right here
03:44 - this is the digital signature that was
03:46 - generated from the private key that we
03:48 - talked about i believe it was in the
03:49 - last video
03:51 - and what this basically does is it
03:53 - allows the account owner to authorize
03:56 - the transaction
03:57 - now this data field right here this is
03:59 - actually a pretty interesting one we'll
04:01 - be getting into this a bit more later
04:03 - when we write our own smart contracts
04:05 - but high level overview this is an
04:07 - optional field used to include really
04:10 - any arbitrary data now it's used
04:12 - primarily whenever you're calling smart
04:15 - contracts because it can indicate which
04:17 - functions to run which parameters to use
04:19 - so on and so forth
04:21 - now you don't use it too much whenever
04:24 - you are making a transaction to another
04:26 - eoa you can include data whenever you're
04:29 - making a transaction to a eoa however
04:32 - whenever you do so it's really just
04:33 - ignored by the ethereum protocol so for
04:36 - now just remember that this data field
04:38 - is going to be used whenever we are
04:40 - sending transactions to smart contracts
04:43 - now these fields right here gas limit
04:45 - max priority fee per gas max fee per
04:47 - guess i did want to include them in this
04:49 - tutorial since they are an important
04:52 - part of the transaction however i don't
04:54 - want to get too deep in the weeds
04:56 - because we are going to have a separate
04:57 - tutorial covering each of these concepts
05:00 - in more detail later on a dedicated gas
05:03 - tutorial it's going to be a pretty
05:05 - interesting however just to kind of uh
05:08 - complete this tutorial and you know not
05:11 - leave any gaps in your mind i will
05:13 - mention quickly a brief overview of what
05:15 - gas is
05:17 - so
05:18 - gas is essentially the fee required to
05:20 - process a transaction
05:22 - and it's based on how much computational
05:24 - effort is required by the network now
05:27 - for simple transactions like a transfer
05:30 - of ether from one person to another the
05:32 - fee isn't much
05:34 - however for complex smart contracts that
05:37 - require a lot of computational power
05:39 - that gas fee is going to be quite a bit
05:42 - so for now we can think of gas simply as
05:44 - a transaction fee
05:46 - and even though that isn't 100
05:48 - technically correct later on we can dive
05:51 - into exactly how everything is
05:52 - calculated and we'll clear up any
05:54 - misconceptions there but for right now
05:57 - all we have to remember is that whenever
05:59 - users are going to send a transaction
06:02 - that they are going to have to pay a fee
06:05 - and that is basically the gas right here
06:08 - and also i will mention this gas limit
06:10 - since it i guess it is related to this
06:13 - users are also going to include a value
06:15 - for gas limit and this is just going to
06:17 - indicate the maximum amount that they
06:19 - are willing to spend on a transaction
06:21 - now before i let you guys go i do want
06:23 - to mention one other thing and that is
06:25 - in addition to creating a transaction
06:28 - and having the recipient be either an
06:31 - eoa
06:32 - or an existing smart contract there is
06:35 - one other type of transaction there are
06:37 - actually a couple different types but uh
06:39 - one other type that i want to mention
06:40 - right now
06:41 - is a transaction for deploying brand new
06:44 - contracts to the network now as a
06:46 - developer whenever you want to deploy a
06:48 - new smart contract what you would do is
06:50 - you would actually create a transaction
06:52 - and have the recipient
06:54 - it's called a xero address it's
06:56 - basically addressed with all zeros
06:59 - and again this is not an eoa or a
07:02 - contract address it's basically a
07:04 - special address meaning
07:07 - if i send it to this destination it
07:09 - basically just means create this
07:11 - contract
07:12 - deploy it for the very first time on the
07:14 - network
07:15 - so again that's called a xero address
07:17 - and it's used whenever you're deploying
07:19 - contracts for the very first time
07:21 - now there is a few other things that we
07:23 - should cover related to transactions but
07:26 - covering them now wouldn't make a lot of
07:27 - sense we'll get into those a little bit
07:29 - later on especially when we start
07:31 - getting our hands dirty coding some
07:32 - solidity contracts but for now thank you
07:35 - guys for watching don't forget to
07:36 - subscribe and i will see you later

Cleaned transcript:

alrighty i'll welcome back and in this video we are going to be taking a deeper dive into transactions so just to recap a transaction is basically an instruction from an account requesting some kind of update to the state of the ethereum network now the most simple example would be a transaction requesting a transfer of ether from one account to another and in this example the part of the network that would update is of course the account balance of this blue person and this green person right here now on that note transactions can also be instructions to the network to execute smart contracts now an important point to make is that all transactions are always initiated by an eoa in other words by a human or an account with a private key contracts however once triggered let me draw a little arrow here so once they are initially kicked off by an eoa they can indeed let me find my little red dot here they can call other contracts is part of their execution so again in the ethereum network contracts can indeed call other contracts they just can't initiate the process the process has to be initiated by an account with a private key now another point to make is that all transactions on the ethereum network they are going to require a fee in order to be executed and this is because it does require the nodes in the network to do some amount of work and this work can be something like validating the transfer of ether checking people's account balance or of course executing a smart contract so the nodes since they do have to do some amount of work it does require a fee to execute a transaction all right so now that we have a basic understanding of what a transaction is what they're used for let's go ahead and dive in even deeper and take a look at some of the fields that are included in these transactions so the first thing that we're familiar with is the recipient of the transaction now the recipient of a transaction can either be another eoa which you can just think of as an individual a human or as we said a smart contract now whenever the recipient is another ela then what that means is that the transaction itself is simply a transfer value from one account to another account now when the recipient is a contract account that transaction is going to trigger the code in this contract to run or execute now the value field in transaction you can probably guess this this is just the amount of ether that you want to send to the recipient and the recipient in this case can be both the eoa or a smart contract now moving on from that we have this nonce pronounced nonce so what is the nonce a nonce is a unique number that is required for every single transaction now for eoas this number is the number of transactions sent from the account now for contract accounts it's the number of contracts created by the account now if you're wondering what's the point of having this random value in there it seems kind of uh silly or nonsensical hence the name nonce but it's actually a pretty good reason and that is a different value is needed for every transaction to essentially prevent the network from processing the same transactions over and over again really as an attempt to get more fees now the signature field right here this is the digital signature that was generated from the private key that we talked about i believe it was in the last video and what this basically does is it allows the account owner to authorize the transaction now this data field right here this is actually a pretty interesting one we'll be getting into this a bit more later when we write our own smart contracts but high level overview this is an optional field used to include really any arbitrary data now it's used primarily whenever you're calling smart contracts because it can indicate which functions to run which parameters to use so on and so forth now you don't use it too much whenever you are making a transaction to another eoa you can include data whenever you're making a transaction to a eoa however whenever you do so it's really just ignored by the ethereum protocol so for now just remember that this data field is going to be used whenever we are sending transactions to smart contracts now these fields right here gas limit max priority fee per gas max fee per guess i did want to include them in this tutorial since they are an important part of the transaction however i don't want to get too deep in the weeds because we are going to have a separate tutorial covering each of these concepts in more detail later on a dedicated gas tutorial it's going to be a pretty interesting however just to kind of uh complete this tutorial and you know not leave any gaps in your mind i will mention quickly a brief overview of what gas is so gas is essentially the fee required to process a transaction and it's based on how much computational effort is required by the network now for simple transactions like a transfer of ether from one person to another the fee isn't much however for complex smart contracts that require a lot of computational power that gas fee is going to be quite a bit so for now we can think of gas simply as a transaction fee and even though that isn't 100 technically correct later on we can dive into exactly how everything is calculated and we'll clear up any misconceptions there but for right now all we have to remember is that whenever users are going to send a transaction that they are going to have to pay a fee and that is basically the gas right here and also i will mention this gas limit since it i guess it is related to this users are also going to include a value for gas limit and this is just going to indicate the maximum amount that they are willing to spend on a transaction now before i let you guys go i do want to mention one other thing and that is in addition to creating a transaction and having the recipient be either an eoa or an existing smart contract there is one other type of transaction there are actually a couple different types but uh one other type that i want to mention right now is a transaction for deploying brand new contracts to the network now as a developer whenever you want to deploy a new smart contract what you would do is you would actually create a transaction and have the recipient it's called a xero address it's basically addressed with all zeros and again this is not an eoa or a contract address it's basically a special address meaning if i send it to this destination it basically just means create this contract deploy it for the very first time on the network so again that's called a xero address and it's used whenever you're deploying contracts for the very first time now there is a few other things that we should cover related to transactions but covering them now wouldn't make a lot of sense we'll get into those a little bit later on especially when we start getting our hands dirty coding some solidity contracts but for now thank you guys for watching don't forget to subscribe and i will see you later
