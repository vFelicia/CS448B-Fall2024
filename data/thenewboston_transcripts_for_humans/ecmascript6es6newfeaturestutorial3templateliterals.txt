With timestamps:

00:00 - all right hostas welcome back and in
00:02 - this video I'm going to show you how to
00:04 - use template literals so you know before
00:07 - whenever we had some variable and we
00:10 - wanted to include it in a string what we
00:12 - would have to do is something like this
00:14 - so let me just go ahead and log
00:17 - something out so I'll say console.log
00:19 - all right so I'm trying to say um like
00:23 - my favorite person is Bucky because he
00:26 - smells good so my favorite person is Ari
00:30 - so then I need like a space and then I
00:33 - need a name is that right yep all right
00:36 - so there's no space here so I had to
00:38 - have another space you know sage because
00:40 - he smells good
00:43 - all right now hopefully whenever I run
00:45 - this Ari everything is looking good well
00:49 - this is kind of a pain in the butt
00:50 - because I mean shouldn't there be an
00:53 - easier way to use variables inside a
00:55 - string well that's what the developers
00:58 - of es6 thought too so they gave you one
01:01 - and it's called template literals so the
01:04 - first thing that you need to do is
01:06 - instead of using single quotes or double
01:09 - quotes anytime you want to use this new
01:11 - syntax you actually use backticks
01:13 - now this is to the left of the one on
01:16 - your keyboard right above the tab if you
01:18 - have the same keyboard as me so again I
01:21 - know you guys probably can't see the
01:22 - difference between a single quote in
01:24 - these back ticks on YouTube but make
01:27 - sure that you are indeed using back
01:28 - ticks so just like before you write my
01:32 - Eddie I Giada all your other stuff just
01:35 - like this but whenever you want to use a
01:38 - bit of JavaScript instead of having Plus
01:41 - whatever that all you do is this use
01:44 - dollar sign curly braces and then
01:47 - whatever variable name you want right
01:50 - here so isn't this a much more beautiful
01:53 - syntax I think so
01:55 - so same outcome but your code is a
01:58 - little bit cleaner a little bit more
02:00 - condensed now another thing I want to
02:02 - point out and I don't even know if I
02:04 - probably should but say this
02:09 - so I'm going to say let's a equals five
02:11 - and let's B equals seven now you can
02:15 - actually use JavaScript expressions in
02:18 - here they aren't only limited to um you
02:21 - know variables like a B and name you can
02:24 - actually do something like this
02:25 - my favorite person is a plus B and it
02:30 - would calculate 212 so in other words it
02:33 - would find the result of this expression
02:35 - and then output it into your string now
02:39 - I say you really don't want to do this
02:40 - because most of the time you want to
02:41 - separate out your logic from your
02:44 - formatting in other words you would want
02:46 - to make some variable called a result
02:48 - and set this equal to a plus B and then
02:51 - just output result right here but for
02:54 - the demo I'll keep that in there just to
02:56 - show you guys that any valid JavaScript
02:58 - you can indeed have in there even though
03:01 - I wouldn't recommend it so anyways that
03:02 - is template literals basically a way
03:05 - that you can include snippets of
03:07 - JavaScript inside strings all right so
03:10 - let me start my recording because I
03:11 - forgot to mention something I actually
03:13 - stopped the video and that was like aw
03:15 - crap I forgot to mention something kind
03:17 - of important so before if you ever tried
03:20 - to kind of make a string and have across
03:22 - multiple lines in JavaScript it would be
03:24 - a real pain in the butt but now all you
03:26 - have to do is this whenever you write a
03:30 - new line in your code in JavaScript if I
03:33 - go ahead and run this little example
03:35 - it'll actually interpret that as a new
03:37 - line so instead of just having like plus
03:41 - and then adding a new line character and
03:43 - then writing the rest of your code and
03:45 - trying to concatenate them in some kind
03:47 - of weird way whenever you write a new
03:50 - line using template literals it's going
03:53 - to interpret that is the new line
03:54 - character so you see that this little
03:57 - string and this little string we're
03:59 - indeed on separate lines so there you go
04:02 - that's what a template literal is then
04:04 - guys for watching I'll see you guys next
04:06 - video

Cleaned transcript:

all right hostas welcome back and in this video I'm going to show you how to use template literals so you know before whenever we had some variable and we wanted to include it in a string what we would have to do is something like this so let me just go ahead and log something out so I'll say console.log all right so I'm trying to say um like my favorite person is Bucky because he smells good so my favorite person is Ari so then I need like a space and then I need a name is that right yep all right so there's no space here so I had to have another space you know sage because he smells good all right now hopefully whenever I run this Ari everything is looking good well this is kind of a pain in the butt because I mean shouldn't there be an easier way to use variables inside a string well that's what the developers of es6 thought too so they gave you one and it's called template literals so the first thing that you need to do is instead of using single quotes or double quotes anytime you want to use this new syntax you actually use backticks now this is to the left of the one on your keyboard right above the tab if you have the same keyboard as me so again I know you guys probably can't see the difference between a single quote in these back ticks on YouTube but make sure that you are indeed using back ticks so just like before you write my Eddie I Giada all your other stuff just like this but whenever you want to use a bit of JavaScript instead of having Plus whatever that all you do is this use dollar sign curly braces and then whatever variable name you want right here so isn't this a much more beautiful syntax I think so so same outcome but your code is a little bit cleaner a little bit more condensed now another thing I want to point out and I don't even know if I probably should but say this so I'm going to say let's a equals five and let's B equals seven now you can actually use JavaScript expressions in here they aren't only limited to um you know variables like a B and name you can actually do something like this my favorite person is a plus B and it would calculate 212 so in other words it would find the result of this expression and then output it into your string now I say you really don't want to do this because most of the time you want to separate out your logic from your formatting in other words you would want to make some variable called a result and set this equal to a plus B and then just output result right here but for the demo I'll keep that in there just to show you guys that any valid JavaScript you can indeed have in there even though I wouldn't recommend it so anyways that is template literals basically a way that you can include snippets of JavaScript inside strings all right so let me start my recording because I forgot to mention something I actually stopped the video and that was like aw crap I forgot to mention something kind of important so before if you ever tried to kind of make a string and have across multiple lines in JavaScript it would be a real pain in the butt but now all you have to do is this whenever you write a new line in your code in JavaScript if I go ahead and run this little example it'll actually interpret that as a new line so instead of just having like plus and then adding a new line character and then writing the rest of your code and trying to concatenate them in some kind of weird way whenever you write a new line using template literals it's going to interpret that is the new line character so you see that this little string and this little string we're indeed on separate lines so there you go that's what a template literal is then guys for watching I'll see you guys next video
