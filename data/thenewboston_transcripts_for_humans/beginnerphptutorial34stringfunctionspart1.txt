With timestamps:

00:00 - hi this is Alex from PHP academy' dog
00:02 - back with another video for the new
00:04 - Boston now in this video we're going to
00:06 - be looking at different string functions
00:08 - inside PHP and how you use them and why
00:11 - they might be useful so we're going to
00:13 - go for you through a few string
00:15 - functions in this video in this video
00:17 - the parts of this video and we're just
00:21 - going to use an example string along the
00:23 - way so let's go ahead and create our
00:25 - example string so I'm going to create a
00:27 - new variable called string and this is
00:29 - going to be equal to a particular string
00:31 - so for example I'm going to say this is
00:34 - an example string so we're going to be
00:39 - doing a few things with this particular
00:41 - string along the length of the videos
00:44 - that we're going to create and we're
00:46 - going to be creating new variables which
00:48 - use these functions and apply these
00:50 - functions to this particular string so
00:53 - first of all let's go ahead and look at
00:55 - string word count now you can imagine
00:57 - why this may be useful in particular
00:59 - situations you might want want to count
01:02 - a certain amount of words maybe through
01:04 - user input or through database use etc
01:08 - etc but I'm sure you can find a use in
01:12 - your own web application but for now
01:13 - this is how you use it now I'm going to
01:16 - create a new variable called string word
01:18 - count and this is going to be equal to
01:21 - the function name which is string oh
01:23 - sorry STR word count now this function
01:27 - takes three arguments in total only one
01:31 - of them is required and the one that is
01:32 - required is is the actual string itself
01:34 - so I'm just referencing this variable
01:37 - here which is equal to this string here
01:40 - so let's go hat down here and echo this
01:42 - out and then we'll talk about
01:45 - the different arguments we can give this
01:47 - function to perhaps make it more useful
01:49 - to us okay so let's go ahead to a
01:53 - browser and refresh the page and see
01:54 - what we have okay so we get a value of
01:56 - five returned when we echo out the the
02:00 - result of this function so you can see
02:02 - that we've got one two three four five
02:04 - words the full-stop doesn't count that's
02:06 - not included in our list of words we can
02:10 - specify things that we want to class as
02:13 - words maybe symbols later on but for now
02:16 - this is how many words are in the string
02:17 - now let's go ahead and look at an
02:19 - argument we can give this so we can give
02:22 - this term this the second argument as
02:24 - zero one or two so I'll go through each
02:27 - one and explain which one which is which
02:30 - so zero is what we've already seen this
02:33 - just returns an integer value as we've
02:36 - already seen with the amount of words in
02:38 - there with no other argument specified
02:40 - one will produce an array where the key
02:45 - is equal to the word itself so you know
02:49 - we well the key is irrelevant in this
02:51 - orbit just be the default so it will be
02:52 - zero one two three four five and then
02:55 - each value of each key will contain the
03:00 - word in the string so what we're
03:03 - actually doing is we're creating an
03:04 - array and we're almost splitting this up
03:06 - so let's go ahead and try and echo this
03:08 - out and you'll see that we'll just get a
03:10 - value here of array this is because it's
03:14 - now stored as an array after we've given
03:15 - this argument so what we can do just for
03:18 - just a really quick is we can use this
03:20 - print R here and enclose the word count
03:23 - in this and this will display all the
03:25 - elements of an array Oh smell that wrong
03:30 - okay so print are let's go back refresh
03:33 - and now what you can see is we've got 0
03:35 - 1 2 3 4 and these all these keys that
03:40 - we've been returned equal the words that
03:42 - we've words that we have so we're not
03:44 - using an associative array here we're
03:46 - using just a normal array and we've got
03:48 - this is an example string without the
03:50 - full-stop like I mentioned earlier so
03:52 - that's how we're going to put our
03:53 - results into an array now if we use a
03:56 - string with the argument - this is going
03:59 - to return an associative array now as
04:01 - you can see here we've got each key is
04:03 - as normal so we start at 0 and we're
04:05 - ending at 4 what this will now do is it
04:08 - over the key will equal the position so
04:11 - the key will now become an associative
04:14 - value it will have the position of where
04:16 - each word starts and then the value of
04:19 - each key will be the word itself so
04:22 - let's go ahead and refresh this now you
04:24 - can see 0 that's a position this the
04:27 - word this is a position 0 is is it
04:29 - position 5 and is at position 8 example
04:33 - is at position 11 and string is at
04:35 - position 19 inside of our string here so
04:37 - they're the three over three different
04:40 - arguments you can give in this or the
04:41 - three different values rather you can
04:43 - give in this argument and there is a
04:45 - last let's just change this back to yeah
04:49 - we'll change it - we'll leave that one
04:50 - the third argument that we can give is a
04:54 - list of words that we want to include as
04:57 - words so by default a full-stop will not
04:59 - be included as a word so because this is
05:01 - part of string here what we could do is
05:04 - come in here and specify a full-stop for
05:07 - example inside our single quotation
05:09 - marks so a specifying the full-stop is
05:12 - part of a word so now what's going to
05:14 - happen is let's say we return yet will
05:17 - return one and we refresh you can see
05:20 - that we've we're still giving back an
05:24 - associative array even though that zero
05:27 - for example
05:29 - and we'll just echo out this what you
05:34 - can see that's happened is we've still
05:36 - got five words but if we then go back
05:38 - and sorry print our if we then go back
05:44 - and change this value up here to one or
05:46 - two so we're producing either our array
05:48 - or an our associative array you can see
05:51 - that instead of just string we've got
05:53 - string with the full stop on the end
05:54 - there so now let's go ahead and separate
05:56 - this full stop from the from the word
05:59 - string and refresh and you can see it's
06:02 - given us five different or six different
06:04 - words

Cleaned transcript:

hi this is Alex from PHP academy' dog back with another video for the new Boston now in this video we're going to be looking at different string functions inside PHP and how you use them and why they might be useful so we're going to go for you through a few string functions in this video in this video the parts of this video and we're just going to use an example string along the way so let's go ahead and create our example string so I'm going to create a new variable called string and this is going to be equal to a particular string so for example I'm going to say this is an example string so we're going to be doing a few things with this particular string along the length of the videos that we're going to create and we're going to be creating new variables which use these functions and apply these functions to this particular string so first of all let's go ahead and look at string word count now you can imagine why this may be useful in particular situations you might want want to count a certain amount of words maybe through user input or through database use etc etc but I'm sure you can find a use in your own web application but for now this is how you use it now I'm going to create a new variable called string word count and this is going to be equal to the function name which is string oh sorry STR word count now this function takes three arguments in total only one of them is required and the one that is required is is the actual string itself so I'm just referencing this variable here which is equal to this string here so let's go hat down here and echo this out and then we'll talk about the different arguments we can give this function to perhaps make it more useful to us okay so let's go ahead to a browser and refresh the page and see what we have okay so we get a value of five returned when we echo out the the result of this function so you can see that we've got one two three four five words the fullstop doesn't count that's not included in our list of words we can specify things that we want to class as words maybe symbols later on but for now this is how many words are in the string now let's go ahead and look at an argument we can give this so we can give this term this the second argument as zero one or two so I'll go through each one and explain which one which is which so zero is what we've already seen this just returns an integer value as we've already seen with the amount of words in there with no other argument specified one will produce an array where the key is equal to the word itself so you know we well the key is irrelevant in this orbit just be the default so it will be zero one two three four five and then each value of each key will contain the word in the string so what we're actually doing is we're creating an array and we're almost splitting this up so let's go ahead and try and echo this out and you'll see that we'll just get a value here of array this is because it's now stored as an array after we've given this argument so what we can do just for just a really quick is we can use this print R here and enclose the word count in this and this will display all the elements of an array Oh smell that wrong okay so print are let's go back refresh and now what you can see is we've got 0 1 2 3 4 and these all these keys that we've been returned equal the words that we've words that we have so we're not using an associative array here we're using just a normal array and we've got this is an example string without the fullstop like I mentioned earlier so that's how we're going to put our results into an array now if we use a string with the argument this is going to return an associative array now as you can see here we've got each key is as normal so we start at 0 and we're ending at 4 what this will now do is it over the key will equal the position so the key will now become an associative value it will have the position of where each word starts and then the value of each key will be the word itself so let's go ahead and refresh this now you can see 0 that's a position this the word this is a position 0 is is it position 5 and is at position 8 example is at position 11 and string is at position 19 inside of our string here so they're the three over three different arguments you can give in this or the three different values rather you can give in this argument and there is a last let's just change this back to yeah we'll change it we'll leave that one the third argument that we can give is a list of words that we want to include as words so by default a fullstop will not be included as a word so because this is part of string here what we could do is come in here and specify a fullstop for example inside our single quotation marks so a specifying the fullstop is part of a word so now what's going to happen is let's say we return yet will return one and we refresh you can see that we've we're still giving back an associative array even though that zero for example and we'll just echo out this what you can see that's happened is we've still got five words but if we then go back and sorry print our if we then go back and change this value up here to one or two so we're producing either our array or an our associative array you can see that instead of just string we've got string with the full stop on the end there so now let's go ahead and separate this full stop from the from the word string and refresh and you can see it's given us five different or six different words
