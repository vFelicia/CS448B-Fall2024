With timestamps:

00:00 - alrighty and welcome back to another
00:01 - video and in this one what we're going
00:03 - to be doing is working on this
00:05 - connection status component however
00:07 - before you hop right into that I want to
00:09 - mention a few updates I made between the
00:11 - last video and this one
00:12 - so the first one is I built out this
00:15 - network select modal and I figured that
00:18 - I didn't really want to make a video
00:20 - about this because the logic is pretty
00:23 - much the exact same as the select
00:25 - account modal and it just felt a little
00:28 - bit repetitive wanted to uh save you
00:29 - guys some time
00:31 - another thing that I did is I added a
00:34 - little bit of scroll logic as you can
00:36 - see a little responsiveness so you see
00:39 - when the screen is wide that these two
00:42 - top cards they are displaying in a row
00:44 - to the left and right of each other and
00:46 - then I just have it where if it gets to
00:48 - a certain size a break point I think
00:50 - it's 900 pixels then it just turns to a
00:52 - column instead
00:54 - and then the last little change I did is
00:57 - you know how I said that we were gonna
00:58 - break out that edit button component
01:00 - since we pretty much had uh I don't know
01:02 - just to dry up the code a little bit
01:04 - so I now have in components this edit
01:07 - button where you just pass it on click
01:09 - Handler and of course that is this
01:11 - button right here
01:13 - this pencil icon
01:15 - so with that being said what we're going
01:17 - to do is start working on this
01:19 - connection status component
01:21 - and for this what I want to have for the
01:24 - logic
01:25 - is we already track which devices you're
01:28 - connected to
01:30 - there's a plain fine overhead don't mind
01:32 - that and the connection status for a
01:36 - certain Network because remember like I
01:38 - said that I can be connected to this
01:40 - iMac through multiple networks however
01:43 - whenever we're writing the speed test
01:45 - app we just want to check if the
01:47 - connection exists over a certain Network
01:50 - so that is in where is it Network
01:53 - account online statuses
01:56 - so it is keyed by the network ID and
01:58 - then in here we have the account number
02:01 - for the device and it's going to say if
02:03 - it's online or offline for that Network
02:06 - so of course whenever we write this
02:07 - component we need at least two
02:09 - connection statuses is it connected or
02:12 - is it disconnected now I'm also going to
02:15 - include a third connection status
02:16 - something to display here called invalid
02:19 - and that is just if you don't have
02:21 - either one of these selected for example
02:24 - you have a network but no device then
02:26 - I'm just going to display it invalid
02:27 - here because I don't know it just field
02:29 - a bit strange saying disconnected if you
02:33 - you know you don't even have the proper
02:35 - information to determine the connection
02:36 - status so on that note let me go ahead
02:39 - in first and foremost start adding those
02:44 - types for connections so I'm going to
02:47 - make a new type file
02:50 - and I'm gonna make a new enum and I'll
02:54 - just say connection
02:56 - status
02:59 - so again that is connected
03:01 - and this will just be equal to string
03:04 - connected
03:07 - and then I'll make one for disconnected
03:10 - and invalid
03:12 - disconnected
03:14 - and invalid in case you don't have one
03:17 - of those items selected
03:19 - all right looking good that's all we
03:21 - need in here now let me just go ahead
03:23 - and Export this
03:29 - connections
03:30 - or connection status
03:33 - and the reason that I want to put it in
03:34 - here rather than in the component itself
03:37 - whenever you write it is because we're
03:38 - going to need it in a couple different
03:40 - places
03:41 - so on that note ready to move on
03:44 - actually let me keep this open
03:46 - so of course we're going to need this
03:48 - connection status
03:50 - and also the Styles file eventually
03:53 - however what I'm going to do before I
03:55 - start writing any code in here is I am
03:58 - actually going to make a new hook and
04:01 - this Hook is going to basically say that
04:04 - for the active account number and the
04:07 - active ID active account number in
04:09 - Active network ID I mean then it's just
04:12 - going to return a Boolean to say are you
04:14 - connected to this device through this
04:17 - network or not now I want to make it a
04:20 - hook rather than just writing it in this
04:23 - component because we're actually going
04:25 - to be using this same logic for the main
04:28 - button too
04:29 - now for the main button we'll say that
04:31 - if you are not connected then we're
04:33 - going to disable this button because of
04:36 - course it doesn't make sense to you know
04:37 - enable the button if you can't can't
04:40 - send any requests to any other device so
04:42 - since we're going to be using that same
04:44 - logic in this component and also in this
04:46 - component right here that's why I want
04:47 - to split it out into a hook
04:49 - so on that let me just go ahead and make
04:51 - a new directory and I'll show you how I
04:54 - set up my hooks
04:55 - say hooks and
04:58 - for the hook naming convention I prefix
05:01 - everything with use
05:03 - and oh no I just really like that
05:05 - pattern so I'll say
05:08 - um make a new typescript file I'll say
05:10 - use is
05:12 - connected
05:13 - [Music]
05:14 - all right and now let me go ahead and
05:17 - import everything we are going to need
05:21 - all right so to make a hook I'll say
05:23 - const use is connected and this is going
05:27 - to be equal to actually
05:29 - a function that's going to return a
05:31 - Boolean
05:37 - right now so export default
05:40 - is connected
05:42 - and another thing that I want to do
05:44 - before I even start writing out the meat
05:47 - and potatoes of this is go ahead and
05:48 - make a new type file index and kind of
05:52 - like how we set up the types or the
05:55 - store where we have this index or excuse
05:57 - me not the store these uh types right
06:00 - here where we have this index file and
06:02 - it kind of Aggregates all these just to
06:04 - make the Imports a little bit cleaner
06:05 - that's the same thing that I want to do
06:07 - with hooks so I'm going to import
06:12 - use is connected
06:15 - from apps speed test
06:20 - is connected
06:22 - and then I'll just export that
06:28 - all right so this is the basic structure
06:30 - for how we're going to be writing all
06:31 - these hooks again I'm just going to name
06:33 - the file whatever the hook is and then
06:35 - just export it right here
06:37 - now with that being said let's go ahead
06:39 - and write this
06:40 - so the first thing that we need to do is
06:43 - for this hook we need to pull it in the
06:46 - active account
06:47 - in the Active network
06:51 - so to do that is let's say const
07:01 - this is equal to a u selector
07:03 - for get active account number
07:07 - and then do the same for Active network
07:17 - all right so pulling in the active
07:19 - account number and Active network now
07:21 - from here once we have those two values
07:24 - again like I said what we need to do is
07:26 - we need to check in Redux
07:28 - under system
07:29 - Network account online statuses because
07:32 - again this is keyed by the network ID
07:35 - which is going to be the Active network
07:36 - and then the account number under it
07:40 - which is going to be our active account
07:41 - right here and from that we're going to
07:43 - pull the value to see if it's online or
07:45 - offline so let me go ahead and make
07:48 - another
07:48 - [Music]
07:51 - pull in the network account online
07:53 - statuses
07:55 - and those are pulled in from
07:59 - this selector right here
08:01 - now for the return value what I can do
08:03 - is just use a memo
08:09 - and for this
08:14 - all right
08:16 - so for the first bit of logic I'm just
08:18 - going to say that if you don't have any
08:22 - active account or any network selected
08:25 - if one of these is blank then we're just
08:27 - going to return false off the bat
08:29 - because if you don't have a key piece in
08:31 - that connection then there's no way that
08:32 - it could possibly be connected be
08:34 - connected I mean so if no active account
08:37 - number or no Active network ID then I'm
08:41 - just going to return false
08:43 - now aside from this if you do have both
08:46 - of these pieces of information right
08:48 - here
08:49 - so let me go ahead and select I do have
08:50 - an active account now an active network
08:53 - ID then we're going to go ahead and look
08:55 - in here to see what the status is
08:58 - so otherwise what we want to do is we
09:01 - want to return from Network account
09:02 - online statuses
09:04 - and we want to key it by Active network
09:07 - ID now another thing that I'm going to
09:10 - do is I'm going to throw in a question
09:11 - mark right here now the reason that I
09:13 - have this and this probably isn't going
09:15 - to happen too often but it is a
09:17 - situation we need to look out for is
09:20 - there's going to be times where you have
09:22 - an active account number or Active
09:25 - network ID in your speed test app
09:27 - however that doesn't exist in the system
09:30 - data now if you're like well when's that
09:33 - can be the case because whenever we
09:35 - select one of these we're essentially
09:37 - selecting from the system data well the
09:40 - situation where that would happen is
09:43 - let's say that you have an active
09:44 - Network selected right here the New
09:46 - Boston Network well if you go in here in
09:50 - your system data and you delete this
09:51 - right here this is going to delete it
09:53 - from the system data however it isn't
09:56 - going to update everywhere in all these
09:58 - different apps and kind of look for this
10:00 - network ID so we need to account for the
10:03 - fact that we can indeed have a network
10:05 - ID as our Active network ID that doesn't
10:08 - exist in the system anymore so that is
10:11 - why we're just including this question
10:13 - mark right here to say if you don't have
10:16 - this then you know it's undefined don't
10:18 - flip out or anything like that
10:20 - well if we do have it then under Network
10:23 - account online statuses the next thing
10:26 - we need to do is key in the active
10:28 - account number
10:30 - and then to see if this is online or not
10:32 - we're just going to say is this equal to
10:35 - online status
10:37 - Dot online
10:38 - now if this is true then it's going to
10:41 - return true
10:43 - and of course false false yada yada
10:46 - simple stuff
10:48 - and that is our hook logic to say are we
10:51 - connected to this account over this
10:53 - network
10:54 - so now that we have that what I want to
10:56 - do is pop back in here
10:59 - into my connection status component and
11:01 - we can start right in this logic
11:04 - all right so let me go ahead and import
11:06 - that hook we just wrote
11:10 - and that's called to use is connected
11:17 - from apps.speedtest dot hooks
11:21 - now another thing that we're going to
11:23 - need is actually this right here both of
11:25 - these values
11:28 - the active account number and get Active
11:30 - network ID and then the last thing that
11:33 - we're going to need to import is this
11:35 - connection status type
11:38 - and what I actually want to do is import
11:41 - the connection status from apps
11:44 - test types however because this type is
11:48 - called connection status in that this
11:50 - component I'm working on is also called
11:52 - connection status
11:53 - what I'm gonna do whenever I have these
11:56 - naming conflicts is I just import it as
11:58 - t
12:02 - T connection status so this is the type
12:05 - connection status and then this of
12:06 - course refers to the component
12:08 - all right so now let me sort this a
12:12 - little bit okay so I want to pull in
12:17 - these
12:20 - the active account number and Active
12:21 - network ID because remember
12:23 - we can't just use this use is connected
12:27 - on its own because in our connection
12:29 - status this use is connected Boolean or
12:33 - this Hook is pretty much going to say
12:35 - are we connected or disconnected however
12:37 - the reason that we need to pull in these
12:39 - is because we need to check if one of
12:41 - them don't exist at all and if they
12:43 - don't then we're just going to say that
12:45 - this connection status is invalid
12:48 - so let me go ahead and say the const is
12:52 - connected is equal to this hook right
12:54 - here and now we can go ahead and write a
12:57 - function to get our connection status so
12:59 - if const
13:02 - store it in
13:04 - your book called connection status and
13:06 - say use memo
13:13 - and the reason that I'm using a memo is
13:15 - because I don't want to have to
13:17 - recalculate this on every render only if
13:19 - one of these key values is changed so
13:21 - just a little bit better um I don't know
13:24 - performance I guess
13:25 - of course this function is going to
13:27 - return one of these connection statuses
13:29 - right here so I'll just type it out to
13:31 - make sure returning right value
13:33 - and also maybe I can steal this as well
13:36 - all right so just like here whenever we
13:39 - didn't have one of those active count
13:41 - numbers or Active network ID we returned
13:43 - false we're going to kind of follow the
13:45 - same logic here however instead of
13:47 - returning false since we need to return
13:49 - one of these connection statuses
13:51 - in this case we're going to return
13:53 - connection status invalid now if we do
13:56 - have an active account number and active
13:57 - ID then all we really need to do is
14:00 - convert this is connected Boolean to
14:02 - either connected or disconnected
14:04 - connection status
14:06 - so I'll say return is connected
14:09 - if you are connected then I'll say t
14:12 - connection status connected is the
14:15 - status that you want otherwise T
14:18 - connection status dot disconnected
14:20 - is what we're going to be returning
14:23 - let me just update my dependencies and
14:27 - all right good to go so now this
14:29 - connection status memoize function is
14:32 - going to return one of these properly
14:34 - and now from here
14:37 - let's see well the first thing we're
14:39 - going to be doing with this is we'll
14:42 - pass it along to this icon and
14:45 - eventually in here we're going to accept
14:47 - the prop of the status and depending on
14:50 - that prop it knows whether to display a
14:53 - we'll say a green value for
14:55 - connected a red one for disconnected and
14:57 - we'll use gray for invalid so since
15:00 - we're going to be doing that I'll pass
15:02 - along in status
15:05 - and again this is throwing this error
15:07 - because we didn't type this out but
15:09 - we'll fix that in just a second
15:11 - now another thing that I want to do is I
15:13 - want to write the function to render
15:15 - this text right here so we'll just say
15:18 - connected disconnected or maybe for
15:20 - invalid I don't want to say invalid
15:22 - that's kind of weird maybe I'll put a
15:24 - dash or something so I'll say const
15:26 - render text
15:30 - and this is just going to be let me make
15:32 - indexed text
15:37 - all right so I'll have each of these
15:41 - Keys be either
15:46 - okay
15:47 - so for connected I'll just say connected
15:51 - let me just copy this save some time
15:55 - now for disconnected we'll just render
15:58 - the text and disconnect it and then if
16:00 - it is invalid I'll just write a dash
16:02 - like this for some reason I just think
16:04 - invalid feels a little bit I don't know
16:06 - weird
16:10 - so return text
16:13 - and the key of this is where you at
16:21 - all right so in here I'm gonna do render
16:25 - text
16:27 - all right I think our text is good to go
16:30 - uh we are passing along the connection
16:32 - status to this icon
16:35 - now let's go ahead and style that icon
16:37 - right now
16:39 - so in that Styles file we are going to
16:41 - need the connection status type
16:45 - and we don't need to import it as that
16:48 - and then
16:50 - we passed it in as status
16:55 - so in here we'll say status
16:59 - is going to be equal to connection
17:01 - status and again what happens whenever
17:04 - you're using sound components is it's
17:06 - actually going to pass all these props
17:07 - through however we don't need to type in
17:09 - everything out because uh well in here
17:12 - it doesn't really care about all those
17:14 - different props so this is kind of just
17:16 - typescripting to make this happy and by
17:19 - the way
17:20 - um another thing I noticed is let me see
17:22 - if I can pull this up
17:26 - um in one of my earlier tutorials I was
17:28 - typing this out and I said vertical
17:30 - height and vertical width uh of course
17:33 - vertical width doesn't even make sense
17:35 - those two words together so that's
17:37 - actually a viewport height and viewport
17:39 - which I just thought that was a kind of
17:40 - funny thing whenever I was editing but
17:42 - either way let's get uh back on track
17:44 - here
17:45 - so what I'm also going to be doing is
17:48 - importing this CSS snippet right here
17:52 - and the reason for that is because
17:56 - in this
17:58 - I can actually delete this color
18:01 - and
18:03 - what we're going to do
18:05 - is we'll say for these props that are
18:08 - passed in
18:10 - what we'll do is we'll check the status
18:12 - and we'll say if the status
18:14 - is equal to connection status
18:18 - dot connected then what we want to do is
18:21 - return a mixing and I already have these
18:23 - mix-ins written
18:25 - now we don't have to do it this way and
18:29 - use mix-ins like this what we could do
18:31 - is we could just say like something like
18:34 - this like the color property
18:36 - and do all the status logic right here
18:38 - however
18:40 - in my experience every time I did this I
18:43 - always end up adding more properties and
18:45 - it's just a little bit more repetitive
18:47 - so using mix-ins I just think is a
18:50 - little bit cleaner even though we're
18:51 - only working on one property right here
18:53 - it seems kind of repetitive but I don't
18:56 - know I just like this format and it
18:58 - saves me from
18:59 - having to go back and kind of like
19:02 - rewrite this logic and separate it out
19:05 - into mix-in so now the cool thing about
19:07 - this is we can add different properties
19:09 - right here
19:11 - but uh I think we're just gonna stick
19:13 - with color but anyways it's my little
19:15 - spiel
19:18 - you hear that noise I think like people
19:20 - are throwing garbage down the garbage
19:21 - Chute so all right
19:24 - so if the status is equal to
19:26 - disconnected then I just want to render
19:28 - out this disconnect and mix in and again
19:30 - all this is doing is just changing the
19:31 - color of the button
19:33 - and now last but not least I'll say if
19:35 - connection status is equal to invalid
19:37 - then I want to do this render this
19:41 - invalid mix in which is going to turn
19:42 - this icon to great now I'm getting an
19:45 - error right here
19:46 - and this is just say that not all code
19:48 - paths return a value and it's just kind
19:52 - of a weird thing because
19:53 - um I guess the style components aren't
19:55 - smart enough or typescript whatever this
19:57 - combination is to know that this is
19:59 - indeed always going to return to Value
20:00 - so to fix this all we have to do is just
20:03 - write return here and we'll be good to
20:04 - go
20:05 - and I think this actually might be it
20:10 - okay so let's check it out all right
20:14 - this is pretty good right here so it
20:16 - says disconnected and let me just verify
20:18 - okay I'm not connected to my iMac right
20:20 - now
20:21 - and now let me just get rid of one of
20:23 - these and that should be invalid and
20:26 - remember the text for invalid was this
20:29 - little hyphen and then let me actually
20:31 - uh give me a second let me pop open my
20:34 - laptop because I just want to test that
20:36 - connection status again so one second
20:38 - booting open my iMac is uh booting open
20:41 - tnb OS right now
20:44 - so there we go popped open and all right
20:47 - cool so you see it is indeed connected
20:50 - and
20:52 - make sure this is working I'm not
20:53 - connected to my Linux desktop
20:55 - and now let me just go ahead and shut
20:57 - off tnbos on my iMac
21:00 - all right looking sweet so there you go
21:03 - there is our beautiful connection status
21:05 - component and let's see what we got up
21:08 - next
21:10 - all right so next up now that this is
21:13 - taken care of we'll go ahead and hop and
21:15 - start working on this main button right
21:16 - here

Cleaned transcript:

alrighty and welcome back to another video and in this one what we're going to be doing is working on this connection status component however before you hop right into that I want to mention a few updates I made between the last video and this one so the first one is I built out this network select modal and I figured that I didn't really want to make a video about this because the logic is pretty much the exact same as the select account modal and it just felt a little bit repetitive wanted to uh save you guys some time another thing that I did is I added a little bit of scroll logic as you can see a little responsiveness so you see when the screen is wide that these two top cards they are displaying in a row to the left and right of each other and then I just have it where if it gets to a certain size a break point I think it's 900 pixels then it just turns to a column instead and then the last little change I did is you know how I said that we were gonna break out that edit button component since we pretty much had uh I don't know just to dry up the code a little bit so I now have in components this edit button where you just pass it on click Handler and of course that is this button right here this pencil icon so with that being said what we're going to do is start working on this connection status component and for this what I want to have for the logic is we already track which devices you're connected to there's a plain fine overhead don't mind that and the connection status for a certain Network because remember like I said that I can be connected to this iMac through multiple networks however whenever we're writing the speed test app we just want to check if the connection exists over a certain Network so that is in where is it Network account online statuses so it is keyed by the network ID and then in here we have the account number for the device and it's going to say if it's online or offline for that Network so of course whenever we write this component we need at least two connection statuses is it connected or is it disconnected now I'm also going to include a third connection status something to display here called invalid and that is just if you don't have either one of these selected for example you have a network but no device then I'm just going to display it invalid here because I don't know it just field a bit strange saying disconnected if you you know you don't even have the proper information to determine the connection status so on that note let me go ahead in first and foremost start adding those types for connections so I'm going to make a new type file and I'm gonna make a new enum and I'll just say connection status so again that is connected and this will just be equal to string connected and then I'll make one for disconnected and invalid disconnected and invalid in case you don't have one of those items selected all right looking good that's all we need in here now let me just go ahead and Export this connections or connection status and the reason that I want to put it in here rather than in the component itself whenever you write it is because we're going to need it in a couple different places so on that note ready to move on actually let me keep this open so of course we're going to need this connection status and also the Styles file eventually however what I'm going to do before I start writing any code in here is I am actually going to make a new hook and this Hook is going to basically say that for the active account number and the active ID active account number in Active network ID I mean then it's just going to return a Boolean to say are you connected to this device through this network or not now I want to make it a hook rather than just writing it in this component because we're actually going to be using this same logic for the main button too now for the main button we'll say that if you are not connected then we're going to disable this button because of course it doesn't make sense to you know enable the button if you can't can't send any requests to any other device so since we're going to be using that same logic in this component and also in this component right here that's why I want to split it out into a hook so on that let me just go ahead and make a new directory and I'll show you how I set up my hooks say hooks and for the hook naming convention I prefix everything with use and oh no I just really like that pattern so I'll say um make a new typescript file I'll say use is connected all right and now let me go ahead and import everything we are going to need all right so to make a hook I'll say const use is connected and this is going to be equal to actually a function that's going to return a Boolean right now so export default is connected and another thing that I want to do before I even start writing out the meat and potatoes of this is go ahead and make a new type file index and kind of like how we set up the types or the store where we have this index or excuse me not the store these uh types right here where we have this index file and it kind of Aggregates all these just to make the Imports a little bit cleaner that's the same thing that I want to do with hooks so I'm going to import use is connected from apps speed test is connected and then I'll just export that all right so this is the basic structure for how we're going to be writing all these hooks again I'm just going to name the file whatever the hook is and then just export it right here now with that being said let's go ahead and write this so the first thing that we need to do is for this hook we need to pull it in the active account in the Active network so to do that is let's say const this is equal to a u selector for get active account number and then do the same for Active network all right so pulling in the active account number and Active network now from here once we have those two values again like I said what we need to do is we need to check in Redux under system Network account online statuses because again this is keyed by the network ID which is going to be the Active network and then the account number under it which is going to be our active account right here and from that we're going to pull the value to see if it's online or offline so let me go ahead and make another pull in the network account online statuses and those are pulled in from this selector right here now for the return value what I can do is just use a memo and for this all right so for the first bit of logic I'm just going to say that if you don't have any active account or any network selected if one of these is blank then we're just going to return false off the bat because if you don't have a key piece in that connection then there's no way that it could possibly be connected be connected I mean so if no active account number or no Active network ID then I'm just going to return false now aside from this if you do have both of these pieces of information right here so let me go ahead and select I do have an active account now an active network ID then we're going to go ahead and look in here to see what the status is so otherwise what we want to do is we want to return from Network account online statuses and we want to key it by Active network ID now another thing that I'm going to do is I'm going to throw in a question mark right here now the reason that I have this and this probably isn't going to happen too often but it is a situation we need to look out for is there's going to be times where you have an active account number or Active network ID in your speed test app however that doesn't exist in the system data now if you're like well when's that can be the case because whenever we select one of these we're essentially selecting from the system data well the situation where that would happen is let's say that you have an active Network selected right here the New Boston Network well if you go in here in your system data and you delete this right here this is going to delete it from the system data however it isn't going to update everywhere in all these different apps and kind of look for this network ID so we need to account for the fact that we can indeed have a network ID as our Active network ID that doesn't exist in the system anymore so that is why we're just including this question mark right here to say if you don't have this then you know it's undefined don't flip out or anything like that well if we do have it then under Network account online statuses the next thing we need to do is key in the active account number and then to see if this is online or not we're just going to say is this equal to online status Dot online now if this is true then it's going to return true and of course false false yada yada simple stuff and that is our hook logic to say are we connected to this account over this network so now that we have that what I want to do is pop back in here into my connection status component and we can start right in this logic all right so let me go ahead and import that hook we just wrote and that's called to use is connected from apps.speedtest dot hooks now another thing that we're going to need is actually this right here both of these values the active account number and get Active network ID and then the last thing that we're going to need to import is this connection status type and what I actually want to do is import the connection status from apps test types however because this type is called connection status in that this component I'm working on is also called connection status what I'm gonna do whenever I have these naming conflicts is I just import it as t T connection status so this is the type connection status and then this of course refers to the component all right so now let me sort this a little bit okay so I want to pull in these the active account number and Active network ID because remember we can't just use this use is connected on its own because in our connection status this use is connected Boolean or this Hook is pretty much going to say are we connected or disconnected however the reason that we need to pull in these is because we need to check if one of them don't exist at all and if they don't then we're just going to say that this connection status is invalid so let me go ahead and say the const is connected is equal to this hook right here and now we can go ahead and write a function to get our connection status so if const store it in your book called connection status and say use memo and the reason that I'm using a memo is because I don't want to have to recalculate this on every render only if one of these key values is changed so just a little bit better um I don't know performance I guess of course this function is going to return one of these connection statuses right here so I'll just type it out to make sure returning right value and also maybe I can steal this as well all right so just like here whenever we didn't have one of those active count numbers or Active network ID we returned false we're going to kind of follow the same logic here however instead of returning false since we need to return one of these connection statuses in this case we're going to return connection status invalid now if we do have an active account number and active ID then all we really need to do is convert this is connected Boolean to either connected or disconnected connection status so I'll say return is connected if you are connected then I'll say t connection status connected is the status that you want otherwise T connection status dot disconnected is what we're going to be returning let me just update my dependencies and all right good to go so now this connection status memoize function is going to return one of these properly and now from here let's see well the first thing we're going to be doing with this is we'll pass it along to this icon and eventually in here we're going to accept the prop of the status and depending on that prop it knows whether to display a we'll say a green value for connected a red one for disconnected and we'll use gray for invalid so since we're going to be doing that I'll pass along in status and again this is throwing this error because we didn't type this out but we'll fix that in just a second now another thing that I want to do is I want to write the function to render this text right here so we'll just say connected disconnected or maybe for invalid I don't want to say invalid that's kind of weird maybe I'll put a dash or something so I'll say const render text and this is just going to be let me make indexed text all right so I'll have each of these Keys be either okay so for connected I'll just say connected let me just copy this save some time now for disconnected we'll just render the text and disconnect it and then if it is invalid I'll just write a dash like this for some reason I just think invalid feels a little bit I don't know weird so return text and the key of this is where you at all right so in here I'm gonna do render text all right I think our text is good to go uh we are passing along the connection status to this icon now let's go ahead and style that icon right now so in that Styles file we are going to need the connection status type and we don't need to import it as that and then we passed it in as status so in here we'll say status is going to be equal to connection status and again what happens whenever you're using sound components is it's actually going to pass all these props through however we don't need to type in everything out because uh well in here it doesn't really care about all those different props so this is kind of just typescripting to make this happy and by the way um another thing I noticed is let me see if I can pull this up um in one of my earlier tutorials I was typing this out and I said vertical height and vertical width uh of course vertical width doesn't even make sense those two words together so that's actually a viewport height and viewport which I just thought that was a kind of funny thing whenever I was editing but either way let's get uh back on track here so what I'm also going to be doing is importing this CSS snippet right here and the reason for that is because in this I can actually delete this color and what we're going to do is we'll say for these props that are passed in what we'll do is we'll check the status and we'll say if the status is equal to connection status dot connected then what we want to do is return a mixing and I already have these mixins written now we don't have to do it this way and use mixins like this what we could do is we could just say like something like this like the color property and do all the status logic right here however in my experience every time I did this I always end up adding more properties and it's just a little bit more repetitive so using mixins I just think is a little bit cleaner even though we're only working on one property right here it seems kind of repetitive but I don't know I just like this format and it saves me from having to go back and kind of like rewrite this logic and separate it out into mixin so now the cool thing about this is we can add different properties right here but uh I think we're just gonna stick with color but anyways it's my little spiel you hear that noise I think like people are throwing garbage down the garbage Chute so all right so if the status is equal to disconnected then I just want to render out this disconnect and mix in and again all this is doing is just changing the color of the button and now last but not least I'll say if connection status is equal to invalid then I want to do this render this invalid mix in which is going to turn this icon to great now I'm getting an error right here and this is just say that not all code paths return a value and it's just kind of a weird thing because um I guess the style components aren't smart enough or typescript whatever this combination is to know that this is indeed always going to return to Value so to fix this all we have to do is just write return here and we'll be good to go and I think this actually might be it okay so let's check it out all right this is pretty good right here so it says disconnected and let me just verify okay I'm not connected to my iMac right now and now let me just get rid of one of these and that should be invalid and remember the text for invalid was this little hyphen and then let me actually uh give me a second let me pop open my laptop because I just want to test that connection status again so one second booting open my iMac is uh booting open tnb OS right now so there we go popped open and all right cool so you see it is indeed connected and make sure this is working I'm not connected to my Linux desktop and now let me just go ahead and shut off tnbos on my iMac all right looking sweet so there you go there is our beautiful connection status component and let's see what we got up next all right so next up now that this is taken care of we'll go ahead and hop and start working on this main button right here
