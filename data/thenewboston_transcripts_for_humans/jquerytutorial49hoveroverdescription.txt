With timestamps:

00:00 - and that will allow us to assign the div
00:02 - that we're gonna create which will
00:03 - contain the description so just as an
00:07 - example I'm gonna go ahead and create an
00:09 - just a div down here and this will allow
00:13 - me to relay back the coordinates of the
00:16 - my mouse position now the reason I'm
00:18 - doing this is just so we can see how
00:20 - everything works before we start to
00:22 - write the code because it's important to
00:24 - know what you're actually obviously
00:25 - doing when you're writing the code and
00:27 - this often I create divs just to give me
00:30 - an idea of the feedback so I'm just
00:32 - gonna call this a CO just short for
00:35 - coordinates I guess
00:37 - and inside of Javert Javert XJS I'm
00:41 - gonna go ahead and relay some
00:42 - coordinates into this Co div now there's
00:46 - one thing that we need to do we need to
00:48 - return a particular object associated
00:50 - with moving the mouse over this
00:53 - particular element and we need to use
00:57 - well we need to prove just a variable
00:59 - name inside here and E is now an object
01:02 - and this represents a few things but
01:06 - we're going to be using the the client Y
01:11 - and the client X parts of this object so
01:15 - what I want to do is now inside of here
01:18 - I want to say dot txt we're just going
01:20 - to be placing text with this inside this
01:23 - div here obviously it's invisible on the
01:26 - page but once we start to hover over
01:27 - we'll start to return some feedback so
01:31 - inside dot text I want to place some
01:34 - text now usually the text would be like
01:36 - this and then when you were to go and
01:38 - hover over this the text would appear so
01:41 - what we can do this is we can constantly
01:43 - feedback something from this e object
01:47 - that we've called E and this is first of
01:50 - all client Y we have x and y coordinates
01:55 - of where the mouse is at so I'm just
01:57 - going to say for example and this is
02:00 - just to append on this I'm going to say
02:03 - we'll say X first
02:05 - and that's a client X and then I'm gonna
02:10 - append on just a space and then Y and
02:13 - I'm gonna append on e dot client Y so
02:19 - what we're doing is when the mouse is
02:21 - moved over we're taking the X&Y position
02:24 - from this object and we're just saying X
02:27 - will we're displaying this to the user
02:29 - and then we're taking client X from this
02:32 - e object and then what we're doing is
02:34 - we're showing Y and we're doing the same
02:36 - but we're taking the client Y part of
02:39 - this object so now you'll see that when
02:42 - we move our mouse over here we get an
02:45 - accurate display of chord coordinates so
02:48 - we can we can see where the the mouse is
02:51 - at its position now this is relative to
02:54 - the entire document you'll probably
02:56 - notice if I come just up to the top of
02:59 - this link here you see we've got 10 and
03:01 - 12 now this is because the x and y
03:04 - starts from here the very top left-hand
03:07 - corner and then stretches down to the
03:09 - end of the document
03:10 - so what we're essentially doing is
03:12 - wherever this element is placed on our
03:14 - page we're not placing the div with the
03:17 - coordinates relative to the object we're
03:20 - placing it relative to the whole
03:22 - document so maybe that doesn't make
03:25 - sense maybe it's not relevant but it's
03:26 - important to know that these coordinates
03:28 - don't represent the entire stretch of
03:31 - this object or the size of this object
03:33 - it's for the whole document itself so
03:37 - regardless of that it will still work so
03:39 - we can go ahead and actually start to
03:42 - display this a particular coordinates so
03:46 - now that we've seen that example we can
03:48 - get rid of that and we can go ahead and
03:49 - get rid of the div that was just a
03:51 - display that out in - it's not not
03:54 - needed now so the first thing we want to
03:56 - do is we want to be able to return a
03:58 - description of a particular object so in
04:02 - this case case it's a link now I'm gonna
04:05 - create a custom attribute onto the
04:07 - inside of this link and that's going to
04:10 - be called hover text so I'm just gonna
04:12 - right hover text equals something so
04:15 - much like href and class and anything
04:18 - else with
04:18 - taking an attribute from this link so
04:21 - here I'm gonna write Google a power full
04:25 - search engine so now what we can do is
04:29 - when we hover over this we can obtain
04:32 - the the attribute hover text which is
04:35 - associated with this object and again if
04:38 - you were to go ahead and create more
04:40 - objects you could just simply apply the
04:42 - class hover and then go ahead and apply
04:45 - the class hover the sorry the class
04:48 - hover and the attributes hover text so
04:50 - this is essentially what we did is going
04:52 - to be displaying to the user when they
04:54 - hover over a particular element so quite
04:57 - simple but we need to find a way to grab
04:59 - this hover text attribute from this
05:02 - current class now it's important to note
05:05 - that if we were to have say two
05:07 - different links let's just go ahead and
05:10 - paste this down here let's just change
05:13 - this
05:16 - link here and change this description
05:19 - and then change the what's displayed to
05:26 - the user so now we've got two links we
05:30 - have two different attributes so we've
05:33 - got hover text and hover text they're
05:34 - both the same but they both hold
05:36 - different values and we want them to
05:38 - display different values we're keeping
05:40 - the same class name however we want the
05:42 - hover text to remain different so what
05:45 - we can do is we can test out taking this
05:48 - attribute from the current element
05:50 - that's being hovered over now because we
05:53 - have that have the same class name we
05:55 - can't just reference from that
05:57 - particular class and I'll show you why
06:00 - we can't do that so I'm going to first
06:03 - of all set a variable called description
06:06 - or just call it hover text and that's
06:10 - going to be equal to and remember when
06:12 - we use a selector we use dot something
06:15 - so dot hover dot attribute and then we
06:18 - name the attribute

Cleaned transcript:

and that will allow us to assign the div that we're gonna create which will contain the description so just as an example I'm gonna go ahead and create an just a div down here and this will allow me to relay back the coordinates of the my mouse position now the reason I'm doing this is just so we can see how everything works before we start to write the code because it's important to know what you're actually obviously doing when you're writing the code and this often I create divs just to give me an idea of the feedback so I'm just gonna call this a CO just short for coordinates I guess and inside of Javert Javert XJS I'm gonna go ahead and relay some coordinates into this Co div now there's one thing that we need to do we need to return a particular object associated with moving the mouse over this particular element and we need to use well we need to prove just a variable name inside here and E is now an object and this represents a few things but we're going to be using the the client Y and the client X parts of this object so what I want to do is now inside of here I want to say dot txt we're just going to be placing text with this inside this div here obviously it's invisible on the page but once we start to hover over we'll start to return some feedback so inside dot text I want to place some text now usually the text would be like this and then when you were to go and hover over this the text would appear so what we can do this is we can constantly feedback something from this e object that we've called E and this is first of all client Y we have x and y coordinates of where the mouse is at so I'm just going to say for example and this is just to append on this I'm going to say we'll say X first and that's a client X and then I'm gonna append on just a space and then Y and I'm gonna append on e dot client Y so what we're doing is when the mouse is moved over we're taking the X&Y position from this object and we're just saying X will we're displaying this to the user and then we're taking client X from this e object and then what we're doing is we're showing Y and we're doing the same but we're taking the client Y part of this object so now you'll see that when we move our mouse over here we get an accurate display of chord coordinates so we can we can see where the the mouse is at its position now this is relative to the entire document you'll probably notice if I come just up to the top of this link here you see we've got 10 and 12 now this is because the x and y starts from here the very top lefthand corner and then stretches down to the end of the document so what we're essentially doing is wherever this element is placed on our page we're not placing the div with the coordinates relative to the object we're placing it relative to the whole document so maybe that doesn't make sense maybe it's not relevant but it's important to know that these coordinates don't represent the entire stretch of this object or the size of this object it's for the whole document itself so regardless of that it will still work so we can go ahead and actually start to display this a particular coordinates so now that we've seen that example we can get rid of that and we can go ahead and get rid of the div that was just a display that out in it's not not needed now so the first thing we want to do is we want to be able to return a description of a particular object so in this case case it's a link now I'm gonna create a custom attribute onto the inside of this link and that's going to be called hover text so I'm just gonna right hover text equals something so much like href and class and anything else with taking an attribute from this link so here I'm gonna write Google a power full search engine so now what we can do is when we hover over this we can obtain the the attribute hover text which is associated with this object and again if you were to go ahead and create more objects you could just simply apply the class hover and then go ahead and apply the class hover the sorry the class hover and the attributes hover text so this is essentially what we did is going to be displaying to the user when they hover over a particular element so quite simple but we need to find a way to grab this hover text attribute from this current class now it's important to note that if we were to have say two different links let's just go ahead and paste this down here let's just change this link here and change this description and then change the what's displayed to the user so now we've got two links we have two different attributes so we've got hover text and hover text they're both the same but they both hold different values and we want them to display different values we're keeping the same class name however we want the hover text to remain different so what we can do is we can test out taking this attribute from the current element that's being hovered over now because we have that have the same class name we can't just reference from that particular class and I'll show you why we can't do that so I'm going to first of all set a variable called description or just call it hover text and that's going to be equal to and remember when we use a selector we use dot something so dot hover dot attribute and then we name the attribute
