With timestamps:

00:00 - what is going on guys it's Bucky and
00:02 - welcome to your second C++ tutorial and
00:04 - in this tutorial what I'm going to be
00:06 - doing is I'm going to be breaking apart
00:09 - this computer program that I ran in less
00:11 - toriel so if you remember whenever we
00:14 - first created a project in code blocks
00:16 - colorbox already made a very simple
00:19 - computer program for us for us to run
00:21 - and test out just to make sure
00:22 - everything was working and all it did
00:24 - was it printed out hello world on the
00:26 - screen so if you go ahead and build and
00:28 - run this we see that it just says hello
00:30 - world and some other computer stuff that
00:33 - isn't really relevant anyways all this
00:36 - computer program does is print out hello
00:38 - world and before I get into breaking
00:41 - this apart and telling you what each
00:42 - piece does I want to say one thing you
00:45 - would think since computer programs are
00:48 - just made up of a bunch of lines of text
00:49 - that we can learn each line one at a
00:53 - time but computer programs are weird and
00:56 - that this is pretty much the most simple
00:58 - program you can write and check it out
01:00 - there are already seven different lines
01:03 - included here so in order to even write
01:06 - a most basic program you need to code at
01:09 - least seven lines of code so it seems
01:12 - kind of confusing and I just want to
01:13 - give you guys a warning as long as you
01:16 - can get through this video all the rest
01:18 - of the videos are going to be incredibly
01:21 - easy this is the only one where I have
01:24 - to throw a bunch of information at you
01:25 - but still I'm going to break it down as
01:27 - easy as possible and the reason for that
01:30 - is because you need so many things in
01:32 - order to run such a simple program but
01:34 - once you understand the basics
01:36 - everything else is just smooth sailing I
01:38 - promise so let me go ahead and we're
01:40 - going to be getting more in depth in
01:42 - each of these lines but for now let me
01:44 - just give you guys a brief introduction
01:45 - to what each line does let's go ahead
01:49 - and start at the top and work our way
01:50 - down this include iostream line right
01:54 - here this is technically called a
01:56 - preprocessor directive so if you're
01:58 - taking a test if you're watching these
02:00 - stories because you know maybe you're in
02:02 - C++ class and your teacher is kind of
02:04 - confusing you answer on the test this is
02:07 - a preprocessor directive now what that
02:10 - means in
02:11 - read a terms is it pretty much says all
02:14 - right we're going to be including a file
02:16 - in this program that we're going to be
02:18 - using later on so it's going to be
02:20 - including a file i/o stream that we
02:23 - didn't make we didn't make this file but
02:25 - it needs it to run this program later on
02:27 - so that's why it needed to include it
02:29 - again we're going to be talking more
02:30 - about header files later on but for the
02:33 - basics of the story all you need is that
02:35 - to know that this line includes the file
02:37 - that our program needs to use later on
02:40 - now the next line you can see is just a
02:44 - blank line and you may say alright do
02:47 - you need this blank line do you not need
02:48 - it blank lines and spaces you can have a
02:51 - million of them if you want or you can
02:53 - have none of them just like that all
02:55 - blank lines do in programming is they
02:58 - make the program easier to read just
03:00 - with a book or a magazine or newspaper
03:02 - sometimes you want blank lines between
03:05 - your code sometimes you just want your
03:07 - code right under each other it's
03:08 - personal preference um people you know
03:11 - whatever you want blank lines just make
03:14 - it easier to read so whatever is easier
03:15 - for you add as many lines or as less
03:17 - lines as you want and that brings me to
03:19 - another point these tabs to see this is
03:22 - kind of tabbed out or tabbed in it's the
03:24 - same thing
03:25 - some people tap things and make it
03:27 - easier to read this program is just
03:29 - going to run just fine if it's just like
03:30 - that but you know people just like the
03:32 - line certain things up so you'll see
03:34 - later on once we get coding that tabs
03:36 - and spaces and blank lines they don't
03:39 - really meet anything significant they
03:41 - just make the program easier to read so
03:43 - that being said under that blank line is
03:45 - this using namespace STD and believe it
03:48 - or not this does not stand for sexually
03:51 - transmitted disease I like to think that
03:53 - but trust me it doesn't it stands for
03:55 - the standard library and that's another
03:59 - thing that is built in to C++ that is
04:02 - pretty much saying this we're going to
04:04 - be using all the standard things with
04:07 - C++ nothing fancy again we're going to
04:10 - be going over libraries and stuff in the
04:11 - future but basically these two lines
04:14 - include things that are going to need
04:16 - later on this includes a file and this
04:18 - includes something called a library what
04:20 - you know is just a bunch of C++ stuff
04:23 - so with that being said we know that
04:25 - these two lines include things fair
04:28 - enough
04:28 - so now let's get to the meat and on meat
04:32 - and potatoes I guess of the computer
04:34 - programming and that's this this entire
04:36 - thing is called a function now all
04:40 - computer programs are made up of
04:42 - functions and all functions are are
04:44 - things you want the computer to do for
04:47 - example whenever we're making programs
04:48 - later on we're going to make a function
04:50 - to play sounds and we're going to make a
04:52 - function to draw graphics on the screen
04:54 - and as you can see functions are just
04:56 - things that you want the computer to do
04:59 - so every computer program starts with a
05:03 - function called main this is how your
05:06 - computer knows where to start so for
05:08 - example in a couple tutorials we're
05:11 - going to have a function called main and
05:12 - like I said we're going to have another
05:14 - function called play a sound and we're
05:16 - going to have another function called
05:18 - make a ball bounce around on the screen
05:20 - and you're going to have all these
05:21 - functions and your computer's going to
05:23 - say alright you gave me all this stuff
05:25 - to do but how do I know what order to do
05:28 - them in well your computer automatically
05:31 - knows any time it runs a program to
05:34 - start with the main function so that's
05:36 - why it's so crucial to name this
05:38 - function main so in order to make a
05:41 - function you do this you first write
05:43 - what type of data you're going to be
05:45 - working with and what functions
05:48 - typically typically do is they do some
05:51 - sort of calculations for example find
05:53 - the body mass index or calculate the
05:55 - velocity of something well whenever it
05:57 - makes this calculation it usually wants
05:59 - a number back in answer in other words
06:02 - well since we're going to be working
06:03 - with just integers main always works
06:06 - with integers so that's why we need that
06:08 - but again we'll be getting into that
06:09 - later on after that is the name of the
06:12 - function and this one is named main
06:14 - don't worry about these parentheses
06:16 - right now but what we do need to worry
06:18 - about is these little they're not
06:20 - semicolons squiggly brackets I can't I
06:23 - guess they're called curly braces I
06:25 - don't know whatever the heck they are
06:27 - this has an opening and a closing curly
06:30 - brace and in between them you have
06:32 - something called statements now all
06:34 - functions are made up of statements and
06:36 - all statements are basically
06:38 - instructions and each instruction needs
06:41 - to end with a semicolon that's why you
06:43 - see every line inside a function ends
06:45 - with a semicolon for example if you had
06:48 - a function that says make a peanut
06:51 - butter and jelly sandwich one statement
06:53 - would be get out the bread the next
06:56 - statement would be put butter on peace
06:57 - bread the next statement would be put
06:59 - jelly on peace bread the next put them
07:01 - together the last put them in your mouth
07:03 - BAM you now have a function and a series
07:07 - of statements well all this function did
07:09 - the main one said print out something on
07:11 - the screen and return zero simple enough
07:14 - so now you can see the basics of a
07:16 - function how they're made and how every
07:19 - function needs to include statements or
07:21 - instructions so that being said let's
07:23 - break this down even more the first
07:26 - statement is saying this first of all
07:28 - this C out thing right here that's
07:30 - called an output stream object and it's
07:33 - basically used to write characters on
07:35 - the computer screen that's how we are
07:36 - able to type hello world on the computer
07:38 - screen
07:39 - so this is always used in conjunction
07:42 - with this this is called the stream
07:45 - insertion operator this pretty much
07:47 - takes all this stuff to the right of it
07:49 - and prints it out on the screen I mean
07:52 - this is just uh you know it's weird
07:55 - symbols but that's what whoever made C++
07:58 - they decide to use these weird symbols
07:59 - to print out something on the screen why
08:01 - they did I don't know I have to take it
08:03 - up with them but anyways this is
08:04 - basically how you print out stuff in the
08:06 - screen so this prints out hello world
08:08 - and then this pretty much just means end
08:11 - line or go to the next line so this line
08:16 - right here is pretty much the same print
08:17 - something out on the screen now this
08:19 - last thing I want to talk to you guys
08:21 - about is called the return statement now
08:24 - usually like I said functions will
08:27 - calculate something like body mass index
08:29 - or velocity and when they calculate it
08:31 - it's going to want an answer back so if
08:33 - I had a function that calculated in my
08:35 - weight it would return 1/5
08:37 - five or 160 depending on if I ate tacos
08:40 - or not today
08:41 - well the main function should always
08:44 - have returned zero and return zero means
08:47 - whenever you return zero it tells your
08:51 - program that it ran fine without any
08:53 - errors for example if you had a bunch of
08:55 - extra text right here your computer
08:57 - program will give you an error and it
08:59 - would never get to this line right here
09:00 - so it will never return zero so whenever
09:03 - it does get to this line it means
09:05 - everything above it ran fine in return
09:08 - zero means you're good to go
09:09 - main ran fine so I know that was a lot
09:13 - of information to give to you guys for
09:16 - just your first tutorial but again like
09:18 - I said every computer program starts
09:20 - with a bunch of stuff that you need to
09:22 - know and we're going to be covering each
09:24 - more of the topics in depth but for now
09:26 - I just want to give you guys a basic
09:27 - understanding of how a computer program
09:30 - is made so if you don't understand
09:32 - everything completely then don't worry
09:34 - you're not alone you will in future I
09:36 - promise but for now thank you for
09:38 - sticking with me and thank you for
09:39 - watching this tutorial
09:40 - and I can't wait to see you next
09:42 - tutorial and if you have any questions
09:43 - don't forget to check out my website the
09:45 - new Boston comm and yeah I'll see you in
09:47 - the next video

Cleaned transcript:

what is going on guys it's Bucky and welcome to your second C++ tutorial and in this tutorial what I'm going to be doing is I'm going to be breaking apart this computer program that I ran in less toriel so if you remember whenever we first created a project in code blocks colorbox already made a very simple computer program for us for us to run and test out just to make sure everything was working and all it did was it printed out hello world on the screen so if you go ahead and build and run this we see that it just says hello world and some other computer stuff that isn't really relevant anyways all this computer program does is print out hello world and before I get into breaking this apart and telling you what each piece does I want to say one thing you would think since computer programs are just made up of a bunch of lines of text that we can learn each line one at a time but computer programs are weird and that this is pretty much the most simple program you can write and check it out there are already seven different lines included here so in order to even write a most basic program you need to code at least seven lines of code so it seems kind of confusing and I just want to give you guys a warning as long as you can get through this video all the rest of the videos are going to be incredibly easy this is the only one where I have to throw a bunch of information at you but still I'm going to break it down as easy as possible and the reason for that is because you need so many things in order to run such a simple program but once you understand the basics everything else is just smooth sailing I promise so let me go ahead and we're going to be getting more in depth in each of these lines but for now let me just give you guys a brief introduction to what each line does let's go ahead and start at the top and work our way down this include iostream line right here this is technically called a preprocessor directive so if you're taking a test if you're watching these stories because you know maybe you're in C++ class and your teacher is kind of confusing you answer on the test this is a preprocessor directive now what that means in read a terms is it pretty much says all right we're going to be including a file in this program that we're going to be using later on so it's going to be including a file i/o stream that we didn't make we didn't make this file but it needs it to run this program later on so that's why it needed to include it again we're going to be talking more about header files later on but for the basics of the story all you need is that to know that this line includes the file that our program needs to use later on now the next line you can see is just a blank line and you may say alright do you need this blank line do you not need it blank lines and spaces you can have a million of them if you want or you can have none of them just like that all blank lines do in programming is they make the program easier to read just with a book or a magazine or newspaper sometimes you want blank lines between your code sometimes you just want your code right under each other it's personal preference um people you know whatever you want blank lines just make it easier to read so whatever is easier for you add as many lines or as less lines as you want and that brings me to another point these tabs to see this is kind of tabbed out or tabbed in it's the same thing some people tap things and make it easier to read this program is just going to run just fine if it's just like that but you know people just like the line certain things up so you'll see later on once we get coding that tabs and spaces and blank lines they don't really meet anything significant they just make the program easier to read so that being said under that blank line is this using namespace STD and believe it or not this does not stand for sexually transmitted disease I like to think that but trust me it doesn't it stands for the standard library and that's another thing that is built in to C++ that is pretty much saying this we're going to be using all the standard things with C++ nothing fancy again we're going to be going over libraries and stuff in the future but basically these two lines include things that are going to need later on this includes a file and this includes something called a library what you know is just a bunch of C++ stuff so with that being said we know that these two lines include things fair enough so now let's get to the meat and on meat and potatoes I guess of the computer programming and that's this this entire thing is called a function now all computer programs are made up of functions and all functions are are things you want the computer to do for example whenever we're making programs later on we're going to make a function to play sounds and we're going to make a function to draw graphics on the screen and as you can see functions are just things that you want the computer to do so every computer program starts with a function called main this is how your computer knows where to start so for example in a couple tutorials we're going to have a function called main and like I said we're going to have another function called play a sound and we're going to have another function called make a ball bounce around on the screen and you're going to have all these functions and your computer's going to say alright you gave me all this stuff to do but how do I know what order to do them in well your computer automatically knows any time it runs a program to start with the main function so that's why it's so crucial to name this function main so in order to make a function you do this you first write what type of data you're going to be working with and what functions typically typically do is they do some sort of calculations for example find the body mass index or calculate the velocity of something well whenever it makes this calculation it usually wants a number back in answer in other words well since we're going to be working with just integers main always works with integers so that's why we need that but again we'll be getting into that later on after that is the name of the function and this one is named main don't worry about these parentheses right now but what we do need to worry about is these little they're not semicolons squiggly brackets I can't I guess they're called curly braces I don't know whatever the heck they are this has an opening and a closing curly brace and in between them you have something called statements now all functions are made up of statements and all statements are basically instructions and each instruction needs to end with a semicolon that's why you see every line inside a function ends with a semicolon for example if you had a function that says make a peanut butter and jelly sandwich one statement would be get out the bread the next statement would be put butter on peace bread the next statement would be put jelly on peace bread the next put them together the last put them in your mouth BAM you now have a function and a series of statements well all this function did the main one said print out something on the screen and return zero simple enough so now you can see the basics of a function how they're made and how every function needs to include statements or instructions so that being said let's break this down even more the first statement is saying this first of all this C out thing right here that's called an output stream object and it's basically used to write characters on the computer screen that's how we are able to type hello world on the computer screen so this is always used in conjunction with this this is called the stream insertion operator this pretty much takes all this stuff to the right of it and prints it out on the screen I mean this is just uh you know it's weird symbols but that's what whoever made C++ they decide to use these weird symbols to print out something on the screen why they did I don't know I have to take it up with them but anyways this is basically how you print out stuff in the screen so this prints out hello world and then this pretty much just means end line or go to the next line so this line right here is pretty much the same print something out on the screen now this last thing I want to talk to you guys about is called the return statement now usually like I said functions will calculate something like body mass index or velocity and when they calculate it it's going to want an answer back so if I had a function that calculated in my weight it would return 1/5 five or 160 depending on if I ate tacos or not today well the main function should always have returned zero and return zero means whenever you return zero it tells your program that it ran fine without any errors for example if you had a bunch of extra text right here your computer program will give you an error and it would never get to this line right here so it will never return zero so whenever it does get to this line it means everything above it ran fine in return zero means you're good to go main ran fine so I know that was a lot of information to give to you guys for just your first tutorial but again like I said every computer program starts with a bunch of stuff that you need to know and we're going to be covering each more of the topics in depth but for now I just want to give you guys a basic understanding of how a computer program is made so if you don't understand everything completely then don't worry you're not alone you will in future I promise but for now thank you for sticking with me and thank you for watching this tutorial and I can't wait to see you next tutorial and if you have any questions don't forget to check out my website the new Boston comm and yeah I'll see you in the next video
