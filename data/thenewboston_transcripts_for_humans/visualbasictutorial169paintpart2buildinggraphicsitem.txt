With timestamps:

00:01 - hello YouTube Sam here from youtube.com/
00:04 - onli gamer for the New Boston and in
00:07 - this tutorial we're going to continue
00:08 - working on our paint program um which uh
00:12 - like I said before comes from the book
00:14 - beginning Microsoft Visual Basic 2008 by
00:17 - Theon Willis and Brian Nome uh published
00:20 - by Rock so I just want to give them full
00:22 - credit um and if you don't know what
00:24 - this is um then you may want to go ahead
00:26 - and move back uh to the first tutorial
00:30 - to where we start building this program
00:32 - uh otherwise you might get lost so we
00:36 - have our must inherit class Graphics
00:38 - item with our color is filled and
00:40 - rectangled so let's just go ahead and
00:43 - make some public methods or subs subs
00:46 - can also be referred to as methods if
00:48 - you didn't already already know that uh
00:50 - you may have been confused in some of my
00:52 - previous tutorials when are called Subs
00:54 - methods so we'll create public must
00:57 - override
01:00 - subd draw this is going to take some
01:03 - arguments so we're going to need by
01:07 - Val
01:09 - Graphics as
01:11 - Graphics so they're going to need to
01:14 - pass a graphics object to this draw Sub
01:18 - now you can see that it says must
01:20 - override so what this means is that
01:23 - every class that inherits from gra
01:25 - Graphics item uh must override the subd
01:29 - draw so they must must have um another
01:31 - draw sub for themselves or else they
01:33 - will get an error and they won't be able
01:35 - to compile um so what this does is it
01:39 - lets uh let's say you make a um a couple
01:44 - classes from Graphics items you have a
01:46 - different draw for each one of those but
01:48 - if you create a um a variable of type
01:52 - Graphics item um in your form one.
01:55 - VB um and it is use polymorphism to use
01:59 - let's say Graphics Circle if you call
02:01 - Graphics your graphics Circle object.
02:04 - draw um it's going to run because
02:06 - Graphics item also has draw now if that
02:08 - confuses you a little bit um that's
02:10 - perfectly fine um you'll learn about
02:14 - more about that later on we've done that
02:15 - in some previous tutorials uh
02:17 - polymorphism is a simple concept but
02:20 - sometimes it can get pretty confusing um
02:23 - so don't worry about it right now if you
02:25 - don't understand that so let's go ahead
02:28 - and create another sub so Public Sub set
02:32 - point now all this is going to do is
02:35 - it's going to set the point um where of
02:37 - where we're going to draw our
02:39 - Circle so this is going to take some
02:42 - arguments so we're going to need the EXP
02:47 - position and we're going to use it an
02:50 - integer and then by Val y as
02:55 - integer and we're going to need the
02:58 - graphics size so B
03:01 - Val Graphics size as
03:06 - integer and then we're going to need the
03:09 - color so B Val Graphics
03:14 - color as
03:16 - color and then we're going to do um
03:20 - Graphics is filled so
03:22 - byal Graphics is filled as boine
03:30 - okay so now we're going to set the we're
03:33 - going to create the rectangle um that we
03:36 - declared up here so we got public
03:37 - rectangle as a rectangle now when we
03:39 - create a rectangle we're going to have
03:41 - to make an object of it so we're going
03:43 - to
03:44 - say
03:46 - rectangle equals new rectangle so we're
03:50 - creating a new rectangle object and this
03:52 - is going to take some arguments now what
03:54 - we're going to use is we're going to use
03:58 - um the X position the Y position
04:01 - and the width and the height which is
04:04 - the second of the two options uh for
04:07 - creating a rectangle object so we're
04:10 - going to use x which is passed right
04:14 - here and we're going to subtract it
04:16 - we're going to subtract it
04:18 - um we're going to subract graphic
04:24 - size divided by two from it so let's
04:28 - just make sure
04:31 - it's Graphics
04:36 - size so it's going to be x minus graphic
04:39 - size divid by two so it's going to take
04:41 - our our point x and it's going to take
04:44 - away the size of the graphics which
04:48 - um is we haven't created yet I believe
04:51 - it's going to be an enumeration um
04:53 - that's going to have either like medium
04:56 - small or large so this math right here
04:58 - is a little complic at you don't really
05:00 - have to know how it works um you can
05:02 - play around with this number right here
05:03 - divid by two and see what it does uh so
05:07 - basically what it does is I'll try to
05:09 - explain the best I can instead of when
05:12 - you click it's going to draw a circle uh
05:17 - down like when you clicked in our
05:18 - previous video with the square it
05:21 - created it at the top left corner of the
05:22 - square and everything went down um and
05:24 - to the right from that well what this
05:27 - algorithm right here does is it makes so
05:30 - when you click you're clicking in the
05:31 - middle of where the circle's going to go
05:33 - instead of the top left
05:36 - corner so we're going to do that for the
05:38 - Y as well so y minus graphic
05:46 - size ID two so this is going to do the
05:50 - same thing to where you're clicking in
05:52 - the middle of where the graphics is
05:53 - going to be drawn uh instead of the top
05:55 - left corner and then we're going to do
05:58 - for the width we're going to do graphic
06:04 - size and then for the height we'll do
06:07 - graphic size so what this is going to do
06:09 - is it's going to give us uh A Perfect
06:12 - Circle each time so let's say graphic
06:14 - size is equal to let's say uh 10 this
06:17 - one is also going to be 10 so it's going
06:19 - to be a 10x10 rectangle um and when you
06:22 - draw a circle inside of that 10x10
06:23 - rectangle which is a square you're going
06:25 - to get a perfect circle now if you
06:27 - didn't use uh the same sizes right here
06:29 - you would get what's called an ellipse
06:31 - and we don't want to have to deal with
06:32 - that so we're just going to be making um
06:34 - a bunch of circles by using the same
06:37 - graphic
06:39 - size
06:42 - so we have our set point our X position
06:46 - our y position the graphics size and
06:49 - we're going to have the graphics color
06:52 - which is a type color and then the is
06:54 - filled which checks to see um which
06:58 - tells this set Point um if it's going to
07:01 - be filled or not so go ahead and put
07:06 - this code in if you haven't
07:08 - already um and before we're done we're
07:10 - going to have to add uh two more things
07:12 - to this uh sub so we're going to
07:16 - set color our variable color up here
07:21 - equal to graphic
07:28 - color and we need to change this to
07:31 - Graphics
07:33 - color so it's going to set our color
07:35 - variable equal to whatever they pass to
07:38 - set point so that color will be updated
07:40 - to the new color and is filled is going
07:45 - to be equal
07:46 - to
07:49 - Graphics is filled so it's going to
07:52 - update the is filled is filled boole um
07:55 - to the new one that is passed to our set
07:57 - point so if if you have any questions
08:00 - please leave them in the comments I'll
08:01 - try to monitor these and solve as many
08:04 - problems as I can it might be a little
08:06 - hard with 200 videos um so just be
08:10 - patient and once you're done putting
08:12 - this code in go ahead and move on to the
08:13 - next tutorial

Cleaned transcript:

hello YouTube Sam here from youtube.com/ onli gamer for the New Boston and in this tutorial we're going to continue working on our paint program um which uh like I said before comes from the book beginning Microsoft Visual Basic 2008 by Theon Willis and Brian Nome uh published by Rock so I just want to give them full credit um and if you don't know what this is um then you may want to go ahead and move back uh to the first tutorial to where we start building this program uh otherwise you might get lost so we have our must inherit class Graphics item with our color is filled and rectangled so let's just go ahead and make some public methods or subs subs can also be referred to as methods if you didn't already already know that uh you may have been confused in some of my previous tutorials when are called Subs methods so we'll create public must override subd draw this is going to take some arguments so we're going to need by Val Graphics as Graphics so they're going to need to pass a graphics object to this draw Sub now you can see that it says must override so what this means is that every class that inherits from gra Graphics item uh must override the subd draw so they must must have um another draw sub for themselves or else they will get an error and they won't be able to compile um so what this does is it lets uh let's say you make a um a couple classes from Graphics items you have a different draw for each one of those but if you create a um a variable of type Graphics item um in your form one. VB um and it is use polymorphism to use let's say Graphics Circle if you call Graphics your graphics Circle object. draw um it's going to run because Graphics item also has draw now if that confuses you a little bit um that's perfectly fine um you'll learn about more about that later on we've done that in some previous tutorials uh polymorphism is a simple concept but sometimes it can get pretty confusing um so don't worry about it right now if you don't understand that so let's go ahead and create another sub so Public Sub set point now all this is going to do is it's going to set the point um where of where we're going to draw our Circle so this is going to take some arguments so we're going to need the EXP position and we're going to use it an integer and then by Val y as integer and we're going to need the graphics size so B Val Graphics size as integer and then we're going to need the color so B Val Graphics color as color and then we're going to do um Graphics is filled so byal Graphics is filled as boine okay so now we're going to set the we're going to create the rectangle um that we declared up here so we got public rectangle as a rectangle now when we create a rectangle we're going to have to make an object of it so we're going to say rectangle equals new rectangle so we're creating a new rectangle object and this is going to take some arguments now what we're going to use is we're going to use um the X position the Y position and the width and the height which is the second of the two options uh for creating a rectangle object so we're going to use x which is passed right here and we're going to subtract it we're going to subtract it um we're going to subract graphic size divided by two from it so let's just make sure it's Graphics size so it's going to be x minus graphic size divid by two so it's going to take our our point x and it's going to take away the size of the graphics which um is we haven't created yet I believe it's going to be an enumeration um that's going to have either like medium small or large so this math right here is a little complic at you don't really have to know how it works um you can play around with this number right here divid by two and see what it does uh so basically what it does is I'll try to explain the best I can instead of when you click it's going to draw a circle uh down like when you clicked in our previous video with the square it created it at the top left corner of the square and everything went down um and to the right from that well what this algorithm right here does is it makes so when you click you're clicking in the middle of where the circle's going to go instead of the top left corner so we're going to do that for the Y as well so y minus graphic size ID two so this is going to do the same thing to where you're clicking in the middle of where the graphics is going to be drawn uh instead of the top left corner and then we're going to do for the width we're going to do graphic size and then for the height we'll do graphic size so what this is going to do is it's going to give us uh A Perfect Circle each time so let's say graphic size is equal to let's say uh 10 this one is also going to be 10 so it's going to be a 10x10 rectangle um and when you draw a circle inside of that 10x10 rectangle which is a square you're going to get a perfect circle now if you didn't use uh the same sizes right here you would get what's called an ellipse and we don't want to have to deal with that so we're just going to be making um a bunch of circles by using the same graphic size so we have our set point our X position our y position the graphics size and we're going to have the graphics color which is a type color and then the is filled which checks to see um which tells this set Point um if it's going to be filled or not so go ahead and put this code in if you haven't already um and before we're done we're going to have to add uh two more things to this uh sub so we're going to set color our variable color up here equal to graphic color and we need to change this to Graphics color so it's going to set our color variable equal to whatever they pass to set point so that color will be updated to the new color and is filled is going to be equal to Graphics is filled so it's going to update the is filled is filled boole um to the new one that is passed to our set point so if if you have any questions please leave them in the comments I'll try to monitor these and solve as many problems as I can it might be a little hard with 200 videos um so just be patient and once you're done putting this code in go ahead and move on to the next tutorial
