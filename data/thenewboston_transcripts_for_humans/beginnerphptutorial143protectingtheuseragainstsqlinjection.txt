With timestamps:

00:00 - hi this is Alex from PHP academy' de org
00:02 - and I'm back with another tutorial for
00:04 - the new Boston in this video we're going
00:06 - to be looking briefly but importantly at
00:12 - SQL injection within this application
00:14 - there will be another video on SQL
00:16 - injection that you can go and look at
00:19 - but in this example we're logging and
00:22 - user in but we're not protecting our
00:26 - query now our query looks like this and
00:32 - I've briefly spoken about the security
00:38 - for this query now what's happening is
00:42 - is that we're posting we're allowing
00:44 - data to be freely posted into this form
00:47 - and then what we're doing is we are
00:51 - putting it into a query which will
00:55 - actually allow anyone to perform an SQL
01:00 - injection I'm not going to go into this
01:02 - too much however what could happen is a
01:06 - user could say specify this value for
01:11 - username they could do a single
01:16 - quotation mark and then they could say
01:18 - or and then they could do two to single
01:24 - quotation marks and then they could do
01:25 - an equals and a single quotation mark
01:27 - now what I'm highlighting in blue here
01:30 - is possible to be entered into the
01:34 - username or password field so if the
01:40 - user was to enter this the query would
01:44 - read true to some extent I mean we've
01:48 - encrypted our password so you know we
01:51 - can look at this either way but this
01:54 - means that an SQL query can be performed
01:57 - and like I said if you are not familiar
01:59 - with SQL injections sorry not query the
02:02 - query has been performed but SQL
02:03 - injection can be perform if you're not
02:05 - [Music]
02:07 - familiar with this then either read up
02:10 - about it or watch my other tutorial so
02:13 - how what can we do to prevent somewhat
02:16 - prevent SQL injection well what we first
02:22 - of all need to do is think about a
02:24 - function that will protect against and
02:27 - this function is called MySQL real
02:30 - escape string now what this does is it
02:34 - will add slashes and escape characters
02:38 - rather hence the name escape string the
02:42 - look like look-alike characters that
02:47 - might be used in an SQL injection attack
02:49 - so first of all I'm going to end our
02:52 - query here and just concatenate on and
02:55 - then concatenate on the rest of the
02:57 - query so I've just basically ended the
02:59 - string concatenated on username and
03:01 - concatenate on a start of the string so
03:03 - this will work and so will our password
03:07 - hash let's just end that start there so
03:11 - you should be familiar with
03:12 - concatenation now what I want to do is
03:15 - in encase username and password hash
03:17 - with this function so I'm going to say
03:19 - MySQL underscore real underscore escape
03:24 - underscore string and I'm going to do
03:29 - the same with password even though we're
03:31 - using the password as a password hash
03:33 - I'm still going to do it so MySQL real
03:36 - escape string
03:40 - now bear in mind that this function can
03:43 - only be used when we've opened a valid
03:45 - MySQL connection so you couldn't use it
03:48 - in everyday applications for example
03:51 - just normal form validation where you're
03:54 - not connecting to a database not
03:55 - performing a query you need to connect
03:57 - to a database beforehand so this
03:59 - function has been particularly designed
04:01 - for queries themselves so now we've
04:05 - somewhat protected against off our query
04:08 - let's go back and test if our login
04:10 - still works so I'm going to log in as
04:12 - Alex and my password is passed
04:15 - one two three let's click log in and you
04:19 - can see that you're logged in so we can
04:21 - log ourselves out and write and via
04:24 - Billy account we can do the same thing
04:26 - so pass one two three log in and you're
04:29 - logged in okay so that's a brief note on
04:34 - how we're going to protect against our
04:36 - SQL injection in our query but like I
04:40 - said do research into this because there
04:42 - are other ways to secure a lot better

Cleaned transcript:

hi this is Alex from PHP academy' de org and I'm back with another tutorial for the new Boston in this video we're going to be looking briefly but importantly at SQL injection within this application there will be another video on SQL injection that you can go and look at but in this example we're logging and user in but we're not protecting our query now our query looks like this and I've briefly spoken about the security for this query now what's happening is is that we're posting we're allowing data to be freely posted into this form and then what we're doing is we are putting it into a query which will actually allow anyone to perform an SQL injection I'm not going to go into this too much however what could happen is a user could say specify this value for username they could do a single quotation mark and then they could say or and then they could do two to single quotation marks and then they could do an equals and a single quotation mark now what I'm highlighting in blue here is possible to be entered into the username or password field so if the user was to enter this the query would read true to some extent I mean we've encrypted our password so you know we can look at this either way but this means that an SQL query can be performed and like I said if you are not familiar with SQL injections sorry not query the query has been performed but SQL injection can be perform if you're not familiar with this then either read up about it or watch my other tutorial so how what can we do to prevent somewhat prevent SQL injection well what we first of all need to do is think about a function that will protect against and this function is called MySQL real escape string now what this does is it will add slashes and escape characters rather hence the name escape string the look like lookalike characters that might be used in an SQL injection attack so first of all I'm going to end our query here and just concatenate on and then concatenate on the rest of the query so I've just basically ended the string concatenated on username and concatenate on a start of the string so this will work and so will our password hash let's just end that start there so you should be familiar with concatenation now what I want to do is in encase username and password hash with this function so I'm going to say MySQL underscore real underscore escape underscore string and I'm going to do the same with password even though we're using the password as a password hash I'm still going to do it so MySQL real escape string now bear in mind that this function can only be used when we've opened a valid MySQL connection so you couldn't use it in everyday applications for example just normal form validation where you're not connecting to a database not performing a query you need to connect to a database beforehand so this function has been particularly designed for queries themselves so now we've somewhat protected against off our query let's go back and test if our login still works so I'm going to log in as Alex and my password is passed one two three let's click log in and you can see that you're logged in so we can log ourselves out and write and via Billy account we can do the same thing so pass one two three log in and you're logged in okay so that's a brief note on how we're going to protect against our SQL injection in our query but like I said do research into this because there are other ways to secure a lot better
