With timestamps:

00:00 - our OMA so we basically already learn
00:03 - everything about react and redux and
00:05 - right now we have a little bit of our
00:08 - store called active user a little chunk
00:10 - of memory that's always equal to the
00:12 - active user whatever user they clicked
00:14 - on so now all we have to do is just
00:17 - build a container to display it now I
00:19 - just have their picture in their user
00:21 - name age below whatever so just like
00:24 - before whenever we made this container
00:26 - it's pretty much it's going to be the
00:28 - same so this was user list and that's
00:30 - what this is a container that displays
00:33 - all the users and I'll make another one
00:35 - called user detail to kind of display
00:39 - more details about a single user so and
00:45 - we can probably steal a bunch of stuff
00:46 - from user list so what do we need or
00:49 - need react opponent connects all right
00:54 - so we need that we're going to connect
00:57 - it so we can pass in props and all right
01:04 - so I can even copy okay I'm not that
01:06 - lazy pretty lazy but not that lazy so
01:09 - we're going to make a component which is
01:11 - a class I'll just name it easier detail
01:14 - and it just kinda extends or inherit
01:17 - from component now remember all a
01:21 - container or component is is just a
01:23 - little from class essentially that
01:25 - returns some HTML so we just call render
01:31 - and you just returned some HTML it's
01:34 - going to be across multiple lines so
01:37 - creative all right so what info do we
01:41 - actually have all right so the they have
01:48 - an ID I really don't think we need that
01:50 - the age description and the thumb now
01:52 - and with thumbnail is just like a little
01:54 - profile picture picture of them alright
01:59 - so let me do that first I'll say image
02:08 - resource is equal to this dot drops dot
02:19 - thumbnail but actually we didn't even
02:22 - pass in the user as a property yet but
02:25 - we already know how to do that so
02:27 - instead of typing it again Lola just
02:30 - copy this alright so any time we need to
02:36 - throw extra information in here remember
02:38 - I already explained we map state to
02:41 - props that gets a little piece of state
02:43 - from the entire store and then we can
02:48 - pretty much just pass it in now here is
02:49 - the thing right now we're passing in
02:52 - users list which is the entire list of
02:54 - users remember for this user we only
02:56 - want the active user the user that was
02:59 - selected so instead of users in here we
03:03 - just need an active user and we
03:07 - shouldn't call it users because that
03:09 - implies multiple ones is just going to
03:11 - be equal to one so now we have the
03:13 - property of user available right here
03:16 - which is the active user and then this
03:18 - is just going to display their thumbnail
03:20 - and I'll display like their name - so
03:25 - say h - user first and last all right
03:41 - now I think we got age so we can do that
03:44 - make a rest of them H 3 so we also want
03:51 - to display their age and I'll say
03:59 - description the description is just like
04:02 - a little snippet about in like Oh Bucky
04:04 - loves baked beans that's him pretty cool
04:07 - all right so this is all formatting just
04:11 - format it style it however you want
04:14 - boom roasted so this is undefined
04:17 - because remember we need
04:20 - to connect it using this in alright I'll
04:25 - just type it all you have to do
04:26 - everything here so export default
04:29 - because if we just use this right now
04:31 - it's just a dumb component but remember
04:33 - we are making a container because it's
04:36 - we're pretty much redux off' eyeing it
04:38 - as the most unprofessional work
04:40 - no one ever repeat that all right so
04:42 - we're just going to connect the redux
04:45 - state to the components props that's
04:47 - what makes it a container and what
04:50 - component do we want to make into a
04:52 - container user detail so now instead of
04:55 - returning user detail which is a dumb
04:57 - component we return a smart container
05:00 - there we go
05:02 - so now we actually have to use this in
05:04 - our main layout so if i go to main
05:08 - layout which is right here and i need to
05:15 - import it containers user detail boom
05:26 - roasted toasted there you go all right
05:29 - now I believe if I run this I'm going to
05:32 - get an error because of one thing that I
05:34 - want to point out yep so let me see if
05:38 - this even shows all right now if I can
05:45 - show this art so it says cannot read
05:48 - property a thumbnail of no wait a minute
05:51 - let me hop back here use your detail
05:54 - alright so it looks like we're passing
05:56 - in everything properly let me just go to
05:59 - my yeah we do have called thumbnail or
06:02 - right here so huh so this is what's
06:05 - going on and this is what I was saying
06:07 - earlier that you kind of need to give
06:09 - everything a default value so a lot of
06:11 - people think whenever they see this that
06:13 - likely so that there's a problem with
06:16 - thumbnail but that's not the case what's
06:18 - happening right now is this you see it's
06:21 - looking for a piece of data called
06:24 - active user and it's saying alright this
06:26 - is actually equal to no that's because
06:29 - what we did is by default whenever the
06:32 - app
06:32 - boots up since we didn't select any user
06:35 - yet this piece of data this reducer is
06:39 - equal to null all right so why did I do
06:43 - that I did that because whenever we set
06:46 - up in this kind of way we can actually
06:47 - add a check so this component right here
06:51 - usually is supposed to print out the
06:54 - details of the user but what I want to
06:56 - do is I want to say whenever my app
06:58 - first boots up and this is equal to no
07:00 - AKA we don't have any user yet then we
07:03 - can check for that and return something
07:05 - else so actually if you do something
07:08 - like this set equal to just a default
07:12 - object then watch what happens
07:15 - everything works properly but it's kind
07:19 - of weird because we got this little
07:20 - space for age in description and
07:22 - nothing's appearing so the user might
07:24 - think that there is an error so it's
07:27 - returning something a default object but
07:31 - this object is equal to blank now the
07:33 - rest of my application will work
07:35 - perfectly
07:35 - I can never grab this thing there we go
07:40 - but again like I said whenever it first
07:42 - boots up it's a little bit weird so
07:45 - that's why what I like to do in certain
07:47 - cases is set this equal to null but if I
07:49 - do that I get an error unless I check
07:53 - before so what I'm going to do is I know
07:56 - right now my at first booted up this
07:59 - thought perhaps that user is equal to
08:01 - null so I'm going to test for that so
08:05 - say if we don't have any user we don't
08:07 - have any active user yet instead of
08:09 - rendering this which is the users
08:11 - details we can't do that because there
08:13 - is no user selected what we're going to
08:16 - do instead since this container needs to
08:18 - return some bit data I'm just going to
08:21 - go ahead and return actually make this
08:22 - like a heading two I'll just say select
08:25 - a user all right so now let me redraw
08:29 - this and check this out
08:32 - so now actually you don't want to make
08:34 - this a heading I'll just make it like
08:35 - odd actually make it a heading for very
08:39 - particular about these things all right
08:41 - so in my mind this is a much better
08:44 - application because we don't have like
08:46 - parts of the detail that aren't
08:48 - displaying what we have is just a little
08:50 - indicator that says hey select a user
08:53 - you don't have any user selected yet and
08:55 - again this is equal to no but it's fine
08:58 - we're not getting any errors we're not
09:00 - trying to render anything that we
09:02 - shouldn't be rendering so now once we
09:05 - select the user that causes an action to
09:08 - occur what action the user selected
09:11 - action and now the active user is equal
09:15 - to the payload which is essentially the
09:18 - user now once that happens then this is
09:22 - no longer equal to null and this gets
09:27 - called right here which draws all the
09:29 - information properly so boom roasted
09:33 - toasted look at that
09:36 - so that ladies and gentlemen is react
09:41 - with Redux thank you

Cleaned transcript:

our OMA so we basically already learn everything about react and redux and right now we have a little bit of our store called active user a little chunk of memory that's always equal to the active user whatever user they clicked on so now all we have to do is just build a container to display it now I just have their picture in their user name age below whatever so just like before whenever we made this container it's pretty much it's going to be the same so this was user list and that's what this is a container that displays all the users and I'll make another one called user detail to kind of display more details about a single user so and we can probably steal a bunch of stuff from user list so what do we need or need react opponent connects all right so we need that we're going to connect it so we can pass in props and all right so I can even copy okay I'm not that lazy pretty lazy but not that lazy so we're going to make a component which is a class I'll just name it easier detail and it just kinda extends or inherit from component now remember all a container or component is is just a little from class essentially that returns some HTML so we just call render and you just returned some HTML it's going to be across multiple lines so creative all right so what info do we actually have all right so the they have an ID I really don't think we need that the age description and the thumb now and with thumbnail is just like a little profile picture picture of them alright so let me do that first I'll say image resource is equal to this dot drops dot thumbnail but actually we didn't even pass in the user as a property yet but we already know how to do that so instead of typing it again Lola just copy this alright so any time we need to throw extra information in here remember I already explained we map state to props that gets a little piece of state from the entire store and then we can pretty much just pass it in now here is the thing right now we're passing in users list which is the entire list of users remember for this user we only want the active user the user that was selected so instead of users in here we just need an active user and we shouldn't call it users because that implies multiple ones is just going to be equal to one so now we have the property of user available right here which is the active user and then this is just going to display their thumbnail and I'll display like their name so say h user first and last all right now I think we got age so we can do that make a rest of them H 3 so we also want to display their age and I'll say description the description is just like a little snippet about in like Oh Bucky loves baked beans that's him pretty cool all right so this is all formatting just format it style it however you want boom roasted so this is undefined because remember we need to connect it using this in alright I'll just type it all you have to do everything here so export default because if we just use this right now it's just a dumb component but remember we are making a container because it's we're pretty much redux off' eyeing it as the most unprofessional work no one ever repeat that all right so we're just going to connect the redux state to the components props that's what makes it a container and what component do we want to make into a container user detail so now instead of returning user detail which is a dumb component we return a smart container there we go so now we actually have to use this in our main layout so if i go to main layout which is right here and i need to import it containers user detail boom roasted toasted there you go all right now I believe if I run this I'm going to get an error because of one thing that I want to point out yep so let me see if this even shows all right now if I can show this art so it says cannot read property a thumbnail of no wait a minute let me hop back here use your detail alright so it looks like we're passing in everything properly let me just go to my yeah we do have called thumbnail or right here so huh so this is what's going on and this is what I was saying earlier that you kind of need to give everything a default value so a lot of people think whenever they see this that likely so that there's a problem with thumbnail but that's not the case what's happening right now is this you see it's looking for a piece of data called active user and it's saying alright this is actually equal to no that's because what we did is by default whenever the app boots up since we didn't select any user yet this piece of data this reducer is equal to null all right so why did I do that I did that because whenever we set up in this kind of way we can actually add a check so this component right here usually is supposed to print out the details of the user but what I want to do is I want to say whenever my app first boots up and this is equal to no AKA we don't have any user yet then we can check for that and return something else so actually if you do something like this set equal to just a default object then watch what happens everything works properly but it's kind of weird because we got this little space for age in description and nothing's appearing so the user might think that there is an error so it's returning something a default object but this object is equal to blank now the rest of my application will work perfectly I can never grab this thing there we go but again like I said whenever it first boots up it's a little bit weird so that's why what I like to do in certain cases is set this equal to null but if I do that I get an error unless I check before so what I'm going to do is I know right now my at first booted up this thought perhaps that user is equal to null so I'm going to test for that so say if we don't have any user we don't have any active user yet instead of rendering this which is the users details we can't do that because there is no user selected what we're going to do instead since this container needs to return some bit data I'm just going to go ahead and return actually make this like a heading two I'll just say select a user all right so now let me redraw this and check this out so now actually you don't want to make this a heading I'll just make it like odd actually make it a heading for very particular about these things all right so in my mind this is a much better application because we don't have like parts of the detail that aren't displaying what we have is just a little indicator that says hey select a user you don't have any user selected yet and again this is equal to no but it's fine we're not getting any errors we're not trying to render anything that we shouldn't be rendering so now once we select the user that causes an action to occur what action the user selected action and now the active user is equal to the payload which is essentially the user now once that happens then this is no longer equal to null and this gets called right here which draws all the information properly so boom roasted toasted look at that so that ladies and gentlemen is react with Redux thank you
