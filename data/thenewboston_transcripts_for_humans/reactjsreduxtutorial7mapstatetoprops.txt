With timestamps:

00:00 - all right check this out sourkraut so
00:03 - what we did up to this point is we
00:04 - created our main data storage and we
00:08 - passed it to our application so now we
00:11 - can really use it in any component that
00:13 - we want now I really don't want to use
00:15 - it in our main layout because again this
00:18 - isn't really supposed to be smart it's
00:20 - just supposed to be kind of a way to lay
00:22 - out all your other child components so
00:25 - what I'm going to do now is I'm going to
00:27 - actually create a component that can
00:29 - accept that main store that main
00:32 - application data so this is the thing we
00:37 - know that our data up here are storage
00:39 - and we know that we can create
00:41 - components to use them but they have to
00:43 - go through this thing called a container
00:46 - so that looks like a pain in the butt
00:48 - right Believe It or Not containers are
00:51 - incredibly easy all they are is about
00:55 - two functions to say okay this is your
00:58 - data that's the compon component and
01:01 - this is how they're connected super easy
01:04 - but there's actually a lot of debate on
01:06 - how these should be kind of properly set
01:09 - up whenever you work with react and
01:11 - Redux now what some people like to do is
01:15 - they like to make a directory called
01:16 - components and have all of their kind of
01:19 - presentational components in here not a
01:21 - lot of brains so then what they do is
01:25 - they make another directory fa for
01:27 - containers and remember containers are
01:30 - really just the glue to buy your store
01:33 - and your components together so they
01:36 - make another directory for those however
01:39 - what other people do and this is kind of
01:41 - the other half of the fence is they
01:43 - combine these components in containers
01:46 - into one file so they're kind of the
01:48 - same thing so even though I may not
01:51 - agree with this for teaching it I think
01:53 - it's really easy if they're just both in
01:55 - one file because then you can see
01:56 - everything that's going on at once so
01:58 - that's what I'm going to do so for right
02:00 - now think of it like this whenever I say
02:03 - component I just mean basically a dumb
02:06 - component a part of your website that
02:08 - doesn't have any brains whatsoever
02:10 - whenever I say container I mean
02:13 - basically a component that's hooked up
02:15 - to your data storage that's it so let me
02:18 - go ahead and make a new directory
02:20 - called
02:22 - containers and
02:24 - again containers are going to look like
02:27 - 99% like components but uh yeah there
02:30 - you go so for this one I'm just going to
02:33 - name it uh I don't know user list so let
02:36 - me make a
02:38 - new list JS
02:41 - and me see what I can
02:45 - steal so what do I need I need a
02:48 - react component all right so of course
02:51 - we need a react and I also
02:54 - need component because I'm going to be
02:57 - treating this class as a component now a
03:00 - couple other things I need in order to
03:02 - make a container is first of all
03:05 - something called bu action creators and
03:06 - I'm going to be explaining all of this
03:08 - in just a second but again
03:10 - bind
03:12 - action creators and this is coming from
03:17 - Redux and one other thing is connect and
03:21 - I'm sure you can probably guess what
03:22 - this is already so connect
03:25 - from react
03:30 - Redux there we go all right so now you
03:33 - pretty much just set this up like a
03:35 - plain old generic component so class you
03:38 - say user
03:39 - list and in order to make it a component
03:42 - whenever you use uh modules or this kind
03:45 - of build environment is you just
03:49 - extends component now inside here just
03:53 - like any component all it is is pretty
03:56 - much a way that we can return some HTML
03:59 - so we just want to render
04:02 - out and return any HTML that we want now
04:08 - eventually what this is going to be is
04:10 - it's actually going to get a list of
04:11 - users but for right now what am I going
04:15 - to do all right let's do
04:18 - this keep things real easy and just put
04:20 - like
04:23 - one two and
04:27 - three now once this is hooked up I'll
04:30 - change this but for right now I just
04:31 - want to show you guys that this is
04:33 - indeed working correctly all right so
04:36 - whenever you make a component you need
04:38 - to render or display some HTML and you
04:41 - can have an image in here a heading
04:43 - whatever but for right now this looks
04:45 - pretty good so now what I need to do is
04:47 - just export this so I'm just going to
04:49 - write export
04:51 - default user list and there you go so
04:56 - over in my app
04:59 - in order to actually import this I'll
05:01 - just say
05:02 - import user
05:04 - list
05:07 - from
05:08 - containers user list right there and now
05:13 - anytime I want to use
05:14 - this you just refer to the class name
05:17 - and pretty much like making your own
05:19 - custom
05:23 - tags and I just need a self-closing tag
05:25 - so boom there you go now if this thing
05:28 - builds again
05:30 - all right so there we go so basically we
05:32 - didn't even do anything container
05:34 - related yet this is just a normal react
05:37 - component um all we did is we made a
05:40 - class extends component so it actually
05:43 - is a component and then we returned some
05:45 - basic HTML all right so nothing that we
05:48 - haven't learned in the beginner react
05:51 - tutorials so now what we need to do is
05:54 - we need to figure out how to take this
05:55 - component and hook it up to
06:00 - our data store right here so how do we
06:02 - do that well we need to convert it to a
06:06 - container so all right how the heck do
06:09 - we do that well I'm guessing that we use
06:10 - some of the stuff that we imported right
06:12 - here so
06:14 - under your class right here go ahead and
06:17 - add room for one more function and
06:20 - that's this I guess going to write the
06:22 - word first the function is called map
06:27 - states to Pro s now this is a function
06:31 - that confuses so many people and it's
06:34 - not your fault it's because every single
06:36 - resource online every single bit of
06:38 - documentation it's like they're trying
06:40 - to make this as hard to understand as
06:43 - humanly possible but this is actually
06:45 - one of the easiest functions in the
06:47 - world all this does is it takes a piece
06:50 - of your application store your
06:52 - application State the main data and it
06:55 - passes it into your component I can't
06:58 - say component today it passes it in to
07:01 - your component how does it pass it in
07:03 - there as a
07:05 - property that's all it does and they can
07:07 - pass whatever pieces of the store in
07:10 - that it wants to so we're just going to
07:12 - go ahead and return and again we want to
07:15 - take the
07:17 - users that we made earlier and we want
07:20 - to pass it in there so what do we do
07:22 - well we're going to make a property
07:23 - called users and it's going to be equal
07:26 - to the state users
07:29 - that's it that's all we do so again all
07:33 - map state to props does is it takes a
07:35 - piece of
07:37 - state which is just part of your store
07:40 - and it sends it into your component as
07:43 - props that's it so does that mean that
07:47 - in our component what we can do is we
07:50 - can just say this. props do users and
07:53 - it's equal to the users for our entire
07:57 - application yes that's exactly what it
07:59 - means how awesome is that now there is
08:02 - one other thing that we need to do and
08:04 - that's this and this is actually really
08:06 - easy U let me just cut this in order to
08:09 - actually use or call this function we
08:11 - just need to call connect so connect
08:15 - takes map state to props what we just
08:18 - made and then after we need to say users
08:24 - list so again whenever you just say
08:27 - users list right here we're just
08:29 - exporting the default dumb
08:31 - component the component that doesn't
08:33 - know anything about the main application
08:35 - data whenever we export the user list
08:39 - but we connect it to map State the props
08:42 - now what we're doing is we're taking
08:44 - that component we're making it aware of
08:46 - your application's store or user data
08:51 - and then that's what we are exporting so
08:55 - now this is pretty much a smart
08:57 - component or a container so again you
08:59 - know what I was saying earlier that some
09:01 - people like to make this all in one
09:04 - file like I just did and other people's
09:07 - uh or other people like to kind of take
09:10 - this part which is your container glue
09:13 - of it and break it up separate from this
09:16 - it really doesn't matter it's up to you
09:18 - but uh yeah there you go

Cleaned transcript:

all right check this out sourkraut so what we did up to this point is we created our main data storage and we passed it to our application so now we can really use it in any component that we want now I really don't want to use it in our main layout because again this isn't really supposed to be smart it's just supposed to be kind of a way to lay out all your other child components so what I'm going to do now is I'm going to actually create a component that can accept that main store that main application data so this is the thing we know that our data up here are storage and we know that we can create components to use them but they have to go through this thing called a container so that looks like a pain in the butt right Believe It or Not containers are incredibly easy all they are is about two functions to say okay this is your data that's the compon component and this is how they're connected super easy but there's actually a lot of debate on how these should be kind of properly set up whenever you work with react and Redux now what some people like to do is they like to make a directory called components and have all of their kind of presentational components in here not a lot of brains so then what they do is they make another directory fa for containers and remember containers are really just the glue to buy your store and your components together so they make another directory for those however what other people do and this is kind of the other half of the fence is they combine these components in containers into one file so they're kind of the same thing so even though I may not agree with this for teaching it I think it's really easy if they're just both in one file because then you can see everything that's going on at once so that's what I'm going to do so for right now think of it like this whenever I say component I just mean basically a dumb component a part of your website that doesn't have any brains whatsoever whenever I say container I mean basically a component that's hooked up to your data storage that's it so let me go ahead and make a new directory called containers and again containers are going to look like 99% like components but uh yeah there you go so for this one I'm just going to name it uh I don't know user list so let me make a new list JS and me see what I can steal so what do I need I need a react component all right so of course we need a react and I also need component because I'm going to be treating this class as a component now a couple other things I need in order to make a container is first of all something called bu action creators and I'm going to be explaining all of this in just a second but again bind action creators and this is coming from Redux and one other thing is connect and I'm sure you can probably guess what this is already so connect from react Redux there we go all right so now you pretty much just set this up like a plain old generic component so class you say user list and in order to make it a component whenever you use uh modules or this kind of build environment is you just extends component now inside here just like any component all it is is pretty much a way that we can return some HTML so we just want to render out and return any HTML that we want now eventually what this is going to be is it's actually going to get a list of users but for right now what am I going to do all right let's do this keep things real easy and just put like one two and three now once this is hooked up I'll change this but for right now I just want to show you guys that this is indeed working correctly all right so whenever you make a component you need to render or display some HTML and you can have an image in here a heading whatever but for right now this looks pretty good so now what I need to do is just export this so I'm just going to write export default user list and there you go so over in my app in order to actually import this I'll just say import user list from containers user list right there and now anytime I want to use this you just refer to the class name and pretty much like making your own custom tags and I just need a selfclosing tag so boom there you go now if this thing builds again all right so there we go so basically we didn't even do anything container related yet this is just a normal react component um all we did is we made a class extends component so it actually is a component and then we returned some basic HTML all right so nothing that we haven't learned in the beginner react tutorials so now what we need to do is we need to figure out how to take this component and hook it up to our data store right here so how do we do that well we need to convert it to a container so all right how the heck do we do that well I'm guessing that we use some of the stuff that we imported right here so under your class right here go ahead and add room for one more function and that's this I guess going to write the word first the function is called map states to Pro s now this is a function that confuses so many people and it's not your fault it's because every single resource online every single bit of documentation it's like they're trying to make this as hard to understand as humanly possible but this is actually one of the easiest functions in the world all this does is it takes a piece of your application store your application State the main data and it passes it into your component I can't say component today it passes it in to your component how does it pass it in there as a property that's all it does and they can pass whatever pieces of the store in that it wants to so we're just going to go ahead and return and again we want to take the users that we made earlier and we want to pass it in there so what do we do well we're going to make a property called users and it's going to be equal to the state users that's it that's all we do so again all map state to props does is it takes a piece of state which is just part of your store and it sends it into your component as props that's it so does that mean that in our component what we can do is we can just say this. props do users and it's equal to the users for our entire application yes that's exactly what it means how awesome is that now there is one other thing that we need to do and that's this and this is actually really easy U let me just cut this in order to actually use or call this function we just need to call connect so connect takes map state to props what we just made and then after we need to say users list so again whenever you just say users list right here we're just exporting the default dumb component the component that doesn't know anything about the main application data whenever we export the user list but we connect it to map State the props now what we're doing is we're taking that component we're making it aware of your application's store or user data and then that's what we are exporting so now this is pretty much a smart component or a container so again you know what I was saying earlier that some people like to make this all in one file like I just did and other people's uh or other people like to kind of take this part which is your container glue of it and break it up separate from this it really doesn't matter it's up to you but uh yeah there you go
