With timestamps:

00:00 - okay it is time for our last endpoint
00:03 - which is a delete 10 point
00:05 - and as the name implies it's there to
00:07 - delete a resource
00:09 - so in our case we can delete the bank
00:12 - using this endpoint
00:13 - and what we do is we simply make a
00:15 - delete request
00:16 - to our api slash banks and then slash
00:20 - the account number of the bank that we
00:22 - want to delete
00:23 - and that's it so there's no request body
00:25 - in this case
00:26 - that's really just the account number as
00:29 - an identifier
00:30 - in the path so as a path variable and
00:33 - then it should
00:34 - give us a 204 no content so that's the
00:37 - best practice
00:38 - for delete requests if everything was
00:41 - processed successfully so let's go right
00:43 - ahead into our ide
00:45 - and implement the send point so i'm
00:47 - going to start off here again
00:49 - in our bank controller test and i'm
00:52 - going to create a new nested test class
00:54 - this time saying delete api slash bank
00:58 - slash sum account number so i'm going to
01:01 - put this in curly braces
01:02 - for this display name just to also mark
01:06 - it as a path variable
01:08 - and then we'll say delete an existing
01:10 - bank
01:11 - and in here i'm going to create a new
01:13 - test case using the live template that
01:15 - we
01:15 - discussed and then in here let's say it
01:18 - should
01:19 - delete the given or the
01:22 - the bank with the given account
01:26 - number so given we have an account
01:29 - number
01:30 - of one two three four when we make a
01:33 - request
01:34 - to our mock mvc this time a delete
01:36 - request
01:38 - to the base url slash the account number
01:42 - then really all we expect is that we get
01:44 - um
01:45 - a status code of no content
01:49 - so no content and also i'm gonna again
01:53 - say
01:54 - do a print in between and this one is
01:56 - quite simple so i'm going to merge this
01:58 - again
01:59 - into one when then block and really
02:01 - that's the only
02:03 - assertion that we need for this one but
02:05 - later on we also want to make sure that
02:07 - it has actually been deleted
02:09 - for now let's just go ahead and run this
02:11 - test case
02:12 - to have our first filing test case and
02:15 - then we can run this again
02:16 - of course i don't want to start up the
02:18 - application i want to run our bank
02:20 - controller test
02:21 - and then we'll start again our test
02:23 - driven development cycle
02:24 - all right there we go we have our
02:26 - failing test of course because we don't
02:28 - not yet have a delete endpoint
02:31 - so it's saying again method not allowed
02:33 - so
02:34 - let's go to our bank controller and in
02:37 - here
02:37 - i'm gonna of course you might have
02:39 - guessed it
02:40 - create a delete mapping and i'm gonna
02:42 - call the method also just delete bank
02:45 - now in here we're again using a path
02:48 - variable
02:49 - just like for the get endpoint which is
02:51 - the account number of type string
02:54 - and we're just returning unit so unit is
02:57 - kind of like
02:57 - void in kotlin so for now we can just
03:01 - open curly braces and do nothing in here
03:04 - which is the same as having a
03:06 - void method alright so let's see what
03:08 - happens now if we run the tests
03:11 - we do have a delete mapping now so we
03:13 - have our endpoint
03:15 - however i forgot actually to use
03:18 - the um the path variable up here
03:21 - so just like for the get mapping we just
03:23 - define
03:25 - whatever should come after api slash
03:28 - banks which is again inherited
03:30 - from the overall controller so i'm just
03:32 - going to go ahead and copy this one from
03:34 - the get 10 point
03:35 - and let's try and run it again okay so
03:38 - still a failing test
03:39 - let's take a look and see what's
03:40 - happening so down here we have
03:43 - we're expecting 204 which is no content
03:47 - but we're getting it 200 which is simply
03:49 - the okay
03:50 - status and we've seen this also before
03:52 - here where we wanted to have
03:54 - a created status on success and so for
03:57 - the delete endpoint again best practice
03:59 - is to say no content if everything went
04:02 - according to plan so let's just return
04:04 - the http status
04:06 - no content alright so with that we can
04:09 - rerun the test again
04:10 - and then hopefully we should be in the
04:13 - green status or
04:14 - red green refactor um there's not really
04:17 - anything to refactor yet so let's
04:19 - instead go back to our
04:20 - test and make this a bit more
04:24 - comprehensive so of course after we've
04:26 - called the lead
04:27 - we also want to say that when we try to
04:30 - get this bank now or we try to retrieve
04:32 - its data
04:34 - we expect that it is now gone so we
04:36 - expect the status
04:38 - to be not found okay so with this let's
04:41 - rerun the tests again
04:43 - all right so if we run the tests but
04:45 - they're still failing let's see
04:46 - and take a look if we can figure out why
04:49 - now
04:51 - further down we're expecting a 404
04:54 - but we're actually getting a 200. so
04:57 - looks like
04:57 - of course we're not really deleting
04:59 - anything yet so this is why
05:01 - down here we're not getting a 404 not
05:04 - found as we're expecting
05:06 - now let's go ahead and fix this by going
05:08 - to the bank controller
05:10 - and again feel free to do this on your
05:12 - own as well
05:14 - for practice and then come back to this
05:16 - video afterwards for the solution
05:19 - but really we're just gonna delete
05:22 - the bank using the service
05:26 - so again we're going to go through each
05:27 - of our layers that we build up
05:29 - and in here i'm going to create the
05:31 - member function again
05:32 - which is going to delegate to our data
05:35 - source
05:36 - yeah let's also just call it delete bank
05:38 - given the account number
05:40 - and then we're going to use again the
05:41 - same syntax even though it only returns
05:44 - unit
05:45 - which which is kind of void but it's
05:46 - really still a return value
05:49 - so that's why we can still use this
05:52 - short syntax here
05:54 - and then in the data source i'm going to
05:56 - create the member function for deleting
05:58 - the bank
05:59 - and of course again in this interface
06:02 - i'm not going to write the actual
06:03 - implementation
06:05 - instead i'm going to go to the mock data
06:07 - source
06:08 - and then down here again at the very end
06:11 - i'm going to say implement the members
06:14 - from the interface
06:15 - in this case delete bank and now in here
06:18 - what we want to do
06:19 - is we want to again look for the
06:22 - existing bank with this account number
06:24 - so the same as when we
06:26 - updated the bank up here so we want to
06:29 - first check that we actually have a bank
06:31 - with this account number
06:33 - but here we're just getting the account
06:34 - number not an actual bank
06:36 - so we can just do it like this and if we
06:38 - do find a bank with the given account
06:40 - number
06:41 - then of course we want to just remove it
06:44 - so let's say
06:45 - banks dot remove not replace all
06:48 - remove the current bank and that's it so
06:50 - there's no return value
06:52 - or rather it just returns unit so that's
06:55 - already all that we want to do
06:56 - and of course if there is no bank with
06:58 - the given account number
07:00 - we're gonna again say no such element
07:02 - exception
07:03 - which should by now also automatically
07:05 - result in a status code of
07:07 - 404 meaning that no such bank has been
07:11 - found
07:11 - so with this we can rerun our test again
07:14 - and then with this code we're passing
07:16 - the test
07:17 - um let's take a look in our bank
07:19 - controller test
07:21 - so now we're actually testing that we
07:23 - can call the delete endpoint
07:25 - and it gives us a no content and then
07:27 - afterwards the
07:28 - object is actually gone let's move on to
07:31 - the non-happy test case down here
07:33 - so i'm going to create another one and
07:35 - i'm going to say it should return not
07:37 - found if if no bank with
07:41 - the given account number exists
07:44 - and here again we're going to say
07:46 - account number
07:48 - is does not exist
07:51 - and we could of course extract this into
07:53 - a variable which would be another good
07:55 - refactoring because we're using this one
07:57 - for
07:58 - i think we've used it three times now
08:00 - but for now i'm going to keep going with
08:02 - this test case
08:03 - so when we make a delete request now
08:06 - using moccambc
08:07 - and we make it to the base url slash
08:11 - this invalid account number so i'm also
08:13 - gonna
08:14 - say uh invalid account number just to
08:17 - make it clear
08:18 - then now we expect that we get a status
08:21 - code that
08:22 - is not found and of course i'm again
08:25 - gonna add
08:26 - a print in between for a debug output
08:29 - and this is again just one block for
08:32 - both when
08:33 - and then we have our then so our
08:36 - assertions or
08:36 - expectations all right let's rerun the
08:39 - tests and let's see what happens
08:41 - now in fact as i mentioned we have the
08:43 - no such element exception
08:45 - so yeah this test case will already pass
08:47 - of course you should have a failing test
08:49 - first but i think by now we know
08:52 - um what we're doing here with these mock
08:54 - can we see tests and the end expect
08:56 - so yeah i'm not really gonna change it
08:59 - here you can also look at the logs and
09:01 - see that it's actually returning a 404
09:04 - with also a request body that has the
09:07 - appropriate error message in it all
09:10 - right so this is all looking good so far
09:12 - you know what the next step is we're
09:14 - going to start up our current
09:15 - application
09:16 - our new extended application and then
09:19 - we're going to go into postman and see
09:21 - this
09:21 - work with the actual application running
09:24 - so let's take a look
09:25 - we're going to get all the banks so we
09:27 - have three banks available
09:30 - and now if you make a delete request and
09:32 - give it a valid bank
09:34 - account number here we expect to get two
09:37 - or four no content
09:38 - and then of course if we now retrieve
09:40 - the list of all the banks
09:42 - we get only the remaining two and then
09:45 - in the non-happy path we expect that if
09:48 - we just give it
09:49 - a account number that doesn't exist
09:52 - we're gonna get a 404
09:53 - saying he couldn't find the bank with
09:55 - this account number
09:57 - all right perfect so looks like
09:58 - everything is working as expected
10:00 - i hope you learned something again in
10:02 - this video if you did
10:04 - please leave a like below and i will see
10:06 - you again in the next one

Cleaned transcript:

okay it is time for our last endpoint which is a delete 10 point and as the name implies it's there to delete a resource so in our case we can delete the bank using this endpoint and what we do is we simply make a delete request to our api slash banks and then slash the account number of the bank that we want to delete and that's it so there's no request body in this case that's really just the account number as an identifier in the path so as a path variable and then it should give us a 204 no content so that's the best practice for delete requests if everything was processed successfully so let's go right ahead into our ide and implement the send point so i'm going to start off here again in our bank controller test and i'm going to create a new nested test class this time saying delete api slash bank slash sum account number so i'm going to put this in curly braces for this display name just to also mark it as a path variable and then we'll say delete an existing bank and in here i'm going to create a new test case using the live template that we discussed and then in here let's say it should delete the given or the the bank with the given account number so given we have an account number of one two three four when we make a request to our mock mvc this time a delete request to the base url slash the account number then really all we expect is that we get um a status code of no content so no content and also i'm gonna again say do a print in between and this one is quite simple so i'm going to merge this again into one when then block and really that's the only assertion that we need for this one but later on we also want to make sure that it has actually been deleted for now let's just go ahead and run this test case to have our first filing test case and then we can run this again of course i don't want to start up the application i want to run our bank controller test and then we'll start again our test driven development cycle all right there we go we have our failing test of course because we don't not yet have a delete endpoint so it's saying again method not allowed so let's go to our bank controller and in here i'm gonna of course you might have guessed it create a delete mapping and i'm gonna call the method also just delete bank now in here we're again using a path variable just like for the get endpoint which is the account number of type string and we're just returning unit so unit is kind of like void in kotlin so for now we can just open curly braces and do nothing in here which is the same as having a void method alright so let's see what happens now if we run the tests we do have a delete mapping now so we have our endpoint however i forgot actually to use the um the path variable up here so just like for the get mapping we just define whatever should come after api slash banks which is again inherited from the overall controller so i'm just going to go ahead and copy this one from the get 10 point and let's try and run it again okay so still a failing test let's take a look and see what's happening so down here we have we're expecting 204 which is no content but we're getting it 200 which is simply the okay status and we've seen this also before here where we wanted to have a created status on success and so for the delete endpoint again best practice is to say no content if everything went according to plan so let's just return the http status no content alright so with that we can rerun the test again and then hopefully we should be in the green status or red green refactor um there's not really anything to refactor yet so let's instead go back to our test and make this a bit more comprehensive so of course after we've called the lead we also want to say that when we try to get this bank now or we try to retrieve its data we expect that it is now gone so we expect the status to be not found okay so with this let's rerun the tests again all right so if we run the tests but they're still failing let's see and take a look if we can figure out why now further down we're expecting a 404 but we're actually getting a 200. so looks like of course we're not really deleting anything yet so this is why down here we're not getting a 404 not found as we're expecting now let's go ahead and fix this by going to the bank controller and again feel free to do this on your own as well for practice and then come back to this video afterwards for the solution but really we're just gonna delete the bank using the service so again we're going to go through each of our layers that we build up and in here i'm going to create the member function again which is going to delegate to our data source yeah let's also just call it delete bank given the account number and then we're going to use again the same syntax even though it only returns unit which which is kind of void but it's really still a return value so that's why we can still use this short syntax here and then in the data source i'm going to create the member function for deleting the bank and of course again in this interface i'm not going to write the actual implementation instead i'm going to go to the mock data source and then down here again at the very end i'm going to say implement the members from the interface in this case delete bank and now in here what we want to do is we want to again look for the existing bank with this account number so the same as when we updated the bank up here so we want to first check that we actually have a bank with this account number but here we're just getting the account number not an actual bank so we can just do it like this and if we do find a bank with the given account number then of course we want to just remove it so let's say banks dot remove not replace all remove the current bank and that's it so there's no return value or rather it just returns unit so that's already all that we want to do and of course if there is no bank with the given account number we're gonna again say no such element exception which should by now also automatically result in a status code of 404 meaning that no such bank has been found so with this we can rerun our test again and then with this code we're passing the test um let's take a look in our bank controller test so now we're actually testing that we can call the delete endpoint and it gives us a no content and then afterwards the object is actually gone let's move on to the nonhappy test case down here so i'm going to create another one and i'm going to say it should return not found if if no bank with the given account number exists and here again we're going to say account number is does not exist and we could of course extract this into a variable which would be another good refactoring because we're using this one for i think we've used it three times now but for now i'm going to keep going with this test case so when we make a delete request now using moccambc and we make it to the base url slash this invalid account number so i'm also gonna say uh invalid account number just to make it clear then now we expect that we get a status code that is not found and of course i'm again gonna add a print in between for a debug output and this is again just one block for both when and then we have our then so our assertions or expectations all right let's rerun the tests and let's see what happens now in fact as i mentioned we have the no such element exception so yeah this test case will already pass of course you should have a failing test first but i think by now we know um what we're doing here with these mock can we see tests and the end expect so yeah i'm not really gonna change it here you can also look at the logs and see that it's actually returning a 404 with also a request body that has the appropriate error message in it all right so this is all looking good so far you know what the next step is we're going to start up our current application our new extended application and then we're going to go into postman and see this work with the actual application running so let's take a look we're going to get all the banks so we have three banks available and now if you make a delete request and give it a valid bank account number here we expect to get two or four no content and then of course if we now retrieve the list of all the banks we get only the remaining two and then in the nonhappy path we expect that if we just give it a account number that doesn't exist we're gonna get a 404 saying he couldn't find the bank with this account number all right perfect so looks like everything is working as expected i hope you learned something again in this video if you did please leave a like below and i will see you again in the next one
