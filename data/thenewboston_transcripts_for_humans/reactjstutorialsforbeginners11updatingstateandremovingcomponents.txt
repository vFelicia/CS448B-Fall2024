With timestamps:

00:00 - all righty hostes welcome back and in
00:02 - this video what I want to do is I want
00:04 - to show you guys how to edit and remove
00:06 - comments now just to give you guys a
00:08 - real quick reminder of the status of our
00:10 - application right now we can click this
00:13 - edit button and it will take us to this
00:15 - new um kind of view and we can change
00:18 - the text but when we hit save it doesn't
00:20 - actually save it so we got the kind of
00:23 - interface changes working but none of
00:25 - the kind of brains behind it and also
00:27 - this remove button it doesn't do
00:29 - anything so we can hit remove and let's
00:31 - actually see what it does yeah it just
00:33 - logs out something in the console so
00:35 - they don't perform as expected so that's
00:38 - what we're going to be taking care of in
00:39 - this tutorial so before I get to the
00:42 - actual comment component I just want to
00:44 - go ahead and take care of the board
00:46 - component because we have to do some
00:48 - work on it so the very first thing I'm
00:50 - going to do is actually just clean up
00:51 - this render function because in this
00:54 - render function as we saw in the last
00:56 - video what we did is we essentially
00:58 - looped through this array and and for
01:00 - each item in the array we created a new
01:02 - comment from it and we did so using this
01:04 - Anonymous function AKA a function with
01:07 - no name so let's just go ahead and clean
01:09 - that up and just make a named function
01:11 - from it and I'll just write each comment
01:16 - so I'm actually just going to set this
01:17 - equal to this right
01:19 - here and I'm way too lazy to type it
01:22 - again so set equal to that and boom
01:25 - roasted there I go so now I can tighten
01:28 - this up since it's all on one line and
01:30 - remember inside this map function right
01:32 - here we still need to pass in a call
01:35 - back so we'll just write pretty much a
01:38 - reference to this function but now it
01:40 - has a name and we can reference it by
01:42 - calling this each comment so right now
01:46 - we really didn't change anything other
01:48 - than just clean up the code and if we
01:50 - refresh this we can see that it's the
01:52 - exact same now remember it's going to
01:54 - call this function each time it renders
01:56 - each component or creates a new comment
01:59 - so I'm actually going to make a couple
02:00 - changes to here and how do I want to do
02:03 - this all right let me break this up so
02:06 - it's a little bit easier to
02:08 - see and put these on new lines because
02:10 - I'm going to be introducing a few more
02:13 - Concepts so you know in the last video I
02:15 - said that essentially every time you
02:17 - make a new comment you need a way to
02:20 - uniquely identify it and we did so
02:23 - through this key right here well the
02:26 - truth is a key is like I said a unique
02:29 - identifi but it's really for react it's
02:31 - not really for programmers so whenever
02:34 - you want to keep track of each new
02:36 - comment what you can do is you can
02:38 - actually just add another index and set
02:41 - this equal to the same thing so this I
02:44 - right here it just going to be the um
02:47 - increment for your array so 0 1 2 3
02:50 - however instead of messing with react
02:52 - stuff um we're just going to set a index
02:55 - and then when we say um get comment zero
02:58 - it gets this one whenever we get comment
03:01 - two it gets this one so we're pretty
03:04 - much going to be using the index and
03:05 - leaving the key um kind of out of it so
03:10 - a couple other things I want to mention
03:11 - is this you know that whenever you use
03:14 - properties a property basically allows
03:17 - you to pass data to the child component
03:21 - so now we can you know pass bacon and
03:24 - throw some data in here and then it's
03:26 - going to give a bacon property to
03:28 - comment so why do I say that well right
03:32 - now we have each comment with its own
03:34 - unique index but we also want to pass in
03:37 - a property of a callback function so
03:40 - whenever we pass Properties or data to
03:43 - child components they don't just have to
03:44 - be strings or numbers or kind of static
03:47 - data you can actually pass in entire
03:50 - functions kind of weird but check this
03:53 - out what we're going to want to do is
03:55 - we're going to want to pass in a
03:56 - callback function to delete and edit
04:00 - these comments so how is it going to
04:02 - know which one to delete well it's going
04:04 - to know via the index so I'll show you
04:06 - guys exactly what I'm talking about
04:09 - first we're going to have to make a new
04:11 - function on this board to remove a
04:13 - comment so I'll just write remove
04:15 - comment and all this is going to
04:18 - do is it's going to be a function get
04:21 - all my housekeeping crap taken care of
04:23 - now what information do we need whenever
04:25 - we remove a comment well all we're going
04:28 - to require is the index of the array so
04:31 - we're going to pass in the index and if
04:34 - this is equal to zero it's going to
04:35 - delete the first one if this is equal to
04:37 - two it's going to delete the third one
04:39 - so on and so forth so now let's just
04:42 - should I log something out all right
04:44 - console
04:46 - log let me just print it out in case we
04:49 - have any bugs we can see what's going on
04:50 - I'll say removing
04:54 - comments
04:56 - I all right so whenever we remove a
04:59 - comment if we want to look in log it'll
05:01 - say removing comment zero or whatever so
05:04 - now what we need to do is actually
05:05 - remove it from the array so we first
05:08 - need a reference to this array and if I
05:11 - just copy this kind of cheat a little
05:13 - bit here so I'm going to make a variable
05:16 - and just name it ARR you can name it
05:18 - whatever you want and it's equal to this
05:21 - state comments now this is the thing
05:26 - whenever we want to remove an item from
05:28 - the array in JavaScript script what we
05:30 - can do is we can actually splice the
05:33 - array now this is kind of weird because
05:35 - here let me go ahead and write it it's
05:37 - probably going to be a lot easier to
05:38 - understand all right actually let me
05:41 - show you guys what just popped up so
05:43 - whenever we use a splice function it
05:45 - takes a number in a start so essentially
05:49 - what this is going to do is it's going
05:50 - to say okay how many items do you want
05:53 - to remove and where do you want to start
05:55 - at well we just want to start at
05:57 - Whatever item we pop we through in so if
06:01 - we said I equals this then start there
06:04 - and since we only want to remove one
06:06 - comment instead of like the five
06:08 - comments after it then we just throw
06:11 - ahead one right there so now what this
06:14 - is going to do is pretty much give you a
06:15 - new array stored in ARR with that
06:19 - comment removed so there's probably you
06:22 - know a more convenient way to do it but
06:24 - now you understand kind of the details
06:26 - behind it all right so check this out
06:29 - this is still the state of the comment
06:31 - we didn't change this at all we just
06:32 - made kind of a copy of it so once we
06:35 - made a copy of this we popped off one of
06:38 - the items so now the last thing we have
06:40 - to do is actually take our state and set
06:43 - it equal to this new array the updated
06:47 - array so how do we do this well if you
06:49 - guys remember anytime you want to change
06:50 - a state you just write set State and
06:53 - then you pass in your state objects that
06:55 - you want to change so ours was named
06:58 - comments and you don't need to write
07:00 - this. state. comments because it already
07:02 - knows that you're working with this
07:04 - component state from there and the new
07:07 - value of comments which is just a RR so
07:10 - again one last time we made a copy of
07:13 - this array we popped off Whatever item
07:16 - we passed in and then we pretty much set
07:19 - the new array equal to the updated array
07:22 - Boomer roed easy peasy beautiful Cover
07:25 - Girl so this is what we're going to call
07:29 - essentially whenever the user clicks
07:31 - this button right here pretty cool way
07:34 - so now the next thing I have to do is we
07:37 - need to make an update function so that
07:39 - takes care of the remove button but now
07:41 - we have to take care of this edit button
07:44 - right here so essentially whenever they
07:46 - hit edit make a new comment and hit save
07:49 - then this function is going to be called
07:50 - that I'm about to type right now so I'll
07:52 - just write um
07:54 - update comment and this is going to be a
07:57 - function as well and it's kind of going
07:59 - to work the same with a few changes so
08:01 - let me go ahead
08:03 - and all right so we can't just throw in
08:07 - an index right here because whenever we
08:09 - update a comment we actually need the
08:11 - text as well so we're going to update a
08:13 - comment so set this text equal to this
08:18 - item in the array so instead of just I
08:20 - I'll just write like new
08:22 - text and I so we basically pass in
08:26 - something like uh lucky is awesome and
08:29 - it's going to set Bucky is awesome equal
08:31 - to like the zeroth array element that's
08:34 - it so I'll
08:35 - say updating comments
08:38 - um I won't even give anything there
08:41 - updating
08:43 - comment keep it real noce and simple all
08:46 - right so after this we of course need a
08:50 - reference to the comments again so boom
08:52 - roasted there you go and now instead of
08:55 - just popping an item off we want to get
08:58 - a reference to that specific specific
09:00 - array item so array I in this case it
09:03 - would be the zeroth one or the first one
09:06 - and then all we do is we set this equal
09:07 - to the new text whatever the user typed
09:10 - in so there you go and last but not
09:14 - least you pretty much take the current
09:18 - array and we update it so it's now
09:21 - referencing the new array so again
09:23 - that's all we do whenever we want to
09:25 - edit any of the comments in this list
09:29 - all right actually let me think let me
09:32 - think all right so before I let you guys
09:34 - go I am going
09:37 - to yeah you know what I think that this
09:39 - is good for this tutorial um in the next
09:41 - tutorial I'll show you guys how the heck
09:44 - this comment component actually calls
09:48 - these functions since they're in an
09:49 - entirely different component it's a
09:51 - really cool trick so I'll see you guys
09:52 - then

Cleaned transcript:

all righty hostes welcome back and in this video what I want to do is I want to show you guys how to edit and remove comments now just to give you guys a real quick reminder of the status of our application right now we can click this edit button and it will take us to this new um kind of view and we can change the text but when we hit save it doesn't actually save it so we got the kind of interface changes working but none of the kind of brains behind it and also this remove button it doesn't do anything so we can hit remove and let's actually see what it does yeah it just logs out something in the console so they don't perform as expected so that's what we're going to be taking care of in this tutorial so before I get to the actual comment component I just want to go ahead and take care of the board component because we have to do some work on it so the very first thing I'm going to do is actually just clean up this render function because in this render function as we saw in the last video what we did is we essentially looped through this array and and for each item in the array we created a new comment from it and we did so using this Anonymous function AKA a function with no name so let's just go ahead and clean that up and just make a named function from it and I'll just write each comment so I'm actually just going to set this equal to this right here and I'm way too lazy to type it again so set equal to that and boom roasted there I go so now I can tighten this up since it's all on one line and remember inside this map function right here we still need to pass in a call back so we'll just write pretty much a reference to this function but now it has a name and we can reference it by calling this each comment so right now we really didn't change anything other than just clean up the code and if we refresh this we can see that it's the exact same now remember it's going to call this function each time it renders each component or creates a new comment so I'm actually going to make a couple changes to here and how do I want to do this all right let me break this up so it's a little bit easier to see and put these on new lines because I'm going to be introducing a few more Concepts so you know in the last video I said that essentially every time you make a new comment you need a way to uniquely identify it and we did so through this key right here well the truth is a key is like I said a unique identifi but it's really for react it's not really for programmers so whenever you want to keep track of each new comment what you can do is you can actually just add another index and set this equal to the same thing so this I right here it just going to be the um increment for your array so 0 1 2 3 however instead of messing with react stuff um we're just going to set a index and then when we say um get comment zero it gets this one whenever we get comment two it gets this one so we're pretty much going to be using the index and leaving the key um kind of out of it so a couple other things I want to mention is this you know that whenever you use properties a property basically allows you to pass data to the child component so now we can you know pass bacon and throw some data in here and then it's going to give a bacon property to comment so why do I say that well right now we have each comment with its own unique index but we also want to pass in a property of a callback function so whenever we pass Properties or data to child components they don't just have to be strings or numbers or kind of static data you can actually pass in entire functions kind of weird but check this out what we're going to want to do is we're going to want to pass in a callback function to delete and edit these comments so how is it going to know which one to delete well it's going to know via the index so I'll show you guys exactly what I'm talking about first we're going to have to make a new function on this board to remove a comment so I'll just write remove comment and all this is going to do is it's going to be a function get all my housekeeping crap taken care of now what information do we need whenever we remove a comment well all we're going to require is the index of the array so we're going to pass in the index and if this is equal to zero it's going to delete the first one if this is equal to two it's going to delete the third one so on and so forth so now let's just should I log something out all right console log let me just print it out in case we have any bugs we can see what's going on I'll say removing comments I all right so whenever we remove a comment if we want to look in log it'll say removing comment zero or whatever so now what we need to do is actually remove it from the array so we first need a reference to this array and if I just copy this kind of cheat a little bit here so I'm going to make a variable and just name it ARR you can name it whatever you want and it's equal to this state comments now this is the thing whenever we want to remove an item from the array in JavaScript script what we can do is we can actually splice the array now this is kind of weird because here let me go ahead and write it it's probably going to be a lot easier to understand all right actually let me show you guys what just popped up so whenever we use a splice function it takes a number in a start so essentially what this is going to do is it's going to say okay how many items do you want to remove and where do you want to start at well we just want to start at Whatever item we pop we through in so if we said I equals this then start there and since we only want to remove one comment instead of like the five comments after it then we just throw ahead one right there so now what this is going to do is pretty much give you a new array stored in ARR with that comment removed so there's probably you know a more convenient way to do it but now you understand kind of the details behind it all right so check this out this is still the state of the comment we didn't change this at all we just made kind of a copy of it so once we made a copy of this we popped off one of the items so now the last thing we have to do is actually take our state and set it equal to this new array the updated array so how do we do this well if you guys remember anytime you want to change a state you just write set State and then you pass in your state objects that you want to change so ours was named comments and you don't need to write this. state. comments because it already knows that you're working with this component state from there and the new value of comments which is just a RR so again one last time we made a copy of this array we popped off Whatever item we passed in and then we pretty much set the new array equal to the updated array Boomer roed easy peasy beautiful Cover Girl so this is what we're going to call essentially whenever the user clicks this button right here pretty cool way so now the next thing I have to do is we need to make an update function so that takes care of the remove button but now we have to take care of this edit button right here so essentially whenever they hit edit make a new comment and hit save then this function is going to be called that I'm about to type right now so I'll just write um update comment and this is going to be a function as well and it's kind of going to work the same with a few changes so let me go ahead and all right so we can't just throw in an index right here because whenever we update a comment we actually need the text as well so we're going to update a comment so set this text equal to this item in the array so instead of just I I'll just write like new text and I so we basically pass in something like uh lucky is awesome and it's going to set Bucky is awesome equal to like the zeroth array element that's it so I'll say updating comments um I won't even give anything there updating comment keep it real noce and simple all right so after this we of course need a reference to the comments again so boom roasted there you go and now instead of just popping an item off we want to get a reference to that specific specific array item so array I in this case it would be the zeroth one or the first one and then all we do is we set this equal to the new text whatever the user typed in so there you go and last but not least you pretty much take the current array and we update it so it's now referencing the new array so again that's all we do whenever we want to edit any of the comments in this list all right actually let me think let me think all right so before I let you guys go I am going to yeah you know what I think that this is good for this tutorial um in the next tutorial I'll show you guys how the heck this comment component actually calls these functions since they're in an entirely different component it's a really cool trick so I'll see you guys then
