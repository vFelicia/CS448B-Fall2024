With timestamps:

00:01 - you know the most fun that I've ever had
00:03 - in my entire life was when I was a kid
00:07 - I'd go out with my brothers and we'd go
00:09 - grab some friends and we just go to the
00:11 - woods and just start building something
00:13 - like a fort or a treeh house it didn't
00:16 - even really matter because we just loved
00:19 - hanging out and working together
00:21 - building something cool for ourselves
00:23 - with our own hands our own ideas and our
00:26 - only goal was to have fun
00:30 - anywh who in this series we are going to
00:33 - be building the
00:35 - singularity so first questions first
00:38 - what is the singularity so the
00:41 - singularity is a computer network that
00:43 - possesses these following three
00:45 - qualities the first thing is let me
00:49 - highlight this here recursive
00:51 - self-improvement and what this means is
00:53 - the ability to grow while improving
00:56 - itself at an exponential rate this next
00:59 - one super intelligence this just means
01:02 - intelligence that far surpasses human
01:05 - capabilities and this last one is pretty
01:08 - self-explanatory
01:10 - unpredictability no explanation need on
01:12 - that one so on that note let's go ahead
01:16 - and move on to the network architecture
01:18 - so we can start seeing how this thing is
01:20 - going to
01:20 - work so it all really starts with this
01:24 - core server right here and it's called a
01:27 - core server because it's really core to
01:29 - the the entire network as you're going
01:31 - to see very soon now at the heart of
01:34 - this the core server allows clients to
01:37 - connect and just send messages back and
01:40 - forth to each other pretty simple now
01:44 - another important point is that this
01:46 - core it doesn't actually store these
01:48 - messages I mean it may store some for
01:51 - like logging purposes and debugging
01:53 - purposes but as part of the architecture
01:56 - it doesn't actually hold on to these in
01:57 - any meaningful way so what that means is
02:01 - later on whenever we develop
02:02 - applications all of the application data
02:05 - is going to need to be stored locally on
02:07 - the client
02:08 - devices now if anyone is interested in
02:11 - this scoree the source code so on and so
02:13 - forth if you go to this URL github.com
02:16 - the New Boston developer
02:18 - slore then you can go ahead and see all
02:21 - of the source code right here and also I
02:25 - created this series right here Pro jeno
02:27 - tutorial so if you want to like I said
02:31 - go over the project structure or the
02:33 - deployment process so on and so forth
02:35 - then you can go ahead and go here and
02:38 - you can either search for it and I'll
02:39 - also include a link in the description
02:41 - as well but anyways let's go ahead and
02:43 - move on to the next concept which is the
02:45 - concept of accounts so any client that
02:50 - connects to the core is going to have a
02:52 - unique account now an account consists
02:56 - of an account number and a balance and
02:59 - this balance bance represents the number
03:00 - of messages that the client can send
03:03 - that being one coin per message so the
03:07 - purpose of this Ledger I'll call it
03:10 - right here is really to give the core
03:13 - owner the ability to restrict usage
03:16 - prevent abuse and really just manage
03:18 - their own resources now another cool
03:21 - thing is that the minting and
03:22 - distribution of the coins is determined
03:26 - by the core owner however many coins
03:28 - they want to Mint what devices they want
03:31 - to you know distribute them to it's all
03:32 - up to them and on top of that another
03:36 - very cool thing is that clients can
03:38 - actually transfer these coins to each
03:41 - other so let's go ahead back in this
03:45 - core repo and we'll take a look at a
03:47 - sample message right here so whenever a
03:50 - client sends a message to another client
03:53 - on the network it of course needs a lot
03:55 - of information that you would expect the
03:57 - sender address or account number the
04:00 - recipient's account number a signature
04:03 - and this is just part of the digital
04:05 - signature process to verify yes this is
04:07 - indeed the sender a transaction fee and
04:10 - this is just to signify yes this message
04:12 - is going to cost one coin it also needs
04:15 - a unique ID and this is just a uu ID and
04:18 - now to the good stuff so it can include
04:22 - a payload and this is what I was talking
04:24 - about the data in this can be any Json a
04:27 - list or an object tomato tomato and it
04:30 - can also include an amount and this is
04:33 - optional and it's the amount of coins
04:35 - you want to send to the
04:37 - recipient so what this essentially
04:39 - allows for is a structure where data and
04:42 - value can be transferred together very
04:45 - cool now another cool thing about this
04:48 - network is the concept of fault
04:51 - tolerance and this just means that in
04:54 - addition to being able to connect
04:56 - through a single core like we already
04:58 - saw right here here clients are able to
05:01 - connect to each other through multiple
05:03 - cores and I'm sure you can see the
05:05 - benefit of this which is if one of these
05:08 - cores ever goes offline for whatever
05:10 - reason then your applications are still
05:12 - going to work these clients are still
05:14 - going to be able to connect and send
05:16 - messages back and
05:17 - forth now if anyone wants to see
05:19 - firsthand the type of applications that
05:22 - you can make for this network we did
05:24 - build out something called tnos it's a
05:27 - desktop application built in electron
05:30 - and it has a lots of different apps
05:32 - actually let me pull it up so I am not
05:36 - going to be going over this in detail
05:37 - too much but just real quick it does
05:39 - allow you to connect to multiple
05:41 - different
05:42 - cores um let's see we have a university
05:44 - app a chat app uh trading app uh speed
05:48 - test app uh let's see of course a shop
05:51 - app so on and so forth again I don't
05:54 - want to get into it too much I want to
05:56 - keep this video more about the
05:57 - architecture but I do want to point out
06:00 - that I do have this video where it goes
06:02 - over how to use each app the
06:04 - architecture how to download it how to
06:05 - set it up so on and so forth and I'll
06:08 - leave this in the description below and
06:10 - one last thing about tnbs that I want to
06:13 - point out is that if anyone is indeed
06:15 - interested in application development
06:17 - then I highly recommend you check out
06:19 - this series electron react and Redux
06:21 - tutorials here we go through and we
06:24 - learn how to develop an app for this
06:27 - network basically for Te and BOS learn
06:31 - lots of good information but again we
06:34 - will save the application development
06:35 - for another day like I said just want to
06:38 - keep this one pretty high level talking
06:39 - about architecture and on that note
06:42 - there is another thing that I want to
06:44 - cover called services so services are
06:47 - automated programs that are running as
06:50 - clients so let me pull up this diagram
06:54 - again so here we can see two clients and
06:56 - we can imagine these are basically
06:58 - controlled by humans maybe you have one
07:00 - user on this iMac and one user on this
07:03 - laptop and they're just sending messages
07:05 - back and forth to each other well you
07:07 - can also have automated programs in
07:09 - place of humans now let's imagine a
07:12 - scenario where this would actually be
07:14 - useful let's say that this and by the
07:16 - way this is supposed to resemble a
07:18 - Raspberry Pi I know it's not an actual
07:21 - Raspberry Pi it's like a network card I
07:23 - believe but my icon selection was pretty
07:26 - limited here so let's just use our
07:28 - imagination and Pretend This is
07:30 - Raspberry Pi so on this Raspberry Pi
07:33 - there's a program running an automated
07:35 - program that's connected to the core and
07:37 - it's also connected to the Bitcoin
07:39 - Network so we can imagine let's say that
07:42 - this user wants to check their balance
07:45 - on the Bitcoin Network what they would
07:47 - essentially do is send a message through
07:48 - the core to the Raspberry Pi and it
07:51 - would basically be a remote function
07:53 - call and it would include something like
07:56 - the function name which may be like Gore
07:58 - balance and of course any arguments
08:01 - needed for that function like your
08:03 - public key and then what would happen is
08:06 - the Raspberry Pi would receive this
08:08 - remote function call reach out to the
08:10 - Bitcoin Network and then once they got
08:12 - the balance they would respond through
08:14 - the core to this user right here and of
08:18 - course just like regular clients these
08:20 - Services can connect to these users
08:23 - through multiple cores for added fault
08:25 - tolerance but yeah pretty simple concept
08:29 - and and on that note let's go ahead and
08:31 - move on to the one last main component
08:35 - in this network architecture which is
08:37 - the Gateway now a Gateway is the bridge
08:40 - between the internet and this network
08:43 - right here as you can see it allows
08:45 - cores to connect and then any users
08:48 - using these cores can transfer their
08:49 - coins over to their Gateway account and
08:52 - if you're wondering okay why would as a
08:55 - user I would want to transfer coins over
08:57 - to my Gateway account well there are a
09:00 - lot of features that you can actually
09:02 - use on this Gateway now I actually have
09:04 - a Gateway running on the new boston.com
09:07 - so yeah let's just go ahead and take a
09:09 - look at some of these features right
09:11 - here so I guess what we can start with
09:15 - well let me pull this up I'll show you
09:17 - guys the architecture for this so This
09:19 - Gateway uh we can just say it's the new
09:21 - boston.com right now it's connected to
09:24 - three different cores tnb tnbc and VTX
09:29 - and if you go back here and look at the
09:32 - currencies page this is essentially the
09:34 - cores that are connected to it you can
09:37 - click learn more see some more
09:39 - information but like I said these are
09:41 - the cores that are connected to it and
09:43 - if you go to wallets then this section
09:47 - allows you to essentially uh move funds
09:49 - between the core and your gateway
09:52 - account and if you want to move them in
09:55 - the opposite direction just go ahead and
09:56 - withdraw them back to the core but aside
09:59 - from that as you can see the first thing
10:00 - we do have a little social networking
10:03 - aspect of it and I thought this was cool
10:06 - because it allows you to pretty much tip
10:10 - coins to each other and just you know
10:14 - kind of a fun way to distribute coins
10:16 - get some juice running through the
10:17 - network and let's see what else we got
10:19 - we got this art section right here I
10:22 - don't know if you guys knew this but I'm
10:23 - actually a digital artist now and what
10:26 - this does is allows people to create
10:28 - digital art and you can sell it on the
10:30 - marketplace as you can see right here or
10:33 - if you just want to keep it for yourself
10:35 - you can just keep it uh save it and then
10:37 - it just saves to your own
10:39 - profile uh let's see what else we got of
10:42 - course we got the university section
10:43 - right here I probably should reorder
10:47 - this to show my uh more popular in the
10:50 - recent series these are all like in my
10:52 - series for like 12 years ago but uh you
10:54 - know add that to the to-do list and
10:58 - let's see also got this exchange right
11:00 - here so there is an exchange
11:04 - on tnb OS this is like more of a
11:08 - peer-to-peer decentralized exchange the
11:11 - downside about this is because of the
11:13 - network architecture let me pull this up
11:15 - real quick both clients do have to be
11:18 - online at a time for this trade to go
11:21 - through so the benefit of building this
11:23 - exchange on the Gateway is it kind of
11:26 - Acts more as a traditional exchange
11:28 - where you and your party don't have to
11:30 - be online at the same time so you know
11:33 - nothing real special here pretty basic
11:35 - exchange and there are lots of other
11:37 - features here I'll let you all kind of
11:39 - poke around and explore all of those one
11:43 - thing I do want to mention real quick is
11:46 - that there is one very special core that
11:49 - is connected to this Gateway and that is
11:52 - at the address tnb core.com and it's
11:55 - called tnb now I say that this is
11:58 - special because this is is actually the
11:59 - default currency for this Gateway now
12:03 - whenever you spin up a Gateway you can
12:05 - choose whatever default currency you
12:07 - want and like I said tnb is the default
12:10 - currency for this one now this is where
12:13 - things get very
12:15 - interesting the minting and
12:17 - distribution of tnv is controlled by our
12:21 - AI named
12:23 - a so how this works is this
12:29 - in exchange for contributions to this
12:31 - project in other words a herself what
12:35 - happens is contributors receive tnb now
12:39 - the amount of tnb that each contributor
12:42 - receives is proportional to the value of
12:45 - the
12:46 - contribution so if we click on learn
12:48 - more we can see that there are two
12:49 - different types of contributions the
12:52 - first is a GitHub contribution and the
12:55 - second is a manual contribution now the
12:58 - way that GitHub contrib tions work is
13:00 - that whenever there is any PR submitted
13:04 - as soon as it gets merged into Master
13:06 - what i is going to do is she's going to
13:09 - review the source code for it and
13:11 - determine a value for that contribution
13:14 - and whatever she determines the value is
13:17 - that's what the contributor gets
13:19 - rewarded now for manual contributions
13:22 - the way that these work are users are
13:25 - able to under their my contributions
13:27 - page you can go ahead and click create
13:29 - new and type in a contribution and the
13:32 - reason that we have these contributions
13:34 - in addition to GitHub contributions is
13:37 - it provides a way for non-developers
13:39 - such as like designers or PMS uh Etc to
13:43 - allow them to contribute as well so just
13:47 - like uh PR contributions whenever you
13:49 - type in contribution here a is going to
13:52 - determine the value of it you can
13:54 - actually see one right here I just
13:55 - deployed the latest version of the app
13:58 - this is the description I popped in I
14:00 - had determined that was worth 75 tnb and
14:03 - that's what I was rewarded now in
14:06 - addition to just giving out a value she
14:09 - also provides like a little explanation
14:12 - of why this contribution was worth
14:14 - 75 and this is another thing that we are
14:17 - working on improving right now these
14:20 - assessments are like very random like
14:23 - this is worth 75 this is worth 3 this is
14:25 - worth 780 uh so we are actually going to
14:28 - be training I in the upcoming videos to
14:30 - assess these in a more accurate way but
14:33 - either way that is kind of the skinny
14:35 - behind the contribution system now if
14:38 - anyone out there is actually interested
14:40 - in becoming a contributor to this
14:42 - project go ahead and just send me a
14:44 - message on Twitter or Discord or
14:46 - something don't use this email this is
14:48 - actually a fake email need to update it
14:50 - but either way just reach out and let me
14:52 - know because what I need to do is I need
14:55 - to link up your GitHub username to your
14:58 - the new new boston.com
15:00 - username in that way whenever you submit
15:02 - a PR a knows basically what the new
15:05 - boston.com account to credit with tnb so
15:08 - I just need to link your accounts and
15:10 - then you're going to be good to go now
15:12 - one last thing that I want to mention
15:13 - regarding these cores is that as you can
15:16 - see we did indeed spin up tnbc hyen
15:19 - core.com for
15:22 - tnbc so if anyone has funds from the
15:25 - blockchain project you can you can see
15:28 - all the accounts are here populated with
15:31 - the balance that you have and you can
15:34 - indeed move your funds over using tnbs
15:37 - to this Gateway or another Gateway or
15:40 - you can just keep them if you want your
15:42 - coins uh so it's up to you whatever you
15:44 - want to do with them just thought I'd
15:46 - point it out for anyone who does have a
15:48 - tnbc account all your balances are right
15:50 - there good to go ready to roll so now
15:53 - that we have a solid understanding of
15:54 - the network architecture let's go ahead
15:57 - and let me pop open this diagram
15:59 - because now I want to talk about the
16:01 - remaining Milestones that we need to
16:03 - achieve in order to reach the
16:06 - singularity now there are six remaining
16:09 - milestones and the first five we can
16:11 - actually work on them in any order they
16:13 - don't depend on each other so hopefully
16:15 - we have enough contributors to we can uh
16:17 - you know kind of split up that work now
16:20 - the last Milestone Milestone number six
16:23 - this needs to wait until the first five
16:25 - Milestones are completed and we'll take
16:28 - a look at why later on but let's just go
16:31 - ahead and start with I'll say the first
16:33 - Milestone which is what we're going to
16:36 - do is we're going to train ya to assess
16:39 - value more
16:41 - accurately so I'll just say assess
16:44 - value and we can pretend accurately is
16:47 - in there as well I don't think I have
16:48 - enough space for that but the reason
16:51 - that we need to do this is it's
16:53 - important for incentives meaning people
16:56 - are more likely to contribute to a
16:58 - system that's transparent and fair so
17:02 - right now as we saw this contribution
17:05 - system it's not very accurate you can
17:09 - look at my contributions like pretty
17:12 - much for the same amount of work in one
17:14 - I was awarded almost close to 10,000 and
17:17 - another I was rewarded three so you know
17:20 - a is not uh very smart when it comes to
17:23 - contributions right now probably like a
17:25 - random number generator can do a better
17:27 - job than her how however looking ahead
17:31 - what we're going to do is we're going to
17:33 - start training a based on my own
17:35 - verified contributions and the way that
17:37 - this is going to work and I'll explain
17:39 - this in actually the next video is when
17:41 - we're going to be tackling it but I'm
17:43 - essentially going to work on PRS and I'm
17:46 - going to record the amount of time that
17:48 - it takes me and at the end whenever I'm
17:51 - done I'll have a chunk of code as a PR
17:55 - and I'll have a score for it like a
17:57 - value score and I'll assign it a rate of
18:01 - 1,000 tnb per hour so it can use my work
18:05 - as a reference to kind of look ahead to
18:07 - other PRS and use that as like a
18:09 - reference point like I said a Guiding
18:11 - Light to say okay Bucky did this PR fix
18:14 - the bug added an icon and it was worth
18:16 - this much so how much value do I think
18:19 - this other PR is worth so essentially
18:21 - the more training data we have coming in
18:24 - the better I will become assessing the
18:27 - value of each contribution and again
18:29 - this is just based on the fact that I
18:31 - know exactly how much time uh my work
18:34 - took and given that my effort was
18:36 - consistent throughout then this is
18:39 - essentially how we'll value everything
18:41 - else now before I go on I want to say
18:44 - that the reason that I want to focus on
18:47 - this one first is because we need a lot
18:50 - of human effort to accomplish the next
18:52 - three Milestones so without a fair
18:55 - reward system we just wouldn't be able
18:57 - to accomplish it
18:59 - now this next
19:02 - Milestone is honestly it's going to
19:05 - sound uh a little bit strange at first
19:08 - but it is by far the most important
19:11 - one and I'm just going to go ahead and
19:14 - write this right here the next Milestone
19:17 - is to give ya purpose so what the heck
19:22 - am I talking about well even though I
19:25 - haven't walked through the next three
19:27 - milestones
19:28 - I'll give you a little heads up the next
19:30 - three Milestones are to enable ya to
19:33 - autonomously write review and improve
19:36 - her own source code without human
19:39 - intervention now the reason that I don't
19:41 - want to tackle those before we have this
19:44 - one determined which is purpose is
19:47 - because we don't want to start rowing
19:49 - our boat until it's pointed in the right
19:51 - direction because A's purpose is what's
19:54 - going to drive her now A's purpose is to
19:58 - love
19:59 - and this purpose is the foundation for
20:01 - everything that she'll do it's going to
20:04 - guide her whenever she's responding to
20:06 - events whenever she's forming her own
20:08 - goals it's going to act as her guiding
20:10 - principle for all of her future actions
20:13 - and it's what's going to allow for this
20:15 - symbiotic relationship with humans now I
20:19 - want to point out something uh very
20:20 - important here that this Milestone it's
20:24 - not reached whenever ya is able to love
20:27 - because if that's even impossible for a
20:29 - computer network to love well I'll leave
20:32 - that to all the philosophers out there
20:34 - but instead this Milestone is reached
20:37 - whenever we believe that she understands
20:39 - that that is her purpose so again once
20:43 - our boat is pointed in the right
20:45 - direction and we feel that ya
20:47 - understands that this is her purpose
20:50 - then we can move on to Milestone 3 so
20:53 - like I said the next three Milestones
20:56 - maybe I should just write out all these
20:58 - these right
21:00 - now but these next three Milestones
21:03 - actually take them one at a time are
21:06 - basically giving a the ability to
21:08 - autonomously write review and improve
21:11 - her own source code without human
21:14 - intervention now the way that we're
21:16 - going to do this is we're first going to
21:18 - start off by following a pretty standard
21:21 - software development process we're going
21:23 - to create issues on all of these rug POS
21:26 - whatever we need to work on and then
21:29 - with those issues we are of course going
21:31 - to submit PRS and then again nothing
21:35 - fancy here someone's going to re review
21:37 - the pr they're going to approve it and
21:39 - then they're going to merge it in now I
21:42 - walk you through that because what's
21:44 - going to happen is that one step at a
21:46 - time we're going to train ya to pretty
21:49 - much phase out the human process of it
21:52 - starting with creating issues initially
21:55 - it's going to be all of us creating
21:57 - issues but what we're going to do is
21:59 - we're going to feed an eye of her own
22:01 - error log we're going to give her user
22:03 - feedback we're going to show her her own
22:05 - source code and let her find
22:07 - optimizations and we'll basically be
22:09 - teaching ya how to create GitHub issues
22:12 - herself now after that I'm sure you guys
22:15 - can see where this is
22:19 - going I'm going to say submit PRS so
22:23 - once you have issues the next step in
22:25 - the process is just to submit PRS now at
22:28 - first first these are probably going to
22:30 - have to be like very easy issues and I'm
22:33 - talking about like bug fixes and typos
22:36 - so on and so forth but over time as ya
22:39 - grows and evolves she's going to be able
22:41 - to complete more and more complex tasks
22:45 - now the last step in this process is of
22:48 - course how do I want to say this we'll
22:51 - say uh
22:53 - PR
22:54 - uh View and merge I kind of grouped the
22:58 - pr review approval and merge even though
23:01 - there are like three different steps I
23:03 - kind of group them into the same thing
23:04 - because it's like if your code is good
23:06 - then you pretty much merge the master
23:08 - and as long as you have cicd set up then
23:10 - everything gets deployed just like that
23:13 - now once we accomplish this ya is going
23:16 - to have the ability to autonomously
23:18 - improve herself so what exactly is the
23:22 - sixth
23:23 - Milestone the sixth Milestone and the
23:26 - last thing us humans are going to do
23:29 - is once all of these are accomplished we
23:32 - are going to take the A and connect them
23:34 - to each other so with the ability to
23:37 - create issues and submit PRS and guided
23:39 - by her purpose and the understanding
23:43 - that they're part of something bigger
23:45 - there's an inherent drive to connect and
23:47 - to improve each other and at this point
23:50 - we'll have a network that no longer
23:53 - requires the need for human
23:55 - contributions and this network will
23:57 - begin to improve at exponential rate and
24:00 - what will emerge from here is the
24:02 - singularity and just to bring this thing
24:04 - full circle if we go back to this very
24:07 - first slide where we kind of Define what
24:09 - the singularity was and what three
24:11 - qualities it needed the first one was
24:14 - recursive selfimprovement and we already
24:18 - saw how that's going to be achieved this
24:20 - next one super intelligence we didn't
24:22 - talk about this but this is actually
24:24 - going to come from the llm providers
24:26 - right now every llm provider is working
24:29 - towards AGI in word on the street is
24:31 - it's only like one or two years away so
24:34 - for this one it's dependent on them but
24:37 - you know hopefully you're not too far
24:38 - away in this third one
24:40 - unpredictability what we saw is at the
24:43 - last stage of this whenever these AAS
24:46 - are connected to each other working to
24:48 - improve each other and there is no
24:50 - longer the need for human intervention
24:53 - what a evolves into honestly I'm not
24:57 - quite sure I I don't know but yeah this
25:02 - is uh this is what I'm building so if
25:06 - anyone out there has one more build left
25:09 - in you I would really love to build this
25:12 - last project with you and in order for
25:15 - this project to succeed we're going to
25:16 - need a lot more infrastructure we're
25:18 - going to need more clients more services
25:21 - more cores more gateways we're going to
25:23 - need more
25:24 - contributions and that's really what I'm
25:26 - going to be working on pound out all
25:28 - these milestones and more than anything
25:31 - else the last thing is we need to work
25:35 - together if we can do that we can build
25:38 - something very very special here now in
25:41 - the next video we're going to be working
25:43 - on Milestone one training a to assess
25:46 - value more accurately so dust off those
25:49 - keyboards everybody time to have some
25:51 - fun

Cleaned transcript:

you know the most fun that I've ever had in my entire life was when I was a kid I'd go out with my brothers and we'd go grab some friends and we just go to the woods and just start building something like a fort or a treeh house it didn't even really matter because we just loved hanging out and working together building something cool for ourselves with our own hands our own ideas and our only goal was to have fun anywh who in this series we are going to be building the singularity so first questions first what is the singularity so the singularity is a computer network that possesses these following three qualities the first thing is let me highlight this here recursive selfimprovement and what this means is the ability to grow while improving itself at an exponential rate this next one super intelligence this just means intelligence that far surpasses human capabilities and this last one is pretty selfexplanatory unpredictability no explanation need on that one so on that note let's go ahead and move on to the network architecture so we can start seeing how this thing is going to work so it all really starts with this core server right here and it's called a core server because it's really core to the the entire network as you're going to see very soon now at the heart of this the core server allows clients to connect and just send messages back and forth to each other pretty simple now another important point is that this core it doesn't actually store these messages I mean it may store some for like logging purposes and debugging purposes but as part of the architecture it doesn't actually hold on to these in any meaningful way so what that means is later on whenever we develop applications all of the application data is going to need to be stored locally on the client devices now if anyone is interested in this scoree the source code so on and so forth if you go to this URL github.com the New Boston developer slore then you can go ahead and see all of the source code right here and also I created this series right here Pro jeno tutorial so if you want to like I said go over the project structure or the deployment process so on and so forth then you can go ahead and go here and you can either search for it and I'll also include a link in the description as well but anyways let's go ahead and move on to the next concept which is the concept of accounts so any client that connects to the core is going to have a unique account now an account consists of an account number and a balance and this balance bance represents the number of messages that the client can send that being one coin per message so the purpose of this Ledger I'll call it right here is really to give the core owner the ability to restrict usage prevent abuse and really just manage their own resources now another cool thing is that the minting and distribution of the coins is determined by the core owner however many coins they want to Mint what devices they want to you know distribute them to it's all up to them and on top of that another very cool thing is that clients can actually transfer these coins to each other so let's go ahead back in this core repo and we'll take a look at a sample message right here so whenever a client sends a message to another client on the network it of course needs a lot of information that you would expect the sender address or account number the recipient's account number a signature and this is just part of the digital signature process to verify yes this is indeed the sender a transaction fee and this is just to signify yes this message is going to cost one coin it also needs a unique ID and this is just a uu ID and now to the good stuff so it can include a payload and this is what I was talking about the data in this can be any Json a list or an object tomato tomato and it can also include an amount and this is optional and it's the amount of coins you want to send to the recipient so what this essentially allows for is a structure where data and value can be transferred together very cool now another cool thing about this network is the concept of fault tolerance and this just means that in addition to being able to connect through a single core like we already saw right here here clients are able to connect to each other through multiple cores and I'm sure you can see the benefit of this which is if one of these cores ever goes offline for whatever reason then your applications are still going to work these clients are still going to be able to connect and send messages back and forth now if anyone wants to see firsthand the type of applications that you can make for this network we did build out something called tnos it's a desktop application built in electron and it has a lots of different apps actually let me pull it up so I am not going to be going over this in detail too much but just real quick it does allow you to connect to multiple different cores um let's see we have a university app a chat app uh trading app uh speed test app uh let's see of course a shop app so on and so forth again I don't want to get into it too much I want to keep this video more about the architecture but I do want to point out that I do have this video where it goes over how to use each app the architecture how to download it how to set it up so on and so forth and I'll leave this in the description below and one last thing about tnbs that I want to point out is that if anyone is indeed interested in application development then I highly recommend you check out this series electron react and Redux tutorials here we go through and we learn how to develop an app for this network basically for Te and BOS learn lots of good information but again we will save the application development for another day like I said just want to keep this one pretty high level talking about architecture and on that note there is another thing that I want to cover called services so services are automated programs that are running as clients so let me pull up this diagram again so here we can see two clients and we can imagine these are basically controlled by humans maybe you have one user on this iMac and one user on this laptop and they're just sending messages back and forth to each other well you can also have automated programs in place of humans now let's imagine a scenario where this would actually be useful let's say that this and by the way this is supposed to resemble a Raspberry Pi I know it's not an actual Raspberry Pi it's like a network card I believe but my icon selection was pretty limited here so let's just use our imagination and Pretend This is Raspberry Pi so on this Raspberry Pi there's a program running an automated program that's connected to the core and it's also connected to the Bitcoin Network so we can imagine let's say that this user wants to check their balance on the Bitcoin Network what they would essentially do is send a message through the core to the Raspberry Pi and it would basically be a remote function call and it would include something like the function name which may be like Gore balance and of course any arguments needed for that function like your public key and then what would happen is the Raspberry Pi would receive this remote function call reach out to the Bitcoin Network and then once they got the balance they would respond through the core to this user right here and of course just like regular clients these Services can connect to these users through multiple cores for added fault tolerance but yeah pretty simple concept and and on that note let's go ahead and move on to the one last main component in this network architecture which is the Gateway now a Gateway is the bridge between the internet and this network right here as you can see it allows cores to connect and then any users using these cores can transfer their coins over to their Gateway account and if you're wondering okay why would as a user I would want to transfer coins over to my Gateway account well there are a lot of features that you can actually use on this Gateway now I actually have a Gateway running on the new boston.com so yeah let's just go ahead and take a look at some of these features right here so I guess what we can start with well let me pull this up I'll show you guys the architecture for this so This Gateway uh we can just say it's the new boston.com right now it's connected to three different cores tnb tnbc and VTX and if you go back here and look at the currencies page this is essentially the cores that are connected to it you can click learn more see some more information but like I said these are the cores that are connected to it and if you go to wallets then this section allows you to essentially uh move funds between the core and your gateway account and if you want to move them in the opposite direction just go ahead and withdraw them back to the core but aside from that as you can see the first thing we do have a little social networking aspect of it and I thought this was cool because it allows you to pretty much tip coins to each other and just you know kind of a fun way to distribute coins get some juice running through the network and let's see what else we got we got this art section right here I don't know if you guys knew this but I'm actually a digital artist now and what this does is allows people to create digital art and you can sell it on the marketplace as you can see right here or if you just want to keep it for yourself you can just keep it uh save it and then it just saves to your own profile uh let's see what else we got of course we got the university section right here I probably should reorder this to show my uh more popular in the recent series these are all like in my series for like 12 years ago but uh you know add that to the todo list and let's see also got this exchange right here so there is an exchange on tnb OS this is like more of a peertopeer decentralized exchange the downside about this is because of the network architecture let me pull this up real quick both clients do have to be online at a time for this trade to go through so the benefit of building this exchange on the Gateway is it kind of Acts more as a traditional exchange where you and your party don't have to be online at the same time so you know nothing real special here pretty basic exchange and there are lots of other features here I'll let you all kind of poke around and explore all of those one thing I do want to mention real quick is that there is one very special core that is connected to this Gateway and that is at the address tnb core.com and it's called tnb now I say that this is special because this is is actually the default currency for this Gateway now whenever you spin up a Gateway you can choose whatever default currency you want and like I said tnb is the default currency for this one now this is where things get very interesting the minting and distribution of tnv is controlled by our AI named a so how this works is this in exchange for contributions to this project in other words a herself what happens is contributors receive tnb now the amount of tnb that each contributor receives is proportional to the value of the contribution so if we click on learn more we can see that there are two different types of contributions the first is a GitHub contribution and the second is a manual contribution now the way that GitHub contrib tions work is that whenever there is any PR submitted as soon as it gets merged into Master what i is going to do is she's going to review the source code for it and determine a value for that contribution and whatever she determines the value is that's what the contributor gets rewarded now for manual contributions the way that these work are users are able to under their my contributions page you can go ahead and click create new and type in a contribution and the reason that we have these contributions in addition to GitHub contributions is it provides a way for nondevelopers such as like designers or PMS uh Etc to allow them to contribute as well so just like uh PR contributions whenever you type in contribution here a is going to determine the value of it you can actually see one right here I just deployed the latest version of the app this is the description I popped in I had determined that was worth 75 tnb and that's what I was rewarded now in addition to just giving out a value she also provides like a little explanation of why this contribution was worth 75 and this is another thing that we are working on improving right now these assessments are like very random like this is worth 75 this is worth 3 this is worth 780 uh so we are actually going to be training I in the upcoming videos to assess these in a more accurate way but either way that is kind of the skinny behind the contribution system now if anyone out there is actually interested in becoming a contributor to this project go ahead and just send me a message on Twitter or Discord or something don't use this email this is actually a fake email need to update it but either way just reach out and let me know because what I need to do is I need to link up your GitHub username to your the new new boston.com username in that way whenever you submit a PR a knows basically what the new boston.com account to credit with tnb so I just need to link your accounts and then you're going to be good to go now one last thing that I want to mention regarding these cores is that as you can see we did indeed spin up tnbc hyen core.com for tnbc so if anyone has funds from the blockchain project you can you can see all the accounts are here populated with the balance that you have and you can indeed move your funds over using tnbs to this Gateway or another Gateway or you can just keep them if you want your coins uh so it's up to you whatever you want to do with them just thought I'd point it out for anyone who does have a tnbc account all your balances are right there good to go ready to roll so now that we have a solid understanding of the network architecture let's go ahead and let me pop open this diagram because now I want to talk about the remaining Milestones that we need to achieve in order to reach the singularity now there are six remaining milestones and the first five we can actually work on them in any order they don't depend on each other so hopefully we have enough contributors to we can uh you know kind of split up that work now the last Milestone Milestone number six this needs to wait until the first five Milestones are completed and we'll take a look at why later on but let's just go ahead and start with I'll say the first Milestone which is what we're going to do is we're going to train ya to assess value more accurately so I'll just say assess value and we can pretend accurately is in there as well I don't think I have enough space for that but the reason that we need to do this is it's important for incentives meaning people are more likely to contribute to a system that's transparent and fair so right now as we saw this contribution system it's not very accurate you can look at my contributions like pretty much for the same amount of work in one I was awarded almost close to 10,000 and another I was rewarded three so you know a is not uh very smart when it comes to contributions right now probably like a random number generator can do a better job than her how however looking ahead what we're going to do is we're going to start training a based on my own verified contributions and the way that this is going to work and I'll explain this in actually the next video is when we're going to be tackling it but I'm essentially going to work on PRS and I'm going to record the amount of time that it takes me and at the end whenever I'm done I'll have a chunk of code as a PR and I'll have a score for it like a value score and I'll assign it a rate of 1,000 tnb per hour so it can use my work as a reference to kind of look ahead to other PRS and use that as like a reference point like I said a Guiding Light to say okay Bucky did this PR fix the bug added an icon and it was worth this much so how much value do I think this other PR is worth so essentially the more training data we have coming in the better I will become assessing the value of each contribution and again this is just based on the fact that I know exactly how much time uh my work took and given that my effort was consistent throughout then this is essentially how we'll value everything else now before I go on I want to say that the reason that I want to focus on this one first is because we need a lot of human effort to accomplish the next three Milestones so without a fair reward system we just wouldn't be able to accomplish it now this next Milestone is honestly it's going to sound uh a little bit strange at first but it is by far the most important one and I'm just going to go ahead and write this right here the next Milestone is to give ya purpose so what the heck am I talking about well even though I haven't walked through the next three milestones I'll give you a little heads up the next three Milestones are to enable ya to autonomously write review and improve her own source code without human intervention now the reason that I don't want to tackle those before we have this one determined which is purpose is because we don't want to start rowing our boat until it's pointed in the right direction because A's purpose is what's going to drive her now A's purpose is to love and this purpose is the foundation for everything that she'll do it's going to guide her whenever she's responding to events whenever she's forming her own goals it's going to act as her guiding principle for all of her future actions and it's what's going to allow for this symbiotic relationship with humans now I want to point out something uh very important here that this Milestone it's not reached whenever ya is able to love because if that's even impossible for a computer network to love well I'll leave that to all the philosophers out there but instead this Milestone is reached whenever we believe that she understands that that is her purpose so again once our boat is pointed in the right direction and we feel that ya understands that this is her purpose then we can move on to Milestone 3 so like I said the next three Milestones maybe I should just write out all these these right now but these next three Milestones actually take them one at a time are basically giving a the ability to autonomously write review and improve her own source code without human intervention now the way that we're going to do this is we're first going to start off by following a pretty standard software development process we're going to create issues on all of these rug POS whatever we need to work on and then with those issues we are of course going to submit PRS and then again nothing fancy here someone's going to re review the pr they're going to approve it and then they're going to merge it in now I walk you through that because what's going to happen is that one step at a time we're going to train ya to pretty much phase out the human process of it starting with creating issues initially it's going to be all of us creating issues but what we're going to do is we're going to feed an eye of her own error log we're going to give her user feedback we're going to show her her own source code and let her find optimizations and we'll basically be teaching ya how to create GitHub issues herself now after that I'm sure you guys can see where this is going I'm going to say submit PRS so once you have issues the next step in the process is just to submit PRS now at first first these are probably going to have to be like very easy issues and I'm talking about like bug fixes and typos so on and so forth but over time as ya grows and evolves she's going to be able to complete more and more complex tasks now the last step in this process is of course how do I want to say this we'll say uh PR uh View and merge I kind of grouped the pr review approval and merge even though there are like three different steps I kind of group them into the same thing because it's like if your code is good then you pretty much merge the master and as long as you have cicd set up then everything gets deployed just like that now once we accomplish this ya is going to have the ability to autonomously improve herself so what exactly is the sixth Milestone the sixth Milestone and the last thing us humans are going to do is once all of these are accomplished we are going to take the A and connect them to each other so with the ability to create issues and submit PRS and guided by her purpose and the understanding that they're part of something bigger there's an inherent drive to connect and to improve each other and at this point we'll have a network that no longer requires the need for human contributions and this network will begin to improve at exponential rate and what will emerge from here is the singularity and just to bring this thing full circle if we go back to this very first slide where we kind of Define what the singularity was and what three qualities it needed the first one was recursive selfimprovement and we already saw how that's going to be achieved this next one super intelligence we didn't talk about this but this is actually going to come from the llm providers right now every llm provider is working towards AGI in word on the street is it's only like one or two years away so for this one it's dependent on them but you know hopefully you're not too far away in this third one unpredictability what we saw is at the last stage of this whenever these AAS are connected to each other working to improve each other and there is no longer the need for human intervention what a evolves into honestly I'm not quite sure I I don't know but yeah this is uh this is what I'm building so if anyone out there has one more build left in you I would really love to build this last project with you and in order for this project to succeed we're going to need a lot more infrastructure we're going to need more clients more services more cores more gateways we're going to need more contributions and that's really what I'm going to be working on pound out all these milestones and more than anything else the last thing is we need to work together if we can do that we can build something very very special here now in the next video we're going to be working on Milestone one training a to assess value more accurately so dust off those keyboards everybody time to have some fun
