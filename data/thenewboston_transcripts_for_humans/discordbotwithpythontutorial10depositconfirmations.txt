With timestamps:

00:00 - all right all you bros and bras so check
00:02 - it out in the last video what we did is
00:05 - we built the system to listen for
00:07 - incoming payments and we called those
00:10 - deposits and check this out our bot is
00:13 - getting so many deposits in it right now
00:15 - i mean things are looking good
00:17 - now before we can actually process the
00:20 - transaction like increase their balance
00:22 - or sell them whatever digital item that
00:25 - our discord bot is trying to sell them
00:27 - we need to first confirm their payment
00:31 - so
00:32 - that is what we're going to be doing in
00:33 - this video taking these deposits and let
00:36 - me pop that open one more time and
00:38 - saying okay these are all the deposits
00:40 - that we received and by default we're
00:42 - going to flag those as it is is
00:44 - confirmed false and zero confirmation
00:47 - checks
00:48 - so for any of these deposits that are
00:50 - not yet confirmed and have less than 20
00:53 - checks
00:54 - that means that we need to take those
00:56 - and query the blockchain again to look
00:58 - for confirmations
01:00 - all right simple enough so let's go
01:02 - ahead and get started
01:03 - so we already made this placeholder
01:05 - function couple tutorials ago called
01:07 - check confirmations so right above this
01:09 - check deposits function that i collapsed
01:12 - we can just make another one called
01:14 - check confirmations
01:16 - and then what is this going to do
01:19 - so we can say we can
01:22 - query
01:26 - unconfirmed uh
01:30 - from and i'll say from database
01:32 - just in case you want to swap out
01:34 - for another database later on
01:36 - and then
01:37 - whenever we have unconfirmed deposits
01:39 - what we need to do is we need to check
01:41 - the bank for a confirmation status on
01:43 - those so check bank for
01:49 - status r rate
01:51 - so
01:52 - the first step of course is to query
01:54 - unconfirmed deposits from our
01:57 - database
01:58 - so from these deposits
02:00 - right here what we can do actually let
02:02 - me set this equal to variable so i'll
02:04 - say
02:06 - unconfirm
02:09 - deposits is equal to the deposits
02:12 - collection and we want to find
02:17 - which ones do we want to find
02:19 - well the first thing that we want to do
02:21 - and let me pull open my deposits option
02:23 - object
02:24 - we want to make sure that the
02:26 - confirmation checks is less than what we
02:29 - have for settings because remember we
02:31 - let the discord bot developer set this
02:35 - so we'll say first
02:36 - make sure that you are only looking
02:39 - at the unconfirmed deposits
02:42 - and um the syntax for is a little
02:44 - bit goofy like this but in order to say
02:47 - less than
02:48 - maximum confirmation checks first you
02:51 - need to actually import this
02:53 - which i don't think i did already
02:57 - all right
02:59 - so the syntax for this is you need to
03:01 - make a nested object and you do dollar
03:03 - sign lt that means less than
03:06 - and then for the value you just write
03:08 - maximum confirmation checks which is in
03:11 - our case 20. so either way query from
03:13 - this deposits collection
03:15 - all of the deposits that have less than
03:18 - 20 confirmation checks what i want to do
03:20 - is also run this query for
03:23 - unconfirmed deposits where is confirmed
03:26 - is equal to none
03:28 - okay so this is going to query all of
03:30 - the deposits that we received but we
03:32 - have not checked the confirmation status
03:34 - on those yet
03:35 - so for those what we can do is well we
03:38 - got to go ahead and check it
03:40 - so for
03:42 - deposits in unconfirmed deposits and the
03:46 - first thing we want to do is get the
03:48 - block id because remember
03:51 - in our deposit object
03:53 - we store the block id
03:56 - and pulling my diagram open one more
03:58 - time so these deposits you can just
04:00 - think of those like bank transactions
04:03 - now these bank transactions
04:05 - what we need to do is we need to get the
04:07 - related block
04:08 - and then we need to see if there is a
04:10 - confirmation for that block so how do we
04:13 - do that in the network api
04:16 - well there is an endpoint on the bank
04:18 - called confirmation blocks
04:21 - and what you can do is you can pass in a
04:23 - block filter
04:25 - and then if it has results for example
04:28 - let me pass in uh this one i don't know
04:31 - what block this is but i'll kind of show
04:33 - you guys the example
04:34 - so in this we can say if block is equal
04:38 - to this id
04:39 - then it's going to come back and it says
04:41 - yes
04:42 - it has one confirmation on it so that's
04:45 - basically what we're going to do with
04:47 - the blocks related to our deposits using
04:50 - this confirmation blocks endpoint to see
04:52 - if they have any confirmations
04:54 - okay sounds good sounds good so now
04:57 - let's get to the meat and potatoes of
04:58 - this so the first thing we need to do on
05:01 - uh deposit is pull off the block id so
05:04 - we'll say the block id is equal to the
05:06 - posit
05:08 - and
05:08 - just make sure we get the right key
05:11 - that is equal to the deposits block id
05:14 - now after this we are essentially going
05:17 - to generate this url so let me just go
05:20 - ahead and copy that
05:24 - all right so i'll say the url is equal
05:26 - to
05:27 - and let me make this f string
05:30 - and okay so this was a random block that
05:33 - we had but of course we want to replace
05:35 - that with a block id
05:36 - now before i do that just want to make
05:38 - sure that we have the
05:40 - bank protocol
05:42 - and
05:45 - the bank ip
05:46 - and of course we're going to be looking
05:48 - for confirmation blocks for what block
05:51 - well not this random one we want to look
05:54 - for the block matching our block id
05:57 - for the now unconfirmed deposit
06:01 - so after this we're going to be uh
06:03 - making a request getting back some
06:05 - results and then we're gonna say if on
06:08 - this result set the count is greater
06:11 - or equal to one
06:13 - and let me just make a
06:15 - i'll just
06:16 - make a random block id to show you guys
06:18 - this okay so if no confirmation blocks
06:21 - exist then it's going to come back with
06:23 - something looking like this however if
06:26 - there are confirmations
06:27 - then we can look at this
06:29 - count property and pretty much just test
06:32 - the boolean value of this
06:34 - so that's the logic that we're going to
06:36 - be using
06:37 - and all right
06:39 - so let's go ahead and try to
06:41 - first fetch that data from the database
06:44 - and we are going to put this because if
06:46 - there are no confirmation blocks then we
06:48 - may get the error so we're just going to
06:49 - wrap this entire thing in a tri-set
06:51 - block
06:52 - so for the url
06:55 - this is of course going to be equal to
06:56 - the url we just generated and we just
06:59 - need to pass in headers but we don't
07:00 - have anything special to add so empty
07:02 - object
07:03 - so after this what we need to do is we
07:06 - need to get this count object
07:09 - so for
07:11 - we can just say this is equal to the
07:12 - number of confirmations
07:16 - and that is equal to data
07:21 - count
07:22 - all right looking beautiful and then we
07:24 - can just say
07:26 - here before i do this this is kind of
07:27 - annoying me
07:29 - where
07:31 - we can handle all exceptions and just
07:34 - pass because if there are any exceptions
07:37 - which means that there aren't any
07:38 - confirmations yet then we don't want to
07:41 - like break out of the loop or stop
07:42 - checking for any other
07:44 - deposits that we need to check for
07:46 - we just need to say okay we acknowledge
07:48 - that there aren't any confirmations
07:50 - let's just move on to the next
07:51 - unconfirmed deposit and check that one
07:53 - okay so i just wanted to throw that
07:55 - because i don't know feels weird right
07:56 - in a try block without any except
07:59 - but anyways popping back up here okay
08:01 - we're gonna say if there are
08:03 - confirmations then what this means is
08:06 - that we now have a newly confirmed
08:09 - deposit we can now go through and you
08:11 - know increment the user's balance or
08:14 - process registration whatever we want to
08:16 - do
08:16 - but for now i'm just going to write pass
08:18 - and let's say
08:20 - something like this
08:22 - we'll make a function later on that is
08:24 - like
08:25 - handle
08:26 - deposit
08:30 - confirmation
08:32 - and okay
08:33 - so this is the main logic however there
08:35 - is one other thing that i want to do
08:38 - and that is no matter if you
08:41 - did indeed
08:43 - find that yes this deposit is now
08:45 - confirmed
08:46 - or whether you
08:48 - ran this check and you say this deposit
08:50 - is not confirmed or in other words we
08:52 - don't know if it's confirmed yet either
08:54 - way what we want to do is we want to
08:56 - increment this value right here
08:58 - which is confirmation checks because
09:01 - remember we only want to check these a
09:02 - maximum of 20 times
09:04 - so how do we do that well we can code it
09:07 - right there but let's actually break
09:09 - this out
09:10 - just so we keep our code nice and clean
09:12 - and we will say
09:15 - create a new function called
09:19 - let me make
09:20 - sure increment
09:25 - confirmation checks
09:27 - and for this we are just going to pass
09:29 - in the entire
09:31 - deposit object
09:34 - and then we can say something like uh
09:36 - increment the number
09:45 - khan
09:50 - all right increment the number of
09:51 - confirmation checks for the given
09:53 - deposit
09:54 - so this is going to be a nice easy query
09:56 - what we do in our deposits collection
10:00 - is we're just going to update one
10:02 - and then the first argument this takes
10:05 - is the filter of what you want to update
10:08 - and we just want to update the deposit
10:11 - that we passed in so we'll say the id is
10:14 - equal to the deposits
10:17 - id
10:19 - all right so this is just going to
10:20 - return a query of
10:23 - one object
10:24 - and then after this to increment that
10:27 - value of confirmation checks remember
10:29 - this is kind of that weird syntax but we
10:31 - use dollar sign inc that means increment
10:35 - and now we have to give it a value that
10:38 - we want to increment and also the
10:40 - quantity that we want to increment it by
10:42 - and just to make sure that
10:45 - i
10:47 - don't have any typos or anything we say
10:49 - we want to increment the amount of
10:51 - confirmation checks by how many by one
10:54 - okay so now that we got this function
10:56 - that pretty much takes a deposit
10:58 - and all it is going to do if i pull open
11:01 -  it's going to take this value of
11:03 - confirmation checks and whenever we call
11:06 - this function it's just going to
11:07 - increment it by one so one then two then
11:09 - three then four
11:11 - simple enough
11:12 - and when do you want to call this
11:14 - you
11:15 - make sure i'm in the right place okay
11:18 - so for each deposit we want to call it
11:20 - on this regardless if we found that it
11:23 - does have a confirmation or it doesn't
11:25 - have a confirmation yet
11:27 - so increment confirmation checks deposit
11:29 - equal the deposit and there you go so i
11:32 - now believe you have two more functions
11:34 - to write the first one is handle deposit
11:37 - confirmation
11:38 - so this is a function that is
11:41 - essentially going to
11:43 - say whenever you do
11:44 - have a confirmation for this deposit
11:47 - then what we're going to do on this
11:49 - deposit is flag this in confirmed from
11:52 - false to true
11:54 - and then we'll also have it uh handle
11:56 - that other logic to say if this user
11:59 - already exists then update their balance
12:01 - if not we need to account for the fact
12:03 - that they may be trying to go through
12:05 - the registration process so that's what
12:08 - we're going to be doing right here so
12:10 - either way let me make sure
12:13 - okay
12:17 - so we'll say def handle deposit
12:19 - confirmation
12:21 - and this is going to take a
12:24 - deposit
12:29 - okay so
12:30 - first thing it's going to do is update
12:34 - confirmation
12:38 - and
12:40 - we'll say increase
12:42 - users
12:45 - balance or create a new user if they
12:51 - exist
12:55 - all right so whenever we get a deposit
12:58 - from a user take a note of this
13:02 - so right now we don't have any users
13:04 - added because no one registered yet and
13:06 - remember only when we can verify your
13:09 - registration
13:10 - that that account number does indeed
13:12 - belong to you do we create a new user in
13:15 - our database
13:16 - now if the user is going through the
13:18 - registration process again or maybe
13:19 - they're just trying to to deposit coins
13:22 - to their account then they're already
13:23 - going to have a user object in here in
13:25 - that case we either just need to update
13:27 - their account number or update their
13:29 - balance if they're just depositing coins
13:32 - so all right handle deposit confirmation
13:34 - let's go ahead and do it
13:36 - now
13:38 - we can probably steal this
13:40 - code right here because the first thing
13:43 - that we want to do is we just want to
13:45 - update the given deposit that they give
13:47 - us
13:48 - to toggle is confirmed equal to true
13:51 - so for this deposit
13:53 - same logic as before
13:55 - instead of increment since that adds to
13:58 - a numerical value we just want to set a
14:01 - value
14:02 - and that is is confirmed
14:06 - equal to true
14:08 - all right so whenever a deposit is
14:10 - confirmed of course we want to update is
14:12 - confirmed equal to true beautiful
14:14 - beautiful now right after this remember
14:16 - we are now to a point where we can
14:18 - essentially process their verified
14:21 - payment
14:22 - so if i can find this diagram again all
14:26 - right
14:29 - so when we do verify that the payment
14:32 - was accepted and added to the blockchain
14:35 - then we're going to do one of two things
14:37 - we're going to say was this user trying
14:40 - to register
14:41 - and that is why they're sending us this
14:44 - payment
14:45 - and if so we just need to essentially
14:47 - process their registration
14:49 - now if not
14:51 - and we receive the payment if it doesn't
14:53 - have anything to do with the
14:54 - registration process this likely just
14:56 - means that it's a user
14:58 - trying to send us coins to update their
15:00 - balance
15:02 - now
15:03 - that is the main flow we're gonna go
15:05 - from
15:06 - so before we check that we first need to
15:09 - see is there a registration related to
15:12 - this deposit and this is actually pretty
15:15 - easy
15:17 - all we have to do is query the
15:18 - registrations collection and check
15:20 - so we can say okay we're going to try to
15:23 - find a registration and the registration
15:28 - we're gonna find by the matching account
15:30 - number of the sender and the
15:32 - verification code
15:33 - all right
15:35 - so
15:37 - come down come down okay
15:39 - so the account number that we're going
15:41 - to match is for the deposits sender
15:45 - okay simple enough and the verification
15:48 - code
15:52 - that we're going to look for is for the
15:54 - deposit memo
15:57 - now if there is a matching object and
16:00 - let me see if five minute registration
16:01 - is pulled up here okay
16:03 - so if we found a registration in our
16:06 - registrations collection and we have a
16:08 - confirmed deposit with this information
16:11 - then that means that we need to send
16:13 - them through the registration handling
16:15 - process if not then we're just gonna um
16:18 - update the balance for this user
16:21 - so we'll say if a registration was found
16:25 - then let me just put
16:30 - handle registration
16:33 - i'll put pass for now
16:35 - else
16:38 - then what we are going to do
16:40 - is if we received a verified deposit
16:44 - and it wasn't a registration then what
16:46 - we can do is we can just update that
16:49 - user's balance
16:50 - so we are just going to go for the users
16:53 - collection we're going to do update one
16:56 - and then how are we going to find what
16:58 - user we need to update
17:00 - well we can actually just take this
17:02 - right here
17:05 - we're going to find it by the account
17:07 - number
17:08 - of the sender
17:10 - and then after this
17:13 - what do we want to do we just want to
17:15 - increment their balance so it's the same
17:17 - logic as here i'm just a little bit lazy
17:22 - so instead of incrementing their
17:24 - confirmation checks we are just going to
17:26 - increment
17:27 - their balance now by one no we actually
17:30 - want to increment it by the amount that
17:32 - they sent
17:34 - so deposit amounts just like that
17:37 - all right so this is looking beautiful
17:40 - and i believe we only have one more
17:42 - function to cover and that is handle
17:45 - registration
17:46 - so
17:47 - what is this handle deposit confirmation
17:49 - so let's put it above here
17:52 - so say handle registration and all this
17:54 - is going to do
17:56 - is is going to take in this registration
17:58 - that we found right here
18:02 - and we can say okay
18:07 - all right so the first thing that we
18:10 - need to do when handling registrations
18:12 - popping over my chart
18:14 - is remember from the very first tutorial
18:16 - where we need to say first let's just do
18:19 - another quick check to make sure that
18:20 - this
18:21 - um user doesn't already exist in other
18:23 - words the account number that we got
18:25 - with this related registration is not
18:28 - already
18:29 - existing in the um
18:31 - in the users collection
18:33 - now
18:34 - aside from that
18:36 - when we find okay this is the more
18:38 - normal flow where they're just trying to
18:40 - go through the registration process and
18:42 - nothing bad happened then what we need
18:44 - to decide is do we need to create a new
18:46 - user
18:47 - if this discord user is trying to
18:49 - register for the first time
18:51 - or if there is a user that already
18:53 - existed in our database and they fell
18:57 - through the entire registration process
18:58 - this means that we just need to update
19:00 - their account number
19:02 - okay so let's go ahead and get to it and
19:04 - we'll say ensure
19:06 - account number
19:12 - is not already registered and then we'll
19:14 - say we are either going to create a new
19:17 - user or
19:22 - or update the account number of an
19:24 - existing user
19:25 - beautiful
19:26 - so the
19:28 - first thing i'm going to do in this
19:29 - function is i'm actually going to pull
19:31 - out the
19:33 - this right here
19:35 - so since we already have an existing
19:38 - registration that we passed in i'm going
19:40 - to pull out the id from it because
19:42 - remember this is actually the discord's
19:44 - user id and i'm just going to rename it
19:47 - to a variable that makes a little bit
19:49 - more sense and the reason i'm doing that
19:51 - is because
19:52 - not only for uh clarification for
19:54 - whoever reading the code but also it's
19:57 - the same id that we're going to be using
19:58 - for the user object so since we're just
20:01 - going to be using this value a couple
20:02 - times i figured might as well just pluck
20:04 - it out and then all right so
20:07 - handle deposit confirmation might as
20:09 - well just pass in this deposit right now
20:12 - apparently forgot to do that
20:16 - and okay where am i
20:19 - handle registration that's what we were
20:22 - looking for
20:23 - okay so in handle registration i'm going
20:25 - to say discord
20:27 - user id
20:29 - and that's equal to the
20:32 - registrations unique id
20:36 - and then another thing that i want to do
20:38 - is i want to check if this account
20:40 - number was registered already
20:42 - so i'm actually going to be storing this
20:45 - in
20:48 - a variable as well even though we
20:50 - probably don't need to
20:52 - i want to do this because the query is
20:54 - going to look a little bit weird and i'm
20:56 - afraid anyone reading over this code if
20:58 - they just say okay we're checking for
21:00 - this query but why are you checking for
21:02 - it then it may be a little bit hard
21:05 - so either way
21:06 - even though
21:07 - all we are trying to do right here is
21:09 - we're going to say on the users
21:10 - collection
21:13 - is there a user with this account number
21:15 - already registered
21:17 - so
21:19 - okay gonna be super lazy here we're
21:22 - gonna say is there a user with the
21:24 - account number that already matches the
21:27 - registration account number
21:31 - and we're going to take this entire
21:32 - result set and wrap it into boolean
21:35 - so if it comes back is true that means
21:37 - that something must have messed up well
21:39 - not messed up it's a edge case that we
21:40 - accounted for and it says the account
21:42 - number's already registered
21:44 - so you can't register it
21:46 - so in that case we are just going to run
21:48 - this logic right here where we say hey
21:51 - there's an error you already registered
21:52 - and we're just going to delete that
21:54 - registration since it has no more
21:55 - purpose
21:58 - so
21:59 - let me actually just write this logic
22:01 - real quick okay
22:03 - so we'll say if not account number
22:06 - register which is the ideal flow that we
22:09 - want to get through we're going to write
22:10 - this logic in just a bit but for right
22:12 - now we can write pass for the time being
22:14 - we can just um write that edge case
22:17 - logic where if we say if the account
22:19 - number is already registered instead of
22:22 - setting the user up instead what we're
22:24 - just going to do is delete
22:27 - that registration from our registrations
22:31 - collection
22:32 - and in order to do that
22:35 - we can just do this
22:37 - what registration do you want to delete
22:39 - the one with the id equal to this id
22:44 - we can either do this but yeah since you
22:46 - already have this variable pulled out we
22:48 - can just say this one
22:50 - okay so that's the edge case but now
22:51 - let's get to the meat and potatoes of
22:54 - this actual registration logic so what
22:56 - i'm going to do is i'm about to query
22:58 - the user's collection but first i want
23:00 - to make sure that i store those results
23:03 - as we'll say existing user
23:06 - and we're just going to do users find
23:09 - one
23:10 - and who are we trying to find well
23:14 - we are trying to find a user
23:16 - with the id of the discord id because
23:19 - just a refresh
23:21 - this is what a user's object is going to
23:23 - look like with the id being their
23:25 - discord id their account number being
23:27 - whatever account number they've verified
23:28 - and registered and then a balance
23:30 - and the next bit of logic is pretty easy
23:33 - because we're just going to say if there
23:34 - is an existing user
23:37 - then what we need to do is on users
23:39 - update one
23:41 - and remember the first
23:44 - bit of info you need to pass in is who
23:46 - are you updating well we're updating
23:48 - this user the one that exists basically
23:51 - and then what are you trying to do to
23:53 - them well
23:55 - that sounded kind of weird but all we
23:57 - are doing is we need to set their
23:59 - account number
24:02 - equal to the new one that they passed in
24:05 - so set their account number equal to the
24:07 - registration account number
24:12 - all right so if there's a user
24:15 - going through the registration process
24:18 - then if they already exist then just
24:20 - update their account number
24:23 - else if there is not a user yet then
24:26 - what we just want to do is add one to
24:27 - the users collection so users insert one
24:32 - and the id is gonna be equal to
24:35 - that same id
24:37 - and their account number this is gonna
24:40 - be the same two
24:42 - is gonna be that registration account
24:44 - number
24:45 - and now the one thing that we do want to
24:46 - specify is that
24:49 - when we first create a user
24:51 - that they just have zero balance
24:54 - now with
24:56 - this i believe all of our logic is
25:00 - complete
25:01 - so now what i want to do is this i'm
25:04 - gonna run this in a second but what i
25:06 - want to do first is just clean out all
25:09 - of my tables so okay
25:11 - users collection uh nothing in there
25:13 - that's great i'm gonna drop this
25:15 - registrations collection remember these
25:18 - are gonna be created on the fly
25:20 - as needed if everything is working
25:23 - smooth
25:24 - so let's test this bad boy from the
25:26 - ground up okay
25:28 - so i kept my users collection in here
25:31 - just like i'm starting out for the very
25:32 - first time gonna refresh okay
25:35 - everything is good to go have a clear
25:37 - testing ground
25:38 - and now let me go ahead and run this
25:42 - so wait for my bot to be ready and okay
25:45 - gotta air this is a great start
25:48 - all right so i'm a and i
25:51 - accidentally put a comma right here
25:54 - when it should have been a colon so
25:58 - let's go ahead and actually i should
26:02 - okay let me clean this up and let me
26:05 - remove these again
26:10 - okay so now let me refresh and okay
26:13 - now that we got all the bugs out of the
26:15 - way and actually let me
26:17 - do one more thing and that is this
26:22 - i'm gonna look at all those passes i
26:24 - wrote
26:26 - and
26:28 - okay
26:32 - okay so i just had some extra passes so
26:34 - my ide wasn't yelling at me before but
26:37 - now that all our code is cleaned up and
26:40 - hopefully we don't have any more issues
26:42 - uh database is uh fresh for start let's
26:45 - go ahead and run this
26:47 - and fingers crossed okay
26:50 - so it says ready pulling blockchain and
26:52 - then let me pop open and refresh
26:54 - this
26:55 - and okay it looks like we do indeed have
26:58 - some deposits
27:00 - all right looking good now let me
27:02 - refresh this check users again and great
27:05 - so no users meaning that okay it's now
27:09 - listening for uh deposits on the
27:11 - blockchain but of course we didn't
27:13 - register yet
27:15 - so now let me go through and
27:17 - let's see okay
27:19 - i'm gonna register my account number so
27:22 - in here i'm gonna copy my account number
27:25 - and i'm gonna say
27:27 - register this account number hit enter
27:30 - and it said registration created
27:32 - so that's a good first step already now
27:35 - back in if i refresh
27:37 - we should now have a registration and
27:39 - that is for my account number and the
27:41 - verification code is
27:44 - i'm not even i was going to try to
27:45 - pronounce that oyala five i think that's
27:48 - how you pronounce it okay
27:50 - so anyways i'm gonna get a dm
27:52 - and it's gonna say account registration
27:55 - yada yada to complete registration
27:57 - please send the following transaction
27:58 - this is my account that i'm gonna be
28:00 - sending it from
28:01 - this to is the bots account
28:04 - so let me pop open
28:06 - my account manager and say we're going
28:08 - to be sending it to
28:10 - the bots account
28:12 - and then what is the memo oil five fiber
28:15 - whatever i said
28:17 - uh that's the memo
28:19 - and
28:20 - you should be receiving one coin
28:22 - so now i'm going to send this
28:25 - and all right payment has been sent now
28:28 - if we pop open again
28:31 - in this registrations or let's first
28:34 - look at deposits so i'm going to refresh
28:35 - deposit
28:37 - and that's not good so we had five
28:40 - before but we should be seeing six so
28:43 - let's go ahead and look at our api
28:46 - and yeah we do have six transactions in
28:48 - our api so what
28:50 - okay
28:51 - actually i think i know what the issue
28:53 - is okay
28:54 - so
28:55 - what we
28:56 - were doing i have a very strong
28:58 - suspicion okay so whenever we were
29:01 - checking for deposits that what we were
29:03 - doing is we were passing in the ordering
29:06 - and we were starting with even though we
29:08 - were saying a block created date
29:10 - that we need to do a minus right here
29:13 - because
29:14 - uh
29:15 - this is going to do the most recent
29:18 - dates first i always get confused
29:22 - ascending and descending with dates
29:24 - uh what one is more most recent and one
29:26 - one is oldest but anyway i have a
29:28 - feeling that this is uh what was
29:30 - happening
29:31 - so since uh it was incorrectly starting
29:34 - with the oldest transactions first
29:36 - once it saw a transaction that already
29:38 - existed and tried to add it as the
29:41 - deposit then it just broke out a little
29:44 - bit too early and it never got to those
29:46 - new ones however with this update we
29:48 - should be getting in the most recent
29:50 - deposits first so it should add those is
29:53 - new deposits so now and hopefully for
29:56 - the last time got my bot stopped uh
29:59 - let's go ahead and delete this
30:04 - all right see your deposits and also
30:11 - see your registrations
30:14 - users all cleared out refresh refresh
30:16 - okay
30:17 - so fingers crossed
30:20 - let's go ahead and run this bad boy one
30:22 - more time and see if it works
30:24 - so we're gonna run main
30:26 - hopefully we don't get any errors right
30:28 - away okay pulling the blockchain looks
30:31 - good
30:32 - so what i'm gonna do now is in discord
30:36 - actually let me get my account number
30:38 - so i'm going to try to register this
30:40 - account
30:42 - so in discord i'm just going to hit
30:45 - register this account registration
30:47 - created
30:48 - i'm going to pop open my discord bot and
30:50 - it's gonna say send a coin
30:52 - from your account that you're trying to
30:54 - register to the discord bot account
30:57 - with onecoin
31:00 - and i already have the bot account right
31:02 - there uh this is the memo that it asks
31:05 - for it asks for one coin so we're going
31:08 - to go ahead and send that
31:10 - and now in we should see another
31:13 - deposit pop up
31:16 - so okay and actually what was that memo
31:19 - so the memo was
31:20 - f4 m if you guys can't read it on your
31:23 - screen
31:24 - so in
31:26 - okay very cool so f4 m looking good
31:30 - and by this point i do not have a
31:33 - registration because hopefully it
31:35 - happened so fast that it already
31:37 - converted it to a user
31:39 - all right so that is working as expected
31:42 - uh my registration was successful and we
31:45 - probably do want to send them some kind
31:47 - of message back to let them know that
31:49 - everything was successful they are now a
31:51 - valid user but for now uh let's just
31:54 - test first of all the logic of whenever
31:57 - i send more coins to
31:59 - um this bot that it just adds my balance
32:02 - so let me pop open my account manager
32:05 - and i'm just going to say i'm going to
32:06 - send
32:08 - let's do 25 coins to the bot and since
32:12 - all of this is registered
32:14 - i already have everything hooked up
32:16 - then i shouldn't need to
32:18 - edit anything for the memo or have to
32:20 - re-register again whatever
32:23 - and we don't have any status checks or
32:25 - anything built in but what we can do is
32:27 - just refresh it right there and boom
32:29 - look at that
32:30 - so in which is kind of the source
32:33 - of truth for the bot my balance did
32:34 - update
32:35 - in one last flow that i want to cover is
32:39 - this
32:40 - what happens when i created this cool
32:42 - new account called baku and i want to
32:44 - update my account number to be this
32:47 - well in the discord box
32:50 - people are messaging me right now i just
32:52 - say i want to register a new account
32:55 - number so register db whatever
32:59 - okay so the tutorials bot says okay you
33:01 - can do that that's cool but you're gonna
33:03 - have to send a coin
33:05 - with this memo
33:07 - so i can say i can do that so to the bot
33:11 - i'm just gonna send a coin with the most
33:13 - recent memo to update my account number
33:16 - and when i send this
33:19 - okay it got deducted from my account
33:22 - and now let's see is there a
33:24 - registration it doesn't look like it so
33:28 - if i refresh this you can well i don't
33:30 - even need to refresh it you see that my
33:32 - balance is the same however i now have
33:35 - that brand new account number db9 yada
33:39 - yada yada yada
33:41 - all right so that was a long little mini
33:45 - series but i mean very informative and
33:47 - now what we got is a nice little
33:50 - tnb discord payment integration
33:54 - so you can begin making bots that accept
33:56 - tnb coins and again hopefully i
34:00 - try to teach this in a way that the
34:01 - concepts in the
34:03 - core architecture of what we're learning
34:05 - if you want to plug this into another
34:08 - blockchain then you can easily do that
34:09 - as well
34:10 - but yeah um
34:12 - last but not least actually let me know
34:15 - how you guys like this series if you
34:17 - prefer shorter videos covering the
34:19 - concepts or if every now and again you
34:21 - like to break out and do a larger
34:22 - project like this i had a lot of fun and
34:25 - it was uh pretty interesting had a
34:27 - couple bugs at the end but you know we
34:29 - got through it
34:30 - and um yeah just with love you guys
34:32 - feedback so let me know what you thought
34:35 - and thank you guys for watching and i'll
34:36 - see you next time

Cleaned transcript:

all right all you bros and bras so check it out in the last video what we did is we built the system to listen for incoming payments and we called those deposits and check this out our bot is getting so many deposits in it right now i mean things are looking good now before we can actually process the transaction like increase their balance or sell them whatever digital item that our discord bot is trying to sell them we need to first confirm their payment so that is what we're going to be doing in this video taking these deposits and let me pop that open one more time and saying okay these are all the deposits that we received and by default we're going to flag those as it is is confirmed false and zero confirmation checks so for any of these deposits that are not yet confirmed and have less than 20 checks that means that we need to take those and query the blockchain again to look for confirmations all right simple enough so let's go ahead and get started so we already made this placeholder function couple tutorials ago called check confirmations so right above this check deposits function that i collapsed we can just make another one called check confirmations and then what is this going to do so we can say we can query unconfirmed uh from and i'll say from database just in case you want to swap out for another database later on and then whenever we have unconfirmed deposits what we need to do is we need to check the bank for a confirmation status on those so check bank for status r rate so the first step of course is to query unconfirmed deposits from our database so from these deposits right here what we can do actually let me set this equal to variable so i'll say unconfirm deposits is equal to the deposits collection and we want to find which ones do we want to find well the first thing that we want to do and let me pull open my deposits option object we want to make sure that the confirmation checks is less than what we have for settings because remember we let the discord bot developer set this so we'll say first make sure that you are only looking at the unconfirmed deposits and um the syntax for is a little bit goofy like this but in order to say less than maximum confirmation checks first you need to actually import this which i don't think i did already all right so the syntax for this is you need to make a nested object and you do dollar sign lt that means less than and then for the value you just write maximum confirmation checks which is in our case 20. so either way query from this deposits collection all of the deposits that have less than 20 confirmation checks what i want to do is also run this query for unconfirmed deposits where is confirmed is equal to none okay so this is going to query all of the deposits that we received but we have not checked the confirmation status on those yet so for those what we can do is well we got to go ahead and check it so for deposits in unconfirmed deposits and the first thing we want to do is get the block id because remember in our deposit object we store the block id and pulling my diagram open one more time so these deposits you can just think of those like bank transactions now these bank transactions what we need to do is we need to get the related block and then we need to see if there is a confirmation for that block so how do we do that in the network api well there is an endpoint on the bank called confirmation blocks and what you can do is you can pass in a block filter and then if it has results for example let me pass in uh this one i don't know what block this is but i'll kind of show you guys the example so in this we can say if block is equal to this id then it's going to come back and it says yes it has one confirmation on it so that's basically what we're going to do with the blocks related to our deposits using this confirmation blocks endpoint to see if they have any confirmations okay sounds good sounds good so now let's get to the meat and potatoes of this so the first thing we need to do on uh deposit is pull off the block id so we'll say the block id is equal to the posit and just make sure we get the right key that is equal to the deposits block id now after this we are essentially going to generate this url so let me just go ahead and copy that all right so i'll say the url is equal to and let me make this f string and okay so this was a random block that we had but of course we want to replace that with a block id now before i do that just want to make sure that we have the bank protocol and the bank ip and of course we're going to be looking for confirmation blocks for what block well not this random one we want to look for the block matching our block id for the now unconfirmed deposit so after this we're going to be uh making a request getting back some results and then we're gonna say if on this result set the count is greater or equal to one and let me just make a i'll just make a random block id to show you guys this okay so if no confirmation blocks exist then it's going to come back with something looking like this however if there are confirmations then we can look at this count property and pretty much just test the boolean value of this so that's the logic that we're going to be using and all right so let's go ahead and try to first fetch that data from the database and we are going to put this because if there are no confirmation blocks then we may get the error so we're just going to wrap this entire thing in a triset block so for the url this is of course going to be equal to the url we just generated and we just need to pass in headers but we don't have anything special to add so empty object so after this what we need to do is we need to get this count object so for we can just say this is equal to the number of confirmations and that is equal to data count all right looking beautiful and then we can just say here before i do this this is kind of annoying me where we can handle all exceptions and just pass because if there are any exceptions which means that there aren't any confirmations yet then we don't want to like break out of the loop or stop checking for any other deposits that we need to check for we just need to say okay we acknowledge that there aren't any confirmations let's just move on to the next unconfirmed deposit and check that one okay so i just wanted to throw that because i don't know feels weird right in a try block without any except but anyways popping back up here okay we're gonna say if there are confirmations then what this means is that we now have a newly confirmed deposit we can now go through and you know increment the user's balance or process registration whatever we want to do but for now i'm just going to write pass and let's say something like this we'll make a function later on that is like handle deposit confirmation and okay so this is the main logic however there is one other thing that i want to do and that is no matter if you did indeed find that yes this deposit is now confirmed or whether you ran this check and you say this deposit is not confirmed or in other words we don't know if it's confirmed yet either way what we want to do is we want to increment this value right here which is confirmation checks because remember we only want to check these a maximum of 20 times so how do we do that well we can code it right there but let's actually break this out just so we keep our code nice and clean and we will say create a new function called let me make sure increment confirmation checks and for this we are just going to pass in the entire deposit object and then we can say something like uh increment the number khan all right increment the number of confirmation checks for the given deposit so this is going to be a nice easy query what we do in our deposits collection is we're just going to update one and then the first argument this takes is the filter of what you want to update and we just want to update the deposit that we passed in so we'll say the id is equal to the deposits id all right so this is just going to return a query of one object and then after this to increment that value of confirmation checks remember this is kind of that weird syntax but we use dollar sign inc that means increment and now we have to give it a value that we want to increment and also the quantity that we want to increment it by and just to make sure that i don't have any typos or anything we say we want to increment the amount of confirmation checks by how many by one okay so now that we got this function that pretty much takes a deposit and all it is going to do if i pull open it's going to take this value of confirmation checks and whenever we call this function it's just going to increment it by one so one then two then three then four simple enough and when do you want to call this you make sure i'm in the right place okay so for each deposit we want to call it on this regardless if we found that it does have a confirmation or it doesn't have a confirmation yet so increment confirmation checks deposit equal the deposit and there you go so i now believe you have two more functions to write the first one is handle deposit confirmation so this is a function that is essentially going to say whenever you do have a confirmation for this deposit then what we're going to do on this deposit is flag this in confirmed from false to true and then we'll also have it uh handle that other logic to say if this user already exists then update their balance if not we need to account for the fact that they may be trying to go through the registration process so that's what we're going to be doing right here so either way let me make sure okay so we'll say def handle deposit confirmation and this is going to take a deposit okay so first thing it's going to do is update confirmation and we'll say increase users balance or create a new user if they exist all right so whenever we get a deposit from a user take a note of this so right now we don't have any users added because no one registered yet and remember only when we can verify your registration that that account number does indeed belong to you do we create a new user in our database now if the user is going through the registration process again or maybe they're just trying to to deposit coins to their account then they're already going to have a user object in here in that case we either just need to update their account number or update their balance if they're just depositing coins so all right handle deposit confirmation let's go ahead and do it now we can probably steal this code right here because the first thing that we want to do is we just want to update the given deposit that they give us to toggle is confirmed equal to true so for this deposit same logic as before instead of increment since that adds to a numerical value we just want to set a value and that is is confirmed equal to true all right so whenever a deposit is confirmed of course we want to update is confirmed equal to true beautiful beautiful now right after this remember we are now to a point where we can essentially process their verified payment so if i can find this diagram again all right so when we do verify that the payment was accepted and added to the blockchain then we're going to do one of two things we're going to say was this user trying to register and that is why they're sending us this payment and if so we just need to essentially process their registration now if not and we receive the payment if it doesn't have anything to do with the registration process this likely just means that it's a user trying to send us coins to update their balance now that is the main flow we're gonna go from so before we check that we first need to see is there a registration related to this deposit and this is actually pretty easy all we have to do is query the registrations collection and check so we can say okay we're going to try to find a registration and the registration we're gonna find by the matching account number of the sender and the verification code all right so come down come down okay so the account number that we're going to match is for the deposits sender okay simple enough and the verification code that we're going to look for is for the deposit memo now if there is a matching object and let me see if five minute registration is pulled up here okay so if we found a registration in our registrations collection and we have a confirmed deposit with this information then that means that we need to send them through the registration handling process if not then we're just gonna um update the balance for this user so we'll say if a registration was found then let me just put handle registration i'll put pass for now else then what we are going to do is if we received a verified deposit and it wasn't a registration then what we can do is we can just update that user's balance so we are just going to go for the users collection we're going to do update one and then how are we going to find what user we need to update well we can actually just take this right here we're going to find it by the account number of the sender and then after this what do we want to do we just want to increment their balance so it's the same logic as here i'm just a little bit lazy so instead of incrementing their confirmation checks we are just going to increment their balance now by one no we actually want to increment it by the amount that they sent so deposit amounts just like that all right so this is looking beautiful and i believe we only have one more function to cover and that is handle registration so what is this handle deposit confirmation so let's put it above here so say handle registration and all this is going to do is is going to take in this registration that we found right here and we can say okay all right so the first thing that we need to do when handling registrations popping over my chart is remember from the very first tutorial where we need to say first let's just do another quick check to make sure that this um user doesn't already exist in other words the account number that we got with this related registration is not already existing in the um in the users collection now aside from that when we find okay this is the more normal flow where they're just trying to go through the registration process and nothing bad happened then what we need to decide is do we need to create a new user if this discord user is trying to register for the first time or if there is a user that already existed in our database and they fell through the entire registration process this means that we just need to update their account number okay so let's go ahead and get to it and we'll say ensure account number is not already registered and then we'll say we are either going to create a new user or or update the account number of an existing user beautiful so the first thing i'm going to do in this function is i'm actually going to pull out the this right here so since we already have an existing registration that we passed in i'm going to pull out the id from it because remember this is actually the discord's user id and i'm just going to rename it to a variable that makes a little bit more sense and the reason i'm doing that is because not only for uh clarification for whoever reading the code but also it's the same id that we're going to be using for the user object so since we're just going to be using this value a couple times i figured might as well just pluck it out and then all right so handle deposit confirmation might as well just pass in this deposit right now apparently forgot to do that and okay where am i handle registration that's what we were looking for okay so in handle registration i'm going to say discord user id and that's equal to the registrations unique id and then another thing that i want to do is i want to check if this account number was registered already so i'm actually going to be storing this in a variable as well even though we probably don't need to i want to do this because the query is going to look a little bit weird and i'm afraid anyone reading over this code if they just say okay we're checking for this query but why are you checking for it then it may be a little bit hard so either way even though all we are trying to do right here is we're going to say on the users collection is there a user with this account number already registered so okay gonna be super lazy here we're gonna say is there a user with the account number that already matches the registration account number and we're going to take this entire result set and wrap it into boolean so if it comes back is true that means that something must have messed up well not messed up it's a edge case that we accounted for and it says the account number's already registered so you can't register it so in that case we are just going to run this logic right here where we say hey there's an error you already registered and we're just going to delete that registration since it has no more purpose so let me actually just write this logic real quick okay so we'll say if not account number register which is the ideal flow that we want to get through we're going to write this logic in just a bit but for right now we can write pass for the time being we can just um write that edge case logic where if we say if the account number is already registered instead of setting the user up instead what we're just going to do is delete that registration from our registrations collection and in order to do that we can just do this what registration do you want to delete the one with the id equal to this id we can either do this but yeah since you already have this variable pulled out we can just say this one okay so that's the edge case but now let's get to the meat and potatoes of this actual registration logic so what i'm going to do is i'm about to query the user's collection but first i want to make sure that i store those results as we'll say existing user and we're just going to do users find one and who are we trying to find well we are trying to find a user with the id of the discord id because just a refresh this is what a user's object is going to look like with the id being their discord id their account number being whatever account number they've verified and registered and then a balance and the next bit of logic is pretty easy because we're just going to say if there is an existing user then what we need to do is on users update one and remember the first bit of info you need to pass in is who are you updating well we're updating this user the one that exists basically and then what are you trying to do to them well that sounded kind of weird but all we are doing is we need to set their account number equal to the new one that they passed in so set their account number equal to the registration account number all right so if there's a user going through the registration process then if they already exist then just update their account number else if there is not a user yet then what we just want to do is add one to the users collection so users insert one and the id is gonna be equal to that same id and their account number this is gonna be the same two is gonna be that registration account number and now the one thing that we do want to specify is that when we first create a user that they just have zero balance now with this i believe all of our logic is complete so now what i want to do is this i'm gonna run this in a second but what i want to do first is just clean out all of my tables so okay users collection uh nothing in there that's great i'm gonna drop this registrations collection remember these are gonna be created on the fly as needed if everything is working smooth so let's test this bad boy from the ground up okay so i kept my users collection in here just like i'm starting out for the very first time gonna refresh okay everything is good to go have a clear testing ground and now let me go ahead and run this so wait for my bot to be ready and okay gotta air this is a great start all right so i'm a and i accidentally put a comma right here when it should have been a colon so let's go ahead and actually i should okay let me clean this up and let me remove these again okay so now let me refresh and okay now that we got all the bugs out of the way and actually let me do one more thing and that is this i'm gonna look at all those passes i wrote and okay okay so i just had some extra passes so my ide wasn't yelling at me before but now that all our code is cleaned up and hopefully we don't have any more issues uh database is uh fresh for start let's go ahead and run this and fingers crossed okay so it says ready pulling blockchain and then let me pop open and refresh this and okay it looks like we do indeed have some deposits all right looking good now let me refresh this check users again and great so no users meaning that okay it's now listening for uh deposits on the blockchain but of course we didn't register yet so now let me go through and let's see okay i'm gonna register my account number so in here i'm gonna copy my account number and i'm gonna say register this account number hit enter and it said registration created so that's a good first step already now back in if i refresh we should now have a registration and that is for my account number and the verification code is i'm not even i was going to try to pronounce that oyala five i think that's how you pronounce it okay so anyways i'm gonna get a dm and it's gonna say account registration yada yada to complete registration please send the following transaction this is my account that i'm gonna be sending it from this to is the bots account so let me pop open my account manager and say we're going to be sending it to the bots account and then what is the memo oil five fiber whatever i said uh that's the memo and you should be receiving one coin so now i'm going to send this and all right payment has been sent now if we pop open again in this registrations or let's first look at deposits so i'm going to refresh deposit and that's not good so we had five before but we should be seeing six so let's go ahead and look at our api and yeah we do have six transactions in our api so what okay actually i think i know what the issue is okay so what we were doing i have a very strong suspicion okay so whenever we were checking for deposits that what we were doing is we were passing in the ordering and we were starting with even though we were saying a block created date that we need to do a minus right here because uh this is going to do the most recent dates first i always get confused ascending and descending with dates uh what one is more most recent and one one is oldest but anyway i have a feeling that this is uh what was happening so since uh it was incorrectly starting with the oldest transactions first once it saw a transaction that already existed and tried to add it as the deposit then it just broke out a little bit too early and it never got to those new ones however with this update we should be getting in the most recent deposits first so it should add those is new deposits so now and hopefully for the last time got my bot stopped uh let's go ahead and delete this all right see your deposits and also see your registrations users all cleared out refresh refresh okay so fingers crossed let's go ahead and run this bad boy one more time and see if it works so we're gonna run main hopefully we don't get any errors right away okay pulling the blockchain looks good so what i'm gonna do now is in discord actually let me get my account number so i'm going to try to register this account so in discord i'm just going to hit register this account registration created i'm going to pop open my discord bot and it's gonna say send a coin from your account that you're trying to register to the discord bot account with onecoin and i already have the bot account right there uh this is the memo that it asks for it asks for one coin so we're going to go ahead and send that and now in we should see another deposit pop up so okay and actually what was that memo so the memo was f4 m if you guys can't read it on your screen so in okay very cool so f4 m looking good and by this point i do not have a registration because hopefully it happened so fast that it already converted it to a user all right so that is working as expected uh my registration was successful and we probably do want to send them some kind of message back to let them know that everything was successful they are now a valid user but for now uh let's just test first of all the logic of whenever i send more coins to um this bot that it just adds my balance so let me pop open my account manager and i'm just going to say i'm going to send let's do 25 coins to the bot and since all of this is registered i already have everything hooked up then i shouldn't need to edit anything for the memo or have to reregister again whatever and we don't have any status checks or anything built in but what we can do is just refresh it right there and boom look at that so in which is kind of the source of truth for the bot my balance did update in one last flow that i want to cover is this what happens when i created this cool new account called baku and i want to update my account number to be this well in the discord box people are messaging me right now i just say i want to register a new account number so register db whatever okay so the tutorials bot says okay you can do that that's cool but you're gonna have to send a coin with this memo so i can say i can do that so to the bot i'm just gonna send a coin with the most recent memo to update my account number and when i send this okay it got deducted from my account and now let's see is there a registration it doesn't look like it so if i refresh this you can well i don't even need to refresh it you see that my balance is the same however i now have that brand new account number db9 yada yada yada yada all right so that was a long little mini series but i mean very informative and now what we got is a nice little tnb discord payment integration so you can begin making bots that accept tnb coins and again hopefully i try to teach this in a way that the concepts in the core architecture of what we're learning if you want to plug this into another blockchain then you can easily do that as well but yeah um last but not least actually let me know how you guys like this series if you prefer shorter videos covering the concepts or if every now and again you like to break out and do a larger project like this i had a lot of fun and it was uh pretty interesting had a couple bugs at the end but you know we got through it and um yeah just with love you guys feedback so let me know what you thought and thank you guys for watching and i'll see you next time
