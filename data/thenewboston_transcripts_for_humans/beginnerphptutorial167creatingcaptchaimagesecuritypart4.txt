With timestamps:

00:00 - so now obviously this image is useless
00:03 - without our user input so what we want
00:06 - to do is we want to we've already broken
00:08 - down a line we want to create a form and
00:10 - this form is going to submit to this
00:13 - index.php page and it's going to check
00:17 - that the GD value in fact no we're going
00:20 - to submit to another page I think that's
00:21 - probably a bit better and the reason
00:24 - we're submitting to another page is is
00:28 - what we're doing is we are refreshing
00:31 - when we come back on ourselves so we've
00:34 - got form action equals check PHP that's
00:38 - absolutely fine and now in fact we will
00:40 - go back to the index page right okay so
00:45 - now we need to say type the value equal
00:49 - value you see okay and then we can
00:53 - create an input type of text and we'll
00:57 - give this the size of six just to keep
00:59 - things quite neat and then I'm going to
01:01 - say a name is secure and then obviously
01:06 - we need a submit button
01:08 - so we'll preview this in a moment to
01:10 - make sure we like the look of it so
01:13 - submit for the value okay so let's start
01:16 - preview this and see what we think
01:18 - okay so type the value you see we're
01:21 - going to type the value in here and then
01:24 - we're going to click Submit okay so at
01:27 - the moment nothing's happening cuz we
01:28 - haven't created a process for this but
01:31 - up here what we want to do now is we
01:33 - want to say if the form has been
01:36 - submitted so if the user has submitted
01:38 - the form we don't want to generate a
01:41 - random number just yet so if is set and
01:48 - the variable that we're taking into
01:49 - account is this post variable secured
01:52 - down here so dollar underscore post and
01:54 - that is secure so if is set or if not
02:00 - set we can generate a number
02:05 - otherwise we can do some some validation
02:08 - of this so what we can say is we can say
02:12 - else and we can say if dollar underscore
02:17 - session secured is equal to dollar
02:23 - underscore post secured so essentially
02:27 - what we're saying is if the session
02:29 - that's been set so the random number
02:31 - that's been set and displayed in our
02:32 - image is equal to the post that the user
02:35 - has made so the images that the letter
02:37 - or the numbers so that they've seen then
02:40 - we can do something so we can say echo
02:44 - success or or a match for example
02:49 - otherwise we can say echo incorrect try
02:59 - again and then this is important what we
03:01 - need to do is we need to generate
03:03 - another one of these because they've got
03:06 - it incorrect therefore we want to change
03:08 - the value so they have to look at
03:10 - another another value without this what
03:13 - we're going to just be doing is
03:14 - displaying the same value to them now
03:16 - for this example where we're echoing out
03:18 - a match but this could be part of your
03:21 - form validation so if you're validating
03:23 - say I user name password a first name
03:27 - and a surname you'd want to include the
03:29 - relevant checks in there then register
03:31 - your user then forward them into another
03:32 - page you wouldn't be forwarding back to
03:35 - the same page and if I was to say yet
03:37 - successful we wouldn't be showing the
03:39 - registration form so hopefully that
03:40 - makes sense to you let's refresh the
03:43 - page so let's try and have a look at
03:45 - this image according to everything I've
03:48 - written hopefully this works now the
03:50 - first thing I'm going to do is I'm going
03:51 - to type in the correct image to see
03:53 - where the corrector numbers to see what
03:55 - we get up so three to eight four let's
03:58 - click Submit okay so it's as a match
04:02 - let's just create a break before this
04:05 - image to make everything look a bit
04:07 - neater to refresh that so we've got a
04:10 - match so we've got three to eight four
04:12 - we typed in three to wait for that's
04:14 - fine now let's type in
04:16 - well presumably this now would have
04:18 - registered the user and gone to another
04:20 - page so let's go back onto your next up
04:22 - PHP and generate another number so
04:24 - you've got 4 9 6 8 here let's type in 1
04:27 - 2 3 4 we click Submit now what it says
04:31 - is incorrect try again it's generated a
04:33 - new number so now I can't make this out
04:37 - I think it's 7 4 7 7 let's try 7 4 7 7
04:40 - click Submit incorrect try again 4 5 9 3
04:46 - submit and it says a match say 4 5 9 3
04:50 - it successful we've successfully you
04:54 - know typed in the number so we're saying
04:56 - a match and we've still kept this number
04:58 - here but obviously would be something
05:00 - forwarding the user elsewhere at this
05:02 - point but you can see that the most
05:04 - important part about this is if the user
05:06 - gets it wrong that generated a new
05:09 - number to try so every time they get it
05:11 - wrong generating a new number to try so
05:15 - this is basically capture in PHP with
05:19 - the GD library and how we generate a
05:22 - random number you can use letters as
05:24 - well that's perfectly acceptable we're
05:26 - generating a random number displaying it
05:28 - as an image with these lines to ensure
05:30 - that it can't well it might be able to
05:33 - be read by some sort of robots I mean
05:35 - things again clever but at this point
05:38 - it's hard to be read and by a robot on a
05:42 - basic level but our user can still see
05:45 - it and we've processed it this through
05:46 - form validation so not only if we
05:48 - generated this image we've tried it out
05:50 - in our own little form

Cleaned transcript:

so now obviously this image is useless without our user input so what we want to do is we want to we've already broken down a line we want to create a form and this form is going to submit to this index.php page and it's going to check that the GD value in fact no we're going to submit to another page I think that's probably a bit better and the reason we're submitting to another page is is what we're doing is we are refreshing when we come back on ourselves so we've got form action equals check PHP that's absolutely fine and now in fact we will go back to the index page right okay so now we need to say type the value equal value you see okay and then we can create an input type of text and we'll give this the size of six just to keep things quite neat and then I'm going to say a name is secure and then obviously we need a submit button so we'll preview this in a moment to make sure we like the look of it so submit for the value okay so let's start preview this and see what we think okay so type the value you see we're going to type the value in here and then we're going to click Submit okay so at the moment nothing's happening cuz we haven't created a process for this but up here what we want to do now is we want to say if the form has been submitted so if the user has submitted the form we don't want to generate a random number just yet so if is set and the variable that we're taking into account is this post variable secured down here so dollar underscore post and that is secure so if is set or if not set we can generate a number otherwise we can do some some validation of this so what we can say is we can say else and we can say if dollar underscore session secured is equal to dollar underscore post secured so essentially what we're saying is if the session that's been set so the random number that's been set and displayed in our image is equal to the post that the user has made so the images that the letter or the numbers so that they've seen then we can do something so we can say echo success or or a match for example otherwise we can say echo incorrect try again and then this is important what we need to do is we need to generate another one of these because they've got it incorrect therefore we want to change the value so they have to look at another another value without this what we're going to just be doing is displaying the same value to them now for this example where we're echoing out a match but this could be part of your form validation so if you're validating say I user name password a first name and a surname you'd want to include the relevant checks in there then register your user then forward them into another page you wouldn't be forwarding back to the same page and if I was to say yet successful we wouldn't be showing the registration form so hopefully that makes sense to you let's refresh the page so let's try and have a look at this image according to everything I've written hopefully this works now the first thing I'm going to do is I'm going to type in the correct image to see where the corrector numbers to see what we get up so three to eight four let's click Submit okay so it's as a match let's just create a break before this image to make everything look a bit neater to refresh that so we've got a match so we've got three to eight four we typed in three to wait for that's fine now let's type in well presumably this now would have registered the user and gone to another page so let's go back onto your next up PHP and generate another number so you've got 4 9 6 8 here let's type in 1 2 3 4 we click Submit now what it says is incorrect try again it's generated a new number so now I can't make this out I think it's 7 4 7 7 let's try 7 4 7 7 click Submit incorrect try again 4 5 9 3 submit and it says a match say 4 5 9 3 it successful we've successfully you know typed in the number so we're saying a match and we've still kept this number here but obviously would be something forwarding the user elsewhere at this point but you can see that the most important part about this is if the user gets it wrong that generated a new number to try so every time they get it wrong generating a new number to try so this is basically capture in PHP with the GD library and how we generate a random number you can use letters as well that's perfectly acceptable we're generating a random number displaying it as an image with these lines to ensure that it can't well it might be able to be read by some sort of robots I mean things again clever but at this point it's hard to be read and by a robot on a basic level but our user can still see it and we've processed it this through form validation so not only if we generated this image we've tried it out in our own little form
