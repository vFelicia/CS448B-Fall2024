With timestamps:

00:00 - hello again this is Alex from PHP
00:02 - academy' dog producing this video for
00:04 - the New Boston now in the last file
00:07 - handling example we looked at a pending
00:09 - data and we created this form here which
00:14 - appended data to the end of this file
00:17 - here and so far we've appended four
00:20 - names now what happens if we want to
00:23 - read in this data I want to read in each
00:26 - name and display them to the user and
00:29 - what we're going to do is we're going to
00:30 - create this inside this process here so
00:35 - when they submit a new name it just
00:38 - reproduces a list of the current names
00:40 - and I don't want to reproduce a list of
00:42 - it line on a line by line basis I want
00:46 - to produce it separated by commas now
00:49 - you may look at this file and think how
00:51 - are we going to do this because they're
00:53 - not separated by commas they're on a
00:54 - line by line basis well we have various
00:57 - functions that allow us to open files
00:59 - and read in on a line by line basis now
01:01 - remember using the for each statement we
01:04 - can use that again here so what I'm
01:07 - going to do is underneath here I'm going
01:09 - to create a little section for myself to
01:11 - read this file in in fact we can do it
01:15 - under the F close it probably be a lot
01:17 - better so let's create a variable could
01:22 - read in and this is going to be using
01:25 - the file function this time we're not
01:27 - using F open we're just using file and
01:30 - what we can do is we can specify a file
01:32 - here and we're going to specify the file
01:34 - type of R so we're reading that data in
01:36 - so that is obviously going to be
01:38 - names.txt so let's just add another name
01:41 - to the list and just double check if
01:42 - this works properly and so Sandra click
01:47 - Submit
01:50 - expects parameter two to be long oh okay
01:53 - okay so let's get rid of that so we're
01:55 - basically just reading this in we're
01:56 - using the file function to read this and
01:57 - there's no need to use this because
02:00 - we're reading an underlined by line
02:02 - basis we're using this file function
02:04 - rather than F open so for now just stick
02:09 - to this file function and we're going to
02:11 - read it in that way so let's refresh
02:13 - that actually that that will have
02:17 - written so let's just check back on that
02:20 - okay yes we've got signed rather to the
02:22 - end of the list so our goal is to read
02:25 - it read the file in which we've done now
02:27 - what we want to do is use for each okay
02:31 - and we want to say read in as name okay
02:38 - so or or or f9 we'll call it because
02:44 - it's the name within the file so now
02:46 - what we can do with standard notation
02:48 - with the forage we can echo out this F
02:51 - name each time and then what we can do
02:54 - is we can append a comma onto the end of
02:56 - it so the process goes we a start a
03:02 - variable called read in we use the file
03:04 - function to read in this names txt file
03:07 - what this will do this function will do
03:09 - is it will read in the line reading the
03:11 - file sorry on a line by line basis there
03:14 - are other ways to do this but they're a
03:15 - bit more complicated however this is the
03:18 - easiest way possible now what we're
03:21 - doing is we're using a for each
03:22 - statement and we're using the array
03:25 - that's been read in and we're using this
03:27 - array each element of this array as F
03:29 - name then we're echoing our f name with
03:32 - the comma so above this we could write
03:38 - current names in file and then that
03:42 - should echo them out now you'll probably
03:47 - notice that when we run the script we're
03:49 - going to have an extra comma after the
03:51 - list so let's just try and add another
03:55 - name to this and see what happens so I'm
03:57 - going to take down and I'm going to
03:59 - click Submit now you'll see it says
04:01 - current names in file
04:02 - Alex comma Billy commerce Stephen at the
04:05 - moment it's not looking to gray so let's
04:07 - just tidy that up we need to first of
04:11 - all see what's going on here now
04:15 - alex has a space oft where as does Billy
04:17 - as does every other name in the list and
04:20 - we can use a function called trim to
04:23 - trim this down and this removes
04:26 - whitespace from the start and the end of
04:29 - our name as well as any other special
04:32 - characters so just by adding this
04:35 - function around the name as we echo here
04:37 - we can see that it's actually if we add
04:41 - another name in let's say Josh submit
04:47 - you can see that it's removed that white
04:49 - space now what we can do is we can just
04:51 - get rid of or add a space in after that
04:56 - we'll add another name in let's say Dale
05:02 - okay so now you can see that it's
05:05 - displaying properly now what we need to
05:07 - do is we need to analyze this problem
05:10 - we've got with a comma at the end here
05:12 - so as well as reading a file in in this
05:15 - tutorial we want to actually read it
05:17 - improperly and display things properly
05:18 - so we need a way of counting all the
05:21 - elements in this in this text file and
05:25 - we can do that with the count function
05:26 - so I'm going to create a new variable
05:28 - here called read in count and that's
05:31 - going to equal count a function count
05:34 - and we're going to input the read in
05:38 - array which is created from this here so
05:41 - we're counting the values in the array
05:44 - now what we can do is get rid of this
05:47 - and we can start an if statement here
05:49 - now I'm going to say
05:51 - if count doesn't equal read in count and
06:05 - we're going to say echo comma and then
06:09 - space after knee
06:10 - afterwards sorry so what's happening
06:12 - here we're counting the element in the
06:14 - array and each element in the array is a
06:16 - name so we're counting the names
06:18 - essentially let's just declare this
06:20 - count variable up here as zero okay so
06:25 - if count which is this here doesn't
06:31 - equal reading count then echo that then
06:34 - we need to count plus plus at the end so
06:37 - we're incrementing this count value each
06:39 - time this will be 0 1 2 3 all the way up
06:43 - to the amount of names that are in the
06:45 - list then when we reach the last one
06:48 - it's not going to it's not going to show
06:53 - the comma so let's add another name in
06:57 - let's say pizza click Submit
07:01 - oh it actually has okay um so let's fix
07:08 - this
07:09 - so if countless look think about this
07:10 - logically if count doesn't equal reading
07:13 - count if count is smaller than
07:23 - greater than yeah it'll be smaller than
07:27 - so if count is smaller than reading
07:29 - count let's have another name to the
07:32 - list just do Daniel this time and click
07:36 - Submit oh dear okay
07:45 - hmm one change that to one perhaps oh I
07:50 - think that might be the problem we'll
07:53 - just keep adding Daniel there we go okay
07:55 - so after a bit of fiddling around um
07:58 - what we've done is we have created a
08:01 - variable called count and assign the
08:04 - value of 1 then we incremented this each
08:07 - time but just before this we've created
08:09 - the check to see if the count is smaller
08:12 - than the amount of elements in this
08:15 - flask the amount of names and and if it
08:19 - is smaller then that means that's fine
08:21 - we can get we can echo out a comma
08:24 - otherwise if we've got to the last
08:26 - element in the array then we want to not
08:31 - not we don't de Becque or a comma
08:33 - because it's silly echoing a comma in
08:35 - the end
08:35 - so after this tutorial and me making a
08:39 - couple of mistakes and correcting myself
08:40 - I'm sure you've learnt a thing or two so
08:43 - that's the end of this tutorial
08:45 - about reading in files with PHP

Cleaned transcript:

hello again this is Alex from PHP academy' dog producing this video for the New Boston now in the last file handling example we looked at a pending data and we created this form here which appended data to the end of this file here and so far we've appended four names now what happens if we want to read in this data I want to read in each name and display them to the user and what we're going to do is we're going to create this inside this process here so when they submit a new name it just reproduces a list of the current names and I don't want to reproduce a list of it line on a line by line basis I want to produce it separated by commas now you may look at this file and think how are we going to do this because they're not separated by commas they're on a line by line basis well we have various functions that allow us to open files and read in on a line by line basis now remember using the for each statement we can use that again here so what I'm going to do is underneath here I'm going to create a little section for myself to read this file in in fact we can do it under the F close it probably be a lot better so let's create a variable could read in and this is going to be using the file function this time we're not using F open we're just using file and what we can do is we can specify a file here and we're going to specify the file type of R so we're reading that data in so that is obviously going to be names.txt so let's just add another name to the list and just double check if this works properly and so Sandra click Submit expects parameter two to be long oh okay okay so let's get rid of that so we're basically just reading this in we're using the file function to read this and there's no need to use this because we're reading an underlined by line basis we're using this file function rather than F open so for now just stick to this file function and we're going to read it in that way so let's refresh that actually that that will have written so let's just check back on that okay yes we've got signed rather to the end of the list so our goal is to read it read the file in which we've done now what we want to do is use for each okay and we want to say read in as name okay so or or or f9 we'll call it because it's the name within the file so now what we can do with standard notation with the forage we can echo out this F name each time and then what we can do is we can append a comma onto the end of it so the process goes we a start a variable called read in we use the file function to read in this names txt file what this will do this function will do is it will read in the line reading the file sorry on a line by line basis there are other ways to do this but they're a bit more complicated however this is the easiest way possible now what we're doing is we're using a for each statement and we're using the array that's been read in and we're using this array each element of this array as F name then we're echoing our f name with the comma so above this we could write current names in file and then that should echo them out now you'll probably notice that when we run the script we're going to have an extra comma after the list so let's just try and add another name to this and see what happens so I'm going to take down and I'm going to click Submit now you'll see it says current names in file Alex comma Billy commerce Stephen at the moment it's not looking to gray so let's just tidy that up we need to first of all see what's going on here now alex has a space oft where as does Billy as does every other name in the list and we can use a function called trim to trim this down and this removes whitespace from the start and the end of our name as well as any other special characters so just by adding this function around the name as we echo here we can see that it's actually if we add another name in let's say Josh submit you can see that it's removed that white space now what we can do is we can just get rid of or add a space in after that we'll add another name in let's say Dale okay so now you can see that it's displaying properly now what we need to do is we need to analyze this problem we've got with a comma at the end here so as well as reading a file in in this tutorial we want to actually read it improperly and display things properly so we need a way of counting all the elements in this in this text file and we can do that with the count function so I'm going to create a new variable here called read in count and that's going to equal count a function count and we're going to input the read in array which is created from this here so we're counting the values in the array now what we can do is get rid of this and we can start an if statement here now I'm going to say if count doesn't equal read in count and we're going to say echo comma and then space after knee afterwards sorry so what's happening here we're counting the element in the array and each element in the array is a name so we're counting the names essentially let's just declare this count variable up here as zero okay so if count which is this here doesn't equal reading count then echo that then we need to count plus plus at the end so we're incrementing this count value each time this will be 0 1 2 3 all the way up to the amount of names that are in the list then when we reach the last one it's not going to it's not going to show the comma so let's add another name in let's say pizza click Submit oh it actually has okay um so let's fix this so if countless look think about this logically if count doesn't equal reading count if count is smaller than greater than yeah it'll be smaller than so if count is smaller than reading count let's have another name to the list just do Daniel this time and click Submit oh dear okay hmm one change that to one perhaps oh I think that might be the problem we'll just keep adding Daniel there we go okay so after a bit of fiddling around um what we've done is we have created a variable called count and assign the value of 1 then we incremented this each time but just before this we've created the check to see if the count is smaller than the amount of elements in this flask the amount of names and and if it is smaller then that means that's fine we can get we can echo out a comma otherwise if we've got to the last element in the array then we want to not not we don't de Becque or a comma because it's silly echoing a comma in the end so after this tutorial and me making a couple of mistakes and correcting myself I'm sure you've learnt a thing or two so that's the end of this tutorial about reading in files with PHP
