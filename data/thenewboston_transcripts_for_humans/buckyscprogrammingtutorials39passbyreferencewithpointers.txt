With timestamps:

00:00 - what's going on guys welcome back to
00:01 - your 39th C++ tutorial and in this
00:04 - tutorial we're going to be covering pass
00:06 - by reference with pointers and we
00:08 - actually have a ton of stuff to cover so
00:11 - I don't even know if I'm going to have
00:13 - enough time in this one tutorial I might
00:14 - have to break it up into two different
00:16 - tutorials but let's go ahead and get
00:17 - started anyways so we already know from
00:20 - our last tutorials that whenever we pass
00:23 - an argument into a function passing an
00:25 - argument into a function basically means
00:28 - giving our function any additional
00:30 - information that it needs like in order
00:32 - to calculate the square root of a number
00:34 - you actually need a number so You' have
00:36 - to pass a value into that function but
00:39 - believe it or not it isn't quite that
00:42 - simple there are two different ways that
00:44 - I'm going to be teaching you right now
00:45 - they're actually more than that but for
00:47 - now I'm going to be teaching you two
00:48 - different ways to pass arguments into
00:50 - functions one of them is passed by value
00:54 - and one of them is passed by reference
00:57 - now what do I mean when I say that well
01:00 - we've been doing is basically passing by
01:02 - value and whenever we create a function
01:04 - and we pass it by value we pass a copy
01:07 - of that variable into the function so
01:09 - the original variable itself cannot be
01:12 - changed until we set it equal to another
01:14 - value so that way the function only has
01:17 - access to the copy of that variable not
01:19 - the original variable itself simple
01:22 - enough values pretty much mean pass it
01:24 - in a copy okay now pass by reference
01:27 - means this whenever you pass in a
01:30 - variable by reference you pass in the
01:32 - variable's address and whenever you do
01:35 - that you basically give the function
01:37 - direct access to that variable so in
01:40 - that sense the original variable can
01:42 - indeed be modified inside your function
01:45 - so why would you ever want to do that it
01:47 - seems kind of dangerous well the one
01:49 - benefit is this is it's basically less
01:52 - stress on your computer instead of
01:54 - passing by value where every time you
01:56 - call that function it has to make a copy
01:58 - of the variable suppose you had 100
02:00 - variables that would be pretty stressful
02:01 - on your computer if you pass by
02:03 - reference and you pass in the value
02:05 - itself it doesn't have to make copies of
02:07 - every variable so let's go ahead and let
02:10 - me start off by making two variables int
02:12 - Betty and I'll set this equal to
02:16 - 13 and let's make another person int
02:19 - Sandy and set this equal to 132 now what
02:22 - we're going to be doing is passing this
02:24 - one in by value and passing this one in
02:27 - by reference and see how they turn out
02:29 - so we're going to be needing to create
02:31 - two different functions first let's go
02:33 - ahead and create a function that we're
02:35 - familiar with pass by value so void pass
02:39 - by value and let's just go ahead and
02:42 - create a basic function it'll take a
02:44 - parameter of one integer and what we're
02:47 - going to do is take this integer and set
02:49 - it equal to 99 so basically what we're
02:52 - going to be doing is
02:54 - bety pretty much X is a copy of the
02:57 - variable Betty So then whenever we set
03:00 - x equal to 99 it doesn't set Betty equal
03:03 - to 99 it just sets this copy equal to 99
03:06 - so that's what's going to happen now
03:08 - let's go ahead and make a function uh
03:11 - pass by reference so void pass
03:16 - by reference hopefully I spelled that
03:18 - right there are way too many e and
03:19 - efference reference for E I mean come on
03:22 - guys enough with e so functions that
03:26 - receive a memory address they need to
03:28 - have a pointer argument because they
03:31 - need to have a pointer because a pointer
03:33 - is the thing that receives the memory
03:34 - address so now instead of NX you need to
03:37 - type int pointer X because the pointer X
03:43 - is now going to be able to hold that
03:44 - memory address so now whenever whoa one
03:48 - little extra thing there so now what we
03:50 - can do is something like this pointer X
03:54 - is equal to 66 or something like that so
03:57 - now instead of the copy of X being to 99
04:02 - now the variable itself Sandy X is the
04:06 - address of Sandy so Sandy is going to be
04:08 - changed to 66 so whenever we pass Betty
04:11 - in this one her value is not going to be
04:13 - changed but whenever we pass Sandy into
04:17 - this we're basically passing in Sandy
04:19 - directly into this Vari into this
04:21 - function her address and everything so
04:24 - now this is a direct access to the
04:26 - variable Sandy so let me go ahead and
04:28 - first of all we need to proo type these
04:30 - functions so copy
04:32 - this and paste did I copy it or did I
04:36 - just do something weird I might have had
04:38 - an extra character somewhere better not
04:39 - get error out so I'm going to be ticked
04:41 - off so copy that and then copy this
04:45 - reference and pass paste this in and now
04:49 - check it out before we go ahead and well
04:52 - let's go ahead and just uh use these
04:54 - right now and then I'll talk to you guys
04:56 - about the thing I was going to so let's
04:58 - go ahead and pass by by value and we
05:01 - will pass Betty into this one so we're
05:04 - going to pass 13 in that but her value
05:06 - isn't going to be changed now let's go
05:08 - ahead and pass by
05:10 - reference Sandy and we're pretty much
05:12 - giving this function direct access to
05:14 - Sandy so that value is going to be
05:16 - changed so now what we need to do is
05:18 - here's what I'm going to talk to you
05:19 - guys about since we're passing in the
05:23 - memory address of course you remember
05:25 - from the last tutorial we need the Amper
05:27 - sand because Sandy is the variable and
05:30 - this uh function takes memory address so
05:33 - the symbol for the memory address of the
05:36 - the variable is Ampersand Sandy this is
05:39 - basically equal to some long hexadecimal
05:41 - address of where that variable is
05:43 - located on your computer so now let's
05:45 - just go ahead and print out the values
05:47 - and see what we get see out
05:50 - um Betty is now and then just go ahead
05:54 - and print
05:56 - Betty and end line
06:00 - and I'll do the same thing
06:03 - for Sandy is
06:07 - now
06:09 - Sandy and line so let's go ahead and run
06:12 - this in I guess I can see if I messed it
06:14 - up anywhere nope looks good so as you
06:17 - can see we basically built identical
06:19 - functions however when we passed in
06:21 - Betty it stayed 13 and when we passed in
06:24 - Sandy even though it was 13 it changed
06:27 - it to 66 so now you can see whenever we
06:30 - pass let me move this down right here
06:34 - whenever we pass a variable into a
06:37 - function we can do it in one of two
06:39 - different ways we can pass a copy of it
06:41 - like we did in the Betty Case pass by
06:43 - value and what this does is it basically
06:47 - makes basically X is a copy of Betty it
06:50 - doesn't have any access to Betty itself
06:52 - it's just a variable with the same value
06:55 - so then we set x equal to 99 it's just
06:57 - setting 99 equal to that copy not Betty
07:00 - itself so if we pass by reference what
07:03 - we do is we take the memory address of
07:06 - that variable and remember your memory
07:09 - address is some part on your computer uh
07:11 - it doesn't make a copy of it it passes
07:13 - in that memory address itself that
07:15 - memory address has the value of 13 and
07:18 - we're saying all right now take that
07:20 - memory address and set it equal to 66 so
07:23 - no copies involved here it's taking that
07:25 - same address the entire time and
07:27 - changing the value of it so now you can
07:29 - see the difference of whenever we use a
07:32 - function like this it makes a copy and
07:34 - we whenever we use a function like this
07:36 - it works with the direct variable itself
07:39 - so that way whenever we ran the two
07:41 - functions right here and print it out on
07:43 - the screen that's why Betty stayed the
07:45 - same because that copy had no effect on
07:47 - the original and Sanity changed because
07:50 - it did indeed change the value of that
07:53 - one address that variable was only at
07:56 - one address and we passed it in so it
07:58 - had Direct access to it
08:00 - so I am out of breath and uh hopefully
08:03 - you guys understand at least the concept
08:05 - of pass by value and pass by reference
08:07 - just remember when passing by value
08:09 - you're passing in a copy when passing in
08:12 - reference you're passing in the
08:14 - variable's address if you understand
08:16 - that you're good to go at least for now
08:18 - so in the next tutorial I'm afraid we're
08:20 - not
08:20 - done oh I got like FL in my throat I
08:23 - can't talk I just had a milkshake for
08:25 - McDonald's and anyways moving on so in
08:28 - the next tutori
08:29 - unfortunately we're not done covering
08:31 - pointers yet so yep more about pointers
08:34 - I'm sorry so thank you guys for watching
08:35 - don't forget to subscribe and I'll see
08:37 - you guys in the next video

Cleaned transcript:

what's going on guys welcome back to your 39th C++ tutorial and in this tutorial we're going to be covering pass by reference with pointers and we actually have a ton of stuff to cover so I don't even know if I'm going to have enough time in this one tutorial I might have to break it up into two different tutorials but let's go ahead and get started anyways so we already know from our last tutorials that whenever we pass an argument into a function passing an argument into a function basically means giving our function any additional information that it needs like in order to calculate the square root of a number you actually need a number so You' have to pass a value into that function but believe it or not it isn't quite that simple there are two different ways that I'm going to be teaching you right now they're actually more than that but for now I'm going to be teaching you two different ways to pass arguments into functions one of them is passed by value and one of them is passed by reference now what do I mean when I say that well we've been doing is basically passing by value and whenever we create a function and we pass it by value we pass a copy of that variable into the function so the original variable itself cannot be changed until we set it equal to another value so that way the function only has access to the copy of that variable not the original variable itself simple enough values pretty much mean pass it in a copy okay now pass by reference means this whenever you pass in a variable by reference you pass in the variable's address and whenever you do that you basically give the function direct access to that variable so in that sense the original variable can indeed be modified inside your function so why would you ever want to do that it seems kind of dangerous well the one benefit is this is it's basically less stress on your computer instead of passing by value where every time you call that function it has to make a copy of the variable suppose you had 100 variables that would be pretty stressful on your computer if you pass by reference and you pass in the value itself it doesn't have to make copies of every variable so let's go ahead and let me start off by making two variables int Betty and I'll set this equal to 13 and let's make another person int Sandy and set this equal to 132 now what we're going to be doing is passing this one in by value and passing this one in by reference and see how they turn out so we're going to be needing to create two different functions first let's go ahead and create a function that we're familiar with pass by value so void pass by value and let's just go ahead and create a basic function it'll take a parameter of one integer and what we're going to do is take this integer and set it equal to 99 so basically what we're going to be doing is bety pretty much X is a copy of the variable Betty So then whenever we set x equal to 99 it doesn't set Betty equal to 99 it just sets this copy equal to 99 so that's what's going to happen now let's go ahead and make a function uh pass by reference so void pass by reference hopefully I spelled that right there are way too many e and efference reference for E I mean come on guys enough with e so functions that receive a memory address they need to have a pointer argument because they need to have a pointer because a pointer is the thing that receives the memory address so now instead of NX you need to type int pointer X because the pointer X is now going to be able to hold that memory address so now whenever whoa one little extra thing there so now what we can do is something like this pointer X is equal to 66 or something like that so now instead of the copy of X being to 99 now the variable itself Sandy X is the address of Sandy so Sandy is going to be changed to 66 so whenever we pass Betty in this one her value is not going to be changed but whenever we pass Sandy into this we're basically passing in Sandy directly into this Vari into this function her address and everything so now this is a direct access to the variable Sandy so let me go ahead and first of all we need to proo type these functions so copy this and paste did I copy it or did I just do something weird I might have had an extra character somewhere better not get error out so I'm going to be ticked off so copy that and then copy this reference and pass paste this in and now check it out before we go ahead and well let's go ahead and just uh use these right now and then I'll talk to you guys about the thing I was going to so let's go ahead and pass by by value and we will pass Betty into this one so we're going to pass 13 in that but her value isn't going to be changed now let's go ahead and pass by reference Sandy and we're pretty much giving this function direct access to Sandy so that value is going to be changed so now what we need to do is here's what I'm going to talk to you guys about since we're passing in the memory address of course you remember from the last tutorial we need the Amper sand because Sandy is the variable and this uh function takes memory address so the symbol for the memory address of the the variable is Ampersand Sandy this is basically equal to some long hexadecimal address of where that variable is located on your computer so now let's just go ahead and print out the values and see what we get see out um Betty is now and then just go ahead and print Betty and end line and I'll do the same thing for Sandy is now Sandy and line so let's go ahead and run this in I guess I can see if I messed it up anywhere nope looks good so as you can see we basically built identical functions however when we passed in Betty it stayed 13 and when we passed in Sandy even though it was 13 it changed it to 66 so now you can see whenever we pass let me move this down right here whenever we pass a variable into a function we can do it in one of two different ways we can pass a copy of it like we did in the Betty Case pass by value and what this does is it basically makes basically X is a copy of Betty it doesn't have any access to Betty itself it's just a variable with the same value so then we set x equal to 99 it's just setting 99 equal to that copy not Betty itself so if we pass by reference what we do is we take the memory address of that variable and remember your memory address is some part on your computer uh it doesn't make a copy of it it passes in that memory address itself that memory address has the value of 13 and we're saying all right now take that memory address and set it equal to 66 so no copies involved here it's taking that same address the entire time and changing the value of it so now you can see the difference of whenever we use a function like this it makes a copy and we whenever we use a function like this it works with the direct variable itself so that way whenever we ran the two functions right here and print it out on the screen that's why Betty stayed the same because that copy had no effect on the original and Sanity changed because it did indeed change the value of that one address that variable was only at one address and we passed it in so it had Direct access to it so I am out of breath and uh hopefully you guys understand at least the concept of pass by value and pass by reference just remember when passing by value you're passing in a copy when passing in reference you're passing in the variable's address if you understand that you're good to go at least for now so in the next tutorial I'm afraid we're not done oh I got like FL in my throat I can't talk I just had a milkshake for McDonald's and anyways moving on so in the next tutori unfortunately we're not done covering pointers yet so yep more about pointers I'm sorry so thank you guys for watching don't forget to subscribe and I'll see you guys in the next video
