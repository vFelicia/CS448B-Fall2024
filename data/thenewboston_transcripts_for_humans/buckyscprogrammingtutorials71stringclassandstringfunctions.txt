With timestamps:

00:00 - what is going on guys welcome to your
00:02 - let's see seventy first C++ tutorial and
00:04 - in these next I want to say three or
00:06 - four tutorials I'm going to be covering
00:08 - more about strings now I know that I
00:11 - touched a little bit about strings in
00:13 - we've actually been using strings this
00:15 - whole series but I want to talk to you
00:17 - guys specifically about the string class
00:19 - now the cool thing about these next
00:21 - couple tutorials is there aren't a lot
00:24 - of confusing concepts that you guys need
00:26 - to understand but the string class gives
00:29 - us a bunch of functions that well let me
00:32 - tell you guys this whenever you're
00:34 - building a program and you don't know
00:35 - how to do something that you usually
00:36 - want to look it up in the documentation
00:38 - and if there's you know an advanced
00:40 - function in order to do something it
00:42 - will tell you how to do it but some
00:44 - functions like how to print stuff out on
00:46 - the screen are essential to have in your
00:48 - memory and a lot of those functions that
00:50 - are essential to have in your memory are
00:52 - a lot of the string functions so this is
00:55 - stuff that whenever your program you
00:56 - shouldn't have to look up so in these
00:58 - next couple tutorials I'm going to be
00:59 - teaching guys the core string functions
01:02 - so the good thing is they aren't
01:04 - confusing they take like a minute each
01:06 - to learn the sucky thing is that we do
01:10 - in fact need to learn these because if
01:12 - you don't know them if you do know them
01:15 - it's just going to make program a whole
01:16 - lot easier so the first thing I want to
01:18 - clear up is probably something I should
01:20 - have touched on a long time ago and
01:21 - that's also something that kind of
01:25 - confuses you guys whenever I was working
01:27 - with files you guys didn't really
01:28 - understand that whenever I came to you
01:31 - know a white space that whenever I was
01:34 - like reading data in from a file then
01:36 - and automatically quit reading it in and
01:38 - let me explain you guys what I'm talking
01:40 - about sit whoa Oh easy calf socks all I
01:43 - got cough oh there I go got some
01:48 - milkshake from McDonald's in my throat
01:50 - so say we have a string called Bucky and
01:53 - we want to you know fill in the string
01:56 - with the users data whatever the user
01:58 - enters from the keyboard we want to
02:00 - store in this variable called Bucky so
02:03 - we use the CIN
02:04 - and whatever the enter is going to be
02:06 - stored in variable called Bucky so now
02:09 - we'll go ahead and just print out
02:10 - something on the screen like the string
02:13 - I entered is and then we'll make a
02:16 - little space right there and then we'll
02:18 - just go ahead and write the variable
02:21 - name which was Bucky and in that line
02:22 - well let's go ahead and run this program
02:24 - and I want to clear up a couple things
02:26 - so now we see a blank cursor telling us
02:29 - to input something and we already know
02:31 - that if we input something like tuna it
02:33 - says the string I entered is tuna
02:35 - we understand that much but what I
02:37 - didn't tell you guys and I probably
02:38 - should have told you guys this in like
02:39 - the tenth tutorial but you know better
02:42 - late than never is whenever you enter
02:44 - something like tuna sandwiches are good
02:47 - and you say all right well that's my
02:49 - string of text and you press Enter it
02:51 - only says the string I entered is tuna
02:54 - and that brings me to a lot of a point
02:57 - that I should have covered in either the
02:58 - 10th tutorial in the last tutorial when
03:01 - I was teaching you guys how data is read
03:02 - in from a file
03:04 - whenever you using cin to read data in
03:08 - whether it's from the keyboard the user
03:10 - or a file when you're using c i end the
03:14 - end of the input is determined by the
03:16 - first whitespace character it comes
03:19 - across so for example whenever you run
03:21 - this program and you see tuna sandwiches
03:23 - it doesn't read that whole tuna
03:25 - sandwiches it reads it until it gets to
03:27 - it first whitespace so that's why in the
03:30 - last tutorial whenever we came across
03:32 - you know a newline character or a
03:34 - whitespace that's when it stopped and
03:37 - that's when it finished reading in the
03:38 - data so hopefully you guys understand
03:41 - cin only reads one small piece of data
03:44 - at a time so now that you guys
03:46 - understand that concept let me talk to
03:48 - you guys about another concept and that
03:50 - is well what happens when you do want to
03:53 - read an entire line as one string well
03:56 - say we go ahead and lesson name our
03:57 - string something else besides Buckey
03:59 - let's name it string X whenever you want
04:01 - to read an entire line of data here's
04:04 - what you do you go ahead and write the
04:06 - function get line and go ahead and write
04:08 - CIN and just go ahead and write X
04:12 - and now let's just go ahead and you know
04:14 - print this out on screen real quick and
04:16 - line and now what get line does is
04:19 - instead of the end of input being
04:21 - determined by a whitespace character
04:23 - like a space the end of the input is
04:26 - determined by a new line character so
04:29 - get line is going to wait till we have a
04:32 - new line in other words when you're
04:33 - working with cin which means input from
04:36 - keyboard it's going to wait until we
04:38 - press Enter or basically when we're done
04:40 - typing text on the line so now when we
04:42 - put tuna sandwiches are good and press
04:45 - Enter it's going to output tuna
04:47 - sandwiches are good and this entire
04:49 - third thing is the string that's going
04:52 - to be stored in X so again what I want
04:55 - to stress is whenever you're working
04:56 - explicitly with CIN it reads one small
05:00 - piece of data whenever you want to read
05:02 - an entire line you want to use get line
05:05 - sorry I still got that milkshake stuck
05:08 - in my throat so that is the difference
05:10 - between CIN and get line and how the end
05:13 - of the input is determined by a white
05:15 - space or a newline character so that's
05:18 - not only going to help you a lot when
05:19 - you know getting information from the
05:21 - user but also whenever you're working
05:23 - with files that's how it read the
05:26 - information I probably should have told
05:27 - you guys that before but hey like I said
05:29 - better late than other never there you
05:32 - go
05:32 - okay let's slow down for a second Bucky
05:34 - and I gather your thoughts and all right
05:36 - I'm gonna go now so now I want to talk
05:39 - to you guys about additional ways to
05:41 - create and copy strings so aside from
05:44 - having you know string Bucky equals Yaya
05:48 - oops
05:49 - yada yada yada and while this is a valid
05:52 - then this is the way we created strings
05:53 - before I want to tell you guys about an
05:55 - additional way to create strings from
05:57 - the string class say we want to create a
05:59 - string named s1 we can go ahead and pass
06:01 - it in a constructor of a string like
06:05 - hampster just like that and now hamster
06:08 - is going to be equal to s1 again like I
06:11 - said just two different ways of doing
06:13 - the same thing but why do we need to
06:15 - know this because whenever we're working
06:16 - at a company and someone creates a
06:18 - string this way we don't you know think
06:20 - it's something totally different or some
06:22 - class that they made up we know that you
06:24 - know don't freak out it's just the same
06:26 - way of creating a string so if we want
06:28 - to create a blank string we can do
06:30 - something like this and let me go ahead
06:32 - and create another blank string because
06:33 - I'm going to be showing you guys an
06:35 - example later on so anytime you want to
06:38 - copy a string you can do so in one of
06:40 - two ways the first way which you guys
06:42 - probably could guess is you can set
06:44 - string two equal to string 1 which is
06:46 - hamster now this is a valid way of
06:49 - copying the string but some people also
06:52 - want to use a function from the string
06:55 - class and that's called assign now
06:57 - assign isn't really a good word they
06:59 - probably should just named it copy but
07:00 - it does the exact same thing and that
07:02 - say you want to have s3 and you want to
07:05 - have this you know actually we have it
07:09 - right there it already pops up for us
07:10 - assign string one these two go with you
07:14 - know with exception of being string two
07:15 - and shrink three these do the identical
07:18 - thing each of these functions copy this
07:22 - string to this variable right here so
07:25 - again just to prove it to you guys let
07:27 - me just print out all these on the
07:28 - screen Oh print s1 s2 and s3 and just go
07:33 - ahead and end that line and whenever we
07:35 - print it out we can see that all these
07:37 - things hamster hamster hamster do the
07:39 - exact same thing so again what this line
07:43 - of code does is it's just an additional
07:45 - way where we can go through the string
07:47 - class and we can create a string using
07:50 - the constructor and what this does right
07:53 - here this assign is basically an
07:55 - alternative to copying strings so with
07:59 - that being said um I want to talk about
08:03 - one last thing and hey I guess again
08:06 - okay the last thing i want to talk about
08:08 - in this tutorial and i'm probably going
08:10 - to go over 10 minutes and i hate making
08:12 - videos over 10 minutes what i do is
08:14 - strings are arrays of characters they're
08:18 - not like arrays of characters that are
08:19 - not similar similar to arrays of
08:21 - characters strings are indeed arrays of
08:25 - characters so let me go ahead and make a
08:28 - string called s1 and i'll set it equal
08:31 - to oh em gee WTF BBQ good enough so now
08:36 - i want to stress that anything you can
08:38 - do to an array you can do to a string so
08:41 - let's go ahead and see out something
08:43 - like s1 and say we wanted to output one
08:46 - of these characters and these characters
08:48 - are elements in the string 0 1 2 3 so
08:52 - this w is s1 3 well in addition to you
08:56 - know having the explicit index the
08:58 - string class also has an ant method to
09:01 - say alright if we put 3 right there it's
09:03 - going to look in the third element in
09:05 - the array and it's going to find what
09:07 - character is at that location so it's
09:10 - you know a little easier to tell to
09:12 - someone who's like just learning
09:13 - programming using the app function is a
09:16 - little easier to see then you know using
09:18 - the array indexes right there so let's
09:20 - just go ahead and end that line and
09:21 - print out and whenever we print it out
09:23 - we can see that we indeed get a W so the
09:26 - point of this lesson is I want to stress
09:28 - you guys that strings are arrays of
09:31 - characters and one other cool thing I
09:33 - might as well teach you guys while I
09:34 - have the time is just like an array
09:37 - where we can loop through it and print
09:38 - out each one of its indexes we can also
09:40 - loop through a string so let me go ahead
09:42 - and put int x equals 0 and in order to
09:46 - get the length of a string it has
09:48 - built-in length function so put X is
09:51 - less than oh what's my street name s1
09:53 - dot length with no parameters and we'll
09:57 - just loop through them one at a time
09:58 - using X plus plus so now what we need to
10:01 - do is just print out on the screen
10:03 - s1 dot at and as a parameter we can just
10:07 - go ahead and type in X because what X is
10:09 - going to do is it's going to say all
10:11 - right it's going to start at 0 remember
10:14 - this is the 0th element in the array
10:16 - and is going to count the length of the
10:18 - string and it's going to loop basically
10:20 - from the beginning till the end and the
10:23 - X is going to go 0 1 2 3 4 all the way
10:27 - until it reaches this as last element so
10:29 - that way whenever we pass X into the
10:31 - parameter for at instead of printing
10:34 - just one character it's going to print
10:35 - the entire string so let's go ahead and
10:37 - build and run this and check it out
10:39 - here's what we printed from before from
10:40 - the last lesson and now here's the
10:43 - entire string getting printed out OMG
10:46 - WTF BBQ so those are some simple string
10:50 - functions like I said before none of
10:52 - these are going to you know twist your
10:54 - brain like polymorphism or maybe working
10:56 - with files are but there's some core
10:58 - functions that we need to learn
10:59 - especially the at the length those are
11:03 - two string functions that you're going
11:04 - to see a lot whenever you're working for
11:05 - a company hopefully you're watching this
11:07 - tutorials in the hopes of you know
11:09 - getting a job or at least working with
11:11 - other people on a game project or
11:12 - something like that you're going to see
11:14 - these functions a lot so you need to
11:16 - know what they are how they work and
11:18 - also some additional ways of creating
11:20 - copying strings so now that you
11:23 - understand these concepts hopefully you
11:25 - memorize them embed them in your brain I
11:27 - want to tell you guys that there are a
11:28 - lot of different things that the string
11:30 - class has to offer aside from you know
11:32 - finding the length of a string so we're
11:35 - going to be covering all those coarse
11:36 - string concepts in the next couple
11:37 - tutorials so have no fear no really
11:40 - confusing topics for now and I want to
11:43 - tell you guys that you're almost to the
11:45 - end of learning beginning C++ we
11:47 - probably only got like 20 more videos to
11:49 - go so with that looking forward to I
11:51 - want to say guys thank you for
11:53 - subscribing thank you for watching my
11:54 - videos and I will see you guys in the
11:56 - next video

Cleaned transcript:

what is going on guys welcome to your let's see seventy first C++ tutorial and in these next I want to say three or four tutorials I'm going to be covering more about strings now I know that I touched a little bit about strings in we've actually been using strings this whole series but I want to talk to you guys specifically about the string class now the cool thing about these next couple tutorials is there aren't a lot of confusing concepts that you guys need to understand but the string class gives us a bunch of functions that well let me tell you guys this whenever you're building a program and you don't know how to do something that you usually want to look it up in the documentation and if there's you know an advanced function in order to do something it will tell you how to do it but some functions like how to print stuff out on the screen are essential to have in your memory and a lot of those functions that are essential to have in your memory are a lot of the string functions so this is stuff that whenever your program you shouldn't have to look up so in these next couple tutorials I'm going to be teaching guys the core string functions so the good thing is they aren't confusing they take like a minute each to learn the sucky thing is that we do in fact need to learn these because if you don't know them if you do know them it's just going to make program a whole lot easier so the first thing I want to clear up is probably something I should have touched on a long time ago and that's also something that kind of confuses you guys whenever I was working with files you guys didn't really understand that whenever I came to you know a white space that whenever I was like reading data in from a file then and automatically quit reading it in and let me explain you guys what I'm talking about sit whoa Oh easy calf socks all I got cough oh there I go got some milkshake from McDonald's in my throat so say we have a string called Bucky and we want to you know fill in the string with the users data whatever the user enters from the keyboard we want to store in this variable called Bucky so we use the CIN and whatever the enter is going to be stored in variable called Bucky so now we'll go ahead and just print out something on the screen like the string I entered is and then we'll make a little space right there and then we'll just go ahead and write the variable name which was Bucky and in that line well let's go ahead and run this program and I want to clear up a couple things so now we see a blank cursor telling us to input something and we already know that if we input something like tuna it says the string I entered is tuna we understand that much but what I didn't tell you guys and I probably should have told you guys this in like the tenth tutorial but you know better late than never is whenever you enter something like tuna sandwiches are good and you say all right well that's my string of text and you press Enter it only says the string I entered is tuna and that brings me to a lot of a point that I should have covered in either the 10th tutorial in the last tutorial when I was teaching you guys how data is read in from a file whenever you using cin to read data in whether it's from the keyboard the user or a file when you're using c i end the end of the input is determined by the first whitespace character it comes across so for example whenever you run this program and you see tuna sandwiches it doesn't read that whole tuna sandwiches it reads it until it gets to it first whitespace so that's why in the last tutorial whenever we came across you know a newline character or a whitespace that's when it stopped and that's when it finished reading in the data so hopefully you guys understand cin only reads one small piece of data at a time so now that you guys understand that concept let me talk to you guys about another concept and that is well what happens when you do want to read an entire line as one string well say we go ahead and lesson name our string something else besides Buckey let's name it string X whenever you want to read an entire line of data here's what you do you go ahead and write the function get line and go ahead and write CIN and just go ahead and write X and now let's just go ahead and you know print this out on screen real quick and line and now what get line does is instead of the end of input being determined by a whitespace character like a space the end of the input is determined by a new line character so get line is going to wait till we have a new line in other words when you're working with cin which means input from keyboard it's going to wait until we press Enter or basically when we're done typing text on the line so now when we put tuna sandwiches are good and press Enter it's going to output tuna sandwiches are good and this entire third thing is the string that's going to be stored in X so again what I want to stress is whenever you're working explicitly with CIN it reads one small piece of data whenever you want to read an entire line you want to use get line sorry I still got that milkshake stuck in my throat so that is the difference between CIN and get line and how the end of the input is determined by a white space or a newline character so that's not only going to help you a lot when you know getting information from the user but also whenever you're working with files that's how it read the information I probably should have told you guys that before but hey like I said better late than other never there you go okay let's slow down for a second Bucky and I gather your thoughts and all right I'm gonna go now so now I want to talk to you guys about additional ways to create and copy strings so aside from having you know string Bucky equals Yaya oops yada yada yada and while this is a valid then this is the way we created strings before I want to tell you guys about an additional way to create strings from the string class say we want to create a string named s1 we can go ahead and pass it in a constructor of a string like hampster just like that and now hamster is going to be equal to s1 again like I said just two different ways of doing the same thing but why do we need to know this because whenever we're working at a company and someone creates a string this way we don't you know think it's something totally different or some class that they made up we know that you know don't freak out it's just the same way of creating a string so if we want to create a blank string we can do something like this and let me go ahead and create another blank string because I'm going to be showing you guys an example later on so anytime you want to copy a string you can do so in one of two ways the first way which you guys probably could guess is you can set string two equal to string 1 which is hamster now this is a valid way of copying the string but some people also want to use a function from the string class and that's called assign now assign isn't really a good word they probably should just named it copy but it does the exact same thing and that say you want to have s3 and you want to have this you know actually we have it right there it already pops up for us assign string one these two go with you know with exception of being string two and shrink three these do the identical thing each of these functions copy this string to this variable right here so again just to prove it to you guys let me just print out all these on the screen Oh print s1 s2 and s3 and just go ahead and end that line and whenever we print it out we can see that all these things hamster hamster hamster do the exact same thing so again what this line of code does is it's just an additional way where we can go through the string class and we can create a string using the constructor and what this does right here this assign is basically an alternative to copying strings so with that being said um I want to talk about one last thing and hey I guess again okay the last thing i want to talk about in this tutorial and i'm probably going to go over 10 minutes and i hate making videos over 10 minutes what i do is strings are arrays of characters they're not like arrays of characters that are not similar similar to arrays of characters strings are indeed arrays of characters so let me go ahead and make a string called s1 and i'll set it equal to oh em gee WTF BBQ good enough so now i want to stress that anything you can do to an array you can do to a string so let's go ahead and see out something like s1 and say we wanted to output one of these characters and these characters are elements in the string 0 1 2 3 so this w is s1 3 well in addition to you know having the explicit index the string class also has an ant method to say alright if we put 3 right there it's going to look in the third element in the array and it's going to find what character is at that location so it's you know a little easier to tell to someone who's like just learning programming using the app function is a little easier to see then you know using the array indexes right there so let's just go ahead and end that line and print out and whenever we print it out we can see that we indeed get a W so the point of this lesson is I want to stress you guys that strings are arrays of characters and one other cool thing I might as well teach you guys while I have the time is just like an array where we can loop through it and print out each one of its indexes we can also loop through a string so let me go ahead and put int x equals 0 and in order to get the length of a string it has builtin length function so put X is less than oh what's my street name s1 dot length with no parameters and we'll just loop through them one at a time using X plus plus so now what we need to do is just print out on the screen s1 dot at and as a parameter we can just go ahead and type in X because what X is going to do is it's going to say all right it's going to start at 0 remember this is the 0th element in the array and is going to count the length of the string and it's going to loop basically from the beginning till the end and the X is going to go 0 1 2 3 4 all the way until it reaches this as last element so that way whenever we pass X into the parameter for at instead of printing just one character it's going to print the entire string so let's go ahead and build and run this and check it out here's what we printed from before from the last lesson and now here's the entire string getting printed out OMG WTF BBQ so those are some simple string functions like I said before none of these are going to you know twist your brain like polymorphism or maybe working with files are but there's some core functions that we need to learn especially the at the length those are two string functions that you're going to see a lot whenever you're working for a company hopefully you're watching this tutorials in the hopes of you know getting a job or at least working with other people on a game project or something like that you're going to see these functions a lot so you need to know what they are how they work and also some additional ways of creating copying strings so now that you understand these concepts hopefully you memorize them embed them in your brain I want to tell you guys that there are a lot of different things that the string class has to offer aside from you know finding the length of a string so we're going to be covering all those coarse string concepts in the next couple tutorials so have no fear no really confusing topics for now and I want to tell you guys that you're almost to the end of learning beginning C++ we probably only got like 20 more videos to go so with that looking forward to I want to say guys thank you for subscribing thank you for watching my videos and I will see you guys in the next video
