With timestamps:

00:00 - what's going on guys welcome to your
00:01 - 21st C++ tutorial and before I even get
00:04 - started with the story I just want to
00:06 - mention one thing that you guys probably
00:07 - notice already and that is I don't have
00:09 - return 0 at the end of my main and that
00:12 - is because I just found out that well
00:15 - let me say this in the old C++ ways you
00:18 - had to have that return 0 statement but
00:21 - now the new version or whatever whenever
00:24 - you don't include return 0 at the end of
00:27 - your main C++ just assumes you return 0
00:30 - after the last statement so you know if
00:33 - you go ahead and type your program you
00:35 - can either put it if you're you know
00:37 - old-school programmer or you cannot
00:39 - include it and it would just assume you
00:40 - have return 0 but for the rest of these
00:42 - stories I'm going to exclude it so you
00:45 - know don't forget that it isn't there so
00:47 - anyways let's go ahead and get to the
00:48 - heart of the story and that's assignment
00:50 - operators and increment operators now we
00:53 - already know well let's go ahead and get
00:54 - a variable first set X equal to 10 looks
00:58 - good so we already know we can do
01:01 - something like this X plus equals 10 and
01:04 - this is basically the same as writing x
01:07 - equals x plus 10 so then whenever we let
01:10 - me just go ahead and this line and print
01:13 - it out we go ahead and we get 20 just
01:16 - like that so what it does is it takes to
01:18 - this value adds it to X and sets equal
01:22 - to the new X variable so I already told
01:24 - you guys plus equals is a shortcut I
01:26 - also want to go over all of them so when
01:28 - you see them in program you don't get
01:30 - confused X well let's change this to 5
01:32 - it's weird if they're the same number so
01:34 - X minus equal 5 equals 10 minus 5 and
01:38 - assigns that to the new value of x so
01:40 - let's go ahead and see that that is 5
01:42 - now if we go ahead and see multiplies
01:46 - equals what this would do is do 10 times
01:50 - 5 and set it equal to 50 and the last
01:53 - one without getting in the weird stuff
01:56 - is divide equals 5 and this of course is
01:59 - 2 so what this does is basically takes
02:01 - the old value of x it divides it by this
02:04 - value and sets it equal to the new value
02:07 - of x so aside from that there's one more
02:10 - and I rarely use it
02:12 - this way I hate writing in like this and
02:14 - I hate seeing other people rate it like
02:16 - this because it's confusing this is
02:18 - going to be a bad example because ten
02:20 - divided by five is two with no remainder
02:22 - so it will be zero but if we go ahead
02:24 - and throw like three something like this
02:26 - what this does is it takes the old value
02:28 - of X divides it by three and it stores
02:32 - the remainder in one so now X is going
02:34 - to be equal to one right like that so
02:38 - those are all your assignment operators
02:41 - plus minus multiply divide and modulus
02:44 - which is remainder so now whenever you
02:47 - come across them in programming you'll
02:48 - understand what they mean so now what I
02:51 - want to talk to you guys about is those
02:52 - increment operators so let's go ahead
02:54 - and get new value 20 that's a little bit
02:56 - better it's my favorite number so you
02:58 - know how I told you guys that you could
03:01 - do something like this X plus plus and
03:03 - this was the same thing as adding one to
03:06 - X
03:06 - simple enough right not exactly because
03:09 - there are two different versions of this
03:11 - increment operator and I'm going to show
03:13 - you the difference with little
03:15 - differences between both so let's go
03:17 - ahead and see out X n line let's go
03:23 - ahead and run this and take a look at
03:24 - what happens so our initial value of X
03:27 - was equal to 20 and then we ran this
03:29 - line of code and it printed 20 all right
03:32 - and then we ran this line and it was
03:34 - equal to 21 well what the increment
03:37 - operator is doing whenever you write
03:39 - variable with plus plus after it it's
03:42 - going to go ahead and run this line of
03:44 - code and then it's going to add 1 to
03:47 - that variable so runs this line of code
03:49 - X is still 20 then when it gets done
03:52 - running it assigns 21 to X and then it
03:55 - runs this one so that's why it was 20 21
03:59 - so saying are a simple enough what's the
04:01 - other version the other version is this
04:04 - whenever the increment operator is
04:06 - before the variable like plus plus X
04:09 - instead of X plus plus what happens is
04:12 - you can see whenever you run the program
04:14 - it goes 21 21 so what this does before
04:18 - the variable is it adds one first and
04:21 - then it runs the statement so adds one
04:23 - right here and then
04:25 - runs it so right here the value of X is
04:28 - getting set to 21 and then run it 21
04:31 - still 21 21 so it's basically if your
04:34 - pluses are before the X it's going to
04:36 - add one before it runs it if your pluses
04:39 - are after the X it's going to run the
04:41 - line of code and then add one to the
04:43 - variable so it you know if you're
04:45 - building a program in you're off by one
04:48 - you know maybe you're running a loop or
04:50 - something and you're always off by one
04:51 - chances are your pluses are on the wrong
04:53 - side either this side or that side so
04:56 - this is a common error and it's actually
04:58 - something that people have a hard
04:59 - concept understanding but just remember
05:02 - where you add your pluses indicate when
05:05 - it's going to add one before or after
05:08 - the statement and if you remember like
05:09 - that it'll be simple enough so now you
05:12 - understand that you don't need a return
05:14 - zero
05:14 - you understand all these scuse me ooh
05:17 - assignment operators that's actually
05:19 - kind of a tongue-twister assignment
05:21 - operators assignment operators just
05:23 - hyman operators got it and now you
05:26 - understand increment operators which is
05:27 - plus plus X and X plus plus oh and one
05:30 - other thing
05:31 - there's also minus minus X and what this
05:33 - does of course is subtracts it and X
05:37 - minus minus but I don't need to show you
05:39 - guys that
05:39 - so just remember those four different
05:41 - increment operators all those assignment
05:42 - operators and you don't need a return
05:44 - zero anymore and you'll be good to go so
05:46 - thank you guys for watching my twenty
05:47 - first tutorial no idea what I'm going to
05:50 - cover in the next tutorial but it's
05:51 - going to be sweet so thank you guys
05:52 - again and I will see you guys later

Cleaned transcript:

what's going on guys welcome to your 21st C++ tutorial and before I even get started with the story I just want to mention one thing that you guys probably notice already and that is I don't have return 0 at the end of my main and that is because I just found out that well let me say this in the old C++ ways you had to have that return 0 statement but now the new version or whatever whenever you don't include return 0 at the end of your main C++ just assumes you return 0 after the last statement so you know if you go ahead and type your program you can either put it if you're you know oldschool programmer or you cannot include it and it would just assume you have return 0 but for the rest of these stories I'm going to exclude it so you know don't forget that it isn't there so anyways let's go ahead and get to the heart of the story and that's assignment operators and increment operators now we already know well let's go ahead and get a variable first set X equal to 10 looks good so we already know we can do something like this X plus equals 10 and this is basically the same as writing x equals x plus 10 so then whenever we let me just go ahead and this line and print it out we go ahead and we get 20 just like that so what it does is it takes to this value adds it to X and sets equal to the new X variable so I already told you guys plus equals is a shortcut I also want to go over all of them so when you see them in program you don't get confused X well let's change this to 5 it's weird if they're the same number so X minus equal 5 equals 10 minus 5 and assigns that to the new value of x so let's go ahead and see that that is 5 now if we go ahead and see multiplies equals what this would do is do 10 times 5 and set it equal to 50 and the last one without getting in the weird stuff is divide equals 5 and this of course is 2 so what this does is basically takes the old value of x it divides it by this value and sets it equal to the new value of x so aside from that there's one more and I rarely use it this way I hate writing in like this and I hate seeing other people rate it like this because it's confusing this is going to be a bad example because ten divided by five is two with no remainder so it will be zero but if we go ahead and throw like three something like this what this does is it takes the old value of X divides it by three and it stores the remainder in one so now X is going to be equal to one right like that so those are all your assignment operators plus minus multiply divide and modulus which is remainder so now whenever you come across them in programming you'll understand what they mean so now what I want to talk to you guys about is those increment operators so let's go ahead and get new value 20 that's a little bit better it's my favorite number so you know how I told you guys that you could do something like this X plus plus and this was the same thing as adding one to X simple enough right not exactly because there are two different versions of this increment operator and I'm going to show you the difference with little differences between both so let's go ahead and see out X n line let's go ahead and run this and take a look at what happens so our initial value of X was equal to 20 and then we ran this line of code and it printed 20 all right and then we ran this line and it was equal to 21 well what the increment operator is doing whenever you write variable with plus plus after it it's going to go ahead and run this line of code and then it's going to add 1 to that variable so runs this line of code X is still 20 then when it gets done running it assigns 21 to X and then it runs this one so that's why it was 20 21 so saying are a simple enough what's the other version the other version is this whenever the increment operator is before the variable like plus plus X instead of X plus plus what happens is you can see whenever you run the program it goes 21 21 so what this does before the variable is it adds one first and then it runs the statement so adds one right here and then runs it so right here the value of X is getting set to 21 and then run it 21 still 21 21 so it's basically if your pluses are before the X it's going to add one before it runs it if your pluses are after the X it's going to run the line of code and then add one to the variable so it you know if you're building a program in you're off by one you know maybe you're running a loop or something and you're always off by one chances are your pluses are on the wrong side either this side or that side so this is a common error and it's actually something that people have a hard concept understanding but just remember where you add your pluses indicate when it's going to add one before or after the statement and if you remember like that it'll be simple enough so now you understand that you don't need a return zero you understand all these scuse me ooh assignment operators that's actually kind of a tonguetwister assignment operators assignment operators just hyman operators got it and now you understand increment operators which is plus plus X and X plus plus oh and one other thing there's also minus minus X and what this does of course is subtracts it and X minus minus but I don't need to show you guys that so just remember those four different increment operators all those assignment operators and you don't need a return zero anymore and you'll be good to go so thank you guys for watching my twenty first tutorial no idea what I'm going to cover in the next tutorial but it's going to be sweet so thank you guys again and I will see you guys later
