With timestamps:

00:00 - all right guys welcome back to your 56
00:02 - C++ tutorial and in this tutorial we're
00:04 - going to be talking more about
00:05 - polymorphism because I know I kind of
00:07 - cut off the last tutorial abruptly and
00:09 - that's because I understood that um I
00:12 - wasn't making a couple things clear so I
00:14 - wrote some comments here and uh read
00:17 - these line by line and hopefully they
00:20 - can make you understand the basics
00:22 - behind you know inheriting and using
00:24 - these pointer with different types of
00:26 - objects easier and also I wanted to
00:30 - stress one thing that you guys may not
00:32 - quite have
00:33 - understood now if we go up to you know
00:36 - the ninja class in the monster class you
00:39 - saw that each of these specific classes
00:41 - had a function called attack so a ninja
00:44 - could attack and a monster could attack
00:47 - however if we scrolled up to the enemy
00:49 - class where they both inherited from
00:51 - there was no attack function right in
00:54 - here so that is why we had to switch
00:57 - back to using the ninja and the monster
01:00 - attack after we set the attack power so
01:03 - that's why the enemy object see let me
01:05 - go ahead and like if enemy object was to
01:09 - try to attack you would get an error
01:11 - message because an enemy object can't
01:13 - attack because this enemy class has no
01:16 - attack only these specific classes do
01:19 - you see what I'm saying so that's why we
01:21 - could use the enemy object to set the
01:22 - attack power because every class
01:25 - inherited this attack power but we
01:28 - couldn't use those enemy objects to
01:30 - attack because only these specific
01:33 - classes can attack so you're saying all
01:35 - right Bucky that's uh I understand it
01:37 - now but it's still kind of you know a
01:39 - dumb way to program because first you
01:42 - make a ninja object then an enemy object
01:44 - then you use the enemy object here then
01:46 - you have to switch back to the ninja
01:48 - object right here well wouldn't it be
01:50 - nice if we could just have these enemy
01:54 - objects come on I keep hitting that dumb
01:56 - plus sign would it be nice if we could
01:58 - just have these enemy objects attack as
02:00 - well that would make our lives a whole
02:02 - lot easier if we didn't have to switch
02:04 - back to this ninja and monster class if
02:06 - these enemy classes or excuse me these
02:08 - enemies objects could just set the
02:10 - attack Power Attack move around to
02:13 - whatever an enemy needed to do we'll
02:15 - check it out guys that is the core
02:19 - concept behind polymorphism and it's
02:21 - going to make your programming life a
02:23 - whole lot easier so let me go ahead and
02:26 - I'm going to go ahead and delete all
02:27 - this crap right here and I'm going to
02:29 - clean out all my classes so I just have
02:31 - a blank Monster Class A blank ninja
02:34 - class and a blank enemy class now I'm
02:38 - going to teach you guys how to do what I
02:41 - was just talking how to call the attack
02:43 - function on every single enemy object
02:46 - and have it work beautifully now before
02:48 - you're saying oh OMG you deleted
02:50 - everything I just just following the
02:52 - tutorial and now I'm going to have to
02:54 - retype all that code why would you
02:55 - delete everything well I deleted
02:58 - everything because the code code for
03:00 - this is actually a whole lot easier than
03:03 - what we' been doing before so before I
03:05 - wanted to stress you guys you know how
03:07 - you inherit and indeed you can you know
03:10 - use different addresses with different
03:13 - pointers and once you understood the
03:15 - last tutorial come to this tutorial and
03:18 - look how easy I'm going to make this for
03:20 - you guys so we want every enemy object
03:24 - to be able to attack so let's go ahead
03:27 - and make a public
03:28 - function and we're going to name this
03:30 - void attack so now every enemy has the
03:34 - ability to attack so now what we want to
03:38 - do is before we start coding the rest of
03:41 - the stuff we already know that whenever
03:43 - we build a specific class like ninja and
03:45 - monster that they're going to have their
03:47 - own specific attack functions a ninja is
03:50 - going to be like karate chop and a
03:52 - monster is going to be like Roar I'm
03:53 - coming out from under your bed well we
03:56 - already know that each of these classes
03:58 - is going to pretty much overwrite this
04:00 - attack function so what we want to do is
04:03 - we want to make this
04:04 - function virtual whenever you make a
04:08 - function virtual it means that you're
04:10 - going to be using it
04:12 - polymorphically and that way whenever
04:14 - later on we're using like enemy one
04:16 - attack enemy 2 attack it knows that it's
04:19 - supposed to look in the specific class
04:22 - for that function instead of using this
04:24 - function right here so now when we go
04:26 - ahead and you know public make our
04:30 - attack function using void
04:33 - attack and we'll just whoa easy uh backs
04:37 - slashes now whenever we write something
04:40 - like void and just write you know
04:44 - ninja
04:47 - attack and line and let me just go ahead
04:50 - and code this real quick Copy this paste
04:53 - it right there and the monster attack
04:56 - can be like monster attack ah so now
05:00 - whenever we go ahead and use well I
05:03 - might as well just code the rest of this
05:04 - program cuz you know instead of telling
05:06 - you what I'm going to code as as well
05:08 - just shut up and code it so we have a
05:10 - ninja
05:12 - object and we have a monster object now
05:15 - we know from the last tutorial that what
05:17 - we can do is since a ninja is just a
05:22 - specific type of enemy we can go ahead
05:24 - and make an enemy object like enemy
05:27 - object and make a pointer
05:30 - to enemy one get my cursor out of the
05:33 - way and we can set this equal to the
05:36 - address of ninja we can do the same
05:39 - thing with monster and this is valid
05:41 - again because monsters and ninjas are
05:44 - just more specific types of enemies so
05:47 - anything that you can do to an enemy
05:49 - including attack you can do to a ninja
05:52 - and a monster if an enemy can move
05:55 - around a ninja and a Monster can move
05:57 - around if an enemy could St stab you
05:59 - with it sword a ninja and a monster
06:01 - could stab you with it sword so that's
06:03 - why we were able to do this right here
06:05 - so now what we can do is since we made
06:08 - this virtual function we can now go
06:11 - ahead and do stuff like this enemy
06:17 - one attack and let's just go ahead and
06:20 - copy this right here and now we can go
06:23 - ahead and write enemy to attack and if
06:26 - we run this it works perfectly fine
06:28 - ninja attack and monster attack so
06:31 - basically whenever we use Virtual
06:34 - functions we're telling C++ this all
06:37 - right so C++ let's sit down and have a
06:40 - conversation we're going to be building
06:42 - a computer game and we're going to be
06:44 - putting enemies in it now each of these
06:47 - enemies is going to have its own
06:49 - specific attack function now whenever I
06:52 - call an enemy object I'm going to have a
06:55 - attack I don't want you to use this
06:57 - attack function right here this is just
06:59 - a template telling you that each class
07:02 - that inherits from enemy is going to
07:04 - have an attack function whenever I use
07:06 - an enemy object that has an attack
07:08 - function I want you to find out which
07:11 - address AKA which type of enemy has that
07:15 - attack function and call that attack so
07:18 - basically it said all right enemy one
07:21 - attack okay let's go ahead and I'm going
07:24 - to call attack from enemy hold on enemy
07:27 - one is indeed a ninja object so I'm
07:30 - going to ninja attack and then it said
07:32 - all right enemy 2 attack well I know
07:35 - that enemy 2 is an enemy object so I'm
07:37 - going to go ahead and call ATT attack
07:39 - but hold on this is a virtual function
07:42 - so I'm going to go ahead and see oh that
07:45 - is a monster object so I'm going to go
07:48 - ahead and monster attack you so virtual
07:51 - functions are basically template
07:53 - functions and any class that inherits
07:56 - virtual members whether it's variable or
07:59 - function or anything virtual is a
08:01 - polymorphic class because well not
08:04 - because that is the idea behind
08:06 - polymorphism that you can call the same
08:09 - function I mean check it out we're using
08:12 - an enemy object and we're calling the
08:14 - same attack function but it has
08:16 - different results so that is the beauty
08:18 - behind polymorphism that you can use the
08:21 - same function and produce different
08:23 - results so hopefully I didn't confuse
08:25 - you guys too much I think this tutorial
08:27 - is a lot more clear than the other one
08:29 - um that's you know what basically what
08:32 - polymorphism is that well first of all
08:36 - in order to have polymorphism you need
08:38 - this virtual stuff right here and also
08:41 - the idea behind polymorphism is that you
08:43 - can have different functions from the
08:46 - same type and I and I'm doing those
08:49 - little quotation signs with my fingers
08:51 - you can have the same function with the
08:53 - same type of object but you produce
08:56 - different results based on what
08:58 - addresses point too so you know that's
09:02 - it I don't want to confuse you guys
09:03 - anymore anything I have left to talk
09:05 - about I'll talk about in the next
09:06 - tutorial so hopefully you guys
09:08 - understand this a little better than the
09:09 - last tutorial if you don't don't worry
09:11 - we're going to be covering it more in
09:12 - the future but uh thank you guys for
09:14 - watching uh don't forget to subscribe
09:16 - and I guess I'll see you guys in the
09:17 - next video

Cleaned transcript:

all right guys welcome back to your 56 C++ tutorial and in this tutorial we're going to be talking more about polymorphism because I know I kind of cut off the last tutorial abruptly and that's because I understood that um I wasn't making a couple things clear so I wrote some comments here and uh read these line by line and hopefully they can make you understand the basics behind you know inheriting and using these pointer with different types of objects easier and also I wanted to stress one thing that you guys may not quite have understood now if we go up to you know the ninja class in the monster class you saw that each of these specific classes had a function called attack so a ninja could attack and a monster could attack however if we scrolled up to the enemy class where they both inherited from there was no attack function right in here so that is why we had to switch back to using the ninja and the monster attack after we set the attack power so that's why the enemy object see let me go ahead and like if enemy object was to try to attack you would get an error message because an enemy object can't attack because this enemy class has no attack only these specific classes do you see what I'm saying so that's why we could use the enemy object to set the attack power because every class inherited this attack power but we couldn't use those enemy objects to attack because only these specific classes can attack so you're saying all right Bucky that's uh I understand it now but it's still kind of you know a dumb way to program because first you make a ninja object then an enemy object then you use the enemy object here then you have to switch back to the ninja object right here well wouldn't it be nice if we could just have these enemy objects come on I keep hitting that dumb plus sign would it be nice if we could just have these enemy objects attack as well that would make our lives a whole lot easier if we didn't have to switch back to this ninja and monster class if these enemy classes or excuse me these enemies objects could just set the attack Power Attack move around to whatever an enemy needed to do we'll check it out guys that is the core concept behind polymorphism and it's going to make your programming life a whole lot easier so let me go ahead and I'm going to go ahead and delete all this crap right here and I'm going to clean out all my classes so I just have a blank Monster Class A blank ninja class and a blank enemy class now I'm going to teach you guys how to do what I was just talking how to call the attack function on every single enemy object and have it work beautifully now before you're saying oh OMG you deleted everything I just just following the tutorial and now I'm going to have to retype all that code why would you delete everything well I deleted everything because the code code for this is actually a whole lot easier than what we' been doing before so before I wanted to stress you guys you know how you inherit and indeed you can you know use different addresses with different pointers and once you understood the last tutorial come to this tutorial and look how easy I'm going to make this for you guys so we want every enemy object to be able to attack so let's go ahead and make a public function and we're going to name this void attack so now every enemy has the ability to attack so now what we want to do is before we start coding the rest of the stuff we already know that whenever we build a specific class like ninja and monster that they're going to have their own specific attack functions a ninja is going to be like karate chop and a monster is going to be like Roar I'm coming out from under your bed well we already know that each of these classes is going to pretty much overwrite this attack function so what we want to do is we want to make this function virtual whenever you make a function virtual it means that you're going to be using it polymorphically and that way whenever later on we're using like enemy one attack enemy 2 attack it knows that it's supposed to look in the specific class for that function instead of using this function right here so now when we go ahead and you know public make our attack function using void attack and we'll just whoa easy uh backs slashes now whenever we write something like void and just write you know ninja attack and line and let me just go ahead and code this real quick Copy this paste it right there and the monster attack can be like monster attack ah so now whenever we go ahead and use well I might as well just code the rest of this program cuz you know instead of telling you what I'm going to code as as well just shut up and code it so we have a ninja object and we have a monster object now we know from the last tutorial that what we can do is since a ninja is just a specific type of enemy we can go ahead and make an enemy object like enemy object and make a pointer to enemy one get my cursor out of the way and we can set this equal to the address of ninja we can do the same thing with monster and this is valid again because monsters and ninjas are just more specific types of enemies so anything that you can do to an enemy including attack you can do to a ninja and a monster if an enemy can move around a ninja and a Monster can move around if an enemy could St stab you with it sword a ninja and a monster could stab you with it sword so that's why we were able to do this right here so now what we can do is since we made this virtual function we can now go ahead and do stuff like this enemy one attack and let's just go ahead and copy this right here and now we can go ahead and write enemy to attack and if we run this it works perfectly fine ninja attack and monster attack so basically whenever we use Virtual functions we're telling C++ this all right so C++ let's sit down and have a conversation we're going to be building a computer game and we're going to be putting enemies in it now each of these enemies is going to have its own specific attack function now whenever I call an enemy object I'm going to have a attack I don't want you to use this attack function right here this is just a template telling you that each class that inherits from enemy is going to have an attack function whenever I use an enemy object that has an attack function I want you to find out which address AKA which type of enemy has that attack function and call that attack so basically it said all right enemy one attack okay let's go ahead and I'm going to call attack from enemy hold on enemy one is indeed a ninja object so I'm going to ninja attack and then it said all right enemy 2 attack well I know that enemy 2 is an enemy object so I'm going to go ahead and call ATT attack but hold on this is a virtual function so I'm going to go ahead and see oh that is a monster object so I'm going to go ahead and monster attack you so virtual functions are basically template functions and any class that inherits virtual members whether it's variable or function or anything virtual is a polymorphic class because well not because that is the idea behind polymorphism that you can call the same function I mean check it out we're using an enemy object and we're calling the same attack function but it has different results so that is the beauty behind polymorphism that you can use the same function and produce different results so hopefully I didn't confuse you guys too much I think this tutorial is a lot more clear than the other one um that's you know what basically what polymorphism is that well first of all in order to have polymorphism you need this virtual stuff right here and also the idea behind polymorphism is that you can have different functions from the same type and I and I'm doing those little quotation signs with my fingers you can have the same function with the same type of object but you produce different results based on what addresses point too so you know that's it I don't want to confuse you guys anymore anything I have left to talk about I'll talk about in the next tutorial so hopefully you guys understand this a little better than the last tutorial if you don't don't worry we're going to be covering it more in the future but uh thank you guys for watching uh don't forget to subscribe and I guess I'll see you guys in the next video
