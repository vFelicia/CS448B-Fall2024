With timestamps:

00:00 - what's going on guys it's Bucky and
00:01 - welcome to your 55th tutorial and in
00:04 - this story I'm going to be beginning to
00:06 - talk about something called polymorphism
00:08 - now polymorphism is a subject that gives
00:11 - a lot of students and a lot of people
00:13 - problems because whenever someone tries
00:15 - to explain it they make it really
00:17 - confusing so let me give you guys just a
00:19 - basic example um you know not through
00:22 - code or anything I just want to talk to
00:23 - you guys for a second
00:24 - so say you wanted to make a computer
00:27 - game and you know that your computer
00:29 - game you wanted to include a bunch of
00:31 - enemies like monsters and ninjas and you
00:35 - know just a bunch of different types of
00:38 - enemies well all of these enemies share
00:41 - the common function say they all had an
00:43 - attack function to try to attack you
00:45 - however they all attacked you in kind of
00:48 - different ways
00:48 - maybe the ninja threw a sigh at you and
00:51 - a monster tried to scare you from under
00:53 - your bed and you know all these
00:55 - different enemies even though they had
00:57 - the same function you know they worked a
00:59 - little bit different well will
01:01 - polymorphism allows you to do is it
01:03 - allows you to call that same attack
01:05 - function on many different objects and
01:08 - since all of these objects like ninjas
01:11 - and monsters since they're all enemies
01:14 - this is why it's valid so since they all
01:17 - inherit from the same class you can call
01:20 - attack on each different object and even
01:23 - though ninja has an attack and Monster
01:26 - has an attack even though you're calling
01:28 - the same function on different objects
01:31 - they all would know what to do they all
01:33 - know that they're supposed to attack you
01:35 - in some way so polymorphism basically
01:38 - allows you to do is use the same
01:39 - function and have many different
01:42 - outcomes so that's the basic idea behind
01:45 - polymorphism but there's actually a lot
01:47 - to understand so let's go ahead and get
01:48 - to it so let's go ahead and start making
01:50 - that computer game now so go ahead and
01:52 - make class and we'll name an enemy and
01:56 - don't forget put your semicolon at the
01:58 - end and now let's go ahead and let's say
02:02 - that we're going to have a ninja in a
02:04 - monster and they're each going to have
02:05 - an attack power how much you're going to
02:07 - hurt you so let's go ahead and well
02:10 - since we learn what protected is we can
02:11 - go ahead and you
02:12 - that and we'll put int attack power so
02:17 - now every enemy has an attack power so
02:20 - now let's of course make a function in
02:22 - order to set that attack power so we'll
02:24 - make it public of course and we'll just
02:26 - make it void set attack power and this
02:33 - is going to take one parameter of course
02:34 - some number and using that number we're
02:38 - going to set the attack power and again
02:42 - this attack power doesn't really mean
02:43 - anything it's just a made-up number so
02:46 - attack power equals a so we're going to
02:49 - pass it in like a value of ten and you
02:52 - know the ninjas attack power is 10
02:54 - whatever the heck attacked by our means
02:56 - right so now let's go ahead and make
02:58 - another class let's go ahead and make
03:01 - class ninja and this ninja class is
03:06 - going to inherit from Public Enemy so
03:10 - all ninjas are enemies we already know
03:12 - that so now let's go ahead and add some
03:15 - things that are specific to only ninjas
03:18 - well in each of these classes let's go
03:21 - ahead and make an attack function so
03:23 - public void attack there we go
03:30 - and now what we can do is I guess I'll
03:33 - just throw everything on one line um
03:35 - this is the part that's going to be
03:37 - specific to the ninja class so right
03:40 - here we're saying all right we're going
03:41 - to have some ninjas but a ninja is still
03:44 - going to be enemy I mean the enemy's an
03:45 - enemy
03:46 - so whenever a ninja attack what I want
03:49 - them to do just see out on the screen um
03:53 - I am a ninja ninja chop and it'll be
03:59 - like - not ninja cob come on ninja chop
04:04 - and it will be like a - and then you
04:07 - write the attack power
04:11 - because remember since it's the enemy it
04:15 - has that attack power attribute that it
04:17 - inherited hopefully you guys watched my
04:19 - last couple tutorials and aren't like
04:21 - what the heck does inheritance mean and
04:23 - then just go ahead and that line right
04:25 - there so now we have a ninja class that
04:28 - has all this crap from enemy since it
04:30 - inherit from enemy and it also has its
04:33 - own specific attack function so whenever
04:36 - a ninja attacks is going to say I am a
04:38 - ninja ninja chop minus 10 like it did 10
04:41 - damage to you or something so let's go
04:43 - ahead and copy this and we'll make
04:44 - another class right here we'll call this
04:47 - class and actually I'm about to scroll
04:49 - off the screen so let me just bump this
04:53 - up and we'll make you know this a
04:55 - monster class now a monster is also an
04:58 - enemy so you have two enemies you have a
05:00 - ninja and a monster however when a
05:03 - monster attack it says a monster must
05:07 - eat you explanation for explanation
05:10 - point it'll be like minus 25 or
05:12 - something like eating you doesn't kill
05:14 - you
05:15 - it only does 25 damage so basically what
05:18 - we have here is three classes we have an
05:20 - enemy class which is common to all
05:22 - enemies so all enemies are going to have
05:25 - an attack power however each specific
05:29 - enemy attacks in a specific way a ninja
05:31 - is going to chop you and a monster is
05:34 - going to eat you so let's go ahead and
05:36 - start coding and making all these
05:38 - objects so in our main right here let's
05:41 - go ahead and make a ninja object ninja
05:44 - and I'll just name this n and a monster
05:49 - object and I'll just name this M so you
05:51 - got a ninja and a monster and now what
05:54 - we need to do is we need to make two
05:56 - enemy objects so let me go ahead enemy
05:59 - and make a pointer and we'll just name
06:02 - this enemy one and we're going to set
06:05 - this equal to the address of our ninja
06:07 - object now before I go on let me say
06:10 - this because this ninja object is of
06:14 - type enemy remember all ninjas are
06:18 - indeed enemies all monsters are indeed
06:20 - enemies that's why we can do this that's
06:23 - why we can say the address
06:25 - equal to the pointer so anything that an
06:28 - enemy can do a ninja can do does that
06:31 - make sense they should and also anything
06:34 - an enemy can do a monster can do so
06:36 - let's go ahead and just I shouldn't do
06:39 - this
06:39 - you should never copy and paste because
06:41 - you always mess up stuff enemy 2 we'll
06:44 - set this equal to monster address so
06:47 - basically what we can do now is this we
06:50 - can use that enemy 1 object
06:53 - and remember whenever you're working
06:54 - with pointer functions you need that
06:57 - little arrow and you see it already pops
07:00 - up attack power so our program already
07:02 - knows that and any enemy object you can
07:07 - call attack power because even if it's a
07:10 - ninja a monster they all have an attack
07:13 - power so that's why this is valid so
07:15 - whenever you set your attack power to
07:18 - you know a ninja can do like 20 damage
07:21 - or 29 or whatever it already knows that
07:24 - it's supposed to apply this to the ninja
07:26 - object so even though we're setting it
07:29 - enemy attack power 29 it knows that
07:32 - indeed since it's pointing to the ninja
07:35 - object that means the ninjas attack
07:37 - power is 29 so basically before I go on
07:41 - because a ninja is a type of enemy this
07:45 - is valid this line of code right here
07:47 - anything that ninjas can do excuse me
07:50 - anything that enemy can do a ninja can
07:52 - do because a ninja is just a more
07:54 - specific type of enemy so every how
07:59 - should I says every enemy has an attack
08:02 - power so that's why we're able to do
08:04 - this every enemy has an attack power and
08:07 - the reason knows whose attack power to
08:11 - set is because it's a ninja object right
08:14 - here enemy 1 equals a ninja object so
08:16 - let's go ahead and just copy this again
08:19 - you should never copy you ladies and
08:20 - gentleman and we'll say enemy 2 which is
08:22 - the monster let's set this attack power
08:25 - equal to you know 99 or something stupid
08:28 - so now we can go ahead and with each of
08:31 - these objects we can call attack and it
08:33 - will give it their own custom text so
08:35 - and
08:36 - attack already filled in first and M
08:40 - attack so we kind of used a combination
08:43 - of you know two different classes using
08:47 - the general enemy class we set the
08:49 - attack power and then whenever attacks
08:51 - it's going to use that attack power like
08:54 - I'm a ninja ninja chop 29 so let's go
08:57 - ahead and run this and see if I forgot
08:58 - nice semicolons or anything and I did so
09:00 - hold on one second all I see what I did
09:04 - wrong what I did wrong is I actually
09:07 - just try setting the attack power and
09:11 - the method was called set attack power
09:13 - so let's go ahead and copy this and
09:15 - we'll set attack power to 29 and set
09:18 - attack power to 99 now if we go ahead
09:20 - and build around that there we go it
09:21 - says I am a ninja ninja chop - 29 and
09:25 - the reason at NU - 29 was be kind
09:29 - because of this line right here and
09:31 - whenever we set the enemy - which was an
09:35 - enemy object but it knows that it's
09:37 - supposed to be working with that monster
09:39 - object whenever he set that equal to set
09:43 - that tech power equal to 99 right there
09:45 - had to find it it knows that whenever
09:48 - the monster attacked it was supposed to
09:50 - have an attack power of 99 so that is
09:54 - basically how you can do that and I
09:57 - guess I'll see you guys later

Cleaned transcript:

what's going on guys it's Bucky and welcome to your 55th tutorial and in this story I'm going to be beginning to talk about something called polymorphism now polymorphism is a subject that gives a lot of students and a lot of people problems because whenever someone tries to explain it they make it really confusing so let me give you guys just a basic example um you know not through code or anything I just want to talk to you guys for a second so say you wanted to make a computer game and you know that your computer game you wanted to include a bunch of enemies like monsters and ninjas and you know just a bunch of different types of enemies well all of these enemies share the common function say they all had an attack function to try to attack you however they all attacked you in kind of different ways maybe the ninja threw a sigh at you and a monster tried to scare you from under your bed and you know all these different enemies even though they had the same function you know they worked a little bit different well will polymorphism allows you to do is it allows you to call that same attack function on many different objects and since all of these objects like ninjas and monsters since they're all enemies this is why it's valid so since they all inherit from the same class you can call attack on each different object and even though ninja has an attack and Monster has an attack even though you're calling the same function on different objects they all would know what to do they all know that they're supposed to attack you in some way so polymorphism basically allows you to do is use the same function and have many different outcomes so that's the basic idea behind polymorphism but there's actually a lot to understand so let's go ahead and get to it so let's go ahead and start making that computer game now so go ahead and make class and we'll name an enemy and don't forget put your semicolon at the end and now let's go ahead and let's say that we're going to have a ninja in a monster and they're each going to have an attack power how much you're going to hurt you so let's go ahead and well since we learn what protected is we can go ahead and you that and we'll put int attack power so now every enemy has an attack power so now let's of course make a function in order to set that attack power so we'll make it public of course and we'll just make it void set attack power and this is going to take one parameter of course some number and using that number we're going to set the attack power and again this attack power doesn't really mean anything it's just a madeup number so attack power equals a so we're going to pass it in like a value of ten and you know the ninjas attack power is 10 whatever the heck attacked by our means right so now let's go ahead and make another class let's go ahead and make class ninja and this ninja class is going to inherit from Public Enemy so all ninjas are enemies we already know that so now let's go ahead and add some things that are specific to only ninjas well in each of these classes let's go ahead and make an attack function so public void attack there we go and now what we can do is I guess I'll just throw everything on one line um this is the part that's going to be specific to the ninja class so right here we're saying all right we're going to have some ninjas but a ninja is still going to be enemy I mean the enemy's an enemy so whenever a ninja attack what I want them to do just see out on the screen um I am a ninja ninja chop and it'll be like not ninja cob come on ninja chop and it will be like a and then you write the attack power because remember since it's the enemy it has that attack power attribute that it inherited hopefully you guys watched my last couple tutorials and aren't like what the heck does inheritance mean and then just go ahead and that line right there so now we have a ninja class that has all this crap from enemy since it inherit from enemy and it also has its own specific attack function so whenever a ninja attacks is going to say I am a ninja ninja chop minus 10 like it did 10 damage to you or something so let's go ahead and copy this and we'll make another class right here we'll call this class and actually I'm about to scroll off the screen so let me just bump this up and we'll make you know this a monster class now a monster is also an enemy so you have two enemies you have a ninja and a monster however when a monster attack it says a monster must eat you explanation for explanation point it'll be like minus 25 or something like eating you doesn't kill you it only does 25 damage so basically what we have here is three classes we have an enemy class which is common to all enemies so all enemies are going to have an attack power however each specific enemy attacks in a specific way a ninja is going to chop you and a monster is going to eat you so let's go ahead and start coding and making all these objects so in our main right here let's go ahead and make a ninja object ninja and I'll just name this n and a monster object and I'll just name this M so you got a ninja and a monster and now what we need to do is we need to make two enemy objects so let me go ahead enemy and make a pointer and we'll just name this enemy one and we're going to set this equal to the address of our ninja object now before I go on let me say this because this ninja object is of type enemy remember all ninjas are indeed enemies all monsters are indeed enemies that's why we can do this that's why we can say the address equal to the pointer so anything that an enemy can do a ninja can do does that make sense they should and also anything an enemy can do a monster can do so let's go ahead and just I shouldn't do this you should never copy and paste because you always mess up stuff enemy 2 we'll set this equal to monster address so basically what we can do now is this we can use that enemy 1 object and remember whenever you're working with pointer functions you need that little arrow and you see it already pops up attack power so our program already knows that and any enemy object you can call attack power because even if it's a ninja a monster they all have an attack power so that's why this is valid so whenever you set your attack power to you know a ninja can do like 20 damage or 29 or whatever it already knows that it's supposed to apply this to the ninja object so even though we're setting it enemy attack power 29 it knows that indeed since it's pointing to the ninja object that means the ninjas attack power is 29 so basically before I go on because a ninja is a type of enemy this is valid this line of code right here anything that ninjas can do excuse me anything that enemy can do a ninja can do because a ninja is just a more specific type of enemy so every how should I says every enemy has an attack power so that's why we're able to do this every enemy has an attack power and the reason knows whose attack power to set is because it's a ninja object right here enemy 1 equals a ninja object so let's go ahead and just copy this again you should never copy you ladies and gentleman and we'll say enemy 2 which is the monster let's set this attack power equal to you know 99 or something stupid so now we can go ahead and with each of these objects we can call attack and it will give it their own custom text so and attack already filled in first and M attack so we kind of used a combination of you know two different classes using the general enemy class we set the attack power and then whenever attacks it's going to use that attack power like I'm a ninja ninja chop 29 so let's go ahead and run this and see if I forgot nice semicolons or anything and I did so hold on one second all I see what I did wrong what I did wrong is I actually just try setting the attack power and the method was called set attack power so let's go ahead and copy this and we'll set attack power to 29 and set attack power to 99 now if we go ahead and build around that there we go it says I am a ninja ninja chop 29 and the reason at NU 29 was be kind because of this line right here and whenever we set the enemy which was an enemy object but it knows that it's supposed to be working with that monster object whenever he set that equal to set that tech power equal to 99 right there had to find it it knows that whenever the monster attacked it was supposed to have an attack power of 99 so that is basically how you can do that and I guess I'll see you guys later
