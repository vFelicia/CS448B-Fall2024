With timestamps:

00:00 - all right guys welcome back and so far
00:02 - up to this point what we did is we
00:04 - pretty much took care of thread number
00:06 - one so already what we have going on in
00:09 - the background whenever we start this
00:10 - program is we have a thread that's going
00:12 - to be listening for new computers to
00:14 - connect now as that's happening what
00:18 - we're going to do is we need a way to
00:20 - say okay keep doing that thing in the
00:22 - background but I want to be able to
00:24 - review all the computers that are
00:26 - connected and choose a specific one and
00:29 - then say okay I select that one that's
00:31 - the one that I'm going to you know give
00:33 - commands and then whenever we're done
00:35 - with it we're going to back out and then
00:36 - maybe choose another one so sounds
00:39 - pretty confusing right well it's not I'm
00:41 - going to show you guys probably the
00:42 - coolest and easiest way to do this so
00:45 - what we're going to be doing is we're
00:46 - going to be creating an interactive
00:49 - prompt for pretty much writing our own
00:52 - custom commands so you know whenever you
00:54 - open up a terminal or a command line
00:56 - window whatever you want to call it you
00:58 - pretty much can type command and sending
01:00 - directly to your operating system well
01:03 - if you ever use a program like
01:04 - Metasploit or MySQL from the command
01:06 - line you know that sometimes you can
01:09 - type in like uh metlo and it pretty much
01:12 - gives you its own custom interactive
01:15 - shell or interactive prompt just
01:17 - specific to metas you're like how did
01:19 - they do this how did they make a command
01:20 - line within a command line and I'll show
01:23 - you guys that right now
01:25 - so
01:27 - prompt uh for
01:32 - remotely remotly
01:34 - remotely all right now I just didn't
01:38 - want to name this like prompt or
01:39 - whatever so I just named this
01:42 - turtle and I named it this because it
01:45 - was the only animal I can think of with
01:46 - a shell I mean I could think of other
01:48 - ones of course hermit crab whatever but
01:51 - you know this is the first one that
01:52 - popped in my mind so remember this is in
01:55 - threat 2 so we want to keep this running
01:57 - the entire time as well so you can
02:00 - either write while one or while true
02:03 - whatever and now in order to have your
02:07 - own custom command for what you do is
02:09 - this you take a variable and you set it
02:12 - equal to input now if you want to add a
02:15 - custom little prompt then what you can
02:17 - do is this turtle with some kind of
02:21 - forward slash or whatever so you know
02:24 - just in like the command line let me
02:25 - show
02:26 - you whenever you open up a command line
02:28 - what it does is it shows you you a path
02:31 - to your working directory wherever you
02:33 - are and of course you can change that
02:35 - whatever well whenever we run this
02:37 - program it's just going to say turtle so
02:39 - it's not going to say C User it's just
02:41 - going to say turtle and that's how we
02:42 - know that the commands that we type in
02:45 - they're not going to be handled by our
02:46 - operating system they're going to be
02:48 - handled however we tell it to so now
02:52 - this CMD is equal to a custom command so
02:56 - how do we handle that well with a simple
02:58 - if statement so if we say if they typed
03:01 - in
03:02 - list what do we want to do and all this
03:05 - little mini program is going to do is
03:07 - it's going to list all the connections
03:09 - and then we'll add another custom
03:10 - command that allows us to select one of
03:12 - them so if list then we're going to make
03:16 - a function later
03:18 - on to just list all the connections all
03:21 - the computers that are
03:22 - connected and then we're going to write
03:24 - continue or we can actually just write
03:27 - an else if so if you guys don't know
03:30 - whenever you have a loop what you can do
03:33 - is you can add the keyword continue and
03:35 - what that allows you to do is pretty
03:37 - much not break out of the loop so this
03:39 - keeps looping but it just goes back up
03:41 - to the top so break that keyword just
03:44 - stops the loop completely continue says
03:47 - actually just hop right back to the top
03:50 - and continue with the next iteration so
03:52 - this will be fine but we can actually
03:53 - just add an else
03:55 - if so else uh or L if for got Python
04:02 - language select and
04:05 - command all right so why do I write
04:08 - select in command instead of just select
04:11 - because let me bring up this
04:15 - again because what we're going to do is
04:17 - whenever we list all the connections
04:19 - it's going to have their IP address and
04:20 - then just an ID number like 0 1 2 3
04:23 - whatever so whenever we select a
04:25 - connection we're just going to write
04:26 - select three or select two or select 65
04:29 - five if you know maybe a bunch of
04:31 - computers are connected so the command
04:34 - isn't just select itself so we just
04:36 - can't test if it's directly equal to a
04:38 - word like that however we're going to
04:40 - say if the word select is in the command
04:42 - that must mean they're trying to select
04:44 - one of the clients
04:46 - so what I want to do is this so
04:49 - connection equals
04:52 - get
04:53 - Target and I'll just say command all
04:56 - right so later on as well we have to
04:58 - actually build these functions to list
05:01 - all the connections and to actually get
05:04 - the connection object so we're going to
05:06 - be doing that in probably the next
05:08 - tutorial and so that's why I'm not going
05:10 - to explain that right now it pretty much
05:12 - you pass it in this command and it's
05:15 - going to extract the ID number and get
05:16 - the connection from that it's actually
05:18 - really easy but that's what we're going
05:20 - to be doing and now I just want to
05:23 - say none so whenever we get a connection
05:26 - back that we chose we just want to test
05:29 - to make sure it's not equal to none
05:31 - because maybe from the time you started
05:33 - this till the time you know right after
05:35 - you listed everything they disconnected
05:37 - or maybe it's just this old connection
05:40 - that got I don't know it's still stored
05:41 - in your list for some reason well it's
05:43 - always a good idea to make sure um your
05:45 - connection is not equal to none and then
05:48 - we're just going to
05:50 - say
05:52 - [Music]
05:53 - commands all right so at this point we
05:56 - have a connection and we saw this in the
05:59 - last tutorial we can start sending them
06:01 - commands simple enough now Els I'm just
06:04 - going to add one more line of code here
06:06 - and we're going to say else if they type
06:08 - something in to our little mini program
06:11 - and it wasn't the word list and they
06:13 - didn't select anything maybe they just
06:14 - typed a typo then I'm just going to
06:16 - print out uh something
06:19 - like command
06:22 - not
06:24 - recognized so I just like to have a
06:26 - little indicator there because you know
06:28 - if they start typing in uh list and they
06:31 - accidentally rate fist then you know
06:33 - they they're not like oh why isn't this
06:35 - working well because you typed fist you
06:37 -  so I should probably write that as
06:40 - my uh little indicator but I'll be nice
06:42 - about it all right so now that we have
06:45 - our interactive prompt pretty much up
06:48 - and running what's going to happen is we
06:50 - need to code these functions right here
06:53 - so to list all of your current
06:55 - connections once you select one to
06:58 - actually get that connection object and
07:01 - of course this right here to actually
07:02 - control that computer remotely it's
07:05 - going to be awesome I'll see you guys
07:06 - next time

Cleaned transcript:

all right guys welcome back and so far up to this point what we did is we pretty much took care of thread number one so already what we have going on in the background whenever we start this program is we have a thread that's going to be listening for new computers to connect now as that's happening what we're going to do is we need a way to say okay keep doing that thing in the background but I want to be able to review all the computers that are connected and choose a specific one and then say okay I select that one that's the one that I'm going to you know give commands and then whenever we're done with it we're going to back out and then maybe choose another one so sounds pretty confusing right well it's not I'm going to show you guys probably the coolest and easiest way to do this so what we're going to be doing is we're going to be creating an interactive prompt for pretty much writing our own custom commands so you know whenever you open up a terminal or a command line window whatever you want to call it you pretty much can type command and sending directly to your operating system well if you ever use a program like Metasploit or MySQL from the command line you know that sometimes you can type in like uh metlo and it pretty much gives you its own custom interactive shell or interactive prompt just specific to metas you're like how did they do this how did they make a command line within a command line and I'll show you guys that right now so prompt uh for remotely remotly remotely all right now I just didn't want to name this like prompt or whatever so I just named this turtle and I named it this because it was the only animal I can think of with a shell I mean I could think of other ones of course hermit crab whatever but you know this is the first one that popped in my mind so remember this is in threat 2 so we want to keep this running the entire time as well so you can either write while one or while true whatever and now in order to have your own custom command for what you do is this you take a variable and you set it equal to input now if you want to add a custom little prompt then what you can do is this turtle with some kind of forward slash or whatever so you know just in like the command line let me show you whenever you open up a command line what it does is it shows you you a path to your working directory wherever you are and of course you can change that whatever well whenever we run this program it's just going to say turtle so it's not going to say C User it's just going to say turtle and that's how we know that the commands that we type in they're not going to be handled by our operating system they're going to be handled however we tell it to so now this CMD is equal to a custom command so how do we handle that well with a simple if statement so if we say if they typed in list what do we want to do and all this little mini program is going to do is it's going to list all the connections and then we'll add another custom command that allows us to select one of them so if list then we're going to make a function later on to just list all the connections all the computers that are connected and then we're going to write continue or we can actually just write an else if so if you guys don't know whenever you have a loop what you can do is you can add the keyword continue and what that allows you to do is pretty much not break out of the loop so this keeps looping but it just goes back up to the top so break that keyword just stops the loop completely continue says actually just hop right back to the top and continue with the next iteration so this will be fine but we can actually just add an else if so else uh or L if for got Python language select and command all right so why do I write select in command instead of just select because let me bring up this again because what we're going to do is whenever we list all the connections it's going to have their IP address and then just an ID number like 0 1 2 3 whatever so whenever we select a connection we're just going to write select three or select two or select 65 five if you know maybe a bunch of computers are connected so the command isn't just select itself so we just can't test if it's directly equal to a word like that however we're going to say if the word select is in the command that must mean they're trying to select one of the clients so what I want to do is this so connection equals get Target and I'll just say command all right so later on as well we have to actually build these functions to list all the connections and to actually get the connection object so we're going to be doing that in probably the next tutorial and so that's why I'm not going to explain that right now it pretty much you pass it in this command and it's going to extract the ID number and get the connection from that it's actually really easy but that's what we're going to be doing and now I just want to say none so whenever we get a connection back that we chose we just want to test to make sure it's not equal to none because maybe from the time you started this till the time you know right after you listed everything they disconnected or maybe it's just this old connection that got I don't know it's still stored in your list for some reason well it's always a good idea to make sure um your connection is not equal to none and then we're just going to say commands all right so at this point we have a connection and we saw this in the last tutorial we can start sending them commands simple enough now Els I'm just going to add one more line of code here and we're going to say else if they type something in to our little mini program and it wasn't the word list and they didn't select anything maybe they just typed a typo then I'm just going to print out uh something like command not recognized so I just like to have a little indicator there because you know if they start typing in uh list and they accidentally rate fist then you know they they're not like oh why isn't this working well because you typed fist you so I should probably write that as my uh little indicator but I'll be nice about it all right so now that we have our interactive prompt pretty much up and running what's going to happen is we need to code these functions right here so to list all of your current connections once you select one to actually get that connection object and of course this right here to actually control that computer remotely it's going to be awesome I'll see you guys next time
