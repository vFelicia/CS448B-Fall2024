With timestamps:

00:00 - what's going on guys welcome to your 403
00:02 - C++ tutorial and in this tutorial I'm
00:04 - finally going to be explaining to you
00:06 - guys those things called
00:08 - deconstructors you know whenever we
00:10 - created a class and it said
00:11 - automatically create a deconstructor or
00:13 - whatever and we had it unchecked well
00:15 - I'm going to explain to you guys what
00:17 - they are um when they're used and then
00:19 - you know when we're creating a class
00:21 - from now on we can understand what they
00:23 - mean so the first thing I want to say is
00:26 - a deconstructor is
00:28 - basically code that runs automatically
00:32 - upon the destruction of your object and
00:35 - that's a technical term for it but
00:36 - basically at the end of your program
00:38 - when all your memory is getting freed up
00:40 - and your program's ending and all your
00:42 - objects are getting destroyed and you
00:44 - want a less little bit of code to run
00:47 - that's when your deconstructor is going
00:48 - to run so you know as soon as you create
00:51 - an object The Constructor runs well as
00:53 - soon as it's deleted the deconstructor
00:55 - runs so that's basically you know when
00:57 - that happens so let's go ahead and first
01:00 - before I even start talking about a
01:01 - deconstructor let's go ahead and type
01:03 - some code into our Constructor like um C
01:07 - out I am the Constructor and make sure
01:12 - you spell it wrong and then end that
01:14 - line so now we can see if we go ahead in
01:18 - main.cpp and create come on keyboard
01:21 - type regular and create a Sally object
01:24 - so Sally um so and then after this we
01:29 - really fire truck are you really going
01:31 - to run right behind me in the middle of
01:33 - this
01:37 - tutorial no that's not
01:41 - annoying well that was kind of annoying
01:43 - but anyways continuing on so we went
01:46 - ahead and we created a Sally object now
01:48 - as soon as we create this object our
01:50 - Constructor is going to run and all our
01:52 - Constructor does is shout out I am the
01:54 - Constructor on the screen so now we go
01:56 - ahead and type another line of code like
01:58 - see out um OMG what DF is this on my
02:04 - shoe or something stupid like that and
02:07 - end that line so let's go ahead and run
02:08 - our program so far so our object was
02:11 - created and it shouted out I am the
02:13 - Constructor automatically we didn't have
02:15 - to call a specific function it just did
02:17 - Auto automatically and then our program
02:20 - ran that said OMG WTF is this on my shoe
02:23 - so now let's go ahead and add a
02:26 - deconstructor Now to create a
02:28 - deconstructor it's as simple as this the
02:31 - name of your deconstructor is the ti day
02:34 - and that's above the tab on your
02:36 - keyboard but under the Escape it well
02:38 - that's where it is on mine if you look
02:40 - left of the one um you see that little
02:42 - squiggly sign it's called a till day I
02:44 - think at least that's what I call it so
02:46 - go ahead and type that and then type
02:48 - your class name which is Sally so
02:51 - basically your deconstructor looks the
02:53 - exact same as your Constructor except it
02:55 - has that little squiggly toaday above it
02:58 - so now let's go ahead and create the the
02:59 - body of it and again it's the exact same
03:03 - as your Constructor except it has that
03:05 - little squiggly til a right before it so
03:08 - another thing I want to point out is
03:10 - this whenever you're creating a
03:14 - Destructor it has no parameters no
03:16 - matter what you can never give it
03:18 - parameters also it never has a return
03:21 - value you can't even give it void and
03:24 - aside from that there's no deconstructor
03:26 - overloading you have one deconstructor
03:28 - and that's it you can't have different
03:30 - versions of your deconstructor so
03:32 - basically it's a PL really another fire
03:35 - truck are you serious this is going to
03:38 - run right past
03:39 - me you guys hear
03:43 - that yeah I'm just continuing on with my
03:47 - toroes and I really don't feel like
03:49 - redoing it so sorry guys so basically
03:53 - whenever your object is first created
03:55 - your Constructor is going to run and
03:57 - whenever your object is automat Ally
04:00 - deleted or you know um destroyed I mean
04:03 - that's a technical term for it your
04:05 - deconstructor is going to run so let's
04:07 - go ahead and type some code and see out
04:10 - I am the deconstructor and make sure you
04:13 - type that very wrong and then go ahead
04:16 - and end that
04:17 - line and let's go ahead and take a look
04:20 - at our main and I'll explain to you guys
04:21 - what's going
04:22 - on our first line of code we created a
04:25 - Sally object so right after it right
04:28 - around here our Constructor is going to
04:30 - get called and our Constructor shouts
04:32 - out I am the Constructor so then after
04:35 - this it goes ahead and runs the program
04:37 - OMG WTF is this on my shoe so the next
04:41 - line of code is going to be is going to
04:42 - be this excuse me now after this line of
04:45 - code is running it's going to see that
04:47 - it got to the end of the program
04:49 - whenever it gets to the end of your
04:51 - program C++ automatically destroys all
04:54 - your objects so by default automatically
04:58 - it's going to call your Constructor for
05:00 - this object right here so let's go ahead
05:03 - and build and around this and see what
05:05 - happens I'm the Constructor OMG WTF is
05:08 - this on my shoe and I am the
05:10 - deconstructor so as you can see it
05:13 - automatically called the deconstructor
05:15 - and Constructor for us so another thing
05:18 - I want to point out is when your program
05:20 - is finished running that's when your
05:22 - deconstructor is going to get called so
05:25 - again your Constructor and your
05:26 - deconstructor you don't have to
05:28 - explicitly call column like you would
05:30 - another function inside your class they
05:32 - get called automatically and again
05:34 - remember whenever you're creating your
05:36 - Constructor it's basically a duplicate
05:39 - of the Constructor except you need a
05:41 - little til a right there and unlike a
05:43 - Constructor you can't overload it it
05:46 - can't have parameters it can't have a
05:47 - return value and make sure you don't
05:49 - even put void as the return value it's
05:51 - basically a dumb
05:53 - down very simple function so that's the
05:57 - very basics of a Constructor and a
05:59 - deconstructor
06:00 - and later on I'm going to be showing you
06:01 - guys why deconstructor is useful other
06:04 - than just printing out stuff on the
06:05 - screen but for now just understand the
06:07 - concept and I'm going to go ahead and
06:10 - help these fire trucks put out a fire so
06:12 - hopefully in the next tutorial they will
06:14 - stop running past me but for now thank
06:16 - you guys for watching don't forget to
06:17 - subscribe and I'll see you guys in the
06:18 - next video

Cleaned transcript:

what's going on guys welcome to your 403 C++ tutorial and in this tutorial I'm finally going to be explaining to you guys those things called deconstructors you know whenever we created a class and it said automatically create a deconstructor or whatever and we had it unchecked well I'm going to explain to you guys what they are um when they're used and then you know when we're creating a class from now on we can understand what they mean so the first thing I want to say is a deconstructor is basically code that runs automatically upon the destruction of your object and that's a technical term for it but basically at the end of your program when all your memory is getting freed up and your program's ending and all your objects are getting destroyed and you want a less little bit of code to run that's when your deconstructor is going to run so you know as soon as you create an object The Constructor runs well as soon as it's deleted the deconstructor runs so that's basically you know when that happens so let's go ahead and first before I even start talking about a deconstructor let's go ahead and type some code into our Constructor like um C out I am the Constructor and make sure you spell it wrong and then end that line so now we can see if we go ahead in main.cpp and create come on keyboard type regular and create a Sally object so Sally um so and then after this we really fire truck are you really going to run right behind me in the middle of this tutorial no that's not annoying well that was kind of annoying but anyways continuing on so we went ahead and we created a Sally object now as soon as we create this object our Constructor is going to run and all our Constructor does is shout out I am the Constructor on the screen so now we go ahead and type another line of code like see out um OMG what DF is this on my shoe or something stupid like that and end that line so let's go ahead and run our program so far so our object was created and it shouted out I am the Constructor automatically we didn't have to call a specific function it just did Auto automatically and then our program ran that said OMG WTF is this on my shoe so now let's go ahead and add a deconstructor Now to create a deconstructor it's as simple as this the name of your deconstructor is the ti day and that's above the tab on your keyboard but under the Escape it well that's where it is on mine if you look left of the one um you see that little squiggly sign it's called a till day I think at least that's what I call it so go ahead and type that and then type your class name which is Sally so basically your deconstructor looks the exact same as your Constructor except it has that little squiggly toaday above it so now let's go ahead and create the the body of it and again it's the exact same as your Constructor except it has that little squiggly til a right before it so another thing I want to point out is this whenever you're creating a Destructor it has no parameters no matter what you can never give it parameters also it never has a return value you can't even give it void and aside from that there's no deconstructor overloading you have one deconstructor and that's it you can't have different versions of your deconstructor so basically it's a PL really another fire truck are you serious this is going to run right past me you guys hear that yeah I'm just continuing on with my toroes and I really don't feel like redoing it so sorry guys so basically whenever your object is first created your Constructor is going to run and whenever your object is automat Ally deleted or you know um destroyed I mean that's a technical term for it your deconstructor is going to run so let's go ahead and type some code and see out I am the deconstructor and make sure you type that very wrong and then go ahead and end that line and let's go ahead and take a look at our main and I'll explain to you guys what's going on our first line of code we created a Sally object so right after it right around here our Constructor is going to get called and our Constructor shouts out I am the Constructor so then after this it goes ahead and runs the program OMG WTF is this on my shoe so the next line of code is going to be is going to be this excuse me now after this line of code is running it's going to see that it got to the end of the program whenever it gets to the end of your program C++ automatically destroys all your objects so by default automatically it's going to call your Constructor for this object right here so let's go ahead and build and around this and see what happens I'm the Constructor OMG WTF is this on my shoe and I am the deconstructor so as you can see it automatically called the deconstructor and Constructor for us so another thing I want to point out is when your program is finished running that's when your deconstructor is going to get called so again your Constructor and your deconstructor you don't have to explicitly call column like you would another function inside your class they get called automatically and again remember whenever you're creating your Constructor it's basically a duplicate of the Constructor except you need a little til a right there and unlike a Constructor you can't overload it it can't have parameters it can't have a return value and make sure you don't even put void as the return value it's basically a dumb down very simple function so that's the very basics of a Constructor and a deconstructor and later on I'm going to be showing you guys why deconstructor is useful other than just printing out stuff on the screen but for now just understand the concept and I'm going to go ahead and help these fire trucks put out a fire so hopefully in the next tutorial they will stop running past me but for now thank you guys for watching don't forget to subscribe and I'll see you guys in the next video
