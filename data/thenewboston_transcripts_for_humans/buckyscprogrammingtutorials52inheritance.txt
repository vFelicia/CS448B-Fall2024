With timestamps:

00:00 - alright guys welcome to your 52nd C++
00:02 - tutorial and in this tutorial I'm going
00:04 - to be talking about something called
00:06 - inheritance now inheritance is a topic
00:09 - that confuses a lot of people but I'm
00:11 - going to be giving you guys a really
00:13 - simple explanation and showing you guys
00:15 - a really simple example of what
00:18 - inheritance is now inheritance is the
00:21 - idea that you can inherit things from
00:24 - another class for example say you have a
00:26 - class that has a couple functions in it
00:28 - and a couple variables in it and you
00:31 - wanted to make a new class that also had
00:33 - the same functions and variables in it
00:35 - well instead of you know copying them
00:38 - all and pasting them all into your new
00:39 - class you can just inherit from the
00:42 - other class and whenever you inherit
00:44 - from another class you get all the stuff
00:46 - you get all the functions and variables
00:48 - so let's go ahead and make two classes
00:51 - file new class I'm going to make one
00:53 - class named mother and this class is
00:55 - going to have a couple things in it well
00:57 - it's going to have a function in it for
00:59 - the sake of this tutorial so let's go
01:01 - ahead and create this add it to project
01:03 - and I'll press ok and now I'm going to
01:06 - create a new class called a daughter now
01:10 - what the daughter is going to do is
01:12 - inherit this stuff from the mother so go
01:14 - ahead and press create yes and okay
01:17 - so the first thing we need to do is go
01:19 - to our dot CPP copy this paste inner
01:22 - main and also go to our daughter copy
01:26 - this paste in our main and then copy all
01:30 - this and paste it and paste it so now
01:33 - all our dot CPP s look the same that's
01:35 - why I like doing all my tutorials so
01:37 - let's go ahead and our mother header and
01:39 - actually in both our header files take
01:41 - out protected and private because um I
01:45 - didn't tell you guys what those mean
01:46 - right now so let's forget about it for
01:48 - now they're actually pretty important
01:50 - when we're talking about inheritance but
01:51 - like I said in this story we'll just
01:53 - want to give you guys a really simple
01:55 - example
01:56 - so before I go on let me give you guys
01:59 - the technical terms see we're going to
02:02 - be inheriting all the stuff for a mother
02:05 - and we're going to be putting it in the
02:06 - daughter class but now the technical
02:09 - terms if you're on a test or if you're
02:11 - working for a job or something
02:12 - whenever you inherit from a class this
02:16 - main class that you're inheriting from
02:18 - is called the base class so in this
02:21 - example mother is going to be the base
02:22 - class now the stuff that does the
02:25 - inheriting the daughter that gets the
02:28 - stuff this is called the derived class
02:30 - so the base class is the class with all
02:33 - the stuff in it and the class that is
02:36 - going to get all the stuff is called the
02:37 - derived class so let's go on and start
02:41 - typing our example so let's go ahead and
02:43 - throw one function into the mother class
02:46 - and we'll just you know void say name so
02:50 - this is the Robert's family we're
02:52 - dealing with so let's go ahead and build
02:54 - this function right here right here all
02:56 - right we don't have anything in the
02:57 - constructor because the constructor is
02:59 - annoying now let's go ahead and build
03:01 - this void mother say name function and
03:07 - all this function is going to do is see
03:09 - out
03:12 - I am a Roberts because that's what my
03:16 - mom shouts all the time and she doesn't
03:17 - know how to spell so that's why I have
03:19 - to add some typos in there so now if we
03:22 - go ahead in our main CPP we can build an
03:25 - object called like mother named it mom
03:28 - and what mom can do is say name and of
03:33 - course it would say I am Roberts on the
03:38 - screen and say you wanted to build
03:41 - another object a daughter object and
03:44 - we'll name this Tina and you wanted Tina
03:47 - to have that same function because I
03:50 - mean she's Roberts - she should be able
03:52 - to say it well right now whenever we
03:53 - build it it doesn't work because Tina
03:56 - doesn't have that function only the mom
03:59 - does so saying RA I know in this case go
04:02 - ahead and copy this put in the daughter
04:04 - header then copy all this crap put it in
04:07 - the daughter CPP and it should work fine
04:09 - well yes you can do that and it'll work
04:12 - fine but I got an easier way to do
04:15 - things and that is through inheritance
04:17 - now whenever you want to use inheritance
04:20 - all you have to do is this in the header
04:23 - file whatever class you want to inherit
04:25 - the stuff from right after the class
04:28 - name put a colon and then right after
04:31 - this write the word public and then
04:34 - write the class you want to inherit from
04:35 - which is mother now we're going to be
04:37 - talking about this keyword why I put
04:39 - public right there basically it means um
04:42 - all this public stuff is going to be
04:44 - public in here but we'll be talking
04:47 - about later there's a couple of weird
04:49 - things but you know just put public for
04:51 - now so basically what I'm saying
04:54 - to C++ is this alright in my daughter
04:57 - class include all the stuff from the
05:00 - mother class so what it's going to do is
05:02 - go over to this mother class go ahead
05:05 - and grab this function right here it's
05:07 - not going to grab the constructor that's
05:08 - another silly role but it's going to
05:10 - grab any public variables and any public
05:13 - functions and right now we only have one
05:15 - public function in that same name and
05:17 - it's going to throw it inside the
05:19 - stoddard class so now this daughter
05:22 - class is in
05:23 - hairatan from the mother class so now
05:26 - check it out even though we didn't
05:28 - explicitly write that same name function
05:30 - in here it inherited it so it's there
05:33 - even though we can't see it
05:35 - so now let's say we want to take away
05:37 - this part right here and we try to run
05:39 - this we don't get any errors and now the
05:42 - daughter is able to use that same name
05:44 - function so again what inheritance is is
05:48 - this whenever you have a class and you
05:52 - want to inherit the crap from another
05:54 - class you can write a colon and then
05:57 - public and then that name of the class
05:59 - and what this does is it takes
06:01 - everything from this class and it sticks
06:04 - it in this class so this is called the
06:07 - base class and this is called the
06:09 - derived class
06:10 - whenever you inherit everything from the
06:12 - base class gets thrown in the derived
06:15 - class so now even though we can't see
06:18 - the same name function it's there so
06:21 - that way whenever we created a daughter
06:23 - object the daughter object was able to
06:26 - use the mothers functions even though it
06:29 - wasn't explicitly written in the
06:32 - documentation or dot CPP file whatever
06:34 - the heck you want to call it so that's
06:36 - why we were able to run this daughter
06:38 - object and use the same name function on
06:40 - that so that's what inheritance is it's
06:44 - basically inheriting stuff from another
06:46 - class but you know how I said that there
06:49 - are a couple weird rules like you needed
06:51 - this public thing and whenever you
06:53 - inherited it grabbed all the stuff from
06:55 - this mother class and throw into the
06:57 - daughter class well that's not exactly
06:59 - true I don't want to say I lie to you
07:01 - guys but for the sake of this tutorial I
07:03 - just wanted to make a simple arm there
07:06 - are a couple weird exceptions in
07:07 - whenever you inherit from another class
07:10 - it doesn't actually grab everything
07:12 - Aronian grabs a couple things and also
07:15 - you need this public keyword or out some
07:18 - weird stuff will happen if you try to
07:20 - use protected or private and that's what
07:22 - I'm probably going to be talking to you
07:23 - guys about in the upcoming tutorials but
07:25 - for now what you have to remember is
07:26 - this inheritance is basically grabbing
07:30 - another class and throwing all the stuff
07:32 - in
07:33 - to a derived class so this is called the
07:35 - base class this is called the derived
07:37 - class
07:38 - that's what inheritance is pretty simple
07:40 - huh you inherit this stuff from another
07:42 - class that's all it is so now that I
07:45 - talked about that we're ready to move on
07:46 - to next tutorial so thank you guys for
07:48 - watching don't forget to subscribe
07:49 - hopefully you understand the concept of
07:51 - inheritance if you don't watch the video
07:53 - again and I will see in the next
07:54 - tutorial

Cleaned transcript:

alright guys welcome to your 52nd C++ tutorial and in this tutorial I'm going to be talking about something called inheritance now inheritance is a topic that confuses a lot of people but I'm going to be giving you guys a really simple explanation and showing you guys a really simple example of what inheritance is now inheritance is the idea that you can inherit things from another class for example say you have a class that has a couple functions in it and a couple variables in it and you wanted to make a new class that also had the same functions and variables in it well instead of you know copying them all and pasting them all into your new class you can just inherit from the other class and whenever you inherit from another class you get all the stuff you get all the functions and variables so let's go ahead and make two classes file new class I'm going to make one class named mother and this class is going to have a couple things in it well it's going to have a function in it for the sake of this tutorial so let's go ahead and create this add it to project and I'll press ok and now I'm going to create a new class called a daughter now what the daughter is going to do is inherit this stuff from the mother so go ahead and press create yes and okay so the first thing we need to do is go to our dot CPP copy this paste inner main and also go to our daughter copy this paste in our main and then copy all this and paste it and paste it so now all our dot CPP s look the same that's why I like doing all my tutorials so let's go ahead and our mother header and actually in both our header files take out protected and private because um I didn't tell you guys what those mean right now so let's forget about it for now they're actually pretty important when we're talking about inheritance but like I said in this story we'll just want to give you guys a really simple example so before I go on let me give you guys the technical terms see we're going to be inheriting all the stuff for a mother and we're going to be putting it in the daughter class but now the technical terms if you're on a test or if you're working for a job or something whenever you inherit from a class this main class that you're inheriting from is called the base class so in this example mother is going to be the base class now the stuff that does the inheriting the daughter that gets the stuff this is called the derived class so the base class is the class with all the stuff in it and the class that is going to get all the stuff is called the derived class so let's go on and start typing our example so let's go ahead and throw one function into the mother class and we'll just you know void say name so this is the Robert's family we're dealing with so let's go ahead and build this function right here right here all right we don't have anything in the constructor because the constructor is annoying now let's go ahead and build this void mother say name function and all this function is going to do is see out I am a Roberts because that's what my mom shouts all the time and she doesn't know how to spell so that's why I have to add some typos in there so now if we go ahead in our main CPP we can build an object called like mother named it mom and what mom can do is say name and of course it would say I am Roberts on the screen and say you wanted to build another object a daughter object and we'll name this Tina and you wanted Tina to have that same function because I mean she's Roberts she should be able to say it well right now whenever we build it it doesn't work because Tina doesn't have that function only the mom does so saying RA I know in this case go ahead and copy this put in the daughter header then copy all this crap put it in the daughter CPP and it should work fine well yes you can do that and it'll work fine but I got an easier way to do things and that is through inheritance now whenever you want to use inheritance all you have to do is this in the header file whatever class you want to inherit the stuff from right after the class name put a colon and then right after this write the word public and then write the class you want to inherit from which is mother now we're going to be talking about this keyword why I put public right there basically it means um all this public stuff is going to be public in here but we'll be talking about later there's a couple of weird things but you know just put public for now so basically what I'm saying to C++ is this alright in my daughter class include all the stuff from the mother class so what it's going to do is go over to this mother class go ahead and grab this function right here it's not going to grab the constructor that's another silly role but it's going to grab any public variables and any public functions and right now we only have one public function in that same name and it's going to throw it inside the stoddard class so now this daughter class is in hairatan from the mother class so now check it out even though we didn't explicitly write that same name function in here it inherited it so it's there even though we can't see it so now let's say we want to take away this part right here and we try to run this we don't get any errors and now the daughter is able to use that same name function so again what inheritance is is this whenever you have a class and you want to inherit the crap from another class you can write a colon and then public and then that name of the class and what this does is it takes everything from this class and it sticks it in this class so this is called the base class and this is called the derived class whenever you inherit everything from the base class gets thrown in the derived class so now even though we can't see the same name function it's there so that way whenever we created a daughter object the daughter object was able to use the mothers functions even though it wasn't explicitly written in the documentation or dot CPP file whatever the heck you want to call it so that's why we were able to run this daughter object and use the same name function on that so that's what inheritance is it's basically inheriting stuff from another class but you know how I said that there are a couple weird rules like you needed this public thing and whenever you inherited it grabbed all the stuff from this mother class and throw into the daughter class well that's not exactly true I don't want to say I lie to you guys but for the sake of this tutorial I just wanted to make a simple arm there are a couple weird exceptions in whenever you inherit from another class it doesn't actually grab everything Aronian grabs a couple things and also you need this public keyword or out some weird stuff will happen if you try to use protected or private and that's what I'm probably going to be talking to you guys about in the upcoming tutorials but for now what you have to remember is this inheritance is basically grabbing another class and throwing all the stuff in to a derived class so this is called the base class this is called the derived class that's what inheritance is pretty simple huh you inherit this stuff from another class that's all it is so now that I talked about that we're ready to move on to next tutorial so thank you guys for watching don't forget to subscribe hopefully you understand the concept of inheritance if you don't watch the video again and I will see in the next tutorial
