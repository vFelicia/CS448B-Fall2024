With timestamps:

00:00 - what's going on guys it's Bucky and
00:01 - welcome to your 59th C++ tutorial and in
00:04 - this tutorial I'm going to be teaching
00:06 - you guys how to use function templates
00:08 - but instead of just a single parameter
00:10 - like last time we're going to be using a
00:12 - multiple parameter so let me go ahead
00:15 - and explain you guys what the heck I'm
00:16 - talking about first you know in the last
00:18 - story I taught you guys how to build
00:20 - basically a generic function to add like
00:22 - two integers together or to add two
00:25 - doubles together well in this tutorial
00:27 - we're going to be able to work with two
00:29 - different data types for example we're
00:31 - going to be able to take an integer and
00:33 - double and add those together or maybe
00:36 - you know a long and an integer and add
00:39 - those together so they don't have to be
00:41 - the same data type all the parameters we
00:43 - pass in we can work with two different
00:45 - types of data in the same function so
00:48 - we're going to set this up a little bit
00:49 - different then we have before so let's
00:51 - go ahead and first get two different
00:54 - types of data to work with so let's go
00:56 - ahead and make an integer variable X and
00:58 - set this equal to 89 or any integer you
01:01 - want and go ahead and make another you
01:03 - know double variable it really doesn't
01:05 - matter the data type as long as they're
01:07 - different so pass it in a double Y and
01:10 - set this equal to you know some fifty
01:13 - six point seven eight or something like
01:15 - that so now what we're going to be doing
01:18 - is we're going to be building a function
01:20 - to compare these two numbers and just
01:23 - return whatever number is smaller so in
01:25 - this case it would return fifty six
01:27 - point seven eight so let's go ahead and
01:30 - pass in those two numbers X and Y and
01:33 - hopefully if we build our function
01:35 - correctly it will print out the smaller
01:37 - number right on the screen so let's go
01:39 - ahead and set up this function template
01:42 - right now so like before whenever we're
01:45 - building a function template we always
01:47 - need the keyword template but we need to
01:49 - spell it correctly template just like
01:51 - that and now unlike before where we just
01:55 - had one generic class and we named it
01:57 - Buckey or something we're going to be
01:59 - working with more than one generic class
02:01 - so make sure you name your classes
02:03 - something that you know you can work
02:05 - with later on I like to just name mine
02:07 - first and second and by the way I might
02:09 - as well mention this to you guys you
02:11 - guys are going to see this a lot like
02:13 - cap
02:13 - t in capital u it's like kind of a
02:17 - programming standard to use one capital
02:19 - letter whenever you're making a template
02:21 - class but I really don't like doing that
02:23 - I like you know something a little more
02:25 - descriptive like first and class second
02:30 - um you know if you're in like a
02:32 - programming class or you're watching
02:34 - this because you forgot how to do this
02:36 - for your job or something you typically
02:38 - want to use one capital letter but
02:40 - whenever I'm programming you're just
02:43 - gonna have to deal with it so now that
02:44 - we have a template this line is pretty
02:48 - much saying this we're going to be
02:50 - working with two data types but we don't
02:52 - know what those data types are yet so
02:54 - we're going to be giving them generic
02:56 - names so first and second so whenever
03:00 - we're building our function you first
03:01 - write the return type which is first and
03:04 - now our function name was smaller and it
03:07 - took two parameters one number and we'll
03:10 - call this one a and another number and
03:13 - recall this one B in all our function
03:16 - itself does is hello and all our
03:20 - function does is it takes two numbers
03:22 - and returns whatever one's smaller and
03:25 - we can do that by writing one nifty line
03:27 - of code if a is less than B then return
03:31 - a if not return B so it's going to be
03:35 - saying all right is a less than B if it
03:38 - is return a if it's not return B so it's
03:41 - basically going to return to you the
03:43 - smaller number so now let's go ahead and
03:46 - now that our function is working
03:47 - properly let's go ahead and test this
03:49 - and make sure it works as you can see we
03:52 - compared eighty nine and fifty six point
03:55 - seven eight and it turned that double
03:57 - 56.7 a into an integer and you're saying
04:00 - all right we just compared two numbers
04:03 - so shouldn't be giving us um just 56
04:06 - point seven eight why did it chop off to
04:08 - seven eight that's because of this
04:10 - whenever we built our function template
04:13 - it pretty much saw what type of data we
04:15 - were passing in so we're saying alright
04:17 - we want to get the smaller of two
04:20 - numbers
04:21 - we want to first pass you in an integer
04:23 - 89 and then a double 56 point seven
04:27 - eight so I said all right make first in
04:30 - anywhere you see first change it to an
04:33 - integer so it said re I'm going to
04:35 - change this to int this to double I'm
04:38 - going to return an int because that was
04:41 - the first thing we passed then so since
04:44 - this return type was the first type of
04:46 - data we passed in it converted this
04:49 - double to an integer because remember
04:51 - anytime you saw first it converted it to
04:54 - an int we could have change this around
04:56 - we could have you know passed this one
05:01 - in first so it was Y X and whenever we
05:04 - did that we would get 56 point seven
05:07 - eight in that way we could have more
05:10 - precise because in this case scenario
05:12 - the first thing we'd pass then is a
05:15 - double and the second number we pass
05:18 - then was an int so whenever it's looking
05:21 - at your template wherever it sees first
05:23 - it's going to replace it with double and
05:25 - that includes the return type right here
05:27 - in the first parameter and the second
05:30 - parameter would of course be an integer
05:32 - so it will take a double and an integer
05:35 - and since it returned a double that's
05:40 - why we got back the double so basically
05:41 - what I'm saying is this whenever we're
05:45 - working with two different types of data
05:47 - you need more than one generic classes
05:50 - or pretty much placeholders basically a
05:53 - generic or excuse me basically um a
05:57 - generic class is just a variable for the
06:00 - type of data instead of the value itself
06:02 - does that make sense to you guys so
06:04 - instead of having a variable for this
06:06 - you have a variable for this simple
06:08 - enough and these variables can only be
06:11 - types of data like int double long yada
06:14 - yada yada so basically people usually
06:17 - build these templates to work with um
06:19 - you usually don't see more than three or
06:22 - four it's usually one or two but yeah
06:25 - that's basically how it works anytime
06:27 - you want to build a function template
06:28 - that takes more than one type of data
06:30 - you need to separate them into
06:32 - more than one generic classes and then
06:35 - you can use those generic classes just
06:38 - like you would any other type of data so
06:41 - hopefully you guys understand what that
06:42 - means arm again if this is just too
06:45 - confusing and you don't want to keep
06:47 - track you can go ahead and build a lot
06:49 - of overloaded functions and it's going
06:51 - to work you know just fine but if you
06:54 - want to use this it's going to save you
06:56 - a little bit of coding and you know it's
06:58 - a little more confusing to look at but
07:00 - once you got it down you know it makes
07:02 - your life a whole lot easier so thank
07:04 - you guys for watching I don't forget to
07:05 - subscribe if you have any questions just
07:07 - ask me on my forum and I'll try to
07:09 - answer them for you guys sometimes I'm
07:10 - busy but I can usually answer them for
07:12 - you guys so thank you guys for watching
07:13 - and we can subscribe and I'll see you
07:15 - guys in the next video

Cleaned transcript:

what's going on guys it's Bucky and welcome to your 59th C++ tutorial and in this tutorial I'm going to be teaching you guys how to use function templates but instead of just a single parameter like last time we're going to be using a multiple parameter so let me go ahead and explain you guys what the heck I'm talking about first you know in the last story I taught you guys how to build basically a generic function to add like two integers together or to add two doubles together well in this tutorial we're going to be able to work with two different data types for example we're going to be able to take an integer and double and add those together or maybe you know a long and an integer and add those together so they don't have to be the same data type all the parameters we pass in we can work with two different types of data in the same function so we're going to set this up a little bit different then we have before so let's go ahead and first get two different types of data to work with so let's go ahead and make an integer variable X and set this equal to 89 or any integer you want and go ahead and make another you know double variable it really doesn't matter the data type as long as they're different so pass it in a double Y and set this equal to you know some fifty six point seven eight or something like that so now what we're going to be doing is we're going to be building a function to compare these two numbers and just return whatever number is smaller so in this case it would return fifty six point seven eight so let's go ahead and pass in those two numbers X and Y and hopefully if we build our function correctly it will print out the smaller number right on the screen so let's go ahead and set up this function template right now so like before whenever we're building a function template we always need the keyword template but we need to spell it correctly template just like that and now unlike before where we just had one generic class and we named it Buckey or something we're going to be working with more than one generic class so make sure you name your classes something that you know you can work with later on I like to just name mine first and second and by the way I might as well mention this to you guys you guys are going to see this a lot like cap t in capital u it's like kind of a programming standard to use one capital letter whenever you're making a template class but I really don't like doing that I like you know something a little more descriptive like first and class second um you know if you're in like a programming class or you're watching this because you forgot how to do this for your job or something you typically want to use one capital letter but whenever I'm programming you're just gonna have to deal with it so now that we have a template this line is pretty much saying this we're going to be working with two data types but we don't know what those data types are yet so we're going to be giving them generic names so first and second so whenever we're building our function you first write the return type which is first and now our function name was smaller and it took two parameters one number and we'll call this one a and another number and recall this one B in all our function itself does is hello and all our function does is it takes two numbers and returns whatever one's smaller and we can do that by writing one nifty line of code if a is less than B then return a if not return B so it's going to be saying all right is a less than B if it is return a if it's not return B so it's basically going to return to you the smaller number so now let's go ahead and now that our function is working properly let's go ahead and test this and make sure it works as you can see we compared eighty nine and fifty six point seven eight and it turned that double 56.7 a into an integer and you're saying all right we just compared two numbers so shouldn't be giving us um just 56 point seven eight why did it chop off to seven eight that's because of this whenever we built our function template it pretty much saw what type of data we were passing in so we're saying alright we want to get the smaller of two numbers we want to first pass you in an integer 89 and then a double 56 point seven eight so I said all right make first in anywhere you see first change it to an integer so it said re I'm going to change this to int this to double I'm going to return an int because that was the first thing we passed then so since this return type was the first type of data we passed in it converted this double to an integer because remember anytime you saw first it converted it to an int we could have change this around we could have you know passed this one in first so it was Y X and whenever we did that we would get 56 point seven eight in that way we could have more precise because in this case scenario the first thing we'd pass then is a double and the second number we pass then was an int so whenever it's looking at your template wherever it sees first it's going to replace it with double and that includes the return type right here in the first parameter and the second parameter would of course be an integer so it will take a double and an integer and since it returned a double that's why we got back the double so basically what I'm saying is this whenever we're working with two different types of data you need more than one generic classes or pretty much placeholders basically a generic or excuse me basically um a generic class is just a variable for the type of data instead of the value itself does that make sense to you guys so instead of having a variable for this you have a variable for this simple enough and these variables can only be types of data like int double long yada yada yada so basically people usually build these templates to work with um you usually don't see more than three or four it's usually one or two but yeah that's basically how it works anytime you want to build a function template that takes more than one type of data you need to separate them into more than one generic classes and then you can use those generic classes just like you would any other type of data so hopefully you guys understand what that means arm again if this is just too confusing and you don't want to keep track you can go ahead and build a lot of overloaded functions and it's going to work you know just fine but if you want to use this it's going to save you a little bit of coding and you know it's a little more confusing to look at but once you got it down you know it makes your life a whole lot easier so thank you guys for watching I don't forget to subscribe if you have any questions just ask me on my forum and I'll try to answer them for you guys sometimes I'm busy but I can usually answer them for you guys so thank you guys for watching and we can subscribe and I'll see you guys in the next video
