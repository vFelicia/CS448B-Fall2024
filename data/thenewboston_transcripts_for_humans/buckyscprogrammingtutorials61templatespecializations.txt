With timestamps:

00:00 - what's going on guys welcome to your
00:02 - 61st tutorial and in this tutorial I'm
00:04 - going to be talking about something
00:05 - called template specialization
00:08 - specialization there we go might take me
00:10 - a few times to get it but basically what
00:13 - template specialization is is it's a way
00:16 - to make a class that has a different
00:19 - implementation when a specific type is
00:22 - passed into it for example if we made a
00:24 - regular old template like before we
00:26 - could pass any data type into it like
00:29 - integers uh doubles characters and it's
00:32 - going to be able to handle any of that
00:34 - data well in this tutorial I'm going to
00:36 - be showing you guys say for example you
00:39 - want to build a template to handle all
00:42 - numbers but you want it to do something
00:44 - a little different when it handled
00:45 - characters because you know let's say
00:48 - you wanted to build a class that handled
00:50 - numbers and added them together well you
00:52 - can't use all these same functions
00:53 - whenever you're adding letters together
00:55 - or else you're going to get a bunch of
00:56 - Errors so it's basically a way of
01:01 - working with a specific type of data in
01:03 - a different way than you would regular
01:05 - so let's go ahead and the first thing
01:08 - I'm going to do is build a regular
01:09 - template and I'm going to compare it to
01:11 - this new specialized template so our
01:13 - boss came up to us and he's like
01:15 - Bucky why is he talking to us and only
01:18 - using my name I'm not sure but he's a
01:20 - little weird so he's like Bucky I want
01:23 - you to build a template to handle all
01:25 - types of data however if the user passes
01:29 - in a character
01:30 - which is this one specific type of data
01:32 - I want you to work with it in a
01:34 - different kind of way so one class or
01:37 - one template is going to take integers
01:39 - doubles uh floats any type of data we
01:42 - pass into it but whenever we pass it
01:44 - into character it's going to hand it a
01:46 - little bit differently so after me
01:48 - talking for two minutes it's finally
01:50 - time to start coding so let's go ahead
01:52 - and build a regular template and this is
01:55 - named class T so remember T can be any
01:58 - type of data and I just call this class
02:01 - spunky because you know kind of in the
02:03 - spunky kind of mood did anyone ever used
02:06 - to watch Rocco's Modern Life uh what was
02:09 - that dog's name I'm pretty sure it was
02:10 - spunky but anyways uh let's go ahead and
02:12 - make a public and the only thing I'm
02:14 - going to be making in these classes is
02:16 - just a simple Constructor because I
02:18 - don't need to demonstrate a whole lot I
02:19 - just need to demonstrate the concept and
02:21 - you know not build a huge functional
02:23 - class so in order to make a Constructor
02:26 - you of course write the class name which
02:28 - is spunky and pass in any type of data
02:31 - and will name a variable X whenever we
02:33 - first create an object so all we're
02:36 - going to do is we're going to create a
02:37 - class pass it in an object and print it
02:39 - out on the screen so C out X and then go
02:42 - ahead and write something like is not a
02:46 - character because we're going to be
02:47 - passing in any type of data like a
02:49 - number and it's going to make five is
02:51 - not a character or 6.17 is not a
02:55 - character so this class is going to
02:57 - handle everything besides character
03:00 - basically so let me go ahead and make
03:01 - sure I got all my semicolons in the
03:03 - right place and let's go ahead and see a
03:05 - quick example right now so actually I'll
03:08 - wait to show you guys an example not yet
03:10 - I'll make you guys wait so this is how
03:13 - we build a basic template it can type
03:15 - take any type of data we want it to um
03:18 - integers characters floats doubles and
03:21 - it could say whatever thing we passed in
03:23 - like J is not a character four is not a
03:25 - character 8.76 is not a character and
03:28 - it's going to work fine with any type of
03:30 - data that's the beauty of templates so
03:32 - say whenever the user passes in a
03:35 - character we want it to be able to do
03:37 - something differently well that's where
03:39 - template specialization comes in and in
03:42 - order to do this go ahead and type
03:43 - template with empty parameters right
03:46 - there or empty angle brackets this is
03:49 - the line where we tell C++ we're going
03:51 - to be using template specialization and
03:54 - in the next line we're going to tell it
03:57 - what type of data this class should hand
03:59 - handle so this again we can name it the
04:02 - same class as before because the main
04:05 - implementation doesn't really change
04:07 - it's only the data type in concept and
04:10 - the class or excuse me and you write
04:13 - your class name and in between the angle
04:15 - brackets after your name you write what
04:17 - type of data should this class handle
04:20 - all right this is a special class that I
04:22 - want to handle characters characters
04:25 - only nothing to do with numbers or any
04:27 - other data type anything like that this
04:29 - class is only going to be for characters
04:31 - so again one last time the only thing
04:33 - that's really going to change is this
04:35 - line which tells C++ we're going to be
04:37 - using template specialization and this
04:40 - class that says all right since you're
04:42 - using template special specialization
04:45 - what type of data should this specialize
04:47 - in and this class is going to specialize
04:49 - in characters so let's go ahead and make
04:52 - that Constructor public and of course uh
04:56 - it's the same spunky however in your par
05:00 - after it you don't write TX because
05:02 - remember T is a generic data type since
05:05 - this class is only for characters go
05:06 - ahead and write character right there
05:09 - and now the body
05:11 - is just like before let's go ahead and
05:13 - copy this copy right there and paste it
05:16 - right there except um we can't have X is
05:19 - not a character we can write X is indeed
05:23 - oops no more explanation points to
05:25 - needed is indeed a character so
05:27 - basically how our program is going to
05:29 - work is this we're going to be creating
05:32 - objects and we're going to be creating
05:34 - objects of a bunch of different types
05:36 - integers doubles characters whenever our
05:40 - computer program comes across the
05:41 - character it's going to handle it with
05:43 - this specialized template any other type
05:46 - of data besides character is going to go
05:48 - to this generic uh template or generic
05:52 - class so you know any numeric data such
05:55 - as integers doubles floats yada yada
05:58 - yada this is going to handle it but once
06:00 - it sees it's working with a character
06:02 - it's going to handle this class right
06:04 - here so it's going to be like four is
06:05 - not a character 8.0 is not a character
06:09 - but if we throw in something like J or Z
06:11 - it's going to say Z is indeed a
06:13 - character so don't believe me well let
06:15 - me go ahead and prove it to you guys so
06:18 - the first thing I want to mention is I
06:20 - know I didn't tell you guys this but you
06:21 - can
06:23 - explicitly well let me say this whenever
06:25 - we like passed in a data type before C++
06:28 - already automatically recognize what
06:30 - type of data type that was but you can
06:33 - also do something like this um you could
06:36 - throw in your angle brackets data type
06:39 - right after the class name and this
06:40 - helps C++ out and oh great there's a
06:43 - motorcycle driving by right now and this
06:45 - help C++ out by it basically changes
06:47 - this to T or it substitutes t for the
06:50 - data type it's kind of just a you know a
06:53 - nice little hint for objective c so
06:55 - let's go ahead and make object one and
06:57 - since we're going to be working with
06:58 - integers we'll go go ahead and pass in
07:00 - seven so now let's go ahead and copy
07:03 - this save us some typing and now let's
07:06 - create two more objects so two and three
07:09 - in our next object we're a double and
07:12 - remember a double is basically something
07:14 - that you can use decimal points like
07:17 - 3154 and now for our third one let's go
07:20 - ahead and use that character and
07:21 - remember a character is just a letter so
07:25 - um Q or something like that so basically
07:28 - what's going to happen is this it's
07:30 - going to come across this sees it's
07:32 - working with integers and use this
07:34 - generic template right here when it gets
07:37 - to here is going to be working with
07:38 - doubles and it's going to use this
07:40 - generic template right here when it
07:42 - comes across this it's going to be
07:43 - working with characters and it's going
07:45 - to say hold on a second you have a
07:47 - special class right here just made for
07:50 - working with characters so on this one
07:52 - I'm going to print Q is indeed a
07:55 - character so let's go ahead and build
07:57 - and run this see if I forgot any
07:58 - semicolons and looks good so seven is
08:01 - not a character s or excuse me 3154 is
08:05 - not a character Q is indeed a character
08:09 - so as you can see these first two lines
08:11 - right here use use the generic template
08:14 - class and the last one whenever we had a
08:18 - character in there it used that
08:19 - specialized character template class so
08:23 - there you can see the beauty of
08:25 - specialized or excuse me they're called
08:27 - template specialization so uh there you
08:30 - go it's basically
08:33 - specialization with one data type in
08:35 - other words you have a different
08:37 - implementation when a specific data type
08:40 - is passed in in this case character so
08:43 - there you go I hope you understand it if
08:44 - you don't just go ahead and ask me on my
08:46 - Forum or uh leave a comment below and
08:49 - I'll try to answer it for you guys so
08:50 - thank you guys for watching don't forget
08:51 - to subscribe to my channel and I'll see
08:53 - you guys in the next video

Cleaned transcript:

what's going on guys welcome to your 61st tutorial and in this tutorial I'm going to be talking about something called template specialization specialization there we go might take me a few times to get it but basically what template specialization is is it's a way to make a class that has a different implementation when a specific type is passed into it for example if we made a regular old template like before we could pass any data type into it like integers uh doubles characters and it's going to be able to handle any of that data well in this tutorial I'm going to be showing you guys say for example you want to build a template to handle all numbers but you want it to do something a little different when it handled characters because you know let's say you wanted to build a class that handled numbers and added them together well you can't use all these same functions whenever you're adding letters together or else you're going to get a bunch of Errors so it's basically a way of working with a specific type of data in a different way than you would regular so let's go ahead and the first thing I'm going to do is build a regular template and I'm going to compare it to this new specialized template so our boss came up to us and he's like Bucky why is he talking to us and only using my name I'm not sure but he's a little weird so he's like Bucky I want you to build a template to handle all types of data however if the user passes in a character which is this one specific type of data I want you to work with it in a different kind of way so one class or one template is going to take integers doubles uh floats any type of data we pass into it but whenever we pass it into character it's going to hand it a little bit differently so after me talking for two minutes it's finally time to start coding so let's go ahead and build a regular template and this is named class T so remember T can be any type of data and I just call this class spunky because you know kind of in the spunky kind of mood did anyone ever used to watch Rocco's Modern Life uh what was that dog's name I'm pretty sure it was spunky but anyways uh let's go ahead and make a public and the only thing I'm going to be making in these classes is just a simple Constructor because I don't need to demonstrate a whole lot I just need to demonstrate the concept and you know not build a huge functional class so in order to make a Constructor you of course write the class name which is spunky and pass in any type of data and will name a variable X whenever we first create an object so all we're going to do is we're going to create a class pass it in an object and print it out on the screen so C out X and then go ahead and write something like is not a character because we're going to be passing in any type of data like a number and it's going to make five is not a character or 6.17 is not a character so this class is going to handle everything besides character basically so let me go ahead and make sure I got all my semicolons in the right place and let's go ahead and see a quick example right now so actually I'll wait to show you guys an example not yet I'll make you guys wait so this is how we build a basic template it can type take any type of data we want it to um integers characters floats doubles and it could say whatever thing we passed in like J is not a character four is not a character 8.76 is not a character and it's going to work fine with any type of data that's the beauty of templates so say whenever the user passes in a character we want it to be able to do something differently well that's where template specialization comes in and in order to do this go ahead and type template with empty parameters right there or empty angle brackets this is the line where we tell C++ we're going to be using template specialization and in the next line we're going to tell it what type of data this class should hand handle so this again we can name it the same class as before because the main implementation doesn't really change it's only the data type in concept and the class or excuse me and you write your class name and in between the angle brackets after your name you write what type of data should this class handle all right this is a special class that I want to handle characters characters only nothing to do with numbers or any other data type anything like that this class is only going to be for characters so again one last time the only thing that's really going to change is this line which tells C++ we're going to be using template specialization and this class that says all right since you're using template special specialization what type of data should this specialize in and this class is going to specialize in characters so let's go ahead and make that Constructor public and of course uh it's the same spunky however in your par after it you don't write TX because remember T is a generic data type since this class is only for characters go ahead and write character right there and now the body is just like before let's go ahead and copy this copy right there and paste it right there except um we can't have X is not a character we can write X is indeed oops no more explanation points to needed is indeed a character so basically how our program is going to work is this we're going to be creating objects and we're going to be creating objects of a bunch of different types integers doubles characters whenever our computer program comes across the character it's going to handle it with this specialized template any other type of data besides character is going to go to this generic uh template or generic class so you know any numeric data such as integers doubles floats yada yada yada this is going to handle it but once it sees it's working with a character it's going to handle this class right here so it's going to be like four is not a character 8.0 is not a character but if we throw in something like J or Z it's going to say Z is indeed a character so don't believe me well let me go ahead and prove it to you guys so the first thing I want to mention is I know I didn't tell you guys this but you can explicitly well let me say this whenever we like passed in a data type before C++ already automatically recognize what type of data type that was but you can also do something like this um you could throw in your angle brackets data type right after the class name and this helps C++ out and oh great there's a motorcycle driving by right now and this help C++ out by it basically changes this to T or it substitutes t for the data type it's kind of just a you know a nice little hint for objective c so let's go ahead and make object one and since we're going to be working with integers we'll go go ahead and pass in seven so now let's go ahead and copy this save us some typing and now let's create two more objects so two and three in our next object we're a double and remember a double is basically something that you can use decimal points like 3154 and now for our third one let's go ahead and use that character and remember a character is just a letter so um Q or something like that so basically what's going to happen is this it's going to come across this sees it's working with integers and use this generic template right here when it gets to here is going to be working with doubles and it's going to use this generic template right here when it comes across this it's going to be working with characters and it's going to say hold on a second you have a special class right here just made for working with characters so on this one I'm going to print Q is indeed a character so let's go ahead and build and run this see if I forgot any semicolons and looks good so seven is not a character s or excuse me 3154 is not a character Q is indeed a character so as you can see these first two lines right here use use the generic template class and the last one whenever we had a character in there it used that specialized character template class so there you can see the beauty of specialized or excuse me they're called template specialization so uh there you go it's basically specialization with one data type in other words you have a different implementation when a specific data type is passed in in this case character so there you go I hope you understand it if you don't just go ahead and ask me on my Forum or uh leave a comment below and I'll try to answer it for you guys so thank you guys for watching don't forget to subscribe to my channel and I'll see you guys in the next video
