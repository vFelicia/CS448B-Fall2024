With timestamps:

00:00 - and so we know that works so we can go
00:01 - ahead and get rid of that now the
00:03 - properties we need to give the drop of a
00:05 - list are like I was attempting to do
00:09 - before the hover class and the hover
00:12 - class is going to like I said change the
00:15 - border of this because we've specified a
00:17 - border class inside of our styled CSS
00:21 - file and that's just going to be border
00:23 - then no need to add the dot as you
00:26 - usually would think to do so so now when
00:28 - we have an element over this the border
00:31 - changes to two pixels as opposed to one
00:34 - so this just ensures that user knows yep
00:37 - that's a that's a horrible that okay so
00:42 - now what we want to do is we want to
00:45 - allow only a specific set of elements so
00:51 - let's just say you had this list
00:52 - embedded on a lot of other content in
00:54 - your page the may or may not be
00:57 - draggable if you did have other
00:59 - draggable elements you only want this
01:00 - particular list here to be allowed to be
01:04 - dragged in here so all li elements
01:06 - draggable inside of this box so you can
01:09 - either specify a general set or a
01:11 - particular class so what I'm going to do
01:14 - is I'm going to only accept Li and this
01:17 - means that if we have any other
01:18 - draggable objects they won't be allowed
01:20 - to be dragged inside of this box so
01:22 - that's extremely important as well we
01:24 - only want this predefined list to be
01:27 - able to be dragged in there in actual
01:29 - fact what we could do is we could which
01:32 - we should have done is give these a
01:34 - class so item and it's a class of item
01:39 - and this a class again of item and now
01:45 - what we could do is we could change this
01:46 - except to sorry item and now this class
01:49 - here will only be allowed inside of this
01:52 - div area so you can see that it still is
01:55 - not allowing us there that's because we
01:58 - need to specify a dot because we're
02:00 - referencing a class on the page so yet
02:03 - so now that when we drag it over it's
02:05 - allowed but any other draggable elements
02:07 - that don't belong to the class item
02:10 - won't be allowed so that's extremely
02:12 - important as
02:13 - well okay so now that we've done this we
02:16 - need to create some callback events
02:20 - based on events under this droppable so
02:24 - what we want to do is we want to create
02:26 - a drop function when something has been
02:30 - dropped so we come a separate I'm going
02:32 - to come down a little bit here to make
02:33 - this a bit neater and I'm going to
02:35 - specify a drop event here now the drop
02:38 - event is going to be a function so we
02:40 - create a function as we normally would
02:41 - and the contents are going to go in here
02:44 - so let me just go ahead and alert
02:49 - dropped again so that works the same way
02:52 - as the example we looked at previously
02:53 - where when we drop it says dropped but
02:56 - this time when we actually drop in we
02:58 - want to take the text associated with
03:01 - the current element we've dragged and
03:03 - append it into this list so let's leave
03:07 - this part for now now inside draggable
03:10 - when we actually when we actually go
03:14 - ahead and start the dragging we want to
03:16 - set a variable with the text associated
03:19 - with that element so hopefully that
03:21 - makes sense if not I'm going to go ahead
03:23 - and do that now
03:24 - I'm going to come and separate that and
03:25 - come down and inside here I'm going to
03:28 - say start so I'm using the start event
03:30 - and this is obviously again any function
03:34 - this time inside here I want to set a
03:36 - variable called contents equal to this
03:40 - meaning the currently dragged element so
03:43 - if I was dragging soya milk contents
03:46 - would then equal soya milk if I was
03:48 - dragging bread contents would then equal
03:51 - bread and so on with water and any other
03:54 - elements so this dot
03:57 - which takes the text in between the Li
04:00 - tag there so content will now equal the
04:04 - currently dragged element so the
04:05 - draggable element once it starts we have
04:08 - this variable called contents with the
04:10 - name of it so then what we can do inside
04:13 - of our droppable list under our drop
04:15 - event we can actually specify what we
04:18 - want to append into this list so for
04:21 - example or not really for example what
04:24 - we're actually going to be doing we're
04:25 - going to be appending to list so list
04:27 - dot append and we want to append
04:30 - contents then what we want to do is just
04:33 - append a break on to that contents as
04:36 - well and then we've got a line break
04:38 - after each one so now what happens is as
04:41 - we drag the element it's released and
04:44 - the contents of that is applied into
04:46 - here so we can take a look at this at a
04:49 - slightly you know lesser working level
04:54 - and we can go ahead and in here now we
04:58 - can just go ahead and alert content so
05:03 - once something is dropped in we alert
05:05 - the name of that so you can see it
05:07 - working sort of more more purely as
05:09 - opposed to appending it so once we've
05:12 - dragged something we grab the content
05:14 - and apply it once we've dropped it into
05:17 - this list so again let's change that
05:19 - back to where it was okay so with the
05:25 - way this has been done we're picking up
05:27 - all the elements and we're making them
05:29 - draggable we're only allowing elements
05:34 - or li elements or any element with the
05:37 - class item so it's extremely easy for us
05:41 - to actually just go ahead and create a
05:43 - new item as long as the class is still
05:48 - equal to item we can go ahead and create
05:51 - a new item
05:55 - for example flour and we can come back
05:59 - and we've got this new flour element
06:01 - which we can now drag because it is an
06:03 - Li element and we can still append it to
06:06 - this list so the you know the list
06:10 - really is endless you can add and append
06:13 - or create as many li elements as you as
06:16 - you wish and then these will add to the
06:19 - list obviously we've got some styling
06:21 - issues there but we could go ahead and
06:25 - just change our style and we can say
06:28 - overflow:auto and as we add items to the
06:33 - list that would then just create scroll
06:37 - bars for us so some CSS styling there
06:40 - and then we have a scrollable list so
06:43 - obviously in practice this isn't great
06:46 - because if we were to add soya milk for
06:48 - example accidentally twice we may want
06:50 - it to then say soy milk times two we
06:53 - might also want to be able to remove an
06:55 - item for example there are ways you can
06:58 - do this but for now this is just a short
06:59 - example on dragging and dropping lists

Cleaned transcript:

and so we know that works so we can go ahead and get rid of that now the properties we need to give the drop of a list are like I was attempting to do before the hover class and the hover class is going to like I said change the border of this because we've specified a border class inside of our styled CSS file and that's just going to be border then no need to add the dot as you usually would think to do so so now when we have an element over this the border changes to two pixels as opposed to one so this just ensures that user knows yep that's a that's a horrible that okay so now what we want to do is we want to allow only a specific set of elements so let's just say you had this list embedded on a lot of other content in your page the may or may not be draggable if you did have other draggable elements you only want this particular list here to be allowed to be dragged in here so all li elements draggable inside of this box so you can either specify a general set or a particular class so what I'm going to do is I'm going to only accept Li and this means that if we have any other draggable objects they won't be allowed to be dragged inside of this box so that's extremely important as well we only want this predefined list to be able to be dragged in there in actual fact what we could do is we could which we should have done is give these a class so item and it's a class of item and this a class again of item and now what we could do is we could change this except to sorry item and now this class here will only be allowed inside of this div area so you can see that it still is not allowing us there that's because we need to specify a dot because we're referencing a class on the page so yet so now that when we drag it over it's allowed but any other draggable elements that don't belong to the class item won't be allowed so that's extremely important as well okay so now that we've done this we need to create some callback events based on events under this droppable so what we want to do is we want to create a drop function when something has been dropped so we come a separate I'm going to come down a little bit here to make this a bit neater and I'm going to specify a drop event here now the drop event is going to be a function so we create a function as we normally would and the contents are going to go in here so let me just go ahead and alert dropped again so that works the same way as the example we looked at previously where when we drop it says dropped but this time when we actually drop in we want to take the text associated with the current element we've dragged and append it into this list so let's leave this part for now now inside draggable when we actually when we actually go ahead and start the dragging we want to set a variable with the text associated with that element so hopefully that makes sense if not I'm going to go ahead and do that now I'm going to come and separate that and come down and inside here I'm going to say start so I'm using the start event and this is obviously again any function this time inside here I want to set a variable called contents equal to this meaning the currently dragged element so if I was dragging soya milk contents would then equal soya milk if I was dragging bread contents would then equal bread and so on with water and any other elements so this dot which takes the text in between the Li tag there so content will now equal the currently dragged element so the draggable element once it starts we have this variable called contents with the name of it so then what we can do inside of our droppable list under our drop event we can actually specify what we want to append into this list so for example or not really for example what we're actually going to be doing we're going to be appending to list so list dot append and we want to append contents then what we want to do is just append a break on to that contents as well and then we've got a line break after each one so now what happens is as we drag the element it's released and the contents of that is applied into here so we can take a look at this at a slightly you know lesser working level and we can go ahead and in here now we can just go ahead and alert content so once something is dropped in we alert the name of that so you can see it working sort of more more purely as opposed to appending it so once we've dragged something we grab the content and apply it once we've dropped it into this list so again let's change that back to where it was okay so with the way this has been done we're picking up all the elements and we're making them draggable we're only allowing elements or li elements or any element with the class item so it's extremely easy for us to actually just go ahead and create a new item as long as the class is still equal to item we can go ahead and create a new item for example flour and we can come back and we've got this new flour element which we can now drag because it is an Li element and we can still append it to this list so the you know the list really is endless you can add and append or create as many li elements as you as you wish and then these will add to the list obviously we've got some styling issues there but we could go ahead and just change our style and we can say overflowauto and as we add items to the list that would then just create scroll bars for us so some CSS styling there and then we have a scrollable list so obviously in practice this isn't great because if we were to add soya milk for example accidentally twice we may want it to then say soy milk times two we might also want to be able to remove an item for example there are ways you can do this but for now this is just a short example on dragging and dropping lists
