With timestamps:

00:00 - alrighty everybody welcome back to
00:02 - another video and in this one we are
00:04 - going to be getting our hands dirty
00:06 - getting started with recharts which is a
00:09 - pretty cool charting library for react
00:10 - and more specifically we're going to be
00:13 - building this type of Stack to bar chart
00:16 - and we're going to be integrating it
00:18 - into a little trading simulator app I
00:20 - build out it's a pretty cool app to well
00:23 - it generates lots of data that we can
00:25 - play with at least so yeah all this is
00:27 - kind of of course inspired from this
00:29 - conversation we were having in the last
00:31 - video where Tajay mentioned he was in
00:34 - data analytics and then some other
00:37 - people Paul specifically uh suggested
00:40 - some features that we could use for
00:43 - excuse me the university app so that's
00:45 - kind of the plan and I know also that I
00:48 - said I was going to be working on the
00:49 - University app in this tutorial but what
00:52 - I want to do is first Implement that
00:55 - chart here I'll go ahead and make sure
00:56 - that we installed the library properly
00:58 - and set up a simple chart right here
01:00 - just to pretty much build out a proof of
01:03 - concept to say tnbos can support this
01:05 - chart and then from there we can go
01:08 - ahead and probably have uh I don't know
01:11 - if we'll use this style but some more of
01:13 - these charts right here we'll use it as
01:15 - like a dashboard for the University
01:16 - feature but for right now we'll just go
01:19 - ahead and get started with some baby
01:20 - steps so I already got a new Branch let
01:23 - me just go ahead and do npm install
01:25 - recharts
01:28 - plural that is
01:31 - all right that looks good to go now
01:34 - after this what I'm gonna do is I'm
01:37 - going to be working on my trade app and
01:40 - I'm just going to create a new component
01:42 - for this and actually just named it
01:43 - stacked bar chart
01:45 - I might want to change that a little bit
01:47 - later on but for now it'll be good
01:51 - all right so this is gonna have us
01:55 - actually I don't think we're gonna need
01:57 - to style anything so let me just go
01:59 - ahead and create
02:00 - components
02:04 - and for the name I'll just name it that
02:10 - is terminal doing I am
02:13 - tidied this up a little bit all right
02:16 - so right now we just got
02:18 - basically a div that says stack bar
02:20 - chart in it and then I'm going to be
02:23 - putting this right above here we'll say
02:26 - underneath this order setting so this is
02:30 - the orders page
02:33 - so in that case Pages orders all right
02:41 - so let me just import this in render it
02:43 - right now
02:45 - so it is called
02:48 - stacked bar chart talk about church
02:51 - and all right so I'll stick it right
02:54 - under the page header
02:59 - all right let me make sure you don't got
03:01 - no errors and
03:04 - okay yeah I need to restart it probably
03:08 - all right
03:13 - and actually this is the error right
03:15 - here
03:16 - Styles file
03:18 - let me just convert that to a div
03:21 - because we're going to be replacing that
03:23 - in like half a second anyways
03:28 - and all right we have this component
03:31 - rendering right here so we'll go ahead
03:33 - and adjust the positioning and
03:35 - everything but uh right now just want to
03:37 - get the foundation structure now for the
03:41 - Stacked bar chart what I'm actually
03:42 - going to do is just pretty much steal
03:44 - this uh boilerplate code
03:47 - so for this
03:54 - start with all this data
03:57 - I need to import those I don't believe
04:05 - all right so this data is going to have
04:08 - to clean up that later and now
04:11 - let's copy this responsive container
04:13 - which is going to be the parent for
04:15 - everything
04:18 - and let me just do this return it
04:22 - that's
04:24 - and first of all I'd like to have my
04:26 - attributes
04:28 - sorted alphabetically I also want to
04:30 - take this class name which we need
04:33 - for those style components and just pass
04:36 - it through to the parents
04:38 - margin we don't need to set any of this
04:42 - let me do some cleanup right here
04:46 - all right not going to set margin there
04:48 - because we want to do that from CSS we
04:50 - don't need this anymore
04:53 - and then our data is
04:57 - pretty this up
05:04 - optimized by any ports and all right so
05:07 - getting some issues right here and this
05:09 - is just because the way I have eslint
05:11 - set up
05:12 - um these Keys need to be sorted so I
05:15 - just have to go and sort each of these
05:19 - and actually let me not even do that
05:21 - because I'm going to be replacing all
05:23 - this dummy data
05:26 - all right so
05:28 - here let me make sure nothing's broken
05:30 - so far
05:33 - all right so it's no longer displaying
05:37 - and I think that I know why and that's
05:40 - because with a responsive container I
05:42 - only want one of these to be
05:45 - um relative so
05:48 - we'll say height 260 with equals 100 so
05:51 - yeah with a responsive container one of
05:54 - the props should be a pretty much a
05:56 - static amount in pixels and then the
05:58 - other one should be a percentage string
06:00 - and hopefully if I'm correct yep all
06:03 - right so now we got a displaying right
06:05 - here but what I want to do is right now
06:09 - this is taking up
06:11 - um the 100 of the entire width I only
06:14 - want it to take up well maybe 100 but
06:17 - I'm thinking about 80 might be good and
06:20 - then kind of Center aligned here and
06:22 - also I want to add a bit of spacing
06:23 - between this top order card
06:26 - and then pretty much just chart right
06:28 - here
06:29 - so in order to accomplish that what I'm
06:33 - going to do is
06:35 - on my orders where I'm importing this
06:38 - stacked bar chart
06:40 - I am instead going to import it from the
06:42 - order Styles file and instead of Stack
06:45 - bar chart I'm going to import it as u in
06:47 - other words unstyled stacked bar chart
06:50 - and then
06:52 - I am just going to say that
06:54 - the stack the bar chart is a styled
06:57 - version
06:59 - of this on
07:01 - styled stack the bar chart
07:03 - and
07:05 - four of this what do I want to do to it
07:08 - specifically well actually the only
07:10 - thing that I'm going to do is to this in
07:12 - this div like the properties I'm going
07:15 - to override directly even though I want
07:17 - to adjust the position I'm not going to
07:18 - do that quite yet what I'm going to do
07:21 - is go and say font size is equal to 12
07:24 - pixels
07:26 - and by the way to actually render this
07:28 - on the screen instead of rendering it
07:34 - from here which is the component being
07:37 - imported we want to render the styled
07:39 - version of that which comes from our
07:41 - Styles files since we're importing
07:43 - everything is s right here
07:46 - so any who we should now render our
07:48 - custom version which should have 12
07:50 - pixels and yes the uh
07:53 - the font size can couldn't think of the
07:56 - word there for a second but the font
07:58 - size did increase to 12 pixels looking
08:00 - good all right so the reason I said even
08:04 - though I want to add a little margin
08:05 - bottom to that chart to get some space
08:08 - between this and this card right here I
08:12 - want to do it inside a container
08:15 - because that's going to give me my Flex
08:17 - Behavior I want
08:19 - and let me save this uh stack the bar
08:23 - chart container
08:25 - and the way I'm going to render this is
08:27 - pretty much like this
08:34 - stack bar cart
08:37 - stacked bar chart container if you can
08:40 - say that tongue twister then that's what
08:43 - I'm going to be having or excuse me
08:46 - treating is the parent of this stacked
08:47 - bar chart and for this I of course want
08:51 - to display it as a flex and I'll just
08:53 - say justify content Center and that's
08:56 - going to Center align it horizontally
08:57 - and then for this this is where I'm
09:01 - going to stick the margin bottom of 24
09:03 - pixels
09:05 - see how this looks all right looking
09:07 - pretty good see we've got a little bit
09:09 - of space right here
09:10 - actually I wonder let me think about
09:12 - this
09:15 - I don't even think I need this since
09:16 - it's already responsive
09:19 - and just using the full width anyways
09:22 - all right so that should be good so now
09:26 - let's go ahead and take a closer look at
09:28 - this
09:29 - these uh charting elements right here
09:31 - and figure out what's going on so
09:33 - responsive container we already know
09:35 - what that does it's pretty much the
09:36 - parent container for everything give it
09:38 - a static height and then a dynamic width
09:41 - and then that's going to give you this
09:42 - Behavior
09:43 - very much that cool responsive Behavior
09:47 - looking good
09:49 - and then the bar chart of course uh this
09:52 - is pretty much the component that we
09:54 - want to create all of the settings quote
09:57 - unquote are going to be children
09:59 - components that go right inside there
10:01 - but for the bar chart we just need to
10:03 - give it data and for us this is going to
10:06 - be a custom array basically like an
10:09 - array of whatever statistics you want on
10:11 - display of course you know these are the
10:13 - actually we don't even need these
10:17 - data heightened width let me just make
10:19 - sure
10:20 - yeah since we're using a responsive
10:22 - container we don't need those attributes
10:24 - and all right so this uh Cartesian grid
10:27 - right here this is that background grid
10:29 - you see uh I'll stop however on over but
10:32 - you see that little dotted grid right
10:34 - here now the first number here you can
10:38 - kind of just think of this as how I
10:40 - think of it the stroke Dash or eighth is
10:42 - three three is the length of the lines
10:44 - and then this other three is the length
10:46 - of the gaps and I'll kind of show you
10:48 - what I mean so I'm going to increase the
10:51 - first one which should increase the
10:52 - length of the line and you see you have
10:55 - to kind of look hopefully you can notice
10:56 - on YouTube but the grade lines uh got a
10:59 - little bit bigger and of course you can
11:02 - probably see what's going to happen but
11:04 - you know I gotta demonstrate it anyways
11:07 - my OCD kicking in and there you go you
11:10 - see that there is a more of a gap now
11:12 - than the line itself
11:15 - so let me change that back I actually
11:17 - like how it is by default off the
11:20 - template33 now this x-axis right here
11:23 - now for the data key this is of course
11:25 - going to be the key of the data that you
11:28 - want to use on the x-axis and since we
11:31 - have a name that was the little sample
11:33 - there you see that the name property is
11:36 - going to be displayed down there for us
11:38 - we're actually going to use
11:40 - um dates and then we're going to have
11:43 - like the last seven days we'll display
11:44 - and then we'll have a stacked bar chart
11:46 - where we'll have both the number of
11:49 - filled orders and the number of cancel
11:51 - orders so yeah that's the story behind
11:54 - that
11:55 - and now for the y-axis this is just
11:58 - saying that we want a y-axis so you see
12:01 - that we didn't specify anything that's
12:03 - because
12:04 - the values are derived from the actual
12:06 - data so we don't need to pass in any
12:08 - attributes however if we just remove
12:11 - that component completely then we
12:13 - wouldn't even have these values right
12:14 - here so to show you what I'm talking
12:16 - about let me just remove x-axis or
12:18 - excuse me y-axis
12:20 - and you see that those values disappear
12:22 - but I actually like having those so I'm
12:24 - going to comment that pack in now for
12:26 - this tool tip in the legend components
12:29 - right here that is saying to for the
12:33 - tooltip you see that whenever I hover
12:34 - over this then actually let me add
12:37 - another
12:42 - a couple columns real quick
12:46 - all right so whenever I hover over this
12:49 - you see that this little tool tip pops
12:51 - up right here that's what this is and
12:53 - that Legend component is just saying to
12:55 - display these little like a guide down
12:58 - here
12:59 - and then last but not least we have
13:02 - these bars
13:04 - and These Bars of course you know what
13:07 - those are the actual bars in the chart
13:08 - uh the data key is the key for whatever
13:12 - data
13:13 - I don't know what PV and UV stands for
13:15 - in this example but what we will have is
13:18 - something like filled and canceled
13:22 - however I will type it properly
13:25 - and then these or excuse me the stack ID
13:28 - so if two bars have the same stack ID
13:32 - then they're going to appear on top of
13:33 - each other and I'll show you what this
13:35 - means by this purple in this green you
13:37 - see how they're just stacked on top of
13:39 - each other now if they have different
13:40 - stack IDs then they'll just appear side
13:43 - by side
13:44 - so let me go ahead and change this one
13:47 - to B
13:50 - you see just spear side by side there
13:52 - you go now let me go ahead and now that
13:57 - we kind of understand everything
13:59 - uh what do I want to do first
14:02 - so the first thing I want to do is
14:03 - actually change the color
14:06 - of these
14:09 - because what I want these to be is like
14:13 - you see these filled orders in these
14:14 - canceled orders and these badges already
14:17 - have a standard color
14:19 - and I already have it as a cheat sheet
14:21 - on the right hand side of my screen
14:22 - however if you can uh well let me
14:26 - actually show you this batch component
14:28 - so in the component badge under my
14:30 - Styles you see everything is
14:32 - embarrassingly hard coded in but uh this
14:35 - is where I'm getting the colors from I
14:36 - definitely need to pull these out into a
14:38 - more standardized color theme but uh
14:40 - yeah just been lazy I guess but anyways
14:43 - now what we can actually do is start
14:46 - prepping this for the data that we want
14:48 - so what I like to do is kind of just
14:52 - start here like what's the ideal data
14:54 - that I'm going to be passing in and
14:56 - again like I said each bar is going to
14:59 - be a certain day and that day is going
15:01 - to have
15:02 - um pretty much display the number of
15:04 - filled orders and canceled orders on top
15:06 - of it
15:08 - so I'll have a count for the canceled
15:10 - orders for that day and I'm just adding
15:12 - sample data right here so I'll say one
15:15 - and for the created date so this is
15:20 - I don't know exactly what format we are
15:23 - going to be using but I'll say Jan 8
15:26 - uh 2020 there you go
15:30 - she don't even actually it's February
15:32 - I'm only off by like a month all right
15:34 - filled uh five and yeah it's pretty much
15:38 - the format so now let me just go ahead
15:43 - and get five of these just to make sure
15:45 - that it looks alright so first of all
15:48 - nine
15:49 - 10 11 12.
15:54 - and let me see two ten
15:58 - I like having realistic data and uh I
16:02 - don't know starting with realistic data
16:04 - instead of like adjusting the litter
16:05 - just always saves me time and then I'll
16:08 - do like a 3 15 a lot of order or 13 that
16:12 - looks good too and 214.
16:16 - okay so now that we change this
16:20 - we also need to change a couple keys
16:22 - right here so the x-axis uh pretty much
16:25 - what each of your bars are
16:27 - it's just going to be its created date
16:30 - and then for the first bar I'm just
16:32 - going to say that's going to be the
16:34 - filled one
16:36 - again this should be my green color and
16:38 - then for the canceled
16:41 - this is my red
16:44 - let's see how that looking all right
16:46 - something like this
16:47 - so these are my orders each day and
16:52 - it displays five now I'm just go ahead
16:56 - and add two more
16:58 - cl7 looks
17:00 - because I think I want to display
17:08 - I think I want to display the last seven
17:10 - days
17:11 - all right I like the way that looks
17:14 - full dates yeah this looks pretty good
17:18 - all right so again like I said what I
17:21 - like to do is kind of mock everything
17:22 - out with sample data and then after that
17:25 - I'll go ahead and then write a function
17:28 - uh we'll probably use memo for this and
17:32 - it effectively is just going to return
17:33 - this exact shape of data so on that note
17:37 - let me actually go ahead and pass the
17:40 - order list
17:43 - into this component I already calculated
17:45 - what list of orders should be displaying
17:47 - on that page and
17:50 - since this is a decently heavy operation
17:53 - iterating through a bunch of orders at
17:54 - least then I don't want to have to
17:56 - recalculate it I don't want to stick it
17:58 - in a hook or anything so I'll just pass
17:59 - it down and for this I need to accept it
18:02 - so I'll make
18:04 - uh
18:08 - stack the bar chart props this is gonna
18:11 - take our order list just keep a name the
18:14 - same thing
18:15 - and then for this
18:19 - type it out
18:20 - let me just
18:25 - import some things that I need uh let's
18:28 - see resolutions
18:31 - you need those
18:39 - and let's see what else
18:45 - all right this should
18:47 - good now this order list
18:50 - this is just a list of orders
18:54 - and need to acceptance here
18:59 - past that bad boy down so it can be used
19:03 - all right so now that it accepts that
19:06 - order list
19:09 - grab it here and we're yet
19:13 - all right
19:14 - so now the order component which or
19:17 - excuse me the orders page
19:20 - is passing in the orders list
19:24 - to that stacked bar component so what we
19:26 - can do on that orders list and by the
19:28 - way the orders list is just a list of
19:30 - all of these all of these orders that
19:33 - are pretty much in the section right
19:35 - here
19:36 - now before we hop into any more code let
19:38 - me actually go ahead and show you
19:40 - something so I am you aren't going to
19:43 - see this but I'm on my MacBook right
19:46 - here and I'm just going to go ahead and
19:48 - first make a simple order and it'll just
19:52 - be a sample one I'm going to hit place
19:53 - order now
19:55 - and check out what happens so what the
19:57 - system does is it goes ahead and a bunch
20:00 - of stuff's automated it goes ahead and
20:01 - fills the order and everything is smooth
20:04 - sailing now the reason I want to show
20:06 - you that is because next up I want to
20:09 - show you some edge cases where if
20:11 - something goes wrong in that process so
20:13 - anyways what happens in this process is
20:16 - that these two devices are working
20:18 - together kind of to say like your turn
20:21 - okay I'm done now your turn and
20:23 - throughout this process it creates this
20:25 - completed order object now there's also
20:28 - some situations where say one device
20:30 - shuts off in the middle of that process
20:32 - then in that case I just kind of like
20:35 - deferred it to require human
20:37 - intervention and in the code I call this
20:40 - a resolution so now with that being said
20:43 - on my MacBook
20:46 - all right I probably should have had
20:48 - this page up already but what I'm going
20:50 - to do is I'm going to manually comment
20:53 - out one of the lines to uh that's in the
20:57 - middle of the order process I basically
20:58 - just want to jam up this pipeline
21:01 - and now I'm gonna Place another order
21:06 - wait for it wait for it okay
21:11 - now check it out so this is the order I
21:14 - just placed right here and it says a
21:16 - waiting payment because this is the line
21:18 - that I canceled out so the payment for
21:21 - my MacBook which is the other device not
21:24 - the one you're seeing the screen
21:25 - recording of but that payment is never
21:28 - going to get sent so what's going to
21:29 - happen in this case is that once this
21:32 - payment time and I I definitely should
21:34 - have reduced it I'm probably gonna have
21:36 - to pause the video so we don't have to
21:38 - stare at this for 10 minutes but either
21:39 - way once this expires then it's going to
21:43 - say hey uh there wasn't any payment
21:45 - received and then it's going to require
21:47 - a resolution and that's the state I want
21:50 - to show you and this is probably going
21:51 - to make sense like in one minute when
21:53 - you see what this is actually doing but
21:56 - for now I also want to
22:00 - just make one more order that's going to
22:03 - need to be resolved and the reason is
22:05 - once you have this resolution object
22:07 - you're going to have a choice of do you
22:09 - want to fill their order still or do you
22:10 - want to cancel it and I want to have two
22:13 - of these orders because I want to just
22:15 - test filling one and canceling one but
22:17 - anyways I'm gonna wait
22:19 - until these expire and then I'll uh
22:23 - start the video again
22:26 - you know I can probably just write this
22:27 - function while we're waiting
22:30 - all right so yeah this data object right
22:34 - here this was all that demo data uh we
22:37 - essentially want to use use memo to
22:40 - replace all this but I'll keep it
22:42 - commented out since we already know what
22:45 - the keys are going to be named
22:47 - so I'll say well first of all
23:01 - right so we're going to be getting the
23:03 - resolution objects which well you all
23:06 - don't know what they look like yet but
23:08 - you will whenever that timer expires and
23:10 - then for that data I'm just going to say
23:13 - constata equals use memo
23:20 - and what this is gonna do is it's going
23:23 - to use a reduce function and
23:25 - all right so let me think how I want to
23:27 - do this so
23:29 - I don't want to have to iterate through
23:31 - it any more than one time so let me go
23:34 - ahead uh iterate through each of these
23:37 - orders and then I'm going to stick each
23:39 - order and basically their day bucket so
23:43 - like if I had five orders today then
23:45 - those five orders are going under their
23:47 - own bucket and by bucket I just mean uh
23:49 - an object or an array but that's how
23:52 - I'll separate them
23:54 - and actually you know what
23:56 - I can build this thing even easier
23:59 - because all I have to do
24:02 - is for each day
24:05 - as I iterate over that order I can
24:07 - either move it in fill it or canceled or
24:10 - just ignore it if it is neither of those
24:13 - statuses and by the way I know a lot of
24:17 - new information being thrown at you but
24:19 - 99 of the orders the way I wrote this
24:21 - app are going to be either filled or
24:24 - canceled it's just that while the order
24:26 - process is going on the order status may
24:29 - be in like this weird like pending
24:30 - phrase or waiting for something but um
24:34 - yeah as long as you don't have it we're
24:37 - pretty much just uh finding all the
24:38 - orders that are not currently in
24:40 - progress I guess that's all I'm trying
24:42 - to say
24:42 - so what I'm going to do is just uh build
24:45 - this dynamically
24:47 - and I'll show you how to do this so
24:52 - all right so this is going to be
24:53 - orderless and then I'm just going to
24:55 - reduce
24:56 - and I'm going to reduce I'll say
24:59 - previous value
25:01 - I need to type this out so the type of
25:04 - this I'll just put any although this is
25:07 - going to be this shape an array of these
25:12 - type of objects
25:13 - uh and the current value so since we're
25:17 - iterating over orders this is going to
25:19 - be order
25:21 - and all right
25:25 - reduce
25:26 - and we're going to be building an array
25:34 - and let me just go ahead and return
25:38 - because my IDE is kind of annoying if I
25:40 - don't have a return statement in there
25:43 - all right so anyways when iterating over
25:45 - this order list what do I want to do
25:47 - first well I'm going to create
25:50 - this key first because
25:55 - all right so I'll create this key and
25:57 - then I'm going to create an object Key
25:58 - by it as like a mini uh lookup mechanism
26:03 - and then that way I don't have to find
26:05 - that item in the array each time and
26:08 - then when I return the results I'll just
26:10 - get the values of this since it's going
26:12 - to be keyed by a string and the values
26:15 - are really all I care about so anyways
26:17 - uh the const
26:20 - created dates this is going to be equal
26:23 - to a new date
26:26 - and the reason that I need this is
26:28 - because on the order object the dates
26:29 - are the string but I actually want to
26:32 - convert it to a date object because I
26:34 - need a format this date in a specific
26:36 - way so anyways the order.create just
26:39 - convert that to a date and you're just
26:41 - going to call to local date string
26:45 - and I'm going to do undefined and the
26:50 - actually let me copy this from
26:56 - dates to local day string the short
27:00 - short long
27:02 - all right here we go
27:08 - and this is just going to give me a
27:10 - standardized date that I can use as the
27:12 - key however right now this created date
27:16 - is indeed a date and since I want to use
27:18 - it is a uh convert it back to a date
27:21 - string I'll just say constate string
27:23 - equals create a date to string
27:28 - and then I can use it as a key later on
27:32 - but first
27:33 - what I want to check for
27:37 - okay so we're eventually going to be
27:39 - building this where we determine for the
27:42 - orders of that day uh look at each one
27:44 - and say if it was canceled add one to
27:46 - this if it was filled it would add one
27:48 - to that and for that there is actually
27:52 - one order status
27:55 - um the canceled is in a specific or
27:58 - excuse me a separate type of object
28:00 - called a resolution I'll show you what
28:02 - these are
28:04 - so tree types resolution
28:09 - so the resolution status could be
28:11 - canceled filled or unresolved unresolved
28:13 - means hey uh the person didn't decide
28:15 - what they want to do yet filled means
28:18 - that the order was completed of course
28:19 - canceled means that it was canceled but
28:22 - if there is a resolution then that
28:25 - status it basically overrides the
28:28 - default order status since like manual
28:31 - human intervention always overrides like
28:33 - the automated process that's how I
28:35 - thought of it in my head at least so
28:37 - const
28:39 - resolution this is going to be equal to
28:41 - resolutions and it would be keyed by the
28:44 - order ID so order
28:46 - ID so this resolution object it may
28:50 - exist but it may not so we don't know so
28:54 - just want to mention that because later
28:56 - like right here
28:59 - we need to check if the order is
29:00 - canceled and for that I first want to
29:04 - say if there is a resolution
29:06 - and the reason that I like to have these
29:08 - double ampersands even though let me go
29:11 - ahead and type out the entire logic then
29:13 - I'll tell you so if there is a
29:15 - resolution then the resolutions
29:16 - resolution status if this
29:19 - is equal to resolution status canceled
29:23 - then that means the order is canceled so
29:26 - yeah this double Ampersand basically
29:27 - just converts this object to a Boolean
29:30 - value we can write it like this but well
29:33 - sometimes actually typescript will
29:35 - complain if you're using in certain
29:36 - certain situations but I like that just
29:39 - uh I don't know just feels cleaner in my
29:42 - head I guess but yeah that's why I did
29:44 - that just converting it to a Boolean and
29:46 - then const is filled
29:48 - what we want to do here is we want to
29:50 - say order dot fill status
29:55 - this is equal to fill status complete
29:57 - then the order is filled so like I said
30:01 - 99 of the orders are going to be either
30:03 - canceled or filled however if they
30:07 - aren't we'll say if not is canceled
30:12 - and not is filled then that would just
30:16 - mean that
30:18 - um that order is currently in progress
30:20 - It's a rare situation but it can happen
30:22 - and in that case we're just going to
30:24 - return the previous value so make no
30:27 - change to this array that we're building
30:29 - and actually this is object
30:33 - now after this what we can do is this
30:38 - so we'll say that if
30:41 - and I'll say the previous value
30:43 - and the key of this is the date string
30:47 - so basically if we have a bucket for
30:50 - these dates already then what do we want
30:52 - to do well for this bucket and remember
30:56 - by the bucket I just mean this object
30:58 - right here well what we want to do is we
31:01 - either want to add one to the canceled
31:02 - or filled depending on what this order
31:05 - is
31:06 - so if we have buckets then take this
31:11 - which is the bucket
31:12 - and
31:14 - actually did I even
31:17 - let's do this
31:25 - all right so I want to cancel we'll say
31:29 - plus equal is canceled
31:32 - then we're going to add one to cancel
31:35 - otherwise we don't add any
31:41 - and it's the same logic for filled
31:46 - where we want to add a 1 to 1 to filled
31:48 - if it's filled otherwise
31:51 - do anything
31:54 - else all right so this is saying if you
31:56 - already have the bucket or you already
31:58 - have uh pretty much orders for that day
32:01 - then go ahead and make these changes if
32:03 - not then what we need to do is actually
32:06 - create that bucket
32:07 - and this is equal to this object
32:14 - all right it's probably easier just to
32:15 - uh type this out how lazy am I come on
32:18 - uh let's see canceled
32:24 - frame this out real quick
32:29 - so canceled created date
32:33 - filled
32:35 - and now I can actually get rid of this
32:45 - all right so for the canceled value in
32:50 - the very first time we'll say if it's
32:52 - canceled then it's equal to one
32:55 - same thing for is fill logic and the
32:59 - created dates we're actually going to
33:00 - use this D string what is keyed by it
33:04 - all right so right now this result is a
33:08 - dictionary whose keys are dates and
33:11 - whose values are these objects right
33:14 - here and we just structured it that way
33:16 - because it was uh we only have to
33:18 - iterate over everything once however
33:21 - whenever we return this we actually only
33:24 - want the values of that since the keys
33:26 - were just for easy lookups so object the
33:29 - values of the results that's going to
33:31 - give us a list
33:33 - and actually
33:37 - this is going to work right here
33:42 - I believe so yeah this should work but I
33:45 - want to make some changes as well
33:47 - and since I updated too much let me just
33:51 - go ahead and restart
33:53 - all right so it was getting air and now
33:56 - I see what it is it was because I didn't
33:58 - return
34:00 - previous value right here
34:05 - are it
34:14 - alrighty
34:16 - so yeah now the dates are appearing
34:18 - however what I want to do here is
34:20 - actually uh switch the ordering of these
34:22 - because you see the way that this order
34:24 - list is coming in I have the most recent
34:27 - orders at the top and then the oldest
34:29 - ones at the bottom however
34:32 - for the list I don't want the oldest
34:34 - ones or excuse me the most recent ones
34:36 - at the beginning and the oldest ones at
34:38 - the end I want the most recent ones on
34:40 - the right hand side so to do that I just
34:43 - need to reverse
34:45 - my array
34:47 - it's being returned and I'll just say
34:49 - reverse
34:51 - and another thing that I want to do is
34:55 - even though
34:56 - I only have orders for four days
35:00 - one two three four actually you can see
35:02 - that the reverse worked properly I now
35:04 - have the most recent ones appearing on
35:06 - the right hand side but anyways what I
35:08 - was saying is even though I have them
35:10 - for four days right now one two three
35:12 - four
35:13 - what I want to do is I actually want to
35:16 - limit this to seven
35:18 - right now if you had more days it would
35:20 - just display all the days but to kind of
35:23 - limit that what I want to do is just
35:25 - slice this and I'll say 0 to 7. and
35:30 - just to show you that this works let me
35:31 - just slice it for two
35:34 - and you see it's gonna only display the
35:36 - last two items so by slicing it and
35:39 - giving it a size of seven this is gonna
35:42 - Max it out at no more than seven items
35:44 - because I don't want to display any more
35:46 - than seven days
35:47 - but
35:49 - wait a minute is that the entire thing
35:52 - is this all we had to do
35:55 - all right well for some reason I thought
35:57 - it would take longer than that oh yeah
35:59 - the other thing I want to show you is
36:01 - this resolution right here so right now
36:03 - it is 2-2 and I have five filled orders
36:07 - and one canceled one and let me just go
36:10 - ahead and for this resolution I'm just
36:12 - going to go ahead and fill it
36:14 - and I want to do this in a real time
36:16 - because whenever I click this you should
36:18 - see this change right here so fill this
36:22 - oh wait a minute unable to determine
36:26 - well you know what I think I got
36:28 - disconnected yep
36:30 - so during my debugging and react hot
36:33 - reload
36:35 - got disconnected so I just need to
36:36 - reconnect
36:39 - yeah sometimes if uh there's error then
36:41 - hot reload will disconnect me from my
36:44 - websocket so then I have to restart it
36:47 - to uh just reconnect so that's what's
36:48 - going on here
36:51 - now
37:01 - hopefully
37:04 - all right yep I'm connected with my
37:06 - MacBook now now let me go ahead and
37:09 - resolve this to fill the order so again
37:11 - five filled order is one canceled hit
37:14 - fill and you see well hopefully you saw
37:17 - it that uh This Bar increased right here
37:19 - now I have six filled orders one
37:22 - canceled and now for this resolution
37:25 - instead of filling the order I'm going
37:27 - to cancel it and again keep an eye on
37:29 - this right here should update in real
37:30 - time right now it's six filled to one
37:33 - canceled
37:35 - cancel order order canceled successfully
37:38 - and six field two canceled
37:41 - all right looking good so we now have
37:43 - our beautiful bar chart don't even have
37:46 - seven days yet but once we do they will
37:48 - all appear here and it looks like the
37:50 - fill status and cancellation status
37:53 - updating logic is still working and uh
37:57 - yeah another feature for our OS
38:00 - quote-unquote
38:01 - so uh yeah thanks for watching and in
38:03 - the next video I actually don't know I'm
38:06 - gonna kind of Go free solo here and uh
38:09 - maybe start working on the University
38:11 - app by the way another thing I might as
38:14 - well show you while I'm here is I built
38:16 - in a notification system so let me send
38:18 - it because I'll show you what the
38:19 - problem was uh before
38:22 - so before I actually added a seed one of
38:26 - my friends from Ethiopia and he was
38:28 - chatting with me and he would send me a
38:31 - chat message and I didn't even know that
38:32 - he sent it to me since we didn't have
38:34 - any notifications but now check this out
38:38 - so now when someone sends a chat message
38:40 - you see this little notification right
38:42 - here gonna click this and then I built
38:46 - these little red blurbs right here so
38:48 - click it and then this little red line
38:50 - it shows you where your new messages are
38:52 - so pretty cool at least I thought it was
38:55 - cool I was happy to have a notification
38:57 - system it uh makes chatting a whole lot
38:59 - easier but anyways in the next video
39:01 - we're either going to be uh building a
39:04 - notification system into this University
39:06 - maybe building one into our uh chat or
39:10 - excuse me our trade simulator I kind of
39:12 - want to get back to working on this
39:13 - University though it seems like uh it's
39:16 - going to be a little bit more
39:16 - interesting and we can also build out
39:18 - that dashboard feature to see you know
39:21 - maybe the total number of courses you
39:22 - created how many students are viewing so
39:24 - on and so forth so that should be pretty
39:26 - interesting too but anyways uh thanks
39:28 - for watching and I'll see you next time

Cleaned transcript:

alrighty everybody welcome back to another video and in this one we are going to be getting our hands dirty getting started with recharts which is a pretty cool charting library for react and more specifically we're going to be building this type of Stack to bar chart and we're going to be integrating it into a little trading simulator app I build out it's a pretty cool app to well it generates lots of data that we can play with at least so yeah all this is kind of of course inspired from this conversation we were having in the last video where Tajay mentioned he was in data analytics and then some other people Paul specifically uh suggested some features that we could use for excuse me the university app so that's kind of the plan and I know also that I said I was going to be working on the University app in this tutorial but what I want to do is first Implement that chart here I'll go ahead and make sure that we installed the library properly and set up a simple chart right here just to pretty much build out a proof of concept to say tnbos can support this chart and then from there we can go ahead and probably have uh I don't know if we'll use this style but some more of these charts right here we'll use it as like a dashboard for the University feature but for right now we'll just go ahead and get started with some baby steps so I already got a new Branch let me just go ahead and do npm install recharts plural that is all right that looks good to go now after this what I'm gonna do is I'm going to be working on my trade app and I'm just going to create a new component for this and actually just named it stacked bar chart I might want to change that a little bit later on but for now it'll be good all right so this is gonna have us actually I don't think we're gonna need to style anything so let me just go ahead and create components and for the name I'll just name it that is terminal doing I am tidied this up a little bit all right so right now we just got basically a div that says stack bar chart in it and then I'm going to be putting this right above here we'll say underneath this order setting so this is the orders page so in that case Pages orders all right so let me just import this in render it right now so it is called stacked bar chart talk about church and all right so I'll stick it right under the page header all right let me make sure you don't got no errors and okay yeah I need to restart it probably all right and actually this is the error right here Styles file let me just convert that to a div because we're going to be replacing that in like half a second anyways and all right we have this component rendering right here so we'll go ahead and adjust the positioning and everything but uh right now just want to get the foundation structure now for the Stacked bar chart what I'm actually going to do is just pretty much steal this uh boilerplate code so for this start with all this data I need to import those I don't believe all right so this data is going to have to clean up that later and now let's copy this responsive container which is going to be the parent for everything and let me just do this return it that's and first of all I'd like to have my attributes sorted alphabetically I also want to take this class name which we need for those style components and just pass it through to the parents margin we don't need to set any of this let me do some cleanup right here all right not going to set margin there because we want to do that from CSS we don't need this anymore and then our data is pretty this up optimized by any ports and all right so getting some issues right here and this is just because the way I have eslint set up um these Keys need to be sorted so I just have to go and sort each of these and actually let me not even do that because I'm going to be replacing all this dummy data all right so here let me make sure nothing's broken so far all right so it's no longer displaying and I think that I know why and that's because with a responsive container I only want one of these to be um relative so we'll say height 260 with equals 100 so yeah with a responsive container one of the props should be a pretty much a static amount in pixels and then the other one should be a percentage string and hopefully if I'm correct yep all right so now we got a displaying right here but what I want to do is right now this is taking up um the 100 of the entire width I only want it to take up well maybe 100 but I'm thinking about 80 might be good and then kind of Center aligned here and also I want to add a bit of spacing between this top order card and then pretty much just chart right here so in order to accomplish that what I'm going to do is on my orders where I'm importing this stacked bar chart I am instead going to import it from the order Styles file and instead of Stack bar chart I'm going to import it as u in other words unstyled stacked bar chart and then I am just going to say that the stack the bar chart is a styled version of this on styled stack the bar chart and four of this what do I want to do to it specifically well actually the only thing that I'm going to do is to this in this div like the properties I'm going to override directly even though I want to adjust the position I'm not going to do that quite yet what I'm going to do is go and say font size is equal to 12 pixels and by the way to actually render this on the screen instead of rendering it from here which is the component being imported we want to render the styled version of that which comes from our Styles files since we're importing everything is s right here so any who we should now render our custom version which should have 12 pixels and yes the uh the font size can couldn't think of the word there for a second but the font size did increase to 12 pixels looking good all right so the reason I said even though I want to add a little margin bottom to that chart to get some space between this and this card right here I want to do it inside a container because that's going to give me my Flex Behavior I want and let me save this uh stack the bar chart container and the way I'm going to render this is pretty much like this stack bar cart stacked bar chart container if you can say that tongue twister then that's what I'm going to be having or excuse me treating is the parent of this stacked bar chart and for this I of course want to display it as a flex and I'll just say justify content Center and that's going to Center align it horizontally and then for this this is where I'm going to stick the margin bottom of 24 pixels see how this looks all right looking pretty good see we've got a little bit of space right here actually I wonder let me think about this I don't even think I need this since it's already responsive and just using the full width anyways all right so that should be good so now let's go ahead and take a closer look at this these uh charting elements right here and figure out what's going on so responsive container we already know what that does it's pretty much the parent container for everything give it a static height and then a dynamic width and then that's going to give you this Behavior very much that cool responsive Behavior looking good and then the bar chart of course uh this is pretty much the component that we want to create all of the settings quote unquote are going to be children components that go right inside there but for the bar chart we just need to give it data and for us this is going to be a custom array basically like an array of whatever statistics you want on display of course you know these are the actually we don't even need these data heightened width let me just make sure yeah since we're using a responsive container we don't need those attributes and all right so this uh Cartesian grid right here this is that background grid you see uh I'll stop however on over but you see that little dotted grid right here now the first number here you can kind of just think of this as how I think of it the stroke Dash or eighth is three three is the length of the lines and then this other three is the length of the gaps and I'll kind of show you what I mean so I'm going to increase the first one which should increase the length of the line and you see you have to kind of look hopefully you can notice on YouTube but the grade lines uh got a little bit bigger and of course you can probably see what's going to happen but you know I gotta demonstrate it anyways my OCD kicking in and there you go you see that there is a more of a gap now than the line itself so let me change that back I actually like how it is by default off the template33 now this xaxis right here now for the data key this is of course going to be the key of the data that you want to use on the xaxis and since we have a name that was the little sample there you see that the name property is going to be displayed down there for us we're actually going to use um dates and then we're going to have like the last seven days we'll display and then we'll have a stacked bar chart where we'll have both the number of filled orders and the number of cancel orders so yeah that's the story behind that and now for the yaxis this is just saying that we want a yaxis so you see that we didn't specify anything that's because the values are derived from the actual data so we don't need to pass in any attributes however if we just remove that component completely then we wouldn't even have these values right here so to show you what I'm talking about let me just remove xaxis or excuse me yaxis and you see that those values disappear but I actually like having those so I'm going to comment that pack in now for this tool tip in the legend components right here that is saying to for the tooltip you see that whenever I hover over this then actually let me add another a couple columns real quick all right so whenever I hover over this you see that this little tool tip pops up right here that's what this is and that Legend component is just saying to display these little like a guide down here and then last but not least we have these bars and These Bars of course you know what those are the actual bars in the chart uh the data key is the key for whatever data I don't know what PV and UV stands for in this example but what we will have is something like filled and canceled however I will type it properly and then these or excuse me the stack ID so if two bars have the same stack ID then they're going to appear on top of each other and I'll show you what this means by this purple in this green you see how they're just stacked on top of each other now if they have different stack IDs then they'll just appear side by side so let me go ahead and change this one to B you see just spear side by side there you go now let me go ahead and now that we kind of understand everything uh what do I want to do first so the first thing I want to do is actually change the color of these because what I want these to be is like you see these filled orders in these canceled orders and these badges already have a standard color and I already have it as a cheat sheet on the right hand side of my screen however if you can uh well let me actually show you this batch component so in the component badge under my Styles you see everything is embarrassingly hard coded in but uh this is where I'm getting the colors from I definitely need to pull these out into a more standardized color theme but uh yeah just been lazy I guess but anyways now what we can actually do is start prepping this for the data that we want so what I like to do is kind of just start here like what's the ideal data that I'm going to be passing in and again like I said each bar is going to be a certain day and that day is going to have um pretty much display the number of filled orders and canceled orders on top of it so I'll have a count for the canceled orders for that day and I'm just adding sample data right here so I'll say one and for the created date so this is I don't know exactly what format we are going to be using but I'll say Jan 8 uh 2020 there you go she don't even actually it's February I'm only off by like a month all right filled uh five and yeah it's pretty much the format so now let me just go ahead and get five of these just to make sure that it looks alright so first of all nine 10 11 12. and let me see two ten I like having realistic data and uh I don't know starting with realistic data instead of like adjusting the litter just always saves me time and then I'll do like a 3 15 a lot of order or 13 that looks good too and 214. okay so now that we change this we also need to change a couple keys right here so the xaxis uh pretty much what each of your bars are it's just going to be its created date and then for the first bar I'm just going to say that's going to be the filled one again this should be my green color and then for the canceled this is my red let's see how that looking all right something like this so these are my orders each day and it displays five now I'm just go ahead and add two more cl7 looks because I think I want to display I think I want to display the last seven days all right I like the way that looks full dates yeah this looks pretty good all right so again like I said what I like to do is kind of mock everything out with sample data and then after that I'll go ahead and then write a function uh we'll probably use memo for this and it effectively is just going to return this exact shape of data so on that note let me actually go ahead and pass the order list into this component I already calculated what list of orders should be displaying on that page and since this is a decently heavy operation iterating through a bunch of orders at least then I don't want to have to recalculate it I don't want to stick it in a hook or anything so I'll just pass it down and for this I need to accept it so I'll make uh stack the bar chart props this is gonna take our order list just keep a name the same thing and then for this type it out let me just import some things that I need uh let's see resolutions you need those and let's see what else all right this should good now this order list this is just a list of orders and need to acceptance here past that bad boy down so it can be used all right so now that it accepts that order list grab it here and we're yet all right so now the order component which or excuse me the orders page is passing in the orders list to that stacked bar component so what we can do on that orders list and by the way the orders list is just a list of all of these all of these orders that are pretty much in the section right here now before we hop into any more code let me actually go ahead and show you something so I am you aren't going to see this but I'm on my MacBook right here and I'm just going to go ahead and first make a simple order and it'll just be a sample one I'm going to hit place order now and check out what happens so what the system does is it goes ahead and a bunch of stuff's automated it goes ahead and fills the order and everything is smooth sailing now the reason I want to show you that is because next up I want to show you some edge cases where if something goes wrong in that process so anyways what happens in this process is that these two devices are working together kind of to say like your turn okay I'm done now your turn and throughout this process it creates this completed order object now there's also some situations where say one device shuts off in the middle of that process then in that case I just kind of like deferred it to require human intervention and in the code I call this a resolution so now with that being said on my MacBook all right I probably should have had this page up already but what I'm going to do is I'm going to manually comment out one of the lines to uh that's in the middle of the order process I basically just want to jam up this pipeline and now I'm gonna Place another order wait for it wait for it okay now check it out so this is the order I just placed right here and it says a waiting payment because this is the line that I canceled out so the payment for my MacBook which is the other device not the one you're seeing the screen recording of but that payment is never going to get sent so what's going to happen in this case is that once this payment time and I I definitely should have reduced it I'm probably gonna have to pause the video so we don't have to stare at this for 10 minutes but either way once this expires then it's going to say hey uh there wasn't any payment received and then it's going to require a resolution and that's the state I want to show you and this is probably going to make sense like in one minute when you see what this is actually doing but for now I also want to just make one more order that's going to need to be resolved and the reason is once you have this resolution object you're going to have a choice of do you want to fill their order still or do you want to cancel it and I want to have two of these orders because I want to just test filling one and canceling one but anyways I'm gonna wait until these expire and then I'll uh start the video again you know I can probably just write this function while we're waiting all right so yeah this data object right here this was all that demo data uh we essentially want to use use memo to replace all this but I'll keep it commented out since we already know what the keys are going to be named so I'll say well first of all right so we're going to be getting the resolution objects which well you all don't know what they look like yet but you will whenever that timer expires and then for that data I'm just going to say constata equals use memo and what this is gonna do is it's going to use a reduce function and all right so let me think how I want to do this so I don't want to have to iterate through it any more than one time so let me go ahead uh iterate through each of these orders and then I'm going to stick each order and basically their day bucket so like if I had five orders today then those five orders are going under their own bucket and by bucket I just mean uh an object or an array but that's how I'll separate them and actually you know what I can build this thing even easier because all I have to do is for each day as I iterate over that order I can either move it in fill it or canceled or just ignore it if it is neither of those statuses and by the way I know a lot of new information being thrown at you but 99 of the orders the way I wrote this app are going to be either filled or canceled it's just that while the order process is going on the order status may be in like this weird like pending phrase or waiting for something but um yeah as long as you don't have it we're pretty much just uh finding all the orders that are not currently in progress I guess that's all I'm trying to say so what I'm going to do is just uh build this dynamically and I'll show you how to do this so all right so this is going to be orderless and then I'm just going to reduce and I'm going to reduce I'll say previous value I need to type this out so the type of this I'll just put any although this is going to be this shape an array of these type of objects uh and the current value so since we're iterating over orders this is going to be order and all right reduce and we're going to be building an array and let me just go ahead and return because my IDE is kind of annoying if I don't have a return statement in there all right so anyways when iterating over this order list what do I want to do first well I'm going to create this key first because all right so I'll create this key and then I'm going to create an object Key by it as like a mini uh lookup mechanism and then that way I don't have to find that item in the array each time and then when I return the results I'll just get the values of this since it's going to be keyed by a string and the values are really all I care about so anyways uh the const created dates this is going to be equal to a new date and the reason that I need this is because on the order object the dates are the string but I actually want to convert it to a date object because I need a format this date in a specific way so anyways the order.create just convert that to a date and you're just going to call to local date string and I'm going to do undefined and the actually let me copy this from dates to local day string the short short long all right here we go and this is just going to give me a standardized date that I can use as the key however right now this created date is indeed a date and since I want to use it is a uh convert it back to a date string I'll just say constate string equals create a date to string and then I can use it as a key later on but first what I want to check for okay so we're eventually going to be building this where we determine for the orders of that day uh look at each one and say if it was canceled add one to this if it was filled it would add one to that and for that there is actually one order status um the canceled is in a specific or excuse me a separate type of object called a resolution I'll show you what these are so tree types resolution so the resolution status could be canceled filled or unresolved unresolved means hey uh the person didn't decide what they want to do yet filled means that the order was completed of course canceled means that it was canceled but if there is a resolution then that status it basically overrides the default order status since like manual human intervention always overrides like the automated process that's how I thought of it in my head at least so const resolution this is going to be equal to resolutions and it would be keyed by the order ID so order ID so this resolution object it may exist but it may not so we don't know so just want to mention that because later like right here we need to check if the order is canceled and for that I first want to say if there is a resolution and the reason that I like to have these double ampersands even though let me go ahead and type out the entire logic then I'll tell you so if there is a resolution then the resolutions resolution status if this is equal to resolution status canceled then that means the order is canceled so yeah this double Ampersand basically just converts this object to a Boolean value we can write it like this but well sometimes actually typescript will complain if you're using in certain certain situations but I like that just uh I don't know just feels cleaner in my head I guess but yeah that's why I did that just converting it to a Boolean and then const is filled what we want to do here is we want to say order dot fill status this is equal to fill status complete then the order is filled so like I said 99 of the orders are going to be either canceled or filled however if they aren't we'll say if not is canceled and not is filled then that would just mean that um that order is currently in progress It's a rare situation but it can happen and in that case we're just going to return the previous value so make no change to this array that we're building and actually this is object now after this what we can do is this so we'll say that if and I'll say the previous value and the key of this is the date string so basically if we have a bucket for these dates already then what do we want to do well for this bucket and remember by the bucket I just mean this object right here well what we want to do is we either want to add one to the canceled or filled depending on what this order is so if we have buckets then take this which is the bucket and actually did I even let's do this all right so I want to cancel we'll say plus equal is canceled then we're going to add one to cancel otherwise we don't add any and it's the same logic for filled where we want to add a 1 to 1 to filled if it's filled otherwise do anything else all right so this is saying if you already have the bucket or you already have uh pretty much orders for that day then go ahead and make these changes if not then what we need to do is actually create that bucket and this is equal to this object all right it's probably easier just to uh type this out how lazy am I come on uh let's see canceled frame this out real quick so canceled created date filled and now I can actually get rid of this all right so for the canceled value in the very first time we'll say if it's canceled then it's equal to one same thing for is fill logic and the created dates we're actually going to use this D string what is keyed by it all right so right now this result is a dictionary whose keys are dates and whose values are these objects right here and we just structured it that way because it was uh we only have to iterate over everything once however whenever we return this we actually only want the values of that since the keys were just for easy lookups so object the values of the results that's going to give us a list and actually this is going to work right here I believe so yeah this should work but I want to make some changes as well and since I updated too much let me just go ahead and restart all right so it was getting air and now I see what it is it was because I didn't return previous value right here are it alrighty so yeah now the dates are appearing however what I want to do here is actually uh switch the ordering of these because you see the way that this order list is coming in I have the most recent orders at the top and then the oldest ones at the bottom however for the list I don't want the oldest ones or excuse me the most recent ones at the beginning and the oldest ones at the end I want the most recent ones on the right hand side so to do that I just need to reverse my array it's being returned and I'll just say reverse and another thing that I want to do is even though I only have orders for four days one two three four actually you can see that the reverse worked properly I now have the most recent ones appearing on the right hand side but anyways what I was saying is even though I have them for four days right now one two three four what I want to do is I actually want to limit this to seven right now if you had more days it would just display all the days but to kind of limit that what I want to do is just slice this and I'll say 0 to 7. and just to show you that this works let me just slice it for two and you see it's gonna only display the last two items so by slicing it and giving it a size of seven this is gonna Max it out at no more than seven items because I don't want to display any more than seven days but wait a minute is that the entire thing is this all we had to do all right well for some reason I thought it would take longer than that oh yeah the other thing I want to show you is this resolution right here so right now it is 22 and I have five filled orders and one canceled one and let me just go ahead and for this resolution I'm just going to go ahead and fill it and I want to do this in a real time because whenever I click this you should see this change right here so fill this oh wait a minute unable to determine well you know what I think I got disconnected yep so during my debugging and react hot reload got disconnected so I just need to reconnect yeah sometimes if uh there's error then hot reload will disconnect me from my websocket so then I have to restart it to uh just reconnect so that's what's going on here now hopefully all right yep I'm connected with my MacBook now now let me go ahead and resolve this to fill the order so again five filled order is one canceled hit fill and you see well hopefully you saw it that uh This Bar increased right here now I have six filled orders one canceled and now for this resolution instead of filling the order I'm going to cancel it and again keep an eye on this right here should update in real time right now it's six filled to one canceled cancel order order canceled successfully and six field two canceled all right looking good so we now have our beautiful bar chart don't even have seven days yet but once we do they will all appear here and it looks like the fill status and cancellation status updating logic is still working and uh yeah another feature for our OS quoteunquote so uh yeah thanks for watching and in the next video I actually don't know I'm gonna kind of Go free solo here and uh maybe start working on the University app by the way another thing I might as well show you while I'm here is I built in a notification system so let me send it because I'll show you what the problem was uh before so before I actually added a seed one of my friends from Ethiopia and he was chatting with me and he would send me a chat message and I didn't even know that he sent it to me since we didn't have any notifications but now check this out so now when someone sends a chat message you see this little notification right here gonna click this and then I built these little red blurbs right here so click it and then this little red line it shows you where your new messages are so pretty cool at least I thought it was cool I was happy to have a notification system it uh makes chatting a whole lot easier but anyways in the next video we're either going to be uh building a notification system into this University maybe building one into our uh chat or excuse me our trade simulator I kind of want to get back to working on this University though it seems like uh it's going to be a little bit more interesting and we can also build out that dashboard feature to see you know maybe the total number of courses you created how many students are viewing so on and so forth so that should be pretty interesting too but anyways uh thanks for watching and I'll see you next time
