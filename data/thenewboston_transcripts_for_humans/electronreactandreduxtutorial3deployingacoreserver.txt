With timestamps:

00:00 - all right so now that we have a pretty
00:02 - good understanding of the overall
00:03 - architecture and we saw the MVP app in
00:06 - action let's go ahead and figure out how
00:09 - to spin everything up from scratch
00:10 - starting with the core and just a little
00:13 - heads up before we get started for this
00:16 - tutorial I actually have a little cheat
00:17 - sheet a Google doc on the right side of
00:19 - my screen that I have all the commands
00:21 - already however I plan eventually on
00:24 - updating the readme's right here right
00:26 - on the repo now I don't know if I'm
00:29 - gonna have time to do that before I
00:31 - publish this video but either way to
00:33 - save you all time from you know uh
00:36 - pretty much just uh let you copy the
00:38 - commands from some document and paste
00:39 - them in so I don't have to type them all
00:41 - out manually just go ahead and check the
00:43 - description below and there'll be some
00:45 - guide there either to a Google doc or a
00:47 - readme and on that note let's go ahead
00:49 - and get started
00:51 - so the first thing that we need to do is
00:54 - spin up an ec2 instance so I assume that
00:57 - anyone following this has a basic
00:59 - understanding of AWS if not I'll try to
01:01 - take things a little bit slow but go
01:03 - ahead if you don't sign up for AWS
01:05 - account and go to this ec2 section right
01:08 - here
01:09 - and I'll just go to instances running
01:11 - although there are a couple different
01:13 - locations you can launch a new instance
01:14 - from but anyways find this launch
01:16 - instances button
01:18 - and what we are going to do first is
01:22 - just give it a name now the name of this
01:25 - repo is core
01:27 - and I already have a server named core
01:30 - it's for the New Boston network but I'm
01:32 - just gonna call this core let me just
01:35 - call this core 2.
01:37 - uh this name doesn't really matter it's
01:39 - just so in AWS you can pretty much
01:41 - differentiate your servers pretty much
01:43 - just give it a label and then down here
01:46 - I'm going to click on Ubuntu actually
01:48 - I'm going to click browse more Amis and
01:50 - what we are looking for is Ubuntu Server
01:53 - 20.04 hvm 64-bit right there and make
01:58 - sure that it's uh the x86
02:01 - and all right so got that selected
02:06 - let's go down here uh T2 micro it's uh
02:09 - it's one of the smaller ones but that's
02:11 - fine for us keep here login I say that
02:14 - like I'm Canadian keep here all right uh
02:17 - well key pair do I want to use
02:19 - let's go with this one Bucky iMac if you
02:22 - don't have a key pair then go ahead and
02:23 - wow my Canadian accent is really uh
02:26 - shining through here but if you don't
02:28 - have one you can create one right there
02:31 - and let's see what else we need to do
02:33 - all right so down here we're gonna uh
02:36 - just click some settings for the
02:38 - security group and this one allow SSH
02:41 - traffic of course we want to be able to
02:42 - Shell in and also allow https and http
02:48 - and the reason that we need both of
02:49 - these is because before we have our
02:52 - certificate we're gonna need to uh
02:54 - pretty much reach out to the servicing
02:56 - communicate with HTTP however after to
03:00 - get a secure connection from tnb OS and
03:03 - the client we're going to be using https
03:05 - so anyways just make sure you have both
03:07 - of those and that should be it's all of
03:10 - the other defaults are good we only want
03:12 - one instance let's launch this bad boy
03:16 - our eyes successfully initiated lots of
03:18 - instance let's just go ahead and click
03:20 - this to check it out
03:22 - and if you select this then your details
03:24 - will pop up below and right now it is
03:28 - pretty much uh booting up pending right
03:30 - here so it's going to take a minute or
03:33 - so I'm just gonna pause the video and
03:35 - I'll come back when everything is up and
03:37 - running all right so that took about 10
03:39 - seconds very Snappy and now that we have
03:43 - it up and running I'm just going to go
03:44 - ahead and copy the public IP address and
03:49 - then I'm going to open my terminal and
03:52 - to connect to it SSH
03:55 - Ubuntu at that IP address enter yes
04:00 - and all right good to go
04:04 - let's clear the screen and okay
04:06 - so just a little background on what
04:08 - we're doing and pop Chrome back open so
04:11 - like I said before this software is
04:13 - written in Django however it uses some
04:16 - other services as well for example it
04:18 - uses nginx and postgres for the database
04:21 - and I mention all this because before we
04:25 - can just install the software straight
04:27 - up we need to install Docker now once we
04:30 - have that installed we can then pull
04:33 - down the dockerize version of this and
04:35 - all this is already set up good to go we
04:37 - already built it so either way just want
04:39 - to give you a little heads up of what
04:41 - we're doing here
04:42 - and for this next step what I'm going to
04:46 - be doing is essentially going through
04:47 - this guide the official Docker guide
04:49 - however there are some things in here
04:52 - that you can kind of skip over so
04:54 - instead of just following along with
04:56 - this since not everything applies to our
04:58 - environment I have a little cheat sheet
05:01 - that I'll just go through but I say that
05:03 - because if you ever get lost or maybe
05:05 - something's out of date from this
05:06 - tutorial then I would refer back to the
05:08 - docker documentation of installing
05:11 - Docker engine on Ubuntu
05:13 - all right so let me go ahead and plop
05:16 - open my terminal and let's go ahead and
05:17 - get started so the first thing that it
05:20 - recommends is uninstalling any existing
05:23 - versions of Docker and this is going to
05:26 - report that it's unable to find them
05:28 - that's okay uh this is pretty much just
05:31 - ensuring that we don't have any existing
05:33 - versions installed already just what we
05:35 - want
05:36 - now let me go ahead and clear that out
05:38 - now before we install this for the very
05:41 - first time on this host machine right
05:43 - here what we need to do is we need to
05:45 - set up the docker repository and this is
05:49 - just going to allow us to communicate
05:50 - with Docker install and update Docker
05:52 - and before we do that our famous uh kind
05:58 - of the famous Ubuntu setup we're going
06:01 - to make sure we have the package cache
06:03 - updated and we upgrade all existing
06:05 - packages
06:07 - so let me just wait for this
06:09 - all right so that took about a minute I
06:12 - would guess now after everything is
06:14 - updated I'm gonna go ahead and run this
06:16 - Command right here and what these
06:18 - packages do is they allow app to use a
06:20 - repository over https which of course is
06:24 - the docker repository and all right nice
06:28 - and easy now after this we can go ahead
06:30 - and add docker's official gpg key which
06:34 - is going to allow for the secure
06:35 - transmission of data so first we're
06:38 - going to make this directory and then
06:40 - run this command to pull it down or
06:44 - download it
06:45 - and all right uh once that's set up we
06:48 - can use this command
06:51 - right here and what this command does is
06:54 - it just finishes setting up the
06:56 - Repository
06:58 - so now that we got that taken care of
07:00 - let me go ahead and clear the screen and
07:04 - one thing that I saw and I don't know if
07:06 - this is necessary but I figure it
07:08 - doesn't hurt is
07:10 - I'm gonna go ahead and update the app
07:13 - package index again again I'm not sure
07:15 - if that's necessary but I saw it in
07:16 - documentation and well I figured it
07:19 - didn't hurt so might as well just go
07:20 - ahead and do it and after this I'm going
07:23 - to go ahead and install the latest
07:24 - version of Docker engine and some other
07:27 - things such as Docker compose that we're
07:28 - going to need so let me just go ahead
07:30 - and do that shouldn't take long
07:32 - and by the way uh kind of a plug for my
07:35 - other tutorial series if you are not
07:37 - familiar with Docker or you want to
07:39 - learn more like what is Docker engine
07:40 - what is Docker compose I highly
07:42 - recommend checking out my Docker series
07:45 - and our rights once that's done go ahead
07:49 - and clear it now at this point we should
07:52 - have Docker engine Docker compose pretty
07:54 - much everything set up we can go ahead
07:56 - and first once everything is installed
07:59 - go ahead and start the docker service
08:02 - and okay we didn't get any errors that's
08:04 - good and now we just want to verify that
08:06 - everything is set up properly by running
08:09 - a simple hello world image so go ahead
08:12 - and run this command hit enter and if
08:14 - everything works properly again it's
08:16 - going to pull it down since it doesn't
08:17 - have it in Cache already and it's going
08:20 - to say hello from Docker you should see
08:21 - that somewhere that means we are good to
08:23 - go
08:24 - now another thing that happened that I
08:28 - didn't really discuss kind of happened
08:29 - in the background is that right now
08:31 - Docker engine is installed and running
08:34 - and what also happen is a group called
08:37 - Docker was created but no users were
08:40 - added to it yet now we are going to need
08:43 - that group and what we need to do is we
08:46 - actually need to add your user to the
08:49 - docker group so we're just going to go
08:51 - ahead and add to group the user that
08:55 - you're using right now and once you do
08:57 - that we can go ahead and exit and then
08:59 - we want to pretty much shell back in to
09:01 - make sure we got all the updated
09:02 - permissions so I'm gonna exit clear
09:06 - and then just shell back in
09:11 - all right so now that we're back in we
09:13 - should now have permissions for the
09:16 - docker group and at this point we can
09:19 - now pull the actual images that we're
09:21 - going to need for the core repo so the
09:24 - first image that we're going to pull
09:25 - we're actually going to pull down two of
09:26 - them uh the first one is pretty much the
09:29 - the source code or the server that you
09:31 - would think of pretty much all that
09:33 - Django code
09:34 - and while this is kind of pulling down
09:37 - uh just to talk to you about the other
09:39 - image that we're going to be pulling
09:40 - down that's our reverse proxy and that's
09:43 - going to be the essentially the nginx
09:44 - service that sits in front of our code
09:47 - and yeah uh it's pretty much all I have
09:51 - to talk about anything else I can talk
09:53 - about all this is happening uh
09:56 - oh I got a story for you so um I went to
10:00 - Dunkin Donuts probably about a month ago
10:03 - it's November 10th now probably at the
10:05 - beginning of October check this out
10:07 - and here let me go ahead
10:12 - okay let me go ahead and uh uh pull this
10:15 - again this is the nginx service
10:17 - basically and I'll go ahead and run this
10:19 - and then I'll finish my story so
10:22 - man that was way too quick okay I'll
10:24 - tell you at the end the Dunkin Donuts
10:25 - story it's
10:26 - it's pretty incredible as far as you
10:28 - know how exciting kind of dunking down
10:30 - the story get but uh you know a lot of
10:33 - people complain when I tell stories in
10:34 - my tutorials just thought I'd have some
10:36 - more time there all right so now we
10:38 - should have both those images pulled
10:40 - down and we can actually just verify
10:42 - that if we type in Docker images of
10:45 - course we have that hello world one
10:47 - testing but all right now before we do
10:50 - any more server setup what we first need
10:53 - to do is we need to associate an elastic
10:55 - IP address with our ec2 instance so why
10:59 - do we need to do that now the reason
11:01 - that we need to do it now is because
11:03 - this core is going to be using https now
11:07 - as part of the additional server setup
11:11 - we need to have a domain name ready to
11:15 - pretty much uh configure all our SSS
11:18 - certificate encryption so on and so
11:19 - forth you'll see in just a bit but just
11:21 - to make it super clear what's going on
11:23 - right now I went ahead and I paused the
11:25 - video and I made this little two second
11:28 - diagram to show you what we're doing so
11:30 - we already have our ec2 instance we are
11:33 - shoveled into it boom good to go and yes
11:36 - I know these uh IP addresses aren't
11:38 - valid just uh they're just examples I
11:40 - just don't want anyone to yell at me for
11:42 - it okay so we have our ec2 instance and
11:44 - what we can do if we wanted to is we
11:47 - could have a domain name set up and we
11:50 - can just point that domain name to this
11:52 - instance for example whenever someone
11:54 - went to the new boston.com they could
11:56 - just hit our instance and that's fine
11:58 - it's gonna work at least for the time
12:00 - being so on and so forth however the
12:03 - problem with that is whenever you have
12:06 - an ec2 instance the public IP address
12:09 - associated with that instance is not
12:11 - static in other words if we ever stop
12:13 - this instance and restart it AWS is
12:16 - going to assign it a new public IP
12:19 - address so that means we're going to
12:20 - have to go back in our
12:23 - um print pretty much our DNS
12:24 - configuration update it to a new IP and
12:27 - it's pretty much just a pain so instead
12:30 - a much better solution to avoid all
12:33 - these headaches is using something
12:35 - called an elastic IP and what this is is
12:39 - it's basically an IP address that's tied
12:42 - to a reserved or static public IP
12:45 - address and with this we can point this
12:48 - to any ec2 instance that we want so the
12:53 - setup that we're eventually gonna
12:55 - structure whatever you want to call it
12:57 - is that we're going to have a domain
12:59 - name and we're always going to point it
13:01 - to an elastic IP address that we're
13:03 - going to create in just a second and
13:04 - this IP address is never going to change
13:07 - and for this IP address we're going to
13:09 - point this to our ec2 instance that we
13:11 - just created and whenever this instance
13:14 - gets restarted or maybe we just want to
13:18 - deploy an updated version of our code we
13:22 - can even do something like this we can
13:24 - point it to our new instance and
13:27 - everything is uh you know it's just a
13:29 - much better way so your IP addresses
13:31 - aren't changing all the time the IP
13:33 - address of course that's associated with
13:35 - your domain name so if this is confusing
13:38 - you're gonna see exactly what we're
13:39 - doing in a second it's it's really not
13:41 - that bad so go ahead and pop back in
13:44 - your AWS ec2 section and on the left
13:48 - hand menu if you scroll down to this
13:50 - network and security section you're
13:52 - going to see a link that says elastic
13:54 - IPS go ahead and click that and once you
13:57 - do you're going to see this big orange
13:59 - button right at the top right that says
14:01 - allocate elastic IP address this
14:04 - basically just means create a new
14:05 - elastic IP address that I can use now
14:09 - all of these default should be good and
14:12 - let me just make sure yep looks good now
14:15 - after this just go ahead and hit
14:16 - allocate and all right so this is kind
14:20 - of uh or I thought it took some time but
14:23 - apparently not
14:25 - um so this is your new again this is an
14:28 - elastic IP address that we can use now
14:31 - before we actually hook this up to our
14:33 - ec2 instance what I like to do is rename
14:36 - this and what I prefer is naming it the
14:39 - same thing as my ec2 instance and I
14:43 - named my ec2 instance core 2. and so I'm
14:46 - just going to name this chord to
14:48 - and there you go
14:50 - so once I have this elastic IP and I
14:54 - gave it a name
14:55 - right now it's pretty much like this
14:58 - it's not linked to any instance at all
15:00 - so what we need to do is we need to
15:02 - associate this elastic IP address to our
15:05 - instance basically the equivalent of
15:07 - creating this Arrow right here so how do
15:09 - we do that well go and make sure that
15:12 - it's selected and then under actions
15:14 - you'll see associate elastic IP address
15:18 - and what we want to do is we want to
15:20 - associate it with an instance and the
15:23 - instance is
15:25 - you can find it by the tag actually core
15:28 - 2. right there and just to make sure I
15:30 - got the instance ID correct b8bf
15:34 - and yep instance ID B8 BF
15:37 - so then actually before we click
15:41 - associate we do want to make sure that
15:43 - this is checked right here allow this
15:46 - elastic IP address to be reassociated
15:48 - and what this just means is if we ever
15:50 - spin up another instance for example
15:52 - let's say we updated our core code then
15:55 - we can just go ahead and pretty much
15:58 - just reassign it well I don't even think
15:59 - I need to explain uh reassociate it is
16:02 - like the best word to describe it so
16:04 - make sure that you associate with
16:06 - instance make sure this is checked hit
16:08 - associate and then those two are
16:10 - essentially going to be linked together
16:13 - now the cool thing about this is that's
16:16 - really all that we need to do and in
16:19 - fact to test this what we can do is we
16:21 - can actually ssh in to this instance but
16:25 - instead of using the instances public IP
16:28 - address like we did before we can
16:30 - actually just use the IP address from
16:32 - this elastic IP and we should be able to
16:35 - Shell in to our instance from that so
16:38 - what I'm going to do is copy this
16:40 - elastic IP address and then just make
16:44 - sure everything is working back in my
16:46 - terminal I'm going to go SSH
16:49 - Ubuntu at and again this is the elastic
16:52 - IP's address which should if everything
16:55 - worked properly allows to Shell into our
16:58 - ec2 instance beautiful
17:01 - all right so our elastic IP is now
17:04 - hooked up and let me pop my diagram back
17:07 - open so what we essentially have is this
17:11 - setup right here with an elastic IP tied
17:14 - to our instance but now as kind of the
17:17 - final step we need to get a domain name
17:19 - and point this to our elastic IP so to
17:24 - do that let me actually keep this tab
17:27 - open and in this tab since we really
17:30 - don't need to uh do anything with our
17:32 - instance directly anymore I'm gonna open
17:34 - route 53. so this is a kind of AWS
17:38 - anything you want to do with domain
17:39 - names and I believe from here if you
17:43 - don't have any domain name then you can
17:45 - go ahead and you know type one and go
17:47 - ahead and register it I believe it costs
17:49 - it usually costs like five or ten bucks
17:51 - a year
17:52 - and the reason that I'm not going to go
17:55 - through this process is because I
17:57 - already have quite a few domain names
17:58 - from you know previous projects and
18:00 - tutorials so on and so forth but either
18:02 - way this process is pretty simple just
18:04 - pick a domain name add it to cart click
18:06 - next next it may take
18:09 - um an hour or so to set up maybe a
18:10 - little bit longer but eventually once
18:13 - you have one purchased then you can go
18:15 - to hosted zones on the left right here
18:19 - now a hosted zone is pretty much just
18:22 - Amazon's Route 53 concept of a
18:25 - collection of domain names or a
18:27 - collection of Records
18:28 - now
18:30 - let's see what one I can use uh how
18:32 - about this fataxia IO so I believe that
18:36 - this is the one that I was using in the
18:38 - uh earlier videos however I deleted the
18:41 - ec2 instance from it so this is pretty
18:43 - much just uh the same as if you were to
18:46 - buy a domain name for the very first
18:48 - time so once you have it go ahead and
18:50 - click on it
18:51 - and what we need to do is we're going to
18:55 - be updating the a record for this domain
18:58 - name now just to kind of give you a very
19:01 - basic understanding of what these
19:03 - different records are you would think
19:05 - you know you have a domain name you just
19:07 - need to link it to an IP address so what
19:10 - the heck are all these other records
19:12 - doing well the a record is the most easy
19:14 - to understand this actually the a I
19:17 - believe does stand for address and it
19:20 - just links this domain to an IP address
19:23 - and I believe it has to be ipv4 now we
19:28 - aren't going to be touching these other
19:29 - ones but you know like I said just to
19:30 - give you a quick understanding this NS
19:32 - record right here it specifies the
19:35 - authoritative DNS server for the domain
19:37 - again you really don't need to tweak it
19:39 - at all in this SOA one this stands for
19:42 - start of authority and it just has some
19:45 - additional like admin related
19:46 - information about your main like the
19:48 - email address of the admin and like what
19:51 - when the domain was last updated so on
19:53 - and so forth but either way make sure
19:56 - that you only are tweaking the a record
20:00 - and for this we pretty much need to edit
20:03 - the record to point to our elastic IP
20:06 - so this elastic IP what we just showed
20:09 - into I'm just going to go ahead and copy
20:11 - that again make sure it's copied and
20:14 - then again go to your record make sure
20:16 - you have the a record selected and no
20:19 - subdomain we're just going to paste in
20:22 - this which is the address the IP address
20:25 - of our elastic IP
20:27 - and then all that should be good to go
20:32 - all right so now this is pointing to
20:35 - four four yada yada one three nine four
20:37 - four yada yada one three nine and this
20:40 - may take some time to actually update so
20:43 - let me find a tool online real quick all
20:45 - right so this looks like one I used
20:47 - before DNS Checker I'll just go ahead
20:49 - and do that uh show notifications
20:52 - absolutely not so
20:54 - let's check it out
20:56 - and this is just making uh sure that
20:58 - everything is up to date so when I put
21:01 - in this address right here of ataxia.io
21:04 - what I'm hoping to see is this elastic
21:07 - IP which is going to end in one three
21:09 - nine
21:10 - so I'm just going to go ahead and paste
21:12 - in this URL we're checking the a record
21:15 - I'm just going to hit search and yes it
21:17 - looks like
21:18 - that was actually a lot faster than I
21:20 - anticipated but yeah everything's good
21:22 - to go already
21:24 - now to kind of verify that everything is
21:27 - working with our domain name what we can
21:29 - do is just like we did right after we
21:32 - Associated that elastic IP we can try to
21:35 - SSH into our server again but this time
21:39 - we are going to ssh in using the domain
21:42 - name
21:43 - so that domain name was vitaxia.io
21:48 - so in here let me just go ahead and open
21:50 - up a new tab
21:54 - why is this looks a bit a bit hard to
21:57 - read There we go SSH
21:59 - Ubuntu at vitaxia.io
22:03 - all right so uh I'm getting this warning
22:06 - that said like pretty much warning
22:08 - you're being attacked something went
22:10 - wrong but
22:12 - um you probably will not see this
22:13 - warning the reason that I did is I
22:16 - already have uh this domain name of Taxi
22:19 - IO I already pretty much taught my
22:22 - computer that this was associated with
22:24 - another IP address so since I just
22:27 - changed the elastic IP that that's why
22:30 - it's like giving me all these warnings
22:32 - but um again you shouldn't see this let
22:34 - me just go ahead and fix this
22:36 - all right looking good and if anyone
22:39 - ever gets that error just know that
22:41 - there's a file on your computer called
22:42 - known hosts and it pretty much has all
22:45 - those associations built in so if you
22:48 - ever change one you pretty much just
22:49 - have to delete what it knows or delete
22:52 - that Association and then you can uh
22:54 - pretty much just shell in again but
22:56 - either way that was a unexpected part of
22:58 - this tutorial so let's get back on track
23:01 - so at this point we have our entire
23:03 - structure set up and let me just make
23:06 - this a little bit more realistic
23:08 - I'll say our domain name which is
23:12 - pataxia.io everything is linked properly
23:15 - and the last step that we need to do now
23:20 - that we do have that domain name is we
23:22 - need to go ahead and pretty much set up
23:24 - our software and by the software I mean
23:28 - this core repo right here and is part of
23:32 - the setup process whenever you run this
23:34 - script that we're about to run for the
23:35 - very first time it's going to
23:37 - automatically set up our SSL certificate
23:39 - enable https all this encryption and
23:42 - start everything up so we already wrote
23:45 - a deployment script actually let me see
23:47 - if I can
23:48 - find it right here so in core slash
23:51 - deploy.rst it goes over a lot of this
23:54 - but what we are looking for is a command
23:59 - probably somewhere near the bottom
24:04 - right here so
24:06 - again this is where we are
24:09 - you want to copy this command bash and
24:11 - what this is going to do is it's pretty
24:13 - much going to pull down our deployment
24:14 - script from this repo and just run it on
24:17 - our server so copy that
24:20 - bash hit enter and okay the domain name
24:24 - let me make sure I got everything
24:28 - copied correctly so it's going to ask
24:30 - you for some info the domain name is
24:32 - withaxia.io
24:34 - beautiful email address
24:38 - and this is needed for certbot which is
24:40 - just the bot that pretty much just sets
24:42 - up our SSL
24:44 - and okay now it's doing its thing
24:49 - and by the way this is our also set up
24:52 - to renew your SSL certificate since even
24:56 - when you go and set up a certificate for
24:59 - your domain name you need to
25:01 - periodically like renew it basically and
25:05 - it's kind of a pain if you do it
25:06 - manually but we already have logic in
25:08 - here that renews it after I forget how
25:10 - often you need to but uh it already
25:12 - handles all that for you so pretty cool
25:15 - and here we see certbot is requesting
25:18 - our certificates and it look like okay
25:21 - successfully received it uh yada yada
25:24 - everything's good to go looked uh cool
25:27 - core API is up and running beautiful
25:30 - so at this point you can go to
25:32 - vitaxia.io admin and you should have
25:35 - this blank admin page right here now if
25:39 - you're familiar with Django you know
25:40 - that uh this is going to take you to the
25:42 - admin portal however in order to get
25:44 - there you first need to create basically
25:46 - an admin user AKA a super user
25:50 - and to do that we can use this Command
25:54 - right here
25:56 - again this is going to be all in the
25:58 - documentation description below but
26:01 - Docker compose pretty much shell into
26:03 - our uh our software run the manage
26:05 - command to create super user
26:07 - and you can just call it whatever you
26:09 - want okay username I'll say Bucky
26:12 - and my email address uh you don't need
26:15 - that
26:16 - for the password
26:19 - all right super user created
26:21 - successfully and once that is done pop
26:24 - open Chrome again
26:26 - and Bucky and
26:36 - login and beautiful
26:38 - all right and that is all we need to do
26:41 - to set up our core we are now ready to
26:43 - connect to it using tnb OS
26:46 - so if you haven't already set up tmbos
26:49 - actually let me go ahead and clean up
26:52 - some of these tabs they just annoy me
26:54 - when I have too many close-ups they're
26:56 - right all right so go to the New Boston
26:58 - developers GitHub again this is uh going
27:01 - to be in a link in the description so
27:03 - either click on the link below or find
27:05 - the tnbos repo and again this is super
27:08 - easy to set up just pull it down make
27:11 - sure you run npm install and then just
27:13 - run npm start to start the project
27:16 - and as you saw I already have this uh
27:19 - little npm start hooked up to this play
27:21 - button right here but this is pretty
27:23 - much just the equivalent of running npm
27:25 - start
27:27 - and then if we wait a few seconds then
27:31 - it's going to pop up
27:34 - let me minimize this so everyone can see
27:36 - all right
27:37 - so this is already hooked up to a couple
27:41 - networks as you can see like I already
27:42 - have a bunch of data in here but just to
27:45 - kind of simulate what it's going to be
27:47 - like the first time for all of you
27:48 - running it what I'm going to do is I'm
27:51 - going to click this Dev button and I'm
27:52 - going to do clearstore and this is
27:54 - pretty much just going to wipe out all
27:55 - my existing data so now if I go ahead
27:58 - and just quit this and reopen it I will
28:01 - be at the same stage as all of you
28:06 - all right so beautiful minimize this and
28:10 - check it out
28:12 - so the very first time that you open
28:15 - tnbos you're going to be greeted with
28:17 - this prompt right here and it's going to
28:19 - give you your account number which as
28:21 - you know from the first video is just
28:23 - pretty much the ID associated with this
28:26 - device right here and
28:29 - the first thing that we need to do right
28:31 - after this is we need to copy that
28:33 - account number because in order to send
28:36 - messages on the network this account it
28:38 - needs to have messaging credits so
28:42 - if we let's say go to this network right
28:45 - here uh we can well let's just go ahead
28:48 - and add this network first now when
28:50 - adding a network your network ID is
28:52 - going to be the domain name
28:56 - so vitaxia.io the protocol is https
29:01 - um you don't need the port actually this
29:03 - is kind of a UI thing that I need to
29:06 - improve but since we have https it's
29:08 - going to default to 443 in the display
29:11 - name is just what do you want to call
29:13 - those messaging credits you can call
29:15 - them credits you can call them you know
29:17 - things whatever I'm going to call mine
29:19 - VTX I usually like to combine something
29:22 - you know just so I can more easily
29:24 - remember the network and for the logo
29:27 - let me just go ahead and steal
29:30 - all right let me just copy this image
29:32 - address
29:34 - all right looking good so now you can
29:37 - tell by this little green uh indicator
29:40 - right here that I am indeed connected to
29:42 - the network however right now I have a
29:45 - balance of zero that means I'm connected
29:47 - the server is working properly
29:49 - everything is good but I'm not going to
29:51 - be
29:52 - oh got phlegm in my throat I'm not going
29:54 - to be able to send any messages right
29:56 - now so in order to send messages or add
29:59 - messaging credits again I just want to
30:01 - make sure I have my account number
30:03 - copied because what I'm going to do is
30:06 - hop back in Django admin
30:08 - and under my accounts I'm just going to
30:10 - add this account right here and I'll
30:13 - give it a balance of really whatever you
30:15 - want
30:16 - we'll say 10 000 right there and when
30:19 - you hit save and continue actually check
30:21 - this out
30:22 - you should see your balance update in
30:24 - real time you don't need to refresh it
30:26 - or restart the app or anything and let
30:29 - me just show you real quick that that
30:31 - does indeed update let's say I change
30:33 - this to like
30:34 - 25 000 save and continue you can see on
30:37 - the left side of the screen I updated
30:38 - just like that and the reason that this
30:40 - is updating is because
30:42 - this is actually connected to our core
30:45 - through websocket and we don't need to
30:49 - like refetch everything any changes to
30:51 - this account is automatically pushed
30:52 - down to tnb OS
30:54 - it's pretty cool and there we go so if
30:57 - you want to go ahead and test everything
30:58 - out now then you can install this
31:01 - software on another device that you have
31:03 - at home maybe a laptop or something and
31:05 - then share this account number with that
31:09 - add it as an account and well you
31:10 - already saw how the chat application
31:12 - worked in the last video however since
31:15 - we're going to be creating an app with a
31:16 - speed test we're going to be getting
31:18 - into all that anyways so I figured I'd
31:20 - save it for another video but point
31:22 - being once you have your network hooked
31:24 - up see that little Green Dot and see
31:26 - your balance right here you are good to
31:29 - go
31:30 - so that was a great video uh I had a
31:34 - great time I don't know about y'all but
31:35 - in the next video we'll get started on
31:37 - creating that speed test app looking
31:38 - forward to it I'll see you then

Cleaned transcript:

all right so now that we have a pretty good understanding of the overall architecture and we saw the MVP app in action let's go ahead and figure out how to spin everything up from scratch starting with the core and just a little heads up before we get started for this tutorial I actually have a little cheat sheet a Google doc on the right side of my screen that I have all the commands already however I plan eventually on updating the readme's right here right on the repo now I don't know if I'm gonna have time to do that before I publish this video but either way to save you all time from you know uh pretty much just uh let you copy the commands from some document and paste them in so I don't have to type them all out manually just go ahead and check the description below and there'll be some guide there either to a Google doc or a readme and on that note let's go ahead and get started so the first thing that we need to do is spin up an ec2 instance so I assume that anyone following this has a basic understanding of AWS if not I'll try to take things a little bit slow but go ahead if you don't sign up for AWS account and go to this ec2 section right here and I'll just go to instances running although there are a couple different locations you can launch a new instance from but anyways find this launch instances button and what we are going to do first is just give it a name now the name of this repo is core and I already have a server named core it's for the New Boston network but I'm just gonna call this core let me just call this core 2. uh this name doesn't really matter it's just so in AWS you can pretty much differentiate your servers pretty much just give it a label and then down here I'm going to click on Ubuntu actually I'm going to click browse more Amis and what we are looking for is Ubuntu Server 20.04 hvm 64bit right there and make sure that it's uh the x86 and all right so got that selected let's go down here uh T2 micro it's uh it's one of the smaller ones but that's fine for us keep here login I say that like I'm Canadian keep here all right uh well key pair do I want to use let's go with this one Bucky iMac if you don't have a key pair then go ahead and wow my Canadian accent is really uh shining through here but if you don't have one you can create one right there and let's see what else we need to do all right so down here we're gonna uh just click some settings for the security group and this one allow SSH traffic of course we want to be able to Shell in and also allow https and http and the reason that we need both of these is because before we have our certificate we're gonna need to uh pretty much reach out to the servicing communicate with HTTP however after to get a secure connection from tnb OS and the client we're going to be using https so anyways just make sure you have both of those and that should be it's all of the other defaults are good we only want one instance let's launch this bad boy our eyes successfully initiated lots of instance let's just go ahead and click this to check it out and if you select this then your details will pop up below and right now it is pretty much uh booting up pending right here so it's going to take a minute or so I'm just gonna pause the video and I'll come back when everything is up and running all right so that took about 10 seconds very Snappy and now that we have it up and running I'm just going to go ahead and copy the public IP address and then I'm going to open my terminal and to connect to it SSH Ubuntu at that IP address enter yes and all right good to go let's clear the screen and okay so just a little background on what we're doing and pop Chrome back open so like I said before this software is written in Django however it uses some other services as well for example it uses nginx and postgres for the database and I mention all this because before we can just install the software straight up we need to install Docker now once we have that installed we can then pull down the dockerize version of this and all this is already set up good to go we already built it so either way just want to give you a little heads up of what we're doing here and for this next step what I'm going to be doing is essentially going through this guide the official Docker guide however there are some things in here that you can kind of skip over so instead of just following along with this since not everything applies to our environment I have a little cheat sheet that I'll just go through but I say that because if you ever get lost or maybe something's out of date from this tutorial then I would refer back to the docker documentation of installing Docker engine on Ubuntu all right so let me go ahead and plop open my terminal and let's go ahead and get started so the first thing that it recommends is uninstalling any existing versions of Docker and this is going to report that it's unable to find them that's okay uh this is pretty much just ensuring that we don't have any existing versions installed already just what we want now let me go ahead and clear that out now before we install this for the very first time on this host machine right here what we need to do is we need to set up the docker repository and this is just going to allow us to communicate with Docker install and update Docker and before we do that our famous uh kind of the famous Ubuntu setup we're going to make sure we have the package cache updated and we upgrade all existing packages so let me just wait for this all right so that took about a minute I would guess now after everything is updated I'm gonna go ahead and run this Command right here and what these packages do is they allow app to use a repository over https which of course is the docker repository and all right nice and easy now after this we can go ahead and add docker's official gpg key which is going to allow for the secure transmission of data so first we're going to make this directory and then run this command to pull it down or download it and all right uh once that's set up we can use this command right here and what this command does is it just finishes setting up the Repository so now that we got that taken care of let me go ahead and clear the screen and one thing that I saw and I don't know if this is necessary but I figure it doesn't hurt is I'm gonna go ahead and update the app package index again again I'm not sure if that's necessary but I saw it in documentation and well I figured it didn't hurt so might as well just go ahead and do it and after this I'm going to go ahead and install the latest version of Docker engine and some other things such as Docker compose that we're going to need so let me just go ahead and do that shouldn't take long and by the way uh kind of a plug for my other tutorial series if you are not familiar with Docker or you want to learn more like what is Docker engine what is Docker compose I highly recommend checking out my Docker series and our rights once that's done go ahead and clear it now at this point we should have Docker engine Docker compose pretty much everything set up we can go ahead and first once everything is installed go ahead and start the docker service and okay we didn't get any errors that's good and now we just want to verify that everything is set up properly by running a simple hello world image so go ahead and run this command hit enter and if everything works properly again it's going to pull it down since it doesn't have it in Cache already and it's going to say hello from Docker you should see that somewhere that means we are good to go now another thing that happened that I didn't really discuss kind of happened in the background is that right now Docker engine is installed and running and what also happen is a group called Docker was created but no users were added to it yet now we are going to need that group and what we need to do is we actually need to add your user to the docker group so we're just going to go ahead and add to group the user that you're using right now and once you do that we can go ahead and exit and then we want to pretty much shell back in to make sure we got all the updated permissions so I'm gonna exit clear and then just shell back in all right so now that we're back in we should now have permissions for the docker group and at this point we can now pull the actual images that we're going to need for the core repo so the first image that we're going to pull we're actually going to pull down two of them uh the first one is pretty much the the source code or the server that you would think of pretty much all that Django code and while this is kind of pulling down uh just to talk to you about the other image that we're going to be pulling down that's our reverse proxy and that's going to be the essentially the nginx service that sits in front of our code and yeah uh it's pretty much all I have to talk about anything else I can talk about all this is happening uh oh I got a story for you so um I went to Dunkin Donuts probably about a month ago it's November 10th now probably at the beginning of October check this out and here let me go ahead okay let me go ahead and uh uh pull this again this is the nginx service basically and I'll go ahead and run this and then I'll finish my story so man that was way too quick okay I'll tell you at the end the Dunkin Donuts story it's it's pretty incredible as far as you know how exciting kind of dunking down the story get but uh you know a lot of people complain when I tell stories in my tutorials just thought I'd have some more time there all right so now we should have both those images pulled down and we can actually just verify that if we type in Docker images of course we have that hello world one testing but all right now before we do any more server setup what we first need to do is we need to associate an elastic IP address with our ec2 instance so why do we need to do that now the reason that we need to do it now is because this core is going to be using https now as part of the additional server setup we need to have a domain name ready to pretty much uh configure all our SSS certificate encryption so on and so forth you'll see in just a bit but just to make it super clear what's going on right now I went ahead and I paused the video and I made this little two second diagram to show you what we're doing so we already have our ec2 instance we are shoveled into it boom good to go and yes I know these uh IP addresses aren't valid just uh they're just examples I just don't want anyone to yell at me for it okay so we have our ec2 instance and what we can do if we wanted to is we could have a domain name set up and we can just point that domain name to this instance for example whenever someone went to the new boston.com they could just hit our instance and that's fine it's gonna work at least for the time being so on and so forth however the problem with that is whenever you have an ec2 instance the public IP address associated with that instance is not static in other words if we ever stop this instance and restart it AWS is going to assign it a new public IP address so that means we're going to have to go back in our um print pretty much our DNS configuration update it to a new IP and it's pretty much just a pain so instead a much better solution to avoid all these headaches is using something called an elastic IP and what this is is it's basically an IP address that's tied to a reserved or static public IP address and with this we can point this to any ec2 instance that we want so the setup that we're eventually gonna structure whatever you want to call it is that we're going to have a domain name and we're always going to point it to an elastic IP address that we're going to create in just a second and this IP address is never going to change and for this IP address we're going to point this to our ec2 instance that we just created and whenever this instance gets restarted or maybe we just want to deploy an updated version of our code we can even do something like this we can point it to our new instance and everything is uh you know it's just a much better way so your IP addresses aren't changing all the time the IP address of course that's associated with your domain name so if this is confusing you're gonna see exactly what we're doing in a second it's it's really not that bad so go ahead and pop back in your AWS ec2 section and on the left hand menu if you scroll down to this network and security section you're going to see a link that says elastic IPS go ahead and click that and once you do you're going to see this big orange button right at the top right that says allocate elastic IP address this basically just means create a new elastic IP address that I can use now all of these default should be good and let me just make sure yep looks good now after this just go ahead and hit allocate and all right so this is kind of uh or I thought it took some time but apparently not um so this is your new again this is an elastic IP address that we can use now before we actually hook this up to our ec2 instance what I like to do is rename this and what I prefer is naming it the same thing as my ec2 instance and I named my ec2 instance core 2. and so I'm just going to name this chord to and there you go so once I have this elastic IP and I gave it a name right now it's pretty much like this it's not linked to any instance at all so what we need to do is we need to associate this elastic IP address to our instance basically the equivalent of creating this Arrow right here so how do we do that well go and make sure that it's selected and then under actions you'll see associate elastic IP address and what we want to do is we want to associate it with an instance and the instance is you can find it by the tag actually core 2. right there and just to make sure I got the instance ID correct b8bf and yep instance ID B8 BF so then actually before we click associate we do want to make sure that this is checked right here allow this elastic IP address to be reassociated and what this just means is if we ever spin up another instance for example let's say we updated our core code then we can just go ahead and pretty much just reassign it well I don't even think I need to explain uh reassociate it is like the best word to describe it so make sure that you associate with instance make sure this is checked hit associate and then those two are essentially going to be linked together now the cool thing about this is that's really all that we need to do and in fact to test this what we can do is we can actually ssh in to this instance but instead of using the instances public IP address like we did before we can actually just use the IP address from this elastic IP and we should be able to Shell in to our instance from that so what I'm going to do is copy this elastic IP address and then just make sure everything is working back in my terminal I'm going to go SSH Ubuntu at and again this is the elastic IP's address which should if everything worked properly allows to Shell into our ec2 instance beautiful all right so our elastic IP is now hooked up and let me pop my diagram back open so what we essentially have is this setup right here with an elastic IP tied to our instance but now as kind of the final step we need to get a domain name and point this to our elastic IP so to do that let me actually keep this tab open and in this tab since we really don't need to uh do anything with our instance directly anymore I'm gonna open route 53. so this is a kind of AWS anything you want to do with domain names and I believe from here if you don't have any domain name then you can go ahead and you know type one and go ahead and register it I believe it costs it usually costs like five or ten bucks a year and the reason that I'm not going to go through this process is because I already have quite a few domain names from you know previous projects and tutorials so on and so forth but either way this process is pretty simple just pick a domain name add it to cart click next next it may take um an hour or so to set up maybe a little bit longer but eventually once you have one purchased then you can go to hosted zones on the left right here now a hosted zone is pretty much just Amazon's Route 53 concept of a collection of domain names or a collection of Records now let's see what one I can use uh how about this fataxia IO so I believe that this is the one that I was using in the uh earlier videos however I deleted the ec2 instance from it so this is pretty much just uh the same as if you were to buy a domain name for the very first time so once you have it go ahead and click on it and what we need to do is we're going to be updating the a record for this domain name now just to kind of give you a very basic understanding of what these different records are you would think you know you have a domain name you just need to link it to an IP address so what the heck are all these other records doing well the a record is the most easy to understand this actually the a I believe does stand for address and it just links this domain to an IP address and I believe it has to be ipv4 now we aren't going to be touching these other ones but you know like I said just to give you a quick understanding this NS record right here it specifies the authoritative DNS server for the domain again you really don't need to tweak it at all in this SOA one this stands for start of authority and it just has some additional like admin related information about your main like the email address of the admin and like what when the domain was last updated so on and so forth but either way make sure that you only are tweaking the a record and for this we pretty much need to edit the record to point to our elastic IP so this elastic IP what we just showed into I'm just going to go ahead and copy that again make sure it's copied and then again go to your record make sure you have the a record selected and no subdomain we're just going to paste in this which is the address the IP address of our elastic IP and then all that should be good to go all right so now this is pointing to four four yada yada one three nine four four yada yada one three nine and this may take some time to actually update so let me find a tool online real quick all right so this looks like one I used before DNS Checker I'll just go ahead and do that uh show notifications absolutely not so let's check it out and this is just making uh sure that everything is up to date so when I put in this address right here of ataxia.io what I'm hoping to see is this elastic IP which is going to end in one three nine so I'm just going to go ahead and paste in this URL we're checking the a record I'm just going to hit search and yes it looks like that was actually a lot faster than I anticipated but yeah everything's good to go already now to kind of verify that everything is working with our domain name what we can do is just like we did right after we Associated that elastic IP we can try to SSH into our server again but this time we are going to ssh in using the domain name so that domain name was vitaxia.io so in here let me just go ahead and open up a new tab why is this looks a bit a bit hard to read There we go SSH Ubuntu at vitaxia.io all right so uh I'm getting this warning that said like pretty much warning you're being attacked something went wrong but um you probably will not see this warning the reason that I did is I already have uh this domain name of Taxi IO I already pretty much taught my computer that this was associated with another IP address so since I just changed the elastic IP that that's why it's like giving me all these warnings but um again you shouldn't see this let me just go ahead and fix this all right looking good and if anyone ever gets that error just know that there's a file on your computer called known hosts and it pretty much has all those associations built in so if you ever change one you pretty much just have to delete what it knows or delete that Association and then you can uh pretty much just shell in again but either way that was a unexpected part of this tutorial so let's get back on track so at this point we have our entire structure set up and let me just make this a little bit more realistic I'll say our domain name which is pataxia.io everything is linked properly and the last step that we need to do now that we do have that domain name is we need to go ahead and pretty much set up our software and by the software I mean this core repo right here and is part of the setup process whenever you run this script that we're about to run for the very first time it's going to automatically set up our SSL certificate enable https all this encryption and start everything up so we already wrote a deployment script actually let me see if I can find it right here so in core slash deploy.rst it goes over a lot of this but what we are looking for is a command probably somewhere near the bottom right here so again this is where we are you want to copy this command bash and what this is going to do is it's pretty much going to pull down our deployment script from this repo and just run it on our server so copy that bash hit enter and okay the domain name let me make sure I got everything copied correctly so it's going to ask you for some info the domain name is withaxia.io beautiful email address and this is needed for certbot which is just the bot that pretty much just sets up our SSL and okay now it's doing its thing and by the way this is our also set up to renew your SSL certificate since even when you go and set up a certificate for your domain name you need to periodically like renew it basically and it's kind of a pain if you do it manually but we already have logic in here that renews it after I forget how often you need to but uh it already handles all that for you so pretty cool and here we see certbot is requesting our certificates and it look like okay successfully received it uh yada yada everything's good to go looked uh cool core API is up and running beautiful so at this point you can go to vitaxia.io admin and you should have this blank admin page right here now if you're familiar with Django you know that uh this is going to take you to the admin portal however in order to get there you first need to create basically an admin user AKA a super user and to do that we can use this Command right here again this is going to be all in the documentation description below but Docker compose pretty much shell into our uh our software run the manage command to create super user and you can just call it whatever you want okay username I'll say Bucky and my email address uh you don't need that for the password all right super user created successfully and once that is done pop open Chrome again and Bucky and login and beautiful all right and that is all we need to do to set up our core we are now ready to connect to it using tnb OS so if you haven't already set up tmbos actually let me go ahead and clean up some of these tabs they just annoy me when I have too many closeups they're right all right so go to the New Boston developers GitHub again this is uh going to be in a link in the description so either click on the link below or find the tnbos repo and again this is super easy to set up just pull it down make sure you run npm install and then just run npm start to start the project and as you saw I already have this uh little npm start hooked up to this play button right here but this is pretty much just the equivalent of running npm start and then if we wait a few seconds then it's going to pop up let me minimize this so everyone can see all right so this is already hooked up to a couple networks as you can see like I already have a bunch of data in here but just to kind of simulate what it's going to be like the first time for all of you running it what I'm going to do is I'm going to click this Dev button and I'm going to do clearstore and this is pretty much just going to wipe out all my existing data so now if I go ahead and just quit this and reopen it I will be at the same stage as all of you all right so beautiful minimize this and check it out so the very first time that you open tnbos you're going to be greeted with this prompt right here and it's going to give you your account number which as you know from the first video is just pretty much the ID associated with this device right here and the first thing that we need to do right after this is we need to copy that account number because in order to send messages on the network this account it needs to have messaging credits so if we let's say go to this network right here uh we can well let's just go ahead and add this network first now when adding a network your network ID is going to be the domain name so vitaxia.io the protocol is https um you don't need the port actually this is kind of a UI thing that I need to improve but since we have https it's going to default to 443 in the display name is just what do you want to call those messaging credits you can call them credits you can call them you know things whatever I'm going to call mine VTX I usually like to combine something you know just so I can more easily remember the network and for the logo let me just go ahead and steal all right let me just copy this image address all right looking good so now you can tell by this little green uh indicator right here that I am indeed connected to the network however right now I have a balance of zero that means I'm connected the server is working properly everything is good but I'm not going to be oh got phlegm in my throat I'm not going to be able to send any messages right now so in order to send messages or add messaging credits again I just want to make sure I have my account number copied because what I'm going to do is hop back in Django admin and under my accounts I'm just going to add this account right here and I'll give it a balance of really whatever you want we'll say 10 000 right there and when you hit save and continue actually check this out you should see your balance update in real time you don't need to refresh it or restart the app or anything and let me just show you real quick that that does indeed update let's say I change this to like 25 000 save and continue you can see on the left side of the screen I updated just like that and the reason that this is updating is because this is actually connected to our core through websocket and we don't need to like refetch everything any changes to this account is automatically pushed down to tnb OS it's pretty cool and there we go so if you want to go ahead and test everything out now then you can install this software on another device that you have at home maybe a laptop or something and then share this account number with that add it as an account and well you already saw how the chat application worked in the last video however since we're going to be creating an app with a speed test we're going to be getting into all that anyways so I figured I'd save it for another video but point being once you have your network hooked up see that little Green Dot and see your balance right here you are good to go so that was a great video uh I had a great time I don't know about y'all but in the next video we'll get started on creating that speed test app looking forward to it I'll see you then
