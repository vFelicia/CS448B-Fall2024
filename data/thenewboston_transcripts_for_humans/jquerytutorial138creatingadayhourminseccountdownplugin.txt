With timestamps:

00:00 - uh but I guess this isn't really a
00:01 - problem it you know it
00:03 - shouldn't add too much speed to uh the
00:06 - application so if uh is not a number
00:08 - event
00:10 - date which essentially means if it is a
00:13 - number uh then we display these uh now
00:16 - when you see a refresh we just get these
00:18 - default zero values here as opposed to
00:21 - This n an error or this Nan value uh so
00:24 - now when I remove this uh this eval this
00:27 - statement here evaluates to true and and
00:30 - the numbers are placed in corresponding
00:32 - to their day hour minute or second so
00:36 - let's go ahead and focus on this
00:37 - callback function now what we actually
00:39 - need to do is create um an if
00:42 - statement um above our uh or the top of
00:45 - our
00:46 - function and what this will do is it
00:48 - will calculate whether the event date is
00:51 - less than or equal to the current date
00:53 - and if so then we can we can send our
00:55 - callback function and clear our interval
00:58 - and it's important that we clear the
00:59 - interval or the interval carry on you
01:01 - know counting down uh these values in
01:04 - the background so what we want to do is
01:06 - we want to say if event date is less
01:09 - than or equal to the current date that
01:12 - means that the event has taken place or
01:14 - the event or the you know it's counted
01:17 - down to the event that we've specified
01:19 - uh so here the first thing that we want
01:21 - to do is call back and the second is
01:24 - clear interval so clear interval is
01:26 - pretty easy all we do is we um use the
01:30 - clear interval function and we specify
01:32 - the interval name and here I've called
01:35 - the interval interval by setting uh this
01:37 - interval here to this interval variable
01:40 - so we can go ahead and just Place
01:42 - interval in there now let's go ahead and
01:44 - take a look at what happens uh obviously
01:46 - we haven't called anything back uh but
01:48 - let's go ahead and change this to uh
01:51 - today's date which is the 8th of August
01:53 - and let's change it to uh we're at 16002
01:56 - at the
01:57 - moment so we'll change this to
02:01 - 1603 okay so you can see that we've got
02:03 - 40 seconds um to count down so what's
02:06 - going to happen here is that when the
02:08 - event date is less than or equal to the
02:10 - current date so our a when this reaches
02:12 - zero um you know according to the
02:15 - calculation we're going to clear the
02:16 - interval so the countdown will stop if
02:19 - we didn't have this line in it would
02:20 - carry on and everything would mess up
02:22 - because we'd be counting into minus
02:24 - figures uh so let's just wait for this
02:26 - countdown to reach zero and you'll see
02:28 - that all that will happen is that as it
02:31 - does reach the current date um we will
02:33 - just stop the counter so the interval
02:35 - will be cleared uh and this will stop
02:37 - counting down I.E the function will stop
02:40 - being uh executed every 1 second uh so
02:43 - we'll just wait for this to reach
02:45 - zero and there we go you can see that it
02:48 - stopped there so the interval has been
02:49 - stopped and we've been left at z0 days
02:52 - hours minutes seconds so you could leave
02:54 - it at this state however you might want
02:57 - to perform an action once this uh
02:59 - interval uh once this um has reached its
03:02 - current date or reached the event date
03:04 - so we want to uh actually call back so
03:07 - I'm going to say callback in fact let's
03:09 - actually specify a parameter or an
03:11 - option up here first uh which is
03:14 - callback and in here we want to say
03:16 - callback do
03:18 - call this so what will happen is is that
03:21 - we can specify this when we do it in
03:23 - ext.js and then when the event date is
03:26 - less than or equal to current date we've
03:27 - already seen the clear interval but we
03:29 - call back and therefore we execute the
03:32 - function that's associated with this
03:33 - here so what we can do now is create a
03:36 - function
03:37 - here and this here is equal to or is the
03:42 - parameter callback so when we send this
03:44 - callback here when we send call uh this
03:48 - will this function will run so if we
03:50 - come down and let's
03:54 - alert done so much like you do with uh
03:57 - predefined uh features in jQuery we uh
04:01 - just doing it ourselves essentially and
04:02 - this is how we would do it ourselves uh
04:04 - so let's go ahead and change this to say
04:07 - 16005 uh and refresh you can see that
04:09 - we've got 37 36 seconds uh so we'll just
04:12 - wait for that to count down and when we
04:16 - do get to the event date like we've seen
04:18 - by clearing the interval this time we
04:20 - send the call back it sends it to here
04:23 - which is our function and we run this
04:26 - line inside of this callback parameter
04:28 - uh so let's just wait for that to reach
04:30 - its uh it0 seconds and then we'll see
04:34 - this alert dialogue Box come
04:36 - up a lot of waiting around but doesn't
04:41 - matter and we're nearly there so when it
04:44 - gets to one we send the call back and
04:47 - the call back function is that we alert
04:49 - this done dialogue box so we can see
04:51 - that that's happened there now what I'm
04:52 - going to do just is as an example is say
04:56 - countdown. text which is the current
04:58 - element that we're working with
05:00 - uh inside of here uh I'm just going to
05:03 - say we're live and just Escape that
05:07 - character there uh so now what's going
05:09 - to happen is when we specify this again
05:11 - in
05:13 - here and when we refresh and we wait for
05:15 - the countdown to happen uh this will be
05:17 - performed now I'll talk a bit about why
05:19 - it's useful that we actually incorporate
05:22 - um callback functions into our plug-in
05:24 - and this is because we want to make our
05:26 - plugins as reusable as possible we want
05:29 - users to be able to not have to go into
05:30 - the plug-in code and modify what they
05:32 - want to happen so by using a callback
05:35 - function the user can say Well when the
05:37 - date reaches its spe specific dat I want
05:39 - to carry out a particular action so they
05:42 - can Define this themselves and extend
05:44 - our plug-in without us having to or
05:46 - without them having to go uh and modify
05:48 - it so you can see now that the text has
05:50 - changed to we're live so if we were to
05:53 - say release this as an official Plugin
05:55 - or you know send it to our friends to
05:57 - use or give it to someone else in our
05:58 - workplace to use use all they have to do
06:01 - is declare the uh the plug-in uh which
06:03 - we've already created we could have had
06:05 - it minified uh and
06:07 - zipped and uh all they need to do is
06:10 - Define a date and a callback function
06:12 - they can specify their own date which
06:13 - obviously has to be a correct um a
06:15 - correct string and then they can create
06:18 - a callback function to do what they want
06:20 - to do when the date has reached so
06:22 - that's how we create our countdown
06:24 - function in jQuery and how we can make
06:26 - it usable uh and reusable uh using this
06:29 - option here here and this callback
06:30 - function here

Cleaned transcript:

uh but I guess this isn't really a problem it you know it shouldn't add too much speed to uh the application so if uh is not a number event date which essentially means if it is a number uh then we display these uh now when you see a refresh we just get these default zero values here as opposed to This n an error or this Nan value uh so now when I remove this uh this eval this statement here evaluates to true and and the numbers are placed in corresponding to their day hour minute or second so let's go ahead and focus on this callback function now what we actually need to do is create um an if statement um above our uh or the top of our function and what this will do is it will calculate whether the event date is less than or equal to the current date and if so then we can we can send our callback function and clear our interval and it's important that we clear the interval or the interval carry on you know counting down uh these values in the background so what we want to do is we want to say if event date is less than or equal to the current date that means that the event has taken place or the event or the you know it's counted down to the event that we've specified uh so here the first thing that we want to do is call back and the second is clear interval so clear interval is pretty easy all we do is we um use the clear interval function and we specify the interval name and here I've called the interval interval by setting uh this interval here to this interval variable so we can go ahead and just Place interval in there now let's go ahead and take a look at what happens uh obviously we haven't called anything back uh but let's go ahead and change this to uh today's date which is the 8th of August and let's change it to uh we're at 16002 at the moment so we'll change this to 1603 okay so you can see that we've got 40 seconds um to count down so what's going to happen here is that when the event date is less than or equal to the current date so our a when this reaches zero um you know according to the calculation we're going to clear the interval so the countdown will stop if we didn't have this line in it would carry on and everything would mess up because we'd be counting into minus figures uh so let's just wait for this countdown to reach zero and you'll see that all that will happen is that as it does reach the current date um we will just stop the counter so the interval will be cleared uh and this will stop counting down I.E the function will stop being uh executed every 1 second uh so we'll just wait for this to reach zero and there we go you can see that it stopped there so the interval has been stopped and we've been left at z0 days hours minutes seconds so you could leave it at this state however you might want to perform an action once this uh interval uh once this um has reached its current date or reached the event date so we want to uh actually call back so I'm going to say callback in fact let's actually specify a parameter or an option up here first uh which is callback and in here we want to say callback do call this so what will happen is is that we can specify this when we do it in ext.js and then when the event date is less than or equal to current date we've already seen the clear interval but we call back and therefore we execute the function that's associated with this here so what we can do now is create a function here and this here is equal to or is the parameter callback so when we send this callback here when we send call uh this will this function will run so if we come down and let's alert done so much like you do with uh predefined uh features in jQuery we uh just doing it ourselves essentially and this is how we would do it ourselves uh so let's go ahead and change this to say 16005 uh and refresh you can see that we've got 37 36 seconds uh so we'll just wait for that to count down and when we do get to the event date like we've seen by clearing the interval this time we send the call back it sends it to here which is our function and we run this line inside of this callback parameter uh so let's just wait for that to reach its uh it0 seconds and then we'll see this alert dialogue Box come up a lot of waiting around but doesn't matter and we're nearly there so when it gets to one we send the call back and the call back function is that we alert this done dialogue box so we can see that that's happened there now what I'm going to do just is as an example is say countdown. text which is the current element that we're working with uh inside of here uh I'm just going to say we're live and just Escape that character there uh so now what's going to happen is when we specify this again in here and when we refresh and we wait for the countdown to happen uh this will be performed now I'll talk a bit about why it's useful that we actually incorporate um callback functions into our plugin and this is because we want to make our plugins as reusable as possible we want users to be able to not have to go into the plugin code and modify what they want to happen so by using a callback function the user can say Well when the date reaches its spe specific dat I want to carry out a particular action so they can Define this themselves and extend our plugin without us having to or without them having to go uh and modify it so you can see now that the text has changed to we're live so if we were to say release this as an official Plugin or you know send it to our friends to use or give it to someone else in our workplace to use use all they have to do is declare the uh the plugin uh which we've already created we could have had it minified uh and zipped and uh all they need to do is Define a date and a callback function they can specify their own date which obviously has to be a correct um a correct string and then they can create a callback function to do what they want to do when the date has reached so that's how we create our countdown function in jQuery and how we can make it usable uh and reusable uh using this option here here and this callback function here
