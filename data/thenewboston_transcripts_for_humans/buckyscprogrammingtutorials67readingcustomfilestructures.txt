With timestamps:

00:00 - what is going on guys welcome to your
00:01 - let's see sixty seventh C++ tutorial and
00:04 - in this tutorial I'm going to be
00:06 - teaching guys how to read custom data so
00:10 - in the last story what we did is let me
00:12 - scroll to my desktop watermelon
00:14 - we created this players text file and
00:17 - what it did is basically allowed us to
00:19 - create our own custom file structure and
00:23 - what we did is we were making our
00:25 - computer game with a bunch of different
00:27 - players we gave them an integer as the
00:30 - ID number a name which was a string and
00:33 - their bank account which was of course a
00:35 - double so now we have all our data right
00:38 - here and it's laid out in a very
00:40 - specific way no other program could
00:42 - really understand what this data is used
00:45 - for except our program so now that we
00:48 - have that data we need to be able to
00:50 - read it specifically in our own custom
00:53 - way so it's a little bit different than
00:55 - writing it for a couple of reasons which
00:57 - I'm going to be talking about so the
00:59 - first thing I want to stress to you guys
01:00 - is you can't use o F stream Oh F is for
01:05 - outputting data to a string for example
01:08 - when you have text and you want to
01:10 - output it to a file or write it to a
01:13 - file whenever you want to read data in
01:15 - from a file you need if' stream this
01:19 - allows you to take data from a file and
01:21 - read it into you know the computer's
01:23 - memory or whatever so it's the opposite
01:25 - of Oh F stream Oh F is for writing that
01:27 - a to a file i F is for reading data from
01:30 - a file so then you go ahead and create
01:33 - your file object I'm just going to mine
01:34 - the file and then of course is a
01:37 - constructor optional optional
01:39 - constructor you can take the name of
01:41 - that file so players dot text was the
01:44 - name of that file
01:46 - you can either create the text file
01:49 - document or excuse me what am I going to
01:51 - say the file object on one line of code
01:54 - or break it up into I always like to put
01:57 - it on one line of code just like when we
01:59 - were writing to a file so aside from
02:02 - that what we're going to be doing is
02:04 - we're going to be reading the data from
02:06 - that document so remember that document
02:09 - have three pieces information in it on
02:11 - each row it had an ID number a name in
02:14 - the amount of money so let's go ahead
02:16 - and make variables to hold that data
02:17 - into ID and then we'll make string name
02:21 - to store their name and double money to
02:25 - store their you know bank account
02:26 - information so basically how we're going
02:30 - to do that is this we're going to create
02:31 - a while loop in the wallet you can loop
02:34 - through each piece of information
02:35 - whether it's their ID number their name
02:37 - or their money and it's going to store
02:39 - it in a variable and whenever we have
02:41 - that information stored in the variable
02:43 - is we can do you know whatever you want
02:44 - that we can load it into our computer
02:47 - game we can just go ahead and print it
02:49 - out on the screen we can go ahead and
02:51 - send it to database on the internet but
02:53 - basically what we have to do first is
02:55 - take that data from the file and we need
02:58 - to store it on variables in our program
03:01 - so I want to talk to you guys about how
03:05 - we're going to do this remember I said
03:08 - in the last tutorial that every file has
03:10 - end a file marker and C++ pretty much is
03:15 - going to run this program until it gets
03:17 - to the end of file marker and then when
03:20 - it gets to the end it's going to return
03:22 - something called a null pointer so let
03:24 - me go ahead and actually code this and
03:26 - then I can explain what I'm talking
03:27 - about so just like before whenever we
03:31 - were you know whenever you use like cin
03:33 - to get information from the keyboard and
03:35 - then you could store it in variables
03:37 - like this well now we're getting
03:39 - information from the file so we go ahead
03:41 - and type the file and that's where the
03:43 - information is coming from and we're
03:45 - going to store an ID the first piece of
03:48 - information and the second piece of
03:49 - information we're going to store name
03:51 - and the third piece of information we're
03:53 - going to store in money so it's
03:55 - basically going to loop through this
03:57 - while loop and
03:58 - look at the file each time and every
04:00 - time it gets the new piece of
04:01 - information it's going to store an ID
04:03 - name and money now let me say this
04:08 - whenever you're working with files
04:10 - there's something called a file pointer
04:13 - let me go ahead and open my document
04:16 - again and I could probably show it to
04:18 - you guys really easily or it's a
04:20 - watermelon players so whenever you're
04:24 - working with files you have something
04:26 - called a file pointer now the job of
04:28 - this file pointer is to keep track of
04:30 - where in the file C++ is working with so
04:34 - what it's going to do is this file
04:36 - pointer let me go ahead and skinny up my
04:39 - program a little bit is going to start
04:40 - at the very beginning and by the way the
04:42 - end of file pointer is what right there
04:44 - where my cursor is but anyways your file
04:47 - pointer always starts at the very
04:48 - beginning what this loop is going to do
04:51 - right now is it's going to read the
04:53 - first piece of information so it's going
04:55 - to see right there that's the first
04:57 - piece of information that number one
04:59 - right there is what I want to store an
05:01 - ID so next it says alright this next
05:04 - piece of information store a name so
05:07 - it's going to scroll the file pointer is
05:09 - going to go to this next piece of
05:10 - information and it's going to see this
05:12 - one right here Bucky should be stored in
05:14 - name and then it's going to say all
05:16 - right now the next piece of information
05:18 - which is this right here I'm supposed to
05:21 - store this in the variable money so
05:23 - that's what's going to happen the first
05:25 - time this program loops through so the
05:28 - next time it loops through the file
05:29 - pointer is going to be right here so
05:31 - that's why we didn't have to change any
05:33 - line of code right here because we're
05:35 - working with the same object yet it
05:38 - knows the next piece of information is
05:40 - this too because the file pointer the
05:43 - next time this loop runs is going to be
05:45 - at the beginning of the next line or at
05:47 - the end of this line pretty much the
05:49 - same spot so that is how the file
05:51 - pointer is going to be working and by
05:53 - the way it actually is called the file
05:55 - pointer so you know I'm not making that
05:56 - up so that's why this loop is going to
05:58 - run fine each time so now that we have
06:02 - the correct pieces of information stored
06:04 - an ID name and money we can just go
06:06 - ahead and
06:07 - if we were making a game or something we
06:09 - would want to load them into the game
06:10 - but for now let's just go ahead and
06:11 - print them out on the screen so see out
06:13 - / now ID and then go ahead and I'm going
06:17 - to make a comma-separated list instead
06:19 - of you know spaces because you know if
06:21 - you're working with Excel well nevermind
06:24 - oh they use comma separated list but
06:27 - anyways I just like how it looks so the
06:30 - next piece of information is name and
06:32 - I'm just going to add a comma right
06:35 - there
06:35 - and lastly what is it money
06:39 - so after this I'm just going to go ahead
06:43 - and end that line and whenever you run
06:45 - this program it should work just fine so
06:48 - what it did is it read that file from
06:51 - the txt file one Bucky sixty sixty five
06:54 - point four seven and it did what we
06:57 - wanted with it in in this case what we
06:59 - wanted to do with it is just output it
07:03 - on the screen so we set alright now that
07:05 - we have the information output the ID
07:07 - and then a comma and then Bucky and then
07:11 - the comma and then money and then end of
07:14 - the line so it goes to a new line so
07:17 - then where this is working in the file
07:19 - is it's at the end of the file so
07:21 - whenever you run this loop again the
07:23 - next idea jumps down to is number two it
07:26 - runs the entire loop it's at the end of
07:29 - that line and then whenever you run this
07:30 - loop again it jumps down to the ID
07:33 - number three and it runs that line of
07:34 - code and how this does this while loop
07:37 - know when to stop because whenever the
07:40 - end of file marker has been reached
07:42 - C++ knows already without us having to
07:45 - type any extra code that a null pointer
07:48 - is returned basically it changes this
07:51 - boolean to false so whenever this is
07:54 - working this is true whenever it gets to
07:57 - the end of file C++ already knows that
08:00 - this loop should be false we don't have
08:02 - to explicitly you know write the if
08:05 - statement in here to check it or
08:06 - anything it's one of the cool features
08:08 - of C++ it automatically knows when to
08:10 - end so that's one cool thing that we
08:12 - don't have to worry about another cool
08:14 - thing that we don't have to worry about
08:15 - is whenever we're working with this if'
08:18 - stream or OS stream
08:20 - object whenever the file reaches the end
08:25 - of the file and this goes to false this
08:28 - object is going to get deleted
08:31 - automatically in the Deconstructor
08:33 - remember when we talked about
08:34 - constructors and deconstructors the D
08:36 - constructor is going to call the closed
08:38 - file method so remember like in the
08:42 - first file tutorial I told you that told
08:44 - you guys that you need to close your
08:46 - files in order to free up resources well
08:49 - with this I have stream constructor or
08:51 - excuse me D constructor is going to do
08:53 - is as soon as this file object gets
08:56 - deleted this file is going to close
08:58 - automatically so that's two things we
08:59 - don't have to worry about whenever we
09:02 - get to the end of file this is going to
09:04 - go to false in the loop is going to end
09:06 - automatically and also whenever it gets
09:08 - to the end the file the D constructor is
09:11 - going to close the file automatically so
09:13 - I don't have to explicitly write the
09:15 - file dot closed so pretty much
09:18 - everything is handed to you you just got
09:20 - to remember how to use it C++ made it
09:23 - really really simple to work with files
09:25 - if you really think about it you don't
09:26 - have to do all the background stuff so
09:28 - there you go that's how you write and
09:30 - read a custom file and again your file
09:33 - structure is going to be different
09:34 - depending on type of application you
09:36 - make but that's the basics of it so
09:38 - thank you guys for watching don't forget
09:39 - subscribe I know you guys probably have
09:41 - a lot of questions just ask my on my
09:43 - forum the New Boston comp forum and I'm
09:45 - going to go to McDonald's get a extra
09:47 - large milkshake and you well check out
09:50 - my next video so think guys watching and
09:51 - I'll see you then

Cleaned transcript:

what is going on guys welcome to your let's see sixty seventh C++ tutorial and in this tutorial I'm going to be teaching guys how to read custom data so in the last story what we did is let me scroll to my desktop watermelon we created this players text file and what it did is basically allowed us to create our own custom file structure and what we did is we were making our computer game with a bunch of different players we gave them an integer as the ID number a name which was a string and their bank account which was of course a double so now we have all our data right here and it's laid out in a very specific way no other program could really understand what this data is used for except our program so now that we have that data we need to be able to read it specifically in our own custom way so it's a little bit different than writing it for a couple of reasons which I'm going to be talking about so the first thing I want to stress to you guys is you can't use o F stream Oh F is for outputting data to a string for example when you have text and you want to output it to a file or write it to a file whenever you want to read data in from a file you need if' stream this allows you to take data from a file and read it into you know the computer's memory or whatever so it's the opposite of Oh F stream Oh F is for writing that a to a file i F is for reading data from a file so then you go ahead and create your file object I'm just going to mine the file and then of course is a constructor optional optional constructor you can take the name of that file so players dot text was the name of that file you can either create the text file document or excuse me what am I going to say the file object on one line of code or break it up into I always like to put it on one line of code just like when we were writing to a file so aside from that what we're going to be doing is we're going to be reading the data from that document so remember that document have three pieces information in it on each row it had an ID number a name in the amount of money so let's go ahead and make variables to hold that data into ID and then we'll make string name to store their name and double money to store their you know bank account information so basically how we're going to do that is this we're going to create a while loop in the wallet you can loop through each piece of information whether it's their ID number their name or their money and it's going to store it in a variable and whenever we have that information stored in the variable is we can do you know whatever you want that we can load it into our computer game we can just go ahead and print it out on the screen we can go ahead and send it to database on the internet but basically what we have to do first is take that data from the file and we need to store it on variables in our program so I want to talk to you guys about how we're going to do this remember I said in the last tutorial that every file has end a file marker and C++ pretty much is going to run this program until it gets to the end of file marker and then when it gets to the end it's going to return something called a null pointer so let me go ahead and actually code this and then I can explain what I'm talking about so just like before whenever we were you know whenever you use like cin to get information from the keyboard and then you could store it in variables like this well now we're getting information from the file so we go ahead and type the file and that's where the information is coming from and we're going to store an ID the first piece of information and the second piece of information we're going to store name and the third piece of information we're going to store in money so it's basically going to loop through this while loop and look at the file each time and every time it gets the new piece of information it's going to store an ID name and money now let me say this whenever you're working with files there's something called a file pointer let me go ahead and open my document again and I could probably show it to you guys really easily or it's a watermelon players so whenever you're working with files you have something called a file pointer now the job of this file pointer is to keep track of where in the file C++ is working with so what it's going to do is this file pointer let me go ahead and skinny up my program a little bit is going to start at the very beginning and by the way the end of file pointer is what right there where my cursor is but anyways your file pointer always starts at the very beginning what this loop is going to do right now is it's going to read the first piece of information so it's going to see right there that's the first piece of information that number one right there is what I want to store an ID so next it says alright this next piece of information store a name so it's going to scroll the file pointer is going to go to this next piece of information and it's going to see this one right here Bucky should be stored in name and then it's going to say all right now the next piece of information which is this right here I'm supposed to store this in the variable money so that's what's going to happen the first time this program loops through so the next time it loops through the file pointer is going to be right here so that's why we didn't have to change any line of code right here because we're working with the same object yet it knows the next piece of information is this too because the file pointer the next time this loop runs is going to be at the beginning of the next line or at the end of this line pretty much the same spot so that is how the file pointer is going to be working and by the way it actually is called the file pointer so you know I'm not making that up so that's why this loop is going to run fine each time so now that we have the correct pieces of information stored an ID name and money we can just go ahead and if we were making a game or something we would want to load them into the game but for now let's just go ahead and print them out on the screen so see out / now ID and then go ahead and I'm going to make a commaseparated list instead of you know spaces because you know if you're working with Excel well nevermind oh they use comma separated list but anyways I just like how it looks so the next piece of information is name and I'm just going to add a comma right there and lastly what is it money so after this I'm just going to go ahead and end that line and whenever you run this program it should work just fine so what it did is it read that file from the txt file one Bucky sixty sixty five point four seven and it did what we wanted with it in in this case what we wanted to do with it is just output it on the screen so we set alright now that we have the information output the ID and then a comma and then Bucky and then the comma and then money and then end of the line so it goes to a new line so then where this is working in the file is it's at the end of the file so whenever you run this loop again the next idea jumps down to is number two it runs the entire loop it's at the end of that line and then whenever you run this loop again it jumps down to the ID number three and it runs that line of code and how this does this while loop know when to stop because whenever the end of file marker has been reached C++ knows already without us having to type any extra code that a null pointer is returned basically it changes this boolean to false so whenever this is working this is true whenever it gets to the end of file C++ already knows that this loop should be false we don't have to explicitly you know write the if statement in here to check it or anything it's one of the cool features of C++ it automatically knows when to end so that's one cool thing that we don't have to worry about another cool thing that we don't have to worry about is whenever we're working with this if' stream or OS stream object whenever the file reaches the end of the file and this goes to false this object is going to get deleted automatically in the Deconstructor remember when we talked about constructors and deconstructors the D constructor is going to call the closed file method so remember like in the first file tutorial I told you that told you guys that you need to close your files in order to free up resources well with this I have stream constructor or excuse me D constructor is going to do is as soon as this file object gets deleted this file is going to close automatically so that's two things we don't have to worry about whenever we get to the end of file this is going to go to false in the loop is going to end automatically and also whenever it gets to the end the file the D constructor is going to close the file automatically so I don't have to explicitly write the file dot closed so pretty much everything is handed to you you just got to remember how to use it C++ made it really really simple to work with files if you really think about it you don't have to do all the background stuff so there you go that's how you write and read a custom file and again your file structure is going to be different depending on type of application you make but that's the basics of it so thank you guys for watching don't forget subscribe I know you guys probably have a lot of questions just ask my on my forum the New Boston comp forum and I'm going to go to McDonald's get a extra large milkshake and you well check out my next video so think guys watching and I'll see you then
