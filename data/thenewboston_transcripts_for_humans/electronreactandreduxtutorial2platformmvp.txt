With timestamps:

00:00 - alrighty everyone welcome back to
00:02 - another video and I know in the last
00:04 - video I said I was going to be going
00:06 - over project structure in this video but
00:09 - I actually want to save that for a
00:10 - little bit later on because in this one
00:12 - I want to show you some of the updates
00:15 - that I've been working on
00:16 - so first of all as you can probably
00:18 - notice I updated the UI a bit I have
00:21 - these custom app icons that we're going
00:23 - to be building on the left and all of
00:25 - the other kind of system apps and system
00:27 - settings on the right felt a little bit
00:29 - cleaner that way and I also built out a
00:33 - lot of the networking logic
00:35 - so right now what I have is the core
00:38 - server up and running it's live on the
00:40 - back end and I am now connected to it
00:43 - from this machine and just to give you a
00:46 - perspective of
00:48 - um kind of my environment right now I'm
00:50 - sitting in my office right now and I'm
00:52 - recording on my iMac but I also have my
00:55 - laptop running uh or sitting right next
00:58 - to me and it's running this exact
00:59 - software as well
01:01 - so both of these devices are connected
01:04 - to the same network
01:05 - not only that but they are actually
01:08 - connected in a way where they can
01:10 - communicate with one another
01:11 - so in order to demonstrate that I'll
01:15 - show you the first app that I built out
01:17 - and that is this uh chat MVP so this is
01:22 - kind of the ping pong app that I said I
01:24 - was going to write in the last video but
01:27 - I also added some additional
01:28 - functionality as well and that is well
01:32 - might as well show you what's going on
01:33 - right here
01:34 - so in this app
01:37 - um pretty much a basic chat app you can
01:39 - send messages back and forth so right
01:42 - now I'm just sending you know basic text
01:44 - data to my MacBook and another cool
01:46 - thing just some kind of chat
01:48 - functionality I can edit that message if
01:51 - I want and I can also delete it and I
01:54 - know you guys can't see this but I will
01:58 - I'll send a message from my MacBook
02:00 - right there
02:02 - and now let me edit it
02:04 - tuna
02:06 - I'll say tuna
02:08 - Sandy
02:10 - and let me go ahead and delete that
02:13 - all right so there's the demo probably
02:16 - the most boring demo that you ever seen
02:18 - in your life it looks and functions like
02:20 - uh very MVP normal chat app however the
02:25 - very cool thing about this architecture
02:26 - is that even though it looks and
02:28 - functions like a normal chat app there's
02:30 - actually no centralized database being
02:33 - used to store any of this app data all
02:35 - of this app data including these
02:38 - contacts right here
02:39 - and the messages themselves and the
02:42 - delivery statuses all of this is stored
02:45 - directly on the devices themselves and
02:48 - well actually I I lied about that we are
02:51 - logging the blocks let me pull this up
02:53 - in case you want to follow along with
02:55 - this
02:56 - so right now we are logging the blocks
02:59 - which in other words is just like the
03:01 - messages sent back and forth between
03:02 - devices we are logging them on the back
03:05 - end for kind of debugging and
03:07 - development purposes however the
03:11 - um
03:12 - tnbos it doesn't like pull from the back
03:15 - end at all it's purely for debugging
03:16 - purposes and we have that ticket right
03:18 - there to remove that functionality or
03:20 - turn it off by default but yeah I just
03:23 - want to kind of point that out
03:25 - now another cool feature about tnbos
03:29 - that I built in is some fault tolerance
03:31 - logic and yes I know that cool and fault
03:35 - tolerance aren't normally used in the
03:37 - same sense but I want to show you this
03:40 - because well I thought it was cool at
03:41 - least
03:42 - so as you know from the last video the
03:44 - basic architecture of the system is
03:47 - pretty much to have some devices hooked
03:48 - up to a single server and then through
03:52 - that server they can send messages back
03:53 - and forth pretty simple however right
03:56 - now I have my iMac communicating with my
04:00 - laptop and they're connected through two
04:02 - different servers now this isn't
04:05 - necessary for kind of this architecture
04:07 - to work but the reason I have it written
04:10 - that's what this way is because if one
04:13 - of these servers ever goes offline then
04:16 - these devices are still able to
04:18 - communicate with each other
04:20 - and I'll show you in the UI how we can
04:22 - see that so right now let me uh this is
04:26 - kind of cluttery looking all right so
04:28 - right now my iMac is connected through
04:31 - my MacBook through these two networks
04:33 - right here uh VTX and tnb they're pretty
04:36 - much just two servers I spun up and just
04:38 - added these uh you know this little text
04:41 - to give it a shorter identifier but you
04:44 - can see in this top right that those
04:47 - icons have green rings around them and
04:49 - it means that these are pretty much like
04:51 - two channels that you can send data
04:53 - through
04:53 - now what I'm gonna do is I'm gonna go on
04:57 - my MacBook and I'm just gonna completely
05:00 - delete and I'll show you what I'm doing
05:02 - on my MacBook
05:03 - actually I can do it right here
05:05 - so what I'm gonna do is I'm gonna go in
05:08 - my network manager and just completely
05:10 - delete one of these networks I say I'm
05:12 - going to delete tnb completely so
05:15 - whenever I do that you can see that I
05:18 - can still
05:19 - send messages
05:24 - back and forth
05:26 - so yeah I know that this is uh
05:28 - definitely Overkill especially for like
05:30 - a private Network where you're just like
05:32 - uh changing some of your digital picture
05:36 - frames or I don't know making a plant
05:38 - watering system or something but I did
05:40 - think it was pretty cool how these
05:41 - devices can still communicate even if
05:44 - one of the uh nodes or servers between
05:46 - them that allows them to communicate it
05:49 - goes down they still can kind of I don't
05:51 - know almost work organically and find
05:53 - another path between one another
05:55 - so like I said
05:57 - um if you're into fault tolerance uh I
05:59 - thought that was pretty cool at least so
06:01 - with all of that uh yeah pretty cool we
06:04 - have the very basic uh structure MVP
06:07 - build out now in the upcoming videos
06:10 - what I have planned is let's see have a
06:14 - little guide on the right side of my
06:16 - screen here all right so in the next
06:19 - video I'm planning on going through
06:20 - spinning up one of these uh servers
06:23 - right here and I'll also show you how to
06:27 - set up a domain name with SSL I know a
06:30 - lot of people look for that and there's
06:31 - not a lot of great content online for
06:33 - that so I'll take you through that
06:35 - process and then once we have that I'll
06:38 - show you how to connect to your server
06:40 - with tnb OS it's pretty simple you
06:44 - pretty much just hit add Network and I'm
06:45 - sure you can figure all this out just
06:47 - fill in the form and hit submit but
06:49 - we'll go through that process and also
06:53 - um right now we already saw one of these
06:56 - apps the chat app there's another kind
06:58 - of simple University app I called it
07:01 - this isn't functional or anything right
07:03 - now it just says University and that's
07:04 - it and the reason that I wrote this
07:07 - separate app is I just wanted to kind of
07:10 - create this MVP having something else is
07:13 - an app mainly to ensure that I could
07:16 - pretty much write this architecture that
07:18 - supported multiple apps in that I wasn't
07:21 - like hard coding too many things into a
07:23 - single app and then once I added another
07:24 - one I was going to have to go back and
07:26 - rewrite a bunch of stuff yada yada
07:27 - either way not important the point being
07:30 - is that in the upcoming tutorial I'm
07:33 - also going to be building a simple speed
07:36 - test app and all this app is going to do
07:39 - is it's pretty much gonna
07:41 - um well let me pull this up again it's
07:43 - going to be similar to this architecture
07:45 - where you're just going to send like a
07:47 - ping message and it's going to send you
07:48 - back a pong message and it's just going
07:50 - to time how long that takes so we can
07:52 - see how fast this network actually is
07:54 - but in terms of app development what
07:57 - that means is we're going to be
07:59 - designing the protocol in other words
08:01 - the rules for how those two devices
08:03 - communicate with one another should be
08:05 - pretty simple since it's only like one
08:07 - request in response cycle and then we're
08:10 - also going to be designing and building
08:12 - out the UI it's probably only going to
08:14 - be like one component or I don't know
08:16 - one container a couple components but
08:19 - yeah show you how to build a simple
08:20 - speed test app
08:22 - and then after all of that uh we will
08:26 - then hop into some of this tnb OS
08:29 - architecture I'll go through some of
08:31 - these more technical details of exactly
08:34 - how tnbos communicates with the core
08:36 - server and how it keeps track of what
08:38 - other devices are in line so on and so
08:41 - forth and even though a lot of this
08:43 - isn't strictly necessary in terms of app
08:46 - development since you know the idea is
08:48 - to have a lot of this logic abstracted
08:50 - away
08:51 - I did want to go over it because I want
08:53 - to hear all of your feedback on well
08:55 - quite a few things like I said in the
08:57 - last video there are lots of interesting
08:59 - challenges that I came across when
09:01 - building everything out so I want to
09:04 - hear your thoughts on some of the
09:05 - architecture and design patterns
09:06 - especially since to my knowledge nothing
09:09 - like this has really been uh built or
09:12 - nothing that I found online exactly like
09:14 - this so I just want to hear your
09:15 - thoughts and see if I can improve
09:17 - anything and aside from that it's always
09:20 - good to have a solid foundation before
09:22 - you know building too much on top of it
09:24 - but yeah that's uh pretty much all I
09:27 - wanted to cover in this video so as
09:30 - always if anyone has any questions or if
09:33 - anyone gets stuck on anything throughout
09:34 - the series uh there's a Discord Link in
09:38 - the description below I'll also include
09:40 - the links to the GitHub repos both for
09:43 - tnbos which again is a electron react
09:46 - and Redux app and also the core server
09:49 - repo which is a Django application
09:52 - pretty much just allows devices to
09:54 - communicate almost acts as a router in a
09:56 - way and yeah I think that's pretty much
09:59 - it so in the next video we're going to
10:01 - be deploying a server see you then

Cleaned transcript:

alrighty everyone welcome back to another video and I know in the last video I said I was going to be going over project structure in this video but I actually want to save that for a little bit later on because in this one I want to show you some of the updates that I've been working on so first of all as you can probably notice I updated the UI a bit I have these custom app icons that we're going to be building on the left and all of the other kind of system apps and system settings on the right felt a little bit cleaner that way and I also built out a lot of the networking logic so right now what I have is the core server up and running it's live on the back end and I am now connected to it from this machine and just to give you a perspective of um kind of my environment right now I'm sitting in my office right now and I'm recording on my iMac but I also have my laptop running uh or sitting right next to me and it's running this exact software as well so both of these devices are connected to the same network not only that but they are actually connected in a way where they can communicate with one another so in order to demonstrate that I'll show you the first app that I built out and that is this uh chat MVP so this is kind of the ping pong app that I said I was going to write in the last video but I also added some additional functionality as well and that is well might as well show you what's going on right here so in this app um pretty much a basic chat app you can send messages back and forth so right now I'm just sending you know basic text data to my MacBook and another cool thing just some kind of chat functionality I can edit that message if I want and I can also delete it and I know you guys can't see this but I will I'll send a message from my MacBook right there and now let me edit it tuna I'll say tuna Sandy and let me go ahead and delete that all right so there's the demo probably the most boring demo that you ever seen in your life it looks and functions like uh very MVP normal chat app however the very cool thing about this architecture is that even though it looks and functions like a normal chat app there's actually no centralized database being used to store any of this app data all of this app data including these contacts right here and the messages themselves and the delivery statuses all of this is stored directly on the devices themselves and well actually I I lied about that we are logging the blocks let me pull this up in case you want to follow along with this so right now we are logging the blocks which in other words is just like the messages sent back and forth between devices we are logging them on the back end for kind of debugging and development purposes however the um tnbos it doesn't like pull from the back end at all it's purely for debugging purposes and we have that ticket right there to remove that functionality or turn it off by default but yeah I just want to kind of point that out now another cool feature about tnbos that I built in is some fault tolerance logic and yes I know that cool and fault tolerance aren't normally used in the same sense but I want to show you this because well I thought it was cool at least so as you know from the last video the basic architecture of the system is pretty much to have some devices hooked up to a single server and then through that server they can send messages back and forth pretty simple however right now I have my iMac communicating with my laptop and they're connected through two different servers now this isn't necessary for kind of this architecture to work but the reason I have it written that's what this way is because if one of these servers ever goes offline then these devices are still able to communicate with each other and I'll show you in the UI how we can see that so right now let me uh this is kind of cluttery looking all right so right now my iMac is connected through my MacBook through these two networks right here uh VTX and tnb they're pretty much just two servers I spun up and just added these uh you know this little text to give it a shorter identifier but you can see in this top right that those icons have green rings around them and it means that these are pretty much like two channels that you can send data through now what I'm gonna do is I'm gonna go on my MacBook and I'm just gonna completely delete and I'll show you what I'm doing on my MacBook actually I can do it right here so what I'm gonna do is I'm gonna go in my network manager and just completely delete one of these networks I say I'm going to delete tnb completely so whenever I do that you can see that I can still send messages back and forth so yeah I know that this is uh definitely Overkill especially for like a private Network where you're just like uh changing some of your digital picture frames or I don't know making a plant watering system or something but I did think it was pretty cool how these devices can still communicate even if one of the uh nodes or servers between them that allows them to communicate it goes down they still can kind of I don't know almost work organically and find another path between one another so like I said um if you're into fault tolerance uh I thought that was pretty cool at least so with all of that uh yeah pretty cool we have the very basic uh structure MVP build out now in the upcoming videos what I have planned is let's see have a little guide on the right side of my screen here all right so in the next video I'm planning on going through spinning up one of these uh servers right here and I'll also show you how to set up a domain name with SSL I know a lot of people look for that and there's not a lot of great content online for that so I'll take you through that process and then once we have that I'll show you how to connect to your server with tnb OS it's pretty simple you pretty much just hit add Network and I'm sure you can figure all this out just fill in the form and hit submit but we'll go through that process and also um right now we already saw one of these apps the chat app there's another kind of simple University app I called it this isn't functional or anything right now it just says University and that's it and the reason that I wrote this separate app is I just wanted to kind of create this MVP having something else is an app mainly to ensure that I could pretty much write this architecture that supported multiple apps in that I wasn't like hard coding too many things into a single app and then once I added another one I was going to have to go back and rewrite a bunch of stuff yada yada either way not important the point being is that in the upcoming tutorial I'm also going to be building a simple speed test app and all this app is going to do is it's pretty much gonna um well let me pull this up again it's going to be similar to this architecture where you're just going to send like a ping message and it's going to send you back a pong message and it's just going to time how long that takes so we can see how fast this network actually is but in terms of app development what that means is we're going to be designing the protocol in other words the rules for how those two devices communicate with one another should be pretty simple since it's only like one request in response cycle and then we're also going to be designing and building out the UI it's probably only going to be like one component or I don't know one container a couple components but yeah show you how to build a simple speed test app and then after all of that uh we will then hop into some of this tnb OS architecture I'll go through some of these more technical details of exactly how tnbos communicates with the core server and how it keeps track of what other devices are in line so on and so forth and even though a lot of this isn't strictly necessary in terms of app development since you know the idea is to have a lot of this logic abstracted away I did want to go over it because I want to hear all of your feedback on well quite a few things like I said in the last video there are lots of interesting challenges that I came across when building everything out so I want to hear your thoughts on some of the architecture and design patterns especially since to my knowledge nothing like this has really been uh built or nothing that I found online exactly like this so I just want to hear your thoughts and see if I can improve anything and aside from that it's always good to have a solid foundation before you know building too much on top of it but yeah that's uh pretty much all I wanted to cover in this video so as always if anyone has any questions or if anyone gets stuck on anything throughout the series uh there's a Discord Link in the description below I'll also include the links to the GitHub repos both for tnbos which again is a electron react and Redux app and also the core server repo which is a Django application pretty much just allows devices to communicate almost acts as a router in a way and yeah I think that's pretty much it so in the next video we're going to be deploying a server see you then
