With timestamps:

00:00 - so now if magic quotes is not on how can
00:04 - we project again protect against this
00:05 - let's turn magic quotes off and save our
00:10 - PHP dot ini file and come into our xampp
00:13 - control panel and restart apache once
00:15 - more okay so let's now refresh and cause
00:22 - this SQL injection okay so we've caused
00:29 - the SQL injection once again now what we
00:32 - need to do is think of another way that
00:33 - we can protect against SQL injection so
00:37 - if magic quotes by default is on I also
00:41 - recommend you take this next step in
00:44 - order to secure the variables that you
00:46 - pass into your into your query string or
00:49 - into your query itself so what we can do
00:52 - is we can use a function called MySQL
00:55 - real escape string now what this does is
00:58 - it acts very much like the magic quotes
01:01 - and it turns in it and it escapes
01:03 - specific characters I'm not sure what
01:06 - characters in particular it does escape
01:08 - but it does escape single quotation
01:10 - marks and I think apostrophes as well so
01:13 - let's go ahead and in cap enclose our
01:16 - username and password variables in this
01:18 - function so to do this we need to end
01:21 - our output and concatenate on our
01:24 - variable so you should be comfortable
01:27 - with doing this we're just ending the
01:29 - output concatenate on the variable
01:31 - concatenate in the end of the output on
01:32 - there so now what we can do is we have
01:35 - room to say MySQL real escape string and
01:39 - we can enclose the username variable in
01:42 - that and MySQL real escape string and we
01:49 - can clean close this password variable
01:51 - in that as well so now although we have
01:54 - magic quotes turned off and last time we
01:57 - refresh the page we have this login
01:58 - success because of the SQL injection now
02:01 - let's refresh again and click continue
02:03 - and you can see it says invalid username
02:06 - password combination so we haven't
02:09 - actually escaped the form data that's
02:12 - been sent
02:13 - but what we have done is inside of our
02:15 - query we've escaped this data so let's
02:18 - go ahead and echo out the query so we
02:21 - can see what's going on here
02:23 - okay so let's refresh and continue so
02:26 - what we've got is we've got select ID
02:29 - from users where username equals and now
02:32 - you can see that this function has
02:33 - escaped these characters here so even
02:36 - though it's not escaped the post data
02:38 - its escaped it inside of our query so
02:41 - it's highly recommended problem that you
02:43 - have magic quotes GPC on and you also
02:46 - use this MySQL real escape string now
02:51 - there's another problem with our code
02:53 - let's just under scape these and we'll
03:00 - return to our original state of this
03:04 - okay so let's go ahead and not echo this
03:07 - query out and we'll refresh ok so we're
03:12 - back to the state that we have SQL
03:14 - injection possible now what we're going
03:16 - to do is we're going to make a small
03:18 - modification to how we check the number
03:20 - of rows in our database so now at the
03:22 - moment we've got if MySQL num rows query
03:25 - run run a greater than or equal to one
03:28 - then then we say login success now we
03:32 - can make a small change here and because
03:34 - we're saying greater than or equal to
03:36 - one remember earlier when we looked
03:38 - inside and we performed an SQL query and
03:41 - on in here we perform the query and the
03:45 - same query let's copy and paste that so
03:50 - we can put it into here so we're
03:53 - performing this query but what we're
03:55 - doing now is we are saying equal to this
04:01 - or this equals this and we're doing
04:05 - exactly the same for password by sewing
04:07 - this or this equals this okay so let's
04:11 - copy and paste that so we can use it
04:12 - later let's go so what you can see here
04:17 - is we've returned two rows because this
04:19 - query will actually the way we've
04:21 - structured it we've returned two rows so
04:24 - now what's going to happen
04:26 - inside of this we're going we're
04:28 - checking for greater than or equal to
04:30 - one row returned so what happens if we
04:33 - just check for one row being returned
04:35 - then in this case of this this query
04:39 - this is why you can't apply this rule to
04:42 - every query because you may be doing
04:44 - different checks inside your program so
04:48 - with specific regard for my program just
04:50 - changing this operator to is equal to we
04:54 - have to return only one row for login to
04:57 - succeed because the nature of our
04:59 - database is that we're only ever going
05:01 - to return one row if the username and
05:03 - password match because we're never going
05:05 - to have the same username in our
05:06 - database because the way we program our
05:08 - user systems you never find that on
05:11 - websites you have the same username
05:12 - twice so therefore this will never ever
05:15 - return more than one row if if done
05:19 - properly so now just by changing this to
05:21 - equals one we can see that by refreshing
05:25 - because we've returned two rows it
05:28 - doesn't equal to one therefore it's an
05:30 - invalid username and password
05:32 - combination however when we supply it
05:34 - with the correct data we return one row
05:36 - and we have a login success so combining
05:40 - these three I mean this ones are loosely
05:42 - related to my design
05:44 - only so by using a MySQL real escape
05:48 - string when passing variables through to
05:53 - a query that's being executed within PHP
05:55 - so MySQL real escape string on that one
06:00 - as well by doing that by making sure you
06:03 - make the relevant checks inside once
06:05 - you've made your query and also changing
06:08 - this magic quote GPC to on rather than
06:10 - off and by using a combination of or the
06:15 - majority of these methods and there are
06:17 - other methods so you can go away and
06:19 - research here but hopefully you've taken
06:21 - away from this that doing all these
06:22 - three things can somewhat protect you
06:25 - against SQL injection

Cleaned transcript:

so now if magic quotes is not on how can we project again protect against this let's turn magic quotes off and save our PHP dot ini file and come into our xampp control panel and restart apache once more okay so let's now refresh and cause this SQL injection okay so we've caused the SQL injection once again now what we need to do is think of another way that we can protect against SQL injection so if magic quotes by default is on I also recommend you take this next step in order to secure the variables that you pass into your into your query string or into your query itself so what we can do is we can use a function called MySQL real escape string now what this does is it acts very much like the magic quotes and it turns in it and it escapes specific characters I'm not sure what characters in particular it does escape but it does escape single quotation marks and I think apostrophes as well so let's go ahead and in cap enclose our username and password variables in this function so to do this we need to end our output and concatenate on our variable so you should be comfortable with doing this we're just ending the output concatenate on the variable concatenate in the end of the output on there so now what we can do is we have room to say MySQL real escape string and we can enclose the username variable in that and MySQL real escape string and we can clean close this password variable in that as well so now although we have magic quotes turned off and last time we refresh the page we have this login success because of the SQL injection now let's refresh again and click continue and you can see it says invalid username password combination so we haven't actually escaped the form data that's been sent but what we have done is inside of our query we've escaped this data so let's go ahead and echo out the query so we can see what's going on here okay so let's refresh and continue so what we've got is we've got select ID from users where username equals and now you can see that this function has escaped these characters here so even though it's not escaped the post data its escaped it inside of our query so it's highly recommended problem that you have magic quotes GPC on and you also use this MySQL real escape string now there's another problem with our code let's just under scape these and we'll return to our original state of this okay so let's go ahead and not echo this query out and we'll refresh ok so we're back to the state that we have SQL injection possible now what we're going to do is we're going to make a small modification to how we check the number of rows in our database so now at the moment we've got if MySQL num rows query run run a greater than or equal to one then then we say login success now we can make a small change here and because we're saying greater than or equal to one remember earlier when we looked inside and we performed an SQL query and on in here we perform the query and the same query let's copy and paste that so we can put it into here so we're performing this query but what we're doing now is we are saying equal to this or this equals this and we're doing exactly the same for password by sewing this or this equals this okay so let's copy and paste that so we can use it later let's go so what you can see here is we've returned two rows because this query will actually the way we've structured it we've returned two rows so now what's going to happen inside of this we're going we're checking for greater than or equal to one row returned so what happens if we just check for one row being returned then in this case of this this query this is why you can't apply this rule to every query because you may be doing different checks inside your program so with specific regard for my program just changing this operator to is equal to we have to return only one row for login to succeed because the nature of our database is that we're only ever going to return one row if the username and password match because we're never going to have the same username in our database because the way we program our user systems you never find that on websites you have the same username twice so therefore this will never ever return more than one row if if done properly so now just by changing this to equals one we can see that by refreshing because we've returned two rows it doesn't equal to one therefore it's an invalid username and password combination however when we supply it with the correct data we return one row and we have a login success so combining these three I mean this ones are loosely related to my design only so by using a MySQL real escape string when passing variables through to a query that's being executed within PHP so MySQL real escape string on that one as well by doing that by making sure you make the relevant checks inside once you've made your query and also changing this magic quote GPC to on rather than off and by using a combination of or the majority of these methods and there are other methods so you can go away and research here but hopefully you've taken away from this that doing all these three things can somewhat protect you against SQL injection
