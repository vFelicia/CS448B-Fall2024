With timestamps:

00:00 - so let's go ahead and give this a name
00:02 - I'm going to call it results so we know
00:04 - exactly what we we're talking about so
00:06 - we've got this search form we've got
00:08 - this keyword field we're finding the
00:10 - match every time we press a key down and
00:12 - we're displaying that in results so
00:13 - we've named the
00:15 - um
00:16 - elements of our of our page correctly so
00:19 - we can sort of remember them a bit later
00:20 - on so like I said we've got this find
00:23 - match function that we need to create up
00:25 - here so let's go ahead and open up a
00:27 - script tag and then go and close our
00:30 - script tag and the type is obviously
00:32 - text forward slash JavaScript because
00:34 - Ajax is
00:36 - um JavaScript and XML
00:40 - okay so now what we're going to go and
00:41 - do is uh create our function name which
00:44 - we've called down here find maps so we
00:46 - can just start a new function oh in the
00:48 - wrong place there
00:49 - so we can start a new function called
00:51 - find match
00:53 - it's not going to take any parameters
00:55 - because uh this function is unique to
00:57 - this field so we don't need to take any
00:59 - parameters to say you know pop it
01:01 - somewhere or like we did in the uh the
01:04 - example where we um where we created our
01:07 - Ajax code last time we we put two
01:10 - arguments in to here to say what file to
01:14 - grab and also where to put the data so
01:17 - we don't need to do that because we can
01:18 - we can do that just for the purpose of
01:20 - this of this um this search but you're
01:23 - welcome to modify obviously the file
01:25 - match to suit your websites needs
01:28 - okay so the first thing we need to do is
01:30 - check for a request so we do uh we say
01:34 - if window dot XML HTTP request so
01:40 - remember the case sensitivity of this
01:42 - we've got Capital eight XML and H and a
01:44 - capital R here uh the um
01:47 - the code inside of here is going to be
01:50 - case sensitive so be very very very
01:51 - careful or your um program may not run
01:55 - correctly
01:56 - so uh we've got an if and then we're
01:58 - going to have it else there so this is
01:59 - just for different browser support but
02:01 - in this case we say XML HTTP is equal to
02:05 - uh new XML http
02:09 - request and then we put our parenthesis
02:12 - on here otherwise XML HTTP is equal to a
02:16 - new
02:17 - um
02:18 - ActiveX object so active X object and we
02:23 - feed in one argument which is Microsoft
02:25 - dot XML HTTP and capitals Okay so we've
02:29 - done that set our XML HTTP variable now
02:33 - what we want to do is we want to check
02:35 - for the state the ready state of our
02:37 - xml.http because we're going to be
02:39 - submitting data through to this so we
02:41 - need to check for that so what we do is
02:43 - we say XML HTTP and we say dot on ready
02:48 - state
02:50 - and then what what's happened is we're
02:52 - going to equal this to a function and
02:54 - we're going to have no parameters in
02:55 - this but the function is going to be
02:57 - inside of here so when um when we are
03:00 - ready to do this uh sorry this is
03:03 - already State Changed by the way uh just
03:05 - noticed that there so um
03:07 - on uh on on the state change of uh our
03:10 - XML HTTP
03:13 - um which is our h x amount HTTP request
03:16 - object we need to complete the function
03:18 - inside of these parentheses so the
03:21 - function is first of all we need to make
03:22 - a check so we need to check the ready
03:25 - State and the status of this so we need
03:28 - to say if XML HTTP dot ready status
03:33 - is equal to 4 and XML HTTP dot uh status
03:44 - sorry this is State and uh
03:46 - I'm confusing things so we've got ready
03:49 - State equals four and we've got the XML
03:52 - http.status is equal to 200 this is just
03:55 - to ensure that data is being returned if
03:58 - data isn't returned we don't need to
04:00 - carry out the following block inside
04:02 - here which is grabbing the element by ID
04:05 - which is the element that we're going to
04:07 - be putting the data into is our result
04:09 - div so what we're doing is we're saying
04:12 - document because we're speaking about
04:14 - the overall document and then we're
04:16 - saying get LM oh element by ID and we
04:21 - need to get the element by ID which
04:22 - let's go down here and check
04:25 - we have called this uh results so I
04:28 - should have known that because I did
04:29 - name them so I could remember them okay
04:31 - so we need to type in results in here
04:35 - and then what we need to do is we need
04:36 - to
04:38 - um say dot inner HTML and Dot inner HTML
04:41 - is basically
04:43 - HTML inside of this div so we're
04:46 - changing this so we're making that equal
04:49 - to
04:51 - um
04:51 - XML HTTP Dot and its response value or
04:57 - response text so the value of the text
04:59 - in response so X X8 XML
05:02 - http.responsetext
05:05 - okay so we're done with that for now now
05:07 - we need to come down and actually send
05:09 - this data so we need to test it first
05:11 - because we don't know if our our code
05:13 - Just Around Here works at the moment so
05:15 - the first thing we're going to do is XML
05:17 - HTTP and then we're going to say dot
05:20 - open and you will remember this from the
05:23 - last tutorial hopefully we've got three
05:25 - parameters the first one is the method
05:27 - so we're using get and we could go to be
05:30 - using this um into this tutorial as well
05:33 - now is the file so we've got up here
05:35 - we've got search.ink.php there's nothing
05:38 - in it at the moment so search Dot
05:40 - inc.php and the next is if you want to
05:42 - send this data asynchronously so we do
05:45 - so we're going to just type True by
05:47 - default it's true so you can leave it
05:48 - out but I always like to put it uh just
05:50 - in there
05:52 - now we say XML
05:54 - http.send and we're done so now what we
05:56 - can do is test this out

Cleaned transcript:

so let's go ahead and give this a name I'm going to call it results so we know exactly what we we're talking about so we've got this search form we've got this keyword field we're finding the match every time we press a key down and we're displaying that in results so we've named the um elements of our of our page correctly so we can sort of remember them a bit later on so like I said we've got this find match function that we need to create up here so let's go ahead and open up a script tag and then go and close our script tag and the type is obviously text forward slash JavaScript because Ajax is um JavaScript and XML okay so now what we're going to go and do is uh create our function name which we've called down here find maps so we can just start a new function oh in the wrong place there so we can start a new function called find match it's not going to take any parameters because uh this function is unique to this field so we don't need to take any parameters to say you know pop it somewhere or like we did in the uh the example where we um where we created our Ajax code last time we we put two arguments in to here to say what file to grab and also where to put the data so we don't need to do that because we can we can do that just for the purpose of this of this um this search but you're welcome to modify obviously the file match to suit your websites needs okay so the first thing we need to do is check for a request so we do uh we say if window dot XML HTTP request so remember the case sensitivity of this we've got Capital eight XML and H and a capital R here uh the um the code inside of here is going to be case sensitive so be very very very careful or your um program may not run correctly so uh we've got an if and then we're going to have it else there so this is just for different browser support but in this case we say XML HTTP is equal to uh new XML http request and then we put our parenthesis on here otherwise XML HTTP is equal to a new um ActiveX object so active X object and we feed in one argument which is Microsoft dot XML HTTP and capitals Okay so we've done that set our XML HTTP variable now what we want to do is we want to check for the state the ready state of our xml.http because we're going to be submitting data through to this so we need to check for that so what we do is we say XML HTTP and we say dot on ready state and then what what's happened is we're going to equal this to a function and we're going to have no parameters in this but the function is going to be inside of here so when um when we are ready to do this uh sorry this is already State Changed by the way uh just noticed that there so um on uh on on the state change of uh our XML HTTP um which is our h x amount HTTP request object we need to complete the function inside of these parentheses so the function is first of all we need to make a check so we need to check the ready State and the status of this so we need to say if XML HTTP dot ready status is equal to 4 and XML HTTP dot uh status sorry this is State and uh I'm confusing things so we've got ready State equals four and we've got the XML http.status is equal to 200 this is just to ensure that data is being returned if data isn't returned we don't need to carry out the following block inside here which is grabbing the element by ID which is the element that we're going to be putting the data into is our result div so what we're doing is we're saying document because we're speaking about the overall document and then we're saying get LM oh element by ID and we need to get the element by ID which let's go down here and check we have called this uh results so I should have known that because I did name them so I could remember them okay so we need to type in results in here and then what we need to do is we need to um say dot inner HTML and Dot inner HTML is basically HTML inside of this div so we're changing this so we're making that equal to um XML HTTP Dot and its response value or response text so the value of the text in response so X X8 XML http.responsetext okay so we're done with that for now now we need to come down and actually send this data so we need to test it first because we don't know if our our code Just Around Here works at the moment so the first thing we're going to do is XML HTTP and then we're going to say dot open and you will remember this from the last tutorial hopefully we've got three parameters the first one is the method so we're using get and we could go to be using this um into this tutorial as well now is the file so we've got up here we've got search.ink.php there's nothing in it at the moment so search Dot inc.php and the next is if you want to send this data asynchronously so we do so we're going to just type True by default it's true so you can leave it out but I always like to put it uh just in there now we say XML http.send and we're done so now what we can do is test this out
