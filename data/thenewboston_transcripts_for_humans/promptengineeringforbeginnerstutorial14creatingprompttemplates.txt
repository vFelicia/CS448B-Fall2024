With timestamps:

00:00 - hey welcome back everybody this is Ian
00:01 - bringing you another video in this AI
00:03 - series with the New Boston today's video
00:06 - is going to be really quick really
00:07 - simple of course you want to have
00:08 - watched all of our previous videos
00:09 - leading up to this point to be able to
00:11 - understand everything that's going on in
00:13 - this one but what we're going to do here
00:15 - is we're going to expand on a concept
00:17 - that we covered in a prior video where
00:19 - we showed you how to create prompt
00:20 - templates from The Prompt layer
00:22 - dashboard so they have a graphical user
00:24 - interface where you can go into the
00:26 - dashboard you can click on a button
00:28 - create new prompt template this is over
00:30 - in what they call the registry and you
00:32 - can just type everything in through a
00:33 - form that's great although some of you
00:36 - may want to do that programmatically and
00:38 - so that's what this video is about so
00:40 - it's really simple there's multiple
00:43 - prompt templates that we can create
00:45 - right we can create one for a completion
00:47 - or for a chat completion we've been
00:49 - using chat completions for the entirety
00:51 - of the series so we're going to go ahead
00:52 - and continue focusing on that so at the
00:55 - top here we are going to import OS and
00:59 - our prompt l layer library and then
01:01 - we're going to set our API key using OS
01:04 - getting that promp layer API key from an
01:06 - environment variable and then we go
01:08 - ahead and get open aai directly from
01:11 - promp layer open. openai create a new
01:14 - client for openai with client is equal
01:16 - to open AI open close fors and then this
01:18 - of course assumes that we have the open
01:20 - AI API key environment variable already
01:24 - set behind the scenes the next thing we
01:26 - want to do is Define the messages that
01:29 - are going to be included in our template
01:31 - so I actually used the same template
01:33 - that we created in the video where we
01:34 - did it with the graphical user interface
01:36 - where we had a system roll and it said
01:39 - for the content you are a helpful type
01:42 - this is a placeholder variable assistant
01:44 - you only answer type related questions
01:47 - anything that isn't related to type will
01:48 - be politely declined and you'll gently
01:50 - correct the user and then when we tested
01:52 - that we would say stuff like for type
01:54 - it's equal to math and we' say uh okay
01:57 - now we'll include an additional user R
02:01 - message and that will say something like
02:03 - hey tell me what HTML is which is a
02:05 - programming thing not a math thing and
02:07 - so then the assistant should come back
02:09 - to us and say like sorry I'm a math
02:12 - assistant I can't help you with coding
02:14 - related questions so that's essentially
02:17 - what we did in the previous video now we
02:18 - just want to do it programmatically so
02:20 - we have our messages list and the reason
02:23 - that we have a list here is because you
02:25 - could potentially add as many messages
02:28 - in here as you want of course you're
02:29 - going to have your system roll message
02:31 - which you may or may not want you might
02:32 - just want it to default to the you know
02:35 - helpful assistant which is the regular
02:36 - default or you might want to go above
02:39 - that and do something like this where we
02:40 - create a template for the system roll
02:44 - Additionally you may want to add more
02:45 - messages message objects or dictionaries
02:48 - inside of this list where you have one
02:50 - for the initial user message or for the
02:54 - initial assistant response it's all up
02:56 - to you how you want to create that
02:57 - template what you need in the template
03:00 - what needs to be variable with the use
03:01 - of these input variables for the
03:03 - placeholders it's it's entirely up to
03:05 - you in the scope of your project so to
03:06 - keep it simple we're sticking with just
03:08 - having a single object inside of the
03:11 - messages list here and it's specific to
03:13 - our system role okay so after we have
03:15 - our messages list then here's the part
03:18 - where we're actually able to
03:19 - programmatically create this template so
03:22 - we use promp layer. prompts dopu and
03:26 - inside of this publish method we're
03:28 - going to include a few arguments so the
03:30 - first one is the name of the template so
03:33 - here we say prompt name assistant type
03:35 - two now we're not calling it template
03:37 - name because this is actually a prompt
03:40 - that we're creating and then the prompt
03:41 - has a template included with it so the
03:43 - prompt can have more information than
03:46 - just the template itself but the
03:48 - template was the main focus of the
03:49 - previous video so we're going to go
03:51 - ahead and continue with that here but
03:53 - just note that in terms of the naming
03:55 - we're actually creating a prompt that
03:58 - has a template inside of it and The
03:59 - Prompt itself can have additional
04:01 - information we're not covering it in
04:03 - this video specifically but if you need
04:05 - to dive into it now we have that all in
04:06 - the documentation for prompt ler so here
04:09 - we have the prompt name assistant type
04:12 - two and the reason I put a two here is
04:15 - because if we had just left it as
04:16 - assistant type it would actually
04:18 - overwrite our previous template that we
04:20 - created within the dashboard so I don't
04:23 - want it to do that I want to have it
04:24 - create a separate template so that we
04:26 - can see that they both exist inside of
04:28 - our registry so I just added the
04:31 - underscore two to the very end here now
04:33 - for the prompt template this is the part
04:35 - where we get to define the actual
04:37 - reusable template so for input variables
04:41 - we know that we have a placeholder
04:42 - called type right we have type type type
04:45 - here inside of these curly brackets and
04:47 - so inside of this input variables we
04:49 - have a list with a single string called
04:52 - type if you had multiple placeholder
04:54 - variables throughout your template then
04:56 - you would add those here comma separated
04:58 - just like you would with a List full of
05:00 - strings okay so the next thing inside of
05:02 - this prompt template dictionary is the
05:04 - messages list now again we only included
05:07 - one object up here for messages but
05:10 - assuming that you had one or more you
05:12 - might want to instead of just passing
05:15 - things in hardcoding them you might
05:16 - actually want to iterate over everything
05:18 - you have up inside of your original
05:20 - messages list and extract the
05:22 - information for each of those message
05:24 - objects using the code that we have here
05:26 - the reason this is important is because
05:28 - you can't just take the messages list
05:30 - that we already have defined and plug it
05:32 - in here there's more information that
05:34 - needs to be included here so that we can
05:36 - properly create this template and so you
05:39 - can see here this is called messages it
05:41 - does point to a list of dictionaries but
05:45 - the keys inside of the dictionaries are
05:47 - different so the first one is RO and
05:49 - then it points to the role of the
05:51 - message so that's the same and here we
05:53 - can input the r with this logic down
05:56 - here which I'll explain in a minute but
05:58 - essentially it's just iterating over
06:00 - that original messages list and
06:02 - extracting that roll out so it says okay
06:04 - this one is system let me go ahead and
06:05 - plug that in here this is great because
06:07 - if you had another message below that
06:09 - for the initial user message and then
06:11 - after that maybe an assistant message
06:12 - going back to another us user message
06:15 - then this Ro variable here is going to
06:18 - extract that as it Loops over the
06:20 - original messages list above but this is
06:23 - where it differs and we have something
06:25 - here called prompt right so up here we
06:27 - have roll and we have content and that's
06:29 - it
06:29 - but down here we have roll and then we
06:31 - have prompt and so the prompt is another
06:34 - dictionary that has input variables you
06:36 - can see here this one is empty and then
06:38 - it has the template with the content
06:41 - variable so the content is actually
06:43 - being pulled from this Loop here so it's
06:45 - going over this messages list it's
06:47 - saying hey is there something here
06:48 - called content I need the value from
06:51 - that because I'm going to plug that in
06:53 - right here and that's going to instead
06:55 - of being the content it's actually going
06:57 - to be the template so the template
07:00 - points to the content of each one of
07:03 - those message objects hopefully that's
07:06 - not too confusing I would say just dive
07:08 - in play around with it and you'll see
07:10 - very quickly okay here's the difference
07:12 - this is the actual messages list and
07:13 - then here's me creating the template
07:15 - from that messages list so then template
07:18 - format if you remember from when we did
07:20 - this in the dashboard you can choose
07:22 - between Ginger Ginger templates or
07:24 - fstring so we're going to stick with FST
07:26 - string the only difference here of
07:28 - course is that FST string is a single
07:29 - curly brackets wrapping around the
07:31 - variable names and then Ginga is double
07:33 - curly brackets then there's something
07:35 - here called validate template we set it
07:37 - a true it's optional so you can omit
07:39 - that if you want to it's just something
07:41 - that will allow you to validate the
07:43 - template unless you specifically don't
07:44 - want to but if you omit it it will
07:47 - remain true and then the type here is
07:49 - just saying or underscore type is just
07:51 - saying that the type of object this is
07:52 - is a prompt so then what we have here is
07:55 - you can see for this dictionary we have
07:58 - this four and then there's two different
08:02 - arguments inside pen rolling content in
08:05 - a map function with a Lambda XX values
08:09 - messages so this is a uh fancy succinct
08:14 - python one liner and all it's really
08:17 - saying is hey this is an expression
08:19 - that's going to get returned so we're
08:22 - going to get one or more of these
08:25 - Expressions returned filled out with the
08:27 - dynamic content from this Loop that
08:30 - we've created over this argument here
08:33 - which is messages so it's actually
08:35 - looking at the messages that we defined
08:37 - on line 8 and it's saying okay list I'm
08:39 - going to go over through you and for
08:42 - each thing inside of you in this case
08:44 - dictionary I'm going to look for the
08:47 - role and the content inside those
08:48 - dictionaries I'm going to extract them
08:51 - and I'm going to plug them into this
08:53 - dictionary here which then gets
08:56 - populated inside of this list for the
08:58 - messages of the prompt template
09:00 - dictionary so essentially we're just
09:02 - saying hey go over messages list pull
09:05 - out the values for the rooll key and the
09:08 - content key so in this case system and
09:10 - you are a helpful type assistant yada
09:12 - yada and plug those into here where you
09:16 - see those same variable names roll and
09:18 - content okay so we're just pulling it
09:21 - from one messages list and putting it
09:23 - into the prompt dictionary for another
09:27 - messages list Within The Prompt template
09:30 - dictionary hopefully that's not too
09:32 - confusing again just go through it line
09:33 - by line run it a couple times take
09:36 - something that you're working on and try
09:38 - to use it so that you can see how it
09:39 - works but let's go ahead and do it with
09:42 - something that we've done in the past
09:43 - which is of course this assistant type
09:45 - now the assistant type 2 we're going to
09:48 - open up the terminal here and we're
09:50 - going to run python
09:53 - main.py sorry this one's not actually
09:55 - called main.py I call this one chat. py
09:58 - so that's going to have another example
10:00 - for the completion. piy so Python chat.
10:02 - piy and again we're inside of the openai
10:06 - examples 14 create prompt
10:09 - templates so if I run
10:11 - this it's actually not going to give me
10:13 - any output but it will go down to a new
10:17 - empty terminal here as soon as it's done
10:19 - running so now that it's done running
10:21 - the way that I can confirm that it's
10:23 - working is that I can head over to my
10:26 - prompt layer dashboard now here I'm
10:28 - inside of the prompt registry and you
10:29 - can see the assistant type this is the
10:31 - one that we created in that previous
10:32 - video two months ago and it's got the
10:35 - system your helpful type assistant yada
10:37 - now if I refresh this page we should see
10:40 - the assistant type two that we just
10:42 - created programmatically from our python
10:44 - file and so if we go inside of here and
10:46 - we compare it to the original
10:48 - one we can see that it is in fact a chat
10:52 - completion with an fstring template it
10:54 - has the system here you're helpful and
10:56 - that says type for assistant the only
10:58 - answer type related questions so that
11:00 - all checks out you can see that the type
11:02 - variable was actually detected as an
11:05 - input variable and it includes it here
11:07 - input variables now we haven't included
11:09 - functions we're going to do that in a
11:11 - future video we haven't included any
11:12 - metadata or parameters or anything like
11:14 - that and that's the separation between
11:16 - the template and the prompt right
11:18 - there's a lot more stuff you can do with
11:20 - creating a prompt like having the
11:22 - metadata and having the parameters for
11:24 - the prompt things like which model
11:26 - you're using and all that and then
11:27 - there's the actual template
11:29 - which is this that we're looking at here
11:32 - the versioning of course if we were to
11:34 - run this a second time maybe with some
11:36 - slight differences to it if you keep the
11:38 - same name assistant type 2 it'll
11:40 - actually overwrite assistant type 2 but
11:43 - it'll give you a new version
11:44 - automatically so in that case it would
11:45 - be version two the latest version with
11:47 - whatever changes that you submitted so
11:49 - that's why we did assistant type 2 here
11:52 - just to have two separate things to look
11:54 - at but if we had just kept the assistant
11:56 - type name without adding theore 2 at the
11:58 - end what it would have done is it
12:00 - actually would have updated the
12:01 - assistant type here the one that we
12:03 - created previously and it would have
12:05 - just given us a new version so here's
12:08 - one we created previously you can
12:09 - actually see where we ran some prompts
12:11 - or some requests to the chat completions
12:14 - API and then we just connected the
12:16 - responses from those to the template
12:18 - that we used now we haven't done that
12:20 - with the assistant type 2 but again this
12:22 - one was created inside the dashboard
12:24 - just by going to registry clicking on
12:26 - create new template and doing everything
12:28 - there whereas the other one was created
12:31 - inside of our code really simple you
12:34 - have multiple options if you prefer the
12:36 - goey interface you can do it from your
12:38 - dashboard on prompt layer if you prefer
12:40 - to do everything programmatically then
12:41 - you can do it over here or you can do a
12:42 - combination of the two it's your choice
12:45 - so thanks a lot for watching this video
12:46 - and we will catch you all in the next
12:48 - one peace

Cleaned transcript:

hey welcome back everybody this is Ian bringing you another video in this AI series with the New Boston today's video is going to be really quick really simple of course you want to have watched all of our previous videos leading up to this point to be able to understand everything that's going on in this one but what we're going to do here is we're going to expand on a concept that we covered in a prior video where we showed you how to create prompt templates from The Prompt layer dashboard so they have a graphical user interface where you can go into the dashboard you can click on a button create new prompt template this is over in what they call the registry and you can just type everything in through a form that's great although some of you may want to do that programmatically and so that's what this video is about so it's really simple there's multiple prompt templates that we can create right we can create one for a completion or for a chat completion we've been using chat completions for the entirety of the series so we're going to go ahead and continue focusing on that so at the top here we are going to import OS and our prompt l layer library and then we're going to set our API key using OS getting that promp layer API key from an environment variable and then we go ahead and get open aai directly from promp layer open. openai create a new client for openai with client is equal to open AI open close fors and then this of course assumes that we have the open AI API key environment variable already set behind the scenes the next thing we want to do is Define the messages that are going to be included in our template so I actually used the same template that we created in the video where we did it with the graphical user interface where we had a system roll and it said for the content you are a helpful type this is a placeholder variable assistant you only answer type related questions anything that isn't related to type will be politely declined and you'll gently correct the user and then when we tested that we would say stuff like for type it's equal to math and we' say uh okay now we'll include an additional user R message and that will say something like hey tell me what HTML is which is a programming thing not a math thing and so then the assistant should come back to us and say like sorry I'm a math assistant I can't help you with coding related questions so that's essentially what we did in the previous video now we just want to do it programmatically so we have our messages list and the reason that we have a list here is because you could potentially add as many messages in here as you want of course you're going to have your system roll message which you may or may not want you might just want it to default to the you know helpful assistant which is the regular default or you might want to go above that and do something like this where we create a template for the system roll Additionally you may want to add more messages message objects or dictionaries inside of this list where you have one for the initial user message or for the initial assistant response it's all up to you how you want to create that template what you need in the template what needs to be variable with the use of these input variables for the placeholders it's it's entirely up to you in the scope of your project so to keep it simple we're sticking with just having a single object inside of the messages list here and it's specific to our system role okay so after we have our messages list then here's the part where we're actually able to programmatically create this template so we use promp layer. prompts dopu and inside of this publish method we're going to include a few arguments so the first one is the name of the template so here we say prompt name assistant type two now we're not calling it template name because this is actually a prompt that we're creating and then the prompt has a template included with it so the prompt can have more information than just the template itself but the template was the main focus of the previous video so we're going to go ahead and continue with that here but just note that in terms of the naming we're actually creating a prompt that has a template inside of it and The Prompt itself can have additional information we're not covering it in this video specifically but if you need to dive into it now we have that all in the documentation for prompt ler so here we have the prompt name assistant type two and the reason I put a two here is because if we had just left it as assistant type it would actually overwrite our previous template that we created within the dashboard so I don't want it to do that I want to have it create a separate template so that we can see that they both exist inside of our registry so I just added the underscore two to the very end here now for the prompt template this is the part where we get to define the actual reusable template so for input variables we know that we have a placeholder called type right we have type type type here inside of these curly brackets and so inside of this input variables we have a list with a single string called type if you had multiple placeholder variables throughout your template then you would add those here comma separated just like you would with a List full of strings okay so the next thing inside of this prompt template dictionary is the messages list now again we only included one object up here for messages but assuming that you had one or more you might want to instead of just passing things in hardcoding them you might actually want to iterate over everything you have up inside of your original messages list and extract the information for each of those message objects using the code that we have here the reason this is important is because you can't just take the messages list that we already have defined and plug it in here there's more information that needs to be included here so that we can properly create this template and so you can see here this is called messages it does point to a list of dictionaries but the keys inside of the dictionaries are different so the first one is RO and then it points to the role of the message so that's the same and here we can input the r with this logic down here which I'll explain in a minute but essentially it's just iterating over that original messages list and extracting that roll out so it says okay this one is system let me go ahead and plug that in here this is great because if you had another message below that for the initial user message and then after that maybe an assistant message going back to another us user message then this Ro variable here is going to extract that as it Loops over the original messages list above but this is where it differs and we have something here called prompt right so up here we have roll and we have content and that's it but down here we have roll and then we have prompt and so the prompt is another dictionary that has input variables you can see here this one is empty and then it has the template with the content variable so the content is actually being pulled from this Loop here so it's going over this messages list it's saying hey is there something here called content I need the value from that because I'm going to plug that in right here and that's going to instead of being the content it's actually going to be the template so the template points to the content of each one of those message objects hopefully that's not too confusing I would say just dive in play around with it and you'll see very quickly okay here's the difference this is the actual messages list and then here's me creating the template from that messages list so then template format if you remember from when we did this in the dashboard you can choose between Ginger Ginger templates or fstring so we're going to stick with FST string the only difference here of course is that FST string is a single curly brackets wrapping around the variable names and then Ginga is double curly brackets then there's something here called validate template we set it a true it's optional so you can omit that if you want to it's just something that will allow you to validate the template unless you specifically don't want to but if you omit it it will remain true and then the type here is just saying or underscore type is just saying that the type of object this is is a prompt so then what we have here is you can see for this dictionary we have this four and then there's two different arguments inside pen rolling content in a map function with a Lambda XX values messages so this is a uh fancy succinct python one liner and all it's really saying is hey this is an expression that's going to get returned so we're going to get one or more of these Expressions returned filled out with the dynamic content from this Loop that we've created over this argument here which is messages so it's actually looking at the messages that we defined on line 8 and it's saying okay list I'm going to go over through you and for each thing inside of you in this case dictionary I'm going to look for the role and the content inside those dictionaries I'm going to extract them and I'm going to plug them into this dictionary here which then gets populated inside of this list for the messages of the prompt template dictionary so essentially we're just saying hey go over messages list pull out the values for the rooll key and the content key so in this case system and you are a helpful type assistant yada yada and plug those into here where you see those same variable names roll and content okay so we're just pulling it from one messages list and putting it into the prompt dictionary for another messages list Within The Prompt template dictionary hopefully that's not too confusing again just go through it line by line run it a couple times take something that you're working on and try to use it so that you can see how it works but let's go ahead and do it with something that we've done in the past which is of course this assistant type now the assistant type 2 we're going to open up the terminal here and we're going to run python main.py sorry this one's not actually called main.py I call this one chat. py so that's going to have another example for the completion. piy so Python chat. piy and again we're inside of the openai examples 14 create prompt templates so if I run this it's actually not going to give me any output but it will go down to a new empty terminal here as soon as it's done running so now that it's done running the way that I can confirm that it's working is that I can head over to my prompt layer dashboard now here I'm inside of the prompt registry and you can see the assistant type this is the one that we created in that previous video two months ago and it's got the system your helpful type assistant yada now if I refresh this page we should see the assistant type two that we just created programmatically from our python file and so if we go inside of here and we compare it to the original one we can see that it is in fact a chat completion with an fstring template it has the system here you're helpful and that says type for assistant the only answer type related questions so that all checks out you can see that the type variable was actually detected as an input variable and it includes it here input variables now we haven't included functions we're going to do that in a future video we haven't included any metadata or parameters or anything like that and that's the separation between the template and the prompt right there's a lot more stuff you can do with creating a prompt like having the metadata and having the parameters for the prompt things like which model you're using and all that and then there's the actual template which is this that we're looking at here the versioning of course if we were to run this a second time maybe with some slight differences to it if you keep the same name assistant type 2 it'll actually overwrite assistant type 2 but it'll give you a new version automatically so in that case it would be version two the latest version with whatever changes that you submitted so that's why we did assistant type 2 here just to have two separate things to look at but if we had just kept the assistant type name without adding theore 2 at the end what it would have done is it actually would have updated the assistant type here the one that we created previously and it would have just given us a new version so here's one we created previously you can actually see where we ran some prompts or some requests to the chat completions API and then we just connected the responses from those to the template that we used now we haven't done that with the assistant type 2 but again this one was created inside the dashboard just by going to registry clicking on create new template and doing everything there whereas the other one was created inside of our code really simple you have multiple options if you prefer the goey interface you can do it from your dashboard on prompt layer if you prefer to do everything programmatically then you can do it over here or you can do a combination of the two it's your choice so thanks a lot for watching this video and we will catch you all in the next one peace
