With timestamps:

00:00 - [Music]
00:00 - all right so let's plop open google
00:03 - and we can go to docker hub
00:07 - and all right so what we are looking for
00:10 - is an image that already comes with node
00:12 - and npm all installed
00:14 - so i'm just going to type in node right
00:16 - here and boom look at this
00:18 - so the first one that pops up is the
00:21 - node
00:22 - image now again whenever we install node
00:24 - npm is going to come along with it
00:27 - and look at all these juicy versions we
00:30 - can download all right
00:32 - so the key thing to take away from this
00:34 - is yes there already is an image
00:36 - with node in npm installed and it's
00:38 - called node
00:39 - so now what we can do is go to nano
00:44 - docker file we can remove alpine
00:47 - and instead type in node now something i
00:50 - want to point out
00:51 - whenever we install node just like this
00:54 - it's going to pull down the latest node
00:56 - image and by default
00:58 - it's going to come with a lot of things
00:59 - that we really don't need
01:02 - especially in this application since
01:04 - it's like the most boring basic
01:06 - application ever
01:07 - so as a little tip and this is just a
01:10 - generic docker thing as well
01:12 - whenever you see the word alpine it
01:14 - basically means in docker language the
01:16 - most stripped down basic
01:17 - version of anything so when you just run
01:20 - alpine straight up
01:21 - it's just going to get the most basic
01:23 - stripped down initial image
01:25 - now what we are going to do
01:29 - is we are going to use node is our base
01:32 - image
01:33 - now instead of the version if we
01:35 - actually
01:36 - run alpine as the version what this
01:39 - is saying is okay we want to use that
01:41 - node image
01:42 - like we were already intending to do
01:45 - however don't just give us the latest
01:47 - bloated version we want the most
01:49 - stripped on basic
01:50 - version of that image so that's what
01:53 - this is doing
01:54 - and now let me just save this and all
01:57 - right
01:58 - so now let's try building it again so
02:00 - docker build
02:01 - period and see if we have any better
02:04 - luck this time
02:06 - okay so it looks like npm
02:09 - was going great but what is this thing
02:11 - ideal tree already ideal tree i didn't
02:14 - even say anything about tree i don't
02:16 - even like trees
02:17 - all right so before i get too worked up
02:19 - let me just go ahead and plop
02:21 - back into our docker file and we can see
02:23 - if we can figure out what the issue is
02:25 - now this is actually a concept that i
02:29 - wanted to cover
02:29 - in the next tutorial whenever we were
02:31 - talking about working directories
02:33 - but basically you know how we have these
02:35 - keywords right here
02:36 - from run command so on and so forth
02:40 - there is another keyword called work
02:44 - dir and what this does is it
02:47 - sets the working directory for any of
02:50 - these other commands
02:51 - that you run so by default whenever we
02:54 - just say
02:55 - from node alpine and then we start
02:57 - running these commands
02:59 - these commands are going to be ran in
03:01 - like the root directory
03:02 - now we typically don't want to do that
03:04 - because the root directory
03:07 - is not where you want to be putting like
03:08 - all your application folders and files
03:10 - and source code so on and so forth
03:12 - you usually usually want to put it in
03:14 - app or user directory
03:17 - so what we're going to do is we're going
03:19 - to set our working directory
03:21 - as user app
03:24 - now again what this is going to do is
03:26 - it's going to
03:27 - basically whenever we install all those
03:29 - dependencies and move our source code
03:31 - over it's going to put it in this
03:33 - location
03:34 - rather than our root and this is
03:36 - probably going to differ depending on
03:38 - your base image but i do know for node
03:40 - alpine that this is the
03:42 - it's a location that works fine so again
03:45 - we may
03:46 - have another tutorial to cover working
03:47 - directory this keyword specifically but
03:50 - for now
03:50 - again just want to give you the quick
03:52 - and dirty of it so now let me exit out
03:54 - of this
03:55 - yes okay so let's try this
03:59 - yet again docker build come on baby no i
04:03 - mean no whammy annoy me
04:05 - okay so we don't see any red so that's a
04:07 - good thing but
04:09 - what is this failed running omg what now
04:14 - okay let me see if i can pluck something
04:16 - out of here
04:17 - what is this no such file directory open
04:20 - package.json so
04:23 - apparently docker isn't aware that i
04:27 - created this package.json file but here
04:30 - let me just clear
04:31 - okay there it is uh you know what
04:34 - i remember now from the last tutorial
04:36 - where
04:37 - docker is currently unable to find this
04:40 - package.json file
04:42 - because even though and we can probably
04:48 - just see the contents of docker file
04:50 - right here is
04:51 - even though we set it up to say okay
04:53 - this is our base image
04:55 - this is where we want to run all of our
04:57 - commands from
04:58 - uh run npm install npm start
05:01 - to docker this is its universe it says
05:05 - okay
05:06 - at what point did you tell me to include
05:07 - those other files
05:09 - and we're like oh yeah we uh i guess we
05:11 - didn't do that did we
05:13 - so my bad so now let's
05:17 - hop back in to our docker file
05:20 - and include those all right so before we
05:23 - run this
05:24 - run command npm install because what
05:26 - this command
05:27 - actually does is it installs all of
05:30 - those dependencies
05:31 - but it's going to look for that in a
05:33 - package.json file
05:35 - so at this point in time whenever docker
05:37 - looks at this instruction
05:39 - it needs to have that package.json file
05:42 - so
05:42 - in order to include those files in our
05:44 - docker image what we're going to be
05:46 - doing is copying them over
05:47 - from our current working directory to
05:50 - our
05:50 - docker image and remember the keyword
05:53 - for that is just to say
05:55 - copy these files from our local
05:58 - machine over to our docker image right
06:01 - like that
06:03 - all right so one more time it's going to
06:04 - start with this base image going to use
06:06 - this
06:07 - is our working directory to run all of
06:09 - these commands it's going to copy all of
06:11 - the files
06:11 - over and i'll show you
06:15 - it's going to copy these files over to
06:18 - our docker image
06:19 - and then what it's going to do in case
06:21 - you guys don't remember it's going to
06:22 - install those dependencies and then run
06:24 - npm start okay so now
06:28 - one more time fingers crossed let's go
06:31 - ahead and run
06:32 - docker build and instead of just
06:34 - including that period because
06:37 - you know what i'm actually pretty
06:38 - confident that this is going to work out
06:40 - this time
06:40 - what i'm going to do is i'm going to tag
06:42 - this image and again the
06:44 - name convention is just your docker
06:46 - username
06:47 - and then we can just call this image
06:49 - bucky's website
06:51 - and then we'll just tag it is latest
06:55 - and then period as our build context
06:57 - right after that
06:59 - and hopefully let's see if this works
07:02 - okay so installing come on baby no way i
07:05 - may know what i mean
07:06 - boom look at that all right
07:09 - so not sure if it worked yet but um
07:13 - let's just go ahead and see if it works
07:14 - so docker run the new boston
07:18 - bucky's
07:22 - websites and unable to find image and i
07:25 - probably had a typo so docker
07:28 - image ls okay bucky website
07:32 - forgot the s but that's cool that's cool
07:35 - all right
07:36 - so docker run the image
07:40 - bucky website i guess we'll just go with
07:42 - that
07:43 - and okay there we go so
07:47 - this is looking good uh looks like you
07:49 - run that start
07:50 - command the default command was fine
07:52 - which was just
07:53 - a you know a synonym for node index.js
07:56 - and just like we instructed it to
07:58 - whenever this
08:00 - application starts up it's going to
08:01 - console log out listening on
08:03 - port 8080. so now let me go ahead
08:06 - and let's go back here and let's just
08:09 - paste in that address one two seven
08:11 - zero zero one eighty eighty and
08:14 - okay wait a minute listen i'm poor 8080
08:18 - okay i'm on 80 80. poor 8080
08:22 - okay this isn't good
08:26 - uh what's going on here well
08:29 - docker is telling me that this
08:30 - application is indeed running on port
08:32 - 8080 but
08:34 - i just opened my browser i'm on port
08:36 - 8080 and nothing's showing up
08:38 - so what the heck all right so let's shut
08:41 - this down
08:42 - let me clear it out so this is what is
08:44 - happening
08:46 - even though docker told us yep
08:48 - application running on port 8080
08:50 - whenever we went there in our browser
08:52 - nothing was showing up this is because
08:54 - whenever we go to this location in our
08:57 - browser
08:57 - it's trying to look for a process that's
08:59 - running on our local
09:01 - machine now remember that process
09:05 - which was supposed to be serving the web
09:06 - application that was running but it was
09:09 - running on docker
09:10 - the docker container which is like a
09:12 - computer within our computer
09:15 - so okay this is an interesting problem
09:18 - so basically if you can
09:19 - imagine this terminal right here acting
09:22 - as like a mini computer
09:23 - within our computer which you can look
09:25 - at it like uh the desktop background if
09:27 - you want
09:28 - how do we say whenever we are just
09:31 - trying to
09:31 - develop an application as like a
09:33 - front-end developer
09:35 - to use docker's port 8080 instead of our
09:39 - computers poor adad well
09:42 - ladies and gentlemen that is when port
09:44 - mapping comes into the picture
09:47 - so what we need to essentially instruct
09:50 - docker to do whenever it's running
09:52 - the container is to route all traffic
09:55 - from computers port 8080 to dockers
09:58 - poor adad so how do we do that it's
10:01 - actually
10:01 - pretty easy so i'm gonna
10:04 - run this run command again but instead
10:07 - of just running it exactly like we did
10:09 - before
10:10 - what i'm gonna do is include a flag
10:12 - called p
10:13 - so this flag essentially maps a port
10:16 - from your local machine
10:17 - which we want to say yeah we can just
10:19 - run 8080 on our local machine
10:22 - this process is going to map to the
10:24 - docker container port
10:26 - 8080. so now whenever
10:29 - on our local machine we're running an
10:31 - application that tries to hit 8080
10:33 - it's gonna basically see that is
10:35 - docker's port 8080
10:38 - so just that we can verify that
10:39 - everything is working
10:41 - let me hit enter and okay
10:44 - it looks like everything is the same
10:47 - but now these ports should be mapped so
10:50 - i'm gonna pop back open my browser
10:53 - refresh and all right you may not be
10:56 - able to see it but it does indeed say
10:58 - hey now brown cow and there you go that
11:01 - is how you run a very very simple
11:04 - project
11:05 - and i want to say real project you know
11:07 - this isn't much of a project but we can
11:09 - pretend
11:10 - that is how you structure a real project
11:12 - using
11:13 - docker and again a lot more concepts to
11:16 - build on top of that
11:17 - but for now thank you guys for watching
11:18 - don't forget to subscribe and i will see
11:20 - you
11:20 - later

Cleaned transcript:

all right so let's plop open google and we can go to docker hub and all right so what we are looking for is an image that already comes with node and npm all installed so i'm just going to type in node right here and boom look at this so the first one that pops up is the node image now again whenever we install node npm is going to come along with it and look at all these juicy versions we can download all right so the key thing to take away from this is yes there already is an image with node in npm installed and it's called node so now what we can do is go to nano docker file we can remove alpine and instead type in node now something i want to point out whenever we install node just like this it's going to pull down the latest node image and by default it's going to come with a lot of things that we really don't need especially in this application since it's like the most boring basic application ever so as a little tip and this is just a generic docker thing as well whenever you see the word alpine it basically means in docker language the most stripped down basic version of anything so when you just run alpine straight up it's just going to get the most basic stripped down initial image now what we are going to do is we are going to use node is our base image now instead of the version if we actually run alpine as the version what this is saying is okay we want to use that node image like we were already intending to do however don't just give us the latest bloated version we want the most stripped on basic version of that image so that's what this is doing and now let me just save this and all right so now let's try building it again so docker build period and see if we have any better luck this time okay so it looks like npm was going great but what is this thing ideal tree already ideal tree i didn't even say anything about tree i don't even like trees all right so before i get too worked up let me just go ahead and plop back into our docker file and we can see if we can figure out what the issue is now this is actually a concept that i wanted to cover in the next tutorial whenever we were talking about working directories but basically you know how we have these keywords right here from run command so on and so forth there is another keyword called work dir and what this does is it sets the working directory for any of these other commands that you run so by default whenever we just say from node alpine and then we start running these commands these commands are going to be ran in like the root directory now we typically don't want to do that because the root directory is not where you want to be putting like all your application folders and files and source code so on and so forth you usually usually want to put it in app or user directory so what we're going to do is we're going to set our working directory as user app now again what this is going to do is it's going to basically whenever we install all those dependencies and move our source code over it's going to put it in this location rather than our root and this is probably going to differ depending on your base image but i do know for node alpine that this is the it's a location that works fine so again we may have another tutorial to cover working directory this keyword specifically but for now again just want to give you the quick and dirty of it so now let me exit out of this yes okay so let's try this yet again docker build come on baby no i mean no whammy annoy me okay so we don't see any red so that's a good thing but what is this failed running omg what now okay let me see if i can pluck something out of here what is this no such file directory open package.json so apparently docker isn't aware that i created this package.json file but here let me just clear okay there it is uh you know what i remember now from the last tutorial where docker is currently unable to find this package.json file because even though and we can probably just see the contents of docker file right here is even though we set it up to say okay this is our base image this is where we want to run all of our commands from uh run npm install npm start to docker this is its universe it says okay at what point did you tell me to include those other files and we're like oh yeah we uh i guess we didn't do that did we so my bad so now let's hop back in to our docker file and include those all right so before we run this run command npm install because what this command actually does is it installs all of those dependencies but it's going to look for that in a package.json file so at this point in time whenever docker looks at this instruction it needs to have that package.json file so in order to include those files in our docker image what we're going to be doing is copying them over from our current working directory to our docker image and remember the keyword for that is just to say copy these files from our local machine over to our docker image right like that all right so one more time it's going to start with this base image going to use this is our working directory to run all of these commands it's going to copy all of the files over and i'll show you it's going to copy these files over to our docker image and then what it's going to do in case you guys don't remember it's going to install those dependencies and then run npm start okay so now one more time fingers crossed let's go ahead and run docker build and instead of just including that period because you know what i'm actually pretty confident that this is going to work out this time what i'm going to do is i'm going to tag this image and again the name convention is just your docker username and then we can just call this image bucky's website and then we'll just tag it is latest and then period as our build context right after that and hopefully let's see if this works okay so installing come on baby no way i may know what i mean boom look at that all right so not sure if it worked yet but um let's just go ahead and see if it works so docker run the new boston bucky's websites and unable to find image and i probably had a typo so docker image ls okay bucky website forgot the s but that's cool that's cool all right so docker run the image bucky website i guess we'll just go with that and okay there we go so this is looking good uh looks like you run that start command the default command was fine which was just a you know a synonym for node index.js and just like we instructed it to whenever this application starts up it's going to console log out listening on port 8080. so now let me go ahead and let's go back here and let's just paste in that address one two seven zero zero one eighty eighty and okay wait a minute listen i'm poor 8080 okay i'm on 80 80. poor 8080 okay this isn't good uh what's going on here well docker is telling me that this application is indeed running on port 8080 but i just opened my browser i'm on port 8080 and nothing's showing up so what the heck all right so let's shut this down let me clear it out so this is what is happening even though docker told us yep application running on port 8080 whenever we went there in our browser nothing was showing up this is because whenever we go to this location in our browser it's trying to look for a process that's running on our local machine now remember that process which was supposed to be serving the web application that was running but it was running on docker the docker container which is like a computer within our computer so okay this is an interesting problem so basically if you can imagine this terminal right here acting as like a mini computer within our computer which you can look at it like uh the desktop background if you want how do we say whenever we are just trying to develop an application as like a frontend developer to use docker's port 8080 instead of our computers poor adad well ladies and gentlemen that is when port mapping comes into the picture so what we need to essentially instruct docker to do whenever it's running the container is to route all traffic from computers port 8080 to dockers poor adad so how do we do that it's actually pretty easy so i'm gonna run this run command again but instead of just running it exactly like we did before what i'm gonna do is include a flag called p so this flag essentially maps a port from your local machine which we want to say yeah we can just run 8080 on our local machine this process is going to map to the docker container port 8080. so now whenever on our local machine we're running an application that tries to hit 8080 it's gonna basically see that is docker's port 8080 so just that we can verify that everything is working let me hit enter and okay it looks like everything is the same but now these ports should be mapped so i'm gonna pop back open my browser refresh and all right you may not be able to see it but it does indeed say hey now brown cow and there you go that is how you run a very very simple project and i want to say real project you know this isn't much of a project but we can pretend that is how you structure a real project using docker and again a lot more concepts to build on top of that but for now thank you guys for watching don't forget to subscribe and i will see you later
