With timestamps:

00:00 - alrighty y'all welcome back and in this
00:02 - video we're going to be deploying the
00:04 - back end of our little mini social
00:06 - network
00:07 - and before we get started I want to say
00:09 - that I'm going to be typing out a lot of
00:12 - commands and configuration files so on
00:14 - and so forth in this video however don't
00:17 - worry about like uh like pausing the
00:19 - YouTube video and copying them I'll
00:21 - leave a link to the entire guide in the
00:24 - description below and if it's not in the
00:26 - description below for some reason then
00:28 - it'll be on the GitHub repo so either
00:32 - way
00:33 - um yeah just want to mention that you
00:34 - can just copy and paste them all
00:36 - so with that being said I'll actually go
00:40 - ahead and walk you through real quick
00:41 - what we're going to be doing
00:43 - so we're of course going to be deploying
00:45 - our back end and for our static files
00:49 - um not only the static files for like
00:50 - Django admin but we're also going to be
00:53 - storing the image files for that social
00:55 - network because remember the social
00:58 - network allows people to upload pictures
00:59 - of recipes and food and stuff so all of
01:03 - those are going to be being stored in
01:05 - the S3 bucket that we're going to
01:06 - configure in just a second
01:08 - now once that's configured then we're
01:10 - going to be setting up our ec2 instance
01:12 - and this is what's gonna be the server
01:14 - for that Docker config both the database
01:17 - and the application server that we're
01:19 - going to be running
01:20 - and from there we're going to be setting
01:23 - up an elastic IP to point to this and
01:25 - that's because whenever you restart an
01:27 - ec2 instance it actually has a different
01:30 - IP address each time so since we want to
01:33 - keep that the same so we can set up our
01:35 - domain name that's why we need elastic
01:37 - IP now the last thing I want to mention
01:39 - is that this setup right here it isn't
01:42 - like the final version of how we're
01:44 - going to be structuring everything
01:45 - because in a production environment what
01:48 - you usually want to do is instead of
01:50 - just pointing to one instance then you
01:52 - can point to a load balancer and then
01:55 - that way you can have multiple ec2
01:57 - instances and kind of distribute the
01:59 - load that way scale horizontally and
02:01 - also right now we're going to be hosting
02:03 - that postgres database right on this ec2
02:06 - instance however it's typically a better
02:08 - idea to use another service like RDS and
02:11 - that way if you have multiple ec2
02:14 - instances then they can all communicate
02:17 - with it because of course they you know
02:19 - you don't want like three separate
02:21 - databases if you have three instances
02:22 - but either way
02:24 - for this tutorial series what we can do
02:26 - is kind of like get this up and running
02:28 - and then we'll go back and figure out
02:30 - how to optimize everything and structure
02:32 - things differently I just think it's
02:33 - easier that way rather than just like
02:36 - trying to do everything all at once it
02:38 - can become a little bit overwhelming so
02:40 - baby steps we'll get there to the final
02:42 - production build but uh yeah for right
02:45 - now this is a good pathway there
02:47 - so with that being said the first thing
02:49 - actually before I hop into any of this
02:51 - AWS stuff is if you go into this project
02:55 - under scripts and you click production
02:57 - data just go ahead and run this
03:00 - and then this is going to generate all
03:02 - of the uh information that you can use
03:05 - so this signing key in account number
03:08 - this is going to be for setting up your
03:10 - super user that can log into Django
03:13 - admin and the secret key is just going
03:14 - to be of course the Django Seeker key
03:16 - but anyways go ahead and generate some
03:19 - new ones of those and I have a little
03:21 - scratch file
03:23 - to the right of my screen I just want to
03:25 - go ahead and save those
03:27 - and then yeah just kind of getting
03:29 - everything ready right now
03:32 - all right so again the first thing that
03:34 - we're going to do is we're just going to
03:36 - set up this S3 bucket and we just need
03:39 - to pretty much create one and change the
03:41 - permissions on it so we can well so we
03:44 - can actually write to it but for other
03:46 - people they need to be able to read from
03:48 - it because they're going to be image
03:50 - images here of food and people of course
03:54 - they need to be able to read those files
03:56 - to see the images
03:57 - so how do we do all this well before we
04:00 - can even create that bucket what we need
04:03 - to do is we need to create a new user
04:06 - because what's going to happen
04:09 - is I'll show you real quick so we're
04:12 - going to create a new user that has
04:14 - command line access pretty much like a
04:16 - new
04:17 - um AWS user and they're going to have
04:19 - permissions to write to this bucket and
04:21 - we just don't want to use our regular
04:23 - user right here so we can set up a um a
04:27 - special user and then we'll use the
04:29 - access keys to pretty much configure
04:32 - everything in Django
04:34 - so for now I'm just going to click add
04:36 - user
04:37 - and
04:39 - um I will say for the username I'll say
04:43 - uh
04:44 - Penguin user and that is because
04:48 - the domain name that I want to use to
04:50 - set this up is penguin chess so let me
04:52 - just say penguin chess user
04:56 - now because this is like a programmed
04:59 - user and they're not going to be
05:00 - actually someone like a human being
05:02 - logging in we don't need to provide them
05:04 - access to the AWS Management console so
05:06 - we can just go ahead and click next and
05:09 - the policies if you click right here for
05:11 - the permissions attach policies directly
05:13 - the policies that I want to attach is
05:16 - actually just one and that is Amazon
05:19 - S3 full access so this has you
05:23 - um this user has permission to pretty
05:25 - much do anything with uh S3 it's exactly
05:28 - what we want so from here go ahead and
05:30 - click next
05:31 - and then this is looking good you can
05:34 - just go ahead and click create user
05:37 - it is creating it is creating and then
05:40 - where are you at all right penguin chess
05:41 - user
05:42 - and I know this is kind of confusing
05:44 - because um
05:45 - The Social Network is for like sharing
05:48 - recipes and uploading pictures of food
05:50 - and this is like penguin chess user but
05:53 - hey it's the domain name that I had so
05:56 - uh yeah we'll just roll with that right
05:57 - now all right so anyways uh what I did
06:00 - is I clicked on the user because now
06:03 - that we have one created we just need to
06:05 - well you'll see insecurity credentials
06:08 - I'm going to scroll down here and I'm
06:10 - going to create an access key and
06:12 - whenever I hit create access key that's
06:14 - going to allow this user to pretty much
06:17 - um
06:18 - like log into AWS from our Django app
06:21 - more or less so we can select
06:23 - application running on AWS compute
06:27 - and then we can go down here and click
06:29 - next yes I understand I want to create
06:33 - one
06:34 - and for this tag uh uh I don't even
06:37 - think we need one or do we
06:39 - yep we're good all right so for the
06:42 - access key make sure to copy that in in
06:45 - your little scratch pad on the right
06:49 - I'm just gonna label these and paste
06:52 - that in and now for the secret access
06:55 - key
06:56 - just label this so I know what it is I'm
06:59 - going to go ahead and show this and copy
07:01 - this one as well
07:03 - by the way it is not usually a good idea
07:06 - to
07:08 - um create these keys and then show them
07:10 - on YouTube for the world to see however
07:12 - I'm going to be deleting these right
07:13 - after this tutorial so it's good but uh
07:16 - yeah of course you want to keep the
07:18 - secret private and uh yeah not show not
07:21 - show it to everyone but now that we have
07:23 - a user that can pretty much be
07:26 - configured in our Django app what we can
07:28 - do now is create that S3 bucket
07:32 - I'm going to click S3 and then I'm just
07:35 - going to create a brand new bucket and
07:38 - I'll say penguin chess
07:46 - uh let's see because we're gonna have
07:49 - another bucket to host a website I'll
07:51 - say uh
07:53 - um penguin chest back end
07:56 - and I want to keep this one word penguin
07:58 - chess back in all right
08:00 - now for the region this is fine
08:04 - you uh typically want to pick a region
08:06 - that's closest to you or the people who
08:08 - are going to be reading these files
08:09 - however for this tutorial you know it
08:12 - doesn't really matter that much
08:13 - and then for block all public access I
08:17 - actually want to uncheck this because
08:19 - we're going to be having uh images in
08:21 - there that we need the public to be able
08:22 - to read so of course you don't want to
08:26 - block them because that's the entire
08:28 - point and yes I acknowledge and I
08:32 - believe that is all we need let me check
08:35 - and all right great bucket
08:39 - and now that our bucket is created let
08:42 - me go ahead and actually click into that
08:44 - penguin chess penguin chess back in a
08:48 - little bit of tongue twister
08:50 - and then this is pretty much just like a
08:53 - a folder basically but now we need to
08:56 - update the permissions on it to say that
08:58 - anyone is allowed to like get the images
09:01 - in here
09:02 - so what I'm going to do to enable that
09:05 - is click on permissions after you
09:07 - clicked into your bucket and at the very
09:10 - bottom here you should see this section
09:12 - right here cross origin resource sharing
09:15 - if you just go ahead and edit this and
09:18 - then paste in this configuration that's
09:21 - pretty much what this is allowing I'm
09:23 - gonna allow anyone to get the stuff
09:26 - inside this bucket we're not going to
09:28 - have any like private files just images
09:30 - in here so yep there you go and then go
09:34 - ahead and save those changes and now our
09:36 - bucket is good to go and actually before
09:39 - you close out of this tab go ahead and
09:41 - copy the bucket name and stick that in
09:43 - your scratch file too
09:46 - okay name
09:47 - and the reason that we need this is
09:50 - because whenever we configure our ec2
09:54 - instance to pretty much write these
09:56 - files then it needs to know what bucket
09:58 - it's writing to
10:00 - so with that being said we can now move
10:03 - on and start setting up our ec2 instance
10:06 - so from here go ahead and
10:09 - go to your ec2 section
10:11 - and actually what I want to do is I want
10:13 - to switch over to Oregon
10:18 - and yeah so okay now
10:23 - um actually the region you want again
10:24 - it's going to be closest to you but this
10:26 - is where I have all my other ones and
10:29 - just go ahead and click in instances
10:30 - because we want to click this button
10:33 - right here to launch a new instance
10:36 - and for the name name it something that
10:38 - is relevant to your application but for
10:40 - this I'll say penguin chess core
10:44 - and the uh the operating system that we
10:48 - want I'm actually going to search for
10:50 - Ubuntu because I'm looking for this
10:52 - second option right here Ubuntu Server
10:54 - 20.04 LTS hvm and then this one is good
10:58 - too by default 64-bit x86 select that
11:03 - and now once that is selected
11:07 - just make sure yep what we can do here
11:11 - is just review this the micro or the
11:14 - tiniest one is fine now go ahead and
11:16 - select the key pair that you want to use
11:18 - mine is this one I'm on my
11:21 - new iMac actually isn't that new anymore
11:24 - but the time I made that key pair it was
11:26 - now for network settings what we want to
11:28 - do is of course allow SSH so we can SSH
11:31 - and configure everything allow https and
11:35 - we also want to allow HTTP and the
11:37 - reason that we want to allow both of
11:38 - these is because whenever we are setting
11:41 - up our certificate as part of that like
11:43 - a verification process it's going to
11:45 - reach out to our server and because we
11:48 - don't have HTTP yet or excuse me https
11:51 - yet because like that's what we're in
11:53 - the process of doing enabling that it
11:55 - needs to communicate over http
11:57 - so anyways that's the story behind why
11:59 - you need both of these but make sure
12:01 - that these are all checked and I think
12:04 - that's all we need so go ahead and
12:06 - launch this bad boy
12:08 - and then just wait
12:11 - until it's ready
12:14 - all right so it says it launched it but
12:16 - now click back in your instances you can
12:19 - see that it's probably uh still pending
12:21 - right here
12:23 - so just wait a few minutes until it is
12:26 - up and running and then we will be ready
12:29 - to move on to the next step
12:31 - all right so that took less than like 30
12:34 - seconds but anyways go ahead and click
12:36 - into it whenever it's running and now
12:38 - what you're going to be able to see the
12:39 - public IP address and this is where we
12:42 - can SSH into so go ahead and make sure
12:45 - that's copied
12:46 - and now pop open a terminal in SSH and
12:51 - the username is
12:52 - Ubuntu
12:54 - at the IP address to enter and yes
12:59 - everything's good
13:02 - and we are in okay so the first thing
13:06 - we're going to do to kind of uh start
13:08 - setting things up is just update the
13:10 - package index and upgrade packages so
13:13 - that's uh again sudo apt update this
13:16 - Command right here
13:20 - all right and then once that's done the
13:22 - next thing that we're going to be doing
13:24 - is installing a couple different things
13:26 - Docker git nginx serpot basically just a
13:31 - bunch of different packages that we're
13:32 - going to be needing so go ahead and run
13:35 - that as well
13:37 - all right looking nice looking nice so
13:40 - after this what we need to do is we need
13:42 - to download the docker gpg key and what
13:46 - this is used for is to verify the
13:47 - authenticity of the docker packages
13:51 - during installation so just go ahead and
13:54 - run that should take like a fraction of
13:56 - a second
13:57 - then after this we are going to add the
14:01 - docker repository
14:03 - um entry to the systems software sources
14:05 - list so pretty much we have a new place
14:08 - to uh download from
14:10 - and then after this since we updated
14:12 - that we just need to run sudo app update
14:15 - again
14:16 - and then once that is done
14:21 - and we got our sources updated we can
14:24 - run this command to actually install
14:26 - some of the docker related tools
14:31 - beautiful okay so now that those are
14:34 - done this Command right here is going to
14:37 - allow us to install Docker compose
14:40 - and then once we have that installed we
14:43 - need to actually make it executable so
14:45 - we can run it from the command line and
14:46 - that's what this command is doing right
14:48 - here
14:49 - and then from there what we want to do
14:51 - is we will want to add your user to the
14:54 - docker group
14:56 - so click enter and do it with this
14:59 - command and now that they are added what
15:02 - we need to do is we can just go ahead
15:04 - and exit this and then SSH back in and
15:07 - then that's going to pick up all your
15:08 - updated permissions
15:11 - so now once we log in again we are going
15:14 - to be
15:16 - uh yeah good to go our users added to
15:18 - the docker group and from here
15:21 - the next step is we can actually clone
15:23 - our application from GitHub
15:26 - so to do this is this command again it
15:29 - it was in my uh the New Boston
15:31 - Developers
15:32 - organization under a repo called cooking
15:35 - core
15:36 - so just go ahead and clone that
15:39 - and then once that's done I'm going to
15:42 - go ahead and CD into that directory
15:45 - and then from here
15:47 - we need to go ahead and create that dot
15:49 - m file so you can actually just touch it
15:52 - since it doesn't exist but no it doesn't
15:55 - hurt the test its existence first all
15:57 - right so now we have that dot end file
15:59 - created and now what we need to do is
16:03 - pretty much make the equivalent of this
16:05 - but for production so we're going to
16:08 - create a local directory and then we're
16:11 - gonna write pretty much settings.prod.py
16:16 - so in order to do that if you do maketer
16:19 - hyphen P local
16:21 - and then from here once we have that we
16:25 - can just create a new file
16:26 - by sudo Nano in that directory called
16:30 - settings prod.py
16:33 - and now in here this is what we're going
16:36 - to be pasting in
16:38 - so check it out
16:40 - so debug false that's what we want now
16:44 - for our secret key let me see what one I
16:46 - generated in my scratch file
16:50 - all right
16:54 - all right so replace the secret key with
16:56 - your secret key
16:57 - and then for these trusted Origins just
17:00 - replace the name
17:03 - with whatever domain name that you are
17:06 - using
17:07 - penguin just want to make sure I spelled
17:09 - everything right all right so this is
17:12 - the non WWE version www version and then
17:15 - this has that and then for the AWS
17:19 - access key ID
17:21 - this is pretty much that
17:23 - um user that we created so they can
17:26 - write to our bucket so the first one is
17:28 - the access key itself
17:31 - and then the second one is the secret
17:33 - access key
17:36 - so those are the user credentials and
17:39 - now the last thing is the name of our
17:42 - bucket
17:43 - and mine was named penguin chest
17:48 - penguin chess backhand not chest okay
17:51 - now just save those and that's all we
17:54 - actually need to do to uh kind of
17:56 - configure our application so from here
17:59 - what we can do is we can run Docker
18:01 - compose build and remember whenever we
18:04 - run this by default it is actually show
18:08 - you the output of this just to show you
18:10 - what it looks like but by default it
18:12 - uses that Docker compose yaml file not
18:14 - the docker compose Dev file which we use
18:18 - just for local development but that's
18:20 - why we don't have to like specify it
18:22 - because it's like the default already
18:23 - for Docker compose
18:25 - so this is going to go ahead and build
18:27 - those containers both the
18:29 - um the database one and our application
18:32 - one and remember for our application one
18:34 - it's using that
18:36 - um Docker file in that entry point as
18:38 - well so that's what's happening right
18:40 - here
18:43 - again it's running this uh EC working
18:45 - directory and then it's getting all
18:47 - those um like apt
18:49 - installing poetry so on and so forth and
18:52 - now after this it's going to install
18:54 - those python dependencies
18:56 - right here poetries installing those
18:59 - all right looks like all went well so
19:02 - from here now that we have
19:05 - um those containers built we want to
19:07 - spin them up so Docker can pose up minus
19:10 - D this is going to run in Demon mode
19:12 - which means there are just going to run
19:14 - in the background and they are going to
19:17 - run in the background just because uh
19:18 - you know we don't want to have to keep
19:21 - our shell open the entire time so yes
19:24 - those are running and to verify if you
19:26 - do Docker PS then you can see indeed
19:30 - well this is kind of hard to see let me
19:32 - see all right well this first one right
19:34 - here this is the
19:36 - um application that's using that Docker
19:39 - file and the second one this is the
19:40 - database so we have two compute two
19:43 - containers communicating with each other
19:44 - just like we wanted
19:46 - looking good
19:48 - and five one okay
19:51 - now from here we do need to do a couple
19:53 - things just to kind of like initialize
19:55 - our app the first thing we're going to
19:57 - do is create a super user
19:59 - just so we can log into Django admin so
20:01 - if you do Docker exec it and then paste
20:04 - in the name
20:05 - and this is probably going to be easier
20:07 - to see on your screen but I have
20:09 - everything kind of jumbo for YouTube but
20:11 - Docker exec hyphen it in your container
20:14 - ID and then bin bash this is gonna
20:16 - pretty much allow us to Shell into the
20:19 - container
20:20 - and now what we can do is we can make
20:24 - super user
20:27 - and then okay it's going to ask us for
20:30 - those credentials and also
20:33 - this is in the scratch pad that we had
20:36 - earlier so this was my account number
20:38 - and for the password just put in your
20:40 - signing key
20:44 - and all right
20:46 - now another thing that we have to do
20:48 - after this just one other thing is that
20:51 - we are going to Shell in to
20:54 - we're going to Shell into Django and I
20:58 - know this is a kind of shell section
21:00 - here however because I'm already shown
21:03 - into like my ec2 instance in within my
21:06 - ec2 instance I'm like Sheldon to my
21:09 - Docker container and in my Docker
21:11 - container I'm going to be shelling into
21:13 - to this Django show right here but
21:16 - either way after you create your super
21:18 - user write make shell and this is going
21:20 - to pop you into Django shell
21:23 - section
21:25 - a few more shells I should be able to
21:26 - start a beach all right and we are going
21:29 - to run this command from cooking core
21:31 - models import config and this is just
21:33 - the kind of part of the application it's
21:36 - not going to be part of the process for
21:38 - like most of your normal apps but just
21:41 - the way I have this cooking social
21:42 - network set up uh we're gonna run config
21:45 - object we just need to have one with the
21:48 - owner equals none transaction fee equals
21:50 - one
21:51 - and then from here we can just go ahead
21:53 - and exit out of the Django shell
21:55 - and whenever you do this right exit with
21:57 - the parentheses right after it
21:59 - so now we're exit out of the Django
22:01 - shell we're in the um Docker container
22:05 - still so to exit the docker container
22:07 - you exit without the parentheses and now
22:11 - we are back into just our regular old
22:14 - server
22:15 - all right looking good now the next
22:17 - thing we're going to be doing from here
22:19 - is we're going to be setting up nginx
22:22 - now this nginx setup is actually going
22:25 - to be kind of like a two-step process I
22:27 - would say the first thing we're going to
22:29 - do is just enable like basic
22:31 - communication with our server and that's
22:33 - because later on we are going to be
22:35 - using serpot to set up https however
22:40 - for that communication it's basically
22:43 - that it communicates with our server
22:45 - verifies that we are who we say that we
22:47 - are and then once we have that set up we
22:49 - can enable https
22:52 - so it's kind of a two-step process kind
22:54 - of weird but um this is how it's done so
22:57 - go ahead and remove the default nginx
22:59 - config that just came with the
23:01 - installation and we're just going to do
23:03 - sudo Nano
23:05 - to write our own
23:07 - nginx config by the way they're like
23:10 - sawing something outside it's kind of
23:13 - annoying but whatevs we'll fight through
23:15 - it
23:16 - all right now in here paste in
23:20 - just want to make sure it's all good so
23:22 - paste in the configuration that um is
23:25 - going to be included in the link below
23:27 - then just save that so we now have our
23:30 - own Uh custom like temporary
23:33 - configuration for nginx and you can just
23:35 - do pseudo nginx hyphen T to test that
23:37 - configuration make sure your syntax is
23:40 - good and you didn't like uh miss a
23:42 - bracket or anything
23:43 - and from here we actually need to
23:46 - restart nginx so I can pick up that
23:47 - updated configuration
23:49 - and that was quick
23:52 - and the last thing we need to do is run
23:54 - this Command right here and that's going
23:55 - to allow nginx through our firewall
23:59 - so it rules updated and yeah now people
24:02 - can pretty much uh communicate with our
24:05 - server more or less
24:06 - so now that this is looking good for now
24:09 - the next thing that we're going to do is
24:12 - we're going to set up this elastic IP
24:14 - because remember we are Sheldon using
24:17 - this IP however because we want to set
24:20 - up our domain name and if we were to
24:22 - restart this instance right now we would
24:23 - get a new IP address which is not that
24:27 - great we're going to need an elastic IP
24:29 - which uh is pretty much just like a
24:33 - the naming of it is actually kind of
24:35 - confusing because it's like a IP address
24:37 - that doesn't change
24:38 - it's probably called elastic because you
24:41 - can point it to different things but
24:42 - either way go down here to elastic IPS
24:45 - and click on that
24:47 - and from here we can just go ahead and
24:50 - click allocate
24:52 - new uh elastic IP
24:56 - and then yes this is all good go ahead
24:59 - and click allocate pretty much it's
25:01 - saying like created and elastic IP
25:05 - and from here I'm just going to name it
25:07 - uh
25:10 - penguin chess
25:11 - so I can kind of differentiate that
25:14 - and ra so once it's selected what we
25:17 - need to do now is we pretty much have
25:19 - one created
25:20 - but there is no link to any of our ec2
25:22 - instances so to create that link again
25:25 - make sure it's selected and then if you
25:27 - go to actions associate elastic IP
25:29 - address
25:30 - then make sure you have instance
25:32 - selected right here and then for our
25:34 - instance we can choose this one right
25:36 - here penguin chess core
25:40 - and then just click associate that
25:43 - and now we have a link between our
25:46 - elastic IP and it pretty much is like a
25:49 - pseudonym or references this ec2
25:53 - instance and to test that what we can
25:55 - actually do is
25:58 - actually it's usually down here
26:01 - grow up a little bit all right so this
26:03 - was our new IP address that doesn't
26:06 - change make sure that you go ahead and
26:08 - copy that
26:10 - because if all went well let me actually
26:14 - get a new tab here
26:17 - because if all went well then we should
26:19 - be able to ssh in using our new
26:24 - so again this is our elastic IP now
26:28 - and yes
26:32 - okay looking good
26:35 - so now let me pull up my fancy load
26:38 - diagram again so now that we got an IP
26:41 - address that doesn't change what we'll
26:42 - do now is we'll update our domain name
26:44 - to point to this IP so I'm going to go
26:47 - ahead and first I'm going to copy this
26:49 - IP address because during the
26:52 - configuration you need to give it an IP
26:53 - address to point to
26:55 - but anyways under your RDS no no no I
26:59 - always get it confused Route 53
27:02 - RDS is for our database setup but under
27:05 - Route 53 go to hosted Zone
27:08 - and penguinchess.net so this
27:11 - penguinchess.net is what we use for
27:14 - um the back end the penguin chest IO is
27:17 - what we'll use to host the front end so
27:20 - users will type in this whenever they're
27:22 - going to the um actual site however if
27:25 - we just want to hit our API or reference
27:27 - it then we'll use this but this is what
27:30 - we're setting up for our ec2 instance
27:31 - since this is our back end and I already
27:34 - have a a name so I can just go ahead and
27:37 - edit this but if you don't see a name
27:40 - right here you can just go ahead and
27:41 - create a new one but anyways I want to
27:44 - update my a name
27:46 - and I want to point this to
27:50 - and I don't need an alias I just want to
27:53 - point it to this elastic IP
27:57 - and then I'm going to save that and it
28:00 - says that it was updated cool cool
28:03 - so from here what you can do let me pull
28:07 - up this in this tab is we pretty much
28:10 - need to make sure that this domain name
28:12 - is now pointing to our new IP address
28:16 - that we have set
28:17 - so from here you can make sure you copy
28:21 - this go ahead and open any DNS Checker
28:24 - tool I use this dnschecker.org just
28:27 - paste it in here and hit search
28:29 - and yes 4 4
28:32 - 159 44159 that was the one right I just
28:37 - gotta double check real quick yep four
28:39 - four one five nine okay so it looks like
28:42 - our DNS settings are updated
28:45 - so now uh
28:47 - penguinchess.net is pretty much uh like
28:51 - a representative of our server right
28:53 - here
28:54 - and in fact you can actually um
28:58 - let me open a new tab yet again
29:01 - and then I can SSH
29:04 - Ubuntu at
29:06 - penguinchess.net yes
29:10 - all right
29:12 - pretty sweet huh
29:13 - and now that we have our domain name and
29:16 - everything Linked UP what we can finally
29:17 - do is request our SSL certificate and
29:21 - let me actually one second
29:25 - I'm just updating my little config file
29:28 - that I'm going to paste in to um be the
29:31 - domain but I'll show you what I'm doing
29:34 - all right so the first thing uh you want
29:37 - to do is you want to run this command
29:38 - and pretty much follow along the prompts
29:41 - and this is pretty much just uh this
29:44 - serpot we installed earlier it's just
29:46 - gonna well this is how you set up your
29:48 - SSL certificate
29:50 - so for the email address mine is Bucky
29:54 - at
29:55 - hotmail.com I'm just kidding it's a
29:58 - Bucky
29:59 - to new
30:01 - boston.com that should be my email
30:04 - address though do I agree to this yes I
30:07 - definitely read that wink oink all right
30:10 - next would you be willing to share your
30:12 - email address no thanks
30:14 - just willing to share on YouTube for
30:16 - everyone to see and uh no name okay so
30:20 - this last one is just um your domain
30:23 - name
30:27 - penguin chess actually wow almost messed
30:30 - it up penguin chess dot net uh
30:33 - definitely make sure you don't have any
30:35 - typos in here because uh they need to
30:37 - verify penguinshest.net hit enter and
30:41 - okay
30:42 - so while that is doing its thing
30:47 - all right looking good
30:51 - all right so the next command is this
30:53 - um it's just going to do a dry run of
30:55 - the renewal and this should make sure
30:57 - that your uh certificate's Auto renewal
31:00 - is set up
31:04 - all right enjoy one congratulations our
31:07 - newer it'll succeed yada yada looking
31:09 - good all right
31:11 - so all that is set and now what we can
31:15 - do is we can actually override that old
31:17 - temporary nginx configuration and stick
31:20 - in our new permanent one so in order to
31:23 - do that kind of the same pattern we did
31:25 - before we're going to remove the one
31:27 - that was in there
31:28 - and then we're just gonna use Nano to
31:32 - create a new one
31:33 - and then
31:35 - go ahead and paste in this config
31:39 - and by the way
31:42 - let me scroll up and show you what
31:45 - you're going to need to replace on here
31:47 - so in here you are going to need to
31:50 - replace two little Snippets this right
31:53 - here and also the line underneath it
31:55 - replace
31:57 - it with whatever your domain is
32:00 - so once that's good to go just go ahead
32:02 - and save this file
32:04 - hit enter
32:05 - and all right
32:07 - and of course anytime you update your
32:10 - nginx configuration the first thing that
32:12 - you should always do is test it just
32:14 - make sure you don't have any syntax
32:15 - issues
32:16 - and then after that once it's valid you
32:19 - need to restart nginx just to pick up
32:21 - that updated configuration
32:23 - all right nginx is good don't have to
32:25 - mess with it anymore
32:26 - and on actually on that note I think
32:29 - everything's done
32:31 - so let me just pop this open and at this
32:34 - point we should be able to go to uh
32:37 - penguinchess.net and hopefully if we go
32:41 - to admin
32:43 - all right looking sweet
32:45 - and again you can see that this is
32:47 - indeed
32:49 - over https
32:51 - so everything was set up good to go and
32:55 - now I can just log in with my account
32:56 - number
32:59 - and
33:00 - the signing key
33:05 - beautiful
33:07 - beautiful okay
33:10 - so yes that is uh yeah that's pretty
33:14 - much how you set up the back end
33:15 - now in the next video like I said even
33:17 - though this is kind of like a Django uh
33:21 - tutorial series
33:22 - what we're going to be doing is we're
33:24 - going to be setting up the front end
33:25 - because like I said I got a feeling if
33:27 - you are you know digging around in AWS
33:30 - and responsible for deploying your back
33:32 - end chances are you're going to be
33:34 - responsible for deploying the front into
33:35 - so I'll go ahead and uh show you how to
33:39 - set that up and after that you'll
33:41 - actually have your own little uh social
33:43 - network so that would be pretty cool so
33:46 - as always thank you for watching don't
33:48 - forget to subscribe and I'll see you
33:49 - next time

Cleaned transcript:

alrighty y'all welcome back and in this video we're going to be deploying the back end of our little mini social network and before we get started I want to say that I'm going to be typing out a lot of commands and configuration files so on and so forth in this video however don't worry about like uh like pausing the YouTube video and copying them I'll leave a link to the entire guide in the description below and if it's not in the description below for some reason then it'll be on the GitHub repo so either way um yeah just want to mention that you can just copy and paste them all so with that being said I'll actually go ahead and walk you through real quick what we're going to be doing so we're of course going to be deploying our back end and for our static files um not only the static files for like Django admin but we're also going to be storing the image files for that social network because remember the social network allows people to upload pictures of recipes and food and stuff so all of those are going to be being stored in the S3 bucket that we're going to configure in just a second now once that's configured then we're going to be setting up our ec2 instance and this is what's gonna be the server for that Docker config both the database and the application server that we're going to be running and from there we're going to be setting up an elastic IP to point to this and that's because whenever you restart an ec2 instance it actually has a different IP address each time so since we want to keep that the same so we can set up our domain name that's why we need elastic IP now the last thing I want to mention is that this setup right here it isn't like the final version of how we're going to be structuring everything because in a production environment what you usually want to do is instead of just pointing to one instance then you can point to a load balancer and then that way you can have multiple ec2 instances and kind of distribute the load that way scale horizontally and also right now we're going to be hosting that postgres database right on this ec2 instance however it's typically a better idea to use another service like RDS and that way if you have multiple ec2 instances then they can all communicate with it because of course they you know you don't want like three separate databases if you have three instances but either way for this tutorial series what we can do is kind of like get this up and running and then we'll go back and figure out how to optimize everything and structure things differently I just think it's easier that way rather than just like trying to do everything all at once it can become a little bit overwhelming so baby steps we'll get there to the final production build but uh yeah for right now this is a good pathway there so with that being said the first thing actually before I hop into any of this AWS stuff is if you go into this project under scripts and you click production data just go ahead and run this and then this is going to generate all of the uh information that you can use so this signing key in account number this is going to be for setting up your super user that can log into Django admin and the secret key is just going to be of course the Django Seeker key but anyways go ahead and generate some new ones of those and I have a little scratch file to the right of my screen I just want to go ahead and save those and then yeah just kind of getting everything ready right now all right so again the first thing that we're going to do is we're just going to set up this S3 bucket and we just need to pretty much create one and change the permissions on it so we can well so we can actually write to it but for other people they need to be able to read from it because they're going to be image images here of food and people of course they need to be able to read those files to see the images so how do we do all this well before we can even create that bucket what we need to do is we need to create a new user because what's going to happen is I'll show you real quick so we're going to create a new user that has command line access pretty much like a new um AWS user and they're going to have permissions to write to this bucket and we just don't want to use our regular user right here so we can set up a um a special user and then we'll use the access keys to pretty much configure everything in Django so for now I'm just going to click add user and um I will say for the username I'll say uh Penguin user and that is because the domain name that I want to use to set this up is penguin chess so let me just say penguin chess user now because this is like a programmed user and they're not going to be actually someone like a human being logging in we don't need to provide them access to the AWS Management console so we can just go ahead and click next and the policies if you click right here for the permissions attach policies directly the policies that I want to attach is actually just one and that is Amazon S3 full access so this has you um this user has permission to pretty much do anything with uh S3 it's exactly what we want so from here go ahead and click next and then this is looking good you can just go ahead and click create user it is creating it is creating and then where are you at all right penguin chess user and I know this is kind of confusing because um The Social Network is for like sharing recipes and uploading pictures of food and this is like penguin chess user but hey it's the domain name that I had so uh yeah we'll just roll with that right now all right so anyways uh what I did is I clicked on the user because now that we have one created we just need to well you'll see insecurity credentials I'm going to scroll down here and I'm going to create an access key and whenever I hit create access key that's going to allow this user to pretty much um like log into AWS from our Django app more or less so we can select application running on AWS compute and then we can go down here and click next yes I understand I want to create one and for this tag uh uh I don't even think we need one or do we yep we're good all right so for the access key make sure to copy that in in your little scratch pad on the right I'm just gonna label these and paste that in and now for the secret access key just label this so I know what it is I'm going to go ahead and show this and copy this one as well by the way it is not usually a good idea to um create these keys and then show them on YouTube for the world to see however I'm going to be deleting these right after this tutorial so it's good but uh yeah of course you want to keep the secret private and uh yeah not show not show it to everyone but now that we have a user that can pretty much be configured in our Django app what we can do now is create that S3 bucket I'm going to click S3 and then I'm just going to create a brand new bucket and I'll say penguin chess uh let's see because we're gonna have another bucket to host a website I'll say uh um penguin chest back end and I want to keep this one word penguin chess back in all right now for the region this is fine you uh typically want to pick a region that's closest to you or the people who are going to be reading these files however for this tutorial you know it doesn't really matter that much and then for block all public access I actually want to uncheck this because we're going to be having uh images in there that we need the public to be able to read so of course you don't want to block them because that's the entire point and yes I acknowledge and I believe that is all we need let me check and all right great bucket and now that our bucket is created let me go ahead and actually click into that penguin chess penguin chess back in a little bit of tongue twister and then this is pretty much just like a a folder basically but now we need to update the permissions on it to say that anyone is allowed to like get the images in here so what I'm going to do to enable that is click on permissions after you clicked into your bucket and at the very bottom here you should see this section right here cross origin resource sharing if you just go ahead and edit this and then paste in this configuration that's pretty much what this is allowing I'm gonna allow anyone to get the stuff inside this bucket we're not going to have any like private files just images in here so yep there you go and then go ahead and save those changes and now our bucket is good to go and actually before you close out of this tab go ahead and copy the bucket name and stick that in your scratch file too okay name and the reason that we need this is because whenever we configure our ec2 instance to pretty much write these files then it needs to know what bucket it's writing to so with that being said we can now move on and start setting up our ec2 instance so from here go ahead and go to your ec2 section and actually what I want to do is I want to switch over to Oregon and yeah so okay now um actually the region you want again it's going to be closest to you but this is where I have all my other ones and just go ahead and click in instances because we want to click this button right here to launch a new instance and for the name name it something that is relevant to your application but for this I'll say penguin chess core and the uh the operating system that we want I'm actually going to search for Ubuntu because I'm looking for this second option right here Ubuntu Server 20.04 LTS hvm and then this one is good too by default 64bit x86 select that and now once that is selected just make sure yep what we can do here is just review this the micro or the tiniest one is fine now go ahead and select the key pair that you want to use mine is this one I'm on my new iMac actually isn't that new anymore but the time I made that key pair it was now for network settings what we want to do is of course allow SSH so we can SSH and configure everything allow https and we also want to allow HTTP and the reason that we want to allow both of these is because whenever we are setting up our certificate as part of that like a verification process it's going to reach out to our server and because we don't have HTTP yet or excuse me https yet because like that's what we're in the process of doing enabling that it needs to communicate over http so anyways that's the story behind why you need both of these but make sure that these are all checked and I think that's all we need so go ahead and launch this bad boy and then just wait until it's ready all right so it says it launched it but now click back in your instances you can see that it's probably uh still pending right here so just wait a few minutes until it is up and running and then we will be ready to move on to the next step all right so that took less than like 30 seconds but anyways go ahead and click into it whenever it's running and now what you're going to be able to see the public IP address and this is where we can SSH into so go ahead and make sure that's copied and now pop open a terminal in SSH and the username is Ubuntu at the IP address to enter and yes everything's good and we are in okay so the first thing we're going to do to kind of uh start setting things up is just update the package index and upgrade packages so that's uh again sudo apt update this Command right here all right and then once that's done the next thing that we're going to be doing is installing a couple different things Docker git nginx serpot basically just a bunch of different packages that we're going to be needing so go ahead and run that as well all right looking nice looking nice so after this what we need to do is we need to download the docker gpg key and what this is used for is to verify the authenticity of the docker packages during installation so just go ahead and run that should take like a fraction of a second then after this we are going to add the docker repository um entry to the systems software sources list so pretty much we have a new place to uh download from and then after this since we updated that we just need to run sudo app update again and then once that is done and we got our sources updated we can run this command to actually install some of the docker related tools beautiful okay so now that those are done this Command right here is going to allow us to install Docker compose and then once we have that installed we need to actually make it executable so we can run it from the command line and that's what this command is doing right here and then from there what we want to do is we will want to add your user to the docker group so click enter and do it with this command and now that they are added what we need to do is we can just go ahead and exit this and then SSH back in and then that's going to pick up all your updated permissions so now once we log in again we are going to be uh yeah good to go our users added to the docker group and from here the next step is we can actually clone our application from GitHub so to do this is this command again it it was in my uh the New Boston Developers organization under a repo called cooking core so just go ahead and clone that and then once that's done I'm going to go ahead and CD into that directory and then from here we need to go ahead and create that dot m file so you can actually just touch it since it doesn't exist but no it doesn't hurt the test its existence first all right so now we have that dot end file created and now what we need to do is pretty much make the equivalent of this but for production so we're going to create a local directory and then we're gonna write pretty much settings.prod.py so in order to do that if you do maketer hyphen P local and then from here once we have that we can just create a new file by sudo Nano in that directory called settings prod.py and now in here this is what we're going to be pasting in so check it out so debug false that's what we want now for our secret key let me see what one I generated in my scratch file all right all right so replace the secret key with your secret key and then for these trusted Origins just replace the name with whatever domain name that you are using penguin just want to make sure I spelled everything right all right so this is the non WWE version www version and then this has that and then for the AWS access key ID this is pretty much that um user that we created so they can write to our bucket so the first one is the access key itself and then the second one is the secret access key so those are the user credentials and now the last thing is the name of our bucket and mine was named penguin chest penguin chess backhand not chest okay now just save those and that's all we actually need to do to uh kind of configure our application so from here what we can do is we can run Docker compose build and remember whenever we run this by default it is actually show you the output of this just to show you what it looks like but by default it uses that Docker compose yaml file not the docker compose Dev file which we use just for local development but that's why we don't have to like specify it because it's like the default already for Docker compose so this is going to go ahead and build those containers both the um the database one and our application one and remember for our application one it's using that um Docker file in that entry point as well so that's what's happening right here again it's running this uh EC working directory and then it's getting all those um like apt installing poetry so on and so forth and now after this it's going to install those python dependencies right here poetries installing those all right looks like all went well so from here now that we have um those containers built we want to spin them up so Docker can pose up minus D this is going to run in Demon mode which means there are just going to run in the background and they are going to run in the background just because uh you know we don't want to have to keep our shell open the entire time so yes those are running and to verify if you do Docker PS then you can see indeed well this is kind of hard to see let me see all right well this first one right here this is the um application that's using that Docker file and the second one this is the database so we have two compute two containers communicating with each other just like we wanted looking good and five one okay now from here we do need to do a couple things just to kind of like initialize our app the first thing we're going to do is create a super user just so we can log into Django admin so if you do Docker exec it and then paste in the name and this is probably going to be easier to see on your screen but I have everything kind of jumbo for YouTube but Docker exec hyphen it in your container ID and then bin bash this is gonna pretty much allow us to Shell into the container and now what we can do is we can make super user and then okay it's going to ask us for those credentials and also this is in the scratch pad that we had earlier so this was my account number and for the password just put in your signing key and all right now another thing that we have to do after this just one other thing is that we are going to Shell in to we're going to Shell into Django and I know this is a kind of shell section here however because I'm already shown into like my ec2 instance in within my ec2 instance I'm like Sheldon to my Docker container and in my Docker container I'm going to be shelling into to this Django show right here but either way after you create your super user write make shell and this is going to pop you into Django shell section a few more shells I should be able to start a beach all right and we are going to run this command from cooking core models import config and this is just the kind of part of the application it's not going to be part of the process for like most of your normal apps but just the way I have this cooking social network set up uh we're gonna run config object we just need to have one with the owner equals none transaction fee equals one and then from here we can just go ahead and exit out of the Django shell and whenever you do this right exit with the parentheses right after it so now we're exit out of the Django shell we're in the um Docker container still so to exit the docker container you exit without the parentheses and now we are back into just our regular old server all right looking good now the next thing we're going to be doing from here is we're going to be setting up nginx now this nginx setup is actually going to be kind of like a twostep process I would say the first thing we're going to do is just enable like basic communication with our server and that's because later on we are going to be using serpot to set up https however for that communication it's basically that it communicates with our server verifies that we are who we say that we are and then once we have that set up we can enable https so it's kind of a twostep process kind of weird but um this is how it's done so go ahead and remove the default nginx config that just came with the installation and we're just going to do sudo Nano to write our own nginx config by the way they're like sawing something outside it's kind of annoying but whatevs we'll fight through it all right now in here paste in just want to make sure it's all good so paste in the configuration that um is going to be included in the link below then just save that so we now have our own Uh custom like temporary configuration for nginx and you can just do pseudo nginx hyphen T to test that configuration make sure your syntax is good and you didn't like uh miss a bracket or anything and from here we actually need to restart nginx so I can pick up that updated configuration and that was quick and the last thing we need to do is run this Command right here and that's going to allow nginx through our firewall so it rules updated and yeah now people can pretty much uh communicate with our server more or less so now that this is looking good for now the next thing that we're going to do is we're going to set up this elastic IP because remember we are Sheldon using this IP however because we want to set up our domain name and if we were to restart this instance right now we would get a new IP address which is not that great we're going to need an elastic IP which uh is pretty much just like a the naming of it is actually kind of confusing because it's like a IP address that doesn't change it's probably called elastic because you can point it to different things but either way go down here to elastic IPS and click on that and from here we can just go ahead and click allocate new uh elastic IP and then yes this is all good go ahead and click allocate pretty much it's saying like created and elastic IP and from here I'm just going to name it uh penguin chess so I can kind of differentiate that and ra so once it's selected what we need to do now is we pretty much have one created but there is no link to any of our ec2 instances so to create that link again make sure it's selected and then if you go to actions associate elastic IP address then make sure you have instance selected right here and then for our instance we can choose this one right here penguin chess core and then just click associate that and now we have a link between our elastic IP and it pretty much is like a pseudonym or references this ec2 instance and to test that what we can actually do is actually it's usually down here grow up a little bit all right so this was our new IP address that doesn't change make sure that you go ahead and copy that because if all went well let me actually get a new tab here because if all went well then we should be able to ssh in using our new so again this is our elastic IP now and yes okay looking good so now let me pull up my fancy load diagram again so now that we got an IP address that doesn't change what we'll do now is we'll update our domain name to point to this IP so I'm going to go ahead and first I'm going to copy this IP address because during the configuration you need to give it an IP address to point to but anyways under your RDS no no no I always get it confused Route 53 RDS is for our database setup but under Route 53 go to hosted Zone and penguinchess.net so this penguinchess.net is what we use for um the back end the penguin chest IO is what we'll use to host the front end so users will type in this whenever they're going to the um actual site however if we just want to hit our API or reference it then we'll use this but this is what we're setting up for our ec2 instance since this is our back end and I already have a a name so I can just go ahead and edit this but if you don't see a name right here you can just go ahead and create a new one but anyways I want to update my a name and I want to point this to and I don't need an alias I just want to point it to this elastic IP and then I'm going to save that and it says that it was updated cool cool so from here what you can do let me pull up this in this tab is we pretty much need to make sure that this domain name is now pointing to our new IP address that we have set so from here you can make sure you copy this go ahead and open any DNS Checker tool I use this dnschecker.org just paste it in here and hit search and yes 4 4 159 44159 that was the one right I just gotta double check real quick yep four four one five nine okay so it looks like our DNS settings are updated so now uh penguinchess.net is pretty much uh like a representative of our server right here and in fact you can actually um let me open a new tab yet again and then I can SSH Ubuntu at penguinchess.net yes all right pretty sweet huh and now that we have our domain name and everything Linked UP what we can finally do is request our SSL certificate and let me actually one second I'm just updating my little config file that I'm going to paste in to um be the domain but I'll show you what I'm doing all right so the first thing uh you want to do is you want to run this command and pretty much follow along the prompts and this is pretty much just uh this serpot we installed earlier it's just gonna well this is how you set up your SSL certificate so for the email address mine is Bucky at hotmail.com I'm just kidding it's a Bucky to new boston.com that should be my email address though do I agree to this yes I definitely read that wink oink all right next would you be willing to share your email address no thanks just willing to share on YouTube for everyone to see and uh no name okay so this last one is just um your domain name penguin chess actually wow almost messed it up penguin chess dot net uh definitely make sure you don't have any typos in here because uh they need to verify penguinshest.net hit enter and okay so while that is doing its thing all right looking good all right so the next command is this um it's just going to do a dry run of the renewal and this should make sure that your uh certificate's Auto renewal is set up all right enjoy one congratulations our newer it'll succeed yada yada looking good all right so all that is set and now what we can do is we can actually override that old temporary nginx configuration and stick in our new permanent one so in order to do that kind of the same pattern we did before we're going to remove the one that was in there and then we're just gonna use Nano to create a new one and then go ahead and paste in this config and by the way let me scroll up and show you what you're going to need to replace on here so in here you are going to need to replace two little Snippets this right here and also the line underneath it replace it with whatever your domain is so once that's good to go just go ahead and save this file hit enter and all right and of course anytime you update your nginx configuration the first thing that you should always do is test it just make sure you don't have any syntax issues and then after that once it's valid you need to restart nginx just to pick up that updated configuration all right nginx is good don't have to mess with it anymore and on actually on that note I think everything's done so let me just pop this open and at this point we should be able to go to uh penguinchess.net and hopefully if we go to admin all right looking sweet and again you can see that this is indeed over https so everything was set up good to go and now I can just log in with my account number and the signing key beautiful beautiful okay so yes that is uh yeah that's pretty much how you set up the back end now in the next video like I said even though this is kind of like a Django uh tutorial series what we're going to be doing is we're going to be setting up the front end because like I said I got a feeling if you are you know digging around in AWS and responsible for deploying your back end chances are you're going to be responsible for deploying the front into so I'll go ahead and uh show you how to set that up and after that you'll actually have your own little uh social network so that would be pretty cool so as always thank you for watching don't forget to subscribe and I'll see you next time
