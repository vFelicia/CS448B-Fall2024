With timestamps:

00:00 - hi there and welcome to my python crash
00:01 - course on the new boston channel
00:04 - in this tutorial we'll be looking at the
00:05 - different types of syntax
00:07 - assigning variables looking at the
00:08 - different data types using numbers
00:11 - strings different boolean values
00:13 - operators different kinds of loops
00:15 - functions classes and even objects now
00:18 - for the stuff that i've just said made
00:19 - no sense to you
00:20 - then i challenge you to watch till the
00:22 - end of the tutorial and i assure you
00:24 - that by the end
00:25 - you'll have a great understanding of all
00:26 - of these topics
00:31 - [Music]
00:35 - also as you can probably imagine i put a
00:37 - lot of work and effort into making this
00:39 - tutorial
00:40 - it mean the world to me if you go ahead
00:42 - and subscribe to my channel it should be
00:44 - the first link in the description
00:45 - thanks so much for that and let's get
00:47 - right into it so let's start off with
00:49 - looking at comments
00:50 - now comments can be used to explain
00:52 - python code and they can also be used to
00:54 - make code more
00:55 - readable now comment always starts with
00:58 - a hash
00:59 - and python will ignore them whenever you
01:01 - try to run the script
01:02 - comments can be placed at either the
01:03 - tsar or the end of the line a comment
01:05 - does not have to be
01:06 - text to explain the code it can also be
01:08 - used to prevent python from just
01:10 - executing
01:11 - that bit of code now maybe you don't
01:13 - just want one line
01:14 - for a comment and you want multiple so
01:16 - instead of using this you could use
01:18 - triple quotes in your code
01:19 - as long as the string is not assigned to
01:21 - a variable python will read the code but
01:23 - then ignore it
01:25 - let's now have a look at how you can
01:26 - create a variable
01:28 - a variable is created the moment that
01:29 - you first assign a value to it
01:31 - for example here i'm going to say x
01:34 - equals to 10.
01:35 - so x is going to be the variable and 10
01:38 - is going to be the value
01:39 - now if you go ahead and print out x it
01:41 - should respond with
01:42 - 10. now as i said earlier we can use
01:45 - variables
01:46 - to assign any type of data whether that
01:48 - be a number or even a word
01:50 - so let's go ahead and make a new
01:51 - variable and we're going to assign it to
01:53 - the string
01:54 - coding now if you go ahead and print out
01:56 - y this is the result that we get
01:59 - now that you know how to create a
02:00 - variable let's have a look at how you
02:02 - can change the type
02:03 - even after the type has been set now
02:06 - changing a type is as simple
02:07 - as making something from an integer to
02:09 - string or string to an integer
02:12 - if you want to specify the data type of
02:14 - a variable
02:15 - this can be done with casting so if you
02:17 - go ahead and say
02:19 - x equals a string and in brackets 10
02:21 - then x will be 10 but in quotations
02:23 - and hence it will print out as a string
02:26 - now we can also go ahead and say y
02:29 - equals to the integer 3.
02:31 - now y will be 3 without any quotation
02:34 - in addition to that we can also say the
02:36 - z equals to flow
02:38 - in practice three all this does is it
02:40 - adds a decimal place to the end of three
02:42 - and hence the result three point zero
02:45 - let's now have a look at single or
02:47 - double quotes
02:48 - string variables can be declared either
02:50 - by using a single quote
02:52 - or a double let's have a look at what
02:53 - the difference is so if you go ahead and
02:55 - say
02:55 - x equals coding in double quotes and
02:58 - then we also go ahead
02:59 - and say y equals the coding in single
03:02 - quotations
03:03 - the output that we get here is actually
03:04 - going to be the exact same
03:06 - another key thing to take into
03:08 - consideration is the variable names
03:10 - are case sensitive for this one we're
03:13 - going to have a capital a
03:14 - and we're going to assign this value to
03:16 - python and now we're going to have a
03:18 - small a
03:18 - right below it and we're going to assign
03:20 - the value to variables
03:22 - let's now go ahead and print both of
03:23 - these out to see what we get
03:26 - as you can see here we get two different
03:28 - results
03:29 - this is because the capital a will not
03:31 - override the other
03:32 - let's now go ahead and look at data
03:34 - types now there are a lot of different
03:36 - types of built-in data types
03:38 - in programming data type is a very
03:40 - important concept
03:42 - variables can sort data of different
03:43 - types hence data types some of the data
03:46 - types are built into python
03:48 - are scr or string for text int or
03:51 - integer and flow for numeric types
03:53 - list tuple and range for sequence types
03:56 - as well as bool for brain types
03:58 - we'll be having a look at most of these
04:00 - in a bit more detail in just a second
04:02 - let's have a look at how you can get the
04:04 - data type so if you don't remember
04:06 - getting a data type can be done by using
04:08 - the type function
04:09 - here i'm going to go ahead and say x
04:11 - equals five
04:12 - i'm gonna go ahead and print out type x
04:16 - as you can see it tells us that x is an
04:19 - integer
04:20 - let's now have a look at numbers so
04:22 - there are two main numeric types in
04:23 - python
04:25 - int or integer and float variables of
04:28 - numeric types are created when you first
04:29 - assign a value to
04:31 - variables of numeric types are created
04:33 - when you assign a value to them
04:34 - now let's go ahead and say x equals 1
04:37 - and y
04:38 - equals to 2.8 if you go ahead and print
04:41 - out the type for both
04:42 - x and y it tells us that x is an integer
04:45 - and y is a float int or integer is
04:48 - basically a whole number
04:50 - it can be positive or negative but it
04:51 - cannot have any decimals
04:53 - float on the other hand is a floating
04:55 - point number
04:56 - and it can be either positive or
04:58 - negative but it has to contain either
05:00 - one
05:00 - or more decimals let's now have a look
05:03 - at strings
05:04 - now strings in python are surrounded by
05:05 - angle quotations
05:07 - or double quotation marks hello in
05:09 - single quotation is the same as hello in
05:11 - double
05:12 - and you can display a string literal
05:14 - with the print function
05:16 - you can also assign a multi-aligned
05:18 - string to a variable by using three
05:20 - quotes
05:21 - as i showed you earlier we can also use
05:22 - three codes for making multi-line
05:24 - comments
05:25 - however when it's connected to a
05:27 - variable it's a value
05:28 - let's go ahead and just say a equals
05:30 - triple quote and some sample text in
05:32 - multi-lines
05:34 - as you can see when we print this out it
05:35 - prints out more than one line
05:37 - now again it doesn't matter if you use
05:38 - three single quotes or three double
05:40 - quotes
05:40 - they both still do output the same
05:42 - result like many other programming
05:43 - languages strings in python
05:45 - are arrays of bytes representing unicode
05:48 - characters
05:49 - however python doesn't actually have a
05:51 - character data type
05:52 - it's simply a string with a length of
05:54 - one
05:56 - square brackets can be used to access
05:57 - the elements of a string
05:59 - so we're going to go ahead and say a
06:01 - equals to hello world and we're going to
06:03 - go ahead and print out a
06:04 - then after the a we're gonna add in
06:06 - square brackets and say one in the
06:08 - middle now before i print this out try
06:09 - and have a go yourself to see what you
06:11 - get
06:12 - as you can see here it prints out the e
06:14 - that's because the first character
06:15 - actually has a position
06:16 - of zero and not one so if we did the
06:19 - same thing
06:20 - with zero instead of one then it would
06:21 - print out h instead
06:23 - you can also get the length of a string
06:25 - by using the len
06:26 - function to try this out we're gonna
06:28 - carry on with our example with a
06:29 - being hello world what we're gonna do is
06:32 - go ahead and say print
06:33 - then and then a in the middle this
06:35 - should go ahead and print out the length
06:37 - of the string
06:38 - in this case that's going to be 13. in
06:40 - let's now have a look at booleans in
06:42 - python
06:43 - number lines represent one or two values
06:46 - true
06:46 - or false in programming you often need
06:48 - to know if an expression
06:49 - is true or false now evaluating any
06:52 - expression in python
06:53 - will get you one of these two answers
06:55 - let's go ahead and compare two values
06:57 - python will return the boolean answer so
07:00 - let's go ahead and say print 10 is
07:02 - greater than 9
07:03 - 10 equals to 9 and 10 is smaller than 9
07:06 - and the result that we get should be in
07:08 - this order 2
07:10 - false and false because 10 is greater
07:13 - than 9
07:13 - however the next two after that are
07:15 - false
07:17 - when you try and run a condition in an
07:19 - if statement python will again return
07:21 - either true or false
07:22 - we're going to go ahead and say a equals
07:24 - to 100
07:26 - and b equals to 50. let's also say that
07:28 - if
07:29 - b is greater than a then print b is
07:32 - greater than a
07:33 - else print out b is not greater than a
07:36 - now if you don't really know how if or
07:37 - else statements work
07:38 - don't worry because we'll get onto that
07:40 - in just a second now the ball function
07:42 - actually allows you to evaluate any
07:44 - value
07:44 - it also gives you true or false in
07:46 - return for example let's go ahead and
07:48 - say
07:49 - print bull hello and we'll also say
07:52 - print bool
07:53 - 15. as you can see we got two outputs
07:56 - and they're both
07:56 - true because they're both valid
07:58 - statements now almost any value is
08:00 - evaluated to true
08:01 - it has some sort of content any string
08:04 - is true
08:04 - except for empty strings and any number
08:06 - is true except for
08:08 - zero any list tuple or even sets or
08:12 - all through except for the ones that
08:13 - have nothing in them
08:15 - so again we're going to go ahead and say
08:16 - bool and then we're going to say abc
08:19 - bool123 and bull a list of apple
08:22 - cherry and banana now we haven't really
08:24 - looked the list yet but we'll be looking
08:25 - at that in a second anyways the output
08:27 - here should all be true
08:29 - even though a lot of the values are true
08:31 - some are still false
08:33 - in fact there's really not that many
08:34 - values they value to false
08:36 - except for empty values the number zero
08:38 - and even the value of none and of course
08:40 - the value false
08:41 - also evaluates to false to have a look
08:44 - at all of this
08:44 - let's say ball false ball none
08:47 - bull zero ball quotations with nothing
08:50 - inside
08:51 - will brackets when nothing inside both
08:52 - square brackets but nothing inside
08:54 - and bull curly brackets with nothing
08:56 - died and yes you guessed it
08:58 - they're all false now functions can also
09:01 - return a boolean value
09:02 - but we're not going to dive into it
09:03 - right now just because we haven't done
09:05 - functions yet
09:06 - let's now have a look at python
09:07 - operators now operators are usable for
09:10 - operations on variables and values
09:12 - for example let's use the plus operator
09:14 - to add together two values
09:16 - we said print 10 plus 10.
09:19 - now addition isn't the only operator
09:21 - that you can use you could also have
09:22 - subtraction which is just minus
09:24 - multiplication which is an asterisk
09:26 - modulus which is going to be a
09:28 - percentage symbol
09:29 - python also has a lot of assignment
09:31 - operators
09:32 - how these work is x plus equal to 3 is
09:35 - going to be the same as
09:36 - x equals to x plus 3. x minus equals to
09:39 - 3
09:39 - is the same as x equals x minus 3 and so
09:42 - on and so forth
09:43 - there's also comparison operators which
09:45 - give us boolean values as we said
09:47 - earlier
09:48 - these include equal 2 which is gonna be
09:49 - two equal signs next to each other
09:51 - greater than or equal to and even less
09:53 - than or equal to greater than or equal
09:55 - to which is going to be a greater than
09:56 - time with an equal to sign right next to
09:58 - it and less than or equal to which also
10:00 - follows the same principle
10:01 - as greater than let's now go ahead and
10:03 - have a look at python lists
10:06 - now lists are used to store multiple
10:07 - items in just a single variable
10:10 - list of one of the four built-in data
10:12 - types in python they're used to store
10:13 - collections of data
10:15 - the other three are tuples sets and
10:17 - dictionaries
10:18 - all of these have different qualities
10:19 - and usages list equates
10:21 - using square brackets let's go ahead and
10:23 - say list equals to square brackets
10:26 - apple banana oranges in the next line we
10:29 - can go ahead and print out our list
10:32 - and it gives us a pre-expected output
10:35 - now list items
10:36 - are ordered they can be changed and they
10:38 - also allow duplicate values
10:40 - items in list are also indexed the first
10:42 - item has an index of zero
10:44 - and the second item has an index of one
10:46 - when we say that the lists are in order
10:48 - it means that the items will have to
10:49 - have a defined order and that order will
10:52 - not change unless if you do it manually
10:54 - if you add new items to the list then
10:55 - your items will be placed at the end of
10:57 - the list
10:58 - since the lists are indexed you get
11:00 - multiple items with the same values
11:02 - we can go back to our list and we're
11:03 - going to add in apple and orange again
11:05 - at the end
11:06 - and when we print this out we get five
11:08 - different values to check how many items
11:10 - a list has
11:11 - use the lend function this is really
11:13 - helpful to help you print the number of
11:14 - the items in the list out
11:16 - if you go back to our list on the top we
11:18 - can go ahead and say print
11:20 - then and then list as you can see here
11:22 - prints out five
11:23 - now inside list you can have any data
11:25 - type whether that be a string
11:27 - an integer or even a boolean value let's
11:30 - now have a look at tuples
11:32 - now tuples are used to store multiple
11:34 - items in just a single variable
11:36 - and once again this is one of the four
11:37 - built-in data types that's used to store
11:40 - collections of data
11:41 - a tubal is a collection which is ordered
11:43 - however it's
11:44 - unchangeable which is why it differs
11:47 - from list
11:48 - and tubals are also written with round
11:50 - brackets instead of square
11:51 - let's go ahead and say tuple equals to
11:53 - again apple banana and orange
11:56 - when go ahead and print this out we get
11:58 - the expected output
11:59 - now as you know tuple items are ordered
12:01 - unchangeable
12:02 - but they do still allow duplicate values
12:05 - and again they are indexed so the first
12:07 - item has the index of zero
12:09 - the second is one the third is two and
12:11 - so on
12:12 - to work out the tuple length we can
12:13 - again use the link function
12:15 - and for this example we'll get three you
12:17 - can also create a tuple with only one
12:19 - item to do this you can go ahead and say
12:21 - this tuple
12:22 - equals apple but then we need a comma at
12:24 - the end otherwise python will not
12:26 - recognize it as
12:27 - a tuple and again just as list we can
12:29 - have any data type that we want
12:32 - let's now have a look at sets this is a
12:34 - third built in data type that can be
12:35 - used to store
12:36 - collections of data the sets are again
12:39 - used to store multiple items in just a
12:41 - single variable
12:42 - however a set is a collection which is
12:44 - unordered as well as on
12:46 - indexed and sets are written with curly
12:48 - brackets
12:49 - let's go ahead and say set equals to
12:52 - apple banana and orange
12:54 - now if you go ahead and print this out
12:56 - the result will be unordered
12:58 - this is because that's just don't have a
12:59 - defined order
13:01 - in addition to that they also can't have
13:02 - two items with the same value
13:05 - duplicate values here will be ignored so
13:07 - we go ahead and change our set variable
13:09 - to add an example at the end as you can
13:11 - see
13:11 - it simply just ignores it however again
13:14 - if you want to get the length of the set
13:15 - you can again use the len command
13:18 - and just like list and tuples you can
13:20 - have any data type
13:22 - now let's have a look at dictionaries
13:23 - this is the last function for drawing
13:25 - sets of data
13:27 - dictionaries are used to store data
13:28 - values and key to value pairs
13:31 - a dictionary is a collection which is
13:33 - ordered from python 3.7
13:35 - if you're using a version from 3.6
13:37 - earlier the dictionaries are on order
13:39 - but they are still changeable and they
13:41 - still don't allow any duplicates
13:43 - dryer dictionary you have to use curly
13:45 - brackets have keys they also lead into
13:47 - their values
13:48 - let's go ahead and create our first
13:50 - dictionary so we're going to say
13:51 - dictionary
13:52 - equals to brand it's going to be forward
13:54 - the model is going to be focused
13:56 - and the year is going to be 2010. when
13:58 - you go ahead and print this out
13:59 - it prints out exactly what we wrote but
14:01 - in just a single line
14:03 - now the items in this dictionary are
14:05 - ordered from python 3.7
14:07 - changeable and they also do not allow
14:09 - any duplicates
14:10 - and as i said earlier dictionary item is
14:12 - also presented in key
14:13 - to value pairs and can be referred to by
14:16 - using the key name
14:18 - to print the brand value of the
14:19 - dictionary we go ahead and say print
14:21 - dictionary
14:22 - and in square brackets we have to give
14:24 - the exact name of the key which is going
14:25 - to be brown as you can see here it
14:27 - prints out forward we can also do this
14:29 - for the model as well as the year now
14:30 - just like says
14:31 - dictionaries also don't allow any
14:33 - duplicates so if we go ahead and try and
14:34 - say yeah
14:35 - it's 2021 then simply going to ignore
14:38 - the value have a look at the dictionary
14:40 - length
14:40 - again we can use the link function and
14:42 - for this example here we're going to get
14:44 - 3.
14:45 - let's now have a look at some
14:46 - conditional statements so we're going to
14:48 - go ahead
14:49 - and again say a equals to 100 and b
14:52 - equals to 200.
14:53 - now if b is greater than a then print
14:56 - out b is greater than a
14:58 - else printout a is greater than b now if
15:00 - you go ahead and run this
15:01 - it tells us that b is greater than a now
15:04 - python relies a lot of indentation
15:07 - now indentation is a white space in the
15:09 - beginning of the line so for example
15:11 - we get rid of the indentation in front
15:12 - of print we get an indentation error
15:15 - now in addition to this we can also use
15:17 - the alif keyword
15:18 - the lf keyword is python's way of saving
15:21 - if the previous conditions were not true
15:23 - then try this one so let's go ahead and
15:24 - change our value of b
15:26 - to 100 as well and we'll say l if a
15:29 - equals b
15:30 - then print a and b are both equal in
15:32 - this example a
15:33 - is equal to b so the first condition
15:36 - isn't true and hence python goes to the
15:38 - alif statement which is true
15:39 - and hence we get the result a and b are
15:41 - equal let's now have a look in while
15:43 - loops
15:44 - now python has two primitive loop
15:46 - commands one loops and four loops
15:48 - with a while loop we can execute a set
15:50 - of statements for as long
15:52 - a condition is true we're going to go
15:53 - ahead and say i
15:55 - equals 1 and we're going to say while y
15:57 - equals
15:58 - 1 print i as you can see this is going
16:01 - to go on forever
16:02 - because i is always going to be 1. let's
16:04 - now go ahead and change this loop up a
16:06 - bit
16:06 - and we're going to say that while i is
16:08 - less than six
16:09 - print i and also i plus equals to one if
16:12 - you don't remember what this does
16:13 - i equals i plus one when we run this we
16:16 - get one two
16:16 - three four and five before the loop
16:18 - stops we can also add in a break
16:20 - statement so we can go ahead and say
16:22 - if i equals to five then break
16:25 - as you can see here we only just go up
16:27 - to four because the loop breaks as soon
16:29 - as i
16:30 - is equal to five now opposite is a break
16:32 - statement it's a continue one so we're
16:33 - going to say if i
16:34 - equals to five then just continue we
16:37 - again get up to five
16:38 - we can also use the else statement with
16:40 - while so if we go ahead and get rid of
16:42 - the if
16:42 - i equals five statement then we can
16:44 - change that to say
16:46 - else print i is no longer less than six
16:48 - so still going to count all the way up
16:50 - to five
16:50 - let's have a look at some for loops now
16:53 - a for loop is used for iterating over a
16:55 - sequence
16:56 - this can either be a list a tuple a
16:58 - dictionary a set
16:59 - or even a string with the follow we can
17:01 - execute a set of statements one for each
17:04 - item in the list
17:05 - tuple dictionary or even a set so let's
17:07 - go ahead and make our first
17:08 - list we're going to say fruits equals
17:11 - apple
17:12 - banana and orange then let's say for x
17:14 - in fruits
17:15 - we're gonna go ahead and print out all
17:17 - the different foods in a different line
17:19 - even strings are iterable objects they
17:21 - all contain a sequence of characters
17:23 - to loop the letters through the word
17:24 - banana we go ahead and say for x
17:27 - in banana in quotations print x what it
17:30 - says is just prints
17:32 - banana but with all of his characters
17:33 - separated in six different lines
17:35 - we can also use break statements in for
17:37 - loops so if we go back to our statement
17:38 - in the first place
17:39 - we can say for x in fruits blueprint our
17:42 - x however if
17:43 - x equals the banana then break so what
17:46 - this is going to do is just going to
17:47 - print out apple
17:48 - banana and then the code is going to
17:50 - break if you move the if x equals banana
17:52 - pop
17:53 - above print x then it's only going to
17:55 - print out apple and then break
17:57 - now again just like the while loops we
17:58 - can also use the continue statement with
18:00 - for loops
18:01 - we can also use else in for loop so
18:03 - let's go ahead and say for x
18:05 - in fruits print x l sprint i'm done
18:09 - and as you can see it's gonna print out
18:10 - all the fruits in a different line
18:12 - and then it's going to say i'm done now
18:15 - follow-ups cannot actually be empty
18:16 - however if you put in a pass statement
18:19 - you can avoid getting an error
18:20 - now this can be used if you don't really
18:22 - have anything to put into the loop right
18:24 - now
18:24 - however you know that you're going to
18:26 - need it for later let's have a look now
18:28 - it functions a function is a block of
18:30 - code which only just runs when it's
18:32 - called
18:32 - you can pass data known as parameters
18:34 - into a function
18:35 - a function can then return data as a
18:37 - result now creating a function
18:40 - is really easy in python it's defined by
18:42 - using the def
18:43 - keyword we're going to go ahead and
18:44 - define function and inside the function
18:46 - we're going to say print
18:47 - hello i'm a function let's call the
18:49 - function we have to use the function
18:51 - name
18:51 - followed by parentheses so if we go
18:54 - ahead and say function
18:55 - and then the parentheses then it prints
18:57 - out hello i'm a function
18:58 - information can be passed into functions
19:00 - as arguments
19:02 - arguments are specified after this
19:04 - function name inside the parentheses
19:06 - you can add as many arguments as you
19:08 - want just try and separate them with
19:10 - a comma let's go ahead and make a new
19:11 - function we're going to define this
19:13 - function
19:14 - and call it name we're going to pass in
19:16 - the argument of name
19:18 - and when the function is called we're
19:20 - going to print out name
19:21 - now to actually give the function what
19:23 - it needs to print out we have to call
19:25 - the function and in the parentheses we
19:26 - have to put in the argument so here i'm
19:28 - going to call in the function
19:29 - and put in my name as you can see for
19:31 - the output it prints on my name
19:33 - now when you are calling function you
19:34 - need to call it with the correct number
19:36 - of arguments
19:37 - no more no less or else you will get a
19:39 - type error
19:40 - now python is an object oriented
19:42 - programming language
19:44 - almost everything in python is an object
19:46 - with its own properties and methods
19:48 - a class is like a blueprint for creating
19:50 - objects to create a class we use the
19:53 - keyword class
19:54 - let's go ahead and make our own class so
19:56 - let's say class
19:57 - my class and in there we're going to put
19:59 - in the variable x
20:00 - and the value of that is going to be 5.
20:02 - now let's go ahead and create
20:04 - an object we're going to say new equals
20:06 - my class and remember the parentheses
20:08 - let's go ahead and now print out new dot
20:10 - x and this shouldn't print out the value
20:13 - of the property
20:13 - that's named x but it's inside the class
20:16 - so that's how you can make a really
20:18 - basic class
20:19 - in python but now you can go a lot more
20:21 - advanced in that however for the sake of
20:22 - this tutorial i won't be doing that as
20:24 - they can get quite advanced
20:26 - so that's gonna be it for this video
20:28 - thank you so much for watching
20:29 - if you did enjoy don't forget to
20:31 - subscribe to my channel as well as the
20:33 - new boston's channel
20:34 - and also comment down below if you'd
20:35 - like to see more longer and
20:37 - comprehensive tutorials on python
20:39 - again thanks so much for watching i'll
20:41 - see you in the next one
20:50 - you

Cleaned transcript:

hi there and welcome to my python crash course on the new boston channel in this tutorial we'll be looking at the different types of syntax assigning variables looking at the different data types using numbers strings different boolean values operators different kinds of loops functions classes and even objects now for the stuff that i've just said made no sense to you then i challenge you to watch till the end of the tutorial and i assure you that by the end you'll have a great understanding of all of these topics also as you can probably imagine i put a lot of work and effort into making this tutorial it mean the world to me if you go ahead and subscribe to my channel it should be the first link in the description thanks so much for that and let's get right into it so let's start off with looking at comments now comments can be used to explain python code and they can also be used to make code more readable now comment always starts with a hash and python will ignore them whenever you try to run the script comments can be placed at either the tsar or the end of the line a comment does not have to be text to explain the code it can also be used to prevent python from just executing that bit of code now maybe you don't just want one line for a comment and you want multiple so instead of using this you could use triple quotes in your code as long as the string is not assigned to a variable python will read the code but then ignore it let's now have a look at how you can create a variable a variable is created the moment that you first assign a value to it for example here i'm going to say x equals to 10. so x is going to be the variable and 10 is going to be the value now if you go ahead and print out x it should respond with 10. now as i said earlier we can use variables to assign any type of data whether that be a number or even a word so let's go ahead and make a new variable and we're going to assign it to the string coding now if you go ahead and print out y this is the result that we get now that you know how to create a variable let's have a look at how you can change the type even after the type has been set now changing a type is as simple as making something from an integer to string or string to an integer if you want to specify the data type of a variable this can be done with casting so if you go ahead and say x equals a string and in brackets 10 then x will be 10 but in quotations and hence it will print out as a string now we can also go ahead and say y equals to the integer 3. now y will be 3 without any quotation in addition to that we can also say the z equals to flow in practice three all this does is it adds a decimal place to the end of three and hence the result three point zero let's now have a look at single or double quotes string variables can be declared either by using a single quote or a double let's have a look at what the difference is so if you go ahead and say x equals coding in double quotes and then we also go ahead and say y equals the coding in single quotations the output that we get here is actually going to be the exact same another key thing to take into consideration is the variable names are case sensitive for this one we're going to have a capital a and we're going to assign this value to python and now we're going to have a small a right below it and we're going to assign the value to variables let's now go ahead and print both of these out to see what we get as you can see here we get two different results this is because the capital a will not override the other let's now go ahead and look at data types now there are a lot of different types of builtin data types in programming data type is a very important concept variables can sort data of different types hence data types some of the data types are built into python are scr or string for text int or integer and flow for numeric types list tuple and range for sequence types as well as bool for brain types we'll be having a look at most of these in a bit more detail in just a second let's have a look at how you can get the data type so if you don't remember getting a data type can be done by using the type function here i'm going to go ahead and say x equals five i'm gonna go ahead and print out type x as you can see it tells us that x is an integer let's now have a look at numbers so there are two main numeric types in python int or integer and float variables of numeric types are created when you first assign a value to variables of numeric types are created when you assign a value to them now let's go ahead and say x equals 1 and y equals to 2.8 if you go ahead and print out the type for both x and y it tells us that x is an integer and y is a float int or integer is basically a whole number it can be positive or negative but it cannot have any decimals float on the other hand is a floating point number and it can be either positive or negative but it has to contain either one or more decimals let's now have a look at strings now strings in python are surrounded by angle quotations or double quotation marks hello in single quotation is the same as hello in double and you can display a string literal with the print function you can also assign a multialigned string to a variable by using three quotes as i showed you earlier we can also use three codes for making multiline comments however when it's connected to a variable it's a value let's go ahead and just say a equals triple quote and some sample text in multilines as you can see when we print this out it prints out more than one line now again it doesn't matter if you use three single quotes or three double quotes they both still do output the same result like many other programming languages strings in python are arrays of bytes representing unicode characters however python doesn't actually have a character data type it's simply a string with a length of one square brackets can be used to access the elements of a string so we're going to go ahead and say a equals to hello world and we're going to go ahead and print out a then after the a we're gonna add in square brackets and say one in the middle now before i print this out try and have a go yourself to see what you get as you can see here it prints out the e that's because the first character actually has a position of zero and not one so if we did the same thing with zero instead of one then it would print out h instead you can also get the length of a string by using the len function to try this out we're gonna carry on with our example with a being hello world what we're gonna do is go ahead and say print then and then a in the middle this should go ahead and print out the length of the string in this case that's going to be 13. in let's now have a look at booleans in python number lines represent one or two values true or false in programming you often need to know if an expression is true or false now evaluating any expression in python will get you one of these two answers let's go ahead and compare two values python will return the boolean answer so let's go ahead and say print 10 is greater than 9 10 equals to 9 and 10 is smaller than 9 and the result that we get should be in this order 2 false and false because 10 is greater than 9 however the next two after that are false when you try and run a condition in an if statement python will again return either true or false we're going to go ahead and say a equals to 100 and b equals to 50. let's also say that if b is greater than a then print b is greater than a else print out b is not greater than a now if you don't really know how if or else statements work don't worry because we'll get onto that in just a second now the ball function actually allows you to evaluate any value it also gives you true or false in return for example let's go ahead and say print bull hello and we'll also say print bool 15. as you can see we got two outputs and they're both true because they're both valid statements now almost any value is evaluated to true it has some sort of content any string is true except for empty strings and any number is true except for zero any list tuple or even sets or all through except for the ones that have nothing in them so again we're going to go ahead and say bool and then we're going to say abc bool123 and bull a list of apple cherry and banana now we haven't really looked the list yet but we'll be looking at that in a second anyways the output here should all be true even though a lot of the values are true some are still false in fact there's really not that many values they value to false except for empty values the number zero and even the value of none and of course the value false also evaluates to false to have a look at all of this let's say ball false ball none bull zero ball quotations with nothing inside will brackets when nothing inside both square brackets but nothing inside and bull curly brackets with nothing died and yes you guessed it they're all false now functions can also return a boolean value but we're not going to dive into it right now just because we haven't done functions yet let's now have a look at python operators now operators are usable for operations on variables and values for example let's use the plus operator to add together two values we said print 10 plus 10. now addition isn't the only operator that you can use you could also have subtraction which is just minus multiplication which is an asterisk modulus which is going to be a percentage symbol python also has a lot of assignment operators how these work is x plus equal to 3 is going to be the same as x equals to x plus 3. x minus equals to 3 is the same as x equals x minus 3 and so on and so forth there's also comparison operators which give us boolean values as we said earlier these include equal 2 which is gonna be two equal signs next to each other greater than or equal to and even less than or equal to greater than or equal to which is going to be a greater than time with an equal to sign right next to it and less than or equal to which also follows the same principle as greater than let's now go ahead and have a look at python lists now lists are used to store multiple items in just a single variable list of one of the four builtin data types in python they're used to store collections of data the other three are tuples sets and dictionaries all of these have different qualities and usages list equates using square brackets let's go ahead and say list equals to square brackets apple banana oranges in the next line we can go ahead and print out our list and it gives us a preexpected output now list items are ordered they can be changed and they also allow duplicate values items in list are also indexed the first item has an index of zero and the second item has an index of one when we say that the lists are in order it means that the items will have to have a defined order and that order will not change unless if you do it manually if you add new items to the list then your items will be placed at the end of the list since the lists are indexed you get multiple items with the same values we can go back to our list and we're going to add in apple and orange again at the end and when we print this out we get five different values to check how many items a list has use the lend function this is really helpful to help you print the number of the items in the list out if you go back to our list on the top we can go ahead and say print then and then list as you can see here prints out five now inside list you can have any data type whether that be a string an integer or even a boolean value let's now have a look at tuples now tuples are used to store multiple items in just a single variable and once again this is one of the four builtin data types that's used to store collections of data a tubal is a collection which is ordered however it's unchangeable which is why it differs from list and tubals are also written with round brackets instead of square let's go ahead and say tuple equals to again apple banana and orange when go ahead and print this out we get the expected output now as you know tuple items are ordered unchangeable but they do still allow duplicate values and again they are indexed so the first item has the index of zero the second is one the third is two and so on to work out the tuple length we can again use the link function and for this example we'll get three you can also create a tuple with only one item to do this you can go ahead and say this tuple equals apple but then we need a comma at the end otherwise python will not recognize it as a tuple and again just as list we can have any data type that we want let's now have a look at sets this is a third built in data type that can be used to store collections of data the sets are again used to store multiple items in just a single variable however a set is a collection which is unordered as well as on indexed and sets are written with curly brackets let's go ahead and say set equals to apple banana and orange now if you go ahead and print this out the result will be unordered this is because that's just don't have a defined order in addition to that they also can't have two items with the same value duplicate values here will be ignored so we go ahead and change our set variable to add an example at the end as you can see it simply just ignores it however again if you want to get the length of the set you can again use the len command and just like list and tuples you can have any data type now let's have a look at dictionaries this is the last function for drawing sets of data dictionaries are used to store data values and key to value pairs a dictionary is a collection which is ordered from python 3.7 if you're using a version from 3.6 earlier the dictionaries are on order but they are still changeable and they still don't allow any duplicates dryer dictionary you have to use curly brackets have keys they also lead into their values let's go ahead and create our first dictionary so we're going to say dictionary equals to brand it's going to be forward the model is going to be focused and the year is going to be 2010. when you go ahead and print this out it prints out exactly what we wrote but in just a single line now the items in this dictionary are ordered from python 3.7 changeable and they also do not allow any duplicates and as i said earlier dictionary item is also presented in key to value pairs and can be referred to by using the key name to print the brand value of the dictionary we go ahead and say print dictionary and in square brackets we have to give the exact name of the key which is going to be brown as you can see here it prints out forward we can also do this for the model as well as the year now just like says dictionaries also don't allow any duplicates so if we go ahead and try and say yeah it's 2021 then simply going to ignore the value have a look at the dictionary length again we can use the link function and for this example here we're going to get 3. let's now have a look at some conditional statements so we're going to go ahead and again say a equals to 100 and b equals to 200. now if b is greater than a then print out b is greater than a else printout a is greater than b now if you go ahead and run this it tells us that b is greater than a now python relies a lot of indentation now indentation is a white space in the beginning of the line so for example we get rid of the indentation in front of print we get an indentation error now in addition to this we can also use the alif keyword the lf keyword is python's way of saving if the previous conditions were not true then try this one so let's go ahead and change our value of b to 100 as well and we'll say l if a equals b then print a and b are both equal in this example a is equal to b so the first condition isn't true and hence python goes to the alif statement which is true and hence we get the result a and b are equal let's now have a look in while loops now python has two primitive loop commands one loops and four loops with a while loop we can execute a set of statements for as long a condition is true we're going to go ahead and say i equals 1 and we're going to say while y equals 1 print i as you can see this is going to go on forever because i is always going to be 1. let's now go ahead and change this loop up a bit and we're going to say that while i is less than six print i and also i plus equals to one if you don't remember what this does i equals i plus one when we run this we get one two three four and five before the loop stops we can also add in a break statement so we can go ahead and say if i equals to five then break as you can see here we only just go up to four because the loop breaks as soon as i is equal to five now opposite is a break statement it's a continue one so we're going to say if i equals to five then just continue we again get up to five we can also use the else statement with while so if we go ahead and get rid of the if i equals five statement then we can change that to say else print i is no longer less than six so still going to count all the way up to five let's have a look at some for loops now a for loop is used for iterating over a sequence this can either be a list a tuple a dictionary a set or even a string with the follow we can execute a set of statements one for each item in the list tuple dictionary or even a set so let's go ahead and make our first list we're going to say fruits equals apple banana and orange then let's say for x in fruits we're gonna go ahead and print out all the different foods in a different line even strings are iterable objects they all contain a sequence of characters to loop the letters through the word banana we go ahead and say for x in banana in quotations print x what it says is just prints banana but with all of his characters separated in six different lines we can also use break statements in for loops so if we go back to our statement in the first place we can say for x in fruits blueprint our x however if x equals the banana then break so what this is going to do is just going to print out apple banana and then the code is going to break if you move the if x equals banana pop above print x then it's only going to print out apple and then break now again just like the while loops we can also use the continue statement with for loops we can also use else in for loop so let's go ahead and say for x in fruits print x l sprint i'm done and as you can see it's gonna print out all the fruits in a different line and then it's going to say i'm done now followups cannot actually be empty however if you put in a pass statement you can avoid getting an error now this can be used if you don't really have anything to put into the loop right now however you know that you're going to need it for later let's have a look now it functions a function is a block of code which only just runs when it's called you can pass data known as parameters into a function a function can then return data as a result now creating a function is really easy in python it's defined by using the def keyword we're going to go ahead and define function and inside the function we're going to say print hello i'm a function let's call the function we have to use the function name followed by parentheses so if we go ahead and say function and then the parentheses then it prints out hello i'm a function information can be passed into functions as arguments arguments are specified after this function name inside the parentheses you can add as many arguments as you want just try and separate them with a comma let's go ahead and make a new function we're going to define this function and call it name we're going to pass in the argument of name and when the function is called we're going to print out name now to actually give the function what it needs to print out we have to call the function and in the parentheses we have to put in the argument so here i'm going to call in the function and put in my name as you can see for the output it prints on my name now when you are calling function you need to call it with the correct number of arguments no more no less or else you will get a type error now python is an object oriented programming language almost everything in python is an object with its own properties and methods a class is like a blueprint for creating objects to create a class we use the keyword class let's go ahead and make our own class so let's say class my class and in there we're going to put in the variable x and the value of that is going to be 5. now let's go ahead and create an object we're going to say new equals my class and remember the parentheses let's go ahead and now print out new dot x and this shouldn't print out the value of the property that's named x but it's inside the class so that's how you can make a really basic class in python but now you can go a lot more advanced in that however for the sake of this tutorial i won't be doing that as they can get quite advanced so that's gonna be it for this video thank you so much for watching if you did enjoy don't forget to subscribe to my channel as well as the new boston's channel and also comment down below if you'd like to see more longer and comprehensive tutorials on python again thanks so much for watching i'll see you in the next one you
