With timestamps:

00:00 - all righty guys welcome back and in this
00:02 - video I want to talk to you about State
00:05 - now state is pretty much a way that you
00:08 - can customize a component and if you
00:10 - guys are thinking wait a minute we
00:11 - already can do that with properties
00:14 - there is one big difference between
00:16 - properties and states of your component
00:19 - and that is States they can change so I
00:23 - know I didn't mention this whenever we
00:24 - were talking about properties but
00:26 - whenever you give your component a
00:27 - custom property whenever you create it
00:30 - it's set for life so for example say
00:32 - that you have this button component and
00:34 - you pass it in the property to make the
00:36 - background color green well that button
00:38 - is going to be green for the rest of its
00:40 - life now say that you wanted to make a
00:43 - button that could change colors every
00:45 - time the user hovered over it well you
00:47 - couldn't use properties for that because
00:49 - properties their values can't change
00:52 - whenever you have a value that needs
00:54 - changing on your component you need to
00:55 - use state it sounds confusing but it's
00:58 - actually really easy you you can
01:00 - customize your component using
01:01 - properties or States whenever something
01:03 - is going to stay the same use properties
01:05 - whenever it changes use States all right
01:07 - fantastic so let's go ahead and make one
01:10 - using
01:11 - States so I'm just going to go ahead and
01:13 - make um a component called checkbox
01:16 - because you know whenever you have a
01:17 - checkbox it can either be checked or
01:20 - unchecked so what we're going to allow
01:21 - the user to do is click that and then
01:24 - we'll have a bit of text that changes it
01:26 - says hey you checked it hey you
01:28 - unchecked it hey you checked it hey you
01:29 - unchecked it so since that bit of text
01:31 - is going to change that's why I decided
01:32 - to use State instead of property so just
01:36 - going to name it checkbox and set it
01:38 - equal to
01:41 - react create
01:45 - class all right so I guess first of all
01:48 - we can just go ahead and render out the
01:49 - basic um kind of structure of it so
01:53 - again like I said what I'm going to have
01:54 - is I'm going to have a checkbox and then
01:56 - under it I'll have that uh bit of text
01:59 - that says hey it's checked hey it's
02:00 - unchecked so pretty much two different
02:01 - pieces to it so for the message which is
02:06 - pretty much just going to be equal to
02:07 - checked or unchecked um I'll just go
02:10 - ahead and do this
02:11 - MSG and now I need a if statement so the
02:15 - way you access states are pretty much
02:17 - the same as properties except instead of
02:19 - props you just use state so this state
02:22 - and later on we'll make one called
02:26 - checked and we're going to say that this
02:29 - can either be equal to true or false and
02:32 - I'll show you guys how to actually set
02:33 - that in just a second so if it is
02:37 - checked then this message we're just
02:39 - going to say equal to
02:42 - checked and then we'll say
02:46 - else message is
02:50 - unchecked all right so there is our
02:53 - basic logic right here and before we go
02:55 - further in creating this component and
02:56 - actually rendering out um any HTML I
02:59 - want want to build another function
03:00 - right here to show you guys how to set
03:02 - the initial value of your States so
03:05 - there's a built-in function and it's
03:07 - called git initial
03:10 - state so whenever you call this
03:14 - function was it going to autop populate
03:16 - for me ah come on mate just do
03:20 - it all right so this is a function that
03:24 - you can use and its job is to basically
03:27 - set up the initial state of your
03:29 - component
03:30 - and this is actually why it wasn't autop
03:32 - populating all right so what this does
03:34 - is it returns an object of your States
03:39 - now we're only going to have one state
03:40 - in here and that is checked now you can
03:44 - set this equal to true or false to start
03:46 - with it really doesn't matter I'm just
03:47 - going to set this equal to true because
03:49 - I feel like it and essentially what I'm
03:51 - going to do is I'm going to set it up
03:53 - where whenever this is true then that
03:55 - means that the user has a checkbox
03:56 - checked if it's false then it means that
03:59 - they didn't check it so it's good for
04:01 - like filling out forms and stuff like
04:02 - that all right so right now we have one
04:05 - state checked and it's equal to true and
04:08 - if you want to add another one called
04:10 - like bacon and set it equal to 32 you
04:13 - can you can add as many states as you
04:14 - want it doesn't matter so now that we
04:17 - have a state variable what we can do now
04:20 - is actually return some HTML so return
04:24 - and this is going to be on multiple
04:25 - lines so I need that and all right so so
04:29 - again like I said we're going to have a
04:30 - checkbox and then just some text below
04:33 - it so since we're going to have multiple
04:36 - elements we need to wrap them inside a
04:39 - parent div now for your
04:42 - input the type of this is going to be
04:46 - checkbox now how should I set this up
04:49 - all right I'm just going to make it
04:50 - really basic at first just so we make
04:53 - sure that something is displaying on the
04:55 - screen and then later on I'll show you
04:57 - guys the cool stuff so this this is
04:59 - going to be the checkbox and it's a
05:01 - valid checkbox right now now beneath it
05:04 - I'll say uh checkbox is and then this
05:08 - will either say checked or unchecked now
05:12 - in order to do that all we need to do is
05:14 - we need to Output this variable which is
05:17 - MSG so
05:19 - MSG boom roasted there you go now to
05:22 - actually render
05:25 - this I just throw it in
05:28 - my
05:30 - render function and let me go ahead and
05:32 - refresh this and check it out so right
05:34 - now it says checkbox is checked now why
05:36 - does it say that well because we didn't
05:39 - add any logic really we just went ahead
05:41 - and we render this component and the
05:44 - initial state of checked is equal to
05:47 - True So then whenever it rendered it
05:49 - said all right if this is checked which
05:51 - it
05:53 - was then the MSG which is the message
05:56 - set it equal to check so it says
05:58 - checkbox is checked and and again if
06:00 - this was
06:01 - false then this would say checkbox is
06:04 - unchecked just like that so we got our
06:07 - state working properly but now we have
06:08 - to actually add the brains to make it
06:10 - work correctly so let me change it back
06:13 - to true and what I'm going to do after
06:15 - this is I'm going to say all right you
06:18 - see how whenever we load this page for
06:19 - the very first time the default behavior
06:22 - of HTML and chrome is to have these
06:25 - checkboxes unchecked well we can
06:27 - actually overwrite that and there's
06:30 - built-in value called default checked so
06:35 - this is essentially equal to true or
06:37 - false you can set it equal to whenever
06:39 - whatever you want and you can actually
06:40 - just type it in but what we want to set
06:42 - it equal to is a state of this checkbox
06:46 - whether it's checked or unchecked or
06:48 - true or false so how do we do that well
06:51 - we need to access that state variable by
06:54 - this
06:56 - state checked so so again if this is
07:00 - true then it's going to say true right
07:02 - here and it's going to be
07:04 - checked which it should be just like
07:07 - that and if it was false then it would
07:09 - be unchecked which is pretty much the
07:11 - default Behavior anyways but you might
07:13 - as well have control over it so we got
07:16 - this taken care of now we have one other
07:18 - bit of logic to work out and that is we
07:20 - want to say whenever the user clicks
07:23 - this area right here then we want this
07:25 - message to
07:27 - change all right so how do we do that
07:30 - well we already learned in the last
07:32 - video how to work with event handlers
07:35 - now instead of onclicked what you may
07:37 - think it would be called it's actually
07:39 - onchanged and that gets called whenever
07:41 - the user clicks this whether they check
07:43 - it or uncheck it so I'm going to write
07:46 - onchange right
07:49 - here whenever the user clicks that
07:52 - checkbox what do we want to call well
07:54 - we're going to have to build a function
07:55 - in just a second but for right now we'll
07:58 - just say handle checked and again we
08:01 - didn't build this yet but we will build
08:03 - it right now so again whenever the user
08:05 - clicks this we're going to call a
08:09 - function called handle check now again
08:12 - that's equal to a function separate it
08:15 - with the comma and R right so what do we
08:18 - want to do whenever they check the
08:20 - checkbox well all we want to do is we
08:22 - want to pretty much set the state of the
08:25 - checked which is either true or false we
08:27 - don't know we want to set it equal to
08:29 - the opposite of what it was before so I
08:32 - say that because if it's checked and
08:34 - they clicked it then we want to set it
08:36 - to false if it already is false and they
08:38 - check it then we want to set it equal to
08:40 - true so we pretty much change it from
08:42 - whatever it is now a really cool way
08:44 - that we can do that is this whenever you
08:46 - want to change the state of a component
08:49 - variable then all you have to do is call
08:51 - this set State now
08:56 - this takes an object and and just like
09:00 - this you can pretty much set it to
09:03 - whatever you want so we can just go
09:05 - ahead and set the state equal to false
09:07 - or true or anything like that but
09:09 - instead of just passing it in um a value
09:13 - we just want to get the
09:14 - current value of checked and make it the
09:18 - opposite so how do we do this well we
09:22 - already know how to get the
09:25 - state by using this this. state. check
09:28 - and in order to flip it or give the
09:30 - opposite we just write a ex what is it
09:34 - exclamation mark in front of it
09:36 - basically this the symbol above the one
09:38 - all right so what this is going to do
09:40 - again whenever we click this is it's
09:42 - going to get the current state of the
09:44 - checkbox is it checked or not is just
09:46 - going to set the new state equal to the
09:48 - opposite of it that's it so now let's go
09:51 - ahead and refresh
09:53 - this and check it
09:56 - out it now toggles on unchecked and
10:00 - checked unchecked and checked boom boom
10:03 - boom boom now this is another important
10:06 - thing that I want to point out you see
10:08 - right here all we did is we set the
10:12 - state all right but why does it
10:15 - automatically render I mean usually in
10:18 - most programs you would have to be like
10:20 - all right so we're going to change it
10:21 - State and then we need to explicitly
10:23 - tell react all right now we have to
10:25 - redraw this piece of the Dom this piece
10:28 - of the web page but the cool thing about
10:31 - react in components is you don't need to
10:33 - explicitly say whenever your state
10:36 - changes to redraw a certain part of your
10:38 - web page it automatically watches for
10:41 - your States and where they can change
10:43 - and whenever your state changes that
10:46 - part of the web page gets redrawn
10:48 - automatically to fit that so all we have
10:50 - to do is we worry about changing states
10:52 - and all the rest of the hardware gets
10:55 - taken care of for us so look at this we
10:58 - now got a
10:59 - custom part of this component that can
11:02 - change so by default it's checked and
11:05 - whenever we uncheck it and check it
11:07 - again it redraws or changes pretty sweet
11:11 - huh so again just to sum things up state
11:14 - is a lot like property but whenever you
11:16 - use property you can't change it like
11:19 - we're doing right here so whenever you
11:21 - just want to set a background color or
11:24 - maybe throw someone's name in there and
11:26 - it's going to be that for the entire
11:28 - lifetime of the component then use
11:30 - properties whenever you have part of
11:33 - your component that
11:34 - changes in this example this bit of text
11:37 - right here then you state boom roasted
11:40 - thanks for watching I'll see you later

Cleaned transcript:

all righty guys welcome back and in this video I want to talk to you about State now state is pretty much a way that you can customize a component and if you guys are thinking wait a minute we already can do that with properties there is one big difference between properties and states of your component and that is States they can change so I know I didn't mention this whenever we were talking about properties but whenever you give your component a custom property whenever you create it it's set for life so for example say that you have this button component and you pass it in the property to make the background color green well that button is going to be green for the rest of its life now say that you wanted to make a button that could change colors every time the user hovered over it well you couldn't use properties for that because properties their values can't change whenever you have a value that needs changing on your component you need to use state it sounds confusing but it's actually really easy you you can customize your component using properties or States whenever something is going to stay the same use properties whenever it changes use States all right fantastic so let's go ahead and make one using States so I'm just going to go ahead and make um a component called checkbox because you know whenever you have a checkbox it can either be checked or unchecked so what we're going to allow the user to do is click that and then we'll have a bit of text that changes it says hey you checked it hey you unchecked it hey you checked it hey you unchecked it so since that bit of text is going to change that's why I decided to use State instead of property so just going to name it checkbox and set it equal to react create class all right so I guess first of all we can just go ahead and render out the basic um kind of structure of it so again like I said what I'm going to have is I'm going to have a checkbox and then under it I'll have that uh bit of text that says hey it's checked hey it's unchecked so pretty much two different pieces to it so for the message which is pretty much just going to be equal to checked or unchecked um I'll just go ahead and do this MSG and now I need a if statement so the way you access states are pretty much the same as properties except instead of props you just use state so this state and later on we'll make one called checked and we're going to say that this can either be equal to true or false and I'll show you guys how to actually set that in just a second so if it is checked then this message we're just going to say equal to checked and then we'll say else message is unchecked all right so there is our basic logic right here and before we go further in creating this component and actually rendering out um any HTML I want want to build another function right here to show you guys how to set the initial value of your States so there's a builtin function and it's called git initial state so whenever you call this function was it going to autop populate for me ah come on mate just do it all right so this is a function that you can use and its job is to basically set up the initial state of your component and this is actually why it wasn't autop populating all right so what this does is it returns an object of your States now we're only going to have one state in here and that is checked now you can set this equal to true or false to start with it really doesn't matter I'm just going to set this equal to true because I feel like it and essentially what I'm going to do is I'm going to set it up where whenever this is true then that means that the user has a checkbox checked if it's false then it means that they didn't check it so it's good for like filling out forms and stuff like that all right so right now we have one state checked and it's equal to true and if you want to add another one called like bacon and set it equal to 32 you can you can add as many states as you want it doesn't matter so now that we have a state variable what we can do now is actually return some HTML so return and this is going to be on multiple lines so I need that and all right so so again like I said we're going to have a checkbox and then just some text below it so since we're going to have multiple elements we need to wrap them inside a parent div now for your input the type of this is going to be checkbox now how should I set this up all right I'm just going to make it really basic at first just so we make sure that something is displaying on the screen and then later on I'll show you guys the cool stuff so this this is going to be the checkbox and it's a valid checkbox right now now beneath it I'll say uh checkbox is and then this will either say checked or unchecked now in order to do that all we need to do is we need to Output this variable which is MSG so MSG boom roasted there you go now to actually render this I just throw it in my render function and let me go ahead and refresh this and check it out so right now it says checkbox is checked now why does it say that well because we didn't add any logic really we just went ahead and we render this component and the initial state of checked is equal to True So then whenever it rendered it said all right if this is checked which it was then the MSG which is the message set it equal to check so it says checkbox is checked and and again if this was false then this would say checkbox is unchecked just like that so we got our state working properly but now we have to actually add the brains to make it work correctly so let me change it back to true and what I'm going to do after this is I'm going to say all right you see how whenever we load this page for the very first time the default behavior of HTML and chrome is to have these checkboxes unchecked well we can actually overwrite that and there's builtin value called default checked so this is essentially equal to true or false you can set it equal to whenever whatever you want and you can actually just type it in but what we want to set it equal to is a state of this checkbox whether it's checked or unchecked or true or false so how do we do that well we need to access that state variable by this state checked so so again if this is true then it's going to say true right here and it's going to be checked which it should be just like that and if it was false then it would be unchecked which is pretty much the default Behavior anyways but you might as well have control over it so we got this taken care of now we have one other bit of logic to work out and that is we want to say whenever the user clicks this area right here then we want this message to change all right so how do we do that well we already learned in the last video how to work with event handlers now instead of onclicked what you may think it would be called it's actually onchanged and that gets called whenever the user clicks this whether they check it or uncheck it so I'm going to write onchange right here whenever the user clicks that checkbox what do we want to call well we're going to have to build a function in just a second but for right now we'll just say handle checked and again we didn't build this yet but we will build it right now so again whenever the user clicks this we're going to call a function called handle check now again that's equal to a function separate it with the comma and R right so what do we want to do whenever they check the checkbox well all we want to do is we want to pretty much set the state of the checked which is either true or false we don't know we want to set it equal to the opposite of what it was before so I say that because if it's checked and they clicked it then we want to set it to false if it already is false and they check it then we want to set it equal to true so we pretty much change it from whatever it is now a really cool way that we can do that is this whenever you want to change the state of a component variable then all you have to do is call this set State now this takes an object and and just like this you can pretty much set it to whatever you want so we can just go ahead and set the state equal to false or true or anything like that but instead of just passing it in um a value we just want to get the current value of checked and make it the opposite so how do we do this well we already know how to get the state by using this this. state. check and in order to flip it or give the opposite we just write a ex what is it exclamation mark in front of it basically this the symbol above the one all right so what this is going to do again whenever we click this is it's going to get the current state of the checkbox is it checked or not is just going to set the new state equal to the opposite of it that's it so now let's go ahead and refresh this and check it out it now toggles on unchecked and checked unchecked and checked boom boom boom boom now this is another important thing that I want to point out you see right here all we did is we set the state all right but why does it automatically render I mean usually in most programs you would have to be like all right so we're going to change it State and then we need to explicitly tell react all right now we have to redraw this piece of the Dom this piece of the web page but the cool thing about react in components is you don't need to explicitly say whenever your state changes to redraw a certain part of your web page it automatically watches for your States and where they can change and whenever your state changes that part of the web page gets redrawn automatically to fit that so all we have to do is we worry about changing states and all the rest of the hardware gets taken care of for us so look at this we now got a custom part of this component that can change so by default it's checked and whenever we uncheck it and check it again it redraws or changes pretty sweet huh so again just to sum things up state is a lot like property but whenever you use property you can't change it like we're doing right here so whenever you just want to set a background color or maybe throw someone's name in there and it's going to be that for the entire lifetime of the component then use properties whenever you have part of your component that changes in this example this bit of text right here then you state boom roasted thanks for watching I'll see you later
