With timestamps:

00:00 - all right so with our two get endpoints
00:02 - ready to go
00:03 - in this video let's go and create the
00:06 - first
00:06 - post endpoint so while again endpoint
00:09 - is basically there for your users to
00:12 - just retrieve some data
00:14 - a post endpoint is for them to submit
00:16 - some data to you
00:18 - usually to create a new object of some
00:20 - type
00:21 - so back in postman here if we create a
00:24 - post request
00:25 - to the bank's endpoint and we provide
00:28 - some
00:29 - bank data in the request body then we
00:32 - expect the service
00:33 - to just retrieve that data get the data
00:36 - and then create a new bank with
00:40 - this data so afterwards if we get all
00:42 - the banks
00:43 - it should be in there just like it does
00:46 - here
00:47 - so let's go ahead and see how we can
00:49 - make such a post request work
00:51 - using spring boot now as you can guess
00:54 - i'm going to start off in the test class
00:56 - and what i'm going to do
00:58 - is create a new nested class
01:01 - i'm going to give it the name of let's
01:04 - say
01:04 - addbank you could also
01:07 - name them after the requests
01:11 - maybe that's even nicer so we have post
01:13 - api banks
01:15 - post new bank and then i can also rename
01:18 - these
01:19 - up here i actually like this so get
01:22 - api bank let's say
01:26 - account number
01:29 - and then over here it's just get api
01:33 - bank i think that's even nicer it's
01:35 - actually banks
01:36 - that's even nicer than having the method
01:39 - names because what we're really testing
01:41 - here is the rest api
01:42 - so it also reflects the level of
01:44 - abstraction a bit nicer
01:46 - in here i'm going to create a new test
01:48 - case saying that it should add
01:51 - the new bank so here we'll learn quite a
01:54 - few new things
01:55 - because we need to now provide a request
01:58 - body
01:58 - and we need to provide an entire bank in
02:01 - the request body
02:02 - so i'm going to start off by saying
02:04 - given we have a new bank
02:06 - which is a bank of some account number
02:10 - one two three and then what do we have
02:13 - next
02:14 - trust let's say 31.415
02:17 - and a transaction fee of two and then
02:20 - when we say mock mvc.post now so we're
02:23 - making a post request
02:25 - to the base url so api slash banks
02:28 - then for now let's just go on and say
02:32 - again do a print
02:35 - and we also want to expect
02:39 - well for now let's just again start with
02:41 - the status
02:42 - and now we actually want to get the
02:45 - status code is created
02:47 - and this is the number 201 and again i'm
02:51 - going to move this into a combined
02:53 - when then block but now the problem is
02:55 - we don't yet have any request body
02:58 - so what we can do with this mock can we
02:59 - see syntax is open up curly brackets
03:02 - after the post and in here we can define
03:06 - first of all the content well or maybe
03:09 - we start with the content type
03:11 - so the content type for the request body
03:14 - should be json and then the content
03:17 - itself
03:18 - well it should be basically our new bank
03:21 - object
03:22 - but we have to serialize this and what
03:25 - we can do to serialize it
03:27 - is we can use the same object mapper
03:30 - that
03:31 - springboot uses by default which is
03:34 - using a library called jackson so it's
03:37 - part of the application context by
03:38 - default
03:39 - so what we can do quite simply up here
03:42 - is we can auto wire another bin
03:45 - and this one is of type object mapper so
03:47 - we have an object mapper
03:49 - of type object mapper so this one if you
03:53 - look at the hierarchy
03:55 - is a bean or a class that comes from
03:57 - jackson
03:58 - and that's again the standard library
04:00 - that springboot uses for
04:02 - serializing objects to json
04:05 - and you deserializing objects from json
04:09 - all right what i don't really like here
04:12 - is this
04:12 - field based injection and delayed init
04:15 - variables
04:16 - so what we can do instead is we can also
04:18 - move these to the constructor
04:21 - and in here we can now just say
04:24 - we have a val so what can we see
04:28 - of type mod can we see and we don't need
04:30 - the light in it anymore
04:32 - so here again you also have to use auto
04:35 - wired
04:36 - and well for the test case it's not
04:38 - really necessary to have the private
04:41 - in there because the entire class is
04:43 - only available
04:44 - in the test sources anyway
04:47 - and then the same for this one
04:51 - so i'm going to copy it here but it's
04:53 - going to look quite different
04:56 - so it's going to be just a val all right
04:59 - this is already looking a bit nicer
05:01 - but what i also like to do is not use
05:04 - auto wired on each of the
05:06 - parameters here but instead just tell
05:09 - springboot to
05:10 - inject all the dependencies for the
05:13 - constructor
05:14 - so for this you have to annotate the
05:17 - constructor itself
05:19 - in kotlin because of this syntax with
05:21 - the primary constructor in the class
05:23 - header
05:24 - it's a bit well different because then
05:28 - you also have to explicitly
05:29 - use the constructor keyword up here and
05:32 - this way if you have many
05:34 - parameters here that have to be injected
05:37 - you only need to have the auto wired
05:40 - annotation once
05:42 - okay so so much for cleaning up the code
05:44 - let's go back to where we were
05:47 - so the content now should be our
05:50 - well our new bank however we have to use
05:53 - the object mapper
05:54 - and then write that value as a string
05:58 - and this will really just um yeah
06:00 - serialize it to a json object
06:03 - just the same way that we see it here in
06:06 - postman
06:07 - so it's not like a regular tostring
06:09 - function it's really a serialization to
06:11 - a valid
06:12 - json representation so now because this
06:15 - is becoming a bit more complex
06:17 - and it's kind of weird with the
06:19 - indentation here i think what i'm going
06:21 - to do is actually split this up now
06:23 - into a when and a then block so what i
06:26 - want to do for now
06:28 - is say this will be the when block for
06:30 - now we'll have to
06:32 - go up here and actually store this into
06:34 - a variable
06:36 - so i'm going to just call this foo for
06:37 - now and let's see what it returns
06:40 - um it actually returns
06:43 - well just result actions which isn't
06:45 - really the best name
06:48 - so let's say response we'll just call it
06:51 - response already
06:53 - or maybe perform post that may be even
06:56 - nicer with the
06:58 - following syntax and then down here in
07:00 - the then block we can say
07:02 - perform post and do print
07:05 - and expect so this is i think reasonably
07:08 - readable
07:09 - and this is actually indented the wrong
07:12 - way now
07:13 - all right so perform post and do a print
07:15 - and then expect that the status is
07:17 - created
07:18 - so this let's go ahead and run our test
07:21 - class again
07:23 - we actually don't really have a post end
07:25 - point here so what it gives us is not a
07:27 - 404
07:28 - because we do have an api slash banks
07:32 - however it only offers
07:35 - a get endpoint so 405 means method not
07:39 - allowed
07:40 - because the post method is not allowed
07:43 - the only allowed method on api banks
07:45 - currently is get
07:46 - so let's go ahead in our bank controller
07:49 - and at
07:50 - a you probably guessed it a postmapping
07:53 - now this one doesn't need anything here
07:56 - because it's really just
07:57 - on api slash banks and then let's say
08:01 - i'm going to call it at a bank and now
08:03 - we're at an interesting point again
08:05 - because in this method here we want to
08:08 - get a bank
08:09 - of type bank and the way it's provided
08:13 - to us
08:13 - is in the request body so similar to how
08:16 - we got data
08:17 - from the path or the url before
08:21 - now we want spring boot to extract the
08:23 - bank
08:24 - from the request body so what we do is
08:26 - we say
08:27 - request body and that's really it so
08:30 - spring boot will look at the request
08:32 - body and it will deserialize
08:34 - the json into a bank object of course
08:37 - given that you provide
08:39 - a valid json request body
08:42 - and then this one really is a matter of
08:44 - design what it should return back
08:46 - here just for purposes of visibility
08:50 - i'll just return the bank that was
08:52 - created well we could return the bank
08:54 - which will be a bit confusing
08:56 - because it then looks like it was
08:58 - created but we didn't actually do
09:00 - something
09:01 - but of course we'll fix it in just a
09:03 - minute
09:04 - so let's go ahead and run the tests
09:06 - first
09:07 - obviously we didn't really do anything
09:09 - yet to make it
09:11 - return the created status code but we'll
09:15 - see
09:15 - let's just run the tests okay so we
09:18 - still have a failing test
09:19 - and if you look down here now we're
09:22 - getting 200 which is okay
09:24 - but what we actually want to have is the
09:26 - status code 201
09:27 - so what we can do here is we can add a
09:30 - new
09:30 - annotation called response status and
09:33 - this one of course
09:34 - takes a http status as an argument
09:38 - and then we can just say uh return
09:40 - created if everything goes
09:43 - as expected all right with this one
09:45 - let's run them again and now we should
09:47 - get
09:47 - our status code as expected
09:51 - all right perfect we've made our test
09:53 - green
09:54 - so now let's go ahead and extend the
09:57 - test
09:57 - because we also want to see that we have
10:00 - again a
10:02 - content with content type
10:05 - application json of course this is just
10:08 - if you decide to also return the bank
10:10 - that was created
10:12 - otherwise this is really all that you
10:13 - expect from this endpoint
10:15 - and then of course another thing that we
10:17 - expect is on the json path
10:20 - we expect that the
10:23 - account number is the same that we put
10:26 - in
10:27 - above so account number has a value
10:31 - of account one two three and then of
10:34 - course if you want to be very precise
10:36 - you can also test the trust and
10:38 - transaction fee
10:39 - which is probably a good idea so this
10:42 - should be
10:43 - 31.415 and of course you could extract
10:46 - these into variables to not repeat
10:49 - each value so now again this is a bit
10:53 - confusing because we actually just
10:55 - returned the bank so this
10:56 - should pass because we're just returning
10:59 - back what we
11:00 - get but we're not actually storing
11:02 - anything
11:03 - so for now let's just go ahead in our
11:06 - bank controller and obviously you want
11:08 - to actually call the service
11:10 - and we want to add a new bank
11:13 - with the given data so let's go ahead
11:17 - create this method takes in the bank
11:20 - and returns the bank and of course again
11:23 - this will just delegate
11:25 - to the data source for now and maybe
11:28 - here on this level we'll say
11:30 - create bank and then we're going to
11:32 - create this member function on the data
11:34 - source
11:35 - takes a bank returns a bank and i don't
11:37 - want any implementation
11:39 - in the interface itself but i want to go
11:42 - down to the mock
11:44 - and then in here down below the other
11:48 - implementations we're going to create
11:50 - our implementation
11:51 - so in this mock data source what we want
11:53 - to do quite simply is
11:55 - just add it to our list so what we'll
11:58 - have to do in kotlin
11:59 - is we'll have to make this a mutable
12:01 - list
12:03 - i can also show you what happens if you
12:04 - just have a list off
12:06 - that's basically a read only list in
12:08 - kotlin
12:09 - so if you try to do banks dot ad bank it
12:12 - really doesn't exist
12:13 - here this add method so it's going to be
12:16 - a compile time error
12:18 - and then we want to return the original
12:19 - bank but again you'll have to make this
12:22 - a mutable list which is quite a nice
12:25 - feature of cotton because it's
12:26 - by default if you just say list off or
12:29 - set off or map
12:30 - off you're just going to get a read only
12:33 - data structure
12:34 - and if you do want mutability in your
12:36 - code you have to explicitly write it
12:38 - down
12:39 - all right so with this done we actually
12:41 - have the bank stored in our list
12:44 - so the test of course still passes but
12:47 - what i want to do now
12:48 - is i want to create another test case
12:51 - which again
12:52 - tests not only the happy path but also
12:55 - what
12:55 - happens if something goes wrong or
12:57 - something's wrong with the request
13:00 - and to give an example what i'll do is
13:02 - i'll create a test
13:03 - where we're trying to create a bank with
13:06 - an account number that already exists
13:08 - so here i'm going to say it should
13:10 - return bad request
13:12 - so that's http status code 400
13:15 - that indicates that well something's
13:17 - wrong with your request
13:19 - usually the request body is invalid
13:22 - and this should happen if bank with
13:24 - given
13:25 - account number already exists
13:29 - so let's say given an invalid bank
13:33 - which is our bank with an account number
13:35 - of one two three
13:36 - four that already exists and then just
13:39 - some other data doesn't really matter
13:41 - then when we say mock nvc.post
13:44 - and we can basically copy it from up
13:46 - here
13:48 - so the whole when block only that we've
13:52 - now called it an invalid bank
13:53 - just to make it clear again and then
13:56 - down here
13:56 - we'll say perform post
14:00 - and do a print and then expect that we
14:04 - have a status code
14:07 - that is bad request right then we run
14:10 - the tests
14:10 - this will not work right now because we
14:12 - haven't really done anything to make it
14:14 - work
14:15 - let's see what happens with the account
14:18 - number
14:19 - so you can see down here if you scroll
14:21 - down what we get in the response is just
14:24 - a two one
14:25 - two one created because we're just
14:27 - adding it to our list without any checks
14:29 - so what we have now is we have two banks
14:32 - in our mock data source with the same
14:35 - account number and that's of course an
14:36 - invalid state for our application
14:40 - now to fix this we'll have to go into
14:42 - our data source and then first perform a
14:45 - little check here
14:46 - so if there's any element in the banks
14:49 - list
14:50 - where the account number is equal to
14:53 - the new bank's account number
14:56 - then what we want to do is we want to
14:58 - say throw
15:00 - an illegal argument exception and here
15:02 - we can again provide some
15:04 - nice error message that we can also
15:06 - expose in our response
15:09 - so a bank with account number of the
15:12 - given account number
15:13 - or rather bank dot account number
15:16 - already
15:17 - exists and with this if we now try to
15:21 - add a bank
15:22 - with an account number that already
15:24 - exists before we even get to
15:26 - banks.add we will just throw this
15:29 - exception
15:30 - and then of course in the bank
15:32 - controller similar to how we did before
15:35 - we'll have another exception handler so
15:37 - i'm just going to copy this one
15:39 - however instead of handling the no such
15:42 - element exception
15:44 - we're now handling an illegal argument
15:47 - and illegal argument in general probably
15:50 - means that something was wrong with the
15:52 - request body or the data that you
15:54 - received
15:55 - so we can say this should handle bad
15:58 - requests
15:59 - of course you could use your own custom
16:01 - exceptions that are more fine-grained
16:03 - and
16:04 - so that you know exactly this was
16:06 - definitely a bad request
16:08 - however for this very simple application
16:10 - just using the default
16:12 - exceptions that we have like no such
16:14 - element or illegal argument
16:16 - is more than enough to handle these
16:19 - kinds of error paths
16:21 - and then we want to again return the
16:23 - exception message
16:24 - in the request body but of course the
16:26 - status code
16:27 - should be bad request alright with that
16:30 - done let's rerun our test and see what
16:32 - happens
16:34 - looking good all our tests are now green
16:36 - um on this new test case down here if we
16:39 - want to take a look
16:40 - it says bank with account number one two
16:42 - three four already exists
16:44 - and it gives us a status code of 400
16:46 - which again is just a bad request
16:49 - so all that's left now is to also try it
16:51 - in postman
16:52 - so not don't forget to run the
16:55 - application itself like i always do
16:58 - and then it's running again on port 9000
17:01 - so now if i post a bank like this one
17:05 - i get 201 created you can see it here in
17:08 - postman
17:10 - and i get back the original bank that i
17:12 - put in but
17:13 - more importantly if i retrieve all the
17:15 - banks now
17:16 - i can see that it has indeed been
17:18 - persisted at least
17:20 - for the run time of the application
17:22 - because we're obviously just using
17:24 - in memory list another proper database
17:27 - but yeah you can see we have a post
17:29 - and we can retrieve the data that we
17:31 - submitted
17:32 - all right so everything's looking good
17:35 - there's one quick tip i want to give you
17:37 - regarding the ide or the tooling
17:40 - so in intellij you'll see that it will
17:43 - say the
17:44 - bank controller is never used and the
17:46 - same for its methods
17:48 - and that's because you're not really
17:50 - using the object in your code and you're
17:52 - not
17:53 - calling these methods anywhere but of
17:55 - course they're being used by the spring
17:57 - framework
17:58 - so what you can do is you can show the
18:01 - context actions with alt enter
18:04 - and say you want to suppress this
18:06 - warning
18:07 - for any class that's annotated with rest
18:09 - controller
18:10 - and then it will stop showing it as
18:12 - unused of course your exception handlers
18:15 - are also used by spring boot so you
18:17 - don't have to call them
18:19 - anywhere manually same for your get
18:22 - mappings
18:23 - and post mappings all right yeah but
18:26 - that's just a little tip on the side
18:29 - mostly in this video you learned of
18:30 - course how to use post mappings
18:33 - and then how to get the request body
18:35 - data
18:36 - into your application and also by the
18:38 - way how to
18:39 - override the status code very easily by
18:42 - just using the annotation
18:44 - on top of that for your testing you've
18:47 - learned how to use the object mapper
18:49 - and how to create post requests in your
18:51 - tests
18:52 - using the proper media type and content
18:56 - so i hope this was helpful to you if it
18:58 - was please like this video
19:00 - and also check out my links in the
19:01 - description and i'll see you again in
19:03 - the next video

Cleaned transcript:

all right so with our two get endpoints ready to go in this video let's go and create the first post endpoint so while again endpoint is basically there for your users to just retrieve some data a post endpoint is for them to submit some data to you usually to create a new object of some type so back in postman here if we create a post request to the bank's endpoint and we provide some bank data in the request body then we expect the service to just retrieve that data get the data and then create a new bank with this data so afterwards if we get all the banks it should be in there just like it does here so let's go ahead and see how we can make such a post request work using spring boot now as you can guess i'm going to start off in the test class and what i'm going to do is create a new nested class i'm going to give it the name of let's say addbank you could also name them after the requests maybe that's even nicer so we have post api banks post new bank and then i can also rename these up here i actually like this so get api bank let's say account number and then over here it's just get api bank i think that's even nicer it's actually banks that's even nicer than having the method names because what we're really testing here is the rest api so it also reflects the level of abstraction a bit nicer in here i'm going to create a new test case saying that it should add the new bank so here we'll learn quite a few new things because we need to now provide a request body and we need to provide an entire bank in the request body so i'm going to start off by saying given we have a new bank which is a bank of some account number one two three and then what do we have next trust let's say 31.415 and a transaction fee of two and then when we say mock mvc.post now so we're making a post request to the base url so api slash banks then for now let's just go on and say again do a print and we also want to expect well for now let's just again start with the status and now we actually want to get the status code is created and this is the number 201 and again i'm going to move this into a combined when then block but now the problem is we don't yet have any request body so what we can do with this mock can we see syntax is open up curly brackets after the post and in here we can define first of all the content well or maybe we start with the content type so the content type for the request body should be json and then the content itself well it should be basically our new bank object but we have to serialize this and what we can do to serialize it is we can use the same object mapper that springboot uses by default which is using a library called jackson so it's part of the application context by default so what we can do quite simply up here is we can auto wire another bin and this one is of type object mapper so we have an object mapper of type object mapper so this one if you look at the hierarchy is a bean or a class that comes from jackson and that's again the standard library that springboot uses for serializing objects to json and you deserializing objects from json all right what i don't really like here is this field based injection and delayed init variables so what we can do instead is we can also move these to the constructor and in here we can now just say we have a val so what can we see of type mod can we see and we don't need the light in it anymore so here again you also have to use auto wired and well for the test case it's not really necessary to have the private in there because the entire class is only available in the test sources anyway and then the same for this one so i'm going to copy it here but it's going to look quite different so it's going to be just a val all right this is already looking a bit nicer but what i also like to do is not use auto wired on each of the parameters here but instead just tell springboot to inject all the dependencies for the constructor so for this you have to annotate the constructor itself in kotlin because of this syntax with the primary constructor in the class header it's a bit well different because then you also have to explicitly use the constructor keyword up here and this way if you have many parameters here that have to be injected you only need to have the auto wired annotation once okay so so much for cleaning up the code let's go back to where we were so the content now should be our well our new bank however we have to use the object mapper and then write that value as a string and this will really just um yeah serialize it to a json object just the same way that we see it here in postman so it's not like a regular tostring function it's really a serialization to a valid json representation so now because this is becoming a bit more complex and it's kind of weird with the indentation here i think what i'm going to do is actually split this up now into a when and a then block so what i want to do for now is say this will be the when block for now we'll have to go up here and actually store this into a variable so i'm going to just call this foo for now and let's see what it returns um it actually returns well just result actions which isn't really the best name so let's say response we'll just call it response already or maybe perform post that may be even nicer with the following syntax and then down here in the then block we can say perform post and do print and expect so this is i think reasonably readable and this is actually indented the wrong way now all right so perform post and do a print and then expect that the status is created so this let's go ahead and run our test class again we actually don't really have a post end point here so what it gives us is not a 404 because we do have an api slash banks however it only offers a get endpoint so 405 means method not allowed because the post method is not allowed the only allowed method on api banks currently is get so let's go ahead in our bank controller and at a you probably guessed it a postmapping now this one doesn't need anything here because it's really just on api slash banks and then let's say i'm going to call it at a bank and now we're at an interesting point again because in this method here we want to get a bank of type bank and the way it's provided to us is in the request body so similar to how we got data from the path or the url before now we want spring boot to extract the bank from the request body so what we do is we say request body and that's really it so spring boot will look at the request body and it will deserialize the json into a bank object of course given that you provide a valid json request body and then this one really is a matter of design what it should return back here just for purposes of visibility i'll just return the bank that was created well we could return the bank which will be a bit confusing because it then looks like it was created but we didn't actually do something but of course we'll fix it in just a minute so let's go ahead and run the tests first obviously we didn't really do anything yet to make it return the created status code but we'll see let's just run the tests okay so we still have a failing test and if you look down here now we're getting 200 which is okay but what we actually want to have is the status code 201 so what we can do here is we can add a new annotation called response status and this one of course takes a http status as an argument and then we can just say uh return created if everything goes as expected all right with this one let's run them again and now we should get our status code as expected all right perfect we've made our test green so now let's go ahead and extend the test because we also want to see that we have again a content with content type application json of course this is just if you decide to also return the bank that was created otherwise this is really all that you expect from this endpoint and then of course another thing that we expect is on the json path we expect that the account number is the same that we put in above so account number has a value of account one two three and then of course if you want to be very precise you can also test the trust and transaction fee which is probably a good idea so this should be 31.415 and of course you could extract these into variables to not repeat each value so now again this is a bit confusing because we actually just returned the bank so this should pass because we're just returning back what we get but we're not actually storing anything so for now let's just go ahead in our bank controller and obviously you want to actually call the service and we want to add a new bank with the given data so let's go ahead create this method takes in the bank and returns the bank and of course again this will just delegate to the data source for now and maybe here on this level we'll say create bank and then we're going to create this member function on the data source takes a bank returns a bank and i don't want any implementation in the interface itself but i want to go down to the mock and then in here down below the other implementations we're going to create our implementation so in this mock data source what we want to do quite simply is just add it to our list so what we'll have to do in kotlin is we'll have to make this a mutable list i can also show you what happens if you just have a list off that's basically a read only list in kotlin so if you try to do banks dot ad bank it really doesn't exist here this add method so it's going to be a compile time error and then we want to return the original bank but again you'll have to make this a mutable list which is quite a nice feature of cotton because it's by default if you just say list off or set off or map off you're just going to get a read only data structure and if you do want mutability in your code you have to explicitly write it down all right so with this done we actually have the bank stored in our list so the test of course still passes but what i want to do now is i want to create another test case which again tests not only the happy path but also what happens if something goes wrong or something's wrong with the request and to give an example what i'll do is i'll create a test where we're trying to create a bank with an account number that already exists so here i'm going to say it should return bad request so that's http status code 400 that indicates that well something's wrong with your request usually the request body is invalid and this should happen if bank with given account number already exists so let's say given an invalid bank which is our bank with an account number of one two three four that already exists and then just some other data doesn't really matter then when we say mock nvc.post and we can basically copy it from up here so the whole when block only that we've now called it an invalid bank just to make it clear again and then down here we'll say perform post and do a print and then expect that we have a status code that is bad request right then we run the tests this will not work right now because we haven't really done anything to make it work let's see what happens with the account number so you can see down here if you scroll down what we get in the response is just a two one two one created because we're just adding it to our list without any checks so what we have now is we have two banks in our mock data source with the same account number and that's of course an invalid state for our application now to fix this we'll have to go into our data source and then first perform a little check here so if there's any element in the banks list where the account number is equal to the new bank's account number then what we want to do is we want to say throw an illegal argument exception and here we can again provide some nice error message that we can also expose in our response so a bank with account number of the given account number or rather bank dot account number already exists and with this if we now try to add a bank with an account number that already exists before we even get to banks.add we will just throw this exception and then of course in the bank controller similar to how we did before we'll have another exception handler so i'm just going to copy this one however instead of handling the no such element exception we're now handling an illegal argument and illegal argument in general probably means that something was wrong with the request body or the data that you received so we can say this should handle bad requests of course you could use your own custom exceptions that are more finegrained and so that you know exactly this was definitely a bad request however for this very simple application just using the default exceptions that we have like no such element or illegal argument is more than enough to handle these kinds of error paths and then we want to again return the exception message in the request body but of course the status code should be bad request alright with that done let's rerun our test and see what happens looking good all our tests are now green um on this new test case down here if we want to take a look it says bank with account number one two three four already exists and it gives us a status code of 400 which again is just a bad request so all that's left now is to also try it in postman so not don't forget to run the application itself like i always do and then it's running again on port 9000 so now if i post a bank like this one i get 201 created you can see it here in postman and i get back the original bank that i put in but more importantly if i retrieve all the banks now i can see that it has indeed been persisted at least for the run time of the application because we're obviously just using in memory list another proper database but yeah you can see we have a post and we can retrieve the data that we submitted all right so everything's looking good there's one quick tip i want to give you regarding the ide or the tooling so in intellij you'll see that it will say the bank controller is never used and the same for its methods and that's because you're not really using the object in your code and you're not calling these methods anywhere but of course they're being used by the spring framework so what you can do is you can show the context actions with alt enter and say you want to suppress this warning for any class that's annotated with rest controller and then it will stop showing it as unused of course your exception handlers are also used by spring boot so you don't have to call them anywhere manually same for your get mappings and post mappings all right yeah but that's just a little tip on the side mostly in this video you learned of course how to use post mappings and then how to get the request body data into your application and also by the way how to override the status code very easily by just using the annotation on top of that for your testing you've learned how to use the object mapper and how to create post requests in your tests using the proper media type and content so i hope this was helpful to you if it was please like this video and also check out my links in the description and i'll see you again in the next video
