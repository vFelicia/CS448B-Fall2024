With timestamps:

00:00 - alrighty y'all welcome back to another
00:02 - video and in this one what I'm going to
00:04 - be doing is updating the functionality
00:07 - for this timer component however before
00:09 - we get into that I want to mention a few
00:11 - changes that I made between the last
00:13 - video and this one the first one is you
00:16 - may already notice it I added some
00:18 - styling to this history table
00:20 - so you see I styled these statuses and
00:23 - just formatted some things right here
00:25 - and again this is all CSS so I didn't
00:28 - really feel like I wanted to record it
00:30 - because I don't know it just felt like I
00:31 - wouldn't be teaching you anything new
00:33 - and there is one more change as well pop
00:36 - open my source code in addition to this
00:39 - use pending run which we wrote I think
00:41 - in the last video which basically gets
00:44 - the most recent pending run as you can
00:46 - tell by the hook name I also wrote this
00:48 - use latest run and as you can see right
00:51 - here all it does is it Returns the most
00:53 - recent run and if there's no run for
00:56 - example you first boot up the app it's
00:57 - just going to return undefined so again
00:59 - like the history table it's pretty
01:02 - similar to the code we wrote before so
01:03 - uh yeah just wanted to save you all some
01:06 - time but anyways on that note let's go
01:08 - ahead and pop open this timer component
01:12 - and before we start writing any code
01:14 - let's just go over the logic of exactly
01:16 - how this is going to work
01:18 - so the way that this is going to work is
01:21 - first whenever you first boot open this
01:24 - app for the very first time of course
01:26 - you're not going to have any runs at all
01:28 - so at that point in time I want to just
01:30 - set this equal to zero
01:33 - now whenever you click this button and
01:36 - you send off that request you are going
01:38 - to have what's called a pending run AKA
01:40 - a run where you haven't received the
01:42 - response yet now of course you can
01:44 - probably guess what we're going to be
01:45 - doing for the timer right here whenever
01:47 - you have a penny run this is just going
01:49 - to display how long that run is taking
01:51 - kind of like a stopwatch it's going to
01:52 - be updating in real time so that's the
01:55 - easy part but a couple unique situations
01:57 - that we have to look out for is this
01:59 - first of all if we ever get an error
02:02 - whenever we click this button then what
02:04 - we're going to do is we'll just reset
02:06 - this time to zero zero zero and again
02:08 - we'll have an error hopefully we don't
02:10 - get it ever but if we ever send this
02:12 - request and that server that core server
02:15 - is down or I don't know maybe we
02:17 - formatted the Block in the wrong shape
02:19 - or something then we'll just go ahead
02:20 - and reset this to zero and the last kind
02:24 - of weird situation is well it's not even
02:26 - that weird but what we'll do is whenever
02:29 - we have a pending run and it exceeds 10
02:32 - seconds then we'll consider that run
02:34 - timed out and for this time right here
02:38 - we'll just have it set to 10 seconds
02:40 - basically saying that this is maximum
02:43 - amount of time the timer won't ever
02:45 - exceed 10 seconds now the last situation
02:47 - is whenever our run comes back so it's
02:50 - no longer pending but we then have a
02:53 - successful run then what I want to do is
02:55 - just display the time of this last
02:57 - successful run right here so it sounds
03:00 - like quite a bit of logic but it
03:01 - actually should be pretty simple in our
03:03 - code so let's just go ahead and get
03:05 - started
03:07 - first thing let me go ahead and import
03:09 - everything that I'm going to need and
03:12 - after this what I'm going to do is I'm
03:14 - just gonna make a constant for that
03:15 - timeout since it's never going to change
03:17 - timeout seconds will always say that the
03:21 - timeout is 10 seconds
03:24 - and now let me just go ahead and write
03:26 - some things that we're going to need
03:28 - so for this value right here we'll have
03:31 - this in a state variable and I'll just
03:34 - name it time keep it nice and simple so
03:37 - const
03:38 - time and we'll set it with set time and
03:41 - this is equal to use state
03:43 - and we'll initialize this to zero off
03:46 - the bat
03:47 - and then this is of course a number type
03:50 - that
03:52 - and all right so another thing that
03:53 - we're going to need is dispatch and
03:58 - please just copy this too lazy to type
04:00 - one sentence
04:02 - so we're going to need our dispatch
04:04 - statement now the reason that we need
04:06 - this is because if our run ever times
04:08 - out then we'll just go ahead and
04:10 - dispatch that updated status to set it
04:12 - to run status timeout right from here
04:15 - and then from here what I need
04:20 - is that latest run you can remember I
04:22 - said that I wrote the hook in between
04:24 - the last video and this one and of
04:26 - course this is because whenever we have
04:28 - a successful run we're gonna be
04:30 - displaying the time from the less
04:32 - successful run right here
04:34 - and then the last thing that we need
04:36 - before we get into the good stuff is
04:38 - just our runs
04:42 - and I'll say use selector
04:46 - and that is get runs and the reason that
04:49 - we need this is because we need to be
04:51 - able to listen for when the runs change
04:54 - because when the runs change we want to
04:57 - be able to say something okay I have
04:59 - some errors but we want to be able to
05:01 - say like whenever the runs change if the
05:04 - last run was successful then go ahead
05:06 - and get time and set the state to that
05:08 - time right there
05:10 - so sounds a bit tricky but I'll break
05:12 - this up in this kind of way I'll use a
05:16 - use effect statement and I'm going to be
05:18 - breaking up the logic in two main chunks
05:20 - the first chunk is dealing with a
05:22 - pending run and this is a little bit
05:24 - trickier I would say because we have to
05:27 - update that timer kind of in real time
05:29 - now the other use effect chunk of logic
05:32 - this is going to deal with everything
05:34 - but a pending run so again whenever that
05:37 - run comes back as either an error or we
05:40 - timeout or it's successful we want to be
05:43 - able to update that timer based on that
05:45 - logic so again one chunk for the pending
05:47 - run one chunk for everything else so for
05:50 - the pending run let me do this I'll say
05:52 - use effects
05:58 - and for the logic for this the first
06:01 - thing I'm gonna do is I am just going to
06:03 - check if the excuse me if the latest run
06:08 - status and again I need this question
06:10 - mark right here because we actually
06:12 - don't even know if we're going to have a
06:14 - latest run for example whenever we first
06:16 - boot open the app we're not going to
06:17 - have any runs at all so I'll just do
06:19 - latest run question mark if we do have
06:21 - one check the status and see if it is
06:24 - not equal to run status pending
06:27 - and for this I'll just go ahead and
06:29 - return so the logic in here like I said
06:33 - this is going to be all dealing with the
06:35 - pending run so if we don't have a
06:38 - pending run we'll pretty much just
06:40 - bypass this entire logic now if we do
06:42 - have a pending run then of course what
06:44 - we want to do is basically update that
06:46 - timer in real time so in order to do
06:49 - this what I'm going to do is I'm going
06:50 - to create an interval that's going to
06:52 - run every 10 milliseconds we can have it
06:55 - run like probably every single
06:56 - millisecond but I don't even think the
06:58 - human eye can you know tell the
07:00 - difference of all those so I'll show you
07:03 - exactly how this is going to work right
07:04 - now so I'm going to create an interval
07:06 - and this is going to be equal to set
07:08 - interval and this would just be an
07:10 - anonymous function that is going to run
07:13 - every 10 milliseconds now before I even
07:17 - write the logic for that what I want to
07:19 - do is just make sure in this return
07:21 - statement right here that we are
07:23 - clearing that interval so I'll say clear
07:25 - interval interval right here
07:30 - and this is just part of the react logic
07:33 - and use effect this hook right here
07:35 - whenever you have a return statement
07:37 - it's automatically going to call this
07:39 - function to uh yeah pretty much just a
07:41 - cleanup function and on that note let's
07:43 - go ahead and hop into this set interval
07:46 - logic and we'll write the meat and
07:48 - potatoes of everything
07:50 - so the logic that I'm going to write in
07:52 - here is this
07:53 - every 10 milliseconds we essentially
07:55 - need to calculate the updated time that
07:58 - it's taking this request
08:00 - so in order to do this what I'm going to
08:03 - do is first since I want to calculate
08:05 - everything in milliseconds I'll say MS
08:09 - difference and this is equal to new date
08:14 - dot get time and this new date is
08:18 - essentially equal to right now in this
08:21 - get time just allows us to work in
08:22 - milliseconds rather than like a string
08:24 - formatted date or anything like this
08:26 - so from right now this moment in time
08:29 - what I want to do is subtract the latest
08:32 - runs request time so this is going to
08:35 - give us the window in milliseconds that
08:37 - that run is taking
08:38 - and just because on our UI we display
08:41 - that in seconds I'll go ahead and
08:42 - convert it right now
08:45 - so to convert it into seconds we say Ms
08:48 - difference the modulus operator
08:52 - 6000 or zero and then over one thousand
08:57 - again this is just because this is how
08:59 - many milliseconds are in a minute
09:02 - so on that note this is gonna basically
09:06 - allow us to work in seconds which is
09:08 - going to make everything much easier
09:09 - because with this the first thing that
09:12 - we want to check is is the time that
09:15 - this request is taking in seconds first
09:17 - of all does it exceed our timeout amount
09:21 - is it taking longer than 10 seconds if
09:24 - so what we want to do is just set this
09:27 - run status to timeout now to do this
09:29 - what we could do and this is probably
09:32 - going to work basically all the time
09:34 - what we could do is take this latest run
09:36 - right here which is pending and we'll
09:38 - just update it in Redux to be run status
09:41 - timeout instead of run status pending
09:43 - however just to kind of handle any weird
09:46 - edge cases for example if we have a
09:49 - pending run and we shut down tnbos or
09:52 - maybe for some reason our data got
09:54 - messed up and we have two pending runs
09:55 - what I'll do instead is I'm just going
09:58 - to update all pending runs to timeout
10:01 - now again I don't think this is ever
10:03 - going to be needed but it's just a weird
10:05 - Edge case where most of the time this is
10:07 - just going to update this one pending
10:09 - run but it'll help clean up any old data
10:11 - that we have and to do that I first need
10:14 - to get all the pending runs
10:17 - which like I said most of the time is
10:19 - just going to be equal to one run but
10:21 - object dot values I'll go ahead and get
10:25 - those runs and then I'm just going to
10:27 - filter
10:30 - those were the status
10:33 - Those runs
10:37 - [Music]
10:40 - pending right there so again this is
10:42 - going to give us all of our pending runs
10:44 - and now for each of those just iterate
10:46 - through them and we'll say for
10:52 - for each of those I'm just gonna
10:53 - dispatch
10:56 - the set run
11:00 - if I import this hopefully
11:05 - and for this we can just spread out the
11:07 - run and update the status to be run
11:10 - status
11:11 - timeout
11:13 - just like this
11:15 - and this should be a comma and all right
11:19 - so again usually in pretty much like a
11:22 - hundred percent of the time this is just
11:24 - going to be timing out this one latest
11:26 - run but like I said just to cover all of
11:29 - our bases
11:30 - might as well clean up any other ones as
11:32 - well and then last but not least what
11:35 - we'll do for the timer is we're going to
11:37 - set that equal to this timeout so I'm
11:41 - going to say right here set time to time
11:44 - out seconds
11:47 - all right so again that block of code
11:49 - was how we're gonna handle if our
11:52 - pending run exceeds 10 seconds however
11:56 - if it doesn't then all we need to do is
11:59 - we need to set the time on the timer
12:01 - equal to
12:04 - this value right here however many
12:06 - seconds it's taking and then to finish
12:08 - up this hook all we need to do is set
12:10 - our dependencies
12:12 - and then there we go and actually for
12:15 - this latest run we'll just put a
12:16 - question mark right here because we
12:19 - can't ensure that we actually do have
12:20 - latest run
12:22 - but once we do it'll pass in the request
12:24 - time the status and the runs and yeah
12:27 - logic looking good so again this is
12:29 - going to take care of the pending runs
12:31 - now I just need to write one more use
12:34 - effect statement to pretty much handle
12:36 - every other run aside from pending
12:38 - around so use effects let me just go
12:41 - ahead and write the boilerplate
12:44 - so again in here what we're going to do
12:46 - is we'll look at the latest run and if
12:50 - it's not pending we'll say if it's an
12:52 - error then we're going to set the time
12:53 - to zero if it's a timeout then we're
12:56 - going to set the time to 10 otherwise if
12:58 - you have a successful run then just
13:00 - display on that timer the time it took
13:03 - so
13:05 - I'm going to write logic in here to say
13:07 - if you don't have a latest run we can
13:09 - just bypass this and also if you do have
13:11 - a latest run but the status of that is
13:14 - equal to run status pending then we can
13:18 - just go ahead and break out of this
13:19 - early no need to uh write any code in
13:22 - here and then we can just start handling
13:24 - all of those cases so first if the
13:28 - latest run status
13:31 - is an error so run status error then
13:34 - what we want to do in that case we said
13:36 - is set the timer to zero and then we can
13:39 - just return
13:40 - because
13:41 - below here is just checking for those
13:43 - other statuses and I can just copy this
13:46 - too
13:47 - so this is what we're going to do in the
13:48 - case of an error
13:50 - now in the case of a timeout
13:53 - if that run was timed out then what
13:55 - we're going to do is set it equal to 10
13:57 - and just to make sure if we ever change
13:59 - that timeout then we don't have to go
14:01 - back in here and change it again I'll
14:02 - just use that constant timeout seconds
14:05 - now lastly this is the case if we have a
14:09 - successful run because again we're
14:10 - breaking out for a pending run an error
14:12 - and a timeout so this logic is only
14:14 - going to fall through here for a
14:16 - successful run and just like before what
14:19 - we're going to do is set the timer equal
14:21 - to how long it took so we need to
14:23 - calculate the milliseconds
14:25 - from this and to do this it's the latest
14:28 - run dot response time
14:32 - and I'm also going to have the
14:33 - exclamation mark because
14:36 - the response time is actually as you can
14:39 - see it's a number or null now we can
14:42 - guarantee that we have a number here
14:44 - because for every successful run we
14:47 - always have a response time so that's
14:49 - why I can safely add this exclamation
14:51 - mark and then for the latest runs
14:53 - response time to get the actual time of
14:56 - how long that took you just subtract the
14:58 - latest runs request time
15:00 - and that's going to give you the period
15:02 - basically how long it took and from here
15:04 - we just have to convert it to seconds
15:06 - so to do that
15:08 - the same as this one actually
15:12 - so milliseconds to seconds to just like
15:15 - I said before modulus 6000 over a
15:18 - thousand and then last but not least we
15:20 - just need to set the time in that
15:24 - State variable right here
15:28 - and
15:29 - let's say my dependencies that's the
15:32 - only thing we need passing the latest
15:33 - run and last but not least what I need
15:37 - to do here is actually instead of
15:39 - displaying our temp data we are just
15:41 - going to display that time that we've
15:43 - been setting again the set time is equal
15:46 - to or it's setting the value for this
15:48 - variable right here
15:50 - and also
15:52 - I want to make sure that we always
15:55 - display three digits
15:58 - so I'll say to fixed three and this is
16:00 - going to give us our millisecond
16:02 - accuracy and I believe
16:05 - that that's the only thing that we need
16:08 - to do let me just clean this up here
16:12 - so I have speed test store get runs in
16:16 - sort this you got to make sure all my
16:19 - imports are nice and clean and now
16:22 - let's go ahead and test this thing
16:25 - check it out all right so this is
16:27 - looking pretty good already because my
16:29 - latest run in Redux was 0.895 seconds
16:32 - and it is displaying the time from the
16:35 - latest successful run that is what we
16:37 - wanted now let me just go ahead and all
16:40 - right it's looking pretty sweet uh I
16:45 - actually let's do this just to test the
16:46 - timeout so these successful runs this is
16:49 - pretty sweet all right they're appearing
16:51 - successfully however I want to purposely
16:54 - time something out and the easiest way
16:56 - we can do this is just gonna go in the
16:58 - listener and it'll save for that pong
17:00 - listener which is the response this is
17:03 - whenever we receive a successful
17:05 - response we'll set it equal to success
17:07 - I'll just comment this out to kind of
17:09 - like simulate us never receiving our
17:12 - response at all and then hopefully this
17:14 - should time out so
17:17 - all right
17:21 - pop open redox
17:24 - all right
17:27 - pending pending latest round of spending
17:30 - and this button disabled state is
17:32 - working good too should be able to click
17:33 - it while we have a run pending
17:36 - all right beautiful so this is our
17:39 - proper timeout status again this should
17:41 - display 10 seconds that's exactly what
17:43 - we're going for so now let me just go
17:45 - ahead and revert my code
17:47 - and all right looking good
17:50 - and again sometimes whenever I update
17:51 - the source code this Redux tool kind of
17:54 - is like uh gets a little lost I guess so
17:57 - I just need to close the inspector tools
17:58 - or the dev tools and pop that open again
18:00 - you don't have to close down the entire
18:02 - app but there you go all right so I
18:05 - guess our record so far is 0.337 seconds
18:08 - pretty fast and by the way just for kind
18:11 - of reference I'm in New York City right
18:13 - now uh both my iMac and my MacBook and
18:16 - my core server is in Oregon so both the
18:19 - request and response are both going
18:21 - through the Oregon server so yeah not
18:23 - bad time and uh okay in the next video
18:27 - and now that we have that taken care of
18:29 - what I'll do is probably just clean up a
18:31 - few things maybe add some custom font
18:33 - but I mean really we got our working app
18:36 - it's just uh all improving it from here
18:38 - on out so good job everyone and I'll see
18:40 - you all next time

Cleaned transcript:

alrighty y'all welcome back to another video and in this one what I'm going to be doing is updating the functionality for this timer component however before we get into that I want to mention a few changes that I made between the last video and this one the first one is you may already notice it I added some styling to this history table so you see I styled these statuses and just formatted some things right here and again this is all CSS so I didn't really feel like I wanted to record it because I don't know it just felt like I wouldn't be teaching you anything new and there is one more change as well pop open my source code in addition to this use pending run which we wrote I think in the last video which basically gets the most recent pending run as you can tell by the hook name I also wrote this use latest run and as you can see right here all it does is it Returns the most recent run and if there's no run for example you first boot up the app it's just going to return undefined so again like the history table it's pretty similar to the code we wrote before so uh yeah just wanted to save you all some time but anyways on that note let's go ahead and pop open this timer component and before we start writing any code let's just go over the logic of exactly how this is going to work so the way that this is going to work is first whenever you first boot open this app for the very first time of course you're not going to have any runs at all so at that point in time I want to just set this equal to zero now whenever you click this button and you send off that request you are going to have what's called a pending run AKA a run where you haven't received the response yet now of course you can probably guess what we're going to be doing for the timer right here whenever you have a penny run this is just going to display how long that run is taking kind of like a stopwatch it's going to be updating in real time so that's the easy part but a couple unique situations that we have to look out for is this first of all if we ever get an error whenever we click this button then what we're going to do is we'll just reset this time to zero zero zero and again we'll have an error hopefully we don't get it ever but if we ever send this request and that server that core server is down or I don't know maybe we formatted the Block in the wrong shape or something then we'll just go ahead and reset this to zero and the last kind of weird situation is well it's not even that weird but what we'll do is whenever we have a pending run and it exceeds 10 seconds then we'll consider that run timed out and for this time right here we'll just have it set to 10 seconds basically saying that this is maximum amount of time the timer won't ever exceed 10 seconds now the last situation is whenever our run comes back so it's no longer pending but we then have a successful run then what I want to do is just display the time of this last successful run right here so it sounds like quite a bit of logic but it actually should be pretty simple in our code so let's just go ahead and get started first thing let me go ahead and import everything that I'm going to need and after this what I'm going to do is I'm just gonna make a constant for that timeout since it's never going to change timeout seconds will always say that the timeout is 10 seconds and now let me just go ahead and write some things that we're going to need so for this value right here we'll have this in a state variable and I'll just name it time keep it nice and simple so const time and we'll set it with set time and this is equal to use state and we'll initialize this to zero off the bat and then this is of course a number type that and all right so another thing that we're going to need is dispatch and please just copy this too lazy to type one sentence so we're going to need our dispatch statement now the reason that we need this is because if our run ever times out then we'll just go ahead and dispatch that updated status to set it to run status timeout right from here and then from here what I need is that latest run you can remember I said that I wrote the hook in between the last video and this one and of course this is because whenever we have a successful run we're gonna be displaying the time from the less successful run right here and then the last thing that we need before we get into the good stuff is just our runs and I'll say use selector and that is get runs and the reason that we need this is because we need to be able to listen for when the runs change because when the runs change we want to be able to say something okay I have some errors but we want to be able to say like whenever the runs change if the last run was successful then go ahead and get time and set the state to that time right there so sounds a bit tricky but I'll break this up in this kind of way I'll use a use effect statement and I'm going to be breaking up the logic in two main chunks the first chunk is dealing with a pending run and this is a little bit trickier I would say because we have to update that timer kind of in real time now the other use effect chunk of logic this is going to deal with everything but a pending run so again whenever that run comes back as either an error or we timeout or it's successful we want to be able to update that timer based on that logic so again one chunk for the pending run one chunk for everything else so for the pending run let me do this I'll say use effects and for the logic for this the first thing I'm gonna do is I am just going to check if the excuse me if the latest run status and again I need this question mark right here because we actually don't even know if we're going to have a latest run for example whenever we first boot open the app we're not going to have any runs at all so I'll just do latest run question mark if we do have one check the status and see if it is not equal to run status pending and for this I'll just go ahead and return so the logic in here like I said this is going to be all dealing with the pending run so if we don't have a pending run we'll pretty much just bypass this entire logic now if we do have a pending run then of course what we want to do is basically update that timer in real time so in order to do this what I'm going to do is I'm going to create an interval that's going to run every 10 milliseconds we can have it run like probably every single millisecond but I don't even think the human eye can you know tell the difference of all those so I'll show you exactly how this is going to work right now so I'm going to create an interval and this is going to be equal to set interval and this would just be an anonymous function that is going to run every 10 milliseconds now before I even write the logic for that what I want to do is just make sure in this return statement right here that we are clearing that interval so I'll say clear interval interval right here and this is just part of the react logic and use effect this hook right here whenever you have a return statement it's automatically going to call this function to uh yeah pretty much just a cleanup function and on that note let's go ahead and hop into this set interval logic and we'll write the meat and potatoes of everything so the logic that I'm going to write in here is this every 10 milliseconds we essentially need to calculate the updated time that it's taking this request so in order to do this what I'm going to do is first since I want to calculate everything in milliseconds I'll say MS difference and this is equal to new date dot get time and this new date is essentially equal to right now in this get time just allows us to work in milliseconds rather than like a string formatted date or anything like this so from right now this moment in time what I want to do is subtract the latest runs request time so this is going to give us the window in milliseconds that that run is taking and just because on our UI we display that in seconds I'll go ahead and convert it right now so to convert it into seconds we say Ms difference the modulus operator 6000 or zero and then over one thousand again this is just because this is how many milliseconds are in a minute so on that note this is gonna basically allow us to work in seconds which is going to make everything much easier because with this the first thing that we want to check is is the time that this request is taking in seconds first of all does it exceed our timeout amount is it taking longer than 10 seconds if so what we want to do is just set this run status to timeout now to do this what we could do and this is probably going to work basically all the time what we could do is take this latest run right here which is pending and we'll just update it in Redux to be run status timeout instead of run status pending however just to kind of handle any weird edge cases for example if we have a pending run and we shut down tnbos or maybe for some reason our data got messed up and we have two pending runs what I'll do instead is I'm just going to update all pending runs to timeout now again I don't think this is ever going to be needed but it's just a weird Edge case where most of the time this is just going to update this one pending run but it'll help clean up any old data that we have and to do that I first need to get all the pending runs which like I said most of the time is just going to be equal to one run but object dot values I'll go ahead and get those runs and then I'm just going to filter those were the status Those runs pending right there so again this is going to give us all of our pending runs and now for each of those just iterate through them and we'll say for for each of those I'm just gonna dispatch the set run if I import this hopefully and for this we can just spread out the run and update the status to be run status timeout just like this and this should be a comma and all right so again usually in pretty much like a hundred percent of the time this is just going to be timing out this one latest run but like I said just to cover all of our bases might as well clean up any other ones as well and then last but not least what we'll do for the timer is we're going to set that equal to this timeout so I'm going to say right here set time to time out seconds all right so again that block of code was how we're gonna handle if our pending run exceeds 10 seconds however if it doesn't then all we need to do is we need to set the time on the timer equal to this value right here however many seconds it's taking and then to finish up this hook all we need to do is set our dependencies and then there we go and actually for this latest run we'll just put a question mark right here because we can't ensure that we actually do have latest run but once we do it'll pass in the request time the status and the runs and yeah logic looking good so again this is going to take care of the pending runs now I just need to write one more use effect statement to pretty much handle every other run aside from pending around so use effects let me just go ahead and write the boilerplate so again in here what we're going to do is we'll look at the latest run and if it's not pending we'll say if it's an error then we're going to set the time to zero if it's a timeout then we're going to set the time to 10 otherwise if you have a successful run then just display on that timer the time it took so I'm going to write logic in here to say if you don't have a latest run we can just bypass this and also if you do have a latest run but the status of that is equal to run status pending then we can just go ahead and break out of this early no need to uh write any code in here and then we can just start handling all of those cases so first if the latest run status is an error so run status error then what we want to do in that case we said is set the timer to zero and then we can just return because below here is just checking for those other statuses and I can just copy this too so this is what we're going to do in the case of an error now in the case of a timeout if that run was timed out then what we're going to do is set it equal to 10 and just to make sure if we ever change that timeout then we don't have to go back in here and change it again I'll just use that constant timeout seconds now lastly this is the case if we have a successful run because again we're breaking out for a pending run an error and a timeout so this logic is only going to fall through here for a successful run and just like before what we're going to do is set the timer equal to how long it took so we need to calculate the milliseconds from this and to do this it's the latest run dot response time and I'm also going to have the exclamation mark because the response time is actually as you can see it's a number or null now we can guarantee that we have a number here because for every successful run we always have a response time so that's why I can safely add this exclamation mark and then for the latest runs response time to get the actual time of how long that took you just subtract the latest runs request time and that's going to give you the period basically how long it took and from here we just have to convert it to seconds so to do that the same as this one actually so milliseconds to seconds to just like I said before modulus 6000 over a thousand and then last but not least we just need to set the time in that State variable right here and let's say my dependencies that's the only thing we need passing the latest run and last but not least what I need to do here is actually instead of displaying our temp data we are just going to display that time that we've been setting again the set time is equal to or it's setting the value for this variable right here and also I want to make sure that we always display three digits so I'll say to fixed three and this is going to give us our millisecond accuracy and I believe that that's the only thing that we need to do let me just clean this up here so I have speed test store get runs in sort this you got to make sure all my imports are nice and clean and now let's go ahead and test this thing check it out all right so this is looking pretty good already because my latest run in Redux was 0.895 seconds and it is displaying the time from the latest successful run that is what we wanted now let me just go ahead and all right it's looking pretty sweet uh I actually let's do this just to test the timeout so these successful runs this is pretty sweet all right they're appearing successfully however I want to purposely time something out and the easiest way we can do this is just gonna go in the listener and it'll save for that pong listener which is the response this is whenever we receive a successful response we'll set it equal to success I'll just comment this out to kind of like simulate us never receiving our response at all and then hopefully this should time out so all right pop open redox all right pending pending latest round of spending and this button disabled state is working good too should be able to click it while we have a run pending all right beautiful so this is our proper timeout status again this should display 10 seconds that's exactly what we're going for so now let me just go ahead and revert my code and all right looking good and again sometimes whenever I update the source code this Redux tool kind of is like uh gets a little lost I guess so I just need to close the inspector tools or the dev tools and pop that open again you don't have to close down the entire app but there you go all right so I guess our record so far is 0.337 seconds pretty fast and by the way just for kind of reference I'm in New York City right now uh both my iMac and my MacBook and my core server is in Oregon so both the request and response are both going through the Oregon server so yeah not bad time and uh okay in the next video and now that we have that taken care of what I'll do is probably just clean up a few things maybe add some custom font but I mean really we got our working app it's just uh all improving it from here on out so good job everyone and I'll see you all next time
