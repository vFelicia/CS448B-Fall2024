With timestamps:

00:00 - alrighty guys welcome back and in this
00:02 - video what we are going to be doing is
00:04 - finally getting our hands a little bit
00:06 - dare tay and creating a real world
00:09 - project using express and
00:13 - the purpose of this tutorial is
00:14 - basically to step away from theory a bit
00:17 - and take a look at the beginning or
00:20 - simple structure of what an actual
00:21 - project would look like
00:23 - so i'm already in my desktop right here
00:25 - and i'm just gonna make a simple
00:28 - directory called website and then i'm
00:29 - going to cd
00:31 - into that all right so in this example
00:34 - we are going to be creating
00:35 - an express app because to be quite
00:37 - honest it's
00:38 - very simple just to get something up and
00:41 - running very basic web server
00:43 - and all this web server is going to do
00:45 - is it's going to have
00:46 - one page on it and when you go to the
00:48 - home page this is
00:49 - going to print out like hey now or
00:51 - what's up or you know just some text on
00:53 - the screen
00:54 - so we are going to be doing that in an
00:57 - indexed js file
00:59 - because this is actually a way that you
01:00 - can write javascript on your back end
01:03 - pretty cool and if you don't know what
01:06 - every command means don't worry
01:08 - the point of this tutorial isn't really
01:10 - the javascript or express
01:12 - it's more just getting a simple project
01:14 - up and seeing how we can run this in the
01:16 - docker container
01:17 - so the syntax for this is express
01:21 - and we are going to require the express
01:24 - package
01:27 - and then the standard is just the name
01:30 - of app
01:32 - and that is equal to express and now we
01:35 - need to give it two
01:37 - more simple commands two more simple
01:38 - instructions the first one is we're
01:41 - gonna say
01:42 - whenever someone goes to the home page
01:44 - send back a simple response
01:46 - printing out some text on the screen and
01:48 - the other command after that is we want
01:50 - to say
01:51 - for this application we want to run it
01:53 - on port 8080
01:55 - just so our computer and docker knows
01:57 - what process
01:58 - or what port we're running this process
02:00 - on so
02:02 - to do that the syntax for this is app
02:04 - get
02:06 - and the first parameter is the path so
02:08 - this says
02:09 - whenever a user tries to visit the home
02:11 - page so if we had another page like name
02:14 - bacon it would be something like that
02:15 - but
02:16 - we're just talking about the home page
02:17 - your root directory so we can just use
02:18 - that forward slash
02:20 - and the other parameter is a callback
02:22 - where it takes the request
02:25 - and the response and that's why you got
02:27 - this nice little
02:28 - shorthand syntax and we can use arrow
02:31 - functions actually
02:32 - and all right so whenever the
02:36 - user visits the homepage of this awesome
02:38 - amazing app
02:39 - as a response we are going to send back
02:42 - we'll just go with uh hey now brown cow
02:46 - haven't used that one in a while all
02:48 - right so
02:50 - that's uh basically it for our app as
02:53 - far as the logic is concerned
02:55 - the only other thing that we have to do
02:56 - now is instruct
02:58 - our application that we're going to be
02:59 - listening for this on port 8080
03:02 - and it actually doesn't matter what port
03:04 - you are listening on
03:05 - as long as it isn't already taken by
03:07 - another process
03:09 - but 8080 is typically one that isn't
03:11 - used often
03:12 - and kind of good for development
03:17 - all right so just as verification that
03:20 - we can um
03:21 - check out that everything's working
03:23 - whenever this app starts up
03:25 - and begins listening we are just going
03:26 - to log something out
03:29 - and the user isn't going to see this
03:30 - it's not gonna show up on any um
03:32 - like home page or anything like that
03:34 - this is just for us
03:36 - so we can kind of just check things so
03:39 - say listening on port
03:44 - 8080
03:48 - all right and i missed a couple of
03:51 - semicolons here but
03:52 - other than this this is basically all we
03:55 - need
03:55 - for this app again i know this isn't an
03:58 - express tutorial but
04:00 - look how easy it is in express the
04:02 - creative backend that's where we're
04:03 - going with it for this tutorial
04:05 - so what i'm going to do is actually exit
04:07 - out of there
04:08 - make sure we save it and okay so so far
04:12 - we have a website directory with one
04:14 - file
04:15 - in there called index.js and this is
04:18 - essentially an express app that
04:20 - returns a simple web page just the
04:22 - homepage
04:24 - so where do we go from here well for
04:26 - those of you familiar with
04:27 - javascript applications what we are
04:30 - going to be looking for
04:31 - is a package.json file so we're going to
04:34 - be creating this
04:35 - and this is going to be super simple all
04:38 - we are going to need to be
04:40 - doing is creating really uh two key
04:43 - value pairs
04:44 - the first one is
04:47 - gonna make sure i spell that right
04:49 - dependencies now dependencies are just
04:52 - telling our application
04:53 - what javascript packages does this
04:56 - depend on
04:57 - now if you remember we imported a
05:00 - package called
05:01 - express at the top of index.js
05:04 - and that's the only package that we need
05:06 - and the
05:08 - this field right here the value of this
05:10 - is actually the
05:11 - version of express however we can just
05:14 - use star and say any version works for
05:16 - this we're not too picky with this
05:17 - tutorial
05:19 - now after this we are going to make a
05:21 - custom script
05:22 - so the scripts and i'm just going to
05:24 - name this one start
05:26 - again the key is the name whatever you
05:28 - want to name your script
05:29 - and the value of this is just the
05:31 - command so it's kind of just like a
05:33 - shortcut
05:34 - and in this case the word start
05:37 - is going to kick off a process that's
05:39 - going to run node index.js
05:43 - so essentially whenever we run npm start
05:46 - what node is going to do is it's going
05:47 - to run this
05:48 - index.js file and this is basically
05:52 - our web server it starts up the server
05:55 - runs it on port 8080
05:56 - and then whenever someone hits the home
05:58 - page then it just
06:00 - says hey now brown cow i believe that's
06:02 - what we wrote
06:03 - should probably remember this it was
06:04 - like two seconds ago but whatever
06:07 - all right so this looks like it's good
06:09 - to go so i'm also going to save this
06:12 - all right so if you run ls we see that
06:14 - we got index.js
06:15 - and also package.json and believe it or
06:19 - not those are the only two
06:21 - source code files that we need to run
06:22 - this application
06:24 - so one quick thing that i want to point
06:27 - out
06:28 - is this in our package.json file
06:32 - we have this little command where we're
06:33 - going to run npm start and what this is
06:35 - going to do is it's going to run
06:37 - node index index.js
06:40 - now there are two keywords i just
06:42 - mentioned npm
06:44 - and node npm start and node index.js
06:48 - so whenever we build our docker file
06:51 - we need to make sure that we have both
06:53 - of those things
06:54 - because remember our docker file is like
06:56 - the instructions
06:57 - of whenever you first start up a
06:59 - computer this is what you do
07:01 - now if you ever just put together a
07:03 - normal computer stuck the hard drive in
07:05 - the ram
07:06 - turned it on showed your monitor node
07:09 - and npm they don't come with that
07:11 - computer you need to explicitly install
07:13 - those
07:14 - so what i want to do first is actually
07:17 - show you guys what happens if you try to
07:20 - build this image without installing
07:22 - those first
07:23 - and i know this is going to break but
07:25 - this is a typical error that you're
07:26 - going to see so i want to show you guys
07:28 - what it looks like and how to work
07:29 - through it so
07:31 - of course create a docker file and the
07:34 - first
07:34 - keyword that we're going to use is from
07:37 - and specify our base image
07:39 - now we're just going to be using alpine
07:41 - however i want to tell you right now
07:43 - that alpine like you probably already
07:45 - know by now
07:46 - it's the very bare basic stripped-down
07:49 - version of
07:50 - an operating system basically it's not
07:53 - going to have node or npm installed
07:55 - so this isn't really going to work in
07:57 - this example but again
07:59 - like i said i want to generate some
08:00 - errors on purpose here
08:02 - so after this what we're going to do is
08:04 - run npm
08:06 - install so what this does is it actually
08:09 - takes all of your dependencies
08:11 - in package.json and remember we had one
08:14 - called express
08:15 - is going to download it from the
08:17 - internet and install it in our
08:18 - application
08:19 - so this is what this command is going to
08:22 - do and remember is a default command
08:25 - what we are trying to run in this
08:27 - example is
08:28 - npm start
08:31 - this was the helper command that we
08:33 - wrote in our package.json file
08:36 - so okay let's just go ahead and save
08:38 - that yep
08:39 - looks good and we can go ahead and since
08:43 - that file is in the same directory
08:45 - docker build
08:46 - period and let's just see what happens
08:49 - all right building building looked like
08:52 - things
08:53 - were going good for a bit but yeah it
08:55 - errored out on
08:56 - run npm install let's see if we get some
09:00 - more details here
09:01 - run npm install npm not found
09:05 - all right so if we go back to our docker
09:08 - file
09:10 - we did see that okay when it got to this
09:12 - line right here
09:14 - it bugged out because it said npm not
09:16 - found where is it you told me to start
09:18 - with alpine
09:19 - which i did which came with nothing by
09:21 - the way bucky
09:22 - and then you told me to run this and i
09:24 - got all confused
09:26 - okay so what do we do in this example we
09:28 - got two
09:29 - options first in this line right here i
09:32 - don't know why i chose b
09:33 - for that and this line right here what
09:36 - we could do
09:37 - is we can explicitly install node
09:40 - which comes with npm now
09:43 - that sounds like a lot of work and as
09:45 - you know i'm
09:46 - pretty lazy so i'm gonna look for a
09:49 - different
09:50 - solution and this is what i would
09:52 - recommend the majority of the time

Cleaned transcript:

alrighty guys welcome back and in this video what we are going to be doing is finally getting our hands a little bit dare tay and creating a real world project using express and the purpose of this tutorial is basically to step away from theory a bit and take a look at the beginning or simple structure of what an actual project would look like so i'm already in my desktop right here and i'm just gonna make a simple directory called website and then i'm going to cd into that all right so in this example we are going to be creating an express app because to be quite honest it's very simple just to get something up and running very basic web server and all this web server is going to do is it's going to have one page on it and when you go to the home page this is going to print out like hey now or what's up or you know just some text on the screen so we are going to be doing that in an indexed js file because this is actually a way that you can write javascript on your back end pretty cool and if you don't know what every command means don't worry the point of this tutorial isn't really the javascript or express it's more just getting a simple project up and seeing how we can run this in the docker container so the syntax for this is express and we are going to require the express package and then the standard is just the name of app and that is equal to express and now we need to give it two more simple commands two more simple instructions the first one is we're gonna say whenever someone goes to the home page send back a simple response printing out some text on the screen and the other command after that is we want to say for this application we want to run it on port 8080 just so our computer and docker knows what process or what port we're running this process on so to do that the syntax for this is app get and the first parameter is the path so this says whenever a user tries to visit the home page so if we had another page like name bacon it would be something like that but we're just talking about the home page your root directory so we can just use that forward slash and the other parameter is a callback where it takes the request and the response and that's why you got this nice little shorthand syntax and we can use arrow functions actually and all right so whenever the user visits the homepage of this awesome amazing app as a response we are going to send back we'll just go with uh hey now brown cow haven't used that one in a while all right so that's uh basically it for our app as far as the logic is concerned the only other thing that we have to do now is instruct our application that we're going to be listening for this on port 8080 and it actually doesn't matter what port you are listening on as long as it isn't already taken by another process but 8080 is typically one that isn't used often and kind of good for development all right so just as verification that we can um check out that everything's working whenever this app starts up and begins listening we are just going to log something out and the user isn't going to see this it's not gonna show up on any um like home page or anything like that this is just for us so we can kind of just check things so say listening on port 8080 all right and i missed a couple of semicolons here but other than this this is basically all we need for this app again i know this isn't an express tutorial but look how easy it is in express the creative backend that's where we're going with it for this tutorial so what i'm going to do is actually exit out of there make sure we save it and okay so so far we have a website directory with one file in there called index.js and this is essentially an express app that returns a simple web page just the homepage so where do we go from here well for those of you familiar with javascript applications what we are going to be looking for is a package.json file so we're going to be creating this and this is going to be super simple all we are going to need to be doing is creating really uh two key value pairs the first one is gonna make sure i spell that right dependencies now dependencies are just telling our application what javascript packages does this depend on now if you remember we imported a package called express at the top of index.js and that's the only package that we need and the this field right here the value of this is actually the version of express however we can just use star and say any version works for this we're not too picky with this tutorial now after this we are going to make a custom script so the scripts and i'm just going to name this one start again the key is the name whatever you want to name your script and the value of this is just the command so it's kind of just like a shortcut and in this case the word start is going to kick off a process that's going to run node index.js so essentially whenever we run npm start what node is going to do is it's going to run this index.js file and this is basically our web server it starts up the server runs it on port 8080 and then whenever someone hits the home page then it just says hey now brown cow i believe that's what we wrote should probably remember this it was like two seconds ago but whatever all right so this looks like it's good to go so i'm also going to save this all right so if you run ls we see that we got index.js and also package.json and believe it or not those are the only two source code files that we need to run this application so one quick thing that i want to point out is this in our package.json file we have this little command where we're going to run npm start and what this is going to do is it's going to run node index index.js now there are two keywords i just mentioned npm and node npm start and node index.js so whenever we build our docker file we need to make sure that we have both of those things because remember our docker file is like the instructions of whenever you first start up a computer this is what you do now if you ever just put together a normal computer stuck the hard drive in the ram turned it on showed your monitor node and npm they don't come with that computer you need to explicitly install those so what i want to do first is actually show you guys what happens if you try to build this image without installing those first and i know this is going to break but this is a typical error that you're going to see so i want to show you guys what it looks like and how to work through it so of course create a docker file and the first keyword that we're going to use is from and specify our base image now we're just going to be using alpine however i want to tell you right now that alpine like you probably already know by now it's the very bare basic strippeddown version of an operating system basically it's not going to have node or npm installed so this isn't really going to work in this example but again like i said i want to generate some errors on purpose here so after this what we're going to do is run npm install so what this does is it actually takes all of your dependencies in package.json and remember we had one called express is going to download it from the internet and install it in our application so this is what this command is going to do and remember is a default command what we are trying to run in this example is npm start this was the helper command that we wrote in our package.json file so okay let's just go ahead and save that yep looks good and we can go ahead and since that file is in the same directory docker build period and let's just see what happens all right building building looked like things were going good for a bit but yeah it errored out on run npm install let's see if we get some more details here run npm install npm not found all right so if we go back to our docker file we did see that okay when it got to this line right here it bugged out because it said npm not found where is it you told me to start with alpine which i did which came with nothing by the way bucky and then you told me to run this and i got all confused okay so what do we do in this example we got two options first in this line right here i don't know why i chose b for that and this line right here what we could do is we can explicitly install node which comes with npm now that sounds like a lot of work and as you know i'm pretty lazy so i'm gonna look for a different solution and this is what i would recommend the majority of the time
