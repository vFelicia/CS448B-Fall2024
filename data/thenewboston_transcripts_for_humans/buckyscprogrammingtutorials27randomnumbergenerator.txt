With timestamps:

00:00 - what is going on guys it's Bucky and
00:01 - welcome back to your 27th C++ tutorial
00:04 - and this tutorial is actually going to
00:05 - be a pretty fun one because we're going
00:07 - to be talking about random numbers what
00:09 - they are you know a couple functions
00:11 - that are going to help us build a random
00:13 - number generators and I'm actually going
00:15 - to teach you guys how to build a sweet
00:16 - random number generator so before we get
00:19 - into that we need to include a header
00:21 - file so include and the header file is
00:25 - called C STD Li B from the C standard
00:30 - library and we include this because we
00:33 - want to use a function from it called R
00:34 - and not run Rand and what this does is
00:38 - whenever you call this it basically
00:40 - returns to you a random number so let's
00:42 - see let's run it and we got 41 in this
00:46 - case so as you can see whenever we print
00:48 - out R and it pretty much takes a random
00:50 - number and gives it to you sorry saying
00:53 - Wow
00:53 - there you go there's our random number
00:55 - generator perfect well they're actually
00:57 - a couple problems with the rand and
00:59 - we're going to be talking about those
01:00 - later on but for now I want to show you
01:03 - guys how to build a basic random number
01:05 - generator and let's go ahead and just
01:08 - call Rand like 25 times so let's go
01:11 - ahead and make a for loop and go ahead
01:14 - and make an x set equal to 1 and make X
01:17 - is less than 25 and of course X plus
01:20 - plus so now we have a loop that's going
01:21 - to run 25 times or sometime around that
01:24 - so now let's just go ahead and see out
01:27 - umm well let's just go ahead and see out
01:30 - Rand and see what happens and then might
01:34 - as well end that line so it looks so
01:35 - nice and pretty let's go ahead and print
01:37 - it and see what we get
01:39 - okay so it looks like we're getting a
01:41 - huge list of random numbers all right
01:45 - looks pretty good
01:46 - but you know what if I'm going to build
01:49 - a random number generator and I don't
01:51 - want numbers quite this big in tens and
01:54 - thousands and stuff like that say we're
01:56 - building a random number generator to
01:58 - simulate people rolling dice or
02:00 - something
02:00 - well I only want the numbers 1 to 6 so
02:03 - here's a neat little trick where you can
02:05 - get that result set in order to get a
02:09 - certain set of numbers go ahead and take
02:12 - your R and and put modulus 6 what this
02:16 - is going to do is it's going to give you
02:17 - six random numbers it's going to take a
02:20 - big number like 25,000 or something
02:22 - divided by 6 and give you the remainder
02:25 - of that so the remainder whenever you
02:27 - divide by 6 can either be 0 1 2 3 4 or 5
02:31 - so let's go ahead and take a look at
02:33 - that whenever you divide by 6 you're
02:35 - limited to only the number 0 1 2 3 4 & 5
02:40 - you can't have 6 as a remainder because
02:43 - anything divided by 6 with 6 remainder
02:45 - it would just be another one so you can
02:47 - say all right well I'm trying to
02:49 - simulate a dice here and they have the
02:52 - numbers 1 through 6 not 0 through 5 so
02:55 - we got 6 numbers but we don't want 0
02:58 - through 5 we want 1 through 6
03:00 - so Bucky can you just show me how to
03:02 - take all these numbers and shift them
03:04 - add 1 to them well that is very simple
03:07 - just go ahead and surround your R + 6
03:09 - and shift put 1 plus now this is going
03:13 - to do is it's going to take a random
03:14 - number divided by 6 and whatever the
03:17 - remainder is which would be 0 through 5
03:19 - it would add 1 to it so now you're
03:22 - giving 1 to 6 so now you can see that 0
03:25 - is eliminated and we have 6 now so 1 2
03:31 - oh let me find it three three four five
03:34 - and six so that is how you build a
03:37 - random number generator using you know a
03:39 - specific result set
03:41 - so remember however many numbers you
03:43 - want you put as a modulus of R and and
03:46 - however many you want to shift to by
03:48 - just add that many to it but let's go
03:50 - ahead and take a little closer look at
03:52 - this random number generator okay let's
03:55 - read these numbers five six five one one
03:58 - five okay they look like you know
04:00 - they're pretty random to me let's go
04:02 - ahead and run it again five six five one
04:05 - one five that seems kind of familiar
04:07 - let's go ahead and run this one more
04:09 - time five six five one one five all
04:12 - right
04:13 - what's going on with our random
04:14 - generator we built this program
04:16 - perfectly which we did so I mean we use
04:19 - a random RA everything is good to go so
04:22 - what's the deal why did it give us the
04:23 - same numbers every time well in order to
04:27 - understand this I need to talk to you
04:29 - guys about computers and random numbers
04:32 - now listen very closely because this is
04:34 - actually very important no computer
04:37 - random number generator is truly random
04:41 - the truth is that computers are not
04:44 - humans computers have to follow a
04:46 - certain algorithm a certain set of
04:49 - instructions a certain pattern so for
04:51 - example whenever you go into a casino
04:54 - and you see those automated slot
04:55 - machines and it looks like people are
04:57 - just spinning and skipping them random
04:59 - numbers well the truth is that it's not
05:01 - actually given them truly random numbers
05:03 - those slot machines even though they're
05:05 - supposed to be random number generator
05:07 - there have to follow a certain aggregate
05:09 - rhythm a certain pattern and you know
05:12 - whenever you're looking at like game
05:14 - shows or whenever you buy electronic and
05:17 - a flash like random lights
05:18 - well those lights are not random either
05:21 - everything in electronics that is
05:23 - supposed to be random is not random it's
05:26 - a computer it has to follow a complex
05:29 - algorithm in a complex pattern now the
05:32 - reason that these are so complex is
05:35 - that's what gives the appearance that
05:37 - it's
05:38 - random to humans we don't understand
05:41 - this algorithm right away only the
05:43 - computer does so whenever we see numbers
05:45 - like this five six five one one five
05:49 - three six those are random numbers to us
05:51 - but the computer it's really just
05:54 - following a big algorithm so we're
05:56 - saying all right
05:56 - so whenever we're building games and
05:59 - stuff we don't want our numbers to be
06:01 - predictable so what can we do in order
06:03 - to change that algorithm in a little bit
06:05 - well let's go ahead and let me include
06:08 - another no I wanted this yet but the
06:13 - rand function right here runs on a very
06:15 - complex algorithm and I don't know what
06:17 - the algorithm is and I don't think many
06:19 - people do but it's basically a large
06:21 - function that computers excuse me that
06:24 - humans aren't meant to understand so
06:27 - what
06:28 - C++ the developers allowed us to do is
06:30 - seed a random number and you use that in
06:34 - a function called s Rand now what this
06:36 - function does is it allows us to pass in
06:38 - a random number any number we want like
06:40 - 67 and now whenever we build it we get
06:44 - different results six two one six one
06:46 - six now let's go ahead and pass another
06:48 - one like 215 and now we get you know
06:52 - four one three one one or whatever so
06:56 - whenever we see it around a number we
06:58 - throw you know any old random number in
07:00 - there and it changes the algorithm so
07:03 - now I don't even know you know what
07:05 - happens when I type in 43 I get truly
07:08 - random numbers so if you're saying all
07:10 - right so let's go ahead and put 43 in
07:13 - there every time and we get four four
07:16 - one five one
07:17 - okay now let's run again four four one
07:20 - five one OMG Bucky what are you doing
07:23 - all you did is you change the algorithm
07:24 - a little bit and you know we didn't
07:27 - really make it a truly random number
07:28 - January we just gave a different
07:30 - algorithm and follow well all right I'll
07:33 - show you guys one last trick in in order
07:35 - to do this we need to include another
07:37 - header fire and
07:39 - and this is called see time and what
07:43 - this does is allows us to access the
07:45 - clock or the time in our computer and
07:47 - now let's go ahead and pass in a
07:49 - function called time and as a parameter
07:53 - of time not tema time go ahead and pass
07:56 - in zero now let's go ahead and run this
07:59 - and see what happens before I explain it
08:01 - okay two five two two okay let's run
08:04 - again four six one for sweet and one
08:08 - more time five four six four six so now
08:11 - we have a random number generator that
08:14 - works perfectly so now let me tell you
08:17 - guys why we know that we can use s R and
08:20 - to change the algorithm a little bit but
08:22 - if we just threw the same number in here
08:24 - every time oh just you know have a
08:26 - different algorithm but with the same
08:27 - results every time so what time zero
08:30 - does is time zero calculates the seconds
08:33 - sense like 1970 or something and what
08:37 - this does is every second this value is
08:40 - changing so now it might be a million
08:42 - seconds now a million and one now a
08:44 - million two people don't have access to
08:48 - how many seconds are you know counting
08:51 - since 1970 so this gives the appearance
08:54 - that this number generator is truly
08:57 - random now so this value is ever
09:00 - changing and that's why every single
09:02 - time we run our program we're going to
09:04 - get a different result so that is how
09:06 - people build random number generators
09:09 - that are is truly random or they're not
09:11 - truly random but there is random as we
09:13 - can make them so again what we did is
09:16 - here's the algorithm all ran does is it
09:19 - runs a complex algorithm s R and allows
09:23 - us to throw a number in there to change
09:24 - the algorithm a little bit and time zero
09:27 - counts the number of seconds and this
09:29 - value is changing every single second so
09:32 - that's why since this value is changing
09:34 - this whole algorithm is changing every
09:37 - single second and that allows us to make
09:39 - a truly random number generator so there
09:42 - you go I hope you guys enjoyed this
09:43 - tutorial thank you guys for watching and
09:46 - don't forget to include your header
09:47 - files because you can't use this program
09:50 - without it and there you go I'll see you
09:52 - guys next time

Cleaned transcript:

what is going on guys it's Bucky and welcome back to your 27th C++ tutorial and this tutorial is actually going to be a pretty fun one because we're going to be talking about random numbers what they are you know a couple functions that are going to help us build a random number generators and I'm actually going to teach you guys how to build a sweet random number generator so before we get into that we need to include a header file so include and the header file is called C STD Li B from the C standard library and we include this because we want to use a function from it called R and not run Rand and what this does is whenever you call this it basically returns to you a random number so let's see let's run it and we got 41 in this case so as you can see whenever we print out R and it pretty much takes a random number and gives it to you sorry saying Wow there you go there's our random number generator perfect well they're actually a couple problems with the rand and we're going to be talking about those later on but for now I want to show you guys how to build a basic random number generator and let's go ahead and just call Rand like 25 times so let's go ahead and make a for loop and go ahead and make an x set equal to 1 and make X is less than 25 and of course X plus plus so now we have a loop that's going to run 25 times or sometime around that so now let's just go ahead and see out umm well let's just go ahead and see out Rand and see what happens and then might as well end that line so it looks so nice and pretty let's go ahead and print it and see what we get okay so it looks like we're getting a huge list of random numbers all right looks pretty good but you know what if I'm going to build a random number generator and I don't want numbers quite this big in tens and thousands and stuff like that say we're building a random number generator to simulate people rolling dice or something well I only want the numbers 1 to 6 so here's a neat little trick where you can get that result set in order to get a certain set of numbers go ahead and take your R and and put modulus 6 what this is going to do is it's going to give you six random numbers it's going to take a big number like 25,000 or something divided by 6 and give you the remainder of that so the remainder whenever you divide by 6 can either be 0 1 2 3 4 or 5 so let's go ahead and take a look at that whenever you divide by 6 you're limited to only the number 0 1 2 3 4 & 5 you can't have 6 as a remainder because anything divided by 6 with 6 remainder it would just be another one so you can say all right well I'm trying to simulate a dice here and they have the numbers 1 through 6 not 0 through 5 so we got 6 numbers but we don't want 0 through 5 we want 1 through 6 so Bucky can you just show me how to take all these numbers and shift them add 1 to them well that is very simple just go ahead and surround your R + 6 and shift put 1 plus now this is going to do is it's going to take a random number divided by 6 and whatever the remainder is which would be 0 through 5 it would add 1 to it so now you're giving 1 to 6 so now you can see that 0 is eliminated and we have 6 now so 1 2 oh let me find it three three four five and six so that is how you build a random number generator using you know a specific result set so remember however many numbers you want you put as a modulus of R and and however many you want to shift to by just add that many to it but let's go ahead and take a little closer look at this random number generator okay let's read these numbers five six five one one five okay they look like you know they're pretty random to me let's go ahead and run it again five six five one one five that seems kind of familiar let's go ahead and run this one more time five six five one one five all right what's going on with our random generator we built this program perfectly which we did so I mean we use a random RA everything is good to go so what's the deal why did it give us the same numbers every time well in order to understand this I need to talk to you guys about computers and random numbers now listen very closely because this is actually very important no computer random number generator is truly random the truth is that computers are not humans computers have to follow a certain algorithm a certain set of instructions a certain pattern so for example whenever you go into a casino and you see those automated slot machines and it looks like people are just spinning and skipping them random numbers well the truth is that it's not actually given them truly random numbers those slot machines even though they're supposed to be random number generator there have to follow a certain aggregate rhythm a certain pattern and you know whenever you're looking at like game shows or whenever you buy electronic and a flash like random lights well those lights are not random either everything in electronics that is supposed to be random is not random it's a computer it has to follow a complex algorithm in a complex pattern now the reason that these are so complex is that's what gives the appearance that it's random to humans we don't understand this algorithm right away only the computer does so whenever we see numbers like this five six five one one five three six those are random numbers to us but the computer it's really just following a big algorithm so we're saying all right so whenever we're building games and stuff we don't want our numbers to be predictable so what can we do in order to change that algorithm in a little bit well let's go ahead and let me include another no I wanted this yet but the rand function right here runs on a very complex algorithm and I don't know what the algorithm is and I don't think many people do but it's basically a large function that computers excuse me that humans aren't meant to understand so what C++ the developers allowed us to do is seed a random number and you use that in a function called s Rand now what this function does is it allows us to pass in a random number any number we want like 67 and now whenever we build it we get different results six two one six one six now let's go ahead and pass another one like 215 and now we get you know four one three one one or whatever so whenever we see it around a number we throw you know any old random number in there and it changes the algorithm so now I don't even know you know what happens when I type in 43 I get truly random numbers so if you're saying all right so let's go ahead and put 43 in there every time and we get four four one five one okay now let's run again four four one five one OMG Bucky what are you doing all you did is you change the algorithm a little bit and you know we didn't really make it a truly random number January we just gave a different algorithm and follow well all right I'll show you guys one last trick in in order to do this we need to include another header fire and and this is called see time and what this does is allows us to access the clock or the time in our computer and now let's go ahead and pass in a function called time and as a parameter of time not tema time go ahead and pass in zero now let's go ahead and run this and see what happens before I explain it okay two five two two okay let's run again four six one for sweet and one more time five four six four six so now we have a random number generator that works perfectly so now let me tell you guys why we know that we can use s R and to change the algorithm a little bit but if we just threw the same number in here every time oh just you know have a different algorithm but with the same results every time so what time zero does is time zero calculates the seconds sense like 1970 or something and what this does is every second this value is changing so now it might be a million seconds now a million and one now a million two people don't have access to how many seconds are you know counting since 1970 so this gives the appearance that this number generator is truly random now so this value is ever changing and that's why every single time we run our program we're going to get a different result so that is how people build random number generators that are is truly random or they're not truly random but there is random as we can make them so again what we did is here's the algorithm all ran does is it runs a complex algorithm s R and allows us to throw a number in there to change the algorithm a little bit and time zero counts the number of seconds and this value is changing every single second so that's why since this value is changing this whole algorithm is changing every single second and that allows us to make a truly random number generator so there you go I hope you guys enjoyed this tutorial thank you guys for watching and don't forget to include your header files because you can't use this program without it and there you go I'll see you guys next time
