With timestamps:

00:00 - in this video let's go ahead and start
00:02 - implementing the first rest endpoint
00:05 - and let's start with the one that gives
00:07 - us the list of all the banks
00:09 - now there are two general ways that we
00:12 - can approach this
00:13 - we can either go top down so starting at
00:16 - the rest end point
00:17 - and then basically working our way down
00:20 - through all the layers
00:21 - until we have all the functionality that
00:24 - we need
00:24 - in order to return the list of banks
00:28 - now on the other hand we can also do it
00:30 - bottom up
00:31 - so here we would first think about the
00:33 - kind of data that we need
00:35 - and then build our way up all the way to
00:37 - the rest api
00:39 - so to the controller level for this
00:41 - first standpoint
00:42 - let's go bottom up because this will
00:45 - first of all allow more self-contained
00:47 - videos going
00:48 - each step and also it allows us to do
00:51 - better unit testing of
00:53 - each single step so at each layer
00:56 - basically or for each
00:58 - video for each step you can have the
01:00 - unit test for that specific level
01:03 - which is a bit harder to do if you go
01:06 - top down so let's go ahead into our
01:09 - source
01:09 - main kotlin folder and in here let's
01:12 - create a new
01:13 - package and we're going to call this one
01:16 - model
01:18 - so as you might know the term model
01:20 - which comes from the
01:21 - model view controller architecture
01:23 - pattern
01:24 - it simply refers to the data
01:27 - representations
01:28 - of your application and since we're
01:30 - going bottom up now
01:32 - in this video we're just going to create
01:34 - the data layer
01:35 - for application so we're going to create
01:37 - the model
01:38 - and since we're talking about bank
01:40 - objects we need a
01:42 - class that represents our banks so
01:45 - inside this new package let's go ahead
01:47 - and create a new kotlin
01:49 - class or file and i'm simply going to
01:51 - call this one
01:52 - bank now this bank class here will
01:55 - basically be our data transfer
01:58 - object so a data transfer object is
02:01 - called data transfer object because it's
02:03 - the one that goes over the network
02:06 - so for instance if a user requests some
02:08 - data from your rest api
02:10 - you're going to respond with usually
02:12 - some json data or xml data
02:15 - and it's really just this bank class
02:18 - that's being serialized into a json
02:20 - representation
02:22 - and also the same way if someone makes a
02:24 - request
02:25 - and in the request body they provide a
02:28 - json
02:29 - or some json data for you to process
02:32 - now we're going to see this in action
02:34 - later on for now let's go
02:36 - ahead and create this bank class now
02:38 - inside this class we want some kind of
02:40 - data that represents the bank
02:42 - for this let's actually go ahead to the
02:45 - new boston
02:47 - website over here and then under get
02:49 - started let's look at the documentation
02:52 - and here on the bank api let's see what
02:55 - the bank's endpoint looks like
02:56 - in the real network of the digital
02:59 - currency
03:00 - and then we're going to use a simplified
03:02 - representation
03:04 - so here you can see this is what a bank
03:06 - object really looks like in the new
03:07 - boston
03:09 - digital currency for our simple example
03:12 - let's just use a account number a
03:14 - transaction fee and a trust
03:16 - so let's go ahead and represent this in
03:18 - our class
03:20 - now if you do already know some kotlin
03:23 - please bear with me here i want to show
03:25 - how you would traditionally go and
03:26 - create such a class
03:28 - and then i'm going to go and refactor
03:30 - that step by step until we reach really
03:32 - clean cuddling code
03:34 - that also shows you one of the super
03:35 - useful features of the cotton language
03:38 - and just shows you how concise it can be
03:41 - for now let's do it the same way you
03:43 - would basically do it in java
03:45 - so we're going to create these fields in
03:48 - the class
03:48 - so we have an account number which is a
03:50 - string
03:52 - we also said we want a trust this can be
03:54 - a double
03:56 - and then a transaction fee which is
03:58 - actually
04:00 - an int and then we're going to create a
04:03 - constructor down here so in kotlin you
04:06 - just say constructor
04:08 - and the constructor takes an account
04:10 - number
04:11 - of type string the trust of type double
04:14 - and a transaction fee and again if you
04:18 - already know kotlin bear with me here
04:20 - i know we're going to do this a lot
04:23 - simple later on
04:24 - so we have transaction fee
04:29 - and i'm going to reorder this in a
04:30 - second to be
04:33 - [Music]
04:35 - more consistent so let's just do it like
04:38 - this for now then it's all consistent
04:40 - now the next thing you would do in
04:43 - languages like
04:44 - java is you would have a getter and
04:46 - setter
04:48 - for each field so let's just do it for
04:50 - the account number for now
04:53 - so this would return a string let me at
04:56 - least write it a bit shorter in kotlin
04:57 - again using this notation over here
05:00 - and you would have a set account number
05:03 - which takes in an account number of
05:06 - course of type string
05:07 - and all it does is is it overwrites the
05:11 - account number
05:12 - now in order to be able to do this i'll
05:14 - actually have to make this a var
05:16 - so if you write val in kotlin that's
05:19 - like a final variable in java
05:21 - so instead i'll have to make this a var
05:23 - which allows me to reassign this
05:25 - variable later on
05:26 - now imagine the same getter and setter
05:28 - for trust and transaction fee
05:30 - and then also we have things like equals
05:33 - and hash code we can generate them
05:35 - and also we want a to string
05:38 - so we're going to generate that as well
05:41 - just like you would do in java
05:42 - all right so we have quite a lot of code
05:45 - even though i
05:46 - already removed the other get to send
05:48 - setters
05:49 - now let's go ahead and refactor this and
05:52 - move it to kotlin style
05:54 - now the first thing we can do actually
05:56 - independent of whether it's kotlin or
05:57 - java
05:58 - is i don't really want to set her i want
06:00 - these to be
06:02 - final so i'm going to pull this back
06:04 - again so you should always strive to
06:07 - have immutable classes where you cannot
06:09 - just overwrite any field at any point
06:12 - so once i create a bank object i want it
06:14 - to always
06:15 - contain the same account number trust
06:17 - and transaction fee
06:19 - and of course this would be the same in
06:20 - any programming language
06:22 - but now for this getter over here cotton
06:25 - actually has a
06:26 - specific syntax for that so below this
06:30 - class property here you can write get
06:33 - and also you can write set to create a
06:35 - setter
06:36 - now get should simply return the backing
06:39 - field
06:41 - so this backing field is the kind of
06:43 - hidden field
06:44 - that really powers this property over
06:47 - here
06:47 - so this is the one that stores the
06:49 - actual account number
06:51 - and you can only access this field
06:54 - in the getter or setter so if you were
06:56 - to add a setter here as well
06:58 - you get a value and typically you would
07:00 - just set the backing
07:02 - field to the value of course that's not
07:05 - possible here because i have a
07:07 - val so it doesn't have a setter it's a
07:10 - final variable
07:12 - and also we have a naming clash here so
07:15 - if i look at
07:16 - why it's showing these red lines you can
07:19 - see platform declaration clash
07:22 - the following declarations have the same
07:24 - jvm signature
07:26 - so you can see that this getter over
07:28 - here
07:29 - it will generate a java bytecode
07:32 - function which is also called
07:34 - getaccountnumber
07:36 - and we already have a getaccount number
07:38 - down here
07:39 - and this is why the two declarations
07:41 - will clash
07:42 - so instead of having this separate
07:43 - getter here in kotlin you would do it
07:46 - like this
07:47 - so so much for getters and status and
07:49 - kotlin now let's actually go ahead and
07:51 - refactor this
07:53 - and just for fun let's actually just use
07:55 - the recommendations from intellij
07:57 - so it's showing some gray squiggly lines
08:00 - here because the getter is redundant
08:02 - because just getting the value of the
08:04 - backing field
08:05 - is just the default implementation so
08:08 - you don't need to do this because
08:10 - by default if you have a val
08:13 - content will already generate the
08:14 - default getter for you
08:17 - the same if you have a var it's also
08:19 - going to generate the default setup for
08:21 - you
08:22 - only if you want to perform some custom
08:24 - logic then you can overwrite the get and
08:26 - set methods
08:28 - now next let's go ahead and see why it's
08:30 - showing the constructor in yellow
08:33 - and let's convert this to a primary
08:35 - constructor
08:36 - so in kotlin most of the time you use
08:39 - primary constructors
08:40 - and this means you define the
08:42 - constructor parameters
08:44 - up here right inside the class header
08:48 - instead of having secondary constructors
08:51 - you can still have more constructors by
08:53 - putting them here
08:55 - but oftentimes you just need one and
08:57 - then you can do it right inside the
08:58 - class header
08:59 - so now you can see it actually already
09:01 - refactored all the fields
09:03 - so if i go back for a second you can see
09:06 - it also moved all the fields so all this
09:09 - code
09:10 - it just moved into this other oops
09:14 - it just moved into a primary constructor
09:18 - all right so let me put this also on
09:19 - separate lines again
09:22 - now there's one thing we should change
09:23 - here i made these private initially
09:26 - because i wanted to show the way it's
09:27 - done in java with the private field and
09:30 - then the public getter
09:31 - but since in kotlin those two are
09:33 - basically
09:35 - both represented by this property we
09:38 - really want this account number trust
09:40 - and transaction fee to be public
09:42 - and by default in kotlin the classes and
09:45 - its properties
09:46 - are public so we don't really need to
09:48 - have the modifier here
09:50 - it's also going to tell you that it's
09:51 - redundant so
09:53 - what this means now if this account
09:55 - number here is public
09:57 - it just means that content exposes those
10:00 - default getters and setters publicly
10:03 - it doesn't mean that the backing field
10:04 - is in any way
10:06 - exposed to the outside so you still have
10:08 - information hiding
10:10 - it's really just the getters and setters
10:13 - that are not explicitly shown here
10:15 - but that still exists for this property
10:18 - all right so far so good so now we're
10:20 - left with a class that has three
10:22 - properties
10:23 - but we still have these equals hash code
10:26 - and to string implementations
10:28 - that are really quite dumb and that you
10:30 - just generate with your ide
10:32 - so what we can do in kotlin instead is
10:35 - we can declare a data class
10:37 - and a data class has quite a few useful
10:40 - and convenient features
10:42 - and some of them include that it
10:44 - automatically
10:46 - creates a standard implementation of
10:48 - equals
10:49 - of hashcode and of tostring so we don't
10:52 - need all of those
10:53 - we can just remove all of them and now
10:55 - we're left with a data class
10:58 - that really just represents what we
10:59 - initially wanted to do
11:01 - we just wanted to have a data transfer
11:04 - object
11:04 - or a data class that has three fields
11:07 - an account number a trust and
11:10 - a transaction fee so with this we
11:14 - have really perfectly expressed what we
11:16 - actually wanted
11:18 - and this is also the way you would do
11:19 - this normally in cotton
11:21 - so i really love this feature i love
11:23 - kotlin and this is just one of the
11:25 - reasons why
11:26 - if you want to learn more about cotton
11:28 - check out the links below
11:30 - for my youtube videos and also courses
11:33 - for now this is all we need now i should
11:35 - mention that in java 14
11:38 - they introduced a feature called records
11:41 - and in java 14 it's a preview feature i
11:44 - believe but then in java 15 it's just a
11:46 - regular feature
11:48 - and records are basically the same thing
11:50 - so java is also catching up
11:52 - and really improving some of those
11:55 - boilerplate
11:56 - that have been necessary before
12:00 - so yeah but that's basically the end
12:01 - result of this video
12:03 - so just five lines of code i'm hope
12:06 - you're not disappointed because of this
12:08 - rather the opposite because we were able
12:11 - to remove around
12:12 - 40 lines of code and just
12:15 - really reducing it to what's necessary
12:18 - also we don't really need any tests in
12:21 - this video because we don't really want
12:23 - to test
12:24 - the programming language that we're
12:26 - using so there's no point in testing if
12:28 - the data class works as it should
12:31 - so it's always the question what are you
12:34 - trying to test
12:35 - we could test that we really have these
12:37 - three
12:38 - properties but i'm not convinced that
12:41 - this is really a useful test
12:43 - if you have a different opinion let me
12:45 - know in the comments below but for now
12:47 - we're gonna move on we have our data
12:49 - layer ready
12:49 - so let's move on up the chain until we
12:52 - reach the rest endpoint
12:54 - just to quickly recap in this video you
12:57 - already learned a few essential features
12:59 - of kotlin
13:00 - such as val versus var where val is
13:03 - basically a final variable
13:05 - or property you also learned about class
13:07 - properties
13:08 - which are kind of like fields together
13:11 - with their
13:12 - getter and if they're mutable they're
13:14 - setter
13:15 - and then you learned a bit about primary
13:18 - constructors and secondary constructors
13:21 - where typically you will only need
13:23 - primary constructors
13:25 - and obviously you learned about data
13:27 - classes which give you things like
13:30 - hashcode equals to string for free they
13:32 - also give you a copy
13:34 - method and a few other things so they're
13:36 - super useful
13:37 - especially for dtos data layers
13:41 - and are a really essential feature you
13:43 - would use every day
13:45 - now on top of that you also learned a
13:46 - little bit about top-down versus
13:48 - bottom-up structuring of your code
13:50 - so i hope this was useful to you and
13:53 - i'll see you again in the next one

Cleaned transcript:

in this video let's go ahead and start implementing the first rest endpoint and let's start with the one that gives us the list of all the banks now there are two general ways that we can approach this we can either go top down so starting at the rest end point and then basically working our way down through all the layers until we have all the functionality that we need in order to return the list of banks now on the other hand we can also do it bottom up so here we would first think about the kind of data that we need and then build our way up all the way to the rest api so to the controller level for this first standpoint let's go bottom up because this will first of all allow more selfcontained videos going each step and also it allows us to do better unit testing of each single step so at each layer basically or for each video for each step you can have the unit test for that specific level which is a bit harder to do if you go top down so let's go ahead into our source main kotlin folder and in here let's create a new package and we're going to call this one model so as you might know the term model which comes from the model view controller architecture pattern it simply refers to the data representations of your application and since we're going bottom up now in this video we're just going to create the data layer for application so we're going to create the model and since we're talking about bank objects we need a class that represents our banks so inside this new package let's go ahead and create a new kotlin class or file and i'm simply going to call this one bank now this bank class here will basically be our data transfer object so a data transfer object is called data transfer object because it's the one that goes over the network so for instance if a user requests some data from your rest api you're going to respond with usually some json data or xml data and it's really just this bank class that's being serialized into a json representation and also the same way if someone makes a request and in the request body they provide a json or some json data for you to process now we're going to see this in action later on for now let's go ahead and create this bank class now inside this class we want some kind of data that represents the bank for this let's actually go ahead to the new boston website over here and then under get started let's look at the documentation and here on the bank api let's see what the bank's endpoint looks like in the real network of the digital currency and then we're going to use a simplified representation so here you can see this is what a bank object really looks like in the new boston digital currency for our simple example let's just use a account number a transaction fee and a trust so let's go ahead and represent this in our class now if you do already know some kotlin please bear with me here i want to show how you would traditionally go and create such a class and then i'm going to go and refactor that step by step until we reach really clean cuddling code that also shows you one of the super useful features of the cotton language and just shows you how concise it can be for now let's do it the same way you would basically do it in java so we're going to create these fields in the class so we have an account number which is a string we also said we want a trust this can be a double and then a transaction fee which is actually an int and then we're going to create a constructor down here so in kotlin you just say constructor and the constructor takes an account number of type string the trust of type double and a transaction fee and again if you already know kotlin bear with me here i know we're going to do this a lot simple later on so we have transaction fee and i'm going to reorder this in a second to be more consistent so let's just do it like this for now then it's all consistent now the next thing you would do in languages like java is you would have a getter and setter for each field so let's just do it for the account number for now so this would return a string let me at least write it a bit shorter in kotlin again using this notation over here and you would have a set account number which takes in an account number of course of type string and all it does is is it overwrites the account number now in order to be able to do this i'll actually have to make this a var so if you write val in kotlin that's like a final variable in java so instead i'll have to make this a var which allows me to reassign this variable later on now imagine the same getter and setter for trust and transaction fee and then also we have things like equals and hash code we can generate them and also we want a to string so we're going to generate that as well just like you would do in java all right so we have quite a lot of code even though i already removed the other get to send setters now let's go ahead and refactor this and move it to kotlin style now the first thing we can do actually independent of whether it's kotlin or java is i don't really want to set her i want these to be final so i'm going to pull this back again so you should always strive to have immutable classes where you cannot just overwrite any field at any point so once i create a bank object i want it to always contain the same account number trust and transaction fee and of course this would be the same in any programming language but now for this getter over here cotton actually has a specific syntax for that so below this class property here you can write get and also you can write set to create a setter now get should simply return the backing field so this backing field is the kind of hidden field that really powers this property over here so this is the one that stores the actual account number and you can only access this field in the getter or setter so if you were to add a setter here as well you get a value and typically you would just set the backing field to the value of course that's not possible here because i have a val so it doesn't have a setter it's a final variable and also we have a naming clash here so if i look at why it's showing these red lines you can see platform declaration clash the following declarations have the same jvm signature so you can see that this getter over here it will generate a java bytecode function which is also called getaccountnumber and we already have a getaccount number down here and this is why the two declarations will clash so instead of having this separate getter here in kotlin you would do it like this so so much for getters and status and kotlin now let's actually go ahead and refactor this and just for fun let's actually just use the recommendations from intellij so it's showing some gray squiggly lines here because the getter is redundant because just getting the value of the backing field is just the default implementation so you don't need to do this because by default if you have a val content will already generate the default getter for you the same if you have a var it's also going to generate the default setup for you only if you want to perform some custom logic then you can overwrite the get and set methods now next let's go ahead and see why it's showing the constructor in yellow and let's convert this to a primary constructor so in kotlin most of the time you use primary constructors and this means you define the constructor parameters up here right inside the class header instead of having secondary constructors you can still have more constructors by putting them here but oftentimes you just need one and then you can do it right inside the class header so now you can see it actually already refactored all the fields so if i go back for a second you can see it also moved all the fields so all this code it just moved into this other oops it just moved into a primary constructor all right so let me put this also on separate lines again now there's one thing we should change here i made these private initially because i wanted to show the way it's done in java with the private field and then the public getter but since in kotlin those two are basically both represented by this property we really want this account number trust and transaction fee to be public and by default in kotlin the classes and its properties are public so we don't really need to have the modifier here it's also going to tell you that it's redundant so what this means now if this account number here is public it just means that content exposes those default getters and setters publicly it doesn't mean that the backing field is in any way exposed to the outside so you still have information hiding it's really just the getters and setters that are not explicitly shown here but that still exists for this property all right so far so good so now we're left with a class that has three properties but we still have these equals hash code and to string implementations that are really quite dumb and that you just generate with your ide so what we can do in kotlin instead is we can declare a data class and a data class has quite a few useful and convenient features and some of them include that it automatically creates a standard implementation of equals of hashcode and of tostring so we don't need all of those we can just remove all of them and now we're left with a data class that really just represents what we initially wanted to do we just wanted to have a data transfer object or a data class that has three fields an account number a trust and a transaction fee so with this we have really perfectly expressed what we actually wanted and this is also the way you would do this normally in cotton so i really love this feature i love kotlin and this is just one of the reasons why if you want to learn more about cotton check out the links below for my youtube videos and also courses for now this is all we need now i should mention that in java 14 they introduced a feature called records and in java 14 it's a preview feature i believe but then in java 15 it's just a regular feature and records are basically the same thing so java is also catching up and really improving some of those boilerplate that have been necessary before so yeah but that's basically the end result of this video so just five lines of code i'm hope you're not disappointed because of this rather the opposite because we were able to remove around 40 lines of code and just really reducing it to what's necessary also we don't really need any tests in this video because we don't really want to test the programming language that we're using so there's no point in testing if the data class works as it should so it's always the question what are you trying to test we could test that we really have these three properties but i'm not convinced that this is really a useful test if you have a different opinion let me know in the comments below but for now we're gonna move on we have our data layer ready so let's move on up the chain until we reach the rest endpoint just to quickly recap in this video you already learned a few essential features of kotlin such as val versus var where val is basically a final variable or property you also learned about class properties which are kind of like fields together with their getter and if they're mutable they're setter and then you learned a bit about primary constructors and secondary constructors where typically you will only need primary constructors and obviously you learned about data classes which give you things like hashcode equals to string for free they also give you a copy method and a few other things so they're super useful especially for dtos data layers and are a really essential feature you would use every day now on top of that you also learned a little bit about topdown versus bottomup structuring of your code so i hope this was useful to you and i'll see you again in the next one
