With timestamps:

00:00 - alright guys welcome back and in this
00:01 - video we're going to start working on
00:03 - our views and by the end of this video
00:05 - you guys are going to learn how to make
00:07 - your very first API request and get
00:10 - actual Jason back so it's going to be
00:12 - awesome so go ahead and pop open views
00:14 - that py and just to save you guys some
00:17 - time I actually copied all the imports
00:19 - we're going to need and I'll talk to you
00:20 - guys through in detail exactly whenever
00:25 - we are using these what they do but just
00:27 - real quick I'm you already know what
00:28 - this does right here get to object or
00:31 - returns a 404 if the object doesn't
00:33 - exist so let's say they requested like
00:37 - tuna fish company and it didn't exist on
00:39 - API view is just the way that we can
00:42 - make these normal views return API data
00:46 - this response is so we can send back a
00:49 - specific response status and it kind of
00:52 - works with this so basically before we
00:55 - were just sending back HTML now we need
00:58 - to send back Jason and also whenever you
01:01 - just request the page and it returns
01:02 - that normally that is called a 200
01:05 - response everything went fine
01:07 - um you guys already know what a 404 is
01:09 - that means hey you were you requested
01:11 - something but it doesn't exist anymore
01:13 - so maybe your request is someone's
01:15 - picture from Facebook and they deleted
01:17 - it so that's when you would get 4 or 4
01:19 - and there are other ones too like arm
01:22 - 400 means that the user was supposed to
01:25 - be doing something they shouldn't like
01:26 - it the client the server communicated
01:29 - correctly but they like try to request
01:31 - like the admin page or something so
01:32 - anyways that's what these are going to
01:34 - do and then we of course we just
01:36 - imported stock all this information in
01:39 - serializers all right so what I'm going
01:42 - to do is I am going to set this up as a
01:44 - class based view so in other words we're
01:48 - going to set it up this way because we
01:51 - want to have it where if the user
01:52 - requests these URLs in different kinds
01:55 - of ways then they handle them
01:57 - differently and I'll show you guys what
01:59 - I'm talking about so for this first
02:01 - class I'm just going to name stock list
02:04 - and it's going to inherit from API Bo
02:07 - now what I was talking about I'm going
02:10 - to go ahead and make
02:11 - two methods in here so the first one is
02:14 - whenever they make a get request and the
02:18 - second one is whenever they make a post
02:20 - request so for this example I'm going to
02:25 - have it where whenever they make a get
02:27 - request for stock list it's just going
02:30 - to return all of the stocks that we have
02:33 - a list of all pretty much everything in
02:35 - our database now whenever they make a
02:37 - post request what's going to happen is
02:40 - I'm going to let them create a new stock
02:42 - so again a post is kind of like
02:45 - submitting a form and get is just kind
02:46 - of like reading information so say that
02:49 - this either lists all stocks or create
02:54 - the new one now before I continue I want
02:58 - to mention this would you actually want
03:00 - to set this up this way
03:02 - would you actually want to put your
03:04 - create functionality into a separate
03:07 - class named stock great well you may
03:10 - want to but then how am I going to
03:12 - explain class-based REST API abuse oh
03:15 - and actually above all of these classes
03:18 - I'm just going to write a little demo
03:21 - URL so again whenever they type this URL
03:24 - in our website followed by stocks it's
03:27 - going to get all the stocks and then
03:29 - later on in the next video I'm going to
03:31 - show you guys how to just get
03:32 - information about one stock using this
03:34 - URL or like Amazon or something like
03:37 - that but for right now I just keep
03:39 - things simple all right let me give
03:42 - myself a little bit more space to scroll
03:44 - around all right so for this get method
03:48 - again this is the one that's going to
03:50 - return all of the stock information so
03:54 - we need to pass in request and instead
03:57 - of pass which pretty much means do
03:58 - nothing the first thing we're going to
04:00 - do is we're pretty much just going to go
04:02 - in our database and get all of the
04:04 - stocks so I'll just say stock objects
04:08 - all simple as that nothing new so once
04:13 - we have all of our stock objects all of
04:16 - these right here we need to go ahead in
04:18 - serialize them in other words convert it
04:20 - to Jason
04:23 - so I'm just going to say serializer
04:25 - equals stock serializer and this takes
04:29 - two parameters the first one is what
04:31 - objects are you trying to serialize well
04:33 - all those stocks that we just got and
04:36 - the second one is we need to specify
04:38 - that there are many of them so it
04:40 - doesn't just try to return one JSON
04:42 - object and after this of course remember
04:46 - every single View function what it needs
04:49 - to do is it needs to return an HTTP
04:52 - response so this is going to have JSON
04:55 - in it but still it's HTTP responses
04:57 - being sent over the Internet so we just
04:59 - return a response and what is the
05:03 - information in our response well just at
05:05 - serializer data in other words just the
05:08 - JSON data simple enough and ladies and
05:11 - gentlemen that is it this URL is almost
05:16 - working the one other thing that we need
05:17 - to do is we just need to specify in URLs
05:21 - right here and we actually need to
05:23 - import some other stuff I forgot just
05:26 - make sure that these URLs are compatible
05:28 - for basically an API so a rest framework
05:34 - where you add URL patterns imports
05:38 - format suffix patterns and also from
05:42 - that view we just made we actually need
05:44 - to import it so from companies import
05:48 - views
05:51 - all right so URL patterns format suffix
05:58 - pattern 0 patterns and I'll explain
06:01 - later on it once we create a bunch more
06:03 - like for updating information and
06:06 - deleting it then I'll explain that but
06:08 - for right now I just kind of want to get
06:09 - things started
06:09 - so we'll keep the admin since that's the
06:12 - proper URL for that still but now we
06:16 - need to add another one for stocks so
06:19 - again you remember the structure we
06:21 - defined right here so when they go to
06:25 - admin it's going to take them to the
06:26 - admin panel whenever they go to stocks
06:28 - it's just going to return a list of
06:30 - stocks so instead of this we can
06:34 - actually keep things real simple and say
06:35 - views stock list as view so again what
06:43 - it's going to do is it's going to say
06:44 - hey go ahead and we get rid of this go
06:47 - in your views to the class stock list
06:50 - and return these as a view simple enough
06:57 - so now check this out set up our admin
07:00 - panel we can go to stocks and boom look
07:05 - at that and again you can actually just
07:08 - do this over Python or you can do it
07:12 - with your iPhone or Android basically
07:14 - whenever you throw in this URL you can
07:17 - connect to your website's database and
07:20 - get information from it on any device in
07:22 - the world so I'm going to do with the
07:24 - browser right now but actually check
07:25 - this out so this is a program that I
07:28 - have and it's called postman and
07:29 - basically what you can do is you can
07:31 - just send different kinds of requests
07:34 - like post request put patch delete and
07:36 - I'm just going to make a simple get
07:38 - request from here send it and check it
07:41 - out so this would you know kind of more
07:43 - clearly resemble using this information
07:46 - in a program like a piece of software or
07:49 - something like that so we now can
07:51 - connect to our database get the data and
07:54 - then we can either analyze it or do
07:56 - whatever the heck we want with it so
07:57 - that is the basics of how to make a
07:59 - simple get request and in the next
08:02 - videos I'll show you guys how to add
08:04 - new stocks using the simple request and
08:08 - also how you can just retrieve one stock
08:10 - how you can edit stocks that are already
08:12 - in there how you can delete them how to
08:14 - have admin permissions so you just don't
08:17 - have everyone deleting them a bunch of
08:19 - crap it's going to be awesome
08:20 - I'm excited I'll see you next time

Cleaned transcript:

alright guys welcome back and in this video we're going to start working on our views and by the end of this video you guys are going to learn how to make your very first API request and get actual Jason back so it's going to be awesome so go ahead and pop open views that py and just to save you guys some time I actually copied all the imports we're going to need and I'll talk to you guys through in detail exactly whenever we are using these what they do but just real quick I'm you already know what this does right here get to object or returns a 404 if the object doesn't exist so let's say they requested like tuna fish company and it didn't exist on API view is just the way that we can make these normal views return API data this response is so we can send back a specific response status and it kind of works with this so basically before we were just sending back HTML now we need to send back Jason and also whenever you just request the page and it returns that normally that is called a 200 response everything went fine um you guys already know what a 404 is that means hey you were you requested something but it doesn't exist anymore so maybe your request is someone's picture from Facebook and they deleted it so that's when you would get 4 or 4 and there are other ones too like arm 400 means that the user was supposed to be doing something they shouldn't like it the client the server communicated correctly but they like try to request like the admin page or something so anyways that's what these are going to do and then we of course we just imported stock all this information in serializers all right so what I'm going to do is I am going to set this up as a class based view so in other words we're going to set it up this way because we want to have it where if the user requests these URLs in different kinds of ways then they handle them differently and I'll show you guys what I'm talking about so for this first class I'm just going to name stock list and it's going to inherit from API Bo now what I was talking about I'm going to go ahead and make two methods in here so the first one is whenever they make a get request and the second one is whenever they make a post request so for this example I'm going to have it where whenever they make a get request for stock list it's just going to return all of the stocks that we have a list of all pretty much everything in our database now whenever they make a post request what's going to happen is I'm going to let them create a new stock so again a post is kind of like submitting a form and get is just kind of like reading information so say that this either lists all stocks or create the new one now before I continue I want to mention this would you actually want to set this up this way would you actually want to put your create functionality into a separate class named stock great well you may want to but then how am I going to explain classbased REST API abuse oh and actually above all of these classes I'm just going to write a little demo URL so again whenever they type this URL in our website followed by stocks it's going to get all the stocks and then later on in the next video I'm going to show you guys how to just get information about one stock using this URL or like Amazon or something like that but for right now I just keep things simple all right let me give myself a little bit more space to scroll around all right so for this get method again this is the one that's going to return all of the stock information so we need to pass in request and instead of pass which pretty much means do nothing the first thing we're going to do is we're pretty much just going to go in our database and get all of the stocks so I'll just say stock objects all simple as that nothing new so once we have all of our stock objects all of these right here we need to go ahead in serialize them in other words convert it to Jason so I'm just going to say serializer equals stock serializer and this takes two parameters the first one is what objects are you trying to serialize well all those stocks that we just got and the second one is we need to specify that there are many of them so it doesn't just try to return one JSON object and after this of course remember every single View function what it needs to do is it needs to return an HTTP response so this is going to have JSON in it but still it's HTTP responses being sent over the Internet so we just return a response and what is the information in our response well just at serializer data in other words just the JSON data simple enough and ladies and gentlemen that is it this URL is almost working the one other thing that we need to do is we just need to specify in URLs right here and we actually need to import some other stuff I forgot just make sure that these URLs are compatible for basically an API so a rest framework where you add URL patterns imports format suffix patterns and also from that view we just made we actually need to import it so from companies import views all right so URL patterns format suffix pattern 0 patterns and I'll explain later on it once we create a bunch more like for updating information and deleting it then I'll explain that but for right now I just kind of want to get things started so we'll keep the admin since that's the proper URL for that still but now we need to add another one for stocks so again you remember the structure we defined right here so when they go to admin it's going to take them to the admin panel whenever they go to stocks it's just going to return a list of stocks so instead of this we can actually keep things real simple and say views stock list as view so again what it's going to do is it's going to say hey go ahead and we get rid of this go in your views to the class stock list and return these as a view simple enough so now check this out set up our admin panel we can go to stocks and boom look at that and again you can actually just do this over Python or you can do it with your iPhone or Android basically whenever you throw in this URL you can connect to your website's database and get information from it on any device in the world so I'm going to do with the browser right now but actually check this out so this is a program that I have and it's called postman and basically what you can do is you can just send different kinds of requests like post request put patch delete and I'm just going to make a simple get request from here send it and check it out so this would you know kind of more clearly resemble using this information in a program like a piece of software or something like that so we now can connect to our database get the data and then we can either analyze it or do whatever the heck we want with it so that is the basics of how to make a simple get request and in the next videos I'll show you guys how to add new stocks using the simple request and also how you can just retrieve one stock how you can edit stocks that are already in there how you can delete them how to have admin permissions so you just don't have everyone deleting them a bunch of crap it's going to be awesome I'm excited I'll see you next time
