With timestamps:

00:00 - already all welcome back to another
00:02 - video and in this one what we're going
00:04 - to be doing is working on the product
00:06 - Details page because in the last video
00:09 - we built out the product catalog but
00:12 - whenever you click one of these products
00:13 - all you are taking to is a screen with
00:17 - the ID in the top left
00:19 - and well it's uh not the greatest user
00:23 - experience I must admit eventually we're
00:25 - going to be building out something like
00:26 - this where we have the picture on the
00:28 - left some details on the right and you
00:30 - can add it and remove it from your cart
00:33 - so there you go let's go ahead and get
00:35 - started
00:37 - now what actually start by popping over
00:41 - in tnvos
00:43 - and seeing what we got
00:45 - so well first of all the product Details
00:48 - page right now is just this where we
00:50 - have that one div with the ID being
00:52 - printed out in it and this is tnbos for
00:56 - that full version so another thing that
00:58 - I want to mention is that
01:00 - before I even get started whenever we
01:03 - were planning out our little road map I
01:05 - have the buyer product detail page
01:07 - listed and then I have some address
01:10 - logic and then the add to cart button so
01:14 - I'm not sure in this video If what we're
01:17 - going to do is we're going to build out
01:18 - all this logic or just the UI and not
01:22 - have any of this add to cart logic but
01:25 - we will see how far we get because
01:28 - according to the deadline that we gave
01:30 - ourselves
01:32 - um six more days to tackle the rest of
01:34 - these seven features
01:37 - so on that note enough talking let's get
01:39 - to working all right
01:41 - so in tnbos right here
01:45 - another thing that I'm thinking
01:48 - is that I don't know if we want this
01:50 - back button now the reason that I had it
01:52 - in tnbos is because this is an electron
01:55 - app and of course it doesn't have
01:58 - um you know it's just a desktop app it
02:00 - doesn't have like a browser bar or back
02:02 - button or whatever however since this is
02:05 - a web application and all web
02:07 - applications nowadays uh whether you're
02:10 - on a desktop or a laptop or a tablet or
02:13 - mobile phone whatever they always have a
02:16 - back button I'm thinking that we may not
02:18 - need this one right here
02:22 - so yeah let's do that let's keep the
02:24 - design minimal
02:26 - and we will go without a back button and
02:29 - then if it just feels weird for whatever
02:31 - reason we can add it back in but let's
02:33 - do that
02:36 - so on that note we have our main
02:39 - container
02:41 - we have the back button there we're not
02:42 - going to have then we have the main
02:43 - content
02:45 - and I believe the main content is not
02:48 - going to be needed either because this
02:51 - was just to
02:53 - yeah
02:55 - so the main content is basically our
02:57 - parent item and we want a grid display
03:01 - or a flux display with a gap of 24
03:04 - between
03:06 - and then we can make a responsive later
03:08 - on if needed
03:09 - so let's do that
03:12 - all right so for our page we are going
03:14 - to display Flex since we're gonna have
03:16 - the image on the left and the details on
03:18 - the right and we'll just have a gap of
03:20 - 24 and that'll be our spacing in between
03:23 - those two elements
03:25 - so now
03:27 - what's next render left and render right
03:29 - so render left is easy
03:32 - the left section just has image in it
03:35 - which is
03:38 - products image so left
03:43 - and then the image
03:46 - left and then the image okay let's steal
03:48 - these two
03:54 - all right so left image and then I can
03:57 - steal this render left
04:01 - got a fly buzzing around my head
04:05 - in case I make any weird noises suddenly
04:08 - and okay
04:10 - so for this product image actually can I
04:12 - get the URL from here where is this
04:14 - being hosted at
04:21 - all right So eventually this is going to
04:23 - be coming from you know the actual
04:26 - Source in Redux or whatnot but
04:30 - for right now this is good
04:33 - oh my God this fly is uh pretty annoying
04:40 - I wonder if I should open my window
04:41 - that's a gamble though I might be
04:43 - letting more flies in
04:45 - all right and let me get my scaffolding
04:47 - for this taken care of as well
04:51 - so I have my left left section and I
04:53 - want my right section in my right
04:55 - section
04:56 - is just all that product info so Flex
04:59 - Flex Auto take up the remaining width
05:01 - Flex Direction column display that on
05:03 - top of each other let's do this
05:07 - all right so I'm going to steal that
05:09 - right styling as well
05:12 - and I'll go back to 10 BLS and say
05:14 - render right
05:19 - price container price
05:22 - all right let's keep it nice and lean
05:24 - for now then kind of build it out
05:27 - all right so for render rights all I'm
05:30 - going to do is put
05:37 - render left
05:39 - render right render everything all night
05:43 - I'm gonna render I'm gonna render
05:47 - okay a little warning but I'll get okay
05:50 - so now we're working with something
05:53 - now first and foremost I want to get my
05:55 - padding situated
05:58 - so what is the padding around here
06:02 - the padding around here is 24 pixels top
06:06 - and bottom 32 left and right
06:09 - so let's steal you
06:11 - and
06:13 - let's see how you are looking
06:18 - so you would be in my main container
06:21 - and that looks not too shabby
06:26 - click here click here
06:29 - all right we are looking all right
06:32 - all right so now let's go ahead and
06:35 - build out the rest of those right
06:36 - elements
06:37 - and oh my God this oh I got it I mean I
06:41 - swatted it like I didn't kill it but you
06:43 - know I taught it a lesson like it knows
06:45 - not to fly over here anytime soon
06:48 - they're pretty short memories though so
06:50 - we'll see what happens with it
06:52 - all right
06:54 - um so we have the name first
06:57 - so let's take care of these three
06:59 - elements we got the name the description
07:01 - and the user label which we're calling
07:03 - that
07:04 - so name and description first of all
07:08 - what's the name
07:14 - we got the description
07:20 - is going to come from my color system
07:24 - which I can import from here
07:28 - and we don't have the exact same color
07:31 - system so instead we're going secondary
07:33 - color for the description
07:36 - and now let me just
07:39 - do these and all right
07:42 - so for the product name I'll say like
07:44 - wooden spoon
07:48 - and then for the description I don't
07:50 - know like juicy
07:55 - spoon actually juicy is probably the
07:57 - last
07:58 - descriptive word you would ever want to
08:00 - see when buying a wooden spoon the last
08:02 - thing you want it to be is Juicy but you
08:05 - know
08:07 - for this it's all right
08:11 - it's weird just using it as sample text
08:13 - okay wooden spoon juicy one spoon good
08:15 - enough good enough okay next let's go
08:17 - the account label
08:23 - all of those are used okay so the
08:26 - account label which we are calling the
08:30 - user label
08:33 - and when did we
08:37 - wondering where it was
08:40 - so we can just steal it
08:43 - we do call it user label right
08:46 - um account
08:49 - yeah user label
08:52 - why didn't I find you die typing around
08:57 - okay user label
08:59 - user label
09:06 - okay and do we need to style you more
09:10 - yes so let's do this
09:15 - all right it's going to import user
09:17 - label
09:19 - label user label
09:21 - and then I'm going to take this to
09:29 - so I want to style a component even more
09:31 - and what I want to do to it I want to
09:33 - add a margin top of 16 margin top of 16
09:36 - beautiful
09:39 - so now that user label is going right
09:41 - under the description right yes
09:44 - yes yes yes yes
09:46 - okay
09:49 - and we're going to say something like
09:51 - seller in the name of them is going to
09:55 - be their you name I'll just say uh Bucky
09:58 - for right now
10:02 - and let's see what we got
10:04 - nice very nice very nice
10:07 - just make sure you don't got any extra
10:09 - padding margin sweet okay and let's see
10:14 - what else
10:17 - so after this we have this section right
10:20 - here
10:25 - let me close the rest of these
10:27 - all right so that is the price container
10:29 - which is probably just going to be like
10:31 - a border panel
10:33 - so price container is just kind of the
10:35 - flex align items with a border
10:40 - that's why content space between margin
10:42 - top padding okay so all this we can take
10:48 - Elemental p q r
10:51 - okay so for the colors where's my border
10:55 - color colors dot border
11:00 - all right so I got a price container
11:05 - you're looking good
11:06 - now the price
11:09 - is what I need to put in it and do I
11:13 - have that price element yes
11:15 - yes yes yes we're looking good okay so I
11:19 - have a price and it it's gonna take a
11:22 - product
11:26 - okay
11:28 - but I don't I can't pass in a product
11:30 - yet
11:34 - unless I
11:37 - get the product first
11:40 - it's gonna be easier this way
11:42 - so I thought it would be easier just to
11:44 - bet out the UI first but since we're
11:46 - going to be needing to pass this product
11:47 - around and we're already plucking off
11:49 - the details right here
11:51 - then let's just do that okay
11:55 - so I am going to say
12:00 - first let me get my selector product
12:02 - selector
12:03 - so selectors
12:07 - products
12:19 - accuracy and then products products
12:23 - so from these products
12:34 - all right so I want a minimalized
12:36 - version of this
12:39 - also I'm gonna run into a little issue
12:42 - thinking it may be undefined
12:46 - which actually it may be so that's
12:47 - interesting
12:50 - okay
12:58 - you can use memo
13:01 - all right so here what I'm going to do
13:03 - is pretty much use the ID that we have
13:06 - right here which is going to be a
13:07 - product ID to select the product from my
13:10 - Redux store which should be easy because
13:12 - they're all keyed by ID so use memo
13:25 - and I am going to say that this is going
13:29 - to return maybe I should type it out in
13:31 - a bit
13:35 - foreign
13:40 - or maybe it can just return undefined
13:43 - this is probably okay
13:46 - return products with that ID
13:50 - yeah in this ID
13:55 - could possibly be undefined
13:59 - so I'll say if no ID oops
14:05 - come on
14:09 - if no ID return no that's gonna
14:15 - okay
14:16 - so if no ID return null or if it's an ID
14:19 - so hopefully it's just a regular number
14:22 - and the product is already in the store
14:24 - and it's just going to go ahead and
14:25 - return that oh my this fly okay
14:30 - now if you don't have a product then
14:32 - just go ahead and return null as well
14:38 - and then let me actually type this out
14:44 - so I want this memorized function to
14:46 - return product or no
14:49 - do you do that yes it's looking like it
14:54 - so now what I can do
14:56 - is let's actually find out
15:13 - all right so when rendering left and
15:15 - right if you don't have any product
15:17 - return null
15:20 - and in the case you are going to have a
15:23 - product at this point
15:25 - I'm just gonna do product dot image
15:29 - and for product name and description
15:33 - a little bit of the same
15:35 - so name here
15:37 - description here
15:42 - and then this is the product seller's
15:45 - username you
15:50 - all right let's see if anything broke so
15:52 - far
15:53 - great
15:54 - wooden spoon before one spoon by Bucky
15:58 - bacon bacon nice and juicy by Amy
16:01 - looking good
16:04 - all right fascinating the book about
16:05 - mushrooms yes it is okay
16:08 - so now what we can do is we can render
16:11 - that price logic and by the way I just
16:13 - want to test this out where I do have a
16:15 - valid ID in just not any of the products
16:19 - in the store and I just get an empty
16:21 - state which I can update to give a
16:24 - little bit more clear indication what's
16:26 - going on but for right now it's good
16:28 - so these are my products in the store
16:32 - let's go with uh wind spoon right now
16:34 - since
16:35 - this is kind of the uh
16:37 - pin code this tutorial to sell this
16:39 - wooden spoon to one of you out there
16:42 - so next up let's go ahead and tackle the
16:44 - price logic okay
16:47 - we'll get rid of you get rid of you
16:50 - and now get rid of you
16:54 - okay
16:55 - so in the price container which we do
16:58 - not have rendered yet
17:01 - but we do have this
17:03 - we are going to be rendering the price
17:15 - okay
17:17 - when am I using you
17:21 - did I not even
17:24 - use this price component anywhere yet
17:26 - components
17:27 - uh price index come on we built it
17:35 - oh I was probably using it in a yeah
17:41 - all right so
17:46 - import price from my component Library
17:50 - and then in my price container
17:57 - it's render price and the product is the
17:59 - product
18:01 - that we have we have it at this point
18:04 - all right
18:07 - all right 2600 for the spoon 2200 Foot
18:11 - Book bacon looking good
18:14 - okay next we just have to render this
18:16 - button so this button is either going to
18:18 - say add to cart or remove from cart
18:21 - depending on if it's in your car or not
18:24 - so for that logic what we can do
18:28 - so let's first take a look at this
18:30 - render card button
18:31 - all right so there's Boolean that we
18:34 - calculate to say if it's in the cart or
18:36 - not
18:37 - and we are not going to be able to have
18:39 - the actual Logic for this yet but we can
18:41 - just make a temporary variable
18:44 - now if it's in then this is the button
18:47 - you want to render if not that's the
18:49 - button
18:56 - all right
18:59 - it's easy enough
19:01 - okay
19:02 - so let's first import our button
19:12 - so import button
19:16 - nope don't need it here we go
19:23 - all right so since we're gonna need a
19:25 - button gonna need to import a button
19:31 - we are going to
19:34 - what did we call it here render cart
19:36 - button
19:44 - all right so for render carbon we have
19:47 - this constant is in cart
19:52 - and for right now we're just going to
19:54 - set it equal to
19:55 - a Boolean
19:58 - all right so this is going to be
20:06 - um eventually we need to update this to
20:08 - have actual logic to determine if it's
20:10 - in the cutter cart or not but for now we
20:14 - can just use it as part of this render
20:15 - carp on to decide which one to render so
20:18 - we can test things out
20:20 - so in our price container in that little
20:22 - panel we're going to have price on the
20:24 - left and then the cart button on the
20:26 - right now if it is in the cart then it's
20:28 - going to render a button to remove it
20:30 - and if it's not in the cart you can add
20:32 - it so let's build out these handlers as
20:35 - well
20:36 - so handle remove from cart click
20:46 - okay so let's just go ahead and
20:54 - make this nice and easy
21:00 - so
21:02 - let's type
21:06 - so we're going to be displaying a toast
21:07 - message so get those utils
21:12 - and then enum
21:20 - all right so for now
21:28 - mm-hmm
21:31 - let me just make sure something does
21:33 - type
21:37 - okay okay okay so for the render card
21:40 - button uh you know add to cart click
21:52 - and I'll add to the card click
21:55 - and that is product added to cart
22:03 - and these don't need to be template
22:05 - strings
22:18 - oh wait so for remove is product removed
22:22 - from cart
22:24 - okay so this should be working quote
22:27 - unquote
22:30 - just
22:34 - in a really dumb way so let's see what's
22:37 - going on okay
22:38 - so I have it hard coded in where the
22:42 - product is in my cart
22:45 - now because of that I have this removed
22:47 - from cart button and when I click on it
22:49 - it should just say product removed well
22:52 - two card that's embarrassing product
22:55 - removed from cart
23:00 - now if I say it's not in the cart
23:06 - then whenever I go here it should say
23:09 - add to cart and then you click it it
23:11 - adds the cart and it says product added
23:13 - to cart all right so that is the
23:16 - functionality that we want so far at
23:19 - least
23:20 - um of course a lot to do from here first
23:22 - of all this cart number and basically
23:25 - other cart logic is just a
23:27 - dummy logic right now it's not actual
23:30 - hitting not actually hitting our back
23:32 - end or anything
23:34 - so
23:36 - let's
23:37 - do that next actually let's check our
23:42 - little blueprint okay buyer product
23:45 - detail
23:47 - and then we have the buyer add to cart
23:49 - button
23:50 - separate
23:53 - so maybe we will do this
23:56 - the buyer detail Pages well basically
23:58 - styled there's not much to it
24:02 - got a little responsive Behavior looking
24:04 - good for right now
24:06 - of course some updates later on but uh
24:08 - it's looking all right so the buyer
24:11 - product detail page I almost want to say
24:13 - this is done right now
24:16 - um my dresses created a dress and then
24:18 - what we can do once we have that is go
24:21 - and work on the Ed cart logic
24:25 - I'm also thinking if we just want to do
24:26 - this now
24:28 - so let's go ahead and take a look at our
24:29 - back end for this
24:31 - so we have
24:34 - so what we're basically going to be
24:36 - doing is creating cart products
24:45 - okay so a cart product is just a product
24:48 - in your cart
24:50 - and then when you click this button
24:53 - you're basically just adding and
24:55 - deleting cart products
24:58 - and I believe we don't even have
25:03 - yeah
25:05 - yeah there's not even an
25:08 - okay so on the back end we don't have
25:10 - any update functionality
25:15 - we just have crate
25:21 - however we may need to add it later on
25:23 - because
25:25 - though with this
25:27 - right here when we can or let me show
25:30 - you right here basically we can add or
25:33 - delete the item from our cart right here
25:36 - um eventually we're going to need to
25:38 - handle quantities meaning that whenever
25:41 - you go to checkout
25:42 - if like you can say I want one of these
25:45 - which would probably be the default or
25:46 - you can order 10 of them if there are 10
25:48 - available but for right now we're just
25:51 - going to keep it nice and simple
25:53 - and
25:56 - keep this add-in removed
25:59 - just wondering if I
26:01 - I'm gonna tackle this
26:06 - a
26:10 - so yeah we won't even pass the quantity
26:12 - in or maybe we'll just do one by default
26:15 - although on the back end we're already
26:16 - checking for it
26:21 - you know what we'll do we'll just do
26:24 - everything with the quantity of one on
26:25 - the UI for now and then once that is
26:29 - working we'll go back and kind of build
26:33 - out the quantity logic
26:41 - so I'm also thinking now how we're going
26:44 - to structure this on the front end
26:51 - so maybe we just build this into Redux
27:03 - so yeah let's follow our roadmap
27:05 - actually and what I'm going to do is I'm
27:07 - going to uh
27:10 - kind of start on my addresses
27:17 - um
27:18 - actually let's just go ahead and work on
27:20 - this cart logic and then we have
27:22 - something going on okay
27:24 - so this cart product is what we're going
27:29 - to need to store
27:31 - in Redux
27:39 - so let's do this
27:43 - let's get our old friend Postman out so
27:45 - we can see the shape of everything
27:51 - all right so first I'm going to log in
27:54 - and then what I'm gonna do
27:59 - is add a cart product to my cart
28:07 - so first let's do this
28:09 - uh let's pop open Django admin all right
28:12 - so no products in anyone's carts
28:15 - and then what I'm gonna do
28:18 - with my authentication token
28:27 - I'm gonna use this
28:30 - to add a cart products in the endpoint
28:33 - for cart products
28:37 - was indeed cart products
28:41 - let me just send it with the error and
28:43 - see what we get okay
28:45 - so for the quantity we're gonna do one
28:49 - and for the products what we can do
28:53 - is
28:55 - this
28:57 - so what product would I want to add to
28:58 - my cart well I am Bucky in this
29:01 - situation so uh this bacon I want to add
29:04 - and that is product 11.
29:09 - unsupported media type and request and
29:12 - that is
29:13 - we can just go
29:15 - raw actually
29:20 - all right so for this we can just do a
29:23 - quantity of one in product of 11.
29:28 - okay
29:29 - and this is the response that I get back
29:33 - so basically that serialized product
29:37 - which we need
29:43 - in this information you're the buyer the
29:47 - quantity
29:48 - all the seller stuff is nested beautiful
29:50 - beautiful
29:58 - so now take this move it over to Chai
30:00 - GPT and say okay
30:09 - create a typescript interface for that
30:11 - and then while that's doing that thing
30:14 - let's go ahead and
30:18 - yeah it's going to be a while before we
30:20 - get back to here so okay
30:22 - so under types
30:27 - let me just look at products right now
30:37 - so product is gonna have
30:40 - activation status
30:42 - ID seller
30:48 - and that's a user reads serializer yeah
30:51 - this is what it's going to come back as
30:54 - okay
30:57 - so on this note what I'm going to do
31:00 - first is start typing out my cart
31:01 - products since we're essentially going
31:03 - to be storing these in Redux
31:06 - so
31:07 - let's just go ahead and yeah get started
31:10 - now the name and Convention for these
31:12 - files is cart
31:16 - ER products
31:18 - all right
31:21 - so a cart product
31:33 - and then from the product
31:38 - all right
31:40 - holy moly sweet ravioli okay so a cart
31:44 - product is going to extend created and
31:47 - modified
31:49 - and then it's also going to have an ID
31:54 - where is Dick coming from
32:08 - all right so let's hop over to chat GPT
32:12 - again
32:17 - hmm what's going on here uh
32:22 - order what are you talking about order
32:27 - what
32:29 - uh okay I think I'm not gonna take Chad
32:32 - should be these advice on this one
32:34 - all right so anyways for a cart product
32:37 - we have
32:38 - it basically inherits from created
32:40 - modify
32:41 - which we did
32:43 - and it also has an ID which we gave it
32:47 - and then a quantity
32:50 - and buyer or also number
32:54 - so
33:02 - quantity and buyer are also a number
33:12 - and that's going to be my structure car
33:14 - products stored by the and then last but
33:16 - not least
33:17 - we have a product
33:22 - and this is just going to be a product
33:32 - all right so basically a car product has
33:36 - a created modified date a buyer ID
33:40 - product quantity so six different ones
33:43 - and that's right one two three four five
33:47 - six
33:48 - these are dates dates product serialized
33:51 - good to go good to go okay and now uh
33:56 - this is a car product and then we're
33:58 - gonna store it in Redux keying
34:00 - everything by this ID
34:03 - so now you just need to kind of patch
34:06 - everything together
34:10 - all right so car products after blocks
34:19 - car product car products
34:22 - and that would be cart product
34:27 - car products
34:29 - and let's see what design pattern
34:37 - okay
34:42 - so in our store we're going to create a
34:43 - new slice here called card products
34:46 - and before we get to this we're going to
34:48 - need to add a new constant for cart
34:51 - products
34:58 - card products
35:05 - carb products car products
35:08 - okay
35:10 - now in our store where are we going to
35:14 - take this from maybe wallets
35:20 - all right so
35:24 - what are we going to do to it actually
35:27 - maybe course yeah
35:30 - because the functionality that we're
35:32 - going to have is to be able to create a
35:35 - cart product
35:36 - we're gonna fetch them in that case we
35:39 - are gonna set multiple ones at once and
35:41 - also unset when we delete a car product
35:45 - so basically I can just steal this
35:48 - and
35:53 - then update it accordingly
35:56 - okay
35:58 - so for this cart product slice instead
36:01 - of cores it's going to be car product
36:03 - instead of core it's going to be cart
36:06 - product
36:27 - all right let's see what we're working
36:29 - with here so we are going to be creating
36:32 - cart product slice
36:33 - and the constant this is going to be
36:36 - keyed under on the back end it's just
36:38 - cart products
36:40 - cart products
36:46 - and yeah this constant is also um
36:48 - whenever a Redux toolkit uh like self
36:52 - generates these action names then that's
36:54 - when this constants use couple different
36:56 - things kind of internally
36:58 - um initial state is just empty
37:01 - and then when we create the slice it's
37:04 - going to have whatever initial State we
37:05 - give it which is empty dicks empty dicks
37:08 - so nothing
37:09 - car product we're gonna set a cart
37:11 - product by passing in a cart product
37:14 - object
37:15 - and then it's just gonna key it by its
37:18 - ID
37:19 - when you saw set multiple cart products
37:21 - at lunch
37:23 - for example whenever you are fetching
37:25 - this page
37:26 - you're going to get all your cart
37:28 - products send them all at once
37:30 - then you pass in a list of cart products
37:32 - from the back end and that just
37:35 - iterates through them reduces them Keys
37:38 - them all by ID
37:39 - and then when you're unsetting them you
37:42 - just pass in the ID and it'll delete it
37:44 - and that's good
37:46 - car product actions okay
37:49 - so now we just need to go ahead and
37:55 - save this
37:57 - register with our main store
37:59 - so the cart products
38:03 - are going to be stored under the key
38:04 - cart products and for that the value is
38:08 - the cart product reducer that we just
38:11 - created
38:13 - okay looking good now
38:16 - after here we're going to go ahead and
38:19 - make a selector function just so we can
38:21 - pull that data from our store
38:26 - for this
38:27 - we will say
38:30 - when we call the function get cart
38:33 - products then we want you to give us the
38:36 - data in state car products
38:38 - that's our selector function
38:42 - and now if all went well
38:45 - we should have
38:47 - cart products in here beautiful all
38:51 - right so now the next thing we need to
38:53 - do is we need to kind of write our API
38:55 - and dispatcher logic so whenever we
38:58 - click this what it's going to do is it's
39:00 - gonna basically make the equivalent of
39:02 - this request where you're creating a
39:04 - cart product
39:05 - and we'll just set the default quantity
39:07 - to one for now
39:11 - yeah and then we're also after this data
39:15 - comes back from the back end we got to
39:16 - dispatch it to our store so our front
39:18 - end is synced up with our back end
39:21 - okay
39:22 - so
39:24 - that's going to be quite the task not
39:26 - really but let me sip on some coffee
39:28 - first
39:35 - for anyone uh out there are you coffee
39:38 - drinkers or energy drink drinkers or
39:40 - just caffeine free
39:42 - uh yeah let me know
39:45 - I want to try some new drinks
39:47 - where were we come on Bucky let's not
39:49 - get distracted here this caffeine mumbo
39:51 - jumbo
39:53 - all right so let's first go to what we
39:57 - can just boot on our API
40:00 - so we are going to be building our cart
40:03 - products
40:07 - a new cart products types your file and
40:10 - it's pretty much going to be the same as
40:12 - the course right
40:13 - yeah not even
40:16 - we can definitely use this
40:21 - actually not quite because
40:24 - Coors
40:26 - yeah this one's gonna be better
40:29 - um because cores uses form data because
40:34 - um well I can show you right now
40:37 - so the reason that cores use form data
40:39 - is because they have an image right here
40:41 - and whenever you're working with image
40:42 - you need form data
40:44 - however what we are doing is we are not
40:48 - using any image we're just adding and
40:51 - removing products from our cart
40:53 - so that is why I don't want to steal it
40:54 - from Court instead I want to steal this
40:56 - logic from wallet
40:59 - but that has some tricky stuff too
41:04 - and also this is interesting
41:11 - so I typed out this request data
41:23 - okay
41:25 - this is interesting
41:27 - kind of like it
41:33 - great wallet response
41:35 - or request okay let's do this so
41:44 - I am going to type out
41:48 - the request shape as well
41:54 - all right great
41:57 - carp product
42:00 - all right so the request data
42:05 - for create cart product request
42:10 - what is it
42:12 - so it's going to be a quantity
42:15 - it's going to be a number
42:18 - and it's going to be a product ID which
42:20 - is also going to be a number
42:25 - and then that is looking good now we
42:28 - just need to import that in my main
42:31 - types
42:35 - machine let me separate my API endpoints
42:38 - like this
42:41 - yeah that looks a little bit easier to
42:43 - read okay
42:44 - readability readability is key
42:52 - car products and I'll say cart
42:55 - product request
43:01 - all right you should have everything
43:03 - typed now
43:06 - now let me maybe it's easier if I just
43:09 - do this
43:12 - all right
43:20 - so wallets wallets where are you at
43:25 - let me steal this too
43:28 - all right so first of all what I want to
43:30 - do is I need to replace
43:34 - this base endpoint with that
43:39 - request okay
43:41 - so create cart product
43:57 - all right so
44:02 - all right so for this I am using crate
44:05 - car product
44:07 - and the data that I'm going to be
44:08 - passing in
44:11 - is this data right here the create cart
44:15 - product request which is a product ID
44:17 - and a quantity
44:18 - and then I'm going to be getting back a
44:20 - car product object
44:22 - and I am just making a post request
44:25 - getting back a car product
44:28 - with the data that I passed in in my
44:30 - authorization headers are my regular
44:33 - ones without the form data so that's
44:35 - good and with the response data take
44:38 - care of that later on
44:41 - but now I am
44:45 - oh you can't delete
44:49 - actually we can borrow this from course
44:51 - so to delete cores
44:54 - and get cores
44:57 - yeah
44:59 - and we won't be doing any updating for
45:01 - now so we'll build that later don't want
45:04 - any dead code
45:05 - okay
45:07 - so this is my crates and then instead of
45:09 - core I'm just gonna do car product
45:12 - and okay let me see what I'm working
45:14 - with here
45:24 - all right so create card product is how
45:26 - we want it now when you delete a car
45:28 - product all you need to do is you need
45:30 - to give the endpoint an ID and it's not
45:33 - going to return anything
45:36 - but there's no data to return after you
45:39 - deleted the object
45:41 - and then you're just going to delete it
45:43 - with our headers to know
45:45 - that we're authorized that's good
45:48 - now for getting cart products
45:51 - you're just going to hit the endpoint
45:52 - it's going to return a list of car
45:54 - products
45:56 - return a list of card products and yeah
45:59 - should be good
46:01 - all right so those are API functions now
46:06 - need to make our dispatchers so this is
46:08 - pretty much our connection to our API
46:10 - but with our dispatchers this is the
46:12 - part that uses these to actually make
46:14 - their requests and then store them in
46:16 - Redux
46:19 - so dispatchers new
46:22 - texture file car products
46:25 - and all right
46:27 - and let's borrow from
46:33 - sue the same thing
46:36 - where we are going to
46:49 - okay
46:51 - let me uh let me throw in the chat GPT
46:53 - see if it could redeem itself from last
46:55 - time so here's my dispatcher
47:03 - okay let's get a new chat hopefully I
47:05 - forgot about that other chat
47:08 - uh here is my coding standard
47:16 - right uh dispatcher
47:23 - for car products
47:26 - and then I'll give it these card
47:28 - products
47:42 - it's so far so good
47:45 - sets that onto it from historic car
47:47 - products
47:51 - great
47:53 - great delete
47:56 - git yeah
48:00 - and it looks correct to me so let me
48:02 - copy this
48:05 - all right gbt it appears you redeemed
48:08 - yourself and create card product request
48:10 - this I can just import from types
48:15 - match
48:19 - and this is in card products
48:26 - all right
48:28 - so for this all of these should be used
48:30 - now
48:31 - okay
48:33 - so you're importing all of these API
48:35 - functions renaming them
48:38 - and then you have a set cart product set
48:41 - car products and onset from car products
48:45 - enter
48:48 - and then you are creating car products
48:53 - the same data that you passed in create
48:55 - card product request
48:59 - then deleting it you're just taking an
49:02 - ID
49:04 - dispatching it
49:09 - and then to get them we're getting it
49:12 - and setting with those okay I think we
49:15 - are good to start hooking this up all
49:18 - right
49:19 - so now that we have our dispatcher
49:21 - functions let's go back
49:25 - actually what I'm thinking
49:28 - is we can probably do this
49:30 - so of course we're going to need to make
49:32 - this uh logic actually work when you hit
49:34 - add to cart it actually creates a new
49:36 - cart product
49:37 - and then once we have that I'm thinking
49:40 - just the order of operations we also
49:41 - need to update this little indicator
49:43 - right now this is just hard coded in to
49:45 - say 12. but
49:47 - of course we want it to reflect the
49:49 - number of items we have in the cart but
49:51 - I think first I'm just gonna make this
49:53 - button work
49:54 - so let's go ahead and do add to cart
49:56 - find that
50:02 - all right
50:04 - now back in tnbos let's do add to cart
50:07 - first
50:08 - or maybe
50:10 - yeah is in cart
50:16 - okay let's do that
50:23 - hmm
50:31 - so what we can do is actually build the
50:34 - is in cart logic first
50:37 - and the reason I want to do that is
50:39 - because that determines whether we need
50:43 - to add our cart or remove from cart
50:44 - button
50:47 - so for that gonna need a little bit more
50:49 - coffee of course
50:51 - um
50:53 - some good coffee baby okay
50:57 - so the next question becomes how do we
50:59 - determine if a product is in your cart
51:01 - or not
51:02 - well what we can do
51:06 - is we can look at the
51:09 - cart slice
51:12 - and the cart slice is going to have a
51:14 - bunch of these cart items but nested
51:16 - within them all are the products
51:19 - and from those products we can pluck off
51:21 - the ID of each
51:24 - and then we'll have a set of IDs
51:27 - and then with those we can just check if
51:30 - the ID
51:33 - that you're on is in basically your car
51:36 - products more or less
51:39 - so let's do that
51:40 - so we need products and cart products so
51:44 - get products which we already have
51:50 - and then cart products so get
51:54 - car products
52:00 - all right so
52:06 - all right
52:08 - so is in cart this is going to be a
52:12 - memoize function
52:13 - and this is going to return a Boolean
52:18 - it's going to return a Boolean
52:23 - which we don't need to type out
52:25 - all right so isn't cart
52:27 - so what we can do first is get the
52:30 - product ID so for the const
52:40 - all right so the object values of cart
52:42 - products are are all of your
52:47 - carp products
52:53 - now from here what we're going to do is
52:56 - we're going to map over each one
53:02 - and just actually I
53:06 - forgot some braces there
53:14 - all right so what we can do is we can
53:17 - map over each of the cart products and
53:20 - get the product and just extract the ID
53:24 - from the product
53:28 - okay
53:30 - and then what we can do
53:34 - is we can say
53:37 - um return
53:40 - product IDs includes the ID of the
53:45 - product you're on
53:50 - and it's giving me a little issue
53:52 - because this ID can be undefined so if I
53:54 - say if
53:56 - if no ID
53:59 - return false
54:08 - string oh that's interesting
54:15 - so this param must be a string
54:21 - yep
54:22 - okay so even if what it's saying is that
54:26 - even though it looks um in the URL like
54:30 - this 14 is an integer
54:34 - um whenever we're plucking it from
54:35 - params it just treats all of these as a
54:38 - string so in that case what we can do is
54:42 - we can just parse it to an integer
54:47 - um I'll say
54:52 - parseint ID
55:02 - let's find where else I'm doing this
55:04 - okay
55:10 - I guess you don't really like how this
55:13 - is uh
55:15 - yeah it's good enough okay
55:18 - so if it's in my cart
55:23 - then that logic should be working
55:29 - we can test that later on
55:32 - we also probably want to make this a set
55:34 - instead of a list but let's use memo
55:37 - whatever
55:39 - now if all the product IDs includes the
55:42 - one that you're on that is in your card
55:43 - if not okay now handle add to cart click
55:49 - let me just look what I did in tmbos
55:53 - okay some warnings here
56:00 - okay
56:03 - so we'll talk about those in just a bit
56:05 - but for right now we'll kind of just um
56:09 - do it the hard way
56:11 - so this is going to be an async request
56:16 - as is removing it
56:20 - and I also want to put it in a try catch
56:25 - so let's steal one of those
56:31 - with some toast
56:33 - I like toast I like toast okay so
56:36 - basically this logic
56:40 - so what we are going to do when adding
56:42 - to cart is we are going to
56:48 - try to dispatch
56:51 - and use this patch which is going to
56:53 - come around Redux
56:59 - dispatch something to the store
57:01 - basically add info to the store
57:06 - and then instead of get products
57:11 - air
57:13 - adding product to cover
57:25 - all right so what do we want to do we
57:28 - are trying to create a cart product and
57:30 - this is going to come from dispatchers
57:31 - car products so
57:34 - we are going to import credit card
57:37 - product from
57:39 - dispatchers car products
57:42 - and then whenever we handle add to cart
57:45 - click we're gonna kick off this dispatch
57:47 - function in this dispatch function and
57:50 - going to take create card product data
57:53 - which is going to be a product and a
57:57 - quantity
58:01 - so the quantity we can just hard code in
58:03 - one for now and the product is going to
58:06 - be this right here
58:13 - it's not pretty so let me do this
58:22 - all right so this is our request data
58:26 - um and this is saying as well
58:32 - that what if you don't have
58:36 - an ID
58:38 - and just say no ID return
58:47 - all right
58:49 - so whenever you click add to cart click
58:52 - or excuse me whenever you click the add
58:54 - to cart button then what it's going to
58:56 - do is it's going to pretty much create
58:58 - that request
59:02 - from the product ID from the params
59:04 - quantity one by default change that
59:06 - later on and then dispatch it to the
59:09 - back end and store it in your store I'm
59:11 - just going to say product added to cart
59:12 - if not if something goes wrong we're
59:15 - going to get an error message that says
59:17 - this
59:17 - so let's see where we are at can we add
59:21 - this actually let me look at my network
59:22 - request
59:24 - so add to cart 400 great great great
59:28 - um you cannot add
59:29 - from different sellers
59:34 - okay so apparently I already had
59:36 - something in my cart
59:38 - oh that's right
59:40 - because
59:42 - okay so a couple of different things are
59:44 - going on here
59:45 - first of all I already had this product
59:49 - in my cart from Amy when we were testing
59:51 - things around so actually let me do that
59:57 - also good error message this is the uh
60:00 - why clear error messages are key
60:04 - helps the front end to debug so
60:06 - hopefully when I refresh this
60:09 - okay even though this says 12 I
60:11 - shouldn't have any items in my cart and
60:14 - now when I hit add to cart all right
60:16 - looking good so first of all let's see
60:18 - if it worked on the back end yep
60:21 - I have a cart Product Where I Am the
60:23 - buyer for and it says bacon quantity one
60:26 - that looks good
60:28 - and now oh I even have this removed from
60:32 - carbon that's pretty cool and then let's
60:35 - see let's just make sure that yes in my
60:38 - Redux store I now have this cart product
60:40 - which was part of the
60:42 - cart product ID 22.
60:45 - looking good looking good
60:49 - all right now when I hit remove nothing
60:51 - should happen but let's fix that in just
60:53 - a second okay
60:56 - so
60:59 - to remove from car let's just steal all
61:02 - of this
61:03 - and all right
61:06 - all right
61:07 - so the goal
61:09 - is to remove it from a car and get this
61:11 - success message now we're not going to
61:14 - need any request data
61:18 - air removing
61:21 - the product from cart is going to be the
61:23 - error message
61:26 - and then
61:28 - for create cart product we are going to
61:30 - want to do delete cart product
61:33 - so let's import that as well
61:36 - and when we delete cart product
61:40 - instead of that request data we just
61:42 - need to pass in the ID
61:48 - this of course needs to be
61:51 - a string as well or excuse me an integer
62:00 - okay and for the car products
62:08 - all right cool so hopefully this should
62:10 - work let me just read through this one
62:11 - more time so try to make a request and
62:15 - store it in the store that you're
62:16 - deleting this card product
62:19 - and then after you say product removed
62:21 - from a cart
62:23 - otherwise show this error error removing
62:25 - product from car okay
62:27 - so this product is indeed in the car
62:30 - already as we can see now whenever I hit
62:33 - remove
62:36 - okay detail not found okay so I think I
62:40 - know what I was doing
62:42 - yeah okay
62:44 - so
62:46 - what I'm doing incorrectly
62:51 - is whenever I'm deleting this cart
62:53 - product
63:00 - um this is interesting
63:03 - so
63:05 - whenever you add a cart product you
63:07 - basically need to pass in the product ID
63:09 - however the response you get back is
63:13 - basically a cart product object and
63:15 - nested within that is the product object
63:17 - and you see in this case what I was
63:19 - doing is instead of passing in the cart
63:22 - product ID
63:23 - when I am trying to delete it I'm
63:25 - accidentally passing in the product ID
63:29 - so I just need to pass in the cart
63:31 - product ID
63:35 - so what I can do is this
63:42 - I think I can update this logic right
63:44 - here
63:45 - to say is in cart
63:49 - instead what I can do
63:52 - is I can look for
63:54 - a cart product and let me figure out
63:58 - where this is so I'm using this isn't
64:00 - cart just to determine
64:03 - that button
64:09 - okay
64:11 - okay but instead I just want to say
64:16 - I want another memory memrise function
64:19 - and all this is going to do is it's
64:21 - going to return either a cart product or
64:23 - null
64:29 - this from a types
64:33 - okay
64:34 - so I'll say if no ID return follows that
64:37 - checks out fine
64:45 - and then what I want to do
64:50 - I'm just going to return
64:54 - object values find
64:57 - where the product ID
65:10 - yeah I can optimize this later but
65:30 - electric values car product
65:33 - type undefined
65:40 - or null
65:44 - okay so here with find it's going to
65:47 - return undefined but I want to return
65:48 - null though I want to change the shape
65:50 - of this
65:53 - actually let's just do this
66:01 - and then here what we can do is we're
66:03 - just turn undefined
66:09 - to find
66:13 - turn this all right
66:22 - okay so is in cart
66:25 - can be replaced by cart product
66:30 - all right
66:32 - so if
66:35 - I do double Ampersand and say if you
66:38 - have a cart product
66:41 - then remove from cart
66:46 - otherwise if you don't have a car
66:48 - product just say add to cart
66:52 - now this should give me my cart product
66:54 - or undefined
66:56 - so whenever I am deleting it I can say
67:00 - if you don't have a cart product don't
67:01 - do anything otherwise
67:04 - what you can do is you can delete the
67:07 - cart product just using the cart
67:08 - products ID
67:12 - and this should work
67:15 - so let's figure it out all right so
67:18 - refresh this page and first of all let
67:21 - me just make sure again okay so this
67:23 - cart product with id22 is in my cart
67:26 - and if I remove it it says
67:30 - yes yes yes this is great okay
67:33 - so I'm gonna delete cart product 22 and
67:37 - also for my store I don't have any cart
67:39 - products in there now what I can do is I
67:42 - can add it to car again
67:45 - and when I do it adds
67:47 - it and the payload is product 11 which
67:51 - is right quantity of one
67:54 - and then in my real store it just adds
67:56 - it to the cart under the new ID with the
67:59 - product nested view to full
68:04 - beautiful beautiful beautiful okay
68:07 - so that is looking good I can remove
68:10 - items from my car I can add items
68:13 - for my car add to remove from okay
68:18 - now a couple different things that I
68:24 - want to do
68:26 - okay one thing that I want to do is this
68:31 - well let me just review this real quick
68:33 - there's Patrick's enums
68:39 - you
68:42 - product looking good
68:47 - um looking good looking good looking
68:48 - good okay so maybe some optimizations we
68:51 - can take care of later but for now I
68:53 - don't need to worry about that
68:56 - okay
68:57 - so some other things I want to do is
69:00 - this
69:02 - um whenever and I also want to ask about
69:05 - the user experience what do you guys
69:06 - think about this so I already have it
69:10 - where let's say that Amy is selling
69:13 - [Music]
69:14 - um
69:14 - flim flim Amy's selling bacon for VTX
69:17 - and even though I'm selling this let's
69:20 - just pretend that Amy is selling this
69:22 - wooden spoon for a tnb now it's
69:24 - perfectly uh valid is whenever we go to
69:29 - the checkout if we have products in
69:31 - there
69:32 - from two different currencies as long as
69:34 - they're from the same seller it's going
69:36 - to be fine because you're just placing
69:38 - one order
69:40 - um you're getting it sent to one
69:41 - location which is your address and it's
69:43 - just like a a deal between two people
69:46 - you just paying two currencies nothing
69:48 - really uh overly complex about that
69:51 - now what we are not allowing for their
69:53 - time being is let's say that
69:56 - um you want to buy one item
69:59 - from Amy in another one from Bob
70:02 - so in that case whenever you go to
70:03 - checkout you are going to have products
70:06 - in here from two different Sellers and
70:09 - that's just going to get pretty
70:09 - confusing not only from the UI wise
70:12 - because it's like
70:13 - are using the same address are you using
70:16 - two different addresses so on and so
70:18 - forth but then even from your orders
70:21 - it's like yeah we could automatically
70:23 - split them up so maybe you go and place
70:25 - order and then you end up with two
70:28 - different orders because we split them
70:29 - up among sellers but for right now I
70:32 - just want to keep the logic very simple
70:33 - and say that you're only allowed to
70:36 - place your order if all the products are
70:38 - from the same seller
70:40 - so that said we need to kind of
70:42 - communicate that on the UI again I don't
70:45 - know if this is going to be the logic
70:46 - that we're definitely going to stick
70:48 - with going forward but for right now
70:50 - we're just gonna you know we're building
70:52 - out MVP keeping things simple so
70:56 - in that case what I did is in tune VOS
70:59 - is whenever you're attempting to add
71:01 - items to the cart
71:03 - I say that if
71:07 - basically if the cart seller
71:12 - well let me see if they're
71:15 - is a cart seller
71:20 - okay so this cart seller is basically
71:23 - going to give you the seller of the
71:25 - products that you have in your cart
71:27 - now if it doesn't match
71:30 - the seller of the new product you're
71:34 - trying to add then you're just going to
71:35 - get a little warning and this is just
71:37 - going to say something like
71:40 - uh what was it
71:42 - well I forgot where it was but um
71:45 - it's basically going to say like hey
71:47 - you're trying to add products to your
71:48 - cart and they're from two different
71:50 - Sellers and we don't allow that
71:52 - so
71:54 - we're eventually going to need this
71:56 - modal so I'll say throw a warning modal
72:00 - when the user tries to add
72:06 - yeah let's do that
72:15 - or I'll say display a warning modal
72:21 - user
72:23 - attempts to add
72:26 - products
72:28 - from multiple sellers
72:30 - to their cart
72:34 - again this is likely going to be
72:36 - something that we're going to change in
72:37 - the future to give them a little bit
72:39 - more flexibility but for right now
72:42 - nice and simple
72:45 - and then another thing that we need to
72:47 - do is this
72:51 - so this number 12
72:54 - is going to be updated to reflect how
72:57 - many items you have in your cart
73:00 - and we can do that right now
73:03 - all right so let's do that right now
73:05 - that's going to be the easy part
73:08 - so that would be in our Pages our shop
73:12 - and those are layout top toolbar
73:15 - see what's going on here
73:17 - so it's on the right render menu items
73:21 - and that is our buy menu items
73:25 - and right here so we have product count
73:30 - and we can name this to cart product
73:33 - count actually so
73:38 - cart product count
73:56 - the outline okay and let me actually
73:59 - make this a separate um
74:05 - render car product count since we're
74:07 - gonna have a bit of logic in here
74:21 - all right so render car product count
74:23 - first let's just make sure nothing broke
74:27 - and then let me just change this to
74:30 - something else just to make sure
74:32 - okay
74:34 - so what we want to do is we only want to
74:36 - render this if there is a cart product
74:38 - count
74:40 - first of all
74:42 - so
74:43 - and another thing is we're going to have
74:45 - to get
74:49 - so basically we're going to get all the
74:51 - products in our cart
74:54 - and then just get the uh
74:57 - how many there are
74:59 - so for Selective state
75:08 - uh what I just copy some car products
75:25 - Hindu I even yeah let's go ahead and
75:28 - memorize this
75:30 - I'm almost gonna react
75:33 - even though it's not a very heavy
75:35 - operation all we're doing is kind of um
75:38 - getting the length of how many car
75:40 - products we have
75:42 - I do think it'll be a little bit
75:46 - so we can say
75:49 - car product count
75:54 - and I will say
75:57 - return the length of their car products
76:07 - it's your current number
76:12 - all right
76:14 - so
76:15 - this is going to return a number how
76:17 - many carb products do you have
76:20 - and for this bubble we're just going to
76:23 - say if you don't have any car products
76:24 - then just return null
76:27 - because we don't want to render the
76:29 - bubble at all
76:31 - um
76:32 - another thing that we could do is we
76:34 - could just render it with a zero in it
76:36 - but that's kind of weird
76:38 - otherwise just show me how many you got
76:44 - and let's see how we're looking here
76:46 - okay so we have one item in our cart
76:49 - right now and let's actually delete that
76:55 - all right so
76:59 - I'm going to refresh this
77:02 - and we have this in our wallet
77:06 - incorrectly so that's another issue we
77:08 - have well let's just do this so I'm
77:11 - going to log out log back in okay
77:14 - kind of just get a fresh
77:17 - State here
77:19 - this is interesting too
77:21 - so
77:23 - all right so it seems like we have a
77:26 - little bit more work here than we
77:27 - anticipated
77:29 - um basically we forgot to fetch the
77:31 - products whenever we go to the product
77:34 - catalog so before we can actually test
77:37 - adding items we probably want to do that
77:42 - uh not the product details so that's the
77:44 - buy catalog page
77:47 - okay
77:48 - whenever we go to the yeah
77:52 - forgot this logic so whenever we go to
77:55 - the product catalog page what we want to
77:57 - do is we want to
77:59 - just fetch our updated products and we
78:01 - can do that with get products right here
78:05 - and apparently I'm using it somewhere
78:07 - already
78:12 - where
78:16 - on my cell products okay
78:19 - it's going to be easy then
78:22 - all right so I am going to want to use
78:25 - the same logic
78:27 - but for the virus catalog so
78:30 - it's products
78:35 - and what else am I going to need
78:37 - dispatch
78:38 - get products this player toast
78:42 - so dispatch first of all
78:46 - is going to come from react Redux
78:58 - so let's just do this display Eric toast
79:02 - utils toast to you okay
79:08 - so now what I can do
79:12 - is I can say that whenever we go to the
79:15 - product catalog page
79:17 - then we are just going to
79:21 - fetch the products
79:28 - so let me just test it from the
79:29 - beginning log out uh Purge all my state
79:32 - log back in go to the shop app
79:35 - and it fetches all of those products and
79:38 - then sets them right there
79:40 - now from here we don't have any products
79:43 - in our cart which is good just verify
79:46 - that beautiful so no bubble up here is
79:49 - right here however now I'm shopping and
79:51 - oh I'm feeling hungry right now I want
79:53 - to buy this bacon add it to the cart
79:56 - product adds to the cart we got a cart
79:58 - product in here and check it out we now
80:01 - have this little bubble that says one
80:02 - because there is one item in our cart
80:04 - now hopefully when I remove that the
80:07 - bubble should disappear and we are
80:10 - looking good
80:12 - and actually is this
80:15 - all right you know what
80:17 - um even though
80:19 - I have this buyer at the cart button and
80:23 - it appears things are working right now
80:25 - I'm not going to cross this off of the
80:27 - checklist for now
80:29 - and the reason is because we still have
80:32 - this to do
80:36 - which is I forgot where it was but
80:42 - on the product Details page
80:46 - we said that
80:48 - if
80:51 - okay so right now I have one item in my
80:53 - cart from Amy and then what we can do is
80:56 - we can go in here
80:58 - and we can try to add another item to
81:01 - the cart and right here we're going to
81:04 - get an error that says error item
81:05 - product to the cart however the error is
81:08 - because
81:10 - um I cannot add products from different
81:12 - sellers to my cart however in this case
81:15 - we have a little issue because
81:17 - the information that's being
81:18 - communicated to the user which is going
81:20 - to look like this it doesn't reflect a
81:23 - clear enough error message to let them
81:25 - know what's happening so instead we want
81:27 - to spin up a modal and it says hey
81:30 - um
81:31 - you shouldn't be adding kind of just
81:34 - telling them what's up we'll phrase it
81:36 - later on but that's what we're going to
81:37 - do
81:39 - now on that note I think we're good for
81:43 - our this coding session
81:45 - uh yeah actually made a lot of progress
81:48 - and I'm gonna go ahead and uh
81:52 - push this video up just because I don't
81:54 - know if it's going to be too long if I
81:57 - keep recording it but in the next video
81:58 - what we'll do is we'll get started on
82:01 - the address logic
82:02 - and then once we have this built out
82:05 - we'll finish up this logic to handle
82:08 - this error message in a more appropriate
82:10 - way better ux
82:13 - and then from there we get to the really
82:15 - fun stuff which is the checkout page and
82:18 - the uh buyer and seller orders and this
82:21 - kind of wraps it out
82:22 - so yeah lots of fun stuff to do deadline
82:26 - six days away I'm feeling confident I'm
82:27 - feeling confident about it but uh yeah
82:30 - thanks for watching and I will see y'all
82:32 - next time

Cleaned transcript:

already all welcome back to another video and in this one what we're going to be doing is working on the product Details page because in the last video we built out the product catalog but whenever you click one of these products all you are taking to is a screen with the ID in the top left and well it's uh not the greatest user experience I must admit eventually we're going to be building out something like this where we have the picture on the left some details on the right and you can add it and remove it from your cart so there you go let's go ahead and get started now what actually start by popping over in tnvos and seeing what we got so well first of all the product Details page right now is just this where we have that one div with the ID being printed out in it and this is tnbos for that full version so another thing that I want to mention is that before I even get started whenever we were planning out our little road map I have the buyer product detail page listed and then I have some address logic and then the add to cart button so I'm not sure in this video If what we're going to do is we're going to build out all this logic or just the UI and not have any of this add to cart logic but we will see how far we get because according to the deadline that we gave ourselves um six more days to tackle the rest of these seven features so on that note enough talking let's get to working all right so in tnbos right here another thing that I'm thinking is that I don't know if we want this back button now the reason that I had it in tnbos is because this is an electron app and of course it doesn't have um you know it's just a desktop app it doesn't have like a browser bar or back button or whatever however since this is a web application and all web applications nowadays uh whether you're on a desktop or a laptop or a tablet or mobile phone whatever they always have a back button I'm thinking that we may not need this one right here so yeah let's do that let's keep the design minimal and we will go without a back button and then if it just feels weird for whatever reason we can add it back in but let's do that so on that note we have our main container we have the back button there we're not going to have then we have the main content and I believe the main content is not going to be needed either because this was just to yeah so the main content is basically our parent item and we want a grid display or a flux display with a gap of 24 between and then we can make a responsive later on if needed so let's do that all right so for our page we are going to display Flex since we're gonna have the image on the left and the details on the right and we'll just have a gap of 24 and that'll be our spacing in between those two elements so now what's next render left and render right so render left is easy the left section just has image in it which is products image so left and then the image left and then the image okay let's steal these two all right so left image and then I can steal this render left got a fly buzzing around my head in case I make any weird noises suddenly and okay so for this product image actually can I get the URL from here where is this being hosted at all right So eventually this is going to be coming from you know the actual Source in Redux or whatnot but for right now this is good oh my God this fly is uh pretty annoying I wonder if I should open my window that's a gamble though I might be letting more flies in all right and let me get my scaffolding for this taken care of as well so I have my left left section and I want my right section in my right section is just all that product info so Flex Flex Auto take up the remaining width Flex Direction column display that on top of each other let's do this all right so I'm going to steal that right styling as well and I'll go back to 10 BLS and say render right price container price all right let's keep it nice and lean for now then kind of build it out all right so for render rights all I'm going to do is put render left render right render everything all night I'm gonna render I'm gonna render okay a little warning but I'll get okay so now we're working with something now first and foremost I want to get my padding situated so what is the padding around here the padding around here is 24 pixels top and bottom 32 left and right so let's steal you and let's see how you are looking so you would be in my main container and that looks not too shabby click here click here all right we are looking all right all right so now let's go ahead and build out the rest of those right elements and oh my God this oh I got it I mean I swatted it like I didn't kill it but you know I taught it a lesson like it knows not to fly over here anytime soon they're pretty short memories though so we'll see what happens with it all right um so we have the name first so let's take care of these three elements we got the name the description and the user label which we're calling that so name and description first of all what's the name we got the description is going to come from my color system which I can import from here and we don't have the exact same color system so instead we're going secondary color for the description and now let me just do these and all right so for the product name I'll say like wooden spoon and then for the description I don't know like juicy spoon actually juicy is probably the last descriptive word you would ever want to see when buying a wooden spoon the last thing you want it to be is Juicy but you know for this it's all right it's weird just using it as sample text okay wooden spoon juicy one spoon good enough good enough okay next let's go the account label all of those are used okay so the account label which we are calling the user label and when did we wondering where it was so we can just steal it we do call it user label right um account yeah user label why didn't I find you die typing around okay user label user label okay and do we need to style you more yes so let's do this all right it's going to import user label label user label and then I'm going to take this to so I want to style a component even more and what I want to do to it I want to add a margin top of 16 margin top of 16 beautiful so now that user label is going right under the description right yes yes yes yes yes okay and we're going to say something like seller in the name of them is going to be their you name I'll just say uh Bucky for right now and let's see what we got nice very nice very nice just make sure you don't got any extra padding margin sweet okay and let's see what else so after this we have this section right here let me close the rest of these all right so that is the price container which is probably just going to be like a border panel so price container is just kind of the flex align items with a border that's why content space between margin top padding okay so all this we can take Elemental p q r okay so for the colors where's my border color colors dot border all right so I got a price container you're looking good now the price is what I need to put in it and do I have that price element yes yes yes yes we're looking good okay so I have a price and it it's gonna take a product okay but I don't I can't pass in a product yet unless I get the product first it's gonna be easier this way so I thought it would be easier just to bet out the UI first but since we're going to be needing to pass this product around and we're already plucking off the details right here then let's just do that okay so I am going to say first let me get my selector product selector so selectors products accuracy and then products products so from these products all right so I want a minimalized version of this also I'm gonna run into a little issue thinking it may be undefined which actually it may be so that's interesting okay you can use memo all right so here what I'm going to do is pretty much use the ID that we have right here which is going to be a product ID to select the product from my Redux store which should be easy because they're all keyed by ID so use memo and I am going to say that this is going to return maybe I should type it out in a bit foreign or maybe it can just return undefined this is probably okay return products with that ID yeah in this ID could possibly be undefined so I'll say if no ID oops come on if no ID return no that's gonna okay so if no ID return null or if it's an ID so hopefully it's just a regular number and the product is already in the store and it's just going to go ahead and return that oh my this fly okay now if you don't have a product then just go ahead and return null as well and then let me actually type this out so I want this memorized function to return product or no do you do that yes it's looking like it so now what I can do is let's actually find out all right so when rendering left and right if you don't have any product return null and in the case you are going to have a product at this point I'm just gonna do product dot image and for product name and description a little bit of the same so name here description here and then this is the product seller's username you all right let's see if anything broke so far great wooden spoon before one spoon by Bucky bacon bacon nice and juicy by Amy looking good all right fascinating the book about mushrooms yes it is okay so now what we can do is we can render that price logic and by the way I just want to test this out where I do have a valid ID in just not any of the products in the store and I just get an empty state which I can update to give a little bit more clear indication what's going on but for right now it's good so these are my products in the store let's go with uh wind spoon right now since this is kind of the uh pin code this tutorial to sell this wooden spoon to one of you out there so next up let's go ahead and tackle the price logic okay we'll get rid of you get rid of you and now get rid of you okay so in the price container which we do not have rendered yet but we do have this we are going to be rendering the price okay when am I using you did I not even use this price component anywhere yet components uh price index come on we built it oh I was probably using it in a yeah all right so import price from my component Library and then in my price container it's render price and the product is the product that we have we have it at this point all right all right 2600 for the spoon 2200 Foot Book bacon looking good okay next we just have to render this button so this button is either going to say add to cart or remove from cart depending on if it's in your car or not so for that logic what we can do so let's first take a look at this render card button all right so there's Boolean that we calculate to say if it's in the cart or not and we are not going to be able to have the actual Logic for this yet but we can just make a temporary variable now if it's in then this is the button you want to render if not that's the button all right it's easy enough okay so let's first import our button so import button nope don't need it here we go all right so since we're gonna need a button gonna need to import a button we are going to what did we call it here render cart button all right so for render carbon we have this constant is in cart and for right now we're just going to set it equal to a Boolean all right so this is going to be um eventually we need to update this to have actual logic to determine if it's in the cutter cart or not but for now we can just use it as part of this render carp on to decide which one to render so we can test things out so in our price container in that little panel we're going to have price on the left and then the cart button on the right now if it is in the cart then it's going to render a button to remove it and if it's not in the cart you can add it so let's build out these handlers as well so handle remove from cart click okay so let's just go ahead and make this nice and easy so let's type so we're going to be displaying a toast message so get those utils and then enum all right so for now mmhmm let me just make sure something does type okay okay okay so for the render card button uh you know add to cart click and I'll add to the card click and that is product added to cart and these don't need to be template strings oh wait so for remove is product removed from cart okay so this should be working quote unquote just in a really dumb way so let's see what's going on okay so I have it hard coded in where the product is in my cart now because of that I have this removed from cart button and when I click on it it should just say product removed well two card that's embarrassing product removed from cart now if I say it's not in the cart then whenever I go here it should say add to cart and then you click it it adds the cart and it says product added to cart all right so that is the functionality that we want so far at least um of course a lot to do from here first of all this cart number and basically other cart logic is just a dummy logic right now it's not actual hitting not actually hitting our back end or anything so let's do that next actually let's check our little blueprint okay buyer product detail and then we have the buyer add to cart button separate so maybe we will do this the buyer detail Pages well basically styled there's not much to it got a little responsive Behavior looking good for right now of course some updates later on but uh it's looking all right so the buyer product detail page I almost want to say this is done right now um my dresses created a dress and then what we can do once we have that is go and work on the Ed cart logic I'm also thinking if we just want to do this now so let's go ahead and take a look at our back end for this so we have so what we're basically going to be doing is creating cart products okay so a cart product is just a product in your cart and then when you click this button you're basically just adding and deleting cart products and I believe we don't even have yeah yeah there's not even an okay so on the back end we don't have any update functionality we just have crate however we may need to add it later on because though with this right here when we can or let me show you right here basically we can add or delete the item from our cart right here um eventually we're going to need to handle quantities meaning that whenever you go to checkout if like you can say I want one of these which would probably be the default or you can order 10 of them if there are 10 available but for right now we're just going to keep it nice and simple and keep this addin removed just wondering if I I'm gonna tackle this a so yeah we won't even pass the quantity in or maybe we'll just do one by default although on the back end we're already checking for it you know what we'll do we'll just do everything with the quantity of one on the UI for now and then once that is working we'll go back and kind of build out the quantity logic so I'm also thinking now how we're going to structure this on the front end so maybe we just build this into Redux so yeah let's follow our roadmap actually and what I'm going to do is I'm going to uh kind of start on my addresses um actually let's just go ahead and work on this cart logic and then we have something going on okay so this cart product is what we're going to need to store in Redux so let's do this let's get our old friend Postman out so we can see the shape of everything all right so first I'm going to log in and then what I'm gonna do is add a cart product to my cart so first let's do this uh let's pop open Django admin all right so no products in anyone's carts and then what I'm gonna do with my authentication token I'm gonna use this to add a cart products in the endpoint for cart products was indeed cart products let me just send it with the error and see what we get okay so for the quantity we're gonna do one and for the products what we can do is this so what product would I want to add to my cart well I am Bucky in this situation so uh this bacon I want to add and that is product 11. unsupported media type and request and that is we can just go raw actually all right so for this we can just do a quantity of one in product of 11. okay and this is the response that I get back so basically that serialized product which we need in this information you're the buyer the quantity all the seller stuff is nested beautiful beautiful so now take this move it over to Chai GPT and say okay create a typescript interface for that and then while that's doing that thing let's go ahead and yeah it's going to be a while before we get back to here so okay so under types let me just look at products right now so product is gonna have activation status ID seller and that's a user reads serializer yeah this is what it's going to come back as okay so on this note what I'm going to do first is start typing out my cart products since we're essentially going to be storing these in Redux so let's just go ahead and yeah get started now the name and Convention for these files is cart ER products all right so a cart product and then from the product all right holy moly sweet ravioli okay so a cart product is going to extend created and modified and then it's also going to have an ID where is Dick coming from all right so let's hop over to chat GPT again hmm what's going on here uh order what are you talking about order what uh okay I think I'm not gonna take Chad should be these advice on this one all right so anyways for a cart product we have it basically inherits from created modify which we did and it also has an ID which we gave it and then a quantity and buyer or also number so quantity and buyer are also a number and that's going to be my structure car products stored by the and then last but not least we have a product and this is just going to be a product all right so basically a car product has a created modified date a buyer ID product quantity so six different ones and that's right one two three four five six these are dates dates product serialized good to go good to go okay and now uh this is a car product and then we're gonna store it in Redux keying everything by this ID so now you just need to kind of patch everything together all right so car products after blocks car product car products and that would be cart product car products and let's see what design pattern okay so in our store we're going to create a new slice here called card products and before we get to this we're going to need to add a new constant for cart products card products carb products car products okay now in our store where are we going to take this from maybe wallets all right so what are we going to do to it actually maybe course yeah because the functionality that we're going to have is to be able to create a cart product we're gonna fetch them in that case we are gonna set multiple ones at once and also unset when we delete a car product so basically I can just steal this and then update it accordingly okay so for this cart product slice instead of cores it's going to be car product instead of core it's going to be cart product all right let's see what we're working with here so we are going to be creating cart product slice and the constant this is going to be keyed under on the back end it's just cart products cart products and yeah this constant is also um whenever a Redux toolkit uh like self generates these action names then that's when this constants use couple different things kind of internally um initial state is just empty and then when we create the slice it's going to have whatever initial State we give it which is empty dicks empty dicks so nothing car product we're gonna set a cart product by passing in a cart product object and then it's just gonna key it by its ID when you saw set multiple cart products at lunch for example whenever you are fetching this page you're going to get all your cart products send them all at once then you pass in a list of cart products from the back end and that just iterates through them reduces them Keys them all by ID and then when you're unsetting them you just pass in the ID and it'll delete it and that's good car product actions okay so now we just need to go ahead and save this register with our main store so the cart products are going to be stored under the key cart products and for that the value is the cart product reducer that we just created okay looking good now after here we're going to go ahead and make a selector function just so we can pull that data from our store for this we will say when we call the function get cart products then we want you to give us the data in state car products that's our selector function and now if all went well we should have cart products in here beautiful all right so now the next thing we need to do is we need to kind of write our API and dispatcher logic so whenever we click this what it's going to do is it's gonna basically make the equivalent of this request where you're creating a cart product and we'll just set the default quantity to one for now yeah and then we're also after this data comes back from the back end we got to dispatch it to our store so our front end is synced up with our back end okay so that's going to be quite the task not really but let me sip on some coffee first for anyone uh out there are you coffee drinkers or energy drink drinkers or just caffeine free uh yeah let me know I want to try some new drinks where were we come on Bucky let's not get distracted here this caffeine mumbo jumbo all right so let's first go to what we can just boot on our API so we are going to be building our cart products a new cart products types your file and it's pretty much going to be the same as the course right yeah not even we can definitely use this actually not quite because Coors yeah this one's gonna be better um because cores uses form data because um well I can show you right now so the reason that cores use form data is because they have an image right here and whenever you're working with image you need form data however what we are doing is we are not using any image we're just adding and removing products from our cart so that is why I don't want to steal it from Court instead I want to steal this logic from wallet but that has some tricky stuff too and also this is interesting so I typed out this request data okay this is interesting kind of like it great wallet response or request okay let's do this so I am going to type out the request shape as well all right great carp product all right so the request data for create cart product request what is it so it's going to be a quantity it's going to be a number and it's going to be a product ID which is also going to be a number and then that is looking good now we just need to import that in my main types machine let me separate my API endpoints like this yeah that looks a little bit easier to read okay readability readability is key car products and I'll say cart product request all right you should have everything typed now now let me maybe it's easier if I just do this all right so wallets wallets where are you at let me steal this too all right so first of all what I want to do is I need to replace this base endpoint with that request okay so create cart product all right so all right so for this I am using crate car product and the data that I'm going to be passing in is this data right here the create cart product request which is a product ID and a quantity and then I'm going to be getting back a car product object and I am just making a post request getting back a car product with the data that I passed in in my authorization headers are my regular ones without the form data so that's good and with the response data take care of that later on but now I am oh you can't delete actually we can borrow this from course so to delete cores and get cores yeah and we won't be doing any updating for now so we'll build that later don't want any dead code okay so this is my crates and then instead of core I'm just gonna do car product and okay let me see what I'm working with here all right so create card product is how we want it now when you delete a car product all you need to do is you need to give the endpoint an ID and it's not going to return anything but there's no data to return after you deleted the object and then you're just going to delete it with our headers to know that we're authorized that's good now for getting cart products you're just going to hit the endpoint it's going to return a list of car products return a list of card products and yeah should be good all right so those are API functions now need to make our dispatchers so this is pretty much our connection to our API but with our dispatchers this is the part that uses these to actually make their requests and then store them in Redux so dispatchers new texture file car products and all right and let's borrow from sue the same thing where we are going to okay let me uh let me throw in the chat GPT see if it could redeem itself from last time so here's my dispatcher okay let's get a new chat hopefully I forgot about that other chat uh here is my coding standard right uh dispatcher for car products and then I'll give it these card products it's so far so good sets that onto it from historic car products great great delete git yeah and it looks correct to me so let me copy this all right gbt it appears you redeemed yourself and create card product request this I can just import from types match and this is in card products all right so for this all of these should be used now okay so you're importing all of these API functions renaming them and then you have a set cart product set car products and onset from car products enter and then you are creating car products the same data that you passed in create card product request then deleting it you're just taking an ID dispatching it and then to get them we're getting it and setting with those okay I think we are good to start hooking this up all right so now that we have our dispatcher functions let's go back actually what I'm thinking is we can probably do this so of course we're going to need to make this uh logic actually work when you hit add to cart it actually creates a new cart product and then once we have that I'm thinking just the order of operations we also need to update this little indicator right now this is just hard coded in to say 12. but of course we want it to reflect the number of items we have in the cart but I think first I'm just gonna make this button work so let's go ahead and do add to cart find that all right now back in tnbos let's do add to cart first or maybe yeah is in cart okay let's do that hmm so what we can do is actually build the is in cart logic first and the reason I want to do that is because that determines whether we need to add our cart or remove from cart button so for that gonna need a little bit more coffee of course um some good coffee baby okay so the next question becomes how do we determine if a product is in your cart or not well what we can do is we can look at the cart slice and the cart slice is going to have a bunch of these cart items but nested within them all are the products and from those products we can pluck off the ID of each and then we'll have a set of IDs and then with those we can just check if the ID that you're on is in basically your car products more or less so let's do that so we need products and cart products so get products which we already have and then cart products so get car products all right so all right so is in cart this is going to be a memoize function and this is going to return a Boolean it's going to return a Boolean which we don't need to type out all right so isn't cart so what we can do first is get the product ID so for the const all right so the object values of cart products are are all of your carp products now from here what we're going to do is we're going to map over each one and just actually I forgot some braces there all right so what we can do is we can map over each of the cart products and get the product and just extract the ID from the product okay and then what we can do is we can say um return product IDs includes the ID of the product you're on and it's giving me a little issue because this ID can be undefined so if I say if if no ID return false string oh that's interesting so this param must be a string yep okay so even if what it's saying is that even though it looks um in the URL like this 14 is an integer um whenever we're plucking it from params it just treats all of these as a string so in that case what we can do is we can just parse it to an integer um I'll say parseint ID let's find where else I'm doing this okay I guess you don't really like how this is uh yeah it's good enough okay so if it's in my cart then that logic should be working we can test that later on we also probably want to make this a set instead of a list but let's use memo whatever now if all the product IDs includes the one that you're on that is in your card if not okay now handle add to cart click let me just look what I did in tmbos okay some warnings here okay so we'll talk about those in just a bit but for right now we'll kind of just um do it the hard way so this is going to be an async request as is removing it and I also want to put it in a try catch so let's steal one of those with some toast I like toast I like toast okay so basically this logic so what we are going to do when adding to cart is we are going to try to dispatch and use this patch which is going to come around Redux dispatch something to the store basically add info to the store and then instead of get products air adding product to cover all right so what do we want to do we are trying to create a cart product and this is going to come from dispatchers car products so we are going to import credit card product from dispatchers car products and then whenever we handle add to cart click we're gonna kick off this dispatch function in this dispatch function and going to take create card product data which is going to be a product and a quantity so the quantity we can just hard code in one for now and the product is going to be this right here it's not pretty so let me do this all right so this is our request data um and this is saying as well that what if you don't have an ID and just say no ID return all right so whenever you click add to cart click or excuse me whenever you click the add to cart button then what it's going to do is it's going to pretty much create that request from the product ID from the params quantity one by default change that later on and then dispatch it to the back end and store it in your store I'm just going to say product added to cart if not if something goes wrong we're going to get an error message that says this so let's see where we are at can we add this actually let me look at my network request so add to cart 400 great great great um you cannot add from different sellers okay so apparently I already had something in my cart oh that's right because okay so a couple of different things are going on here first of all I already had this product in my cart from Amy when we were testing things around so actually let me do that also good error message this is the uh why clear error messages are key helps the front end to debug so hopefully when I refresh this okay even though this says 12 I shouldn't have any items in my cart and now when I hit add to cart all right looking good so first of all let's see if it worked on the back end yep I have a cart Product Where I Am the buyer for and it says bacon quantity one that looks good and now oh I even have this removed from carbon that's pretty cool and then let's see let's just make sure that yes in my Redux store I now have this cart product which was part of the cart product ID 22. looking good looking good all right now when I hit remove nothing should happen but let's fix that in just a second okay so to remove from car let's just steal all of this and all right all right so the goal is to remove it from a car and get this success message now we're not going to need any request data air removing the product from cart is going to be the error message and then for create cart product we are going to want to do delete cart product so let's import that as well and when we delete cart product instead of that request data we just need to pass in the ID this of course needs to be a string as well or excuse me an integer okay and for the car products all right cool so hopefully this should work let me just read through this one more time so try to make a request and store it in the store that you're deleting this card product and then after you say product removed from a cart otherwise show this error error removing product from car okay so this product is indeed in the car already as we can see now whenever I hit remove okay detail not found okay so I think I know what I was doing yeah okay so what I'm doing incorrectly is whenever I'm deleting this cart product um this is interesting so whenever you add a cart product you basically need to pass in the product ID however the response you get back is basically a cart product object and nested within that is the product object and you see in this case what I was doing is instead of passing in the cart product ID when I am trying to delete it I'm accidentally passing in the product ID so I just need to pass in the cart product ID so what I can do is this I think I can update this logic right here to say is in cart instead what I can do is I can look for a cart product and let me figure out where this is so I'm using this isn't cart just to determine that button okay okay but instead I just want to say I want another memory memrise function and all this is going to do is it's going to return either a cart product or null this from a types okay so I'll say if no ID return follows that checks out fine and then what I want to do I'm just going to return object values find where the product ID yeah I can optimize this later but electric values car product type undefined or null okay so here with find it's going to return undefined but I want to return null though I want to change the shape of this actually let's just do this and then here what we can do is we're just turn undefined to find turn this all right okay so is in cart can be replaced by cart product all right so if I do double Ampersand and say if you have a cart product then remove from cart otherwise if you don't have a car product just say add to cart now this should give me my cart product or undefined so whenever I am deleting it I can say if you don't have a cart product don't do anything otherwise what you can do is you can delete the cart product just using the cart products ID and this should work so let's figure it out all right so refresh this page and first of all let me just make sure again okay so this cart product with id22 is in my cart and if I remove it it says yes yes yes this is great okay so I'm gonna delete cart product 22 and also for my store I don't have any cart products in there now what I can do is I can add it to car again and when I do it adds it and the payload is product 11 which is right quantity of one and then in my real store it just adds it to the cart under the new ID with the product nested view to full beautiful beautiful beautiful okay so that is looking good I can remove items from my car I can add items for my car add to remove from okay now a couple different things that I want to do okay one thing that I want to do is this well let me just review this real quick there's Patrick's enums you product looking good um looking good looking good looking good okay so maybe some optimizations we can take care of later but for now I don't need to worry about that okay so some other things I want to do is this um whenever and I also want to ask about the user experience what do you guys think about this so I already have it where let's say that Amy is selling um flim flim Amy's selling bacon for VTX and even though I'm selling this let's just pretend that Amy is selling this wooden spoon for a tnb now it's perfectly uh valid is whenever we go to the checkout if we have products in there from two different currencies as long as they're from the same seller it's going to be fine because you're just placing one order um you're getting it sent to one location which is your address and it's just like a a deal between two people you just paying two currencies nothing really uh overly complex about that now what we are not allowing for their time being is let's say that um you want to buy one item from Amy in another one from Bob so in that case whenever you go to checkout you are going to have products in here from two different Sellers and that's just going to get pretty confusing not only from the UI wise because it's like are using the same address are you using two different addresses so on and so forth but then even from your orders it's like yeah we could automatically split them up so maybe you go and place order and then you end up with two different orders because we split them up among sellers but for right now I just want to keep the logic very simple and say that you're only allowed to place your order if all the products are from the same seller so that said we need to kind of communicate that on the UI again I don't know if this is going to be the logic that we're definitely going to stick with going forward but for right now we're just gonna you know we're building out MVP keeping things simple so in that case what I did is in tune VOS is whenever you're attempting to add items to the cart I say that if basically if the cart seller well let me see if they're is a cart seller okay so this cart seller is basically going to give you the seller of the products that you have in your cart now if it doesn't match the seller of the new product you're trying to add then you're just going to get a little warning and this is just going to say something like uh what was it well I forgot where it was but um it's basically going to say like hey you're trying to add products to your cart and they're from two different Sellers and we don't allow that so we're eventually going to need this modal so I'll say throw a warning modal when the user tries to add yeah let's do that or I'll say display a warning modal user attempts to add products from multiple sellers to their cart again this is likely going to be something that we're going to change in the future to give them a little bit more flexibility but for right now nice and simple and then another thing that we need to do is this so this number 12 is going to be updated to reflect how many items you have in your cart and we can do that right now all right so let's do that right now that's going to be the easy part so that would be in our Pages our shop and those are layout top toolbar see what's going on here so it's on the right render menu items and that is our buy menu items and right here so we have product count and we can name this to cart product count actually so cart product count the outline okay and let me actually make this a separate um render car product count since we're gonna have a bit of logic in here all right so render car product count first let's just make sure nothing broke and then let me just change this to something else just to make sure okay so what we want to do is we only want to render this if there is a cart product count first of all so and another thing is we're going to have to get so basically we're going to get all the products in our cart and then just get the uh how many there are so for Selective state uh what I just copy some car products Hindu I even yeah let's go ahead and memorize this I'm almost gonna react even though it's not a very heavy operation all we're doing is kind of um getting the length of how many car products we have I do think it'll be a little bit so we can say car product count and I will say return the length of their car products it's your current number all right so this is going to return a number how many carb products do you have and for this bubble we're just going to say if you don't have any car products then just return null because we don't want to render the bubble at all um another thing that we could do is we could just render it with a zero in it but that's kind of weird otherwise just show me how many you got and let's see how we're looking here okay so we have one item in our cart right now and let's actually delete that all right so I'm going to refresh this and we have this in our wallet incorrectly so that's another issue we have well let's just do this so I'm going to log out log back in okay kind of just get a fresh State here this is interesting too so all right so it seems like we have a little bit more work here than we anticipated um basically we forgot to fetch the products whenever we go to the product catalog so before we can actually test adding items we probably want to do that uh not the product details so that's the buy catalog page okay whenever we go to the yeah forgot this logic so whenever we go to the product catalog page what we want to do is we want to just fetch our updated products and we can do that with get products right here and apparently I'm using it somewhere already where on my cell products okay it's going to be easy then all right so I am going to want to use the same logic but for the virus catalog so it's products and what else am I going to need dispatch get products this player toast so dispatch first of all is going to come from react Redux so let's just do this display Eric toast utils toast to you okay so now what I can do is I can say that whenever we go to the product catalog page then we are just going to fetch the products so let me just test it from the beginning log out uh Purge all my state log back in go to the shop app and it fetches all of those products and then sets them right there now from here we don't have any products in our cart which is good just verify that beautiful so no bubble up here is right here however now I'm shopping and oh I'm feeling hungry right now I want to buy this bacon add it to the cart product adds to the cart we got a cart product in here and check it out we now have this little bubble that says one because there is one item in our cart now hopefully when I remove that the bubble should disappear and we are looking good and actually is this all right you know what um even though I have this buyer at the cart button and it appears things are working right now I'm not going to cross this off of the checklist for now and the reason is because we still have this to do which is I forgot where it was but on the product Details page we said that if okay so right now I have one item in my cart from Amy and then what we can do is we can go in here and we can try to add another item to the cart and right here we're going to get an error that says error item product to the cart however the error is because um I cannot add products from different sellers to my cart however in this case we have a little issue because the information that's being communicated to the user which is going to look like this it doesn't reflect a clear enough error message to let them know what's happening so instead we want to spin up a modal and it says hey um you shouldn't be adding kind of just telling them what's up we'll phrase it later on but that's what we're going to do now on that note I think we're good for our this coding session uh yeah actually made a lot of progress and I'm gonna go ahead and uh push this video up just because I don't know if it's going to be too long if I keep recording it but in the next video what we'll do is we'll get started on the address logic and then once we have this built out we'll finish up this logic to handle this error message in a more appropriate way better ux and then from there we get to the really fun stuff which is the checkout page and the uh buyer and seller orders and this kind of wraps it out so yeah lots of fun stuff to do deadline six days away I'm feeling confident I'm feeling confident about it but uh yeah thanks for watching and I will see y'all next time
