With timestamps:

00:00 - already all welcome back and in the last
00:02 - video we went ahead and we set up our
00:04 - modal so now what I want to do is kind
00:07 - of build the next piece of this which is
00:09 - building out these cards so whenever you
00:11 - click one it actually sets either the
00:14 - active account
00:15 - in Redux or Active network it's going to
00:18 - be the pretty much the same exact
00:19 - styling
00:20 - so let's just go ahead and first make a
00:24 - generic select card component and this
00:26 - isn't going to have any of that Redux
00:29 - specific logic at all all it's going to
00:31 - do is it's going to have a certain type
00:32 - of styling whether that card is selected
00:34 - or not and then we'll reuse this
00:37 - whenever we add in that account or
00:38 - network specific logic later on but for
00:41 - now we'll keep it nice and dumb so under
00:44 - components I'm going to make a new
00:46 - directory and I'm going to call it
00:49 - select card
00:52 - in here do my normal component
00:55 - templating stuff
00:57 - component in a Styles file
00:59 - and again this component is named select
01:01 - card
01:03 - so let's go ahead and first write the
01:05 - props that we're going to be passing in
01:06 - so export interface
01:08 - select card props
01:12 - again since I'm defining uh props
01:15 - apparently that makes my IDE lag as
01:18 - usual it's so weird why it always does
01:20 - that interesting actually maybe it's
01:22 - typescript trying to check everything
01:23 - who knows okay
01:26 - now let's see what else we can steal so
01:29 - we are going to be passing in children
01:31 - for this
01:33 - because remember just like our other
01:35 - components the select card is basically
01:38 - just the container that has a state are
01:40 - you selected or are you not now it
01:42 - doesn't really care about what's inside
01:44 - it so that's why whenever we pass in
01:46 - children actually we can do this right
01:48 - now we're just going to say display
01:51 - whatever we pass in right in the middle
01:53 - of this container
01:55 - now another prop that we're going to be
01:57 - passing in is is selected and this is
02:01 - going to be equal to a Boolean and the
02:04 - reason that we are going to passive this
02:06 - in and this is a pretty cool trick that
02:08 - we're going to see in just a second but
02:11 - what we're going to do is we're going to
02:13 - apply this prop to this container right
02:15 - here which is this container now even
02:18 - though we don't have this setup right
02:19 - now I'll show you in just a bit how we
02:21 - can accept or listen for this prop right
02:24 - here and depending on if this is true or
02:26 - false then we're going to have a certain
02:28 - bit of CSS and it's going to be like uh
02:32 - we'll make some like border or
02:33 - background or something some selected
02:35 - State and we'll conditionally apply that
02:38 - CSS if this is true or if it's not we'll
02:41 - just apply the default CSS
02:43 - so that's what we are going to do and
02:46 - then the last thing that I'm going to be
02:48 - passing in here is an on click function
02:50 - and we won't write that functionality
02:52 - right here we're right in the parent
02:53 - component but basically just saying that
02:56 - there is going to be some functionality
02:58 - where when you click this something
02:59 - happens and of course what's going to
03:02 - happen in this case
03:03 - is it's going to convert is selected to
03:05 - true and it's also going to update that
03:07 - state in Redux so again all of this is
03:10 - going to be written in the parent
03:11 - component but we do need to accept the
03:13 - prop right here so
03:17 - we already have the typing for this it's
03:20 - under shared types and it's just called
03:23 - generic
03:24 - void function basically a function that
03:28 - doesn't return anything at all
03:30 - and we're going to be passing that in as
03:32 - on click
03:34 - and then we will just say that in
03:38 - addition to this on click on click all
03:41 - right so what I want to do from here is
03:43 - before we even worried about this
03:45 - selected specific styling I want to go
03:49 - ahead and just paste in my generic
03:51 - styling
03:53 - and I'll just explain real quick what
03:55 - this is so it's pretty much just going
03:57 - to be a um like a transparent card with
04:01 - some padding so on and so forth and then
04:04 - whenever you hover over it it's going to
04:06 - have a slight background kind of like
04:07 - that button that we just styled and the
04:10 - only other kind of special thing about
04:11 - this is on the last child I have margin
04:14 - bottom zero and the reason for that is
04:18 - in our modal we already have a 16 pixel
04:22 - padding all around it so if all of these
04:25 - cards since they're going to stack on
04:26 - each other if we did
04:28 - have a margin bottom on the very last
04:30 - one then we're going to have not only 16
04:32 - pixels but 12 pixels from this card as
04:35 - well so anyways we're just saying that
04:37 - on the very last card since we already
04:39 - have padding for the modal then you
04:41 - don't need to worry about a margin
04:42 - button for this
04:44 - and yeah there you go
04:46 - so now what we want to do is since we
04:49 - have this generic styling for this card
04:52 - we want to add in some smart logic here
04:55 - to say when this
04:58 - prop that's passed then is selected
05:00 - whenever this is true then we want to
05:03 - apply some special styling and that
05:05 - styling is just going to change the
05:06 - background and the Border a little bit
05:08 - just to give it that selected state
05:11 - so in order to do this the first thing
05:14 - we need to do is import this CSS method
05:17 - from styled components and we are going
05:20 - to create a variable and we'll just say
05:22 - selected
05:23 - mixing and this is equal to a little
05:26 - snippet of CSS
05:29 - and in here is where we could put our
05:31 - select styling right here
05:35 - so again all this is doing is it's
05:37 - changing this gray default border and
05:40 - background to a slight shade of green
05:41 - and I also updated some of these hover
05:45 - properties as well since uh you'll see
05:47 - in a bit but if I didn't have it it just
05:49 - looks a little bit weird whenever we
05:51 - selected or excuse me whenever we hover
05:53 - over the selected card
05:56 - so now what we want to do in this
05:58 - container is basically say whenever this
06:01 - is selected prop is true then we want to
06:05 - apply this mix in so how do we do that
06:08 - well first thing we need to do is we
06:10 - need to accept that prop and how do we
06:12 - do that well we can type it out right
06:15 - here so put those less than and greater
06:18 - than signs or greater than less than
06:20 - signs and then we say what props are we
06:23 - prepared to accept well we're going to
06:26 - be accepting an is selected prop and
06:29 - that type is going to be a Boolean value
06:31 - so now in this component right here or
06:34 - this div we can now use this using that
06:37 - templating language that we saw before
06:39 - dollar sign curly braces and again
06:42 - anything in here you can pretty much
06:43 - just treat as JavaScript so with styled
06:47 - components what we can do is we can
06:49 - actually call a function right inside
06:51 - here and whenever we do this what sound
06:54 - components is going to do is it's going
06:56 - to call this by passing in whatever
06:58 - props we Define right here so since the
07:02 - only prop that we passed in is is
07:04 - selected we can go ahead and destructure
07:06 - that right here and now we can pretty
07:09 - much work with it however we want
07:11 - so all we want to do with is selected
07:13 - variable is we want to say whenever this
07:16 - variable is true then what we can do is
07:20 - we can render out this selected mix-in
07:23 - so again all this div is going to do is
07:26 - it's going to listen for this is
07:28 - selected prop and if you see back in the
07:30 - main component that little error that
07:32 - was there it went away because we typed
07:34 - it out properly and it's now ready to
07:36 - accept this prop and then once we pass
07:39 - it through style components is going to
07:41 - call a function to listen to it and for
07:43 - the logic we wrote we just say that
07:45 - whenever it's true then in addition to
07:48 - all this styling we also want to render
07:50 - this CSS as well which is going to give
07:53 - that selected state that nice pretty
07:55 - green background
07:58 - and all right I think that this
07:59 - component is good so what we can do to
08:01 - test it out is go to our account modal
08:04 - and where it said account cards here
08:07 - let's just go ahead and import this
08:10 - select card
08:12 - and we'll just hard code in the value
08:14 - true or false whenever we're passing in
08:16 - this prop but eventually of course
08:17 - that's going to be dynamic
08:19 - but anyways import select card from Maps
08:24 - test
08:25 - select card
08:27 - all right and let's
08:32 - actually let's do this
08:37 - so the select card is props we need to
08:40 - pass in a child element and for that
08:42 - child element what we can do is pass in
08:45 - that identification
08:49 - and again this is going to be dynamic as
08:51 - well but just to have something that we
08:53 - pass in
08:56 - say we're passing that identification
08:58 - and what other props does it take is
09:00 - selected and this is a Boolean
09:03 - so it's selected
09:06 - we'll say that this one is false we'll
09:07 - have one be false one be true just so we
09:09 - can see the difference in styling and
09:12 - now another
09:13 - prop that this takes the last prop is an
09:15 - on click Handler and since we don't have
09:18 - this written yet what we can actually do
09:20 - is
09:21 - import
09:23 - from low Dash and that is lodash
09:28 - nope and this is basically just a
09:30 - function that does nothing we can use it
09:32 - whenever we need to pass in a function
09:33 - but we don't have a one written yet
09:35 - which is this exact case scenario
09:39 - so this all looks good to go and I'm
09:43 - pretty confident that this is going to
09:44 - work so let me
09:47 - pass in True to this one and by the way
09:51 - um
09:51 - for anyone who doesn't know this instead
09:53 - of explicitly passing in true like this
09:55 - you can also write it like this it both
09:58 - means the exact same thing passing in a
10:01 - value is true just a little shorter
10:03 - syntax
10:04 - and now let me see if anything all right
10:06 - so check it out now in our modal we have
10:09 - those select cards and this is the state
10:12 - by default the deselected one and you
10:15 - can see that little hover what I'm
10:16 - talking about right here in the selected
10:18 - state is green background in the little
10:21 - green border and like I said the reason
10:24 - that I added let me show you
10:27 - the reason that I added this hover color
10:29 - as well an explicit background is
10:32 - because well I'll show you how weird it
10:34 - looks if I don't have it
10:37 - so you see how when I don't have it then
10:39 - it changes back to like gray whenever I
10:41 - hover over the selected state so I just
10:43 - thought that was kind of weird so
10:45 - whenever it's selected no matter if I'm
10:46 - hovering over it or not I just always
10:48 - want to keep it that green color and
10:50 - there we go so what I want to do from
10:53 - here is I want to use that select card
10:55 - and from that I'm going to make two
10:57 - specialized components one is going to
11:00 - be called the account select card and
11:02 - the other one is going to be called the
11:03 - network select card so of course let's
11:05 - start with the account one since that's
11:07 - the model we're working on right here
11:09 - and for this can probably just
11:13 - all right let me just close all these
11:15 - okay
11:16 - so a new component and that is going to
11:19 - be called account
11:21 - select card
11:26 - make my component templating
11:32 - all right so we're making a component
11:34 - called a count select card now for this
11:37 - what I'm going to be doing
11:41 - you know what this is so weird I didn't
11:43 - even type any props yet and my IDE
11:45 - already started to lag it knows that I'm
11:47 - about to type my interface wow
11:52 - okay uh account select card props
11:57 - strange okay so the way I'm going to
12:00 - structure this component is I'm only
12:02 - going to be passing in the account
12:03 - number because remember when I said
12:06 - early on that we want to always use the
12:10 - account number when we can because we
12:11 - don't want to be copying this account
12:13 - object over and over in all our apps the
12:15 - source of Truth for the account and by
12:18 - that I mean the account display name and
12:20 - the account display image it's always in
12:22 - that system slice of Redux so from the
12:26 - account number we're going to be pulling
12:27 - everything out using utility functions
12:29 - you're going to see how it works in just
12:30 - a sec
12:31 - but
12:33 - also keep this component pretty lean and
12:36 - since this account select card is a
12:38 - specialized version of this select card
12:43 - let me go ahead and import that right
12:45 - here so import
12:53 - ant
12:53 - component select card all right
12:56 - so instead of container we can just say
13:00 - select card
13:03 - and actually we probably don't even need
13:05 - this Styles file because we got
13:06 - everything styled
13:09 - so I'm just going to delete this entire
13:11 - file okay
13:13 - so select card what props are you taking
13:16 - so we're going to be giving you a
13:18 - selected prop
13:20 - and an on click Handler
13:25 - all right
13:27 - so for this is selected prop what we're
13:29 - going to do is we're going to say if
13:31 - this account number that we pass in one
13:34 - of these accounts if it's equal to the
13:37 - active account number then it means that
13:40 - we should render it as selected if not
13:42 - we'll just render uh the default state
13:44 - which means it is not selected
13:46 - but because we need to pull out that
13:49 - property let me go ahead and
13:52 - steal what we already wrote from here
13:54 - which is our get active account
13:57 - get active account number selector there
14:01 - we go
14:02 - all right get active account number and
14:04 - we also are going to need to import you
14:06 - selector from your Redux
14:09 - and okay so to
14:12 - actually use this in our components we
14:14 - already saw how to do this make a
14:16 - constant called active account number
14:18 - and this is equal to basically that a
14:20 - slice of Redux
14:22 - and now what we can do
14:26 - is since we're going to be passing in an
14:28 - account number for this is selected
14:30 - state right here we're going to say for
14:33 - the prop account number that we passed
14:35 - then just go ahead and check if it is
14:37 - equal to the active account number from
14:39 - Redux and then if so this is going to be
14:42 - true and the card is going to light up
14:44 - as green now another thing that we want
14:46 - to do is we want to say that whenever
14:48 - one of these cards is clicked then we
14:51 - want to set that account number as the
14:54 - active account number in Redux so how do
14:56 - we do that well since we're going to be
14:59 - dispatching that action Creator function
15:02 - we are going to need to use dispatch and
15:06 - we also need to import
15:08 - app dispatch to uh type it out so that
15:13 - dispatch function in order to use it
15:15 - will say const
15:16 - dispatch and it's equal to use dispatch
15:23 - and then the type of this is just app
15:25 - dispatch
15:28 - now instead of writing the logic right
15:30 - in here I want to create a separate
15:32 - click Handler function so I'll say const
15:34 - and you can click
15:39 - and all right
15:42 - so the logic for this is all right so
15:47 - this is what we'll do we'll say that of
15:49 - course if we select an account and it
15:51 - isn't selected yet then you know just go
15:53 - ahead and set this account number to the
15:55 - active account number
15:56 - however if we click a card and it's
15:59 - already selected then what we want to do
16:01 - is just deselect it so we're either
16:03 - going to dispatch an account number or
16:06 - the value of null so in that case let's
16:09 - just go ahead and write this logic and
16:12 - write it like this
16:15 - so if account number equals active
16:18 - account number in other words if this
16:20 - account is already selected then what we
16:22 - want to do is just dispatch
16:25 - do we even get that okay
16:28 - let me go ahead and find in our store
16:31 - manager the function for setting active
16:34 - account number
16:36 - and we'll import that right here import
16:39 - set active account number from
16:43 - apps speed test or
16:46 - manager
16:48 - and then to use this what we're going to
16:51 - do is we're going to dispatch that
16:52 - action Creator function and then for the
16:54 - value that we want to pass in we're just
16:57 - going to pass in null in other words
16:58 - this is just going to deselect it and
17:01 - then as the else statement
17:04 - so this is saying that if you are
17:06 - already selected then just go ahead and
17:08 - deselect it otherwise if you are not
17:10 - selected yet then as the active account
17:13 - number just set the account number
17:15 - whatever we have passed in
17:18 - and we can actually shorten this up a
17:21 - bit where we can say something like this
17:24 - constant
17:25 - payload equals null or we can say
17:33 - does account number equal active account
17:35 - number if so the payload is going to be
17:38 - equal to null otherwise it's going to be
17:40 - equal to account number and then we can
17:42 - just just dispatch that payload
17:47 - all right and then yes this is the on
17:50 - click Handler and I believe that's all
17:53 - right so this is going to take care of
17:55 - our uh basically our smart Logic the
17:58 - only other thing that we need to do now
18:00 - is inside this
18:03 - hear that dog barking all right well if
18:06 - I gotta listen dog bark and then I guess
18:08 - you guys do we'll fight through it
18:09 - together all right now for the content
18:11 - of this select card what I want to do is
18:14 - I want to display that identifier data
18:18 - and I don't think I have it imported yet
18:23 - and for this identification component I
18:26 - believe that we still have to update
18:28 - some things on here as well okay
18:31 - so in here we're just going to be
18:33 - passing in three props and that is what
18:36 - image do we want to display and then
18:38 - what do we want to have for the top text
18:39 - and the bottom text
18:41 - so let's just go ahead and Export
18:43 - interface
18:45 - I'll say a identification props
18:50 - all right so for the bottom text that's
18:53 - going to be a string bottom text
18:56 - same with the top text
19:02 - and then actually the display image is
19:04 - going to be string as well
19:08 - all right so instead of hard coding
19:10 - everything in you are now going to
19:12 - accept a string as bottom text
19:15 - lay image and top text
19:18 - all right now pretty much easy peasy
19:21 - from here
19:22 - this is where we're going to display the
19:24 - bottom text
19:26 - this as the source is where you're gonna
19:29 - use that image or display image prop and
19:32 - then
19:33 - whatever we pass in for top text uh
19:35 - display right there and now that that is
19:39 - all taken care of
19:42 - then we can go ahead and use it right
19:43 - here now to reference that accounts
19:46 - display image and display name I
19:48 - actually wrote a couple hooks to kind of
19:51 - help out with this and the reason I did
19:54 - this is because
19:56 - for the display image the display image
20:01 - is actually optional so what I have is
20:04 - if you don't have any explicit account
20:07 - image set then it's just gonna have like
20:09 - this default placeholder image and also
20:12 - for the display name if you don't have a
20:14 - display name then is a fallback what
20:17 - it's going to use is the account number
20:18 - for a display name and I also have it
20:22 - set up where you can pass in a value and
20:24 - it's going to truncate it to that
20:25 - certain amount so you'll see in just a
20:28 - second what the heck I'm talking about
20:30 - but first let me just go ahead and
20:32 - actually let me do this
20:34 - we'll see what props we need to pass in
20:36 - so bottom text display image and top
20:38 - text
20:39 - bottom text
20:41 - [Music]
20:42 - play image and top text
20:46 - and actually for the bottom text I
20:48 - always want this to be
20:50 - the account number so I have this
20:52 - truncate function as well and for this
20:55 - what we'll say is this we're going to
20:57 - truncate the account number and we'll
21:00 - say we're going to show the first 32
21:03 - characters
21:04 - now for the display image what we can
21:07 - use is this hook right here and I'll
21:10 - make a variable or constant called
21:12 - display image
21:16 - and this is going to be equal to the
21:18 - hook use safe display image and then
21:21 - this is just going to accept the account
21:22 - number and let's go ahead and take a
21:24 - look at what this function is doing
21:27 - so once it gets the account number it's
21:30 - going to select all the account
21:32 - information from System state basically
21:34 - exactly where the account is don't
21:35 - really need to worry about this and it's
21:37 - going to check if that account has a
21:39 - display image already if it does then of
21:42 - course it's just going to use that one
21:43 - if not then it's going to use this
21:45 - default Avatar this default image that I
21:48 - was talking about
21:49 - so it's just a kind of Handy tool
21:52 - because throughout the app there's a lot
21:54 - of different places you use this display
21:56 - image on the chat here here of course
21:58 - it's going to appear right here and I
22:01 - was just rewriting the same exact logic
22:03 - over and over again so that's why I
22:04 - decided to make it a hook in case you
22:06 - all uh wanted to hear that story
22:09 - and now for the display name
22:12 - I have other similar logic so I'll say
22:15 - const
22:16 - display name
22:19 - and this is just equal to use safe
22:22 - display name and if we take a look at
22:24 - this then we're going to be passing in
22:26 - the account number just like we did
22:28 - right here but it also takes a second
22:32 - param and that is the max length and
22:35 - this is just so you don't display the
22:37 - entire account number this is just say
22:40 - uh we'll give it something like 16. all
22:43 - right
22:44 - so again just to take another peek at
22:46 - this what it's going to do is it's first
22:48 - going to look does this account based on
22:51 - this account number does it have a
22:53 - display name already if so then we'll
22:55 - just use that if not then we'll fall
22:57 - back and use the account number as the
22:59 - display name and this max length is just
23:01 - to truncate that account number so we
23:04 - don't display like that big 64 character
23:06 - text since you really don't want to
23:08 - display that too often
23:10 - just delete this and then for our
23:12 - display name we can just use that as top
23:15 - text
23:17 - all right
23:18 - so now each of these account select
23:21 - cards all we need to do is pass in the
23:22 - account number and everything else
23:24 - should be pretty much just working good
23:26 - to go so to render these out what I'm
23:28 - going to do is close everything but this
23:32 - and then we want to render them in that
23:34 - account modal so modal account modals
23:38 - and are right so we can get rid of these
23:41 - those are just like placeholder data
23:43 - that we had and now I want to import two
23:46 - different things the first thing of
23:48 - course are these account cards
23:50 - replace this
23:53 - and aside from that I also want to
23:56 - import
23:58 - this selector right here get accounts so
24:01 - this is going to give you all the
24:02 - accounts from tnb OS so you can you know
24:06 - easily use it in any component
24:08 - so to use this we're actually going to
24:11 - need that reactor Redux
24:15 - U selector and okay
24:18 - so again this account modal what we're
24:20 - going to do is we're going to iterate
24:21 - through all the accounts that we have on
24:22 - our system and for each one we're going
24:24 - to render out this account card for each
24:27 - so the first thing we need to do is make
24:29 - a variable called accounts and this is
24:31 - equal to you selector
24:33 - of get accounts
24:36 - now all of our account data is in here
24:39 - and what I'm going to do now is just
24:41 - make that render function to render each
24:43 - of these account cards out so render
24:46 - account cards
24:51 - all right so actually I think I do need
24:54 - load Ash for something and this is
25:01 - lodash order by okay so the reason that
25:05 - I want this order by function is because
25:07 - whenever I render out these accounts I
25:12 - want to make sure that they're displayed
25:13 - in alphabetical order which they are not
25:16 - right here but uh I'll sort them by the
25:19 - display name alphabetically and I don't
25:21 - know I just think they look a little bit
25:22 - more organized that way so let's do it
25:25 - now another thing that I want to point
25:27 - out
25:28 - is that the way that these accounts
25:31 - are stored right here is it's an object
25:34 - and they're all keyed by the account
25:36 - number however we really don't care
25:39 - about the key we just care about the
25:40 - values of these which are the actual
25:42 - accounts
25:43 - so this is why
25:46 - uh I'll make a variable called ordered
25:50 - accounts and this is going to be equal
25:52 - to
25:54 - object.values
25:57 - so basically the values of that dict in
26:00 - other words just the list of accounts
26:02 - now with this list what I'm going to do
26:05 - is I'm going to order it alphabetically
26:07 - so whenever you use this order by from
26:10 - modash the first thing is what are you
26:11 - trying to order this array right here
26:14 - and what do you want to order by what
26:16 - property well on accounts
26:20 - there is a display name property
26:23 - and that is what I'm trying to order by
26:27 - so now this is going to be a list of
26:29 - accounts that's ordered alphabetically
26:31 - now with that what we can do is just map
26:34 - each of those out to this account select
26:38 - card right here
26:40 - so I'll say return
26:44 - ordered accounts and I'm going to map
26:46 - each one
26:50 - to an account select card
26:52 - and since the only property we care
26:55 - about is the account number
26:58 - you can just destructure that
27:00 - pass that in as a prop
27:07 - there we go
27:10 - all right so this render function is
27:12 - looking good pretty much going to
27:13 - iterate through all the accounts in the
27:14 - system and convert them to account
27:16 - select cards and now the last thing that
27:19 - we need to do
27:20 - is just say
27:24 - render them out render all the account
27:27 - cards in this modal
27:29 - I believe that's all we need to do so
27:31 - let's see how it worked
27:34 - all right looking sweet let me
27:39 - collapse this so we can see if
27:40 - everything's working all right so now
27:43 - hopefully when I click on and select it
27:46 - check it out
27:47 - so uh where is it speed test manager
27:50 - okay pretty sweet so this Linux desktop
27:54 - huh this is interesting too that
27:57 - um I know why so I was wondering why
28:00 - this isn't ordered alphabetically and it
28:02 - is because even though I comes before L
28:05 - apparently it's sorting based on
28:08 - uppercase and lowercase so a little
28:10 - issue that we'll work on later but
28:12 - either way you can see that whenever I
28:14 - click this one for example what's going
28:17 - to happen is it's going to call this
28:18 - dispatch method to set this BBB or BBB
28:23 - as the active account number and now you
28:25 - can see whenever I click it
28:27 - or AAA then it's going to update to
28:30 - dispatch that and whenever I click one
28:32 - of these again it's going to set null
28:36 - so there you go looks like everything is
28:38 - working properly
28:40 - I gotta say this pretty sweet UI pretty
28:42 - proud of this one a lot more proud than
28:44 - my button that is
28:46 - all right so next up what we'll do is
28:48 - we'll tackle this issue right here so
28:51 - right now this identification is being
28:54 - rendered in this top component
28:56 - and whenever it's rendering account
28:59 - content since it now does have an active
29:01 - account number instead of the button
29:02 - it's rendering the spaced items oops
29:07 - the space items in the space items
29:10 - contains this identification component
29:12 - and it's throwing some typescript
29:14 - warnings right now because we typed it
29:17 - out and we didn't pass in any props
29:18 - right here
29:20 - however what I'm actually going to do is
29:24 - kind of restructure things it's just a
29:26 - wee bit
29:28 - and the reason I want to do this is
29:29 - because right here of course in this top
29:32 - card we're using this identification
29:34 - layout and also well I don't have that
29:37 - button anymore but remember that modal
29:39 - that account modal in those account
29:40 - select cards we're also using this I
29:43 - can't account identification element
29:45 - right here now
29:48 - in order to avoid let me see if I can
29:51 - find it the account select card so in
29:54 - both of those places what we are going
29:56 - to be doing is we're going to be uh
29:58 - plucking off the safe display image and
30:01 - safe display name and passing it through
30:03 - to identification and just to avoid
30:05 - having to have that same exact logic in
30:07 - two different places we can abstract it
30:09 - out to an account identification
30:13 - show you in just a second
30:18 - identification okay
30:22 - so new component
30:27 - new Styles file
30:37 - all right
30:41 - actually let me keep this account select
30:43 - card open because I'm going to be
30:44 - stealing some things from it in just a
30:46 - bit
30:47 - so the first thing is probably this
30:49 - right here because in this account
30:52 - identification all I want to do is just
30:54 - pass in the account number like before
30:57 - and these props are called account
30:59 - identification props
31:02 - all right
31:03 - so the purpose of this is basically just
31:08 - to render out this identification object
31:12 - in the more standardized way
31:18 - all right so we also need to pass in
31:20 - this class name
31:22 - and let me predify this
31:31 - all right so first thing we need to do
31:33 - is in for identification
31:40 - then what else truncate
31:43 - basically going to be moving a lot of
31:45 - this logic that's all I'm really doing
31:47 - here
31:48 - and let's see account number
31:51 - it's going to be passed in uh display
31:54 - image and display name we're actually
31:57 - not going to pass those in as props
31:58 - instead what we're going to be doing is
32:00 - using these hooks
32:04 - Hawks
32:06 - all right
32:09 - let me just borrow you real quick
32:15 - all right pretty cool so this is all
32:18 - we're going to do for this account
32:19 - identification and again the reason that
32:21 - we have this is because now in our
32:25 - account select card we can pretty much
32:28 - just delete all of this
32:33 - we can just use this account
32:35 - identification and pass in the account
32:37 - number
32:45 - and
32:48 - because that is going to clean up that
32:50 - component a bit and also
32:53 - in this top element
32:56 - where'd you go where'd you go where'd
32:58 - you go
33:01 - all right and now in the spaced items I
33:04 - want to rewrite a bit of this too since
33:06 - right now you see that we hard coded in
33:09 - this identification object and then this
33:11 - icon well that was kind of just for a
33:14 - placeholder what we really want to do is
33:16 - just be able to pass in any two valid
33:18 - react nodes and then we're just going to
33:21 - render one on the left and one on the
33:22 - right so let's import
33:29 - import react node from react
33:33 - then
33:37 - spaced item props
33:43 - so like I said we're going to be passing
33:45 - in two props right here and then we'll
33:48 - say left content
33:51 - and this is going to be equal to a react
33:52 - node and same thing with the right
33:54 - content
33:56 - foreign
34:00 - class name left content and right
34:03 - content the left content of course is
34:06 - going to be displayed on the left
34:08 - and the right content instead of this
34:09 - icon it's going to be displayed on the
34:11 - right
34:14 - party it up
34:15 - party it up
34:17 - delete what we don't need and that is
34:20 - looking good for spaced items a proper
34:22 - spaced items component so now in here
34:26 - what we can do is this so if we do not
34:31 - have an active account then go ahead and
34:33 - render the button kick off the model so
34:34 - we can select on otherwise instead of
34:38 - returning select items I actually want
34:40 - to split this out just a bit more I'm
34:43 - gonna let's see render active account so
34:49 - so if you do have an active account then
34:51 - we'll just go ahead and render it and
34:54 - the return value for this is just going
34:56 - to be spaced items however space items
34:59 - now
35:01 - gonna take some props
35:05 - and the props that it takes
35:07 - is a left content and a right content
35:10 - now for the left content we are going to
35:14 - be using
35:15 - this account identification that we just
35:17 - wrote so components
35:19 - account identification
35:23 - for that
35:27 - copy this
35:31 - [Music]
35:33 - all right
35:37 - so if we have an active account then we
35:39 - want to display
35:42 - the account
35:45 - identification is left content
35:48 - and the account number for that is just
35:50 - the active account number so account
35:52 - number equals active account number
35:55 - and it is saying all right so the reason
35:58 - that we're getting this typescript issue
36:00 - is it's saying string or null is not
36:02 - assignable to type string and that is
36:05 - because it says string is only
36:07 - acceptable here in other words you need
36:09 - to have an account number however this
36:11 - active account number that we're passing
36:12 - in since we're selecting it from Redux
36:15 - and it can technically be string or null
36:17 - then it's uh saying hey if you throw me
36:20 - a null I'm gonna flip out I don't know
36:21 - what to do however what we can do is we
36:24 - can safely add this exclamation mark and
36:26 - the reason that we can do this is
36:28 - because we know in this function
36:33 - whenever we don't have an active account
36:36 - number or in other words whenever it's
36:38 - set to null then we're just going to
36:39 - return the button and never call this
36:41 - function so we're only going to call
36:43 - render active account if we indeed do
36:45 - have an active account number so we can
36:48 - let typescript know that we're always
36:49 - going to have it at this point in time
36:51 - so don't worry about us we I so again on
36:54 - the active account the left portion of
36:57 - this just like you see right here this
36:59 - is going to be this account
37:00 - identification looking good and to the
37:03 - right of this is where we're going to
37:04 - render that pencil icon and whenever we
37:07 - click this this is also going to display
37:09 - that modal
37:10 - so on that note let's first go ahead and
37:14 - import the pencil icon and I believe
37:17 - that icon was in
37:20 - yeah right here so we had that icon in
37:23 - spaced items let me just close some of
37:25 - this out all right so before we had that
37:28 - icon uh styled in space items because
37:31 - we're just using it as kind of a
37:32 - template but now we can move it to where
37:36 - we actually need it which is top
37:41 - so just move all this over
37:44 - and all right
37:49 - so now this icon is a component that we
37:51 - can use in top
37:53 - so we are saying for the right content
37:56 - to want to display the icon
38:02 - path for this is going to be this pencil
38:05 - icon
38:08 - and for the size we'll say 28 pixels
38:13 - actually don't need pixels just 28 right
38:15 - there now
38:17 - holy moly okay
38:21 - actually I think what you do is you pass
38:23 - in this
38:27 - like that
38:28 - all right that's a little bit better
38:30 - all right so now the last step for this
38:33 - left section right here is we need to
38:34 - add that on click Handler so whenever we
38:37 - click this pencil icon then
38:40 - it pops open the modal as well however I
38:45 - have a feeling that we need to do
38:47 - something a little bit unique for this
38:51 - okay
38:55 - if I remember correctly yeah it's not
38:58 - Auto completing so I already know
38:59 - there's going to issue but anyways the
39:01 - reason that we can't add this on click
39:04 - to this icon directly
39:06 - let me just make sure well we can but
39:08 - it's going to throw some errors it's uh
39:10 - not the best practice
39:12 - um I remember reading before why we
39:15 - weren't able to add this on click right
39:17 - on this icon directly and that is
39:19 - because
39:21 - um the material icons Library they
39:24 - specifically did not allow this because
39:26 - they uh said that this icon is supposed
39:29 - to be a display element only and you
39:31 - should only add on click to like regular
39:34 - clickable elements like links and
39:36 - buttons so on and so forth so that's why
39:38 - it's saying hey
39:39 - um this prop is going to throw some
39:41 - errors now to get around this for the
39:43 - time being what we can do
39:46 - is uh let's just do this you can just
39:49 - make a div
39:50 - and in this div is where we're going to
39:52 - put our icon and then we can just move
39:55 - this on click Handler to the div
39:57 - entionally what we probably want to do
40:00 - is make a separate like clickable icon
40:02 - where we can just pass in this pencil
40:04 - and I say this because we are basically
40:08 - going to end up rewriting the same exact
40:10 - thing one for rendering the active
40:12 - account
40:14 - which we have right here and then the
40:16 - other for rendering the Active network
40:17 - by the way
40:19 - let's make sure that works looking good
40:22 - and you know just to uh keep everything
40:24 - nice and dry it'll probably be best to
40:28 - eventually split this out into its own
40:30 - component but for right now everything
40:32 - appears to be working so
40:36 - let me just fix these errors it's kind
40:38 - of annoying me
40:41 - all right
40:43 - so I think we're to a pretty good
40:45 - stopping point right now
40:47 - got all the account logic working on the
40:50 - left so whenever we
40:52 - well what we can do is we can have no
40:55 - account this is the default we click
40:57 - this it pops open this modal and we can
40:59 - just select one and this updates our
41:01 - Redux State and then once we have one
41:03 - selected got this nice little pencil
41:05 - icon to pop that open again
41:07 - and yeah looking pretty sweet so one
41:10 - other thing I saw is this is probably
41:12 - too much text on the bottom so I'm going
41:14 - to trim that down a little bit and once
41:16 - that's done we're ready to start moving
41:18 - on to this network section so uh a lot
41:21 - of work so far but to be honest I'm kind
41:23 - of digging this little app right here
41:25 - pretty cool speed test app so I'm pumped
41:29 - uh good job so far and see you in the
41:31 - next video

Cleaned transcript:

already all welcome back and in the last video we went ahead and we set up our modal so now what I want to do is kind of build the next piece of this which is building out these cards so whenever you click one it actually sets either the active account in Redux or Active network it's going to be the pretty much the same exact styling so let's just go ahead and first make a generic select card component and this isn't going to have any of that Redux specific logic at all all it's going to do is it's going to have a certain type of styling whether that card is selected or not and then we'll reuse this whenever we add in that account or network specific logic later on but for now we'll keep it nice and dumb so under components I'm going to make a new directory and I'm going to call it select card in here do my normal component templating stuff component in a Styles file and again this component is named select card so let's go ahead and first write the props that we're going to be passing in so export interface select card props again since I'm defining uh props apparently that makes my IDE lag as usual it's so weird why it always does that interesting actually maybe it's typescript trying to check everything who knows okay now let's see what else we can steal so we are going to be passing in children for this because remember just like our other components the select card is basically just the container that has a state are you selected or are you not now it doesn't really care about what's inside it so that's why whenever we pass in children actually we can do this right now we're just going to say display whatever we pass in right in the middle of this container now another prop that we're going to be passing in is is selected and this is going to be equal to a Boolean and the reason that we are going to passive this in and this is a pretty cool trick that we're going to see in just a second but what we're going to do is we're going to apply this prop to this container right here which is this container now even though we don't have this setup right now I'll show you in just a bit how we can accept or listen for this prop right here and depending on if this is true or false then we're going to have a certain bit of CSS and it's going to be like uh we'll make some like border or background or something some selected State and we'll conditionally apply that CSS if this is true or if it's not we'll just apply the default CSS so that's what we are going to do and then the last thing that I'm going to be passing in here is an on click function and we won't write that functionality right here we're right in the parent component but basically just saying that there is going to be some functionality where when you click this something happens and of course what's going to happen in this case is it's going to convert is selected to true and it's also going to update that state in Redux so again all of this is going to be written in the parent component but we do need to accept the prop right here so we already have the typing for this it's under shared types and it's just called generic void function basically a function that doesn't return anything at all and we're going to be passing that in as on click and then we will just say that in addition to this on click on click all right so what I want to do from here is before we even worried about this selected specific styling I want to go ahead and just paste in my generic styling and I'll just explain real quick what this is so it's pretty much just going to be a um like a transparent card with some padding so on and so forth and then whenever you hover over it it's going to have a slight background kind of like that button that we just styled and the only other kind of special thing about this is on the last child I have margin bottom zero and the reason for that is in our modal we already have a 16 pixel padding all around it so if all of these cards since they're going to stack on each other if we did have a margin bottom on the very last one then we're going to have not only 16 pixels but 12 pixels from this card as well so anyways we're just saying that on the very last card since we already have padding for the modal then you don't need to worry about a margin button for this and yeah there you go so now what we want to do is since we have this generic styling for this card we want to add in some smart logic here to say when this prop that's passed then is selected whenever this is true then we want to apply some special styling and that styling is just going to change the background and the Border a little bit just to give it that selected state so in order to do this the first thing we need to do is import this CSS method from styled components and we are going to create a variable and we'll just say selected mixing and this is equal to a little snippet of CSS and in here is where we could put our select styling right here so again all this is doing is it's changing this gray default border and background to a slight shade of green and I also updated some of these hover properties as well since uh you'll see in a bit but if I didn't have it it just looks a little bit weird whenever we selected or excuse me whenever we hover over the selected card so now what we want to do in this container is basically say whenever this is selected prop is true then we want to apply this mix in so how do we do that well first thing we need to do is we need to accept that prop and how do we do that well we can type it out right here so put those less than and greater than signs or greater than less than signs and then we say what props are we prepared to accept well we're going to be accepting an is selected prop and that type is going to be a Boolean value so now in this component right here or this div we can now use this using that templating language that we saw before dollar sign curly braces and again anything in here you can pretty much just treat as JavaScript so with styled components what we can do is we can actually call a function right inside here and whenever we do this what sound components is going to do is it's going to call this by passing in whatever props we Define right here so since the only prop that we passed in is is selected we can go ahead and destructure that right here and now we can pretty much work with it however we want so all we want to do with is selected variable is we want to say whenever this variable is true then what we can do is we can render out this selected mixin so again all this div is going to do is it's going to listen for this is selected prop and if you see back in the main component that little error that was there it went away because we typed it out properly and it's now ready to accept this prop and then once we pass it through style components is going to call a function to listen to it and for the logic we wrote we just say that whenever it's true then in addition to all this styling we also want to render this CSS as well which is going to give that selected state that nice pretty green background and all right I think that this component is good so what we can do to test it out is go to our account modal and where it said account cards here let's just go ahead and import this select card and we'll just hard code in the value true or false whenever we're passing in this prop but eventually of course that's going to be dynamic but anyways import select card from Maps test select card all right and let's actually let's do this so the select card is props we need to pass in a child element and for that child element what we can do is pass in that identification and again this is going to be dynamic as well but just to have something that we pass in say we're passing that identification and what other props does it take is selected and this is a Boolean so it's selected we'll say that this one is false we'll have one be false one be true just so we can see the difference in styling and now another prop that this takes the last prop is an on click Handler and since we don't have this written yet what we can actually do is import from low Dash and that is lodash nope and this is basically just a function that does nothing we can use it whenever we need to pass in a function but we don't have a one written yet which is this exact case scenario so this all looks good to go and I'm pretty confident that this is going to work so let me pass in True to this one and by the way um for anyone who doesn't know this instead of explicitly passing in true like this you can also write it like this it both means the exact same thing passing in a value is true just a little shorter syntax and now let me see if anything all right so check it out now in our modal we have those select cards and this is the state by default the deselected one and you can see that little hover what I'm talking about right here in the selected state is green background in the little green border and like I said the reason that I added let me show you the reason that I added this hover color as well an explicit background is because well I'll show you how weird it looks if I don't have it so you see how when I don't have it then it changes back to like gray whenever I hover over the selected state so I just thought that was kind of weird so whenever it's selected no matter if I'm hovering over it or not I just always want to keep it that green color and there we go so what I want to do from here is I want to use that select card and from that I'm going to make two specialized components one is going to be called the account select card and the other one is going to be called the network select card so of course let's start with the account one since that's the model we're working on right here and for this can probably just all right let me just close all these okay so a new component and that is going to be called account select card make my component templating all right so we're making a component called a count select card now for this what I'm going to be doing you know what this is so weird I didn't even type any props yet and my IDE already started to lag it knows that I'm about to type my interface wow okay uh account select card props strange okay so the way I'm going to structure this component is I'm only going to be passing in the account number because remember when I said early on that we want to always use the account number when we can because we don't want to be copying this account object over and over in all our apps the source of Truth for the account and by that I mean the account display name and the account display image it's always in that system slice of Redux so from the account number we're going to be pulling everything out using utility functions you're going to see how it works in just a sec but also keep this component pretty lean and since this account select card is a specialized version of this select card let me go ahead and import that right here so import ant component select card all right so instead of container we can just say select card and actually we probably don't even need this Styles file because we got everything styled so I'm just going to delete this entire file okay so select card what props are you taking so we're going to be giving you a selected prop and an on click Handler all right so for this is selected prop what we're going to do is we're going to say if this account number that we pass in one of these accounts if it's equal to the active account number then it means that we should render it as selected if not we'll just render uh the default state which means it is not selected but because we need to pull out that property let me go ahead and steal what we already wrote from here which is our get active account get active account number selector there we go all right get active account number and we also are going to need to import you selector from your Redux and okay so to actually use this in our components we already saw how to do this make a constant called active account number and this is equal to basically that a slice of Redux and now what we can do is since we're going to be passing in an account number for this is selected state right here we're going to say for the prop account number that we passed then just go ahead and check if it is equal to the active account number from Redux and then if so this is going to be true and the card is going to light up as green now another thing that we want to do is we want to say that whenever one of these cards is clicked then we want to set that account number as the active account number in Redux so how do we do that well since we're going to be dispatching that action Creator function we are going to need to use dispatch and we also need to import app dispatch to uh type it out so that dispatch function in order to use it will say const dispatch and it's equal to use dispatch and then the type of this is just app dispatch now instead of writing the logic right in here I want to create a separate click Handler function so I'll say const and you can click and all right so the logic for this is all right so this is what we'll do we'll say that of course if we select an account and it isn't selected yet then you know just go ahead and set this account number to the active account number however if we click a card and it's already selected then what we want to do is just deselect it so we're either going to dispatch an account number or the value of null so in that case let's just go ahead and write this logic and write it like this so if account number equals active account number in other words if this account is already selected then what we want to do is just dispatch do we even get that okay let me go ahead and find in our store manager the function for setting active account number and we'll import that right here import set active account number from apps speed test or manager and then to use this what we're going to do is we're going to dispatch that action Creator function and then for the value that we want to pass in we're just going to pass in null in other words this is just going to deselect it and then as the else statement so this is saying that if you are already selected then just go ahead and deselect it otherwise if you are not selected yet then as the active account number just set the account number whatever we have passed in and we can actually shorten this up a bit where we can say something like this constant payload equals null or we can say does account number equal active account number if so the payload is going to be equal to null otherwise it's going to be equal to account number and then we can just just dispatch that payload all right and then yes this is the on click Handler and I believe that's all right so this is going to take care of our uh basically our smart Logic the only other thing that we need to do now is inside this hear that dog barking all right well if I gotta listen dog bark and then I guess you guys do we'll fight through it together all right now for the content of this select card what I want to do is I want to display that identifier data and I don't think I have it imported yet and for this identification component I believe that we still have to update some things on here as well okay so in here we're just going to be passing in three props and that is what image do we want to display and then what do we want to have for the top text and the bottom text so let's just go ahead and Export interface I'll say a identification props all right so for the bottom text that's going to be a string bottom text same with the top text and then actually the display image is going to be string as well all right so instead of hard coding everything in you are now going to accept a string as bottom text lay image and top text all right now pretty much easy peasy from here this is where we're going to display the bottom text this as the source is where you're gonna use that image or display image prop and then whatever we pass in for top text uh display right there and now that that is all taken care of then we can go ahead and use it right here now to reference that accounts display image and display name I actually wrote a couple hooks to kind of help out with this and the reason I did this is because for the display image the display image is actually optional so what I have is if you don't have any explicit account image set then it's just gonna have like this default placeholder image and also for the display name if you don't have a display name then is a fallback what it's going to use is the account number for a display name and I also have it set up where you can pass in a value and it's going to truncate it to that certain amount so you'll see in just a second what the heck I'm talking about but first let me just go ahead and actually let me do this we'll see what props we need to pass in so bottom text display image and top text bottom text play image and top text and actually for the bottom text I always want this to be the account number so I have this truncate function as well and for this what we'll say is this we're going to truncate the account number and we'll say we're going to show the first 32 characters now for the display image what we can use is this hook right here and I'll make a variable or constant called display image and this is going to be equal to the hook use safe display image and then this is just going to accept the account number and let's go ahead and take a look at what this function is doing so once it gets the account number it's going to select all the account information from System state basically exactly where the account is don't really need to worry about this and it's going to check if that account has a display image already if it does then of course it's just going to use that one if not then it's going to use this default Avatar this default image that I was talking about so it's just a kind of Handy tool because throughout the app there's a lot of different places you use this display image on the chat here here of course it's going to appear right here and I was just rewriting the same exact logic over and over again so that's why I decided to make it a hook in case you all uh wanted to hear that story and now for the display name I have other similar logic so I'll say const display name and this is just equal to use safe display name and if we take a look at this then we're going to be passing in the account number just like we did right here but it also takes a second param and that is the max length and this is just so you don't display the entire account number this is just say uh we'll give it something like 16. all right so again just to take another peek at this what it's going to do is it's first going to look does this account based on this account number does it have a display name already if so then we'll just use that if not then we'll fall back and use the account number as the display name and this max length is just to truncate that account number so we don't display like that big 64 character text since you really don't want to display that too often just delete this and then for our display name we can just use that as top text all right so now each of these account select cards all we need to do is pass in the account number and everything else should be pretty much just working good to go so to render these out what I'm going to do is close everything but this and then we want to render them in that account modal so modal account modals and are right so we can get rid of these those are just like placeholder data that we had and now I want to import two different things the first thing of course are these account cards replace this and aside from that I also want to import this selector right here get accounts so this is going to give you all the accounts from tnb OS so you can you know easily use it in any component so to use this we're actually going to need that reactor Redux U selector and okay so again this account modal what we're going to do is we're going to iterate through all the accounts that we have on our system and for each one we're going to render out this account card for each so the first thing we need to do is make a variable called accounts and this is equal to you selector of get accounts now all of our account data is in here and what I'm going to do now is just make that render function to render each of these account cards out so render account cards all right so actually I think I do need load Ash for something and this is lodash order by okay so the reason that I want this order by function is because whenever I render out these accounts I want to make sure that they're displayed in alphabetical order which they are not right here but uh I'll sort them by the display name alphabetically and I don't know I just think they look a little bit more organized that way so let's do it now another thing that I want to point out is that the way that these accounts are stored right here is it's an object and they're all keyed by the account number however we really don't care about the key we just care about the values of these which are the actual accounts so this is why uh I'll make a variable called ordered accounts and this is going to be equal to object.values so basically the values of that dict in other words just the list of accounts now with this list what I'm going to do is I'm going to order it alphabetically so whenever you use this order by from modash the first thing is what are you trying to order this array right here and what do you want to order by what property well on accounts there is a display name property and that is what I'm trying to order by so now this is going to be a list of accounts that's ordered alphabetically now with that what we can do is just map each of those out to this account select card right here so I'll say return ordered accounts and I'm going to map each one to an account select card and since the only property we care about is the account number you can just destructure that pass that in as a prop there we go all right so this render function is looking good pretty much going to iterate through all the accounts in the system and convert them to account select cards and now the last thing that we need to do is just say render them out render all the account cards in this modal I believe that's all we need to do so let's see how it worked all right looking sweet let me collapse this so we can see if everything's working all right so now hopefully when I click on and select it check it out so uh where is it speed test manager okay pretty sweet so this Linux desktop huh this is interesting too that um I know why so I was wondering why this isn't ordered alphabetically and it is because even though I comes before L apparently it's sorting based on uppercase and lowercase so a little issue that we'll work on later but either way you can see that whenever I click this one for example what's going to happen is it's going to call this dispatch method to set this BBB or BBB as the active account number and now you can see whenever I click it or AAA then it's going to update to dispatch that and whenever I click one of these again it's going to set null so there you go looks like everything is working properly I gotta say this pretty sweet UI pretty proud of this one a lot more proud than my button that is all right so next up what we'll do is we'll tackle this issue right here so right now this identification is being rendered in this top component and whenever it's rendering account content since it now does have an active account number instead of the button it's rendering the spaced items oops the space items in the space items contains this identification component and it's throwing some typescript warnings right now because we typed it out and we didn't pass in any props right here however what I'm actually going to do is kind of restructure things it's just a wee bit and the reason I want to do this is because right here of course in this top card we're using this identification layout and also well I don't have that button anymore but remember that modal that account modal in those account select cards we're also using this I can't account identification element right here now in order to avoid let me see if I can find it the account select card so in both of those places what we are going to be doing is we're going to be uh plucking off the safe display image and safe display name and passing it through to identification and just to avoid having to have that same exact logic in two different places we can abstract it out to an account identification show you in just a second identification okay so new component new Styles file all right actually let me keep this account select card open because I'm going to be stealing some things from it in just a bit so the first thing is probably this right here because in this account identification all I want to do is just pass in the account number like before and these props are called account identification props all right so the purpose of this is basically just to render out this identification object in the more standardized way all right so we also need to pass in this class name and let me predify this all right so first thing we need to do is in for identification then what else truncate basically going to be moving a lot of this logic that's all I'm really doing here and let's see account number it's going to be passed in uh display image and display name we're actually not going to pass those in as props instead what we're going to be doing is using these hooks Hawks all right let me just borrow you real quick all right pretty cool so this is all we're going to do for this account identification and again the reason that we have this is because now in our account select card we can pretty much just delete all of this we can just use this account identification and pass in the account number and because that is going to clean up that component a bit and also in this top element where'd you go where'd you go where'd you go all right and now in the spaced items I want to rewrite a bit of this too since right now you see that we hard coded in this identification object and then this icon well that was kind of just for a placeholder what we really want to do is just be able to pass in any two valid react nodes and then we're just going to render one on the left and one on the right so let's import import react node from react then spaced item props so like I said we're going to be passing in two props right here and then we'll say left content and this is going to be equal to a react node and same thing with the right content foreign class name left content and right content the left content of course is going to be displayed on the left and the right content instead of this icon it's going to be displayed on the right party it up party it up delete what we don't need and that is looking good for spaced items a proper spaced items component so now in here what we can do is this so if we do not have an active account then go ahead and render the button kick off the model so we can select on otherwise instead of returning select items I actually want to split this out just a bit more I'm gonna let's see render active account so so if you do have an active account then we'll just go ahead and render it and the return value for this is just going to be spaced items however space items now gonna take some props and the props that it takes is a left content and a right content now for the left content we are going to be using this account identification that we just wrote so components account identification for that copy this all right so if we have an active account then we want to display the account identification is left content and the account number for that is just the active account number so account number equals active account number and it is saying all right so the reason that we're getting this typescript issue is it's saying string or null is not assignable to type string and that is because it says string is only acceptable here in other words you need to have an account number however this active account number that we're passing in since we're selecting it from Redux and it can technically be string or null then it's uh saying hey if you throw me a null I'm gonna flip out I don't know what to do however what we can do is we can safely add this exclamation mark and the reason that we can do this is because we know in this function whenever we don't have an active account number or in other words whenever it's set to null then we're just going to return the button and never call this function so we're only going to call render active account if we indeed do have an active account number so we can let typescript know that we're always going to have it at this point in time so don't worry about us we I so again on the active account the left portion of this just like you see right here this is going to be this account identification looking good and to the right of this is where we're going to render that pencil icon and whenever we click this this is also going to display that modal so on that note let's first go ahead and import the pencil icon and I believe that icon was in yeah right here so we had that icon in spaced items let me just close some of this out all right so before we had that icon uh styled in space items because we're just using it as kind of a template but now we can move it to where we actually need it which is top so just move all this over and all right so now this icon is a component that we can use in top so we are saying for the right content to want to display the icon path for this is going to be this pencil icon and for the size we'll say 28 pixels actually don't need pixels just 28 right there now holy moly okay actually I think what you do is you pass in this like that all right that's a little bit better all right so now the last step for this left section right here is we need to add that on click Handler so whenever we click this pencil icon then it pops open the modal as well however I have a feeling that we need to do something a little bit unique for this okay if I remember correctly yeah it's not Auto completing so I already know there's going to issue but anyways the reason that we can't add this on click to this icon directly let me just make sure well we can but it's going to throw some errors it's uh not the best practice um I remember reading before why we weren't able to add this on click right on this icon directly and that is because um the material icons Library they specifically did not allow this because they uh said that this icon is supposed to be a display element only and you should only add on click to like regular clickable elements like links and buttons so on and so forth so that's why it's saying hey um this prop is going to throw some errors now to get around this for the time being what we can do is uh let's just do this you can just make a div and in this div is where we're going to put our icon and then we can just move this on click Handler to the div entionally what we probably want to do is make a separate like clickable icon where we can just pass in this pencil and I say this because we are basically going to end up rewriting the same exact thing one for rendering the active account which we have right here and then the other for rendering the Active network by the way let's make sure that works looking good and you know just to uh keep everything nice and dry it'll probably be best to eventually split this out into its own component but for right now everything appears to be working so let me just fix these errors it's kind of annoying me all right so I think we're to a pretty good stopping point right now got all the account logic working on the left so whenever we well what we can do is we can have no account this is the default we click this it pops open this modal and we can just select one and this updates our Redux State and then once we have one selected got this nice little pencil icon to pop that open again and yeah looking pretty sweet so one other thing I saw is this is probably too much text on the bottom so I'm going to trim that down a little bit and once that's done we're ready to start moving on to this network section so uh a lot of work so far but to be honest I'm kind of digging this little app right here pretty cool speed test app so I'm pumped uh good job so far and see you in the next video
