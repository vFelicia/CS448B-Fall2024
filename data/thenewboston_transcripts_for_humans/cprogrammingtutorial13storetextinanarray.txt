With timestamps:

00:00 - what's up guys welcome to your 13th
00:03 - tutorial I think you know I should
00:04 - really write this down because at the
00:06 - beginning of every tutorial I'm like
00:08 - what tutorial number is it but anyways
00:10 - welcome to your 13th tutorial I think if
00:12 - it's not who cares and in this tutorial
00:16 - we're done learning you know Concepts
00:19 - Theory let's go ahead and actually build
00:21 - a useful program so let me uh throw
00:24 - something at you say you own This
00:26 - brilliant software company and a client
00:29 - comes in and he's like I have a million
00:32 - dooll idea for piece of software I need
00:34 - you to build I want a piece of software
00:37 - that allows a user to enter their name
00:39 - like Bucky Roberts and then enter a
00:42 - sport like hockey or football and then
00:46 - it prints out on the screen Bucky
00:48 - Roberts loves hockey bam there you go
00:52 - how awesome of idea is that and we're
00:54 - like oh yeah that's awesome you are an
00:56 - idiot but we don't tell them that
00:58 - because they're paying us what we do is
01:00 - we go ahead and recreate this program
01:02 - anyways so let's go ahead and create it
01:05 - right now and earn our money well let's
01:08 - go ahead and we decided to take whatever
01:11 - name they entered and we decid the best
01:14 - way to store this is in a character
01:15 - array all right makes sense so let's go
01:18 - ahead and 20 characters should be fine
01:21 - enough and now we need a blank array for
01:24 - the sport that they enter so character
01:26 - array Sport and see no sport is is more
01:30 - than 20 characters long unless it's
01:31 - Russian and I got a
01:35 - joke
01:37 - um if someone asks you are you Russian
01:40 - be like no I'm not in a hurry get it I'm
01:43 - sorry ah that was dumb I probably should
01:45 - just redo this whole tutorial and not
01:48 - include that joke but anyways it's a
01:50 - dumb joke one free dumb joke per
01:52 - tutorial so anyways back to the
01:55 - tutorial now that we have two blank
01:58 - character Ras one one for name and one
02:01 - for sport we now allow them to populate
02:04 - the array and here is how you allow the
02:06 - user to populate an array C of course
02:10 - name and now whatever they whatever text
02:12 - they enter is going to be stored in the
02:14 - character array name and
02:17 - cin
02:19 - Sport and now whatever text they enter
02:22 - is going to be stored in the character
02:24 - array sport looks pretty good and now
02:27 - all we have to do is remember what he
02:29 - said he wants the name then loves sport
02:32 - like Bucky Roberts loves football so
02:35 - let's go ahead and do that for him
02:41 - name
02:43 - loves Sport and go ahead and end that
02:47 - line N L for end line so now what's
02:51 - going to happen is this it's going to
02:53 - put blank cursor on our screen have US
02:56 - enter the name and then you're going to
02:58 - want to press enter
03:00 - enter the sport press enter again and
03:03 - it's going to say Bucky Roberts loves
03:04 - football so let's go ahead and run this
03:06 - and see what we
03:07 - get Bucky Roberts enter whoa whoa whoa
03:12 - this program is messing up already Bucky
03:14 - loves Roberts what that sounds like some
03:16 - gay joke and I don't like that one bit
03:19 - so let's go ahead and see what we did
03:20 - wrong and now we see this whenever we
03:24 - build a program this way here's what
03:26 - happens it allows us to enter our name
03:30 - which it saw is Bucky and then it saw a
03:33 - space and then our compiler thought all
03:35 - right whenever you hit a space this must
03:38 - be a new variable that you're going to
03:40 - enter and I'm going to store this in
03:42 - sport but what we want to do is allow
03:45 - the user to enter their entire name and
03:48 - then once they hit enter we're going to
03:51 - want them to uh input the sport so
03:54 - instead of separating it with a space
03:57 - we're going to want to separate the
03:59 - variables with an enter or return
04:03 - whatever keyboard you have so how do we
04:05 - fix this well this is something we
04:07 - haven't gone over yet but I'm about to
04:09 - teach that to you guys right now instead
04:11 - of cin go ahead and type cin.get
04:17 - let's go ahead and delete these instead
04:20 - of cin go ahead and put
04:22 - cin.get
04:23 - line and now as your
04:27 - parentheses all right let's back up for
04:29 - a second Bucky you're going a little too
04:31 - fast git line is a function that allows
04:35 - the user to enter a line of text instead
04:38 - of just one word separated by space so
04:41 - now what git line is going to do it's
04:44 - the same thing as you know allows the
04:46 - users to enter text but this is going to
04:49 - take the entire line of text and now
04:52 - when they hit enter it's going to end it
04:54 - so this is a better way than just
04:56 - separating everything with spaces it
04:58 - waits until the user hits enter and once
05:01 - they do it takes whatever text is on
05:03 - that line and stores it in this variable
05:06 - which is in this case name so anyways
05:09 - this function takes two parameters the
05:11 - first thing is what variable or in this
05:14 - case what array do you want to store
05:16 - this text inside name of course and it
05:20 - takes another parameter which you
05:22 - usually just have the same as your array
05:24 - what is the maximum amount of characters
05:27 - that you can enter and let's just go
05:28 - ahead and press 20
05:31 - and now this is going to take the entire
05:33 - first line of text so this will take
05:36 - Bucky Roberts and store in the array
05:40 - name perfect that's what we wanted and
05:44 - C.G line again of course we need another
05:47 - one for
05:50 - sport and 20 as well just go ahead and
05:53 - set this second parameter equal to
05:55 - however long you made your array and now
05:57 - let's go ahead and run this program
05:59 - again
06:00 - build and
06:02 - run Bucky Roberts go ahead and press
06:05 - enter and
06:07 - press football and make sure you spell
06:10 - it with two T's and not two L's or else
06:12 - it won't work and check this out Bucky
06:15 - Roberts loves football how awesome is
06:18 - that we just sold this program to this
06:20 - guy for a million dollars bam I just
06:22 - made you guys millionaire so anyways the
06:25 - key to this tutoral is this whenever you
06:28 - want to take any bit of text and store
06:32 - it inside an array you know whenever you
06:35 - want the user to enter their own text
06:38 - you can do it in two different ways one
06:40 - is just using the basic CN that we
06:43 - learned before and this is going to take
06:45 - anything they entered and treat each
06:48 - word as a new variable or you have a
06:51 - different way to do this if you want to
06:53 - take whatever they entered on an entire
06:55 - line and store that in a character array
06:58 - you need to use this special ual
06:59 - function that I taught you guys about
07:01 - called CN git line and of course this
07:04 - function takes two parameters the first
07:06 - one is name or whatever variable you
07:09 - want to store it inside and the second
07:11 - one is how many is the maximum amount of
07:14 - characters you can store and let me show
07:17 - you guys what I mean by this the user
07:20 - can enter more than 20 but it's not
07:22 - going to store more than 20 so let me go
07:24 - ahead and build this and show you guys
07:26 - Bucky Roberts is the best guy ever
07:31 - that's clearly more than 20 I think
07:34 - let's just add this just in case and and
07:38 - check this out Bucky Roberts is the
07:41 - loves it stops at 20 and then you know
07:45 - it's not going to mess up if the user
07:47 - enters more than 20 it's just going to
07:49 - cut it off right at 20 so anyways that's
07:52 - what this little uh you know stop sign
07:55 - means the second parameter so anyways
07:58 - that is the difference between C n and
08:00 - CN get line one takes only a word
08:04 - separated by spaces and one takes an
08:06 - entire line of text so in this case this
08:09 - would be the better way so anyways uh
08:12 - thank you guys for watching don't forget
08:13 - to subscribe and that's all I have for
08:14 - you guys for this tutorial in the next
08:17 - tutorial I promise I'll be going over
08:19 - something a little more interesting or
08:21 - will I see you

Cleaned transcript:

what's up guys welcome to your 13th tutorial I think you know I should really write this down because at the beginning of every tutorial I'm like what tutorial number is it but anyways welcome to your 13th tutorial I think if it's not who cares and in this tutorial we're done learning you know Concepts Theory let's go ahead and actually build a useful program so let me uh throw something at you say you own This brilliant software company and a client comes in and he's like I have a million dooll idea for piece of software I need you to build I want a piece of software that allows a user to enter their name like Bucky Roberts and then enter a sport like hockey or football and then it prints out on the screen Bucky Roberts loves hockey bam there you go how awesome of idea is that and we're like oh yeah that's awesome you are an idiot but we don't tell them that because they're paying us what we do is we go ahead and recreate this program anyways so let's go ahead and create it right now and earn our money well let's go ahead and we decided to take whatever name they entered and we decid the best way to store this is in a character array all right makes sense so let's go ahead and 20 characters should be fine enough and now we need a blank array for the sport that they enter so character array Sport and see no sport is is more than 20 characters long unless it's Russian and I got a joke um if someone asks you are you Russian be like no I'm not in a hurry get it I'm sorry ah that was dumb I probably should just redo this whole tutorial and not include that joke but anyways it's a dumb joke one free dumb joke per tutorial so anyways back to the tutorial now that we have two blank character Ras one one for name and one for sport we now allow them to populate the array and here is how you allow the user to populate an array C of course name and now whatever they whatever text they enter is going to be stored in the character array name and cin Sport and now whatever text they enter is going to be stored in the character array sport looks pretty good and now all we have to do is remember what he said he wants the name then loves sport like Bucky Roberts loves football so let's go ahead and do that for him name loves Sport and go ahead and end that line N L for end line so now what's going to happen is this it's going to put blank cursor on our screen have US enter the name and then you're going to want to press enter enter the sport press enter again and it's going to say Bucky Roberts loves football so let's go ahead and run this and see what we get Bucky Roberts enter whoa whoa whoa this program is messing up already Bucky loves Roberts what that sounds like some gay joke and I don't like that one bit so let's go ahead and see what we did wrong and now we see this whenever we build a program this way here's what happens it allows us to enter our name which it saw is Bucky and then it saw a space and then our compiler thought all right whenever you hit a space this must be a new variable that you're going to enter and I'm going to store this in sport but what we want to do is allow the user to enter their entire name and then once they hit enter we're going to want them to uh input the sport so instead of separating it with a space we're going to want to separate the variables with an enter or return whatever keyboard you have so how do we fix this well this is something we haven't gone over yet but I'm about to teach that to you guys right now instead of cin go ahead and type cin.get let's go ahead and delete these instead of cin go ahead and put cin.get line and now as your parentheses all right let's back up for a second Bucky you're going a little too fast git line is a function that allows the user to enter a line of text instead of just one word separated by space so now what git line is going to do it's the same thing as you know allows the users to enter text but this is going to take the entire line of text and now when they hit enter it's going to end it so this is a better way than just separating everything with spaces it waits until the user hits enter and once they do it takes whatever text is on that line and stores it in this variable which is in this case name so anyways this function takes two parameters the first thing is what variable or in this case what array do you want to store this text inside name of course and it takes another parameter which you usually just have the same as your array what is the maximum amount of characters that you can enter and let's just go ahead and press 20 and now this is going to take the entire first line of text so this will take Bucky Roberts and store in the array name perfect that's what we wanted and C.G line again of course we need another one for sport and 20 as well just go ahead and set this second parameter equal to however long you made your array and now let's go ahead and run this program again build and run Bucky Roberts go ahead and press enter and press football and make sure you spell it with two T's and not two L's or else it won't work and check this out Bucky Roberts loves football how awesome is that we just sold this program to this guy for a million dollars bam I just made you guys millionaire so anyways the key to this tutoral is this whenever you want to take any bit of text and store it inside an array you know whenever you want the user to enter their own text you can do it in two different ways one is just using the basic CN that we learned before and this is going to take anything they entered and treat each word as a new variable or you have a different way to do this if you want to take whatever they entered on an entire line and store that in a character array you need to use this special ual function that I taught you guys about called CN git line and of course this function takes two parameters the first one is name or whatever variable you want to store it inside and the second one is how many is the maximum amount of characters you can store and let me show you guys what I mean by this the user can enter more than 20 but it's not going to store more than 20 so let me go ahead and build this and show you guys Bucky Roberts is the best guy ever that's clearly more than 20 I think let's just add this just in case and and check this out Bucky Roberts is the loves it stops at 20 and then you know it's not going to mess up if the user enters more than 20 it's just going to cut it off right at 20 so anyways that's what this little uh you know stop sign means the second parameter so anyways that is the difference between C n and CN get line one takes only a word separated by spaces and one takes an entire line of text so in this case this would be the better way so anyways uh thank you guys for watching don't forget to subscribe and that's all I have for you guys for this tutorial in the next tutorial I promise I'll be going over something a little more interesting or will I see you
