With timestamps:

00:00 - hello this is Alex from PHP academy'
00:02 - dorg and in this video for the new
00:04 - Boston I'm going to be talking about
00:07 - post data now we've already looked at
00:11 - get data and forms and then form
00:13 - security but with we've been we've been
00:16 - currently displaying all of our data the
00:18 - variable names and the variable data in
00:22 - our URL so our structure has been
00:26 - index.php and we've had things like date
00:30 - equals Monday days equal date was Monday
00:32 - and then blah blah so on so what happens
00:35 - if we are submitting something like a
00:37 - long registration form or let's just say
00:40 - a user has to go on a page and submit a
00:43 - long area along there sort of selection
00:46 - of text in a text field so they were
00:49 - typing out say a lot a long description
00:51 - of themselves for this purpose it's not
00:57 - a good idea in any means to use get but
01:01 - what we do is we use something called
01:03 - post and this uses a different method it
01:06 - uses the HTTP POST method and this
01:09 - processes the data is sensitive to
01:12 - directly to the form and doesn't include
01:14 - it in the URL itself so it's great for
01:17 - things like passwords it's great for
01:19 - things like long registration forms as
01:21 - well it's good to note that get actually
01:24 - does have if you were to use variables
01:27 - like this this a lot of browsers and web
01:31 - servers have limits on how much get data
01:33 - can be processed at once and as well
01:36 - when you're using things like file
01:38 - uploads you need to be processing the
01:40 - file data through a form into a page and
01:45 - use post as well as another attribute to
01:49 - the form field which is called an Inc
01:51 - type but we're not going to be going
01:53 - into that until we deal with form field
01:55 - uploads so we're going to take a look at
01:58 - an example and this example is going to
02:00 - be typing in a password and in this case
02:04 - we're going to be submitting the
02:05 - password we're going to be creating a
02:06 - form first rule down here we'll be
02:09 - submitting a password and checking it
02:10 - and we're going to be telling the user
02:12 - you know is the password correct so
02:15 - we're going to start off by setting up
02:17 - our form and I have the form action and
02:19 - the method as usual and remember the
02:23 - form action we can either go to another
02:25 - PHP page or we can stay on the same one
02:27 - in this case I'm staying on exactly the
02:29 - same one so we're submitting all the
02:31 - data inside this form to index.php the
02:35 - method though instead of get is going to
02:37 - be post and this automatically means
02:39 - that the data is not going to be sent
02:41 - where it's going to be sent as post it's
02:43 - not going to centers get so let's say
02:46 - password and we break down and we have
02:51 - an input type now this time we're not
02:54 - going to choose text because what would
02:56 - happen would be is we would be able to
02:59 - see anything we typed in here however we
03:03 - are going to choose the type password
03:06 - and this means that the browser
03:08 - interprets this as a password field and
03:10 - you can no longer see anything in there
03:12 - so that's the interesting if you didn't
03:13 - already know how to do that the name of
03:16 - this is going to be password okay we're
03:19 - going to break down a couple more times
03:21 - and we're going to be an input type
03:24 - submit' value equals submit just as we
03:29 - did in the last example
03:31 - so as this stands we're submitting a
03:34 - password in this form when we click
03:36 - Submit so as prior the but as to the
03:41 - previous example with get I type
03:44 - something in here click submit and we
03:45 - saw it appear here however now if I was
03:48 - to type say password in here and click
03:51 - Submit we've actually submitted this now
03:54 - to the form the data has been submitted
03:56 - however is not visible up here and
03:59 - obviously at the moment not visible on
04:00 - the page because we haven't done
04:02 - anything with the data now just to show
04:06 - you the example I'm going to echo out
04:08 - dollar underscore and this time post and
04:12 - password remember this name here
04:15 - corresponds to the name that you've
04:17 - given the form field so let's refresh
04:20 - the page type in and hidden for exam
04:25 - pull and click Submit you can see that
04:27 - hidden is now displayed okay but it's
04:30 - still not displayed up here so what can
04:32 - we do with this we can again check that
04:36 - the form has been submitted so we say if
04:39 - is set it's set and we say dollar
04:43 - underscore post this time password we
04:49 - execute in this block here so if we've
04:53 - submitted and the password has been has
04:57 - been sent or the form field data has
04:59 - been sent we now need to grab that so
05:02 - I'm going to say password equals dollar
05:05 - underscore post password now as
05:11 - discussed in the security video relating
05:13 - to forms we could do the HTML entities
05:16 - just here however we're not actually
05:20 - displaying this password back out to the
05:22 - user we're just going to process it down
05:24 - here and check that it's equal to a
05:26 - preset password so the password I'm I'm
05:29 - going to say is passed one two three
05:34 - okay
05:34 - so the password must be equal to pass
05:36 - one two three for us to validate it so
05:40 - now what I'm going to do is I'm going to
05:41 - say if password corresponding to this
05:45 - variable which then corresponds to this
05:49 - here because we're taking the post data
05:52 - which then corresponds to what the users
05:54 - typed in so if the password is equal to
05:56 - match say something otherwise say
06:00 - something out and what we're going to
06:01 - say in here is echo that is correct
06:07 - and otherwise we're going to say that is
06:11 - in correct okay
06:14 - so let's test this out we'll go back to
06:18 - the index dot PHP page will click Submit
06:20 - and it says that is incorrect
06:22 - we haven't actually checked for the
06:24 - existence here and but we can do that we
06:26 - can say here if this is not empty
06:33 - password do all of this down to here
06:39 - and then we can indent this so this
06:42 - reads as if it's set set a new variable
06:46 - called password to the posted password
06:47 - if it's not empty do all of this and
06:51 - then and then otherwise I mean can you
06:54 - see in my text editor where when I click
06:57 - to the end of this curly bracket here
07:00 - that highlights in red this also
07:02 - highlights in red so I can see that this
07:05 - starts here and ends here therefore I
07:08 - can do else please enter a password okay
07:15 - so um let's go back and back onto our
07:19 - page now I'm going to submit it without
07:22 - entering anything and it says please
07:23 - enter a password now I'm going to enter
07:25 - a password just absolutely anything into
07:27 - the form and click submit that is
07:30 - incorrect
07:30 - now if I was to type pass one two three
07:33 - and I was to click Submit we've
07:36 - validated that as correct
07:37 - therefore we're displayed with the error
07:39 - of the error the message that is correct
07:43 - so we've posted a password through this
07:46 - form we've used the post method with the
07:49 - HTTP POST method which doesn't display
07:51 - here and has allows us to propel us to
07:55 - process it in secret now I'm not going
07:58 - to show you an example but if you were
08:00 - processing say a long amount of data
08:02 - you'd also use the post as well as a
08:05 - file uploads like a discussed earlier
08:06 - but that will be later on in the series
08:08 - so this is basically posting variables
08:11 - in PHP

Cleaned transcript:

hello this is Alex from PHP academy' dorg and in this video for the new Boston I'm going to be talking about post data now we've already looked at get data and forms and then form security but with we've been we've been currently displaying all of our data the variable names and the variable data in our URL so our structure has been index.php and we've had things like date equals Monday days equal date was Monday and then blah blah so on so what happens if we are submitting something like a long registration form or let's just say a user has to go on a page and submit a long area along there sort of selection of text in a text field so they were typing out say a lot a long description of themselves for this purpose it's not a good idea in any means to use get but what we do is we use something called post and this uses a different method it uses the HTTP POST method and this processes the data is sensitive to directly to the form and doesn't include it in the URL itself so it's great for things like passwords it's great for things like long registration forms as well it's good to note that get actually does have if you were to use variables like this this a lot of browsers and web servers have limits on how much get data can be processed at once and as well when you're using things like file uploads you need to be processing the file data through a form into a page and use post as well as another attribute to the form field which is called an Inc type but we're not going to be going into that until we deal with form field uploads so we're going to take a look at an example and this example is going to be typing in a password and in this case we're going to be submitting the password we're going to be creating a form first rule down here we'll be submitting a password and checking it and we're going to be telling the user you know is the password correct so we're going to start off by setting up our form and I have the form action and the method as usual and remember the form action we can either go to another PHP page or we can stay on the same one in this case I'm staying on exactly the same one so we're submitting all the data inside this form to index.php the method though instead of get is going to be post and this automatically means that the data is not going to be sent where it's going to be sent as post it's not going to centers get so let's say password and we break down and we have an input type now this time we're not going to choose text because what would happen would be is we would be able to see anything we typed in here however we are going to choose the type password and this means that the browser interprets this as a password field and you can no longer see anything in there so that's the interesting if you didn't already know how to do that the name of this is going to be password okay we're going to break down a couple more times and we're going to be an input type submit' value equals submit just as we did in the last example so as this stands we're submitting a password in this form when we click Submit so as prior the but as to the previous example with get I type something in here click submit and we saw it appear here however now if I was to type say password in here and click Submit we've actually submitted this now to the form the data has been submitted however is not visible up here and obviously at the moment not visible on the page because we haven't done anything with the data now just to show you the example I'm going to echo out dollar underscore and this time post and password remember this name here corresponds to the name that you've given the form field so let's refresh the page type in and hidden for exam pull and click Submit you can see that hidden is now displayed okay but it's still not displayed up here so what can we do with this we can again check that the form has been submitted so we say if is set it's set and we say dollar underscore post this time password we execute in this block here so if we've submitted and the password has been has been sent or the form field data has been sent we now need to grab that so I'm going to say password equals dollar underscore post password now as discussed in the security video relating to forms we could do the HTML entities just here however we're not actually displaying this password back out to the user we're just going to process it down here and check that it's equal to a preset password so the password I'm I'm going to say is passed one two three okay so the password must be equal to pass one two three for us to validate it so now what I'm going to do is I'm going to say if password corresponding to this variable which then corresponds to this here because we're taking the post data which then corresponds to what the users typed in so if the password is equal to match say something otherwise say something out and what we're going to say in here is echo that is correct and otherwise we're going to say that is in correct okay so let's test this out we'll go back to the index dot PHP page will click Submit and it says that is incorrect we haven't actually checked for the existence here and but we can do that we can say here if this is not empty password do all of this down to here and then we can indent this so this reads as if it's set set a new variable called password to the posted password if it's not empty do all of this and then and then otherwise I mean can you see in my text editor where when I click to the end of this curly bracket here that highlights in red this also highlights in red so I can see that this starts here and ends here therefore I can do else please enter a password okay so um let's go back and back onto our page now I'm going to submit it without entering anything and it says please enter a password now I'm going to enter a password just absolutely anything into the form and click submit that is incorrect now if I was to type pass one two three and I was to click Submit we've validated that as correct therefore we're displayed with the error of the error the message that is correct so we've posted a password through this form we've used the post method with the HTTP POST method which doesn't display here and has allows us to propel us to process it in secret now I'm not going to show you an example but if you were processing say a long amount of data you'd also use the post as well as a file uploads like a discussed earlier but that will be later on in the series so this is basically posting variables in PHP
