With timestamps:

00:00 - alrighty guys welcome back and in this
00:02 - video i'm gonna be showing you guys how
00:03 - to list
00:04 - create and start containers learning
00:06 - some more docker commands so let's just
00:08 - go ahead and dive right into it
00:10 - now the first command is docker
00:12 - container ls
00:14 - now this ls command is to list all of
00:17 - your containers
00:18 - now by default it only shows your
00:21 - running containers
00:22 - so i'm going to hit enter and we see
00:24 - that these are actually
00:25 - column names and we don't have any
00:28 - containers listed because we don't have
00:30 - any containers
00:31 - running right now now if you
00:34 - let me go ahead and actually well i can
00:36 - run like this to compare
00:38 - all right now if instead of just running
00:40 - docker container ls i run
00:42 - docker container ls with this a at the
00:45 - end
00:45 - dash a this is a flag to show all the
00:48 - containers that have
00:49 - ever been created so i'm going to hit
00:51 - this and let me expand my window so you
00:54 - guys can see
00:55 - all right it's a little bit better i
00:58 - have to make the text big
01:00 - on my terminal so you guys can see on
01:02 - youtube
01:03 - but it's it takes up a large portion of
01:06 - the screen so it's kind of funky
01:07 - whenever i'm recording but anywho let's
01:09 - just jump right into it
01:10 - so now we see our containers and these
01:13 - are the containers that we created in
01:15 - the last video
01:16 - and i'll walk you guys through what each
01:17 - of these columns mean
01:19 - so this container id as you can see this
01:22 - is just
01:23 - a unique idea it's created from a shot
01:25 - 256 hash
01:27 - and it's just that it's just a random
01:29 - hash that docker creates for you as an
01:31 - identifier for the container
01:32 - just an id number nothing fancy the
01:36 - image you guys can probably guess what
01:37 - this is
01:38 - is just the name of the image that was
01:39 - used to create this container
01:42 - this command column this is actually the
01:44 - default command
01:46 - that was ran whenever you created this
01:48 - container
01:49 - and created again this is just the date
01:52 - and time that the container was created
01:55 - this status and let me slide this bad
01:58 - boy over
01:58 - so you guys can see the rest of this all
02:01 - right
02:02 - so the status right here is the status
02:04 - of the container
02:05 - of course pretty uh pretty
02:07 - self-explanatory there but
02:09 - this actually is not going to make a lot
02:11 - of sense until we talk about the life
02:13 - cycle of containers
02:14 - but that's later on down in a future
02:16 - video for right now just um
02:18 - you know this is the status of the
02:19 - container that's good for now
02:21 - now these ports right here which we
02:23 - don't see any
02:25 - this is also we're going to touch on
02:27 - this more later on but
02:28 - in case you just want to know exactly
02:30 - what they are it's a list of container
02:32 - ports
02:33 - mapped to the host and last but not
02:35 - least the names column
02:37 - is the names assigned to a container
02:40 - now fun fact we can actually specify our
02:42 - own name
02:43 - now if we don't specify our own name for
02:46 - a container
02:46 - then docker is going to create a random
02:48 - one for us and
02:50 - that is why you see these kind of weird
02:52 - looking
02:53 - names right here just a random name if
02:56 - you want to override that
02:57 - kind of like you can a default command
02:59 - you can but
03:00 - that is the basics of the columns
03:03 - whenever you list out your containers
03:05 - now the next two commands i want to talk
03:06 - to you guys about are the crate
03:08 - and start commands now you guys can
03:11 - probably figure out just by the name
03:13 - what these do but you're probably
03:15 - scratching your head because
03:16 - okay these commands apparently are going
03:19 - to create a container and then start a
03:20 - container
03:21 - but didn't we already learn how to do
03:23 - that through this run command
03:25 - well believe it or not this run command
03:27 - is actually a shortcut
03:29 - for these two separate commands if you
03:32 - do create plus start it basically is the
03:34 - same thing as running this run command
03:37 - now what's the point of having all these
03:39 - commands which apparently do the same
03:40 - thing well let's go ahead and break it
03:42 - down right now
03:43 - so instead of run i'm just going to go
03:45 - ahead and create this hello world
03:47 - container
03:48 - now real quick what this command is
03:49 - going to do is
03:51 - again to be specific it's going to
03:53 - create a container
03:55 - from this specified image and it's going
03:58 - to prepare
03:59 - it to be ran on your operating system
04:01 - but it's not
04:02 - actually going to run the container
04:04 - itself
04:05 - so whenever i run this you see that
04:08 - we now get this back right here okay
04:11 - what the heck is this did someone just
04:12 - hack my computer
04:14 - not exactly so whenever we just run the
04:16 - create command what does it returns the
04:18 - id
04:19 - of the container that was just created
04:22 - now we can see this or verify it if we
04:24 - run
04:25 - docker container lsa like we just did a
04:28 - few minutes ago
04:29 - and all right i forgot all my uh
04:33 - my screen size issues again but
04:36 - what was this up here faac35
04:40 - and we can now see faac 35
04:43 - this is the id of that very first or
04:46 - most recent container created 23 seconds
04:49 - ago
04:50 - all right fair enough now another thing
04:54 - that i want to point out
04:55 - that i probably should have just right
04:57 - then was this
04:59 - now aside from just saying that okay
05:02 - yep that's the right id this is the
05:04 - container you created now 50 seconds ago
05:06 - the status is now created
05:10 - huh that's interesting because all the
05:12 - rest of these
05:13 - containers that we created that were
05:16 - created using the run command
05:18 - their status is exited but this one is
05:20 - just
05:21 - created all right wha what exactly is
05:25 - going on here
05:26 - now believe it or not this concept may
05:29 - actually be easiest to understand
05:31 - if we just go ahead and run the start
05:33 - command itself
05:35 - so before i run the stark man i'm gonna
05:37 - go ahead and copy
05:38 - this container id and another thing to
05:41 - note is that whenever you're referencing
05:43 - a container
05:43 - you don't actually need to copy the
05:45 - entire id
05:47 - you just need this little snippet so let
05:50 - me go ahead
05:51 - and run this command which is docker
05:54 - container
05:55 - start now i'm going to include another
05:57 - flag which is dash
05:58 - a in dash a in this case it means attach
06:02 - or basically print any output from this
06:05 - container
06:05 - right into our terminal if we didn't
06:07 - include it then you just couldn't see
06:09 - any of the output so
06:10 - i'm going to start this container right
06:12 - here which is f
06:14 - a a c yada yada tomato tomato so now
06:16 - let's go ahead and start that
06:18 - and okay it looks like it
06:21 - kind of just did what run did earlier on
06:24 - but now let me go ahead and run this
06:26 - command again
06:28 - which lists all our containers and all
06:32 - right
06:32 - so this was a container we just created
06:35 - and ran
06:36 - and before huh that's interesting let me
06:40 - scroll back up here
06:41 - so before it said status created but
06:44 - then after we started it
06:46 - it now says status exited so why
06:49 - did that happen well this container
06:52 - whenever it runs it has one simple job
06:55 - it gets created
06:57 - it runs or starts and its only job is to
07:00 - print stuff out on the screen
07:02 - and then it exits it's
07:05 - it's a very simple program kind of a
07:07 - worthless server
07:08 - if you want to think of it like that but
07:10 - that's kind of the mini
07:11 - life cycle that happened so again just
07:14 - to reiterate
07:16 - some of these concepts the create
07:18 - command what this does
07:19 - is it just creates a container from the
07:22 - specified image
07:24 - and it prepares it to run on your
07:26 - operating system
07:27 - now the start command just starts the
07:29 - container it's basically like
07:31 - starting or booting up your computer
07:33 - after you installed an
07:34 - operating system or something now the
07:37 - run command
07:38 - is a shortcut to type both of those
07:40 - together where
07:41 - if you just ran the create command and
07:43 - then the start command right after
07:45 - since people just kept doing that all
07:47 - the time over and over again
07:48 - docker just unified that by creating
07:50 - that run command
07:51 - and that's where we're going to be
07:52 - sticking to most of the time
07:54 - but that is your little knowledge of all
07:57 - those commands
07:58 - and the last thing i want to do before i
08:00 - let you guys go is
08:02 - just show you guys a quick trick not
08:04 - even trick just a command to um
08:06 - clean up all your containers so we
08:08 - already know that
08:09 - okay if we list out all our containers
08:11 - we get all this stuff
08:12 - now how do i clear those out well if you
08:15 - run docker
08:16 - system prune and then you can just
08:20 - use the flag all and this all just says
08:23 - remove
08:23 - all unused images not just dangling ones
08:27 - and again i don't want to introduce too
08:29 - much stuff in this tutorial but a
08:31 - dangling image
08:32 - is just one that is not tagged and is
08:35 - not referenced by another container
08:37 - again you don't need to know dangling
08:39 - containers or
08:40 - tags or anything like this just want to
08:41 - show you guys how to clean up all your
08:43 - containers for now
08:44 - you'll understand this in the future
08:45 - video but for now let's just run this
08:48 - yes verify that that is what i want to
08:50 - do
08:51 - okay look you got all this memory back
08:53 - very cool
08:54 - and now jeez
08:57 - drag racing going on inside now if i run
09:00 - this command again you'll see all your
09:02 - containers are now
09:03 - cleaned up so a lot
09:06 - of information in that tutorial i'll
09:09 - give you guys a little bit
09:10 - time to absorb that but again thank you
09:12 - guys for watching don't forget to
09:13 - subscribe and i will see you
09:15 - in the next video

Cleaned transcript:

alrighty guys welcome back and in this video i'm gonna be showing you guys how to list create and start containers learning some more docker commands so let's just go ahead and dive right into it now the first command is docker container ls now this ls command is to list all of your containers now by default it only shows your running containers so i'm going to hit enter and we see that these are actually column names and we don't have any containers listed because we don't have any containers running right now now if you let me go ahead and actually well i can run like this to compare all right now if instead of just running docker container ls i run docker container ls with this a at the end dash a this is a flag to show all the containers that have ever been created so i'm going to hit this and let me expand my window so you guys can see all right it's a little bit better i have to make the text big on my terminal so you guys can see on youtube but it's it takes up a large portion of the screen so it's kind of funky whenever i'm recording but anywho let's just jump right into it so now we see our containers and these are the containers that we created in the last video and i'll walk you guys through what each of these columns mean so this container id as you can see this is just a unique idea it's created from a shot 256 hash and it's just that it's just a random hash that docker creates for you as an identifier for the container just an id number nothing fancy the image you guys can probably guess what this is is just the name of the image that was used to create this container this command column this is actually the default command that was ran whenever you created this container and created again this is just the date and time that the container was created this status and let me slide this bad boy over so you guys can see the rest of this all right so the status right here is the status of the container of course pretty uh pretty selfexplanatory there but this actually is not going to make a lot of sense until we talk about the life cycle of containers but that's later on down in a future video for right now just um you know this is the status of the container that's good for now now these ports right here which we don't see any this is also we're going to touch on this more later on but in case you just want to know exactly what they are it's a list of container ports mapped to the host and last but not least the names column is the names assigned to a container now fun fact we can actually specify our own name now if we don't specify our own name for a container then docker is going to create a random one for us and that is why you see these kind of weird looking names right here just a random name if you want to override that kind of like you can a default command you can but that is the basics of the columns whenever you list out your containers now the next two commands i want to talk to you guys about are the crate and start commands now you guys can probably figure out just by the name what these do but you're probably scratching your head because okay these commands apparently are going to create a container and then start a container but didn't we already learn how to do that through this run command well believe it or not this run command is actually a shortcut for these two separate commands if you do create plus start it basically is the same thing as running this run command now what's the point of having all these commands which apparently do the same thing well let's go ahead and break it down right now so instead of run i'm just going to go ahead and create this hello world container now real quick what this command is going to do is again to be specific it's going to create a container from this specified image and it's going to prepare it to be ran on your operating system but it's not actually going to run the container itself so whenever i run this you see that we now get this back right here okay what the heck is this did someone just hack my computer not exactly so whenever we just run the create command what does it returns the id of the container that was just created now we can see this or verify it if we run docker container lsa like we just did a few minutes ago and all right i forgot all my uh my screen size issues again but what was this up here faac35 and we can now see faac 35 this is the id of that very first or most recent container created 23 seconds ago all right fair enough now another thing that i want to point out that i probably should have just right then was this now aside from just saying that okay yep that's the right id this is the container you created now 50 seconds ago the status is now created huh that's interesting because all the rest of these containers that we created that were created using the run command their status is exited but this one is just created all right wha what exactly is going on here now believe it or not this concept may actually be easiest to understand if we just go ahead and run the start command itself so before i run the stark man i'm gonna go ahead and copy this container id and another thing to note is that whenever you're referencing a container you don't actually need to copy the entire id you just need this little snippet so let me go ahead and run this command which is docker container start now i'm going to include another flag which is dash a in dash a in this case it means attach or basically print any output from this container right into our terminal if we didn't include it then you just couldn't see any of the output so i'm going to start this container right here which is f a a c yada yada tomato tomato so now let's go ahead and start that and okay it looks like it kind of just did what run did earlier on but now let me go ahead and run this command again which lists all our containers and all right so this was a container we just created and ran and before huh that's interesting let me scroll back up here so before it said status created but then after we started it it now says status exited so why did that happen well this container whenever it runs it has one simple job it gets created it runs or starts and its only job is to print stuff out on the screen and then it exits it's it's a very simple program kind of a worthless server if you want to think of it like that but that's kind of the mini life cycle that happened so again just to reiterate some of these concepts the create command what this does is it just creates a container from the specified image and it prepares it to run on your operating system now the start command just starts the container it's basically like starting or booting up your computer after you installed an operating system or something now the run command is a shortcut to type both of those together where if you just ran the create command and then the start command right after since people just kept doing that all the time over and over again docker just unified that by creating that run command and that's where we're going to be sticking to most of the time but that is your little knowledge of all those commands and the last thing i want to do before i let you guys go is just show you guys a quick trick not even trick just a command to um clean up all your containers so we already know that okay if we list out all our containers we get all this stuff now how do i clear those out well if you run docker system prune and then you can just use the flag all and this all just says remove all unused images not just dangling ones and again i don't want to introduce too much stuff in this tutorial but a dangling image is just one that is not tagged and is not referenced by another container again you don't need to know dangling containers or tags or anything like this just want to show you guys how to clean up all your containers for now you'll understand this in the future video but for now let's just run this yes verify that that is what i want to do okay look you got all this memory back very cool and now jeez drag racing going on inside now if i run this command again you'll see all your containers are now cleaned up so a lot of information in that tutorial i'll give you guys a little bit time to absorb that but again thank you guys for watching don't forget to subscribe and i will see you in the next video
