With timestamps:

00:00 - what is going on guys it's Bucky and
00:01 - welcome to your 29th C++ tutorial and in
00:04 - this tutorial I'm going to be talking to
00:05 - you guys about something called scope I
00:07 - can't remember if I talked to you guys
00:09 - about scope already but I need to talk
00:10 - to you guys about it again anyways so
00:13 - anyways I'm gonna be talking to you guys
00:14 - about scope not the mouthwash a little
00:16 - bit different and also something called
00:18 - the unary scope resolution operator but
00:21 - I call it the colon colon because you
00:23 - know whenever we're typing it it's just
00:25 - a colon colon so let's go ahead and
00:27 - first let me build another function
00:29 - aside from main I'm just going to build
00:31 - another function called Bucky and all
00:34 - this is going to do is well we won't
00:36 - even have it do anything yet so right
00:38 - now we have two functions main and Bucky
00:41 - they're both good to go so sometimes
00:44 - people build variables inside a function
00:46 - like in X and set it equal to 10 well
00:49 - let's go ahead and make some interesting
00:51 - variables I'm tired of X so int tuna and
00:54 - set it equal to 69 now let's go ahead
00:57 - and build another variable called tuna
00:59 - and set it equal to 20 well I just want
01:02 - to demonstrate one thing some people
01:04 - would declare variables outside
01:06 - functions and some people declare
01:09 - variables inside functions now it's not
01:12 - just like some people have blue eyes
01:13 - some people have brand eyes there are
01:15 - people nonetheless and it doesn't really
01:17 - matter where I color they have well
01:18 - actually this does matter it's not a
01:20 - personal preference it actually does
01:22 - matter in your computer program where
01:24 - you declare or make your variable
01:26 - whenever you make your variable outside
01:28 - the functions then every single function
01:31 - can access this tuned variable so this
01:34 - function can use it Bucky can use it
01:36 - every function has access to this
01:38 - variable but for example say you only
01:40 - made your variable inside one function
01:43 - so you only made this variable inside
01:45 - main that means that whenever Bucky
01:47 - tried to use the variable tuna it's
01:51 - going to get an error message so check
01:52 - it out
01:53 - it says tuna what the heck is tuna
01:55 - because main functions are basically
01:57 - greedy whenever they create a variable
02:01 - they're the only ones with access to
02:03 - that variable so that's why people
02:05 - typically like to use variables in
02:07 - declare
02:08 - outside all of the functions because
02:10 - whenever you make a variable
02:12 - outside the function then every single
02:15 - function in your program is going to
02:17 - have access to that so say for example
02:19 - main wanted for an Altoona and book you
02:23 - wanted to print out to know well you can
02:24 - go ahead and run this program right now
02:26 - and check it out both programs are going
02:29 - to print out tuna just fine so the
02:32 - reason Bucky didn't print it out and you
02:33 - only saw tuna once was because we didn't
02:36 - call it anywhere but anyways that's what
02:39 - the scope of variables is basically
02:41 - where you create variables depends where
02:44 - you can use them so if you declare a
02:46 - variable in here only main can use it if
02:49 - you make one in here only buck you can
02:51 - use it if you declare outside both the
02:54 - functions can use it but now we come
02:57 - across a little bit of a conundrum and
02:59 - let's go ahead and delete Bucky for the
03:01 - rest of the store oh because he was just
03:03 - an example a dang fine one but a he was
03:05 - an example what if a user did something
03:08 - stupid like this
03:09 - they made a variable called tuna outside
03:12 - main so of course main has access to it
03:15 - but they made another variable called
03:17 - tuna that's inside main as well so main
03:21 - can access that one too so now when you
03:23 - try to print out tuna as a choice do I
03:25 - use this one or do I use this one let's
03:28 - go ahead and print this out and see what
03:30 - happens
03:30 - it chose 20 and why did it do that well
03:35 - computers pretty much take the most
03:37 - recent or most inner variable that they
03:40 - can they say all right here is a
03:43 - variable that I can use but why use that
03:45 - one when I have one right inside my
03:47 - function I'm going to assume that since
03:49 - this one was built right inside my
03:51 - function that that's the one you want me
03:53 - to use so these are called local
03:56 - variables and these are called global
03:58 - variables and when it has the choice
04:00 - it's always going to choose that local
04:02 - variable so you're saying all right
04:04 - let's go ahead and say
04:06 - that I'm building a function just like
04:09 - this and I want to call both of these
04:12 - variables tuna but I actually want to
04:15 - use this variable tuna out here well how
04:18 - do I tell my program that all right I
04:20 - know you have a local variable called
04:22 - tuna but I want you to use this one well
04:26 - in order to do you need to use something
04:28 - called the unary scope resolution
04:30 - operator in other words the : : : :
04:34 - tells your program all right you have
04:37 - two functions called tuna one of them is
04:40 - local and one of them is global whenever
04:43 - you have this : colon before tuna that
04:45 - means use the global tuna in other words
04:48 - use the tuna outside your function so
04:51 - now whenever you run the program check
04:53 - it out it uses that global tuna instead
04:56 - of the local tuna and the reason people
04:59 - actually do this is because when they
05:01 - have variables with the same name of
05:03 - different data types that's when it
05:05 - comes in handy so for example if you had
05:07 - an INT tuna and the double tuna and you
05:10 - ran it it would use the double tuna
05:12 - which is 20 but if you use that colon
05:16 - colon which is called again the unary
05:19 - scope resolution operator if you're
05:20 - taking the test or something then it
05:22 - uses a 69 so I just don't want to show
05:25 - you guys if you're stupid and put in
05:27 - twice people typically write variables
05:30 - with the same name whenever they're
05:31 - using different data types so just
05:34 - wanted to point that out so what to take
05:36 - away from this tutorial whenever you
05:39 - create a variable inside a function you
05:42 - can only use that variable inside the
05:44 - function where you created it you can't
05:46 - use it inside any other function
05:48 - whenever you create a variable outside
05:51 - of function you can use it in any
05:53 - function in your entire program so if we
05:56 - had another function called Buckey and
05:57 - another one called
05:58 - Toni and another one called Jessica we
06:01 - can use this tuna in all of those
06:03 - functions so that's why you can decide
06:05 - whether it makes this outside or inside
06:07 - your function and the last thing I want
06:09 - you guys remember from this story
06:11 - whenever you have two variables with the
06:13 - same name one is local and one is global
06:16 - and you
06:17 - want to use the global variable in your
06:21 - function you need to use this dot dot or
06:23 - colon colon unary resolution operator
06:26 - whatever the heck you want to call it
06:27 - it's two colons before your variable and
06:29 - that tells C++ hey C++ I know I have
06:33 - variable in here but I want to use this
06:35 - one the global variable instead and if
06:38 - you remember these three rules you'll be
06:40 - good to go so that's all I have for you
06:41 - guys for this tutorial again basically a
06:44 - really easy tutorial just a little weird
06:46 - concept that you have to understand so
06:48 - thank you guys for watching don't forget
06:50 - to subscribe and I will see you guys in
06:52 - the next video

Cleaned transcript:

what is going on guys it's Bucky and welcome to your 29th C++ tutorial and in this tutorial I'm going to be talking to you guys about something called scope I can't remember if I talked to you guys about scope already but I need to talk to you guys about it again anyways so anyways I'm gonna be talking to you guys about scope not the mouthwash a little bit different and also something called the unary scope resolution operator but I call it the colon colon because you know whenever we're typing it it's just a colon colon so let's go ahead and first let me build another function aside from main I'm just going to build another function called Bucky and all this is going to do is well we won't even have it do anything yet so right now we have two functions main and Bucky they're both good to go so sometimes people build variables inside a function like in X and set it equal to 10 well let's go ahead and make some interesting variables I'm tired of X so int tuna and set it equal to 69 now let's go ahead and build another variable called tuna and set it equal to 20 well I just want to demonstrate one thing some people would declare variables outside functions and some people declare variables inside functions now it's not just like some people have blue eyes some people have brand eyes there are people nonetheless and it doesn't really matter where I color they have well actually this does matter it's not a personal preference it actually does matter in your computer program where you declare or make your variable whenever you make your variable outside the functions then every single function can access this tuned variable so this function can use it Bucky can use it every function has access to this variable but for example say you only made your variable inside one function so you only made this variable inside main that means that whenever Bucky tried to use the variable tuna it's going to get an error message so check it out it says tuna what the heck is tuna because main functions are basically greedy whenever they create a variable they're the only ones with access to that variable so that's why people typically like to use variables in declare outside all of the functions because whenever you make a variable outside the function then every single function in your program is going to have access to that so say for example main wanted for an Altoona and book you wanted to print out to know well you can go ahead and run this program right now and check it out both programs are going to print out tuna just fine so the reason Bucky didn't print it out and you only saw tuna once was because we didn't call it anywhere but anyways that's what the scope of variables is basically where you create variables depends where you can use them so if you declare a variable in here only main can use it if you make one in here only buck you can use it if you declare outside both the functions can use it but now we come across a little bit of a conundrum and let's go ahead and delete Bucky for the rest of the store oh because he was just an example a dang fine one but a he was an example what if a user did something stupid like this they made a variable called tuna outside main so of course main has access to it but they made another variable called tuna that's inside main as well so main can access that one too so now when you try to print out tuna as a choice do I use this one or do I use this one let's go ahead and print this out and see what happens it chose 20 and why did it do that well computers pretty much take the most recent or most inner variable that they can they say all right here is a variable that I can use but why use that one when I have one right inside my function I'm going to assume that since this one was built right inside my function that that's the one you want me to use so these are called local variables and these are called global variables and when it has the choice it's always going to choose that local variable so you're saying all right let's go ahead and say that I'm building a function just like this and I want to call both of these variables tuna but I actually want to use this variable tuna out here well how do I tell my program that all right I know you have a local variable called tuna but I want you to use this one well in order to do you need to use something called the unary scope resolution operator in other words the tells your program all right you have two functions called tuna one of them is local and one of them is global whenever you have this colon before tuna that means use the global tuna in other words use the tuna outside your function so now whenever you run the program check it out it uses that global tuna instead of the local tuna and the reason people actually do this is because when they have variables with the same name of different data types that's when it comes in handy so for example if you had an INT tuna and the double tuna and you ran it it would use the double tuna which is 20 but if you use that colon colon which is called again the unary scope resolution operator if you're taking the test or something then it uses a 69 so I just don't want to show you guys if you're stupid and put in twice people typically write variables with the same name whenever they're using different data types so just wanted to point that out so what to take away from this tutorial whenever you create a variable inside a function you can only use that variable inside the function where you created it you can't use it inside any other function whenever you create a variable outside of function you can use it in any function in your entire program so if we had another function called Buckey and another one called Toni and another one called Jessica we can use this tuna in all of those functions so that's why you can decide whether it makes this outside or inside your function and the last thing I want you guys remember from this story whenever you have two variables with the same name one is local and one is global and you want to use the global variable in your function you need to use this dot dot or colon colon unary resolution operator whatever the heck you want to call it it's two colons before your variable and that tells C++ hey C++ I know I have variable in here but I want to use this one the global variable instead and if you remember these three rules you'll be good to go so that's all I have for you guys for this tutorial again basically a really easy tutorial just a little weird concept that you have to understand so thank you guys for watching don't forget to subscribe and I will see you guys in the next video
