if you've coded in C for a minute you've probably used all the features of the language you've probably made some structures written some functions you maybe even have used the C preprocessor but one feature of the C language that gets a lot less attention is kind of a weird one today we're talking about unions a lesser known feature of the C language with some interesting properties we'll talk about what the union type does how it's used in memory and three examples of how to use them let's Dive Right In Here I have some C code written out and you'll notice up top a familiar C feature the structure a structure is just a way in C to logically organize variables in a way that makes sense in your program so my structure may need to have an INT and a float and then some character array a string of 16 bytes of characters now the struct in memory what this will do is this will actually allocate on the stack or the Heap or wherever we use the structure the sum of the size of all these elements so an INT being 4 bytes a float being 4 bytes and the string being 16 Byes this will allocate 24 bytes of memory now this makes sense because we want to have access to all of the different elements of the structure so we're going to have room for every single element here is the new thing we're talking about the union and the union is a little more interesting when you have a union with different types inside of it instead of allocating room for every element that's inside the union the union will only allocate enough memory for the largest element all of the elements inside of the Union lay on top of each other and share the same memory space and this is going to be reflected by printing the size of all of our structures here in our code we print the size of our Union my onion onion and my structure stred and by printing these out we can see that the size of our Union is 16 bytes and the size of our structure is the previously reported 24 bytes now what makes the union so interesting is that all of the elements in the union share the same memory space so here for example I'm stir copying the string hello world into to the buffer that's allocated in the union for the 16 by string I'm then able to print out the float of the Union which means that it'll try to represent the string hello world as a float type and we can see the float representation of that string which is this crazy long number here okay so you're probably wondering what is the practical application of the Union right like why even have this type in C what does this do for us well the first example is it actually makes data conversions and access to members within a structure that have different data types very easy so for example let's say here that I have the ipv4 address structure which can be represented as a union now if you didn't know an ipv4 address is just four bytes which can be accessed either as four individual bytes or as the long 4 by version the word right so if we wanted to set the address for example to Local Host 127.0.0.1 we could do this in two ways we could do the really painful thing where we have 1 27 and then we shift it over 24 bytes and then we make the value equal to this or the current value right and that that gets very mathematically complicated and very kind of hard to represent in code in a way that's easy to read or we could use the magic of unions and essentially just overlay two different data types so by doing this we can take the bytes 12701 put that into the address and then when I print this as the actual long form of the address in HEX we get the normal representation of Local Host in HEX the second example goes along that same line of thinking where we overlay two different structures that have the same value but are represented in two different ways in particular this has a lot of power in the world of embedded programming if you're not aware of how embedded programming Works essentially registers on a CPU live at an address and when you set certain values in those registers things on the chip physically change so here for example we have a hardware register that has an anonymous structure inside of it by putting an anonymous structure in inside of the Union Ru will be allocated for all of the values inside of the structure on top of this integer value so here we can set the register to you know this value here but then we can actually go in and pull out the individual parts of that register that control different parts of the CPU so here for example we have some madeup gpio register that has different properties like setting the control of that register the direction of the data if it's an input or an output the par maybe it's even par or odd parity or if it does or does not have start bits by setting the register to some value we then can use this to go in and individually access and set and change the parts of the register that control specific parts of that peripheral before we keep going I want to tell you guys about lowlevel Academy a place where I'm running courses to teach you more about the C programming language and others you can check it out at low level. Academy and get 20% off a lifetime subscription until the end of the month we'll see you there maybe you don't care about data conversion maybe you're not an embedded programmer and that's completely okay the last one that unions can be used for which I think is the most interesting and probably the most practical example of a union is this idea of polymorphism right so in C right we don't have classes there are no class types there really aren't any additional types other than the basics of like int care Etc and when we make up types in C we're essentially just concatenating all the Primitive types like int care float and then naming them something else like person address Whatever by using a union we can do a a little bit of polymorphism by having variables that have three different types in a structure at the same time and then using an outer type tracker to track which type is being used at any given time we then can write functions that will behave differently based on the type of the structure at that time so for example here I have defined a Json type right maybe we're making a Json parser and the enum says that there can be three types inside of our structure there could be a string a bite or an INT we have that Json type inside of our structure that is used to track what version of the Union is being used at any given time and then inside of that Union we have those three types we have it could be a string it could be an individual bite or it could be a number and that whole thing the structure with the union inside of it is called the Json T and just so you know a little quick check on learning right the size of this structure will be the size of the type which is one single bite plus the maximum size of the Union which is going to be the size of the string here that's the biggest type which will be 64 bytes so this structure will be around 68 bytes not accounting for padding or optimization or anything like that now when we want to use this Json type what we're going to do is we're going to check the type tracked inside of the structure and then handle it accordingly so if it's being tracked as a Json string we're going to print out the string using percent s if it's a Json bite we're going to print that bite alone using percent C if it's ajon on int we're going to print it using percent D Now by doing this we can make this type a basic structure in C polymorphic we could say this type is a Json int and set the number and by printing it using my special print Json function it'll treat it almost like a polymorphic class in C++ but using a lot less overhead than the class internals do in C++ let's try it out right now there we go 42 there are some dangers in this obviously because we're in C the types are not tightly coupled they're not enforced by the compiler so if I accidentally in programming said this is a j on string and not ajon int and went to go compile this and print it you know it'll print the ask your representation of 42 and not the actual value 42 that's on you as a programmer to figure out and to do correctly so what do you think about unions do you think they're useful do you think they're not useful go ahead and do me a favor leave a like on this video and leave a comment about your thoughts on unions and if you've used them before in the past unions while powerful are controversial not everyone agrees if they should or should not be used in code bases kind of like how people feel about the goto statement in C as well I made a video about that here talking about if goto statements are illegal should they be go find out go okay goodbye