With timestamps:

00:00 - learn to build a weather app using
00:01 - nextjs Tailwind CSS and typescript in
00:04 - this Hands-On tutorial this is a great
00:06 - project to understand how all these
00:08 - Technologies work together you'll create
00:10 - a responsive Dynamic app from scratch
00:13 - with react components utar developed
00:15 - this course in this today's video we are
00:18 - going to build a simple weather app
00:21 - using next gs14 and open Weather API
00:25 - this is the fully functional weather app
00:28 - and uh let's see the features of this uh
00:31 - weather app so basically here we are
00:33 - getting the today's date and temperature
00:37 - and hourly wise temperature and weather
00:39 - icon and weather data and here is the
00:42 - weather description and uh there you
00:45 - will find some additional details of our
00:47 - weather like uh visibility humidity wind
00:51 - speed air pressure sunrise and sunset
00:54 - and after that you will find a 7 days
00:56 - forecast data and here is the main
00:59 - feature of our weather app here we will
01:02 - also get a search SS suppose for example
01:06 - if I will search for Delhi so now you
01:09 - can see that we are getting a proper SS
01:12 - for our location and if I will select
01:15 - for any location and uh click on that
01:17 - search button so we will get a data for
01:20 - our that uh location so now you can see
01:23 - that the weather report of our daily
01:26 - location here we are getting the
01:28 - temperature and description and some
01:31 - additional details and uh obviously 7
01:34 - days forecast data suppose I want to
01:37 - search for Surat and if I will press
01:40 - enter so this will search for that
01:43 - location and here we are getting the
01:45 - location name So currently which
01:47 - location is applied and if you haven't
01:49 - seen there uh suppose if I will search
01:52 - for another location so we are also
01:54 - getting a proper skeleton loading
01:56 - components so on the meantime our when
02:00 - our data is on the loading state so we
02:02 - will get a proper skeleton loading if I
02:06 - will refresh my page or we can also say
02:08 - that on the first loading what we will
02:10 - get so if I will refresh my
02:14 - page so now you can see that we are
02:16 - getting a proper loading State there
02:18 - also and after that we will see our data
02:22 - and I have also added a additional
02:24 - feature for our weather app here is the
02:26 - button and when I will hover over our
02:29 - button here you can see that we are
02:31 - getting a title like your current
02:33 - location and when I will click on that
02:36 - button so this will search for the
02:37 - current location So currently my
02:40 - location is made it so firstly this will
02:42 - ask us uh permissions for our locations
02:45 - for our location and after that uh this
02:48 - will search for that location and
02:51 - suppose if I will go to the another
02:52 - location suppose I want to see a weather
02:55 - report for Pune
02:57 - location and uh see there we got the
03:00 - location and again if I will click on
03:03 - that current location button so now you
03:05 - can see that we got a current location
03:08 - data and uh currently I'm living on the
03:11 - mered city so that's why we are getting
03:13 - the city name here so I guess you are
03:16 - very excited to build this uh weather
03:18 - app before that let's see a additional
03:20 - feature that is this application is also
03:23 - fully responsive suppose if I go on the
03:26 - mobile screen so you can see that on the
03:28 - mobile screen this will look like this
03:31 - and obviously we can check our data by
03:33 - scrolling there like that and on the
03:35 - desktop this will look like this so I
03:38 - guess you are excited to build this
03:40 - weather app so let's get
03:44 - started so to build this weather app we
03:47 - are going to use a next GS so first of
03:50 - all we will go to our browser and search
03:52 - for
03:53 - nextjs so we will go on that first
03:57 - website and uh here we will find the
04:00 - installation command to install a next
04:02 - CH so I will copy the command from there
04:06 - and uh go to the place where I want to
04:08 - install my nextg app so here I will
04:12 - create a new folder and give that folder
04:14 - name is weather app and after that go to
04:17 - inside that folder and open a CMD on
04:20 - that
04:21 - location and after that paste your
04:24 - command there and uh after pasting your
04:27 - command add a do do there so with the
04:31 - help of dot we don't have to give any
04:34 - project name this will install our
04:36 - project inside that
04:38 - folder and after that this will ask us a
04:41 - few questions like what do you like to
04:43 - use type a script Tailwind CSS and etc
04:46 - etc so what we will do we will just
04:49 - press enter enter and install all the
04:51 - default options so I'm just pressing
04:54 - enter there uh for the es lint also yes
04:57 - enter for the T CSS enter and uh this is
05:01 - asking like would you like to use Source
05:03 - directory so yes I want to use Source
05:06 - directory and after that app router
05:09 - obviously yes and uh for the input
05:12 - allies
05:13 - no now our uh next CS is installing so
05:17 - this will take a little bit of time
05:20 - maybe 1 minute or 2 minute so I will es
05:23 - skip that part so now our next GS
05:27 - project is successfully installed so
05:29 - let's open our project in vs code so for
05:32 - that we will type code dot there and
05:35 - press enter so this will open a vs code
05:38 - on that location so now we will uh run
05:40 - our project and see the output so first
05:43 - of all we'll open a terminal so I will
05:46 - open a terminal with the help of control
05:48 - J and after that on that terminal I will
05:52 - write npm run
05:55 - da so this will open my project on Local
05:58 - Host 3001 but in your case this will
06:01 - open your project in Local Host Port
06:04 - 3000 because on my port 3000 my previous
06:07 - project is running so that's why this is
06:09 - opening on Local Host Port
06:12 - 3001 so let's go to the browser and uh
06:14 - search for local host for
06:17 - 3001 and here currently we are just
06:19 - getting a default styling by nextjs so
06:23 - let's again go to the code and uh from
06:26 - here we will go to the source folder and
06:29 - inside that Source folder we will go to
06:31 - the page. TSX and inside that page. TSX
06:36 - we will remove all the default code from
06:39 - there like that and for now I'm just
06:41 - printing
06:43 - hello and uh we will also go to the
06:45 - global. CSS file and from there we will
06:48 - remove all the default stying from there
06:51 - also and now let's save your code and
06:55 - see the output So currently we are just
06:57 - getting hello now let's see the final
06:59 - output what we need to create so here
07:03 - first of all we will create our Navar
07:05 - and after that we will create other
07:08 - components so let's go to your code
07:10 - again and on the source folder we will
07:13 - create another folder name components
07:16 - and inside that components folder we
07:18 - will create our components and inside
07:21 - that component we will firstly create
07:23 - our na bar. TSX file and inside that we
07:27 - will create our naar component so I will
07:31 - just type TS RFC so this will create a
07:33 - format function for our component and
07:37 - now here we will uh write a code for our
07:40 - naar component so first of all let's
07:43 - style our naar component so I will take
07:47 - uh this div as a nav and inside that we
07:51 - will pass the class names that is sadow
07:53 - SM
07:54 - sticky top zero left zero Z50 and bz
07:59 - White so with the help of this sticky we
08:01 - will get our naar always top so this
08:05 - will stick on that position for always
08:08 - and with the help of this top zero and
08:10 - left zero we are giving the position for
08:13 - our Nar and after that we will again
08:16 - create another Dave inside our naar and
08:19 - here we will give the class name for
08:21 - this Dave and inside that class name we
08:24 - will give the height of our nav bar is
08:27 - 80 pixel and uh width will be full and
08:30 - uh this will be the flex justify between
08:33 - and items Center and Max width will be 7
08:37 - XL and padding X will be three and
08:40 - obviously margin X will be Auto so with
08:43 - the help of this margin X Auto what this
08:46 - will do this will automatically Center
08:49 - our container or anything on the x-axis
08:53 - so that's why we are giving this MX Auto
08:55 - and inside that Dave we will create a
08:57 - one paragraph tag and on that paragraph
09:00 - tag we will give the class name of this
09:03 - that is flex items Center justify Center
09:06 - Gap two and we don't need
09:09 - border and uh while I'm adding a
09:11 - paragraph you can see this in a second
09:14 - and inside that paragraph we will add a
09:16 - S2 styling for that S2 is text Gray and
09:21 - text 3 XEL so if I will save my code and
09:24 - first of all I need to import my naar
09:27 - component in page so first of all I will
09:30 - import it there like that and uh if you
09:34 - will see the final output there so here
09:36 - we are getting our background color uh a
09:38 - little bit gray so for that uh we will
09:41 - give the class name on our D tag and
09:44 - inside that we will give these class
09:47 - name that is flex and flex column and
09:50 - after that we are giving a gap and BG
09:53 - gray 100 so with the help of this BG
09:56 - gray 100 we will get our background
09:58 - color gray and we are also giving a
10:01 - minimum height of screen and inside that
10:04 - we are passing our na bar and uh if we
10:07 - will see our output so now you can see
10:09 - that currently we are getting our Navar
10:12 - something like this so let's go to the
10:15 - nabar
10:16 - again and here we don't need this nabar
10:21 - keyword and now let's save it again and
10:23 - see so now you can see that currently
10:25 - this is looking like this and now if you
10:28 - will see there so for the logo we are
10:30 - using icon so for the icon I'm using a
10:34 - react icons so first of all we need to
10:36 - install a react icons in our project so
10:38 - we will go to the another Tab and search
10:40 - for react
10:43 - icons and uh we will go to that first
10:45 - link and first of all we need to install
10:47 - our react icons so here is the
10:49 - installation code so I will copy the
10:52 - installation code from there and uh come
10:55 - to my code so I will open a new terminal
10:58 - with the help of of control shift and
11:00 - back Tex and after that I will paste my
11:04 - installation command there and uh press
11:07 - enter so this will install my react
11:09 - icons and after that again we will go to
11:13 - that react icons and uh now we need to
11:16 - search for our icon so our icon is Sun
11:19 - so I will just search for Sun and if you
11:23 - will see the final output so here our
11:25 - sun is looking like something this one
11:27 - so we need to search for this icon
11:29 - so here you can pick any icon that you
11:31 - want but I already know the name of that
11:33 - icon so I will just directly search for
11:36 - the full name so our icon is this MD WB
11:40 - Sunny so I will just click on that one
11:42 - and here I will click on this so this
11:45 - will copy icon in the form of component
11:49 - and uh after that uh we need to go to
11:51 - the code and uh paste our icon there
11:54 - like that and again go to the browser
11:58 - and uh click on on that import code so
12:00 - this is the import code for our
12:02 - icons and after that uh we will paste
12:05 - our icon there now we have successfully
12:09 - imported our icon but here we need to
12:13 - style it additionally so here I will use
12:15 - a class name for that and on that class
12:18 - name we need to give a text size of 3 XL
12:23 - and on the margin top will be one so I
12:27 - need to give the margin top inside the
12:29 - class name and after that we need to
12:31 - give a color for our icon so we can give
12:34 - the color for our icon easily with the
12:37 - help of text property so I need to give
12:39 - a color of text yellow
12:41 - 300 and uh when I will save my code and
12:44 - see the output so our icon will look
12:47 - like something
12:48 - this and now we have created our logo or
12:52 - icon something like this one now let's
12:54 - create our search bar component so for
12:57 - that I will create another section
12:59 - and inside that section if you will see
13:02 - there in the final output and after that
13:05 - we have just a location icon and after
13:08 - that we have a search bar
13:09 - component so first of all let's import
13:12 - these icons and after that uh we will
13:15 - create our search bar component and
13:18 - let's style this section also so this
13:21 - will be the flex Gap 2 and items Center
13:24 - and inside that we have our location
13:27 - icon and for for the icons I will again
13:29 - go to that website that is react icons
13:33 - and uh search for location icon so here
13:37 - we got our location icon so I will just
13:38 - simply click on that one and uh after
13:41 - that I need to click on that so this
13:44 - will copy my icon in the form of code
13:47 - and after that uh go to your code and
13:50 - simply just paste and after that we need
13:54 - to also import our icon so for that
13:57 - again go to your browser and uh click on
13:59 - that import code and uh paste your
14:02 - import code there like that and uh let's
14:07 - style your icon so so to style your icon
14:11 - again we will use a class name and
14:13 - inside that uh class name we will give
14:16 - the text of
14:18 - 2XL and text will be gray
14:22 - 400 and on over we have a opacity off
14:26 - and this icon we have also a cursor
14:30 - pointer and let's see the output so here
14:34 - we got our location icon like
14:37 - this now let's add a another icon uh
14:41 - this is also a location icon so for
14:44 - again we'll go to the browser and uh see
14:46 - we have already searched for location
14:48 - icon but uh we need a different icon for
14:51 - our location so for now I just know the
14:54 - exact name for our location icon so I
14:56 - will just search for that name directly
14:59 - but you can choose any icon that you
15:00 - want so in my case my icon name is this
15:04 - one so I will just click on that one and
15:07 - again do the same
15:10 - process and here I will paste my icon
15:13 - and uh now I need to import my icon so
15:17 - you can also import your Icon by just uh
15:20 - clicking on control space and after that
15:22 - you will get a proper Solutions and
15:25 - after that just press enter so this will
15:29 - import your icon in your
15:32 - location and now let's style this icon
15:35 - also so for that we will again give the
15:39 - class name and on that class name we
15:41 - will give the we will give this size of
15:44 - X 3XL and now let's see the output so
15:49 - you will get your icon something like
15:51 - this so now we need to make this proper
15:56 - so here was the spelling mistake so
15:58 - that's why we are not getting a proper
16:00 - so I need to give this
16:02 - Flex now this is
16:04 - proper and now we have to also uh show
16:08 - our location there so for that uh we
16:11 - will use a paragraph tag there and we
16:14 - have to also style our paragraph tag so
16:16 - I will give the class name of this this
16:19 - is text slate 900 and 80 means we 80
16:24 - means I'm giving opacity of 80 and after
16:27 - that I have given a text SM and on that
16:30 - place I'm just writing a India and in
16:33 - future we will change this location name
16:36 - with our API data and for now let's save
16:40 - and see the output so we got our
16:42 - location there and now it's time to
16:45 - create our uh search bar so for that
16:50 - again we will create another section so
16:52 - for that again I will create another div
16:54 - and inside that we have our search bar
16:57 - component so so here I will give this
17:00 - search box there and uh we will create
17:03 - our search boox component separately so
17:06 - here I will give this file name
17:08 - searchbox TSX and inside that we will
17:11 - create our sample component with the
17:13 - help of
17:14 - tsfc and now we will style our search
17:18 - component so if you will see there on my
17:21 - search component so what I have done
17:24 - something like uh when I will press
17:26 - enter so this will also for our location
17:30 - so for that we will use a form tag so
17:33 - with the help of this form tag easily
17:35 - handle a summit logic we don't have to
17:37 - create any additional state or anything
17:40 - we just have to use a form so for that I
17:43 - will use a form tag there we don't have
17:46 - to import a form from
17:48 - anything this is form and now let's give
17:52 - the styling for our form tag so this
17:55 - will be the flx and relative items
17:58 - Center justify Center and height will be
18:01 - 10 and inside that we will create our
18:04 - input
18:05 - tag and uh after our input tag we have
18:09 - our icon so icon will be inside the
18:13 - button so I will take a button tag and
18:16 - inside that we have our search icon so
18:19 - again for the search icon we will go to
18:22 - that react icons and search for search
18:26 - so we need to search for search and here
18:29 - we need to search for exactly this
18:32 - search icon in a small letters so this
18:35 - is our search icon so again we have to
18:38 - do the same process just need to click
18:40 - on that icon and uh click on that
18:43 - component so this will copy that
18:45 - component and come to your code and
18:48 - paste it there now import your icon so
18:51 - to import again come to your browser and
18:54 - uh click on that import code so this
18:56 - will copy the import code from there
18:59 - and now just paste your import code
19:02 - there so your icon is successfully
19:06 - imported so first of
19:09 - all uh let's import our uh search bar
19:12 - component in our nabar on that
19:16 - place
19:17 - and let's import it like that and see
19:21 - the final output so here we are getting
19:24 - a error because I guess I haven't saved
19:27 - my search bar component so let's save
19:29 - this and now see we are not getting any
19:33 - error so here is our input and search
19:36 - icon so let's make it side by side our
19:38 - code and output so we can see easily
19:41 - what's going on there so now let's style
19:43 - our input tag so first of all let's give
19:47 - a placeholder and on that placeholder we
19:50 - will just simply give a search search
19:53 - location like that and uh so yeah we got
19:59 - our placeholder there and after that uh
20:03 - let's give a class name so on that class
20:05 - name we will give a padding X of four
20:07 - padding y of two and uh width will be
20:10 - 230 pixel and uh we are also giving a
20:13 - border and Border will be gray color
20:18 - that is border gray 300 and uh we are
20:21 - also giving a rounded left MD we are
20:24 - just only giving a rounded on the left
20:26 - hand side and on the focus outline will
20:30 - be none and on the focus we are changing
20:32 - the background color from Gray to Blue
20:35 - that is uh blue 500 and the height will
20:38 - be full so we are giving the height full
20:41 - there but here we are giving the height
20:43 - 10 so this will apply the height of that
20:46 - search boox component according to this
20:49 - and when I will save my code so we got
20:51 - our input style something like
20:54 - this now uh let's style our button also
20:59 - so again uh here we will use a class
21:02 - name and on that class name we will pass
21:05 - a padding X of 4 padding y of 9 AIS BG
21:09 - will be blue 500 text white rounded and
21:13 - uh if you will notice there so here we
21:15 - are passing a rounded right and here we
21:18 - are passing a rounded left so on this
21:22 - one we are just giving a rounded left
21:24 - and on that button we are giving a
21:25 - rounded right so that this will look
21:27 - like this are joining together and after
21:31 - that we are giving again on Focus
21:33 - outline will be none and on who we are
21:37 - giving a BG blue
21:39 - 600 and uh we don't need this wh space
21:43 - wh space no app and height will be full
21:46 - now you can see that our button will
21:48 - look like this and we have also added a
21:51 - h effect there and there also now it's
21:54 - time to add a props for our search
21:56 - component so so here uh first of all we
22:00 - need a value prop and on change prop and
22:05 - uh on submit prop like when the user
22:07 - submit or click on that button so for
22:10 - that we will use on submit
22:12 - prop and our value will be string type
22:17 - and uh so what will be the type of our
22:19 - on change so for that we need to write
22:21 - on change there and after that we need
22:24 - to H over that on change so here you can
22:27 - see that
22:28 - they have given the type for our on
22:30 - change so we just have to Simply copy
22:33 - our type from there so I will just copy
22:35 - from there and paste it there simply
22:38 - like that and for on submit
22:45 - also again I will hover over there and
22:48 - here you can see that they have given
22:50 - the type so I will just copy it from
22:51 - there and paste it there and uh if you
22:54 - will see there carefully so they are
22:56 - just simply using a a change event
22:58 - handler there and after that HTML input
23:02 - element and on that one react do form
23:05 - event handler and HTML form
23:08 - element and uh after that here we need
23:12 - to pass uh props like that and uh we
23:17 - need to pass the values of our props
23:20 - there so here we need to write props dot
23:23 - on submit for submit and for on change
23:27 - which need to write props do uh onchange
23:31 - like that and for the value we will
23:34 - write value there and props do
23:38 - value and uh here we need additional
23:41 - property that is class name
23:43 - prop so I will just copy the class name
23:46 - from there and uh the type of our class
23:49 - name will be the string and uh this will
23:52 - be the conditional so maybe sometimes we
23:55 - need a class name or maybe sometime we
23:57 - don't don't need a class name so that's
23:59 - why we are passing our class name with
24:02 - the help of this question mark
24:04 - operator and let's save this but here we
24:08 - have defined the class name on the props
24:10 - but we are not using there so to use
24:13 - this we have to pass our class name on
24:16 - that place on that parent form class
24:20 - name so for that we will use a
24:22 - additional function that is called CN
24:24 - function so I have already created a
24:26 - video on that topic how to use or how to
24:29 - create a CN function I will give that
24:31 - video link on my description below but
24:33 - uh don't worry if you don't know about
24:35 - CN function I will also explain a CN
24:38 - function in this video so now let's
24:40 - create a CN utility function so for that
24:44 - we will come to the source folder and
24:46 - inside that Source folder we will create
24:48 - a utils folder and inside that utils
24:51 - folder we need to create a CN function
24:54 - so here first of all we will create a CN
24:56 - file with the help of of cn. TS and uh
25:00 - we need to export our CN function so
25:03 - first of all I will write export
25:06 - function
25:07 - CN and like this and uh after that we
25:11 - need to return our logic from there so
25:14 - to create our CN function we need to
25:16 - install our two libraries so first one
25:19 - is a Tailwind merge and second one is a
25:22 - clsx we will use a Tailwind merge to
25:25 - merge our Tailwind classes and uh we
25:27 - will use a CSX package to pass a
25:30 - conditional classes first of all let's
25:32 - install these two
25:35 - packages and after installing these two
25:38 - packages first of all we will import a
25:40 - delin merge there and inside that
25:44 - Tailwind merge we will pass our clsx
25:46 - package there and if I will hover over
25:50 - that so you can see that what uh we can
25:52 - pass inside that clsx so I will just
25:56 - copy it from there and uh whatever we
25:59 - need inside that clsx we also need the
26:02 - inputs on that CN function also so I
26:05 - will paste it there and uh we need to
26:08 - import this class value type so I will
26:11 - just press control space so this will
26:14 - show me the SS from where I need to
26:17 - import so let's just press enter or
26:20 - click on that s so this will import that
26:23 - uh class value type from clsx and let's
26:27 - copy this inputs and pass inside that
26:31 - clsx now we have uh successfully created
26:34 - our CN
26:36 - function now let's copy this CN function
26:39 - and uh come to your search box component
26:42 - and now what you need to do cut these
26:46 - classes and put a curly bracket there
26:49 - and inside that Curly bracket we will
26:51 - use our CN function and add a
26:54 - parenthesis there and pass your default
26:56 - classes
26:58 - and after that we need to pass
27:00 - additional classes with the help of this
27:02 - class name so we will write it like that
27:05 - props do class name so if anyone will
27:09 - pass additional class names there so
27:12 - this will add our classes in that place
27:14 - but in some cases if someone try to pass
27:17 - uh same class for example we have
27:19 - already applied a height 10 and I'm
27:23 - trying to pass a additional height for
27:24 - example height 20 so this will only
27:27 - overwrite that height and whatever we
27:30 - pass in last this class name will apply
27:34 - now here we have completed our search
27:36 - boox
27:37 - component and let's see the output so
27:40 - there's nothing changed in the
27:42 - output now we will see which API we are
27:45 - using and how we can fetch the data from
27:48 - that API and everything so for that we
27:52 - will go to the browser and you have to
27:53 - go to the open weather map.org and there
27:57 - here first of all you have to login and
27:59 - uh if you haven't created your account
28:01 - on open weather so first of all you have
28:04 - to create an account for your open
28:06 - weather and after that login on that
28:09 - open weather and after that click on
28:12 - that your username so there and after
28:15 - that you have to click on my
28:17 - apis and uh after that click on that and
28:21 - here I have created two API keys and uh
28:24 - if you want to create your new API key
28:26 - just give the name there and click on
28:28 - generate so this will create a new API
28:31 - key for you and after that copy your API
28:34 - key which you want to use and there we
28:37 - will create a new file that is env.
28:41 - local and inside that we will paste our
28:45 - API key so for that I will give that
28:48 - name next public weather Key and after
28:51 - that I will paste my API key there so
28:54 - currently what I'm doing I'm just
28:56 - pasting my API key there and after that
28:59 - I can use it globally anywhere I want
29:02 - and we are storing our API key in EnV
29:05 - file so that uh our API is so that our
29:08 - API is not exposed publicly and now
29:11 - let's come to the main page and first of
29:13 - all we will test our API so this is our
29:16 - API and here we have to replace our API
29:20 - key with our key so for now I'm so for
29:23 - now just let's remove this one and on
29:27 - the place of this I will copy my API key
29:30 - from there and paste it there and on the
29:33 - place of place I'm just writing a uh
29:36 - like punee I want to see the weather
29:38 - report for Pune location and let's copy
29:41 - your API and uh go to your browser and
29:45 - just paste it there like that so now you
29:48 - can see that currently we are getting
29:50 - all the weather data all information of
29:53 - punee location here you can see that if
29:56 - I will open on a different browser here
29:58 - I've installed an extension so that's
30:00 - why this is looking uh like this one and
30:03 - here now you can see that we are getting
30:04 - a data for our weather and uh on that
30:08 - here we are also getting the country and
30:11 - location name and coordinates and
30:13 - population all of and like sunrise and
30:16 - sunset so what we need to do first of
30:19 - all we need to create a type for our
30:21 - data so what I will do here on my API
30:25 - key and uh in that one I am passing a 56
30:29 - so this will return us a uh maximum 56
30:32 - uh like lists of data we are getting a
30:35 - 56 weather reports data with 3 hours of
30:38 - difference for example if you will see
30:40 - there so currently on this list so if
30:44 - you will see the time for that data
30:46 - currently there now you can see that
30:48 - this is
30:49 - 12:00 but on that second one we are
30:52 - getting the time for that like 15 so on
30:55 - that data we are getting a 3 hours of
30:57 - difference so what I will do here for
31:00 - now I'm just uh getting a two
31:03 - data so now you can see that currently
31:06 - we are getting a very less data so what
31:08 - I will do I will copy all this data from
31:11 - there and go to the chat GTP and what I
31:14 - will do I need to create a type for our
31:16 - data so I will just paste this data
31:19 - there and tell that chat GTP to create a
31:23 - type for that
31:25 - data like that and whenever press
31:33 - enter so now you can see that this
31:35 - created a type for our data so what we
31:39 - need to do we just have to Simply copy
31:41 - this type from there and uh come to our
31:43 - code and we just have to paste it simply
31:46 - there so we have uh successfully created
31:49 - our types for our data and now we will
31:53 - see how we can fetch our data so to
31:55 - fetch our data we are going to use a
31:57 - react query so to use a react query
31:59 - first of all I will go to the browser
32:01 - and search for react query and uh here
32:05 - we will get the official TCH query react
32:08 - query website so we will go to that
32:11 - website and uh we will click on that
32:14 - read the docs and first of all we have
32:17 - to install that react query so I will
32:20 - copy the installation so I will copy the
32:22 - installation command from there and come
32:25 - to my code and firstly let's install the
32:28 - react query like that and now again come
32:32 - to that browser and click on that
32:35 - overview here they have given the proper
32:38 - example how we can use a react query so
32:41 - first of all we have to wrap up our main
32:43 - container with this query client
32:45 - provider so in our case layout. ESX is
32:48 - the main route of every file or our main
32:52 - or every project so what we will do we
32:55 - will first of all we will import query
32:57 - client and query client provider on that
32:59 - place so I will copy it from there and
33:03 - paste it
33:04 - there and uh what we need to do we need
33:07 - to copy this one and wrap up our body
33:11 - with this query client provider and we
33:15 - have to also use this query client so I
33:19 - will copy this one also from there and
33:22 - paste it there like that so now our
33:25 - error is gone
33:27 - and when I will save my code and uh see
33:30 - the output so now you can see that we
33:32 - are getting error because we are using a
33:35 - create context and uh create context
33:38 - only works in client component and here
33:41 - this component is or this file is a
33:44 - server component so what we need to do
33:47 - we need to convert uh this page in a
33:50 - client component so for that I will use
33:52 - a use client like that and save my file
33:56 - and and uh now we are getting another
33:58 - error like uh you are attempting to
34:01 - export a metadata from component marked
34:05 - and basically this is saying that uh we
34:07 - have written a metadata and we can only
34:10 - use a metadata on the use server
34:13 - components so for now we don't need a
34:15 - metadata so I will comment it
34:18 - there and this one also so now you can
34:22 - see that we are not getting any error
34:25 - and now our next step is to gain see
34:29 - there so on that example they are using
34:32 - API like that so I will copy this code
34:35 - from there and uh come to my code and we
34:40 - have to go to the page file and here I
34:42 - will paste that
34:44 - code and let's also import a use Query
34:47 - from react query and after that replace
34:51 - your API so I will copy this API from
34:54 - there and replace it with this one like
34:59 - that and uh we have to use the async
35:02 - function because we are fetching the
35:05 - data from the API or basically a weather
35:08 - API so maybe this will take a few
35:10 - seconds or delay so that's why we will
35:13 - use a async function there so to use a
35:17 - async
35:18 - function here we will write a
35:21 - async like that and inside that async we
35:24 - will fetch our data with the help of
35:26 - exos so let's see how we can use exos
35:30 - with react query so first of all we will
35:32 - install a exos so I will install exos
35:36 - with the help of npmi exos like that and
35:41 - if you're using a exos then we don't
35:43 - need to use a Fetch and we also don't
35:46 - need to convert this into a Jon with the
35:48 - help of exos this will handle it
35:51 - automatically so let's see how we can do
35:54 - that so inside that first of all we will
35:57 - uh store this in a variable so I will
36:00 - make this data or here we are using uh
36:04 - async so that's why we need to write uh
36:08 - a wait keyword and after that exos do
36:12 - getet inside that get we have to pass
36:15 - our URL or API link that we have to
36:19 - fetch so I will paste it there and we
36:22 - have to pass it with the help of this
36:24 - Str string like that
36:27 - and after that we have to return a data
36:30 - from there like this and now we have to
36:34 - give the type for our weather so the
36:37 - type for our weather is weather data and
36:40 - this will be like that and now if we
36:43 - will check our data so I will copy this
36:46 - data from there and let's console log
36:49 - the data so here I will write
36:54 - console.log and this is the data and
36:57 - let's see our data there so here we are
37:01 - getting error here because again here we
37:04 - are again using a create context in our
37:06 - page and we haven't defined our page as
37:09 - a use client so we have to use a use
37:13 - client there so here I will write a use
37:15 - client like
37:18 - that and now our error is gone and if we
37:22 - will see our
37:24 - output so let's see the data so here now
37:28 - you can see that we got our data
37:29 - properly there that uh we need now what
37:33 - we need to do we need to replace our API
37:36 - with that EnV API key so I will remove
37:40 - this API from there and here we need to
37:44 - use a btic and uh like
37:49 - that and on that back Tex first we need
37:52 - to pass our API key like uh process. EnV
37:59 - and after that go to your EnV file and
38:02 - copy the variable name from there and
38:04 - come to your code come to your code
38:07 - again and pass your variable there like
38:10 - that and if I will save it again and see
38:13 - the output and let's
38:16 - refresh so now you can see that we got
38:19 - our data again and uh why we need to
38:22 - type for data suppose if I want to
38:25 - additional data so I just just have to
38:27 - press Dot and now you can see that I'm
38:29 - getting an automatic Su like I want to
38:32 - see the city so I will just simply write
38:35 - city. country Dot and uh city. country
38:39 - and let's save and see the output so now
38:42 - you can see that I'm getting a in so in
38:45 - means India and let's see something else
38:49 - so uh let's see data do City do name so
38:55 - now you can see that we got our city
38:57 - name that is
38:58 - punee and now we don't need this code so
39:01 - let's remove this one now let's also
39:04 - create our loading full page loading
39:06 - component when our data firstly load so
39:10 - how it will look on the loading state so
39:13 - for that we will create a div and inside
39:16 - that div we will pass these class names
39:19 - that is flex items Center minimum height
39:22 - will be screen justify
39:24 - Center and uh inside that we will pass
39:27 - our loading text so this will be like
39:30 - that and uh inside that we have to pass
39:33 - our class names class name that is
39:35 - animate bounce and if I will save my
39:38 - code and see the output so now you can
39:41 - see that this will look like this now
39:43 - let's create these UI so here I will
39:47 - create a main tag and inside that main
39:51 - tag we will give the class names and the
39:53 - class name will be padding X3 and and uh
39:56 - Max width will be 7 XL and MX will be
40:00 - Auto and uh this will be flex and flex
40:04 - column and GAP will be N9 and width will
40:08 - be full and I'm giving a padding of 10
40:11 - and padding top will be four and inside
40:15 - that div inside that div we have two
40:18 - sections if you will see the final
40:20 - output so first section is like today
40:23 - data so from this container to this
40:26 - container we have a 2-day data and after
40:29 - that we have a 7 days forecast data so
40:33 - for that uh we will create a section
40:35 - tag and we have a two section tag so
40:39 - first section tag will be today data
40:42 - 7-day forecast data so first of all
40:45 - let's create a today data so here inside
40:49 - that we will take another div and this
40:52 - div denotes to this container so this
40:54 - will contain this date and and this data
40:58 - so if you will see there so inside that
41:00 - we have also a two div or two container
41:04 - so here I will take uh like first one is
41:07 - a S2 and after that uh so let's first of
41:11 - all style this S2 div so inside that S2
41:14 - div we have a flex and uh gap of one
41:18 - text will be 2 XEL and items Center so
41:21 - why I'm taking this uh Flex because if
41:24 - you will see there so firstly we are
41:26 - getting a day and after that we are
41:28 - getting a data so these two will be in a
41:30 - separate div or container so that's why
41:33 - I'm taking like this so for that uh take
41:37 - a paragraph tag there and now first of
41:40 - all we have to show a day so if you will
41:44 - see the data there that uh we are
41:46 - getting from our API so let's uh go to
41:50 - there and just write data there so now
41:53 - you can see there we are getting our
41:56 - lists and inside that list we are
41:58 - getting our date but uh with the help of
42:02 - date we need a but with the help of date
42:05 - we need a day and uh let me tell you
42:09 - another thing uh in that array we are
42:11 - not getting any forecast data from the
42:14 - back end uh we are just only getting the
42:16 - data by hourly wise hourly wise means we
42:20 - are getting all these list uh
42:22 - differentiate with 3 hours for example
42:25 - they are getting uh weather of like
42:27 - 12:00 and after that 300 p.m. and after
42:31 - that
42:32 - 6:00 likewise we are getting all these
42:34 - data so we have to make some logic and
42:37 - uh differentiate with the differentiate
42:40 - with 7 days forecast data so here first
42:43 - of all if you will see on the UI on that
42:46 - place we need to show a day and date of
42:49 - first list of data so for that we will
42:53 - separate our first list data so for that
42:56 - I will create a variable uh like uh
42:59 - First Data and inside that first data we
43:02 - have a data do list and we need a first
43:06 - list like that and let's check that date
43:09 - so from that date we are not getting a
43:11 - day in the form of like Monday Tuesday
43:13 - Wednesday so what we need to do we need
43:16 - to convert this date into a day so for
43:19 - that we will use another Library that's
43:22 - name is date FNS so let's go to the
43:26 - browser and uh search for date
43:29 - FNS so there you will get that npm
43:33 - website and go to
43:35 - there so now you can see the use case of
43:38 - that date FNS but don't worry I will
43:41 - also show you the use case of this
43:44 - Library so first of all copy this
43:46 - installation code and uh come to your
43:49 - code and install this library and after
43:52 - installing our library we have to show a
43:55 - day on that place so what I need to do I
43:58 - need to use a format from date FNS so I
44:02 - will import it first like that and after
44:05 - that uh we have to use par ISO and we
44:09 - have to also import uh import this par
44:12 - ISO from date FNS date FNS like that and
44:17 - uh inside that par ISO we have to pass
44:20 - our data so our data is First Data do
44:24 - date like that and maybe we don't get
44:27 - sometime our data so for that case we
44:29 - will pass this empty string because we
44:32 - must have to pass something there
44:34 - otherwise this will show us a error and
44:37 - after that put a comma and after that we
44:40 - have to pass a second parameter of
44:42 - format like uh which type of format we
44:44 - want so to show a day we have to pass a
44:48 - e e four times like that so here we are
44:52 - still getting error so I've tried so
44:55 - many things why I'm getting error so I
44:57 - find out like on that latest version
45:00 - this is not working so we have to use a
45:02 - previous version so for that I will
45:04 - again go to that library and uh I will
45:07 - click on that versions and I will use
45:10 - that 2.3 version so when you will click
45:14 - on that one so here on the right hand
45:16 - side you will get that installation
45:19 - command for that 2.30 version so I will
45:22 - click on that one and uh open a terminal
45:25 - here and install this
45:27 - version so we have successfully
45:30 - installed this version now our error is
45:33 - gone so you can see that our a is gone
45:36 - and our code is working fine and if I
45:39 - will save this one and uh see the
45:44 - output so now you can see that here we
45:46 - are getting a
45:48 - Tuesday and uh let's see there now we
45:51 - need a date so for the date uh we will
45:54 - again go to the code and here we need
45:57 - another paragraph and inside that
46:00 - paragraph We will pass our code like
46:03 - that we will use again same as it is
46:05 - like format and inside that we will use
46:08 - par ISO and uh we are passing that date
46:12 - and after that uh we need a format like
46:15 - dd. mm do after that YY y so when I will
46:20 - save this one so now you can see that we
46:22 - got our date like this
46:24 - format
46:26 - and let's also give the class name
46:29 - there and I will give this text LG and
46:33 - this text will be 2XL and this will be
46:35 - LG and when I will save this so now this
46:38 - will look like this now let's create
46:42 - this component or this container so if
46:45 - you will see there so here one thing is
46:47 - common so here for this one I have
46:50 - created a common component and uh now
46:52 - I'm using a same component in this one
46:54 - this one this one and and this one also
46:57 - so what we will do we will create a
46:59 - separate component with the name of
47:01 - container and after that we will use
47:04 - this in that place so let's go to the
47:06 - code again and on our components folder
47:11 - we will create a new file with
47:13 - container. TSX again let's type tsfc so
47:17 - this will create a normal format
47:19 - function for our component and here
47:21 - let's style our Dave so by default we
47:24 - will pass with full and BG will be white
47:28 - and Border rounded Excel and uh we will
47:32 - also pass
47:34 - flex and uh padding y will be four and
47:39 - Shadow will be SM and uh now what we
47:42 - need to do we need to pass a children
47:44 - there and we also need a like if user
47:48 - want to pass a extra classes so they
47:50 - will pass easily so before that first of
47:54 - all we will use a div props like if the
47:57 - user maybe pass like any on click or any
48:00 - something so what we will do we will
48:03 - pass all these props there so let's see
48:06 - how we can do that so for that here we
48:09 - will just simply write props and what
48:11 - will be the type of that props this will
48:13 - be the react. HTML props div element so
48:17 - why div element because here we are
48:19 - using a div so that's why we need to
48:21 - pass a stml div element there and after
48:26 - that here we will use a triple dot or we
48:28 - can also say that rest operator and on
48:32 - that place we will pass our uh props
48:35 - like that so with the help of this props
48:38 - we will get all these possible props on
48:40 - that place and now we also don't need
48:43 - this container and extra div we can just
48:46 - simply autoc close so this will also
48:49 - like uh accept or give us a child props
48:53 - and now we need to pass extra classes if
48:56 - the user want to pass a extra class name
49:00 - so I will cut this class name and use a
49:03 - curly bracket there and here we need a
49:05 - CN function again and on that one we
49:08 - need to pass our default classes and
49:12 - inside that default classes we will use
49:15 - props do class name like this and here
49:18 - we have successfully created our
49:19 - container component and we don't need
49:22 - this type props so let's remove this and
49:26 - copy this container from there and uh
49:28 - now we need a container in that place so
49:31 - I will import it there like that so for
49:35 - that I will use a control space and
49:37 - press enter so this will import the
49:39 - container so on that container what we
49:42 - need we need this temperature and like
49:44 - feels like and this minimum and maximum
49:48 - temperature so here first of all let's
49:51 - give the class name there because we
49:54 - want to pass extra classes so here I'll
49:56 - just write simply class name and now you
49:59 - can see that we are getting all the
50:01 - possible props for our da with the help
50:04 - of uh this rest operator that we are
50:07 - using and inside that class name we have
50:11 - already passed a flex so we don't need
50:13 - to give a flex and after that we need a
50:16 - gap and we need a padding X of six and
50:21 - items will be Center so why I'm doing
50:24 - this one because if you will see there
50:26 - here we have a three elements first one
50:28 - is a temperature and uh this is Fields
50:31 - like temperature and after that uh we
50:34 - have a minimum and maximum so this will
50:36 - be in the form of column and if we will
50:40 - go to there again so on our left hand
50:43 - side we have our temperature and on our
50:46 - right hand side we have our weather icon
50:49 - and uh time and temperature so first of
50:52 - all we will uh create this one and after
50:54 - that uh we'll create this one so for our
50:58 - temperature let's give a div and uh
51:01 - inside that div we need this class name
51:05 - that is flex Flex column padding X4 and
51:09 - after that we need a temperature so if I
51:12 - will console log there and uh see the
51:15 - data so let's go to the our data so here
51:19 - on our main but here is one problem that
51:22 - uh we are not getting our temperature in
51:24 - Celsius
51:25 - we are getting our temperature in Kelvin
51:28 - so what we will do we will create a
51:30 - function that will convert our Kelvin
51:32 - data to a Celsius so let's go to the
51:35 - code again and uh on our utils we will
51:39 - create a new file and give that file
51:41 - name to convert Kelvin to celsius. TS
51:46 - and we need to export this function and
51:50 - we need to use this code so here we are
51:52 - accepting a Kelvin temperature and after
51:55 - that uh we are from that Kelvin
51:57 - temperature we are minusing
52:00 - 273.15 and after that we are using a
52:03 - math do floor to remove all the decimal
52:06 - parts and uh keep the integers maybe you
52:09 - don't know how to make this function
52:11 - like convert Kelvin to Celsius so what I
52:14 - have done there I have just simply go to
52:17 - the chat GTP and uh tell that J GTP like
52:20 - I'm getting the temperature data and I
52:23 - need that data into the form of Celsius
52:27 - so chat GTP understood and uh he just
52:30 - simply create a function for me so just
52:34 - I'm just using their function and this
52:37 - works perfectly fine so let's come to
52:40 - the page again and here what uh we will
52:44 - do here we will pass this function there
52:47 - and uh we also need to import this
52:49 - function and inside that function we
52:51 - need to pass our first data Dot main do
52:57 - temperature like that and here we are
53:00 - also getting an error because this
53:02 - function is not conditional and uh maybe
53:05 - from our data sometimes or maybe this is
53:08 - loading uh maybe this is on the loading
53:11 - state so we must have to pass something
53:13 - there so for that we will use a double
53:15 - question mark so it means like uh
53:18 - suppose on the left hand side our data
53:20 - is not coming so this will pass this
53:23 - data so for now I'm just passing this
53:25 - one but you can also do one thing you
53:27 - can pass a default temperature there so
53:30 - in that case what I will do I will just
53:32 - copy that temperature from there and uh
53:35 - pass it there like that and now we need
53:39 - a this temperature text that is uh
53:42 - something circle like that and when I
53:44 - will save and see the output so we are
53:47 - getting an error so let's see why we are
53:50 - getting error so I guess because I
53:53 - haven't saved this code now I I have
53:55 - saved all of this file with the help of
53:57 - control K you can see that I have
53:59 - pressed control K there on my uh this
54:02 - Bottom bar I have pressed save so with
54:05 - the help of this all of my pages are
54:08 - saved now see there here we are getting
54:10 - a 23 degree and also maybe you will not
54:14 - get this uh degrees text so you just
54:17 - have to Simply go to the Google and find
54:20 - for degree so you will get it from there
54:23 - or anywhere from there any any anywhere
54:25 - from the Google just copy it from there
54:27 - and uh use it on the on your code and
54:30 - now what we need to do we need to add
54:32 - this Fields like and this and this will
54:35 - be inside the span tag and the class for
54:38 - this span tag is will be the text will
54:41 - be
54:42 - 5xl and this will be inside that span
54:46 - tag and now let's create another
54:48 - paragraph tag and inside that paragraph
54:51 - tag uh we need to pass this class name
54:56 - that will be text extra small and Space
54:59 - X will be one so Space X means this will
55:03 - give a space of four pixel and after
55:06 - that I'm using a white space no app so
55:09 - with the help of this white space no W
55:12 - this will not break the line and uh
55:14 - inside that uh we will use text that is
55:18 - called Wheels like and after that we
55:21 - have to pass our Fields like temperature
55:23 - like this one and let's see the output
55:25 - so we will get our output something like
55:28 - this one and after that paragraph We
55:31 - have to take another paragraph tag and
55:34 - inside that paragraph tag we have to
55:37 - pass our minimum and maximum temperature
55:40 - so first of all let's give the class
55:42 - name for this paragraph tag so this will
55:46 - be the text extra small and Space X will
55:49 - be two and inside that we will use a
55:51 - span tag now we have to pass our minimum
55:54 - temperature and maximum temperature like
55:57 - this one so I'm again using that
55:59 - function and on that I'm just passing a
56:01 - First Data do
56:02 - mean. temp Min so we will easily get
56:06 - this data from our API suppose if I will
56:10 - press a back button so now you can see
56:13 - that I'm easily getting also a proper SS
56:17 - there and uh after that we have to put
56:19 - this degree sign and this Arrow text so
56:23 - you will easily get that arot text from
56:25 - Google and now let's save and see the
56:28 - output so now you can see that we are
56:31 - properly getting our minimum and maximum
56:35 - temperature and now if you will see
56:37 - there so we are not getting any space
56:39 - between this date and this container so
56:43 - let's give the space so for that here uh
56:46 - we will add the
56:48 - space on that place on the section and
56:53 - on that Dave that uh will contain our H2
56:57 - that will contain our H2 and uh this
57:01 - container so let's also give the space
57:05 - there so here we will give the space of
57:08 - space y of two and let's see the output
57:12 - so here we got our space now let's
57:15 - create this so for that come to the code
57:18 - and here and after that we have our time
57:21 - and uh weather icon right so what we
57:25 - will do for that so for that again
57:27 - create a new div and inside that div we
57:31 - will add a class name so let's add these
57:33 - class names this is flex and we need a
57:36 - gap of 10 and on the SM screens we have
57:40 - a gap of
57:41 - 16 so uh by default on the mobile
57:45 - screens we will Gap we have the gap of
57:48 - 10 so 10 means 40 pixel and uh when this
57:51 - will come to the SM screens so we will
57:54 - have have the gap of 64 pixels and what
57:58 - we are doing if there is Overflow or
58:00 - more data so for that we are writing a
58:02 - overflow X Auto so with the help of this
58:06 - we will get our scroll bar and after
58:09 - that we are giving a width full and
58:12 - justify between and padding right and
58:15 - you know what is the mean of justify
58:17 - between with the help of justify with
58:19 - WIS and after that here comes our main
58:23 - part we need to map our data so here uh
58:27 - we are getting our data from our API
58:30 - from there so I will uh write data there
58:35 - so this will be the data and after that
58:38 - we have to map our list so so for so
58:42 - after that we will write data. list do
58:45 - map and uh parenthesis inside that Arrow
58:49 - function inside that Arrow function we
58:51 - have to create our main part uh we have
58:54 - to show show our main like weather icon
58:57 - and temperature so for that uh let's
59:00 - create another div there and uh first of
59:03 - all let's pass a key otherwise this will
59:06 - uh give us a error and here first of all
59:09 - we are getting a d means data and second
59:13 - parameter is a index and inside that key
59:16 - we will pass a
59:18 - i and after that let's give a class name
59:22 - for that div so for the class name we
59:25 - will use a flex and flex column so we
59:27 - are using a flex column because we have
59:29 - to show our data in the form of columns
59:32 - So currently we are working on that part
59:35 - so first of all we will show the time
59:37 - after that weather image and after that
59:39 - obviously temperature and uh after that
59:42 - we are giving a gap items Center or text
59:46 - small or font semi Bol and now first of
59:49 - all we have to show our time so for that
59:52 - again we will use a paragraph tag and uh
59:54 - inside that paragraph tag will pass our
59:57 - time so for the time first of all we
59:59 - will use a format from our date FNS
60:02 - Library so for that I will write a
60:04 - format and inside that format first of
60:07 - all we have to pass so again we have to
60:09 - use a parse ISO and uh now we have to
60:13 - pass our time so time will be T do DT
60:18 - text so with the help of this we will
60:20 - get the exact date from our data and
60:24 - after that we have to pass a format of
60:26 - our data so here I will write H do mm
60:31 - and a so with the help of a we will also
60:34 - get AM or PM and now let's save and uh
60:37 - see the output so yeah currently you can
60:40 - see that we are getting the time of 300
60:43 - p.m. 600 p.m. or like 12:00 a.m. like
60:46 - that so if you will see there so
60:49 - currently this is getting in a two lines
60:51 - but uh what we need we need in a single
60:54 - line
60:55 - so for that we will pass a class name
60:58 - that is called wh space no
61:01 - app and let's save this and uh see the
61:04 - output so yeah we got our data in a
61:07 - single line and now let's add a weather
61:10 - icon so before that first of all let's
61:13 - add a temperature and after that I will
61:15 - show you how we can add a weather icon
61:18 - so for our temperature let's again take
61:21 - a paragraph tag and pass our temperature
61:24 - like that like we have done before D do
61:27 - mean and temp means temperature and uh
61:31 - if we are not getting any temperature so
61:34 - by default we will pass zero and after
61:36 - that uh this is the degree text and
61:40 - let's save this so we will got our time
61:43 - and temperature now we have to show our
61:45 - weather icon so for the weather icon
61:49 - here we have to create another separate
61:51 - component and uh so let's see how how we
61:54 - can create our weather icon component so
61:58 - on that uh components folder here I will
62:01 - create a new file with the name of
62:03 - weather icon. TSX and let's write tsfc
62:07 - to create a sample format and inside
62:11 - that we have to use a image tag so I
62:16 - will import image from next image and
62:19 - here we have to remove scarly
62:21 - bracket and after that we have to pass
62:24 - our Source there so what will be the
62:26 - source of our image so I for this I have
62:30 - another API of open weather so let's go
62:33 - to your browser and see this one so now
62:37 - you can see that with the help of this
62:38 - API we will get our weather icons just
62:41 - we need to replace this like 01 D so if
62:45 - I will pass
62:47 - 02d so we will get a different icons
62:50 - with the help of this so we will use
62:53 - this link so in the place of source we
62:56 - will pass our uh API Source like that
63:00 - and uh after that let's style our image
63:03 - so here uh let's pass uh height and
63:06 - width for image so width will be 100 and
63:10 - height will be 100 and let's also pass
63:14 - alt so on the alt we will pass a weather
63:17 - icon and we have to also pass a class
63:20 - name so for the class name I will use a
63:23 - absolute there and height will be full
63:26 - and width will be full and uh here on
63:30 - that div let's use a CN function suppose
63:33 - in that case if we need uh if we need to
63:36 - pass any extra class names so again we
63:39 - will use a CN utility function there and
63:42 - inside that uh we will pass our default
63:44 - classes so our default classes is
63:47 - relative and inside that relative we
63:49 - have to pass a
63:51 - H2 H20 so h0 20 means height will be 20
63:56 - and width will be 20 so here our height
64:00 - and width will be full and what is the
64:02 - mean of this height and width so with
64:05 - the help of this height and width this
64:07 - will load that much of our image on that
64:10 - quality means uh this will load 100
64:13 - pixel width of height and 100 pixel of
64:17 - width this will load and after that we
64:20 - are customizing our height from there so
64:23 - mainly this height will apply and uh
64:25 - with the help of this we are getting
64:27 - that much of quality image and now we
64:30 - have to pass our icon name props there
64:33 - but here we also need uh all of our
64:35 - props there so in some case if we need
64:38 - to pass any extra property there so on
64:41 - that case what we will do here uh we
64:44 - will write props and after that what we
64:47 - have done for our container component so
64:49 - I will go to The Container component and
64:51 - I will copy this props from there and
64:54 - and paste it there like that and now we
64:58 - need additional prop that is called uh
65:02 - icon name so that I am passing there so
65:05 - I will pass it there like that and this
65:07 - will be the type of string so I will
65:10 - write it like that and we need a single
65:12 - end operator now this is fine and on the
65:16 - place of Icon we have to use a props do
65:19 - icon like that and here uh we need all
65:24 - of our props so here I will write uh
65:29 - props like that so with the help of this
65:32 - I am passing all of our props on that da
65:36 - now we have successfully completed our
65:38 - weather icon component so let's save
65:41 - this one and copy this component and
65:44 - come to our page and we need our uh
65:47 - weather icon component on that place so
65:50 - I will paste it there and just simply
65:53 - import my weather icon component
65:55 - there and uh we need to pass a icon name
66:00 - so if you will come to that data so I
66:03 - will press uh F12 and let's see the data
66:07 - and inside that data go to the weather
66:09 - and inside that uh weather you can see
66:13 - that we are getting our icon we are
66:14 - getting a value of
66:16 - 04n so this is the icon name that we
66:19 - need to pass in our icon
66:21 - component so here I will write it like
66:25 - uh D do weather and on that weather we
66:30 - need to access a first
66:32 - property and after that we need to pass
66:34 - a icon like that and let's save this and
66:38 - see the
66:40 - output so here we are getting a error
66:44 - because here we are using a open Weather
66:46 - image API so we need to configure this
66:49 - in an xgs so to configure this so first
66:52 - of all let's click on this one
66:54 - and uh after that uh copy all of this
66:58 - code and uh come to your code and go to
67:01 - the next config file so I'm just
67:04 - pressing a contrl p and finding a
67:06 - finding with the help of this next
67:08 - config and replace all of your code with
67:11 - this code now what you need to do come
67:15 - to your output again and uh see there
67:18 - that's what error I'm getting so this is
67:21 - saying that I have I haven't configured
67:23 - that host name so just let's copy this
67:26 - host name from there and replace it with
67:29 - example host name and uh we don't need
67:33 - this path name and port and let's save
67:36 - all of our files and reload this
67:40 - page now you can see that our error is
67:43 - gone and uh we got our images with the
67:46 - help of our API and here one thing also
67:51 - like if you will see there so currently
67:52 - I'm getting all of our images same uh
67:56 - because from our API we are getting uh
67:58 - these images but on that weather image
68:01 - API on the place of D if I will write n
68:04 - so now you can see that I'm getting a
68:06 - night image so what we need to do we
68:09 - need to create a function to like uh to
68:11 - separate our data like uh currently we
68:13 - are passing a night image or uh Day
68:16 - image so here I will create another
68:18 - function like get day or night icon and
68:22 - on that icon we will pass our current
68:24 - date and time and our icon name so what
68:28 - this will return us so if it is before
68:30 - 6:00 a.m. time so this will return a
68:33 - night icon and after 600 a.m. this will
68:35 - return a day icons so let's go to the
68:39 - code
68:40 - again and on our utils we will create
68:43 - another function so here I will come to
68:45 - the utils folder and create another
68:47 - function that is called day or night
68:50 - icon. TSX sorry dots yes and inside that
68:55 - uh we will use this function so this
68:57 - function will accept our icon name and
69:00 - uh date and time in the form of string
69:03 - so here what we are doing we are just
69:05 - checking there like uh if our time is
69:08 - less than 6 less than or equals to 6
69:10 - a.m. and if our time is greater than
69:13 - equals to 6 so basically what's we are
69:15 - doing we are checking our like it's time
69:18 - between our 600 a.m. or 6:00 a.m. to 600
69:20 - p.m. so this means our daytime so here
69:23 - we checking like it's the time if this
69:25 - is the day time so we are returning a
69:28 - day otherwise we are returning a and
69:30 - there so this function I have also
69:32 - created with the help of chat GTP so I
69:35 - will just copy this function and uh come
69:37 - to that code again so for now just copy
69:40 - this one and comment this above and here
69:44 - first of all let's use this get uh deite
69:47 - icon import this function and inside
69:51 - that let's pass a d dot weather and uh
69:55 - first of all we are passing our icon so
69:59 - dot icon like that and second parameter
70:02 - will be our date so for that put a comma
70:05 - there D do DT txt like that and let's
70:11 - save this and uh see our output so on
70:15 - that night and day we are getting a same
70:18 - icon because for n night and day we have
70:21 - a same icon so for example if I check
70:24 - for the icon so now you can see there we
70:26 - are getting our same icon so that's why
70:29 - here we are also on our output we
70:32 - getting the same icon and let's see the
70:34 - final output
70:36 - again so here basically we have done our
70:39 - main parts this today's date and
70:42 - temperature now let's create a UI for
70:44 - our 7 days forecast data so now we will
70:48 - create uh this UI so let's again come to
70:51 - your
70:52 - code and uh come to the page. ESX file
70:57 - and there we have created another
70:59 - section for our 7 days forecast data so
71:04 - inside that first of all we have a
71:05 - paragraph tag and inside that paragraph
71:08 - tag we have to write 7day
71:11 - forecast so this will be like this and
71:14 - uh let's also style this
71:17 - paragraph so this will be the class name
71:20 - of text 2XL and we have to also give the
71:23 - class name for our section tag so on
71:26 - that section tag we will give the class
71:28 - name of flex and width will be full and
71:32 - flex column Gap will be four now comes
71:35 - our main part if you will see the main
71:37 - app so inside that uh there is a same
71:40 - component that is repeating seven times
71:43 - so what we will do first of all we will
71:46 - create this component so let's come to
71:48 - the code again and uh give this
71:51 - component name called forecast weather
71:54 - detail and uh now let's come to the
71:57 - components folder and inside that we
72:00 - will create that file that is called
72:02 - forecast feather detail. TSX and now we
72:06 - will write TS
72:08 - RFC to create our sample component and
72:12 - now inside that uh we will create
72:14 - our
72:16 - forecast now we will create our forecast
72:18 - detail component so if you will see the
72:22 - final output so this component is wrap
72:26 - up with our container component so first
72:28 - of all we will use a container there so
72:32 - I will write container and uh we have
72:35 - successfully imported our container
72:36 - component and inside that container
72:38 - component but before we make this
72:41 - weather forecast I forgot one thing we
72:43 - have to also create this section so
72:45 - first of all let's create this section
72:48 - and on that section we have to show a
72:50 - description there and uh extra details
72:53 - on that place so let's come to the code
72:56 - again and we need to go to the page and
72:59 - after that we have to create another
73:02 - Dave and inside that Dave we have our
73:05 - two containers so first of all let's
73:08 - give the class name for that da uh that
73:11 - will be the flags and uh Gap will be
73:14 - four and inside that we have our two
73:17 - containers so first one will be our left
73:20 - and second one is our right
73:24 - so I'm just commenting it there and
73:27 - after that uh let's import our container
73:30 - there and inside that let's pass a class
73:33 - name so we will use this class name that
73:36 - is width will be fit according to our
73:38 - content this will uh resize our width
73:40 - and after that we are just passing a
73:42 - justify Center Flex column and ping X
73:45 - will be four and items Center and uh
73:49 - inside that we have to show a weather
73:51 - description so first first of all we
73:53 - will take a paragraph and after that we
73:56 - have to show a weather icon so what we
73:59 - have done there for our weather icon so
74:02 - I will just copy this one and uh simply
74:05 - paste it on that place but uh here on
74:08 - the place of data we have to write a
74:10 - First Data and on that place also we
74:14 - have to replace D with the help with
74:17 - First Data and this is giving us a error
74:20 - like uh this may be undefined so what we
74:23 - will do we will use this double question
74:25 - mark and here we will pass a empty
74:27 - string and we will do the same for this
74:30 - one also so this means in some case if
74:34 - we don't get a data so this will pass a
74:37 - empty string there and uh on the place
74:41 - of paragraph We have to show a weather
74:44 - description so we will what we will do
74:47 - we will uh show a first so we will show
74:50 - a description of our first data so here
74:52 - I will again use use a First Data dot
74:55 - weather and on that weather we have to
74:58 - select first element and uh we have to
75:01 - show a description of our first element
75:04 - like that and if we will see the output
75:08 - so this will look like this one and now
75:11 - we have to style our paragraph so here I
75:15 - will give this here I will give this
75:18 - capitalize and text Center like this one
75:22 - so this will look like something this
75:25 - now let's create uh this right da so for
75:28 - the right da we will again use another
75:31 - container so again I will just write a
75:34 - container like that and inside that
75:37 - container we have to change our
75:39 - background color so for that let's use a
75:41 - class name and we have to use a yellow
75:44 - color so I will pass a BG yellow 300
75:47 - like that and this will have the opacity
75:51 - of 80 and after that padding X will be
75:54 - six and uh Gap will be four justify
75:59 - between and overflow X Auto and when I
76:04 - will save this So currently we will just
76:06 - get this output now what uh we need to
76:10 - do we need to create a separate
76:11 - components to show our weather
76:13 - details and if you will see there these
76:16 - components and these components are the
76:19 - same so what I will do I will create a
76:21 - same component for this one and uh after
76:24 - that we will use this component on that
76:27 - place also so now we will create a
76:31 - weather details component so let's go to
76:34 - the components folder again and here we
76:36 - will create a weather details. TSX file
76:39 - and inside that uh here uh we will write
76:42 - TS RFC now let's create our weather
76:45 - details component so on that weather
76:48 - details component we won't use any div
76:50 - because we are styling it from parent
76:52 - container so let's again come to the
76:55 - weather details and for our weather
76:58 - details component we have to create
77:00 - another component that is called single
77:02 - weather detail so here we will create a
77:05 - single weather detail component so here
77:07 - I will write function single weather
77:09 - detail and let's also create a type for
77:12 - our single weather detail props and here
77:17 - we will write a function like that and
77:19 - uh we will pass our props and props will
77:23 - we have this type like
77:27 - that and here we need a return and on
77:31 - that return we will currently we are
77:34 - creating uh this div that D will contain
77:37 - this description or after that image and
77:41 - uh this value data so that's why I have
77:45 - uh taken here three props that is
77:47 - information icon value so first of all
77:50 - let's create a parent T there on that
77:53 - parent Dave we will give the styling of
77:55 - flex Flex call justify between Gap two
77:58 - items Center and text extra small and uh
78:02 - font semi-old and text PL and I'm
78:07 - passing a text PL with 80%
78:10 - opacity and inside that we need another
78:13 - paragraph that will contain information
78:16 - so I will use it like that class name
78:19 - and uh I'm using a white space no WP so
78:22 - with the help of this white space no
78:25 - wrap this text will not break into a
78:28 - separate line this will show our data in
78:30 - a single line and here uh we have to do
78:33 - like props do
78:35 - information and uh now I have to show
78:38 - icon on that
78:40 - place so here I will also pass icon from
78:44 - our props so I'm just writing it like
78:47 - that and here we will use a props do
78:50 - icon for the icons we will use a react
78:52 - icons so that's why I'm passing there
78:55 - text 3XL so this will apply all of our
78:59 - icon that we will pass on that
79:02 - component and uh now we have to show a
79:05 - value so for the value we will use a
79:08 - props do value like that now we have uh
79:13 - successfully completed our single
79:15 - weather detail
79:16 - component now what we need to do we have
79:19 - to just simply use that uh single we
79:23 - component on that place and uh we have
79:26 - to pass all these props so on the first
79:29 - prop we have icon and on the second one
79:31 - information and on the third one we have
79:34 - a value so if you will see there this
79:37 - data will be always same like visibility
79:40 - humidity wind speed air pressure or
79:42 - Sunrise I mean that information and icon
79:45 - will be always same for like you can see
79:48 - there I'm getting the same information
79:50 - there and for this one this one same
79:52 - same same same like humidity humidity
79:55 - wind speed wind speed so I will pass
79:57 - these data manually and uh we have to
80:00 - pass these values in our
80:03 - props so how we can do that so if you
80:07 - will see there first of all we need a i
80:10 - image and like and likewise here we are
80:13 - using a drop image and after that wind
80:16 - image and likewise here we are using a m
80:19 - image so for our I we will use this icon
80:22 - Lu I so for the I we will use this Lu e
80:26 - e icon and we and we will import this
80:30 - icon from react icons so I already know
80:33 - what is the icon name but uh you can
80:35 - simply go to the react icons and uh
80:38 - search for your icon suppose if you want
80:40 - to search for I icon so just simply go
80:44 - there and search for I like that then
80:47 - you will get uh your icon then you just
80:51 - have to click on that icon and and uh
80:52 - click on that component then you will
80:55 - automatically get copied your code but
80:58 - in that case I already know the icon
81:00 - name so I will just import import my
81:03 - icon so to import my icon I will just
81:07 - simply import it from react icons like
81:10 - that and here I have to import it from
81:13 - Lu like this one and now we have to
81:17 - create a props for this
81:20 - one like uh see the final output so we
81:25 - have to create our props for visibility
81:27 - humidity wind speed like that so what we
81:30 - will do we will create our props like
81:33 - this and uh this so this component will
81:36 - have these props like visibility
81:39 - humidity wind speed air pressure sunrise
81:41 - and sunset let's copy this props type
81:44 - from there and uh paste it there and now
81:48 - let's write it props there and here we
81:51 - have to write
81:53 - props do
81:55 - visibility and likewise and likewise we
81:58 - have to also do it for like humidity so
82:02 - I will just copy this one and uh change
82:04 - the name from visibility to humidity and
82:08 - I have to also change the icon so I
82:10 - already know the icon name so the icon
82:13 - is fi droplet and I have to also import
82:16 - that icon so I will import my icon like
82:19 - this one and likewise I have to import
82:22 - all of our icons and uh all these
82:25 - possible props so I will just copy and
82:28 - paste from my previous code and here
82:31 - what we will do we will pass some
82:32 - default values if like suppose if we are
82:35 - not passing any values from the API so
82:38 - for that what we will do here we will
82:40 - create another variable and on that
82:43 - variable we will destructure all of our
82:46 - props from our props and uh we will pass
82:49 - our default values and after that we
82:51 - will pass our values
82:53 - on that component like that and let's
82:56 - copy this weather details component from
82:58 - there and now we have to use this
83:01 - weather detail component on that
83:03 - place and let's also import our weather
83:06 - detail component here so here we have to
83:09 - pass all of our props so first is air
83:12 - pressure so for the air pressure if we
83:15 - will go to our data so let's press F
83:18 - Well there and uh see the data so on the
83:22 - main you will find that pressure so this
83:24 - is the air pressure so we have to just
83:27 - show it exactly like that so first of
83:29 - all we have to show a visibility so
83:31 - let's come to the visibility so when you
83:34 - will click on that City so on that list
83:37 - you will get the visibility there so it
83:40 - doesn't matter what uh you will pass on
83:42 - that component first this will apply all
83:44 - these in that manner that uh here we are
83:47 - passing now on that firstly let's pass
83:50 - uh visibility so for the
83:53 - visibility what we need to do so for all
83:56 - these data we have to select first data
83:58 - and uh from that first data we have to
84:01 - show all these additional data so here
84:04 - if you will see in our data so we are
84:06 - getting our data in a meters and if you
84:09 - will see the final output so we have to
84:11 - convert uh this data into a kilometers
84:14 - so for that again we will create another
84:17 - uh utility function that is meters to
84:19 - kilometers so let's go to the utility
84:22 - fun FES and here we will write me. 2 km
84:26 - do DS and inside that we will create
84:29 - this function that is called meters to
84:31 - kilometers and this will accept uh
84:34 - visibility in meters and after that this
84:37 - will convert this into a kilometers and
84:40 - I have also created this function from
84:42 - CH GTP so if you are stuck in any place
84:45 - so you can just simply ask to the chat
84:48 - GTP like I want to create this function
84:50 - or component or anything
84:53 - so let's just copy this one and uh we
84:56 - have to use this on that place so let's
84:59 - pass this function there and import our
85:03 - meters and now we have to use a first uh
85:07 - data inside that first data we have to
85:09 - pass a visibility and in some case if
85:12 - our visibility is not coming so we will
85:15 - pass our default visibility that is
85:18 - 10,000 that we are getting from our data
85:20 - by default and let let's also pass a air
85:23 - pressure so for the air pressure first
85:26 - of all let's use a back tix there and
85:28 - inside that back tix we will use a
85:31 - dollar symbol and inside that we will
85:34 - pass our first data do main do pressure
85:38 - so we will get our pressure and after
85:41 - that we have to write a
85:43 - HPA and when I will save and see the
85:47 - output so here we are getting error so I
85:50 - guess I have imported components two
85:53 - times so let's check there so there is
85:57 - something wrong in weather details
85:59 - component so let's check it there so
86:01 - here I have created this component on
86:03 - that place and I'm just importing it so
86:06 - let's remove it from there and now you
86:09 - can see that our error is gone and uh we
86:13 - are now getting another different error
86:15 - so I guess I haven't save this meters to
86:17 - kilomet function so let's uh save all of
86:21 - our files so now you can see that our
86:24 - error is gone and we are getting our
86:26 - data so here you can see that first of
86:29 - all we are getting our visibility and uh
86:32 - this 108 HPA pressure and we are also
86:37 - getting our others data so we are
86:40 - getting our others data because if you
86:42 - will see on that here we have passed our
86:46 - default values for our props so that's
86:49 - why we are getting our default values
86:51 - there now let's go to the code again and
86:55 - pass other datas so other data will be
86:58 - humidity so for the humidity again we
87:00 - will do the same here we will use a back
87:04 - tiex curly bracket and dollar symbol
87:08 - inside that inside that humidity so
87:12 - again we will use a First Data and Main
87:15 - dot humidity and we have to show a
87:19 - humidity in the form of percentage so so
87:22 - so that's why I'm writing a percentage
87:24 - there so we got our humidity
87:28 - 43% and uh after that we have to use uh
87:32 - we have to set a sunrise so for the
87:34 - sunrise so if you will see there on the
87:37 - data we are getting a sunrise and sunset
87:40 - of that City so here we are getting some
87:43 - values for the sunset and uh Sunrise so
87:47 - we will convert these values in a time
87:50 - so for that again we will use a date FNS
87:52 - function that we have downloaded
87:56 - previously uh so let's see how we can do
87:58 - that so here we will write a format and
88:01 - inside that format we'll use a format we
88:04 - will use a from Unix time and we are
88:08 - importing a uni time from date FNS
88:11 - function and uh inside that we will pass
88:14 - our date we will pass our data do City
88:18 - do uh so first of all we have to pass a
88:21 - sunrise
88:24 - and and after that uh we have to pass a
88:27 - format so format will be H do
88:31 - mm and here we are getting error because
88:34 - we have to pass some values so what I
88:37 - will do I will copy that value from
88:40 - there and because we must have to pass
88:42 - some values so that's why we have to
88:44 - pass it like that and we have to pass
88:46 - this in the form of string so there it
88:49 - means we are passing our sunrise data
88:52 - there and in some case if we don't get
88:55 - any Sunrise data or we are getting
88:57 - undefined values so we are passing this
89:00 - instead of
89:02 - this and let's add another parameter so
89:07 - we will do the same for Sunset so we
89:09 - just have to add a sunset there and uh
89:13 - after that uh let's add a wind
89:15 - speed and for the wind speed so if you
89:19 - will see there in the final output so we
89:22 - are getting our wind speed in a
89:24 - kilometer per hour but if you will check
89:26 - that data and here let's check the First
89:30 - Data do wind here we are getting our
89:33 - speed in m/ second and we have to
89:36 - convert this speed into a kilm per hour
89:40 - so for that again we will create another
89:42 - utility function so let's come to the
89:45 - code again and uh go to the utils file
89:48 - there and here we will write a convert
89:51 - wind speed
89:52 - dots and uh we will and we will create
89:56 - this function so with the help of this
89:58 - function this will accept speed speed in
90:03 - me/ second and uh what this will give us
90:07 - this will give us a speed in speed in
90:10 - kilometer per hour and let's save this
90:14 - and copy this function and uh use this
90:17 - function on that place and let's also
90:20 - import this function there
90:22 - and inside that first of all we have to
90:25 - use this and inside that function we
90:28 - have to pass a First Data dot uh wind do
90:32 - speed and if this is undefined so we
90:35 - have to pass uh some sample data so I
90:39 - will use this one and let's save this
90:43 - and see the output so now you can see
90:46 - that currently we not getting any error
90:48 - in this page and everything is fine and
90:50 - uh we got our UI like this now let's
90:54 - create a UI for our forecast 7 days so
90:58 - here what we will do for this one we
91:00 - will create a separate component and
91:02 - after that we will map this component
91:04 - according to our data so first of all
91:07 - let's create uh forecast weather detail
91:09 - component so here we have already
91:12 - created our file and now let's create
91:15 - this component fully so on that
91:17 - component firstly we have to use a
91:19 - container tag there and ins inside that
91:22 - we have another section and inside that
91:25 - we have two sections so first section
91:27 - will contain this weather detail I can
91:30 - and these data and another section will
91:33 - contain these data so let's create a
91:36 - section tag
91:37 - there and inside that let's pass a class
91:41 - name and let's also give the class name
91:44 - there so this will be the class name and
91:47 - uh we have already applied a flex there
91:49 - so we just have to pass a gap four
91:52 - and in our first section firstly we have
91:55 - another
91:56 - Dave and inside that da we have a
92:01 - weather icon component so let's import
92:03 - our weather icon component there and on
92:07 - that we have to pass our feather icon
92:09 - props for this component so what props
92:12 - we need first of all if you will see
92:14 - there here we need a weather icon and
92:18 - date and day and after that we need a
92:23 - temperature and feels like temperature
92:26 - and uh obviously minimum temperature
92:29 - maximum temperature so we need all these
92:32 - data and we also need all these props
92:36 - that is visibility humidity wind
92:38 - pressure so what we will do we will get
92:42 - these props from our previous component
92:44 - so let's see how we can do that so
92:47 - firstly we have created a props for our
92:50 - these data
92:52 - that I have told you before like icon
92:55 - date icon date day temperature all these
92:59 - and now we need all these props also so
93:03 - for that we will use a extend keyword
93:05 - and which type we need we need these
93:07 - weather details we are already exporting
93:09 - these props from that place so I will
93:12 - just copy it from there and uh come to
93:15 - my weather forecast detail component and
93:18 - I will just paste it there and let's
93:20 - press control space and import so this
93:23 - will import and extend these props so I
93:28 - will use this on that
93:30 - place and let's give this name a props
93:35 - like that and what I will do I will pass
93:39 - some I will pass some default values for
93:41 - these props so what we have done for
93:44 - this component that is weather details
93:46 - we will do the same for this forecast
93:49 - weather details so this will be
93:52 - something like this and now first of all
93:54 - let's pass our now let's pass our props
93:59 - there so here we need a icon name and on
94:03 - that icon name we will just simply pass
94:05 - a weather
94:06 - icon and uh after that uh and after that
94:11 - we have a paragraph inside that
94:13 - paragraph we have a date and after that
94:16 - date uh another paragraph and inside
94:20 - that graph we have a day but uh our day
94:24 - will
94:25 - be something small so I will give this
94:29 - text SM like this so if you will see in
94:32 - the final output So currently we have
94:35 - just created this part now let's create
94:38 - this UI so for that again uh use another
94:42 - div and uh inside that div we will use a
94:46 - class name and this will be the flx and
94:49 - uh flx call and padding X will be four
94:53 - and first of all we need a temperature
94:56 - so here we will use a span tag to show
94:59 - our temperature and obviously we need to
95:02 - convert our temperature into Kelvin to
95:05 - Celsius so that's why I'm using this
95:07 - Kelvin to Celsius function there and now
95:10 - we need our paragraph tag inside that
95:13 - paragraph tag we need to we need to show
95:16 - our Fields like temperature so this will
95:18 - be something like this this will be text
95:21 - extra small and space between these
95:23 - fields likes and temperature will be 4
95:26 - pixel so that's why I'm passing like
95:28 - that and uh I'm passing also white space
95:31 - no wrap so this will not breaks into two
95:34 - lines and after that let's show the
95:38 - description so for the description we
95:39 - will just simply write description so
95:42 - this is our description for our weather
95:44 - data and now we have completed our this
95:49 - uh left section
95:52 - now let's now it's time to create a
95:55 - right section so for our right section
96:00 - again we will create a section tag there
96:04 - and inside that we will use these class
96:07 - names that is Overflow X Auto and flex
96:10 - justify between Gap 4 padding X4 width
96:14 - will be full padding right 10 and inside
96:18 - that we will use our weather details
96:21 - comp component so this is our weather
96:22 - detailed component so let's copy this
96:25 - one and import this component on that
96:29 - place and now we need to pass all these
96:33 - props all these props of this one so
96:36 - here is a one trick like uh we can also
96:39 - pass it by one by one like uh here we
96:42 - can do like props do air pressure
96:46 - something like that but uh here is
96:48 - another trick what we can do we can just
96:50 - simply write curly bracket there and
96:53 - triple Dot and simply we can write props
96:57 - and we can simply write props so this
96:59 - will automatically get all of props on
97:03 - this one with the help of this and uh
97:06 - that's it for this component that is
97:09 - forecast weather detail component and
97:12 - let's save this and copy this component
97:14 - and uh come to the main page and we need
97:17 - this component on that place and here we
97:20 - have to pass all these props that uh we
97:24 - need there but before that we need to do
97:26 - one thing that is uh if you will see on
97:31 - our final data so on that object here we
97:34 - are getting a 40 arrays so what we need
97:37 - to do we need to make some logic and uh
97:41 - we need a one data for every single day
97:43 - and on that 40 data we are getting four
97:46 - or five data for the same day so what we
97:49 - will do we will create some logic and
97:52 - with the help of that logic we will only
97:54 - filter out a single data for every day
97:58 - and store it in a separate array and
98:01 - after that we will map that array so
98:04 - let's see how we can do that so for that
98:07 - we will use this logic and before that
98:10 - here we are getting an error because I'm
98:12 - using a set so if you are getting any
98:15 - error while using a set keyword so you
98:18 - have to go to the ts. config file and
98:21 - here you have to write instead of es5
98:24 - that is you have to write
98:27 - es2015 and let's save this file and uh
98:31 - now you can see that now we are not
98:33 - getting any error regarding our set and
98:36 - let's understand this logic So currently
98:39 - what's going on there this is filtering
98:41 - our data date wise so with the help of
98:44 - this logic we are getting a unique dates
98:47 - and after that we are mapping that
98:50 - unique dates and from that unique dates
98:53 - we are extracting the data here we are
98:56 - filtering a daytime data like after 6
98:59 - a.m. and uh before 6:00
99:02 - p.m. so let's copy this array and uh we
99:07 - need to map this on that place and uh
99:11 - let me tell you one thing I have created
99:14 - uh this logic from chat GTP means I know
99:16 - what to do I have just explained the
99:18 - chat GTP like I need to create some
99:20 - variable in that way that uh this will
99:22 - get the data in the DA for that this
99:25 - will UniFi the data and uh give a single
99:29 - data from every day something like that
99:32 - and let's copy this data and uh now we
99:35 - need to map it there so let's use a cly
99:37 - bracket there and after that use a map
99:42 - inside that map use Arrow function and
99:45 - inside that Arrow function let's map
99:48 - this component and first of all let's
99:51 - pass a key so here firstly we have to
99:54 - import this components so that's why we
99:56 - are not getting a stion for our key so
100:00 - now you can see that we are getting all
100:01 - SS for our props so firstly let's pass a
100:05 - key and uh inside that key before
100:08 - passing the key let's pass uh D and I so
100:11 - d means data and I means index so in the
100:15 - key we will pass uh I and after that we
100:20 - will pass our all of our props so I'm
100:24 - just uh passing all of our props like
100:26 - that so if you will see there I have
100:28 - passed a description with the help of D
100:31 - do weather and on that weather I'm
100:34 - selecting a First Data and after that
100:37 - I'm passing that description and for the
100:39 - weather icon I'm just doing the same and
100:42 - for the date what we have done
100:44 - previously I'm just converting that date
100:47 - in a proper string format but on that
100:49 - time we need our date in in that format
100:51 - so that's why I have written a dd. MM
100:54 - likewise we are passing all of our props
100:57 - that uh we have previously passed I
100:59 - haven't done anything new there so
101:01 - that's why I have just copied this code
101:03 - from my previous project and paste it
101:05 - there and now let's save this and uh see
101:09 - the
101:10 - output so now you can see that we got
101:13 - our UI like this but uh there is
101:16 - something wrong this is not in the
101:18 - proper Center so let's go to the code
101:21 - and see what is the issue so here on
101:25 - that name we have to pass our class name
101:28 - that is
101:29 - flex Flex call and GAP will be one and
101:34 - items Center and now you can see that we
101:37 - got our data in a proper form and now
101:40 - there is two things left when the user
101:43 - will search so we have to apply a search
101:45 - functionality and when the user will
101:48 - click on that button so we need to show
101:50 - the weather report for that current
101:52 - location so first of all we will create
101:54 - our search and after that we will create
101:58 - this functionalities when the user will
102:00 - click on that button so this will show
102:02 - the weather data for that current
102:04 - location so let's go to the code and uh
102:08 - we have to go to the Navar component so
102:11 - I will click on that Navar and now we
102:14 - are inside the naar component and here
102:17 - what we need to do if you can see there
102:19 - on a final output so when I'm start
102:24 - typing like Delhi so now you can see
102:27 - that we are getting a su so firstly
102:30 - let's uh implement this functionality so
102:33 - for that we will create some use States
102:35 - so first of all we need to create a
102:37 - state for this value and on change so
102:42 - here uh we will give this value name to
102:45 - a city and set city state and we have to
102:48 - also import our use state so we will
102:51 - import our user state from react like
102:54 - that and uh we have to also create our
102:57 - error State like uh if we will go to the
103:00 - final output and suppose if I am typing
103:03 - something typing anything and uh this
103:06 - place is not exist and when I'm trying
103:08 - to press enter so we will get this error
103:12 - like a location not
103:15 - found so for that we will create a error
103:18 - State like that and now we will create a
103:22 - use state for our sessions that will
103:25 - store our sessions and another state to
103:28 - show our SS or not so this first state
103:32 - will store a array of our like SS and uh
103:36 - second state will store a like bulling
103:39 - true or false our SS is open or not and
103:43 - on that search value we have to pass a
103:45 - city and uh for we have to also pass on
103:49 - Sumit so so we will pass it later and we
103:53 - have to also pass a on change and uh for
103:56 - the on
103:56 - change we will create another function
103:59 - to handle input on change so we will
104:02 - create uh this function there handle
104:05 - input change and after that this
104:09 - parenthesis curly bracket open and first
104:12 - of all what we will do when user is
104:14 - start typing and first of all this
104:16 - function will be the async function
104:19 - because uh on that on change we will get
104:21 - a SS from our API so we have to make
104:25 - this as a
104:26 - async and here first of all when the
104:28 - user will start typing on that input box
104:31 - so we have to set a city so I will use a
104:35 - set City there like that so this is the
104:38 - set City and uh we have to pass that
104:41 - value that we will get it from that
104:44 - function and the type of that value will
104:46 - be string so let's copy this one and uh
104:50 - pass pass my function there and we will
104:53 - use e and we will pass our function like
104:55 - that and here we will pass our value
104:58 - like e. Target do value like that and
105:01 - here we will get our value so now we
105:04 - have to pass our value like that there
105:07 - and now on that place we have to check a
105:09 - condition if our value do length is
105:12 - greater than three then we have to fetch
105:14 - our SS data so we will write it like
105:19 - that like uh if is equals to or greater
105:22 - than three so we will search for our SS
105:26 - and on that if we will use a try catch
105:30 - block and on that try we will uh fetch
105:34 - our data so here first of all we will uh
105:37 - write our uh create a variable like
105:40 - const response and uh this will be await
105:44 - because here we are using a async and a
105:47 - wait means if this operation will take
105:49 - some time so so that's why we are using
105:51 - a wait so it means if this will take a
105:53 - time so this will wait and uh after that
105:57 - here we will use xos to fetch our data
106:00 - xos doget and now on that place here we
106:03 - will pass our API and uh we are getting
106:07 - this value from there value on the place
106:10 - of value we are passing a place like
106:13 - whatever the user will type so this will
106:16 - search for that location and now we have
106:19 - to pass the API key so what I will do on
106:23 - top of that function I will store that
106:26 - API key in that variable and with the
106:29 - help of this process. env. next public
106:32 - weather Key and I have shown you before
106:36 - from where we are getting this uh
106:38 - process. env. next public weather key so
106:42 - we have to go to that file that is uh
106:45 - there on my left hand side this is env.
106:49 - loal and here I have defined my API key
106:52 - now inside that try block let's create
106:54 - another variable that is called sus and
106:58 - this will be equal to the response do
107:01 - data
107:02 - do list do
107:04 - map and uh after that uh here we will
107:08 - use Arrow function and for now I'm just
107:10 - using a item and this will be the type
107:14 - of any now what we need to do we need to
107:16 - store a name of that place that will
107:19 - match so here I will write a item do
107:22 - name so this will map over there and
107:27 - store all of our Su in a s variable now
107:30 - we will use a set suggestions there and
107:34 - inside that set suggestions we will pass
107:36 - our suggestions and here we will set our
107:39 - error to null if everything is okay so
107:42 - we will set our error is to empty and
107:45 - after that here we will also uh open our
107:49 - s box so for for that here I will write
107:51 - a set so SS that is true and inside that
107:55 - our catch block what uh we will do we
107:58 - will set our SS to a empty array and we
108:03 - will also hide our s box or S container
108:07 - so for that again we will write like set
108:10 - s
108:11 - SS and here we will set it false and now
108:17 - comes to the else part so here I will WR
108:20 - uh else and inside that else we have to
108:23 - do the same that uh what we have done
108:27 - for our catch block so I will copy it
108:30 - from there and uh paste it there and we
108:33 - are using a user State there so we have
108:36 - to also make this component as a use
108:38 - client so here we will write a use
108:41 - client on top of our
108:43 - file and now we will come on the UI and
108:47 - on the UI we have to show our session
108:51 - so what I will do for the SS I will
108:53 - create another component so I will write
108:56 - a function there and this will be the s
109:00 - box and here we will use a UL tag and
109:04 - inside that uh UL tag we have our
109:08 - suggestions so for the suggestions I
109:10 - will use a Alli tag so first of all
109:13 - let's style our uh U tag so for U tag we
109:18 - will use a margin bottom of four B white
109:21 - absolute
109:23 - border or top 44 pixel left zero so here
109:28 - we are using absolute so we will use our
109:31 - session box there on that place so here
109:36 - we will use a class name and uh we will
109:38 - pass a relative class name there so this
109:42 - s box will be relative to that container
109:45 - so that's why we are passing that like
109:47 - uh top 44 pixel and
109:50 - left zero so this will Define the
109:52 - position of our session box and after
109:55 - that we are passing our simply border
109:58 - gray 300 rounded MD and minimum height
110:01 - will be 200 pixel and flex and flex call
110:06 - Gap one padding y padding y
110:09 - two and now let's also give the styling
110:12 - for our Alli so for the lii we will use
110:14 - a cursor pointer and padding will be one
110:17 - and this will be some rounded this will
110:20 - be the rounded of 4 pixel and on H this
110:24 - background color will be PG gray
110:27 - 200 and now let's create a props for our
110:30 - s component so these are the props of
110:34 - our s box component first one is
110:36 - associations so with the help of this we
110:39 - will toggle our s box and uh with in
110:43 - that SS this will contain the array of
110:46 - our
110:46 - SS and uh with the help of handle s
110:49 - click click so when the user will click
110:52 - on that uh button like if I will search
110:56 - for any
110:57 - country so now we got our sessions and
111:01 - if I will click on that button so here
111:03 - on that place we are applying a handle
111:06 - session click and after that if we are
111:09 - getting any error so we will also pass
111:12 - that error with the help of that prop so
111:16 - now let's use empty fragment and wrap up
111:19 - our code with with that empty fragment
111:22 - and here we will use uh some conditions
111:24 - to show our SS
111:27 - conditionally so firstly so firstly we
111:30 - have to write sociations is true or not
111:34 - and after that we have to check the
111:35 - length is greater than one or not so for
111:38 - that here we will write
111:40 - uh cations do length is greater than one
111:46 - or otherwise if our error is true so so
111:51 - again we will show our s box because we
111:55 - have to show a error on our s
111:58 - box and we will again wrap up our code
112:01 - like that and here again we will use a
112:04 - end operator and on that end operator if
112:09 - this condition is true so now we have to
112:12 - show this code and if I will format so
112:15 - this will look like this and now what we
112:18 - need to do inside that uh UL tag if our
112:23 - error is true so here we will use a
112:26 - curly bracket and we will write error
112:29 - and end operator and
112:31 - sus do length is less than one it means
112:37 - our s is zero or we are not getting any
112:41 - SS and end operator so what we need to
112:45 - do so we have to show this Ali and this
112:49 - Ali will contain a error and here I have
112:52 - also passed a text red 500 and padding
112:55 - one and inside that we are passing our
112:58 - error and uh after that we will pass our
113:02 - s with the help of map so again use a
113:06 - curly bracket and suggestions. map
113:10 - inside that Arrow
113:13 - function and uh inside that Arrow
113:15 - function we have our lii and obviously
113:18 - this will contain a key
113:20 - and first parameter will be D and second
113:23 - will be
113:24 - I so let's take this item and on that
113:28 - key let's pass a I so I means
113:31 - index and inside that Ali we have to
113:35 - pass our item uh we can also say that
113:38 - location name or place name and let's
113:41 - save this code and uh and when the user
113:44 - will click on that particular SS so we
113:47 - have to use uh on click there and and on
113:50 - that on click we have to pass our handle
113:52 - s click so we will use Arrow function
113:55 - there because we have to also pass our
113:57 - icon so first of all let's take a handle
114:00 - s click and inside that uh we have to
114:04 - pass our item like that and we are
114:07 - getting our item from
114:09 - there and let's save this and on that s
114:13 - box we have to pass all of our
114:17 - props so here we can pass our props so
114:21 - here you can see that for the
114:23 - error City and S and so SS I have
114:27 - already created a user state so we can
114:29 - simply pass it but uh for the handle SS
114:33 - I haven't created any function so let's
114:35 - just create a function for handle s
114:38 - click so this is our handle s click
114:41 - function so this function will accept a
114:44 - value or string so what we will do when
114:47 - the user will click on that uh handle
114:49 - click but button or we can say that uh
114:52 - particular s so we will set that our
114:55 - city to that value so that's why we are
114:57 - using that set City that value and after
115:01 - that we will hide our s so that's why we
115:04 - are passing this set Association is
115:07 - false and there is a one trick uh that I
115:11 - have that I'm using lots of time like uh
115:14 - we can simply also pass our data like
115:16 - error equals to
115:18 - error or like handle s equals to like uh
115:23 - copy this and paste it like that we can
115:26 - also pass our data like this but here's
115:28 - another trick that we can do just simply
115:31 - copy all these data and uh put a double
115:34 - curly bracket there and use a spread
115:36 - operator there and paste your props
115:39 - there so now you can see that we are not
115:41 - getting any complaints or error there
115:44 - and now let's create a function for our
115:46 - onsubmit so we will create a function
115:49 - that is handle submit search so I will
115:51 - just write here function handle submit
115:54 - search and inside that function this
115:57 - will accept a parameter like e what will
116:01 - be the type of e so you already know
116:04 - what is the type of e like uh if I will
116:07 - go there and simply type and simply
116:10 - write my function with the help of using
116:12 - Arrow function and when I will H over
116:15 - that so now you can see that I got the
116:17 - type for that uh e so I will copy that
116:21 - type from there and paste it on that
116:25 - place and first of all when the user
116:29 - will submit so what we need to do first
116:31 - of all see there when I will click on
116:33 - that so this is our current application
116:36 - so when I'm clicking on that one so now
116:38 - you can see that our whole page is
116:40 - refreshing so we have to avoid to
116:42 - refresh our page so for that here we
116:45 - will use a e do prevent default so with
116:48 - the help of this this we can prevent our
116:50 - page from refreshing so I will copy this
116:54 - function from there and use my function
116:57 - on that on submit like that and let's
117:01 - save our code and uh when I will click
117:03 - on that so I'm clicking and pressing the
117:06 - enter but my page is not
117:09 - refreshing and let's write a further
117:11 - code there so here we will write a
117:14 - condition if our suggestions do length
117:19 - is is equals to equals to
117:21 - Zer so it means uh we are not getting
117:25 - any sus so what we need to do on that
117:28 - condition and I have clicked on that
117:30 - button so we have to show a error state
117:33 - so here I will write a set error and on
117:37 - that set error we have to pass like
117:39 - location not found it means on the else
117:42 - condition means our soltion length is
117:45 - greater than zero so here uh we will
117:49 - remove remove our error so for that here
117:52 - first of all we will set our error like
117:54 - uh set error and our error will be
117:59 - empty and uh after that we will set our
118:03 - city and here we will also set our like
118:06 - set suggestions is false and uh when I
118:09 - will save my code and uh when I'm
118:12 - searching anything so now you can see
118:14 - that I'm getting a proper sessions and
118:16 - when I will click on that one so my
118:18 - search
118:19 - box is working perfectly fine but see
118:23 - there when I'm clicking on that one so
118:25 - this is not working perfectly that uh we
118:27 - want so here what we need to do whatever
118:31 - the city name we are getting here we
118:33 - need to pass it from our uh this level
118:36 - to page level so if you will see on the
118:38 - code so if I will come so let's firstly
118:42 - close all the files and uh let's firstly
118:45 - come to the
118:47 - page and on that page page here we need
118:51 - to change our city So currently I'm just
118:54 - passing a Pune but here we need our city
118:57 - whatever we are getting on that navbar
118:59 - search so for that we have to do
119:01 - something like we are setting our city
119:04 - from our naar component this will
119:06 - somehow we have to get our city on our
119:09 - page and after that uh if our city if
119:14 - our city is changed so this API or data
119:17 - will again call and after that we will
119:21 - get our data so for that we have to use
119:23 - a global state so for that we will use a
119:26 - jotai so let's see how we can use a
119:29 - jotai global State Management so let's
119:32 - go to the browser and search for jotai
119:35 - and uh here you will get the official
119:37 - website of jotai so this is the global
119:40 - State Management
119:41 - solution so first of all let's install a
119:44 - jotai so let's copy this npm code and uh
119:49 - and come to your code and install the ji
119:52 - like that and after that in your app
119:55 - folder let's create a new file that is
119:57 - called
119:58 - atom. TS so here we will create our
120:01 - atoms or we can also say that here we
120:04 - will create our state and after that uh
120:07 - we will Import in this file and in our
120:10 - navare file so on our atom file there is
120:15 - a main State and we are just import it
120:19 - uh into a page and Nar so this will work
120:23 - so let's see how we can do that so first
120:25 - of all we have to create a place atom so
120:28 - what we will do we will use a export
120:30 - keyword and here we have to create a
120:34 - variable so I will just simply give that
120:36 - const and uh variable name that is place
120:40 - atem so currently we need a atom for our
120:43 - place or location so that's why I have
120:46 - given this name as a place atem and
120:49 - let's also import our atom so we need to
120:53 - import our Atom from jotai and uh here
120:56 - like we here like we use a use state so
121:00 - we have to pass some default values So
121:03 - currently I'm just passing a default
121:04 - place that is Republic of
121:07 - India and now what we need to do let's
121:10 - copy this place atem and uh come on the
121:13 - navbar component and after that here
121:16 - what we will do we will exactly use it
121:19 - like we use a US state here I will just
121:22 - simply create a US state snpp it and uh
121:25 - after that on the place of second we
121:27 - have to use our place atom and on the
121:30 - place of use State we have to use a use
121:33 - Atom from zai and now we can give any
121:37 - name that we want but uh we have to give
121:40 - a name like we give as a user state name
121:43 - so we can give any name but here we need
121:46 - a place so I will give this place
121:51 - and here uh you need to give a set
121:54 - place like that and now what we need to
121:58 - do we need to set our place when the
122:00 - user will click on that submit button or
122:03 - like enter button so we need to pass our
122:07 - set place there and here we need to set
122:10 - our place so our place is City so this
122:13 - is the city and when the user will click
122:15 - on that button
122:17 - or this button So currently I'm getting
122:21 - error so let's save our file because I
122:24 - haven't saved my ATM file so that's why
122:26 - we are getting error so now our error is
122:30 - gone so I'm talking about this city when
122:34 - the user will click on that button so
122:36 - what this will do this will store that
122:39 - uh City on that variable now we are
122:43 - using this as a global state so what I
122:45 - will do I will just simply copy this one
122:49 - and come to my page and paste it there
122:53 - like that and uh we can give this any
122:55 - name that we want this uh doesn't matter
122:58 - the main thing is that this value should
123:00 - be same that uh we are giving there so
123:03 - we have to firstly import this one and
123:06 - after that we have to import use atem
123:08 - from
123:08 - chai and this is coming from that atem
123:12 - from there and uh now we have to do it
123:16 - like uh we do for like we do as a for
123:19 - user state so we need this place on that
123:24 - uh pun so here uh we will use a curly
123:28 - bracket and dollar symbol and we will
123:30 - pass our place like that and uh when I
123:33 - will save my code and see the output so
123:36 - let's refresh and search for like Del
123:41 - and click on that one and search so now
123:44 - you can see that this is not working so
123:47 - this is not working because
123:49 - when any data will change so we have to
123:51 - refetch that data so for that on that uh
123:55 - use Query we are getting another
123:58 - parameter or prop that is called
124:01 - refetch and we have to call that refetch
124:05 - when anything will change so for that we
124:07 - will use a use effect so let's write a
124:10 - snipp it for our use effect like this
124:15 - and let's also import our use effect so
124:19 - let's copy this one and uh write here
124:23 - import use effect from react like that
124:28 - and after that we have to pass this
124:32 - refetch function there and here on that
124:35 - place we have to pass a
124:37 - parameter so the parameter is place when
124:40 - our place state will change so we have
124:43 - to refetch our data and here we have to
124:46 - also pass a second parameter like when
124:49 - our refetch will change so we have to
124:51 - also refetch that data and let's save
124:54 - this one and uh let's search for Val and
124:59 - click on that so our data is changed
125:02 - like if I will search for so now you can
125:05 - see that currently here we are getting
125:07 - 13° temperature and let's search for my
125:10 - location that is Merit so let's click on
125:13 - that and click on that one so now you
125:16 - can see that our data is changed but
125:18 - currently we are not getting any loading
125:20 - State and uh our name is not also
125:23 - changing on that place so first of all
125:26 - let's change the name and add a loading
125:29 - state so to change the name on our Nar
125:32 - we will pass our
125:34 - name from there so let's go to the Nar
125:38 - component and here let's create uh one
125:40 - prop that is called location and let's
125:43 - import our location there and uh now
125:47 - what we need to do here I have written
125:49 - somewhere India so in the place of India
125:52 - we will uh write it location and again
125:55 - we will go to the page and on that page
125:59 - we have a prop of location and on that
126:01 - location we will use a data do City do
126:05 - name and let's save this and now you can
126:09 - see that we are getting our city name
126:12 - there uh let's search for any other city
126:15 - like uh if I will search for Pune before
126:18 - that see the current temperature for
126:20 - merit and let's click on that button so
126:24 - now you can see that our data is changed
126:26 - and we are getting currently 18°
126:29 - temperature and here name is also
126:32 - changed but uh the main problem is that
126:35 - we are not getting any loading state so
126:38 - for that again we will create another
126:40 - state and this state will be also the
126:43 - global state so for that again come to
126:47 - the atom file and here we are creating a
126:51 - loading City atom and by default our
126:54 - loading will be false so let's copy this
126:57 - loading State loading City atom and uh
127:01 - come to the name bar and like we have
127:04 - done for this place item we will do the
127:06 - same for our loading so here in the
127:09 - place of place item we have to pass a
127:12 - loading item and let's import this one
127:15 - and on the place we don't need a first
127:17 - parameter so we just write it like that
127:21 - and uh for the loading State we also
127:23 - don't need a loading there we just need
127:25 - to set a loading from that place so I
127:29 - will just write it like that and uh for
127:33 - this on the place of set place I will
127:35 - give this as a set loading like this and
127:39 - here we are getting error because these
127:41 - two are same
127:43 - so let's give this a place and now this
127:47 - is different so that's is fine and now
127:50 - we have to handle our loading state so
127:53 - whenever the user will click on that
127:55 - handle submit button handle submit
127:57 - button so we have to control our set
128:00 - loading so first of all when the user
128:03 - will click on our button so we have to
128:05 - set our loading will be true and uh when
128:10 - we are inside that condition like uh our
128:13 - length is equals to zero our s length
128:16 - equals to zero so we will just simply
128:19 - make it false like that and on that else
128:22 - condition we will also make our loading
128:25 - will be false it means our like data is
128:28 - fed and we have to make it false and
128:32 - what we need to do we need to perform
128:34 - these three operations after like5
128:38 - second so that we can see a loading
128:40 - State because our data is uh getting
128:43 - like too fast so that's why we are not
128:45 - getting any loading state so for that we
128:48 - will use use a set
128:50 - timeout and inside that set timeout we
128:53 - will pass our uh these three parameters
128:57 - and here we have to pass our time so I
128:59 - will pass it like 500 so 500 means. 5
129:04 - Second and uh let's save this and uh we
129:08 - have to also use this variable in our
129:12 - page so I've copied from there and let's
129:16 - use it on that place so let's also
129:19 - import our loading City atem on our
129:23 - page and if you will see on our final
129:26 - output when I'm clicking on that so we
129:29 - are getting a skeleton loading
129:30 - components so we have to also create
129:32 - this one so let's come to the code again
129:36 - and uh here what I have done I have uh
129:40 - just simply copy all of my code from
129:42 - there from Main and uh go to the chat
129:45 - GTP and uh I have told the chat GTP to
129:49 - create a skeleton loading component for
129:51 - me and here now you can see that what
129:54 - output I'm getting so this is the
129:57 - function that uh chat GTP gave me I have
130:00 - just told him that uh I need to use a
130:04 - animate pulse because I already knew
130:06 - about the animate pulse so with the help
130:09 - of that animate pulse we are getting our
130:11 - div in the form of like a
130:14 - pulse and uh now we will use this
130:17 - skeleton component in as a conditionally
130:21 - so what we will do here uh we will use
130:24 - empty fragments and on that empty
130:27 - fragment we will pass this one and uh if
130:31 - our loading city is true like that so we
130:35 - have to write it like a loading City
130:38 - there and we don't need a set loading on
130:40 - that place so this will be like
130:44 - this and now if our uh loading is true
130:47 - so so we have to show this weather
130:50 - skeleton loading component so I will
130:52 - copy it from there and paste it uh like
130:56 - that and if our loading will true so
130:59 - this will show our loading component
131:02 - otherwise this will show our main
131:05 - data so I have to put a c bracket there
131:08 - and here I have to put a columns now our
131:12 - error is gone and let's see the final
131:16 - output and if I will search for any data
131:19 - like um Delhi and click on that so this
131:24 - is our main app that we are currently
131:26 - working on and now you can see that we
131:29 - are getting a proper loading skeleton
131:31 - component and uh now this is looking
131:34 - good and on that place we are also
131:36 - getting a proper name for our location
131:40 - now only one thing is left or not one
131:43 - thing that is there's two things is left
131:47 - firstly uh let's create a function for
131:49 - our like when a user will click on that
131:51 - button so we will get our current
131:54 - location so let's go to the code and go
131:57 - to the Nar and uh here we have already
132:01 - created a icon for our current location
132:05 - so first of all let's add a title like
132:08 - your current location so what is mean by
132:11 - the title so when anyone will hover over
132:14 - that so you can see that we are getting
132:16 - a title like your current location
132:19 - and now we have to create a function
132:21 - like uh when anyone click on that uh
132:23 - function when anyone click on that
132:25 - button so you have to show a current
132:28 - location so in that case we will give
132:31 - that function name that is handle
132:32 - current location and uh let's create
132:35 - current location function on that place
132:38 - and on that handled current location
132:40 - function first of all we'll check the
132:42 - condition like if Navigator do
132:45 - geolocation is true then then uh we have
132:48 - to use a navigator do geolocation do get
132:54 - current position and here inside that we
132:59 - will use a async function so here I will
133:01 - write async or after that Arrow function
133:05 - and inside that parameter we will use a
133:08 - position so this will gives us a
133:10 - position so let's give the any name so I
133:13 - want to give a position name and inside
133:16 - that let's ract our longitude and
133:20 - longitude so for that here we will write
133:23 - a const curly bracket and from where we
133:26 - have to extract so we have to extract
133:29 - from position this will be equal to
133:32 - position dot C and what we need to
133:35 - extract we need to extract uh latitude
133:38 - and longitude and after that we have to
133:41 - use a try and catch block so inside that
133:45 - try we have to set our uh like when I'm
133:49 - clicking on that button the we need to
133:51 - set our loading is true so for that we
133:53 - will write like set loading city is true
133:56 - now we have to fetch our uh data with
133:59 - the help of longitude and longitude so
134:02 - for that we have to write our API in
134:04 - that form like weather or question mark
134:08 - and after that we have to use a let
134:10 - parameter in and this will be equal to
134:13 - that longitude and after that use end
134:17 - and and uh pass a l and Lawn it means we
134:21 - are passing a longitude and after that
134:23 - pass your API key like that and here
134:26 - after that again we will use a set
134:28 - timeout and we will make our loading
134:31 - false and uh on that set place that
134:35 - before we are setting our place with the
134:37 - help of that handle submit before that
134:40 - we are setting our place with the help
134:41 - of that handle sessions on click so now
134:46 - we need to set our place and we are
134:48 - getting our place name from our this
134:51 - data and on that cat block if we are
134:54 - getting any issue so we will make our uh
134:57 - set loading state to the false and let's
135:00 - save this one and see the output so when
135:04 - I will click on that button so this will
135:07 - ask me the permissions to allow your
135:10 - location for the first time so I will
135:13 - allow this one and now this is searching
135:16 - for my location and and uh this is my
135:18 - current location and now we I'm getting
135:21 - the current location data now again
135:25 - let's click on that Delhi so so search
135:27 - for Delhi and now if I will again click
135:30 - on that uh location current location so
135:33 - now you can see that I got my current
135:35 - location there now we have completed our
135:38 - search box and this current location but
135:40 - uh one thing is left like if I will go
135:43 - to the Mobile screen so now you can see
135:45 - that our Navar is not responsive
135:48 - so let's make our Navar responsive so
135:51 - for that let's come to the code again
135:53 - and here on that da we will hide it on
135:57 - mobile and uh show on MD screen so for
136:00 - that we will use a class name that is
136:02 - hidden so by default this will be hidden
136:05 - on Mobile screen and this day will show
136:07 - on MD screen and uh after that here we
136:12 - will use uh this empty
136:15 - fragments like that and after that nav
136:19 - we will use this again same da there so
136:23 - I will just copy it from there and paste
136:26 - it there but uh here we have to change
136:29 - some conditions and we have to also
136:31 - create a parent uh container for this da
136:34 - so for that I will create another
136:36 - section and uh wrap up this code with
136:39 - this section and this section will
136:41 - contain the maximum width of 7 XEL and
136:45 - padding X will be three and on the
136:47 - mobile screens this will show but on the
136:50 - MD screen this will be hidden and uh we
136:53 - don't need this code like hidden or MD
136:56 - on that place and now everything is fine
136:59 - there so let's save this and now you can
137:02 - see that on mobile our UI will look like
137:04 - this one and uh let's see on a proper
137:07 - mobile So currently we are checking our
137:09 - UI in like iPhone
137:12 - XR and uh now if we will see on uh
137:16 - different screens so this will look like
137:18 - this so our application is fully
137:21 - completed and uh this is fully
137:24 - responsive so that's it now our weather
137:27 - app is fully
137:29 - completed so don't forget to like share
137:32 - and uh if you are new to my channel so
137:34 - don't forget to subscribe my channel
137:36 - because I upload videos regarding next
137:39 - year's Tailwind CSS and typ script until
137:42 - then I will see you in next
137:46 - one

Cleaned transcript:

learn to build a weather app using nextjs Tailwind CSS and typescript in this HandsOn tutorial this is a great project to understand how all these Technologies work together you'll create a responsive Dynamic app from scratch with react components utar developed this course in this today's video we are going to build a simple weather app using next gs14 and open Weather API this is the fully functional weather app and uh let's see the features of this uh weather app so basically here we are getting the today's date and temperature and hourly wise temperature and weather icon and weather data and here is the weather description and uh there you will find some additional details of our weather like uh visibility humidity wind speed air pressure sunrise and sunset and after that you will find a 7 days forecast data and here is the main feature of our weather app here we will also get a search SS suppose for example if I will search for Delhi so now you can see that we are getting a proper SS for our location and if I will select for any location and uh click on that search button so we will get a data for our that uh location so now you can see that the weather report of our daily location here we are getting the temperature and description and some additional details and uh obviously 7 days forecast data suppose I want to search for Surat and if I will press enter so this will search for that location and here we are getting the location name So currently which location is applied and if you haven't seen there uh suppose if I will search for another location so we are also getting a proper skeleton loading components so on the meantime our when our data is on the loading state so we will get a proper skeleton loading if I will refresh my page or we can also say that on the first loading what we will get so if I will refresh my page so now you can see that we are getting a proper loading State there also and after that we will see our data and I have also added a additional feature for our weather app here is the button and when I will hover over our button here you can see that we are getting a title like your current location and when I will click on that button so this will search for the current location So currently my location is made it so firstly this will ask us uh permissions for our locations for our location and after that uh this will search for that location and suppose if I will go to the another location suppose I want to see a weather report for Pune location and uh see there we got the location and again if I will click on that current location button so now you can see that we got a current location data and uh currently I'm living on the mered city so that's why we are getting the city name here so I guess you are very excited to build this uh weather app before that let's see a additional feature that is this application is also fully responsive suppose if I go on the mobile screen so you can see that on the mobile screen this will look like this and obviously we can check our data by scrolling there like that and on the desktop this will look like this so I guess you are excited to build this weather app so let's get started so to build this weather app we are going to use a next GS so first of all we will go to our browser and search for nextjs so we will go on that first website and uh here we will find the installation command to install a next CH so I will copy the command from there and uh go to the place where I want to install my nextg app so here I will create a new folder and give that folder name is weather app and after that go to inside that folder and open a CMD on that location and after that paste your command there and uh after pasting your command add a do do there so with the help of dot we don't have to give any project name this will install our project inside that folder and after that this will ask us a few questions like what do you like to use type a script Tailwind CSS and etc etc so what we will do we will just press enter enter and install all the default options so I'm just pressing enter there uh for the es lint also yes enter for the T CSS enter and uh this is asking like would you like to use Source directory so yes I want to use Source directory and after that app router obviously yes and uh for the input allies no now our uh next CS is installing so this will take a little bit of time maybe 1 minute or 2 minute so I will es skip that part so now our next GS project is successfully installed so let's open our project in vs code so for that we will type code dot there and press enter so this will open a vs code on that location so now we will uh run our project and see the output so first of all we'll open a terminal so I will open a terminal with the help of control J and after that on that terminal I will write npm run da so this will open my project on Local Host 3001 but in your case this will open your project in Local Host Port 3000 because on my port 3000 my previous project is running so that's why this is opening on Local Host Port 3001 so let's go to the browser and uh search for local host for 3001 and here currently we are just getting a default styling by nextjs so let's again go to the code and uh from here we will go to the source folder and inside that Source folder we will go to the page. TSX and inside that page. TSX we will remove all the default code from there like that and for now I'm just printing hello and uh we will also go to the global. CSS file and from there we will remove all the default stying from there also and now let's save your code and see the output So currently we are just getting hello now let's see the final output what we need to create so here first of all we will create our Navar and after that we will create other components so let's go to your code again and on the source folder we will create another folder name components and inside that components folder we will create our components and inside that component we will firstly create our na bar. TSX file and inside that we will create our naar component so I will just type TS RFC so this will create a format function for our component and now here we will uh write a code for our naar component so first of all let's style our naar component so I will take uh this div as a nav and inside that we will pass the class names that is sadow SM sticky top zero left zero Z50 and bz White so with the help of this sticky we will get our naar always top so this will stick on that position for always and with the help of this top zero and left zero we are giving the position for our Nar and after that we will again create another Dave inside our naar and here we will give the class name for this Dave and inside that class name we will give the height of our nav bar is 80 pixel and uh width will be full and uh this will be the flex justify between and items Center and Max width will be 7 XL and padding X will be three and obviously margin X will be Auto so with the help of this margin X Auto what this will do this will automatically Center our container or anything on the xaxis so that's why we are giving this MX Auto and inside that Dave we will create a one paragraph tag and on that paragraph tag we will give the class name of this that is flex items Center justify Center Gap two and we don't need border and uh while I'm adding a paragraph you can see this in a second and inside that paragraph we will add a S2 styling for that S2 is text Gray and text 3 XEL so if I will save my code and first of all I need to import my naar component in page so first of all I will import it there like that and uh if you will see the final output there so here we are getting our background color uh a little bit gray so for that uh we will give the class name on our D tag and inside that we will give these class name that is flex and flex column and after that we are giving a gap and BG gray 100 so with the help of this BG gray 100 we will get our background color gray and we are also giving a minimum height of screen and inside that we are passing our na bar and uh if we will see our output so now you can see that currently we are getting our Navar something like this so let's go to the nabar again and here we don't need this nabar keyword and now let's save it again and see so now you can see that currently this is looking like this and now if you will see there so for the logo we are using icon so for the icon I'm using a react icons so first of all we need to install a react icons in our project so we will go to the another Tab and search for react icons and uh we will go to that first link and first of all we need to install our react icons so here is the installation code so I will copy the installation code from there and uh come to my code so I will open a new terminal with the help of of control shift and back Tex and after that I will paste my installation command there and uh press enter so this will install my react icons and after that again we will go to that react icons and uh now we need to search for our icon so our icon is Sun so I will just search for Sun and if you will see the final output so here our sun is looking like something this one so we need to search for this icon so here you can pick any icon that you want but I already know the name of that icon so I will just directly search for the full name so our icon is this MD WB Sunny so I will just click on that one and here I will click on this so this will copy icon in the form of component and uh after that uh we need to go to the code and uh paste our icon there like that and again go to the browser and uh click on on that import code so this is the import code for our icons and after that uh we will paste our icon there now we have successfully imported our icon but here we need to style it additionally so here I will use a class name for that and on that class name we need to give a text size of 3 XL and on the margin top will be one so I need to give the margin top inside the class name and after that we need to give a color for our icon so we can give the color for our icon easily with the help of text property so I need to give a color of text yellow 300 and uh when I will save my code and see the output so our icon will look like something this and now we have created our logo or icon something like this one now let's create our search bar component so for that I will create another section and inside that section if you will see there in the final output and after that we have just a location icon and after that we have a search bar component so first of all let's import these icons and after that uh we will create our search bar component and let's style this section also so this will be the flex Gap 2 and items Center and inside that we have our location icon and for for the icons I will again go to that website that is react icons and uh search for location icon so here we got our location icon so I will just simply click on that one and uh after that I need to click on that so this will copy my icon in the form of code and after that uh go to your code and simply just paste and after that we need to also import our icon so for that again go to your browser and uh click on that import code and uh paste your import code there like that and uh let's style your icon so so to style your icon again we will use a class name and inside that uh class name we will give the text of 2XL and text will be gray 400 and on over we have a opacity off and this icon we have also a cursor pointer and let's see the output so here we got our location icon like this now let's add a another icon uh this is also a location icon so for again we'll go to the browser and uh see we have already searched for location icon but uh we need a different icon for our location so for now I just know the exact name for our location icon so I will just search for that name directly but you can choose any icon that you want so in my case my icon name is this one so I will just click on that one and again do the same process and here I will paste my icon and uh now I need to import my icon so you can also import your Icon by just uh clicking on control space and after that you will get a proper Solutions and after that just press enter so this will import your icon in your location and now let's style this icon also so for that we will again give the class name and on that class name we will give the we will give this size of X 3XL and now let's see the output so you will get your icon something like this so now we need to make this proper so here was the spelling mistake so that's why we are not getting a proper so I need to give this Flex now this is proper and now we have to also uh show our location there so for that uh we will use a paragraph tag there and we have to also style our paragraph tag so I will give the class name of this this is text slate 900 and 80 means we 80 means I'm giving opacity of 80 and after that I have given a text SM and on that place I'm just writing a India and in future we will change this location name with our API data and for now let's save and see the output so we got our location there and now it's time to create our uh search bar so for that again we will create another section so for that again I will create another div and inside that we have our search bar component so so here I will give this search box there and uh we will create our search boox component separately so here I will give this file name searchbox TSX and inside that we will create our sample component with the help of tsfc and now we will style our search component so if you will see there on my search component so what I have done something like uh when I will press enter so this will also for our location so for that we will use a form tag so with the help of this form tag easily handle a summit logic we don't have to create any additional state or anything we just have to use a form so for that I will use a form tag there we don't have to import a form from anything this is form and now let's give the styling for our form tag so this will be the flx and relative items Center justify Center and height will be 10 and inside that we will create our input tag and uh after our input tag we have our icon so icon will be inside the button so I will take a button tag and inside that we have our search icon so again for the search icon we will go to that react icons and search for search so we need to search for search and here we need to search for exactly this search icon in a small letters so this is our search icon so again we have to do the same process just need to click on that icon and uh click on that component so this will copy that component and come to your code and paste it there now import your icon so to import again come to your browser and uh click on that import code so this will copy the import code from there and now just paste your import code there so your icon is successfully imported so first of all uh let's import our uh search bar component in our nabar on that place and let's import it like that and see the final output so here we are getting a error because I guess I haven't saved my search bar component so let's save this and now see we are not getting any error so here is our input and search icon so let's make it side by side our code and output so we can see easily what's going on there so now let's style our input tag so first of all let's give a placeholder and on that placeholder we will just simply give a search search location like that and uh so yeah we got our placeholder there and after that uh let's give a class name so on that class name we will give a padding X of four padding y of two and uh width will be 230 pixel and uh we are also giving a border and Border will be gray color that is border gray 300 and uh we are also giving a rounded left MD we are just only giving a rounded on the left hand side and on the focus outline will be none and on the focus we are changing the background color from Gray to Blue that is uh blue 500 and the height will be full so we are giving the height full there but here we are giving the height 10 so this will apply the height of that search boox component according to this and when I will save my code so we got our input style something like this now uh let's style our button also so again uh here we will use a class name and on that class name we will pass a padding X of 4 padding y of 9 AIS BG will be blue 500 text white rounded and uh if you will notice there so here we are passing a rounded right and here we are passing a rounded left so on this one we are just giving a rounded left and on that button we are giving a rounded right so that this will look like this are joining together and after that we are giving again on Focus outline will be none and on who we are giving a BG blue 600 and uh we don't need this wh space wh space no app and height will be full now you can see that our button will look like this and we have also added a h effect there and there also now it's time to add a props for our search component so so here uh first of all we need a value prop and on change prop and uh on submit prop like when the user submit or click on that button so for that we will use on submit prop and our value will be string type and uh so what will be the type of our on change so for that we need to write on change there and after that we need to H over that on change so here you can see that they have given the type for our on change so we just have to Simply copy our type from there so I will just copy from there and paste it there simply like that and for on submit also again I will hover over there and here you can see that they have given the type so I will just copy it from there and paste it there and uh if you will see there carefully so they are just simply using a a change event handler there and after that HTML input element and on that one react do form event handler and HTML form element and uh after that here we need to pass uh props like that and uh we need to pass the values of our props there so here we need to write props dot on submit for submit and for on change which need to write props do uh onchange like that and for the value we will write value there and props do value and uh here we need additional property that is class name prop so I will just copy the class name from there and uh the type of our class name will be the string and uh this will be the conditional so maybe sometimes we need a class name or maybe sometime we don't don't need a class name so that's why we are passing our class name with the help of this question mark operator and let's save this but here we have defined the class name on the props but we are not using there so to use this we have to pass our class name on that place on that parent form class name so for that we will use a additional function that is called CN function so I have already created a video on that topic how to use or how to create a CN function I will give that video link on my description below but uh don't worry if you don't know about CN function I will also explain a CN function in this video so now let's create a CN utility function so for that we will come to the source folder and inside that Source folder we will create a utils folder and inside that utils folder we need to create a CN function so here first of all we will create a CN file with the help of of cn. TS and uh we need to export our CN function so first of all I will write export function CN and like this and uh after that we need to return our logic from there so to create our CN function we need to install our two libraries so first one is a Tailwind merge and second one is a clsx we will use a Tailwind merge to merge our Tailwind classes and uh we will use a CSX package to pass a conditional classes first of all let's install these two packages and after installing these two packages first of all we will import a delin merge there and inside that Tailwind merge we will pass our clsx package there and if I will hover over that so you can see that what uh we can pass inside that clsx so I will just copy it from there and uh whatever we need inside that clsx we also need the inputs on that CN function also so I will paste it there and uh we need to import this class value type so I will just press control space so this will show me the SS from where I need to import so let's just press enter or click on that s so this will import that uh class value type from clsx and let's copy this inputs and pass inside that clsx now we have uh successfully created our CN function now let's copy this CN function and uh come to your search box component and now what you need to do cut these classes and put a curly bracket there and inside that Curly bracket we will use our CN function and add a parenthesis there and pass your default classes and after that we need to pass additional classes with the help of this class name so we will write it like that props do class name so if anyone will pass additional class names there so this will add our classes in that place but in some cases if someone try to pass uh same class for example we have already applied a height 10 and I'm trying to pass a additional height for example height 20 so this will only overwrite that height and whatever we pass in last this class name will apply now here we have completed our search boox component and let's see the output so there's nothing changed in the output now we will see which API we are using and how we can fetch the data from that API and everything so for that we will go to the browser and you have to go to the open weather map.org and there here first of all you have to login and uh if you haven't created your account on open weather so first of all you have to create an account for your open weather and after that login on that open weather and after that click on that your username so there and after that you have to click on my apis and uh after that click on that and here I have created two API keys and uh if you want to create your new API key just give the name there and click on generate so this will create a new API key for you and after that copy your API key which you want to use and there we will create a new file that is env. local and inside that we will paste our API key so for that I will give that name next public weather Key and after that I will paste my API key there so currently what I'm doing I'm just pasting my API key there and after that I can use it globally anywhere I want and we are storing our API key in EnV file so that uh our API is so that our API is not exposed publicly and now let's come to the main page and first of all we will test our API so this is our API and here we have to replace our API key with our key so for now I'm so for now just let's remove this one and on the place of this I will copy my API key from there and paste it there and on the place of place I'm just writing a uh like punee I want to see the weather report for Pune location and let's copy your API and uh go to your browser and just paste it there like that so now you can see that currently we are getting all the weather data all information of punee location here you can see that if I will open on a different browser here I've installed an extension so that's why this is looking uh like this one and here now you can see that we are getting a data for our weather and uh on that here we are also getting the country and location name and coordinates and population all of and like sunrise and sunset so what we need to do first of all we need to create a type for our data so what I will do here on my API key and uh in that one I am passing a 56 so this will return us a uh maximum 56 uh like lists of data we are getting a 56 weather reports data with 3 hours of difference for example if you will see there so currently on this list so if you will see the time for that data currently there now you can see that this is 1200 but on that second one we are getting the time for that like 15 so on that data we are getting a 3 hours of difference so what I will do here for now I'm just uh getting a two data so now you can see that currently we are getting a very less data so what I will do I will copy all this data from there and go to the chat GTP and what I will do I need to create a type for our data so I will just paste this data there and tell that chat GTP to create a type for that data like that and whenever press enter so now you can see that this created a type for our data so what we need to do we just have to Simply copy this type from there and uh come to our code and we just have to paste it simply there so we have uh successfully created our types for our data and now we will see how we can fetch our data so to fetch our data we are going to use a react query so to use a react query first of all I will go to the browser and search for react query and uh here we will get the official TCH query react query website so we will go to that website and uh we will click on that read the docs and first of all we have to install that react query so I will copy the installation so I will copy the installation command from there and come to my code and firstly let's install the react query like that and now again come to that browser and click on that overview here they have given the proper example how we can use a react query so first of all we have to wrap up our main container with this query client provider so in our case layout. ESX is the main route of every file or our main or every project so what we will do we will first of all we will import query client and query client provider on that place so I will copy it from there and paste it there and uh what we need to do we need to copy this one and wrap up our body with this query client provider and we have to also use this query client so I will copy this one also from there and paste it there like that so now our error is gone and when I will save my code and uh see the output so now you can see that we are getting error because we are using a create context and uh create context only works in client component and here this component is or this file is a server component so what we need to do we need to convert uh this page in a client component so for that I will use a use client like that and save my file and and uh now we are getting another error like uh you are attempting to export a metadata from component marked and basically this is saying that uh we have written a metadata and we can only use a metadata on the use server components so for now we don't need a metadata so I will comment it there and this one also so now you can see that we are not getting any error and now our next step is to gain see there so on that example they are using API like that so I will copy this code from there and uh come to my code and we have to go to the page file and here I will paste that code and let's also import a use Query from react query and after that replace your API so I will copy this API from there and replace it with this one like that and uh we have to use the async function because we are fetching the data from the API or basically a weather API so maybe this will take a few seconds or delay so that's why we will use a async function there so to use a async function here we will write a async like that and inside that async we will fetch our data with the help of exos so let's see how we can use exos with react query so first of all we will install a exos so I will install exos with the help of npmi exos like that and if you're using a exos then we don't need to use a Fetch and we also don't need to convert this into a Jon with the help of exos this will handle it automatically so let's see how we can do that so inside that first of all we will uh store this in a variable so I will make this data or here we are using uh async so that's why we need to write uh a wait keyword and after that exos do getet inside that get we have to pass our URL or API link that we have to fetch so I will paste it there and we have to pass it with the help of this Str string like that and after that we have to return a data from there like this and now we have to give the type for our weather so the type for our weather is weather data and this will be like that and now if we will check our data so I will copy this data from there and let's console log the data so here I will write console.log and this is the data and let's see our data there so here we are getting error here because again here we are again using a create context in our page and we haven't defined our page as a use client so we have to use a use client there so here I will write a use client like that and now our error is gone and if we will see our output so let's see the data so here now you can see that we got our data properly there that uh we need now what we need to do we need to replace our API with that EnV API key so I will remove this API from there and here we need to use a btic and uh like that and on that back Tex first we need to pass our API key like uh process. EnV and after that go to your EnV file and copy the variable name from there and come to your code come to your code again and pass your variable there like that and if I will save it again and see the output and let's refresh so now you can see that we got our data again and uh why we need to type for data suppose if I want to additional data so I just just have to press Dot and now you can see that I'm getting an automatic Su like I want to see the city so I will just simply write city. country Dot and uh city. country and let's save and see the output so now you can see that I'm getting a in so in means India and let's see something else so uh let's see data do City do name so now you can see that we got our city name that is punee and now we don't need this code so let's remove this one now let's also create our loading full page loading component when our data firstly load so how it will look on the loading state so for that we will create a div and inside that div we will pass these class names that is flex items Center minimum height will be screen justify Center and uh inside that we will pass our loading text so this will be like that and uh inside that we have to pass our class names class name that is animate bounce and if I will save my code and see the output so now you can see that this will look like this now let's create these UI so here I will create a main tag and inside that main tag we will give the class names and the class name will be padding X3 and and uh Max width will be 7 XL and MX will be Auto and uh this will be flex and flex column and GAP will be N9 and width will be full and I'm giving a padding of 10 and padding top will be four and inside that div inside that div we have two sections if you will see the final output so first section is like today data so from this container to this container we have a 2day data and after that we have a 7 days forecast data so for that uh we will create a section tag and we have a two section tag so first section tag will be today data 7day forecast data so first of all let's create a today data so here inside that we will take another div and this div denotes to this container so this will contain this date and and this data so if you will see there so inside that we have also a two div or two container so here I will take uh like first one is a S2 and after that uh so let's first of all style this S2 div so inside that S2 div we have a flex and uh gap of one text will be 2 XEL and items Center so why I'm taking this uh Flex because if you will see there so firstly we are getting a day and after that we are getting a data so these two will be in a separate div or container so that's why I'm taking like this so for that uh take a paragraph tag there and now first of all we have to show a day so if you will see the data there that uh we are getting from our API so let's uh go to there and just write data there so now you can see there we are getting our lists and inside that list we are getting our date but uh with the help of date we need a but with the help of date we need a day and uh let me tell you another thing uh in that array we are not getting any forecast data from the back end uh we are just only getting the data by hourly wise hourly wise means we are getting all these list uh differentiate with 3 hours for example they are getting uh weather of like 1200 and after that 300 p.m. and after that 600 likewise we are getting all these data so we have to make some logic and uh differentiate with the differentiate with 7 days forecast data so here first of all if you will see on the UI on that place we need to show a day and date of first list of data so for that we will separate our first list data so for that I will create a variable uh like uh First Data and inside that first data we have a data do list and we need a first list like that and let's check that date so from that date we are not getting a day in the form of like Monday Tuesday Wednesday so what we need to do we need to convert this date into a day so for that we will use another Library that's name is date FNS so let's go to the browser and uh search for date FNS so there you will get that npm website and go to there so now you can see the use case of that date FNS but don't worry I will also show you the use case of this Library so first of all copy this installation code and uh come to your code and install this library and after installing our library we have to show a day on that place so what I need to do I need to use a format from date FNS so I will import it first like that and after that uh we have to use par ISO and we have to also import uh import this par ISO from date FNS date FNS like that and uh inside that par ISO we have to pass our data so our data is First Data do date like that and maybe we don't get sometime our data so for that case we will pass this empty string because we must have to pass something there otherwise this will show us a error and after that put a comma and after that we have to pass a second parameter of format like uh which type of format we want so to show a day we have to pass a e e four times like that so here we are still getting error so I've tried so many things why I'm getting error so I find out like on that latest version this is not working so we have to use a previous version so for that I will again go to that library and uh I will click on that versions and I will use that 2.3 version so when you will click on that one so here on the right hand side you will get that installation command for that 2.30 version so I will click on that one and uh open a terminal here and install this version so we have successfully installed this version now our error is gone so you can see that our a is gone and our code is working fine and if I will save this one and uh see the output so now you can see that here we are getting a Tuesday and uh let's see there now we need a date so for the date uh we will again go to the code and here we need another paragraph and inside that paragraph We will pass our code like that we will use again same as it is like format and inside that we will use par ISO and uh we are passing that date and after that uh we need a format like dd. mm do after that YY y so when I will save this one so now you can see that we got our date like this format and let's also give the class name there and I will give this text LG and this text will be 2XL and this will be LG and when I will save this so now this will look like this now let's create this component or this container so if you will see there so here one thing is common so here for this one I have created a common component and uh now I'm using a same component in this one this one this one and and this one also so what we will do we will create a separate component with the name of container and after that we will use this in that place so let's go to the code again and on our components folder we will create a new file with container. TSX again let's type tsfc so this will create a normal format function for our component and here let's style our Dave so by default we will pass with full and BG will be white and Border rounded Excel and uh we will also pass flex and uh padding y will be four and Shadow will be SM and uh now what we need to do we need to pass a children there and we also need a like if user want to pass a extra classes so they will pass easily so before that first of all we will use a div props like if the user maybe pass like any on click or any something so what we will do we will pass all these props there so let's see how we can do that so for that here we will just simply write props and what will be the type of that props this will be the react. HTML props div element so why div element because here we are using a div so that's why we need to pass a stml div element there and after that here we will use a triple dot or we can also say that rest operator and on that place we will pass our uh props like that so with the help of this props we will get all these possible props on that place and now we also don't need this container and extra div we can just simply autoc close so this will also like uh accept or give us a child props and now we need to pass extra classes if the user want to pass a extra class name so I will cut this class name and use a curly bracket there and here we need a CN function again and on that one we need to pass our default classes and inside that default classes we will use props do class name like this and here we have successfully created our container component and we don't need this type props so let's remove this and copy this container from there and uh now we need a container in that place so I will import it there like that so for that I will use a control space and press enter so this will import the container so on that container what we need we need this temperature and like feels like and this minimum and maximum temperature so here first of all let's give the class name there because we want to pass extra classes so here I'll just write simply class name and now you can see that we are getting all the possible props for our da with the help of uh this rest operator that we are using and inside that class name we have already passed a flex so we don't need to give a flex and after that we need a gap and we need a padding X of six and items will be Center so why I'm doing this one because if you will see there here we have a three elements first one is a temperature and uh this is Fields like temperature and after that uh we have a minimum and maximum so this will be in the form of column and if we will go to there again so on our left hand side we have our temperature and on our right hand side we have our weather icon and uh time and temperature so first of all we will uh create this one and after that uh we'll create this one so for our temperature let's give a div and uh inside that div we need this class name that is flex Flex column padding X4 and after that we need a temperature so if I will console log there and uh see the data so let's go to the our data so here on our main but here is one problem that uh we are not getting our temperature in Celsius we are getting our temperature in Kelvin so what we will do we will create a function that will convert our Kelvin data to a Celsius so let's go to the code again and uh on our utils we will create a new file and give that file name to convert Kelvin to celsius. TS and we need to export this function and we need to use this code so here we are accepting a Kelvin temperature and after that uh we are from that Kelvin temperature we are minusing 273.15 and after that we are using a math do floor to remove all the decimal parts and uh keep the integers maybe you don't know how to make this function like convert Kelvin to Celsius so what I have done there I have just simply go to the chat GTP and uh tell that J GTP like I'm getting the temperature data and I need that data into the form of Celsius so chat GTP understood and uh he just simply create a function for me so just I'm just using their function and this works perfectly fine so let's come to the page again and here what uh we will do here we will pass this function there and uh we also need to import this function and inside that function we need to pass our first data Dot main do temperature like that and here we are also getting an error because this function is not conditional and uh maybe from our data sometimes or maybe this is loading uh maybe this is on the loading state so we must have to pass something there so for that we will use a double question mark so it means like uh suppose on the left hand side our data is not coming so this will pass this data so for now I'm just passing this one but you can also do one thing you can pass a default temperature there so in that case what I will do I will just copy that temperature from there and uh pass it there like that and now we need a this temperature text that is uh something circle like that and when I will save and see the output so we are getting an error so let's see why we are getting error so I guess because I haven't saved this code now I I have saved all of this file with the help of control K you can see that I have pressed control K there on my uh this Bottom bar I have pressed save so with the help of this all of my pages are saved now see there here we are getting a 23 degree and also maybe you will not get this uh degrees text so you just have to Simply go to the Google and find for degree so you will get it from there or anywhere from there any any anywhere from the Google just copy it from there and uh use it on the on your code and now what we need to do we need to add this Fields like and this and this will be inside the span tag and the class for this span tag is will be the text will be 5xl and this will be inside that span tag and now let's create another paragraph tag and inside that paragraph tag uh we need to pass this class name that will be text extra small and Space X will be one so Space X means this will give a space of four pixel and after that I'm using a white space no app so with the help of this white space no W this will not break the line and uh inside that uh we will use text that is called Wheels like and after that we have to pass our Fields like temperature like this one and let's see the output so we will get our output something like this one and after that paragraph We have to take another paragraph tag and inside that paragraph tag we have to pass our minimum and maximum temperature so first of all let's give the class name for this paragraph tag so this will be the text extra small and Space X will be two and inside that we will use a span tag now we have to pass our minimum temperature and maximum temperature like this one so I'm again using that function and on that I'm just passing a First Data do mean. temp Min so we will easily get this data from our API suppose if I will press a back button so now you can see that I'm easily getting also a proper SS there and uh after that we have to put this degree sign and this Arrow text so you will easily get that arot text from Google and now let's save and see the output so now you can see that we are properly getting our minimum and maximum temperature and now if you will see there so we are not getting any space between this date and this container so let's give the space so for that here uh we will add the space on that place on the section and on that Dave that uh will contain our H2 that will contain our H2 and uh this container so let's also give the space there so here we will give the space of space y of two and let's see the output so here we got our space now let's create this so for that come to the code and here and after that we have our time and uh weather icon right so what we will do for that so for that again create a new div and inside that div we will add a class name so let's add these class names this is flex and we need a gap of 10 and on the SM screens we have a gap of 16 so uh by default on the mobile screens we will Gap we have the gap of 10 so 10 means 40 pixel and uh when this will come to the SM screens so we will have have the gap of 64 pixels and what we are doing if there is Overflow or more data so for that we are writing a overflow X Auto so with the help of this we will get our scroll bar and after that we are giving a width full and justify between and padding right and you know what is the mean of justify between with the help of justify with WIS and after that here comes our main part we need to map our data so here uh we are getting our data from our API from there so I will uh write data there so this will be the data and after that we have to map our list so so for so after that we will write data. list do map and uh parenthesis inside that Arrow function inside that Arrow function we have to create our main part uh we have to show show our main like weather icon and temperature so for that uh let's create another div there and uh first of all let's pass a key otherwise this will uh give us a error and here first of all we are getting a d means data and second parameter is a index and inside that key we will pass a i and after that let's give a class name for that div so for the class name we will use a flex and flex column so we are using a flex column because we have to show our data in the form of columns So currently we are working on that part so first of all we will show the time after that weather image and after that obviously temperature and uh after that we are giving a gap items Center or text small or font semi Bol and now first of all we have to show our time so for that again we will use a paragraph tag and uh inside that paragraph tag will pass our time so for the time first of all we will use a format from our date FNS Library so for that I will write a format and inside that format first of all we have to pass so again we have to use a parse ISO and uh now we have to pass our time so time will be T do DT text so with the help of this we will get the exact date from our data and after that we have to pass a format of our data so here I will write H do mm and a so with the help of a we will also get AM or PM and now let's save and uh see the output so yeah currently you can see that we are getting the time of 300 p.m. 600 p.m. or like 1200 a.m. like that so if you will see there so currently this is getting in a two lines but uh what we need we need in a single line so for that we will pass a class name that is called wh space no app and let's save this and uh see the output so yeah we got our data in a single line and now let's add a weather icon so before that first of all let's add a temperature and after that I will show you how we can add a weather icon so for our temperature let's again take a paragraph tag and pass our temperature like that like we have done before D do mean and temp means temperature and uh if we are not getting any temperature so by default we will pass zero and after that uh this is the degree text and let's save this so we will got our time and temperature now we have to show our weather icon so for the weather icon here we have to create another separate component and uh so let's see how how we can create our weather icon component so on that uh components folder here I will create a new file with the name of weather icon. TSX and let's write tsfc to create a sample format and inside that we have to use a image tag so I will import image from next image and here we have to remove scarly bracket and after that we have to pass our Source there so what will be the source of our image so I for this I have another API of open weather so let's go to your browser and see this one so now you can see that with the help of this API we will get our weather icons just we need to replace this like 01 D so if I will pass 02d so we will get a different icons with the help of this so we will use this link so in the place of source we will pass our uh API Source like that and uh after that let's style our image so here uh let's pass uh height and width for image so width will be 100 and height will be 100 and let's also pass alt so on the alt we will pass a weather icon and we have to also pass a class name so for the class name I will use a absolute there and height will be full and width will be full and uh here on that div let's use a CN function suppose in that case if we need uh if we need to pass any extra class names so again we will use a CN utility function there and inside that uh we will pass our default classes so our default classes is relative and inside that relative we have to pass a H2 H20 so h0 20 means height will be 20 and width will be 20 so here our height and width will be full and what is the mean of this height and width so with the help of this height and width this will load that much of our image on that quality means uh this will load 100 pixel width of height and 100 pixel of width this will load and after that we are customizing our height from there so mainly this height will apply and uh with the help of this we are getting that much of quality image and now we have to pass our icon name props there but here we also need uh all of our props there so in some case if we need to pass any extra property there so on that case what we will do here uh we will write props and after that what we have done for our container component so I will go to The Container component and I will copy this props from there and and paste it there like that and now we need additional prop that is called uh icon name so that I am passing there so I will pass it there like that and this will be the type of string so I will write it like that and we need a single end operator now this is fine and on the place of Icon we have to use a props do icon like that and here uh we need all of our props so here I will write uh props like that so with the help of this I am passing all of our props on that da now we have successfully completed our weather icon component so let's save this one and copy this component and come to our page and we need our uh weather icon component on that place so I will paste it there and just simply import my weather icon component there and uh we need to pass a icon name so if you will come to that data so I will press uh F12 and let's see the data and inside that data go to the weather and inside that uh weather you can see that we are getting our icon we are getting a value of 04n so this is the icon name that we need to pass in our icon component so here I will write it like uh D do weather and on that weather we need to access a first property and after that we need to pass a icon like that and let's save this and see the output so here we are getting a error because here we are using a open Weather image API so we need to configure this in an xgs so to configure this so first of all let's click on this one and uh after that uh copy all of this code and uh come to your code and go to the next config file so I'm just pressing a contrl p and finding a finding with the help of this next config and replace all of your code with this code now what you need to do come to your output again and uh see there that's what error I'm getting so this is saying that I have I haven't configured that host name so just let's copy this host name from there and replace it with example host name and uh we don't need this path name and port and let's save all of our files and reload this page now you can see that our error is gone and uh we got our images with the help of our API and here one thing also like if you will see there so currently I'm getting all of our images same uh because from our API we are getting uh these images but on that weather image API on the place of D if I will write n so now you can see that I'm getting a night image so what we need to do we need to create a function to like uh to separate our data like uh currently we are passing a night image or uh Day image so here I will create another function like get day or night icon and on that icon we will pass our current date and time and our icon name so what this will return us so if it is before 600 a.m. time so this will return a night icon and after 600 a.m. this will return a day icons so let's go to the code again and on our utils we will create another function so here I will come to the utils folder and create another function that is called day or night icon. TSX sorry dots yes and inside that uh we will use this function so this function will accept our icon name and uh date and time in the form of string so here what we are doing we are just checking there like uh if our time is less than 6 less than or equals to 6 a.m. and if our time is greater than equals to 6 so basically what's we are doing we are checking our like it's time between our 600 a.m. or 600 a.m. to 600 p.m. so this means our daytime so here we checking like it's the time if this is the day time so we are returning a day otherwise we are returning a and there so this function I have also created with the help of chat GTP so I will just copy this function and uh come to that code again so for now just copy this one and comment this above and here first of all let's use this get uh deite icon import this function and inside that let's pass a d dot weather and uh first of all we are passing our icon so dot icon like that and second parameter will be our date so for that put a comma there D do DT txt like that and let's save this and uh see our output so on that night and day we are getting a same icon because for n night and day we have a same icon so for example if I check for the icon so now you can see there we are getting our same icon so that's why here we are also on our output we getting the same icon and let's see the final output again so here basically we have done our main parts this today's date and temperature now let's create a UI for our 7 days forecast data so now we will create uh this UI so let's again come to your code and uh come to the page. ESX file and there we have created another section for our 7 days forecast data so inside that first of all we have a paragraph tag and inside that paragraph tag we have to write 7day forecast so this will be like this and uh let's also style this paragraph so this will be the class name of text 2XL and we have to also give the class name for our section tag so on that section tag we will give the class name of flex and width will be full and flex column Gap will be four now comes our main part if you will see the main app so inside that uh there is a same component that is repeating seven times so what we will do first of all we will create this component so let's come to the code again and uh give this component name called forecast weather detail and uh now let's come to the components folder and inside that we will create that file that is called forecast feather detail. TSX and now we will write TS RFC to create our sample component and now inside that uh we will create our forecast now we will create our forecast detail component so if you will see the final output so this component is wrap up with our container component so first of all we will use a container there so I will write container and uh we have successfully imported our container component and inside that container component but before we make this weather forecast I forgot one thing we have to also create this section so first of all let's create this section and on that section we have to show a description there and uh extra details on that place so let's come to the code again and we need to go to the page and after that we have to create another Dave and inside that Dave we have our two containers so first of all let's give the class name for that da uh that will be the flags and uh Gap will be four and inside that we have our two containers so first one will be our left and second one is our right so I'm just commenting it there and after that uh let's import our container there and inside that let's pass a class name so we will use this class name that is width will be fit according to our content this will uh resize our width and after that we are just passing a justify Center Flex column and ping X will be four and items Center and uh inside that we have to show a weather description so first first of all we will take a paragraph and after that we have to show a weather icon so what we have done there for our weather icon so I will just copy this one and uh simply paste it on that place but uh here on the place of data we have to write a First Data and on that place also we have to replace D with the help with First Data and this is giving us a error like uh this may be undefined so what we will do we will use this double question mark and here we will pass a empty string and we will do the same for this one also so this means in some case if we don't get a data so this will pass a empty string there and uh on the place of paragraph We have to show a weather description so we will what we will do we will uh show a first so we will show a description of our first data so here I will again use use a First Data dot weather and on that weather we have to select first element and uh we have to show a description of our first element like that and if we will see the output so this will look like this one and now we have to style our paragraph so here I will give this here I will give this capitalize and text Center like this one so this will look like something this now let's create uh this right da so for the right da we will again use another container so again I will just write a container like that and inside that container we have to change our background color so for that let's use a class name and we have to use a yellow color so I will pass a BG yellow 300 like that and this will have the opacity of 80 and after that padding X will be six and uh Gap will be four justify between and overflow X Auto and when I will save this So currently we will just get this output now what uh we need to do we need to create a separate components to show our weather details and if you will see there these components and these components are the same so what I will do I will create a same component for this one and uh after that we will use this component on that place also so now we will create a weather details component so let's go to the components folder again and here we will create a weather details. TSX file and inside that uh here uh we will write TS RFC now let's create our weather details component so on that weather details component we won't use any div because we are styling it from parent container so let's again come to the weather details and for our weather details component we have to create another component that is called single weather detail so here we will create a single weather detail component so here I will write function single weather detail and let's also create a type for our single weather detail props and here we will write a function like that and uh we will pass our props and props will we have this type like that and here we need a return and on that return we will currently we are creating uh this div that D will contain this description or after that image and uh this value data so that's why I have uh taken here three props that is information icon value so first of all let's create a parent T there on that parent Dave we will give the styling of flex Flex call justify between Gap two items Center and text extra small and uh font semiold and text PL and I'm passing a text PL with 80% opacity and inside that we need another paragraph that will contain information so I will use it like that class name and uh I'm using a white space no WP so with the help of this white space no wrap this text will not break into a separate line this will show our data in a single line and here uh we have to do like props do information and uh now I have to show icon on that place so here I will also pass icon from our props so I'm just writing it like that and here we will use a props do icon for the icons we will use a react icons so that's why I'm passing there text 3XL so this will apply all of our icon that we will pass on that component and uh now we have to show a value so for the value we will use a props do value like that now we have uh successfully completed our single weather detail component now what we need to do we have to just simply use that uh single we component on that place and uh we have to pass all these props so on the first prop we have icon and on the second one information and on the third one we have a value so if you will see there this data will be always same like visibility humidity wind speed air pressure or Sunrise I mean that information and icon will be always same for like you can see there I'm getting the same information there and for this one this one same same same same like humidity humidity wind speed wind speed so I will pass these data manually and uh we have to pass these values in our props so how we can do that so if you will see there first of all we need a i image and like and likewise here we are using a drop image and after that wind image and likewise here we are using a m image so for our I we will use this icon Lu I so for the I we will use this Lu e e icon and we and we will import this icon from react icons so I already know what is the icon name but uh you can simply go to the react icons and uh search for your icon suppose if you want to search for I icon so just simply go there and search for I like that then you will get uh your icon then you just have to click on that icon and and uh click on that component then you will automatically get copied your code but in that case I already know the icon name so I will just import import my icon so to import my icon I will just simply import it from react icons like that and here I have to import it from Lu like this one and now we have to create a props for this one like uh see the final output so we have to create our props for visibility humidity wind speed like that so what we will do we will create our props like this and uh this so this component will have these props like visibility humidity wind speed air pressure sunrise and sunset let's copy this props type from there and uh paste it there and now let's write it props there and here we have to write props do visibility and likewise and likewise we have to also do it for like humidity so I will just copy this one and uh change the name from visibility to humidity and I have to also change the icon so I already know the icon name so the icon is fi droplet and I have to also import that icon so I will import my icon like this one and likewise I have to import all of our icons and uh all these possible props so I will just copy and paste from my previous code and here what we will do we will pass some default values if like suppose if we are not passing any values from the API so for that what we will do here we will create another variable and on that variable we will destructure all of our props from our props and uh we will pass our default values and after that we will pass our values on that component like that and let's copy this weather details component from there and now we have to use this weather detail component on that place and let's also import our weather detail component here so here we have to pass all of our props so first is air pressure so for the air pressure if we will go to our data so let's press F Well there and uh see the data so on the main you will find that pressure so this is the air pressure so we have to just show it exactly like that so first of all we have to show a visibility so let's come to the visibility so when you will click on that City so on that list you will get the visibility there so it doesn't matter what uh you will pass on that component first this will apply all these in that manner that uh here we are passing now on that firstly let's pass uh visibility so for the visibility what we need to do so for all these data we have to select first data and uh from that first data we have to show all these additional data so here if you will see in our data so we are getting our data in a meters and if you will see the final output so we have to convert uh this data into a kilometers so for that again we will create another uh utility function that is meters to kilometers so let's go to the utility fun FES and here we will write me. 2 km do DS and inside that we will create this function that is called meters to kilometers and this will accept uh visibility in meters and after that this will convert this into a kilometers and I have also created this function from CH GTP so if you are stuck in any place so you can just simply ask to the chat GTP like I want to create this function or component or anything so let's just copy this one and uh we have to use this on that place so let's pass this function there and import our meters and now we have to use a first uh data inside that first data we have to pass a visibility and in some case if our visibility is not coming so we will pass our default visibility that is 10,000 that we are getting from our data by default and let let's also pass a air pressure so for the air pressure first of all let's use a back tix there and inside that back tix we will use a dollar symbol and inside that we will pass our first data do main do pressure so we will get our pressure and after that we have to write a HPA and when I will save and see the output so here we are getting error so I guess I have imported components two times so let's check there so there is something wrong in weather details component so let's check it there so here I have created this component on that place and I'm just importing it so let's remove it from there and now you can see that our error is gone and uh we are now getting another different error so I guess I haven't save this meters to kilomet function so let's uh save all of our files so now you can see that our error is gone and we are getting our data so here you can see that first of all we are getting our visibility and uh this 108 HPA pressure and we are also getting our others data so we are getting our others data because if you will see on that here we have passed our default values for our props so that's why we are getting our default values there now let's go to the code again and pass other datas so other data will be humidity so for the humidity again we will do the same here we will use a back tiex curly bracket and dollar symbol inside that inside that humidity so again we will use a First Data and Main dot humidity and we have to show a humidity in the form of percentage so so so that's why I'm writing a percentage there so we got our humidity 43% and uh after that we have to use uh we have to set a sunrise so for the sunrise so if you will see there on the data we are getting a sunrise and sunset of that City so here we are getting some values for the sunset and uh Sunrise so we will convert these values in a time so for that again we will use a date FNS function that we have downloaded previously uh so let's see how we can do that so here we will write a format and inside that format we'll use a format we will use a from Unix time and we are importing a uni time from date FNS function and uh inside that we will pass our date we will pass our data do City do uh so first of all we have to pass a sunrise and and after that uh we have to pass a format so format will be H do mm and here we are getting error because we have to pass some values so what I will do I will copy that value from there and because we must have to pass some values so that's why we have to pass it like that and we have to pass this in the form of string so there it means we are passing our sunrise data there and in some case if we don't get any Sunrise data or we are getting undefined values so we are passing this instead of this and let's add another parameter so we will do the same for Sunset so we just have to add a sunset there and uh after that uh let's add a wind speed and for the wind speed so if you will see there in the final output so we are getting our wind speed in a kilometer per hour but if you will check that data and here let's check the First Data do wind here we are getting our speed in m/ second and we have to convert this speed into a kilm per hour so for that again we will create another utility function so let's come to the code again and uh go to the utils file there and here we will write a convert wind speed dots and uh we will and we will create this function so with the help of this function this will accept speed speed in me/ second and uh what this will give us this will give us a speed in speed in kilometer per hour and let's save this and copy this function and uh use this function on that place and let's also import this function there and inside that first of all we have to use this and inside that function we have to pass a First Data dot uh wind do speed and if this is undefined so we have to pass uh some sample data so I will use this one and let's save this and see the output so now you can see that currently we not getting any error in this page and everything is fine and uh we got our UI like this now let's create a UI for our forecast 7 days so here what we will do for this one we will create a separate component and after that we will map this component according to our data so first of all let's create uh forecast weather detail component so here we have already created our file and now let's create this component fully so on that component firstly we have to use a container tag there and ins inside that we have another section and inside that we have two sections so first section will contain this weather detail I can and these data and another section will contain these data so let's create a section tag there and inside that let's pass a class name and let's also give the class name there so this will be the class name and uh we have already applied a flex there so we just have to pass a gap four and in our first section firstly we have another Dave and inside that da we have a weather icon component so let's import our weather icon component there and on that we have to pass our feather icon props for this component so what props we need first of all if you will see there here we need a weather icon and date and day and after that we need a temperature and feels like temperature and uh obviously minimum temperature maximum temperature so we need all these data and we also need all these props that is visibility humidity wind pressure so what we will do we will get these props from our previous component so let's see how we can do that so firstly we have created a props for our these data that I have told you before like icon date icon date day temperature all these and now we need all these props also so for that we will use a extend keyword and which type we need we need these weather details we are already exporting these props from that place so I will just copy it from there and uh come to my weather forecast detail component and I will just paste it there and let's press control space and import so this will import and extend these props so I will use this on that place and let's give this name a props like that and what I will do I will pass some I will pass some default values for these props so what we have done for this component that is weather details we will do the same for this forecast weather details so this will be something like this and now first of all let's pass our now let's pass our props there so here we need a icon name and on that icon name we will just simply pass a weather icon and uh after that uh and after that we have a paragraph inside that paragraph we have a date and after that date uh another paragraph and inside that graph we have a day but uh our day will be something small so I will give this text SM like this so if you will see in the final output So currently we have just created this part now let's create this UI so for that again uh use another div and uh inside that div we will use a class name and this will be the flx and uh flx call and padding X will be four and first of all we need a temperature so here we will use a span tag to show our temperature and obviously we need to convert our temperature into Kelvin to Celsius so that's why I'm using this Kelvin to Celsius function there and now we need our paragraph tag inside that paragraph tag we need to we need to show our Fields like temperature so this will be something like this this will be text extra small and space between these fields likes and temperature will be 4 pixel so that's why I'm passing like that and uh I'm passing also white space no wrap so this will not breaks into two lines and after that let's show the description so for the description we will just simply write description so this is our description for our weather data and now we have completed our this uh left section now let's now it's time to create a right section so for our right section again we will create a section tag there and inside that we will use these class names that is Overflow X Auto and flex justify between Gap 4 padding X4 width will be full padding right 10 and inside that we will use our weather details comp component so this is our weather detailed component so let's copy this one and import this component on that place and now we need to pass all these props all these props of this one so here is a one trick like uh we can also pass it by one by one like uh here we can do like props do air pressure something like that but uh here is another trick what we can do we can just simply write curly bracket there and triple Dot and simply we can write props and we can simply write props so this will automatically get all of props on this one with the help of this and uh that's it for this component that is forecast weather detail component and let's save this and copy this component and uh come to the main page and we need this component on that place and here we have to pass all these props that uh we need there but before that we need to do one thing that is uh if you will see on our final data so on that object here we are getting a 40 arrays so what we need to do we need to make some logic and uh we need a one data for every single day and on that 40 data we are getting four or five data for the same day so what we will do we will create some logic and with the help of that logic we will only filter out a single data for every day and store it in a separate array and after that we will map that array so let's see how we can do that so for that we will use this logic and before that here we are getting an error because I'm using a set so if you are getting any error while using a set keyword so you have to go to the ts. config file and here you have to write instead of es5 that is you have to write es2015 and let's save this file and uh now you can see that now we are not getting any error regarding our set and let's understand this logic So currently what's going on there this is filtering our data date wise so with the help of this logic we are getting a unique dates and after that we are mapping that unique dates and from that unique dates we are extracting the data here we are filtering a daytime data like after 6 a.m. and uh before 600 p.m. so let's copy this array and uh we need to map this on that place and uh let me tell you one thing I have created uh this logic from chat GTP means I know what to do I have just explained the chat GTP like I need to create some variable in that way that uh this will get the data in the DA for that this will UniFi the data and uh give a single data from every day something like that and let's copy this data and uh now we need to map it there so let's use a cly bracket there and after that use a map inside that map use Arrow function and inside that Arrow function let's map this component and first of all let's pass a key so here firstly we have to import this components so that's why we are not getting a stion for our key so now you can see that we are getting all SS for our props so firstly let's pass a key and uh inside that key before passing the key let's pass uh D and I so d means data and I means index so in the key we will pass uh I and after that we will pass our all of our props so I'm just uh passing all of our props like that so if you will see there I have passed a description with the help of D do weather and on that weather I'm selecting a First Data and after that I'm passing that description and for the weather icon I'm just doing the same and for the date what we have done previously I'm just converting that date in a proper string format but on that time we need our date in in that format so that's why I have written a dd. MM likewise we are passing all of our props that uh we have previously passed I haven't done anything new there so that's why I have just copied this code from my previous project and paste it there and now let's save this and uh see the output so now you can see that we got our UI like this but uh there is something wrong this is not in the proper Center so let's go to the code and see what is the issue so here on that name we have to pass our class name that is flex Flex call and GAP will be one and items Center and now you can see that we got our data in a proper form and now there is two things left when the user will search so we have to apply a search functionality and when the user will click on that button so we need to show the weather report for that current location so first of all we will create our search and after that we will create this functionalities when the user will click on that button so this will show the weather data for that current location so let's go to the code and uh we have to go to the Navar component so I will click on that Navar and now we are inside the naar component and here what we need to do if you can see there on a final output so when I'm start typing like Delhi so now you can see that we are getting a su so firstly let's uh implement this functionality so for that we will create some use States so first of all we need to create a state for this value and on change so here uh we will give this value name to a city and set city state and we have to also import our use state so we will import our user state from react like that and uh we have to also create our error State like uh if we will go to the final output and suppose if I am typing something typing anything and uh this place is not exist and when I'm trying to press enter so we will get this error like a location not found so for that we will create a error State like that and now we will create a use state for our sessions that will store our sessions and another state to show our SS or not so this first state will store a array of our like SS and uh second state will store a like bulling true or false our SS is open or not and on that search value we have to pass a city and uh for we have to also pass on Sumit so so we will pass it later and we have to also pass a on change and uh for the on change we will create another function to handle input on change so we will create uh this function there handle input change and after that this parenthesis curly bracket open and first of all what we will do when user is start typing and first of all this function will be the async function because uh on that on change we will get a SS from our API so we have to make this as a async and here first of all when the user will start typing on that input box so we have to set a city so I will use a set City there like that so this is the set City and uh we have to pass that value that we will get it from that function and the type of that value will be string so let's copy this one and uh pass pass my function there and we will use e and we will pass our function like that and here we will pass our value like e. Target do value like that and here we will get our value so now we have to pass our value like that there and now on that place we have to check a condition if our value do length is greater than three then we have to fetch our SS data so we will write it like that like uh if is equals to or greater than three so we will search for our SS and on that if we will use a try catch block and on that try we will uh fetch our data so here first of all we will uh write our uh create a variable like const response and uh this will be await because here we are using a async and a wait means if this operation will take some time so so that's why we are using a wait so it means if this will take a time so this will wait and uh after that here we will use xos to fetch our data xos doget and now on that place here we will pass our API and uh we are getting this value from there value on the place of value we are passing a place like whatever the user will type so this will search for that location and now we have to pass the API key so what I will do on top of that function I will store that API key in that variable and with the help of this process. env. next public weather Key and I have shown you before from where we are getting this uh process. env. next public weather key so we have to go to that file that is uh there on my left hand side this is env. loal and here I have defined my API key now inside that try block let's create another variable that is called sus and this will be equal to the response do data do list do map and uh after that uh here we will use Arrow function and for now I'm just using a item and this will be the type of any now what we need to do we need to store a name of that place that will match so here I will write a item do name so this will map over there and store all of our Su in a s variable now we will use a set suggestions there and inside that set suggestions we will pass our suggestions and here we will set our error to null if everything is okay so we will set our error is to empty and after that here we will also uh open our s box so for for that here I will write a set so SS that is true and inside that our catch block what uh we will do we will set our SS to a empty array and we will also hide our s box or S container so for that again we will write like set s SS and here we will set it false and now comes to the else part so here I will WR uh else and inside that else we have to do the same that uh what we have done for our catch block so I will copy it from there and uh paste it there and we are using a user State there so we have to also make this component as a use client so here we will write a use client on top of our file and now we will come on the UI and on the UI we have to show our session so what I will do for the SS I will create another component so I will write a function there and this will be the s box and here we will use a UL tag and inside that uh UL tag we have our suggestions so for the suggestions I will use a Alli tag so first of all let's style our uh U tag so for U tag we will use a margin bottom of four B white absolute border or top 44 pixel left zero so here we are using absolute so we will use our session box there on that place so here we will use a class name and uh we will pass a relative class name there so this s box will be relative to that container so that's why we are passing that like uh top 44 pixel and left zero so this will Define the position of our session box and after that we are passing our simply border gray 300 rounded MD and minimum height will be 200 pixel and flex and flex call Gap one padding y padding y two and now let's also give the styling for our Alli so for the lii we will use a cursor pointer and padding will be one and this will be some rounded this will be the rounded of 4 pixel and on H this background color will be PG gray 200 and now let's create a props for our s component so these are the props of our s box component first one is associations so with the help of this we will toggle our s box and uh with in that SS this will contain the array of our SS and uh with the help of handle s click click so when the user will click on that uh button like if I will search for any country so now we got our sessions and if I will click on that button so here on that place we are applying a handle session click and after that if we are getting any error so we will also pass that error with the help of that prop so now let's use empty fragment and wrap up our code with with that empty fragment and here we will use uh some conditions to show our SS conditionally so firstly so firstly we have to write sociations is true or not and after that we have to check the length is greater than one or not so for that here we will write uh cations do length is greater than one or otherwise if our error is true so so again we will show our s box because we have to show a error on our s box and we will again wrap up our code like that and here again we will use a end operator and on that end operator if this condition is true so now we have to show this code and if I will format so this will look like this and now what we need to do inside that uh UL tag if our error is true so here we will use a curly bracket and we will write error and end operator and sus do length is less than one it means our s is zero or we are not getting any SS and end operator so what we need to do so we have to show this Ali and this Ali will contain a error and here I have also passed a text red 500 and padding one and inside that we are passing our error and uh after that we will pass our s with the help of map so again use a curly bracket and suggestions. map inside that Arrow function and uh inside that Arrow function we have our lii and obviously this will contain a key and first parameter will be D and second will be I so let's take this item and on that key let's pass a I so I means index and inside that Ali we have to pass our item uh we can also say that location name or place name and let's save this code and uh and when the user will click on that particular SS so we have to use uh on click there and and on that on click we have to pass our handle s click so we will use Arrow function there because we have to also pass our icon so first of all let's take a handle s click and inside that uh we have to pass our item like that and we are getting our item from there and let's save this and on that s box we have to pass all of our props so here we can pass our props so here you can see that for the error City and S and so SS I have already created a user state so we can simply pass it but uh for the handle SS I haven't created any function so let's just create a function for handle s click so this is our handle s click function so this function will accept a value or string so what we will do when the user will click on that uh handle click but button or we can say that uh particular s so we will set that our city to that value so that's why we are using that set City that value and after that we will hide our s so that's why we are passing this set Association is false and there is a one trick uh that I have that I'm using lots of time like uh we can simply also pass our data like error equals to error or like handle s equals to like uh copy this and paste it like that we can also pass our data like this but here's another trick that we can do just simply copy all these data and uh put a double curly bracket there and use a spread operator there and paste your props there so now you can see that we are not getting any complaints or error there and now let's create a function for our onsubmit so we will create a function that is handle submit search so I will just write here function handle submit search and inside that function this will accept a parameter like e what will be the type of e so you already know what is the type of e like uh if I will go there and simply type and simply write my function with the help of using Arrow function and when I will H over that so now you can see that I got the type for that uh e so I will copy that type from there and paste it on that place and first of all when the user will submit so what we need to do first of all see there when I will click on that so this is our current application so when I'm clicking on that one so now you can see that our whole page is refreshing so we have to avoid to refresh our page so for that here we will use a e do prevent default so with the help of this this we can prevent our page from refreshing so I will copy this function from there and use my function on that on submit like that and let's save our code and uh when I will click on that so I'm clicking and pressing the enter but my page is not refreshing and let's write a further code there so here we will write a condition if our suggestions do length is is equals to equals to Zer so it means uh we are not getting any sus so what we need to do on that condition and I have clicked on that button so we have to show a error state so here I will write a set error and on that set error we have to pass like location not found it means on the else condition means our soltion length is greater than zero so here uh we will remove remove our error so for that here first of all we will set our error like uh set error and our error will be empty and uh after that we will set our city and here we will also set our like set suggestions is false and uh when I will save my code and uh when I'm searching anything so now you can see that I'm getting a proper sessions and when I will click on that one so my search box is working perfectly fine but see there when I'm clicking on that one so this is not working perfectly that uh we want so here what we need to do whatever the city name we are getting here we need to pass it from our uh this level to page level so if you will see on the code so if I will come so let's firstly close all the files and uh let's firstly come to the page and on that page page here we need to change our city So currently I'm just passing a Pune but here we need our city whatever we are getting on that navbar search so for that we have to do something like we are setting our city from our naar component this will somehow we have to get our city on our page and after that uh if our city if our city is changed so this API or data will again call and after that we will get our data so for that we have to use a global state so for that we will use a jotai so let's see how we can use a jotai global State Management so let's go to the browser and search for jotai and uh here you will get the official website of jotai so this is the global State Management solution so first of all let's install a jotai so let's copy this npm code and uh and come to your code and install the ji like that and after that in your app folder let's create a new file that is called atom. TS so here we will create our atoms or we can also say that here we will create our state and after that uh we will Import in this file and in our navare file so on our atom file there is a main State and we are just import it uh into a page and Nar so this will work so let's see how we can do that so first of all we have to create a place atom so what we will do we will use a export keyword and here we have to create a variable so I will just simply give that const and uh variable name that is place atem so currently we need a atom for our place or location so that's why I have given this name as a place atem and let's also import our atom so we need to import our Atom from jotai and uh here like we here like we use a use state so we have to pass some default values So currently I'm just passing a default place that is Republic of India and now what we need to do let's copy this place atem and uh come on the navbar component and after that here what we will do we will exactly use it like we use a US state here I will just simply create a US state snpp it and uh after that on the place of second we have to use our place atom and on the place of use State we have to use a use Atom from zai and now we can give any name that we want but uh we have to give a name like we give as a user state name so we can give any name but here we need a place so I will give this place and here uh you need to give a set place like that and now what we need to do we need to set our place when the user will click on that submit button or like enter button so we need to pass our set place there and here we need to set our place so our place is City so this is the city and when the user will click on that button or this button So currently I'm getting error so let's save our file because I haven't saved my ATM file so that's why we are getting error so now our error is gone so I'm talking about this city when the user will click on that button so what this will do this will store that uh City on that variable now we are using this as a global state so what I will do I will just simply copy this one and come to my page and paste it there like that and uh we can give this any name that we want this uh doesn't matter the main thing is that this value should be same that uh we are giving there so we have to firstly import this one and after that we have to import use atem from chai and this is coming from that atem from there and uh now we have to do it like uh we do for like we do as a for user state so we need this place on that uh pun so here uh we will use a curly bracket and dollar symbol and we will pass our place like that and uh when I will save my code and see the output so let's refresh and search for like Del and click on that one and search so now you can see that this is not working so this is not working because when any data will change so we have to refetch that data so for that on that uh use Query we are getting another parameter or prop that is called refetch and we have to call that refetch when anything will change so for that we will use a use effect so let's write a snipp it for our use effect like this and let's also import our use effect so let's copy this one and uh write here import use effect from react like that and after that we have to pass this refetch function there and here on that place we have to pass a parameter so the parameter is place when our place state will change so we have to refetch our data and here we have to also pass a second parameter like when our refetch will change so we have to also refetch that data and let's save this one and uh let's search for Val and click on that so our data is changed like if I will search for so now you can see that currently here we are getting 13° temperature and let's search for my location that is Merit so let's click on that and click on that one so now you can see that our data is changed but currently we are not getting any loading State and uh our name is not also changing on that place so first of all let's change the name and add a loading state so to change the name on our Nar we will pass our name from there so let's go to the Nar component and here let's create uh one prop that is called location and let's import our location there and uh now what we need to do here I have written somewhere India so in the place of India we will uh write it location and again we will go to the page and on that page we have a prop of location and on that location we will use a data do City do name and let's save this and now you can see that we are getting our city name there uh let's search for any other city like uh if I will search for Pune before that see the current temperature for merit and let's click on that button so now you can see that our data is changed and we are getting currently 18° temperature and here name is also changed but uh the main problem is that we are not getting any loading state so for that again we will create another state and this state will be also the global state so for that again come to the atom file and here we are creating a loading City atom and by default our loading will be false so let's copy this loading State loading City atom and uh come to the name bar and like we have done for this place item we will do the same for our loading so here in the place of place item we have to pass a loading item and let's import this one and on the place we don't need a first parameter so we just write it like that and uh for the loading State we also don't need a loading there we just need to set a loading from that place so I will just write it like that and uh for this on the place of set place I will give this as a set loading like this and here we are getting error because these two are same so let's give this a place and now this is different so that's is fine and now we have to handle our loading state so whenever the user will click on that handle submit button handle submit button so we have to control our set loading so first of all when the user will click on our button so we have to set our loading will be true and uh when we are inside that condition like uh our length is equals to zero our s length equals to zero so we will just simply make it false like that and on that else condition we will also make our loading will be false it means our like data is fed and we have to make it false and what we need to do we need to perform these three operations after like5 second so that we can see a loading State because our data is uh getting like too fast so that's why we are not getting any loading state so for that we will use use a set timeout and inside that set timeout we will pass our uh these three parameters and here we have to pass our time so I will pass it like 500 so 500 means. 5 Second and uh let's save this and uh we have to also use this variable in our page so I've copied from there and let's use it on that place so let's also import our loading City atem on our page and if you will see on our final output when I'm clicking on that so we are getting a skeleton loading components so we have to also create this one so let's come to the code again and uh here what I have done I have uh just simply copy all of my code from there from Main and uh go to the chat GTP and uh I have told the chat GTP to create a skeleton loading component for me and here now you can see that what output I'm getting so this is the function that uh chat GTP gave me I have just told him that uh I need to use a animate pulse because I already knew about the animate pulse so with the help of that animate pulse we are getting our div in the form of like a pulse and uh now we will use this skeleton component in as a conditionally so what we will do here uh we will use empty fragments and on that empty fragment we will pass this one and uh if our loading city is true like that so we have to write it like a loading City there and we don't need a set loading on that place so this will be like this and now if our uh loading is true so so we have to show this weather skeleton loading component so I will copy it from there and paste it uh like that and if our loading will true so this will show our loading component otherwise this will show our main data so I have to put a c bracket there and here I have to put a columns now our error is gone and let's see the final output and if I will search for any data like um Delhi and click on that so this is our main app that we are currently working on and now you can see that we are getting a proper loading skeleton component and uh now this is looking good and on that place we are also getting a proper name for our location now only one thing is left or not one thing that is there's two things is left firstly uh let's create a function for our like when a user will click on that button so we will get our current location so let's go to the code and go to the Nar and uh here we have already created a icon for our current location so first of all let's add a title like your current location so what is mean by the title so when anyone will hover over that so you can see that we are getting a title like your current location and now we have to create a function like uh when anyone click on that uh function when anyone click on that button so you have to show a current location so in that case we will give that function name that is handle current location and uh let's create current location function on that place and on that handled current location function first of all we'll check the condition like if Navigator do geolocation is true then then uh we have to use a navigator do geolocation do get current position and here inside that we will use a async function so here I will write async or after that Arrow function and inside that parameter we will use a position so this will gives us a position so let's give the any name so I want to give a position name and inside that let's ract our longitude and longitude so for that here we will write a const curly bracket and from where we have to extract so we have to extract from position this will be equal to position dot C and what we need to extract we need to extract uh latitude and longitude and after that we have to use a try and catch block so inside that try we have to set our uh like when I'm clicking on that button the we need to set our loading is true so for that we will write like set loading city is true now we have to fetch our uh data with the help of longitude and longitude so for that we have to write our API in that form like weather or question mark and after that we have to use a let parameter in and this will be equal to that longitude and after that use end and and uh pass a l and Lawn it means we are passing a longitude and after that pass your API key like that and here after that again we will use a set timeout and we will make our loading false and uh on that set place that before we are setting our place with the help of that handle submit before that we are setting our place with the help of that handle sessions on click so now we need to set our place and we are getting our place name from our this data and on that cat block if we are getting any issue so we will make our uh set loading state to the false and let's save this one and see the output so when I will click on that button so this will ask me the permissions to allow your location for the first time so I will allow this one and now this is searching for my location and and uh this is my current location and now we I'm getting the current location data now again let's click on that Delhi so so search for Delhi and now if I will again click on that uh location current location so now you can see that I got my current location there now we have completed our search box and this current location but uh one thing is left like if I will go to the Mobile screen so now you can see that our Navar is not responsive so let's make our Navar responsive so for that let's come to the code again and here on that da we will hide it on mobile and uh show on MD screen so for that we will use a class name that is hidden so by default this will be hidden on Mobile screen and this day will show on MD screen and uh after that here we will use uh this empty fragments like that and after that nav we will use this again same da there so I will just copy it from there and paste it there but uh here we have to change some conditions and we have to also create a parent uh container for this da so for that I will create another section and uh wrap up this code with this section and this section will contain the maximum width of 7 XEL and padding X will be three and on the mobile screens this will show but on the MD screen this will be hidden and uh we don't need this code like hidden or MD on that place and now everything is fine there so let's save this and now you can see that on mobile our UI will look like this one and uh let's see on a proper mobile So currently we are checking our UI in like iPhone XR and uh now if we will see on uh different screens so this will look like this so our application is fully completed and uh this is fully responsive so that's it now our weather app is fully completed so don't forget to like share and uh if you are new to my channel so don't forget to subscribe my channel because I upload videos regarding next year's Tailwind CSS and typ script until then I will see you in next one
