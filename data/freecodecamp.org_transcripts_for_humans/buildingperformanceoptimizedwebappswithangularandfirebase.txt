With timestamps:

00:00 - all right um
00:02 - thank you
00:03 - very much for having me
00:05 - my name is richard zitole i am an
00:08 - angular developer at standard bank
00:11 - i am fairly new in the industry but
00:15 - yeah i've i've
00:17 - played around with uh different tech and
00:19 - today i'm just here to basically share
00:21 - my story
00:22 - um about some of the things that i've
00:24 - discovered along the way
00:26 - um
00:27 - yeah here's my twitter handle if you
00:29 - want to
00:31 - know anything anything about this
00:32 - presentation afterwards you can reach
00:34 - out to me
00:35 - um we've got a few slides so i will go
00:39 - through rather quickly
00:41 - but yeah feel free to stop me to ask
00:43 - questions if you have any or you can
00:45 - save them for afterwards
00:47 - all right um let's jump right into it
00:51 - um oh another thing before we continue
00:53 - is that i noticed that we have a few
00:55 - gdes here so if you have any hard
00:57 - questions please just point on it to
00:59 - them
00:59 - [Laughter]
01:01 - all right
01:02 - so yeah genie is google developer
01:04 - experts there are there's a few around
01:06 - here so please point those difficult
01:07 - questions to them
01:08 - anyway um
01:10 - agenda so i'm gonna take you through
01:12 - basically a this is a very opinionated
01:14 - um presentation in other words it's uh
01:18 - it's a stack which i have chosen and
01:20 - i've you know built applications with it
01:21 - and um so i'm gonna take you through
01:23 - quickly
01:24 - through angular
01:26 - for those of you that have not used it
01:28 - before
01:29 - and then we'll talk a little bit about
01:31 - firebase and what it entails and all its
01:33 - features
01:35 - after that i will introduce you to a
01:39 - wrapper which is called angularfire2
01:44 - we'll talk a little bit about offline
01:45 - first strategies um using the service
01:48 - worker
01:49 - and then after that we will build a
01:51 - hacker news pwa so there's a demo
01:55 - coming up
01:57 - after that we'll do some we'll basically
01:59 - just
02:00 - benchmark that
02:02 - pwa to see how it sticks up in terms of
02:05 - performance and then we'll use
02:06 - lighthouse and other
02:08 - tools to optimize and see how we can
02:11 - improve the um the performance
02:14 - um yeah i will test this stack which is
02:16 - pretty much what i've i've just
02:17 - mentioned now and then we'll share
02:19 - some some some learnings and findings
02:22 - and i'll also show you some resources
02:25 - where you can learn more about
02:26 - this technology stack
02:28 - all right so moving right into it
02:31 - the stack
02:33 - javascript frameworks
02:35 - there's quite a few of these
02:36 - [Laughter]
02:37 - and sometimes it feels like there's a
02:39 - new one coming out every second week um
02:42 - actually there is one
02:43 - there's one that comes out quite
02:44 - frequently but i think it's arguably you
02:47 - can say these three are pretty popular
02:51 - i got the screenshot from the other day
02:52 - from john papa um he did a little uh so
02:55 - i was looking for a
02:56 - what do you call it a
02:58 - a cloud word cloud uh for for
03:01 - uh the different javascript frameworks i
03:04 - couldn't find one and then i happened to
03:05 - come across this
03:07 - and i asked john papa if he if i can use
03:09 - it and this was his response he says of
03:11 - course but keep in mind that polls are
03:13 - not perfect this captures people on
03:15 - twitter who follow me who happen to see
03:17 - it and who want to reply which i think
03:19 - was pretty fair so i thought i'll put in
03:21 - that disclaimer but i think if you look
03:23 - at other comparison or um polls react is
03:27 - pretty much in front
03:29 - but this is not a popularity contest
03:30 - it's you know it's about you know using
03:33 - a framework that is fit for purpose
03:35 - um and clearly you can see which one i i
03:38 - went for
03:40 - so that's what we're going to talk about
03:41 - tonight angular
03:43 - so you might be asking yourself why
03:45 - angular
03:47 - for those that have not used angular
03:49 - before
03:50 - angular is for me personally i actually
03:52 - started with vue i did a few for a
03:55 - couple of for a short while but then
03:57 - because of work i had to move on to
03:59 - angular which i love
04:01 - to bits
04:02 - at the moment i'm still learning it so
04:04 - correct me if i
04:06 - you know miss
04:08 - spell or miss say something
04:10 - but uh basically under the hood this is
04:12 - basically the the basic um components of
04:15 - of an angular the most basic one is an
04:18 - angular module or ng module
04:21 - it comprises of a template and a
04:22 - component which gives you your angular
04:25 - view
04:26 - we use event bindings um to take input
04:29 - from the user
04:30 - and we process it through in in the
04:32 - component um and then we return
04:36 - application data via property bindings
04:38 - directives
04:40 - and bindings you basically just it's
04:42 - some logic and business logic that
04:43 - modifies
04:45 - your template before you render it to to
04:47 - your user
04:48 - um it has this very cool piece of
04:50 - technology called dependency injection
04:53 - and that allows you to
04:55 - use shareable services which you can
04:57 - import into your component it helps keep
04:59 - your component nice and dry and you can
05:02 - reuse them so the idea is basically just
05:05 - you know if you have a specific feature
05:07 - maybe
05:08 - a user login you want to keep that as a
05:10 - single module um for there's benefits
05:13 - for that uh which i will delve into
05:16 - in the next couple of slides uh but yeah
05:18 - basically that is um angular under the
05:19 - hood
05:20 - um the the most the most uh
05:25 - benefits that people always is exactly
05:27 - what it says there you're able to use
05:30 - your angular skills to basically build
05:32 - for
05:33 - not only mobile
05:35 - not only web but mobile and native
05:37 - desktop as well it is possible uh things
05:40 - like ionic they heavily use this under
05:42 - the hood
05:44 - um angular by design is built for speed
05:46 - and performance
05:48 - um if you add things like web workers
05:50 - and service workers and server side
05:52 - rendering
05:53 - you just basically make you up you can
05:55 - make your applications um pretty fast
05:59 - other
06:00 - benefits or other reasons why people
06:02 - love angular is because of its
06:04 - incredible tooling
06:06 - and its community behind it
06:08 - um i mean we've got
06:10 - the english cli i think it's one of the
06:12 - most beautiful pieces of software
06:14 - with the latest release of angular 6
06:17 - we've added
06:19 - extra features like schematics and
06:21 - elements and all this kind of stuff
06:22 - which i'll delve
06:24 - into in later slides and it's loved by
06:27 - millions myself and
06:30 - some of the web developers here i hope
06:31 - you
06:32 - have tried it if you haven't tried it uh
06:34 - please dive in and
06:35 - and have a look at it
06:37 - um angular.io is the website you want to
06:40 - go to to get started
06:43 - so the next piece of technology that i'm
06:44 - going to talk about is firebase
06:46 - how many of you have used firebase
06:48 - before
06:49 - okay quite a few
06:50 - cool have you used all the features that
06:52 - are there at the moment not okay so
06:56 - right absolutely so that's yeah i've
06:58 - i've gone through that route i've tried
07:00 - to use all of the features that are
07:02 - available for the web
07:04 - um but it's basically if you don't know
07:05 - what firebait firebase is
07:07 - you can think of it as a backend as a
07:09 - service so if you do not want to tinker
07:12 - with um
07:13 - provisioning servers and infrastructure
07:16 - and managing all of that um
07:19 - you people who've worked in in big
07:21 - organizations where you know you're
07:23 - serving millions of customers you will
07:26 - know that you know as as your
07:27 - application grows or as your user base
07:29 - grows so does your infrastructure um but
07:32 - firebase allows you well it basically
07:34 - abstracts that layer for you because you
07:37 - know it's a backend as a service so
07:39 - you're able to build applications fast
07:41 - without managing infrastructure
07:44 - it is backed by google um
07:47 - yeah and and i think the one cool thing
07:49 - with with firebase is the fact that you
07:51 - know most of the features they work
07:53 - nicely together um as you'll see now the
07:56 - first one that i'll quickly uh touch on
07:58 - is authentication
08:00 - authentication is basically just you
08:01 - know managing your
08:03 - user authentication the cool thing with
08:05 - this i think it's um the fact that you
08:07 - have you can use multiple providers
08:09 - um whether it be google twitter
08:12 - i'm not sure facebook is there um yes
08:15 - um
08:16 - as well if if say you also want to use
08:19 - um passwordless so you don't want your
08:21 - users to
08:22 - to to create a password you can use that
08:25 - as well or you can go old school and use
08:27 - it you know your email and password
08:30 - um the next feature uh is is the
08:33 - firestore cloud firestore this is the
08:35 - actual database um that you interact
08:38 - with
08:39 - the nice thing with the database is that
08:41 - it's a nosql database
08:43 - um it's based on the concept of
08:45 - collections collections you can think of
08:46 - it as a json
08:48 - object
08:49 - within collections you have
08:51 - the actual documents documents is where
08:53 - you would store your id or user id
08:56 - email address and and all the
08:58 - uh
08:59 - all other properties that you want to
09:01 - store for the user
09:02 - um
09:04 - and then cloud storage so if you want
09:06 - say say you have an application that you
09:08 - you know you
09:09 - uh you offer
09:11 - file uploads um you can use cloud
09:13 - storage to to store the those images
09:17 - um
09:18 - couple that with cloud functions which
09:20 - is one of my favorite uh features is
09:22 - that so cloud functions is basically you
09:24 - can think of it as like web hooks
09:27 - so you imagine a scenario where
09:29 - um you offer our clients or it's an it's
09:31 - an image sharing service or
09:34 - application typically users will upload
09:37 - anything that they can as long as they
09:39 - see an upload they can put in anything
09:40 - in this with cloud functions you're able
09:42 - to basically detect what they're
09:44 - uploading the size and file format and
09:46 - you can do some sort of transformations
09:49 - before you store it up into
09:51 - your storage
09:52 - and you can also create records in your
09:54 - firestore database
09:56 - once you're done building your
09:56 - application and you want to host it you
09:59 - can do so
10:00 - the firebase offers a hosting service
10:03 - which is very very generous here
10:05 - um
10:07 - the very cool thing is with this is that
10:09 - they've got cdn uh
10:12 - distributed globally so as soon as you
10:14 - upload your your your application it
10:16 - basically gets distributed
10:18 - across the globe through the cdn network
10:20 - and that means for your users that
10:23 - regardless whether you're here or in
10:24 - dallas or in china you know you can just
10:27 - pretty much
10:28 - have a low latency access to to the
10:30 - application and your assets
10:32 - which is a very cool thing ml kit um i i
10:35 - heard through the slovak that someone is
10:37 - going to do a talk on that we don't have
10:39 - it in web as yet correct me if i'm right
10:42 - yeah but i think it might be in the
10:43 - pipeline i hope
10:44 - um yeah we'll see
10:46 - the future is bright
10:48 - firebase
10:49 - all right now
10:52 - just give me a sec
10:56 - who of you have heard of angularfire
10:59 - or have used angular fire before in your
11:01 - application okay i see one two hands
11:04 - um
11:05 - angle of fire is basically fire two
11:07 - because we want um that's the latest one
11:10 - is basically
11:11 - it's a marriage between angular and fi
11:13 - and firebase um it's an angular wrapper
11:15 - for firebase so all those features that
11:18 - i've just spoken about just now um your
11:20 - authentication your database storage and
11:22 - all that stuff
11:24 - it's they're all available but you
11:26 - because we are angular developers we
11:27 - like to do things the angular way
11:30 - um so we do
11:31 - we built a wrapper for it the cool thing
11:33 - with this library is the fact that it is
11:36 - um it is an official library it is
11:39 - developed by the guys
11:41 - i think davies david east is one of them
11:43 - and the angular core team
11:44 - um and many other guys from from google
11:47 - as well uh use it um the one thing that
11:50 - i will show later on what i like about
11:51 - it about um this rep is um the
11:54 - persistence so you just call in uh one
11:57 - method and allows your application to
12:00 - um to basically um persist your data so
12:04 - imagine you're busy capturing a form
12:06 - and all of a sudden telcom i mean s-com
12:09 - decides to cut electricity and your you
12:11 - don't have internet connection all of a
12:13 - sudden um it will persist your
12:15 - application once the connection comes
12:16 - back you you will you'll be able to
12:18 - access the locally cached
12:20 - data from the from your firestore
12:22 - database and once the internet
12:24 - connection comes back on
12:26 - then you'll be able to you know continue
12:28 - where you left off which is that's a
12:30 - very good cool feature
12:32 - um it's pretty pretty popular
12:35 - this was taken about a week ago i think
12:38 - it's just over 17 000 downloads a week
12:42 - it's currently at rc release candidate
12:44 - 11
12:45 - but they moved pretty fast so by the
12:46 - time you go and check it out it might be
12:48 - on 12. um there have been some breaking
12:50 - changes in the past
12:52 - i learned the hard way but
12:54 - yeah
12:56 - it's something that you need to keep in
12:57 - mind but it is it's got a very good
12:59 - support and community behind it
13:03 - um how am i doing on time all right
13:07 - um how would you get it in your project
13:10 - um
13:11 - you do it like that
13:14 - the the nice thing about it is that you
13:16 - only import the stuff that you
13:18 - need so if your application only uses
13:21 - the the database module you only need to
13:24 - install angularfire store module
13:28 - if it's authentication or storage you
13:30 - just import the stuff that you want to
13:32 - use and to initiate it down there at the
13:34 - bottom
13:35 - this is where you obviously enter all
13:37 - your secrets and and whatnot
13:40 - the nice thing also is the fact that you
13:42 - do not have to so typically it would be
13:44 - on your main module
13:46 - with angular you you have at least one
13:48 - root module and one root component um
13:50 - but with you know depending on your in
13:52 - the structure of your application um you
13:55 - you just need to import this way you are
13:56 - using it in the module that you want to
13:58 - use it
13:59 - um for benefits that we'll discuss
14:01 - shortly
14:03 - um how do you use it
14:06 - using it is pretty straightforward if
14:08 - you've written uh if you've worked with
14:10 - typescript before this is what it looks
14:12 - like
14:13 - angular by the way is also written in
14:15 - typescript typescript
14:18 - which gives you strongly typed powers
14:21 - to make sure your applications or your
14:23 - code is resilient
14:25 - um so to to get started with angular
14:27 - firestore you would
14:29 - because it's a rxjs base so you will
14:31 - have to have rxjs
14:33 - um you'll need angular firestore you
14:35 - just import it like that and through
14:37 - dependency injection you
14:39 - you pull it in through your constructor
14:42 - and this is what i was i was referring
14:43 - to earlier on collection so this will be
14:46 - your high level um
14:48 - uh json object in your database and the
14:51 - name of the collection is items
14:53 - and it's got this very nice
14:55 - methods that you can call value changes
14:57 - will basically return you an observable
14:59 - array
15:00 - um
15:01 - if you want i think there's another one
15:02 - called snapshot change i'm not 100 sure
15:05 - what it's called but it will return that
15:07 - observable area with meta with metadata
15:09 - as well so if you have ids stored and
15:11 - all those kind of things you will be
15:12 - able to pull them through as well and to
15:15 - display it in your template
15:17 - you just call it on ng4
15:19 - um you iterate through your your
15:21 - observable but because then observable
15:23 - you need to use the asic pipe to unwrap
15:25 - that observable
15:27 - and through interp interpolation you be
15:30 - able to extract all the data that you
15:31 - need through there so it's pretty
15:32 - straightforward it's everyday code that
15:34 - we write if you use angular on a daily
15:37 - basis
15:38 - i should not assume that
15:40 - [Laughter]
15:42 - a lot of mobile developers are looking
15:44 - at me like no
15:46 - don't do that
15:47 - all right um
15:49 - moving along oh so
15:52 - yeah the time has come for
15:54 - you know i think everyone is looking
15:55 - forward to this
15:57 - but uh not quite yet
15:59 - if you're still wide awake by now and if
16:02 - you remember what i mentioned at the
16:03 - beginning or in the agenda is that
16:05 - um this talk is not about angular's it
16:08 - and it's not about firebase
16:10 - um it's not about pwas it's about
16:13 - everything it's about using
16:15 - all these technologies together to to
16:17 - get the the most out of it
16:19 - um so i'll just quickly take you through
16:22 - um
16:23 - the service worker specifically we'll
16:25 - focus specifically on the angular
16:26 - service worker
16:31 - um
16:32 - in its simplest form a service worker is
16:34 - simply a javascript file it's a it's a
16:37 - js file um where you define
16:40 - how your application
16:45 - how your application requests
16:48 - how it requests um
16:51 - network requests so it basically
16:53 - intercepts network requests and it
16:55 - stores the response into your cache api
16:57 - that's that's its simplest definition
17:00 - um
17:02 - and you might ask me wondering why you
17:04 - want to do that um i think it's pretty
17:06 - much i think it's for obvious reasons
17:08 - because cache is obviously on your
17:10 - browser itself so i'm talking about the
17:12 - the browser cache um so the idea behind
17:14 - service workers is that you want to show
17:17 - something on the screen as quickly as
17:18 - possible so first time around when you
17:20 - make an extra call the service worker
17:22 - will jump in and say okay let me have a
17:24 - look you want to make a call to this api
17:26 - and it will cache their response and put
17:29 - it into the cache api on the browser
17:31 - itself so next time when you request the
17:33 - same
17:34 - api or the same address it will
17:36 - basically look into the cache or if it
17:38 - doesn't find
17:39 - the information that it's looking for or
17:41 - the cache is expired then it will make a
17:43 - network call
17:44 - the cool thing with um
17:47 - with the angular service worker
17:48 - specifically is that you can define how
17:51 - all these things work but first before
17:53 - we get to that
17:56 - this is something that uh tricked me
17:58 - over when i when i started looking into
18:00 - service workers it looks very simple it
18:02 - is a simple diagram i think
18:05 - so basically this is what happens when
18:06 - your application loads
18:08 - the service worker gets registered
18:10 - schedule installed and you get activated
18:12 - and it starts doing its magic
18:15 - um but it's very important i think for
18:17 - me i did this mainly for me actually
18:19 - because i think it's very important that
18:21 - you understand how the life cycle works
18:23 - um because it's very easy to get tripped
18:26 - over
18:27 - you you'll be expecting a certain
18:29 - behavior and meanwhile this thing is
18:31 - bringing back something completely
18:32 - different so depending on how you
18:34 - configure it and so forth um yeah it
18:36 - helps to basically understand how the
18:38 - life cycle works
18:41 - um browser support
18:44 - who can tell me what's wrong with that
18:45 - picture
18:48 - [Music]
18:50 - well except for that lonely outlier over
18:53 - there i think everyone is in agreement
18:55 - that this is a cool idea right
18:57 - so yeah i think you guys can go ahead
19:00 - and use this stuff because it is
19:01 - supported across orbit i mean look at
19:04 - even samsung internet you know they're
19:05 - right they write up theirs or they've
19:07 - been supporting it since four which is
19:09 - pretty cool so yeah guys please go ahead
19:11 - and start tinkering with this um
19:14 - with this uh sort of stuff
19:17 - now um so we because we are angular
19:19 - developers
19:21 - i'm looking at youtube
19:22 - rebecca we will talk about service
19:25 - workers in the context of angular
19:27 - um
19:28 - so
19:29 - so if you look at this step there's a
19:31 - six
19:32 - six part yeah it's about six steps
19:34 - most of these steps you would have to do
19:36 - it by hand not so long ago if i'm not
19:39 - mistaken
19:40 - in fact i am not mistaken because i had
19:42 - to do some of this stuff by hand but
19:44 - with the latest angular angular 6 we
19:47 - have added a new uh
19:49 - schematics basically this at angular
19:52 - slash pwa so you just throw in there you
19:54 - just go ng add angular pwa and it
19:58 - basically
19:59 - goes ahead and does all the stuff it
20:01 - configures this stuff for you
20:03 - i think the one key
20:05 - thing that i maybe is worth mentioning
20:07 - in this in the steps
20:08 - is the manifest json file
20:10 - um
20:11 - as you will see shortly um
20:14 - so basically the manifest json file it
20:16 - basically you that's where you define
20:17 - how your app your your pw how you want
20:20 - your pwa to look like once it's
20:22 - downloaded oh um
20:24 - i'm not sure if
20:25 - if you've come across a pwa as yet you
20:28 - should have because most of the south
20:29 - african websites they basically telling
20:31 - their applications to pwas um but
20:34 - basically so you'll notice on the
20:36 - address bar there you you might have um
20:39 - like the same color theme with the rest
20:40 - of the application so you you define
20:42 - those kind of things in that manifest
20:44 - json file
20:45 - um another very important um file that
20:48 - that the angular pwa schematic does for
20:51 - you is create this ngsw config json file
20:56 - this is if you remember what i've
20:57 - mentioned earlier on what i said earlier
20:59 - on was that you can basically tell the
21:01 - service worker
21:03 - how to deal with network requests
21:05 - um when to look into the cache
21:08 - uh first or whether to look into the
21:10 - cache first or if it should go to the
21:12 - network first you define all those kind
21:14 - of things all those things in the ng sw
21:17 - config.json file
21:19 - and once you've done you just basically
21:21 - build the project make sure you build it
21:23 - with double dash prod that allows you
21:26 - well it builds that project in
21:28 - ahead of time compilation uh basically
21:30 - just tree shakes all the unnecessary
21:32 - polyfills and all the other stuff that
21:34 - is not necessary for you app to run
21:36 - makes it very lean and then you just run
21:38 - the project
21:41 - um yeah so now let's i think let's look
21:44 - at what is being cashed
21:46 - are you guys still with me are you still
21:47 - following you have i lost you completely
21:50 - please uh do raise your hand if i'm i'm
21:53 - moving too fast or if you've lost me
21:55 - completely
21:56 - um this is what has been guess so
21:59 - there's two groups um uh so so this is
22:02 - obviously
22:03 - how angular have um decided or have
22:06 - defined how to
22:08 - um
22:09 - to cache your assets there's two groups
22:11 - the first one is called asset groups
22:12 - asset groups basically it um it's it's
22:15 - where you tell your service worker what
22:18 - your cash flow so your your um your app
22:20 - skeleton
22:22 - um so if if you guys are not 100 sure a
22:26 - a web application
22:27 - usually comprises of an index html css
22:30 - and javascript uh files
22:32 - so what we're saying here especially on
22:35 - the install mode we're saying that as
22:37 - soon as the application loads go ahead
22:39 - and cache all this
22:41 - all these files so your html index html
22:45 - anything that ends with bundle.css and
22:48 - bundle.js and chunk.js
22:51 - we have another one here called assets
22:52 - this one's install mode is lazy
22:55 - what that means is that it you do not
22:57 - immediately start caching the stuff wait
22:59 - until the user navigates as soon as the
23:01 - user navigates to a certain url certain
23:03 - path then it will cache those assets
23:10 - the other group is called data groups
23:13 - in data groups we have two types the
23:15 - first one is called freshness or uses
23:18 - strategy called freshness in simple in
23:20 - simplest uh terms it it just means
23:22 - network first so go into the network
23:24 - first and
23:26 - um
23:26 - [Music]
23:28 - so in this specific example you know
23:30 - when you hit that url go to the network
23:32 - don't look into the cache first um and
23:36 - yeah you can also specify you
23:38 - through the cache config the mixmex age
23:41 - and the timeout so after 10 seconds if
23:43 - this thing doesn't return anything it'll
23:45 - look into the cache
23:47 - the other
23:49 - the other option is performance this is
23:51 - for all the other the remaining routes
23:53 - of your application however many you
23:55 - want
23:56 - um this one will look into the cache
23:59 - first so it'll say cache
24:01 - if the
24:03 - max age has expired
24:04 - excuse me
24:06 - then it will go out to the network and
24:08 - fetch those assets
24:12 - all right
24:13 - moving along
24:15 - if you've done everything
24:17 - correctly um
24:19 - then you will you know you'll you'll
24:21 - look at when you look at your dev tools
24:22 - you look at something like this
24:24 - as you can see here we are in offline
24:26 - mode
24:27 - um so this prior to this you would have
24:30 - to have gone to the app face because
24:32 - obviously it has to case from somewhere
24:34 - else so you first have to visit the app
24:35 - it will cache that using that asset
24:38 - group strategy it will cache all the
24:41 - the
24:42 - the basic files and when you refresh
24:44 - then it will save it from the service
24:46 - worker so this is how you know
24:48 - that your your application is being
24:50 - served from the service worker so what
24:52 - you're looking at now is a good thing
24:54 - you want to to see this when you've uh
24:57 - turned your application to a pwa
25:01 - all right okay so i've covered that
25:03 - so yes show the thing
25:05 - here's the demo do you guys want to take
25:07 - out your phones and go to that url
25:12 - i'm sorry i should have tiny urls
25:23 - yes you can use them um side by side
25:27 - you don't have to have one or the other
25:29 - they can work
25:30 - in tandem
25:42 - everyone there
25:46 - okay
25:48 - awesome
25:50 - so that is a pwa if you are lucky or if
25:53 - you have a smartphone
25:57 - using a browser which is up to date
26:01 - you might get a little banner that asks
26:02 - you if you want to add to your home
26:03 - screen have you guys seen that okay you
26:05 - can go ahead and add it if you want
26:07 - it's not a must but if you want to see
26:10 - how these features all come together
26:12 - that's
26:13 - um yeah that's one of the benefits of
26:15 - going to pwa route
26:17 - uh yes george you good okay cool
26:20 - um yeah that is a pwa so
26:23 - and if if you're accessing that url
26:25 - through a browser through
26:28 - a desktop
26:29 - um and you run it through lighthouse
26:31 - lighthouse let me just quickly speak
26:33 - about lighthouse is basically it's one
26:34 - of the tools that you can use to access
26:37 - a website or web applications
26:40 - performance
26:41 - with that specific one as you can see
26:42 - there that's the same url that you guys
26:44 - went to now it was done a couple of days
26:46 - ago so it's all green so you want to be
26:48 - hitting you know you want to have greens
26:51 - here so so the most important ones
26:52 - obviously here is performance and
26:54 - progressive app you don't have to check
26:55 - for this other stuff but it's good to
26:57 - know that you are
26:59 - you're all in the green
27:01 - um
27:03 - yeah i think the key
27:05 - matrix for me uh for this screen is well
27:08 - i think not just for me but like for
27:09 - most applications is time to interactive
27:12 - what that means is that you know how
27:13 - long does it take for your application
27:15 - to become to get to a state where it's
27:17 - responsive to user input um so you want
27:20 - to have that definitely a degree in fact
27:22 - if it's over 10 seconds right now it's
27:24 - 4.6 seconds if it's over 10 then it'll
27:27 - start affecting your progressive web app
27:29 - um matrix
27:31 - um so this will probably go down to
27:33 - around
27:34 - 70 or something like that
27:37 - and then at the bottom here you see this
27:38 - is a film strip it shows you the
27:40 - timeline shows you how quick your
27:42 - application loaded first meaningful so
27:44 - another very cool thing about matrix
27:47 - performance matrix specifically
27:49 - things like netflix tv ui so they have
27:53 - specific matrix that they've decided to
27:55 - focus on and optimize for them is tti is
27:59 - as it's also known
28:01 - they also look at if i'm not mistaken is
28:04 - that
28:04 - estimated input latency or input
28:07 - responsiveness so it's how long it takes
28:09 - when a user taps on something how
28:11 - quickly does the application respond for
28:13 - them that is very important
28:15 - um and then also the the cpu usage so
28:18 - those are the three ones um that they
28:20 - they track so every application will
28:23 - obviously be different depending on you
28:25 - know what you're optimizing for
28:27 - what what the app
28:29 - does and what what you user base look
28:30 - like but you know it's always good to
28:32 - have greens all around
28:35 - i just like looking at the greens
28:38 - all right
28:39 - so if you're not getting those grains
28:41 - guys this is some of the ideas that you
28:43 - can follow to basically get to the
28:45 - greens
28:46 - the first one is called the purple
28:48 - pattern
28:49 - [Music]
28:50 - i really enjoyed your
28:53 - your talk
28:54 - mr geyser
28:57 - yeah he talked a little bit about the
28:58 - pebble person but it's pretty cool so
28:59 - the idea is i think it's it's it's
29:01 - always been there but um i think it was
29:04 - coined the first time at google i o 2016
29:06 - by the polymer team
29:07 - and the idea is basically
29:09 - um and you'll see how this all comes
29:11 - together it's you push critical
29:13 - resources first um so your app shall the
29:16 - asset groups you render initial routes
29:18 - with a very lean app module so
29:20 - in the in the angular context is that
29:23 - you know on your on your core um
29:26 - module you don't want to have as many
29:28 - depend or imports in there you want to
29:30 - have you know you want to keep it as
29:31 - lean as possible
29:33 - um you pre-cache the the remaining
29:35 - routes with the service worker
29:37 - and then you lazy load the roots with
29:39 - angel modules so this goes back to to
29:41 - that idea of you know making sure that
29:44 - um you keep all the features together
29:46 - and modularize your application that
29:48 - helps you to basically apply lazy
29:50 - loading and those kind of stuff
29:54 - um this is just basically a diagram that
29:57 - shows you how your application loads you
29:59 - first get the index html well you guys
30:02 - saw the splash screen right there was a
30:03 - splash screen then um that's contained
30:05 - within the index.html file um your up
30:09 - your app module gets loaded and then
30:12 - obviously other stuff happens but
30:14 - eventually you get to fully interactive
30:16 - which is
30:17 - in my opinion that you know you want to
30:19 - get there as quickly as possible
30:22 - all right
30:25 - now you may be wondering where do i
30:28 - start i've got an existing application
30:29 - but you know how do i know how it's
30:31 - performing
30:32 - um you can do a bundle analysis
30:36 - you install webpack bundle analyzer
30:38 - through npm
30:40 - you add that to your json package.json
30:42 - file and then you run the analyzer this
30:45 - will basically scan through your
30:47 - node modules it will scan through all
30:49 - your files your application and it will
30:51 - give you it will give you a breakdown of
30:54 - um
30:55 - the
30:56 - you know the the size of your
30:57 - application so you will get something
30:59 - that looks like this
31:01 - uh this is is for that um i can use pwa
31:06 - as you can see here angular is the
31:08 - biggest sticking the biggest space
31:10 - closely followed by firebase and you've
31:13 - got all these other files as well
31:15 - and there's your source file there
31:17 - um so clearly i mean just by looking at
31:19 - this you can say okay so maybe i should
31:21 - be thinking about lazy loading firebase
31:23 - or modularizing that part so that i can
31:25 - i don't have to load it immediately when
31:26 - the app launches so that's something
31:28 - that i would do i would first i would
31:30 - make sure that um that is a separate
31:32 - module
31:34 - um and by doing so you would basically
31:36 - cut your your bundle size in half or
31:38 - roundabouts
31:40 - um this is another tool this is a very
31:42 - very cool tool tool i actually got to
31:44 - play a little bit more uh with it today
31:47 - um and discovered new features as we're
31:49 - going along and got so excited um but
31:51 - basically so uh this basically you put
31:54 - in a url
31:55 - um you can specify the sort of
31:57 - connection so think about your user base
31:59 - let's say you're a big company and
32:01 - you've got users all over the world
32:03 - um and let's say business is starting to
32:05 - become sluggish in a certain geography
32:08 - and you want to find out how you up your
32:11 - obviously an online shop or online
32:13 - application and you want to find out how
32:16 - are people experiencing
32:18 - your application within that geography
32:20 - so you can specify basically
32:22 - the type of network
32:24 - connections that are
32:25 - typical within that area
32:28 - once you've done that once you've run
32:29 - that and i'm just going to show you one
32:30 - example there's many things that you can
32:31 - do with it
32:33 - you'll get something like this which is
32:34 - called the waterfall view basically
32:36 - shows you how your your application
32:38 - loads so once it's connected it first
32:41 - loads your html you see it's pretty
32:42 - quick so because i've inlined everything
32:44 - the css html um
32:47 - you can see that you get the first paint
32:49 - very quickly you know just under half a
32:51 - second half a second
32:53 - um
32:54 - so that's just your html loaded and then
32:55 - it it
32:57 - it does your
32:58 - uh pausing compiling and um rendering
33:02 - your javascript that is actually the
33:04 - the the biggest chunk of work with
33:06 - browsers javascript is
33:09 - if you can optimize that part if there's
33:10 - any part that you can optimize it should
33:11 - be that that part um through things like
33:14 - lazy loading and all the other things
33:15 - that we've discussed before
33:17 - um but you can see here our application
33:19 - gets fully interactive
33:22 - [Music]
33:23 - you um
33:23 - i don't know about the
33:25 - um
33:27 - yeah so this is this is one of the tools
33:30 - that you can use there's many others um
33:33 - there's also websitegrader.com it gives
33:36 - you similar matrix um but it goes into
33:39 - detail in terms of um you know
33:41 - what's the reasoning behind the the
33:43 - associated matrix
33:45 - um if you're old school you can still
33:47 - use your dev your dev tools
33:50 - um yeah so this one is very similar the
33:52 - cool thing with that first one that i
33:54 - showed you this one um is that you can
33:56 - actually simulate what dev tool does
33:59 - under the hood um most of it actually is
34:01 - is is encapsulated in there but yeah you
34:04 - can also do it that way i think where
34:06 - you want to focus in is just obviously
34:08 - looking at how your your application
34:10 - gets loaded and then you'll be able to
34:12 - well you'll identify the way
34:14 - that browser is taking long or your
34:16 - application is taking long to getting
34:17 - loaded and you can optimize for those
34:19 - things
34:22 - um this is one talk that i really
34:24 - enjoyed it's by a guy called maxim
34:26 - salnikov he's an angular gde
34:30 - um yeah so he basically goes into detail
34:32 - all the stuff i've that i've covered or
34:34 - the slides that i've covered so far he
34:35 - delves a little bit deeper into those so
34:37 - i would strongly suggest
34:40 - that you check out this presentation
34:42 - it's very cool
34:45 - um so what have we learned
34:49 - now i'm asking you the question what
34:50 - have you learned
34:52 - nothing all right what i've learned is
34:54 - that um so to get started i think you
34:57 - know it's
34:58 - you wanna
34:59 - um let's say you've got a big
35:01 - application or you've got an existing
35:02 - application you don't know where to
35:03 - start i would say you know look look at
35:06 - this quadrant look at where there's low
35:09 - effort and where you get the the most
35:11 - value high impact so go for the low
35:14 - hanging fruit
35:15 - um by using the things that we've
35:17 - discussed following the purple pattern
35:20 - modularizing your application laser
35:22 - loading those kind of funky stuff um you
35:24 - will use more value by doing so angular
35:28 - maybe i should also add that angular
35:29 - does have a style guide basically best
35:32 - practices of how you structure your
35:33 - applications
35:35 - um yeah it i would strongly recommend
35:37 - that you follow that as well
35:39 - by default you will basically build
35:41 - very optimum applications
35:45 - um what's coming next
35:47 - mike what's coming next
35:48 - [Laughter]
35:50 - there's i mean with
35:52 - angular 6 is is was released recently
35:55 - and with it came
35:56 - pretty cool stuff like schematics you've
35:58 - already seen it how we do the pwa stuff
36:02 - elements is also another cool feature
36:04 - that you can use today
36:06 - um going to the future i think i don't
36:08 - know i haven't been following very
36:10 - closely lately but think they not
36:24 - um available for all the cool stuff
36:27 - coming out from firebase um as a as a
36:30 - side note as well uh today what was
36:32 - yesterday david east tweeted um he said
36:34 - if you're using
36:36 - he says if you're using firebase i've
36:38 - got this new thing it's a secret thing
36:39 - but you know if you want to know what it
36:40 - is dm me so
36:43 - so i cannot freaking wait i did dm him
36:45 - this morning but yes i'm still waiting
36:48 - to see what the hell it is
36:49 - but i'm pretty excited i'm sure it's
36:51 - going to be fun
36:52 - um i think at this moment i should want
36:54 - to take a moment to say thanks to people
36:56 - that have helped me along this journey
36:58 - uh jeff is a very very cool cool guy
37:01 - he's got a
37:02 - um on angularfire.com
37:05 - he has
37:06 - tons of
37:08 - [Music]
37:09 - of tutorials of learning material
37:12 - um yeah he's he's simply the best he's
37:15 - he's very good at what he does
37:17 - maxim's helped me with some pwa stuff
37:19 - questions and john papa i like listening
37:21 - to him and his adventures of angular
37:23 - podcast
37:26 - yeah and also my my teammates at
37:29 - standard bank we have the wealth team
37:31 - the web team
37:32 - and free code cam free code camp is a
37:34 - non-profit organization if you're new
37:37 - into programming or if you want to or
37:40 - you just started and you want to you
37:42 - know hang out with people in a similar
37:44 - boat
37:45 - i actually try and organize once a month
37:49 - a meetup we meet at rose bank
37:52 - just basically just networking but there
37:53 - is if you go to freecodecam.org
37:56 - um you can basically get started in this
37:58 - journey there was a gentleman that
37:59 - mentioned it on that is not from the
38:01 - uh it's not in
38:02 - the web space that's how i got started
38:04 - self-taught um but i really enjoy what
38:06 - i'm what i'm doing now and yeah and
38:09 - obviously you guys judy g johannesburg
38:11 - thanks for for the invitation
38:13 - i really appreciate that
38:15 - um yeah and i've got some resources for
38:17 - you so if you look at that app that you
38:19 - downloaded um right at the bottom the
38:21 - source code
38:22 - um that will take you to
38:24 - github my github account if you want to
38:26 - optimize and you want to help me out
38:28 - with something just send me a pull
38:29 - request i'll be happy to manage it
38:32 - yeah and
38:34 - with that i'd like to say thank you very
38:35 - much and i cannot wait to see what you
38:37 - build next thank you
38:46 - questions
38:48 - if i'm using a service worker and i'm
38:50 - going to fetch data in my banking
38:52 - through an api or json api
38:54 - um
39:00 - if you say can you just repeat the
39:01 - question
39:02 - from the backing yeah
39:06 - yeah yeah
39:08 - no okay so the service worker the
39:10 - angular service worker you don't
39:13 - i should have shown i don't have that
39:14 - slide but anyway there's when you look
39:16 - at the service worker file
39:18 - that that angular generates for you it's
39:20 - about correct me from wrong it's about
39:22 - 2000 lines of code you don't have to
39:24 - touch that if you want to
39:26 - get to the nitty gritties of it if you
39:28 - want to add some some of your own stuff
39:30 - um what is it called workbox
39:32 - workbox web yeah workbox um there's
39:34 - other similar tools but you can go that
39:37 - way it is possible to use more than one
39:39 - uh jeff the guy that i showed earlier on
39:41 - he's got a video on that um but yeah i
39:44 - think workbox if you want to just really
39:45 - get into the nitty gritties of it you
39:47 - can do you can go that route
39:49 - yeah
40:06 - yes yes so you saw that life cycle right
40:09 - this i only saw that i only showed the
40:11 - the the main components but there's
40:13 - sort of like interim steps that happen
40:15 - in between and you are able to intercept
40:17 - those and
40:18 - um yeah just add event listeners
40:20 - basically and then you can respond
40:22 - depending on the state of the service
40:23 - worker or the network request
40:26 - another questions
40:31 - on both questions
40:34 - does this work with node.js primarily
40:37 - what is this
40:42 - oh yes yes if i'm not mistaken right so
40:45 - this thing works or not
40:48 - so there's an sdk the firebase sdk you
40:51 - can just download it download it and
40:52 - then you can interact with the with the
40:54 - firebase that i know with cloud
40:55 - functions they definitely they use uh
40:58 - node node.js
41:16 - [Music]
41:19 - um basically trigger send a message to
41:22 - your project
41:23 - and that will on your servers
41:31 - so in that case are you specifically
41:34 - interested on the upload status how far
41:37 - you are with the upload is that what
41:38 - you're asking configuration of the
41:41 - service worker notifications
41:43 - based on the second question of how do
41:45 - you check your cache
42:01 - okay
42:04 - okay
42:06 - okay
42:07 - um
42:29 - oh yes
42:30 - no no definitely
42:32 - absolutely we at the bank we use a lot
42:34 - of some features uh correct me from
42:36 - wrong uh pj oh wait wait he left it by
42:39 - the time
42:40 - he ran away when they introduced me a
42:42 - piece
42:46 - um yes you can use it in production
42:49 - um i've i've used so everything that
42:52 - i've shown you know i know i've showed
42:53 - you a sort of like a toy app but um
42:57 - this is still under production i've
42:58 - built something for a non-profit
43:00 - organization it uses all the features
43:02 - for angular
43:04 - uh i mean it uses angularfire too um
43:06 - with all the features we don't have
43:08 - internet connection but
43:10 - um yeah anyway but it's um it is ready
43:14 - for product you can use it today
43:26 - [Music]
43:29 - well if it's good for google i think
43:31 - it's pretty safe um i think maybe one
43:33 - thing that i didn't mention was the fact
43:35 - that with angular specifically um
43:38 - they
43:39 - you know most of the apps within google
43:41 - they they build using angular so before
43:43 - they release a new feature they'll have
43:45 - to make sure that they don't break any
43:46 - of those apps um so you know with that
43:49 - rigorous testing i think you know it's
43:51 - pretty safe for us to use as well
43:59 - cool all right well thanks richard cool
44:01 - stuff
44:02 - thank you so much

Cleaned transcript:

all right um thank you very much for having me my name is richard zitole i am an angular developer at standard bank i am fairly new in the industry but yeah i've i've played around with uh different tech and today i'm just here to basically share my story um about some of the things that i've discovered along the way um yeah here's my twitter handle if you want to know anything anything about this presentation afterwards you can reach out to me um we've got a few slides so i will go through rather quickly but yeah feel free to stop me to ask questions if you have any or you can save them for afterwards all right um let's jump right into it um oh another thing before we continue is that i noticed that we have a few gdes here so if you have any hard questions please just point on it to them [Laughter] all right so yeah genie is google developer experts there are there's a few around here so please point those difficult questions to them anyway um agenda so i'm gonna take you through basically a this is a very opinionated um presentation in other words it's uh it's a stack which i have chosen and i've you know built applications with it and um so i'm gonna take you through quickly through angular for those of you that have not used it before and then we'll talk a little bit about firebase and what it entails and all its features after that i will introduce you to a wrapper which is called angularfire2 we'll talk a little bit about offline first strategies um using the service worker and then after that we will build a hacker news pwa so there's a demo coming up after that we'll do some we'll basically just benchmark that pwa to see how it sticks up in terms of performance and then we'll use lighthouse and other tools to optimize and see how we can improve the um the performance um yeah i will test this stack which is pretty much what i've i've just mentioned now and then we'll share some some some learnings and findings and i'll also show you some resources where you can learn more about this technology stack all right so moving right into it the stack javascript frameworks there's quite a few of these [Laughter] and sometimes it feels like there's a new one coming out every second week um actually there is one there's one that comes out quite frequently but i think it's arguably you can say these three are pretty popular i got the screenshot from the other day from john papa um he did a little uh so i was looking for a what do you call it a a cloud word cloud uh for for uh the different javascript frameworks i couldn't find one and then i happened to come across this and i asked john papa if he if i can use it and this was his response he says of course but keep in mind that polls are not perfect this captures people on twitter who follow me who happen to see it and who want to reply which i think was pretty fair so i thought i'll put in that disclaimer but i think if you look at other comparison or um polls react is pretty much in front but this is not a popularity contest it's you know it's about you know using a framework that is fit for purpose um and clearly you can see which one i i went for so that's what we're going to talk about tonight angular so you might be asking yourself why angular for those that have not used angular before angular is for me personally i actually started with vue i did a few for a couple of for a short while but then because of work i had to move on to angular which i love to bits at the moment i'm still learning it so correct me if i you know miss spell or miss say something but uh basically under the hood this is basically the the basic um components of of an angular the most basic one is an angular module or ng module it comprises of a template and a component which gives you your angular view we use event bindings um to take input from the user and we process it through in in the component um and then we return application data via property bindings directives and bindings you basically just it's some logic and business logic that modifies your template before you render it to to your user um it has this very cool piece of technology called dependency injection and that allows you to use shareable services which you can import into your component it helps keep your component nice and dry and you can reuse them so the idea is basically just you know if you have a specific feature maybe a user login you want to keep that as a single module um for there's benefits for that uh which i will delve into in the next couple of slides uh but yeah basically that is um angular under the hood um the the most the most uh benefits that people always is exactly what it says there you're able to use your angular skills to basically build for not only mobile not only web but mobile and native desktop as well it is possible uh things like ionic they heavily use this under the hood um angular by design is built for speed and performance um if you add things like web workers and service workers and server side rendering you just basically make you up you can make your applications um pretty fast other benefits or other reasons why people love angular is because of its incredible tooling and its community behind it um i mean we've got the english cli i think it's one of the most beautiful pieces of software with the latest release of angular 6 we've added extra features like schematics and elements and all this kind of stuff which i'll delve into in later slides and it's loved by millions myself and some of the web developers here i hope you have tried it if you haven't tried it uh please dive in and and have a look at it um angular.io is the website you want to go to to get started so the next piece of technology that i'm going to talk about is firebase how many of you have used firebase before okay quite a few cool have you used all the features that are there at the moment not okay so right absolutely so that's yeah i've i've gone through that route i've tried to use all of the features that are available for the web um but it's basically if you don't know what firebait firebase is you can think of it as a backend as a service so if you do not want to tinker with um provisioning servers and infrastructure and managing all of that um you people who've worked in in big organizations where you know you're serving millions of customers you will know that you know as as your application grows or as your user base grows so does your infrastructure um but firebase allows you well it basically abstracts that layer for you because you know it's a backend as a service so you're able to build applications fast without managing infrastructure it is backed by google um yeah and and i think the one cool thing with with firebase is the fact that you know most of the features they work nicely together um as you'll see now the first one that i'll quickly uh touch on is authentication authentication is basically just you know managing your user authentication the cool thing with this i think it's um the fact that you have you can use multiple providers um whether it be google twitter i'm not sure facebook is there um yes um as well if if say you also want to use um passwordless so you don't want your users to to to create a password you can use that as well or you can go old school and use it you know your email and password um the next feature uh is is the firestore cloud firestore this is the actual database um that you interact with the nice thing with the database is that it's a nosql database um it's based on the concept of collections collections you can think of it as a json object within collections you have the actual documents documents is where you would store your id or user id email address and and all the uh all other properties that you want to store for the user um and then cloud storage so if you want say say you have an application that you you know you uh you offer file uploads um you can use cloud storage to to store the those images um couple that with cloud functions which is one of my favorite uh features is that so cloud functions is basically you can think of it as like web hooks so you imagine a scenario where um you offer our clients or it's an it's an image sharing service or application typically users will upload anything that they can as long as they see an upload they can put in anything in this with cloud functions you're able to basically detect what they're uploading the size and file format and you can do some sort of transformations before you store it up into your storage and you can also create records in your firestore database once you're done building your application and you want to host it you can do so the firebase offers a hosting service which is very very generous here um the very cool thing is with this is that they've got cdn uh distributed globally so as soon as you upload your your your application it basically gets distributed across the globe through the cdn network and that means for your users that regardless whether you're here or in dallas or in china you know you can just pretty much have a low latency access to to the application and your assets which is a very cool thing ml kit um i i heard through the slovak that someone is going to do a talk on that we don't have it in web as yet correct me if i'm right yeah but i think it might be in the pipeline i hope um yeah we'll see the future is bright firebase all right now just give me a sec who of you have heard of angularfire or have used angular fire before in your application okay i see one two hands um angle of fire is basically fire two because we want um that's the latest one is basically it's a marriage between angular and fi and firebase um it's an angular wrapper for firebase so all those features that i've just spoken about just now um your authentication your database storage and all that stuff it's they're all available but you because we are angular developers we like to do things the angular way um so we do we built a wrapper for it the cool thing with this library is the fact that it is um it is an official library it is developed by the guys i think davies david east is one of them and the angular core team um and many other guys from from google as well uh use it um the one thing that i will show later on what i like about it about um this rep is um the persistence so you just call in uh one method and allows your application to um to basically um persist your data so imagine you're busy capturing a form and all of a sudden telcom i mean scom decides to cut electricity and your you don't have internet connection all of a sudden um it will persist your application once the connection comes back you you will you'll be able to access the locally cached data from the from your firestore database and once the internet connection comes back on then you'll be able to you know continue where you left off which is that's a very good cool feature um it's pretty pretty popular this was taken about a week ago i think it's just over 17 000 downloads a week it's currently at rc release candidate 11 but they moved pretty fast so by the time you go and check it out it might be on 12. um there have been some breaking changes in the past i learned the hard way but yeah it's something that you need to keep in mind but it is it's got a very good support and community behind it um how am i doing on time all right um how would you get it in your project um you do it like that the the nice thing about it is that you only import the stuff that you need so if your application only uses the the database module you only need to install angularfire store module if it's authentication or storage you just import the stuff that you want to use and to initiate it down there at the bottom this is where you obviously enter all your secrets and and whatnot the nice thing also is the fact that you do not have to so typically it would be on your main module with angular you you have at least one root module and one root component um but with you know depending on your in the structure of your application um you you just need to import this way you are using it in the module that you want to use it um for benefits that we'll discuss shortly um how do you use it using it is pretty straightforward if you've written uh if you've worked with typescript before this is what it looks like angular by the way is also written in typescript typescript which gives you strongly typed powers to make sure your applications or your code is resilient um so to to get started with angular firestore you would because it's a rxjs base so you will have to have rxjs um you'll need angular firestore you just import it like that and through dependency injection you you pull it in through your constructor and this is what i was i was referring to earlier on collection so this will be your high level um uh json object in your database and the name of the collection is items and it's got this very nice methods that you can call value changes will basically return you an observable array um if you want i think there's another one called snapshot change i'm not 100 sure what it's called but it will return that observable area with meta with metadata as well so if you have ids stored and all those kind of things you will be able to pull them through as well and to display it in your template you just call it on ng4 um you iterate through your your observable but because then observable you need to use the asic pipe to unwrap that observable and through interp interpolation you be able to extract all the data that you need through there so it's pretty straightforward it's everyday code that we write if you use angular on a daily basis i should not assume that [Laughter] a lot of mobile developers are looking at me like no don't do that all right um moving along oh so yeah the time has come for you know i think everyone is looking forward to this but uh not quite yet if you're still wide awake by now and if you remember what i mentioned at the beginning or in the agenda is that um this talk is not about angular's it and it's not about firebase um it's not about pwas it's about everything it's about using all these technologies together to to get the the most out of it um so i'll just quickly take you through um the service worker specifically we'll focus specifically on the angular service worker um in its simplest form a service worker is simply a javascript file it's a it's a js file um where you define how your application how your application requests how it requests um network requests so it basically intercepts network requests and it stores the response into your cache api that's that's its simplest definition um and you might ask me wondering why you want to do that um i think it's pretty much i think it's for obvious reasons because cache is obviously on your browser itself so i'm talking about the the browser cache um so the idea behind service workers is that you want to show something on the screen as quickly as possible so first time around when you make an extra call the service worker will jump in and say okay let me have a look you want to make a call to this api and it will cache their response and put it into the cache api on the browser itself so next time when you request the same api or the same address it will basically look into the cache or if it doesn't find the information that it's looking for or the cache is expired then it will make a network call the cool thing with um with the angular service worker specifically is that you can define how all these things work but first before we get to that this is something that uh tricked me over when i when i started looking into service workers it looks very simple it is a simple diagram i think so basically this is what happens when your application loads the service worker gets registered schedule installed and you get activated and it starts doing its magic um but it's very important i think for me i did this mainly for me actually because i think it's very important that you understand how the life cycle works um because it's very easy to get tripped over you you'll be expecting a certain behavior and meanwhile this thing is bringing back something completely different so depending on how you configure it and so forth um yeah it helps to basically understand how the life cycle works um browser support who can tell me what's wrong with that picture well except for that lonely outlier over there i think everyone is in agreement that this is a cool idea right so yeah i think you guys can go ahead and use this stuff because it is supported across orbit i mean look at even samsung internet you know they're right they write up theirs or they've been supporting it since four which is pretty cool so yeah guys please go ahead and start tinkering with this um with this uh sort of stuff now um so we because we are angular developers i'm looking at youtube rebecca we will talk about service workers in the context of angular um so so if you look at this step there's a six six part yeah it's about six steps most of these steps you would have to do it by hand not so long ago if i'm not mistaken in fact i am not mistaken because i had to do some of this stuff by hand but with the latest angular angular 6 we have added a new uh schematics basically this at angular slash pwa so you just throw in there you just go ng add angular pwa and it basically goes ahead and does all the stuff it configures this stuff for you i think the one key thing that i maybe is worth mentioning in this in the steps is the manifest json file um as you will see shortly um so basically the manifest json file it basically you that's where you define how your app your your pw how you want your pwa to look like once it's downloaded oh um i'm not sure if if you've come across a pwa as yet you should have because most of the south african websites they basically telling their applications to pwas um but basically so you'll notice on the address bar there you you might have um like the same color theme with the rest of the application so you you define those kind of things in that manifest json file um another very important um file that that the angular pwa schematic does for you is create this ngsw config json file this is if you remember what i've mentioned earlier on what i said earlier on was that you can basically tell the service worker how to deal with network requests um when to look into the cache uh first or whether to look into the cache first or if it should go to the network first you define all those kind of things all those things in the ng sw config.json file and once you've done you just basically build the project make sure you build it with double dash prod that allows you well it builds that project in ahead of time compilation uh basically just tree shakes all the unnecessary polyfills and all the other stuff that is not necessary for you app to run makes it very lean and then you just run the project um yeah so now let's i think let's look at what is being cashed are you guys still with me are you still following you have i lost you completely please uh do raise your hand if i'm i'm moving too fast or if you've lost me completely um this is what has been guess so there's two groups um uh so so this is obviously how angular have um decided or have defined how to um to cache your assets there's two groups the first one is called asset groups asset groups basically it um it's it's where you tell your service worker what your cash flow so your your um your app skeleton um so if if you guys are not 100 sure a a web application usually comprises of an index html css and javascript uh files so what we're saying here especially on the install mode we're saying that as soon as the application loads go ahead and cache all this all these files so your html index html anything that ends with bundle.css and bundle.js and chunk.js we have another one here called assets this one's install mode is lazy what that means is that it you do not immediately start caching the stuff wait until the user navigates as soon as the user navigates to a certain url certain path then it will cache those assets the other group is called data groups in data groups we have two types the first one is called freshness or uses strategy called freshness in simple in simplest uh terms it it just means network first so go into the network first and um so in this specific example you know when you hit that url go to the network don't look into the cache first um and yeah you can also specify you through the cache config the mixmex age and the timeout so after 10 seconds if this thing doesn't return anything it'll look into the cache the other the other option is performance this is for all the other the remaining routes of your application however many you want um this one will look into the cache first so it'll say cache if the max age has expired excuse me then it will go out to the network and fetch those assets all right moving along if you've done everything correctly um then you will you know you'll you'll look at when you look at your dev tools you look at something like this as you can see here we are in offline mode um so this prior to this you would have to have gone to the app face because obviously it has to case from somewhere else so you first have to visit the app it will cache that using that asset group strategy it will cache all the the the basic files and when you refresh then it will save it from the service worker so this is how you know that your your application is being served from the service worker so what you're looking at now is a good thing you want to to see this when you've uh turned your application to a pwa all right okay so i've covered that so yes show the thing here's the demo do you guys want to take out your phones and go to that url i'm sorry i should have tiny urls yes you can use them um side by side you don't have to have one or the other they can work in tandem everyone there okay awesome so that is a pwa if you are lucky or if you have a smartphone using a browser which is up to date you might get a little banner that asks you if you want to add to your home screen have you guys seen that okay you can go ahead and add it if you want it's not a must but if you want to see how these features all come together that's um yeah that's one of the benefits of going to pwa route uh yes george you good okay cool um yeah that is a pwa so and if if you're accessing that url through a browser through a desktop um and you run it through lighthouse lighthouse let me just quickly speak about lighthouse is basically it's one of the tools that you can use to access a website or web applications performance with that specific one as you can see there that's the same url that you guys went to now it was done a couple of days ago so it's all green so you want to be hitting you know you want to have greens here so so the most important ones obviously here is performance and progressive app you don't have to check for this other stuff but it's good to know that you are you're all in the green um yeah i think the key matrix for me uh for this screen is well i think not just for me but like for most applications is time to interactive what that means is that you know how long does it take for your application to become to get to a state where it's responsive to user input um so you want to have that definitely a degree in fact if it's over 10 seconds right now it's 4.6 seconds if it's over 10 then it'll start affecting your progressive web app um matrix um so this will probably go down to around 70 or something like that and then at the bottom here you see this is a film strip it shows you the timeline shows you how quick your application loaded first meaningful so another very cool thing about matrix performance matrix specifically things like netflix tv ui so they have specific matrix that they've decided to focus on and optimize for them is tti is as it's also known they also look at if i'm not mistaken is that estimated input latency or input responsiveness so it's how long it takes when a user taps on something how quickly does the application respond for them that is very important um and then also the the cpu usage so those are the three ones um that they they track so every application will obviously be different depending on you know what you're optimizing for what what the app does and what what you user base look like but you know it's always good to have greens all around i just like looking at the greens all right so if you're not getting those grains guys this is some of the ideas that you can follow to basically get to the greens the first one is called the purple pattern i really enjoyed your your talk mr geyser yeah he talked a little bit about the pebble person but it's pretty cool so the idea is i think it's it's it's always been there but um i think it was coined the first time at google i o 2016 by the polymer team and the idea is basically um and you'll see how this all comes together it's you push critical resources first um so your app shall the asset groups you render initial routes with a very lean app module so in the in the angular context is that you know on your on your core um module you don't want to have as many depend or imports in there you want to have you know you want to keep it as lean as possible um you precache the the remaining routes with the service worker and then you lazy load the roots with angel modules so this goes back to to that idea of you know making sure that um you keep all the features together and modularize your application that helps you to basically apply lazy loading and those kind of stuff um this is just basically a diagram that shows you how your application loads you first get the index html well you guys saw the splash screen right there was a splash screen then um that's contained within the index.html file um your up your app module gets loaded and then obviously other stuff happens but eventually you get to fully interactive which is in my opinion that you know you want to get there as quickly as possible all right now you may be wondering where do i start i've got an existing application but you know how do i know how it's performing um you can do a bundle analysis you install webpack bundle analyzer through npm you add that to your json package.json file and then you run the analyzer this will basically scan through your node modules it will scan through all your files your application and it will give you it will give you a breakdown of um the you know the the size of your application so you will get something that looks like this uh this is is for that um i can use pwa as you can see here angular is the biggest sticking the biggest space closely followed by firebase and you've got all these other files as well and there's your source file there um so clearly i mean just by looking at this you can say okay so maybe i should be thinking about lazy loading firebase or modularizing that part so that i can i don't have to load it immediately when the app launches so that's something that i would do i would first i would make sure that um that is a separate module um and by doing so you would basically cut your your bundle size in half or roundabouts um this is another tool this is a very very cool tool tool i actually got to play a little bit more uh with it today um and discovered new features as we're going along and got so excited um but basically so uh this basically you put in a url um you can specify the sort of connection so think about your user base let's say you're a big company and you've got users all over the world um and let's say business is starting to become sluggish in a certain geography and you want to find out how you up your obviously an online shop or online application and you want to find out how are people experiencing your application within that geography so you can specify basically the type of network connections that are typical within that area once you've done that once you've run that and i'm just going to show you one example there's many things that you can do with it you'll get something like this which is called the waterfall view basically shows you how your your application loads so once it's connected it first loads your html you see it's pretty quick so because i've inlined everything the css html um you can see that you get the first paint very quickly you know just under half a second half a second um so that's just your html loaded and then it it it does your uh pausing compiling and um rendering your javascript that is actually the the the biggest chunk of work with browsers javascript is if you can optimize that part if there's any part that you can optimize it should be that that part um through things like lazy loading and all the other things that we've discussed before um but you can see here our application gets fully interactive you um i don't know about the um yeah so this is this is one of the tools that you can use there's many others um there's also websitegrader.com it gives you similar matrix um but it goes into detail in terms of um you know what's the reasoning behind the the associated matrix um if you're old school you can still use your dev your dev tools um yeah so this one is very similar the cool thing with that first one that i showed you this one um is that you can actually simulate what dev tool does under the hood um most of it actually is is is encapsulated in there but yeah you can also do it that way i think where you want to focus in is just obviously looking at how your your application gets loaded and then you'll be able to well you'll identify the way that browser is taking long or your application is taking long to getting loaded and you can optimize for those things um this is one talk that i really enjoyed it's by a guy called maxim salnikov he's an angular gde um yeah so he basically goes into detail all the stuff i've that i've covered or the slides that i've covered so far he delves a little bit deeper into those so i would strongly suggest that you check out this presentation it's very cool um so what have we learned now i'm asking you the question what have you learned nothing all right what i've learned is that um so to get started i think you know it's you wanna um let's say you've got a big application or you've got an existing application you don't know where to start i would say you know look look at this quadrant look at where there's low effort and where you get the the most value high impact so go for the low hanging fruit um by using the things that we've discussed following the purple pattern modularizing your application laser loading those kind of funky stuff um you will use more value by doing so angular maybe i should also add that angular does have a style guide basically best practices of how you structure your applications um yeah it i would strongly recommend that you follow that as well by default you will basically build very optimum applications um what's coming next mike what's coming next [Laughter] there's i mean with angular 6 is is was released recently and with it came pretty cool stuff like schematics you've already seen it how we do the pwa stuff elements is also another cool feature that you can use today um going to the future i think i don't know i haven't been following very closely lately but think they not um available for all the cool stuff coming out from firebase um as a as a side note as well uh today what was yesterday david east tweeted um he said if you're using he says if you're using firebase i've got this new thing it's a secret thing but you know if you want to know what it is dm me so so i cannot freaking wait i did dm him this morning but yes i'm still waiting to see what the hell it is but i'm pretty excited i'm sure it's going to be fun um i think at this moment i should want to take a moment to say thanks to people that have helped me along this journey uh jeff is a very very cool cool guy he's got a um on angularfire.com he has tons of of tutorials of learning material um yeah he's he's simply the best he's he's very good at what he does maxim's helped me with some pwa stuff questions and john papa i like listening to him and his adventures of angular podcast yeah and also my my teammates at standard bank we have the wealth team the web team and free code cam free code camp is a nonprofit organization if you're new into programming or if you want to or you just started and you want to you know hang out with people in a similar boat i actually try and organize once a month a meetup we meet at rose bank just basically just networking but there is if you go to freecodecam.org um you can basically get started in this journey there was a gentleman that mentioned it on that is not from the uh it's not in the web space that's how i got started selftaught um but i really enjoy what i'm what i'm doing now and yeah and obviously you guys judy g johannesburg thanks for for the invitation i really appreciate that um yeah and i've got some resources for you so if you look at that app that you downloaded um right at the bottom the source code um that will take you to github my github account if you want to optimize and you want to help me out with something just send me a pull request i'll be happy to manage it yeah and with that i'd like to say thank you very much and i cannot wait to see what you build next thank you questions if i'm using a service worker and i'm going to fetch data in my banking through an api or json api um if you say can you just repeat the question from the backing yeah yeah yeah no okay so the service worker the angular service worker you don't i should have shown i don't have that slide but anyway there's when you look at the service worker file that that angular generates for you it's about correct me from wrong it's about 2000 lines of code you don't have to touch that if you want to get to the nitty gritties of it if you want to add some some of your own stuff um what is it called workbox workbox web yeah workbox um there's other similar tools but you can go that way it is possible to use more than one uh jeff the guy that i showed earlier on he's got a video on that um but yeah i think workbox if you want to just really get into the nitty gritties of it you can do you can go that route yeah yes yes so you saw that life cycle right this i only saw that i only showed the the the main components but there's sort of like interim steps that happen in between and you are able to intercept those and um yeah just add event listeners basically and then you can respond depending on the state of the service worker or the network request another questions on both questions does this work with node.js primarily what is this oh yes yes if i'm not mistaken right so this thing works or not so there's an sdk the firebase sdk you can just download it download it and then you can interact with the with the firebase that i know with cloud functions they definitely they use uh node node.js um basically trigger send a message to your project and that will on your servers so in that case are you specifically interested on the upload status how far you are with the upload is that what you're asking configuration of the service worker notifications based on the second question of how do you check your cache okay okay okay um oh yes no no definitely absolutely we at the bank we use a lot of some features uh correct me from wrong uh pj oh wait wait he left it by the time he ran away when they introduced me a piece um yes you can use it in production um i've i've used so everything that i've shown you know i know i've showed you a sort of like a toy app but um this is still under production i've built something for a nonprofit organization it uses all the features for angular uh i mean it uses angularfire too um with all the features we don't have internet connection but um yeah anyway but it's um it is ready for product you can use it today well if it's good for google i think it's pretty safe um i think maybe one thing that i didn't mention was the fact that with angular specifically um they you know most of the apps within google they they build using angular so before they release a new feature they'll have to make sure that they don't break any of those apps um so you know with that rigorous testing i think you know it's pretty safe for us to use as well cool all right well thanks richard cool stuff thank you so much
