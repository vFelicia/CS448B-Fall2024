With timestamps:

00:09 - you
00:14 - All right so who here has heard about
00:17 - webpack i
00:19 - Hope so that's, why, you're here right okay, so yes my name is shawn
00:24 - Larkin i'm a program manager for microsoft in their, web platform and
00:29 - I work on edge dev tools but aside
00:33 - From that i'm one of the maintainer of web pack i kind of fall in line with the developer advocate kind of role
00:40 - But then i've, also done some work on the angular core team, who here uses angular. Angular. Okay, yes nothing wrong with that
00:48 - There isn't and
00:50 - Just a general kind of evangelist for open-source sustainability a
00:56 - Little bit about, myself, so i'm kind of a former tech support rep
01:00 - Gone rogue i got tired of not being able to solve people's problems
01:04 - And so i look kind of learned to applescript whoever has written an apple script before yeah, like that
01:11 - Was my first programming language and then i did a little bit of objective-c swift
01:16 - Javascript and i do like woodworking chicken farming internet of things
01:22 - So, yes like i said sustainable open-source practices
01:26 - I've been trying to be involved with
01:29 - Encouraging others to be involved with open-source and how can you grow. Your organization how can you grow
01:34 - your community how can you make it rich and thriving so you can find me at the lark in
01:41 - So feel free you know you can take a look, and see
01:46 - Me at any of these places online
01:49 - Yeah, hi, my name is tobias. Copass, and i'm the founder of epic and maintainer and
01:55 - part of the core team and yeah and
02:00 - go, ahead, and yeah currently i'm doing full-time open source, web development and
02:05 - next
02:07 - Yeah, you just tell, me what i'll do it
02:09 - No, it won't work, from this far there we go cool, and my background is a little bit, weird for a. javascript, developer i'm
02:17 -  
02:17 - started with c sharp c++ c development and
02:22 - Did javascript as a hobby, and yeah so i came to make
02:27 - But i've never done a real, web application so far
02:33 - Never made a real, web application
02:38 - what
02:40 - Yeah, you, also find me on github and on twitter because sokra
02:44 -  
02:49 - i did a w it's cool, why not
02:52 - okay
02:54 - so yes
02:56 - We're, gonna talk about a lot of things today i mean and a lot of it is gonna be about, web pack of course
03:03 - Hold on so on a side note tobias
03:06 - When you wrote, web pack it was for not four years thesis right it was for the web project
03:12 - That your thesis, was for i did a. Web project in my thesis, oh and but it's small one?
03:18 - Okay, and yeah that's i?
03:22 - Need of epic module bandar and it started with a pull request on and to another project
03:29 - yep, make and
03:31 - But it was rejected to prove request so
03:35 - Because it was a complete rewrote of the language and so i published as
03:40 - Another name modules web pack yeah and it was renamed to epic yes
03:46 - So, wasn't even forest thesis project. Just shutting, some light there so yes but we're
03:51 - Gonna, talk about not only, how
03:52 - Web pack works under the hood i'm gonna kind of get so who here has like never actually configured their
03:58 - Web pack before, we love create react app, we love everything that you know
04:03 - We we like being able to write code when, we need to there are, some people out there
04:08 - Who love configuring or you know, have very unique kind of scenarios and that's why, web pack exists so we're
04:15 - Also, going to talk, about just the high level understanding how, web pack works from the user interface and then we're
04:22 - Gonna, talk about how. It works under the hood, and what, we have coming for you for web pack for
04:27 - so
04:28 - Who knows, what a javascript module is?
04:30 - Yeah, okay, cool, yep sure why, do we like them, because they're reusable
04:37 - They're, encapsulated
04:40 - Organized for the most part i mean unless you have like a redux and reactants, like, everything's like spread out everywhere
04:47 - they're, convenient
04:49 - But, what do they look, like
04:52 - well you have common jas
04:54 - If you're, just familiar with it just raise. Your hand when you see the module type that you you've used before common jas yes
05:02 - amd
05:03 - yeah
05:05 - Mg, plus common jas i will, be wow i've never seen, this before until like i made this slide
05:11 - and then
05:13 - We have typescript or equus script module syntax pretty similar pretty similar should i shake the dongle so it there we go?
05:20 - Excellent luckily beyond it and issue a free stage, yeah we're on the issue free stage, yeah, yeah submit an
05:27 - Issue okay, we'll get back to you
05:30 - So how, do they work in the browser
05:33 - Well they don't really or if they do not very, well or not very fast
05:37 - maybe soon and
05:39 - Every library is different like
05:43 - Wouldn't it you know if you go and mpm installer look at. Your package saw. Json
05:48 - Every single library might ship a different format of these modules and
05:54 - It's up to them and this is just javascript that we're talking about
05:58 - It's not even talking, about other things, like, styles assets images png etc. So wouldn't it be nice if it all just worked together seamlessly
06:09 - And sweat pack that, is what wet vac is?
06:13 - so
06:14 - You all know, wet pack is module bundler but i like reinforcing the idea?
06:19 - What does this mean it lets?
06:22 - You, write modules that work in the browser that simple, was that probably the, main premise tobias you'd say, like that was the point
06:29 - This, was a point but, also code splitting, was my intention
06:34 - that's right
06:36 - Code splitting that's right that's right from modules, web make
06:40 - And if you wanted to know
06:41 - About that story check out or read me at the bottom of the readme so
06:44 - Just, gonna, blaze through kind of the since most people understand how, to use it
06:49 - so, we have our config
06:51 - We have a. Cli, which literally uses the node api behind the scenes and
06:57 - Then, we have the node api itself and?
07:00 - So this is the core, concepts i'm just so that you can understand before, we dive under the hood, how
07:06 - It works kind of on top of the hood
07:08 - So, we have our entry point?
07:11 - let's say given you have a
07:13 - module
07:14 - And it relies on you know. Another component and
07:19 - then that component probably relies on a couple more components
07:22 - You know you're importing and requiring them whatever syntax
07:26 - but that one has a dependency it's a common jeaious library let's say and
07:31 - But wait it, also it's like, bootstrap or something else they have, style dependencies in one way or another
07:37 - That is our entry that is the entry point when, we talk about entry and webpack the root of that graph
07:44 - Is what we're referring to and so it is the first
07:47 - Javascript in your project to kick off your application
07:52 - so
07:53 - You can kind of see here when you define your entry point, web pack literally says how, ok let's start at
07:59 - This, this, file will resolve it and then we're. Gonna trace through here and go through, each of these pieces to make sure
08:07 - So we're basically telling
08:09 - What to load for the browser and it works with the output property of course so output, that's another core concept
08:17 - So you can think, about it exactly, what its purpose, is by defining specific
08:22 - Properties like a path and a filename we're telling webpack how, to handle these files
08:27 - So in this case we've created a, bundle output it to a folder
08:33 - and
08:34 - There's way, more properties that you can define an output but, that's the high-level idea it's treatment of the dependency graph when it is created
08:44 - So loaders this is like one of my favorite part, like, good idea loaders were a great idea to us
08:52 - so
08:54 - Not every dependency is gonna just be javascript but, we want to explicitly tie them together so?
09:01 - Loaders allow you to tell, web pack how, to treat non javascript after it's been resolved so
09:07 - Let's say you have a type script file or javascript that doesn't really the syntax doesn't make sense or it's newer
09:13 - Yes it's something that's not supported. By our traditional parser or let's say it's css or style
09:20 - So you can kind of imagine in that same diagram that
09:23 - We use that it is tracing through these dependencies and before we add it to the graph
09:28 - These functional transforms are converting this into a javascript module in some representation
09:35 - And there's all sorts of flexibility behind it we can filter through, them, like, how
09:42 - Many, no commonly you know a good practice or something, we see a lot in the react community
09:47 - Is that you ignore your no modules or exclude them, who has seen that before probably
09:54 - Good share hands yep
09:56 - So lots of different options to filter through and it's incredibly flexible so much that you can even chain it together
10:03 - So let's say if you, have something like less, well
10:07 - The traditional idea or foundation, is that you want to have a
10:11 - Loader that performs one operation so one transform and then you can, chain them together
10:16 - So if you have a, less file, you'll, see here it converts it to a
10:21 - Style dot css
10:23 - Converts it to like an array in memory of the style and that pretty much what it is like an array and then
10:30 - Then, we get this javascript module called inline that style into the browser with, style tags
10:36 - Best way to say it but
10:38 - There's literally a million different options that are out there in our ecosystem and this is my favorite part because a
10:44 - Loader is just a function that takes a source and returns a, new, source it's so easy to create and publish and share
10:53 - And and have this really rich ecosystem that, we have for our project
10:58 - So loaders tell us webpack, how
11:00 - To interpret and translate files especially that aren't javascript and they kind of return compilations they return new sources
11:09 - So plugins who is ever written a custom plugin. Yes like i may be this like first five minutes is too boring for you
11:18 - this, is the anatomy of a plugin so i
11:22 - Like to define it as a class to be as always correct
11:25 - Me and says it's an instance so it's just an object that has an apply method on the prototype chain, and so
11:32 - You can, see here this is the anatomy and so what, we have is that whenever?
11:37 - the
11:39 - whenever this plug-in, is registered webpack will call apply plugins and
11:44 - It will pass an instance of itself into
11:48 - This, plug-in, so that hooks can. Be hooked into and then functionality performed so in this case this is super simple
11:55 - Whenever the compiler is done or it is failed we're literally, going to write a dinging noise to the terminal
12:05 - So now that you kind of understand it looks like a class it kind of has a constructor how
12:09 - Does it operate so when you use it in your configuration
12:13 - You're, passing a, new reference to it and then that way if you have options let's say, some of the more common. Chunks plug-in
12:20 - Let's wiggle it there we go?
12:22 - ship it
12:24 - You can, pass additional arguments options and features
12:28 - To, be a suntech here
12:33 - But did you know that 80% of web pack is made up of its own plug-in system did you know that?
12:41 - yes
12:44 - My, gosh this, was my response when i found this out for the first time the blake screen
12:48 - Huh, oh you can hear that was kind of my mind was like, no way, oh?
12:55 - That was a nice image to be as i like that
12:58 - Okay, no worries no worries
13:01 - so
13:02 - We know that essentially plugins?
13:05 - add
13:07 - Additional functionality to web packs event lifecycle and so it gives you the power to do anything that you ever wanted to
13:15 - and
13:16 - So this kind of takes, me to the next part of this talk which is like the?
13:20 - Main guts, so who's feeling kind of comfortable so far
13:24 - You're, like okay, okay shawn, tell me how it really works how, does it work under the hood so
13:29 - the next part of this talk is
13:32 - We're gonna now completely remember everything that i just told you
13:37 - But don't try, to tie it together with, these concepts so
13:41 - We're, gonna talk about how. Web pack works under the hood as an architecture as a system as a bundler
13:50 - But before we begin we're? Gonna talk about something called kappa, bowl, who here knows, what a, bowl is
13:57 - Ok, cool, somebody's writing, some plugins
13:59 - So tappa, bowl is this 200 line
14:02 - Library 235 i think to be exact not anymore but
14:07 - It is the backbone of the web pack plugins, system the whole architecture is based on this library
14:15 - So, what was sean, what does that even mean so?
14:18 - Tappa, bowl, allows you to mix
14:21 - Mix in with an existing class and then it magically is bestowed these
14:27 - Awesome functions, like apply plugins parallel or apply plugins, async or apply plugins
14:34 - And what that does is these are the events that get emitted that plugins are listening to so
14:40 - Who here is ever used nodes event emitter?
14:43 - Ok, tap a pool is very very similar
14:46 - So you can, see here that there is literally an event and then in this case it's because it's an async event
14:54 - We allow, the plug-in to perform functionality call a callback and we continue?
15:00 - So here's a super, super, basic. Plug-in
15:03 - You, saw it once before of course i like writing them as classes because it makes more sense to me
15:09 - But, we have a constructor, and then the only rule, is that it has to have an apply function or a method or?
15:16 - property on the prototype chain
15:18 - And that way, we had we gain access when, we?
15:22 - Register this plugin to the compiler itself and then, we are going to listen to the event and do something
15:30 - So in the same way, my beautifully drawn slides one we apply and we gain access to the compiler then
15:39 - When webpack runs or when something that uses the system runs it then triggers, these hooks
15:46 - so
15:47 - You, might be like sean, what do you, why?
15:49 - You, keep saying capital instance or you might hear it a
15:51 - Few times all that means is a class or an object that extends tafel or really something that you can. Plug into
15:59 - So, another diagram might be this is very specific to webpack, is that to access the compilation?
16:07 - which is another instance, we have to plug into or tap into the compiler first and
16:13 - Then as you can see here the compilation, also has lots of different plugins that are executing different functionality
16:21 - So we're gonna talk, about what are these seven capital instances so
16:27 - Compiler is the first one it's kind of the i say central dispatch it's kind of like start and stop
16:34 - It really delegates the top-level events that are happening, when webpack runs or finishes and it's exposed. Via the node api
16:43 - and
16:44 - Then, we have the dependency graph so the compilation
16:50 - There we go i kind of call it's like the brain everything, that's super, juicy, about what webpack does happens inside of the compilation
16:58 - It's created, by the compiler and it contains our dependency graph traversal algorithm, that's such a mouthful
17:05 - basically how, we collect and create the dependency graph
17:10 - And then, we have the resolver so who here is ever used or understands what a resolver is?
17:16 - okay
17:17 - So, don't get like scared, by the name all resolver
17:20 - Does is it resolves it finds things it just finishes so let's say for example
17:27 - When you use a shorthand syntax for a path in node the nodes native resolver
17:34 - Gives you the absolute path and verifies it exists
17:37 - So in the same way here with webpack our?
17:41 - Module factory might be given this partial path to let's say an entry point or a
17:48 - An import statement and then the resolver just says, okay, let me go find out. And make sure it works or it exists
17:55 - Then when it's done it actually will return a lot of extra information like
18:00 - What folder was this file in what's the, absolute path what, was the raw. Request etc
18:07 - And as you can see here it is tappa belanzone
18:13 - Bs basically came up with almost every single plug-in that you could think of that you, would need to make this as configurable as possible
18:24 - Okay, so now, we have module factories?
18:27 - So, who here so i know the angular users out. There who's like i know, what a factory is?
18:33 - People know what a factory is all it does is return objects or something and?
18:38 - so in this case, we have a module factory that takes a resolved request, and
18:44 - Then it collects the source for that file now that we know it exists and we know where it is and?
18:50 - It creates a module object out of it wow. Look it's so beautiful and it goes through the factory there
18:57 - and
18:58 - Then, we have the parser?
19:00 - so
19:01 - Who is ever written a parser who knows, what an ast is who's written a babble plug-in
19:08 - Okay, so you all in some way have been exposed to an ast
19:14 - So parser parses it will convert
19:17 - Raw source code into, a tree called an ast that can be easily traversed
19:23 - And so what webpack does is we parse the file and then, we extract all of the dependency statements so requires?
19:32 - Imports etc there we go and then, we create, these things called dependencies or dependency objects
19:40 - So if i was to diagram this
19:44 - We take this module object that we've received, and we pass it through our little glasses?
19:48 - That are parsing and then, we add dependencies to our module?
19:54 - And then, we have the template so who here is used a template before in ui you know in your ui code
20:00 - We all know, what the purpose of a template is it's for binding data to your view?
20:07 - Well in this case for webpack we're just binding data to the source code of the code that we're
20:12 - Going to generate or the modules in this case
20:14 - You can kind of think of it like the configuration is our props
20:19 - The dependency graph is our state and?
20:23 - Our template is like the jsx
20:28 - So it creates code that you see in your bundles
20:31 - So if i was going to diagram this if we look here, we?
20:35 - Have a template for every single kind of abstraction so a
20:39 - Chunk, which is just a container to keep reference to our modules in our graph?
20:44 - That is gonna have a template?
20:46 - Our module has a template in each flavor of these dependencies are gonna have templates i just use like handlebars to describe this
20:54 - And then when we call render out pops, what you see in a, web pack like in a bundled file
21:05 - So let's recap what we've just learned
21:11 - So if we started out with the entry we're, gonna read the entry point that
21:15 - We got from the entry property and it's going to go through and verify
21:21 - That it exists so we're going to the resolver and then once we verified we're gonna get this normal module object and?
21:28 - Web pack is gonna, pass that to the parser and if it's not javascript?
21:33 - that's when, we pass loaders against it
21:37 - And if it is javascript we're, gonna collect dependencies and attach them to that module
21:42 - But, we don't know if those dependencies actually exist and so
21:47 - We have to resolve them and this entire cycle repeats until the graph is complete
21:53 - To, be as check, my work does that sound accurate
22:00 - So, yes that is exactly so now?
22:04 - how does this dependency graph get into the browser so i wrote this comic i drew this comic
22:13 - Hi i'm a module i can't, wait to work in the browser, oh?
22:18 - Cool, your jets, we need to get you into shapers
22:21 - You need, to jump in this thing, we call a
22:23 - Chunk, and we need to keep track of you because you were gonna crap ton of plugins at. You, we don't want to lose track
22:29 - all right almost there but, we have a problem those require statements have to go and
22:37 - But the parser gave us, some special instructions called templates and a factory so that we can, replace them
22:46 - Wow i'm finally ready for browser land look at. This thank you
22:53 - So you just learned how, web pack entirely works under the hood entirely
22:59 - entirely
23:01 - so
23:02 - How, do we feel comfortable about this so far yes kind of okay excellent that's good that's more hands that i've seen before
23:11 - excellent so now
23:13 - That i've kind of talked
23:15 - about everything that you know is to know in terms of our architecture i want to give tobias the opportunity
23:22 - Now to talk about what
23:24 - Are we going to do for web pack 4 so you understand how it works you understand the concepts
23:30 - So what are we going to do to, make, like, how are we going to make this even more powerful
23:35 - yeah, thanks, yeah thank you and
23:41 - Yep but have you changing it because it's a bit bad that we always use strings in the?
23:48 - Long method names and just weird and the most the biggest
23:53 - Problem is its unperformed to use strings and it's not monomorphic and so, we are changing it and to a
24:01 - new, syntax and
24:03 - But it's transparent for the user if you don't only, use their packets you don't see it yes
24:10 - But the new, some text like, this and or?
24:13 - More fake, books and better performance then people can get typings, well yeah yeah yeah you can even get type analysis, why
24:20 - You read a plug-in
24:21 - Quite a plugin you can see all the plug-in, hoops, we have this typing's that somebody really create
24:28 - Hopefully it mean of yes i spent a little bit of time on the plane but it was kind of difficult so yeah okay, okay?
24:36 - We editing a, new, feature which?
24:40 - basically currently
24:42 - We have the one time always in the first, chunk and it's
24:45 - It m2 lot other chunks you have to have the one time in suppose
24:51 - And this is a bit unclear because you can't use i think script x because?
24:56 - Order is important you have to lots of one time first and then the
25:00 - Spirit chunks and so we're changing this to a pattern which is also used by some
25:07 - Other things, which is we create a, okay?
25:11 - And push to the array so it's order and dependent and you can use a singh script x which have a lot of benefits
25:18 - Yes example if you have the main or the vendor. Chunk cached or the comments on cached and
25:24 - Other chunks not then it can, be related, before other things and it's not
25:29 - Help, don't have to wait for the m so it chunks defined before i'm says, how
25:34 - Do you, make html i think you're good examples like i've seen, people try and do multiple commons
25:39 - Chunks, but that can create dependent
25:42 - Chunk, dependencies and sometimes the order can, be not as expected, but, this solves that problem, yeah, okay?
25:51 - yeah
25:52 - so and we also adding very big change
25:56 - is that we allow other module types and javascript so, we want to have native support for
26:02 - Webassembly, example and we also, add with the same pattern and native support for css
26:09 - Because it's currently css is a bit of a. Heck with extract explained extremely really big
26:17 - So you get native css. Support, which means, also that you get and?
26:23 - Separate css, file by default and all the fancy stuff in
26:29 - separate css, files and you, don't know long i have
26:32 - Injected the css. Code into the
26:35 - Script bundle and you don't have to double
26:38 - Pass it so that's better and webassembly school so you'd say so now that you kind of understand how
26:44 - Web pack works under the hood, we can kind of explain what this
26:47 - Means so when you saw our template our module factories our runtime our parser it's all centric around?
26:55 - Javascript, and that's it and so
26:57 - for the work that we're gonna have to do is
27:00 - Put an abstraction layer it's ok, you can go all the way, back there friend, yeah, like even the templates it doesn't matter but
27:09 - essentially what this will do we now can have the opportunity to put an abstraction layer on it and
27:15 - Make x as a first class citizen and so you might see, new
27:19 - Wasum templates ym runtimes a wise em resolver a wizened parser and so
27:25 - We want to be able to provide and create the same opportunities like code splitting
27:31 - Scope poisoning, and everything, that's possible for azzam and javascript and css or even html modules in the future
27:39 - Who's that with this
27:44 - yep
27:46 - Ok, and oh yeah?
27:48 - this
Example for the vaasam stuff is very cool so - you can just import
27:54 - Synchronously import embossing module and repect
27:57 - Take care of the a synchronous compiling and loading of the bottom part it basically hoisted to the
28:03 - next
28:05 - Chunk, loading so if you load a. Chunk, which contains vassal modules it will
28:10 - Launch a chunk in parallel to compiling and annoying the awesome stuff in it yeah so, why, yeah the and i always, ask
28:18 - Why, can't we just use waze i'm rust
28:23 - C++ just like a javascript module and so that was our goal
28:27 - and you know of course, we were awarded a grant for
28:31 - $125,000 by mozilla to implement this work, so we're super excited to get this out to you guys, and we're working with teams like v8
28:39 - chakra, core
28:41 - To, be able to ensure that these, llvm tool, chains are nice and fast and work really, well with webpack to allow
28:47 - You to do things like this
28:50 - But it's a long, way and yes we probably take a, year to have
28:54 - Good, support for native languages the co-pilot infrastructure need to be adjusted and laura's for west and c++
29:02 - So it's taken, away, but my pick for we'll start with, basic. Support
29:07 - module yep
29:11 - So and we always seen this in the mainstage and?
29:17 - on us yeah
29:20 - so and you basically get better optimization for
29:24 - Big libraries, which contains many modules like, lodash or
29:29 - Here's example with x so
29:33 - The problem this is pattern and you import, some french a function from lotus
29:39 - But the acma suppt spec says, every side effect in this lodash
29:44 - library must be executed so and
29:47 - Because the other side is a bit
29:49 - wonky
29:52 - It's not the
29:54 - Active i epic isn't sure about is this a side effect or is it just a prototype way a
30:01 - Method to it and it's not used so and
30:06 - With this pattern you currently get big bundles yep because
30:11 - Many, side effects executed and so
30:14 - Epic will introduce a new and package level and flag
30:19 - Which is called side effects falls so we basically opt in to say epic yeah
30:25 - My modules don't have side effects so if you import them and you don't use the exports
30:30 - You can, admit them so and basically pepa classes and if you write something like that
30:36 - it follows we export and
30:39 - Basically rewrite it to own to include only the module which contains the flatten function mm-hmm so that way you know
30:47 - we should see out of the box
30:48 - so we're working with package authors, like lo - and
30:52 - I'm working with teams, who have open, source projects like react fabric ui and microsoft as, well as
30:59 - Rxjs and the angular team to ensure that this can
31:03 - Be something that will be available and possible immediately, when, we release
31:07 - My pack ford so you can, use it
31:08 - We want to ensure that there are huge winds out of the box for you just by updating to web pack for
31:14 - And i believe there's, also probably, going to be a whitelist property - right yeah it's planned
31:19 - Currently it's only supported to have a flat flag for the coil
31:22 - Package, but tip it's plan to have modules specifying something
31:27 - like nice only is this files but not i guess, we
31:32 - Sure and jade jd daltonism is on my team at microsoft and so he's super excited to see this -
31:42 - Yes, also change a bit in the process
31:47 - for the next
31:48 - released
31:50 - Least calidad and a week after that released, sceles and
31:54 - it was
31:56 - unfortunate because
31:59 - They, also complained, about it's too fast now, we can't just keep our can fix our code
32:05 - And so, we give them more time a month between release candidate and released em so
32:12 - Maybe with this release
32:14 - most plugins and loaders are compatible yes yeah absolutely, we
32:20 - We listen to you know anytime that, we try and ship fast you know
32:25 - We we end up hearing from our package authors or dependent authors and so we decide okay
32:30 - Well we'll find out from the ecosystem how
32:33 - We want to release a breaking change and so we typically say two to three months and then we'll give module authors a chance
32:40 - By, having an rc for a. Month so that they can, make sure they can catch up report bugs etc
32:46 - So you should see a benefit for the ecosystem in that when you upgrade to web pack for
32:51 - Even though they're, not my, there may not be that many breaking changes
32:56 - That it you know whatever dependency or if you're writing a package or a
33:00 - Plugin, for it that you can have time to test it before release so
33:04 - Yes, is that the last slide i can't guess so
33:08 - excellent that's
33:10 - Beautiful that's it so yes
33:12 - If you, guys have any questions of course, we can't do q&a now
33:15 - But feel free to stop by either of us and say hi or
33:20 - Anything literally webpack is created, by you so every person here, who came to support us at this stage
33:26 - We thank you so much and so thank you guys
33:42 - It's a chance to answer to give some questions, oh we do have questions awesome one more question yes
33:49 - Okay, so could you please advise how, to dine it oh so i guess if you, do have some questions you can, ask
33:54 - them so how, do you
33:56 - Dynamically include chunks file name if rendering a page via jsx template on server side
34:01 - Do you, want to take their, own yeah you basically need to
34:05 - Take the chasing stats file it's there are, some plugins to write it to a file
34:11 - Epic starts plug-in, also
34:14 - Many, plugins and this file contains all the information about how
34:18 - the structure of the epic panelist and also the chunks file names in
34:24 - Some there's a mapping with, name touch filename and to just read them
34:30 - Wait this file and you get this
34:34 - So hopefully that answers your question
34:37 - wins wins, way back for ready i
34:40 - Mean so, we have tobias always says, when it's done
34:44 - but i think so
34:47 - We still have some things that, we need to finish but, we never give a solid timeline we do promise that, we won't release something?
34:53 - Within two or three months of the previous, major release but if you, want to try it out now
34:59 - That gives you an opportunity to really report bugs, and help us feel good, about, shipping the rc. Faster so if you
35:06 - check out the project on github it's under the next branch right now and so i
35:11 - Tested it you know on the plane and before like the week before
35:14 - And in most of the basic cases it was working pretty, well so yes?
35:20 - you
35:23 - Probably, some beta versions before and so you get the feeling, when it's, near
35:31 - Would you use webpack as a static site generator would you yes i would
35:38 - And why, not there are there are some site generators which use web pick add-ons i don't know. The names
35:47 - Five phenomena gatsby, yeah i know. Knocks jas but that kind of isn't truly static but yeah
35:56 - Can a. Css, file be the entry file
35:59 - It can, be but it's not recommended you basically you shouldn't put the
36:06 - State you shouldn't separate the styling from the javascript stuff you should have an entry point to your application
36:13 - Which is in dependency graph of all your dependency you have a script end styling so you just if you
36:21 - If you, many people just says have an entry for a
36:25 - Yahveh script, and have an entry for styling but this, is kind of an old pattern which?
36:32 - tosca knows but in repick you the idea is to have a complete dependency graph of all styling and
36:41 - script
36:42 - Any early advance for web pack 5, well i mean, we try not to think, about the next version, until we've really been comfortable
36:50 - While shipping what we've set out to for web pack for so i mean
36:54 - So most of the time i mean up until, we started hearing feedback
36:58 - Like guys, don't ship, majors so fast we get scared and so like, okay?
37:04 - So, what we decide is that we'll wait two three months and?
37:08 - What we'll do is any breaking changes that provide performance or any other features will hoist into like
37:14 - We'll just kind of keep it suspended in our github and then those will land into
37:19 - web pack the next, major version whatever it is
37:23 - It's probably, gonna be awesome yes azzam yeah assembly support
37:29 - Very likely that you'll see that in web pack 5
37:33 - Why is module concatenation disabled by default
37:36 - Yeah it's
37:38 - Inverse an experiment and it's basically
37:42 - in experimental state status and we edit it in
37:46 - depok for
37:50 - Anything, so and we can't?
37:52 - It would be a breaking change to enable it by default and then in a, major version but am i planning maybe to
38:00 - Do, some refactoring with
38:02 - Optimization and separation between production and development stuff in the epic form maybe there's a
38:09 - optimization production optimization the development flag
38:12 - Which you can set and then you get always a good stuff for production and all that stuff
38:18 - Yeah, and when you think, about it like it is a production feature only so like
38:22 - Don't use it on your dev server don't use it with, hmr it's broken with, hmr i'm pretty sure
38:28 - yeah
38:30 - I mean like the point is is that, we can't? Assume that you have a production or developing environment, we can't? Assume anything?
38:37 - That's what makes?
38:38 - Web pack so powerful to use is because you have the ability to make it work for your stack
38:43 - So if we were to put that on by default
38:46 - Everybody's builds, would be inherently slower
38:48 - at the cost you know for us
38:50 - It's easier for us to have a feature that's available for you to opt in and not make any assumptions
38:57 - What best practices should, we follow? For the best code minification, what plugins how, to import etc
39:03 - That's a good question it's, well?
39:06 - yeah
39:08 - Yeah, a neighbor
39:11 - Module kinnickinnic concatenation a neighbor, and he was?
39:15 - bobby with, module spoils he was code splitting and
39:20 - active file compiler
39:24 - Babel preset emv is also really good advice if you are, using babel because
39:28 - It's going to look, and see what it's basically autoprefixer for your javascript and so you?
39:34 - Pass the browsers that you support if you only support one browser then there may be a
39:39 - Likely, chance that you don't have to minify, or i'm, sorry transpile all of the different syntaxes that you're using so
39:46 - Should an external flag dependency, be a peer dependency or a normal one so
39:52 - Like in externals if they're doing like a library package
39:56 - That doesn't care about this
40:00 - Yeah it depends if you
40:03 - A peer dependency is something you
40:07 - Your library in example if you if you have a plug-in or something, like that for other
40:12 - Project and it's a p depends because you?
40:15 - Want to give the user the opportunity to choose the library and you as a plugin for the library or you can specify
40:21 - Which range as possible
40:24 - Dependencies and you basically get always gets the latest version you are
40:29 - in your, veins yeah is it good to use webpack for node and express my opinion, yes absolutely um
40:37 - One of the things that like
40:38 - We haven't gotten enough like intel on is like when you bundle a node app it's sometimes faster because the
40:45 - module resolution in your noggin, be a little slow so
40:48 - Yeah, and so like when you bundle a node app it's kind of faster and you instantly can use
40:55 - Esm syntax so no dot, mjs know. Any of this crazy, stuff you can, literally just bundle a node app and
41:02 - Anybody, here use hot module replacement for their api's or like, yeah it is a really nice feature super nice you can
41:10 - Literally update your code without having to like close out your server restart it you know
41:16 - Check, the api to see if it works it's just instant when you update your code so yeah can
41:21 - you, give us, some webpack, t-shirts i
41:25 - have a huge
41:33 - So i do have a bunch but they're like
41:34 - Extra large and xxl so i but i do have a bunch back in the hotel room so like throughout
41:40 - The, day you can probably find, me and we can get those for you
41:45 - Yeah, is there any plan to start using typescript or flow for web pack it makes easier for more people to contribute so this part
41:52 - is your opinion only
41:54 - That's your opinion only and so you can't really speak for everybody who's a contributor but
41:59 - Is there a plan so it's really hard, there's like a lot of different reasons that, we don't want to
42:04 - I'll let tobias speak to his i think one it's really
42:08 - It is a complete like we'd have to completely change our architecture and we've never ever in webpack had to have a build
42:15 - Step for our library and so there's a lot of benefits like being able to instantly link or allow
42:21 - People to check out from github, and not have to do any builds up or anything like
42:25 - That or shipping a, disk so and i know you have opinions, like, about the code
42:29 - Style that gets transpiled and things yeah and basically it's if you write a code directly you
42:35 - Basically see what the performance is and if you have a translation?
42:38 - Step you maybe sometimes you don't see always this is very expensive to use and for off loop with the transpire to a
42:46 - Complex pattern you can generate assessing functions or something like, that so this
42:51 - Performance could be performance problems you know, don't see it obviously
42:55 - and we don't want to choose one flow or typescript
43:00 - Yeah it's kind of like a that's kind of a controversial decision for us to like, we we believe that both
43:06 - Systems are great but, we also don't, want to make an opinion on them and
43:10 - You know cause an issue in our ecosystem we care more about that then it comes to the structure and typing's and
43:17 - Really once we have this new plug-in system and we have typing's generated for it?
43:20 - You're!
43:21 - gonna
See a lot especially through like vs code a
43:24 - Considerable amount of type support and intellisense while contributing in our project so it should be a much more elevated experience than
43:31 - what it used to be
43:33 - How much work will be required to update from web pack three to four an existing project, not too bad
43:39 - and
43:40 - So far there are no change bacon changes for the user it's only four plug-ins internal changes and so so if
43:49 - you use
43:51 - upgraded to the new, epic force and it should basically just replace the parent sees and i
43:58 - i guess
44:00 - Currently there's, no big changes the configuration maybe we add some chopped tomatoes we'll find something i'm sure like, there's always sneaking changes
44:11 - but we we have a m for two to three, we have an upgrade guide and we
44:17 - Continue this with an upgrade guide for the user which contains all the changes you need
44:22 - With quotes examples and so yep, oh this is a fun one dll plug-in verse comments. Chunk plug-in, would you recommend
44:32 - We picked this one by the way in case you're curious
44:36 - Would you recommend for codes footing in web pack or?
44:41 - It feels like, three. Questions i'm not sure
44:44 - So i mean both of them do completely separate things, so like dll plug-in if you understand how
44:50 - External works it's basically telling webpack, don't try, and resolve this, file just know
44:56 - That when this code is actually in the runtime or in the browser that this
45:00 - Whatever, is set as your external will be available and so a dll plugin just creates a bundle of these externals so you can link
45:08 - Together with another build
45:10 - Yeah, i guess if you do a vendor chunk
45:15 - They, basically do is the same thing but they, have different benefits and
45:22 - Dl packing is faster
45:25 - But you don't get tree shaking or scope hoisting in the deal
45:30 - But with the comments shanklin to basically say common chunk only contains
45:35 - exports and modules we really use in your application so it's tree-shaking its scope posted and
45:42 - So it's smaller so as
45:45 - yeah it's kind of the trade-off so like i always, tell people, use dll plugin in
45:50 - Development mode because you're avoiding work of bundling time so like your builds, we faster but, don't use it in production you can
45:56 - But those are the trade-offs, that he just gave an example for
46:00 - What are the best practices for using webpack for large code bases how, do you improve build, time, so that's one of the things
46:06 - We mentioned so dll plugin is a great example
46:11 - We actually so like
46:13 - we have an entire
46:15 - Like page that i think you even authored it yourself so if you, go to, web pack touch a set org. Slash
46:21 - Guides you're!
46:22 - gonna
See a build time guide and tobias authored it this is one of the things take a look at your resolve property
46:29 - Like now understanding how, resolvers work you essentially add a lot of extra build time
46:33 - by having really eloquent or complex resolve properties i'm sure you can, give advice is
46:39 - expensive one is laura's
46:42 - So it can optimize server solving this, less extensions, like, less motivated to use and the laura you can
46:49 - Optimize for say there's a cache loader and a sweat laura
46:53 - Bubble has a cache directory flag, which caches
46:56 - results and basically caching it's important in the other side and
47:02 - yeah
47:04 - Yeah, and could you explain the difference between loader we just told you the difference
47:10 - Who didn't know that
47:11 - No, that's, okay, so i'll try and simplify it what's the difference between a loader and a plot yeah, we can
47:17 - We can, toss that if you know. If you're still not comfortable come find, me and i'll spend as much time explaining how. It works
47:25 - Why, don't we do this one i like this one can, we can, we choose or do?
47:29 - We have to do the thumbs up i want to talk about roll-up
47:31 - Okay, yeah, what do you think it's great?
47:32 - About roll-up so for me i love it because it's focused when you have constraints you can focus on doing something really
47:39 - Well and so in this case building bundling the library is great using roll-up you can
47:45 - Give your, comments, yeah it's
47:48 - You don't
47:49 - doesn't include
47:52 - Just scope hoist all the modules and if it works with scope rising it's great and
47:58 - For most libraries you can, use it because you have control over the code, and then it's super
48:04 - Minimum and readable output files and web pack it's more about optimized and
48:10 - Non readable output files and includes one time because the comments a chair, staff and other
48:16 - Non, acma script module stuff so it's basically replicates have to
48:23 - Fulfill a broad of age of dependencies and weird formats and so it's
48:28 - it's optimized
48:30 - yeah, and
48:32 - Like i said, like, high level, like when you can focus on something constraint you can do it really
48:36 - Well and so roll up is really good for bundling libraries and we always recommend it?
48:41 - Thanks for webpack can you talk, about the contributor community thank you for using it i mean
48:46 - we would be nothing without you you are the contributor community
48:50 - Something that, we like to say is like?
48:52 - It was a tweet from somebody you said like stop thinking that
48:55 - You're, just buying our product but you're another member of our you know our community and that's, who that's what
49:01 - We think and so thank you i would, say our contributor community has
49:07 - Exploded in the past like three months we've had people from all over the world
49:13 - Who has contributed to webpack here
49:16 - Like, we even have, people here today thank you so much like, we would not be where?
49:20 - We are today yap let's give them a round of applause, like thank you
49:24 - We would be nothing without you?
49:27 - and
49:28 - Like, we also have guides and things on how to contribute different
49:33 - Ways you can
49:33 - Check out our medium publication
49:36 - under
49:36 - contributors guide
49:37 - And we have it you know i've written a two blog post and i should get the other ones out but on how to contribute?
49:43 - And what things to look for cuz, to us it's you take the things that you love to do
49:48 - You, take, what you're good at and how?
49:50 - You, bring value and then that's your purpose for our project
49:54 - and so
49:55 - We want you to work on things that you love it doesn't have to be code it can be documentation can
49:59 - Be tack writing it could
50:00 - Be focusing just on error messages if you love working on error messages
50:04 - we want you to do it it doesn't matter you could have zero years of experience you could have 20 years of experience
50:10 - You could be a c-sharp, developer, who wrote construction ct
50:13 - Machines for a living until he started doing open, source full-time it doesn't matter so
50:19 - Please please please if you're passionate about webpack or you, want to be involved let us know
50:25 - well webpack be open source always
50:29 - sure yes
50:30 - always, be a part of the chase foundation, and the terms with, chase foundation, make sure that, my pegs will always be
50:39 - always
50:40 - Possible for us to make it yep not even possible
50:45 - Let's how, much time are, we we still have time for quests. Oh okay?
50:50 - Well angular. Cli, work instantly with, white pack for ask the cli team i know i'm on it but, i haven't be as involved
50:58 - Likely, yes it should
51:00 - Will webpack for support m script and generated waze and modules out-of-the-box
51:07 - Like i think they're talking about a, wasum library target?
51:11 - Like a, wasum lib target?
51:15 - Or is it talking about like just a pure wasm module i it's about?
51:21 - The difference between between rossum modules and vaasam mateusz, for m's krypton, because i'm scripting, does some web
51:29 - javascript and
51:31 - Basically it has a full linking, step with
51:36 - Step and oh, yeah, okay, put the whole thing in superman vo more more about em
51:43 - separating each
51:44 - Compilation its each c++
51:46 - File into a russian module and make the dependency graph in bassem and i'm captain basically gives a
51:54 - big big big chunk of
51:57 - Bottom code, which is generated by the whole?
52:00 - Code base so when css, becomes a first class citizen in webpack 4 will webpack dev server ha reload css
52:07 - Files directly instead of a blob url what do you think, case maybe yes
52:12 - So case is actually, also a maintainer of web pack and works on web pack dev server so i pulled, them up
52:19 - Yeah, yeah!
52:22 - You can, make it a yes or no, answer or like, maybe it doesn't matter
52:39 - I think that'd be good i like it yes yes is your answer
52:47 - I'm sorry for pulling you up on the spot but i just want to be want you to be up here
52:52 - Because it's not technically not a perfect, observer by question because so with reloading ones over there how
52:59 - to, do replacement stuff and
53:03 - It's not yes
53:12 - yes exactly
53:14 - So using resolver for paths ide doesn't see them could, we expect to plug-in for it yeah you just learned how. To make a plug-in
53:25 - Okay, so you can reach out to us if you
53:28 - Want advice or ideas or how-to or maybe if your v s code user like myself
53:33 - We would love a resolver language service how. Cool, would that be
53:37 - Do resolve alias to slow, down the build, is there an optimal amount
53:42 - To, use and be fine there isn't i mean don't use as many but i would say
53:49 - What do you think the least slow resolve configuration is alias?
53:57 - only does
53:58 - Stream compare and then it's basically it doesn't introduce extra io
54:04 - Build, so that's a
54:08 - The most performant option you can
54:10 - Use but i guess i was a backhoe pod about somebody made ten thousand alias configurations and it's, oh?
54:19 - my, gosh
54:21 - Yeah, so don't do that that's not even practical
54:24 - Okay, so is what pack for gonna support basic. Stuff for web assembly or are you, going to be adding advanced extra features as, well
54:32 - Yeah, we want to add extra features but and epic for focus on the basic features because, we want to get something out?
54:41 - It's basic rossum support to see how. The
54:45 - crowd reacts, and
54:47 - Yeah, like how, it worried like does it work and how
54:49 - Well does it work is it successful so thank you guys for all these are tough, some really cool, questions those are really cool
54:56 - Like service so awesome thank you guys so much you can find us afterwards
55:11 - you

Cleaned transcript:

you All right so who here has heard about webpack i Hope so that's, why, you're here right okay, so yes my name is shawn Larkin i'm a program manager for microsoft in their, web platform and I work on edge dev tools but aside From that i'm one of the maintainer of web pack i kind of fall in line with the developer advocate kind of role But then i've, also done some work on the angular core team, who here uses angular. Angular. Okay, yes nothing wrong with that There isn't and Just a general kind of evangelist for opensource sustainability a Little bit about, myself, so i'm kind of a former tech support rep Gone rogue i got tired of not being able to solve people's problems And so i look kind of learned to applescript whoever has written an apple script before yeah, like that Was my first programming language and then i did a little bit of objectivec swift Javascript and i do like woodworking chicken farming internet of things So, yes like i said sustainable opensource practices I've been trying to be involved with Encouraging others to be involved with opensource and how can you grow. Your organization how can you grow your community how can you make it rich and thriving so you can find me at the lark in So feel free you know you can take a look, and see Me at any of these places online Yeah, hi, my name is tobias. Copass, and i'm the founder of epic and maintainer and part of the core team and yeah and go, ahead, and yeah currently i'm doing fulltime open source, web development and next Yeah, you just tell, me what i'll do it No, it won't work, from this far there we go cool, and my background is a little bit, weird for a. javascript, developer i'm started with c sharp c++ c development and Did javascript as a hobby, and yeah so i came to make But i've never done a real, web application so far Never made a real, web application what Yeah, you, also find me on github and on twitter because sokra i did a w it's cool, why not okay so yes We're, gonna talk about a lot of things today i mean and a lot of it is gonna be about, web pack of course Hold on so on a side note tobias When you wrote, web pack it was for not four years thesis right it was for the web project That your thesis, was for i did a. Web project in my thesis, oh and but it's small one? Okay, and yeah that's i? Need of epic module bandar and it started with a pull request on and to another project yep, make and But it was rejected to prove request so Because it was a complete rewrote of the language and so i published as Another name modules web pack yeah and it was renamed to epic yes So, wasn't even forest thesis project. Just shutting, some light there so yes but we're Gonna, talk about not only, how Web pack works under the hood i'm gonna kind of get so who here has like never actually configured their Web pack before, we love create react app, we love everything that you know We we like being able to write code when, we need to there are, some people out there Who love configuring or you know, have very unique kind of scenarios and that's why, web pack exists so we're Also, going to talk, about just the high level understanding how, web pack works from the user interface and then we're Gonna, talk about how. It works under the hood, and what, we have coming for you for web pack for so Who knows, what a javascript module is? Yeah, okay, cool, yep sure why, do we like them, because they're reusable They're, encapsulated Organized for the most part i mean unless you have like a redux and reactants, like, everything's like spread out everywhere they're, convenient But, what do they look, like well you have common jas If you're, just familiar with it just raise. Your hand when you see the module type that you you've used before common jas yes amd yeah Mg, plus common jas i will, be wow i've never seen, this before until like i made this slide and then We have typescript or equus script module syntax pretty similar pretty similar should i shake the dongle so it there we go? Excellent luckily beyond it and issue a free stage, yeah we're on the issue free stage, yeah, yeah submit an Issue okay, we'll get back to you So how, do they work in the browser Well they don't really or if they do not very, well or not very fast maybe soon and Every library is different like Wouldn't it you know if you go and mpm installer look at. Your package saw. Json Every single library might ship a different format of these modules and It's up to them and this is just javascript that we're talking about It's not even talking, about other things, like, styles assets images png etc. So wouldn't it be nice if it all just worked together seamlessly And sweat pack that, is what wet vac is? so You all know, wet pack is module bundler but i like reinforcing the idea? What does this mean it lets? You, write modules that work in the browser that simple, was that probably the, main premise tobias you'd say, like that was the point This, was a point but, also code splitting, was my intention that's right Code splitting that's right that's right from modules, web make And if you wanted to know About that story check out or read me at the bottom of the readme so Just, gonna, blaze through kind of the since most people understand how, to use it so, we have our config We have a. Cli, which literally uses the node api behind the scenes and Then, we have the node api itself and? So this is the core, concepts i'm just so that you can understand before, we dive under the hood, how It works kind of on top of the hood So, we have our entry point? let's say given you have a module And it relies on you know. Another component and then that component probably relies on a couple more components You know you're importing and requiring them whatever syntax but that one has a dependency it's a common jeaious library let's say and But wait it, also it's like, bootstrap or something else they have, style dependencies in one way or another That is our entry that is the entry point when, we talk about entry and webpack the root of that graph Is what we're referring to and so it is the first Javascript in your project to kick off your application so You can kind of see here when you define your entry point, web pack literally says how, ok let's start at This, this, file will resolve it and then we're. Gonna trace through here and go through, each of these pieces to make sure So we're basically telling What to load for the browser and it works with the output property of course so output, that's another core concept So you can think, about it exactly, what its purpose, is by defining specific Properties like a path and a filename we're telling webpack how, to handle these files So in this case we've created a, bundle output it to a folder and There's way, more properties that you can define an output but, that's the highlevel idea it's treatment of the dependency graph when it is created So loaders this is like one of my favorite part, like, good idea loaders were a great idea to us so Not every dependency is gonna just be javascript but, we want to explicitly tie them together so? Loaders allow you to tell, web pack how, to treat non javascript after it's been resolved so Let's say you have a type script file or javascript that doesn't really the syntax doesn't make sense or it's newer Yes it's something that's not supported. By our traditional parser or let's say it's css or style So you can kind of imagine in that same diagram that We use that it is tracing through these dependencies and before we add it to the graph These functional transforms are converting this into a javascript module in some representation And there's all sorts of flexibility behind it we can filter through, them, like, how Many, no commonly you know a good practice or something, we see a lot in the react community Is that you ignore your no modules or exclude them, who has seen that before probably Good share hands yep So lots of different options to filter through and it's incredibly flexible so much that you can even chain it together So let's say if you, have something like less, well The traditional idea or foundation, is that you want to have a Loader that performs one operation so one transform and then you can, chain them together So if you have a, less file, you'll, see here it converts it to a Style dot css Converts it to like an array in memory of the style and that pretty much what it is like an array and then Then, we get this javascript module called inline that style into the browser with, style tags Best way to say it but There's literally a million different options that are out there in our ecosystem and this is my favorite part because a Loader is just a function that takes a source and returns a, new, source it's so easy to create and publish and share And and have this really rich ecosystem that, we have for our project So loaders tell us webpack, how To interpret and translate files especially that aren't javascript and they kind of return compilations they return new sources So plugins who is ever written a custom plugin. Yes like i may be this like first five minutes is too boring for you this, is the anatomy of a plugin so i Like to define it as a class to be as always correct Me and says it's an instance so it's just an object that has an apply method on the prototype chain, and so You can, see here this is the anatomy and so what, we have is that whenever? the whenever this plugin, is registered webpack will call apply plugins and It will pass an instance of itself into This, plugin, so that hooks can. Be hooked into and then functionality performed so in this case this is super simple Whenever the compiler is done or it is failed we're literally, going to write a dinging noise to the terminal So now that you kind of understand it looks like a class it kind of has a constructor how Does it operate so when you use it in your configuration You're, passing a, new reference to it and then that way if you have options let's say, some of the more common. Chunks plugin Let's wiggle it there we go? ship it You can, pass additional arguments options and features To, be a suntech here But did you know that 80% of web pack is made up of its own plugin system did you know that? yes My, gosh this, was my response when i found this out for the first time the blake screen Huh, oh you can hear that was kind of my mind was like, no way, oh? That was a nice image to be as i like that Okay, no worries no worries so We know that essentially plugins? add Additional functionality to web packs event lifecycle and so it gives you the power to do anything that you ever wanted to and So this kind of takes, me to the next part of this talk which is like the? Main guts, so who's feeling kind of comfortable so far You're, like okay, okay shawn, tell me how it really works how, does it work under the hood so the next part of this talk is We're gonna now completely remember everything that i just told you But don't try, to tie it together with, these concepts so We're, gonna talk about how. Web pack works under the hood as an architecture as a system as a bundler But before we begin we're? Gonna talk about something called kappa, bowl, who here knows, what a, bowl is Ok, cool, somebody's writing, some plugins So tappa, bowl is this 200 line Library 235 i think to be exact not anymore but It is the backbone of the web pack plugins, system the whole architecture is based on this library So, what was sean, what does that even mean so? Tappa, bowl, allows you to mix Mix in with an existing class and then it magically is bestowed these Awesome functions, like apply plugins parallel or apply plugins, async or apply plugins And what that does is these are the events that get emitted that plugins are listening to so Who here is ever used nodes event emitter? Ok, tap a pool is very very similar So you can, see here that there is literally an event and then in this case it's because it's an async event We allow, the plugin to perform functionality call a callback and we continue? So here's a super, super, basic. Plugin You, saw it once before of course i like writing them as classes because it makes more sense to me But, we have a constructor, and then the only rule, is that it has to have an apply function or a method or? property on the prototype chain And that way, we had we gain access when, we? Register this plugin to the compiler itself and then, we are going to listen to the event and do something So in the same way, my beautifully drawn slides one we apply and we gain access to the compiler then When webpack runs or when something that uses the system runs it then triggers, these hooks so You, might be like sean, what do you, why? You, keep saying capital instance or you might hear it a Few times all that means is a class or an object that extends tafel or really something that you can. Plug into So, another diagram might be this is very specific to webpack, is that to access the compilation? which is another instance, we have to plug into or tap into the compiler first and Then as you can see here the compilation, also has lots of different plugins that are executing different functionality So we're gonna talk, about what are these seven capital instances so Compiler is the first one it's kind of the i say central dispatch it's kind of like start and stop It really delegates the toplevel events that are happening, when webpack runs or finishes and it's exposed. Via the node api and Then, we have the dependency graph so the compilation There we go i kind of call it's like the brain everything, that's super, juicy, about what webpack does happens inside of the compilation It's created, by the compiler and it contains our dependency graph traversal algorithm, that's such a mouthful basically how, we collect and create the dependency graph And then, we have the resolver so who here is ever used or understands what a resolver is? okay So, don't get like scared, by the name all resolver Does is it resolves it finds things it just finishes so let's say for example When you use a shorthand syntax for a path in node the nodes native resolver Gives you the absolute path and verifies it exists So in the same way here with webpack our? Module factory might be given this partial path to let's say an entry point or a An import statement and then the resolver just says, okay, let me go find out. And make sure it works or it exists Then when it's done it actually will return a lot of extra information like What folder was this file in what's the, absolute path what, was the raw. Request etc And as you can see here it is tappa belanzone Bs basically came up with almost every single plugin that you could think of that you, would need to make this as configurable as possible Okay, so now, we have module factories? So, who here so i know the angular users out. There who's like i know, what a factory is? People know what a factory is all it does is return objects or something and? so in this case, we have a module factory that takes a resolved request, and Then it collects the source for that file now that we know it exists and we know where it is and? It creates a module object out of it wow. Look it's so beautiful and it goes through the factory there and Then, we have the parser? so Who is ever written a parser who knows, what an ast is who's written a babble plugin Okay, so you all in some way have been exposed to an ast So parser parses it will convert Raw source code into, a tree called an ast that can be easily traversed And so what webpack does is we parse the file and then, we extract all of the dependency statements so requires? Imports etc there we go and then, we create, these things called dependencies or dependency objects So if i was to diagram this We take this module object that we've received, and we pass it through our little glasses? That are parsing and then, we add dependencies to our module? And then, we have the template so who here is used a template before in ui you know in your ui code We all know, what the purpose of a template is it's for binding data to your view? Well in this case for webpack we're just binding data to the source code of the code that we're Going to generate or the modules in this case You can kind of think of it like the configuration is our props The dependency graph is our state and? Our template is like the jsx So it creates code that you see in your bundles So if i was going to diagram this if we look here, we? Have a template for every single kind of abstraction so a Chunk, which is just a container to keep reference to our modules in our graph? That is gonna have a template? Our module has a template in each flavor of these dependencies are gonna have templates i just use like handlebars to describe this And then when we call render out pops, what you see in a, web pack like in a bundled file So let's recap what we've just learned So if we started out with the entry we're, gonna read the entry point that We got from the entry property and it's going to go through and verify That it exists so we're going to the resolver and then once we verified we're gonna get this normal module object and? Web pack is gonna, pass that to the parser and if it's not javascript? that's when, we pass loaders against it And if it is javascript we're, gonna collect dependencies and attach them to that module But, we don't know if those dependencies actually exist and so We have to resolve them and this entire cycle repeats until the graph is complete To, be as check, my work does that sound accurate So, yes that is exactly so now? how does this dependency graph get into the browser so i wrote this comic i drew this comic Hi i'm a module i can't, wait to work in the browser, oh? Cool, your jets, we need to get you into shapers You need, to jump in this thing, we call a Chunk, and we need to keep track of you because you were gonna crap ton of plugins at. You, we don't want to lose track all right almost there but, we have a problem those require statements have to go and But the parser gave us, some special instructions called templates and a factory so that we can, replace them Wow i'm finally ready for browser land look at. This thank you So you just learned how, web pack entirely works under the hood entirely entirely so How, do we feel comfortable about this so far yes kind of okay excellent that's good that's more hands that i've seen before excellent so now That i've kind of talked about everything that you know is to know in terms of our architecture i want to give tobias the opportunity Now to talk about what Are we going to do for web pack 4 so you understand how it works you understand the concepts So what are we going to do to, make, like, how are we going to make this even more powerful yeah, thanks, yeah thank you and Yep but have you changing it because it's a bit bad that we always use strings in the? Long method names and just weird and the most the biggest Problem is its unperformed to use strings and it's not monomorphic and so, we are changing it and to a new, syntax and But it's transparent for the user if you don't only, use their packets you don't see it yes But the new, some text like, this and or? More fake, books and better performance then people can get typings, well yeah yeah yeah you can even get type analysis, why You read a plugin Quite a plugin you can see all the plugin, hoops, we have this typing's that somebody really create Hopefully it mean of yes i spent a little bit of time on the plane but it was kind of difficult so yeah okay, okay? We editing a, new, feature which? basically currently We have the one time always in the first, chunk and it's It m2 lot other chunks you have to have the one time in suppose And this is a bit unclear because you can't use i think script x because? Order is important you have to lots of one time first and then the Spirit chunks and so we're changing this to a pattern which is also used by some Other things, which is we create a, okay? And push to the array so it's order and dependent and you can use a singh script x which have a lot of benefits Yes example if you have the main or the vendor. Chunk cached or the comments on cached and Other chunks not then it can, be related, before other things and it's not Help, don't have to wait for the m so it chunks defined before i'm says, how Do you, make html i think you're good examples like i've seen, people try and do multiple commons Chunks, but that can create dependent Chunk, dependencies and sometimes the order can, be not as expected, but, this solves that problem, yeah, okay? yeah so and we also adding very big change is that we allow other module types and javascript so, we want to have native support for Webassembly, example and we also, add with the same pattern and native support for css Because it's currently css is a bit of a. Heck with extract explained extremely really big So you get native css. Support, which means, also that you get and? Separate css, file by default and all the fancy stuff in separate css, files and you, don't know long i have Injected the css. Code into the Script bundle and you don't have to double Pass it so that's better and webassembly school so you'd say so now that you kind of understand how Web pack works under the hood, we can kind of explain what this Means so when you saw our template our module factories our runtime our parser it's all centric around? Javascript, and that's it and so for the work that we're gonna have to do is Put an abstraction layer it's ok, you can go all the way, back there friend, yeah, like even the templates it doesn't matter but essentially what this will do we now can have the opportunity to put an abstraction layer on it and Make x as a first class citizen and so you might see, new Wasum templates ym runtimes a wise em resolver a wizened parser and so We want to be able to provide and create the same opportunities like code splitting Scope poisoning, and everything, that's possible for azzam and javascript and css or even html modules in the future Who's that with this yep Ok, and oh yeah? this Example for the vaasam stuff is very cool so you can just import Synchronously import embossing module and repect Take care of the a synchronous compiling and loading of the bottom part it basically hoisted to the next Chunk, loading so if you load a. Chunk, which contains vassal modules it will Launch a chunk in parallel to compiling and annoying the awesome stuff in it yeah so, why, yeah the and i always, ask Why, can't we just use waze i'm rust C++ just like a javascript module and so that was our goal and you know of course, we were awarded a grant for $125,000 by mozilla to implement this work, so we're super excited to get this out to you guys, and we're working with teams like v8 chakra, core To, be able to ensure that these, llvm tool, chains are nice and fast and work really, well with webpack to allow You to do things like this But it's a long, way and yes we probably take a, year to have Good, support for native languages the copilot infrastructure need to be adjusted and laura's for west and c++ So it's taken, away, but my pick for we'll start with, basic. Support module yep So and we always seen this in the mainstage and? on us yeah so and you basically get better optimization for Big libraries, which contains many modules like, lodash or Here's example with x so The problem this is pattern and you import, some french a function from lotus But the acma suppt spec says, every side effect in this lodash library must be executed so and Because the other side is a bit wonky It's not the Active i epic isn't sure about is this a side effect or is it just a prototype way a Method to it and it's not used so and With this pattern you currently get big bundles yep because Many, side effects executed and so Epic will introduce a new and package level and flag Which is called side effects falls so we basically opt in to say epic yeah My modules don't have side effects so if you import them and you don't use the exports You can, admit them so and basically pepa classes and if you write something like that it follows we export and Basically rewrite it to own to include only the module which contains the flatten function mmhmm so that way you know we should see out of the box so we're working with package authors, like lo and I'm working with teams, who have open, source projects like react fabric ui and microsoft as, well as Rxjs and the angular team to ensure that this can Be something that will be available and possible immediately, when, we release My pack ford so you can, use it We want to ensure that there are huge winds out of the box for you just by updating to web pack for And i believe there's, also probably, going to be a whitelist property right yeah it's planned Currently it's only supported to have a flat flag for the coil Package, but tip it's plan to have modules specifying something like nice only is this files but not i guess, we Sure and jade jd daltonism is on my team at microsoft and so he's super excited to see this Yes, also change a bit in the process for the next released Least calidad and a week after that released, sceles and it was unfortunate because They, also complained, about it's too fast now, we can't just keep our can fix our code And so, we give them more time a month between release candidate and released em so Maybe with this release most plugins and loaders are compatible yes yeah absolutely, we We listen to you know anytime that, we try and ship fast you know We we end up hearing from our package authors or dependent authors and so we decide okay Well we'll find out from the ecosystem how We want to release a breaking change and so we typically say two to three months and then we'll give module authors a chance By, having an rc for a. Month so that they can, make sure they can catch up report bugs etc So you should see a benefit for the ecosystem in that when you upgrade to web pack for Even though they're, not my, there may not be that many breaking changes That it you know whatever dependency or if you're writing a package or a Plugin, for it that you can have time to test it before release so Yes, is that the last slide i can't guess so excellent that's Beautiful that's it so yes If you, guys have any questions of course, we can't do q&a now But feel free to stop by either of us and say hi or Anything literally webpack is created, by you so every person here, who came to support us at this stage We thank you so much and so thank you guys It's a chance to answer to give some questions, oh we do have questions awesome one more question yes Okay, so could you please advise how, to dine it oh so i guess if you, do have some questions you can, ask them so how, do you Dynamically include chunks file name if rendering a page via jsx template on server side Do you, want to take their, own yeah you basically need to Take the chasing stats file it's there are, some plugins to write it to a file Epic starts plugin, also Many, plugins and this file contains all the information about how the structure of the epic panelist and also the chunks file names in Some there's a mapping with, name touch filename and to just read them Wait this file and you get this So hopefully that answers your question wins wins, way back for ready i Mean so, we have tobias always says, when it's done but i think so We still have some things that, we need to finish but, we never give a solid timeline we do promise that, we won't release something? Within two or three months of the previous, major release but if you, want to try it out now That gives you an opportunity to really report bugs, and help us feel good, about, shipping the rc. Faster so if you check out the project on github it's under the next branch right now and so i Tested it you know on the plane and before like the week before And in most of the basic cases it was working pretty, well so yes? you Probably, some beta versions before and so you get the feeling, when it's, near Would you use webpack as a static site generator would you yes i would And why, not there are there are some site generators which use web pick addons i don't know. The names Five phenomena gatsby, yeah i know. Knocks jas but that kind of isn't truly static but yeah Can a. Css, file be the entry file It can, be but it's not recommended you basically you shouldn't put the State you shouldn't separate the styling from the javascript stuff you should have an entry point to your application Which is in dependency graph of all your dependency you have a script end styling so you just if you If you, many people just says have an entry for a Yahveh script, and have an entry for styling but this, is kind of an old pattern which? tosca knows but in repick you the idea is to have a complete dependency graph of all styling and script Any early advance for web pack 5, well i mean, we try not to think, about the next version, until we've really been comfortable While shipping what we've set out to for web pack for so i mean So most of the time i mean up until, we started hearing feedback Like guys, don't ship, majors so fast we get scared and so like, okay? So, what we decide is that we'll wait two three months and? What we'll do is any breaking changes that provide performance or any other features will hoist into like We'll just kind of keep it suspended in our github and then those will land into web pack the next, major version whatever it is It's probably, gonna be awesome yes azzam yeah assembly support Very likely that you'll see that in web pack 5 Why is module concatenation disabled by default Yeah it's Inverse an experiment and it's basically in experimental state status and we edit it in depok for Anything, so and we can't? It would be a breaking change to enable it by default and then in a, major version but am i planning maybe to Do, some refactoring with Optimization and separation between production and development stuff in the epic form maybe there's a optimization production optimization the development flag Which you can set and then you get always a good stuff for production and all that stuff Yeah, and when you think, about it like it is a production feature only so like Don't use it on your dev server don't use it with, hmr it's broken with, hmr i'm pretty sure yeah I mean like the point is is that, we can't? Assume that you have a production or developing environment, we can't? Assume anything? That's what makes? Web pack so powerful to use is because you have the ability to make it work for your stack So if we were to put that on by default Everybody's builds, would be inherently slower at the cost you know for us It's easier for us to have a feature that's available for you to opt in and not make any assumptions What best practices should, we follow? For the best code minification, what plugins how, to import etc That's a good question it's, well? yeah Yeah, a neighbor Module kinnickinnic concatenation a neighbor, and he was? bobby with, module spoils he was code splitting and active file compiler Babel preset emv is also really good advice if you are, using babel because It's going to look, and see what it's basically autoprefixer for your javascript and so you? Pass the browsers that you support if you only support one browser then there may be a Likely, chance that you don't have to minify, or i'm, sorry transpile all of the different syntaxes that you're using so Should an external flag dependency, be a peer dependency or a normal one so Like in externals if they're doing like a library package That doesn't care about this Yeah it depends if you A peer dependency is something you Your library in example if you if you have a plugin or something, like that for other Project and it's a p depends because you? Want to give the user the opportunity to choose the library and you as a plugin for the library or you can specify Which range as possible Dependencies and you basically get always gets the latest version you are in your, veins yeah is it good to use webpack for node and express my opinion, yes absolutely um One of the things that like We haven't gotten enough like intel on is like when you bundle a node app it's sometimes faster because the module resolution in your noggin, be a little slow so Yeah, and so like when you bundle a node app it's kind of faster and you instantly can use Esm syntax so no dot, mjs know. Any of this crazy, stuff you can, literally just bundle a node app and Anybody, here use hot module replacement for their api's or like, yeah it is a really nice feature super nice you can Literally update your code without having to like close out your server restart it you know Check, the api to see if it works it's just instant when you update your code so yeah can you, give us, some webpack, tshirts i have a huge So i do have a bunch but they're like Extra large and xxl so i but i do have a bunch back in the hotel room so like throughout The, day you can probably find, me and we can get those for you Yeah, is there any plan to start using typescript or flow for web pack it makes easier for more people to contribute so this part is your opinion only That's your opinion only and so you can't really speak for everybody who's a contributor but Is there a plan so it's really hard, there's like a lot of different reasons that, we don't want to I'll let tobias speak to his i think one it's really It is a complete like we'd have to completely change our architecture and we've never ever in webpack had to have a build Step for our library and so there's a lot of benefits like being able to instantly link or allow People to check out from github, and not have to do any builds up or anything like That or shipping a, disk so and i know you have opinions, like, about the code Style that gets transpiled and things yeah and basically it's if you write a code directly you Basically see what the performance is and if you have a translation? Step you maybe sometimes you don't see always this is very expensive to use and for off loop with the transpire to a Complex pattern you can generate assessing functions or something like, that so this Performance could be performance problems you know, don't see it obviously and we don't want to choose one flow or typescript Yeah it's kind of like a that's kind of a controversial decision for us to like, we we believe that both Systems are great but, we also don't, want to make an opinion on them and You know cause an issue in our ecosystem we care more about that then it comes to the structure and typing's and Really once we have this new plugin system and we have typing's generated for it? You're! gonna See a lot especially through like vs code a Considerable amount of type support and intellisense while contributing in our project so it should be a much more elevated experience than what it used to be How much work will be required to update from web pack three to four an existing project, not too bad and So far there are no change bacon changes for the user it's only four plugins internal changes and so so if you use upgraded to the new, epic force and it should basically just replace the parent sees and i i guess Currently there's, no big changes the configuration maybe we add some chopped tomatoes we'll find something i'm sure like, there's always sneaking changes but we we have a m for two to three, we have an upgrade guide and we Continue this with an upgrade guide for the user which contains all the changes you need With quotes examples and so yep, oh this is a fun one dll plugin verse comments. Chunk plugin, would you recommend We picked this one by the way in case you're curious Would you recommend for codes footing in web pack or? It feels like, three. Questions i'm not sure So i mean both of them do completely separate things, so like dll plugin if you understand how External works it's basically telling webpack, don't try, and resolve this, file just know That when this code is actually in the runtime or in the browser that this Whatever, is set as your external will be available and so a dll plugin just creates a bundle of these externals so you can link Together with another build Yeah, i guess if you do a vendor chunk They, basically do is the same thing but they, have different benefits and Dl packing is faster But you don't get tree shaking or scope hoisting in the deal But with the comments shanklin to basically say common chunk only contains exports and modules we really use in your application so it's treeshaking its scope posted and So it's smaller so as yeah it's kind of the tradeoff so like i always, tell people, use dll plugin in Development mode because you're avoiding work of bundling time so like your builds, we faster but, don't use it in production you can But those are the tradeoffs, that he just gave an example for What are the best practices for using webpack for large code bases how, do you improve build, time, so that's one of the things We mentioned so dll plugin is a great example We actually so like we have an entire Like page that i think you even authored it yourself so if you, go to, web pack touch a set org. Slash Guides you're! gonna See a build time guide and tobias authored it this is one of the things take a look at your resolve property Like now understanding how, resolvers work you essentially add a lot of extra build time by having really eloquent or complex resolve properties i'm sure you can, give advice is expensive one is laura's So it can optimize server solving this, less extensions, like, less motivated to use and the laura you can Optimize for say there's a cache loader and a sweat laura Bubble has a cache directory flag, which caches results and basically caching it's important in the other side and yeah Yeah, and could you explain the difference between loader we just told you the difference Who didn't know that No, that's, okay, so i'll try and simplify it what's the difference between a loader and a plot yeah, we can We can, toss that if you know. If you're still not comfortable come find, me and i'll spend as much time explaining how. It works Why, don't we do this one i like this one can, we can, we choose or do? We have to do the thumbs up i want to talk about rollup Okay, yeah, what do you think it's great? About rollup so for me i love it because it's focused when you have constraints you can focus on doing something really Well and so in this case building bundling the library is great using rollup you can Give your, comments, yeah it's You don't doesn't include Just scope hoist all the modules and if it works with scope rising it's great and For most libraries you can, use it because you have control over the code, and then it's super Minimum and readable output files and web pack it's more about optimized and Non readable output files and includes one time because the comments a chair, staff and other Non, acma script module stuff so it's basically replicates have to Fulfill a broad of age of dependencies and weird formats and so it's it's optimized yeah, and Like i said, like, high level, like when you can focus on something constraint you can do it really Well and so roll up is really good for bundling libraries and we always recommend it? Thanks for webpack can you talk, about the contributor community thank you for using it i mean we would be nothing without you you are the contributor community Something that, we like to say is like? It was a tweet from somebody you said like stop thinking that You're, just buying our product but you're another member of our you know our community and that's, who that's what We think and so thank you i would, say our contributor community has Exploded in the past like three months we've had people from all over the world Who has contributed to webpack here Like, we even have, people here today thank you so much like, we would not be where? We are today yap let's give them a round of applause, like thank you We would be nothing without you? and Like, we also have guides and things on how to contribute different Ways you can Check out our medium publication under contributors guide And we have it you know i've written a two blog post and i should get the other ones out but on how to contribute? And what things to look for cuz, to us it's you take the things that you love to do You, take, what you're good at and how? You, bring value and then that's your purpose for our project and so We want you to work on things that you love it doesn't have to be code it can be documentation can Be tack writing it could Be focusing just on error messages if you love working on error messages we want you to do it it doesn't matter you could have zero years of experience you could have 20 years of experience You could be a csharp, developer, who wrote construction ct Machines for a living until he started doing open, source fulltime it doesn't matter so Please please please if you're passionate about webpack or you, want to be involved let us know well webpack be open source always sure yes always, be a part of the chase foundation, and the terms with, chase foundation, make sure that, my pegs will always be always Possible for us to make it yep not even possible Let's how, much time are, we we still have time for quests. Oh okay? Well angular. Cli, work instantly with, white pack for ask the cli team i know i'm on it but, i haven't be as involved Likely, yes it should Will webpack for support m script and generated waze and modules outofthebox Like i think they're talking about a, wasum library target? Like a, wasum lib target? Or is it talking about like just a pure wasm module i it's about? The difference between between rossum modules and vaasam mateusz, for m's krypton, because i'm scripting, does some web javascript and Basically it has a full linking, step with Step and oh, yeah, okay, put the whole thing in superman vo more more about em separating each Compilation its each c++ File into a russian module and make the dependency graph in bassem and i'm captain basically gives a big big big chunk of Bottom code, which is generated by the whole? Code base so when css, becomes a first class citizen in webpack 4 will webpack dev server ha reload css Files directly instead of a blob url what do you think, case maybe yes So case is actually, also a maintainer of web pack and works on web pack dev server so i pulled, them up Yeah, yeah! You can, make it a yes or no, answer or like, maybe it doesn't matter I think that'd be good i like it yes yes is your answer I'm sorry for pulling you up on the spot but i just want to be want you to be up here Because it's not technically not a perfect, observer by question because so with reloading ones over there how to, do replacement stuff and It's not yes yes exactly So using resolver for paths ide doesn't see them could, we expect to plugin for it yeah you just learned how. To make a plugin Okay, so you can reach out to us if you Want advice or ideas or howto or maybe if your v s code user like myself We would love a resolver language service how. Cool, would that be Do resolve alias to slow, down the build, is there an optimal amount To, use and be fine there isn't i mean don't use as many but i would say What do you think the least slow resolve configuration is alias? only does Stream compare and then it's basically it doesn't introduce extra io Build, so that's a The most performant option you can Use but i guess i was a backhoe pod about somebody made ten thousand alias configurations and it's, oh? my, gosh Yeah, so don't do that that's not even practical Okay, so is what pack for gonna support basic. Stuff for web assembly or are you, going to be adding advanced extra features as, well Yeah, we want to add extra features but and epic for focus on the basic features because, we want to get something out? It's basic rossum support to see how. The crowd reacts, and Yeah, like how, it worried like does it work and how Well does it work is it successful so thank you guys for all these are tough, some really cool, questions those are really cool Like service so awesome thank you guys so much you can find us afterwards you
