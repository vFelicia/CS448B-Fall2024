With timestamps:

00:00 - a linked list is a common data structure
00:02 - where elements are stored in a node
00:05 - the node contains two key pieces of
00:07 - information the element itself and the
00:09 - reference to the next node so in this
00:12 - example the element here would be one
00:14 - and then here's the reference to the
00:16 - next note this arrow is pointing to the
00:17 - 2. this 2 is the element we're storing
00:20 - the information 2 and the way this
00:22 - length linking to the next node
00:25 - like arrays linked lists can be used to
00:27 - implement many other data structures
00:29 - linked lists have some advantages and
00:32 - disadvantages when compared to arrays
00:34 - traditionally arrays are just have a
00:36 - fixed size
00:37 - and linked lists have dynamic size so
00:40 - you can just keep adding links and you
00:42 - don't have to do anything differently
00:44 - javascript kind of hides some of this
00:45 - but when you create an array it can only
00:47 - be a fixed size also arrays have pretty
00:50 - inefficient insertions and deletions
00:52 - while linked lists are very efficient
00:53 - insertions and deletions a benefit to
00:56 - arrays are the random access which means
00:58 - you can say you want something at index
01:00 - five and you can instantly get the thing
01:02 - at index five however with linked list
01:05 - if you want something at index five you
01:06 - have to go through every element in the
01:08 - linked list to get to index five and
01:11 - then for raise they may result in much
01:13 - memory waste to make up for the fact
01:15 - that arrays can only only be made at a
01:17 - fixed size sometimes they will be
01:19 - created a lot bigger than what you
01:20 - really need to make sure you have enough
01:22 - room for everything however in a linked
01:24 - list because of the dynamic size there
01:27 - is no wasted memory and then we have
01:29 - really fast sequential access for raise
01:31 - and slow for linked lists
01:34 - so every linked list is going to have a
01:36 - head so we have this head pointer here
01:38 - that points to the the first node and
01:40 - then it's also going to have a size so
01:43 - that's just the amount of node so in
01:46 - this example here the size will be three
01:48 - and you can see each node points to the
01:49 - next node in the last node just points
01:51 - to null
01:52 - because there's no next node so if you
01:55 - look at the code over here we start with
01:57 - the head of null because we don't have a
01:59 - head yet and the length is going to be
02:01 - zero and the linked list is made up of
02:03 - nodes so here's how we're going to
02:05 - create a node we pass in an element and
02:08 - this dot element is set to element this
02:10 - dot next is set to null so this dot
02:13 - element in the picture is the info
02:15 - and this dot next in the picture is the
02:18 - link so it starts off just like the last
02:21 - element where the link is pointing to
02:22 - null next is point to null
02:25 - then we just have a few simple functions
02:27 - this.size just returns the length
02:30 - and this dot head just returns the head
02:34 - and here is the add function whatever
02:36 - you're going to pass into the linked
02:37 - list
02:38 - is going to be the element so you're
02:40 - going to add the element and then we're
02:42 - going to create a new node
02:44 - with that element so after you pass in
02:47 - the element and it creates this new node
02:50 - the element of the node is set to the
02:52 - element you passed in but the next of
02:54 - the node is set to null
02:57 - so if head equals null that means there
02:59 - are no nodes in the linked list yet so
03:02 - we just set the head to equal the node
03:04 - and at that point there would just be
03:06 - one node in the linked list and the head
03:08 - would be pointing that first node
03:10 - else that means there's more than one
03:12 - element in the list we're gonna set the
03:14 - current node to equal the head and let's
03:16 - add a var in front of here
03:19 - so this just means that we're going to
03:20 - start at the the head node which you
03:23 - always have to do whenever you're doing
03:24 - anything to a linked list you start the
03:26 - beginning and then you can go through
03:28 - each item in the list while
03:30 - currentnode.next that means
03:33 - while there is a current.next while
03:35 - currentnode.next does not equal null you
03:38 - can see at the end remember the link
03:40 - equals currentnode.next so at the end it
03:43 - equals null
03:44 - so before the end of the list
03:47 - the current node.next which would be the
03:49 - link does not equal null it equals the
03:51 - next node so this just means while there
03:54 - is a next node current node equals
03:57 - currentnode.next so that's just a way to
04:00 - hop from node to node on the list
04:03 - once there is no current node.next that
04:06 - means we're at the end of the list the
04:08 - end of the list is where we want to add
04:10 - the element that we're adding now we'll
04:12 - set currentnode.next to equal
04:15 - the node once we get to the last node in
04:18 - the list we'll set the current node.next
04:21 - or this link to equal the new node we
04:23 - added instead of null
04:25 - and we just increment the length
04:28 - the remove method takes an element and
04:30 - searches the linked list to find and
04:32 - remove the node containing that element
04:34 - so you're passing the element that you
04:36 - want to remove
04:37 - and we always start at the head current
04:40 - node equals head and then we also need
04:42 - to know the previous node when you're
04:44 - going to remove something so if the
04:46 - current node.element equals element
04:49 - if currentnode.element equals element
04:52 - well that just means that the head node
04:54 - is the element we're trying to remove so
04:56 - if we're trying to remove the head node
04:59 - we just have to set the head to current
05:01 - node.next so the head pointer will be
05:04 - pointing to the next node if the head
05:06 - node is not the node we're looking for
05:08 - we go to the else so else
05:10 - while current node.element does not
05:12 - equal element basically while the node
05:15 - we're on does not equal the node we're
05:17 - searching for
05:18 - previous node is going to equal the
05:20 - current node like i said we have to keep
05:22 - track of the previous node and then the
05:24 - current node is going to equal current
05:26 - node.next which just means we're going
05:28 - to keep going through this while loop
05:29 - and keep jumping to the next node on the
05:32 - list until we find the node we're
05:34 - looking for
05:35 - let's let's say it's the second note on
05:37 - this example here we're going to set
05:39 - previous node.next to equal current
05:41 - node.next
05:43 - if we're trying to remove this second
05:44 - node we're going to set
05:47 - previousnode.next so the previous
05:49 - node.next would he be the first node so
05:51 - that'll be the link the link is now
05:53 - going to not point to
05:55 - the current node the link is going to
05:58 - point to the current node.next we would
06:00 - skip over that node and point to the
06:03 - current node.next right here and that's
06:04 - how a node would be deleted from the
06:06 - linked list and then we just decrement
06:08 - the link
06:10 - now here's another quick function it's
06:12 - empty return length equals equals equals
06:15 - zero so if the length equals zero we're
06:17 - going to return true if it doesn't equal
06:18 - zero we're going to return false and you
06:20 - may want to know the index of a specific
06:22 - element so we're just going to have to
06:23 - hop from node to node until we find that
06:25 - element and then return that index so
06:27 - the current node is going to equal head
06:29 - start at the beginning index is going to
06:30 - start at negative 1
06:32 - and so while current node that means
06:34 - while there is a current node
06:36 - while it's not null we're going to
06:38 - increment the index so at this point if
06:40 - we start at the beginning we've
06:42 - incremented the index so where the index
06:43 - is now is zero
06:45 - so if current node that element equals
06:47 - element
06:48 - return index so if the first element
06:51 - which would be this info equals what we
06:54 - passed in up here
06:55 - we're going to return the index so if
06:57 - instead of the head node we're going to
06:58 - return the index 0. if not current node
07:01 - equals currentnode.next and we're going
07:03 - to continue doing this while loop and
07:04 - just hop from node to node and then then
07:07 - we're going to eventually be able to
07:08 - return the index as we keep adding
07:11 - one to the index for every time we do
07:12 - the while loop and if we go through the
07:14 - whole while loop and don't find anything
07:17 - we're going to return negative 1. that
07:18 - just means the element is not in the
07:20 - linked list
07:21 - so we just found the index of an element
07:24 - now we're going to find the element at
07:25 - an index that's just the opposite you're
07:27 - passing an index number and you're going
07:30 - to return the element
07:32 - so we have current node equals head
07:34 - count equals zero and here's the while
07:36 - loop here while count is less than index
07:39 - that means we haven't gotten to the
07:41 - index we're searching for increment
07:43 - count and current node equals current
07:45 - node.next so that means we hop to the
07:47 - next node so we're going to keep going
07:49 - through every node in the list until
07:52 - count is not less than index that means
07:54 - count equals index so we've reached the
07:56 - right index so we can just return
07:59 - current node dot element
08:02 - now in it you're going to pass in the
08:04 - index and the element and add remember
08:07 - you always add to the end of the linked
08:09 - list but in add at you can add in the
08:11 - middle of the list so just like add
08:13 - we're going to create a new node with
08:15 - the element we pass in and the current
08:17 - node is going to equal head we always
08:18 - start at the beginning we need to keep
08:19 - track of the previous node and the
08:21 - current index is going to equal 0. so if
08:24 - index is more than length that means
08:26 - we've passed an index that's way bigger
08:28 - than the actual length of the linked
08:30 - list so we cannot add at that index when
08:33 - we return false if index equals zero
08:36 - that means we're trying to add the
08:37 - element to the head node so we'll set
08:39 - node.next or node is a node that we just
08:42 - passed in so the next element is now
08:44 - going to be the current node which would
08:46 - be the current head node and then we
08:49 - just set the head to equal the node that
08:51 - we passed in else we don't want the
08:54 - index to be the head node while current
08:57 - index is less than index we're going to
08:59 - go through each index until we find the
09:02 - correct index so current index increment
09:05 - we're going to set the previous node to
09:06 - equal the current node so we want to
09:07 - keep track of the previous node the
09:10 - current node is going to equal
09:11 - currentnode.next we're going to keep
09:13 - going through this while loop until we
09:14 - find the correct node so if we want to
09:16 - add a node
09:18 - as index 1 or the second node in the
09:21 - list once we get to that index we're
09:24 - going to set node.next equal to current
09:26 - node so our node.next is the node we
09:28 - passed in and we're going to set that to
09:31 - equal the current node which would be
09:33 - this index right here
09:34 - then we have to set previous node.next
09:37 - to equal the node that we're passing in
09:38 - and then we just increment the length
09:41 - and the last function i'm going to talk
09:43 - about is remove it now remove it and add
09:47 - it are very similar a lot of the lines
09:50 - are the same except we're not gonna
09:52 - create a new node the current node's
09:54 - gonna be the head we need a previous
09:55 - node the current index is gonna be zero
09:58 - here is a slightly different thing if
10:00 - the index is less than zero or if the
10:03 - index is more than or equal to length
10:04 - return null so we cannot remove a
10:07 - negative index and we cannot remove an
10:09 - index greater than the length of the
10:11 - list if index equals zero we're trying
10:13 - to remove the head node so we just set
10:15 - the head node to equal the current
10:18 - node.next so instead of the head pointer
10:20 - pointing to this node right here that
10:22 - head pointer is going to point to the
10:24 - next node right here else this part is
10:27 - just like the add at we're just going to
10:29 - keep going through each element on the
10:31 - list and once we find the element we
10:32 - want to remove like let's say we're
10:34 - removing this second element at index
10:37 - one we're going to set previousnode.next
10:40 - to equal current node.next we're going
10:42 - to set the previous node.next or this
10:44 - link is going to point to whatever was
10:46 - in the link to the current node or so
10:49 - this link is going to point to now this
10:52 - node right here and we're going to
10:54 - completely take out this one and then
10:56 - we're going to do length minus minus and
10:58 - return the node that we're removing
11:01 - and now we're just going to quickly show
11:02 - an example of using the linked list
11:04 - we're going to call the linked list
11:06 - conga because a linked list is kind of
11:08 - like a conga line and let me bring up
11:10 - the console so we're going to create
11:11 - this new linked list we're going to add
11:13 - some items kitchen puppy dog cat fish
11:16 - we're going to show the size we're going
11:18 - to remove the third item on the list so
11:21 - we'll run that and see we're going to
11:23 - remove cat now let's copy this we're
11:27 - gonna do element at
11:30 - then we'll try index aft and for the
11:32 - element we're gonna put
11:34 - puppy look i mean index of so we remove
11:37 - cat
11:38 - uh now we check the new element three
11:41 - which is going to be fish and the index
11:42 - of puppy is gonna be one uh kitchen
11:45 - would be zero coffee is one and the size
11:48 - is four well that's the linked list
11:50 - thanks for watching my name is beau
11:52 - carnes don't forget to subscribe and
11:54 - remember use your code for good

Cleaned transcript:

a linked list is a common data structure where elements are stored in a node the node contains two key pieces of information the element itself and the reference to the next node so in this example the element here would be one and then here's the reference to the next note this arrow is pointing to the 2. this 2 is the element we're storing the information 2 and the way this length linking to the next node like arrays linked lists can be used to implement many other data structures linked lists have some advantages and disadvantages when compared to arrays traditionally arrays are just have a fixed size and linked lists have dynamic size so you can just keep adding links and you don't have to do anything differently javascript kind of hides some of this but when you create an array it can only be a fixed size also arrays have pretty inefficient insertions and deletions while linked lists are very efficient insertions and deletions a benefit to arrays are the random access which means you can say you want something at index five and you can instantly get the thing at index five however with linked list if you want something at index five you have to go through every element in the linked list to get to index five and then for raise they may result in much memory waste to make up for the fact that arrays can only only be made at a fixed size sometimes they will be created a lot bigger than what you really need to make sure you have enough room for everything however in a linked list because of the dynamic size there is no wasted memory and then we have really fast sequential access for raise and slow for linked lists so every linked list is going to have a head so we have this head pointer here that points to the the first node and then it's also going to have a size so that's just the amount of node so in this example here the size will be three and you can see each node points to the next node in the last node just points to null because there's no next node so if you look at the code over here we start with the head of null because we don't have a head yet and the length is going to be zero and the linked list is made up of nodes so here's how we're going to create a node we pass in an element and this dot element is set to element this dot next is set to null so this dot element in the picture is the info and this dot next in the picture is the link so it starts off just like the last element where the link is pointing to null next is point to null then we just have a few simple functions this.size just returns the length and this dot head just returns the head and here is the add function whatever you're going to pass into the linked list is going to be the element so you're going to add the element and then we're going to create a new node with that element so after you pass in the element and it creates this new node the element of the node is set to the element you passed in but the next of the node is set to null so if head equals null that means there are no nodes in the linked list yet so we just set the head to equal the node and at that point there would just be one node in the linked list and the head would be pointing that first node else that means there's more than one element in the list we're gonna set the current node to equal the head and let's add a var in front of here so this just means that we're going to start at the the head node which you always have to do whenever you're doing anything to a linked list you start the beginning and then you can go through each item in the list while currentnode.next that means while there is a current.next while currentnode.next does not equal null you can see at the end remember the link equals currentnode.next so at the end it equals null so before the end of the list the current node.next which would be the link does not equal null it equals the next node so this just means while there is a next node current node equals currentnode.next so that's just a way to hop from node to node on the list once there is no current node.next that means we're at the end of the list the end of the list is where we want to add the element that we're adding now we'll set currentnode.next to equal the node once we get to the last node in the list we'll set the current node.next or this link to equal the new node we added instead of null and we just increment the length the remove method takes an element and searches the linked list to find and remove the node containing that element so you're passing the element that you want to remove and we always start at the head current node equals head and then we also need to know the previous node when you're going to remove something so if the current node.element equals element if currentnode.element equals element well that just means that the head node is the element we're trying to remove so if we're trying to remove the head node we just have to set the head to current node.next so the head pointer will be pointing to the next node if the head node is not the node we're looking for we go to the else so else while current node.element does not equal element basically while the node we're on does not equal the node we're searching for previous node is going to equal the current node like i said we have to keep track of the previous node and then the current node is going to equal current node.next which just means we're going to keep going through this while loop and keep jumping to the next node on the list until we find the node we're looking for let's let's say it's the second note on this example here we're going to set previous node.next to equal current node.next if we're trying to remove this second node we're going to set previousnode.next so the previous node.next would he be the first node so that'll be the link the link is now going to not point to the current node the link is going to point to the current node.next we would skip over that node and point to the current node.next right here and that's how a node would be deleted from the linked list and then we just decrement the link now here's another quick function it's empty return length equals equals equals zero so if the length equals zero we're going to return true if it doesn't equal zero we're going to return false and you may want to know the index of a specific element so we're just going to have to hop from node to node until we find that element and then return that index so the current node is going to equal head start at the beginning index is going to start at negative 1 and so while current node that means while there is a current node while it's not null we're going to increment the index so at this point if we start at the beginning we've incremented the index so where the index is now is zero so if current node that element equals element return index so if the first element which would be this info equals what we passed in up here we're going to return the index so if instead of the head node we're going to return the index 0. if not current node equals currentnode.next and we're going to continue doing this while loop and just hop from node to node and then then we're going to eventually be able to return the index as we keep adding one to the index for every time we do the while loop and if we go through the whole while loop and don't find anything we're going to return negative 1. that just means the element is not in the linked list so we just found the index of an element now we're going to find the element at an index that's just the opposite you're passing an index number and you're going to return the element so we have current node equals head count equals zero and here's the while loop here while count is less than index that means we haven't gotten to the index we're searching for increment count and current node equals current node.next so that means we hop to the next node so we're going to keep going through every node in the list until count is not less than index that means count equals index so we've reached the right index so we can just return current node dot element now in it you're going to pass in the index and the element and add remember you always add to the end of the linked list but in add at you can add in the middle of the list so just like add we're going to create a new node with the element we pass in and the current node is going to equal head we always start at the beginning we need to keep track of the previous node and the current index is going to equal 0. so if index is more than length that means we've passed an index that's way bigger than the actual length of the linked list so we cannot add at that index when we return false if index equals zero that means we're trying to add the element to the head node so we'll set node.next or node is a node that we just passed in so the next element is now going to be the current node which would be the current head node and then we just set the head to equal the node that we passed in else we don't want the index to be the head node while current index is less than index we're going to go through each index until we find the correct index so current index increment we're going to set the previous node to equal the current node so we want to keep track of the previous node the current node is going to equal currentnode.next we're going to keep going through this while loop until we find the correct node so if we want to add a node as index 1 or the second node in the list once we get to that index we're going to set node.next equal to current node so our node.next is the node we passed in and we're going to set that to equal the current node which would be this index right here then we have to set previous node.next to equal the node that we're passing in and then we just increment the length and the last function i'm going to talk about is remove it now remove it and add it are very similar a lot of the lines are the same except we're not gonna create a new node the current node's gonna be the head we need a previous node the current index is gonna be zero here is a slightly different thing if the index is less than zero or if the index is more than or equal to length return null so we cannot remove a negative index and we cannot remove an index greater than the length of the list if index equals zero we're trying to remove the head node so we just set the head node to equal the current node.next so instead of the head pointer pointing to this node right here that head pointer is going to point to the next node right here else this part is just like the add at we're just going to keep going through each element on the list and once we find the element we want to remove like let's say we're removing this second element at index one we're going to set previousnode.next to equal current node.next we're going to set the previous node.next or this link is going to point to whatever was in the link to the current node or so this link is going to point to now this node right here and we're going to completely take out this one and then we're going to do length minus minus and return the node that we're removing and now we're just going to quickly show an example of using the linked list we're going to call the linked list conga because a linked list is kind of like a conga line and let me bring up the console so we're going to create this new linked list we're going to add some items kitchen puppy dog cat fish we're going to show the size we're going to remove the third item on the list so we'll run that and see we're going to remove cat now let's copy this we're gonna do element at then we'll try index aft and for the element we're gonna put puppy look i mean index of so we remove cat uh now we check the new element three which is going to be fish and the index of puppy is gonna be one uh kitchen would be zero coffee is one and the size is four well that's the linked list thanks for watching my name is beau carnes don't forget to subscribe and remember use your code for good
