With timestamps:

00:00 - hi in this tutorial i'll be going over
00:02 - how to do web scraping using node i was
00:06 - kind of inspired by this article i read
00:08 - client-side web scraping with javascript
00:10 - using jquery and regex and i wanted to
00:14 - continue this to kind of make it even
00:16 - better so instead of using client-side
00:19 - web scraping i decided to use node
00:21 - because
00:22 - so i don't have to deal with the
00:24 - cross-origin issues when you're using
00:26 - node you can basically get information
00:28 - from anywhere and it's not going to give
00:29 - you errors in this article what she does
00:32 - is she gets actually information from
00:34 - the free code camp website
00:37 - and finds the number of challenges
00:39 - completed
00:40 - so what i thought would be interesting
00:43 - is if we can combine that with with uh
00:45 - web scraping on a different free code
00:47 - cam website on the free code camp forum
00:50 - there's forums dot freecodecamp.org
00:53 - users and it's basically like a
00:55 - leaderboard it's gonna
00:57 - rank the users by how many hearts that
00:59 - they received
01:00 - so i thought it'd be interesting to
01:02 - compare how many hearts that they
01:04 - received compared to how many challenges
01:07 - they've passed on free code camp just to
01:10 - see if there's any correlation
01:12 - between
01:14 - number of challenges and how far they've
01:16 - gotten into the free code camp
01:17 - curriculum with the number of likes that
01:20 - they've received on the free code camp
01:22 - forum
01:23 - now you don't necessarily have to even
01:24 - be on free code camp
01:26 - in the curriculum to be on the forum so
01:29 - there may not be any correlation but i
01:31 - wanted to use some web scraping to find
01:33 - out the first thing we're going to do is
01:35 - going to go into
01:37 - sublime text here and
01:40 - i'm going to just require some
01:43 - dependencies so we're going to do const
01:46 - rp
01:47 - equals require
01:51 - and the first thing is going to be
01:52 - called request
01:55 - promise
01:56 - and this is going to make it easier to
01:58 - make
01:59 - ajax requests from other websites so
02:02 - we're going to also have to do mpm
02:05 - install
02:07 - reque
02:08 - request
02:09 - promise
02:12 - okay well that's installing i'm gonna do
02:15 - another line here const
02:18 - cheerio
02:20 - equals require
02:22 - it's going to be called cheerio material
02:24 - makes it so you can
02:26 - use syntax similar to jquery from within
02:29 - node so that's another thing that'll be
02:32 - easier to navigate
02:34 - the dom and different things like that
02:35 - when we're doing the web scraping
02:37 - and
02:38 - let's get that installed
02:40 - npm install
02:42 - cheerio
02:50 - then the last thing is const
02:53 - table
02:54 - now this next one is just supposed to
02:56 - make it easier to format our information
03:01 - for this project
03:03 - we're not going to create a web browser
03:05 - or anything
03:06 - it's just going to display the content
03:09 - the results right in the console so this
03:12 - cli dash table is going to make it
03:14 - easier to do that
03:16 - so i'll do npm install
03:19 - cli dash table
03:22 - and then we'll just let that install
03:25 - okay so we're going to need to set up
03:27 - some variables um one of them is going
03:29 - to be the let users
03:32 - we're just going to have to have an
03:34 - empty array of of the users here so
03:37 - let's start our our first
03:39 - web scrape here so first we're going to
03:42 - have to set our options this is
03:44 - something for the request promised i'm
03:46 - going to set the options
03:48 - the first thing is going to be the the
03:50 - url we're going to get the data from now
03:53 - we still have to figure that out so if
03:56 - we go over here
03:57 - to this list we have to figure out how
04:00 - to get all this information now now
04:03 - here's one of the problems
04:05 - a lot of websites
04:07 - render all the render the page
04:11 - with the javascript so like if i go over
04:14 - here into
04:15 - view page source
04:17 - and i search for
04:19 - let's say um
04:21 - i'll just search for quincy because that
04:22 - was one of the people on there you can
04:24 - see it doesn't find that name anywhere
04:27 - even though we can see the name quincy
04:29 - right here it's not on the source it's
04:32 - because
04:33 - after the page loads it renders all this
04:36 - in javascript
04:38 - now one problem is what
04:40 - when doing ajax requests or requests to
04:43 - other websites is that it's not going to
04:45 - load all the javascript so we can't just
04:49 - load up this page from node.js and
04:52 - expect to see all this content because
04:54 - it's not going to load up all the
04:55 - javascript so what we're going to do is
04:57 - try to find
04:59 - if there's an api that's getting all
05:01 - this information so i'm going to do
05:03 - command option
05:05 - j i guess i didn't need to do j but i'm
05:07 - just trying to open up this developer
05:09 - tools here and i'm going to go to the
05:11 - network tab
05:12 - now i'm going to refresh this one more
05:14 - time and it's going to you can see all
05:17 - the different calls that it's making to
05:19 - get the information on the page it's
05:22 - loading all these different things so
05:24 - let's go up to the top here and i'm
05:26 - trying to figure out if there's a what
05:27 - if there's a list of users
05:31 - okay if i go to this directory items one
05:33 - you can see the whole this direct items
05:36 - and then it has a few other things if i
05:38 - click the down arrow oh you can see this
05:41 - look this is the list of
05:44 - of users see the likes received it
05:45 - starts with 88 51 34 and you can see
05:48 - over here 88 51 34 and if we scroll over
05:52 - here
05:53 - um well let me just drop one of these
05:56 - downs you'll see user and we can
05:58 - actually get the usernames here
06:01 - so what we're actually going to do
06:04 - is use the request to get this
06:07 - information from the api
06:10 - and then
06:11 - you can see the username i'm just going
06:12 - to copy this username really quick if we
06:15 - go over to
06:17 - freecodecamp
06:19 - dot
06:21 - and then i put the username on the end
06:24 - you'll see that we'll get the free
06:26 - codecamp profile
06:28 - for that user the user on the forum
06:30 - doesn't necessarily have to use the same
06:32 - username as the user on the
06:34 - freecodecamp.org website but in many
06:37 - cases they do use the same user so we
06:40 - can use that username to find the number
06:42 - of challenges passed
06:44 - so to find out the number of challenges
06:46 - passed we're going to actually have to
06:47 - count up every item on this list here
06:49 - but we'll get to that in a second right
06:52 - now we just need to
06:55 - get this link here so i'm going to
06:58 - let's see copy
07:01 - copy the link address so now i'll go
07:04 - over here
07:05 - and for url i'll put this in
07:09 - some
07:10 - quotes
07:11 - and maybe i will zoom out a little bit
07:13 - here
07:15 - so we can see the whole link here
07:19 - and then i'm going to put um
07:23 - json
07:25 - to
07:26 - true that means the result is going to
07:28 - parse the json for us
07:30 - and make it a little easier to deal with
07:32 - the data
07:33 - so now we're going to do rp and then
07:36 - pass in the options where rp was this
07:39 - request promise
07:40 - that's going to
07:42 - do a ajax request and return a promise
07:45 - since it's returning a promise we can do
07:47 - a dot then
07:49 - so once the promise is resolved that
07:51 - means once it's able to get the
07:53 - information from that website then it's
07:56 - going to do something so let me
07:59 - pop this down to the next line
08:02 - and then
08:04 - we're going to try to figure out what
08:05 - it's going to do it's going to give us
08:07 - some information
08:08 - and i'm going to put all the information
08:11 - in this just a variable called data and
08:14 - now
08:15 - let's we're gonna make this arrow
08:17 - function here okay let's set up some
08:19 - variables we have let promises
08:23 - equal
08:24 - to let
08:25 - user data
08:27 - equal
08:29 - and so we're also going to make an array
08:30 - of the user data
08:31 - now we're going to for
08:34 - let user
08:35 - of
08:36 - data dot directory items and so it's
08:39 - getting this directory items right from
08:42 - this data here if you
08:44 - look at this page over here
08:49 - you can see that the top level of this
08:52 - results is directory item so we have to
08:54 - get into that
08:55 - and i'm going to do
08:56 - user data dot push i'm going to put
08:59 - something onto that array which is going
09:01 - to be the the data from the user
09:04 - basically so the name
09:07 - is
09:09 - user.user.username
09:13 - and i figured out what this was going to
09:15 - be the user.user.username
09:17 - just because you can see first it has to
09:20 - if you look in this data here we first
09:23 - we get the user
09:24 - dot
09:25 - username right there
09:27 - so
09:28 - also i'm going to set
09:30 - the likes received
09:34 - to
09:35 - user dot likes received
09:40 - and
09:42 - now let's see i'm going to just add a
09:44 - semicolon that's all we're going to do
09:46 - for that
09:47 - we'll
09:48 - in this for loop
09:51 - and we've pushed all the data onto there
09:53 - oh and now that i'm putting this in here
09:56 - i just realized that i tried a few
09:57 - different things and i don't actually
10:00 - need this array of promises when i was
10:03 - figuring out this code
10:04 - at first i tried something with this but
10:06 - actually i don't need this anymore so
10:08 - i'm going to take that out
10:09 - um
10:10 - now i'm just going to go down here there
10:12 - there was a time where i was going to
10:14 - try to call a promise for
10:16 - for each user
10:19 - but then i decided to go about it a
10:20 - different way now just for the the
10:23 - purpose of my log so you can tell it's
10:25 - happening i'm going to log something
10:27 - instead of doing console.log i'm going
10:28 - to do
10:29 - process
10:31 - st
10:34 - and then just put loading
10:36 - now one thing this does compare to
10:38 - console.log is it doesn't add a new line
10:40 - at the end so you can put everything on
10:42 - the same line so now we're going to call
10:46 - another function here which i'm going to
10:48 - create in just a second which is just
10:50 - get
10:50 - challenges
10:52 - completed
10:54 - and
10:55 - push to
10:56 - user array
10:58 - it's a long function name but does just
11:00 - describe what's happening
11:02 - so
11:03 - now the next function we're about to
11:06 - call is going to do that it's going to
11:07 - get all the challenges completed and
11:09 - then push it to the users array where
11:11 - the users array is right up here
11:13 - so
11:14 - what i'm going to do here is add some
11:16 - semicolons
11:19 - and then
11:20 - i'm going to do a dot catch
11:23 - so
11:24 - let's see that catch
11:27 - just to catch any errors that happen
11:29 - from this
11:31 - ajax call
11:32 - and i'm going to
11:36 - yeah just do this little function here
11:38 - and we're just going to console.log
11:40 - the error if there's an error now i'm
11:43 - going to create that function
11:45 - i'm actually just going to copy this so
11:46 - i don't have to
11:48 - type that again so i'm going to put
11:50 - function
11:53 - and i'm going to have the user data
11:55 - passed in still
11:58 - and let's define that function
12:00 - this is where it's going to go through
12:02 - each user
12:04 - and make another
12:06 - request
12:07 - for each user on the list there's a few
12:10 - ways to do this but i want each request
12:13 - to be in order
12:14 - so that
12:16 - the the hearts will be in order like
12:18 - this
12:20 - so i just want to make sure that the
12:22 - data the data is in the order that it is
12:24 - on here so when you make a different
12:27 - request it's asynchronous so you don't
12:29 - know which result is going to come back
12:31 - first
12:32 - so the way i figured that out to do
12:35 - well let me just show you how i'm going
12:36 - to do it to get the everything in order
12:38 - you may be able to find a better way to
12:40 - do this but this is just one of the
12:42 - first things i came up with i'm going to
12:43 - do var i equals zero i'm going to set
12:47 - this is basically a counter variable and
12:49 - then i'm going to create a function
12:50 - called next
12:53 - so we're actually going to keep calling
12:54 - this function it's going to be
12:57 - use some recursion here so
12:59 - if
13:00 - i is less than
13:04 - userdata.link
13:06 - if we haven't gotten to the end of the
13:08 - list we're going to do this
13:10 - we're going to set up a new request so
13:12 - options
13:13 - equals
13:15 - now remember this is just like this one
13:17 - up here up here where we have a url and
13:19 - we have
13:20 - if we want to do anything with the json
13:22 - so i'm going to put url
13:25 - and
13:26 - this is going to be now if we go back
13:29 - over here
13:30 - we can see that it's just going to be
13:32 - free codecamp.org slash and then it's
13:34 - the username so i'll just copy that
13:37 - and
13:38 - paste that in here freecodecamp.org
13:41 - slash and then this is where i'm going
13:44 - to add a
13:45 - plus
13:47 - and
13:48 - user data
13:50 - we're going to be looping over this so i
13:53 - is the index that we're looping through
13:56 - dot name
13:57 - and i am going to just
13:59 - change this
14:01 - just to these back ticks that's what
14:03 - the best practice is now
14:05 - so
14:06 - let's see now i'm not actually going to
14:08 - do anything with the json i'm going to
14:10 - do something else it's going to be it's
14:11 - going to be transform
14:15 - body
14:17 - now this is where we're going to use
14:18 - that cheerio that we brought in so
14:21 - cheerio
14:24 - dot load
14:27 - body
14:28 - we're going to be able to navigate this
14:30 - this html kind of like using something
14:33 - like jquery and now we're going to make
14:35 - the actual request so rp for request
14:37 - promise pass in the options and it's me
14:40 - dot then
14:43 - function
14:44 - here's the results i'm going to put into
14:46 - a variable that's just a dollar sign
14:48 - kind of inspired by jquery um just so we
14:51 - know every time something's loaded
14:54 - i'm going to do process dot std out
14:59 - and then we'll know if a user is being
15:02 - loaded so now one thing i also want to
15:04 - check for
15:06 - is
15:07 - well if we go back over here to this
15:09 - list of users i'm going to try to find
15:12 - one um
15:14 - trying to see if i can
15:17 - remember what basically some of these
15:19 - don't have the same username on
15:22 - freecodecam so if i copy this username
15:24 - here
15:25 - and i put it again at the end of my url
15:29 - it says we couldn't find a page for
15:32 - slash john dashfree codecamp so i want
15:34 - my results to be able to know whether
15:37 - it's actually getting data from the
15:40 - freecodecamp user page or not so the way
15:42 - i figured out to do that was just to
15:45 - check if there's a
15:48 - so if i go into here and if i inspect
15:51 - this
15:53 - you can see it's landing dash heading
15:56 - so i'm going to see if that exists
15:58 - so i'm going to do
16:00 - const
16:02 - fcc account
16:04 - this is going to end up being a boolean
16:06 - equals and then this is where
16:10 - we can
16:12 - do a look for that tag h1
16:14 - dot landing
16:17 - heading
16:19 - and then i'm going to put dot length
16:22 - equals equals zero
16:24 - so if the length is zero that means it
16:26 - doesn't exist on the page
16:27 - this will be true if they do have an
16:29 - account and false if they don't have an
16:31 - account with that username we're gonna
16:33 - do cons challenges
16:36 - past
16:37 - this is to figure out how many
16:39 - challenges they've passed
16:40 - and actually the code for this
16:44 - i got right from the article
16:46 - i made it pretty similar to how how they
16:49 - got the number of challenges on here
16:51 - so
16:52 - first i want to see if they have an
16:54 - account so
16:55 - this is going to be a ternary operator
16:57 - do they have an account let me scroll
16:58 - down here
17:00 - so if they do have an account then we
17:02 - can find out how many challenges they
17:04 - pass so
17:05 - we're going to look for
17:08 - t body
17:10 - tr
17:11 - and then do
17:12 - dot length
17:15 - and if not
17:17 - we're just going to do a string we're
17:19 - going to set the challenges passed to
17:20 - unknown we don't know how many
17:21 - challenges they passed
17:23 - maybe they have a different username
17:25 - that they use on freecodecamp.org so if
17:27 - we go back over here
17:29 - and i'm going to go back to this page so
17:33 - if i
17:34 - the reason why this works if i inspect
17:37 - this
17:38 - you can see we have a tr
17:41 - um let me go back so it's t-body tr
17:45 - so in the t body
17:47 - and the tr so each tr
17:50 - is its own
17:51 - row on here so basically we're just
17:54 - counting the rows in there and the
17:56 - number of rows is the number of
17:57 - challenges
17:59 - that the person passed
18:01 - so when you're doing web scraping you
18:03 - often have to go into the code and try
18:05 - to figure out exactly
18:08 - what you need to count
18:10 - for it to make sense to get the actual
18:12 - data
18:14 - we could have just gotten this number
18:15 - right here
18:16 - but
18:17 - that number is not just that number
18:19 - includes the challenges passed and they
18:21 - could also get a higher number based on
18:24 - helping people in in the the chat room
18:27 - but i just want the number of challenges
18:29 - passed so i want to count every line in
18:31 - this row
18:32 - so it would include like if these
18:34 - projects if i go to inspect this
18:37 - you'll see this also has t-body tr so
18:40 - it's going to include the projects that
18:41 - they passed too so it's going to include
18:43 - everything on here it doesn't include
18:45 - the headings or anything so when it
18:47 - counts every single one line in this
18:50 - table that will give you the the number
18:53 - here
18:54 - and so again when you're web scraping
18:56 - you just have to
18:57 - look a lot at the code to figure out the
18:59 - best way to do it
19:00 - so luckily this is not rendered with
19:03 - javascript it's just um we get a page
19:06 - that has all that in there within the
19:07 - html so that's why we're able to do this
19:09 - we got the results but we want to push
19:11 - the results to a table
19:13 - so
19:14 - let's set up the table options up here
19:17 - because we're going to make a table this
19:18 - table is just going to appear in the
19:20 - console
19:21 - so i'm going to put
19:22 - let's see next i'm not going to put
19:24 - there i'm going to put right down here
19:26 - so let
19:28 - table
19:29 - equals
19:30 - new table
19:33 - and this is just from that cli table
19:35 - thing that we brought in here it needs
19:37 - specific options we have the the heading
19:40 - so what's the heading of the table going
19:41 - to be like
19:43 - and the first column is going to be
19:44 - username
19:46 - and then the second column it's going to
19:48 - be hard so if i do control command space
19:51 - that should bring up
19:52 - this
19:53 - if you're using mac so i'm going to put
19:55 - in a heart there
19:56 - and then
19:59 - challenges
20:00 - so i just use that emoji
20:02 - because of how many hearts that they've
20:04 - received and now i also have to
20:07 - make the column width so i'm going to
20:09 - put c-o-l-w-i-d-t-h-s
20:13 - widths
20:14 - and i had already experimented with this
20:16 - and i found that 15
20:18 - 5 10
20:19 - are going to be the good column widths
20:22 - now let me go back over here
20:24 - table
20:25 - dot push
20:27 - and then i'm going to
20:29 - push on this information this array so
20:32 - it's going to be user data
20:34 - and then
20:35 - i for what index we're on
20:38 - dot name
20:40 - then user
20:41 - data
20:43 - i dot likes received
20:47 - and challenges passed
20:50 - so those are all the information
20:51 - for the different columns
20:53 - and then
20:54 - i'm going to
20:56 - just increment the i and then i'm going
20:59 - to put return
21:01 - next it's going to keep running this
21:04 - function and if i is less than
21:06 - userdata.link
21:08 - it's going to do all this where it gets
21:09 - the next
21:10 - user's information
21:12 - and then eventually i will it will run
21:15 - function.next and i will not be less
21:18 - than user.length so we're not going to
21:21 - go through this and return and run the
21:22 - return next so this is basically our
21:25 - base case
21:26 - so our base case i'm going to put else
21:29 - print
21:30 - data so i'm going to call this other
21:33 - function call where it's going to print
21:34 - the data that's collected
21:36 - so let me go down here
21:39 - oh so we also have to call this return
21:42 - next to begin with so down here after
21:45 - the function next we have to actually
21:46 - call that so i'm going to put
21:49 - return
21:50 - next to call that function
21:54 - so it's going to start that
21:56 - so now we're actually getting close to
21:59 - the end here we're going to define our
22:02 - print data function
22:04 - so i'm going to put
22:05 - function
22:06 - print data
22:09 - okay i'm going to put
22:10 - console.log we've been printing things
22:13 - to the same with the
22:14 - console.standardout.right printing sys
22:16 - to the same line so we want to get
22:18 - something to the new line so we're just
22:20 - going to do a console.log just something
22:22 - to put on the to the new line and i'm
22:24 - just going to use this check box here
22:29 - and then i'm going to do another
22:30 - console.log
22:33 - and i'm going to
22:36 - print table dot 2
22:39 - string
22:41 - so that is going to print out our whole
22:44 - table in the console
22:46 - now i'm
22:47 - probably have some kind of errors here i
22:49 - don't know i'm going to actually try
22:50 - running this and see if it works so i'm
22:52 - going to go over to my console and i'm
22:55 - going to just put node index
22:58 - dot js
23:00 - so let's see unexpected identifier let's
23:03 - see what i did wrong there
23:06 - oh i just need a comma at the end of
23:08 - here
23:09 - okay now let's see what happens
23:12 - let's see
23:14 - throw air cannot find module request
23:18 - okay we'll just let me just do npm
23:20 - install request
23:25 - it looks like we just need the module
23:27 - request
23:28 - okay now
23:29 - let's try it again
23:33 - so it did something you can see has the
23:36 - word loading here
23:37 - but then the program seemed to end right
23:39 - away so i had to kind of figure out why
23:41 - that is so somehow
23:43 - it
23:46 - oh
23:47 - oh okay i see what the problem is
23:49 - i forgot to put the
23:51 - parentheses here so it never called that
23:54 - function correctly to start off going
23:56 - into the function so now let's try it
24:01 - okay
24:02 - unhandled it says oh cheerio is not
24:05 - defined
24:07 - so let's see what oh i spelled cheerio
24:08 - wrong here
24:10 - so save that
24:12 - and
24:13 - go into my
24:15 - here again okay it's actually the dots
24:17 - mean it's actually doing these calls the
24:20 - requests to the website to get the data
24:22 - so this does seem to be working
24:25 - let's just wait till this finishes
24:33 - and here's the table
24:35 - so
24:36 - let me just scroll up here
24:40 - so you can see it loaded all that got
24:42 - username the heart
24:44 - challenges
24:45 - you can see when it puts in the emoji it
24:47 - kind of messes up the spacing here
24:49 - that's okay though but you can see
24:51 - here's the heart you see you see 88 51
24:54 - 34
24:56 - so if we you can kind of if we go over
24:58 - to here you can see it's getting that
25:00 - number um
25:04 - 88 51 34
25:07 - and then the way to check
25:09 - that these are right you can see this
25:11 - one has has quincy has
25:14 - less so
25:15 - quincy larson if you go over here and
25:17 - put that in there
25:18 - um
25:19 - so the way to check is to go through and
25:22 - count every
25:23 - row i'm not going to do that i've done
25:25 - it before to check and it was right i'm
25:27 - not going to do in this video but feel
25:29 - free to do that if you want to check
25:31 - you can also go and count 291 but that's
25:33 - a lot easier just to count the smaller
25:35 - ones just to make sure it's calculating
25:37 - it correctly but you can see
25:41 - you can see here to now we can have the
25:43 - number of hearts on the forum with the
25:44 - number of challenges passed on the
25:46 - website
25:48 - and we can see how they're related so
25:50 - you can kind of when you actually look
25:52 - through this
25:53 - it doesn't
25:55 - seem like there's a major correlation
25:57 - like this person has only four hearts
25:59 - but also he's passed 403
26:03 - challenges
26:04 - same with it a lot of these have passed
26:06 - a lot of challenges but they don't have
26:08 - very many hearts and really the person
26:11 - who has the fewest challenges passed is
26:13 - quincy larson
26:15 - but he has one of the the number three
26:19 - to fourth spot for number of hearts
26:22 - and you can see some of these there's
26:24 - actually quite a few unknowns here
26:26 - i'd be interested to it just makes me
26:28 - wonder hmm i wonder do these have these
26:31 - people actually use freecodecamp.org or
26:33 - they're just participating on the forum
26:34 - most likely they do use freeco camta the
26:37 - main site and just have a different
26:39 - username but maybe not
26:42 - so that this web scraping is a great way
26:44 - to
26:45 - combine information from two different
26:47 - sites
26:49 - to get the exact information you're
26:51 - looking for
26:52 - i'm sure that some of you watching may
26:54 - have even better ideas of how to do this
26:57 - so if you figure out a better way to do
26:59 - some of these things put your idea in
27:01 - the comments to this video so everyone
27:03 - else can can see that because i love to
27:06 - learn new ways to do things and it'll be
27:07 - great to see what other people are doing
27:09 - in regards to web scraping and that's it
27:12 - my name is beau carnes thanks for
27:14 - watching don't forget to subscribe and
27:16 - remember use your code for good

Cleaned transcript:

hi in this tutorial i'll be going over how to do web scraping using node i was kind of inspired by this article i read clientside web scraping with javascript using jquery and regex and i wanted to continue this to kind of make it even better so instead of using clientside web scraping i decided to use node because so i don't have to deal with the crossorigin issues when you're using node you can basically get information from anywhere and it's not going to give you errors in this article what she does is she gets actually information from the free code camp website and finds the number of challenges completed so what i thought would be interesting is if we can combine that with with uh web scraping on a different free code cam website on the free code camp forum there's forums dot freecodecamp.org users and it's basically like a leaderboard it's gonna rank the users by how many hearts that they received so i thought it'd be interesting to compare how many hearts that they received compared to how many challenges they've passed on free code camp just to see if there's any correlation between number of challenges and how far they've gotten into the free code camp curriculum with the number of likes that they've received on the free code camp forum now you don't necessarily have to even be on free code camp in the curriculum to be on the forum so there may not be any correlation but i wanted to use some web scraping to find out the first thing we're going to do is going to go into sublime text here and i'm going to just require some dependencies so we're going to do const rp equals require and the first thing is going to be called request promise and this is going to make it easier to make ajax requests from other websites so we're going to also have to do mpm install reque request promise okay well that's installing i'm gonna do another line here const cheerio equals require it's going to be called cheerio material makes it so you can use syntax similar to jquery from within node so that's another thing that'll be easier to navigate the dom and different things like that when we're doing the web scraping and let's get that installed npm install cheerio then the last thing is const table now this next one is just supposed to make it easier to format our information for this project we're not going to create a web browser or anything it's just going to display the content the results right in the console so this cli dash table is going to make it easier to do that so i'll do npm install cli dash table and then we'll just let that install okay so we're going to need to set up some variables um one of them is going to be the let users we're just going to have to have an empty array of of the users here so let's start our our first web scrape here so first we're going to have to set our options this is something for the request promised i'm going to set the options the first thing is going to be the the url we're going to get the data from now we still have to figure that out so if we go over here to this list we have to figure out how to get all this information now now here's one of the problems a lot of websites render all the render the page with the javascript so like if i go over here into view page source and i search for let's say um i'll just search for quincy because that was one of the people on there you can see it doesn't find that name anywhere even though we can see the name quincy right here it's not on the source it's because after the page loads it renders all this in javascript now one problem is what when doing ajax requests or requests to other websites is that it's not going to load all the javascript so we can't just load up this page from node.js and expect to see all this content because it's not going to load up all the javascript so what we're going to do is try to find if there's an api that's getting all this information so i'm going to do command option j i guess i didn't need to do j but i'm just trying to open up this developer tools here and i'm going to go to the network tab now i'm going to refresh this one more time and it's going to you can see all the different calls that it's making to get the information on the page it's loading all these different things so let's go up to the top here and i'm trying to figure out if there's a what if there's a list of users okay if i go to this directory items one you can see the whole this direct items and then it has a few other things if i click the down arrow oh you can see this look this is the list of of users see the likes received it starts with 88 51 34 and you can see over here 88 51 34 and if we scroll over here um well let me just drop one of these downs you'll see user and we can actually get the usernames here so what we're actually going to do is use the request to get this information from the api and then you can see the username i'm just going to copy this username really quick if we go over to freecodecamp dot and then i put the username on the end you'll see that we'll get the free codecamp profile for that user the user on the forum doesn't necessarily have to use the same username as the user on the freecodecamp.org website but in many cases they do use the same user so we can use that username to find the number of challenges passed so to find out the number of challenges passed we're going to actually have to count up every item on this list here but we'll get to that in a second right now we just need to get this link here so i'm going to let's see copy copy the link address so now i'll go over here and for url i'll put this in some quotes and maybe i will zoom out a little bit here so we can see the whole link here and then i'm going to put um json to true that means the result is going to parse the json for us and make it a little easier to deal with the data so now we're going to do rp and then pass in the options where rp was this request promise that's going to do a ajax request and return a promise since it's returning a promise we can do a dot then so once the promise is resolved that means once it's able to get the information from that website then it's going to do something so let me pop this down to the next line and then we're going to try to figure out what it's going to do it's going to give us some information and i'm going to put all the information in this just a variable called data and now let's we're gonna make this arrow function here okay let's set up some variables we have let promises equal to let user data equal and so we're also going to make an array of the user data now we're going to for let user of data dot directory items and so it's getting this directory items right from this data here if you look at this page over here you can see that the top level of this results is directory item so we have to get into that and i'm going to do user data dot push i'm going to put something onto that array which is going to be the the data from the user basically so the name is user.user.username and i figured out what this was going to be the user.user.username just because you can see first it has to if you look in this data here we first we get the user dot username right there so also i'm going to set the likes received to user dot likes received and now let's see i'm going to just add a semicolon that's all we're going to do for that we'll in this for loop and we've pushed all the data onto there oh and now that i'm putting this in here i just realized that i tried a few different things and i don't actually need this array of promises when i was figuring out this code at first i tried something with this but actually i don't need this anymore so i'm going to take that out um now i'm just going to go down here there there was a time where i was going to try to call a promise for for each user but then i decided to go about it a different way now just for the the purpose of my log so you can tell it's happening i'm going to log something instead of doing console.log i'm going to do process st and then just put loading now one thing this does compare to console.log is it doesn't add a new line at the end so you can put everything on the same line so now we're going to call another function here which i'm going to create in just a second which is just get challenges completed and push to user array it's a long function name but does just describe what's happening so now the next function we're about to call is going to do that it's going to get all the challenges completed and then push it to the users array where the users array is right up here so what i'm going to do here is add some semicolons and then i'm going to do a dot catch so let's see that catch just to catch any errors that happen from this ajax call and i'm going to yeah just do this little function here and we're just going to console.log the error if there's an error now i'm going to create that function i'm actually just going to copy this so i don't have to type that again so i'm going to put function and i'm going to have the user data passed in still and let's define that function this is where it's going to go through each user and make another request for each user on the list there's a few ways to do this but i want each request to be in order so that the the hearts will be in order like this so i just want to make sure that the data the data is in the order that it is on here so when you make a different request it's asynchronous so you don't know which result is going to come back first so the way i figured that out to do well let me just show you how i'm going to do it to get the everything in order you may be able to find a better way to do this but this is just one of the first things i came up with i'm going to do var i equals zero i'm going to set this is basically a counter variable and then i'm going to create a function called next so we're actually going to keep calling this function it's going to be use some recursion here so if i is less than userdata.link if we haven't gotten to the end of the list we're going to do this we're going to set up a new request so options equals now remember this is just like this one up here up here where we have a url and we have if we want to do anything with the json so i'm going to put url and this is going to be now if we go back over here we can see that it's just going to be free codecamp.org slash and then it's the username so i'll just copy that and paste that in here freecodecamp.org slash and then this is where i'm going to add a plus and user data we're going to be looping over this so i is the index that we're looping through dot name and i am going to just change this just to these back ticks that's what the best practice is now so let's see now i'm not actually going to do anything with the json i'm going to do something else it's going to be it's going to be transform body now this is where we're going to use that cheerio that we brought in so cheerio dot load body we're going to be able to navigate this this html kind of like using something like jquery and now we're going to make the actual request so rp for request promise pass in the options and it's me dot then function here's the results i'm going to put into a variable that's just a dollar sign kind of inspired by jquery um just so we know every time something's loaded i'm going to do process dot std out and then we'll know if a user is being loaded so now one thing i also want to check for is well if we go back over here to this list of users i'm going to try to find one um trying to see if i can remember what basically some of these don't have the same username on freecodecam so if i copy this username here and i put it again at the end of my url it says we couldn't find a page for slash john dashfree codecamp so i want my results to be able to know whether it's actually getting data from the freecodecamp user page or not so the way i figured out to do that was just to check if there's a so if i go into here and if i inspect this you can see it's landing dash heading so i'm going to see if that exists so i'm going to do const fcc account this is going to end up being a boolean equals and then this is where we can do a look for that tag h1 dot landing heading and then i'm going to put dot length equals equals zero so if the length is zero that means it doesn't exist on the page this will be true if they do have an account and false if they don't have an account with that username we're gonna do cons challenges past this is to figure out how many challenges they've passed and actually the code for this i got right from the article i made it pretty similar to how how they got the number of challenges on here so first i want to see if they have an account so this is going to be a ternary operator do they have an account let me scroll down here so if they do have an account then we can find out how many challenges they pass so we're going to look for t body tr and then do dot length and if not we're just going to do a string we're going to set the challenges passed to unknown we don't know how many challenges they passed maybe they have a different username that they use on freecodecamp.org so if we go back over here and i'm going to go back to this page so if i the reason why this works if i inspect this you can see we have a tr um let me go back so it's tbody tr so in the t body and the tr so each tr is its own row on here so basically we're just counting the rows in there and the number of rows is the number of challenges that the person passed so when you're doing web scraping you often have to go into the code and try to figure out exactly what you need to count for it to make sense to get the actual data we could have just gotten this number right here but that number is not just that number includes the challenges passed and they could also get a higher number based on helping people in in the the chat room but i just want the number of challenges passed so i want to count every line in this row so it would include like if these projects if i go to inspect this you'll see this also has tbody tr so it's going to include the projects that they passed too so it's going to include everything on here it doesn't include the headings or anything so when it counts every single one line in this table that will give you the the number here and so again when you're web scraping you just have to look a lot at the code to figure out the best way to do it so luckily this is not rendered with javascript it's just um we get a page that has all that in there within the html so that's why we're able to do this we got the results but we want to push the results to a table so let's set up the table options up here because we're going to make a table this table is just going to appear in the console so i'm going to put let's see next i'm not going to put there i'm going to put right down here so let table equals new table and this is just from that cli table thing that we brought in here it needs specific options we have the the heading so what's the heading of the table going to be like and the first column is going to be username and then the second column it's going to be hard so if i do control command space that should bring up this if you're using mac so i'm going to put in a heart there and then challenges so i just use that emoji because of how many hearts that they've received and now i also have to make the column width so i'm going to put colwidths widths and i had already experimented with this and i found that 15 5 10 are going to be the good column widths now let me go back over here table dot push and then i'm going to push on this information this array so it's going to be user data and then i for what index we're on dot name then user data i dot likes received and challenges passed so those are all the information for the different columns and then i'm going to just increment the i and then i'm going to put return next it's going to keep running this function and if i is less than userdata.link it's going to do all this where it gets the next user's information and then eventually i will it will run function.next and i will not be less than user.length so we're not going to go through this and return and run the return next so this is basically our base case so our base case i'm going to put else print data so i'm going to call this other function call where it's going to print the data that's collected so let me go down here oh so we also have to call this return next to begin with so down here after the function next we have to actually call that so i'm going to put return next to call that function so it's going to start that so now we're actually getting close to the end here we're going to define our print data function so i'm going to put function print data okay i'm going to put console.log we've been printing things to the same with the console.standardout.right printing sys to the same line so we want to get something to the new line so we're just going to do a console.log just something to put on the to the new line and i'm just going to use this check box here and then i'm going to do another console.log and i'm going to print table dot 2 string so that is going to print out our whole table in the console now i'm probably have some kind of errors here i don't know i'm going to actually try running this and see if it works so i'm going to go over to my console and i'm going to just put node index dot js so let's see unexpected identifier let's see what i did wrong there oh i just need a comma at the end of here okay now let's see what happens let's see throw air cannot find module request okay we'll just let me just do npm install request it looks like we just need the module request okay now let's try it again so it did something you can see has the word loading here but then the program seemed to end right away so i had to kind of figure out why that is so somehow it oh oh okay i see what the problem is i forgot to put the parentheses here so it never called that function correctly to start off going into the function so now let's try it okay unhandled it says oh cheerio is not defined so let's see what oh i spelled cheerio wrong here so save that and go into my here again okay it's actually the dots mean it's actually doing these calls the requests to the website to get the data so this does seem to be working let's just wait till this finishes and here's the table so let me just scroll up here so you can see it loaded all that got username the heart challenges you can see when it puts in the emoji it kind of messes up the spacing here that's okay though but you can see here's the heart you see you see 88 51 34 so if we you can kind of if we go over to here you can see it's getting that number um 88 51 34 and then the way to check that these are right you can see this one has has quincy has less so quincy larson if you go over here and put that in there um so the way to check is to go through and count every row i'm not going to do that i've done it before to check and it was right i'm not going to do in this video but feel free to do that if you want to check you can also go and count 291 but that's a lot easier just to count the smaller ones just to make sure it's calculating it correctly but you can see you can see here to now we can have the number of hearts on the forum with the number of challenges passed on the website and we can see how they're related so you can kind of when you actually look through this it doesn't seem like there's a major correlation like this person has only four hearts but also he's passed 403 challenges same with it a lot of these have passed a lot of challenges but they don't have very many hearts and really the person who has the fewest challenges passed is quincy larson but he has one of the the number three to fourth spot for number of hearts and you can see some of these there's actually quite a few unknowns here i'd be interested to it just makes me wonder hmm i wonder do these have these people actually use freecodecamp.org or they're just participating on the forum most likely they do use freeco camta the main site and just have a different username but maybe not so that this web scraping is a great way to combine information from two different sites to get the exact information you're looking for i'm sure that some of you watching may have even better ideas of how to do this so if you figure out a better way to do some of these things put your idea in the comments to this video so everyone else can can see that because i love to learn new ways to do things and it'll be great to see what other people are doing in regards to web scraping and that's it my name is beau carnes thanks for watching don't forget to subscribe and remember use your code for good
