With timestamps:

00:00 - a try that's how this is pronounced
00:02 - right here a try sometimes called a
00:05 - prefix tree is a special type of tree
00:08 - used to store associative data
00:10 - structures a try stores data in steps
00:14 - each step is a node in the try this is
00:16 - often used to store words since there
00:19 - are a finite number of letters that can
00:20 - be put together to make a string a
00:22 - possible use case would be to validate
00:24 - that a word is in a dictionary each step
00:28 - or node would represent one letter of of
00:30 - a word so if you can see over here this
00:33 - is an example of a try this word right
00:35 - here will be b a l l ball the steps
00:39 - begin to Branch off when the order of
00:41 - the letters diverge from the other words
00:43 - in the try or when a word ends so you
00:47 - got the word b a l l but you also have b
00:51 - a t bat so the first two letters ba a
00:56 - are part of the word ball and part of
00:58 - the word bat and then down here you can
01:00 - have
01:01 - doll do dork and dorm if you look at the
01:06 - red stars that just means it's at the
01:09 - end of the word so the word do you can
01:12 - see it's the end of a word even though
01:15 - there are still letters in other words
01:16 - after the O so let's look at the
01:19 - information in each node from the code
01:22 - here each node is going to have keys
01:26 - which is just a new map and this is the
01:29 - es6 m map structure it's kind of like an
01:32 - object it has just key value Pairs and
01:35 - in the in these Keys the key value pairs
01:38 - are kind of like the name of a folder
01:41 - and a folder in a directory structure so
01:45 - if you can imagine these all folders in
01:47 - the root node there is uh the keys map
01:51 - that's going to have B D and S and each
01:55 - of the the key value pairs are the B the
01:58 - name of this folder is the key in the
02:00 - map and the value of that key is the
02:05 - folder B the actual contents of the
02:07 - folder B and so the D is the key in the
02:12 - map and the value the key value pair the
02:15 - value is going to be the actual contents
02:17 - of the folder each node is going to have
02:19 - a list of keys which is just a list of
02:22 - all the other letters that are inside
02:24 - that folder or in that inside that node
02:27 - and then we're going to have an end data
02:30 - just means is this the end letter in a
02:32 - word so in this picture all of the nodes
02:37 - with a star have end set to true and all
02:40 - of the nodes without a star have end set
02:43 - to false now we just have a Setter
02:45 - function set end end is equals true is
02:48 - end so it's just going to return true or
02:51 - false if it's the end of the word so now
02:53 - that we've looked at each node in the
02:55 - try let's look at how the code to the
02:58 - actual try set up so we're going to only
03:01 - going to have three functions we're
03:02 - going to have add to add a word to a try
03:06 - we're going to have is word to see if a
03:09 - word is a word in the try and then print
03:14 - this is more of kind of like a helper
03:15 - function just to print all the words
03:17 - that are in the try so before I go
03:19 - through the code let me show you how it
03:20 - would be used or we're going to create a
03:22 - new try and then we're you can add the
03:25 - words like this and then after you add
03:28 - all these words and these are the same
03:30 - words that are in this picture over here
03:32 - you can check if it is a word is doll a
03:35 - word well do doll is going to be a word
03:38 - is Dora word see we have the word d o r
03:41 - in the picture but there's no star on R
03:44 - because door is not a an actual word
03:47 - even though those letters are in the try
03:50 - and then dorf well check d o r and then
03:53 - there's no F so that's not a word and
03:55 - then you can just print the whole thing
03:56 - like that so if I run that you're going
03:58 - to see in the console down down here
04:00 - true false false and then you can see
04:02 - the whole list here so let's go back up
04:05 - to here first of all we're going to
04:06 - create the root node a new node and then
04:10 - let's look at the add function so this
04:12 - add function is a recursive function so
04:15 - when you call it for the first time
04:16 - you're going to put the entire word you
04:18 - want to add to the try and that becomes
04:19 - the input and here it says node equals
04:23 - this. root that means if you pass in a
04:26 - node it will use that node but if you
04:29 - don't pass in a node it will just use
04:32 - this. root as the the default node so if
04:36 - input. length equals equals z that means
04:40 - if we're at the end of the word that we
04:42 - passed in we're just going to do no do
04:45 - set end and then return and we're done
04:48 - with the add function else if that means
04:51 - if there's more than zero letters that
04:53 - we've passed into this add function
04:55 - we're not at the end of the word so
04:57 - first we're going to check if there's
04:59 - already a node with that letter that
05:02 - we're looking at so this says if not
05:05 - node. keys. has so let's say we're in
05:08 - the root node node. Keys is a list of
05:12 - all the letters that that root node
05:14 - points to so if it does not has if it
05:18 - does not have a letter input zero would
05:21 - just mean the first character of the
05:24 - string we passed in so if we pass in
05:26 - ball it would this is just saying if
05:30 - there is not a node with the letter B
05:34 - here then we are going to create a node
05:37 - with the letter B no. keys. set set is
05:40 - how we're going to create a new key
05:42 - value pair in the keys map we're going
05:45 - to set it with the key to be the letter
05:48 - input zero so input with zero in
05:51 - Brackets just means the first letter of
05:54 - the input we passed in so if we pass in
05:56 - ball the first letter is g to be B and
05:58 - so remember each key value pair is the
06:01 - name is kind of like the name of a
06:03 - folder and the contents of the folder
06:05 - the name of the folder is B the contents
06:07 - of the folder are a new node so then
06:10 - this is where becomes recursive we're
06:11 - going to call this. add and we're going
06:14 - to pass in input do. substra one which
06:19 - takes the input and takes every letter
06:22 - after the first letter and passes it
06:25 - into the add function again so if the
06:28 - word was ball
06:30 - every letter after the first letter is a
06:32 - l so we're going to just pass in the
06:34 - letters all and we're also going to pass
06:37 - in a node before I remember we start
06:39 - with the with the root node now we're
06:40 - going to pass in this node which is also
06:44 - the node we just created here so we're
06:47 - going to set a node with the letter B
06:50 - that would be the input zero so now
06:52 - we're going to get the node with the
06:55 - input zero that's the the first
06:57 - character so so now we're going to run
06:59 - the add function but instead of at the
07:01 - being at the root node we're going to be
07:03 - at the the node B and then the else is
07:06 - just if there's already a letter by that
07:09 - name so remember here we added a node
07:12 - with the letter B but if there already
07:14 - is a letter B like for instance let's
07:16 - say we already have the word doll and
07:19 - we're going to add the word dork if
07:20 - we're at the D and the word doll is
07:22 - already in the try and we want to add
07:24 - dork well o is already going to be in
07:27 - the try so if o is already in the try
07:31 - we're not going to create the O node
07:33 - we're just going to add the the new
07:36 - substring which in this case would be o
07:38 - RK we're going to add that to the nodes
07:42 - that node. keys thatg at input zero
07:45 - which would be the O node so we're going
07:48 - to keep running through that until we've
07:51 - added the word to the try and then down
07:53 - here we're going to check if the word is
07:55 - in the try so this is where the try
07:58 - really perform forms you can check if a
08:01 - word is in the dictionary much quicker
08:03 - in the try than other data structures
08:06 - because we don't have to check through
08:07 - every word we're just checking one
08:09 - letter at at a time so we're passing in
08:11 - the word we're setting the the node to
08:14 - the root node at first and then this is
08:17 - the loop that we're going to keep
08:18 - running through until we find the word
08:20 - so while word. length is more than one
08:23 - while there's more characters to search
08:26 - in the the word that we passed in so if
08:29 - not no. keys. has word this is saying
08:33 - we're going to check the first character
08:34 - in the word so let's say we're on the
08:37 - the root node so if there is no key with
08:40 - the first character in the word like
08:41 - let's say we pass the word tree well
08:44 - there's no T there's no key with the
08:46 - letter t here so we can return false we
08:49 - quickly determine that that word tree is
08:52 - not in this try because there's no word
08:56 - that starts with t else that just means
08:59 - there must be a word that starts with
09:00 - that letter so let's say we're looking
09:02 - for the word send well if it does have
09:05 - the letter s then we're going to do
09:08 - these two things we're going to set the
09:10 - node remember which used to be the root
09:12 - node but now we're going to set the node
09:14 - to the the node s because if we're going
09:17 - to look for the word send we're setting
09:19 - the the node to the S node and we're
09:21 - going to change the word into the word
09:24 - minus the first character so now we're
09:27 - just going to be looking for the word in
09:29 - instead of send so we're going to go
09:31 - back up here now we're we're going to
09:33 - keep running through this now we're on
09:35 - the S node but we're looking for the
09:36 - word end and yeah we'll find the E we'll
09:38 - find the n and we'll find the D and now
09:41 - we go to this very last line if node.
09:44 - key. has word which would just be a
09:48 - single letter because remember we we
09:50 - keep taking the letters off and so if it
09:53 - has the last letter of the word that we
09:54 - passed in and it is the end so is end
10:00 - then we're going to return true that
10:02 - word is in the try else we're going to
10:05 - return false yeah so this last one was
10:07 - just the the print function this just
10:08 - kind of a helper function and so we're
10:10 - going to create an array of every word
10:12 - but right now it's just going to be
10:13 - empty then we're going to search we're
10:15 - going to pass in we going to search if
10:18 - we don't pass anything here it's going
10:19 - to set this to the root node um actually
10:22 - I bet we don't even need this let me
10:25 - just run that just to see if it does the
10:26 - same thing in the console yep we don't
10:29 - even need to set the node to the root
10:31 - node uh because when we first call The
10:33 - Search Command down here we already pass
10:36 - in this. root so we're just going to
10:39 - pass in a node and we're going to pass
10:41 - in a string here if node that keys that
10:43 - size does not equal zero that means
10:46 - there's still still more letters to look
10:48 - through so for each letters in the keys
10:50 - here let's say we're on the the root
10:52 - node so the letters in the key would be
10:54 - B D and S so for each of those letters
10:57 - we're going to run the Search Command
10:59 - again and then we're going to pass in
11:01 - node. keys. letter that means we're
11:04 - going to pass in the the node at that
11:07 - letter so we would pass in the B node
11:09 - and then we're going to add that letter
11:12 - to the string at the beginning the
11:15 - string would be empty so do string. con
11:17 - concat that means we're going to add one
11:18 - letter we're going to add the letter b
11:20 - and basically since this is recursive
11:23 - it's going to keep going and keep adding
11:26 - each letter it's going to keep concat
11:28 - each letter to the string until it's
11:30 - formed the whole word and then see if
11:33 - node. is end if we've gone to the last
11:35 - node in the word it's going to do word.
11:38 - push string so that's our words arrayed
11:41 - if we've gone to the last letter in the
11:42 - word we're going to push the word onto
11:45 - the words array now else that's else to
11:48 - this if statement if the no. keys that
11:51 - size does equal zero then we're at the
11:54 - last letter of a branch if string.
11:56 - length is is more than zero where we're
11:59 - just going to push that word on to to
12:01 - the words array or else returned
12:03 - undefined and here's where we call that
12:06 - search function for the first time so
12:07 - here's the search function um and then
12:09 - we call it for the first time and it's
12:11 - just going to go over and over until it
12:13 - gets every word in the try if words.
12:16 - length is more than zero it's going to
12:18 - return that word the words the words
12:20 - array or it's going to return null if
12:22 - there's no words in the array so that's
12:24 - a try thanks for watching my name is Bo
12:27 - KS don't forget to sub subscribe and
12:29 - remember use your code for good

Cleaned transcript:

a try that's how this is pronounced right here a try sometimes called a prefix tree is a special type of tree used to store associative data structures a try stores data in steps each step is a node in the try this is often used to store words since there are a finite number of letters that can be put together to make a string a possible use case would be to validate that a word is in a dictionary each step or node would represent one letter of of a word so if you can see over here this is an example of a try this word right here will be b a l l ball the steps begin to Branch off when the order of the letters diverge from the other words in the try or when a word ends so you got the word b a l l but you also have b a t bat so the first two letters ba a are part of the word ball and part of the word bat and then down here you can have doll do dork and dorm if you look at the red stars that just means it's at the end of the word so the word do you can see it's the end of a word even though there are still letters in other words after the O so let's look at the information in each node from the code here each node is going to have keys which is just a new map and this is the es6 m map structure it's kind of like an object it has just key value Pairs and in the in these Keys the key value pairs are kind of like the name of a folder and a folder in a directory structure so if you can imagine these all folders in the root node there is uh the keys map that's going to have B D and S and each of the the key value pairs are the B the name of this folder is the key in the map and the value of that key is the folder B the actual contents of the folder B and so the D is the key in the map and the value the key value pair the value is going to be the actual contents of the folder each node is going to have a list of keys which is just a list of all the other letters that are inside that folder or in that inside that node and then we're going to have an end data just means is this the end letter in a word so in this picture all of the nodes with a star have end set to true and all of the nodes without a star have end set to false now we just have a Setter function set end end is equals true is end so it's just going to return true or false if it's the end of the word so now that we've looked at each node in the try let's look at how the code to the actual try set up so we're going to only going to have three functions we're going to have add to add a word to a try we're going to have is word to see if a word is a word in the try and then print this is more of kind of like a helper function just to print all the words that are in the try so before I go through the code let me show you how it would be used or we're going to create a new try and then we're you can add the words like this and then after you add all these words and these are the same words that are in this picture over here you can check if it is a word is doll a word well do doll is going to be a word is Dora word see we have the word d o r in the picture but there's no star on R because door is not a an actual word even though those letters are in the try and then dorf well check d o r and then there's no F so that's not a word and then you can just print the whole thing like that so if I run that you're going to see in the console down down here true false false and then you can see the whole list here so let's go back up to here first of all we're going to create the root node a new node and then let's look at the add function so this add function is a recursive function so when you call it for the first time you're going to put the entire word you want to add to the try and that becomes the input and here it says node equals this. root that means if you pass in a node it will use that node but if you don't pass in a node it will just use this. root as the the default node so if input. length equals equals z that means if we're at the end of the word that we passed in we're just going to do no do set end and then return and we're done with the add function else if that means if there's more than zero letters that we've passed into this add function we're not at the end of the word so first we're going to check if there's already a node with that letter that we're looking at so this says if not node. keys. has so let's say we're in the root node node. Keys is a list of all the letters that that root node points to so if it does not has if it does not have a letter input zero would just mean the first character of the string we passed in so if we pass in ball it would this is just saying if there is not a node with the letter B here then we are going to create a node with the letter B no. keys. set set is how we're going to create a new key value pair in the keys map we're going to set it with the key to be the letter input zero so input with zero in Brackets just means the first letter of the input we passed in so if we pass in ball the first letter is g to be B and so remember each key value pair is the name is kind of like the name of a folder and the contents of the folder the name of the folder is B the contents of the folder are a new node so then this is where becomes recursive we're going to call this. add and we're going to pass in input do. substra one which takes the input and takes every letter after the first letter and passes it into the add function again so if the word was ball every letter after the first letter is a l so we're going to just pass in the letters all and we're also going to pass in a node before I remember we start with the with the root node now we're going to pass in this node which is also the node we just created here so we're going to set a node with the letter B that would be the input zero so now we're going to get the node with the input zero that's the the first character so so now we're going to run the add function but instead of at the being at the root node we're going to be at the the node B and then the else is just if there's already a letter by that name so remember here we added a node with the letter B but if there already is a letter B like for instance let's say we already have the word doll and we're going to add the word dork if we're at the D and the word doll is already in the try and we want to add dork well o is already going to be in the try so if o is already in the try we're not going to create the O node we're just going to add the the new substring which in this case would be o RK we're going to add that to the nodes that node. keys thatg at input zero which would be the O node so we're going to keep running through that until we've added the word to the try and then down here we're going to check if the word is in the try so this is where the try really perform forms you can check if a word is in the dictionary much quicker in the try than other data structures because we don't have to check through every word we're just checking one letter at at a time so we're passing in the word we're setting the the node to the root node at first and then this is the loop that we're going to keep running through until we find the word so while word. length is more than one while there's more characters to search in the the word that we passed in so if not no. keys. has word this is saying we're going to check the first character in the word so let's say we're on the the root node so if there is no key with the first character in the word like let's say we pass the word tree well there's no T there's no key with the letter t here so we can return false we quickly determine that that word tree is not in this try because there's no word that starts with t else that just means there must be a word that starts with that letter so let's say we're looking for the word send well if it does have the letter s then we're going to do these two things we're going to set the node remember which used to be the root node but now we're going to set the node to the the node s because if we're going to look for the word send we're setting the the node to the S node and we're going to change the word into the word minus the first character so now we're just going to be looking for the word in instead of send so we're going to go back up here now we're we're going to keep running through this now we're on the S node but we're looking for the word end and yeah we'll find the E we'll find the n and we'll find the D and now we go to this very last line if node. key. has word which would just be a single letter because remember we we keep taking the letters off and so if it has the last letter of the word that we passed in and it is the end so is end then we're going to return true that word is in the try else we're going to return false yeah so this last one was just the the print function this just kind of a helper function and so we're going to create an array of every word but right now it's just going to be empty then we're going to search we're going to pass in we going to search if we don't pass anything here it's going to set this to the root node um actually I bet we don't even need this let me just run that just to see if it does the same thing in the console yep we don't even need to set the node to the root node uh because when we first call The Search Command down here we already pass in this. root so we're just going to pass in a node and we're going to pass in a string here if node that keys that size does not equal zero that means there's still still more letters to look through so for each letters in the keys here let's say we're on the the root node so the letters in the key would be B D and S so for each of those letters we're going to run the Search Command again and then we're going to pass in node. keys. letter that means we're going to pass in the the node at that letter so we would pass in the B node and then we're going to add that letter to the string at the beginning the string would be empty so do string. con concat that means we're going to add one letter we're going to add the letter b and basically since this is recursive it's going to keep going and keep adding each letter it's going to keep concat each letter to the string until it's formed the whole word and then see if node. is end if we've gone to the last node in the word it's going to do word. push string so that's our words arrayed if we've gone to the last letter in the word we're going to push the word onto the words array now else that's else to this if statement if the no. keys that size does equal zero then we're at the last letter of a branch if string. length is is more than zero where we're just going to push that word on to to the words array or else returned undefined and here's where we call that search function for the first time so here's the search function um and then we call it for the first time and it's just going to go over and over until it gets every word in the try if words. length is more than zero it's going to return that word the words the words array or it's going to return null if there's no words in the array so that's a try thanks for watching my name is Bo KS don't forget to sub subscribe and remember use your code for good
