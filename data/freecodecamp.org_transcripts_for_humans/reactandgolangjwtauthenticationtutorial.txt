With timestamps:

00:00 - in this tutorial we'll create an
00:02 - authentication system using react and go
00:06 - so this is up
00:08 - it shows you are not logged in
00:11 - and we can register
00:13 - our user so let me register one user
00:16 - right now test
00:18 - email will be tested test.com and the
00:21 - password is test
00:23 - when i register the user i will redirect
00:26 - to the sign-in form
00:28 - where here i can write the email that i
00:31 - just created
00:32 - and the password that i just created
00:35 - and i can go to the main page where i
00:38 - show hide test so test is the name
00:42 - and i have a logout button here
00:45 - where i can log out so this is the
00:49 - authentication that we will build
00:51 - also something to mention is that we
00:54 - will use http only cookies so
01:03 - once we log in we'll generate this
01:06 - cookie
01:07 - that shows that we are logged in once we
01:10 - remove it
01:12 - we are logged out so if you want to see
01:15 - how to make this page follow this
01:17 - tutorial
01:18 - before building the app i would like to
01:20 - remind you that my channel is a channel
01:23 - that combines multiple frontend
01:25 - frameworks with multiple backend
01:27 - frameworks
01:29 - this tutorial covers react and go
01:32 - but if you want to combine react with
01:34 - one of these backend frameworks or go
01:37 - with one of these fronted frameworks
01:41 - go to my channel
01:42 - and you will find the videos there i
01:45 - combined videos using playlist
01:48 - now let's build the apps
01:51 - now let's download and install go before
01:54 - i start make sure to know the basics of
01:57 - go
01:58 - so if you are a total beginner make sure
02:01 - to watch a tutorial about go basics
02:03 - first
02:04 - so with that being said let's get
02:07 - started click download go and
02:10 - download the right version for your
02:12 - machine
02:14 - also make sure to download mysql
02:16 - download the mysql community server and
02:19 - mysql workbench
02:22 - also the golf framework that we will be
02:24 - using is go fiber so the fiber framework
02:28 - fiber is a framework inspired by
02:30 - express.js so if you know express.js it
02:34 - it will be easier for you to learn fiber
02:37 - so i'll copy this code
02:39 - and
02:40 - in my project here which is an empty
02:42 - folder i'll create a go file
02:45 - main that go
02:48 - i'll call a package main
02:51 - and i'll create a function
02:53 - so paste the code actually
02:56 - so before i run this up
02:58 - first make sure to
03:01 - get this package
03:03 - so to get this package i already got it
03:06 - from my machine but if you don't have it
03:09 - you should run this command go
03:11 - get
03:13 - go fiber and this will install it in
03:16 - your machine also make sure to configure
03:18 - your go path
03:20 - i will use the version 1 here
03:23 - because the version 2 throws an error
03:25 - for some reason
03:28 - and we will listen to port
03:30 - 8000 to run this up
03:33 - run go run
03:35 - main.go
03:38 - and fiber will run on port 8000 let's go
03:41 - to port 8000 localhost port 8000
03:46 - hello world so
03:47 - this is our first go up
03:50 - now let's connect with our database so
03:54 - i'll create a connection to my local
03:56 - database here to mysql
04:00 - so
04:01 - the user is root
04:03 - password is root root and the database
04:06 - is youtube
04:10 - go out
04:14 - so
04:15 - this is my local database which is empty
04:19 - now let's connect with this database to
04:21 - connect with the database we will be
04:24 - using
04:25 - gorm
04:26 - so
04:27 - let's copy this uh
04:29 - command here go get
04:32 - to install gorm
04:34 - i'll close the server and install this
04:38 - also make sure to install also the
04:40 - driver i won't be using sqlite but i
04:43 - will be using mysql
04:46 - so the driver is mysql
04:52 - so with this
04:54 - we can
04:56 - connect with gorm so here
04:58 - i will import so i can have multiple
05:01 - imports here if i use the
05:04 - brackets
05:05 - and here we need
05:08 - gorm io slash gorm and also
05:12 - gorm.io
05:14 - driver mysql
05:16 - we need those two now let's connect with
05:18 - the database so we have a connection
05:22 - and then errors because go returns
05:26 - can return multiple variables
05:29 - gorm
05:31 - open
05:33 - mysql
05:35 - open
05:36 - we need a string inside which i will add
05:38 - it later
05:40 - and the other parameter is
05:43 - gorm
05:44 - config
05:46 - so this is a connection
05:49 - if
05:51 - an error happens so if error is not nil
05:56 - we need we need to panic so
06:00 - could
06:01 - not connect
06:03 - to the database
06:07 - so panic will
06:09 - stop our app if an error happens
06:12 - now the connection for the moment
06:15 - we won't be using it so i will put an
06:17 - underscore there
06:19 - and uh if we don't panic here it means
06:23 - that the connection is successful so
06:24 - let's round up
06:30 - so we panicked because i forgot to add
06:33 - the
06:35 - dns here
06:36 - so let's do that
06:39 - so
06:40 - my user
06:41 - is root
06:43 - then i need to pass a password which is
06:46 - root
06:47 - and then
06:49 - i put a net here and now we need the
06:51 - database
06:53 - youtube
06:56 - go out
06:59 - so this is our local database connection
07:02 - now let's run the app again
07:04 - and now we can see that
07:06 - fiber is running it means that we
07:08 - successfully connected with the database
07:11 - now let's restructure the folders so
07:14 - create a folder here
07:17 - database
07:20 - one folder
07:22 - controllers
07:27 - and
07:28 - we need
07:29 - the routes
07:32 - and that's it for the moment so first
07:35 - let's create the database
07:37 - file so we need here to add the
07:39 - connection
07:43 - connection that go also the package is
07:45 - database so usually the package name is
07:48 - the name of the directory
07:51 - so
07:52 - i will cut this code
07:55 - i will go to connection.go and here i'll
07:58 - create a function
08:01 - i'll call it connect
08:04 - and i'll paste this code so we need also
08:07 - to import the driver
08:09 - so drivermysql
08:13 - and
08:14 - we will be using this function here in
08:16 - main.gov so first let's import the
08:19 - database
08:20 - so to import it we have to use dot
08:23 - slash
08:24 - database so we import the directory
08:29 - and to use the function we use
08:31 - the package first
08:33 - connect
08:35 - and this won't change anything
08:37 - now let's add the route so create here
08:40 - go file
08:41 - routes
08:42 - i'll create a function
08:45 - setup
08:47 - and
08:48 - inside i will cut this code
08:51 - and i will
08:52 - put it here
08:54 - so we need up here
08:56 - so the app should be passed as a
08:59 - property here so up
09:01 - is a star fiber
09:05 - up
09:08 - and uh let's pass up here so we need to
09:11 - import also
09:13 - the routes
09:16 - in the routes
09:18 - we'll set up the routes and
09:20 - we will pass up inside
09:24 - so we have we are done with this also
09:27 - now we need this function so this
09:29 - function
09:30 - should be added in the controller so
09:33 - let's create
09:34 - a go file
09:35 - i will call it house controller
09:39 - here i will create a function
09:42 - hello
09:44 - and this function so
09:47 - i will paste this function first and i
09:49 - will name it here hello
09:53 - and now let's use this
09:55 - function let's go to the routes and here
09:58 - we need to import
10:01 - the
10:03 - controllers
10:05 - and to call the function we have to call
10:08 - here controllers
10:10 - hello
10:11 - just like this
10:14 - and now let's run our app
10:20 - and
10:22 - this will return the same so
10:26 - we restructured our
10:28 - files and now let's create the register
10:31 - function so i will rename this to
10:33 - register
10:37 - and in the routes this will be the
10:39 - register function
10:41 - and this will be a post request
10:43 - to
10:44 - api slash register
10:48 - i'll stop the server for the moment
10:52 - and now let's go to the register
10:54 - function
10:55 - and for the moment let's return what the
10:57 - data we will send with the post request
11:00 - so
11:01 - to get the data from the post request i
11:03 - will declare a variable data here
11:05 - which will be a map string
11:09 - string
11:11 - so this is similar to a array with a
11:15 - string as a key and string as a value
11:18 - so to pass the data
11:21 - we have to call a function
11:23 - c
11:24 - body parser and we will pass the data as
11:28 - a reference
11:29 - this way we will get all the
11:33 - request data that we will send
11:36 - this returns an error
11:40 - so
11:42 - we should handle there there are two
11:45 - ways to end the layer one is to add an
11:47 - if condition here
11:48 - if error
11:49 - is not nil
11:51 - then we return the error
11:54 - or an an even shorter way which is uh i
11:58 - will add the if condition here
12:00 - and i will add an
12:03 - exclamation here
12:05 - and this looks
12:07 - uh shorter and cleaner
12:11 - now we got
12:12 - we handle the error we got the data and
12:15 - now let's return
12:17 - see
12:18 - json the data
12:20 - to see what we send so to see the data
12:23 - that we sent first make sure to install
12:26 - postman
12:27 - i already did it so now
12:29 - let's send a post request
12:31 - to http
12:36 - localhost port 8000
12:39 - api register
12:42 - this is a post request
12:44 - and what we want to send
12:47 - is a raw request
12:49 - so
12:50 - we'll send a name
12:53 - name
12:55 - email
12:58 - aaa.com
13:01 - and the password
13:03 - which will be
13:05 - one
13:07 - send
13:09 - so i didn't start the
13:11 - server
13:17 - so we returned exactly what we sent so
13:20 - if i change this to a
13:24 - this will change
13:25 - now we got the data now we have to store
13:28 - this data in the database
13:30 - so
13:31 - let's create a user table
13:35 - in our database
13:37 - to do that we have to create a directory
13:39 - now
13:40 - models
13:43 - and inside this directory i'll create a
13:45 - go file called
13:46 - user
13:48 - and let's create a struct for the user
13:50 - so structs are similar to classes in
13:53 - other languages so type
13:57 - user
13:58 - struct
14:00 - and this user will have an id
14:03 - as an unsigned integer
14:06 - a name
14:07 - as a string
14:10 - an email
14:12 - as a string
14:14 - and a password
14:16 - as a string
14:20 - so this is our user struct now let's
14:22 - create a migration to create a table in
14:25 - our database
14:26 - so let's use the connection for our
14:29 - database here
14:30 - so
14:31 - get the connection
14:34 - and to
14:36 - migrate
14:37 - we have an option here connection
14:40 - auto
14:41 - migrate
14:42 - so let's import the models
14:47 - models and we need to auto migrate the
14:50 - user so
14:52 - we add and here
14:54 - models
14:55 - user
14:57 - with this we can auto migrate the users
15:01 - let's refresh here we don't have any
15:03 - tables
15:04 - and if i restart the server
15:09 - we can see a users table was created so
15:12 - we have this table with all the fields
15:16 - that we need
15:17 - so
15:19 - we can add also extra configuration for
15:21 - example i want this
15:24 - email to be unique so i add here gorm
15:29 - uniq
15:32 - with this this will make the email
15:35 - unique if i restart the server
15:40 - refresh and as we can see the email was
15:43 - generated unique
15:46 - so
15:47 - gorm is a pretty
15:49 - powerful library now let's create the
15:52 - user here
15:55 - so first let's create a user variable
16:00 - which is equal so first let's import the
16:02 - models here
16:08 - which is equal to models
16:12 - user
16:13 - and we need to pass the name
16:17 - which is data
16:20 - name
16:22 - like this
16:24 - we need to pass the email
16:26 - which is data email
16:30 - and we need to pass the password but the
16:33 - password we won't set the password
16:35 - directly like this
16:38 - because
16:39 - we need to hash the password so let's
16:41 - get a package to hash our password
16:45 - to search for
16:46 - gop packages go to go.dev
16:49 - and click discover packages
16:52 - here we need a package
16:54 - called
16:55 - bcrypt
16:58 - and this is a package that we want
17:02 - copy the
17:03 - link here so we can install it so
17:10 - go get
17:12 - bcrypt
17:14 - so i already did it
17:17 - and now we can add here
17:19 - bcrypt
17:21 - now let's use it so let's create a
17:23 - variable password
17:26 - and we return also an error which i
17:28 - won't handle it
17:30 - is equal to bcrypt
17:34 - generate from password
17:37 - and we need to pass our password
17:41 - so data
17:42 - password
17:44 - but this won't accept a string so
17:47 - what we need to do here is to convert
17:49 - these two in a slice of bytes so bite
17:54 - like this
17:56 - and the other parameter is a cost which
17:59 - i will put 14 here
18:01 - so the
18:03 - this is how we generate a password
18:07 - and we needed to
18:09 - make it as a byte array
18:11 - and this new password can be assigned
18:13 - here
18:15 - the problem is
18:17 - that this password is a byte array also
18:21 - so how do we convert it
18:23 - the best way is to make this password
18:26 - also a byte array
18:30 - like this
18:32 - so with this
18:33 - we can
18:36 - use this hashed password but also we
18:38 - need to auto migrate to the database so
18:41 - for the moment i will return the user
18:43 - here because every variable needs to be
18:45 - used
18:46 - and let's restart the server
18:49 - to
18:51 - see the changes here
18:54 - actually we won't see any changes
18:56 - because the byte array is you it will be
18:59 - still returned as a long text here so
19:02 - everything will work fine
19:05 - now if we send the request again like we
19:08 - did before
19:10 - we will see that
19:12 - the password is hashed and also we
19:15 - return an id here which is zero so we
19:18 - haven't assigned that id in the user
19:21 - model
19:23 - if we don't assign anything it will
19:25 - initialize it
19:26 - 0 for numbers and empty strings for
19:30 - strings
19:32 - so
19:33 - now let's insert this user to the
19:36 - database
19:37 - and we have to get this variable here
19:40 - so how do we share this variable from
19:42 - this folder to the auth controller
19:45 - we have to create a global variable
19:47 - right now
19:48 - where
19:50 - db
19:51 - is
19:52 - a pointer to gorm
19:55 - db
19:58 - and we have to assign it with this
20:00 - variable here so db
20:03 - is equal to the connection
20:06 - so these two pointers are
20:08 - referencing the same variable which is
20:11 - the database connection
20:14 - now
20:14 - we use this variable in our controller
20:18 - so let's get the database
20:23 - and to get the variable we have to use
20:25 - database
20:27 - db
20:28 - so with this we got
20:30 - this variable so the connection
20:33 - and we have to create now
20:37 - and we will pass the user as a reference
20:40 - like this
20:41 - so with this
20:42 - we can insert this user to the database
20:46 - let's try it
20:47 - send a request so this won't create
20:50 - because i forgot to restart the server
20:54 - send it again
20:56 - and now as we can see the id is one so
20:59 - we successfully inserted the user in the
21:01 - database let's see
21:05 - so this is our generated user
21:09 - so
21:10 - our user is created now let's login with
21:13 - this user so let's create a function
21:17 - login
21:19 - this will have the same parameters
21:24 - and let's add it also to the routes
21:27 - so this will post to api slash login
21:31 - and the function is controllers login
21:35 - so we added this
21:38 - now let's make the login work
21:41 - so we will get
21:43 - the data like the register function
21:46 - so
21:47 - we will send here an email and a
21:49 - password so by the email we want to get
21:52 - the user with that email
21:55 - so
21:56 - first let's get a variable user
22:01 - as a models
22:03 - user
22:05 - and now we need to call the database
22:08 - db
22:09 - where
22:12 - email
22:14 - is equal to question mark and the email
22:16 - value is data
22:19 - email
22:21 - and we want to get the first result and
22:24 - we want to assign it to this user
22:27 - variable
22:28 - so with this we will get the user based
22:31 - on the email
22:33 - if the user
22:37 - id
22:38 - is equal to zero this means that we
22:41 - haven't found the user
22:43 - so we have to set the status
22:46 - to fiber
22:49 - status
22:52 - not
22:53 - found
22:54 - 404 basically
22:56 - and we have to return here
22:58 - see
23:00 - json
23:01 - fiber
23:03 - map
23:05 - message
23:09 - user not found
23:15 - so
23:16 - if we don't find the user we return
23:19 - status not found and we return this
23:22 - message
23:23 - so fiber map is basically
23:26 - a map with a string and interface so we
23:29 - can put anything there
23:33 - if we got the user
23:35 - then we have to compare the password so
23:39 - to compare the password we have another
23:42 - function from bcrypt which is compare
23:44 - and hash password so the first parameter
23:48 - is the user password
23:51 - which is a hashed value and the second
23:53 - parameter is a byte
23:55 - so we have to convert it also to bytes
23:58 - of
23:59 - the password that we have so data
24:04 - password
24:06 - this returns an error
24:11 - and
24:12 - if
24:12 - an error happens
24:14 - so let's make it shorter so error is not
24:18 - nil here
24:23 - then
24:24 - we
24:25 - send the status so
24:27 - status
24:29 - fiber
24:30 - status bad request
24:35 - and we return
24:37 - c
24:38 - json
24:40 - fiber
24:42 - [Music]
24:44 - map message
24:49 - incorrect
24:50 - password
24:53 - so if we get an error here it means that
24:56 - the password is not correct
24:59 - if we go here it means that we
25:01 - successfully uh
25:04 - send the right email we retrieve the
25:05 - user and we got the right password so
25:08 - for the moment i will return
25:12 - see
25:12 - json the user
25:16 - and let's see if this works so i'll copy
25:18 - this
25:20 - url
25:21 - i'll paste it here and this will be
25:23 - login
25:24 - let's send a post
25:26 - request let's send the body
25:30 - so this will be an email
25:33 - a at a.com
25:36 - and the password
25:39 - is
25:40 - what is the password one
25:42 - so for the moment
25:45 - i'll send the wrong email
25:50 - so did i restart the server
25:56 - user not found so if i put the wrong
25:58 - email it means the user is not found if
26:01 - i put the wrong password
26:05 - incorrect password
26:07 - if i put the right one
26:11 - then we retrieve the user so
26:14 - we successfully retrieve the user here
26:17 - but we want to return a jwt token
26:21 - to return a jwt token we need to install
26:24 - another package
26:26 - jwt
26:29 - and this is a package that we want to
26:31 - use
26:32 - so let's copy the url
26:35 - and install it here
26:39 - go get
26:41 - this package
26:42 - i already have it so i can use here on
26:46 - top
26:49 - and
26:50 - now let's create a jwt token
26:53 - so first we need the claims variable
26:57 - which is equal to this package jwt
27:02 - new
27:03 - with
27:04 - claims
27:07 - so this is a function we need a method
27:10 - which we get it from
27:11 - jwt
27:13 - signing method
27:17 - hs2245 so there are a lot of methods but
27:20 - i will use this
27:22 - hs 2
27:24 - 5 6
27:27 - and
27:28 - the second parameter
27:30 - is jwt
27:32 - standard claims
27:34 - and inside we will pass an issuer
27:38 - the issuer is our user so what we want
27:40 - to pass here is the user
27:44 - id
27:45 - unfortunately the user id is not a
27:48 - string so this accepts a string so let's
27:50 - convert the user id
27:52 - to a string so first we have to import
27:54 - here
27:56 - str conf
27:58 - and this can convert this to a string so
28:02 - we use strconf
28:04 - we use
28:05 - this function
28:07 - which i cannot pronounce it
28:10 - and this accepts an ins so
28:13 - user id is
28:14 - you in so this
28:17 - user
28:19 - id
28:20 - cannot be sent like this but we have to
28:22 - convert this to an int
28:27 - so like this we converted the user id to
28:30 - a string
28:33 - so this is claims
28:39 - and we need
28:42 - an
28:42 - expiry expired sat so let's import also
28:47 - time here
28:51 - and
28:52 - when we
28:53 - want to expire this token so we have to
28:56 - pass time now
29:00 - we need to add
29:02 - time
29:04 - hour
29:05 - times
29:07 - 24
29:08 - so this means is one day
29:15 - and this needs to be converted to unix
29:17 - time
29:18 - so this is our claims
29:21 - so it will expire after 24 hours
29:26 - so
29:27 - now let's create a token
29:30 - and we will get also an error
29:33 - is equal to claims
29:37 - sign string
29:41 - and here we need to pass a byte
29:44 - array
29:48 - of secret
29:51 - so
29:53 - this secret is a secret key that we need
29:56 - to store it in our app so create a
29:57 - constant variable here on top so const
30:02 - secret
30:03 - key
30:07 - and this secret key
30:11 - should be stored in our app
30:14 - and
30:16 - now let's handle the error so if
30:19 - the error
30:20 - is not
30:21 - nil
30:23 - we return
30:24 - the error
30:26 - or we return a better message so i will
30:28 - do it like this
30:32 - we return internal server error
30:36 - and the message is
30:39 - could
30:40 - not
30:41 - log in
30:45 - so we got this now let's return the
30:48 - token
30:52 - and let's see it so
30:54 - let's login again so let's restart the
30:56 - server
31:01 - send the request
31:03 - and as we can see this is a token that
31:06 - we
31:07 - generated
31:08 - now we don't want to
31:10 - return it like this
31:11 - we want to store it in cookies so let's
31:14 - create a cookie
31:19 - is equal to fiber
31:21 - cookie
31:24 - so
31:25 - to create a cookie we need a name
31:28 - i'll name it
31:30 - jwt
31:32 - value
31:34 - the value is a token itself
31:37 - expires
31:39 - so let's copy this part here
31:44 - and this needs not a unix time this
31:46 - needs a time like this
31:49 - and the last one is http only it's
31:52 - important to add http only here
31:55 - because the front end cannot
31:58 - access this cookie so this cookie is
32:00 - meant only to be
32:02 - stored in the front end and stay and
32:04 - send it but the front end doesn't need
32:07 - to access it
32:09 - and to
32:10 - save it we need to
32:13 - add here c
32:15 - cookie
32:16 - cookie
32:19 - select this as a reference
32:23 - and that's it so in the end we can
32:25 - return fiber
32:30 - map
32:34 - message
32:35 - success
32:37 - because we don't want to return the
32:39 - cookie the front end will only have the
32:42 - cookie and nothing more so
32:45 - it won't
32:48 - be able to access it or use it
32:51 - so
32:52 - this is not enough we need to add here
32:55 - on main another configuration
32:58 - so first our front end will have
33:01 - course issues so we need to use up
33:05 - use
33:06 - we need to use course
33:10 - new so
33:12 - don't forget also to import this url
33:14 - here
33:16 - so course problems are the problems that
33:18 - uh
33:20 - our backend will run on port 8000 and
33:22 - the front end will run on different port
33:26 - so if we don't add this
33:28 - uh
33:29 - our browser won't allow the request and
33:31 - it will draw an error
33:33 - if we add this then
33:35 - it will
33:36 - ignore that and we will have the request
33:40 - still we need also one configuration
33:42 - which is course
33:46 - config
33:48 - allow credentials to true
33:50 - so this is really important
33:53 - and with this
33:55 - the front end can get the cookie that we
33:58 - sent
33:59 - and
34:00 - it can send it back
34:02 - so this is really important
34:04 - if we want to authenticate using http
34:08 - only cookies
34:10 - so with this
34:12 - let's test it
34:13 - we don't have any cookies
34:16 - and let's send the request
34:19 - so i forgot again to restart the server
34:27 - so message is success but we see here we
34:31 - have a cookie jwt
34:33 - which is http only
34:35 - so we need to use this cookie now to
34:37 - retrieve the logged in user so let's do
34:40 - it now function
34:42 - user
34:46 - i will copy this part
34:52 - and
34:53 - i will add this to the route so this is
34:56 - a get request
34:57 - api slash user
35:00 - and controllers user
35:03 - let's go to the functional
35:05 - and what do we want to do with this
35:07 - function first we have to get the cookie
35:11 - so the cookie is cookie
35:14 - is equal to c
35:17 - cookies
35:19 - and we need the name which is jwd
35:22 - with this we got the cookie
35:24 - now let's retrieve the token so the
35:26 - token
35:28 - and an error are equal to jwd
35:32 - pars
35:33 - with claims
35:36 - so
35:37 - this function accepts first the cookie
35:42 - because the cookie is a string right now
35:45 - we need the claims
35:47 - the claims are gwt standard claims so we
35:50 - need to pass it with
35:52 - reference
35:53 - and the third parameter is a function
35:56 - which
35:58 - accepts a token
36:00 - and the jwd token is a reference
36:04 - and this will return an interface and an
36:06 - error
36:07 - so inside this function we need to
36:09 - return the secret key that
36:13 - we generated here
36:15 - so we have to return
36:18 - a byte array
36:21 - of the secret key
36:24 - and the error is nil so we don't want to
36:27 - return an error
36:29 - and that's it
36:30 - so if
36:32 - the error
36:34 - is not nil
36:37 - then we want to
36:38 - return
36:40 - i'll copy this paste it here fiber
36:43 - status unauthorized
36:46 - and the message is
36:50 - unauthenticated
36:54 - so if this returns an error it means
36:56 - that the user is not logged in
36:59 - and now we got the token
37:03 - let's get the claims from the token
37:05 - so claims
37:07 - are equal
37:08 - to token
37:10 - claims
37:13 - and let's return them c
37:15 - json claims
37:21 - so let's test this function
37:26 - and i will copy this url
37:29 - paste it here and this is a get request
37:31 - to user
37:33 - send the request and as we can see we
37:36 - have an expiry time and also an issuer
37:39 - so this is the idea of our user
37:42 - so we got the issuer here and now let's
37:44 - retrieve the
37:46 - id
37:48 - but there is a problem
37:50 - claims
37:52 - has only a valid function it doesn't
37:55 - have an issuer function
37:58 - why is that the case because this claims
38:03 - is a
38:05 - is an interface that has only a valid
38:08 - function what do we want is to return a
38:11 - standard claims
38:15 - and this has our issue that we want
38:19 - so
38:20 - how do we convert these claims to a
38:22 - standard claims
38:24 - to convert it we have to use
38:27 - dot
38:28 - parenthesis
38:30 - and this will be converted to jwt
38:32 - standard claims
38:34 - so this is how we convert one type to
38:37 - another and now these claims
38:40 - will have the issuer that we want
38:43 - so now let's use this issuer in order to
38:46 - retrieve the user
38:47 - so let's first create a variable
38:51 - user is a type of models
38:53 - user
38:54 - and now let's query the database
38:56 - database db
38:58 - where
39:00 - id
39:02 - is equal to question mark and the id is
39:05 - claims
39:06 - issuer
39:09 - the first
39:10 - result
39:11 - is our user
39:14 - and in the end we want to return the
39:16 - user
39:20 - let's see
39:21 - so let's restart the server
39:29 - so we got an error
39:33 - so as we can see we converted
39:36 - this to a standard claims but this needs
39:38 - to be a pointer of standard claims
39:42 - let's restart again the server
39:46 - and we successfully retrieve the user
39:49 - so
39:51 - with this
39:53 - we don't send anything
39:55 - we only send the cookies and we treat
39:57 - the user i forgot to mention that if we
40:00 - open a new tab
40:02 - the cookie will be preserved that's why
40:04 - we retrieve the user here
40:07 - so we got
40:08 - the user and
40:11 - one thing before we log out
40:14 - i would like to change the format here
40:16 - of the
40:19 - attributes here
40:21 - so first i don't want to show the
40:23 - password and second i want
40:25 - this to be lowercase
40:27 - so how do i do this
40:30 - let's go to the user
40:31 - here we can add some configuration
40:35 - like how the json will return so
40:38 - this id will return like this
40:41 - the name
40:42 - will return like this
40:44 - email we can add it here
40:48 - like this so this can support multiple
40:51 - configurations and the password
40:55 - we put a minus here which means that we
40:58 - don't want to return the password
41:02 - with this let's restart the server
41:06 - send request again and this is our user
41:08 - so
41:10 - name email all
41:13 - lower case and the password is not
41:15 - returned
41:17 - now
41:17 - let's
41:18 - add the last function which is logout
41:28 - now let's
41:30 - copy this part
41:35 - and to log out now we have to remove the
41:38 - cookie that we just created here
41:41 - so how do we remove cookies
41:43 - to remove cookies is really strange
41:46 - because we don't actually remove it
41:50 - cookie
41:52 - to remove cookies we create another
41:55 - cookie
41:56 - and we set the expiry time in the past
42:00 - so
42:03 - let's create this cookie
42:04 - the name
42:05 - will be jwt
42:08 - the value
42:10 - will be an empty string
42:13 - the expiry
42:14 - so this is the part that we will
42:17 - remove our cookie so we set the expiry
42:20 - time
42:21 - to now
42:25 - and we will
42:28 - add here
42:30 - a time which is time
42:33 - hour
42:35 - with a minus so this cookie expired one
42:38 - hour ago
42:40 - and http only is equal to true
42:44 - so this is how we remove cookies there
42:47 - is no way to remove
42:48 - the cookies in the browser just
42:51 - we set
42:52 - the expiry time in the past
42:55 - so with this the cookie will be removed
42:58 - we have to set
43:00 - the cookie
43:04 - and to the response and let's return the
43:06 - response
43:07 - so return c
43:10 - json
43:11 - fiber
43:12 - map
43:16 - message
43:19 - success
43:22 - and that's it so let's add it to the
43:24 - routes
43:27 - logout
43:30 - logout
43:32 - so with this we completed the logout
43:35 - function
43:36 - let's send
43:37 - so first let's
43:39 - restart the server
43:42 - let's copy the url here
43:44 - paste it here this is logout
43:47 - and we need to send a post request
43:51 - so before i delete the cookie we have
43:53 - the cookie here so we retrieve the user
43:56 - and let's send a post request to the
43:58 - logout
43:59 - method not allowed so this is a post
44:03 - request
44:06 - let's restart
44:10 - send it again
44:11 - and we have message success and the
44:13 - cookie is removed here
44:16 - so if we send the request to the user
44:18 - now we get unauthenticated because we
44:21 - don't have the cookie
44:24 - if we log in again
44:26 - we generate another cookie
44:28 - then we retrieve the user
44:30 - so this is how authentication works in
44:34 - golang thank you for watching this video
44:38 - and make sure to like and subscribe
44:42 - now to install react make sure you have
44:44 - node.js installed if you have not js
44:47 - installed right open the terminal and
44:49 - write this command mpx
44:52 - create
44:53 - react
44:54 - app
44:55 - now we need the name of the app i'll
44:57 - call it react auth
45:00 - and i will add
45:02 - template
45:03 - typescript
45:06 - i like to use typescript on my projects
45:09 - now let's wait till it is completed
45:13 - so the project is created now let's go
45:15 - to the folder
45:18 - and run npm start
45:21 - react will run on port 3000 localhost
45:25 - port 3000
45:27 - so this is our running react app
45:31 - now i will open the project with my ide
45:35 - also i will close the terminal here
45:39 - so
45:41 - let's use it directly in my ide here
45:44 - npm start
45:49 - so nothing has changed
45:52 - now
45:54 - i will delete the test file and let's
45:56 - add the template for our
45:58 - project
46:00 - so
46:01 - let's go to get bootstrap.com
46:06 - go to get started first and let's add
46:09 - the bootstrap link to our
46:12 - index.html
46:15 - i'll add it here
46:18 - so we added bootstrap now let's add a
46:20 - template so the template that we want is
46:23 - this sign-in form here
46:26 - let's inspect
46:28 - our viewpage source better
46:31 - and here i will copy
46:33 - the
46:34 - div
46:35 - here the main div
46:37 - and i will add it to up.tsx
46:40 - so i'll paste it here so i'll keep the
46:44 - class name up here
46:47 - now it's complaining because
46:49 - some tags are not closed i'll make some
46:52 - changes so i'll remove the image here i
46:56 - will
46:57 - add a closing tag here for the
47:00 - input
47:02 - i will remove all the labels
47:06 - i will remove this
47:08 - also and this
47:10 - so this needs also a closing tag
47:15 - also make sure to change class to class
47:19 - name
47:20 - so
47:21 - these are class here and i change it to
47:23 - class name
47:25 - my id automatically does it if yours
47:28 - doesn't make sure to change it
47:32 - this now will look
47:34 - like this still
47:36 - is not looking good
47:38 - we still have to add the styles here
47:41 - so
47:42 - go to
47:43 - sign in the css here
47:45 - copy all the code
47:47 - and add it to our app css
47:51 - i'll paste it here save it
47:54 - so
47:55 - it looks a little bit better
47:59 - so let's remove this body and html
48:02 - styles here
48:06 - and now it looks better
48:07 - so
48:10 - this is not a css tutorial so if you
48:12 - want to learn css
48:15 - you can watch other tutorials i will
48:17 - cover only the authentication part here
48:20 - now here in the form let's remove this
48:23 - id here and this out of focus
48:27 - i want to keep everything really
48:29 - simple
48:32 - and this won't change anything
48:36 - so it doesn't now i want to add here a
48:39 - menu so we can navigate to different
48:41 - pages
48:42 - so go again to get bootstrap.com
48:45 - examples
48:47 - and here i will get a navigation menu so
48:51 - which one is the simplest
48:57 - i'll pick this navbar static
49:00 - i'll view the paste source here
49:03 - and i will copy the navigation here
49:07 - and i will paste it here on top
49:10 - so still we need to close the tags that
49:14 - are not closed so we have a form here
49:16 - with a button
49:17 - so let's close first the input here
49:22 - and let's remove this tab index and i
49:24 - guess we don't have any problems so
49:27 - don't forget also to cl change the class
49:29 - with the class name
49:31 - so this is our menu now
49:35 - let's uh remove some stuff
49:38 - we don't need this button
49:40 - so we just need
49:42 - i will name this home here
49:45 - also i will remove this form
49:50 - and
49:50 - for the list items here
49:53 - i'll keep only one so i will remove the
49:55 - classes here
49:58 - and this will be
50:00 - login
50:05 - and i will add another one for the
50:08 - register
50:12 - so what is missing that is complaining
50:16 - maybe i forgot to close the ul here
50:22 - so
50:23 - it's working fine
50:26 - now let's split this into components
50:29 - so create a directory
50:33 - actually i'll call it pages
50:37 - and the pages that we want is the login
50:43 - dot tsx
50:48 - so
50:50 - tsx is the version of jsx
50:53 - the typescript version of jsx
50:56 - so create your component
50:58 - i have a shortcut for creating a
51:00 - component so you should write it
51:02 - yourself if you don't have that shortcut
51:06 - let's add the html here and this this
51:09 - login form so
51:12 - i'll cut this
51:14 - and i will add it to the
51:16 - login tsx
51:20 - for the moment i will just add here
51:24 - login
51:26 - make sure also to import it because my
51:28 - id dot does it automatically
51:31 - and i'll create a new component called
51:34 - navigation so
51:37 - components
51:39 - i'll call it
51:42 - a nav
51:44 - so this is a tsx file also
51:47 - i'll cut this code
51:52 - and i will paste it
51:54 - so let's create the component
51:56 - i'll paste it
52:02 - here navigation
52:06 - so i will add it
52:11 - like this
52:14 - it doesn't work so
52:16 - i will import it
52:21 - so
52:22 - nothing has changed so close the other
52:24 - tabs
52:26 - and now let's
52:28 - add
52:28 - other pages
52:30 - and let's add the router so we can move
52:33 - to other pages so we need
52:36 - a register
52:41 - so i'll just name it register for the
52:43 - moment
52:45 - and another page called home
52:54 - home here
52:58 - so let's add them these pages
53:02 - here but
53:03 - we cannot replace them
53:06 - because we have to add another package
53:08 - so let's install it npm install
53:12 - react
53:13 - router
53:14 - dom
53:16 - and the typescript version so
53:19 - react
53:20 - router
53:21 - done
53:23 - every time you install a package the
53:25 - typescript version has
53:27 - it types in front of it
53:30 - so
53:32 - the package now is installed now let's
53:34 - use it
53:36 - so let's wrap let's change this login
53:39 - here
53:40 - to browser router
53:44 - import also browser router from reactor
53:47 - router dom and to add the pages we have
53:50 - to add
53:51 - route
53:54 - we need to import also route here
53:59 - and this has a
54:01 - path
54:03 - so the main page so just slash will be
54:06 - the
54:07 - home component so here we will add
54:10 - home
54:13 - so import also home here
54:16 - slash login
54:19 - will be the login component
54:22 - and slash register
54:26 - will be the register component
54:31 - let's see if it works so we have home
54:34 - here so we are the home component
54:36 - now we cannot move because we haven't
54:38 - made the links work
54:40 - but we can go to other pages with
54:43 - login here
54:44 - we can see
54:46 - the login page but we see home here
54:49 - why do we see home there
54:51 - is because
54:53 - the path matches the path with the
54:55 - register here
54:57 - and if we want to distinguish we have to
54:59 - add here
55:00 - exact
55:01 - so this is the exact path and now we
55:04 - don't have home there
55:06 - register
55:07 - also that works so
55:11 - every component has been rendered now
55:14 - let's add the links to the navigation
55:16 - so we have to change this anchor links
55:18 - right now two
55:21 - links
55:24 - from react router dom so import link
55:27 - from react router dom and this
55:30 - will point to
55:35 - the main page
55:37 - let's change also this
55:41 - other parts
55:44 - so this will point to
55:47 - slash login
55:49 - and this is linked to
55:54 - slash register
55:58 - let's see and we get an error
56:02 - there is that you should not use links
56:05 - outside a router
56:07 - so the error is because
56:11 - the navigation is outside the browser
56:13 - router
56:14 - and we can fix that by
56:17 - moving the browser router here
56:21 - and
56:24 - using
56:25 - the navigation inside
56:28 - and now everything is correct we can
56:30 - navigate to other pages
56:33 - now let's complete the register
56:36 - because we have to register first so we
56:39 - can log in
56:40 - now let's go to the register
56:43 - and the form will be similar with a
56:45 - login
56:47 - and i will paste it here
56:49 - please register
56:54 - and this is submit
56:59 - the register form has an email has a
57:02 - password and also has
57:04 - a first a name just a name so
57:09 - name
57:10 - email and password
57:13 - i kept it really simple so this is the
57:16 - register form now let's make this form
57:20 - work first
57:21 - we have to for every input we have to
57:24 - get a variable
57:26 - and
57:27 - [Music]
57:28 - we have to
57:29 - use the state for every variable so we
57:32 - have to get here the name
57:34 - set
57:36 - name
57:37 - is equal to use
57:38 - state and inside is the default value
57:44 - which will be an empty string
57:47 - so this is how we handle state in react
57:51 - [Music]
57:52 - the first
57:53 - is a variable and the second one is an
57:57 - actual function that changes this
57:59 - variable
58:00 - so
58:01 - i will add
58:04 - two other states one is for the email
58:08 - and this is set email here
58:10 - and the last one is password
58:14 - set password
58:17 - so where do we use these variables
58:19 - so let's use the functions first and we
58:22 - will use the functions once we change
58:25 - the input so we will add here listener
58:28 - on change
58:30 - and what will happen
58:32 - when we change the input
58:34 - will fire an event
58:36 - and we'll set
58:38 - the name
58:40 - to event.target.value
58:44 - so every time we change
58:46 - the name
58:48 - we will
58:49 - set the name here we will use the
58:51 - function let's do the same for the other
58:54 - inputs
58:56 - set email
58:59 - and this is
59:01 - set password
59:04 - so we set all the variables
59:06 - now we need to submit the form so we
59:10 - have
59:11 - a non-submit function here
59:13 - and let's create a function called
59:15 - submit
59:19 - and we will use it here
59:23 - so this function accepts an event
59:26 - and
59:27 - since we are in typescript we have to
59:30 - define the type of this event and is a
59:32 - type of
59:34 - synthetic event
59:37 - so don't forget also to import it
59:41 - when we submit a form it usually
59:45 - refreshes the page
59:47 - so in our case i will
59:50 - just show it to you
59:52 - i'll console log here
59:56 - the
59:57 - name
59:59 - the email
60:00 - and the password
60:03 - so i'm keeping this short because this
60:06 - is the same as name
60:08 - and the name variable but since they are
60:10 - the same
60:13 - i can use it directly like this
60:16 - and let's see
60:18 - if we console log here
60:22 - so
60:28 - submit so we saw console.log here but
60:30 - the page was refreshed and to prevent
60:33 - that we have to add event.preventdefault
60:38 - and now if we try to login to register
60:40 - sorry
60:44 - we console.log the actual values
60:47 - so
60:49 - now we have to use this
60:52 - values and to send it to our backend so
60:55 - i will cut this
60:58 - and let's send a request to the server
61:02 - using fetch first i will make this
61:04 - function a synchronous
61:06 - and to get the response from the server
61:12 - is equal to await
61:14 - fetch
61:16 - we have to pass here the endpoint which
61:18 - is http
61:20 - localhost port
61:23 - slash api
61:25 - register
61:27 - so this is a get request but we have to
61:30 - make it a post request we have to add
61:32 - here the method
61:34 - which is
61:36 - post
61:39 - and we have to add also the body
61:44 - and the body is the json that we cut
61:48 - but we have to make it to a string so
61:50 - json stringify and we will paste the
61:55 - values
61:57 - we need also a header
61:59 - so headers here
62:01 - and the header that we want to send is
62:05 - content
62:06 - type
62:10 - application
62:12 - json
62:15 - and that's it basically
62:17 - so
62:19 - the content
62:20 - is equal to weight response
62:25 - json
62:26 - and let's log
62:28 - the content here so let's see
62:30 - what the server does return to us
62:35 - so i still have the form here
62:38 - i will try to console.log
62:41 - submit and we created a user right now
62:45 - so
62:46 - the response was successful
62:49 - and what do we want to do once
62:52 - we successfully register a user we we
62:55 - want to redirect to the login
62:57 - so we'll remove all this
62:59 - and add another state here
63:03 - so
63:03 - first to redirect
63:06 - we have to use
63:09 - redirect
63:13 - we need to import it also
63:17 - redirect from react router dom
63:20 - and we have to return it
63:24 - redirect to
63:29 - login
63:32 - so this is the way we redirect
63:35 - and as we can see we are at the login
63:37 - page but now we cannot go to the
63:39 - register because we automatically
63:41 - redirect so we have to add a condition
63:43 - here
63:45 - if
63:47 - i'll create a variable
63:49 - just like the other variables
63:52 - this will be redirect
63:54 - and set redirect
63:59 - is equal to use state
64:02 - and the default state will be false
64:05 - so by default if redirect
64:12 - we won't redirect because it is false
64:15 - and now we can stay to the register page
64:20 - when we want to redirect is when this
64:23 - fetch
64:24 - has finished so here we'll set redirect
64:27 - to true
64:30 - with this
64:32 - once we register with another user
64:37 - test.com
64:41 - and now i am at the login page so now
64:45 - let's login
64:47 - go to the login page
64:49 - and just like the register
64:51 - i'll get the email and the password here
64:56 - and i will paste them here
64:58 - also
64:59 - when they change
65:02 - so
65:03 - on change
65:05 - we want to set the email to
65:08 - event.target.value
65:11 - and same for the password
65:15 - set password
65:18 - now we need to submit the form on submit
65:21 - here let's create the submit function
65:32 - submit
65:33 - and this will have an event which is a
65:35 - synthetic
65:37 - event
65:39 - and event.prevent default here
65:43 - so everything is
65:45 - correct
65:46 - now we need to send a request to the
65:49 - login so i will copy this
65:53 - i'll paste it here
65:55 - and the end point so make this
65:57 - asynchronous
65:59 - then point now is api
66:01 - login
66:03 - and we don't have the name so
66:07 - that's it so
66:09 - we need to send the email and the
66:10 - password
66:12 - but this is not enough
66:15 - so we can send the credentials and they
66:18 - will be correct
66:19 - but
66:20 - we need to get the cookie from the
66:22 - server
66:23 - to get the cookie from the server we
66:26 - need to add another configuration
66:27 - another option which is credentials to
66:30 - true
66:31 - it's not true it's include
66:34 - so
66:37 - with this
66:38 - when we login we will get the cookies
66:41 - from the backend
66:43 - so let's see it
66:46 - in the application now we don't have any
66:48 - cookies
66:50 - and let's try to login
66:52 - ata.com
66:53 - a
66:56 - as we can see we generated a cookie
66:58 - which is http only so
67:01 - the
67:02 - request was successful
67:05 - we got to the message here but
67:08 - we don't do anything to set it to the
67:10 - cookies so we just send the request and
67:13 - nothing more but since we have these
67:15 - credentials include here
67:18 - it means that
67:19 - we
67:21 - will get this cookie now
67:23 - in every request and this is a cookie
67:26 - that we need to use to our
67:28 - home to get the authenticated user
67:32 - so just like the register right now
67:35 - when we log in we want to redirect
67:39 - so
67:41 - i will
67:43 - copy and paste the same thing
67:46 - and we want to redirect to the main page
67:49 - here
67:51 - and set redirect to true
67:56 - so let's try to login again
68:01 - and we are at the home page
68:03 - here we want to display the user so
68:07 - let's uh
68:09 - here we need to call the user and
68:12 - since we don't have anything we have to
68:14 - use another function which is use effect
68:23 - so
68:27 - here we need to call a backend
68:29 - and
68:30 - i will do it like this
68:33 - since user effect doesn't accept async
68:35 - functions so this is not allowed
68:38 - and we have to call the backend
68:41 - uh i would like to make my function
68:44 - asynchronous and we have i want to do it
68:46 - like this so this is short for executing
68:49 - this asynchronous
68:51 - function here
68:53 - so i like it like this and you can use a
68:56 - different way of
68:57 - calling the back end
69:00 - and
69:02 - i'll copy this
69:06 - send it to the home now we don't want to
69:09 - send a post request
69:12 - and
69:15 - this method is get by default is get and
69:18 - this will be user here
69:21 - and that's it basically now let's see if
69:25 - our request will get the user
69:29 - so we get the authenticated user here
69:33 - we just the request will get the user we
69:36 - don't send anything just a get request
69:39 - and everything is gotten from this
69:42 - cookie here
69:44 - and uh
69:45 - let's
69:46 - before test the cookie i want to
69:50 - set the name here
69:52 - so
69:52 - we'll create here a variable
69:55 - name and set name
69:59 - and
70:00 - i forgot this is use state
70:02 - by default is empty string here we'll
70:06 - say hi
70:09 - name
70:13 - so when we get
70:14 - the user here will get a response
70:19 - and the content
70:23 - is equal to weight response.json
70:28 - and the content in our in this case is
70:30 - our user
70:31 - so
70:33 - we'll set the name
70:35 - to content that's name
70:40 - let's see if this works hi a so this is
70:44 - our user that is
70:46 - authenticated
70:48 - i will make a question mark here
70:52 - for a
70:54 - so i'll do it like this
70:58 - a set
70:59 - we will say
71:02 - hi
71:06 - with the name otherwise
71:09 - we will say you are not
71:13 - authenticated also or not login
71:22 - so we have high a here
71:24 - if we remove the cookie
71:26 - i'll clear it
71:30 - we get you are not logged in because
71:33 - we don't have the cookie and the
71:34 - response is
71:37 - throwing an error
71:38 - so we have to login again
71:43 - and now
71:44 - we show the name
71:48 - again here
71:49 - now the last thing that is left to
71:51 - change is the logout
71:54 - here for the login and register
71:57 - when we are logged in we want to show
71:59 - the logout button
72:01 - but there is a problem here because we
72:03 - get the user here on the home component
72:06 - and the the buttons are in the nav
72:08 - component
72:09 - so
72:10 - how do we
72:12 - fix this problem
72:14 - this problem will be fixed if we move
72:18 - this function
72:20 - i will move it so i will also get the
72:23 - set names
72:25 - to the
72:27 - up.tsx because this
72:30 - up here will contain all the other
72:33 - components so
72:34 - i will paste it here
72:38 - so we will get the
72:40 - user here
72:42 - and we will set
72:45 - this
72:46 - user
72:48 - to the home component
72:51 - the way to do it is by
72:53 - extracting this home component to a
72:56 - function
72:58 - and we will call it like this home
73:02 - and we will set the name is equal to
73:06 - this name
73:09 - so this name now is a property
73:11 - we have to access it via props here
73:16 - and
73:17 - since it is typescript props
73:20 - need to be defined with the type and
73:23 - this will have a name which is a string
73:28 - so we add the props here and what is
73:30 - left is to use the props like this so
73:34 - props that name
73:37 - and props that name here
73:41 - so
73:42 - nothing has changed and also
73:46 - this component doesn't have any errors
73:49 - so this is how we pass
73:52 - values via the props
73:55 - so these props
73:57 - will be the same in the nav so we need
74:00 - to pass the same props
74:03 - and in the
74:05 - update esx
74:07 - we'll pass here the name
74:09 - as a name here
74:12 - so if the name is empty we will show
74:16 - this values so let's add a condition
74:19 - here
74:21 - i'll make a menu
74:26 - and this menu if
74:29 - the name
74:36 - is empty
74:39 - not name that but that name
74:44 - then
74:45 - the menu will be
74:47 - similar to this one
74:52 - so
74:54 - by default if the user is not logged in
74:58 - we'll display this html
75:01 - if the user is logged in so we have an
75:03 - else here
75:06 - then the menu is equal to
75:09 - i'll still copy this
75:11 - because i need the styles but i will
75:13 - remove this and now we need a link to
75:16 - login but this will be logout function
75:22 - and now we can see log out here
75:25 - now let's make this logout work so we
75:27 - have to add here and unclick
75:33 - and let's create a logout function so
75:37 - where should i create it
75:39 - i'll create it here on top
75:44 - and
75:45 - this function
75:50 - i'll call it here
75:55 - like this
75:57 - so we have to call again the backend
76:01 - so this
76:02 - is a post request also
76:06 - i'll copy this
76:07 - paste it here this is an asynchronous
76:09 - function
76:11 - this doesn't have to have a synthetic
76:13 - event
76:15 - we don't have to send the body because
76:17 - we don't want to send data
76:19 - and the function the endpoint is logout
76:24 - and that's it when we send this request
76:27 - we will clear our cookie
76:30 - and
76:31 - since we link to login when we click
76:34 - logout we will get redirected also to
76:37 - login so we will do two things at once
76:41 - let's log out
76:43 - and we are at the login page
76:46 - if we go there we still see our name and
76:49 - logout here but if we refresh
76:52 - everything will be normal but why this
76:54 - is happening
76:56 - uh also when we log in
76:59 - the same thing happens so i will see the
77:01 - cookies here
77:03 - ata.com here
77:05 - a
77:06 - so we got the cookies but still it says
77:09 - no you're not logged in and the only way
77:12 - to show it is by refreshing so the login
77:15 - and the logout
77:17 - work totally totally fine
77:19 - there is still a minor change that we
77:22 - have to make so when we log out we have
77:24 - to tell other components that we are
77:26 - actually logged out
77:29 - and i will do it the same with this name
77:34 - and now when we log out we have to
77:36 - emit an event to the other components
77:40 - and i will add another prop here
77:43 - i'll call it set name
77:46 - and this is a
77:48 - function
77:51 - that returns void and accepts a name as
77:54 - a string
77:57 - so
77:58 - once
77:59 - we finish
78:01 - the logout here we'll set the name
78:05 - prop sorry
78:07 - set name to
78:09 - empty
78:12 - and that's it
78:13 - so
78:15 - what did we do right now so now now in
78:18 - our app.esx
78:20 - we'll need a function set name
78:23 - and it will send an empty string so we
78:27 - want to set the name so we have another
78:29 - set name function here
78:31 - set
78:32 - name
78:33 - and this will work the same so
78:36 - when we log out
78:38 - we successfully log out
78:40 - but we don't reset the name to an empty
78:43 - string here
78:45 - so that is
78:46 - the solution so we have to reset the
78:48 - name
78:50 - right here
78:51 - and
78:52 - when we login we have to do the same so
78:55 - we have to set the name so let's first
78:58 - test the logout
79:00 - so now
79:01 - we have the jwt
79:03 - let's log out
79:04 - and now immediately we can see login and
79:07 - register here so
79:08 - it we successfully logged out
79:11 - but when we login still we have the same
79:14 - problem
79:16 - that you are not logged in so let's emit
79:19 - a set name also from the login
79:22 - let's go to login
79:24 - and we have to emit the same thing again
79:28 - here
79:30 - and we have to get the response
79:35 - and
79:37 - the content
79:38 - is equal to a weight response.json
79:44 - and let's emit the event so
79:46 - the props here
79:48 - i'll copy it from the navigation
79:54 - so let's go to the login we'll have
79:57 - props
80:00 - that this will
80:02 - have a function that will
80:05 - set the name like this
80:10 - props here
80:11 - set name
80:13 - content
80:14 - dot name
80:17 - and that's it
80:19 - and
80:21 - in the update dsx
80:23 - we have to use it just like home here
80:32 - uh not name actually is it name not home
80:35 - sorry is login
80:37 - the function is set name
80:40 - and we will call set name
80:45 - so i made a mistake somewhere
80:49 - and we have to close it
80:53 - so let's try to
80:56 - so
80:57 - everything is correct right now logout
81:01 - we don't see here the name
81:03 - let's login
81:08 - so we didn't redirect but we see the
81:11 - login
81:12 - and everything works fine maybe we
81:14 - should change the order here
81:20 - logout ata.com
81:25 - and everything works fine so
81:28 - we completed our
81:30 - login register
81:32 - and this is how login works in react so
81:35 - thank you for watching this video
81:38 - please like share and subscribe thank
81:40 - you

Cleaned transcript:

in this tutorial we'll create an authentication system using react and go so this is up it shows you are not logged in and we can register our user so let me register one user right now test email will be tested test.com and the password is test when i register the user i will redirect to the signin form where here i can write the email that i just created and the password that i just created and i can go to the main page where i show hide test so test is the name and i have a logout button here where i can log out so this is the authentication that we will build also something to mention is that we will use http only cookies so once we log in we'll generate this cookie that shows that we are logged in once we remove it we are logged out so if you want to see how to make this page follow this tutorial before building the app i would like to remind you that my channel is a channel that combines multiple frontend frameworks with multiple backend frameworks this tutorial covers react and go but if you want to combine react with one of these backend frameworks or go with one of these fronted frameworks go to my channel and you will find the videos there i combined videos using playlist now let's build the apps now let's download and install go before i start make sure to know the basics of go so if you are a total beginner make sure to watch a tutorial about go basics first so with that being said let's get started click download go and download the right version for your machine also make sure to download mysql download the mysql community server and mysql workbench also the golf framework that we will be using is go fiber so the fiber framework fiber is a framework inspired by express.js so if you know express.js it it will be easier for you to learn fiber so i'll copy this code and in my project here which is an empty folder i'll create a go file main that go i'll call a package main and i'll create a function so paste the code actually so before i run this up first make sure to get this package so to get this package i already got it from my machine but if you don't have it you should run this command go get go fiber and this will install it in your machine also make sure to configure your go path i will use the version 1 here because the version 2 throws an error for some reason and we will listen to port 8000 to run this up run go run main.go and fiber will run on port 8000 let's go to port 8000 localhost port 8000 hello world so this is our first go up now let's connect with our database so i'll create a connection to my local database here to mysql so the user is root password is root root and the database is youtube go out so this is my local database which is empty now let's connect with this database to connect with the database we will be using gorm so let's copy this uh command here go get to install gorm i'll close the server and install this also make sure to install also the driver i won't be using sqlite but i will be using mysql so the driver is mysql so with this we can connect with gorm so here i will import so i can have multiple imports here if i use the brackets and here we need gorm io slash gorm and also gorm.io driver mysql we need those two now let's connect with the database so we have a connection and then errors because go returns can return multiple variables gorm open mysql open we need a string inside which i will add it later and the other parameter is gorm config so this is a connection if an error happens so if error is not nil we need we need to panic so could not connect to the database so panic will stop our app if an error happens now the connection for the moment we won't be using it so i will put an underscore there and uh if we don't panic here it means that the connection is successful so let's round up so we panicked because i forgot to add the dns here so let's do that so my user is root then i need to pass a password which is root and then i put a net here and now we need the database youtube go out so this is our local database connection now let's run the app again and now we can see that fiber is running it means that we successfully connected with the database now let's restructure the folders so create a folder here database one folder controllers and we need the routes and that's it for the moment so first let's create the database file so we need here to add the connection connection that go also the package is database so usually the package name is the name of the directory so i will cut this code i will go to connection.go and here i'll create a function i'll call it connect and i'll paste this code so we need also to import the driver so drivermysql and we will be using this function here in main.gov so first let's import the database so to import it we have to use dot slash database so we import the directory and to use the function we use the package first connect and this won't change anything now let's add the route so create here go file routes i'll create a function setup and inside i will cut this code and i will put it here so we need up here so the app should be passed as a property here so up is a star fiber up and uh let's pass up here so we need to import also the routes in the routes we'll set up the routes and we will pass up inside so we have we are done with this also now we need this function so this function should be added in the controller so let's create a go file i will call it house controller here i will create a function hello and this function so i will paste this function first and i will name it here hello and now let's use this function let's go to the routes and here we need to import the controllers and to call the function we have to call here controllers hello just like this and now let's run our app and this will return the same so we restructured our files and now let's create the register function so i will rename this to register and in the routes this will be the register function and this will be a post request to api slash register i'll stop the server for the moment and now let's go to the register function and for the moment let's return what the data we will send with the post request so to get the data from the post request i will declare a variable data here which will be a map string string so this is similar to a array with a string as a key and string as a value so to pass the data we have to call a function c body parser and we will pass the data as a reference this way we will get all the request data that we will send this returns an error so we should handle there there are two ways to end the layer one is to add an if condition here if error is not nil then we return the error or an an even shorter way which is uh i will add the if condition here and i will add an exclamation here and this looks uh shorter and cleaner now we got we handle the error we got the data and now let's return see json the data to see what we send so to see the data that we sent first make sure to install postman i already did it so now let's send a post request to http localhost port 8000 api register this is a post request and what we want to send is a raw request so we'll send a name name email aaa.com and the password which will be one send so i didn't start the server so we returned exactly what we sent so if i change this to a this will change now we got the data now we have to store this data in the database so let's create a user table in our database to do that we have to create a directory now models and inside this directory i'll create a go file called user and let's create a struct for the user so structs are similar to classes in other languages so type user struct and this user will have an id as an unsigned integer a name as a string an email as a string and a password as a string so this is our user struct now let's create a migration to create a table in our database so let's use the connection for our database here so get the connection and to migrate we have an option here connection auto migrate so let's import the models models and we need to auto migrate the user so we add and here models user with this we can auto migrate the users let's refresh here we don't have any tables and if i restart the server we can see a users table was created so we have this table with all the fields that we need so we can add also extra configuration for example i want this email to be unique so i add here gorm uniq with this this will make the email unique if i restart the server refresh and as we can see the email was generated unique so gorm is a pretty powerful library now let's create the user here so first let's create a user variable which is equal so first let's import the models here which is equal to models user and we need to pass the name which is data name like this we need to pass the email which is data email and we need to pass the password but the password we won't set the password directly like this because we need to hash the password so let's get a package to hash our password to search for gop packages go to go.dev and click discover packages here we need a package called bcrypt and this is a package that we want copy the link here so we can install it so go get bcrypt so i already did it and now we can add here bcrypt now let's use it so let's create a variable password and we return also an error which i won't handle it is equal to bcrypt generate from password and we need to pass our password so data password but this won't accept a string so what we need to do here is to convert these two in a slice of bytes so bite like this and the other parameter is a cost which i will put 14 here so the this is how we generate a password and we needed to make it as a byte array and this new password can be assigned here the problem is that this password is a byte array also so how do we convert it the best way is to make this password also a byte array like this so with this we can use this hashed password but also we need to auto migrate to the database so for the moment i will return the user here because every variable needs to be used and let's restart the server to see the changes here actually we won't see any changes because the byte array is you it will be still returned as a long text here so everything will work fine now if we send the request again like we did before we will see that the password is hashed and also we return an id here which is zero so we haven't assigned that id in the user model if we don't assign anything it will initialize it 0 for numbers and empty strings for strings so now let's insert this user to the database and we have to get this variable here so how do we share this variable from this folder to the auth controller we have to create a global variable right now where db is a pointer to gorm db and we have to assign it with this variable here so db is equal to the connection so these two pointers are referencing the same variable which is the database connection now we use this variable in our controller so let's get the database and to get the variable we have to use database db so with this we got this variable so the connection and we have to create now and we will pass the user as a reference like this so with this we can insert this user to the database let's try it send a request so this won't create because i forgot to restart the server send it again and now as we can see the id is one so we successfully inserted the user in the database let's see so this is our generated user so our user is created now let's login with this user so let's create a function login this will have the same parameters and let's add it also to the routes so this will post to api slash login and the function is controllers login so we added this now let's make the login work so we will get the data like the register function so we will send here an email and a password so by the email we want to get the user with that email so first let's get a variable user as a models user and now we need to call the database db where email is equal to question mark and the email value is data email and we want to get the first result and we want to assign it to this user variable so with this we will get the user based on the email if the user id is equal to zero this means that we haven't found the user so we have to set the status to fiber status not found 404 basically and we have to return here see json fiber map message user not found so if we don't find the user we return status not found and we return this message so fiber map is basically a map with a string and interface so we can put anything there if we got the user then we have to compare the password so to compare the password we have another function from bcrypt which is compare and hash password so the first parameter is the user password which is a hashed value and the second parameter is a byte so we have to convert it also to bytes of the password that we have so data password this returns an error and if an error happens so let's make it shorter so error is not nil here then we send the status so status fiber status bad request and we return c json fiber map message incorrect password so if we get an error here it means that the password is not correct if we go here it means that we successfully uh send the right email we retrieve the user and we got the right password so for the moment i will return see json the user and let's see if this works so i'll copy this url i'll paste it here and this will be login let's send a post request let's send the body so this will be an email a at a.com and the password is what is the password one so for the moment i'll send the wrong email so did i restart the server user not found so if i put the wrong email it means the user is not found if i put the wrong password incorrect password if i put the right one then we retrieve the user so we successfully retrieve the user here but we want to return a jwt token to return a jwt token we need to install another package jwt and this is a package that we want to use so let's copy the url and install it here go get this package i already have it so i can use here on top and now let's create a jwt token so first we need the claims variable which is equal to this package jwt new with claims so this is a function we need a method which we get it from jwt signing method hs2245 so there are a lot of methods but i will use this hs 2 5 6 and the second parameter is jwt standard claims and inside we will pass an issuer the issuer is our user so what we want to pass here is the user id unfortunately the user id is not a string so this accepts a string so let's convert the user id to a string so first we have to import here str conf and this can convert this to a string so we use strconf we use this function which i cannot pronounce it and this accepts an ins so user id is you in so this user id cannot be sent like this but we have to convert this to an int so like this we converted the user id to a string so this is claims and we need an expiry expired sat so let's import also time here and when we want to expire this token so we have to pass time now we need to add time hour times 24 so this means is one day and this needs to be converted to unix time so this is our claims so it will expire after 24 hours so now let's create a token and we will get also an error is equal to claims sign string and here we need to pass a byte array of secret so this secret is a secret key that we need to store it in our app so create a constant variable here on top so const secret key and this secret key should be stored in our app and now let's handle the error so if the error is not nil we return the error or we return a better message so i will do it like this we return internal server error and the message is could not log in so we got this now let's return the token and let's see it so let's login again so let's restart the server send the request and as we can see this is a token that we generated now we don't want to return it like this we want to store it in cookies so let's create a cookie is equal to fiber cookie so to create a cookie we need a name i'll name it jwt value the value is a token itself expires so let's copy this part here and this needs not a unix time this needs a time like this and the last one is http only it's important to add http only here because the front end cannot access this cookie so this cookie is meant only to be stored in the front end and stay and send it but the front end doesn't need to access it and to save it we need to add here c cookie cookie select this as a reference and that's it so in the end we can return fiber map message success because we don't want to return the cookie the front end will only have the cookie and nothing more so it won't be able to access it or use it so this is not enough we need to add here on main another configuration so first our front end will have course issues so we need to use up use we need to use course new so don't forget also to import this url here so course problems are the problems that uh our backend will run on port 8000 and the front end will run on different port so if we don't add this uh our browser won't allow the request and it will draw an error if we add this then it will ignore that and we will have the request still we need also one configuration which is course config allow credentials to true so this is really important and with this the front end can get the cookie that we sent and it can send it back so this is really important if we want to authenticate using http only cookies so with this let's test it we don't have any cookies and let's send the request so i forgot again to restart the server so message is success but we see here we have a cookie jwt which is http only so we need to use this cookie now to retrieve the logged in user so let's do it now function user i will copy this part and i will add this to the route so this is a get request api slash user and controllers user let's go to the functional and what do we want to do with this function first we have to get the cookie so the cookie is cookie is equal to c cookies and we need the name which is jwd with this we got the cookie now let's retrieve the token so the token and an error are equal to jwd pars with claims so this function accepts first the cookie because the cookie is a string right now we need the claims the claims are gwt standard claims so we need to pass it with reference and the third parameter is a function which accepts a token and the jwd token is a reference and this will return an interface and an error so inside this function we need to return the secret key that we generated here so we have to return a byte array of the secret key and the error is nil so we don't want to return an error and that's it so if the error is not nil then we want to return i'll copy this paste it here fiber status unauthorized and the message is unauthenticated so if this returns an error it means that the user is not logged in and now we got the token let's get the claims from the token so claims are equal to token claims and let's return them c json claims so let's test this function and i will copy this url paste it here and this is a get request to user send the request and as we can see we have an expiry time and also an issuer so this is the idea of our user so we got the issuer here and now let's retrieve the id but there is a problem claims has only a valid function it doesn't have an issuer function why is that the case because this claims is a is an interface that has only a valid function what do we want is to return a standard claims and this has our issue that we want so how do we convert these claims to a standard claims to convert it we have to use dot parenthesis and this will be converted to jwt standard claims so this is how we convert one type to another and now these claims will have the issuer that we want so now let's use this issuer in order to retrieve the user so let's first create a variable user is a type of models user and now let's query the database database db where id is equal to question mark and the id is claims issuer the first result is our user and in the end we want to return the user let's see so let's restart the server so we got an error so as we can see we converted this to a standard claims but this needs to be a pointer of standard claims let's restart again the server and we successfully retrieve the user so with this we don't send anything we only send the cookies and we treat the user i forgot to mention that if we open a new tab the cookie will be preserved that's why we retrieve the user here so we got the user and one thing before we log out i would like to change the format here of the attributes here so first i don't want to show the password and second i want this to be lowercase so how do i do this let's go to the user here we can add some configuration like how the json will return so this id will return like this the name will return like this email we can add it here like this so this can support multiple configurations and the password we put a minus here which means that we don't want to return the password with this let's restart the server send request again and this is our user so name email all lower case and the password is not returned now let's add the last function which is logout now let's copy this part and to log out now we have to remove the cookie that we just created here so how do we remove cookies to remove cookies is really strange because we don't actually remove it cookie to remove cookies we create another cookie and we set the expiry time in the past so let's create this cookie the name will be jwt the value will be an empty string the expiry so this is the part that we will remove our cookie so we set the expiry time to now and we will add here a time which is time hour with a minus so this cookie expired one hour ago and http only is equal to true so this is how we remove cookies there is no way to remove the cookies in the browser just we set the expiry time in the past so with this the cookie will be removed we have to set the cookie and to the response and let's return the response so return c json fiber map message success and that's it so let's add it to the routes logout logout so with this we completed the logout function let's send so first let's restart the server let's copy the url here paste it here this is logout and we need to send a post request so before i delete the cookie we have the cookie here so we retrieve the user and let's send a post request to the logout method not allowed so this is a post request let's restart send it again and we have message success and the cookie is removed here so if we send the request to the user now we get unauthenticated because we don't have the cookie if we log in again we generate another cookie then we retrieve the user so this is how authentication works in golang thank you for watching this video and make sure to like and subscribe now to install react make sure you have node.js installed if you have not js installed right open the terminal and write this command mpx create react app now we need the name of the app i'll call it react auth and i will add template typescript i like to use typescript on my projects now let's wait till it is completed so the project is created now let's go to the folder and run npm start react will run on port 3000 localhost port 3000 so this is our running react app now i will open the project with my ide also i will close the terminal here so let's use it directly in my ide here npm start so nothing has changed now i will delete the test file and let's add the template for our project so let's go to get bootstrap.com go to get started first and let's add the bootstrap link to our index.html i'll add it here so we added bootstrap now let's add a template so the template that we want is this signin form here let's inspect our viewpage source better and here i will copy the div here the main div and i will add it to up.tsx so i'll paste it here so i'll keep the class name up here now it's complaining because some tags are not closed i'll make some changes so i'll remove the image here i will add a closing tag here for the input i will remove all the labels i will remove this also and this so this needs also a closing tag also make sure to change class to class name so these are class here and i change it to class name my id automatically does it if yours doesn't make sure to change it this now will look like this still is not looking good we still have to add the styles here so go to sign in the css here copy all the code and add it to our app css i'll paste it here save it so it looks a little bit better so let's remove this body and html styles here and now it looks better so this is not a css tutorial so if you want to learn css you can watch other tutorials i will cover only the authentication part here now here in the form let's remove this id here and this out of focus i want to keep everything really simple and this won't change anything so it doesn't now i want to add here a menu so we can navigate to different pages so go again to get bootstrap.com examples and here i will get a navigation menu so which one is the simplest i'll pick this navbar static i'll view the paste source here and i will copy the navigation here and i will paste it here on top so still we need to close the tags that are not closed so we have a form here with a button so let's close first the input here and let's remove this tab index and i guess we don't have any problems so don't forget also to cl change the class with the class name so this is our menu now let's uh remove some stuff we don't need this button so we just need i will name this home here also i will remove this form and for the list items here i'll keep only one so i will remove the classes here and this will be login and i will add another one for the register so what is missing that is complaining maybe i forgot to close the ul here so it's working fine now let's split this into components so create a directory actually i'll call it pages and the pages that we want is the login dot tsx so tsx is the version of jsx the typescript version of jsx so create your component i have a shortcut for creating a component so you should write it yourself if you don't have that shortcut let's add the html here and this this login form so i'll cut this and i will add it to the login tsx for the moment i will just add here login make sure also to import it because my id dot does it automatically and i'll create a new component called navigation so components i'll call it a nav so this is a tsx file also i'll cut this code and i will paste it so let's create the component i'll paste it here navigation so i will add it like this it doesn't work so i will import it so nothing has changed so close the other tabs and now let's add other pages and let's add the router so we can move to other pages so we need a register so i'll just name it register for the moment and another page called home home here so let's add them these pages here but we cannot replace them because we have to add another package so let's install it npm install react router dom and the typescript version so react router done every time you install a package the typescript version has it types in front of it so the package now is installed now let's use it so let's wrap let's change this login here to browser router import also browser router from reactor router dom and to add the pages we have to add route we need to import also route here and this has a path so the main page so just slash will be the home component so here we will add home so import also home here slash login will be the login component and slash register will be the register component let's see if it works so we have home here so we are the home component now we cannot move because we haven't made the links work but we can go to other pages with login here we can see the login page but we see home here why do we see home there is because the path matches the path with the register here and if we want to distinguish we have to add here exact so this is the exact path and now we don't have home there register also that works so every component has been rendered now let's add the links to the navigation so we have to change this anchor links right now two links from react router dom so import link from react router dom and this will point to the main page let's change also this other parts so this will point to slash login and this is linked to slash register let's see and we get an error there is that you should not use links outside a router so the error is because the navigation is outside the browser router and we can fix that by moving the browser router here and using the navigation inside and now everything is correct we can navigate to other pages now let's complete the register because we have to register first so we can log in now let's go to the register and the form will be similar with a login and i will paste it here please register and this is submit the register form has an email has a password and also has a first a name just a name so name email and password i kept it really simple so this is the register form now let's make this form work first we have to for every input we have to get a variable and we have to use the state for every variable so we have to get here the name set name is equal to use state and inside is the default value which will be an empty string so this is how we handle state in react the first is a variable and the second one is an actual function that changes this variable so i will add two other states one is for the email and this is set email here and the last one is password set password so where do we use these variables so let's use the functions first and we will use the functions once we change the input so we will add here listener on change and what will happen when we change the input will fire an event and we'll set the name to event.target.value so every time we change the name we will set the name here we will use the function let's do the same for the other inputs set email and this is set password so we set all the variables now we need to submit the form so we have a nonsubmit function here and let's create a function called submit and we will use it here so this function accepts an event and since we are in typescript we have to define the type of this event and is a type of synthetic event so don't forget also to import it when we submit a form it usually refreshes the page so in our case i will just show it to you i'll console log here the name the email and the password so i'm keeping this short because this is the same as name and the name variable but since they are the same i can use it directly like this and let's see if we console log here so submit so we saw console.log here but the page was refreshed and to prevent that we have to add event.preventdefault and now if we try to login to register sorry we console.log the actual values so now we have to use this values and to send it to our backend so i will cut this and let's send a request to the server using fetch first i will make this function a synchronous and to get the response from the server is equal to await fetch we have to pass here the endpoint which is http localhost port slash api register so this is a get request but we have to make it a post request we have to add here the method which is post and we have to add also the body and the body is the json that we cut but we have to make it to a string so json stringify and we will paste the values we need also a header so headers here and the header that we want to send is content type application json and that's it basically so the content is equal to weight response json and let's log the content here so let's see what the server does return to us so i still have the form here i will try to console.log submit and we created a user right now so the response was successful and what do we want to do once we successfully register a user we we want to redirect to the login so we'll remove all this and add another state here so first to redirect we have to use redirect we need to import it also redirect from react router dom and we have to return it redirect to login so this is the way we redirect and as we can see we are at the login page but now we cannot go to the register because we automatically redirect so we have to add a condition here if i'll create a variable just like the other variables this will be redirect and set redirect is equal to use state and the default state will be false so by default if redirect we won't redirect because it is false and now we can stay to the register page when we want to redirect is when this fetch has finished so here we'll set redirect to true with this once we register with another user test.com and now i am at the login page so now let's login go to the login page and just like the register i'll get the email and the password here and i will paste them here also when they change so on change we want to set the email to event.target.value and same for the password set password now we need to submit the form on submit here let's create the submit function submit and this will have an event which is a synthetic event and event.prevent default here so everything is correct now we need to send a request to the login so i will copy this i'll paste it here and the end point so make this asynchronous then point now is api login and we don't have the name so that's it so we need to send the email and the password but this is not enough so we can send the credentials and they will be correct but we need to get the cookie from the server to get the cookie from the server we need to add another configuration another option which is credentials to true it's not true it's include so with this when we login we will get the cookies from the backend so let's see it in the application now we don't have any cookies and let's try to login ata.com a as we can see we generated a cookie which is http only so the request was successful we got to the message here but we don't do anything to set it to the cookies so we just send the request and nothing more but since we have these credentials include here it means that we will get this cookie now in every request and this is a cookie that we need to use to our home to get the authenticated user so just like the register right now when we log in we want to redirect so i will copy and paste the same thing and we want to redirect to the main page here and set redirect to true so let's try to login again and we are at the home page here we want to display the user so let's uh here we need to call the user and since we don't have anything we have to use another function which is use effect so here we need to call a backend and i will do it like this since user effect doesn't accept async functions so this is not allowed and we have to call the backend uh i would like to make my function asynchronous and we have i want to do it like this so this is short for executing this asynchronous function here so i like it like this and you can use a different way of calling the back end and i'll copy this send it to the home now we don't want to send a post request and this method is get by default is get and this will be user here and that's it basically now let's see if our request will get the user so we get the authenticated user here we just the request will get the user we don't send anything just a get request and everything is gotten from this cookie here and uh let's before test the cookie i want to set the name here so we'll create here a variable name and set name and i forgot this is use state by default is empty string here we'll say hi name so when we get the user here will get a response and the content is equal to weight response.json and the content in our in this case is our user so we'll set the name to content that's name let's see if this works hi a so this is our user that is authenticated i will make a question mark here for a so i'll do it like this a set we will say hi with the name otherwise we will say you are not authenticated also or not login so we have high a here if we remove the cookie i'll clear it we get you are not logged in because we don't have the cookie and the response is throwing an error so we have to login again and now we show the name again here now the last thing that is left to change is the logout here for the login and register when we are logged in we want to show the logout button but there is a problem here because we get the user here on the home component and the the buttons are in the nav component so how do we fix this problem this problem will be fixed if we move this function i will move it so i will also get the set names to the up.tsx because this up here will contain all the other components so i will paste it here so we will get the user here and we will set this user to the home component the way to do it is by extracting this home component to a function and we will call it like this home and we will set the name is equal to this name so this name now is a property we have to access it via props here and since it is typescript props need to be defined with the type and this will have a name which is a string so we add the props here and what is left is to use the props like this so props that name and props that name here so nothing has changed and also this component doesn't have any errors so this is how we pass values via the props so these props will be the same in the nav so we need to pass the same props and in the update esx we'll pass here the name as a name here so if the name is empty we will show this values so let's add a condition here i'll make a menu and this menu if the name is empty not name that but that name then the menu will be similar to this one so by default if the user is not logged in we'll display this html if the user is logged in so we have an else here then the menu is equal to i'll still copy this because i need the styles but i will remove this and now we need a link to login but this will be logout function and now we can see log out here now let's make this logout work so we have to add here and unclick and let's create a logout function so where should i create it i'll create it here on top and this function i'll call it here like this so we have to call again the backend so this is a post request also i'll copy this paste it here this is an asynchronous function this doesn't have to have a synthetic event we don't have to send the body because we don't want to send data and the function the endpoint is logout and that's it when we send this request we will clear our cookie and since we link to login when we click logout we will get redirected also to login so we will do two things at once let's log out and we are at the login page if we go there we still see our name and logout here but if we refresh everything will be normal but why this is happening uh also when we log in the same thing happens so i will see the cookies here ata.com here a so we got the cookies but still it says no you're not logged in and the only way to show it is by refreshing so the login and the logout work totally totally fine there is still a minor change that we have to make so when we log out we have to tell other components that we are actually logged out and i will do it the same with this name and now when we log out we have to emit an event to the other components and i will add another prop here i'll call it set name and this is a function that returns void and accepts a name as a string so once we finish the logout here we'll set the name prop sorry set name to empty and that's it so what did we do right now so now now in our app.esx we'll need a function set name and it will send an empty string so we want to set the name so we have another set name function here set name and this will work the same so when we log out we successfully log out but we don't reset the name to an empty string here so that is the solution so we have to reset the name right here and when we login we have to do the same so we have to set the name so let's first test the logout so now we have the jwt let's log out and now immediately we can see login and register here so it we successfully logged out but when we login still we have the same problem that you are not logged in so let's emit a set name also from the login let's go to login and we have to emit the same thing again here and we have to get the response and the content is equal to a weight response.json and let's emit the event so the props here i'll copy it from the navigation so let's go to the login we'll have props that this will have a function that will set the name like this props here set name content dot name and that's it and in the update dsx we have to use it just like home here uh not name actually is it name not home sorry is login the function is set name and we will call set name so i made a mistake somewhere and we have to close it so let's try to so everything is correct right now logout we don't see here the name let's login so we didn't redirect but we see the login and everything works fine maybe we should change the order here logout ata.com and everything works fine so we completed our login register and this is how login works in react so thank you for watching this video please like share and subscribe thank you
