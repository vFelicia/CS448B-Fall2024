With timestamps:

00:00 - hello and welcome to this little
00:01 - tutorial here on free code camp i'm
00:04 - thomas weber farq i'm a developer from
00:06 - sweden and i've created a few videos for
00:08 - free code camp now i love free code camp
00:10 - they have a lot of great stuff so that's
00:12 - why it's so fun creating videos for them
00:15 - i just want to say also that i have my
00:17 - own youtube channel where i publish
00:19 - weekly videos so search for vapenfarc or
00:22 - check out the link down below here and i
00:24 - also have a site where i have my premium
00:26 - courses if you want to get more in-depth
00:29 - knowledge of stuff i do a lot of stuff
00:31 - on react and gatsby for example so visit
00:34 - my site if you like my teaching style
00:36 - and want to support me so let's get
00:38 - started
00:40 - hey hey what's up in this video we're
00:42 - gonna create a cool little
00:44 - maybe not that cool but
00:46 - a little web shop with a cart
00:48 - so it's going to look something like
00:50 - this because i found this fake store api
00:52 - where we can get some data to create
00:55 - this little store so that's what i'm
00:56 - using here and you can add stuff to the
00:58 - cart
00:59 - as you can see and it adds them up here
01:01 - and then we have the cart button here
01:04 - and we have
01:06 - these nice little buttons where we can
01:07 - change the amount and it will show the
01:09 - total and of course is this if this was
01:11 - a real shop you would have a button here
01:13 - to go to the payment and stuff like that
01:15 - but i won't do that
01:16 - and i'm going to use material ui i'm
01:18 - going to use react query and typescript
01:21 - and style components for this one so
01:23 - it's going to be a lot of learning in
01:25 - this video i think
01:30 - go back to your terminal and inside
01:33 - somewhere where you want to have the
01:34 - application i have mine in a folder
01:37 - that's called react shopping cart so
01:39 - we're going to create our project mpx
01:43 - create dash react dash app and then we
01:46 - name our project i think it's going to
01:48 - be named react
01:51 - shopping
01:51 - [Music]
01:53 - dash cart yeah
01:55 - then we use the dash dash template and
01:58 - typescript this is how you set up a
02:00 - typescript
02:01 - application with create dragged app and
02:03 - we press enter it will take some time so
02:05 - i'm going to skip this
02:08 - okay that went well we have our
02:10 - application and make sure to navigate
02:12 - inside of the folder cd react
02:17 - dash
02:18 - shopping dash cart
02:22 - clear the console and then we're going
02:23 - to install our dependencies so first
02:25 - we're going to use material ui so there
02:27 - are a couple of things that we need from
02:28 - that library
02:30 - i'm going to install the core and also
02:32 - the icons because i have an icon up here
02:34 - you can see in the store that i use for
02:36 - this one
02:38 - so mpm i
02:40 - at
02:42 - material
02:43 - dash ui
02:45 - forward slash core that's the core
02:47 - library and then we need icons so at
02:50 - material
02:52 - dash ui forward slash
02:55 - icons
02:59 - so that's everything we need for the
03:00 - material ui
03:02 - and then we're going to install react
03:03 - query so mpm i react dash query
03:10 - so i'm going to clear the console where
03:12 - one more thing to install and that's the
03:13 - style components and you may think well
03:16 - why are you using style components when
03:18 - you're using material ui and that is
03:20 - because i don't really like the way that
03:22 - i style stuff in material ui i think
03:25 - there's a lot of great stuff in the
03:26 - library itself but the styling is
03:29 - in my opinion
03:30 - not good so that's why i use style
03:33 - components i will get much cleaner code
03:35 - instead of using their internal way of
03:38 - styling things so that's why
03:40 - but it's highly opinionated of course so
03:42 - if you want to use the internal stuff
03:45 - instead you can do that but i won't show
03:48 - it in this tutorial so i'm going to
03:50 - install mpmi styled dash components
03:53 - and as we're in typescript land now we
03:56 - also need to install the types so we
03:58 - have add types forward slash
04:00 - style dash components
04:04 - all right
04:05 - we can open up our code
04:14 - like this
04:16 - and i'm going to do some cleanup first
04:18 - we don't need app.css we don't need
04:20 - app.test
04:22 - we don't need the index.css not the logo
04:25 - and not the report web vitals and the
04:28 - setup tests so delete those ones
04:33 - and
04:34 - inside of the index.tsx we can remove
04:37 - some stuff remove the report web vitals
04:40 - remove the index
04:42 - we can also remove this one here
04:46 - and actually we can't use the strict
04:48 - mode as we're going to use the drawer in
04:50 - material ui or we can use it but we will
04:53 - get a warning so i'm going to remove
04:54 - strict mode they haven't fixed that yet
04:57 - i hopefully hopefully they're going to
04:58 - fix it soon
05:00 - it will throw a warning in the console
05:02 - so for now i just remove it
05:07 - and inside the app.tsx file we can also
05:09 - do some cleanup you can see that this
05:11 - one is grayed out and that's because we
05:12 - don't need to import react
05:14 - when we're using react 17 and above as
05:17 - we use now so we remove that then we
05:19 - remove the logo and we also remove this
05:21 - one
05:22 - and here we can just remove everything
05:25 - that has to do with a header and we can
05:27 - say start
05:29 - i like to have an arrow function so i'm
05:30 - going to convert this one to an arrow
05:32 - function you can do whatever you want
05:38 - something like this
05:40 - save it and i'm going to do one more
05:42 - thing before we start up the application
05:44 - to see that it works so we have
05:46 - something to start from and that's
05:48 - inside of the index.tsx file
05:51 - we're going to set up react query
05:53 - so
05:54 - i'm also going to bump this one up
05:58 - maybe
05:59 - like this
06:01 - so we import
06:04 - query client and something that's called
06:06 - query client
06:09 - provider
06:11 - from react-query
06:15 - right then we're going to wrap this app
06:21 - with the query client provider
06:24 - and it takes in a prop that's called
06:26 - client
06:28 - and this client is going to be something
06:30 - that we create here so we have a const
06:33 - we can call it client and we create a
06:35 - new query client
06:37 - and we call it like this and this will
06:39 - make sure that we have a client in this
06:40 - const so we can provide this client
06:43 - to the client
06:45 - client to the query client provider
06:48 - oh long names here and i'll move the app
06:51 - inside of this one and this will make
06:52 - sure that we can use react query in our
06:54 - application
06:56 - so i save the file and then i go back to
06:58 - my console and i'm going to type in
07:00 - mpemstart
07:05 - yeah i already have my other application
07:07 - running on port 3000 so this one is
07:09 - going to be on port
07:12 - 3001 instead
07:15 - so i'm gonna open up that here localhost
07:22 - and i'm gonna move it here
07:24 - so this one is the application we're
07:26 - working on and we also have the finished
07:28 - application there so it seems to be
07:30 - working just going to check the console
07:32 - great so that's the setup we're going to
07:34 - move on and create the different items
07:36 - for the shop itself
07:38 - and then lastly we're going to create
07:40 - the cart and items for the cart
07:43 - all right we're going to be inside of
07:45 - the app.tsx file and first we're going
07:46 - to start with some imports or it's
07:49 - actually
07:50 - quite a lot of imports we need for this
07:52 - one
07:53 - so first we're going to import use date
07:55 - from
07:58 - react
08:01 - then we're going to import use query
08:04 - from react query
08:08 - and then we have some components so i
08:10 - marked them with components
08:15 - and i'm going to import some stuff from
08:16 - the material ui that we're not going to
08:18 - need yet but i'm going to import them
08:20 - now so that we have them later
08:22 - so first i'm going to import a component
08:24 - that's called drawer
08:26 - from
08:28 - at material ui
08:30 - forward slash core
08:32 - forward slash
08:34 - drawer capital d
08:36 - all right then i'm going to import
08:38 - something that's called a linear
08:40 - progress
08:43 - from
08:44 - at material ui forward slash core
08:47 - forward slash linear progress
08:52 - then we have the grid so import grid
08:55 - from
08:59 - at material ui forward slash core
09:02 - forward slash grid
09:05 - and we're gonna have the icon for the
09:07 - shopping cart import
09:09 - add
09:10 - shopping
09:11 - cart icon
09:13 - from
09:15 - at material
09:18 - dash ui forward slash icons forward
09:21 - slash
09:22 - add
09:24 - shopping cart
09:27 - yeah add shopping cart
09:29 - and then we have a badge so import
09:34 - badge from
09:37 - at material ui
09:39 - forward slash core
09:41 - badge
09:44 - so that's everything in this component
09:46 - that we need from the material ui
09:48 - library we're also going to import some
09:49 - other stuff here later for example the
09:51 - cart and the item
09:53 - so that's what we're going to do later
09:55 - and we're also going to have some
09:56 - styling for this one so i'm going to
09:57 - mark this one with styles
09:59 - and for now i'm just going to scaffold
10:01 - out the style component and i like to
10:03 - keep them in a separate file
10:06 - so i'm going to create a new file that i
10:08 - called app.styles.ts
10:12 - and in this one
10:14 - i'm going to import
10:17 - styled from
10:19 - style components
10:22 - and i just scaffold out the component
10:24 - that i call wrapper so i have to export
10:26 - it as i want to import it in my app
10:28 - export const wrapper equals style.div
10:34 - save it and go back to the app.tsx and
10:37 - now we can import it import
10:39 - wrapper
10:40 - from
10:42 - dot forward slash app.styles
10:46 - and that's our import for now
10:49 - and as i told you i'm gonna use an api
10:52 - that's called fake store api i haven't
10:55 - heard of it before i just googled some
10:56 - stuff because i needed a fake store api
10:59 - for this application
11:00 - so that's what i'm going to use so we
11:02 - have to create a fetching function for
11:04 - it so go back to the code
11:06 - outside of the app itself i'm going to
11:07 - create this fetching function because we
11:09 - don't need to recreate it on each render
11:12 - so const get products
11:15 - equals and this is an async function as
11:17 - we're going to fetch
11:19 - from an api
11:21 - i'm going to wait
11:25 - and have parentheses and i wait again so
11:27 - this weight inside of the parenthesis is
11:29 - going to be for the api call itself and
11:32 - this the weight is going to be when we
11:33 - convert it to json because converting to
11:35 - json is also async
11:38 - so a weight fetch
11:40 - i have a string with a url
11:43 - https for column forward slash forward
11:46 - slash fake store api dot com forward
11:50 - slash products
11:52 - like this and here at the end after the
11:55 - last parenthesis i have dot json and
11:57 - convert it into json so that's why i
12:00 - have the double weights
12:01 - we're also going to type this one the
12:04 - data that we get back from the api
12:08 - has a structure of it and as this is
12:10 - typescript we want to type that
12:11 - structure so this structure that i'm
12:13 - going to type now i can mark it with
12:15 - types is from the api and we're going to
12:17 - see this structure when we get the data
12:19 - back so i'm going to export this type
12:21 - because i'm going to use it in other
12:22 - components also
12:24 - i call it car item type
12:27 - and i specify my type
12:30 - so the id is going to be a number
12:33 - the category
12:34 - is going to be a string
12:36 - the description
12:38 - is going to be a string
12:41 - the image
12:42 - is going to be a string
12:45 - the price is going to be a number
12:49 - the title is going to be a string so
12:51 - this is all the properties that we get
12:53 - back from the api but i want to add my
12:55 - own property and that's the amount
12:57 - because we need to keep track of the
12:59 - amount in our cart so i add the amount
13:02 - and i type this as a number
13:05 - so that's the types so now we can type
13:07 - the return type of this get products
13:10 - function
13:11 - so colon
13:12 - and this is a promise
13:15 - as we're using async and weight and the
13:17 - promise is what's called a generic in
13:20 - typescript so we can provide it with the
13:22 - type that we want so promise and then we
13:24 - have angle brackets
13:26 - and inside angle brackets we specified
13:29 - the type that we created up here
13:31 - cart
13:33 - item type
13:35 - so there you have it that's the correct
13:37 - type for the get products function
13:40 - all right i think we're ready to go to
13:41 - actually fetch some data so inside our
13:44 - app
13:45 - we're going to use react query to fetch
13:47 - our data so i create a const either
13:49 - structure out the data
13:51 - the boolean that's called is loading and
13:53 - the error
13:55 - equal and i call the use query hook
13:59 - and this one we can also type the return
14:01 - type
14:02 - of the data that we get back
14:04 - because this use query is also generic
14:06 - so we have angle brackets
14:08 - and we type it as the same type
14:12 - card
14:13 - item
14:15 - type and this is an array and actually
14:18 - this one should also be an array up here
14:20 - i missed this one because the data that
14:22 - we get back is an array with all the
14:24 - card items so we specify this as an
14:26 - array also all right so that's the type
14:29 - for the use query then we have the query
14:31 - key and it's a string we can name it to
14:32 - whatever we want i name it products
14:36 - and then
14:37 - this is getting quite long here we have
14:40 - our fetching function here
14:42 - so we have the query key a comma and
14:44 - then we provide it with a function get
14:46 - products like this do some order
14:48 - formatting
14:49 - we'll place it on its own row and this
14:51 - should be get products that's the
14:53 - function that we created up here and now
14:55 - we can actually console.log out some
14:57 - data to see that we get something
15:00 - console.log data
15:01 - save the file
15:03 - go back to the application
15:06 - reload it
15:08 - you can see that we have the data here
15:09 - and here's the structure that i typed in
15:11 - my type the category description id
15:14 - image price title and you can see that
15:15 - it missed that amount prop that i added
15:17 - myself
15:19 - but otherwise it looks exactly the same
15:21 - when i specified i typed i first looked
15:23 - at the data and then i know the type so
15:25 - i could create that type for it
15:27 - all right so we know that we have some
15:28 - data we're just gonna scaffold out some
15:31 - stuff here before we create our jsx
15:34 - we're gonna have a few functions inside
15:35 - of this one we're gonna have a function
15:38 - that's called
15:40 - get total
15:42 - items
15:43 - and for now i just create an empty arrow
15:46 - function we're going to return null for
15:47 - this one
15:50 - and we're going to have one that's
15:51 - called handle add to cart
15:54 - and i also specify it as an empty error
15:57 - function and the last one is going to be
15:59 - handle
16:01 - remove from cart
16:07 - and i return now and of course we're
16:09 - going to return back to these functions
16:10 - later
16:12 - all right and before we return the data
16:14 - the actual data with the products we can
16:16 - check if is loading
16:19 - and if we load in something we can
16:21 - return from the material ui library we
16:24 - have something that's called a linear
16:25 - progress we also have a circular
16:27 - progress if you want to have that
16:29 - that one is a little bit more tricky to
16:32 - get centered in the screen so this one
16:35 - is going to be displayed at the top and
16:37 - i'm going to show you that in a second
16:40 - and also if we have an error we can
16:41 - return something return
16:43 - a div that says something
16:47 - went wrong
16:49 - something like this save it go back to
16:51 - the application and we reload it
16:53 - you can see this progress bar here when
16:55 - we load the data
16:58 - so i think it actually looks kind of
16:59 - nice to have it up here at the top like
17:01 - this
17:02 - otherwise you could have a circular
17:04 - progress in the middle here or something
17:06 - and that's of course the linear progress
17:08 - that we imported up here before from the
17:10 - material ui core
17:15 - so we have some data and we need to to
17:17 - create our grid with the products but
17:19 - first we actually want to create a
17:20 - component for the grid itself because if
17:23 - we look here
17:24 - we have these nice little cards it's
17:27 - going to be a separate react component
17:29 - so we can create that one first so
17:30 - inside our src folder we're gonna create
17:33 - a new folder that we call item capital i
17:37 - and inside this one we're gonna have two
17:38 - files we're gonna have the item itself
17:42 - so item.tsx
17:44 - and we're also going to have a file
17:45 - that's called
17:47 - item.styles.ts and that's because i want
17:50 - to have my styles outside of the
17:51 - component itself
17:53 - so inside items.styles we're going to
17:56 - import styled from style components
18:02 - and for now i'm gonna export const
18:05 - i call it wrapper again
18:07 - and it's gonna be a style div and we
18:09 - have double back ticks
18:12 - like this so we're going to fill this in
18:14 - with styles later but first i want to
18:16 - create a component itself so go inside
18:19 - of the item.tsx file
18:22 - and up here we're going to import
18:25 - the button from
18:27 - at material ui forward slash core
18:30 - button
18:34 - then we're going to import those types
18:36 - that we created in this app component up
18:38 - here so that's why i export them here so
18:40 - that we can reduce them in other
18:42 - components so i marked this one with
18:44 - types and i import
18:46 - card item types
18:50 - type without an s
18:52 - from
18:54 - dot forward slash
18:56 - app
18:57 - and then we have the styles
19:00 - import
19:02 - wrapper
19:03 - from
19:04 - not forward slash item dot styles right
19:07 - that's every input we need to do
19:09 - and we're in typescript so we have to
19:11 - type some props for this one type props
19:15 - because it's going to take in two props
19:17 - we have the item itself and that's why
19:19 - we imported this one here this item prop
19:21 - is going to be of the type card
19:24 - item type
19:26 - and then we're going to have the handle
19:28 - add to cart
19:31 - that's going to be the function in the
19:33 - app here
19:35 - this one
19:37 - handle add to cart
19:40 - and we could actually change this one a
19:42 - little bit now this handle add the cart
19:44 - is going to take in an item
19:48 - i call it clicked item and it's going to
19:50 - be able to type cart item type like this
19:54 - so you can see the type here if we hover
19:56 - over handle add to cart
19:59 - we have the type here
20:00 - it will only accept this type so that's
20:03 - why we also have to type this correctly
20:05 - in the prop in the item.tsx so this type
20:09 - is going to be
20:12 - clicked item and it's going to be of the
20:14 - type cart item type
20:17 - and it's going to return nothing so it's
20:19 - going to return void
20:21 - so this is the correct type that one
20:23 - and then we can create our component
20:25 - const
20:26 - item
20:28 - it's going to be a colon and it's going
20:30 - to be a react dot fc that's the type for
20:33 - the react functional component
20:37 - and this is a generic so we have the
20:38 - angle brackets and we give it the props
20:42 - so this is how you specify and type the
20:44 - props in a typescript react component
20:48 - all right then we have an equal sign
20:50 - parenthesis with the structure of the
20:52 - props the item and the handle
20:55 - add to cart
20:57 - and then we have an error function and
20:59 - we can make an implicit return because
21:01 - we're only going to return jsx in this
21:03 - one
21:04 - so first we have the wrapper
21:07 - like this
21:09 - i'm going to have the image so imd the
21:11 - source
21:12 - is going to be from the item dot
21:15 - image
21:17 - we can set an alt on this one and we set
21:19 - it to the item.title and these are the
21:21 - properties from the data in the item
21:23 - that we get back from the api of course
21:28 - then we have a div
21:31 - i'm going to have an h3 tag
21:34 - with the item dot
21:37 - title
21:39 - and as we're in jsx i have to use curly
21:41 - brackets to grab these values
21:44 - then we have a p tag i have a new pair
21:47 - of curly brackets and i'm going to grab
21:49 - the item.description
21:53 - then we have another h3 tag for this one
21:56 - and first i'm going to have a dollar
21:58 - sign because the price is going to be in
21:59 - dollars and then i have a pair of curly
22:02 - brackets and i grab the item.price
22:05 - like this
22:07 - and then we need to export default
22:11 - item
22:13 - and yeah of course we need to have the
22:15 - button also for adding to the cart
22:17 - so down below here where after the after
22:20 - the div we have the button we're going
22:22 - to have an on click on this one
22:24 - we have an inline arrow function and we
22:26 - call the handle add to cart
22:30 - and we give it the item and i need to
22:31 - have an inline arrow function here
22:33 - because we need to send in
22:35 - this little prop here to this one also
22:37 - so that's why we can't just do it like
22:39 - this because this will trigger it right
22:41 - away so that's why i use an inline
22:43 - function you can also create a function
22:45 - up in the component if you want to do
22:47 - that
22:48 - but in this case i think it's
22:50 - neat to have this little inline arrow
22:52 - function it will be fine so the button
22:54 - we close it and it's going to say add to
22:57 - cart
23:00 - so there you have it this would be this
23:02 - component
23:03 - we're going to style it but first i want
23:05 - to see if our data works so i'm going to
23:08 - go back to the app.tsx
23:10 - up here i'm going to import my component
23:13 - import
23:15 - item from dot forward slash
23:17 - item
23:19 - and forward slash again an item
23:22 - then i go down here
23:24 - and in our jsx in our return statement
23:26 - here
23:29 - i'm going to create parentheses
23:31 - and first we're going to have a wrapper
23:34 - like this and inside a wrapper
23:36 - we can map through our data
23:39 - and see if this works
23:41 - so first we're going to have a grid so i
23:42 - use the grid component from material ui
23:45 - this is the container
23:47 - so i mark it with a container prop and
23:50 - i'm going to set the spacing
23:52 - to 3
23:54 - and then we're going to have a grid item
23:56 - inside of this one and this is the item
23:58 - that we first have to map through our
23:59 - data and create the grid item for each
24:02 - item in the data so i have curly
24:04 - brackets i have the data i use a
24:07 - question mark because it's going to
24:08 - complain otherwise if it's undefined
24:12 - so if you use a question mark it will
24:14 - just return undefined if it can't find
24:16 - the data
24:19 - dot map
24:21 - we map through the data then we have the
24:23 - item and we know that this item is going
24:26 - to be a card item type
24:28 - card item type
24:30 - i don't think actually that we need to
24:32 - specify this because it is already
24:34 - specified
24:37 - it already knows that this data will be
24:39 - of the type card item type or undefined
24:43 - so i try to not set it at all
24:47 - yeah it seems to be working so we we map
24:49 - through the item
24:50 - and i'm gonna make an implicit return
24:52 - because we're returning
24:54 - jsx only so i have parentheses
24:57 - and then i have a grid item again from
24:59 - the material ui i marked this as an item
25:02 - not the container that i did there
25:04 - i set the key
25:06 - to the item.id because we're mapping
25:09 - through stuff in react and we need to
25:11 - have a key
25:12 - and then you can set how this is grid is
25:14 - going to be structured on different
25:16 - viewports so the extra small
25:19 - is going to be set to 12.
25:22 - small medium is going to be set to 4.
25:24 - this is quite similar to the bootstrap
25:26 - if you have used bootstrap before
25:29 - so we have the grid
25:31 - and then inside the grid
25:33 - i'm going to use my item component that
25:35 - that i just created and we give it the
25:37 - item prop
25:39 - we give it the item
25:42 - and then we have the handle
25:44 - add to cart
25:46 - it's going to be the function handle add
25:49 - to cart
25:51 - and then i self close this one
25:54 - do i dare to save it go back to my
25:56 - application
25:58 - yeah you can see that we have our items
26:00 - here but it looks like crap and that's
26:02 - because i haven't styled it yet so
26:04 - that's what we're going to do go back to
26:06 - the application and inside the
26:07 - items.style in the items folder
26:11 - we're gonna style this little sucker
26:15 - okay so we have the wrapper so first
26:18 - we're gonna display it
26:20 - as a flex
26:22 - not full screen edit why
26:25 - did it say like that yeah that's because
26:28 - this one disappeared display
26:32 - flex
26:33 - i'm going to justify the content to
26:35 - space between
26:40 - i'm going to set the flex direction to
26:42 - column
26:44 - the width is going to be
26:47 - 100 percent
26:49 - the border is going to be one pixel
26:51 - solid and light
26:54 - blue
26:55 - the border radius
26:58 - is going to be 20 pixels maybe and the
27:01 - height is going to be 100
27:03 - and then we're going to style the button
27:06 - so we can
27:07 - specify it inside of the wrapper here
27:10 - that's so great with style components
27:12 - you can nest stuff like this i'm going
27:14 - to set the border radius
27:16 - to 0 0 20 pixels and 20 pixels and i'm
27:19 - going to explain that why later
27:23 - then we have our image so we style the
27:25 - imd
27:27 - the max height
27:29 - is going to be 250 pixels
27:32 - the object fit is gonna be
27:35 - cover
27:36 - and the border dash radius
27:39 - is gonna be 20 pixels 20 pixels zero
27:42 - zero
27:43 - and the last one we're gonna style is
27:45 - the
27:46 - div and we can check it out here we have
27:49 - a div here inside also so we're going to
27:50 - style this once so back to the item
27:52 - styles
27:54 - the div
27:57 - the font family
27:59 - is going to be ariel not font font
28:02 - family font family
28:04 - ariel
28:06 - i set the padding
28:08 - to one rem and i set the height
28:11 - to 100 percent
28:14 - and hopefully when we save this and go
28:16 - back to our application you can see that
28:18 - it looks a lot better now
28:21 - and this if you see here when i click
28:22 - the button you can see that i style the
28:24 - corners otherwise this one here will go
28:27 - over the corner of the card itself so
28:29 - that's why i set the border radius on
28:31 - the bottom
28:33 - and i think it looks pretty nice and you
28:35 - can see that it
28:37 - restructured itself now on small
28:39 - viewports so you can tweak this yeah
28:42 - maybe a little bit better if you want to
28:44 - do that
28:46 - i think you get the id here on how stuff
28:49 - can look
28:50 - so that's the items and we're going to
28:51 - continue on creating the cart next so we
28:54 - have this nice little icon here to show
28:56 - and hide the court and we're going to
28:58 - add some stuff to the court and do some
29:00 - calculations and stuff like that
29:04 - the first thing we're going to do is to
29:05 - scaffold out some stuff in the app.tsx
29:08 - file
29:09 - and up here at the beginning of the app
29:11 - component i want to create a few states
29:14 - that we need for our cart
29:17 - it's a const
29:18 - cart open
29:20 - set cart open
29:23 - or you can call it cart is open or
29:25 - something if you want to do that because
29:27 - this is going to be a boolean that
29:28 - telling us if the card is open or closed
29:31 - equal use state
29:34 - and we set it to false initially
29:37 - then
29:38 - we need a state with actual items that
29:40 - we have in our cart so const
29:44 - card items
29:45 - items with an s
29:48 - set cart
29:49 - items
29:51 - equal use state
29:53 - and this one is going to be an array and
29:56 - we have to type this one i want to set
29:57 - it to an empty array initially so i
30:00 - create an empty array and then i specify
30:02 - the type s
30:05 - cart
30:06 - item type like this and this will create
30:09 - the correct type if we hover over here
30:11 - you can see that this is the card item
30:13 - type it's an array of card item type
30:18 - so that's the states that we're going to
30:19 - need for this one
30:21 - and then we can scroll down here
30:25 - just at the beginning of the wrapper
30:27 - inside of the wrapper
30:29 - we're going to create our drawer and
30:30 - that's a component from the material ui
30:34 - drawer it takes a prop that's called
30:37 - anchor
30:38 - and we want it to be anchored to the
30:40 - right of the screen
30:43 - open
30:44 - that's going to equal the state that we
30:46 - created cart open
30:48 - state up here that we just created
30:51 - so it's going to flip between true and
30:53 - false
30:54 - shouldn't be a coma there
30:58 - and then we have a prop on close
31:01 - so we have an inline arrow function set
31:04 - cart open
31:08 - and we set the value to false
31:11 - then we
31:13 - close it like this and inside of drawer
31:16 - we're gonna have our cart we haven't
31:18 - created that component yet
31:20 - so we can just type in cart goes here
31:24 - like this
31:26 - then we need our open and close button
31:28 - for the cart
31:29 - and for this one i actually want to
31:30 - style this button a little bit so i'm
31:32 - going to show you a different way of
31:33 - styling the button
31:35 - last time for the item i styled the
31:37 - button like this but you can also style
31:40 - a button by providing it to the style
31:42 - component itself so
31:44 - inside our app.styles file
31:47 - we're going to create a new style
31:48 - component and for this one the wrapper
31:50 - we can actually just
31:52 - set the margin to 40 pixels for that one
31:54 - that's the only style that we're going
31:56 - to need i just give it some morgan
31:58 - so it won't go to the edges of the
32:00 - screen
32:01 - and then we create a new component
32:02 - export const
32:04 - i call it style button
32:07 - equal style and then we can provide this
32:10 - function instead of doing backticks and
32:12 - creator styles we can have a parenthesis
32:14 - and provide it with a component that we
32:16 - want to style
32:18 - so i'm going to import something that's
32:20 - called an icon button from
32:22 - material ui so from at
32:26 - material dash ui forward slash core
32:29 - forward slash icon button
32:33 - and then i can provide this icon button
32:35 - to the style component like this
32:37 - and then we have the regular backticks
32:40 - for styles and we can type in our style
32:43 - just as we always do with the style
32:46 - components
32:47 - position is going to be fixed
32:51 - the set index
32:53 - is going to be 100 we want it to be
32:54 - placed over the other content
32:57 - we set it to right 20 pixels
33:00 - and top
33:02 - 20 pixels and as usual you can tweak
33:04 - these values if you want to do that
33:06 - so we save the file go back to our app
33:09 - component
33:10 - and we can create our button
33:13 - so just below the drawer
33:16 - now first we have to import it of course
33:18 - so up here
33:20 - where we have the styles wrapper we're
33:22 - also going to import the styled button
33:25 - like this
33:27 - then we move down here
33:30 - just below the drawer
33:33 - we can use the style button
33:35 - and this is now a button element or an
33:37 - icon button from the material ui so we
33:40 - can use the same props as usual we can
33:41 - use it just as a regular button from the
33:44 - material ui
33:46 - so an on click handler
33:48 - an inline arrow function
33:51 - set card open and we set it to true when
33:54 - we click this button
33:58 - and this button is also going to have
34:00 - something that's called a batch if we
34:02 - look at the finished application i have
34:03 - this red little badge here that shows
34:06 - how many items there is in the cart
34:10 - and we're already importing this as we
34:11 - did before so we can use this badge now
34:13 - from material ui so badge
34:17 - the badge content
34:20 - and we have created a function for this
34:22 - but it's empty now but it's the get
34:24 - total items
34:28 - and we give it the card items
34:31 - then we set the color
34:32 - to error and that will make it red
34:36 - and then inside of here we have our add
34:38 - shopping cart
34:40 - icon that we imported from material ui
34:43 - also you can see here that typescript
34:45 - complains because we haven't specified
34:47 - that this function has a parameter so we
34:49 - can't send in an argument to it expected
34:51 - zero arguments but got one so we can
34:54 - adjust this one so go up here to the
34:56 - function
34:58 - this one is going to take in the items
35:00 - that's all the items so we have the type
35:03 - of cart item type
35:05 - and an array
35:07 - and this will make this arrow go away
35:10 - hopefully
35:13 - like this sometimes it's a little bit
35:15 - slow actually
35:16 - before it kicks in
35:18 - save the file make sure that it works
35:22 - and we have our button here you can see
35:23 - and it opens the cart and we can close
35:26 - the cart by clicking outside of the cart
35:28 - you can of course add a bottom there if
35:30 - you want that also
35:33 - i think this is sweet actually i like
35:35 - this sidebar from material ui
35:39 - and no we don't have any items here so
35:42 - this one will show this badge when we
35:43 - have the items
35:46 - so we can actually create this get total
35:48 - items function now we remove this null
35:53 - and i'm just going to put it on the
35:55 - other row you can have
35:57 - these curly brackets if you want to have
35:59 - that and create a return statement but
36:01 - i'm going to do an implicit return here
36:04 - as this is an arrow function so it's
36:06 - going to be a one-liner so from the
36:08 - items that's the items that we send into
36:10 - this function
36:12 - we're going to reduce
36:14 - and first we have the accumulator
36:17 - that one is going to be a number it's
36:19 - going to return the total number of the
36:21 - items in the cart and then we have the
36:23 - items the items is already specified up
36:25 - here so it will know that this one is of
36:28 - the type card items type
36:31 - right
36:33 - then
36:34 - from the accumulator we add the item dot
36:39 - amount
36:41 - and we initialize it with zero
36:45 - shouldn't say items it should say item
36:47 - without an s
36:49 - so this will iterate through all the
36:51 - items in the cart and it will use the
36:54 - property amount and add up the amount
36:56 - and that will give us the total amount
36:58 - that's in the cart
37:00 - and the accumulator we give it an
37:01 - initial value of zero so that will add
37:03 - up so 30 starts with zero then it adds
37:06 - the amount
37:07 - for each item
37:10 - but it won't show us anything yet of
37:12 - course because we don't have anything
37:13 - and we can't actually put something in
37:15 - the cart so we're going to see this in
37:16 - action later
37:18 - okay so we have
37:20 - the drawer and we have the button for
37:23 - the card i think it's time to create the
37:24 - card itself so inside the src folder
37:28 - we're going to create
37:29 - a new folder that's called cart
37:32 - and inside of that folder we have a file
37:35 - that's called cart.tsx and we also have
37:37 - a file for the styles just as before
37:40 - card.styles.ts
37:44 - we can start in the style file we import
37:46 - styled
37:48 - from style components
37:51 - like this then we create our component
37:53 - we're going to have a wrapper again so
37:54 - export const
37:56 - wrapper equals a style and this one
37:59 - isn't a div i think it's more
38:01 - appropriate to have it as a side because
38:04 - it's kind of a sidebar
38:06 - a style on a side element
38:08 - double back ticks and then i have the
38:10 - css and this is not much so we can
38:12 - actually do it already now i set the
38:14 - font family
38:16 - to arial
38:18 - i set the width to 500 pixels for my
38:21 - sidebar i set the padding to 20 pixels
38:25 - and this should be it i think
38:27 - save the file go back to the cart dot
38:30 - tsx file
38:32 - and we can start by importing some stuff
38:34 - as we always do
38:36 - and also we're actually going to have a
38:37 - cart item so i think we can create that
38:39 - one also and just scaffold it out so we
38:41 - can use it in our cart so inside src
38:44 - folder create a new folder cart item
38:48 - and just as before we have two files
38:50 - cart item dot tsx
38:52 - and
38:54 - new file
38:55 - cart
38:56 - item dot styles
38:58 - dot
38:59 - ts
39:00 - and we start in the styles file import
39:03 - style
39:04 - from
39:05 - style components
39:09 - we export the const that we call wrapper
39:12 - for this one also and it's going to
39:14 - equal style.div double back ticks and
39:17 - then we have our css and i think
39:22 - yeah
39:23 - no we can wait with the css i'm just
39:25 - going to leave this empty for now so
39:27 - save the file and we go back to the card
39:28 - item
39:30 - and first we're going to import a button
39:32 - from
39:34 - at material
39:36 - dash ui forward slash core button
39:40 - then we needed types
39:43 - so import
39:44 - card item type
39:47 - from
39:49 - dot dot forward slash app
39:55 - and then we have the styles
39:58 - import
40:00 - wrapper
40:01 - from dot forward slash car item styles
40:04 - and then we scaffold out this component
40:08 - const car item
40:11 - is going to be a react.fc a functional
40:13 - component equal
40:15 - and for now we leave it empty like this
40:18 - we can just
40:20 - create a div that says card
40:23 - item
40:25 - and we export default
40:28 - card item
40:30 - and save the file so we're going to come
40:32 - back to this later of course and create
40:34 - that component but for now we go back to
40:36 - our cart
40:38 - and we can import this cart item
40:41 - from dot dot forward slash
40:44 - cart item and cart item
40:49 - then we have our styles
40:51 - import
40:52 - wrapper
40:54 - from dot forward slash cart dot styles
40:58 - and we have our types
41:00 - import
41:03 - card item
41:05 - type
41:06 - from
41:07 - dot dot forward slash
41:09 - app you can see that i also comment here
41:12 - everything you don't have to do this
41:14 - actually in a small application like
41:16 - this but
41:17 - it's a habit i have when i work on
41:18 - larger applications that i i like the
41:20 - common stuff here on the imports because
41:22 - if you have 20 or 30 imports so you
41:25 - quickly can see what you're importing
41:27 - but you can of course remove them like
41:28 - this if you don't want to have them
41:30 - because we only do three imports here
41:34 - right and this one is going to have some
41:35 - props type props
41:40 - we have the card items and by now we
41:42 - know that these are going to be the card
41:44 - item type and it's an array
41:46 - because this is the cart so it's going
41:48 - to receive an array with all the items
41:50 - that's in the cart
41:52 - then we're going to have add to cart
41:55 - that's the function that we created in
41:56 - app we know that this one has the type
42:00 - parentheses clicked item that's the
42:02 - parameter for that function
42:04 - and that one is going to be a car item
42:06 - type
42:08 - and it's going to return void it returns
42:10 - nothing
42:11 - and then we have remove from cart
42:15 - this one is only going to take in the id
42:17 - and it's going to be of the number type
42:20 - and it return nothing because when we
42:22 - remove something we don't actually need
42:24 - to add any elements because we already
42:26 - have all the items in this array that
42:28 - we're going to remove from so that's why
42:30 - we only need the id for that one
42:33 - okay so that's the props
42:36 - so we can create our component const
42:38 - cart
42:39 - it's a react dot fc a functional
42:41 - component
42:43 - we have the angle brackets
42:45 - and we give it the props because this is
42:47 - a typescript generic so that's why we
42:50 - can send it in like this and then we
42:52 - have the props so every parenthesis with
42:54 - the structure out the card
42:56 - items the add to cart
43:00 - and remove
43:02 - from cart
43:04 - and we have an arrow function
43:06 - and this one
43:08 - is going to make an explicit return so
43:10 - we have curly brackets and we have the
43:12 - return statement
43:14 - like this
43:15 - so first we return the wrapper
43:18 - that's the style component we created
43:21 - then
43:22 - we have an age to tag
43:24 - your shopping cart
43:27 - or whatever you want to type in and then
43:30 - we can also type in some text if we
43:32 - don't have any items in the cart so i
43:34 - have curly brackets and i check if cart
43:37 - items dot length
43:38 - equals zero
43:41 - then i have a question mark it's a
43:42 - turner operator i display a p tag
43:45 - no items
43:47 - in cart
43:50 - and otherwise we display null we display
43:53 - nothing so this will display this text
43:55 - if we don't have any items in the cart
43:58 - and then we can map through our items
44:00 - card items
44:02 - dot map we have the item we don't have
44:05 - to specify the type because it will know
44:07 - that it's of this type you can see here
44:09 - card items is of the card item type so
44:11 - we don't have to specify it here
44:14 - like this
44:15 - and i make an implicit return on this
44:17 - one
44:18 - and i'm going to return the cart item
44:21 - and for now i just do like this
44:24 - we're going to come back to this one
44:28 - very important to export default
44:32 - cart
44:33 - otherwise it won't work so we're going
44:35 - to come back to this one and give it the
44:36 - correct props but for now i'm going to
44:38 - go to the app
44:40 - dot tsx file and we're going to import
44:45 - cart from
44:47 - dot forward slash cart forward slash
44:50 - cart
44:52 - like this
44:54 - we go down in our jsx
44:58 - instead of cart goes here
45:00 - we're gonna use our card component
45:04 - and you see that it complains because it
45:06 - wants the props so we have to specify
45:08 - the props also for the cart
45:11 - so we have the cart items
45:14 - it's going to be the cart items
45:16 - then we have add to cart
45:20 - it's going to be the handle add to cart
45:25 - i can actually move them down to their
45:28 - own
45:30 - row and then we have
45:33 - remove from cart
45:36 - it's going to be the handle remove
45:39 - from cart
45:42 - save the file
45:44 - and we go back and see what we got so
45:46 - far
45:48 - you can see that we have our shopping
45:49 - cart here no items in cart because we
45:51 - don't have any items in the cart
45:54 - all right
45:56 - so we go back to the cart
45:59 - we know that it's working
46:01 - and this cart item here we're going to
46:02 - provide it with the correct props
46:05 - first as we're mapping through these
46:07 - items we need to set a key
46:10 - and the key is going to be the item.id
46:13 - then we have the item
46:18 - then we have the add to cart function
46:21 - add to cart
46:24 - and we have remove
46:27 - from cart
46:29 - and remove from cart and now you can see
46:32 - the complaints because we haven't
46:33 - created this
46:34 - item component yet so that's what we're
46:36 - going to do next because now it
46:38 - complains and it breaks the application
46:40 - but keep calm we will fix this soon
46:44 - so we are sending in the props to the
46:46 - card item and we can build our card item
46:48 - component so go back to the cart item
46:50 - file
46:52 - not the styles right now the file here
46:55 - and we import everything that we need
46:57 - here and we can create the props for
46:59 - this one so type props equal
47:03 - we have the item it's going to be of the
47:04 - cart item type
47:07 - this is a single item so we don't have
47:09 - an array here
47:10 - and then we have to add to cart
47:13 - it's going to be the clicked
47:16 - item
47:17 - and cart item type
47:19 - and it's going to return void it returns
47:21 - nothing and then we have remove from
47:24 - cart
47:25 - this one is going to be an id with a
47:27 - number
47:30 - and it's going to return nothing so void
47:32 - and we give it these props inside of
47:34 - angle brackets
47:37 - just here
47:37 - we did before
47:39 - so now you can see cart won't complain
47:41 - anymore because we have the correct
47:43 - props typed for us
47:46 - so that's sweet
47:48 - and our application should be working
47:50 - again yeah
47:51 - it is
47:53 - right
47:54 - back to the code
47:56 - we can still make an implicit return but
47:58 - we're going to have parenthesis here
48:01 - and we're going to have the wrapper
48:04 - and first inside of the wrapper we're
48:06 - gonna have a div
48:09 - oh what happened
48:12 - yeah
48:13 - okay like this
48:15 - then i have an h3 tag
48:18 - and there i'm gonna display the
48:20 - item.title insider curly brackets of
48:22 - course because we're grabbing these
48:24 - items now
48:27 - and we haven't destructed out the props
48:29 - i need to do that also it's up here i
48:30 - just structure out the item
48:32 - the add to cart and remove
48:37 - from cart
48:40 - and this item of course i can show you
48:42 - in the finished one
48:45 - is this item here that i create now so i
48:47 - have the so the h3 tag is going to have
48:49 - this title and then we have these
48:50 - buttons to add and remove stuff here
48:54 - so that's the one that we create now
48:57 - all right that's the title then we have
48:59 - another div
49:00 - and for this one i'm going to create a
49:02 - class name
49:03 - it's going to be information
49:09 - this one is going to hold a p tag
49:13 - with price
49:15 - i have a dollar sign
49:19 - and then i have curly brackets
49:21 - don't mistake this for a template
49:23 - literal because this is just a dollar
49:25 - sign that i print out it has nothing to
49:28 - do with these curly brackets here
49:31 - i'm going to grab the item.price
49:33 - for this one
49:35 - and then we have another p tag we're
49:37 - going to calculate the total for each
49:39 - item so the total is going to be yet
49:42 - again we have a dollar sign in front of
49:44 - our price that we're going to show
49:47 - and i have a pair of parentheses and i
49:49 - take the item dot amount
49:52 - times
49:54 - the item dot price
49:58 - and then i need to remove some decimals
50:00 - so i'm going to have dot 2 fixed
50:03 - and a 2 that's going to give us 2
50:05 - decimals
50:06 - all right so that's going to be the
50:08 - total that we can see
50:10 - if i go back to the application
50:12 - [Music]
50:13 - the finished one going to be these ones
50:16 - here
50:17 - that we created now and now we have to
50:19 - create the buttons and the
50:20 - total amount here
50:24 - so i create another div with a class
50:27 - name of
50:29 - buttons
50:33 - i create a material ui button
50:36 - the size is going to be small
50:40 - i'm going to disable elevation so i
50:42 - don't have any drop shadow on it
50:47 - the variant
50:49 - is going to be contained
50:51 - as i want it to display with a
50:53 - background in the button
50:55 - and then i have the on click handler
50:58 - it's going to be an inline arrow
51:00 - function
51:03 - and i'm going to call the remove from
51:05 - cart
51:07 - and i'm going to provide it with the
51:08 - item dot id
51:11 - now we close the button and inside the
51:13 - button i'm just going to
51:14 - type out the minus sign
51:18 - right
51:19 - then in the middle we're gonna have a p
51:22 - tag
51:23 - curly bracket
51:25 - item dot amount
51:27 - and curly bracket
51:28 - and then we can actually copy this
51:30 - button here
51:33 - paste it in
51:34 - below the size is going to be the same
51:37 - disable elevation and contain is going
51:39 - to be the same
51:40 - the on click is going to be
51:44 - add to cart instead
51:47 - and this one
51:48 - takes in the complete item not only the
51:50 - id so i'm going to remove id and give it
51:52 - the item
51:54 - and this one is going to have a plus
51:56 - sign instead so that's the balance and
51:59 - then we need to have the image also and
52:01 - the image is going to go
52:02 - below the divs here last
52:05 - before the ending wrapper tag
52:08 - so i have imd src equal
52:11 - the item.image
52:13 - and i set an alt
52:15 - to the item.title on this one we can
52:18 - self-close it
52:20 - like this and this should be the item
52:23 - for the cart
52:25 - save the file just go back to check that
52:28 - everything works
52:32 - it does but we can't see any items
52:33 - because we don't have any way to
52:35 - actually add it to the cart
52:38 - so that's what we're going to do next
52:40 - we're going to create the function for
52:41 - adding and removing stuff in the cart
52:43 - and we're also going to display the
52:45 - total amount in the cart
52:49 - we move back to the app.tsx file the
52:52 - main component for the application so to
52:54 - say
52:55 - and we need to create our functions for
52:57 - adding stuff to the cart and also
52:59 - removing stuff from the cart
53:01 - we already scaffold out this handle at
53:03 - the cart so we remove this null
53:06 - create curly brackets and inside we're
53:08 - gonna do some stuff
53:12 - when we click this button we're going to
53:14 - set
53:15 - cart items
53:18 - and this is the setter for the state and
53:20 - we can always get the previous state
53:21 - from this one
53:22 - so prev you don't have to call it prev
53:25 - but i like to call it prev as it stands
53:27 - for previous in my mind at least
53:31 - so we have prayer and then we have curly
53:32 - brackets i'm going to make an explicit
53:34 - return on this one and first
53:38 - is the item already in cart
53:42 - already added in the cart
53:45 - because we have to take into
53:46 - consideration here when you click add if
53:48 - the cart is empty we need to add that
53:51 - item to the cart if it already exists in
53:53 - the cart we should only add on the
53:55 - amount on that item
53:57 - so we should modify the item that exists
53:59 - in the cart
54:00 - so we can check if this one is
54:03 - in the cart and remove the sidebar
54:06 - i create a const is
54:09 - item or is item in
54:12 - cart
54:13 - maybe to be extra specific here
54:15 - from the previous state i'm gonna find
54:19 - i have the item and i check if the item
54:22 - dot id equal to
54:24 - the clicked item dot id so i check if
54:27 - the item that i clicked on exist in the
54:29 - cart by by comparing these two ids
54:32 - i loop through the stuff
54:34 - it's going to return true or false if it
54:36 - finds it in this array right
54:40 - then
54:41 - if is
54:43 - item in cart
54:45 - if we have this item in the cart
54:49 - we need to do some stuff so if we have
54:51 - the item in the cart we need to update
54:53 - the amount on that specific item and we
54:55 - can do that by mapping through the items
54:58 - so return
55:00 - prev.map
55:03 - we have the item an arrow function
55:06 - and we can make an implicit return on
55:08 - this one
55:10 - we have the item dot id if that one
55:12 - equals
55:13 - the clicked
55:14 - item
55:15 - dot id
55:18 - i create a turner operator it's going to
55:20 - be on multiple rows here but i have the
55:22 - question mark
55:24 - then if it finds the item we're going to
55:26 - update that amount so i return an object
55:28 - with curly brackets
55:30 - i spread out the old item and then i
55:33 - have the amount property
55:36 - i'm going to update this property
55:37 - item.amount
55:39 - plus one
55:41 - if we find an item otherwise we have a
55:43 - colon
55:44 - and we're just going to return the item
55:46 - as it is we don't do anything we only
55:49 - update the amount on the item that we
55:51 - actually clicked on
55:53 - so this is if we have an item in the
55:55 - cart otherwise
55:58 - we can mark it as first
56:00 - time the item is added
56:05 - we're going to return
56:07 - and we have the array we spread out the
56:09 - previous state
56:11 - inside of the array and we add this new
56:13 - item
56:14 - so we spread out the clicked item inside
56:16 - of curly brackets we're creating an
56:18 - object here and we set the amount to one
56:24 - so this is hopefully going to add this
56:25 - item to the cart so i'm going to go
56:27 - through it again here the first thing i
56:28 - do is i call the setter for the card
56:31 - items if we use a function for the
56:33 - setter we will get access to the
56:34 - previous state so i checked in the
56:36 - previous state if this item already
56:38 - exists because if it exists we need to
56:41 - update it instead of adding it to this
56:43 - array
56:44 - and if it exists i'm going to loop
56:46 - through all the items until i find the
56:48 - item that i clicked on and i'm going to
56:50 - add one to the amount for that one
56:52 - otherwise if this is the first time that
56:54 - we click on this item to the cart the
56:56 - first time we put it in the cart i
56:58 - return an array with all the previous
57:00 - stuff in the cart i spread it out here
57:03 - and then i add this item to the array
57:05 - here where i spread out the clicked item
57:08 - but i set the amount to one
57:11 - so we can see if it works save the file
57:13 - go back
57:14 - to the application reload it just to be
57:17 - sure
57:20 - i click add to cart and you can see that
57:22 - it adds it up here
57:26 - and this actually looks awesome already
57:29 - but it doesn't look awesome here it's
57:31 - quite big we haven't styled this once
57:33 - yet so that's what we're going to do
57:34 - next we're going to style this cart item
57:36 - so that's what we're going to do now
57:39 - go back to the code and inside the cart
57:42 - item
57:43 - dot styles
57:44 - we have this wrapper
57:47 - first we're going to display it
57:50 - as a flex
57:52 - we justify the content
57:54 - to space dash between
57:59 - we set the font family
58:02 - to ariel
58:04 - border dash bottom is going to be one
58:06 - pixel solid light blue
58:09 - we set the padding
58:12 - dash bottom to 20 pixels
58:15 - we can actually see how it looks like go
58:17 - back to the application yeah we have
58:19 - some styling here
58:22 - right
58:26 - then we're going to style the div we set
58:28 - that one to flex 1
58:30 - and then we have the class that we call
58:32 - information
58:34 - and also the class that's called button
58:37 - so we style these ones in one go
58:40 - we display them as a flex
58:43 - and justify content
58:46 - space dash between
58:50 - and then we're going to style the imd
58:53 - the image
58:55 - max dash width is going to be 80 pixels
58:58 - for this one
58:59 - and we set the object fit to cover
59:04 - and the margin dash left is going to be
59:06 - 40 pixels
59:08 - save it go back to the application
59:11 - and you can see that yeah it still
59:13 - doesn't look right
59:17 - we have to fix this
59:24 - it's some stuff with this one here the
59:26 - buttons
59:28 - information i'm gonna go to the cart
59:30 - item
59:34 - no it's the bonus
59:36 - class name buttons
59:39 - yeah buttons with an s
59:41 - change this class and add an s it should
59:44 - say
59:44 - buttons and i'll go back and you can see
59:46 - that it
59:48 - looks great now i think but we can only
59:51 - add items and you can see this is what's
59:53 - so great about reactos we can reuse
59:55 - stuff we have created this component and
59:56 - we use the same function for adding
59:58 - stuff and it just instantly works
60:01 - because it's the same function that we
60:03 - use here
60:05 - so the thing we have to do now is to
60:06 - create our function for removing items
60:09 - in the cart so go back to the code and
60:12 - inside app.tsx
60:16 - we have our function that's called
60:17 - handle remove from cart
60:20 - and this one is going to have a
60:22 - parameter that's called id and this one
60:24 - is going to be a number
60:26 - we remove null
60:28 - create curly brackets
60:30 - and yet again we're going to set cart
60:33 - items
60:35 - we have the previous state an arrow
60:37 - function
60:38 - we can make an implicit return
60:41 - and for this one i'm going to use reduce
60:44 - so i have the prev dot reduce
60:48 - parenthesis
60:49 - and another pair of parentheses i have
60:51 - the accumulator
60:53 - and i have the
60:54 - item arrow function and i make an
60:57 - explicit return on this one i think it's
61:00 - more readable
61:01 - we also need to specify the initial
61:03 - value for the reduce otherwise
61:05 - typescript will complain for us so we
61:07 - have a coma
61:09 - we have an empty array and we're going
61:10 - to specify this as cart item
61:13 - type and an array
61:16 - and then it won't complain for us later
61:19 - and the first thing we have to do in
61:21 - this reduce is to check if
61:23 - if the item dot id equals to the id if
61:27 - we're on that item in the array that we
61:28 - clicked on
61:30 - we're going to do something so we have
61:31 - curly bracket
61:33 - and we have another if statement because
61:34 - we want to check if the item amount is 1
61:37 - then we're going to remove this item
61:38 - from the array when we click the minus
61:40 - sign
61:42 - because we go from one to zero and it's
61:43 - no longer in the cart so if item dot
61:47 - amount equals to one
61:50 - we're going to return the accumulator we
61:51 - remove this item from the array so we
61:54 - only return our accumulator and do
61:55 - nothing
61:57 - otherwise we're going to return
62:00 - an array we spread out the accumulator
62:03 - the previous array
62:06 - we create a new object where we spread
62:08 - out the item
62:10 - we have the amount
62:11 - and the amount is going to be
62:14 - subtracted by one so from the item dot
62:16 - amount
62:18 - we have minus one
62:20 - so if we're on the item that we clicked
62:23 - on we first check if the amount is one
62:25 - then we remove it from the array
62:27 - otherwise we remove one from the amount
62:29 - and if we're not on the item that we
62:32 - clicked on we have the else statement
62:34 - here
62:35 - we're going to return
62:37 - an array
62:38 - we spread out the accumulator and we
62:41 - return the item as it is we don't do
62:43 - anything with item
62:46 - and i have some stuff here that is not
62:48 - correct
62:50 - [Music]
62:52 - why is it so
62:55 - i guess it is
62:58 - yeah this one here should of
63:00 - course remove the coma and it should go
63:03 - inside of here
63:04 - instead
63:06 - like this
63:09 - so the reduce starts here and then we
63:10 - have a coma and then you have the array
63:12 - and we specify it as a card item type
63:15 - like this
63:16 - so i'm going to go through it again just
63:18 - to explain so we set the card items we
63:20 - have the previous state i call the
63:22 - reduce on the previous state we have an
63:24 - accumulator that starts with an empty
63:26 - array that we specify as the card item
63:28 - type an array of card item type
63:31 - then i check if the item id is equal to
63:33 - the id here that gets sent in as an
63:36 - argument to this one we know that this
63:38 - is the item that we clicked on and if
63:40 - the item amount equals to 1 i return the
63:43 - accumulator so i skip this item and this
63:45 - will delete it from the array otherwise
63:47 - i return a new array where i spread out
63:49 - the accumulator and i have a new object
63:52 - where i spread out the item and i
63:55 - subtract one from the item amount so we
63:58 - remove one from the amount
64:00 - otherwise we return the item as it is so
64:03 - we have the accumulator and the item in
64:05 - this array right save the file we can go
64:07 - back to our application and see if it
64:09 - works
64:11 - and it does and you can see that it
64:13 - calculates this beautifully when we
64:16 - remove stuff here
64:20 - so i'm pretty happy with this we only
64:21 - have one more thing to do and that is to
64:23 - display the total amount in the cart
64:26 - so go back to the code and inside the
64:28 - cart
64:31 - that's why we also made an explicit
64:33 - return here because we're going to
64:34 - create this function here
64:36 - so up here at the top of the cart
64:39 - component
64:42 - we're going to create a new function
64:44 - const calculate
64:48 - total equal
64:50 - it's going to take in the items
64:53 - that is going to be of the card item
64:54 - type and array
64:56 - we have an error function i make an
64:58 - implicit return so i move down to the
65:00 - row below
65:02 - and the items dot reduce
65:05 - yet again i'm going to use the reduce
65:06 - method
65:08 - we have the accumulator it's going to be
65:10 - a number and we have the item the item
65:13 - we don't need to specify because it
65:14 - already knows that this is for the cart
65:17 - item type
65:18 - so we have an arrow function
65:20 - and accumulator
65:22 - and to the accumulator i'm going to add
65:24 - the item
65:26 - dot amount
65:28 - times
65:30 - item.price
65:32 - and then i have a comma and specify the
65:34 - accumulator to be zero initially
65:38 - so we have the calculate total function
65:42 - and if we move down here
65:45 - just below the card items
65:47 - we create an h2 tag total
65:51 - colon and then we have the dollar sign
65:53 - again
65:54 - just to display it in front of the price
65:57 - current brackets
65:59 - we call the calculate total
66:02 - we give it the card items
66:04 - and this is fine but i want to remove
66:07 - some decimals on this one also so i have
66:09 - dot 2 fixed
66:11 - and i give it a 2 because i want 2
66:13 - decimals
66:14 - save the file go back to the application
66:18 - and you can see the total amount
66:21 - and there you have it we have a fully
66:23 - working cart
66:25 - at least some of it we can't actually
66:27 - buy something but yeah
66:30 - you know what i mean so i think this
66:31 - actually is a good practice because you
66:33 - can use this
66:34 - in the real world so to say because this
66:36 - is not actually far from a lot of stuff
66:39 - you probably will do if you work on a
66:41 - real world application

Cleaned transcript:

hello and welcome to this little tutorial here on free code camp i'm thomas weber farq i'm a developer from sweden and i've created a few videos for free code camp now i love free code camp they have a lot of great stuff so that's why it's so fun creating videos for them i just want to say also that i have my own youtube channel where i publish weekly videos so search for vapenfarc or check out the link down below here and i also have a site where i have my premium courses if you want to get more indepth knowledge of stuff i do a lot of stuff on react and gatsby for example so visit my site if you like my teaching style and want to support me so let's get started hey hey what's up in this video we're gonna create a cool little maybe not that cool but a little web shop with a cart so it's going to look something like this because i found this fake store api where we can get some data to create this little store so that's what i'm using here and you can add stuff to the cart as you can see and it adds them up here and then we have the cart button here and we have these nice little buttons where we can change the amount and it will show the total and of course is this if this was a real shop you would have a button here to go to the payment and stuff like that but i won't do that and i'm going to use material ui i'm going to use react query and typescript and style components for this one so it's going to be a lot of learning in this video i think go back to your terminal and inside somewhere where you want to have the application i have mine in a folder that's called react shopping cart so we're going to create our project mpx create dash react dash app and then we name our project i think it's going to be named react shopping dash cart yeah then we use the dash dash template and typescript this is how you set up a typescript application with create dragged app and we press enter it will take some time so i'm going to skip this okay that went well we have our application and make sure to navigate inside of the folder cd react dash shopping dash cart clear the console and then we're going to install our dependencies so first we're going to use material ui so there are a couple of things that we need from that library i'm going to install the core and also the icons because i have an icon up here you can see in the store that i use for this one so mpm i at material dash ui forward slash core that's the core library and then we need icons so at material dash ui forward slash icons so that's everything we need for the material ui and then we're going to install react query so mpm i react dash query so i'm going to clear the console where one more thing to install and that's the style components and you may think well why are you using style components when you're using material ui and that is because i don't really like the way that i style stuff in material ui i think there's a lot of great stuff in the library itself but the styling is in my opinion not good so that's why i use style components i will get much cleaner code instead of using their internal way of styling things so that's why but it's highly opinionated of course so if you want to use the internal stuff instead you can do that but i won't show it in this tutorial so i'm going to install mpmi styled dash components and as we're in typescript land now we also need to install the types so we have add types forward slash style dash components all right we can open up our code like this and i'm going to do some cleanup first we don't need app.css we don't need app.test we don't need the index.css not the logo and not the report web vitals and the setup tests so delete those ones and inside of the index.tsx we can remove some stuff remove the report web vitals remove the index we can also remove this one here and actually we can't use the strict mode as we're going to use the drawer in material ui or we can use it but we will get a warning so i'm going to remove strict mode they haven't fixed that yet i hopefully hopefully they're going to fix it soon it will throw a warning in the console so for now i just remove it and inside the app.tsx file we can also do some cleanup you can see that this one is grayed out and that's because we don't need to import react when we're using react 17 and above as we use now so we remove that then we remove the logo and we also remove this one and here we can just remove everything that has to do with a header and we can say start i like to have an arrow function so i'm going to convert this one to an arrow function you can do whatever you want something like this save it and i'm going to do one more thing before we start up the application to see that it works so we have something to start from and that's inside of the index.tsx file we're going to set up react query so i'm also going to bump this one up maybe like this so we import query client and something that's called query client provider from reactquery right then we're going to wrap this app with the query client provider and it takes in a prop that's called client and this client is going to be something that we create here so we have a const we can call it client and we create a new query client and we call it like this and this will make sure that we have a client in this const so we can provide this client to the client client to the query client provider oh long names here and i'll move the app inside of this one and this will make sure that we can use react query in our application so i save the file and then i go back to my console and i'm going to type in mpemstart yeah i already have my other application running on port 3000 so this one is going to be on port 3001 instead so i'm gonna open up that here localhost and i'm gonna move it here so this one is the application we're working on and we also have the finished application there so it seems to be working just going to check the console great so that's the setup we're going to move on and create the different items for the shop itself and then lastly we're going to create the cart and items for the cart all right we're going to be inside of the app.tsx file and first we're going to start with some imports or it's actually quite a lot of imports we need for this one so first we're going to import use date from react then we're going to import use query from react query and then we have some components so i marked them with components and i'm going to import some stuff from the material ui that we're not going to need yet but i'm going to import them now so that we have them later so first i'm going to import a component that's called drawer from at material ui forward slash core forward slash drawer capital d all right then i'm going to import something that's called a linear progress from at material ui forward slash core forward slash linear progress then we have the grid so import grid from at material ui forward slash core forward slash grid and we're gonna have the icon for the shopping cart import add shopping cart icon from at material dash ui forward slash icons forward slash add shopping cart yeah add shopping cart and then we have a badge so import badge from at material ui forward slash core badge so that's everything in this component that we need from the material ui library we're also going to import some other stuff here later for example the cart and the item so that's what we're going to do later and we're also going to have some styling for this one so i'm going to mark this one with styles and for now i'm just going to scaffold out the style component and i like to keep them in a separate file so i'm going to create a new file that i called app.styles.ts and in this one i'm going to import styled from style components and i just scaffold out the component that i call wrapper so i have to export it as i want to import it in my app export const wrapper equals style.div save it and go back to the app.tsx and now we can import it import wrapper from dot forward slash app.styles and that's our import for now and as i told you i'm gonna use an api that's called fake store api i haven't heard of it before i just googled some stuff because i needed a fake store api for this application so that's what i'm going to use so we have to create a fetching function for it so go back to the code outside of the app itself i'm going to create this fetching function because we don't need to recreate it on each render so const get products equals and this is an async function as we're going to fetch from an api i'm going to wait and have parentheses and i wait again so this weight inside of the parenthesis is going to be for the api call itself and this the weight is going to be when we convert it to json because converting to json is also async so a weight fetch i have a string with a url https for column forward slash forward slash fake store api dot com forward slash products like this and here at the end after the last parenthesis i have dot json and convert it into json so that's why i have the double weights we're also going to type this one the data that we get back from the api has a structure of it and as this is typescript we want to type that structure so this structure that i'm going to type now i can mark it with types is from the api and we're going to see this structure when we get the data back so i'm going to export this type because i'm going to use it in other components also i call it car item type and i specify my type so the id is going to be a number the category is going to be a string the description is going to be a string the image is going to be a string the price is going to be a number the title is going to be a string so this is all the properties that we get back from the api but i want to add my own property and that's the amount because we need to keep track of the amount in our cart so i add the amount and i type this as a number so that's the types so now we can type the return type of this get products function so colon and this is a promise as we're using async and weight and the promise is what's called a generic in typescript so we can provide it with the type that we want so promise and then we have angle brackets and inside angle brackets we specified the type that we created up here cart item type so there you have it that's the correct type for the get products function all right i think we're ready to go to actually fetch some data so inside our app we're going to use react query to fetch our data so i create a const either structure out the data the boolean that's called is loading and the error equal and i call the use query hook and this one we can also type the return type of the data that we get back because this use query is also generic so we have angle brackets and we type it as the same type card item type and this is an array and actually this one should also be an array up here i missed this one because the data that we get back is an array with all the card items so we specify this as an array also all right so that's the type for the use query then we have the query key and it's a string we can name it to whatever we want i name it products and then this is getting quite long here we have our fetching function here so we have the query key a comma and then we provide it with a function get products like this do some order formatting we'll place it on its own row and this should be get products that's the function that we created up here and now we can actually console.log out some data to see that we get something console.log data save the file go back to the application reload it you can see that we have the data here and here's the structure that i typed in my type the category description id image price title and you can see that it missed that amount prop that i added myself but otherwise it looks exactly the same when i specified i typed i first looked at the data and then i know the type so i could create that type for it all right so we know that we have some data we're just gonna scaffold out some stuff here before we create our jsx we're gonna have a few functions inside of this one we're gonna have a function that's called get total items and for now i just create an empty arrow function we're going to return null for this one and we're going to have one that's called handle add to cart and i also specify it as an empty error function and the last one is going to be handle remove from cart and i return now and of course we're going to return back to these functions later all right and before we return the data the actual data with the products we can check if is loading and if we load in something we can return from the material ui library we have something that's called a linear progress we also have a circular progress if you want to have that that one is a little bit more tricky to get centered in the screen so this one is going to be displayed at the top and i'm going to show you that in a second and also if we have an error we can return something return a div that says something went wrong something like this save it go back to the application and we reload it you can see this progress bar here when we load the data so i think it actually looks kind of nice to have it up here at the top like this otherwise you could have a circular progress in the middle here or something and that's of course the linear progress that we imported up here before from the material ui core so we have some data and we need to to create our grid with the products but first we actually want to create a component for the grid itself because if we look here we have these nice little cards it's going to be a separate react component so we can create that one first so inside our src folder we're gonna create a new folder that we call item capital i and inside this one we're gonna have two files we're gonna have the item itself so item.tsx and we're also going to have a file that's called item.styles.ts and that's because i want to have my styles outside of the component itself so inside items.styles we're going to import styled from style components and for now i'm gonna export const i call it wrapper again and it's gonna be a style div and we have double back ticks like this so we're going to fill this in with styles later but first i want to create a component itself so go inside of the item.tsx file and up here we're going to import the button from at material ui forward slash core button then we're going to import those types that we created in this app component up here so that's why i export them here so that we can reduce them in other components so i marked this one with types and i import card item types type without an s from dot forward slash app and then we have the styles import wrapper from not forward slash item dot styles right that's every input we need to do and we're in typescript so we have to type some props for this one type props because it's going to take in two props we have the item itself and that's why we imported this one here this item prop is going to be of the type card item type and then we're going to have the handle add to cart that's going to be the function in the app here this one handle add to cart and we could actually change this one a little bit now this handle add the cart is going to take in an item i call it clicked item and it's going to be able to type cart item type like this so you can see the type here if we hover over handle add to cart we have the type here it will only accept this type so that's why we also have to type this correctly in the prop in the item.tsx so this type is going to be clicked item and it's going to be of the type cart item type and it's going to return nothing so it's going to return void so this is the correct type that one and then we can create our component const item it's going to be a colon and it's going to be a react dot fc that's the type for the react functional component and this is a generic so we have the angle brackets and we give it the props so this is how you specify and type the props in a typescript react component all right then we have an equal sign parenthesis with the structure of the props the item and the handle add to cart and then we have an error function and we can make an implicit return because we're only going to return jsx in this one so first we have the wrapper like this i'm going to have the image so imd the source is going to be from the item dot image we can set an alt on this one and we set it to the item.title and these are the properties from the data in the item that we get back from the api of course then we have a div i'm going to have an h3 tag with the item dot title and as we're in jsx i have to use curly brackets to grab these values then we have a p tag i have a new pair of curly brackets and i'm going to grab the item.description then we have another h3 tag for this one and first i'm going to have a dollar sign because the price is going to be in dollars and then i have a pair of curly brackets and i grab the item.price like this and then we need to export default item and yeah of course we need to have the button also for adding to the cart so down below here where after the after the div we have the button we're going to have an on click on this one we have an inline arrow function and we call the handle add to cart and we give it the item and i need to have an inline arrow function here because we need to send in this little prop here to this one also so that's why we can't just do it like this because this will trigger it right away so that's why i use an inline function you can also create a function up in the component if you want to do that but in this case i think it's neat to have this little inline arrow function it will be fine so the button we close it and it's going to say add to cart so there you have it this would be this component we're going to style it but first i want to see if our data works so i'm going to go back to the app.tsx up here i'm going to import my component import item from dot forward slash item and forward slash again an item then i go down here and in our jsx in our return statement here i'm going to create parentheses and first we're going to have a wrapper like this and inside a wrapper we can map through our data and see if this works so first we're going to have a grid so i use the grid component from material ui this is the container so i mark it with a container prop and i'm going to set the spacing to 3 and then we're going to have a grid item inside of this one and this is the item that we first have to map through our data and create the grid item for each item in the data so i have curly brackets i have the data i use a question mark because it's going to complain otherwise if it's undefined so if you use a question mark it will just return undefined if it can't find the data dot map we map through the data then we have the item and we know that this item is going to be a card item type card item type i don't think actually that we need to specify this because it is already specified it already knows that this data will be of the type card item type or undefined so i try to not set it at all yeah it seems to be working so we we map through the item and i'm gonna make an implicit return because we're returning jsx only so i have parentheses and then i have a grid item again from the material ui i marked this as an item not the container that i did there i set the key to the item.id because we're mapping through stuff in react and we need to have a key and then you can set how this is grid is going to be structured on different viewports so the extra small is going to be set to 12. small medium is going to be set to 4. this is quite similar to the bootstrap if you have used bootstrap before so we have the grid and then inside the grid i'm going to use my item component that that i just created and we give it the item prop we give it the item and then we have the handle add to cart it's going to be the function handle add to cart and then i self close this one do i dare to save it go back to my application yeah you can see that we have our items here but it looks like crap and that's because i haven't styled it yet so that's what we're going to do go back to the application and inside the items.style in the items folder we're gonna style this little sucker okay so we have the wrapper so first we're gonna display it as a flex not full screen edit why did it say like that yeah that's because this one disappeared display flex i'm going to justify the content to space between i'm going to set the flex direction to column the width is going to be 100 percent the border is going to be one pixel solid and light blue the border radius is going to be 20 pixels maybe and the height is going to be 100 and then we're going to style the button so we can specify it inside of the wrapper here that's so great with style components you can nest stuff like this i'm going to set the border radius to 0 0 20 pixels and 20 pixels and i'm going to explain that why later then we have our image so we style the imd the max height is going to be 250 pixels the object fit is gonna be cover and the border dash radius is gonna be 20 pixels 20 pixels zero zero and the last one we're gonna style is the div and we can check it out here we have a div here inside also so we're going to style this once so back to the item styles the div the font family is going to be ariel not font font family font family ariel i set the padding to one rem and i set the height to 100 percent and hopefully when we save this and go back to our application you can see that it looks a lot better now and this if you see here when i click the button you can see that i style the corners otherwise this one here will go over the corner of the card itself so that's why i set the border radius on the bottom and i think it looks pretty nice and you can see that it restructured itself now on small viewports so you can tweak this yeah maybe a little bit better if you want to do that i think you get the id here on how stuff can look so that's the items and we're going to continue on creating the cart next so we have this nice little icon here to show and hide the court and we're going to add some stuff to the court and do some calculations and stuff like that the first thing we're going to do is to scaffold out some stuff in the app.tsx file and up here at the beginning of the app component i want to create a few states that we need for our cart it's a const cart open set cart open or you can call it cart is open or something if you want to do that because this is going to be a boolean that telling us if the card is open or closed equal use state and we set it to false initially then we need a state with actual items that we have in our cart so const card items items with an s set cart items equal use state and this one is going to be an array and we have to type this one i want to set it to an empty array initially so i create an empty array and then i specify the type s cart item type like this and this will create the correct type if we hover over here you can see that this is the card item type it's an array of card item type so that's the states that we're going to need for this one and then we can scroll down here just at the beginning of the wrapper inside of the wrapper we're going to create our drawer and that's a component from the material ui drawer it takes a prop that's called anchor and we want it to be anchored to the right of the screen open that's going to equal the state that we created cart open state up here that we just created so it's going to flip between true and false shouldn't be a coma there and then we have a prop on close so we have an inline arrow function set cart open and we set the value to false then we close it like this and inside of drawer we're gonna have our cart we haven't created that component yet so we can just type in cart goes here like this then we need our open and close button for the cart and for this one i actually want to style this button a little bit so i'm going to show you a different way of styling the button last time for the item i styled the button like this but you can also style a button by providing it to the style component itself so inside our app.styles file we're going to create a new style component and for this one the wrapper we can actually just set the margin to 40 pixels for that one that's the only style that we're going to need i just give it some morgan so it won't go to the edges of the screen and then we create a new component export const i call it style button equal style and then we can provide this function instead of doing backticks and creator styles we can have a parenthesis and provide it with a component that we want to style so i'm going to import something that's called an icon button from material ui so from at material dash ui forward slash core forward slash icon button and then i can provide this icon button to the style component like this and then we have the regular backticks for styles and we can type in our style just as we always do with the style components position is going to be fixed the set index is going to be 100 we want it to be placed over the other content we set it to right 20 pixels and top 20 pixels and as usual you can tweak these values if you want to do that so we save the file go back to our app component and we can create our button so just below the drawer now first we have to import it of course so up here where we have the styles wrapper we're also going to import the styled button like this then we move down here just below the drawer we can use the style button and this is now a button element or an icon button from the material ui so we can use the same props as usual we can use it just as a regular button from the material ui so an on click handler an inline arrow function set card open and we set it to true when we click this button and this button is also going to have something that's called a batch if we look at the finished application i have this red little badge here that shows how many items there is in the cart and we're already importing this as we did before so we can use this badge now from material ui so badge the badge content and we have created a function for this but it's empty now but it's the get total items and we give it the card items then we set the color to error and that will make it red and then inside of here we have our add shopping cart icon that we imported from material ui also you can see here that typescript complains because we haven't specified that this function has a parameter so we can't send in an argument to it expected zero arguments but got one so we can adjust this one so go up here to the function this one is going to take in the items that's all the items so we have the type of cart item type and an array and this will make this arrow go away hopefully like this sometimes it's a little bit slow actually before it kicks in save the file make sure that it works and we have our button here you can see and it opens the cart and we can close the cart by clicking outside of the cart you can of course add a bottom there if you want that also i think this is sweet actually i like this sidebar from material ui and no we don't have any items here so this one will show this badge when we have the items so we can actually create this get total items function now we remove this null and i'm just going to put it on the other row you can have these curly brackets if you want to have that and create a return statement but i'm going to do an implicit return here as this is an arrow function so it's going to be a oneliner so from the items that's the items that we send into this function we're going to reduce and first we have the accumulator that one is going to be a number it's going to return the total number of the items in the cart and then we have the items the items is already specified up here so it will know that this one is of the type card items type right then from the accumulator we add the item dot amount and we initialize it with zero shouldn't say items it should say item without an s so this will iterate through all the items in the cart and it will use the property amount and add up the amount and that will give us the total amount that's in the cart and the accumulator we give it an initial value of zero so that will add up so 30 starts with zero then it adds the amount for each item but it won't show us anything yet of course because we don't have anything and we can't actually put something in the cart so we're going to see this in action later okay so we have the drawer and we have the button for the card i think it's time to create the card itself so inside the src folder we're going to create a new folder that's called cart and inside of that folder we have a file that's called cart.tsx and we also have a file for the styles just as before card.styles.ts we can start in the style file we import styled from style components like this then we create our component we're going to have a wrapper again so export const wrapper equals a style and this one isn't a div i think it's more appropriate to have it as a side because it's kind of a sidebar a style on a side element double back ticks and then i have the css and this is not much so we can actually do it already now i set the font family to arial i set the width to 500 pixels for my sidebar i set the padding to 20 pixels and this should be it i think save the file go back to the cart dot tsx file and we can start by importing some stuff as we always do and also we're actually going to have a cart item so i think we can create that one also and just scaffold it out so we can use it in our cart so inside src folder create a new folder cart item and just as before we have two files cart item dot tsx and new file cart item dot styles dot ts and we start in the styles file import style from style components we export the const that we call wrapper for this one also and it's going to equal style.div double back ticks and then we have our css and i think yeah no we can wait with the css i'm just going to leave this empty for now so save the file and we go back to the card item and first we're going to import a button from at material dash ui forward slash core button then we needed types so import card item type from dot dot forward slash app and then we have the styles import wrapper from dot forward slash car item styles and then we scaffold out this component const car item is going to be a react.fc a functional component equal and for now we leave it empty like this we can just create a div that says card item and we export default card item and save the file so we're going to come back to this later of course and create that component but for now we go back to our cart and we can import this cart item from dot dot forward slash cart item and cart item then we have our styles import wrapper from dot forward slash cart dot styles and we have our types import card item type from dot dot forward slash app you can see that i also comment here everything you don't have to do this actually in a small application like this but it's a habit i have when i work on larger applications that i i like the common stuff here on the imports because if you have 20 or 30 imports so you quickly can see what you're importing but you can of course remove them like this if you don't want to have them because we only do three imports here right and this one is going to have some props type props we have the card items and by now we know that these are going to be the card item type and it's an array because this is the cart so it's going to receive an array with all the items that's in the cart then we're going to have add to cart that's the function that we created in app we know that this one has the type parentheses clicked item that's the parameter for that function and that one is going to be a car item type and it's going to return void it returns nothing and then we have remove from cart this one is only going to take in the id and it's going to be of the number type and it return nothing because when we remove something we don't actually need to add any elements because we already have all the items in this array that we're going to remove from so that's why we only need the id for that one okay so that's the props so we can create our component const cart it's a react dot fc a functional component we have the angle brackets and we give it the props because this is a typescript generic so that's why we can send it in like this and then we have the props so every parenthesis with the structure out the card items the add to cart and remove from cart and we have an arrow function and this one is going to make an explicit return so we have curly brackets and we have the return statement like this so first we return the wrapper that's the style component we created then we have an age to tag your shopping cart or whatever you want to type in and then we can also type in some text if we don't have any items in the cart so i have curly brackets and i check if cart items dot length equals zero then i have a question mark it's a turner operator i display a p tag no items in cart and otherwise we display null we display nothing so this will display this text if we don't have any items in the cart and then we can map through our items card items dot map we have the item we don't have to specify the type because it will know that it's of this type you can see here card items is of the card item type so we don't have to specify it here like this and i make an implicit return on this one and i'm going to return the cart item and for now i just do like this we're going to come back to this one very important to export default cart otherwise it won't work so we're going to come back to this one and give it the correct props but for now i'm going to go to the app dot tsx file and we're going to import cart from dot forward slash cart forward slash cart like this we go down in our jsx instead of cart goes here we're gonna use our card component and you see that it complains because it wants the props so we have to specify the props also for the cart so we have the cart items it's going to be the cart items then we have add to cart it's going to be the handle add to cart i can actually move them down to their own row and then we have remove from cart it's going to be the handle remove from cart save the file and we go back and see what we got so far you can see that we have our shopping cart here no items in cart because we don't have any items in the cart all right so we go back to the cart we know that it's working and this cart item here we're going to provide it with the correct props first as we're mapping through these items we need to set a key and the key is going to be the item.id then we have the item then we have the add to cart function add to cart and we have remove from cart and remove from cart and now you can see the complaints because we haven't created this item component yet so that's what we're going to do next because now it complains and it breaks the application but keep calm we will fix this soon so we are sending in the props to the card item and we can build our card item component so go back to the cart item file not the styles right now the file here and we import everything that we need here and we can create the props for this one so type props equal we have the item it's going to be of the cart item type this is a single item so we don't have an array here and then we have to add to cart it's going to be the clicked item and cart item type and it's going to return void it returns nothing and then we have remove from cart this one is going to be an id with a number and it's going to return nothing so void and we give it these props inside of angle brackets just here we did before so now you can see cart won't complain anymore because we have the correct props typed for us so that's sweet and our application should be working again yeah it is right back to the code we can still make an implicit return but we're going to have parenthesis here and we're going to have the wrapper and first inside of the wrapper we're gonna have a div oh what happened yeah okay like this then i have an h3 tag and there i'm gonna display the item.title insider curly brackets of course because we're grabbing these items now and we haven't destructed out the props i need to do that also it's up here i just structure out the item the add to cart and remove from cart and this item of course i can show you in the finished one is this item here that i create now so i have the so the h3 tag is going to have this title and then we have these buttons to add and remove stuff here so that's the one that we create now all right that's the title then we have another div and for this one i'm going to create a class name it's going to be information this one is going to hold a p tag with price i have a dollar sign and then i have curly brackets don't mistake this for a template literal because this is just a dollar sign that i print out it has nothing to do with these curly brackets here i'm going to grab the item.price for this one and then we have another p tag we're going to calculate the total for each item so the total is going to be yet again we have a dollar sign in front of our price that we're going to show and i have a pair of parentheses and i take the item dot amount times the item dot price and then i need to remove some decimals so i'm going to have dot 2 fixed and a 2 that's going to give us 2 decimals all right so that's going to be the total that we can see if i go back to the application the finished one going to be these ones here that we created now and now we have to create the buttons and the total amount here so i create another div with a class name of buttons i create a material ui button the size is going to be small i'm going to disable elevation so i don't have any drop shadow on it the variant is going to be contained as i want it to display with a background in the button and then i have the on click handler it's going to be an inline arrow function and i'm going to call the remove from cart and i'm going to provide it with the item dot id now we close the button and inside the button i'm just going to type out the minus sign right then in the middle we're gonna have a p tag curly bracket item dot amount and curly bracket and then we can actually copy this button here paste it in below the size is going to be the same disable elevation and contain is going to be the same the on click is going to be add to cart instead and this one takes in the complete item not only the id so i'm going to remove id and give it the item and this one is going to have a plus sign instead so that's the balance and then we need to have the image also and the image is going to go below the divs here last before the ending wrapper tag so i have imd src equal the item.image and i set an alt to the item.title on this one we can selfclose it like this and this should be the item for the cart save the file just go back to check that everything works it does but we can't see any items because we don't have any way to actually add it to the cart so that's what we're going to do next we're going to create the function for adding and removing stuff in the cart and we're also going to display the total amount in the cart we move back to the app.tsx file the main component for the application so to say and we need to create our functions for adding stuff to the cart and also removing stuff from the cart we already scaffold out this handle at the cart so we remove this null create curly brackets and inside we're gonna do some stuff when we click this button we're going to set cart items and this is the setter for the state and we can always get the previous state from this one so prev you don't have to call it prev but i like to call it prev as it stands for previous in my mind at least so we have prayer and then we have curly brackets i'm going to make an explicit return on this one and first is the item already in cart already added in the cart because we have to take into consideration here when you click add if the cart is empty we need to add that item to the cart if it already exists in the cart we should only add on the amount on that item so we should modify the item that exists in the cart so we can check if this one is in the cart and remove the sidebar i create a const is item or is item in cart maybe to be extra specific here from the previous state i'm gonna find i have the item and i check if the item dot id equal to the clicked item dot id so i check if the item that i clicked on exist in the cart by by comparing these two ids i loop through the stuff it's going to return true or false if it finds it in this array right then if is item in cart if we have this item in the cart we need to do some stuff so if we have the item in the cart we need to update the amount on that specific item and we can do that by mapping through the items so return prev.map we have the item an arrow function and we can make an implicit return on this one we have the item dot id if that one equals the clicked item dot id i create a turner operator it's going to be on multiple rows here but i have the question mark then if it finds the item we're going to update that amount so i return an object with curly brackets i spread out the old item and then i have the amount property i'm going to update this property item.amount plus one if we find an item otherwise we have a colon and we're just going to return the item as it is we don't do anything we only update the amount on the item that we actually clicked on so this is if we have an item in the cart otherwise we can mark it as first time the item is added we're going to return and we have the array we spread out the previous state inside of the array and we add this new item so we spread out the clicked item inside of curly brackets we're creating an object here and we set the amount to one so this is hopefully going to add this item to the cart so i'm going to go through it again here the first thing i do is i call the setter for the card items if we use a function for the setter we will get access to the previous state so i checked in the previous state if this item already exists because if it exists we need to update it instead of adding it to this array and if it exists i'm going to loop through all the items until i find the item that i clicked on and i'm going to add one to the amount for that one otherwise if this is the first time that we click on this item to the cart the first time we put it in the cart i return an array with all the previous stuff in the cart i spread it out here and then i add this item to the array here where i spread out the clicked item but i set the amount to one so we can see if it works save the file go back to the application reload it just to be sure i click add to cart and you can see that it adds it up here and this actually looks awesome already but it doesn't look awesome here it's quite big we haven't styled this once yet so that's what we're going to do next we're going to style this cart item so that's what we're going to do now go back to the code and inside the cart item dot styles we have this wrapper first we're going to display it as a flex we justify the content to space dash between we set the font family to ariel border dash bottom is going to be one pixel solid light blue we set the padding dash bottom to 20 pixels we can actually see how it looks like go back to the application yeah we have some styling here right then we're going to style the div we set that one to flex 1 and then we have the class that we call information and also the class that's called button so we style these ones in one go we display them as a flex and justify content space dash between and then we're going to style the imd the image max dash width is going to be 80 pixels for this one and we set the object fit to cover and the margin dash left is going to be 40 pixels save it go back to the application and you can see that yeah it still doesn't look right we have to fix this it's some stuff with this one here the buttons information i'm gonna go to the cart item no it's the bonus class name buttons yeah buttons with an s change this class and add an s it should say buttons and i'll go back and you can see that it looks great now i think but we can only add items and you can see this is what's so great about reactos we can reuse stuff we have created this component and we use the same function for adding stuff and it just instantly works because it's the same function that we use here so the thing we have to do now is to create our function for removing items in the cart so go back to the code and inside app.tsx we have our function that's called handle remove from cart and this one is going to have a parameter that's called id and this one is going to be a number we remove null create curly brackets and yet again we're going to set cart items we have the previous state an arrow function we can make an implicit return and for this one i'm going to use reduce so i have the prev dot reduce parenthesis and another pair of parentheses i have the accumulator and i have the item arrow function and i make an explicit return on this one i think it's more readable we also need to specify the initial value for the reduce otherwise typescript will complain for us so we have a coma we have an empty array and we're going to specify this as cart item type and an array and then it won't complain for us later and the first thing we have to do in this reduce is to check if if the item dot id equals to the id if we're on that item in the array that we clicked on we're going to do something so we have curly bracket and we have another if statement because we want to check if the item amount is 1 then we're going to remove this item from the array when we click the minus sign because we go from one to zero and it's no longer in the cart so if item dot amount equals to one we're going to return the accumulator we remove this item from the array so we only return our accumulator and do nothing otherwise we're going to return an array we spread out the accumulator the previous array we create a new object where we spread out the item we have the amount and the amount is going to be subtracted by one so from the item dot amount we have minus one so if we're on the item that we clicked on we first check if the amount is one then we remove it from the array otherwise we remove one from the amount and if we're not on the item that we clicked on we have the else statement here we're going to return an array we spread out the accumulator and we return the item as it is we don't do anything with item and i have some stuff here that is not correct why is it so i guess it is yeah this one here should of course remove the coma and it should go inside of here instead like this so the reduce starts here and then we have a coma and then you have the array and we specify it as a card item type like this so i'm going to go through it again just to explain so we set the card items we have the previous state i call the reduce on the previous state we have an accumulator that starts with an empty array that we specify as the card item type an array of card item type then i check if the item id is equal to the id here that gets sent in as an argument to this one we know that this is the item that we clicked on and if the item amount equals to 1 i return the accumulator so i skip this item and this will delete it from the array otherwise i return a new array where i spread out the accumulator and i have a new object where i spread out the item and i subtract one from the item amount so we remove one from the amount otherwise we return the item as it is so we have the accumulator and the item in this array right save the file we can go back to our application and see if it works and it does and you can see that it calculates this beautifully when we remove stuff here so i'm pretty happy with this we only have one more thing to do and that is to display the total amount in the cart so go back to the code and inside the cart that's why we also made an explicit return here because we're going to create this function here so up here at the top of the cart component we're going to create a new function const calculate total equal it's going to take in the items that is going to be of the card item type and array we have an error function i make an implicit return so i move down to the row below and the items dot reduce yet again i'm going to use the reduce method we have the accumulator it's going to be a number and we have the item the item we don't need to specify because it already knows that this is for the cart item type so we have an arrow function and accumulator and to the accumulator i'm going to add the item dot amount times item.price and then i have a comma and specify the accumulator to be zero initially so we have the calculate total function and if we move down here just below the card items we create an h2 tag total colon and then we have the dollar sign again just to display it in front of the price current brackets we call the calculate total we give it the card items and this is fine but i want to remove some decimals on this one also so i have dot 2 fixed and i give it a 2 because i want 2 decimals save the file go back to the application and you can see the total amount and there you have it we have a fully working cart at least some of it we can't actually buy something but yeah you know what i mean so i think this actually is a good practice because you can use this in the real world so to say because this is not actually far from a lot of stuff you probably will do if you work on a real world application
