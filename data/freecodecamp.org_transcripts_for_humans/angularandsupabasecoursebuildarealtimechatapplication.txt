With timestamps:

00:00 - learn how to use angular and superbase
00:02 - to create a real-time chat application
00:04 - you'll learn about things such as
00:06 - real-time data fetching with superbase
00:09 - superbase triggers and functions how to
00:11 - use the Google oaf service in angular
00:14 - and more deji from the code angle
00:17 - develop this course hello everyone
00:19 - welcome to today's video tutorial in
00:22 - today's video we are going to make use
00:24 - of angular 17 as well as super Bas to
00:27 - create a real time chart application now
00:31 - let's take a quick look at the demo of
00:33 - today's project as you can see on the
00:35 - page we have a button that says sign up
00:38 - using Google what this button does
00:40 - actually is it makes use of the
00:42 - authentication Service in super base as
00:44 - well as Google what 2.0 service to
00:48 - create the authentication currently we
00:51 - have no users on the super based
00:54 - dashboard as you can see another thing
00:56 - you should take note of is we have two
00:59 - tables in in our super base setup the
01:02 - first one is the users table and the
01:05 - second one is the chart table as you can
01:07 - see both of these tables are empty what
01:09 - this user tables does is basically
01:12 - anytime a new user signs into the
01:15 - project not only do they get saved in
01:18 - the authentication page we see right
01:20 - here but they also get saved in the
01:22 - users table so we make use of this by
01:26 - making use of super based functions and
01:28 - super based triggers we'll get get to
01:30 - look into that as the tutorial proceeds
01:32 - but for now let's take a sample of how
01:35 - the integration for the authentication
01:37 - works so I'm going to head back to the
01:39 - angular project I'm going to click on
01:41 - the sign up using Google button and then
01:44 - a new page pops up this page asks us to
01:47 - choose an account we want to sign up
01:49 - into the chat dashboard so I'm going to
01:51 - select the first email on the browser
01:53 - here and then as you can see I get
01:56 - authorized and signed into the chat
01:59 - dashboard but before I show how this
02:01 - chart dashboard works I would like to
02:03 - head back to the super base dashboard
02:05 - and as you can see on the user table we
02:08 - have some details showing which includes
02:10 - the user's ID the user's full name as
02:13 - well as the user's Avatar URL we are
02:16 - able to retrieve all this data from the
02:18 - newly signed in user and then save it
02:20 - into our user table with that we'll be
02:23 - able to use it on the front end of our
02:24 - application anytime the user sends a
02:27 - message what do I mean by this if I head
02:29 - back to the dashboard and I type in a
02:31 - message this is a test and I click on
02:34 - send you can see we have the username
02:36 - which is D adoga which you can see right
02:39 - here the users's Avatar image which you
02:41 - can see right here and then the users's
02:43 - ID which we do not need to render into
02:45 - the user interface but we also have
02:47 - access to the dates and as well as the
02:49 - time the user sends the message which
02:52 - you can see here another feature of this
02:54 - application is anytime we send the
02:56 - message in the chat table it gets f
03:00 - in real time without needing to refresh
03:03 - the page in our angular application
03:05 - let's try to send another message to see
03:07 - how this works so back in the chat
03:09 - application let's send a new message
03:11 - that say this is a test two and then
03:14 - click on send as you can see the message
03:16 - gets displayed in real time in our
03:18 - angular project as well as on the super
03:20 - based dashboard which you can see right
03:22 - here so this chart table as a field of
03:25 - ID created at text editable as well as
03:29 - the same ID so we display some of these
03:31 - details on the page another feature of
03:34 - this project is as a user you are able
03:37 - to delete your message so if you click
03:40 - on this menu right here and you click on
03:41 - this delete drop down a modal pops up in
03:44 - front of you and you have presented with
03:46 - two prompts to proceed with deletion of
03:48 - your message or to change your mind if
03:50 - you do no longer if you do no longer
03:52 - want to delete your message so let's
03:54 - proceed to delete this message so I'm
03:56 - going to click on yes and then the
03:58 - message gets deleted while the page gets
04:01 - programmatically refreshed without
04:04 - reloading the entire angular application
04:07 - we make use of this by making use of the
04:09 - router feature in angular 17 also a user
04:13 - can get to log out from this charts
04:16 - dashboard by simply clicking on the
04:18 - logout button and then and then it gets
04:21 - navigated back to the login page another
04:23 - thing I'm going to do is I'm going to
04:25 - sign up again using a brand new user
04:27 - let's see if the details is going to be
04:29 - different from our previous user so let
04:31 - me click on another account and then
04:34 - send a message using this account that
04:36 - says this is a new test so I'm going to
04:39 - click on send and as you can see this
04:42 - user has a different Avatar image as
04:44 - well as a different name and then this
04:46 - user can delete their own message if
04:48 - they try to delete another person's
04:50 - message it's not going to work a user
04:52 - can only delete their own message if you
04:54 - try to do this I click on the menu and I
04:57 - click on delete you can see the message
04:59 - does not get deleted but the user can
05:02 - proceed to delete their own message as
05:04 - you can see right there so that's all
05:06 - for this tutorial but before we proceed
05:08 - I would like to highlight some very
05:10 - important Concepts you stand to gain if
05:13 - you decide to follow along with this
05:15 - project so in this tutorial you're going
05:18 - to learn how to authenticate an angular
05:21 - application by making use of super base
05:23 - and Google's oart 2.0 you're also going
05:26 - to learn how to integrate functional
05:29 - rout guard for Route protection that is
05:32 - if a user is not currently logged in
05:34 - they cannot access the dashboard the
05:36 - route guard is going to prevent them and
05:39 - log them back to the loging screen so um
05:41 - we're going to make use of the newly
05:43 - integrated functional rout guard in
05:45 - angular 17 to make use of this feature
05:48 - another thing you're going to learn is
05:49 - how to work with the latest control
05:51 - Flows In angular that is we have the new
05:54 - control flows which include the at if
05:57 - and at else block me angular 7 contain
06:00 - the syntax to this um directives were
06:03 - changed and updated another thing you're
06:05 - going to learn is how to manage States
06:07 - using signals signals was newly
06:10 - introduced in angular 16 and fully
06:12 - functional in angular 17 so in this
06:14 - tutorial we going to learn how to manage
06:17 - the data in the application by making
06:19 - use of signals so if you are learning
06:22 - angular and you've not touched signal
06:23 - before this tutorial is a good place to
06:26 - start to learn how to make use of
06:28 - signals Al so you learn how to create
06:30 - tables in super base super base makes
06:33 - use of progress ql so in this tutorial
06:35 - I'm going to show you how to integrate
06:37 - the tables by making use of some of the
06:40 - uh keywords required to create tables in
06:43 - super base another thing you're going to
06:44 - learn is how to set up security policies
06:47 - for created tables so as you are setting
06:49 - up your table in super base you have
06:51 - options of creating security policies
06:53 - that is to determine who has access to
06:56 - what in the database another thing I'm
06:58 - going to learn is how to create super
07:00 - based functions and Trigger events and
07:02 - finally you learn how to use angular to
07:04 - delete list and insert data into the
07:07 - super base table in real time so you
07:09 - have a lot to learn in this tutorial and
07:12 - I think with that we can get started
07:14 - with this project to get started with
07:16 - this project we are going to head
07:18 - straight to GitHub and in GitHub we're
07:21 - going to clone a boiler plate template
07:23 - for the UI Design This the link to this
07:26 - particular GitHub repo is going to be in
07:29 - the description box on YouTube to help
07:31 - you get started with this project to do
07:33 - that all we need to do is to click on
07:35 - this code button it brings out a drop
07:38 - down and then we're going to click on
07:39 - this copy to clipboard icon now all we
07:42 - need to do is to head straight to the
07:44 - terminal where you want to create your
07:46 - project and then run the command git
07:48 - clone and then the URL you copied from
07:51 - GitHub so what that does is it's going
07:53 - to clone the project into your project
07:55 - directory so once that is done you need
07:57 - to CD into the project directory which
08:00 - is ng- chart D UI and then click on
08:04 - enter but before we proceed we need to
08:07 - have access to all the dev dependencies
08:10 - and to do that we need to run mpm
08:11 - install so quickly I'm going to run mpm
08:14 - install and then it's going to download
08:16 - all the packages in our Dev dependencies
08:19 - within our packet. Json file now that
08:21 - the installation is complete we can now
08:24 - open the project directly in our Visual
08:27 - Studio code editor so I'm going to run
08:30 - code and then dots and press enter so
08:32 - it's going to open the project up in
08:34 - Visual Studio code I'm going to increase
08:36 - the fonts it's more clear for you to see
08:38 - the code so the next step is to head
08:40 - straight to the SRC directory this is
08:42 - where angular has all the required
08:45 - folders needed to run the angular
08:47 - application so I'm going to extend it
08:48 - further by heading straight to the app
08:50 - directory and within the app directory
08:52 - we have a a Pages directory where we
08:55 - have two components we have the chat
08:56 - component as well as the login component
08:58 - so what I'm going to do is to open up
09:00 - the chart component and you can see the
09:02 - user interface code so all the code here
09:05 - are all static code and we have a CSS to
09:09 - do a bit of styling so there's nothing
09:11 - strange here this is just the user
09:13 - interface for the project the reason why
09:16 - I'm not creating the user interface from
09:18 - scratch is so that we can focus fully on
09:21 - the integration of our chart application
09:23 - instead of focusing on the user
09:25 - interface now another thing you should
09:26 - take note of is in the index.html we
09:29 - have the bootstrap 5 CDN available for
09:32 - us as you can see this is the CDN link
09:35 - that make reference to bootstrap 5 as
09:38 - well as the script for the bootstrap 5
09:40 - CDN what this does is it allows us to
09:43 - have access to the classes some of the
09:45 - classes you can see here um in the user
09:48 - interface same thing was applied to the
09:50 - login components within the login
09:52 - components we have the HTML code as well
09:55 - as the CSS code to help us integrate the
09:58 - design which I think think is very um
10:00 - easy to understand so there's no need
10:02 - for me to go into details with that so
10:04 - to test how the UI currently looks I'm
10:07 - going to scroll down and head straight
10:09 - to the app components. HTML file and
10:11 - within this file you can see we have the
10:14 - app plugin and the app chat currently
10:16 - imported or referenced here and one
10:19 - feature you should know is in previous
10:21 - versions of angular you don't have self
10:23 - closing tags so Ang recently created
10:26 - this um update so where you can make it
10:28 - of close closing T self closing tax
10:31 - which I think is a very good development
10:33 - from the angular team also another thing
10:35 - you should take note of is in the app
10:37 - component.ts file because we are dealing
10:39 - with Standalone component which is also
10:41 - one of the new features in angular we
10:43 - need to import each component with
10:44 - reference in our templates for instance
10:47 - we're trying to reference the app plugin
10:48 - and the app chat that means we need to
10:50 - import them within the import array
10:52 - which we have right here now that that
10:54 - is clarified what I'm going to try to do
10:56 - is to compile the code and then let's
10:59 - see how it's displays on the browser so
11:01 - to do that I'm going to make use of the
11:03 - traditional NG serve command so I'm
11:05 - going to press enter and then the
11:07 - compilation begins as you can see our
11:10 - compilation is successful and and in
11:12 - angular 17 some analysis are available
11:15 - in the terminal that shows the sizes of
11:17 - your angular application the initial
11:19 - load um size and the time it requires to
11:23 - complete complete the compilation so
11:25 - this is the Local Host URL which is
11:28 - Local Host for 200 so I'm going to head
11:30 - to that route in the browser so to do
11:33 - that all I need to do is to type in
11:34 - Local Host 4200 and as you can see we
11:37 - have this button that does nothing
11:39 - currently because we just have a UI so
11:41 - if I click on this button nothing
11:43 - happens so we can see the login button
11:45 - or the login page is uh just the user
11:49 - interface currently available now let's
11:51 - see how the chart component looks to do
11:53 - that all I need to do is just to comment
11:55 - out the login tag and then uncomment the
11:58 - chat tag so all I need to do is save and
12:01 - then once the project compiles we exray
12:03 - to the browser as you can see we have
12:06 - the chart user interface so nothing
12:09 - happens I can click on send type in
12:11 - click on log out nothing is happening so
12:13 - we need to configure everything from
12:15 - scratch and then so we need to configure
12:18 - everything from scratch so I'm going to
12:19 - show you how to do it step by step with
12:22 - no step skipped so the next thing I want
12:24 - us to do is to deal with super Bas so to
12:26 - do that I'm going to run mpm install for
12:29 - super base so once again I'm going to
12:30 - stop the terminal and then I'm going to
12:33 - call mpm install at Super Bas 4/ super
12:40 - Bas DJs so this is the command for you
12:44 - to install super base in your project so
12:47 - we're going to wait for the installation
12:49 - to be complete and once that is done we
12:51 - can move to the next step as you can see
12:54 - the installation is complete and super
12:55 - base has been installed into this
12:57 - project to confirm I'm going to head
12:59 - straight to the package.json file as you
13:02 - can see this m means modified the that
13:05 - is a change has occurred in this file
13:07 - and when we scroll down a little bit we
13:09 - can see we have at superbase for/
13:12 - superbas DJs and it shows the version
13:16 - which is currently version
13:19 - 242.4 that is the current version as far
13:21 - as this tutorial is concerned in the
13:23 - future you might be following along this
13:26 - tutorial and you might be seeing a new
13:28 - version probably version three or
13:30 - version 4 or version 5 depending on the
13:33 - year you decide to follow or go through
13:35 - this tutorial so um some slight changes
13:38 - might have occurred during that time but
13:39 - for now with version
13:41 - 242.4 which is the latest version we can
13:44 - now continue our integration so the next
13:46 - thing I want to do before we proceed is
13:48 - to generate our environment variable
13:51 - file um to do that we need to run the
13:54 - command NG generate environment so what
13:57 - this folder does basically is to help us
14:01 - create a place where we can store our
14:03 - API key any API key we get from super
14:06 - base this is the place to do it so if I
14:08 - go back to the project you can see we
14:09 - have this environment folder and there's
14:11 - environment do development for when you
14:14 - want to save the API key currently in
14:16 - the development mode and if you want to
14:18 - go live you can make use of the
14:20 - environment. Cs file so depending on
14:22 - what you want to do but for this project
14:24 - um since we are still in development
14:26 - mode the API key is going to be
14:27 - configured in the development file
14:30 - environments. development file so with
14:32 - the next with that we can move on to the
14:34 - next step which is to look at the
14:36 - authentication Service in super base so
14:39 - let's head straight to super base so now
14:41 - that we are inside of the super Bas
14:42 - dashboard and I'm signed into my
14:44 - accounts if you don't have a superbas
14:46 - account all you need to do is to go to
14:47 - superb.com and then use your GitHub
14:50 - account to authenticate yourself into
14:52 - the super base dashboard now you can see
14:55 - I currently have two projects called NG
14:57 - gallery and Ng
14:59 - super- I think I've used this project in
15:02 - the past to create uh angular tutorials
15:06 - but for the sake of this tutorial I want
15:08 - to create everything from scratch so I
15:09 - won't use any of these predefined
15:12 - projects in super base what I'm going to
15:14 - do is to create a new
15:16 - project so within this organization I'm
15:19 - going to click on the new project button
15:21 - and then choose the organization which I
15:23 - currently have which is the suar 10 or
15:25 - so once I click on that we have
15:28 - presented with a new form so we need to
15:31 - fill the form so the project name is
15:33 - going to be called NG chat and then the
15:36 - password I'm going to generate the
15:37 - password dynamically by making use of a
15:40 - browser extension called bit Wen so I'm
15:43 - going to click on generate password and
15:44 - I'm going to type in the password and
15:46 - super base considers the password as
15:49 - strong and then I'm going to select a
15:51 - region um for best results like that is
15:55 - for in order that is in order to reduce
15:57 - latency you you need to select a server
16:00 - that is closest to your location so for
16:02 - me um I think I'm going to go with an
16:04 - European location which is pre-selected
16:06 - for me I'm going to go with um frankfor
16:09 - so as you can see you have this text
16:12 - here that says select the region closest
16:13 - to your users for best performance so
16:17 - that's a very important criteria so I'm
16:19 - going to click on create new project so
16:21 - the project is going to get configured
16:23 - for us and with that we can now create
16:25 - our our authentication as you can see
16:28 - the setting of of the project is now
16:30 - complete and we get presented with a
16:33 - welcome to your new project uh message
16:36 - and the project status is showing this
16:39 - um yellow icon right here so but what we
16:41 - need to do actually is just to over over
16:43 - the sidebar we have right here and Edge
16:45 - straight to authentication because we
16:47 - want to authenticate our project and
16:49 - once you in the authentication tab all
16:51 - you need to do is to click on providers
16:53 - and under providers you have so many
16:55 - providers I think in this YouTube
16:57 - channel I've gone over so many of these
16:59 - providers and today I'm going to try a
17:01 - new one which is Google so I'm going to
17:03 - click on Google and I'm going to enable
17:06 - signing with Google so the signing with
17:08 - Google requires two input fields to be
17:11 - filled up that is the client ID for the
17:14 - art Service as well as the client secret
17:17 - for the oart service so we need to get
17:20 - these two requirements from a platform
17:23 - called Google Cloud platform so if you
17:26 - are not familiar with Google Cloud
17:28 - platform if you have a Google account
17:30 - you can always create a new project in
17:33 - the Google Cloud platform and then
17:35 - derive the client ID as well as the
17:37 - client secret which is what we are going
17:39 - to do next so you don't have to worry
17:40 - about it I'm going to show you how to do
17:43 - it in a simple step so let's head to gcp
17:47 - and see how we can get our client ID as
17:49 - well as our client secret so inside of
17:52 - gcp as you can see I already signed in
17:55 - and if you're not signed in once you go
17:57 - to console. cloud. google.com you're
18:00 - going to have a page where you can log
18:02 - in using your Google account once you
18:03 - sign in you'll be required to create a
18:06 - project for me I have some projects
18:08 - currently available as you can see I
18:09 - have about seven or so projects but for
18:12 - the sake of this tutorial I'm going to
18:14 - start everything from scratch so I'm
18:16 - going to create a new project in gcp so
18:19 - that you can follow along and see how to
18:21 - get the client ID as well as a client's
18:24 - secret so let's click on new project and
18:26 - then we get presented with a new field
18:28 - that says project name as well as the
18:30 - project organization so the project name
18:32 - I'm going to call NG charts and then I
18:35 - currently don't have any organization I
18:37 - can select or if you have an
18:38 - organization you can always browse
18:40 - through the organization and then select
18:42 - them but for me I don't have any
18:43 - organization so all I need to do is just
18:45 - is just to click on create as you can
18:47 - see the project is getting created for
18:49 - us through this loading icon so it's
18:51 - going to take probably before I finish
18:53 - speaking the project has just been
18:55 - created so we need to select the project
18:57 - because the current project selected
18:58 - called angle we need to select NG chart
19:01 - so to do that we click on this drop down
19:03 - right there and then click on NG chart
19:06 - so once NG chart is selected we can now
19:09 - proceed and to proceed we need to add to
19:11 - apis and services you can see it's here
19:14 - but another place where you can locate
19:16 - the API and services in case it's not
19:18 - showing in this quick access uh section
19:21 - of the browser I'm going to close this
19:23 - message you can click on this menu icon
19:25 - this navigation menu icon and then it's
19:27 - going to extend the sideb and as you can
19:29 - see you have API services so under the
19:32 - API Services what you need to do is to
19:34 - click on credentials so I'm going to
19:35 - click on credentials and it's going to
19:37 - take us to the credentials page under
19:39 - the credentials page we need to create
19:42 - credentials and to do that we need to
19:45 - click on this create credentials button
19:47 - above so I'm going to click on that and
19:49 - what I'm going to select is the art Cent
19:51 - ID which is what we need in our super
19:54 - base dashboard so I'm going to click on
19:56 - that and it's going to take us to the
19:57 - page and within the page there's a
20:00 - requirement for you to create a client
20:01 - ID you must first configure your consent
20:04 - screen so for us we currently have a
20:07 - brand new project and we've never
20:08 - configured a consent screen before so we
20:10 - need to do that for us to have access to
20:12 - client ID so all I need to do is to
20:14 - click on this configure consent screen
20:17 - so this screen is going to load out a
20:20 - new page and we have two options that is
20:23 - for the user types we have the internal
20:25 - and the external so the internal is just
20:28 - a able for users within your
20:29 - organization no need to submit your app
20:32 - for verification while for external
20:34 - users uh you need to submit your app for
20:37 - testing mode and things like that but
20:39 - for us we are just working on a
20:42 - educational content so we're going to
20:44 - select um internal radio button so so we
20:48 - have a warning button which doesn't
20:49 - allow me to click on the internal radio
20:51 - button because it says you are not a
20:54 - Google workspace user all right fine I'm
20:56 - not a Google workspace user so let's
20:58 - just go with with the external anyways
20:59 - and then click on create so you can see
21:02 - we have some forms we need to fill so
21:05 - let's start from the beginning the app
21:09 - name so the app name for the consent
21:11 - screen I'm going to stay consistent and
21:13 - go with NG chat and then support email
21:16 - I'm going to select my email the code
21:18 - angle gmail.com for the logo I'm just
21:21 - going to leave that blank for now um
21:24 - next up it's asking for the application
21:26 - homage that is the link to the project
21:29 - homepage this is going to be in Local
21:31 - Host uh because it's a we are still
21:34 - trying to create the app in development
21:36 - so we only have The Local Host URL so
21:38 - I'm just going to paste in uh Local Host
21:41 - 4200 within the application homepage
21:44 - which is our current homepage um provide
21:46 - users with a link to your public policy
21:49 - um I don't have a public policy terms of
21:52 - service we don't have uh links for that
21:54 - so uh we're going to scroll down and
21:56 - then developer contacts email address
21:59 - uh it's also the code angle so I'm just
22:01 - going to enter the code angle at
22:04 - gmail.com and then I can click on Save
22:06 - and continue then under the Scopes we
22:08 - don't have any scope I'm going to click
22:10 - on Save and continue and then for the
22:13 - test users currently I don't have any
22:14 - users I want to add but let's click on
22:17 - this add users and see okay you can add
22:20 - as much as 100 users to test your
22:22 - application but for this application
22:24 - this is mainly for educational content
22:26 - so we don't need to add any test so I'm
22:28 - going to click on Save and continue and
22:30 - finally it shows us a summary of all the
22:32 - forms we've filled and then uh if we
22:35 - want to make any edit we can always go
22:37 - back but I think we we we're good to go
22:40 - so I'm going to click on back to
22:41 - dashboard now that we are back to
22:42 - dashboard I'm going to head back to the
22:44 - credentials we have now as you can see
22:46 - we've Now set up our or consent screen
22:49 - so I'm going to head back to credentials
22:51 - and under credentials I'm going to click
22:53 - on create credentials once more and then
22:56 - the all client ID which is for the
22:58 - second time so now you see we get
23:00 - presented with a new form instead of uh
23:04 - the notification being that we should
23:06 - create a content screen we've created
23:07 - our consent screen now it's asking us
23:09 - for application type so let's click on
23:11 - the drop down um our application type is
23:13 - actually a web application it isn't a
23:16 - Android app or a Google Chrome extension
23:18 - so I'm going to select we web
23:19 - application and like I said I stay
23:22 - consistent with the name and I'm going
23:23 - to call it ngat once again so with that
23:27 - we can now click on create
23:29 - to create our client what id so it says
23:33 - notes it takes it may take 5 minutes to
23:36 - a few hours for settings to take effect
23:38 - for the sake of god let's hope this
23:40 - doesn't take more than 5 minutes all
23:42 - right I'm going to click on the create
23:44 - button and as you can see we have our
23:46 - client ID as well as our client secret
23:49 - created for us and then we can download
23:52 - it as Jason and we can also see that the
23:55 - status is St as enabled and luckily for
23:58 - us
23:59 - um the client ID was created in less
24:01 - than 10 seconds now all we need to do is
24:03 - just to copy these values into our
24:06 - superbas dashboard so I'm going to start
24:07 - with the client ID so I'm going to grab
24:09 - the client ID Ed stra to super base
24:11 - paste it within the super Bas dashboard
24:13 - and then head back to the gcp click on
24:16 - the client Secrets uh and then paste it
24:19 - within the client secret what and then
24:23 - back in the what back in the gcp I'm
24:25 - going to click on okay so there's this
24:28 - um condition here that says call back
24:30 - URL for what I think we need to uh
24:32 - include this in our Google Cloud
24:35 - platform so that it can Al always
24:37 - reference this um super base application
24:40 - so I'm going to copy it and I think we
24:42 - forgot to set it up while we were trying
24:44 - to create our credential so to do that
24:46 - I'm going to edit our NG chart uh what
24:49 - and I'm going to add the redirect URI
24:52 - which is here so under the redirect URI
24:55 - I'm going to paste it uh I'm going to
24:57 - paste in what was given to us in super
24:59 - base you can see this is the Callback
25:01 - when using the um signing with Google or
25:04 - web so it's our callback URL we need to
25:07 - provide it under the authorized redirect
25:10 - URL so I think we are good to go with
25:12 - that we can now click on Save and I
25:14 - think that's what we need to do Under
25:16 - the Google Cloud platform now before we
25:19 - round up this portion of the tutorial do
25:22 - not forget to click on save for our
25:25 - enable signing with Google to be
25:27 - completed now now that it's successfully
25:29 - saved we can now head back to our Visual
25:33 - Studio code to integrate our
25:35 - authentication Service to do that what I
25:37 - like to do first is to configure the
25:39 - angular router so I'm going to scroll
25:42 - down to app. r. CS file and within this
25:46 - file I'm going to close the rest of the
25:49 - open tabs which we don't need So within
25:51 - the app. routes. TS file you can see we
25:55 - have a route array and within this route
25:57 - array we're to create the route object
26:01 - now this is going to be a functional
26:03 - route which is the latest syntax in
26:05 - angular 17 so let's open the first
26:08 - object and within the first object we're
26:09 - going to set the parts and the part to
26:11 - this is going to be charts which is our
26:14 - chart dashboard and then we can now
26:16 - click we can now make use of the load
26:18 - components to import the components for
26:22 - this part so I'm going to type in load
26:25 - component and we have a parentheses a f
26:28 - arrow and then we're going to call
26:30 - import and within the parentheses we're
26:32 - going to reference the import Page by
26:34 - doing for/ Pages for/ chat for/ chat.
26:39 - components and then because it returns a
26:42 - promise we're going to make use of do
26:44 - then and then passing an argument of
26:47 - coom and then the coom represents the
26:50 - component so I'm going to say components
26:52 - dot we're going to call the chart
26:54 - component so I'm going to say chart
26:57 - component so that's first all we need to
26:58 - do to create the first route object for
27:02 - the chart component so I'm going to
27:04 - duplicate this so the second component
27:06 - which is the last component we have is
27:08 - the login component so all I need to do
27:09 - is just to type in login I didn't spell
27:11 - login correctly and once I type in login
27:14 - I can just replace chat with login and
27:17 - then the component with login component
27:20 - so that's what we need to do so in case
27:23 - the user wants wants to pass in an empty
27:25 - part we can handle that as well so I'm
27:27 - going to do at this and all I need to do
27:30 - is just to remove the login part which
27:32 - we have right there so I'm going to save
27:33 - so anytime the user enters it doesn't
27:36 - enter a for slash that is if they enter
27:38 - a empty if they enter a empty part they
27:41 - get navigated to the login component so
27:45 - with that we can now head straight to
27:47 - the integration of our login and logout
27:51 - function so quickly we need to generate
27:53 - a service to do that so I'm going to
27:56 - head straight to the terminal and and
27:58 - then I'm going to run the command NG
28:00 - generate service the s represents
28:03 - service so under the service I'm going
28:05 - to generate the service within a
28:07 - Services folder and I'm going to do for/
28:11 - this is where our or service is going to
28:14 - liveing within a Services folder as you
28:16 - can see the old service folder has been
28:18 - generated for us so let's head back to
28:20 - the project and then let's locate o
28:23 - service which is right here the first
28:25 - thing I want to do is to create an
28:27 - instance of the super Bas client to do
28:29 - that we need to configure the super base
28:31 - URL as well as the super base key within
28:33 - our environment variable so we need to
28:36 - head back to the super base dashboard
28:39 - and then head straight to project
28:42 - settings and within the project settings
28:44 - click on API which is under
28:46 - configuration and then we need to grab
28:49 - the super Bas URL so I think we can find
28:52 - the url somewhere here at the top of the
28:55 - page as you can see project URL so I'm
28:57 - going to grab the project URL Edge
28:59 - straight to the project and within the
29:01 - environment. development. TS file I'm
29:04 - going to set production to false and
29:07 - then I'm going to call super base URL
29:10 - I'm going to set that to the super base
29:12 - URL we copy just now from super base and
29:14 - then the second one is going to be the
29:16 - super base key so all we need to do is
29:19 - just to say super super base key and
29:22 - then we need to grab the key as well so
29:24 - within the dashboard so the key we have
29:26 - two types of key we have the non public
29:28 - key and the service Ro secret so for the
29:31 - sake of uh this project because we we
29:34 - have we are going to have Ro level
29:35 - security enabled for our tables so this
29:38 - is the right key for us so I'm going to
29:40 - grab that and then paste it within the
29:43 - super base key object so I'm going to
29:45 - save and then we can now use this super
29:48 - base object within our all service while
29:52 - creating the super base instance so
29:54 - quickly within the Constructor in fact
29:57 - before we do it with within the
29:58 - Constructor I'm going to create a
29:59 - variable called super base and inject
30:01 - the super base client into it so what I
30:04 - mean is we're going to type in private
30:06 - super base we make it of private because
30:08 - this this variable is only in there
30:09 - within this file so super base and then
30:13 - you can just give it a type of super
30:15 - base client which we need to inject and
30:18 - you can see it's injected right there at
30:21 - the top and it gives an error that says
30:23 - super base is declared but it value is
30:26 - never read and also property super based
30:28 - as no initializer so to get rid of this
30:31 - you can either make use of an
30:32 - exclamation mark or a question mark any
30:35 - of these two works but I'm going to use
30:37 - the exclamation mark That's the
30:39 - convention I am comfortable with so we
30:42 - can now ex straight to the Constructor
30:44 - to configure our super base client so to
30:46 - do that I'm going to say this do
30:48 - superbase is equals to create client
30:52 - which we also need to import as you can
30:54 - see above we have the C client imported
30:56 - I'm going to open a parenes c and within
30:58 - the parentheses we need to configure our
30:59 - environment super base URL and our
31:01 - environment super base key so to do that
31:03 - I'm going to do environment which we
31:05 - need to import as well so we have
31:07 - imported environment from development
31:09 - file so I'm going to say environment dot
31:11 - so it gives us the option of the super
31:13 - base key and the super Bas URL but the
31:15 - first one we need is the super based URL
31:17 - so I'm going to call that and then
31:19 - finally we can now call the environment
31:21 - do super base key so that's all we need
31:24 - to do to configure the super base client
31:28 - we can now make use of this instance
31:30 - called super base anywhere within our
31:33 - project to access the various methods
31:35 - available for us to configure our logged
31:37 - in to enable us also to sign out from
31:40 - the application so the first thing I
31:41 - want to do is to make use of the super
31:44 - base on all states changed so to know
31:46 - the meaning of the on all states change
31:48 - in super base I'm going to head to the
31:50 - browser and type in on or state change
31:53 - in super base as you can see this method
31:57 - allows to listen to All Events I'm going
32:00 - to open up this particular link to get
32:02 - more insight on what it means as can see
32:04 - it enables us to listen to all events
32:07 - that is authentication in events so that
32:09 - is you can see the highlights below it
32:11 - allows us to subscribe to important
32:13 - event occurring on the user session but
32:16 - one important thing about this
32:18 - particular event is it emits three
32:22 - events the first one is the initial
32:24 - session the signed in session and the
32:26 - signed out session so what it does
32:28 - basically is it allows us to track the
32:30 - current state of the user that is if the
32:32 - user is either signed in or signed out
32:34 - so we need to always know this to
32:36 - determine how we are going to render the
32:39 - user sessions in our project so I'm
32:41 - going to head back to the browser and
32:43 - let you see what I mean so within a
32:45 - Constructor we can just say this do
32:47 - superbase do do on state change which we
32:52 - can see right here and then it's going
32:54 - to take a parentheses and then it's
32:56 - going to take in two two arguments the
32:59 - first one is called event and the second
33:01 - one is called session so I'm going to
33:03 - make it of a f arrow and then open a
33:06 - bracket and what I'm going to do next is
33:08 - to console log each of these arguments
33:11 - so the first one is the event I'm going
33:13 - to type in event and then under the
33:15 - second console log I'm going to type in
33:18 - session and this session so to see this
33:21 - in action what I'm going to do is to
33:23 - save I think we should be able to get
33:25 - the instance of this event once to save
33:28 - so I'm going to save and then type in NG
33:30 - ser and then let's see if we get
33:33 - anything console logged in the browser
33:35 - quickly we head back to the browser and
33:37 - then I'm going to open up the inspect
33:39 - button and then head straight to the
33:41 - console now as you can see we don't get
33:43 - to see anything within the console now
33:45 - the reason for this is because this
33:47 - particular service is not being called
33:49 - by any of our components but once we
33:51 - reference this service in any of our
33:53 - components that is our login component
33:55 - this is where we need to make use of the
33:56 - authentication Service we're going to
33:58 - see this console loged events in the
34:00 - browser so what I'm going to do is to
34:02 - create the sign in with Google what
34:05 - service so below the Constructor I'm
34:08 - going to say a sync and then I'm going
34:10 - to call it sign sign in with Google and
34:13 - it doesn't take in any argument so I'm
34:15 - just going to open the bracket and
34:17 - within the bracket we're going to await
34:19 - this do superbas do dot then we can see
34:24 - the various methods available to us what
34:26 - we need to do is to sign in with or so
34:28 - I'm going to say sign in with what and
34:31 - the sign in with what takes in a
34:33 - parentheses and an object and within
34:35 - this we have some conditions we need to
34:37 - set the first one is the provider we
34:40 - have other options but for this tutorial
34:42 - we're going to only make use of the
34:43 - provider to signify the type of Provider
34:45 - we are trying to work with which is as
34:47 - you can see from the super based
34:48 - dashboard is Google so if you're working
34:50 - with every any other one maybe like the
34:53 - Apple or GitHub you need to reference it
34:55 - there right here to show the type of
34:58 - what service you are working with so we
35:00 - working with Google currently so before
35:02 - I proceed I would like to create the
35:03 - sign out method as well so I can just
35:06 - say a sync sign out let's give the O an
35:10 - uppercase and then open a bracket the
35:12 - sign out doesn't also taking any
35:14 - argument so all we need to do is just to
35:16 - await the response and by saying this do
35:19 - superbase do what then the sign out
35:22 - method available for us in super base
35:24 - what this method will do is to clear the
35:26 - entire local storage and possibly the
35:28 - session storage in the browser when the
35:30 - user tries to log out so now let's try
35:33 - to call this methods within our login
35:36 - component so I'm going to exray to the
35:37 - login component and within the login
35:40 - component we need to inject our all
35:43 - service so to do that we're going to
35:44 - make use of the injector which is one of
35:46 - the new updates available for us in
35:48 - angular instead of making use of the
35:49 - constructors can we can just say private
35:52 - or is equals to inject and then we're
35:55 - going to call the all service which I as
35:57 - you can see is import imported for us
35:59 - above we also need to inject the
36:01 - injector within our components within
36:04 - angular core so I'm going to click on
36:06 - the inject and then we can just inject
36:09 - it within angular core which you can see
36:11 - right here so now we now have a
36:12 - reference to the instance of the earth
36:14 - service so now let's create the method
36:17 - to handle our authentication so I'm
36:19 - going to say a sync and within a sync
36:21 - I'm going to say handle or let's call
36:24 - our method handle or and then we can now
36:28 - say response is equals to await let's
36:32 - reference our all service by saying this
36:34 - do dot we have two options currently
36:37 - sign in with Google or sign out okay
36:40 - it's called sign in Google let me check
36:41 - I I'll prefer it to be called sign in
36:44 - with Google so I'm just going to grab
36:46 - this and then paste it within our login
36:48 - component and then add the parentheses
36:51 - at the end so with this we can have
36:53 - access to signing with signing in with
36:55 - Google Now we need to and do this using
36:58 - the click event in our template so to do
37:00 - that let's head to the HTML file of our
37:03 - login component and we're going to call
37:06 - it I'm going to change this a tag to
37:08 - button so we don't have the hre we don't
37:11 - need the hre so this is going to be a
37:13 - button and then okay let me change the
37:15 - syntax the button should be below so
37:18 - within the button let's make use of our
37:19 - click event and line angular so I'm just
37:22 - going to call click which is equals to
37:24 - handle all so I'm going to save
37:26 - everything we've done so far far and
37:28 - then head back to the browser so for
37:30 - this I'm going to refresh the components
37:33 - and then I'm going to try to reference
37:35 - the login component within our app
37:38 - components for now because we've not
37:40 - integrated the OD guard so for now I'm
37:42 - going to load the login component so we
37:44 - can test out our Google login method so
37:47 - now we have sign up using Google so I'm
37:49 - going to click on sign up using Google
37:51 - and let's see the response we get as you
37:53 - can see it asks us to choose the
37:55 - particular Google account we want I'll
37:57 - clear the console before I click on one
37:59 - let's select done to stay gmail.com and
38:03 - it's going to ask us if we want to
38:04 - continue I'm going to click on continue
38:06 - and then our request is successful as
38:09 - you can see our request is successful
38:12 - and if you can look at the console for
38:14 - now we are not routing to the dashboard
38:15 - on successful response for now I want us
38:18 - to take a look at the console.log we did
38:20 - in our service so I'm going to close
38:23 - this and this as well in our old service
38:26 - you know we are console login the event
38:28 - as well as the session so let's take a
38:29 - look so you can see the session as an
38:32 - object while the event showed sign in
38:34 - that is this user is currently signed in
38:37 - so with the session it shows an object
38:41 - of the user's detail like the email uh
38:44 - the date it was created the role which
38:47 - is currently authenticated and other
38:49 - details which you might consider
38:51 - important it also shows the refresh
38:53 - token as well as the provider token and
38:54 - the access token so we can handle all
38:57 - this responses to configure your
38:59 - application while you are authenticating
39:01 - your user so what we want to do next is
39:03 - to create the authentication guard that
39:07 - is when the user is signed in they get
39:08 - logged into the chart component but if
39:11 - they are not logged in they get shown on
39:14 - the current page which is the sign up
39:16 - component so let's integrate the O guard
39:18 - and to integrate the O guard we need to
39:20 - create a guard so I'm going to stop the
39:21 - terminal once again and I'm going to run
39:24 - NG generate guard and then the guard
39:27 - going to be called or because it's oh I
39:29 - made a mistake I didn't put a g I didn't
39:32 - put generate it's it's supposed to be NG
39:34 - generate guard then the O guard which is
39:37 - the name of the Guard so it's going to
39:39 - generate a new o guard file for horse so
39:43 - it's ask it presents us with some
39:45 - prompts if we want to create it using
39:47 - the can activate they can activate child
39:49 - they can deactivate and they can match
39:52 - but the one we need is the can activate
39:54 - H guard so I'm going to select can can
39:57 - activate it and as you can see it's the
39:59 - two files required the test file and the
40:01 - O guard file itself gets generated so
40:04 - we're going to head straight to visual
40:05 - studio code and let's take a look at the
40:07 - Ard file I'm going to close the up
40:09 - routes as well as the Lo login component
40:12 - here so you can see this is a functional
40:13 - G in previous versions of angular I
40:16 - think from angular uh 15 downwards we
40:19 - still make use of class based Old Guard
40:21 - but for angular 16 and above the
40:24 - functional guard was introduced so if
40:26 - you have not use the OD guard so this
40:28 - tutorial is going to explain to you step
40:30 - by step how to use the functional o
40:32 - guards to configure your angular
40:35 - applications uh authentication States
40:38 - now before we begin our integration here
40:40 - we still need to do some things in our
40:42 - all service file so one of those things
40:45 - is to get the login state of the user so
40:47 - to get the login state of the user we're
40:49 - going to make use of the session this
40:51 - session we are getting we need to set it
40:53 - to local storage once we save it in
40:55 - local storage then we get a way to
40:57 - assist or to determine whether our user
40:59 - is currently logged in or not this
41:02 - particular data is important while
41:04 - configuring our Ard so to do that below
41:06 - the console logs I'm just going to say
41:09 - local storage remember we within the All
41:11 - State change this is where we get to
41:13 - determine our alt event and our session
41:16 - event so we can say local storage do set
41:18 - item because we are trying to save the
41:20 - session and I'm going to call it session
41:23 - and then I'm going to make use of Json
41:25 - do stringify so I'm going to say Jon
41:28 - do stringify and I'm going to save the
41:31 - session now we need the user session
41:33 - because when you check the console log
41:35 - the user session contains the
41:36 - information we need so I'm just going to
41:38 - say session do user so let's remove one
41:40 - of the brackets so I'm going to say
41:42 - session do user so that's all we need to
41:45 - do to save the item in local storage so
41:48 - now we now need to create an a condition
41:51 - that if the user exists then we want to
41:54 - navigate the user to the Chart component
41:56 - so so do that I'm going to say if
41:58 - session do user so if there's if the
42:02 - session do user object exist then I can
42:04 - say this. router. naate and then we can
42:09 - make reference to the Chart component by
42:12 - doing for/ chart so we have this error
42:14 - we need to inject the router by making
42:17 - use of the injector so I can just say
42:20 - private router is equals to inject and
42:23 - then we can call the router so we need
42:25 - to import two things the router as well
42:27 - as the inject service so you can see the
42:30 - error disappears and we can now proceed
42:34 - with our integration so now we need to
42:37 - head to the O guard service so within
42:39 - the O guard service what we need to do
42:41 - is I'm going to leave the state as it is
42:44 - so I'm going to say um we need a
42:47 - particular geta function for us to
42:50 - determine the state of the application
42:52 - so after saving this session in local
42:55 - storage we also need a geta fun function
42:57 - and this geta function is what we use in
42:59 - this um Ard so let's quickly create a
43:02 - geta function So Below the Constructor
43:05 - or outside the Constructor you can just
43:07 - say get anytime you click create a
43:09 - getter you signify it by saying get it's
43:11 - going to return a bulling actually so
43:12 - I'm going to say get is logged in that
43:15 - is if the user is logged in then I'm
43:17 - going to signify it as a bullying then
43:20 - we're going to have a bracket so we're
43:22 - going to create a variable that says con
43:23 - user is equals to local storage we need
43:26 - to get get the item so I'm going to say
43:28 - local story. get item so what item are
43:30 - we trying to get we're going we're
43:32 - trying to get the session and then we're
43:35 - going to save it as string and then we
43:38 - now need to return the geta because
43:40 - without the return we always get an
43:42 - error that says an accessor must return
43:44 - a value so that's one of the conditions
43:46 - of creating an accessor so to return the
43:48 - value we're going to say return and then
43:50 - we're going to say user which is
43:52 - variable we created above if the user is
43:54 - undefined so if the user is undefined we
43:58 - can return false however if the user is
44:01 - defined we can return true so this is
44:03 - the data we're going to use in our old
44:04 - cut to to determine if the user is
44:07 - logged in or not because anytime the
44:09 - user session is available it's going to
44:11 - return true if the user SE is not
44:13 - available is going to return false so
44:15 - back to the O guard we can now say if we
44:17 - need to make use of the injector here to
44:20 - to reference our all service so I'm
44:21 - going to say inject then I'm going to
44:23 - call the all service all service which
44:27 - has just been imported above let's
44:29 - import inject as well so if the O
44:31 - service dot you can see the methods
44:34 - available for us we have signing with
44:36 - Google we have sign out then we have the
44:38 - geta which is the which is called is
44:39 - logged in so if o service do is logged
44:42 - in is equals to false so what do we want
44:45 - to do we want to navigate the router to
44:48 - the login page so to do that we need to
44:50 - make use of inject again and this time
44:52 - around the inject is going to deal with
44:54 - the router we are going to bring in the
44:56 - router which has has just been imported
44:57 - above so we're going to say inject
44:59 - router. navigate and then just like we
45:02 - did in our or service file I'm going to
45:05 - reference for/ login here and then we
45:08 - need to return something we need to
45:10 - return false so if the login States is
45:14 - false we navigate the user back to the
45:17 - login page else we do what we return
45:20 - true so where the true comes in is where
45:23 - this router. navigates moves the user to
45:26 - the charts that board so this is how the
45:28 - router works so I'm going to save
45:30 - everything we've done so far and then
45:32 - let's test it out but to do that we need
45:34 - to run our project Once More by calling
45:37 - NG Ser while the project is compiling
45:40 - I'm going to exray to the super Bas
45:41 - service and I'm going to delete the
45:44 - current user because while we're
45:46 - creating the authentication we created a
45:48 - new user which is the don't to stay
45:50 - email so I'm going to delete this
45:51 - particular user so let's get this
45:53 - deleted and then our project is still
45:56 - compiling the delete is successful So
45:58 - currently we have no users call so now
46:00 - our compilation is complete the project
46:02 - gets refreshed and we need to clear the
46:05 - local storage so I'm going to clear the
46:07 - local storage and this is so that we
46:10 - assuming we assume this is a new user
46:12 - coming into the application I'm going to
46:14 - refresh the page so now what I'm going
46:16 - to do is try to access the chart
46:19 - component so I'm going to say for/ chart
46:22 - as can see we get navigated back to the
46:24 - login page so let's try for for/ SL
46:27 - chart once again we get navigated to the
46:29 - login page so now let's try to create a
46:32 - new user so let's click on sign up using
46:34 - Google select the user we were using
46:37 - before which is done to stay at
46:39 - gmail.com and for some reason it doesn't
46:42 - navigate us to the chat D dashboard okay
46:45 - let's investigate why that is the
46:47 - situation oh I think um we forgot to
46:51 - remove the configuration we did in the
46:53 - app. component. HTML file we need to get
46:56 - rid of this this is confusing our
46:58 - application so we need to get rid of it
47:00 - and then remove it from the import array
47:02 - as well so I'm going to get rid of this
47:04 - we no longer need them to display the
47:06 - application now we can now save and then
47:09 - head back to the page yes as you can see
47:11 - we get navigated to the chat application
47:13 - because the user is signed in P so now
47:16 - let's integrate the logout button within
47:19 - the chart component we already created
47:21 - the function in the service so all we
47:22 - need to do is just to head straight to
47:24 - the charts component and with the chart
47:27 - component we can create the logout
47:29 - method so I can just say a sync logout
47:32 - and then we need to reference our or
47:35 - service so we need to make use of the
47:37 - inje injector to do that so I'm going to
47:39 - say private or is equals to inject and
47:43 - then all service which we need to import
47:45 - both so let's import the inject so we
47:47 - have the inject method imported so we
47:50 - can now say this do dot we have the sign
47:55 - out method so um it returns a promise so
47:58 - we can just say do then and then make
48:01 - use of a fat arrow and then we can just
48:03 - make use of the router by saying this do
48:06 - router. navigate we need to navigate
48:09 - back to the login page and then if
48:12 - there's an error so we can just say do
48:14 - catch passing the error argument and
48:16 - then probably Aller an error an Aller
48:19 - error do message cool so we can see see
48:22 - we have the error this do router um has
48:25 - not been ejected it doesn't EX so we can
48:27 - just quickly say private router like
48:30 - we've done so many times in this app
48:31 - inject and then call the router that is
48:34 - all so let's test out our log out if it
48:36 - works so I'm going to clear the console
48:39 - click on log out oh we are nothing
48:42 - happens because we haven't made use of
48:44 - the click event and so quickly head
48:46 - straight to the HTML page I completely
48:48 - forgot about that so within the button
48:50 - I'm going to make use of the click event
48:52 - and so we can just say click and then is
48:55 - equals to C the log out method and then
48:58 - save once again so this should work now
49:01 - that we have the click event so I'm
49:02 - going to click on log out and you can
49:04 - see the user is logged out I'm going to
49:06 - refresh the page and then so let's try
49:08 - to access the chart URL without logging
49:12 - into the application let's see if this
49:13 - works so I'm going to say for/ charts
49:16 - and whoo for some reason despite the
49:18 - fact that we are not logged in we're
49:20 - able to access the dashboard this is not
49:22 - good so to prevent this there's one
49:24 - final thing we need to do with our OD gu
49:26 - that we need to call it within our
49:29 - router so the applications we do not
49:32 - want or the components we do not want
49:34 - anyone to access without logging in we
49:36 - need to call out the odard right there
49:38 - using can activate so those components
49:41 - include the chat and the chat alone only
49:43 - logged in users should be able to access
49:45 - our chart component So Below the chart
49:48 - part I'm going to call can activate
49:51 - which needs to be imported into this
49:53 - component so can activate and I'm going
49:56 - to make it of a square bracket and I'm
49:58 - going to call alt in lower case alt
50:01 - guard so we need to import our alt guard
50:04 - which has been done above and then we
50:06 - need to put the comma so it gets R of
50:08 - the gets rid of the error so I'm going
50:10 - to save and then let's head back to the
50:13 - browser to test things out once more in
50:16 - fact we don't because immediately the O
50:18 - guard was injected into the router it
50:21 - routes the user away from the dashboard
50:23 - because they are not currently logged in
50:24 - let's try to access the charts component
50:26 - once again from the URL as you can see
50:28 - our o guard is in full control by
50:32 - navigating us back to the sign sign up
50:34 - or signing with user button so only
50:37 - signing users can access our dashboard
50:40 - but there is one more thing I want us to
50:42 - do before we complete our authentication
50:44 - part of this tutorial so I'm going to
50:46 - click on the sign up with Google once
50:49 - again and then I'm going to select one
50:51 - of the Google accounts which is the
50:53 - first one we have right here and then as
50:55 - you can see we get logged into the into
50:58 - the component but there's an there's a
51:00 - one here that says navigation triggered
51:02 - outside angular Zone did you forget to
51:04 - call NG zone. run because it's within
51:07 - the angular Zone we need to make use of
51:09 - ngzone to get rid of that error message
51:11 - so quickly back to our service um where
51:14 - we have the router I'm going to say this
51:18 - doore NG Zone do run the NG Zone also
51:22 - needs to be injected into this component
51:24 - so let's not forget that but for now I
51:27 - just move the router into the NG zone
51:30 - now let's inject NG Zone into this
51:32 - component so quickly above below the
51:34 - router you can just say
51:36 - privatecore NG zone is equals to inject
51:40 - so we need to inject ngzone so that gets
51:43 - rid of the error so let's save and then
51:46 - let's let the page reload we can see
51:48 - that error gets disappeared and even if
51:50 - we log out let's log out and log in
51:52 - again to see if we get to see that error
51:54 - message we can see it has completely
51:56 - disappeared so we do not have the NG
51:58 - Zone error so we are good to go so with
52:00 - that we've been able to complete the
52:02 - authentication part of this uh tutorial
52:05 - so next up is for us to start creating
52:07 - the tables for our chart application so
52:10 - for this application we're going to have
52:12 - two tables created in super base now
52:15 - let's take a look at this readme.md file
52:18 - so this readme.md file contains our
52:22 - database schema so like I said the link
52:25 - to this GTH up repository is going to be
52:27 - made available in the description box so
52:31 - it contains everything you need to know
52:33 - to create a database table in super base
52:36 - so the two tables we're going to create
52:38 - is the first one is the users table then
52:41 - the second one is the chat messages
52:44 - table so these are the two tables we are
52:46 - going to be creating and the two
52:48 - schemers include uh the ID the full name
52:51 - and then the Avatar URL while the chart
52:54 - table is going to contain the ID the
52:57 - created art the text the editable and
53:00 - then the sender that is the sender uid
53:03 - and then if the message is going to be
53:05 - editable or not the text is the message
53:07 - being sent and the date is the dates in
53:10 - which the message was sent and the ID
53:12 - for that particular message so um let's
53:16 - get started with the users table now to
53:18 - create the users table let's straight to
53:20 - super base within super base I'm going
53:23 - to click on the home button and there's
53:26 - something thing we need to note to
53:27 - create a table in super base you can
53:30 - either use the table editor or the SQL
53:33 - editor so I'm going to make use of these
53:36 - two options so the first one which is
53:38 - the table editor is going to be used to
53:40 - create our message table while this SQL
53:43 - editor is going to be used to create our
53:45 - users table so to get started with this
53:48 - I need to copy some of the commands for
53:51 - the users table which is within our
53:53 - redme file in fact to dis playay this
53:57 - text in a clear format I'm going to open
53:59 - this using a markdown preview which
54:02 - makes it looks like an article so you
54:04 - can see by the time I push this to get
54:06 - up it's going to appear this way because
54:08 - it's in markdown format so this is very
54:10 - clear to read as you can see you have
54:12 - for creating a user table this is the
54:14 - command to enable Ro level security this
54:16 - is the command then to enable permit
54:19 - access for users to access their profile
54:22 - so all the commands have their own
54:23 - heading so uh everything is perfect
54:26 - clear so let's get started with creating
54:28 - the users table so to create the users
54:30 - table this is the command to create the
54:32 - users table so I'm going to grab this
54:34 - and then xray to super base and paste it
54:37 - within the SQL editor now you can see
54:41 - this um queries is Untitled so let's
54:45 - give it a name so I'm going to click on
54:46 - REM rename and luckily for super base as
54:49 - a superbas AI that can help us to remove
54:53 - the buing of trying to come up with a
54:55 - name for our query so I'm going to click
54:57 - on rename with the super base Ai and you
55:00 - can see it gives it a name as well as a
55:03 - description that fits the particular
55:05 - profile of our query so I'm going to
55:07 - click on rename query now to execute
55:09 - this query before I click on ex uh run
55:12 - to execute this query you can see the
55:15 - preview it says create table which it
55:18 - says create a public table and the table
55:20 - is going to have a ID with a type of U
55:23 - ID a full name with a type of text an
55:26 - avatar URL with a type of text and then
55:29 - a primary key which is the ID we have
55:32 - right here you can see um the ID above
55:36 - is it serves as our primary key now when
55:39 - I click on run this table is going to
55:41 - get created for us as you can see from
55:43 - the result success no rose returned now
55:46 - before we proceed I want to quickly take
55:47 - us back to the table editor and let's
55:49 - see if a table has been created for us
55:51 - as you can see we now have a users table
55:53 - with an ID with a full name and then an
55:56 - avatar URL cool now let's head back to
55:59 - the Avatar let's head back to the SQL
56:01 - editor rather and then let's click on
56:03 - new query to create a new query for our
56:05 - users table so the next thing we want to
56:07 - create is to enable Road level security
56:10 - so to enable Ro level security I'm going
56:12 - to grab this SQL command and then head
56:15 - back to the SQL editor paste it in and
56:17 - then click on run as you can see Ru
56:20 - level security has been enabled and
56:22 - automatically um the super base AI helps
56:25 - us to the name and we by clicking on it
56:28 - again it helps us to generate the
56:30 - description and I'm going to click on
56:32 - rename query so I'm going to click on
56:34 - new query once more and I'm going to
56:36 - grab the next query which is to permit
56:39 - access users access to their profile so
56:41 - users can access their profile when they
56:43 - want to access their profile so I'm
56:44 - going to grab that policy and then I'm
56:47 - going to paste it in and then I'm going
56:48 - to rename the query by clicking on
56:50 - rename with AI super base or super base
56:53 - AI as the case may be and then um I'm
56:56 - I'm going to click on run so we have
56:57 - more queries to run so the next one is
57:00 - to permit users to update their profile
57:02 - if a user wants to update their profile
57:04 - so I'm going to click on new query once
57:06 - more and then I'm going to paste it in
57:08 - click on the menu we have right there
57:10 - click on rename query rename with super
57:12 - base Ai and then click on rename query
57:15 - then run the policy that is the query
57:18 - and you can see it's successfully
57:19 - integrated so the next one is the super
57:22 - based function so for the super based
57:24 - function we need to grab this particular
57:28 - query and I'm going to do a bit of
57:30 - breakdown for this I'm going to click on
57:32 - new query and then paste it in so as you
57:35 - can see this query this function can be
57:38 - a bit tricky now depending on the old
57:41 - service you are using the values needs
57:43 - to follow along with the type of service
57:46 - you are using for us the O service we
57:48 - are using which is the Google Service as
57:50 - a full name metadata as well as a avatar
57:53 - Ur URL metadata so if what whatever go
57:57 - authentication you using probably using
57:59 - GitHub or apple or Discord you need to
58:02 - check the metadata because if you just
58:04 - copy this query which has a full name
58:06 - and Avatar URL it's going to return an
58:08 - error it's not going to work to make
58:10 - this more clear I'm going to head back
58:11 - to my application and then I'm going to
58:14 - head straight to uh probably the the
58:16 - local storage and within the local
58:18 - storage you can see the app the user
58:20 - metad data rather under the user metata
58:23 - metad data you can see I have something
58:24 - called Avatar URL and I have a full name
58:27 - so these particular keys are what I'm
58:32 - referencing in this particular database
58:35 - function this query function for GitHub
58:37 - and other authentication Service you may
58:40 - not see full name there you may not see
58:41 - aat URL that that reference the image
58:44 - you may see other things so you need to
58:45 - be careful of that whatever you want to
58:47 - reference you need to check the user
58:48 - metadata and then reference it within
58:51 - the query if I wanted the probably the
58:54 - phone number or the name or the picture
58:56 - so all I need to do is just to duplicate
58:58 - this then change the string right here
59:00 - to picture or whatever is within this
59:03 - key right here so I thought I should
59:05 - make that clear so let's change the
59:07 - query Name by clicking on rename with
59:09 - super base Ai and then click on rename
59:11 - query so I'm going to run that function
59:14 - and it says there's an error on line 8
59:17 - um I think this trailing comma shouldn't
59:19 - be there so I'm going to click on run
59:21 - again and this time around it's
59:23 - successful now I think the final thing
59:26 - need to run is the super base trigger so
59:30 - what this does basically is every time a
59:32 - new user signs in it saves their data
59:35 - into the data table it triggers the
59:38 - table to save the new user so um I'm
59:41 - going to paste that in so it's going to
59:43 - insert each new user into the user's
59:45 - table we're going to see how that works
59:48 - once we integrate it with our angular
59:50 - front end application so I'm going to
59:52 - click on rename query rename with super
59:55 - based Ai and and then click on rename
59:57 - query then we can run the trigger and
59:59 - with that we've created all the queries
60:01 - for our user table so I'm going to go
60:03 - back to the user to the table editor
60:05 - rather and then select users so you can
60:08 - see under the alt policy we have two
60:10 - policies the select an update policy
60:13 - created for us because we uh we did it
60:16 - through the SQL editor so normally you
60:19 - should be able to do this um using the
60:22 - table editor if you decide to create a
60:24 - new table by making use of the the table
60:26 - editor format you need to fill the forms
60:28 - but to do that um that will be when we
60:31 - start creating our messages table but
60:33 - for now we need to create the road level
60:35 - security we need to enable it for our
60:38 - users table I think that's the last
60:39 - thing we need to do as far as this table
60:41 - is concerned so to do that I'm going to
60:42 - click on all policies and then I'm going
60:44 - to click on create a new policy so this
60:46 - policy is going to be select so there
60:48 - are different policies you have the
60:50 - select the inser the updates delet and
60:53 - the all policies but for this case we
60:55 - have the select and I'm going to set the
60:58 - expression to true so that is the users
61:02 - have read access so I'm going to give it
61:05 - a policy name for this form we don't
61:07 - have super B it to help us out so we
61:09 - need to just say probably enable read
61:12 - access so we've enabled read access so
61:15 - users can access their profile by
61:17 - setting it to true and then we can now
61:19 - click on Save policy and we've been able
61:22 - to create a ro level uh security for our
61:25 - uh uh users table so to test this out
61:28 - you can see currently we have no users
61:31 - the table is currently empty so what I'm
61:32 - going to do is under authentication I'm
61:35 - going to delete the current user we have
61:37 - I'm going to delete this user and then
61:39 - I'm going to log out clear the local
61:42 - storage open up console and then I'm
61:44 - going to refresh the application to
61:46 - ensure everything is in sync so the idea
61:48 - is anytime a new user registers into the
61:51 - application we now have them available
61:53 - within the users table so I'm going to
61:55 - open up the table editor and select
61:56 - users and let's see when the new user
61:59 - logs in if we are able to retrieve the
62:01 - ID the full name and the Avatar URL this
62:03 - data is going to be what we use within
62:05 - our application uh within our angular
62:08 - application to display uh the user's
62:10 - full name as well as the image so let's
62:12 - see I'm going to click on sign up using
62:15 - Google once again then I'm going to
62:17 - select this account and as you can see
62:19 - we are signed in so I'm going to head
62:20 - straight to super base and as you can
62:22 - see we now have this data we have the ID
62:24 - we have the full name and we have the
62:26 - user URL the Avatar URL rather so I'm
62:29 - going to grab this Avatar URL um let me
62:32 - copy everything and then let's paste it
62:34 - here let's see what it displays you can
62:36 - see it displays the Avatar of that
62:39 - particular user which is available on
62:41 - Google so we can now persist that
62:43 - particular image within our chart
62:45 - application right here every time a new
62:47 - user signs in the trigger gets um
62:50 - activated and then it saves the data
62:53 - within our users table so it can save as
62:55 - many many users as possible that signs
62:58 - into the application so I think that is
63:00 - the implementation for the users table
63:02 - so the next thing is to create another
63:04 - table which is the message table so to
63:06 - create the message table I'm going to
63:08 - click on create a new table this time we
63:09 - are not using the uh SQL editor so I
63:12 - want us to learn the difference between
63:14 - using the SQL editor and then using the
63:16 - uh the form we have right here to create
63:19 - the different tables so uh using the
63:22 - user interface let's give the table a
63:24 - name so I'm going to call the table
63:26 - chart for description I'm going to skip
63:28 - that for now enable Ro level access yes
63:31 - I'm going to say that true and then um
63:33 - another thing is because this is the
63:35 - chart we want to enable real time
63:37 - broadcast that is every time a message
63:39 - is being uh sent to this table we want
63:41 - to display it in real time instead of
63:44 - having to reload the page so we need to
63:45 - set that through so um the next thing we
63:48 - need to do is remember we are following
63:50 - this particular schema that is the table
63:53 - needs to have an ID it created that
63:55 - field it TT field an editable field and
63:57 - a sender field so back to the super base
64:01 - um we need to change the ID from in 8 to
64:05 - UU ID and then we can set the default
64:08 - value to a random ID then the created
64:11 - art we're going to leave it the way it
64:12 - is so we're want to add a new column and
64:15 - the new column is going to be it's going
64:16 - to be text and it's going to be a type
64:18 - of text as well and then next up before
64:22 - we create another column we don't want
64:23 - this to be notable so I'm going to
64:25 - disable this field so the next thing is
64:28 - to create the editable field this allows
64:31 - the user to determine whether they can
64:33 - edit their data or not so it's going to
64:34 - be a buling so for default value going
64:37 - to set it to false this is not going to
64:40 - be nullable as well and then finally we
64:42 - have the sender so the person that sends
64:44 - the message is also going to be a uu ID
64:47 - as well and then the type is going to be
64:49 - o or U ID so it's it's not going to be
64:53 - nullable as well so we need to also add
64:55 - a foreign key relation so to add the
64:57 - foreign key relation I'm going to select
64:59 - the add foreign key and then it's going
65:01 - to be in the a public schema and then
65:04 - the table is going to be the users table
65:07 - and then we can connect it using the
65:10 - sender uid and then we're going to make
65:12 - use of the uid so I think that's all for
65:15 - the actions we need to set the actions
65:17 - we need to Cascade the actions so I'm
65:19 - going to select Cascade um so anytime
65:22 - the update happens it it's going to
65:24 - update all the records reference to this
65:26 - table same thing for the deleting as
65:28 - well it's going to update all the
65:31 - records in the table so I'm going to
65:33 - save and for with that we've been able
65:35 - to configure the current key relation by
65:38 - connecting the sender ID with the
65:41 - current user ID so I think that's all we
65:43 - need to do so I'm going to click on Save
65:46 - and then I think we are good to go now
65:47 - the final implementation for this chart
65:50 - table is to add Ro level security
65:52 - policies so this is going to have about
65:55 - um three to four Ro level security
65:57 - policies so the first policy is going to
66:00 - be the delete policy so for the delete
66:03 - policy I'm going to select delete and
66:05 - then delete is going to be called delete
66:08 - by user ID and then I'm going to scroll
66:12 - down and the SQL expression is going to
66:15 - be if the O id. uid rather If the. U ID
66:21 - is equals to the sender ID then um you
66:24 - can delete your message message that
66:26 - means you're able to delete your own
66:27 - message you can't delete someone else's
66:29 - message so that's uh the condition the
66:31 - SQL condition for this particular uh
66:34 - policy so I'm going to save so that's
66:36 - all for the delete policy now okay
66:38 - there's an error oh I use 3al 2 is
66:41 - supposed to be a single equals to I'm
66:43 - used to writing so much JavaScript I'm
66:46 - sorry about that so the next thing is to
66:47 - create another policy this time probably
66:50 - let create the insert policy this policy
66:53 - helps to determine how we want to insert
66:55 - the data only authenticated users can
66:57 - insert data and quick pause before we
67:00 - proceed with that particular insert
67:02 - policy there's something I missed with
67:03 - the delete policy um only authenticated
67:06 - user can delete once a user is logged in
67:09 - they are the only ones that can delete a
67:11 - particular message so I forgot to um
67:13 - call that so now we can now create a new
67:15 - policy called insert so for the insert
67:17 - policy we are going to call it insert
67:20 - for
67:21 - authenticated users
67:26 - and then the SQL expression for this is
67:28 - going to be if the sender is equals to
67:32 - the. uid and created uncore art is
67:37 - equals to now so if the sender ID is
67:40 - equals to the alt ID that is if the
67:42 - authenticated user ID is equals to the
67:44 - person trying to send the message and
67:46 - then the date of the creation is the
67:48 - current date then the user is able to
67:50 - insert data so I'm going to click on
67:52 - insert before I skip that um I'm going
67:55 - to say this policy so the next policy we
67:58 - are going to create is the read policy
68:01 - AB ability to read uh the policy so I'm
68:04 - going to call this read access so as
68:07 - usual only authenticated users can uh
68:10 - read uh this message a user that is not
68:14 - authenticated cannot read a message so
68:16 - all we need to do is just set it to true
68:17 - it's a bullying so once you
68:19 - authenticated then you can read a
68:21 - message so I'm going to save this policy
68:24 - and then the final policy
68:25 - we need to create is the update policy
68:29 - although this feature is not created
68:31 - within this application but for the sake
68:33 - of people who might want to integrate it
68:35 - into the project so I'm just going to
68:36 - create this policy so I'm going to call
68:38 - it update user based on ID so the public
68:42 - role is going to be authenticated and
68:45 - then we're going to say if
68:47 - the. uid is equals to Sender ID then we
68:53 - are allowed to update the message so so
68:55 - you can only update a message if it's
68:57 - the message you created yourself so I'm
68:59 - going to save this policy and those are
69:01 - all the policies we need to create for
69:03 - our message table so I'm going to go
69:05 - back to the table editor and you can see
69:08 - uh on the chart table we have four o
69:10 - policies and on the users table we have
69:14 - just three art policy so with that we
69:15 - can now try to integrate this within our
69:17 - angular application so what we want to
69:20 - do now is to interact with our chat
69:23 - table in super base we need to have the
69:25 - ability to create a new chart then fetch
69:28 - the newly created chart in real time and
69:30 - as well as delete the created chart and
69:33 - to do that we need to make use of
69:35 - services in angular so let's create the
69:39 - services folder so back to the terminal
69:41 - I'm going to stop the current terminal
69:43 - and then run a new command using NG
69:47 - generate service and it's going to be
69:50 - within a super based folder So within
69:52 - the super based folder we are going to
69:54 - have our chart service so I'm going to
69:58 - press enter and then the new service
70:01 - will be generated for us now that our
70:03 - new service has been generated let's
70:05 - head back to visual studio code and try
70:07 - to locate where this service is created
70:11 - So within this folder called super base
70:13 - we can see the chart service and within
70:15 - this chart service we need to reference
70:18 - an instance of the super based clients
70:20 - which we already did in the old service
70:22 - so to make this process easier and
70:24 - faster I'm just going to to head to the
70:25 - O service and grab the super base
70:29 - variable instance and then paste it
70:31 - within the chart service instance we
70:33 - need to import super based client
70:35 - another thing we need to do is to grab
70:37 - the code within the Constructor so I'm
70:40 - going to grab this and then I'm going to
70:42 - paste it right beneath our declaration
70:45 - and we're going to wrap the Constructor
70:48 - with the bracket so we still have error
70:50 - messages because we haven't imported the
70:52 - right modules so I'm going to import
70:54 - create client as well as environment and
70:57 - with that we are good to go and we can
71:00 - now reference super base within this
71:02 - angular application within this angular
71:05 - service so the first integration is
71:08 - going to be the ability to create a new
71:10 - chart in our application so to do that
71:13 - we need to create a new function so
71:15 - let's call this function chat message so
71:18 - to do that let's just say a sync chat
71:20 - message and it's going to take an
71:22 - argument and it's going to be a argument
71:24 - of type of of text of string because we
71:27 - need to pass in a text and remember
71:29 - within our super base chart table we
71:32 - have a text which also accepts a types
71:34 - of a type of string as well so we need
71:37 - to configure it in a way whereby
71:39 - anything we type within the input field
71:41 - can be saved within our chart table so
71:44 - within a try catch block I'm going to
71:46 - say try and then catch and the catch is
71:49 - going to have an argument of error and
71:52 - then we can alert error so let's create
71:54 - a variable object and within this
71:56 - variable objects we're going to have two
71:58 - arguments so the first one is going to
71:59 - be the data and then we have error so
72:02 - we're going to set it equals to await
72:05 - this do superbase do from and we're
72:08 - going to try and access uh the data from
72:12 - we're trying to reference our database
72:14 - table which is called charts if you head
72:17 - back to super base you can see that we
72:19 - called our super base name charts our
72:21 - super base table chart and then we want
72:23 - to insert so we have different option we
72:25 - have delete fetch um select but for this
72:29 - uh situation I want to insert into the
72:31 - super base table so what are we trying
72:33 - to insert we are trying to insert the
72:36 - payload of text which is the argument we
72:39 - have up here so now that that is
72:42 - determined we can now create a condition
72:45 - that says if error that is if an error
72:48 - occurs during this process we want to
72:50 - Aller error do message so if there's no
72:54 - error so we can proceed to return the
72:57 - data so I think that's all we need to do
72:59 - I'm going to save that and let's head
73:01 - straight to our chat component to access
73:04 - this particular service so within the
73:07 - chart component. CS file I'll need to
73:09 - create a new method as well so this
73:12 - method is going to be called unsubmit
73:14 - because we are trying to submit the
73:16 - chart and push it to our database table
73:20 - so within this unsubmit method we need
73:22 - to create a form to make this work so
73:25 - what do I mean by this when I head back
73:27 - to the browser anything within this
73:29 - input field we want to send it straight
73:32 - into a chart table so so to get any data
73:35 - within this input field we need to make
73:38 - use of reactive form for this project so
73:41 - so to do this we need to import some API
73:43 - from angular forms which include form
73:45 - Builder form group The reactive form
73:47 - modules as well as validators let's get
73:49 - started with the reactive form module So
73:51 - within the import array let's import the
73:54 - reactive forms module as you can see we
73:56 - have it imported above another thing we
73:58 - need to import is the form group so we
74:01 - need to create an instance of the chat
74:03 - form so we can just say chat form and
74:06 - then we're going to attach it to an
74:08 - instance of form Group which we need to
74:10 - import as well and we need to attach
74:13 - this variable to an initializer by
74:15 - making use of the exclamation mark and
74:17 - with that we can now exray to the
74:19 - Constructor um currently we don't have
74:21 - any Constructor here so I'm going to
74:22 - create a Constructor and within the
74:24 - Constructor we can just run this do chat
74:28 - form which is the name of our chart and
74:30 - then we're going to say is equals to
74:32 - this dot so we need the form builder for
74:35 - us to be able to have an instance of the
74:37 - group object so to do that we need to
74:39 - create a new variable so I'm going to
74:41 - say private FB which s which serves as
74:45 - form Builder I'm going to say is equals
74:47 - to here we need to make it of inject so
74:49 - I'm going to say inject what are we
74:51 - injecting we injecting the form Builder
74:53 - which we need to import so let's import
74:55 - the form Builder we already have inject
74:57 - imported but I would like to move this
74:59 - above the chart form variable so let's
75:02 - just do that now so everything that has
75:05 - inject is above and every other variable
75:07 - comes below so everything we create is
75:10 - in an organized format so we can just
75:11 - say this do FB dot then we have access
75:15 - to array control group and No Label as
75:17 - well as record but what we need is the
75:19 - group so this do form builder. group and
75:22 - then we need to open a parentheses and a
75:24 - bracket and within this qura within this
75:27 - qura bracket we need to create another
75:30 - key and this key is going to be called
75:33 - chart message so chart message and we
75:37 - can just open a bracket it takes in two
75:39 - arguments so the first argument is going
75:41 - to be the initial value which is going
75:42 - to be an mty array then we can make it a
75:45 - required field by saying validators do
75:48 - required validators is also imported
75:50 - from angular form so this chat message
75:53 - is also going to be refer within the
75:55 - HTML file this allows us to attach it to
75:58 - the particular field we are trying to
76:00 - get the data from so we need to head
76:02 - straight to the HTML file so let's head
76:04 - to chat component. HTML and this is
76:07 - where our form should be within this
76:09 - input field we want to get the data that
76:11 - is being typed within this input tag so
76:13 - we need to wrap this div around the form
76:16 - so what I'm going to do is to create a
76:18 - form tag it doesn't need this attribute
76:20 - of action we don't need that I'm just
76:22 - going to cut this closing tag and and
76:25 - then wrap it around the div and then we
76:27 - need to reference the name of our form
76:28 - which is called chat form using by
76:30 - binding it to the form group so I'm just
76:32 - going to say form group is equals to
76:35 - chat form and then we need to also use
76:38 - the NG submit event andl to access to
76:43 - reference the submit function so we can
76:45 - just open a parentheses and then say NG
76:49 - submit and then we can say is equals to
76:52 - the name of our method which is called
76:54 - called onsubmit so I'm going to pass it
76:57 - here and it's going to have a paren at
76:59 - the end as well and finally let's make
77:02 - use of form control name to access data
77:05 - within this input tag so we can just say
77:07 - form control name which is going to be
77:10 - equals to the name we called this
77:13 - particular key within the Constructor so
77:16 - which is chat message so I'm just going
77:17 - to attach it to the form control name
77:19 - which is chat message this allows us to
77:21 - access all the Valu within the input tag
77:24 - rather so so I think that's all we need
77:26 - to do for now so let's try to log
77:28 - anything we type within the input field
77:31 - within the console let's try to log it
77:33 - into the console so I'm going to head
77:35 - back to vs code and then we can just do
77:37 - const form value is equals to this do
77:42 - chat form do value do chatore message so
77:47 - let's console log this variable into the
77:50 - console by saying form value so I'm
77:52 - going to save everything we've done so
77:54 - far and and then restart the server by
77:56 - typing in NG serve now that our
77:59 - compilation is complete we can head back
78:01 - to the browser on Local H for 200 and
78:04 - then reload the entire page so once this
78:07 - is done I'm going to clear the console
78:08 - and then let's type probably 1 2 3 4 5 6
78:11 - 7 and then click on send you can see we
78:14 - now have the value of the input field in
78:16 - the console anytime we click on send so
78:18 - this value is what we want to send to
78:21 - our chart database within the text
78:24 - schema so let's head back to visual
78:26 - studio code and then let's reference our
78:28 - service so what we need to do next is to
78:30 - inject the super based service that is
78:33 - the chart service within this component
78:35 - so I'm just going to duplicate this and
78:37 - it's going to be called chatore service
78:40 - and then we're going to call the chart
78:42 - service within the super base directory
78:45 - so now that that is injected into this
78:47 - particular file we can now make use of
78:50 - the dis keyword by saying this do chart
78:54 - service dot chart message the chart
78:57 - message expects a payload that is the
78:59 - field that is the value within the field
79:01 - which is called form value so I'm going
79:03 - to pass it within this parentheses and
79:06 - then we can now say do then because it's
79:08 - it's returning because it's returning a
79:10 - promise and the promise we can give an
79:13 - argument of response although currently
79:16 - we don't need to make use of this
79:18 - argument but let's pass in an argument
79:20 - and then open a bracket and within the
79:22 - bracket we can just probably conso loog
79:24 - the the response to see if you are
79:26 - getting any form of response from the
79:28 - database and then we can make use of
79:30 - catch to catch any form of error that
79:32 - may be coming from the database make use
79:34 - of the F arrow and then we can alert any
79:37 - error that is coming from database by
79:39 - making use of error. message so I'm
79:41 - going to save and then so let's try and
79:43 - see if we get any data within our
79:46 - database when we send a value into the
79:49 - input field so for now I can just type
79:52 - something with the input field we are
79:53 - getting an error let me reload the page
79:55 - probably the compiler didn't compile uh
79:58 - complet didn't compile properly so
80:00 - within this input field when we type
80:03 - something we're going to see if we get a
80:05 - response in our database in real time or
80:07 - if we get an error the value this is a
80:12 - text and to ensure that we are eating
80:14 - the service I'm going to open up the
80:16 - network tab I'm going to clear
80:17 - everything in there and I'm going to
80:18 - click on send and as you can see we get
80:21 - a response of 200 created and then we
80:25 - can see the text payload as well as the
80:28 - pre uh it doesn't return any preview but
80:30 - we can see the payload being sent and
80:32 - then it shows the status code I've
80:33 - created so I'm going to rush straight to
80:36 - the chart database and you can see we
80:39 - have the value this is a text the
80:41 - editable Boolean is returning false we
80:44 - have the sender ID the created art as
80:46 - well as the user ID so everything is
80:49 - working smoothly and we can now insert
80:51 - data into the database so let's insert
80:54 - more data
80:55 - um we can just say uh this is another
80:59 - test I'm going to send that and then in
81:02 - the next Network tab we can see that is
81:04 - also successful let's send in another
81:06 - message to micky3 the third message and
81:09 - then let's click on send you can see all
81:11 - this data is sent to database and it is
81:13 - reflecting in real time without having
81:15 - to refresh the page so there are a few
81:18 - modifications I would like to make for
81:19 - instance anytime we type in a text I
81:21 - want the message to clear off like
81:24 - anytime we typ in a random text or a
81:26 - text or an input into the input field
81:29 - the message still stays so let's reset
81:31 - the the form anytime we type in a
81:34 - message in the service file I noticed
81:36 - there seems to be a warning and the
81:38 - warning says not all code Parts returns
81:41 - a value so in this case what I'm going
81:43 - to do to get rid of this warning is
81:45 - probably to get rid of this return data
81:47 - so uh with that I think we should still
81:49 - be able to send data to the database
81:51 - what I want to do now is to reset the
81:53 - form and in reactive form you can do
81:55 - that easily by referencing the form Name
81:56 - by saying this just chat form and then
81:59 - you can say do reset okay the reference
82:03 - to the reset method is after the chat
82:06 - form so it's going to be this just chat
82:07 - form. reset so I'm going to add the
82:09 - parenes at the end so let's test that
82:11 - out to see if the form gets cleared
82:13 - immediately we submit the data in the
82:16 - input field so I'm going to type in
82:18 - probably I'm going to get some data from
82:19 - this um static text I'm just going to
82:22 - paste it within the input form and I'm
82:23 - going to click on sent as you can see
82:26 - the text gets cleared immediately the
82:28 - data gets sent to the database so with
82:30 - that we are good to go with clearing the
82:32 - input field another thing we need to do
82:34 - is maybe uh we shouldn't allow someone
82:37 - to send an empty field to the database
82:39 - because currently when the FI is empty
82:41 - and I click on send okay although we do
82:44 - get an alert that says um no constraint
82:47 - it violates the nor constraints but we
82:50 - need to prevent this in the front end as
82:52 - well because this still gets sense to
82:54 - the
82:55 - database uh or not I think the database
82:59 - um handles that but in an ideal
83:01 - situation that shouldn't be happening we
83:03 - shouldn't have a scenario where we can
83:05 - type in uh we can send data using the
83:08 - send button using an in an empty input
83:11 - field so to prevent that we need to make
83:13 - use of the disabled attributes so we're
83:16 - going to make use of the square brackets
83:18 - and I'm going to call disabled and then
83:20 - say if not charts form do valid that is
83:24 - if the chart form is not valid disable
83:26 - the input field so you see um now that
83:29 - the compilation is complete this send
83:32 - button is grade out you can't click on
83:34 - it because the input field is grade out
83:36 - so but when you paste something or when
83:39 - you type in something then it gets
83:41 - enabled so you can only send that to the
83:43 - database so that's how that works and
83:45 - how we can handle um trying to submit an
83:48 - empty fi to database but but also we can
83:51 - see that super base helps to handle that
83:53 - because of the way we configure the
83:55 - database that is uh null is not allowed
83:58 - for the type of text it's not it's not
84:00 - nullable that's why it was not
84:02 - submitting previously when I was trying
84:04 - to submit the empty input field now we
84:07 - can see that we are able to send data to
84:09 - the database what I want to do now is to
84:11 - be able to fetch this data this Dynamic
84:14 - data from our database into our
84:16 - application what we currently have is a
84:18 - bunch of static tests in our HTML file
84:21 - which you can find right here but what I
84:22 - want to do next is let's fetch it within
84:24 - an array and then Loop over it and
84:26 - display it into the front end so the
84:28 - integration for that is going to start
84:30 - with the service so within the service
84:32 - we're going to create a new function and
84:33 - we're going to call this function list
84:35 - message make use of the asnc keyword and
84:38 - say list instead of list message let's
84:40 - call it list chart since we've been
84:42 - using the chart keyword consistently
84:44 - throughout this tutorial so let's say
84:45 - list chart and I'm going to make it of
84:47 - the TR cach block once again so I'm
84:49 - going to say try and then make it of the
84:51 - cat block and the cat block is going to
84:53 - take an argument of error and then we
84:56 - can just throw the error so by making
84:58 - use of the throw keyword throw error and
85:01 - within the card the tri block let's
85:03 - integrate the functionality so we need
85:04 - to create a variable a d structured
85:07 - variable of data as well as error so
85:10 - we're going to say this equals to await
85:14 - this do superbase do from and this is
85:18 - trying to reference uh the particular
85:20 - table we are trying to speak to in Toba
85:23 - base which is called chat so from the
85:26 - chat table we want to select all the
85:29 - messages from the authenticated users so
85:32 - to do that we're going to open up a
85:34 - string and then make use of asterics
85:36 - that is we're trying to select all the
85:39 - messages from the authenticated users
85:42 - this would be in lower case in fact not
85:44 - upper case and then we're going to make
85:46 - it open a parentheses and the parenty is
85:49 - going to have an asterics as well and
85:51 - that's all we need to do to select all
85:53 - the m messages from the authenticated
85:55 - users so once this is done we need to
85:58 - create an if condition I'm just going to
85:59 - grab this if condition we created in the
86:01 - chats message and then I'm going to
86:03 - paste it right below our destructured
86:06 - data and error variable and below that
86:09 - we're going to return the data so I'm
86:11 - just going to make use of the return
86:12 - keyword and then return the data then
86:14 - I'm going to save everything we've done
86:16 - so far so this is the service that will
86:19 - allow us to fetch all the chart data
86:21 - from the chart table so now we need to
86:24 - speak with this particular service in
86:27 - our chart component CS file so within
86:29 - the chart component CS file we need to
86:31 - create a new method so I'm just going to
86:33 - call this method on list charts so it
86:39 - has no arguments it's just
86:40 - straightforward so we can just access
86:43 - the list chart method from our service
86:46 - by saying this do chat service do list
86:50 - chart and then uh this returns a promise
86:53 - so I'm going to make make of then and
86:55 - then uh no intended I'm going to pass in
86:59 - an argument of response and then let's
87:01 - conso Lo the response and then let's
87:04 - undo the catch because uh of a scenario
87:07 - where we have an error so we can just
87:09 - give it an argument of error make use of
87:11 - the first arrow and then we can just
87:13 - allert error do message to help us undo
87:16 - the error now uh what I like to do is to
87:19 - call this unle charts within the effects
87:22 - so effects are available in angular 17
87:27 - they are one of the reactive Primitives
87:30 - in signals and they can only run within
87:32 - an injection context and such an
87:35 - injection context is includes the
87:37 - Constructor so the effect can only work
87:39 - within the Constructor so let's call the
87:42 - effect and then um we're going to pass
87:45 - in an anonymous Arrow function and then
87:49 - we can just do this dots the name of our
87:52 - method we're trying to log in the
87:54 - console which is
87:56 - unle chat um I think that's what we need
87:59 - to do we just need to import the effects
88:01 - and if we scroll above you can see
88:03 - effect is imported into the at angular
88:06 - call library over there so we can save
88:08 - everything we've done so far and see if
88:10 - we get the response on line 67 which
88:13 - should contain all the charts data from
88:15 - the database so quickly let's head to
88:17 - the browser and let's see if we get that
88:20 - response as you can see we get all the
88:22 - response from the database in an array
88:25 - uh we currently have five charts in an
88:26 - array in the data table and then we have
88:29 - this users object so if I go back to the
88:32 - chat table you can see we have five data
88:35 - currently imputed so we have access to
88:38 - those five data as well as the users who
88:40 - are sending those data so so currently
88:42 - I'm the only one sending the chats
88:44 - that's why my full name is currently
88:46 - having my name and then it's currently
88:48 - having my avatar URL as well as my ID if
88:51 - someone else logs in and sends a message
88:53 - is going to have different values over
88:56 - here so uh let's try to display these
88:59 - five responses within our chart user
89:02 - interface because currently what we have
89:03 - is just a bunch of static data so
89:06 - quickly let's head back to visual studio
89:08 - code and to do that we need to make use
89:11 - of signals to handle the data from the
89:14 - table so I don't want to make use of
89:15 - obser to handle this I want to make use
89:17 - of signal so to make it of signal we
89:19 - need to scroll up so I'm going to
89:20 - declare a variable called chart and it's
89:23 - going to be a assigned to a signal which
89:26 - has just been imported above as you can
89:28 - see we now have signal imported in
89:30 - angular core and it's going to be an
89:32 - empty array by default so um what I'm
89:35 - going to do is to open a parentheses and
89:37 - then pass in an empty array but in this
89:40 - scenario we need to create an interface
89:42 - that handles the response we are
89:44 - expecting from the uh the data from the
89:47 - superbas table so uh let's quickly
89:50 - create an interface So within the app
89:52 - directory I'm going to create the folder
89:54 - called interface and within this folder
89:57 - I'm going to call it chat Das
90:01 - response. TS So within this let's create
90:04 - our interface it's going to be modeled
90:07 - after our response so let's just say
90:09 - export interface and then it's going to
90:12 - be called I chart and it's going to be
90:14 - within this object so uh all the data we
90:17 - get from the database is going to be
90:20 - respon is going to be represented within
90:22 - our interface so quickly we're going to
90:24 - have the first one which is called
90:25 - created Arts so we're going to have
90:27 - created Arts it's going to be a type of
90:30 - string then the next one is going to be
90:32 - editable this is going to be a booing
90:35 - then we also have the ID which obviously
90:37 - has to be a type of string then we have
90:40 - the sender it's going to be a type of
90:41 - string as well and then we have the type
90:44 - of text which is our message so it's
90:46 - going to be a type of string and then we
90:48 - have the users which is an object on his
90:51 - own and it has three objects the Avatar
90:53 - URL the ID as well as the full name if
90:55 - you check the response you see it right
90:57 - here the Avatar URL the full name and
90:59 - the ID so let's have it within this
91:01 - object so I'm going to say Avatar _ URL
91:05 - which is going to be a type of string
91:07 - and then ID type of string and finally
91:10 - we have the full name full name it's
91:13 - going to be a type of string as well so
91:16 - our interface is created so we need to
91:17 - import it and assign it to the signal
91:20 - because signals can also take in types
91:22 - as well so uh let's assign it to this
91:24 - signal by saying um I charts which we
91:28 - need to import and with that uh it seems
91:31 - we have an error that says type never is
91:33 - not assignable to parameter of I chart
91:36 - and it's missing some properties which
91:39 - includes created that editable ID and
91:41 - the like so we're going to handle this
91:43 - error down below from our response or
91:46 - probably we can also set the I chart
91:49 - interface as an empty array so all I
91:51 - need to do is just to reference this
91:52 - empty array so with that error message
91:54 - from typescript uh disappears so right
91:58 - now let's assign our response to this
92:00 - chart signal so we can have access to
92:02 - all the signal Primitives so to do that
92:05 - down below within our function this.
92:08 - chart do set because it's a signal we
92:11 - have access to the set method the set
92:14 - method what it does basically it allows
92:16 - us to set a new value to our variable so
92:19 - whatever is coming from this response is
92:21 - going to be uh reference within the
92:23 - chart variable is going to be available
92:25 - throughout the application within the
92:26 - chart variable so we can just pass in
92:29 - rest so we are setting the response so
92:30 - we have an error that says argument of
92:33 - type null is not assignable to parameter
92:36 - of type I chart so we need to handle
92:38 - this error so one way of doing this is
92:40 - to assign a type to our argument from
92:42 - our response so I'm just going to say
92:45 - type of I chat and then uh it's going to
92:48 - be an empty array by default and we are
92:51 - still getting an error that says uh void
92:54 - is not assignable to type of parameter
92:56 - uh this is a type cryp errors that might
92:59 - get you confused but I think we can
93:00 - handle this by saying or null so you can
93:03 - see with that the error gets disappeared
93:05 - so but we need to create a condition
93:07 - that also handles the response by saying
93:10 - if the response is not equals to null if
93:14 - the response is not equals to null then
93:16 - we want to set the new we want to set
93:19 - data into the chart variable in our
93:21 - signal which we defined above right here
93:23 - so this is going to contain our response
93:25 - so if the response is not null let's
93:27 - pass the data into the chart variable
93:30 - from our signal else we can just console
93:33 - log that um no messages was found no
93:36 - messages found or you can probably
93:39 - display uh an alert or probably
93:42 - something to signify that to the users
93:44 - on the front end so uh this is one way
93:46 - to handle this and with that we can Loop
93:48 - through the UI by making use of this dot
93:51 - charts signal so to do that L Edge STS
93:54 - to the user interface and where we will
93:56 - need to Loop through it is somewhere
93:58 - around here uh to be precise that will
94:01 - be below the columns this this area
94:05 - where we have the different columns so
94:06 - I'm just going to extend this and then
94:09 - see where this ends and to do that we're
94:11 - going to make use of the newly
94:12 - introduced control Flows In angular
94:14 - which is the ATP block it allows us to
94:17 - Loop through data so I'm going to say at
94:18 - four and then I'm going to say MSG which
94:22 - represents message messages of these do
94:25 - charts you need to make use of your
94:26 - parentheses at the end and then I'm
94:29 - going to make use of the track keyword
94:31 - so that it allows um the signal to know
94:34 - if any item changed within the array so
94:36 - I'm going to make it of the track key
94:38 - word and I'm going to open a bracket so
94:40 - I'm going to wrap everything within the
94:41 - bracket where the div ends so this is
94:44 - one way to Loop through it using the
94:46 - newly introduced art four Block it's
94:48 - charts not charts so if this so message
94:52 - of this dots chart then the track then
94:55 - we can now say at empty that is if the
94:58 - result is empty the newly introduced
95:00 - control flows allows us to handle that
95:02 - as well so if the array is empty we can
95:04 - just display a div to the user interface
95:06 - that says no charts available so with
95:09 - that we are go to go so I'm going to
95:11 - save and let's see how the user
95:12 - interface currently looks as you can see
95:14 - it displays the static data five times
95:16 - so now we can just access the uh Keys
95:19 - within the array so the first one we're
95:21 - going to reference is going to be the
95:24 - image I think the Avatar URL so we can
95:27 - just make use of the Calli brace the
95:29 - double call Brace by saying MSG do um
95:33 - that will be the users do Avatar URL so
95:37 - I'm going to make use of optional chain
95:39 - for this to handle this particular
95:41 - scenarios so the next one is the time so
95:44 - let's handle the time so we'll make use
95:46 - of date pipes for this so I can just say
95:49 - uh within this div let's make use of the
95:52 - interpolation and then say MSG that is
95:55 - the message do created art and then we
95:58 - make it of a pipe and then we can now
96:00 - say date and make it of a colon this is
96:03 - a pipe in angular it's all available in
96:05 - the documentation so I'm not just coming
96:07 - up with this so you can check the
96:08 - documentation for dat pipes in angular
96:10 - then I'm going to make it of the month
96:12 - I'm going to reference the day as well
96:14 - as the year and also I want to show the
96:17 - time so let's say comma the hours then
96:21 - the minutes and then the time Zone
96:24 - probably is in the afternoon that is
96:25 - a.m. or p.m. so I want to reference that
96:27 - but we are having an error in these dat
96:29 - that says no pipe was found with the
96:32 - date with name date so we need to inject
96:34 - it into our import array we need to
96:36 - import date pipe so right after reactive
96:39 - forms I can just say date pipe and then
96:42 - inject it within or from at angular
96:45 - common so with that that error gets
96:47 - cleared so the next thing we need to
96:49 - display to the user is the full name of
96:52 - the user currently we have Sharon do but
96:55 - we want this to be dynamic so let's just
96:57 - say MSG do
97:00 - users. full name okay another thing we
97:03 - need to do is we need to interpolate the
97:06 - message itself so that's quite easy we
97:09 - can just say mg. text that's what we
97:11 - called it in database and I think that's
97:13 - all and I'm going to save let's save
97:15 - everything we've done so far and then
97:16 - let's check the browser I'm going to
97:18 - close the console so we can see
97:20 - everything properly as you can see we
97:22 - now have all the messages from the
97:25 - database so what I want to do now is
97:27 - every time we enter a new chat I want it
97:29 - to display immediately on the frontend
97:31 - because currently if I say let's just
97:33 - type in a random uh text if I click on
97:36 - send I need to refresh the page for us
97:39 - to see the newly uh typed in text which
97:42 - you can see right here but I want it to
97:44 - happen inar where anytime we click on
97:46 - send we see the response immediately and
97:47 - to do that all we need to do is just to
97:49 - call the unlist chart we need to call it
97:52 - within the submit function so we can
97:55 - just say this do unlist chart so I'm
97:59 - going to save and let's see how this
98:01 - works so let me just type in a text by
98:03 - saying here I am I'm going to click on
98:06 - send you can see it's showing
98:08 - immediately everything we type gets uh
98:10 - feted immediately from the database in a
98:13 - reactive format in real time so um uh
98:17 - with that we are able to fetch uh the
98:19 - data in real time from the database so
98:22 - we can now move on to the next
98:23 - implementation which is um ability to
98:26 - delete a chart so to create the delete
98:29 - functionality we are going to pass
98:31 - through three basic steps so the first
98:34 - step involves us trying to access the
98:37 - particular data we are trying to delete
98:40 - from the chart components that is within
98:42 - the chart components once the user
98:43 - select the message they want to delete
98:46 - from a dropdown that particular object
98:48 - is going to get passed down to the
98:50 - message service that is our chat service
98:53 - So within the chart service we're going
98:55 - to assign that particular object to a
98:57 - signal by making use of the set method
98:59 - in signal so once we set that particular
99:02 - object in the message service then we
99:04 - are going to access it within the delete
99:07 - component itself the delete component is
99:09 - going to have its own separate model so
99:12 - in that within that model we are going
99:14 - to that is where we are going to
99:16 - finalize the deleting of the message I
99:19 - hope this doesn't sound too complicated
99:21 - but I think once I start the
99:22 - implementation you're going to see how
99:24 - easy it works so let's head back to uh
99:27 - Visual Studio code So within Visual
99:29 - Studio code we need to create a new
99:31 - component and in fact this is going to
99:33 - be within a layout folder so let's
99:36 - generate a new component by saying NG
99:38 - generate components and then we're going
99:40 - to we say we're going to call the layout
99:43 - folder and then pass in the delete modal
99:47 - component so I'm going to press enter
99:49 - and while that is getting generated we
99:52 - can head back to the browser and xray to
99:54 - bootstrap 5 so in bootstrap five what
99:57 - I'm going to do is I'm going to guess
99:59 - two things the first one is the model
100:02 - and the second one is the drop down so
100:04 - let's get the user interface for the
100:06 - model so I'm going to search for model
100:08 - within bootstrap five so let's search
100:10 - for model and then let's scroll down um
100:13 - I think I'm going to go with this
100:14 - particular model so it has a text and
100:17 - then it has two buttons so one button is
100:19 - going to be yes another one is going to
100:20 - be no and then we have a text that says
100:22 - do you want to delete this particular
100:24 - message so let's grab this I'm going to
100:26 - grab everything here then copy it and
100:29 - then head straight to our chat component
100:31 - and it's going to be below the main tag
100:33 - so I'm just going to say modal so this
100:36 - is going to be within a comment and then
100:38 - I'm going to paste everything we copy it
100:40 - so now that we have the model the way we
100:43 - want to access this model is through a
100:46 - drop down so once a us a menu once they
100:48 - click on the menu a drop down appears
100:50 - once they click on the drop down a model
100:52 - appears so what I'm going to do next is
100:54 - to grab the drop down so I'm going to
100:56 - search for drop down um in bootstrap so
101:00 - we're going to see the different drop
101:02 - downs available for us um I think um we
101:05 - can go with this very first drop down we
101:08 - have over here so I'm going to grab
101:10 - everything within this div as well so
101:12 - where this is going to be is within the
101:15 - loop within the at four Loop so we can
101:17 - just put it probably after the div that
101:20 - contains the message of text so I'm
101:23 - going going to paste it in there then
101:25 - I'm going to save and let's uh clear out
101:28 - this drop- down button I'm going to put
101:32 - uh three dots that serves as a menu in
101:35 - place of the text so I'm going to save
101:37 - that another thing I'm going to do is I
101:39 - don't want this to show as a button so
101:41 - I'm going to remove the button class by
101:43 - removing BTN BTN secondary as well as
101:47 - the drop- down toggle class and I'm
101:50 - going to save let's see how it currently
101:51 - looks on the user interface so we need
101:53 - to compile the projects Once More by
101:56 - typing in NG ser and now the compilation
101:59 - is complete let's head back to the
102:00 - browser and we can see the menu doesn't
102:04 - look the way we want so we need to make
102:06 - uh some slight adjustments still so this
102:09 - button tag I'm going to change it to a
102:11 - span tag so I'm going to remove the
102:13 - button I'm going to type in Span and I
102:15 - think that should get rid of the
102:16 - weirdness of this menu cool so we have
102:20 - this so but I don't want it to be so
102:22 - close to the message box so I can just
102:24 - give it a class of margin top of three
102:27 - and then margin left of five so I'm
102:30 - going to save and let's see how this
102:32 - looks now I think it's much better so
102:35 - you can see when we click on the drop
102:37 - down we have the options uh displaying
102:40 - from the drop down but I just want only
102:42 - one option which is going to be the
102:44 - delete text so I'm going to get rid of
102:47 - this to and and just have delete right
102:50 - here and since I messed something up
102:52 - okay we didn't delete all the tags so
102:55 - now we can save and then let's see how
102:57 - the drop down Works once again so I'm
102:59 - going to click on the drop down you can
103:01 - see um I'm going to change the text to
103:04 - delete and not action so with that uh
103:08 - the next thing we want to do is once the
103:10 - drop down shows the delete we have right
103:13 - here is meant to trigger the model so
103:16 - what do I mean by this so what I'm going
103:17 - to do is I'm going to scroll down to
103:19 - where we have the model and I'm going to
103:21 - grab some attributes we have here so one
103:24 - of the attributes includes the datab BS
103:26 - tole as well as the datab BS Target so
103:29 - I'm going to cut that and then get rid
103:31 - of this button and then I'm going to
103:32 - paste it within the a tag in our drop
103:36 - down so let's paste it somewhere here
103:39 - and this should trigger the model so
103:41 - let's click on the menu again click on
103:42 - delete you can see the model now shows
103:44 - cool so I don't want the model to show
103:46 - Within These components we need some
103:48 - separation of concern so we need to cut
103:50 - it and then paste it within the modal
103:54 - component which is within the layout
103:56 - folder so let's go right to the HTML
103:59 - paste it in so this is where our model
104:01 - is going to leave um but we need to grab
104:04 - the selector so I'm going to grab this
104:05 - selector head back to our chart
104:07 - components and replace uh the UI with it
104:11 - selector and we have self closing tags
104:13 - available in angular now so let's make
104:15 - use of a self closing tag and then
104:17 - inject that component in our import
104:20 - array so I'm just going to say delete
104:22 - mod components and then save everything
104:24 - we've done so far so now our UI looks
104:27 - more modular and easy to understand so
104:30 - can just head back to the user interface
104:32 - and see if the model still appears with
104:34 - the change we've made and you can see
104:36 - the model still appears so I'm going to
104:38 - change the text within our delete Model
104:40 - instead of having these uh three dots we
104:42 - have here we can just replace it with a
104:44 - text that says are you really sure you
104:46 - want to delete this message so let's
104:48 - type that out are you really sure you
104:50 - want to delete this message if you
104:54 - really want to delete this message if
104:56 - you click on yes it's going to get
104:58 - deleted if you click on no the model
105:00 - gets closed so that is pretty much
105:03 - straightforward and from the
105:04 - presentation I showed uh before we begin
105:07 - this implementation we need to start the
105:10 - integration of the delete from the chart
105:11 - component TS file so what that means is
105:14 - we need to create a new function for our
105:16 - delete functionality to work that is
105:18 - anytime we select the particular text we
105:21 - want to delete we need to grab the
105:23 - object anytime we click on this drop
105:25 - down and click on delete we are grabbing
105:27 - the object we are trying to delete that
105:29 - is the chart we are trying to delete so
105:31 - uh to see that in action let's head back
105:33 - to this chart component TS file and
105:35 - within this file we can just say open
105:38 - drop down that is uh that's the drop
105:41 - down that shows the delete text so we're
105:44 - going to create a function this function
105:46 - will allow us to grab the object of the
105:48 - message we plan to delete so I can just
105:50 - say MSG and then give it a type of I
105:53 - chat then we can now say this dot okay
105:57 - we need to conso log it first to be sure
105:58 - so I'm just going to conso log MSG but
106:01 - for us to see the details in the console
106:04 - we need to call it in our HTML template
106:07 - so that's going to be within the span
106:10 - tag so within the span tag we can just
106:12 - have a click event and and then let's
106:15 - paste in our function and then save
106:17 - everything we've done so far we need to
106:18 - paste in the particular variable as well
106:21 - that is the argument so which is going
106:22 - to to be MSG that's why we are getting
106:24 - that error so we need to pass in MSG
106:27 - then we need to open the console to be
106:28 - sure we are getting the right object so
106:31 - the first one we're going to try is
106:33 - let's try this particular testt that
106:35 - says this is another text once I click
106:37 - on that you can see uh we get the
106:39 - particular object which is this is
106:41 - another text so if I try to grab another
106:43 - one probably this Latin text you can see
106:46 - we grab that so we can easily use the
106:48 - drop down to delete that particular
106:51 - message all we need to do is just to
106:52 - pass it down to our service which is
106:54 - going to be the next step so let's pass
106:56 - this data down to our service so let's
106:57 - head to our chart service and within the
107:00 - chart service we need to create the
107:02 - function that helps us to grab the
107:04 - selected object so I'm just going to
107:06 - call the method selected chart so let's
107:09 - just say selected chart and then it's
107:13 - going to have an argument of MSG and
107:15 - then I chart which is um the interface
107:19 - and then we can now create a signal
107:22 - above so the signal the signal is going
107:24 - to be called saved chart so what I need
107:26 - to do is just to say public because we
107:28 - want to access this particular signal in
107:31 - our model so we can just say saved chart
107:34 - is equals to Signal which is going to be
107:37 - an empty object by default so all we
107:40 - need to do is just to say this do Saed
107:43 - chart and then we need to pass in the
107:46 - MSG that is the message you are grabbing
107:49 - from the um chart component but we need
107:51 - to make use of the set method which I
107:53 - forgot so we need to set it uh to the
107:55 - latest object we are trying to grab so
107:58 - let's not forget that we are making use
107:59 - of set anytime you make use of signals
108:02 - you have access to this um uh Primitives
108:04 - so next up uh we need to head back to
108:07 - our CH component and reference this
108:09 - particular selected chart function So
108:12 - within the drop-down function all we
108:14 - need to do is just to reference the
108:17 - message service or that is the chat
108:19 - service by saying this your chat service
108:21 - dot select charts and then passing MSG
108:26 - so uh we are able to pass down the
108:28 - object from our chart service from our
108:31 - chart component rather down to our chart
108:34 - service and in the chart service it's
108:36 - now available globally in the angular
108:39 - project through the signal Cod save
108:42 - chart so we can always retrieve this in
108:44 - our delete modal components to see that
108:47 - in action let's head straight to the
108:49 - delete Model component so I'm going to
108:52 - save everything with done so far and
108:53 - then close some of the tabs because I
108:56 - think we have so many tabs currently
108:58 - open and it's going to cause some
108:59 - confusion so let's head straight to the
109:01 - delete Model and log the selected charts
109:04 - into the console to see what I'm talking
109:06 - about so all we need to do is just to
109:09 - create the instance of the chart service
109:11 - so let's just say private chatore
109:15 - service and we need to make use of the
109:16 - injector so we're going to say equals to
109:19 - inject which we need to import and then
109:21 - we reference the chart service so we now
109:23 - have an instance of the chart Service uh
109:26 - before we proceed let's just Define The
109:28 - Constructor and then log the particular
109:31 - object from our model delete Model into
109:34 - the console to be sure we have access to
109:35 - the uh data that was selected so I'm
109:37 - going to open this Constructor because
109:39 - we're going to make it of the effects to
109:40 - log this into the console and we know
109:42 - the effect can only work within an
109:44 - injection context so we need to import
109:46 - it uh within the Constructor and then
109:49 - open an anonymous Arrow function and
109:52 - then we can and just do console.log this
109:55 - do chat service do saved charts and then
109:59 - pass in the parenthesis so I'm going to
110:00 - save and then let's open up the drop
110:03 - down and see if we get to log the data
110:05 - in the delete component model so let's
110:09 - let's select one of the charts so I'm
110:11 - going to go with the last chart which is
110:13 - a bunch of random string and you can see
110:15 - in the delete Model component we have
110:17 - access to the right data we just
110:19 - selected you can see uh if we select
110:21 - another one you can see we have access
110:23 - to it in a delete component model so you
110:25 - can see we've been we've been able to
110:27 - use signal to manage state from one
110:31 - component to another component in an
110:33 - angular application I mean the code base
110:36 - is kind of um very simple to understand
110:39 - compared to observables where you have
110:41 - so many boiler plate code so um if you
110:44 - are new to signals this is one of the
110:45 - reasons why you might want to try out
110:47 - signal so let's continue with the
110:49 - integration so to proceed we need to
110:51 - create the delete service for our delete
110:55 - implementation and that can be done in
110:57 - our chart service so to do that we're
110:59 - going to create a very simple method so
111:02 - let's head to the Chart service and
111:04 - right above the selected charts you can
111:06 - just say a sync delete chat and all we
111:09 - need to delete a chart is an ID so and
111:12 - it's going to be a type of string so
111:14 - we're going to open the object and then
111:15 - we can create a variable by saying con
111:17 - data one thing you should know about
111:19 - super Bas is when you delete data you
111:21 - don't get any response so uh we don't
111:23 - need to handle anything um when it comes
111:26 - to deleting of data so you just get no
111:28 - response so we can just say cons data
111:30 - we're going to say await this do super
111:34 - base just like we've done previously do
111:36 - from our chart table and then we can do
111:40 - do delete and then it's going to take a
111:41 - parentheses and then we can say do EQ
111:44 - and then we're going to open a bracket
111:46 - and within this brackets we're going to
111:48 - reference the ID of the chart we are
111:49 - trying to delete and that's all we need
111:52 - to do and we can just return the data so
111:55 - I'm just going to make use of the return
111:57 - keyword and then return the data so this
111:59 - is the simple service function to delete
112:02 - uh to delete a particular chart so we
112:05 - can now integrate this within the delete
112:07 - Model since we have access to all the
112:09 - objects we can just reference the ID and
112:11 - delete the specific chart we want to
112:14 - delete so we need to create a function
112:16 - for that so that function is going to be
112:18 - called delete chart So within the delete
112:21 - chart function we need to extract the ID
112:24 - of the chart we're trying to delete so
112:25 - to to do that I'm going to create a
112:27 - variable called ID so I'm going to say
112:29 - const ID and let's try to access it
112:32 - through our signal by saying this do
112:35 - chart service do saved charts and then
112:39 - because it's a string we can just make
112:41 - use of as we can just make use of the
112:43 - type the as keyword in typescript by
112:45 - saying as and then open an object and
112:48 - then we can say ID of string and all we
112:52 - need to do is just wrap everything
112:54 - within a bracket a parentheses so I'm
112:56 - going to wrap this within a parentheses
112:58 - and I'm going to say do ID um this is
113:01 - pretty much Clear um probably I need to
113:04 - break this down a little bit what I'm
113:05 - trying to do is I'm trying to access the
113:07 - ID of the chat are trying to delete by
113:09 - making use of ID so in the results uh
113:13 - from our delete object once I click on a
113:16 - particular drop down you can see we have
113:18 - ID we are trying to get this ID so
113:21 - that's why we making use of ID right
113:23 - here this is what we need to pass an as
113:24 - an argument in the delete chart service
113:27 - so I hope that is pretty much clear so
113:30 - let's now reference it in fact let's
113:32 - console log the ID to be sure I know
113:34 - what I'm talking about so I'm just going
113:36 - to do console.log ID oh this is outside
113:39 - the function I'm going to cut this put
113:41 - this within the function and then um
113:43 - let's make use of the click event and La
113:45 - within our user interface uh this is the
113:49 - particular button we want to use to
113:50 - delete so I'm just going to make it a
113:52 - click event and la and then pasting the
113:54 - method then I'm going to save everything
113:56 - done so far so when I click on yes we
113:58 - should be able to see the ID in the
114:00 - console so let's do that click on delete
114:03 - and then I'm going to clear the console
114:05 - and I'm going to click on yes you can
114:06 - see we now have access to the ID so this
114:08 - is where we are going to call the delete
114:10 - chat service so let's head back to our
114:13 - TS file and then we can now say this do
114:17 - message service or rather chat service
114:20 - chore service do delete charts and then
114:24 - we pass in the ID which is a type of
114:26 - string and like usual it returns a
114:29 - promise and we need to make use of do
114:31 - then so I can just um make use of an
114:34 - Anon Anonymous function which has a fat
114:36 - arrow and then within this context we
114:39 - can just try to close the model or
114:42 - probably route the user to another page
114:44 - or something of sort but for now I'm
114:46 - going to leave that block empty and then
114:48 - I'm going to make it of dot catch and
114:50 - within the do catch it's going to have
114:52 - an argument of error make it of a fat
114:54 - Arrow then we can console log the error
114:57 - or probably alert the error do message
114:59 - depending on what you want to do can
115:01 - handle it however way you want so I'm
115:03 - going to save and let's try to see if we
115:06 - can delete a chart right now so I want
115:09 - us to try to delete this first charts we
115:11 - have here which is this is a text
115:12 - currently we have n charts so let's take
115:15 - note of that so I'm going to click on
115:17 - the drop down click on the modal and
115:19 - then I'm going to click on yes so on the
115:21 - network talk tab the result we have is
115:24 - 204 no content I told you previously
115:26 - that anytime you make use of the delete
115:29 - uh method in super base we usually get
115:32 - no response and you can see it from here
115:34 - we have no content and I believe this
115:36 - particular uh data has been deleted to
115:38 - confirm that let's head straight to the
115:40 - database and you can see that this is a
115:44 - text just got removed in real time so um
115:47 - for now what I want to happen is how I
115:50 - want to handle this is once we click on
115:52 - yes and it deletes happens we want to
115:54 - close the model immediately and then
115:56 - refresh the UI without reloading the
115:58 - entire page because currently to see
116:00 - this in action I need to refresh the
116:02 - entire page for us to see that that
116:04 - particular text has been deleted you can
116:06 - see it's no more there if I delete this
116:07 - second one I need to refresh the entire
116:10 - user interface which is not really good
116:12 - for a single app sing a single page
116:15 - application rather so um let's try to
116:18 - implement that and to do that we are
116:19 - going to make use of the router in
116:21 - angular so let's let's begin our
116:23 - implementation by calling the router
116:26 - object so what I'm going to do is to
116:28 - create a private variable called router
116:31 - and I'm going to say that to inject
116:34 - within the injection context I'm going
116:35 - to call router which we need to import
116:38 - and you can see we have router imported
116:39 - from at angular for/ router so um this
116:43 - is going to be done within the promise
116:45 - where we have a successful response so
116:49 - we can start this implementation by
116:51 - creating a variable which says current
116:53 - URL so we can just say let's current URL
116:57 - what I'm basically trying to do is just
116:58 - to get rid of the modal one and then
117:01 - ensure we have uh and ensure that the
117:04 - user have the latest data from the
117:06 - database in super base without
117:08 - refreshing or reloading the page so
117:10 - that's what we're trying to do here so I
117:12 - can now say let's current URL I typed
117:15 - ulr instead of URL sorry about that then
117:18 - we can now say this do router Dot URL so
117:23 - this do router. URL we can now say this.
117:28 - router. navigate by URL and this is
117:31 - going to take in two arguments the first
117:33 - one is going to be empty for Slash and
117:36 - then we're going to pass in an object
117:38 - that says skip local skip location
117:41 - change I'm going we're going to set it
117:42 - to true so I'm going to type in skip
117:44 - location change this going to be set as
117:47 - true so with that returns a promise we
117:49 - need to change that Promise by making
117:51 - use of the keyword and it's going to be
117:53 - an empty or an anonymous function and
117:57 - within that context we can now say this
117:59 - dot router. navigate and then we want to
118:04 - navigate to the current URL without
118:06 - reloading the entire page so because if
118:09 - we reload the entire page it defeats the
118:11 - purpose of this being a simple page
118:14 - application but before we save and test
118:16 - it out I also want to close the model
118:19 - when the response is successful as well
118:21 - so to do that we need to make use of
118:23 - attribute binding and we're going to
118:25 - make use of the signal API to handle
118:28 - this so back in the delete Model we have
118:31 - an attribute called data- bs- dismiss
118:34 - this is the attribute that helps us to
118:36 - dismiss the model so I'm going to grab
118:39 - this particular attribute and then I'm
118:41 - going to bind to it in anytime we click
118:43 - on yes because when you click on no it
118:45 - dismisses the model automatically but
118:47 - when we click on yes there's no way we
118:48 - are handling uh the closing of the model
118:51 - so we need to make use of attribute
118:52 - binding to close the model so I'm going
118:54 - to make use of the square bracket and
118:56 - then I'm going to say at which is a
118:59 - reference for the attribute binding and
119:01 - I'm going to say data DBS do dismiss
119:04 - which helps us to dismiss the model so
119:06 - I'm going to set it to a condition but
119:08 - let's define the variable for that
119:11 - condition so right into our TS file we
119:14 - can create a variable that says dismiss
119:17 - this is going to be a signal I'm going
119:18 - to say equals to signal I'm not sure we
119:20 - have signal imported into this project
119:22 - so we need to import signal and then by
119:24 - default it's going to be false because
119:25 - it's a bullying if the user clicks on
119:29 - the delete button it opens the mod out
119:31 - but when they click on yes and the
119:32 - request is successful we set it to true
119:35 - so that's what we're trying to do so by
119:37 - default it's false then we're going to
119:39 - access it by saying this do dismiss do
119:43 - set and we're going to set it to True
119:45 - any time we click on yes and our and our
119:48 - request is successful so we can now
119:50 - Implement our condition in the HTML file
119:53 - and to do that all we need to do is to
119:55 - say if not this do dismiss don't forget
119:59 - to make use of your parentheses is
120:01 - equals to true we want it we want it to
120:03 - return the modal class because remember
120:07 - in the data bs- dismiss it's by default
120:11 - calling this particular model uh class
120:13 - so we want to conditionally render the
120:15 - model class if the user clicks on yes
120:18 - and the request is successful um we want
120:22 - the modal to show else we passing null
120:26 - okay this should be outside the okay we
120:28 - didn't close this properly so this
120:30 - should be closed here and the model
120:32 - should have its own quotes So I think um
120:34 - we now got it properly so um I'm going
120:37 - to save everything we've done so far and
120:40 - let's try to delete a model or a
120:43 - particular message rather so let's
120:45 - delete the last message this is a form
120:48 - of gibri so let's delete it away I'm
120:50 - going to click on delete I'm going to
120:51 - select no first you can see the mod gets
120:54 - removed but now let's click on delete
120:56 - again and then click on yes you can see
120:58 - that message gets removed from the user
121:00 - interface let's delete another message
121:02 - so the model gets closed and the message
121:05 - gets delet deleted so I'm going to
121:07 - delete the messages that don't really
121:08 - make sense so you can see finally let's
121:11 - delete this lating message I'm going to
121:13 - click on delete click on yes the model
121:15 - gets closed and then the URL uh only
121:18 - programmatically reloads this section of
121:20 - the user inter interace it doesn't
121:23 - reload the entire page reloading the
121:24 - entire page includes the the browser
121:26 - setting the entire state of the
121:28 - application to the way it is um by
121:32 - default which defeats the purpose of
121:34 - making use of a single page application
121:37 - so I think we've been able to integrate
121:38 - all the functionality of this chart
121:41 - application so the final thing I would
121:43 - like to do is to host this application
121:46 - on a platform called vual so to begin
121:49 - the hosting implementation we need to go
121:52 - to the Vel website so right on the
121:55 - Google search I'm going to search for
121:56 - Vel and I'm going to try to log in into
121:59 - Vel to log into vessel you need a GitHub
122:03 - account or probably one of the other git
122:07 - options version control options like um
122:10 - gitlab and bit bucket so I have a GitHub
122:13 - account where I already have the app
122:14 - hosted already as you can see it it's
122:17 - available in a repository called NG
122:19 - charts DV and then I'm going to continue
122:22 - to get up and I'm going to get
122:24 - authenticated into the versal dashboard
122:27 - now that the authentication is complete
122:30 - to create a new project inside of vessel
122:34 - all you need to do is to click on the
122:36 - add new drop down then select project so
122:39 - once you select project right in your on
122:42 - the left hand side of the dashboard
122:44 - you're going to see different projects
122:46 - currently hosted on GitHub so all you
122:48 - need to do is to select the project you
122:49 - want to host for me I'm going to select
122:52 - the NG chart DV project so I'm going to
122:54 - click on import and then we are going to
122:57 - be presented with the configuration for
122:59 - the hosting of the project so the first
123:02 - thing we need to fill up is the project
123:03 - name I'm going to leave it at is
123:06 - currently is that is with the name ng-
123:09 - charts DV then uh the framework is
123:13 - angular obviously then the root the the
123:16 - root directory is for/ I'm going to
123:18 - leave that the way it is then I'm going
123:20 - to extend the environment variables now
123:22 - you know in our environment variables we
123:24 - have some configurations so I'm going to
123:26 - grab them the first one is the super
123:28 - base URL so let's grab the super base
123:31 - URL and then the and then the value
123:34 - inside of this super base URL I'm going
123:36 - to paste it here and I'm going to click
123:38 - on ADD then the second key we need is
123:40 - the super base key so I'm just going to
123:42 - grab that as well and then I'm going to
123:45 - grab token for the super base key and I
123:48 - click on ADD and those are the two keys
123:49 - we need to add before I click on deploy
123:51 - you can just take a look at the build
123:53 - and output settings by default super
123:56 - base provide us with these two command
123:58 - for angular Eng build is the command
124:00 - that helps us to build the project and
124:02 - the output directory is always located
124:04 - in this and uh the installer would make
124:08 - use of any of these uh install commands
124:11 - depending on how your project was set up
124:13 - so if you want to override any of this
124:15 - configuration all you need to do is just
124:17 - to click on the overr right then you'll
124:18 - be able to edit these fields they are
124:20 - disabled by default so the way it is is
124:24 - just how we want it so I'm not going to
124:26 - override any of the settings all I need
124:27 - to do is just to click on deploy and the
124:29 - deployment configuration begins so we
124:33 - need to wait for some minutes before the
124:35 - configuration is complete now as you can
124:38 - see the deployment is complete and we
124:41 - have a congratulations page currently
124:44 - displaying on the browser and you can
124:46 - see the landing page currently showing
124:48 - which says sign up using Google so what
124:50 - I'm going to do is to click on continue
124:52 - to dashboard and then we can see the
124:54 - dashboard of our hosted project so what
124:56 - we can do is just to click on the URL
124:59 - the deployed URL which we have here NG
125:01 - ch- v.v. apppp let's click on that and
125:05 - you can see our project is now hosted
125:07 - live on the browser so let's try and
125:10 - test this out before we proceed I would
125:12 - like to open the console in case we
125:13 - might have any form of error while
125:15 - trying to access our chat dashboard so
125:18 - quickly let's click on sign up using
125:20 - Google and then I'm I'm going to select
125:22 - one of the existing projects I used in
125:24 - the local version of projects and we are
125:28 - presented with an error message the
125:30 - reason for this is our authentication
125:33 - was created making use of super base so
125:35 - we need to configure the super base URL
125:37 - because while creating the project we
125:39 - made use of the project the super base
125:41 - configuration relied on Local Host so
125:43 - it's still trying to access the Local H
125:46 - so we need to configure the URL to do
125:48 - that let's head straight to super base
125:50 - and within super base we need to headed
125:52 - straight to authentication and within
125:54 - authentication let's select URL
125:57 - configuration so before we proceed I
125:59 - would like to grab the URL for this
126:02 - project and to do that all I need to do
126:04 - is just copy this URL right here and
126:07 - head back to the super Bas dashboard and
126:09 - I'm going to click on ADD URL so I'm
126:11 - going to paste in the URL and click on
126:13 - ADD URL now we've been able to add the
126:16 - URL for our project another URL I I need
126:19 - to add is the URL that handles the
126:21 - authentication while you are trying to
126:23 - log into the application so what do I
126:25 - mean by this once I click on ADD URL I'm
126:27 - going to past the URL but this time it's
126:29 - going to be for/ off for/ callback so
126:32 - this is the call callback URL for
126:35 - authentication and then finally right
126:38 - above where we have site URL as Local
126:41 - Host 3000 I'm going to paste in our URL
126:44 - there as well and then click on Save and
126:48 - with that I think we are good to go so
126:50 - um I'm going to to go back and then
126:53 - reload the page so let's attempt our
126:56 - authentication once more so I'm going to
126:58 - click on sign up using Google button and
127:00 - then select my account and this time
127:03 - around you see we are authenticated
127:06 - right into the dashboard and we have
127:08 - access to all our charts as you can see
127:11 - I have my details showing my name the
127:14 - time of the charts that was sent the
127:16 - image as well as the chat as well uh
127:18 - let's also test out the delete
127:20 - functionality let's see if this gets
127:21 - deleted as you can see it gets deleted
127:23 - and let's send a message testing live
127:26 - and then let's click on send you can see
127:28 - that gets sent as well and save to the
127:31 - dashboard we can also log out so let's
127:33 - try and log out from this project you
127:35 - can see the log out functionality Works
127:37 - let's try and sign up using another user
127:39 - a brand new user to see how the
127:41 - dashboard uh looks like so I'm going to
127:43 - select one of my account right here
127:46 - without an image I'm going to select
127:48 - continue because this is a brand new
127:50 - account and then we get navigated into
127:53 - the dashboard so let's try and send a
127:55 - message with this account uh I am a new
127:58 - user and then click on send you can see
128:01 - the account name the account image as
128:04 - and the time as at when the message was
128:06 - sent so you can see the live version of
128:09 - the project still has all the
128:12 - functionalities working the way they
128:14 - should so that's it for this project I
128:16 - believe you've been able to learn a lot
128:18 - if you are new to the channel make sure
128:19 - you like And subscribe for more more
128:22 - educational content and with that thank
128:24 - you very much for watching and I'll see
128:25 - you again in the next one

Cleaned transcript:

learn how to use angular and superbase to create a realtime chat application you'll learn about things such as realtime data fetching with superbase superbase triggers and functions how to use the Google oaf service in angular and more deji from the code angle develop this course hello everyone welcome to today's video tutorial in today's video we are going to make use of angular 17 as well as super Bas to create a real time chart application now let's take a quick look at the demo of today's project as you can see on the page we have a button that says sign up using Google what this button does actually is it makes use of the authentication Service in super base as well as Google what 2.0 service to create the authentication currently we have no users on the super based dashboard as you can see another thing you should take note of is we have two tables in in our super base setup the first one is the users table and the second one is the chart table as you can see both of these tables are empty what this user tables does is basically anytime a new user signs into the project not only do they get saved in the authentication page we see right here but they also get saved in the users table so we make use of this by making use of super based functions and super based triggers we'll get get to look into that as the tutorial proceeds but for now let's take a sample of how the integration for the authentication works so I'm going to head back to the angular project I'm going to click on the sign up using Google button and then a new page pops up this page asks us to choose an account we want to sign up into the chat dashboard so I'm going to select the first email on the browser here and then as you can see I get authorized and signed into the chat dashboard but before I show how this chart dashboard works I would like to head back to the super base dashboard and as you can see on the user table we have some details showing which includes the user's ID the user's full name as well as the user's Avatar URL we are able to retrieve all this data from the newly signed in user and then save it into our user table with that we'll be able to use it on the front end of our application anytime the user sends a message what do I mean by this if I head back to the dashboard and I type in a message this is a test and I click on send you can see we have the username which is D adoga which you can see right here the users's Avatar image which you can see right here and then the users's ID which we do not need to render into the user interface but we also have access to the dates and as well as the time the user sends the message which you can see here another feature of this application is anytime we send the message in the chat table it gets f in real time without needing to refresh the page in our angular application let's try to send another message to see how this works so back in the chat application let's send a new message that say this is a test two and then click on send as you can see the message gets displayed in real time in our angular project as well as on the super based dashboard which you can see right here so this chart table as a field of ID created at text editable as well as the same ID so we display some of these details on the page another feature of this project is as a user you are able to delete your message so if you click on this menu right here and you click on this delete drop down a modal pops up in front of you and you have presented with two prompts to proceed with deletion of your message or to change your mind if you do no longer if you do no longer want to delete your message so let's proceed to delete this message so I'm going to click on yes and then the message gets deleted while the page gets programmatically refreshed without reloading the entire angular application we make use of this by making use of the router feature in angular 17 also a user can get to log out from this charts dashboard by simply clicking on the logout button and then and then it gets navigated back to the login page another thing I'm going to do is I'm going to sign up again using a brand new user let's see if the details is going to be different from our previous user so let me click on another account and then send a message using this account that says this is a new test so I'm going to click on send and as you can see this user has a different Avatar image as well as a different name and then this user can delete their own message if they try to delete another person's message it's not going to work a user can only delete their own message if you try to do this I click on the menu and I click on delete you can see the message does not get deleted but the user can proceed to delete their own message as you can see right there so that's all for this tutorial but before we proceed I would like to highlight some very important Concepts you stand to gain if you decide to follow along with this project so in this tutorial you're going to learn how to authenticate an angular application by making use of super base and Google's oart 2.0 you're also going to learn how to integrate functional rout guard for Route protection that is if a user is not currently logged in they cannot access the dashboard the route guard is going to prevent them and log them back to the loging screen so um we're going to make use of the newly integrated functional rout guard in angular 17 to make use of this feature another thing you're going to learn is how to work with the latest control Flows In angular that is we have the new control flows which include the at if and at else block me angular 7 contain the syntax to this um directives were changed and updated another thing you're going to learn is how to manage States using signals signals was newly introduced in angular 16 and fully functional in angular 17 so in this tutorial we going to learn how to manage the data in the application by making use of signals so if you are learning angular and you've not touched signal before this tutorial is a good place to start to learn how to make use of signals Al so you learn how to create tables in super base super base makes use of progress ql so in this tutorial I'm going to show you how to integrate the tables by making use of some of the uh keywords required to create tables in super base another thing you're going to learn is how to set up security policies for created tables so as you are setting up your table in super base you have options of creating security policies that is to determine who has access to what in the database another thing I'm going to learn is how to create super based functions and Trigger events and finally you learn how to use angular to delete list and insert data into the super base table in real time so you have a lot to learn in this tutorial and I think with that we can get started with this project to get started with this project we are going to head straight to GitHub and in GitHub we're going to clone a boiler plate template for the UI Design This the link to this particular GitHub repo is going to be in the description box on YouTube to help you get started with this project to do that all we need to do is to click on this code button it brings out a drop down and then we're going to click on this copy to clipboard icon now all we need to do is to head straight to the terminal where you want to create your project and then run the command git clone and then the URL you copied from GitHub so what that does is it's going to clone the project into your project directory so once that is done you need to CD into the project directory which is ng chart D UI and then click on enter but before we proceed we need to have access to all the dev dependencies and to do that we need to run mpm install so quickly I'm going to run mpm install and then it's going to download all the packages in our Dev dependencies within our packet. Json file now that the installation is complete we can now open the project directly in our Visual Studio code editor so I'm going to run code and then dots and press enter so it's going to open the project up in Visual Studio code I'm going to increase the fonts it's more clear for you to see the code so the next step is to head straight to the SRC directory this is where angular has all the required folders needed to run the angular application so I'm going to extend it further by heading straight to the app directory and within the app directory we have a a Pages directory where we have two components we have the chat component as well as the login component so what I'm going to do is to open up the chart component and you can see the user interface code so all the code here are all static code and we have a CSS to do a bit of styling so there's nothing strange here this is just the user interface for the project the reason why I'm not creating the user interface from scratch is so that we can focus fully on the integration of our chart application instead of focusing on the user interface now another thing you should take note of is in the index.html we have the bootstrap 5 CDN available for us as you can see this is the CDN link that make reference to bootstrap 5 as well as the script for the bootstrap 5 CDN what this does is it allows us to have access to the classes some of the classes you can see here um in the user interface same thing was applied to the login components within the login components we have the HTML code as well as the CSS code to help us integrate the design which I think think is very um easy to understand so there's no need for me to go into details with that so to test how the UI currently looks I'm going to scroll down and head straight to the app components. HTML file and within this file you can see we have the app plugin and the app chat currently imported or referenced here and one feature you should know is in previous versions of angular you don't have self closing tags so Ang recently created this um update so where you can make it of close closing T self closing tax which I think is a very good development from the angular team also another thing you should take note of is in the app component.ts file because we are dealing with Standalone component which is also one of the new features in angular we need to import each component with reference in our templates for instance we're trying to reference the app plugin and the app chat that means we need to import them within the import array which we have right here now that that is clarified what I'm going to try to do is to compile the code and then let's see how it's displays on the browser so to do that I'm going to make use of the traditional NG serve command so I'm going to press enter and then the compilation begins as you can see our compilation is successful and and in angular 17 some analysis are available in the terminal that shows the sizes of your angular application the initial load um size and the time it requires to complete complete the compilation so this is the Local Host URL which is Local Host for 200 so I'm going to head to that route in the browser so to do that all I need to do is to type in Local Host 4200 and as you can see we have this button that does nothing currently because we just have a UI so if I click on this button nothing happens so we can see the login button or the login page is uh just the user interface currently available now let's see how the chart component looks to do that all I need to do is just to comment out the login tag and then uncomment the chat tag so all I need to do is save and then once the project compiles we exray to the browser as you can see we have the chart user interface so nothing happens I can click on send type in click on log out nothing is happening so we need to configure everything from scratch and then so we need to configure everything from scratch so I'm going to show you how to do it step by step with no step skipped so the next thing I want us to do is to deal with super Bas so to do that I'm going to run mpm install for super base so once again I'm going to stop the terminal and then I'm going to call mpm install at Super Bas 4/ super Bas DJs so this is the command for you to install super base in your project so we're going to wait for the installation to be complete and once that is done we can move to the next step as you can see the installation is complete and super base has been installed into this project to confirm I'm going to head straight to the package.json file as you can see this m means modified the that is a change has occurred in this file and when we scroll down a little bit we can see we have at superbase for/ superbas DJs and it shows the version which is currently version 242.4 that is the current version as far as this tutorial is concerned in the future you might be following along this tutorial and you might be seeing a new version probably version three or version 4 or version 5 depending on the year you decide to follow or go through this tutorial so um some slight changes might have occurred during that time but for now with version 242.4 which is the latest version we can now continue our integration so the next thing I want to do before we proceed is to generate our environment variable file um to do that we need to run the command NG generate environment so what this folder does basically is to help us create a place where we can store our API key any API key we get from super base this is the place to do it so if I go back to the project you can see we have this environment folder and there's environment do development for when you want to save the API key currently in the development mode and if you want to go live you can make use of the environment. Cs file so depending on what you want to do but for this project um since we are still in development mode the API key is going to be configured in the development file environments. development file so with the next with that we can move on to the next step which is to look at the authentication Service in super base so let's head straight to super base so now that we are inside of the super Bas dashboard and I'm signed into my accounts if you don't have a superbas account all you need to do is to go to superb.com and then use your GitHub account to authenticate yourself into the super base dashboard now you can see I currently have two projects called NG gallery and Ng super I think I've used this project in the past to create uh angular tutorials but for the sake of this tutorial I want to create everything from scratch so I won't use any of these predefined projects in super base what I'm going to do is to create a new project so within this organization I'm going to click on the new project button and then choose the organization which I currently have which is the suar 10 or so once I click on that we have presented with a new form so we need to fill the form so the project name is going to be called NG chat and then the password I'm going to generate the password dynamically by making use of a browser extension called bit Wen so I'm going to click on generate password and I'm going to type in the password and super base considers the password as strong and then I'm going to select a region um for best results like that is for in order that is in order to reduce latency you you need to select a server that is closest to your location so for me um I think I'm going to go with an European location which is preselected for me I'm going to go with um frankfor so as you can see you have this text here that says select the region closest to your users for best performance so that's a very important criteria so I'm going to click on create new project so the project is going to get configured for us and with that we can now create our our authentication as you can see the setting of of the project is now complete and we get presented with a welcome to your new project uh message and the project status is showing this um yellow icon right here so but what we need to do actually is just to over over the sidebar we have right here and Edge straight to authentication because we want to authenticate our project and once you in the authentication tab all you need to do is to click on providers and under providers you have so many providers I think in this YouTube channel I've gone over so many of these providers and today I'm going to try a new one which is Google so I'm going to click on Google and I'm going to enable signing with Google so the signing with Google requires two input fields to be filled up that is the client ID for the art Service as well as the client secret for the oart service so we need to get these two requirements from a platform called Google Cloud platform so if you are not familiar with Google Cloud platform if you have a Google account you can always create a new project in the Google Cloud platform and then derive the client ID as well as the client secret which is what we are going to do next so you don't have to worry about it I'm going to show you how to do it in a simple step so let's head to gcp and see how we can get our client ID as well as our client secret so inside of gcp as you can see I already signed in and if you're not signed in once you go to console. cloud. google.com you're going to have a page where you can log in using your Google account once you sign in you'll be required to create a project for me I have some projects currently available as you can see I have about seven or so projects but for the sake of this tutorial I'm going to start everything from scratch so I'm going to create a new project in gcp so that you can follow along and see how to get the client ID as well as a client's secret so let's click on new project and then we get presented with a new field that says project name as well as the project organization so the project name I'm going to call NG charts and then I currently don't have any organization I can select or if you have an organization you can always browse through the organization and then select them but for me I don't have any organization so all I need to do is just is just to click on create as you can see the project is getting created for us through this loading icon so it's going to take probably before I finish speaking the project has just been created so we need to select the project because the current project selected called angle we need to select NG chart so to do that we click on this drop down right there and then click on NG chart so once NG chart is selected we can now proceed and to proceed we need to add to apis and services you can see it's here but another place where you can locate the API and services in case it's not showing in this quick access uh section of the browser I'm going to close this message you can click on this menu icon this navigation menu icon and then it's going to extend the sideb and as you can see you have API services so under the API Services what you need to do is to click on credentials so I'm going to click on credentials and it's going to take us to the credentials page under the credentials page we need to create credentials and to do that we need to click on this create credentials button above so I'm going to click on that and what I'm going to select is the art Cent ID which is what we need in our super base dashboard so I'm going to click on that and it's going to take us to the page and within the page there's a requirement for you to create a client ID you must first configure your consent screen so for us we currently have a brand new project and we've never configured a consent screen before so we need to do that for us to have access to client ID so all I need to do is to click on this configure consent screen so this screen is going to load out a new page and we have two options that is for the user types we have the internal and the external so the internal is just a able for users within your organization no need to submit your app for verification while for external users uh you need to submit your app for testing mode and things like that but for us we are just working on a educational content so we're going to select um internal radio button so so we have a warning button which doesn't allow me to click on the internal radio button because it says you are not a Google workspace user all right fine I'm not a Google workspace user so let's just go with with the external anyways and then click on create so you can see we have some forms we need to fill so let's start from the beginning the app name so the app name for the consent screen I'm going to stay consistent and go with NG chat and then support email I'm going to select my email the code angle gmail.com for the logo I'm just going to leave that blank for now um next up it's asking for the application homage that is the link to the project homepage this is going to be in Local Host uh because it's a we are still trying to create the app in development so we only have The Local Host URL so I'm just going to paste in uh Local Host 4200 within the application homepage which is our current homepage um provide users with a link to your public policy um I don't have a public policy terms of service we don't have uh links for that so uh we're going to scroll down and then developer contacts email address uh it's also the code angle so I'm just going to enter the code angle at gmail.com and then I can click on Save and continue then under the Scopes we don't have any scope I'm going to click on Save and continue and then for the test users currently I don't have any users I want to add but let's click on this add users and see okay you can add as much as 100 users to test your application but for this application this is mainly for educational content so we don't need to add any test so I'm going to click on Save and continue and finally it shows us a summary of all the forms we've filled and then uh if we want to make any edit we can always go back but I think we we we're good to go so I'm going to click on back to dashboard now that we are back to dashboard I'm going to head back to the credentials we have now as you can see we've Now set up our or consent screen so I'm going to head back to credentials and under credentials I'm going to click on create credentials once more and then the all client ID which is for the second time so now you see we get presented with a new form instead of uh the notification being that we should create a content screen we've created our consent screen now it's asking us for application type so let's click on the drop down um our application type is actually a web application it isn't a Android app or a Google Chrome extension so I'm going to select we web application and like I said I stay consistent with the name and I'm going to call it ngat once again so with that we can now click on create to create our client what id so it says notes it takes it may take 5 minutes to a few hours for settings to take effect for the sake of god let's hope this doesn't take more than 5 minutes all right I'm going to click on the create button and as you can see we have our client ID as well as our client secret created for us and then we can download it as Jason and we can also see that the status is St as enabled and luckily for us um the client ID was created in less than 10 seconds now all we need to do is just to copy these values into our superbas dashboard so I'm going to start with the client ID so I'm going to grab the client ID Ed stra to super base paste it within the super Bas dashboard and then head back to the gcp click on the client Secrets uh and then paste it within the client secret what and then back in the what back in the gcp I'm going to click on okay so there's this um condition here that says call back URL for what I think we need to uh include this in our Google Cloud platform so that it can Al always reference this um super base application so I'm going to copy it and I think we forgot to set it up while we were trying to create our credential so to do that I'm going to edit our NG chart uh what and I'm going to add the redirect URI which is here so under the redirect URI I'm going to paste it uh I'm going to paste in what was given to us in super base you can see this is the Callback when using the um signing with Google or web so it's our callback URL we need to provide it under the authorized redirect URL so I think we are good to go with that we can now click on Save and I think that's what we need to do Under the Google Cloud platform now before we round up this portion of the tutorial do not forget to click on save for our enable signing with Google to be completed now now that it's successfully saved we can now head back to our Visual Studio code to integrate our authentication Service to do that what I like to do first is to configure the angular router so I'm going to scroll down to app. r. CS file and within this file I'm going to close the rest of the open tabs which we don't need So within the app. routes. TS file you can see we have a route array and within this route array we're to create the route object now this is going to be a functional route which is the latest syntax in angular 17 so let's open the first object and within the first object we're going to set the parts and the part to this is going to be charts which is our chart dashboard and then we can now click we can now make use of the load components to import the components for this part so I'm going to type in load component and we have a parentheses a f arrow and then we're going to call import and within the parentheses we're going to reference the import Page by doing for/ Pages for/ chat for/ chat. components and then because it returns a promise we're going to make use of do then and then passing an argument of coom and then the coom represents the component so I'm going to say components dot we're going to call the chart component so I'm going to say chart component so that's first all we need to do to create the first route object for the chart component so I'm going to duplicate this so the second component which is the last component we have is the login component so all I need to do is just to type in login I didn't spell login correctly and once I type in login I can just replace chat with login and then the component with login component so that's what we need to do so in case the user wants wants to pass in an empty part we can handle that as well so I'm going to do at this and all I need to do is just to remove the login part which we have right there so I'm going to save so anytime the user enters it doesn't enter a for slash that is if they enter a empty if they enter a empty part they get navigated to the login component so with that we can now head straight to the integration of our login and logout function so quickly we need to generate a service to do that so I'm going to head straight to the terminal and and then I'm going to run the command NG generate service the s represents service so under the service I'm going to generate the service within a Services folder and I'm going to do for/ this is where our or service is going to liveing within a Services folder as you can see the old service folder has been generated for us so let's head back to the project and then let's locate o service which is right here the first thing I want to do is to create an instance of the super Bas client to do that we need to configure the super base URL as well as the super base key within our environment variable so we need to head back to the super base dashboard and then head straight to project settings and within the project settings click on API which is under configuration and then we need to grab the super Bas URL so I think we can find the url somewhere here at the top of the page as you can see project URL so I'm going to grab the project URL Edge straight to the project and within the environment. development. TS file I'm going to set production to false and then I'm going to call super base URL I'm going to set that to the super base URL we copy just now from super base and then the second one is going to be the super base key so all we need to do is just to say super super base key and then we need to grab the key as well so within the dashboard so the key we have two types of key we have the non public key and the service Ro secret so for the sake of uh this project because we we have we are going to have Ro level security enabled for our tables so this is the right key for us so I'm going to grab that and then paste it within the super base key object so I'm going to save and then we can now use this super base object within our all service while creating the super base instance so quickly within the Constructor in fact before we do it with within the Constructor I'm going to create a variable called super base and inject the super base client into it so what I mean is we're going to type in private super base we make it of private because this this variable is only in there within this file so super base and then you can just give it a type of super base client which we need to inject and you can see it's injected right there at the top and it gives an error that says super base is declared but it value is never read and also property super based as no initializer so to get rid of this you can either make use of an exclamation mark or a question mark any of these two works but I'm going to use the exclamation mark That's the convention I am comfortable with so we can now ex straight to the Constructor to configure our super base client so to do that I'm going to say this do superbase is equals to create client which we also need to import as you can see above we have the C client imported I'm going to open a parenes c and within the parentheses we need to configure our environment super base URL and our environment super base key so to do that I'm going to do environment which we need to import as well so we have imported environment from development file so I'm going to say environment dot so it gives us the option of the super base key and the super Bas URL but the first one we need is the super based URL so I'm going to call that and then finally we can now call the environment do super base key so that's all we need to do to configure the super base client we can now make use of this instance called super base anywhere within our project to access the various methods available for us to configure our logged in to enable us also to sign out from the application so the first thing I want to do is to make use of the super base on all states changed so to know the meaning of the on all states change in super base I'm going to head to the browser and type in on or state change in super base as you can see this method allows to listen to All Events I'm going to open up this particular link to get more insight on what it means as can see it enables us to listen to all events that is authentication in events so that is you can see the highlights below it allows us to subscribe to important event occurring on the user session but one important thing about this particular event is it emits three events the first one is the initial session the signed in session and the signed out session so what it does basically is it allows us to track the current state of the user that is if the user is either signed in or signed out so we need to always know this to determine how we are going to render the user sessions in our project so I'm going to head back to the browser and let you see what I mean so within a Constructor we can just say this do superbase do do on state change which we can see right here and then it's going to take a parentheses and then it's going to take in two two arguments the first one is called event and the second one is called session so I'm going to make it of a f arrow and then open a bracket and what I'm going to do next is to console log each of these arguments so the first one is the event I'm going to type in event and then under the second console log I'm going to type in session and this session so to see this in action what I'm going to do is to save I think we should be able to get the instance of this event once to save so I'm going to save and then type in NG ser and then let's see if we get anything console logged in the browser quickly we head back to the browser and then I'm going to open up the inspect button and then head straight to the console now as you can see we don't get to see anything within the console now the reason for this is because this particular service is not being called by any of our components but once we reference this service in any of our components that is our login component this is where we need to make use of the authentication Service we're going to see this console loged events in the browser so what I'm going to do is to create the sign in with Google what service so below the Constructor I'm going to say a sync and then I'm going to call it sign sign in with Google and it doesn't take in any argument so I'm just going to open the bracket and within the bracket we're going to await this do superbas do dot then we can see the various methods available to us what we need to do is to sign in with or so I'm going to say sign in with what and the sign in with what takes in a parentheses and an object and within this we have some conditions we need to set the first one is the provider we have other options but for this tutorial we're going to only make use of the provider to signify the type of Provider we are trying to work with which is as you can see from the super based dashboard is Google so if you're working with every any other one maybe like the Apple or GitHub you need to reference it there right here to show the type of what service you are working with so we working with Google currently so before I proceed I would like to create the sign out method as well so I can just say a sync sign out let's give the O an uppercase and then open a bracket the sign out doesn't also taking any argument so all we need to do is just to await the response and by saying this do superbase do what then the sign out method available for us in super base what this method will do is to clear the entire local storage and possibly the session storage in the browser when the user tries to log out so now let's try to call this methods within our login component so I'm going to exray to the login component and within the login component we need to inject our all service so to do that we're going to make use of the injector which is one of the new updates available for us in angular instead of making use of the constructors can we can just say private or is equals to inject and then we're going to call the all service which I as you can see is import imported for us above we also need to inject the injector within our components within angular core so I'm going to click on the inject and then we can just inject it within angular core which you can see right here so now we now have a reference to the instance of the earth service so now let's create the method to handle our authentication so I'm going to say a sync and within a sync I'm going to say handle or let's call our method handle or and then we can now say response is equals to await let's reference our all service by saying this do dot we have two options currently sign in with Google or sign out okay it's called sign in Google let me check I I'll prefer it to be called sign in with Google so I'm just going to grab this and then paste it within our login component and then add the parentheses at the end so with this we can have access to signing with signing in with Google Now we need to and do this using the click event in our template so to do that let's head to the HTML file of our login component and we're going to call it I'm going to change this a tag to button so we don't have the hre we don't need the hre so this is going to be a button and then okay let me change the syntax the button should be below so within the button let's make use of our click event and line angular so I'm just going to call click which is equals to handle all so I'm going to save everything we've done so far far and then head back to the browser so for this I'm going to refresh the components and then I'm going to try to reference the login component within our app components for now because we've not integrated the OD guard so for now I'm going to load the login component so we can test out our Google login method so now we have sign up using Google so I'm going to click on sign up using Google and let's see the response we get as you can see it asks us to choose the particular Google account we want I'll clear the console before I click on one let's select done to stay gmail.com and it's going to ask us if we want to continue I'm going to click on continue and then our request is successful as you can see our request is successful and if you can look at the console for now we are not routing to the dashboard on successful response for now I want us to take a look at the console.log we did in our service so I'm going to close this and this as well in our old service you know we are console login the event as well as the session so let's take a look so you can see the session as an object while the event showed sign in that is this user is currently signed in so with the session it shows an object of the user's detail like the email uh the date it was created the role which is currently authenticated and other details which you might consider important it also shows the refresh token as well as the provider token and the access token so we can handle all this responses to configure your application while you are authenticating your user so what we want to do next is to create the authentication guard that is when the user is signed in they get logged into the chart component but if they are not logged in they get shown on the current page which is the sign up component so let's integrate the O guard and to integrate the O guard we need to create a guard so I'm going to stop the terminal once again and I'm going to run NG generate guard and then the guard going to be called or because it's oh I made a mistake I didn't put a g I didn't put generate it's it's supposed to be NG generate guard then the O guard which is the name of the Guard so it's going to generate a new o guard file for horse so it's ask it presents us with some prompts if we want to create it using the can activate they can activate child they can deactivate and they can match but the one we need is the can activate H guard so I'm going to select can can activate it and as you can see it's the two files required the test file and the O guard file itself gets generated so we're going to head straight to visual studio code and let's take a look at the Ard file I'm going to close the up routes as well as the Lo login component here so you can see this is a functional G in previous versions of angular I think from angular uh 15 downwards we still make use of class based Old Guard but for angular 16 and above the functional guard was introduced so if you have not use the OD guard so this tutorial is going to explain to you step by step how to use the functional o guards to configure your angular applications uh authentication States now before we begin our integration here we still need to do some things in our all service file so one of those things is to get the login state of the user so to get the login state of the user we're going to make use of the session this session we are getting we need to set it to local storage once we save it in local storage then we get a way to assist or to determine whether our user is currently logged in or not this particular data is important while configuring our Ard so to do that below the console logs I'm just going to say local storage remember we within the All State change this is where we get to determine our alt event and our session event so we can say local storage do set item because we are trying to save the session and I'm going to call it session and then I'm going to make use of Json do stringify so I'm going to say Jon do stringify and I'm going to save the session now we need the user session because when you check the console log the user session contains the information we need so I'm just going to say session do user so let's remove one of the brackets so I'm going to say session do user so that's all we need to do to save the item in local storage so now we now need to create an a condition that if the user exists then we want to navigate the user to the Chart component so so do that I'm going to say if session do user so if there's if the session do user object exist then I can say this. router. naate and then we can make reference to the Chart component by doing for/ chart so we have this error we need to inject the router by making use of the injector so I can just say private router is equals to inject and then we can call the router so we need to import two things the router as well as the inject service so you can see the error disappears and we can now proceed with our integration so now we need to head to the O guard service so within the O guard service what we need to do is I'm going to leave the state as it is so I'm going to say um we need a particular geta function for us to determine the state of the application so after saving this session in local storage we also need a geta fun function and this geta function is what we use in this um Ard so let's quickly create a geta function So Below the Constructor or outside the Constructor you can just say get anytime you click create a getter you signify it by saying get it's going to return a bulling actually so I'm going to say get is logged in that is if the user is logged in then I'm going to signify it as a bullying then we're going to have a bracket so we're going to create a variable that says con user is equals to local storage we need to get get the item so I'm going to say local story. get item so what item are we trying to get we're going we're trying to get the session and then we're going to save it as string and then we now need to return the geta because without the return we always get an error that says an accessor must return a value so that's one of the conditions of creating an accessor so to return the value we're going to say return and then we're going to say user which is variable we created above if the user is undefined so if the user is undefined we can return false however if the user is defined we can return true so this is the data we're going to use in our old cut to to determine if the user is logged in or not because anytime the user session is available it's going to return true if the user SE is not available is going to return false so back to the O guard we can now say if we need to make use of the injector here to to reference our all service so I'm going to say inject then I'm going to call the all service all service which has just been imported above let's import inject as well so if the O service dot you can see the methods available for us we have signing with Google we have sign out then we have the geta which is the which is called is logged in so if o service do is logged in is equals to false so what do we want to do we want to navigate the router to the login page so to do that we need to make use of inject again and this time around the inject is going to deal with the router we are going to bring in the router which has has just been imported above so we're going to say inject router. navigate and then just like we did in our or service file I'm going to reference for/ login here and then we need to return something we need to return false so if the login States is false we navigate the user back to the login page else we do what we return true so where the true comes in is where this router. navigates moves the user to the charts that board so this is how the router works so I'm going to save everything we've done so far and then let's test it out but to do that we need to run our project Once More by calling NG Ser while the project is compiling I'm going to exray to the super Bas service and I'm going to delete the current user because while we're creating the authentication we created a new user which is the don't to stay email so I'm going to delete this particular user so let's get this deleted and then our project is still compiling the delete is successful So currently we have no users call so now our compilation is complete the project gets refreshed and we need to clear the local storage so I'm going to clear the local storage and this is so that we assuming we assume this is a new user coming into the application I'm going to refresh the page so now what I'm going to do is try to access the chart component so I'm going to say for/ chart as can see we get navigated back to the login page so let's try for for/ SL chart once again we get navigated to the login page so now let's try to create a new user so let's click on sign up using Google select the user we were using before which is done to stay at gmail.com and for some reason it doesn't navigate us to the chat D dashboard okay let's investigate why that is the situation oh I think um we forgot to remove the configuration we did in the app. component. HTML file we need to get rid of this this is confusing our application so we need to get rid of it and then remove it from the import array as well so I'm going to get rid of this we no longer need them to display the application now we can now save and then head back to the page yes as you can see we get navigated to the chat application because the user is signed in P so now let's integrate the logout button within the chart component we already created the function in the service so all we need to do is just to head straight to the charts component and with the chart component we can create the logout method so I can just say a sync logout and then we need to reference our or service so we need to make use of the inje injector to do that so I'm going to say private or is equals to inject and then all service which we need to import both so let's import the inject so we have the inject method imported so we can now say this do dot we have the sign out method so um it returns a promise so we can just say do then and then make use of a fat arrow and then we can just make use of the router by saying this do router. navigate we need to navigate back to the login page and then if there's an error so we can just say do catch passing the error argument and then probably Aller an error an Aller error do message cool so we can see see we have the error this do router um has not been ejected it doesn't EX so we can just quickly say private router like we've done so many times in this app inject and then call the router that is all so let's test out our log out if it works so I'm going to clear the console click on log out oh we are nothing happens because we haven't made use of the click event and so quickly head straight to the HTML page I completely forgot about that so within the button I'm going to make use of the click event and so we can just say click and then is equals to C the log out method and then save once again so this should work now that we have the click event so I'm going to click on log out and you can see the user is logged out I'm going to refresh the page and then so let's try to access the chart URL without logging into the application let's see if this works so I'm going to say for/ charts and whoo for some reason despite the fact that we are not logged in we're able to access the dashboard this is not good so to prevent this there's one final thing we need to do with our OD gu that we need to call it within our router so the applications we do not want or the components we do not want anyone to access without logging in we need to call out the odard right there using can activate so those components include the chat and the chat alone only logged in users should be able to access our chart component So Below the chart part I'm going to call can activate which needs to be imported into this component so can activate and I'm going to make it of a square bracket and I'm going to call alt in lower case alt guard so we need to import our alt guard which has been done above and then we need to put the comma so it gets R of the gets rid of the error so I'm going to save and then let's head back to the browser to test things out once more in fact we don't because immediately the O guard was injected into the router it routes the user away from the dashboard because they are not currently logged in let's try to access the charts component once again from the URL as you can see our o guard is in full control by navigating us back to the sign sign up or signing with user button so only signing users can access our dashboard but there is one more thing I want us to do before we complete our authentication part of this tutorial so I'm going to click on the sign up with Google once again and then I'm going to select one of the Google accounts which is the first one we have right here and then as you can see we get logged into the into the component but there's an there's a one here that says navigation triggered outside angular Zone did you forget to call NG zone. run because it's within the angular Zone we need to make use of ngzone to get rid of that error message so quickly back to our service um where we have the router I'm going to say this doore NG Zone do run the NG Zone also needs to be injected into this component so let's not forget that but for now I just move the router into the NG zone now let's inject NG Zone into this component so quickly above below the router you can just say privatecore NG zone is equals to inject so we need to inject ngzone so that gets rid of the error so let's save and then let's let the page reload we can see that error gets disappeared and even if we log out let's log out and log in again to see if we get to see that error message we can see it has completely disappeared so we do not have the NG Zone error so we are good to go so with that we've been able to complete the authentication part of this uh tutorial so next up is for us to start creating the tables for our chart application so for this application we're going to have two tables created in super base now let's take a look at this readme.md file so this readme.md file contains our database schema so like I said the link to this GTH up repository is going to be made available in the description box so it contains everything you need to know to create a database table in super base so the two tables we're going to create is the first one is the users table then the second one is the chat messages table so these are the two tables we are going to be creating and the two schemers include uh the ID the full name and then the Avatar URL while the chart table is going to contain the ID the created art the text the editable and then the sender that is the sender uid and then if the message is going to be editable or not the text is the message being sent and the date is the dates in which the message was sent and the ID for that particular message so um let's get started with the users table now to create the users table let's straight to super base within super base I'm going to click on the home button and there's something thing we need to note to create a table in super base you can either use the table editor or the SQL editor so I'm going to make use of these two options so the first one which is the table editor is going to be used to create our message table while this SQL editor is going to be used to create our users table so to get started with this I need to copy some of the commands for the users table which is within our redme file in fact to dis playay this text in a clear format I'm going to open this using a markdown preview which makes it looks like an article so you can see by the time I push this to get up it's going to appear this way because it's in markdown format so this is very clear to read as you can see you have for creating a user table this is the command to enable Ro level security this is the command then to enable permit access for users to access their profile so all the commands have their own heading so uh everything is perfect clear so let's get started with creating the users table so to create the users table this is the command to create the users table so I'm going to grab this and then xray to super base and paste it within the SQL editor now you can see this um queries is Untitled so let's give it a name so I'm going to click on REM rename and luckily for super base as a superbas AI that can help us to remove the buing of trying to come up with a name for our query so I'm going to click on rename with the super base Ai and you can see it gives it a name as well as a description that fits the particular profile of our query so I'm going to click on rename query now to execute this query before I click on ex uh run to execute this query you can see the preview it says create table which it says create a public table and the table is going to have a ID with a type of U ID a full name with a type of text an avatar URL with a type of text and then a primary key which is the ID we have right here you can see um the ID above is it serves as our primary key now when I click on run this table is going to get created for us as you can see from the result success no rose returned now before we proceed I want to quickly take us back to the table editor and let's see if a table has been created for us as you can see we now have a users table with an ID with a full name and then an avatar URL cool now let's head back to the Avatar let's head back to the SQL editor rather and then let's click on new query to create a new query for our users table so the next thing we want to create is to enable Road level security so to enable Ro level security I'm going to grab this SQL command and then head back to the SQL editor paste it in and then click on run as you can see Ru level security has been enabled and automatically um the super base AI helps us to the name and we by clicking on it again it helps us to generate the description and I'm going to click on rename query so I'm going to click on new query once more and I'm going to grab the next query which is to permit access users access to their profile so users can access their profile when they want to access their profile so I'm going to grab that policy and then I'm going to paste it in and then I'm going to rename the query by clicking on rename with AI super base or super base AI as the case may be and then um I'm I'm going to click on run so we have more queries to run so the next one is to permit users to update their profile if a user wants to update their profile so I'm going to click on new query once more and then I'm going to paste it in click on the menu we have right there click on rename query rename with super base Ai and then click on rename query then run the policy that is the query and you can see it's successfully integrated so the next one is the super based function so for the super based function we need to grab this particular query and I'm going to do a bit of breakdown for this I'm going to click on new query and then paste it in so as you can see this query this function can be a bit tricky now depending on the old service you are using the values needs to follow along with the type of service you are using for us the O service we are using which is the Google Service as a full name metadata as well as a avatar Ur URL metadata so if what whatever go authentication you using probably using GitHub or apple or Discord you need to check the metadata because if you just copy this query which has a full name and Avatar URL it's going to return an error it's not going to work to make this more clear I'm going to head back to my application and then I'm going to head straight to uh probably the the local storage and within the local storage you can see the app the user metad data rather under the user metata metad data you can see I have something called Avatar URL and I have a full name so these particular keys are what I'm referencing in this particular database function this query function for GitHub and other authentication Service you may not see full name there you may not see aat URL that that reference the image you may see other things so you need to be careful of that whatever you want to reference you need to check the user metadata and then reference it within the query if I wanted the probably the phone number or the name or the picture so all I need to do is just to duplicate this then change the string right here to picture or whatever is within this key right here so I thought I should make that clear so let's change the query Name by clicking on rename with super base Ai and then click on rename query so I'm going to run that function and it says there's an error on line 8 um I think this trailing comma shouldn't be there so I'm going to click on run again and this time around it's successful now I think the final thing need to run is the super base trigger so what this does basically is every time a new user signs in it saves their data into the data table it triggers the table to save the new user so um I'm going to paste that in so it's going to insert each new user into the user's table we're going to see how that works once we integrate it with our angular front end application so I'm going to click on rename query rename with super based Ai and and then click on rename query then we can run the trigger and with that we've created all the queries for our user table so I'm going to go back to the user to the table editor rather and then select users so you can see under the alt policy we have two policies the select an update policy created for us because we uh we did it through the SQL editor so normally you should be able to do this um using the table editor if you decide to create a new table by making use of the the table editor format you need to fill the forms but to do that um that will be when we start creating our messages table but for now we need to create the road level security we need to enable it for our users table I think that's the last thing we need to do as far as this table is concerned so to do that I'm going to click on all policies and then I'm going to click on create a new policy so this policy is going to be select so there are different policies you have the select the inser the updates delet and the all policies but for this case we have the select and I'm going to set the expression to true so that is the users have read access so I'm going to give it a policy name for this form we don't have super B it to help us out so we need to just say probably enable read access so we've enabled read access so users can access their profile by setting it to true and then we can now click on Save policy and we've been able to create a ro level uh security for our uh uh users table so to test this out you can see currently we have no users the table is currently empty so what I'm going to do is under authentication I'm going to delete the current user we have I'm going to delete this user and then I'm going to log out clear the local storage open up console and then I'm going to refresh the application to ensure everything is in sync so the idea is anytime a new user registers into the application we now have them available within the users table so I'm going to open up the table editor and select users and let's see when the new user logs in if we are able to retrieve the ID the full name and the Avatar URL this data is going to be what we use within our application uh within our angular application to display uh the user's full name as well as the image so let's see I'm going to click on sign up using Google once again then I'm going to select this account and as you can see we are signed in so I'm going to head straight to super base and as you can see we now have this data we have the ID we have the full name and we have the user URL the Avatar URL rather so I'm going to grab this Avatar URL um let me copy everything and then let's paste it here let's see what it displays you can see it displays the Avatar of that particular user which is available on Google so we can now persist that particular image within our chart application right here every time a new user signs in the trigger gets um activated and then it saves the data within our users table so it can save as many many users as possible that signs into the application so I think that is the implementation for the users table so the next thing is to create another table which is the message table so to create the message table I'm going to click on create a new table this time we are not using the uh SQL editor so I want us to learn the difference between using the SQL editor and then using the uh the form we have right here to create the different tables so uh using the user interface let's give the table a name so I'm going to call the table chart for description I'm going to skip that for now enable Ro level access yes I'm going to say that true and then um another thing is because this is the chart we want to enable real time broadcast that is every time a message is being uh sent to this table we want to display it in real time instead of having to reload the page so we need to set that through so um the next thing we need to do is remember we are following this particular schema that is the table needs to have an ID it created that field it TT field an editable field and a sender field so back to the super base um we need to change the ID from in 8 to UU ID and then we can set the default value to a random ID then the created art we're going to leave it the way it is so we're want to add a new column and the new column is going to be it's going to be text and it's going to be a type of text as well and then next up before we create another column we don't want this to be notable so I'm going to disable this field so the next thing is to create the editable field this allows the user to determine whether they can edit their data or not so it's going to be a buling so for default value going to set it to false this is not going to be nullable as well and then finally we have the sender so the person that sends the message is also going to be a uu ID as well and then the type is going to be o or U ID so it's it's not going to be nullable as well so we need to also add a foreign key relation so to add the foreign key relation I'm going to select the add foreign key and then it's going to be in the a public schema and then the table is going to be the users table and then we can connect it using the sender uid and then we're going to make use of the uid so I think that's all for the actions we need to set the actions we need to Cascade the actions so I'm going to select Cascade um so anytime the update happens it it's going to update all the records reference to this table same thing for the deleting as well it's going to update all the records in the table so I'm going to save and for with that we've been able to configure the current key relation by connecting the sender ID with the current user ID so I think that's all we need to do so I'm going to click on Save and then I think we are good to go now the final implementation for this chart table is to add Ro level security policies so this is going to have about um three to four Ro level security policies so the first policy is going to be the delete policy so for the delete policy I'm going to select delete and then delete is going to be called delete by user ID and then I'm going to scroll down and the SQL expression is going to be if the O id. uid rather If the. U ID is equals to the sender ID then um you can delete your message message that means you're able to delete your own message you can't delete someone else's message so that's uh the condition the SQL condition for this particular uh policy so I'm going to save so that's all for the delete policy now okay there's an error oh I use 3al 2 is supposed to be a single equals to I'm used to writing so much JavaScript I'm sorry about that so the next thing is to create another policy this time probably let create the insert policy this policy helps to determine how we want to insert the data only authenticated users can insert data and quick pause before we proceed with that particular insert policy there's something I missed with the delete policy um only authenticated user can delete once a user is logged in they are the only ones that can delete a particular message so I forgot to um call that so now we can now create a new policy called insert so for the insert policy we are going to call it insert for authenticated users and then the SQL expression for this is going to be if the sender is equals to the. uid and created uncore art is equals to now so if the sender ID is equals to the alt ID that is if the authenticated user ID is equals to the person trying to send the message and then the date of the creation is the current date then the user is able to insert data so I'm going to click on insert before I skip that um I'm going to say this policy so the next policy we are going to create is the read policy AB ability to read uh the policy so I'm going to call this read access so as usual only authenticated users can uh read uh this message a user that is not authenticated cannot read a message so all we need to do is just set it to true it's a bullying so once you authenticated then you can read a message so I'm going to save this policy and then the final policy we need to create is the update policy although this feature is not created within this application but for the sake of people who might want to integrate it into the project so I'm just going to create this policy so I'm going to call it update user based on ID so the public role is going to be authenticated and then we're going to say if the. uid is equals to Sender ID then we are allowed to update the message so so you can only update a message if it's the message you created yourself so I'm going to save this policy and those are all the policies we need to create for our message table so I'm going to go back to the table editor and you can see uh on the chart table we have four o policies and on the users table we have just three art policy so with that we can now try to integrate this within our angular application so what we want to do now is to interact with our chat table in super base we need to have the ability to create a new chart then fetch the newly created chart in real time and as well as delete the created chart and to do that we need to make use of services in angular so let's create the services folder so back to the terminal I'm going to stop the current terminal and then run a new command using NG generate service and it's going to be within a super based folder So within the super based folder we are going to have our chart service so I'm going to press enter and then the new service will be generated for us now that our new service has been generated let's head back to visual studio code and try to locate where this service is created So within this folder called super base we can see the chart service and within this chart service we need to reference an instance of the super based clients which we already did in the old service so to make this process easier and faster I'm just going to to head to the O service and grab the super base variable instance and then paste it within the chart service instance we need to import super based client another thing we need to do is to grab the code within the Constructor so I'm going to grab this and then I'm going to paste it right beneath our declaration and we're going to wrap the Constructor with the bracket so we still have error messages because we haven't imported the right modules so I'm going to import create client as well as environment and with that we are good to go and we can now reference super base within this angular application within this angular service so the first integration is going to be the ability to create a new chart in our application so to do that we need to create a new function so let's call this function chat message so to do that let's just say a sync chat message and it's going to take an argument and it's going to be a argument of type of of text of string because we need to pass in a text and remember within our super base chart table we have a text which also accepts a types of a type of string as well so we need to configure it in a way whereby anything we type within the input field can be saved within our chart table so within a try catch block I'm going to say try and then catch and the catch is going to have an argument of error and then we can alert error so let's create a variable object and within this variable objects we're going to have two arguments so the first one is going to be the data and then we have error so we're going to set it equals to await this do superbase do from and we're going to try and access uh the data from we're trying to reference our database table which is called charts if you head back to super base you can see that we called our super base name charts our super base table chart and then we want to insert so we have different option we have delete fetch um select but for this uh situation I want to insert into the super base table so what are we trying to insert we are trying to insert the payload of text which is the argument we have up here so now that that is determined we can now create a condition that says if error that is if an error occurs during this process we want to Aller error do message so if there's no error so we can proceed to return the data so I think that's all we need to do I'm going to save that and let's head straight to our chat component to access this particular service so within the chart component. CS file I'll need to create a new method as well so this method is going to be called unsubmit because we are trying to submit the chart and push it to our database table so within this unsubmit method we need to create a form to make this work so what do I mean by this when I head back to the browser anything within this input field we want to send it straight into a chart table so so to get any data within this input field we need to make use of reactive form for this project so so to do this we need to import some API from angular forms which include form Builder form group The reactive form modules as well as validators let's get started with the reactive form module So within the import array let's import the reactive forms module as you can see we have it imported above another thing we need to import is the form group so we need to create an instance of the chat form so we can just say chat form and then we're going to attach it to an instance of form Group which we need to import as well and we need to attach this variable to an initializer by making use of the exclamation mark and with that we can now exray to the Constructor um currently we don't have any Constructor here so I'm going to create a Constructor and within the Constructor we can just run this do chat form which is the name of our chart and then we're going to say is equals to this dot so we need the form builder for us to be able to have an instance of the group object so to do that we need to create a new variable so I'm going to say private FB which s which serves as form Builder I'm going to say is equals to here we need to make it of inject so I'm going to say inject what are we injecting we injecting the form Builder which we need to import so let's import the form Builder we already have inject imported but I would like to move this above the chart form variable so let's just do that now so everything that has inject is above and every other variable comes below so everything we create is in an organized format so we can just say this do FB dot then we have access to array control group and No Label as well as record but what we need is the group so this do form builder. group and then we need to open a parentheses and a bracket and within this qura within this qura bracket we need to create another key and this key is going to be called chart message so chart message and we can just open a bracket it takes in two arguments so the first argument is going to be the initial value which is going to be an mty array then we can make it a required field by saying validators do required validators is also imported from angular form so this chat message is also going to be refer within the HTML file this allows us to attach it to the particular field we are trying to get the data from so we need to head straight to the HTML file so let's head to chat component. HTML and this is where our form should be within this input field we want to get the data that is being typed within this input tag so we need to wrap this div around the form so what I'm going to do is to create a form tag it doesn't need this attribute of action we don't need that I'm just going to cut this closing tag and and then wrap it around the div and then we need to reference the name of our form which is called chat form using by binding it to the form group so I'm just going to say form group is equals to chat form and then we need to also use the NG submit event andl to access to reference the submit function so we can just open a parentheses and then say NG submit and then we can say is equals to the name of our method which is called called onsubmit so I'm going to pass it here and it's going to have a paren at the end as well and finally let's make use of form control name to access data within this input tag so we can just say form control name which is going to be equals to the name we called this particular key within the Constructor so which is chat message so I'm just going to attach it to the form control name which is chat message this allows us to access all the Valu within the input tag rather so so I think that's all we need to do for now so let's try to log anything we type within the input field within the console let's try to log it into the console so I'm going to head back to vs code and then we can just do const form value is equals to this do chat form do value do chatore message so let's console log this variable into the console by saying form value so I'm going to save everything we've done so far and and then restart the server by typing in NG serve now that our compilation is complete we can head back to the browser on Local H for 200 and then reload the entire page so once this is done I'm going to clear the console and then let's type probably 1 2 3 4 5 6 7 and then click on send you can see we now have the value of the input field in the console anytime we click on send so this value is what we want to send to our chart database within the text schema so let's head back to visual studio code and then let's reference our service so what we need to do next is to inject the super based service that is the chart service within this component so I'm just going to duplicate this and it's going to be called chatore service and then we're going to call the chart service within the super base directory so now that that is injected into this particular file we can now make use of the dis keyword by saying this do chart service dot chart message the chart message expects a payload that is the field that is the value within the field which is called form value so I'm going to pass it within this parentheses and then we can now say do then because it's it's returning because it's returning a promise and the promise we can give an argument of response although currently we don't need to make use of this argument but let's pass in an argument and then open a bracket and within the bracket we can just probably conso loog the the response to see if you are getting any form of response from the database and then we can make use of catch to catch any form of error that may be coming from the database make use of the F arrow and then we can alert any error that is coming from database by making use of error. message so I'm going to save and then so let's try and see if we get any data within our database when we send a value into the input field so for now I can just type something with the input field we are getting an error let me reload the page probably the compiler didn't compile uh complet didn't compile properly so within this input field when we type something we're going to see if we get a response in our database in real time or if we get an error the value this is a text and to ensure that we are eating the service I'm going to open up the network tab I'm going to clear everything in there and I'm going to click on send and as you can see we get a response of 200 created and then we can see the text payload as well as the pre uh it doesn't return any preview but we can see the payload being sent and then it shows the status code I've created so I'm going to rush straight to the chart database and you can see we have the value this is a text the editable Boolean is returning false we have the sender ID the created art as well as the user ID so everything is working smoothly and we can now insert data into the database so let's insert more data um we can just say uh this is another test I'm going to send that and then in the next Network tab we can see that is also successful let's send in another message to micky3 the third message and then let's click on send you can see all this data is sent to database and it is reflecting in real time without having to refresh the page so there are a few modifications I would like to make for instance anytime we type in a text I want the message to clear off like anytime we typ in a random text or a text or an input into the input field the message still stays so let's reset the the form anytime we type in a message in the service file I noticed there seems to be a warning and the warning says not all code Parts returns a value so in this case what I'm going to do to get rid of this warning is probably to get rid of this return data so uh with that I think we should still be able to send data to the database what I want to do now is to reset the form and in reactive form you can do that easily by referencing the form Name by saying this just chat form and then you can say do reset okay the reference to the reset method is after the chat form so it's going to be this just chat form. reset so I'm going to add the parenes at the end so let's test that out to see if the form gets cleared immediately we submit the data in the input field so I'm going to type in probably I'm going to get some data from this um static text I'm just going to paste it within the input form and I'm going to click on sent as you can see the text gets cleared immediately the data gets sent to the database so with that we are good to go with clearing the input field another thing we need to do is maybe uh we shouldn't allow someone to send an empty field to the database because currently when the FI is empty and I click on send okay although we do get an alert that says um no constraint it violates the nor constraints but we need to prevent this in the front end as well because this still gets sense to the database uh or not I think the database um handles that but in an ideal situation that shouldn't be happening we shouldn't have a scenario where we can type in uh we can send data using the send button using an in an empty input field so to prevent that we need to make use of the disabled attributes so we're going to make use of the square brackets and I'm going to call disabled and then say if not charts form do valid that is if the chart form is not valid disable the input field so you see um now that the compilation is complete this send button is grade out you can't click on it because the input field is grade out so but when you paste something or when you type in something then it gets enabled so you can only send that to the database so that's how that works and how we can handle um trying to submit an empty fi to database but but also we can see that super base helps to handle that because of the way we configure the database that is uh null is not allowed for the type of text it's not it's not nullable that's why it was not submitting previously when I was trying to submit the empty input field now we can see that we are able to send data to the database what I want to do now is to be able to fetch this data this Dynamic data from our database into our application what we currently have is a bunch of static tests in our HTML file which you can find right here but what I want to do next is let's fetch it within an array and then Loop over it and display it into the front end so the integration for that is going to start with the service so within the service we're going to create a new function and we're going to call this function list message make use of the asnc keyword and say list instead of list message let's call it list chart since we've been using the chart keyword consistently throughout this tutorial so let's say list chart and I'm going to make it of the TR cach block once again so I'm going to say try and then make it of the cat block and the cat block is going to take an argument of error and then we can just throw the error so by making use of the throw keyword throw error and within the card the tri block let's integrate the functionality so we need to create a variable a d structured variable of data as well as error so we're going to say this equals to await this do superbase do from and this is trying to reference uh the particular table we are trying to speak to in Toba base which is called chat so from the chat table we want to select all the messages from the authenticated users so to do that we're going to open up a string and then make use of asterics that is we're trying to select all the messages from the authenticated users this would be in lower case in fact not upper case and then we're going to make it open a parentheses and the parenty is going to have an asterics as well and that's all we need to do to select all the m messages from the authenticated users so once this is done we need to create an if condition I'm just going to grab this if condition we created in the chats message and then I'm going to paste it right below our destructured data and error variable and below that we're going to return the data so I'm just going to make use of the return keyword and then return the data then I'm going to save everything we've done so far so this is the service that will allow us to fetch all the chart data from the chart table so now we need to speak with this particular service in our chart component CS file so within the chart component CS file we need to create a new method so I'm just going to call this method on list charts so it has no arguments it's just straightforward so we can just access the list chart method from our service by saying this do chat service do list chart and then uh this returns a promise so I'm going to make make of then and then uh no intended I'm going to pass in an argument of response and then let's conso Lo the response and then let's undo the catch because uh of a scenario where we have an error so we can just give it an argument of error make use of the first arrow and then we can just allert error do message to help us undo the error now uh what I like to do is to call this unle charts within the effects so effects are available in angular 17 they are one of the reactive Primitives in signals and they can only run within an injection context and such an injection context is includes the Constructor so the effect can only work within the Constructor so let's call the effect and then um we're going to pass in an anonymous Arrow function and then we can just do this dots the name of our method we're trying to log in the console which is unle chat um I think that's what we need to do we just need to import the effects and if we scroll above you can see effect is imported into the at angular call library over there so we can save everything we've done so far and see if we get the response on line 67 which should contain all the charts data from the database so quickly let's head to the browser and let's see if we get that response as you can see we get all the response from the database in an array uh we currently have five charts in an array in the data table and then we have this users object so if I go back to the chat table you can see we have five data currently imputed so we have access to those five data as well as the users who are sending those data so so currently I'm the only one sending the chats that's why my full name is currently having my name and then it's currently having my avatar URL as well as my ID if someone else logs in and sends a message is going to have different values over here so uh let's try to display these five responses within our chart user interface because currently what we have is just a bunch of static data so quickly let's head back to visual studio code and to do that we need to make use of signals to handle the data from the table so I don't want to make use of obser to handle this I want to make use of signal so to make it of signal we need to scroll up so I'm going to declare a variable called chart and it's going to be a assigned to a signal which has just been imported above as you can see we now have signal imported in angular core and it's going to be an empty array by default so um what I'm going to do is to open a parentheses and then pass in an empty array but in this scenario we need to create an interface that handles the response we are expecting from the uh the data from the superbas table so uh let's quickly create an interface So within the app directory I'm going to create the folder called interface and within this folder I'm going to call it chat Das response. TS So within this let's create our interface it's going to be modeled after our response so let's just say export interface and then it's going to be called I chart and it's going to be within this object so uh all the data we get from the database is going to be respon is going to be represented within our interface so quickly we're going to have the first one which is called created Arts so we're going to have created Arts it's going to be a type of string then the next one is going to be editable this is going to be a booing then we also have the ID which obviously has to be a type of string then we have the sender it's going to be a type of string as well and then we have the type of text which is our message so it's going to be a type of string and then we have the users which is an object on his own and it has three objects the Avatar URL the ID as well as the full name if you check the response you see it right here the Avatar URL the full name and the ID so let's have it within this object so I'm going to say Avatar _ URL which is going to be a type of string and then ID type of string and finally we have the full name full name it's going to be a type of string as well so our interface is created so we need to import it and assign it to the signal because signals can also take in types as well so uh let's assign it to this signal by saying um I charts which we need to import and with that uh it seems we have an error that says type never is not assignable to parameter of I chart and it's missing some properties which includes created that editable ID and the like so we're going to handle this error down below from our response or probably we can also set the I chart interface as an empty array so all I need to do is just to reference this empty array so with that error message from typescript uh disappears so right now let's assign our response to this chart signal so we can have access to all the signal Primitives so to do that down below within our function this. chart do set because it's a signal we have access to the set method the set method what it does basically it allows us to set a new value to our variable so whatever is coming from this response is going to be uh reference within the chart variable is going to be available throughout the application within the chart variable so we can just pass in rest so we are setting the response so we have an error that says argument of type null is not assignable to parameter of type I chart so we need to handle this error so one way of doing this is to assign a type to our argument from our response so I'm just going to say type of I chat and then uh it's going to be an empty array by default and we are still getting an error that says uh void is not assignable to type of parameter uh this is a type cryp errors that might get you confused but I think we can handle this by saying or null so you can see with that the error gets disappeared so but we need to create a condition that also handles the response by saying if the response is not equals to null if the response is not equals to null then we want to set the new we want to set data into the chart variable in our signal which we defined above right here so this is going to contain our response so if the response is not null let's pass the data into the chart variable from our signal else we can just console log that um no messages was found no messages found or you can probably display uh an alert or probably something to signify that to the users on the front end so uh this is one way to handle this and with that we can Loop through the UI by making use of this dot charts signal so to do that L Edge STS to the user interface and where we will need to Loop through it is somewhere around here uh to be precise that will be below the columns this this area where we have the different columns so I'm just going to extend this and then see where this ends and to do that we're going to make use of the newly introduced control Flows In angular which is the ATP block it allows us to Loop through data so I'm going to say at four and then I'm going to say MSG which represents message messages of these do charts you need to make use of your parentheses at the end and then I'm going to make use of the track keyword so that it allows um the signal to know if any item changed within the array so I'm going to make it of the track key word and I'm going to open a bracket so I'm going to wrap everything within the bracket where the div ends so this is one way to Loop through it using the newly introduced art four Block it's charts not charts so if this so message of this dots chart then the track then we can now say at empty that is if the result is empty the newly introduced control flows allows us to handle that as well so if the array is empty we can just display a div to the user interface that says no charts available so with that we are go to go so I'm going to save and let's see how the user interface currently looks as you can see it displays the static data five times so now we can just access the uh Keys within the array so the first one we're going to reference is going to be the image I think the Avatar URL so we can just make use of the Calli brace the double call Brace by saying MSG do um that will be the users do Avatar URL so I'm going to make use of optional chain for this to handle this particular scenarios so the next one is the time so let's handle the time so we'll make use of date pipes for this so I can just say uh within this div let's make use of the interpolation and then say MSG that is the message do created art and then we make it of a pipe and then we can now say date and make it of a colon this is a pipe in angular it's all available in the documentation so I'm not just coming up with this so you can check the documentation for dat pipes in angular then I'm going to make it of the month I'm going to reference the day as well as the year and also I want to show the time so let's say comma the hours then the minutes and then the time Zone probably is in the afternoon that is a.m. or p.m. so I want to reference that but we are having an error in these dat that says no pipe was found with the date with name date so we need to inject it into our import array we need to import date pipe so right after reactive forms I can just say date pipe and then inject it within or from at angular common so with that that error gets cleared so the next thing we need to display to the user is the full name of the user currently we have Sharon do but we want this to be dynamic so let's just say MSG do users. full name okay another thing we need to do is we need to interpolate the message itself so that's quite easy we can just say mg. text that's what we called it in database and I think that's all and I'm going to save let's save everything we've done so far and then let's check the browser I'm going to close the console so we can see everything properly as you can see we now have all the messages from the database so what I want to do now is every time we enter a new chat I want it to display immediately on the frontend because currently if I say let's just type in a random uh text if I click on send I need to refresh the page for us to see the newly uh typed in text which you can see right here but I want it to happen inar where anytime we click on send we see the response immediately and to do that all we need to do is just to call the unlist chart we need to call it within the submit function so we can just say this do unlist chart so I'm going to save and let's see how this works so let me just type in a text by saying here I am I'm going to click on send you can see it's showing immediately everything we type gets uh feted immediately from the database in a reactive format in real time so um uh with that we are able to fetch uh the data in real time from the database so we can now move on to the next implementation which is um ability to delete a chart so to create the delete functionality we are going to pass through three basic steps so the first step involves us trying to access the particular data we are trying to delete from the chart components that is within the chart components once the user select the message they want to delete from a dropdown that particular object is going to get passed down to the message service that is our chat service So within the chart service we're going to assign that particular object to a signal by making use of the set method in signal so once we set that particular object in the message service then we are going to access it within the delete component itself the delete component is going to have its own separate model so in that within that model we are going to that is where we are going to finalize the deleting of the message I hope this doesn't sound too complicated but I think once I start the implementation you're going to see how easy it works so let's head back to uh Visual Studio code So within Visual Studio code we need to create a new component and in fact this is going to be within a layout folder so let's generate a new component by saying NG generate components and then we're going to we say we're going to call the layout folder and then pass in the delete modal component so I'm going to press enter and while that is getting generated we can head back to the browser and xray to bootstrap 5 so in bootstrap five what I'm going to do is I'm going to guess two things the first one is the model and the second one is the drop down so let's get the user interface for the model so I'm going to search for model within bootstrap five so let's search for model and then let's scroll down um I think I'm going to go with this particular model so it has a text and then it has two buttons so one button is going to be yes another one is going to be no and then we have a text that says do you want to delete this particular message so let's grab this I'm going to grab everything here then copy it and then head straight to our chat component and it's going to be below the main tag so I'm just going to say modal so this is going to be within a comment and then I'm going to paste everything we copy it so now that we have the model the way we want to access this model is through a drop down so once a us a menu once they click on the menu a drop down appears once they click on the drop down a model appears so what I'm going to do next is to grab the drop down so I'm going to search for drop down um in bootstrap so we're going to see the different drop downs available for us um I think um we can go with this very first drop down we have over here so I'm going to grab everything within this div as well so where this is going to be is within the loop within the at four Loop so we can just put it probably after the div that contains the message of text so I'm going going to paste it in there then I'm going to save and let's uh clear out this drop down button I'm going to put uh three dots that serves as a menu in place of the text so I'm going to save that another thing I'm going to do is I don't want this to show as a button so I'm going to remove the button class by removing BTN BTN secondary as well as the drop down toggle class and I'm going to save let's see how it currently looks on the user interface so we need to compile the projects Once More by typing in NG ser and now the compilation is complete let's head back to the browser and we can see the menu doesn't look the way we want so we need to make uh some slight adjustments still so this button tag I'm going to change it to a span tag so I'm going to remove the button I'm going to type in Span and I think that should get rid of the weirdness of this menu cool so we have this so but I don't want it to be so close to the message box so I can just give it a class of margin top of three and then margin left of five so I'm going to save and let's see how this looks now I think it's much better so you can see when we click on the drop down we have the options uh displaying from the drop down but I just want only one option which is going to be the delete text so I'm going to get rid of this to and and just have delete right here and since I messed something up okay we didn't delete all the tags so now we can save and then let's see how the drop down Works once again so I'm going to click on the drop down you can see um I'm going to change the text to delete and not action so with that uh the next thing we want to do is once the drop down shows the delete we have right here is meant to trigger the model so what do I mean by this so what I'm going to do is I'm going to scroll down to where we have the model and I'm going to grab some attributes we have here so one of the attributes includes the datab BS tole as well as the datab BS Target so I'm going to cut that and then get rid of this button and then I'm going to paste it within the a tag in our drop down so let's paste it somewhere here and this should trigger the model so let's click on the menu again click on delete you can see the model now shows cool so I don't want the model to show Within These components we need some separation of concern so we need to cut it and then paste it within the modal component which is within the layout folder so let's go right to the HTML paste it in so this is where our model is going to leave um but we need to grab the selector so I'm going to grab this selector head back to our chart components and replace uh the UI with it selector and we have self closing tags available in angular now so let's make use of a self closing tag and then inject that component in our import array so I'm just going to say delete mod components and then save everything we've done so far so now our UI looks more modular and easy to understand so can just head back to the user interface and see if the model still appears with the change we've made and you can see the model still appears so I'm going to change the text within our delete Model instead of having these uh three dots we have here we can just replace it with a text that says are you really sure you want to delete this message so let's type that out are you really sure you want to delete this message if you really want to delete this message if you click on yes it's going to get deleted if you click on no the model gets closed so that is pretty much straightforward and from the presentation I showed uh before we begin this implementation we need to start the integration of the delete from the chart component TS file so what that means is we need to create a new function for our delete functionality to work that is anytime we select the particular text we want to delete we need to grab the object anytime we click on this drop down and click on delete we are grabbing the object we are trying to delete that is the chart we are trying to delete so uh to see that in action let's head back to this chart component TS file and within this file we can just say open drop down that is uh that's the drop down that shows the delete text so we're going to create a function this function will allow us to grab the object of the message we plan to delete so I can just say MSG and then give it a type of I chat then we can now say this dot okay we need to conso log it first to be sure so I'm just going to conso log MSG but for us to see the details in the console we need to call it in our HTML template so that's going to be within the span tag so within the span tag we can just have a click event and and then let's paste in our function and then save everything we've done so far we need to paste in the particular variable as well that is the argument so which is going to to be MSG that's why we are getting that error so we need to pass in MSG then we need to open the console to be sure we are getting the right object so the first one we're going to try is let's try this particular testt that says this is another text once I click on that you can see uh we get the particular object which is this is another text so if I try to grab another one probably this Latin text you can see we grab that so we can easily use the drop down to delete that particular message all we need to do is just to pass it down to our service which is going to be the next step so let's pass this data down to our service so let's head to our chart service and within the chart service we need to create the function that helps us to grab the selected object so I'm just going to call the method selected chart so let's just say selected chart and then it's going to have an argument of MSG and then I chart which is um the interface and then we can now create a signal above so the signal the signal is going to be called saved chart so what I need to do is just to say public because we want to access this particular signal in our model so we can just say saved chart is equals to Signal which is going to be an empty object by default so all we need to do is just to say this do Saed chart and then we need to pass in the MSG that is the message you are grabbing from the um chart component but we need to make use of the set method which I forgot so we need to set it uh to the latest object we are trying to grab so let's not forget that we are making use of set anytime you make use of signals you have access to this um uh Primitives so next up uh we need to head back to our CH component and reference this particular selected chart function So within the dropdown function all we need to do is just to reference the message service or that is the chat service by saying this your chat service dot select charts and then passing MSG so uh we are able to pass down the object from our chart service from our chart component rather down to our chart service and in the chart service it's now available globally in the angular project through the signal Cod save chart so we can always retrieve this in our delete modal components to see that in action let's head straight to the delete Model component so I'm going to save everything with done so far and then close some of the tabs because I think we have so many tabs currently open and it's going to cause some confusion so let's head straight to the delete Model and log the selected charts into the console to see what I'm talking about so all we need to do is just to create the instance of the chart service so let's just say private chatore service and we need to make use of the injector so we're going to say equals to inject which we need to import and then we reference the chart service so we now have an instance of the chart Service uh before we proceed let's just Define The Constructor and then log the particular object from our model delete Model into the console to be sure we have access to the uh data that was selected so I'm going to open this Constructor because we're going to make it of the effects to log this into the console and we know the effect can only work within an injection context so we need to import it uh within the Constructor and then open an anonymous Arrow function and then we can and just do console.log this do chat service do saved charts and then pass in the parenthesis so I'm going to save and then let's open up the drop down and see if we get to log the data in the delete component model so let's let's select one of the charts so I'm going to go with the last chart which is a bunch of random string and you can see in the delete Model component we have access to the right data we just selected you can see uh if we select another one you can see we have access to it in a delete component model so you can see we've been we've been able to use signal to manage state from one component to another component in an angular application I mean the code base is kind of um very simple to understand compared to observables where you have so many boiler plate code so um if you are new to signals this is one of the reasons why you might want to try out signal so let's continue with the integration so to proceed we need to create the delete service for our delete implementation and that can be done in our chart service so to do that we're going to create a very simple method so let's head to the Chart service and right above the selected charts you can just say a sync delete chat and all we need to delete a chart is an ID so and it's going to be a type of string so we're going to open the object and then we can create a variable by saying con data one thing you should know about super Bas is when you delete data you don't get any response so uh we don't need to handle anything um when it comes to deleting of data so you just get no response so we can just say cons data we're going to say await this do super base just like we've done previously do from our chart table and then we can do do delete and then it's going to take a parentheses and then we can say do EQ and then we're going to open a bracket and within this brackets we're going to reference the ID of the chart we are trying to delete and that's all we need to do and we can just return the data so I'm just going to make use of the return keyword and then return the data so this is the simple service function to delete uh to delete a particular chart so we can now integrate this within the delete Model since we have access to all the objects we can just reference the ID and delete the specific chart we want to delete so we need to create a function for that so that function is going to be called delete chart So within the delete chart function we need to extract the ID of the chart we're trying to delete so to to do that I'm going to create a variable called ID so I'm going to say const ID and let's try to access it through our signal by saying this do chart service do saved charts and then because it's a string we can just make use of as we can just make use of the type the as keyword in typescript by saying as and then open an object and then we can say ID of string and all we need to do is just wrap everything within a bracket a parentheses so I'm going to wrap this within a parentheses and I'm going to say do ID um this is pretty much Clear um probably I need to break this down a little bit what I'm trying to do is I'm trying to access the ID of the chat are trying to delete by making use of ID so in the results uh from our delete object once I click on a particular drop down you can see we have ID we are trying to get this ID so that's why we making use of ID right here this is what we need to pass an as an argument in the delete chart service so I hope that is pretty much clear so let's now reference it in fact let's console log the ID to be sure I know what I'm talking about so I'm just going to do console.log ID oh this is outside the function I'm going to cut this put this within the function and then um let's make use of the click event and La within our user interface uh this is the particular button we want to use to delete so I'm just going to make it a click event and la and then pasting the method then I'm going to save everything done so far so when I click on yes we should be able to see the ID in the console so let's do that click on delete and then I'm going to clear the console and I'm going to click on yes you can see we now have access to the ID so this is where we are going to call the delete chat service so let's head back to our TS file and then we can now say this do message service or rather chat service chore service do delete charts and then we pass in the ID which is a type of string and like usual it returns a promise and we need to make use of do then so I can just um make use of an Anon Anonymous function which has a fat arrow and then within this context we can just try to close the model or probably route the user to another page or something of sort but for now I'm going to leave that block empty and then I'm going to make it of dot catch and within the do catch it's going to have an argument of error make it of a fat Arrow then we can console log the error or probably alert the error do message depending on what you want to do can handle it however way you want so I'm going to save and let's try to see if we can delete a chart right now so I want us to try to delete this first charts we have here which is this is a text currently we have n charts so let's take note of that so I'm going to click on the drop down click on the modal and then I'm going to click on yes so on the network talk tab the result we have is 204 no content I told you previously that anytime you make use of the delete uh method in super base we usually get no response and you can see it from here we have no content and I believe this particular uh data has been deleted to confirm that let's head straight to the database and you can see that this is a text just got removed in real time so um for now what I want to happen is how I want to handle this is once we click on yes and it deletes happens we want to close the model immediately and then refresh the UI without reloading the entire page because currently to see this in action I need to refresh the entire page for us to see that that particular text has been deleted you can see it's no more there if I delete this second one I need to refresh the entire user interface which is not really good for a single app sing a single page application rather so um let's try to implement that and to do that we are going to make use of the router in angular so let's let's begin our implementation by calling the router object so what I'm going to do is to create a private variable called router and I'm going to say that to inject within the injection context I'm going to call router which we need to import and you can see we have router imported from at angular for/ router so um this is going to be done within the promise where we have a successful response so we can start this implementation by creating a variable which says current URL so we can just say let's current URL what I'm basically trying to do is just to get rid of the modal one and then ensure we have uh and ensure that the user have the latest data from the database in super base without refreshing or reloading the page so that's what we're trying to do here so I can now say let's current URL I typed ulr instead of URL sorry about that then we can now say this do router Dot URL so this do router. URL we can now say this. router. navigate by URL and this is going to take in two arguments the first one is going to be empty for Slash and then we're going to pass in an object that says skip local skip location change I'm going we're going to set it to true so I'm going to type in skip location change this going to be set as true so with that returns a promise we need to change that Promise by making use of the keyword and it's going to be an empty or an anonymous function and within that context we can now say this dot router. navigate and then we want to navigate to the current URL without reloading the entire page so because if we reload the entire page it defeats the purpose of this being a simple page application but before we save and test it out I also want to close the model when the response is successful as well so to do that we need to make use of attribute binding and we're going to make use of the signal API to handle this so back in the delete Model we have an attribute called data bs dismiss this is the attribute that helps us to dismiss the model so I'm going to grab this particular attribute and then I'm going to bind to it in anytime we click on yes because when you click on no it dismisses the model automatically but when we click on yes there's no way we are handling uh the closing of the model so we need to make use of attribute binding to close the model so I'm going to make use of the square bracket and then I'm going to say at which is a reference for the attribute binding and I'm going to say data DBS do dismiss which helps us to dismiss the model so I'm going to set it to a condition but let's define the variable for that condition so right into our TS file we can create a variable that says dismiss this is going to be a signal I'm going to say equals to signal I'm not sure we have signal imported into this project so we need to import signal and then by default it's going to be false because it's a bullying if the user clicks on the delete button it opens the mod out but when they click on yes and the request is successful we set it to true so that's what we're trying to do so by default it's false then we're going to access it by saying this do dismiss do set and we're going to set it to True any time we click on yes and our and our request is successful so we can now Implement our condition in the HTML file and to do that all we need to do is to say if not this do dismiss don't forget to make use of your parentheses is equals to true we want it we want it to return the modal class because remember in the data bs dismiss it's by default calling this particular model uh class so we want to conditionally render the model class if the user clicks on yes and the request is successful um we want the modal to show else we passing null okay this should be outside the okay we didn't close this properly so this should be closed here and the model should have its own quotes So I think um we now got it properly so um I'm going to save everything we've done so far and let's try to delete a model or a particular message rather so let's delete the last message this is a form of gibri so let's delete it away I'm going to click on delete I'm going to select no first you can see the mod gets removed but now let's click on delete again and then click on yes you can see that message gets removed from the user interface let's delete another message so the model gets closed and the message gets delet deleted so I'm going to delete the messages that don't really make sense so you can see finally let's delete this lating message I'm going to click on delete click on yes the model gets closed and then the URL uh only programmatically reloads this section of the user inter interace it doesn't reload the entire page reloading the entire page includes the the browser setting the entire state of the application to the way it is um by default which defeats the purpose of making use of a single page application so I think we've been able to integrate all the functionality of this chart application so the final thing I would like to do is to host this application on a platform called vual so to begin the hosting implementation we need to go to the Vel website so right on the Google search I'm going to search for Vel and I'm going to try to log in into Vel to log into vessel you need a GitHub account or probably one of the other git options version control options like um gitlab and bit bucket so I have a GitHub account where I already have the app hosted already as you can see it it's available in a repository called NG charts DV and then I'm going to continue to get up and I'm going to get authenticated into the versal dashboard now that the authentication is complete to create a new project inside of vessel all you need to do is to click on the add new drop down then select project so once you select project right in your on the left hand side of the dashboard you're going to see different projects currently hosted on GitHub so all you need to do is to select the project you want to host for me I'm going to select the NG chart DV project so I'm going to click on import and then we are going to be presented with the configuration for the hosting of the project so the first thing we need to fill up is the project name I'm going to leave it at is currently is that is with the name ng charts DV then uh the framework is angular obviously then the root the the root directory is for/ I'm going to leave that the way it is then I'm going to extend the environment variables now you know in our environment variables we have some configurations so I'm going to grab them the first one is the super base URL so let's grab the super base URL and then the and then the value inside of this super base URL I'm going to paste it here and I'm going to click on ADD then the second key we need is the super base key so I'm just going to grab that as well and then I'm going to grab token for the super base key and I click on ADD and those are the two keys we need to add before I click on deploy you can just take a look at the build and output settings by default super base provide us with these two command for angular Eng build is the command that helps us to build the project and the output directory is always located in this and uh the installer would make use of any of these uh install commands depending on how your project was set up so if you want to override any of this configuration all you need to do is just to click on the overr right then you'll be able to edit these fields they are disabled by default so the way it is is just how we want it so I'm not going to override any of the settings all I need to do is just to click on deploy and the deployment configuration begins so we need to wait for some minutes before the configuration is complete now as you can see the deployment is complete and we have a congratulations page currently displaying on the browser and you can see the landing page currently showing which says sign up using Google so what I'm going to do is to click on continue to dashboard and then we can see the dashboard of our hosted project so what we can do is just to click on the URL the deployed URL which we have here NG ch v.v. apppp let's click on that and you can see our project is now hosted live on the browser so let's try and test this out before we proceed I would like to open the console in case we might have any form of error while trying to access our chat dashboard so quickly let's click on sign up using Google and then I'm I'm going to select one of the existing projects I used in the local version of projects and we are presented with an error message the reason for this is our authentication was created making use of super base so we need to configure the super base URL because while creating the project we made use of the project the super base configuration relied on Local Host so it's still trying to access the Local H so we need to configure the URL to do that let's head straight to super base and within super base we need to headed straight to authentication and within authentication let's select URL configuration so before we proceed I would like to grab the URL for this project and to do that all I need to do is just copy this URL right here and head back to the super Bas dashboard and I'm going to click on ADD URL so I'm going to paste in the URL and click on ADD URL now we've been able to add the URL for our project another URL I I need to add is the URL that handles the authentication while you are trying to log into the application so what do I mean by this once I click on ADD URL I'm going to past the URL but this time it's going to be for/ off for/ callback so this is the call callback URL for authentication and then finally right above where we have site URL as Local Host 3000 I'm going to paste in our URL there as well and then click on Save and with that I think we are good to go so um I'm going to to go back and then reload the page so let's attempt our authentication once more so I'm going to click on sign up using Google button and then select my account and this time around you see we are authenticated right into the dashboard and we have access to all our charts as you can see I have my details showing my name the time of the charts that was sent the image as well as the chat as well uh let's also test out the delete functionality let's see if this gets deleted as you can see it gets deleted and let's send a message testing live and then let's click on send you can see that gets sent as well and save to the dashboard we can also log out so let's try and log out from this project you can see the log out functionality Works let's try and sign up using another user a brand new user to see how the dashboard uh looks like so I'm going to select one of my account right here without an image I'm going to select continue because this is a brand new account and then we get navigated into the dashboard so let's try and send a message with this account uh I am a new user and then click on send you can see the account name the account image as and the time as at when the message was sent so you can see the live version of the project still has all the functionalities working the way they should so that's it for this project I believe you've been able to learn a lot if you are new to the channel make sure you like And subscribe for more more educational content and with that thank you very much for watching and I'll see you again in the next one
