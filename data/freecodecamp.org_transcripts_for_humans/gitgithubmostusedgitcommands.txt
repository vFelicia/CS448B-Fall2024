With timestamps:

00:00 - Alright, so we've talked about how you
can clone a repository so you can work
00:03 - on it in your own development
environment. Just in case you're
00:06 - interested in working in the with the
command line a little bit, here are some
00:10 - of the more common commands that you
would use with Git. Now, these are just my
00:14 - opinion and you will need a lot more
commands than just this, but this will
00:18 - get you off to a good start. 'git clone' is
what we talked about earlier this is how
00:23 - you can clone a repository down to your
local machine. You'll notice all of these
00:28 - start off with 'git' ("G-I-T") that's an
important piece to remember. Now you
00:33 - don't have to memorize all of these at
once but I do want to kind of explain
00:36 - them just a little bit. 'git pull', remember
how we talked about the remote
00:41 - repository that everyone has their
changes, y'know, uploaded to that? When you run
00:46 - 'git pull' your bringing down the
changes that some of your colleagues
00:49 - might have made and pushed up to the
remote repository. 'git branch' is how you
00:54 - create a branch on your local machine.
00:57 - Remember we don't want to make commits on
master want to create a branch first. We
01:02 - check out to that branch with 'git checkout'. When we do that we're letting Git
01:07 - know that any commits that are made we
want them to be on that specific branch.
01:11 - 'git status' is maybe my favorite command
you can run 'git status' at any time and
01:16 - it will tell you exactly what's going on.
01:18 - You can use this at any point in time. So
following the GitHub workflow a little
01:23 - bit we created a branch and we made some
changes and we want to store them as
01:28 - commits we use 'git add' before we use 'git
commit'. Now,  we'll get into the complexity
01:35 - of this a little bit on the next video
but it's important to know that it is a
01:39 - two-step commit. Once you've
made the changes locally you can push
01:45 - them up to the remote repository just
like you pulled them down with 'git push'.
01:49 - So again, you don't need to memorize all
of these right now but just a little
01:54 - introduction so that maybe the command
line isn't so scary.

Cleaned transcript:

Alright, so we've talked about how you can clone a repository so you can work on it in your own development environment. Just in case you're interested in working in the with the command line a little bit, here are some of the more common commands that you would use with Git. Now, these are just my opinion and you will need a lot more commands than just this, but this will get you off to a good start. 'git clone' is what we talked about earlier this is how you can clone a repository down to your local machine. You'll notice all of these start off with 'git' ("GIT") that's an important piece to remember. Now you don't have to memorize all of these at once but I do want to kind of explain them just a little bit. 'git pull', remember how we talked about the remote repository that everyone has their changes, y'know, uploaded to that? When you run 'git pull' your bringing down the changes that some of your colleagues might have made and pushed up to the remote repository. 'git branch' is how you create a branch on your local machine. Remember we don't want to make commits on master want to create a branch first. We check out to that branch with 'git checkout'. When we do that we're letting Git know that any commits that are made we want them to be on that specific branch. 'git status' is maybe my favorite command you can run 'git status' at any time and it will tell you exactly what's going on. You can use this at any point in time. So following the GitHub workflow a little bit we created a branch and we made some changes and we want to store them as commits we use 'git add' before we use 'git commit'. Now, we'll get into the complexity of this a little bit on the next video but it's important to know that it is a twostep commit. Once you've made the changes locally you can push them up to the remote repository just like you pulled them down with 'git push'. So again, you don't need to memorize all of these right now but just a little introduction so that maybe the command line isn't so scary.
