With timestamps:

00:00 - in this complete game development course
00:02 - you will learn how to build a variety of
00:04 - games using lua and love2d first you
00:07 - will learn the basics of the lua
00:08 - programming language and then you will
00:10 - learn how to use lua to create games
00:13 - steve teaches this course he is an
00:15 - experienced game developer and teacher
00:17 - leave a comment with the type of game
00:19 - you plan on making welcome to your lua
00:22 - crash course
00:24 - so this course will contain everything
00:27 - about lua we'll learn lua and then later
00:30 - on we'll learn a little bit of love 3d
00:33 - and then we'll build a few games with
00:35 - lua
00:36 - but let's not get ahead of ourselves
00:39 - what exactly is lua
00:42 - lua is a high-level procedural
00:45 - programming language designed in 1993
00:49 - primarily to be embedded into other
00:52 - applications
00:54 - if most of this flew over your head it's
00:57 - perfectly fine
00:59 - most things you'll have to take in here
01:01 - is that lua is a procedural programming
01:03 - language meaning that things like object
01:06 - orientation doesn't really exist in
01:08 - there but you can simulate it
01:11 - these days
01:12 - it is mainly used in games so you'll
01:14 - usually see it being used with love 2d
01:16 - or roblox or it will be used with games
01:20 - built in c or c plus plus as a little
01:23 - bit of extra used on the side
01:26 - now where exactly was lua used
01:29 - well it was used in adobe photoshop
01:32 - lightroom apache the http server
01:35 - the awesome window manager
01:37 - roblox
01:39 - angry birds the sims 2 mafia 2 world of
01:42 - warcraft and fable free
01:45 - as you can see a lot of these are games
01:47 - because lua is very
01:49 - popular to be used with games because of
01:52 - how easy it is to embed lua in your game
01:56 - well what text editor should you use if
01:59 - you want to code along
02:01 - well it can be absolutely anything
02:04 - from a notepad all the way down to
02:07 - intellij idea
02:09 - i will be using vs code during this
02:11 - whole course
02:13 - mainly because that is what i've grown
02:14 - to love and learn
02:17 - but if you have no experience in any of
02:20 - these
02:21 - i would recommend using notepad but if
02:23 - you want something a bit more powerful
02:26 - then definitely go sublime text
02:33 - so just go to the lua website lua.org
02:37 - then here you have a little download
02:39 - option
02:40 - click on that
02:41 - now you want to just ignore all of this
02:43 - because compiling on windows grows who
02:45 - wants to do that and this is a linux
02:48 - only thing if i'm correct so
02:50 - we can actually just go to here if you
02:53 - don't have the time or inclination to
02:55 - compile lugo yourself like any normal
02:58 - windows user
02:59 - get a binary or try the live demo we
03:02 - want to get the binary
03:04 - is just basically the executable now
03:06 - don't be fooled by all of this you don't
03:09 - download it from here you go to this
03:11 - download page right here then make it a
03:13 - massive pain to actually get to what you
03:15 - want it's very interesting
03:17 - then here you have a bunch of options to
03:19 - choose from
03:20 - i would like to go with 5.3.6 because
03:23 - 5.4.2
03:25 - has a lot of changes and stuff that just
03:27 - sucks
03:28 - so here
03:30 - we have a bunch of things we can choose
03:31 - from this is linux
03:33 - this is windows 32-bit
03:36 - windows 64-bit if you're on windows you
03:38 - probably have 64-bit and take note this
03:41 - will also work on windows 11. just
03:43 - because i'm using windows 10 doesn't
03:45 - mean it won't work on windows 11.
03:47 - and then we have mac which
03:49 - guys seem to not be able to download and
03:51 - then we have more linux or that's a
03:52 - source this is linux now we want the
03:54 - 64-bit zip file
03:57 - so we click that it will start
03:58 - downloading our files
04:00 - you just say save file
04:03 - and i believe it's done
04:04 - we can now open up our file manager
04:08 - and we can go to downloads
04:10 - and you see we have a lua 5.3.6
04:13 - we can right click and extract file if
04:16 - you don't have this option i recommend
04:17 - you go install winrar or some sort of
04:20 - file extracting software i like using
04:23 - winrar because it just works
04:26 - i'm going to extract to lua 5.3.6
04:30 - but if you just said extract here it
04:32 - would have been perfectly fine
04:34 - now in here we have a bunch of options
04:36 - there are a bunch of options this is
04:37 - just executables this is the most
04:40 - important file here this allows us to
04:42 - actually run or leave our code which
04:44 - we'll do in a second now what we need to
04:46 - do is we can go back here and we can
04:48 - rename this
04:50 - you can name it to anything you want but
04:52 - i'll just call it lua because it's
04:54 - simple you know that's liver
04:56 - now i'm going to copy this so you can
04:58 - right click and we can say copy
05:00 - and i'm going to go to my
05:03 - local c drive
05:05 - now you can just paste it in here if you
05:08 - want but i do prefer going to program
05:10 - files
05:11 - right there
05:13 - and then just saying
05:14 - paste
05:15 - because it's a program so we want to
05:17 - paste it here
05:19 - there we go
05:21 - now next thing we can do is we can open
05:23 - up the command prompt so you can click
05:25 - here search command prompt and it
05:27 - actually
05:28 - want to go to this page
05:30 - anyways once you search command prompt
05:32 - you should see
05:34 - this
05:35 - now first try type lua
05:37 - don't get anything as perfectly fine try
05:39 - to type blue five free
05:41 - doesn't work
05:43 - okay if you do get this then that means
05:45 - it has not yet been added to path
05:48 - one way to fix it is by rebooting
05:51 - another way to fix this is by going to
05:53 - settings which
05:54 - can i can i search here
05:56 - i can okay go into settings
06:01 - and it's searching here
06:03 - environment variables so here edit
06:07 - the system environment variables
06:09 - and in here you can just say
06:12 - environment variables down here
06:14 - then you don't have to worry about this
06:16 - too much you can go down here to path
06:18 - you can say edit and these are the
06:20 - locations where all the environment
06:22 - variables is
06:24 - as you can see my program files x86 is
06:27 - here but not my normal program files
06:31 - or at least some of these 8x86s are here
06:34 - so i'm going to do this i'm going to say
06:36 - new
06:37 - and i'm going to browse because the
06:39 - thing is
06:40 - we it's a very difficult way to get
06:42 - there so i'm going to just browse to
06:44 - where it is
06:45 - and here program files we saved it in
06:47 - there and there's lua now if we say okay
06:50 - as you can see it added it here for us
06:52 - so it added it to the program files
06:56 - or the environment variables now if we
06:58 - were to say okay i just need to put the
07:00 - folder there because it's going to scan
07:01 - the folder you don't have to worry about
07:03 - the executables you say okay
07:06 - you say okay
07:07 - and you close that
07:10 - then now also if you do want to you
07:12 - could always rename this to lua and just
07:15 - remove the five free i don't know if
07:17 - that will still work but i'm pretty sure
07:18 - it will you then have to exit out of the
07:20 - command prompt and just open it up again
07:25 - okay please open here and to look like a
07:27 - hacker you can say color
07:29 - o2
07:30 - cool now that we look like a hacker we
07:32 - can clear the terminal
07:33 - or cls
07:35 - and we can say lua five free
07:38 - this will allow you to go lua if you see
07:40 - this you did it correctly also if you
07:42 - didn't download lua 5.3 you will have a
07:44 - different number here depending on the
07:46 - version you downloaded it
07:48 - and that just executes the program now
07:50 - we can say print
07:52 - test to make sure this works if it works
07:55 - then you're good to go
07:57 - next up you probably want to actually
07:59 - try and run a file in lua
08:02 - or a lua file itself i'm going to create
08:04 - a new folder
08:06 - i'm going to call it lua for my lower
08:08 - programs
08:10 - here i'm going to say new
08:12 - text document
08:13 - and make sure you can see this dot txt
08:15 - there we want to change that we're going
08:17 - to say main.lua and remove.txt if it was
08:21 - there
08:21 - and just say yes and you should see this
08:24 - you can then edit it with notepad if
08:27 - they give you the option to do it so
08:29 - let's open it with
08:31 - and let's see here more apps notepad
08:33 - there we go
08:35 - and yeah we didn't need to always open
08:37 - up with that
08:38 - then here we can of course just say
08:41 - print
08:42 - i am cool
08:45 - save this file by clicking file and save
08:47 - or just control this
08:49 - and you can close notepad
08:52 - and now here you can just shift right
08:54 - click
08:55 - and you can say open powershell window
08:57 - here there's multiple ways to do this
08:59 - but this is usually the easiest
09:01 - then you'll see this
09:03 - you can then just say lua
09:05 - fi free
09:07 - and in the file so then right there
09:09 - main.lua we can then say main.lua
09:14 - there you go i am cool if however this
09:16 - did not work
09:18 - then you can just open up your
09:20 - command prompt again
09:23 - bring it over here whoa
09:25 - and now we need to navigate to this
09:27 - folder
09:28 - one way you can do this you can just
09:29 - right click here and copy address
09:33 - now you can just say cd for change
09:35 - directory
09:36 - and
09:37 - right click if you right click then it
09:40 - will paste it here
09:41 - press enter and now you're inside of
09:43 - this folder now you can say lua five
09:46 - free and main.lua
09:49 - there you go i am cool
09:56 - first you open up vs code this is a vs
09:58 - code specific tutorials users vs code if
10:01 - you don't have it installed you do need
10:03 - to go and download it
10:06 - okay
10:07 - then once you have your visual studio
10:09 - code open you want to go to file
10:12 - and an open folder not open file but
10:14 - open folder
10:16 - once you say that you can go to your
10:18 - folder where your lua program is in so
10:21 - that main.lua file or whatever you call
10:24 - that file
10:25 - and here we go
10:26 - i have a main.lua file which just says
10:29 - print i am cool that's all it does it's
10:31 - just this file right here
10:33 - and i can show you that this file exists
10:34 - by going to my document and to that
10:36 - folder i just opened it there we go
10:38 - main.lua
10:41 - cool
10:42 - now that you have this here you can just
10:44 - go to terminal new terminal
10:47 - and here we have a terminal if you have
10:49 - lua already installed you can just say
10:51 - lua five free
10:54 - and then main.lua
10:56 - i am cool as easy as that you have just
10:59 - executed your lua code
11:07 - i'm going to open up my file manager and
11:09 - i'm going to go to documents i have a
11:12 - special folder called trash where i put
11:14 - all of the things that once i format my
11:16 - pc i don't care about it you will
11:18 - probably have a code folder similar to
11:20 - what i have here where i put all of my
11:22 - other code
11:24 - but for me
11:25 - i'm going to put it in
11:26 - trash i'm going to create a new folder
11:29 - and call it lua
11:32 - in here i want to create a new file
11:35 - called main
11:37 - dot lua
11:40 - if you're in windows make sure that this
11:43 - actually ends in main.lua
11:45 - and not main.lua.txt
11:49 - windows will oftentimes append that
11:52 - extension to the file name which you do
11:54 - not want
11:57 - once you have done this you can open up
11:59 - your code editor in this folder
12:03 - since i use vs code i'll quickly open it
12:05 - up here
12:08 - here we go now everything you see here
12:11 - is what will appear here
12:13 - so this main.lua
12:15 - that is here
12:17 - if this right here says main.lua.txt
12:20 - then windows did you win and they try to
12:23 - add a txt extension at the end you can
12:26 - just go here and then rename it and
12:27 - remove that.txt
12:30 - i'm going to close this file manager
12:32 - here because i don't need it open
12:34 - anymore
12:36 - all right
12:38 - now first off i would like to resize
12:40 - everything just so everyone can see
12:44 - great
12:45 - to run my lua code i will use this
12:48 - terminal right here
12:50 - but take note that this terminal is the
12:53 - exact same terminal
12:55 - as this terminal right here
12:58 - the two are exactly the same
13:01 - the only difference is this terminal is
13:04 - inside of vs code
13:06 - while this terminal is not inside of vs
13:10 - code
13:11 - that's the only difference they both run
13:13 - the same thing
13:16 - if you're on windows or mac you don't
13:18 - have to open up a terminal on the side
13:20 - you use a good terminal new terminal and
13:23 - you'll have a terminal to use
13:25 - all right now that we have that out of
13:27 - the way i'm just going to get my setup
13:29 - ready
13:30 - and here we go and this is why i like
13:33 - having this terminal here it just looks
13:35 - so much neater and we have a lot more
13:37 - space to work with
13:39 - next up i'm going to close my file
13:40 - manager because i don't need to see this
13:42 - lua file because i'm already in it
13:46 - so let's start with the basics
13:50 - make sure you have low install by going
13:52 - lua
13:54 - version
13:55 - and
13:56 - actually if you get this then you know
13:57 - lua is installed but if you go lua
14:00 - v then you should also see this
14:04 - if you just type normal lua then you'll
14:06 - be able to do something like print
14:09 - any type of text and you should see this
14:12 - to exit you can press ctrl and d ctrl n
14:16 - z or control and c
14:19 - alright so i have lu installed as you
14:21 - could see there
14:23 - so let's get started first i would like
14:25 - to tell you
14:27 - about comments in lua
14:30 - oftentimes if you're following along you
14:33 - want to leave yourself a little note to
14:35 - explain what is going on
14:38 - and this can be a comment
14:41 - a comment is not read by the computer so
14:45 - when you run this lua code a comment
14:47 - will be skipped
14:50 - so we go dash dash and anything that
14:52 - starts with two dashes
14:54 - is considered a comment
14:56 - so this is a comment
15:00 - this is also a comment you're not
15:03 - limited to the amount of comments you
15:05 - want or have you can just do as many as
15:07 - you want
15:08 - but that is also a single line comment
15:11 - it basically means that once i go to the
15:13 - next line
15:14 - i'm typing regular code you'll notice
15:16 - that here we have green text and here
15:19 - the text is not green that is because
15:21 - this text right here is not a comment so
15:24 - this is a single line comment every time
15:26 - you want to add one you'll have to add
15:28 - the two dashes to say it's the next line
15:31 - you also have a multi-line comment if
15:33 - you plan on having a comment that's a
15:35 - few lines long
15:37 - such as a description of something
15:39 - then you can say dash dash
15:41 - and in two
15:43 - brackets like this
15:45 - this right here is a multi-line comment
15:49 - and then make sure there's no space
15:50 - between your dashes and your brackets
15:53 - here there we go now this can range
15:56 - multiple lines so
15:58 - multi
15:59 - line
16:01 - comment
16:02 - it is amazing because now everything
16:05 - that's between these
16:07 - is part of the comment meaning if you
16:09 - put any code in here it will not execute
16:12 - same here if i put any code in here it
16:14 - will not execute
16:16 - this one is just one line whilst this
16:18 - one can span multiple lines
16:22 - all right
16:23 - next up let me actually show you how to
16:27 - print something to the screen
16:30 - to print something to the screen it's
16:32 - actually simple you just use the print
16:35 - command and i will print something to
16:37 - the screen
16:39 - hello world
16:42 - so print and then in brackets we have
16:45 - quotation marks and then
16:47 - a piece of text we want to print to the
16:49 - screen the quotation marks and the
16:51 - brackets are both important here so do
16:53 - not leave either of those out
16:57 - if you save your file and you run your
16:59 - file with lua main.lua and take note i'm
17:03 - in the same folder as this file
17:07 - i am in this folder
17:10 - if i say terminal new terminal you'll
17:12 - notice it's in document trash lua
17:16 - and that is where i currently am i know
17:19 - there's a lua file in here because if i
17:20 - say dir i can see a main.lua
17:25 - all right
17:26 - if you say lua and in your file name
17:28 - you'll get hello world
17:31 - because that's what we're printing out
17:32 - here
17:34 - you can have as many print statements as
17:35 - you want yet again you're not limited to
17:37 - anything so let's try hello jeff
17:41 - and here we'll now have a hello jeff
17:44 - and here's an example of where you could
17:46 - add comments
17:47 - here we could say
17:49 - print
17:51 - to the screen
17:53 - and here we can say
17:55 - we'll print hello world
17:58 - you'll notice my single line comment
18:01 - doesn't have to be on its own line
18:04 - it can be after
18:06 - a command for example print
18:09 - so here we're saying print and then
18:11 - we're putting a comment after it this
18:13 - comment will not be ready if we were to
18:16 - remove those the comment will be read
18:18 - and we will get an error such as this
18:21 - as you can see here
18:23 - it doesn't know what that is so if we
18:25 - make
18:26 - this
18:27 - then it can
18:29 - continue
18:30 - take note that comments will also stop
18:32 - code from executing so if i were to make
18:34 - this code a comment
18:36 - it will not be read so when we run this
18:39 - it's just going to say hello world and
18:41 - no longer hello jeff
18:43 - because hello jeff is now a comment
18:48 - to split your print up into multiple
18:51 - words
18:52 - or to add multiple things to your print
18:54 - statement
18:55 - we can add a comma
18:57 - i am cool
18:59 - this comma here will add these two
19:03 - together however take note that this
19:06 - comma will add a tab between the two so
19:10 - when we run this we'll get hello world
19:12 - and in a massive tab
19:14 - i am cool
19:16 - if you want to add these two together
19:18 - without getting a tab
19:21 - then you could use
19:23 - two dots and these two dots means
19:26 - concatenate concatenate just means add
19:29 - two pieces of text together
19:33 - if we save this we get one long piece of
19:36 - text
19:36 - if we add a space here then there will
19:39 - be a space between the two pieces of
19:41 - text
19:47 - what exactly is a data type
19:51 - well a data type is very easy to
19:54 - understand
19:55 - for example when i say 5 what is 5
20:00 - 5 is a number
20:02 - or an integer
20:05 - this is a data type
20:07 - five is the data type of number
20:11 - and that is how data types works they're
20:12 - very simple so we have nil
20:15 - nil means nothing empty null undefined
20:20 - so if something is nil it doesn't exist
20:23 - or it's empty
20:25 - we didn't have a number which would be
20:27 - something like 1 2
20:29 - negative
20:30 - 99
20:32 - 9.87
20:34 - these are all numbers
20:37 - we didn't have string and string is just
20:39 - a fancy word for text so anything in
20:43 - double quotes or single quotes
20:46 - these are all text
20:49 - we didn't have boolean
20:52 - this is yes or no
20:54 - also known as true or false so true or
20:58 - false
20:59 - if something is true you can think of it
21:01 - as yes if something is false you can
21:03 - think of it as no
21:06 - so when someone says is it true that you
21:09 - were five
21:12 - well that would be yes because it is
21:14 - true that you were five
21:17 - or if when you make a statement and it
21:18 - can be out of true or false
21:20 - i have been to jail that is false i have
21:23 - never been to jail so nope that is not
21:25 - true
21:27 - and then you have tables
21:29 - tables is the equivalence of arrays in
21:32 - lua or lists if you're coming from
21:34 - python
21:36 - tables are out of the scope of this
21:37 - video so we'll be leaving them for a
21:39 - different video on their own
21:42 - okay so those are data types they're the
21:44 - basic ones you'll mostly be working with
21:46 - if you're using lua
21:49 - now
21:50 - let's get an example of a variable
21:54 - a variable
21:56 - is something that can contain something
21:58 - else
22:00 - it's giving a name to something so you
22:01 - can reuse it later
22:04 - for example
22:06 - local name
22:08 - this is how you create a variable by
22:10 - specifying local
22:13 - and in the variable name this can be
22:15 - anything from x
22:16 - to name to example
22:20 - like that
22:22 - one way i like to teach
22:24 - is by using a little bit of math
22:27 - for example
22:29 - we have x
22:30 - now of course if we were to print x here
22:33 - and this will just display what is
22:34 - inside of this variable
22:37 - we'll get nil we can also set x equal to
22:40 - nil
22:43 - and this will be nil
22:44 - you also set x
22:46 - on a different line than when you
22:48 - created it so here's x and we can do
22:50 - that that also works we'll still get an
22:53 - elbow
22:55 - so let's say x is three
22:58 - now if you remember the basics of
22:59 - algebra you can usually say something
23:01 - like x plus
23:03 - eight is equal to
23:06 - eleven now you remember maybe in high
23:09 - school where you had to convert this to
23:12 - figure out what x is but in this
23:14 - scenario we are actually getting x we
23:17 - know what x is we are providing
23:20 - x
23:22 - so we know we'll get 11 here
23:25 - so we run this we get 11.
23:28 - so x here is just a placeholder for this
23:31 - number three here
23:33 - so we do this we'll get the same output
23:35 - but this time we're just storing it in x
23:38 - because now we can reuse it wherever we
23:40 - want
23:41 - so we run it we'll get 11. if we change
23:44 - x here to let's say 8
23:47 - then x will be changed everywhere to
23:50 - that eight
23:52 - and we'll get to showing you more
23:54 - examples in a second
23:56 - but you do get two types of variables
23:59 - you get the local scope variable
24:02 - which means it is not allowed to be used
24:05 - outside of this file
24:07 - and when we get to it outside functions
24:11 - that is a local variable it's not
24:14 - allowed to be used outside of its scope
24:17 - so in this scenario it's scoped to this
24:19 - file if we create another file we cannot
24:22 - use this variable
24:24 - from that file
24:26 - but then you get your global scope
24:27 - variable which could be something like
24:30 - global variable and this could be 10.
24:34 - this global variable as you can see it
24:37 - does not start with local
24:40 - it is because it is globally allowed to
24:43 - be used
24:44 - so this global variable is allowed to be
24:47 - used
24:48 - outside of this file
24:52 - so if we create another lua file and we
24:54 - try to use this variable which we'll get
24:55 - to in a future tutorial we are able to
24:58 - use this variable
25:00 - however it is definitely good practice
25:03 - to go underscore g dot whenever you
25:06 - create a global variable just this this
25:09 - is just to specify
25:11 - this is a global variable it's not
25:13 - necessary to have this it is completely
25:15 - optional but it is we're kind of
25:17 - recommended to have an underscore g just
25:20 - to give that extra specification we're
25:22 - talking about a global scope variable
25:26 - now a lot of this is flying over your
25:28 - head don't get too concerned we'll be
25:30 - practicing this a bit in future
25:32 - tutorials as well
25:35 - now let's look a little bit more at
25:38 - variables
25:39 - just variables in
25:40 - general we can have a floating point
25:43 - variable
25:45 - and a floating point variable is
25:46 - something like
25:47 - 3.1415 what not
25:50 - we can have an integer type variable
25:52 - both of these are considered numbers and
25:54 - this would be a free we can have strings
25:57 - or single or double quotes and in any
26:00 - piece of text this can include these
26:02 - dashes that are usually used for
26:03 - comments
26:05 - and we can also do boolean so true
26:08 - or
26:09 - false
26:11 - booleans are a little bit out of the
26:12 - scope of this video so we'll definitely
26:14 - get back to them in the future
26:17 - as for strings as i said you can either
26:19 - do single quotes
26:21 - or you can do double quotes but you can
26:24 - also do two brackets and this will allow
26:28 - for multi-line strings
26:30 - take note these strings are taken up
26:32 - very literal so if we were to print f
26:35 - here
26:37 - then it will get a very literal
26:38 - representation of what we had
26:42 - so if you don't want it to have a tab
26:44 - and a new line you might want to just
26:47 - do this
26:49 - and now you'll notice if we were to run
26:50 - this it will look completely different
26:54 - and last thing i want to show you about
26:56 - variables before we move on to an
26:57 - example of them
26:59 - is how you can
27:02 - assign multiple variables at a time
27:05 - for example let's go local one
27:08 - two
27:09 - three
27:11 - all right so we have three variables
27:12 - here separated by commas
27:16 - now we can just go
27:18 - one
27:19 - two
27:21 - three
27:22 - so now one is assigned to this one here
27:26 - two is assigned to this two here and
27:30 - three is assigned to this false here
27:33 - so they're following the same pattern
27:36 - and is how we can assign multiple
27:38 - variables at the same time
27:41 - now let's use an example where we
27:43 - actually use a variable
27:45 - for example let's go here and say local
27:48 - name
27:49 - is equal to steve
27:51 - then print
27:53 - hello
27:54 - my name is
27:56 - and remember to concatenate we can use
27:59 - two dots and then whatever we want to
28:02 - add in this case we can say name
28:04 - we can say name because name is a
28:06 - placeholder for this steve here
28:09 - so saying this is exactly the same as
28:12 - saying this
28:14 - let's go here i have a cool name
28:19 - and in steve
28:21 - and here we have a little bit of an
28:22 - example if we were to run this we'll get
28:25 - hello my name is steve
28:28 - which is here specified as name
28:32 - then here i have a cool name comma steve
28:35 - i have a cool name comma
28:37 - and then the name variable
28:40 - if you wanted to you could do this well
28:45 - this is perfectly fine as well it will
28:46 - give you the same results
28:48 - but think of it this way let's say this
28:50 - was a piece of text that was probably
28:52 - like a hundred
28:53 - thousand lines of code right
28:57 - and now you want to change the name from
28:59 - steve to mike
29:02 - now you have to go mic and you'll have
29:04 - to change it on multiple places so first
29:06 - mic and then you have to go mike and you
29:08 - have to do this a hundred thousand
29:10 - times immediately you can see where the
29:13 - benefit of using a variable would be
29:15 - better
29:16 - because if we use a variable like this
29:20 - then if we change it at one place
29:23 - to mic
29:25 - you can also work
29:26 - then it will change everywhere
29:29 - and take note once you have assigned a
29:31 - variable you can reassign it so if i go
29:34 - here and say name
29:35 - is equal to steve
29:38 - then now name will be equal to steve so
29:41 - it's first mike or muke and then steve
29:46 - so take note you can reassign a variable
29:48 - if you ever wanted to
29:56 - in this tutorial we'll be talking about
29:59 - strings aka
30:01 - text
30:02 - anything in single or double quotes
30:07 - so as we've learned from previous
30:08 - tutorial
30:09 - local
30:11 - x is equal to str this is a string this
30:15 - will be taken as a piece of text and we
30:17 - can use it
30:18 - the same with single quotes str this is
30:22 - also a string
30:24 - this will also be taken up as a string
30:27 - and last but not least
30:30 - these double brackets
30:31 - these are kind of like literal strings
30:34 - whatever you put in here will really be
30:36 - displayed so if i put a tab here this
30:38 - tab will be displayed if i were to print
30:41 - this
30:43 - and run it
30:45 - as you can see it literally takes those
30:47 - tabs and new lines
30:49 - so those are the three ways you'd
30:51 - usually be making a string
30:54 - let's continue to actually using a
30:56 - string
30:57 - so let's say we have a piece of text
30:58 - here
31:00 - hello world
31:02 - this is just a string normal string
31:05 - doesn't do anything
31:07 - to get the length of the string
31:10 - we can put a hashtag here and the
31:12 - hashtag in lua basically means return
31:15 - the length of something
31:17 - so we go here we'll get 11 because
31:19 - there's 11 characters in here
31:23 - we could also put the hashtag here this
31:26 - will also get us the length of the
31:28 - string
31:29 - because remember x here is just a
31:31 - placeholder for this string here
31:34 - so this right here that x is the same as
31:37 - me
31:38 - doing this
31:40 - and of course for concatenation you can
31:43 - just say two dots and then what you want
31:45 - to add
31:47 - there's an exclamation mark and now
31:49 - there will be an exclamation mark
31:52 - let's say you maybe have a number so
31:54 - local num is equal to 20
31:57 - and you want to convert this number into
32:00 - a string a piece of text because there
32:03 - is a difference between numbers and
32:05 - strings
32:08 - well to do that it's fairly simple let's
32:10 - say local str is equal to to string
32:15 - and this will convert this num to a
32:17 - string
32:19 - now we print
32:21 - num and then also string
32:24 - you won't really see any difference both
32:26 - of them will say 20.
32:28 - but if we print out the type of these
32:33 - and we can do that by saying
32:35 - type
32:36 - and then just like that so now type and
32:38 - then the variable and that will give you
32:40 - the type of this variable if we were to
32:42 - run this we'll get number and then
32:45 - string so you'll see both of them have
32:46 - different types because one is now a
32:48 - string while the other is a number
32:53 - now with strings you have the cool thing
32:54 - of escape characters
32:57 - so here with print we have a bunch of
32:59 - escape characters we can use for example
33:01 - hello
33:02 - backslash n backslash in means a new
33:05 - line so go to the next line
33:08 - world backslash t this means give it a
33:12 - tab the same as saying a comma here and
33:14 - then putting something new there but
33:15 - this is just in one string
33:18 - i am
33:19 - and in backslash v take it back
33:23 - b may not work on windows
33:27 - i have heard some comments say that when
33:29 - they use backslash b they get like a
33:31 - symbol instead of a vertical tab
33:34 - a vertical tab is just when you tab down
33:37 - instead of tab lift and i'll show you
33:40 - that in a second
33:41 - but
33:42 - backslash v gives you a vertical tab
33:45 - almost
33:47 - 19
33:48 - two backslashes will give you a
33:50 - backslash as a backslash
33:52 - escapes a character so you'll need two
33:54 - backslashes to get one backslash
33:57 - and then here
33:58 - we're gonna say 20 so it's kind of 19
34:01 - 20.
34:03 - and now let's say i wanted to put double
34:06 - quotes in the string
34:08 - there are two ways we can go about this
34:11 - the first way is i can replace these
34:12 - double quotes with single quotes
34:15 - and now i can use double quotes
34:19 - years
34:21 - this works perfectly fine
34:23 - but
34:24 - sometimes that you cannot do that
34:27 - sometimes that will not solve your
34:28 - problem
34:30 - in those cases if you try and do this
34:32 - you'll actually get an error
34:36 - so to keep these back or these double
34:39 - quotes inside of your
34:41 - string we can use a backslash and these
34:44 - will escape the double quotes
34:47 - and the same will be done for single
34:49 - quotes so if you backslash a single
34:51 - quote it will also be escaped
34:53 - and these are just a few of them there
34:55 - are a ton of these escape characters but
34:57 - i'm going to go through every single one
34:59 - of them if we were to print this we get
35:01 - hello new line because backslashing
35:04 - world then a tab not a space this is a
35:07 - space
35:08 - this is a tab
35:10 - let me get a tab because backslash t
35:12 - i am and in a vertical tab this might
35:15 - not work on windows but it just
35:17 - basically taps down instead of
35:19 - left to right
35:21 - almost 19 backslash 20 years
35:25 - and in our quotes
35:27 - the ignored forward slashes are not the
35:29 - same as backslashes so backslashes only
35:32 - two while a forward sash only needs one
35:36 - next up let's say we have a
35:39 - local string
35:42 - and this string
35:44 - just contains hello world with an
35:47 - exclamation mark
35:49 - now if you print it we'll get hello
35:51 - world but there are a few things we can
35:53 - do with this string which is pretty cool
35:56 - first off we can say
35:58 - print and then we can go string
36:01 - and this will use the string functions
36:04 - we have inside of lua there's a lot i'm
36:06 - not going to cover all of them but i
36:08 - will be covering the ones you might like
36:09 - to use the most
36:11 - dot lower and this will convert the
36:13 - string to lower case
36:16 - and just say str here
36:18 - you can do the same and then for
36:21 - upper
36:22 - to upper case
36:23 - and then you also have one for ling and
36:25 - this will get the length of the string
36:27 - it's the same as if you were to say
36:29 - instead of string the ling you're to
36:31 - just go
36:32 - hashtag hashtag you can see as a
36:35 - shortened version of this
36:37 - let's return the length of the string
36:39 - this will convert the string to
36:40 - uppercase and this will convert the
36:42 - string to lowercase
36:44 - let's see what we get so we get our
36:47 - normal hello world
36:49 - then a hello world that's just lowercase
36:52 - a hello world in all caps
36:54 - and in the length of this string
37:03 - so let's start with mathematical
37:05 - operators there's a lot of them for
37:07 - example five plus five we all know what
37:11 - this does this will add two numbers
37:12 - together
37:14 - i'm going to add a few here because we
37:16 - have quite a lot
37:17 - we didn't have minus which will of
37:19 - course
37:20 - subtract and this could go into the
37:23 - negative values
37:24 - you're not limited to just positive
37:26 - numbers
37:27 - we have times which is represented by an
37:30 - asterisk
37:31 - and not an actual x
37:33 - so an asterisk
37:36 - we have divide which is a forward slash
37:39 - not a backward slash but a forward slash
37:42 - and let's say
37:44 - we give
37:46 - 19 divided by five
37:48 - you have to the power of so this would
37:51 - be five to the power of two
37:54 - and then we have modulo
37:57 - and i'll explain this one after i've
37:58 - explained the rest
38:01 - so let's go 17.
38:04 - all right if we run this
38:05 - here we go
38:07 - so we start with 10 because five plus
38:09 - five it's ten
38:11 - five minus fifteen will give you
38:13 - negative ten
38:14 - five times five is twenty five
38:17 - 19 divided by 5 that will give you 3.8
38:22 - then 5 to the power of 2 will give you
38:24 - 25
38:26 - and then 17 modulo 5 will give you 2.
38:31 - now all of them are pretty simple to
38:33 - understand we have all learned these in
38:35 - school
38:36 - except for modulo
38:38 - you did learn this in school
38:41 - just not quite the same
38:44 - in a very basic sense modulo is what is
38:47 - left over not literally but it is what
38:50 - is left over
38:51 - for example if i say 17 divided by five
38:56 - well that will be
38:58 - five then 10 then 15 right
39:02 - so we were to say 17 minus
39:05 - 15 will get 2 because 2 is what's left
39:09 - over if you were to divide these two
39:12 - to give an example
39:14 - let's just go here
39:17 - and say
39:18 - 17 divided by five
39:21 - one gives us 3.4 and the other gives us
39:24 - two
39:25 - because 17 divided by 5 will give us how
39:28 - many times 17 can be divided by 5.
39:33 - 17 modulo 5 does the opposite
39:36 - it gives us how much is left over once
39:38 - the 2 has been divided
39:40 - so not this 0.4 here
39:43 - but the actual value
39:45 - because a 5 10 15 and in 20 20 cannot go
39:50 - into 17 so we'll have to stick with 15
39:53 - because that's the lowest value we can
39:54 - get if we were to do this
39:57 - and of course 15 minus 17 or actually
40:00 - other way around of course 17 minus 15
40:04 - will give us 2
40:05 - and this is the remainder that's what's
40:07 - left over so it's almost the opposite of
40:11 - division
40:13 - you don't have to worry too much about
40:15 - it we will be using this a little bit
40:17 - more in the future
40:19 - but you can get more used to it as time
40:21 - goes on
40:23 - one thing i remember
40:24 - that people in my class always have
40:26 - trouble with was the order of
40:28 - execution in math
40:30 - an order of execution can be a difficult
40:32 - topic because you might not remember
40:35 - what order what should be executed in
40:38 - for example five plus
40:40 - two
40:41 - times ten
40:43 - now i'm relatively okay with math so i
40:46 - would immediately notice that this two
40:48 - times ten that should be done first
40:51 - and then after this has been done we'll
40:53 - get this five plus two
40:56 - but not everyone will notice this
40:58 - immediately because that is just normal
41:00 - not everyone is made the same
41:03 - so some may see this and think oh it's
41:05 - five plus two that's seven seven times
41:07 - ten that will give you seventy but in
41:10 - actuality it will give you twenty five
41:12 - because two times ten that's twenty
41:16 - and in twenty plus five is twenty five
41:20 - now if you're one of those that can't
41:22 - always remember in which order this
41:24 - happens or if you just want to change
41:26 - the order in which this happens
41:29 - then i have a solution for you
41:31 - brackets
41:33 - brackets
41:35 - is what we can use to specify when what
41:38 - should be executed so here we could say
41:40 - it's first 5 plus 2 then we times it by
41:44 - 10
41:45 - because brackets will take priority over
41:48 - everything else and it will be done
41:50 - first
41:52 - now we will get 70
41:54 - because now it's first doing this
41:57 - then it will add this
42:00 - it's perfectly fine to do it over
42:02 - something that is going to do first
42:04 - i sometimes do this as well to make
42:06 - myself remember this is what will happen
42:09 - first
42:10 - you can see now we'll get 25.
42:13 - and you can of course add more things so
42:15 - now if we go
42:17 - times seven
42:19 - they will first execute this
42:23 - then it will execute this
42:26 - and then it will execute this
42:29 - but if you want to change that you could
42:31 - do
42:31 - this
42:33 - now it will first do this right here
42:37 - then it will do this right here
42:39 - and then it will do this
42:42 - so the order of execution
42:44 - is up to you you can change it depending
42:47 - on what you want
42:50 - and now i can look at a few things
42:52 - inside of the mav library
42:56 - print math dot pi this will print out
42:59 - the value of pi
43:00 - very useful in some cases of 3.14159265
43:05 - and so on
43:07 - we have math.min which will give you the
43:09 - minimum value of something so let's say
43:13 - 10
43:14 - 5 189
43:17 - the minimum value here would be 5 that's
43:19 - the lowest value of all of the values
43:22 - passed in if we run that we'll get 5. if
43:25 - we change this to negative
43:28 - 10 for example then now we'll get
43:30 - negative 10 because that's the lowest
43:32 - value
43:34 - you can also do
43:36 - max
43:37 - max will do the opposite and return the
43:39 - largest value so now we'll get 100.
43:44 - then you have a rounding which can be
43:45 - very useful
43:47 - so i have math dot
43:51 - seal
43:52 - and this will round up so 20.9
43:57 - and we actually give a few here
43:59 - 20.1
44:01 - so these two both will go up they will
44:04 - round upwards
44:05 - to run this we'll get to 21. they will
44:08 - not round down
44:10 - seal is in a sense the ceiling the
44:13 - ceiling is always above you
44:17 - so if you look up
44:19 - then that's where around it will round
44:21 - towards the ceiling upwards
44:24 - then you have the floor
44:26 - the floor will do the opposite because
44:28 - the floor is below you it's down so it
44:31 - will round down
44:34 - that will give us 20. so this is a way
44:36 - to force rounding to a specific point
44:38 - where it's either down or up
44:42 - and last but not least let's talk about
44:44 - random numbers
44:46 - print
44:47 - math dot
44:48 - random simple as that you'll get a
44:51 - random number
44:52 - run it
44:54 - run it run it
44:56 - that's cool
44:58 - you can do multiple
45:01 - so that's pretty
45:02 - neat but sometimes you want your
45:05 - randomness to be more random
45:08 - to do that you can pass in a seed
45:11 - so math dot
45:14 - math dot random seed
45:18 - and we can pass in os.time and this will
45:20 - ensure that all random values we get
45:23 - here is always
45:26 - random they will never be repeated
45:28 - continuously
45:30 - so now if we run this we'll get more
45:32 - random values
45:35 - you did get a few that repeat here but
45:36 - that's just sometimes if you roll to row
45:39 - random you'll get the same thing
45:41 - and there's only updates once every
45:42 - second
45:44 - you can specify up until where it should
45:46 - go so if we say 10 here
45:49 - then it will random to 10 so 2
45:52 - 10
45:53 - 4
45:54 - 2
45:54 - 7 7
45:56 - a few sevens there
45:58 - so we'll continuously round the random
46:01 - towards one and ten so between those two
46:05 - you specify another value here for
46:07 - example 50. now it will be between 10
46:10 - and 50.
46:13 - so will not go underneath 10
46:16 - and it will not go higher than 50.
46:25 - so your program can make decisions
46:28 - that it is absolutely epic
46:31 - your you can make your program make
46:33 - these decisions by using an if statement
46:36 - like asking a question
46:38 - if
46:40 - something is true
46:41 - then do something else
46:43 - so in this case if true take no that's a
46:46 - boolean
46:48 - then
46:49 - and here we can just print
46:52 - this was true
46:54 - so one of the most basic data types is
46:57 - used of one of the most complex
47:00 - type of statements that is pretty epic
47:03 - we run this this was true
47:06 - now the cool thing here is this code
47:08 - will only run while this here is true
47:13 - if i make this false
47:16 - then this code will no longer be ran
47:18 - so
47:20 - it skips it
47:22 - this makes everything way more powerful
47:26 - for example let's say
47:28 - local x is equal to 2
47:31 - and if x and then this is a cool symbol
47:35 - is more than
47:36 - and let's say five
47:38 - then
47:40 - print
47:41 - x is more than five
47:44 - run it
47:46 - and oh
47:47 - x is not more than five so this will not
47:51 - run
47:52 - but if we were to say x is 9
47:55 - because x is more than 5
47:58 - we'll get something out of it
48:01 - we also have the opposite symbol so less
48:04 - than
48:05 - so we have more than and less than where
48:07 - you can figure out more than we'll try
48:09 - and get the one that's the biggest so if
48:11 - this one is bigger than this one
48:13 - because it will try to eat the largest
48:15 - one so this is a mouth and it's trying
48:17 - to eat the largest one
48:19 - if this is bigger than this then it will
48:21 - be true
48:22 - this is smaller than
48:24 - because now we'll try to eat this one
48:25 - and hope that this one is bigger
48:28 - so this will see if x is less than five
48:32 - run it it skips the code but if we were
48:35 - to make x two again
48:38 - then we'll get
48:40 - x is more that's actually less less than
48:44 - five but you still get the point
48:46 - there's a lot more comparison operators
48:49 - which i'll get a little bit more into
48:51 - but not every one of them
48:53 - so we have the
48:54 - and
48:55 - or
48:57 - not
48:58 - i'll get into a lot of these
49:01 - more than less than
49:03 - more or equal
49:04 - less or equal
49:07 - not equal
49:09 - yeah
49:10 - take note in other languages you'd
49:12 - usually have a not equal like this in
49:14 - lua it's not with an exclamation mark
49:18 - and you have two equal symbols to say
49:20 - equal
49:21 - so these are all you can use in here
49:24 - and they're very powerful to use
49:27 - for example
49:28 - if x is less than five
49:32 - and x is more or equal to two so we're
49:36 - checking if x is more or the number two
49:39 - so two three and up
49:41 - and this is if x is less than five this
49:44 - does not mean including five if x is
49:47 - five this will be false because this
49:49 - only checks if x is less than five
49:53 - if you say less or equal to
49:56 - then if x is 5 this will be true
49:59 - so take note
50:01 - then here we can say
50:04 - x is
50:05 - between
50:07 - 4
50:08 - and 2
50:11 - both included
50:13 - so this will come see if x is less or
50:16 - equal to four
50:18 - or less than five
50:20 - this will check if x is more or equal to
50:23 - two or in other words more than one
50:27 - it doesn't matter which one you use and
50:30 - more than more than equal or less than
50:32 - less than equal
50:34 - it more depends on what you prefer i
50:36 - prefer just doing more than or less than
50:39 - but occasionally when i'm a bit more
50:40 - tired i would usually go for more equal
50:44 - and less than or equal
50:45 - and if we run this
50:47 - it works
50:49 - if i make x 5
50:52 - then it doesn't work
50:54 - but if i say less or equal to 5 which
50:57 - will now include a 5
50:59 - then it will run it
51:01 - this and here just says both of these
51:04 - should be true so if this is true and
51:06 - this is false it will not execute
51:09 - so if i were to say true
51:12 - and
51:14 - false
51:15 - then it won't execute
51:17 - but if i say true and true
51:20 - it will execute
51:23 - or will do the opposite or
51:26 - we'll see if one of these are true if
51:28 - one of them are true it will run so it
51:29 - will run
51:31 - it won't run or it will run my bad and
51:34 - if both of them are false
51:36 - it won't run
51:38 - there we go
51:40 - and in a not we'll just basically invert
51:42 - something so something that is not false
51:45 - is true so it's kind of like speaking if
51:48 - something is not false it is true if
51:51 - it's not true it is false
51:54 - so not false or false and i will give
51:57 - this will make this one true
52:00 - and here again brackets becomes a
52:03 - important part here
52:05 - for example
52:08 - if we were to do this
52:10 - then it will say if not and then
52:12 - whatever comes from this
52:15 - false or false this will be false so if
52:17 - not false if true then
52:21 - so take the brackets do play a role here
52:23 - if i want to make this one true
52:25 - then it won't work
52:27 - if i were to remove these brackets
52:31 - then it
52:32 - won't work
52:34 - either because true is now false
52:38 - in order to make this true
52:41 - it will work
52:42 - but if i wrap these in brackets
52:45 - it will not work because true and true
52:48 - or true or true will return true and
52:50 - this will result in it true here so if
52:52 - not true
52:54 - brackets can make everything a bit more
52:56 - complex but also make what you can do a
52:59 - lot cooler
53:01 - so let me show you an example of where
53:03 - an if statement could be useful let's
53:05 - say local age is equal to 15.
53:08 - so this person is 15.
53:11 - if age
53:13 - is more or equal to 18.
53:15 - then let's say they want to go into a
53:18 - bar they say print
53:21 - you
53:22 - may enter
53:25 - they may enter the bar after 18 years or
53:27 - older
53:30 - and here
53:31 - if this works
53:33 - it will run
53:34 - they're not 18 or older so if we say 20
53:38 - then you may enter
53:41 - now what if we want to give them
53:43 - something else for example if they're
53:45 - let's say 17 we want to to tell them to
53:48 - scram they're not welcome here
53:50 - so print
53:52 - you are not welcome
53:55 - be gone
53:58 - but you might already notice what will
54:00 - happen here
54:01 - if i run it
54:03 - we'll get both
54:05 - we could go if
54:07 - and then age is less than 18
54:12 - and then throw this in there
54:15 - this is perfectly fine so now we have
54:16 - two if statements
54:18 - and it will work if we go here and say
54:21 - 17
54:23 - then you are not welcome be gone
54:25 - but there's a cleaner way to do this
54:28 - we can go
54:29 - else
54:30 - else is when this here does not execute
54:32 - so when this is false
54:35 - now we can just move this up there
54:38 - and there we go
54:40 - we run it
54:42 - you're not welcome be gone if we change
54:44 - this to 18
54:47 - then we'll run the top one
54:50 - let's say
54:51 - it's this bar is near a children's
54:54 - tourist attraction
54:56 - so kids that are under the age of 12
54:59 - might want to go to that attraction
55:02 - so we could go here and say
55:05 - else if
55:07 - h
55:08 - is less
55:09 - than 13 so everyone that is not a
55:11 - teenager yet
55:13 - print
55:15 - the water slides
55:18 - are down the road
55:21 - cool
55:22 - so now we're checking if the user's age
55:26 - that's trying to enter is more equal to
55:28 - 18 they're allowed to enter the bar
55:30 - if their age is under 13 we tell them
55:33 - that the water slides are down the road
55:37 - otherwise
55:39 - they are not welcome and they should be
55:40 - gone because then we're near their teens
55:42 - and they're trying to sneak in to get a
55:44 - quick drink
55:46 - run this you may not enter or you may
55:48 - enter
55:49 - if we change this to 17 then they're not
55:52 - welcome
55:54 - if we change this to 10
55:56 - or 10
55:58 - then
55:59 - the water slides are down the road
56:03 - we can of course do more for example
56:05 - local birth day
56:07 - is equal to false
56:09 - now let's say it's their birthday bingo
56:12 - if birthday
56:14 - then
56:16 - print
56:18 - you get a free
56:20 - drink on us
56:23 - so now
56:24 - if it's their birthday they'll get a
56:26 - free drink so you can use an if
56:28 - statement within another if statement
56:31 - if we run this
56:32 - let's just maybe make this 18
56:35 - we'll get you may enter
56:37 - if you make their birthday true
56:40 - then you get a free drink on us
56:44 - and there's a ton of things you can do
56:46 - more with if statements but most of
56:48 - these you can just get by trial and
56:50 - error and by practicing what we've just
56:52 - learned
56:53 - and last but not least we can also do
56:55 - something like this
56:57 - local
56:58 - name and let's say
57:00 - if
57:01 - local age here is
57:04 - more than 18
57:06 - so if age is more than 18
57:09 - and
57:11 - mike
57:12 - or
57:14 - jeff
57:15 - so if the age is more than 18 then their
57:17 - name will be mike
57:19 - otherwise jeff and we can imprint
57:22 - name
57:23 - this is a cool one-liner where
57:25 - everything can be done in one line
57:27 - so now we get mike because their age is
57:29 - more than 18.
57:31 - if we change this to
57:33 - 15
57:35 - then we'll get jeff so in this one line
57:38 - you can set a variable using an if
57:40 - statement
57:42 - you can of course also set a variable in
57:44 - a normal if statement
57:46 - so true and then name is equal to
57:50 - luke
57:52 - this right here is also valid to print
57:55 - name
57:56 - so this will also work however this is
57:59 - in one line so it might be more
58:00 - comfortable but if you prefer writing it
58:03 - out like this then that's perfectly fine
58:05 - as well
58:06 - however take note if you were to say
58:08 - local name here it will re-create this
58:11 - name variable and it will be scoped
58:13 - between this
58:15 - so it will be scoped here
58:18 - meaning we can't use this name here so
58:20 - if we were to print out name here
58:22 - we'll get jeff
58:24 - if we remove this local
58:26 - they will add trend access this name
58:28 - here
58:30 - and we get look
58:32 - so take note when you declare a variable
58:34 - you're using local so local
58:37 - and this will declare
58:39 - a new variable
58:41 - and it will locally scope it so it's
58:44 - only allowed in its current scope
58:52 - loops is a way to repeat code so it
58:55 - continuously happens so continuously
58:58 - runs until you tell it to stop
59:01 - in lua there are three common loops we
59:04 - can use
59:07 - the most common would probably be the
59:09 - for loop
59:11 - and this is basically for a number until
59:14 - a number
59:15 - run the code so for
59:18 - i
59:19 - and this is just declaring a variable in
59:21 - this scope
59:23 - if for i
59:25 - becomes one so we're starting at one
59:28 - up until 10 so we're going up until the
59:31 - number 10
59:32 - and then
59:34 - we can just say
59:36 - then
59:36 - or not then but do
59:40 - and here we can say print
59:42 - i
59:44 - this will count from 1 to 10
59:47 - and print it out
59:49 - so we have 1 2 3 4 5 6 7 8 9 10
59:54 - from 1 to 10 it will just loop and loop
59:57 - and loop and change this i variable here
60:01 - you can see how many steps it should
60:03 - take for example one is by default so it
60:07 - takes one step one two three up until
60:09 - ten
60:10 - you can say two and now we'll take two
60:13 - steps
60:14 - there we go
60:17 - you can even make it go into the
60:18 - negative value so negative two but this
60:21 - here would cause an infinite loop
60:23 - so we'll have to go 10
60:25 - to one so it's going to flip the two so
60:27 - it's i is going to start at 10
60:30 - until it reaches one or less and then it
60:33 - will stop
60:35 - as you can see it goes downwards because
60:38 - we said -2
60:41 - cool
60:42 - so that's a basic for loop you also have
60:45 - a while loop
60:47 - so while something is true we want to do
60:50 - something else
60:51 - this here is called an infinite loop
60:54 - since true here never becomes false so
60:57 - if i say print
60:59 - mic
61:00 - it will forever print out the word mic
61:03 - until i quit the program with ctrl c
61:08 - so this will infinitely loop until
61:10 - either the program crashes or your pc
61:12 - does
61:14 - you can use break to break out of a loop
61:16 - so loop it only goes once
61:20 - here we could do something like
61:22 - local count
61:25 - is equal to zero
61:28 - and then
61:29 - if the count
61:32 - count is more than ten
61:36 - then we can break
61:39 - and of course here at the top we can say
61:41 - count is equal to itself
61:45 - count
61:46 - plus one
61:48 - cool
61:49 - so now we will break out of the loop
61:51 - without having to make this here false
61:54 - so now we can say
61:56 - that and i will print out mike 10 times
62:00 - cool
62:01 - you could also
62:02 - do this
62:04 - put that there
62:05 - while count and instead of more than 10
62:08 - we can say listen to it so wall count is
62:10 - less than the number 10
62:12 - run this loop
62:14 - now if we run it
62:16 - until count
62:17 - is at least
62:20 - 10 it will
62:22 - run this code
62:24 - all right and then last but not least is
62:26 - the repeat loop
62:28 - so one thing i want to show you is let's
62:30 - say
62:31 - count is equal to 10.
62:33 - if we do this
62:35 - the while loop will never run because
62:37 - this here
62:38 - is never true
62:41 - the repeat loops
62:43 - runs at least once it's a while loop but
62:46 - it runs
62:47 - at least once
62:50 - so repeat
62:51 - until
62:52 - and we can just take this right here
62:55 - put it here
62:57 - and then take this and put it here
62:59 - it's the same as a while loop but it
63:01 - will run at least once
63:04 - in other languages this would be called
63:06 - a do while
63:08 - and my bad it goes up until so we should
63:11 - say
63:12 - up until count is more than 10 or in
63:14 - this case let's say
63:16 - 5 just to show you so
63:18 - until this is true so it will repeat
63:20 - this until this is true so unlike with a
63:23 - while loop it will not be while true
63:26 - this will be while false
63:28 - if we run it we'll get mic at least once
63:32 - it will run at least once before it
63:34 - quits
63:41 - user input is relatively easy
63:44 - let's say we go here and say print
63:47 - what is your
63:49 - name
63:51 - and then the user
63:52 - can input something so we can say local
63:55 - a and s for answer but you can call this
63:57 - variable whatever you want
64:00 - and we can say io.read
64:03 - and this will get input from the user
64:06 - and then store it inside of this
64:08 - variable
64:09 - and here we can print
64:11 - ans
64:13 - we maybe go
64:14 - name
64:16 - colon
64:17 - and there we go
64:19 - if we were to run this lua file
64:22 - what is your name i will say mike and
64:26 - there we go name mic
64:28 - another cool thing you might be
64:30 - interested in knowing is how to get
64:33 - input on the same line as your output
64:36 - because sometimes you don't want an
64:39 - output and then an input on the next
64:41 - line
64:42 - it just kind of looks ugly and sometimes
64:45 - is confusing
64:46 - to get input on the same line instead of
64:49 - print you can use i o dot write
64:53 - this is the same as print but it does
64:56 - not have a new line
64:57 - at the end
64:58 - so here we can say
65:01 - enter
65:02 - your name
65:04 - and it will enter
65:05 - and it will ask for the input on the
65:07 - same line
65:08 - as this output
65:11 - now here we can say nick
65:14 - and the name is nick
65:16 - and of course then you can do things
65:17 - such as if
65:19 - answer is equal to
65:21 - nick and they can give special outputs
65:26 - depending on what the user inputs
65:29 - but i think we all already know that
65:38 - so if you're coming from another
65:40 - programming language tables are usually
65:43 - considered
65:44 - lists
65:46 - arrays
65:48 - sits
65:49 - dictionaries
65:50 - objects records
65:53 - cues a bunch of these things can all fit
65:57 - into the idea of a table
66:00 - a table can be all of these
66:03 - if you have no idea what i just said
66:06 - then you don't have to worry about that
66:10 - so let's create our first table
66:13 - i'm going to say local
66:17 - tbl and if at any point say list or a
66:20 - rate just know i'm referring to a table
66:24 - and this table
66:26 - will be
66:28 - used with these right here so these
66:30 - brackets
66:32 - anything that goes in here
66:34 - is part of the
66:37 - table
66:38 - this can contain any types and any
66:40 - amount of items so
66:43 - this
66:44 - and we can put a 2
66:46 - and a 9.9 and a true
66:50 - all of these they are allowed
66:52 - booleans
66:54 - numbers
66:55 - strings
66:56 - even other tables so we can go here and
66:59 - say
67:01 - okay
67:03 - cool
67:05 - this is all allowed
67:08 - if we were to try and print out table
67:11 - then take note that you might not get
67:14 - what you expect
67:16 - usually when you print out something
67:18 - like this you expect to receive that
67:20 - back
67:21 - but in this case we will receive a
67:24 - memory address
67:27 - but if you want to get the items inside
67:29 - of a table
67:30 - you could use a for loop so for
67:34 - i is oh that's all caps for
67:37 - i is equal to one
67:40 - to hashtag
67:42 - tbl
67:44 - do
67:45 - and hashtag is just a short version of
67:49 - number of items in this table
67:54 - like if you have a string or a piece of
67:56 - text and you do this hashtag with it as
67:58 - you might remember
68:00 - we receive the length of that string the
68:02 - same concept
68:04 - exists for tables
68:07 - and in here we can say table and then
68:10 - pass in i
68:13 - if we do this we'll get each item inside
68:16 - of the table this 2
68:18 - 9.9 true
68:20 - and then another table because this is a
68:23 - table here so we'll have to forfeit that
68:25 - as well
68:26 - if we want to see the items in it
68:29 - now you might be wondering how does this
68:31 - work how can we do that
68:34 - well if we go look here and we say print
68:38 - tbl at index 1 and this is called an
68:41 - index
68:43 - and we run it we'll get this
68:47 - this right here is the first index
68:50 - so if we were to go like this
68:53 - we'll get index 1 which is this
68:56 - index 2
68:57 - index 3
68:59 - index 4
69:01 - index 5 and the more you add of course
69:04 - the more indexes there will be
69:07 - so it starts from 1 and currently it has
69:09 - up until 5. if we go 5
69:13 - then we'll get a table
69:15 - if we say 5
69:17 - 1
69:18 - then we'll get okay because here we're
69:21 - saying
69:22 - okay go to this fifth index here
69:26 - and then in this fifth index return the
69:28 - item at index one of it so this would be
69:30 - one
69:33 - and this here would be index 2 of this
69:38 - table
69:40 - we'll cover this a little bit more in a
69:41 - second but this is just as an example
69:44 - if i were to say
69:47 - 4 will get true
69:49 - if i were to give a value that doesn't
69:51 - exist like 9 we'll get nil
69:54 - nil just means empty doesn't exist
69:57 - nothing
69:59 - now usually you'd actually create a
70:01 - table with the same data types it's not
70:05 - too often that you'll see tables using
70:07 - different data types
70:09 - unless you use it in a sense of an
70:11 - object which we'll get to a little bit
70:14 - later but when you just use it as an
70:17 - array so a way to store multiple values
70:21 - inside of one variable
70:23 - then you'll usually just use the same
70:25 - data type so just numbers or just text
70:28 - for example let's say we have local
70:32 - x
70:33 - well let's actually start at a a
70:36 - b c
70:39 - d
70:40 - e and you can imagine this going up
70:41 - until z
70:43 - and we could say we're storing one two
70:46 - three four five now you might already be
70:49 - seeing how this is not really very
70:51 - practical
70:52 - because it's fine to have a bunch of
70:54 - variables lying around that whole
70:57 - storing their own values but all of
70:59 - these values are related in some way
71:02 - but they're stored in their own
71:04 - variables which there's nothing wrong
71:06 - with this method it's just there's a
71:08 - more comfortable way to do this where we
71:10 - could go local
71:12 - alpha
71:14 - nums
71:15 - and as we'll get all the alphabetical
71:17 - numbers which we would have usually done
71:19 - by doing a and then a is equal to one b
71:22 - b is equal to two c and what not but
71:24 - here we can create a table
71:27 - with one two three four five
71:30 - this is the same but instead of having
71:32 - to use a specific variable so print
71:37 - a
71:38 - we've already grouped them together and
71:39 - we can just say
71:41 - print
71:42 - alpha numbers at index one
71:45 - this will give us the same value because
71:47 - a and one is the same thing
71:50 - if you wanted you could also put
71:52 - variables in here you're not limited
71:55 - to just values because variables on the
71:58 - end of the day are just values so this
72:00 - will still work perfectly fine
72:03 - if i say index 2 or b lies then then we
72:06 - get 2.
72:08 - if i were to remove this then this will
72:10 - no longer work
72:11 - so we'll get nil because b has never
72:14 - been defined
72:16 - now let's go here and say we have one
72:18 - three five
72:20 - seven 9
72:22 - and we can just call this
72:24 - local nums
72:27 - then let's say we want to add another
72:28 - value into this
72:30 - table here let me just also for
72:33 - through each item so one to the amount
72:36 - of nums
72:38 - and here we can print
72:40 - nums at index
72:43 - i
72:44 - if we run this we'll get one three five
72:47 - seven nine
72:48 - now let's say i want to add one thing in
72:50 - here before we run that we can say table
72:53 - dot insert
72:55 - and this will insert an item
72:57 - into an
72:59 - table
73:01 - so first we specify the table in this
73:03 - case nums
73:05 - then you can either
73:08 - specify what you want to put in here or
73:11 - where you want to put it in
73:13 - if you don't specify where it's just
73:15 - going to put it at the end so if i say
73:17 - 19 here
73:19 - and i
73:20 - stop here it will insert 19 at the end
73:24 - so here if we run it we get 19.
73:27 - but if i instead in the middle put
73:30 - two then we'll insert 19 at position 2
73:35 - here so if i run this we'll get 1 19
73:39 - free
73:41 - so this here allows you to get a
73:42 - position you want to put it in without
73:45 - it it will just append it to the end of
73:47 - this table
73:50 - you can of course also remove
73:53 - and here you pass in the position not
73:55 - the value but the position so if i say
73:57 - one
73:58 - one will no longer exist
74:01 - if i say
74:02 - four
74:03 - four will no longer exist
74:06 - because four was seven
74:09 - there's also a nice special way you can
74:11 - loop through
74:12 - these tables which is underneath this
74:15 - normal for loop
74:17 - instead of using hashtag nums
74:20 - you can use pairs
74:22 - so you're good
74:24 - pairs
74:25 - and you pass in numbs noms
74:27 - now you can get
74:30 - ka and b
74:35 - so for k and in v
74:38 - in pairs num if we were to print out k
74:43 - we'll get these values
74:45 - so 1 to 5. this would be the index so in
74:48 - this case we could say index
74:50 - and v would be value
74:54 - so index we can actually just do index
74:57 - and in value and it will
74:59 - do work the same
75:00 - so index one has one index two has three
75:04 - index three has five
75:07 - so this is a nice way you can four
75:09 - through
75:11 - a table in case you don't want to for
75:13 - through the numbers maybe you want the
75:15 - index
75:17 - as well as the value well you can get
75:18 - both but then pairs it's split
75:22 - it's up to you which you prefer doing
75:26 - now let's talk about multi-dimensional
75:29 - tables
75:30 - also known as multi-dimensional arrays
75:33 - this is a table inside of another table
75:37 - for example
75:39 - here we can create another table
75:42 - one
75:44 - eight
75:45 - three
75:46 - okay let's create a few more
75:49 - this can have four this can have seven
75:53 - this can have five
75:56 - this can have two
75:58 - and then last we can have six and
76:01 - nine
76:04 - now if we were to print out
76:08 - nums
76:10 - we'll get our table
76:13 - location in the ram
76:15 - if we were to print out number index 1
76:17 - we'll get the location of the table in
76:19 - that table
76:23 - if we specify another value in here
76:27 - then we'll get the first index of the
76:29 - first item here
76:32 - if we say 2 we'll get 8.
76:35 - if we change this here to 2
76:38 - then we'll get 2 because
76:41 - this is index 1
76:43 - of the first table
76:47 - this is index two of the first table and
76:49 - this is index three so this will be the
76:51 - first table
76:53 - now inside of it you have index one of
76:56 - the first table in the first table or
76:58 - the first item in the first table
77:00 - and then index two and index three and
77:02 - then index three
77:04 - two
77:05 - one
77:05 - and then one
77:07 - two
77:08 - three
77:10 - if you were to pass in
77:12 - something like
77:14 - hashtag nums
77:16 - you'll get the amount of tables in this
77:18 - first table so if i were to copy this a
77:20 - few times
77:21 - we'll get five
77:24 - but if you specify an index here for
77:26 - example one you'll get the length of the
77:29 - items here
77:31 - free
77:32 - so this is free
77:34 - this is five
77:35 - we can add more here so
77:39 - now it will have a different length
77:43 - if you want to display all of the values
77:45 - inside of this
77:48 - then you can also use a for loop
77:52 - so here you can go
77:54 - 4
77:56 - i becomes one to the num or to the
77:59 - amount of tables and nums
78:02 - and then for
78:04 - this time j
78:05 - because we can't really declare i that
78:07 - won't be a good idea
78:09 - for j becomes 1 to the amount of items
78:12 - inside of i because i is a table so
78:14 - we'll get the amount of items in i
78:17 - so this would be i that each item inside
78:19 - of i would be
78:22 - or each value here would be j so this is
78:25 - i
78:26 - this is j
78:28 - so here we could print
78:31 - nums
78:34 - so nums and then at index i
78:37 - and index i will give us the table so we
78:40 - specify the next index which would be
78:43 - j
78:45 - now
78:50 - and in my band this here is a number
78:53 - it's not a table we have to say nums at
78:56 - index i
78:58 - my bad because i is a number
79:02 - just like j is a number it's not the
79:04 - actual value
79:06 - we run this as you can see we get 183
79:10 - which is the first items
79:13 - and then we get
79:14 - four to six which is the second
79:17 - and then five seven
79:19 - seven five nine which is the last
79:23 - so if you're having a bit of trouble
79:25 - with this just note nums at index and in
79:28 - the first index
79:30 - which we can call x
79:32 - would be the first item
79:34 - or the second out of whatever x is here
79:38 - if you add another one here it will try
79:40 - and access the item inside of this item
79:43 - so x which is this and we'll try to
79:46 - access y inside of it so let's say eight
79:49 - if you have a table inside a table
79:51 - inside a table you could also add your z
79:54 - so if i were to have a table here as
79:57 - well
79:59 - and we can go 2 4 5
80:02 - and we're gonna have a few more
80:04 - then i could do this where i have three
80:07 - attached to each other to access each
80:09 - item in a table
80:11 - but take note tables can become
80:13 - incredibly complex incredibly fast so i
80:17 - always recommend
80:19 - to
80:20 - when you use a table not
80:22 - add too many items into the table
80:26 - as in don't add three or four tables
80:29 - inside of one table here
80:30 - so this right here is already very
80:32 - complex if i were to go here and i were
80:35 - to add another table here
80:37 - so now i were to add another table of
80:40 - more values
80:42 - then it will be more complex because now
80:46 - it's not no longer x y and z it has
80:48 - started going to complexity where x
80:51 - should now be shifted to something else
80:53 - i'm just going to move this here to the
80:55 - front
80:57 - and we can just put an a here for now
81:00 - so i would say always follow the x y z
81:04 - rule
81:05 - this is the complexity rule where you
81:07 - don't have more than three tables inside
81:10 - of one another
81:11 - if it becomes more than free it becomes
81:14 - very difficult to not only manage but to
81:16 - work with
81:17 - so i'd always say try and stick with
81:20 - free or less tables
81:23 - so here there are three tables
81:26 - if you were to remove this like that
81:29 - then there are three tables so this
81:30 - table here this table here and this
81:32 - table here
81:34 - so unless you have specifically named
81:36 - items like an object which we'll be
81:38 - getting to
81:40 - then never go past the xyz complexity in
81:44 - a table
81:45 - usually just try and keep it as simple
81:47 - as possible
81:49 - then you also have one two three if
81:51 - we're to go like that
81:53 - now let's say we want to convert this
81:55 - into a piece of text
81:57 - well we can go print
82:00 - table dot concat
82:03 - and this will
82:04 - basically join a table of all of its
82:07 - elements depending on the separator you
82:09 - give it
82:10 - for example if we pass in
82:12 - nums to
82:14 - or nums and we pass in a space
82:17 - then it will print it out
82:19 - with just spaces between each item
82:23 - this here is now a string
82:25 - take note this is a piece of text
82:29 - and you can replace this with anything
82:30 - so it can be a semicolon another number
82:34 - so dash dash dash will work
82:37 - and so on
82:39 - and then finally for named items inside
82:42 - of tables and we'll get more deeper into
82:44 - this but for named items you can go
82:46 - local tbl
82:48 - and here we can do something like
82:52 - name is equal to mic
82:56 - and then age is equal to 12.
83:01 - now if we go tbl as index one and we
83:04 - print that
83:06 - then we get nil
83:09 - but if we go tbl
83:12 - and then
83:13 - name
83:15 - we get mike so this is a named table
83:18 - some people also see it as a dictionary
83:20 - or an object
83:22 - and yeah that those are the basics of
83:24 - tables
83:30 - now a function is a snippet of code that
83:34 - you can execute as if it was a variable
83:38 - for example let's go here and say
83:42 - local function
83:44 - say hello
83:47 - and this will just print
83:48 - hello
83:50 - now we can call this by going say hello
83:53 - and then adding two brackets at the end
83:57 - and this will call this function here
84:00 - we will print hello so if we run this
84:04 - we get hello
84:06 - and of course we can put as many things
84:08 - in here as we want
84:10 - as you can see
84:12 - if we were to go
84:15 - print one
84:17 - and then two as well and we were to do
84:19 - this so print
84:21 - it two times by calling hello
84:24 - then we'll get hello one two hello one
84:27 - two
84:28 - so every time you call this function
84:30 - here it will execute the code inside of
84:33 - it
84:34 - and you can call it as many times as you
84:36 - want
84:37 - this is a great way to stop yourself
84:39 - from having to copy paste copy paste
84:42 - copy paste
84:43 - this is a very common practice where
84:45 - programmers will try and reduce the
84:47 - amount of times they have to copy paste
84:50 - a line of code or even a block of code
84:53 - variable variables can save you a line
84:55 - of code
84:57 - a function can save you a block of code
85:01 - now let's say we wanted to make this
85:03 - hello function a bit more complex
85:07 - so instead of just saying hello we want
85:11 - to pass in a name for example hello jack
85:15 - well this here isn't very useful because
85:18 - it will always print out the same name
85:22 - so instead what we can do is we can pass
85:24 - in an argument
85:27 - and we can call it name
85:28 - so this is like a variable that gets
85:31 - passed into this function
85:33 - now instead of saying jack we can say
85:35 - dot dot name
85:37 - dot
85:38 - dot there we go
85:41 - now if we go here and we say
85:44 - look
85:46 - by passing it in here between these
85:48 - brackets and this would be name
85:51 - we'll get hello luke
85:53 - we change this to jack
85:55 - we'll get hello jack
85:59 - sometimes you want to give it a default
86:01 - value
86:03 - so if you don't pass any name you want
86:05 - to name to be a default value well to do
86:08 - that we can say local name is equal to
86:11 - name or
86:13 - jack
86:14 - so what's happening here is we're
86:16 - declaring a new name variable
86:19 - and then we're basically overwriting
86:21 - what this is going to be on the end of
86:23 - the day so we're saying this name
86:25 - is equal to itself
86:27 - or if there's nothing in here
86:30 - if this is a false value such as nil
86:34 - then make it jack
86:36 - so it will default to jack
86:38 - so if we have three here the first has
86:41 - nothing inside of it
86:43 - the second has mike and the third has
86:46 - sally
86:47 - then if we run this we get hello jack
86:49 - hello mike hello sally
86:53 - without that there if we did this
86:56 - we'd get an error because you cannot
87:00 - concatenate a nil value
87:03 - because this name here would be nil if
87:05 - we didn't pass in anything in here
87:09 - let's get a bit more complex and do sum
87:13 - and this will get the sum of two things
87:17 - let's say we get
87:18 - num1
87:20 - and num2
87:23 - then here we can just
87:26 - return the value
87:28 - but how does one return a value here
87:31 - because
87:33 - we could print out what it is so print
87:37 - num1 and num or num1 plus num2
87:42 - and we could call this sum
87:45 - 10 and just to show you could also go
87:47 - local x is equal to 20 you could also
87:50 - pass a variable in here so x
87:54 - that will be 10 plus 20. if we run this
87:57 - we get 30.
87:59 - but what if we want to work
88:01 - with the value that this returns that
88:04 - this would give us
88:07 - so we wanted to store local
88:11 - answer is equal to sum and then print
88:16 - the answer is
88:20 - and then
88:21 - ons
88:23 - what if we wanted to do something like
88:24 - this
88:26 - well we'll get a problem here because
88:29 - we cannot concatenate a nil value this
88:32 - here is nil
88:34 - because sum just prints out this value
88:37 - here
88:38 - to return a value we can use return
88:42 - and this will return this value
88:46 - you could either do it like this
88:48 - or you could go
88:50 - local
88:51 - result
88:53 - is equal to that and then return result
88:56 - now anything here with return will be
88:59 - returned from this function
89:01 - and nothing after this return will be
89:03 - executed which we'll explore in a second
89:06 - if we run this now we get the answer is
89:09 - 30 because this here now returns this
89:12 - result
89:13 - which can be either in its own variable
89:17 - or like that
89:20 - but take note we can go here and say
89:22 - print
89:25 - thunk start
89:27 - and in
89:28 - funk
89:29 - end
89:30 - you'll notice we get some red squiggly
89:32 - lines
89:34 - and the file expected after
89:36 - return that is because after return
89:41 - we are not allowed to put anything there
89:43 - anymore
89:44 - because after return nothing will
89:47 - execute
89:48 - so if we run this
89:50 - it will just press an error because
89:52 - nothing should be after return once you
89:55 - return
89:56 - the function stops executing
90:00 - but this doesn't limit you as much as
90:01 - you think it would
90:03 - if we say
90:05 - let's go here and say local val
90:08 - num1 plus num2
90:11 - if val
90:14 - is more than 10
90:16 - then
90:18 - return val
90:21 - if
90:23 - val
90:24 - is less than 100
90:25 - then
90:27 - return
90:28 - negative vowel
90:30 - otherwise we could just return
90:33 - val
90:34 - times 2.
90:36 - so this is an example where just because
90:39 - we have a return doesn't mean it will
90:41 - stop everything else from executing
90:44 - because this return will only run
90:47 - if the value is more than 10.
90:50 - and this code here will never really
90:52 - work as expected so let's make that
90:53 - equal to 10
90:56 - there we go
90:57 - so this will only execute if the value
90:59 - is equal to 10. this will only execute
91:03 - if the value is less than 100
91:05 - but not equal to 10 because this will
91:08 - stop execution first
91:11 - so if we say
91:13 - 1 plus 2
91:17 - then that will give us negative 3
91:19 - because it is less than 100 so it will
91:22 - give us this
91:24 - if we say
91:26 - 8 plus 2
91:28 - it will give us 10
91:30 - because the value is 10.
91:33 - if we were to say here
91:36 - 101 so 101 plus 2
91:40 - that will give us 206 because it's the
91:42 - value times two
91:50 - let's first try to
91:53 - create a file
91:55 - that is pretty simple so let me just
91:57 - also open up my
91:59 - file viewer here so we can see if any
92:01 - files appear
92:03 - io dot output
92:07 - and here we can pass in a file we want
92:09 - to create
92:11 - so
92:12 - my file
92:14 - dot txt
92:16 - this will create a file
92:18 - my file.txt
92:21 - if i open the containing folder you'll
92:23 - see there's my file.txt now if i were to
92:26 - delete it from here
92:27 - you'll notice it also deletes it from
92:29 - here this here is the same as this here
92:33 - anyhow so we create this file
92:36 - then that will happen
92:38 - but take note
92:40 - it will empty the file if it already
92:42 - exists so if i go and put some text here
92:46 - let's actually have it here on the side
92:47 - of the screen
92:49 - and i decide i want to execute this
92:52 - as you can see it empties the file
92:55 - so you should take note here it will
92:56 - create the file but if it already exists
92:59 - it will empty the file
93:02 - now this output can be used also with
93:05 - writing to a file so io dot write
93:09 - and here you can put some text you want
93:11 - in the file
93:13 - hello world
93:16 - and we just have to io.close whenever we
93:19 - use any of these
93:21 - because you don't want the file to be
93:23 - open
93:24 - and then later on try to work with it
93:26 - again or if other program tries to work
93:28 - with it but yours already has it open it
93:31 - will cause issues
93:33 - so you always close the file after
93:35 - working with it
93:38 - now if we were to run this we can
93:39 - actually show this here the side again
93:42 - we run it we get hello world
93:45 - if we run it again we'll get the same
93:48 - output because this anyways rewrites
93:51 - this file it will empty it if there's
93:54 - nothing inside of it or if even if there
93:56 - is something inside of it
93:59 - that's the first way you can write to a
94:01 - file
94:02 - now the first way to read from a file we
94:05 - go io dot
94:07 - input this time so instead of output we
94:09 - are using input and then the file so
94:13 - myfile.txt
94:16 - then we can of course io.close
94:19 - and here we can say local
94:21 - file
94:22 - data
94:24 - is equal to io.read
94:27 - and then we can just say
94:29 - asterix all
94:31 - this will read everything inside of this
94:33 - file
94:34 - and you can of course print file data
94:38 - we run it we get hello world
94:42 - we can add some more like x2 x3
94:45 - i am cool
94:47 - if we save that and we run it here we'll
94:49 - get header world x2 x3 i am cool
94:54 - so you first take the file we want to
94:56 - read and say it's an input file because
94:58 - you want to take input from that file
95:00 - then we read it with the asterix all
95:03 - which means read everything inside of
95:05 - this file
95:07 - and we can print the data that we read
95:09 - and then we can close the file or we
95:11 - could close the file and then print the
95:13 - data whichever you prefer
95:15 - so that's the first way to read and
95:17 - write
95:18 - a file
95:20 - now the second method is what you'll
95:21 - most likely see being used
95:25 - so let's first try right to a file that
95:27 - will be local and we can say what
95:29 - variable we want to save this file in so
95:32 - file
95:33 - io.open
95:36 - the file name so myfile.txt
95:40 - and then what you want to do
95:43 - so here we could specify
95:45 - all of these so read write append read
95:48 - and write
95:50 - write and read i think
95:52 - append and everything else read bite
95:54 - right byte append byte
95:57 - and so on and so forth but we're mainly
96:00 - going to be focusing on these here
96:03 - so first we'll have a write
96:06 - now w just means right so we'll write
96:08 - data to a file so here we can then say
96:12 - if file is not equal
96:16 - to nil so if the file we're trying to
96:18 - open exists
96:21 - then
96:23 - so if the file we're trying to open
96:25 - can be opened
96:28 - then we want to go
96:30 - file
96:32 - right and we can just say
96:34 - hello there and i will write to the file
96:38 - and then of course file
96:40 - close
96:42 - else if we could not open this file we
96:45 - could just print
96:47 - could not open the
96:50 - file now if we were to run this we'll
96:53 - get hello there
96:55 - if we were to delete this file and then
96:57 - run it
96:59 - it will generate the file and enter
97:01 - hello there
97:03 - so this method is usually the preferred
97:05 - method above i o dot output
97:08 - as well as i o dot input because we'll
97:11 - learn how to read right now
97:14 - now there are multiple ways you can read
97:16 - from a file
97:18 - one way you can do it is going file
97:22 - and then read
97:24 - and here we can just specify
97:27 - astrix all
97:29 - and this will read everything
97:33 - so if we go here and say x2 x3
97:38 - goodbye
97:40 - and we read it
97:41 - of course we should maybe print out what
97:43 - we get so print
97:45 - then we get hello there x2
97:48 - x3 goodbye
97:51 - you also have
97:53 - asterisks line which will only read one
97:56 - line so we go here
97:58 - hello there if we then
98:00 - do it a few times
98:02 - each time we do this it will read a new
98:04 - line so hello there x2 x3
98:10 - so if you want to read line by line this
98:12 - is a good way to go about it by using
98:14 - this asterisk line otherwise you can
98:16 - just go astrix all and that will read
98:18 - everything
98:19 - and then last but not least let's take a
98:22 - look on how to append it to a file
98:25 - now when you write to a file you will
98:27 - overwrite everything that's already
98:29 - inside of the file so if i were to go
98:31 - here
98:31 - w and then say right
98:34 - and change this to goodbye
98:36 - then it will overwrite everything and
98:39 - also doesn't help if you print it
98:41 - but it will overwrite everything and add
98:43 - our goodbye
98:45 - but what if we wanted to add something
98:46 - to the end of this file
98:49 - then we could use a which means append
98:53 - so then we can say appended
98:56 - text
98:57 - if you run this we'll get appended text
99:00 - if you wanted to go to the next line you
99:01 - can use a backslash n here which means
99:03 - newline
99:05 - appended text 2.
99:07 - now let's append the text to on the
99:09 - second line
99:11 - so that's how to append
99:18 - now the term module in lua
99:21 - refers to a lua file
99:25 - that returns a single table when it is
99:28 - called so it returns a table or an array
99:31 - or an object as semi to understand it
99:35 - so it's basically any file that's not
99:37 - this main file that returns something on
99:39 - the end of the day
99:42 - and then you also have a package a
99:44 - package is a collection of modules
99:46 - so if i say i'm going to go and install
99:48 - a lua package
99:50 - that means i'm going to install a few
99:51 - modules that will allow me to make my
99:54 - coding in lua easier for example
99:57 - the
99:59 - luna cjson package because that's a
100:02 - package of modules
100:04 - i am going to use in my program to read
100:06 - json
100:08 - all right so let's get an example in
100:10 - here i'm going to
100:12 - create a new lua file call it
100:16 - custom.lua you can call it whatever you
100:19 - want
100:20 - then here
100:21 - i'm going to go and say
100:25 - mod
100:26 - is equal to a table
100:28 - so i'm saying
100:30 - this is a table here
100:33 - we can then go here and say
100:34 - function
100:37 - mod dot sum and here we could say x y
100:42 - and in return
100:44 - x plus y
100:46 - so we're putting the sum as part of this
100:49 - mod here
100:50 - you could also go sum
100:53 - is equal to function
100:55 - and then say x plus y this is just as
100:58 - valid if you just say return
101:00 - because these two mean the same thing
101:03 - if we were to put in x and y here
101:05 - so this will be the same thing
101:08 - and of course we can have our mod here
101:10 - with let's maybe say say hello
101:14 - and in here
101:15 - you can maybe get a name
101:18 - and then we could say
101:19 - print
101:21 - hello
101:23 - name now these are just very basic
101:24 - examples you can put any function you
101:26 - want here
101:27 - i'm just making very basic functions
101:30 - here as an example to show you
101:32 - then we return
101:34 - mod
101:35 - because this mod will now be used
101:37 - outside of this file
101:40 - so here in main.lua
101:43 - we can now use this module
101:46 - local mod
101:48 - is equal to require
101:50 - and then we pass in the name here so
101:53 - custom dot
101:56 - cass tem dot
101:58 - lua or just custom because it will
102:01 - automatically add the dot luo in
102:03 - searching for it
102:05 - this will import this module for us and
102:07 - store all of the things being exported
102:10 - inside of this right here to that
102:12 - variable
102:14 - we can then go
102:15 - print
102:17 - mod dot sum
102:19 - 10 5
102:21 - or
102:21 - mod dot say hello
102:25 - mic
102:26 - if we run now we get 15 and hello mic
102:30 - all of them are made inside of this
102:32 - module here
102:33 - this is a way to keep one file from
102:36 - going like to 10 000 lines of code
102:38 - because you could split it up so one
102:41 - file could have a thousand another could
102:42 - have two thousand another could have
102:44 - five hundred
102:45 - and they could just make the process of
102:48 - reading this main file much easier since
102:50 - we're importing the stuff we need from
102:52 - outside
102:54 - but as the basics of modules it's just
102:56 - another file
102:58 - that's returning a
103:00 - table
103:02 - and this table contains a bunch of
103:04 - functions or variables
103:06 - that we can use here once we import it
103:09 - with require
103:16 - what exactly is
103:18 - oop
103:20 - oop
103:21 - is object orientated programming it is
103:24 - when you think of your code as objects
103:28 - for example
103:30 - you have a car that's an object a car
103:33 - could have wheels a car could drive
103:36 - a car could do this
103:38 - you have a pit
103:40 - you could have a cat pit you could be
103:42 - able to feed your pit you could be able
103:45 - to give your pet a name because a pet is
103:48 - just an object
103:50 - you could have a cup a cup is just an
103:53 - object that you could fill with water
103:56 - that's the whole idea
103:58 - behind
103:59 - oop
104:01 - everything in your code is an object
104:04 - some people love oop some people hate it
104:07 - i personally love oop when doing game
104:09 - development
104:11 - but prefer using procedural programming
104:13 - basically what we've been doing up until
104:15 - now
104:16 - with normal programs
104:19 - now in lua there are multiple ways to do
104:22 - oop
104:23 - there's not just one not just two
104:25 - there's more
104:26 - i'm going to show you one way to do it
104:29 - but if you don't like this method you
104:30 - could go and search for a different
104:32 - method that you might like more
104:34 - there's one that uses meta tables but i
104:37 - find that method to be very confusing to
104:40 - understand and a bit
104:41 - difficult to use
104:44 - so instead i like to use functions and
104:46 - simulate oop with them
104:49 - i'll show you an example let's create a
104:52 - object
104:53 - local
104:54 - function
104:55 - pit
104:57 - this is your pit
105:00 - now your pet could be a dog or a cat but
105:03 - this is a pet
105:04 - it is what you use when you go
105:08 - charlie come here i have a treat for you
105:11 - you're calling your pet and
105:13 - we will return
105:14 - a table
105:16 - because a table is the best way to get
105:18 - an object if you maybe come from
105:22 - python or from javascript then
105:25 - dictionaries or objects it would be this
105:27 - same concept
105:29 - and here we could do something like name
105:32 - is equal to
105:34 - charlie
105:36 - then here we could go and say local
105:38 - pet
105:40 - or even cat is equal to pet
105:44 - and then we could print
105:46 - cat.name
105:48 - anything inside of this return is public
105:51 - and can be used with this object
105:54 - now if we were to run this we get
105:56 - charlie because this is just a table
106:00 - but we disguise it as a function which
106:03 - generates an object for us
106:06 - this is nice because now i could have
106:07 - two pits one that's a dog
106:10 - and now i could go
106:12 - dog.name
106:14 - both of them will be charlie so this pit
106:16 - is a bit flawed
106:17 - let's allow us to change the name so
106:20 - name
106:21 - we would say name is equal to name or
106:24 - charlie
106:25 - so if they didn't enter a name it will
106:27 - default to charlie
106:29 - here we could say jack
106:31 - so my pet is called jack now my cat is
106:34 - charlie my dog is jack
106:37 - on the end of the day
106:39 - these are just a bunch of tables
106:42 - but we can create or generate tables for
106:45 - us by calling functions
106:48 - so that's pretty neat
106:50 - now take note if something is not in
106:52 - this return it won't be returned for us
106:54 - to use if i go age is equal to 10
106:58 - i cannot use this age here i could use
107:01 - it here so i could go
107:04 - days
107:05 - alive is equal to h times three six five
107:10 - there we go
107:12 - now here i can't go cat age and then
107:16 - dog days alive only dog will return a
107:19 - value because age is not returned
107:22 - only the things in return is returned
107:24 - also we can just go local here
107:27 - so if i were to run this we'll get nil
107:30 - and 3650
107:32 - that is because age is not returned so
107:35 - we don't know what it is
107:38 - this can be seen as a private property
107:41 - of your object so something you can use
107:43 - only in your object and it cannot be
107:45 - used outside of it
107:48 - and this here could be seen as a public
107:50 - property that can be used and called
107:52 - outside of this object
107:55 - you then also have two types of
107:57 - functions
107:59 - you have the
108:01 - speak
108:02 - and this function is just a normal
108:04 - function
108:06 - and we can just say print
108:09 - and let's just go meow
108:12 - even if it's a dog let's just say it
108:13 - meows
108:15 - then you also have another function
108:17 - which we could call
108:19 - feed so if you want to feed this pit
108:22 - that can be a function that takes in
108:24 - itself and we'll discuss it in a second
108:26 - and for now right now we don't have to
108:28 - do anything here we can just say print
108:31 - okay so here we have a basic
108:34 - class with two type of functions
108:37 - this first function here
108:39 - can be called with this dot syntax so
108:41 - speak
108:42 - and this is return anything so we don't
108:44 - have to print it
108:46 - but you take note this second function
108:49 - so we could feed here
108:52 - will not work
108:53 - because it takes in self
108:56 - and self is what you use to specify
108:59 - this object
109:01 - this right here
109:03 - this is the self it is this table self
109:06 - is referring to this table it's
109:08 - referring to itself
109:11 - but this won't work so if we run this
109:13 - we'll get meow and eating
109:17 - when we go
109:19 - self dot
109:21 - name and we try and run it now
109:24 - we'll get an error
109:26 - because self is a nil value
109:30 - so once we want to use self here which
109:33 - allows us to reference anything inside
109:35 - of this table
109:36 - we cannot use this dot syntax anymore we
109:39 - have to use
109:40 - colon
109:42 - colon
109:43 - basically passes dog into itself in a
109:46 - sense
109:47 - so this first value here
109:50 - is going to be this here
109:53 - so if we go here and we run this we get
109:55 - eating and then jack
109:58 - so these are the two functions you'll
110:00 - usually get
110:02 - i usually just say make all of them
110:04 - include self even if you're not using
110:06 - self because then all of your functions
110:08 - will require a colon and you'll never
110:10 - have to wonder
110:11 - is this function not working because it
110:13 - needs a dot or a colon
110:15 - it will always need a colon so i always
110:17 - say include self even if you're not
110:20 - using self
110:22 - and itself here can we use to access any
110:24 - value inside
110:26 - of this right here
110:28 - so i can go self
110:29 - speak
110:31 - and now we can speak we run this we get
110:34 - meow eating jack and then meow that is
110:38 - the basics of these types of functions
110:41 - but usually just stick with self and you
110:43 - won't have to memorize what the other
110:44 - does
110:46 - now let's say
110:48 - you want a type of pet
110:50 - that isn't in its own a pet or it is a
110:54 - pit object but it's more specific than
110:56 - that
110:57 - this is called inheritance
111:00 - so let's say i want another type of
111:01 - object so local
111:03 - function
111:04 - dog right
111:06 - dog takes a name
111:08 - but now
111:09 - we go return
111:11 - and we're like okay
111:13 - i want all of these inside of dog as
111:15 - well
111:17 - so we copy we paste
111:19 - we now have all of the same things
111:22 - but now we want to add a few new things
111:23 - we want to add breed which is equal
111:26 - to doberman
111:28 - and we have loyalty because dogs can be
111:31 - very loyal
111:33 - and we'll make that equal to zero
111:35 - so now we have a dog that has all the
111:38 - same items as this pit object here
111:41 - and we can go
111:43 - local
111:44 - doberman is equal to
111:46 - dog jesse
111:49 - now we can say
111:51 - doberman
111:53 - dot breed and now we can get the breed
111:55 - of this doberman
111:57 - and that's while we're adding it
111:59 - doberman dot
112:00 - name if we now run this we'll get jessie
112:04 - which is a doberman
112:06 - cool
112:07 - but now we decide here inside of our pit
112:11 - we want to add another item
112:14 - we want to add
112:16 - status and status
112:19 - will be something like hungary
112:22 - now since we want dog to have everything
112:24 - played as we now have to remember and
112:27 - this could be like a ton of objects that
112:28 - could have the same types of items in
112:30 - pit but now we have to remember hmm
112:34 - we have to copy this and we have to go
112:36 - paste it here as well
112:37 - we have to remember that and a lot of
112:39 - times you'll have five or even more
112:41 - objects that will be inheriting from
112:43 - this object so it will have all the same
112:45 - items
112:46 - so you will have to remember all of the
112:48 - objects that's using this object so you
112:50 - can go and copy paste all of these here
112:54 - this isn't the way to go
112:55 - instead you should use inheritance
112:59 - inheritance is when you inherit all of
113:01 - the
113:02 - different types of properties in one
113:04 - object
113:06 - and you use it in another
113:08 - so here we could say
113:11 - local dog is equal to pet and we pass in
113:14 - this name that gets passed into dog
113:16 - cool
113:18 - now we return
113:21 - dog
113:22 - and then instead of creating this object
113:24 - here we can now just append to this
113:26 - already existing one
113:28 - so dog
113:29 - dot
113:30 - breed
113:32 - and we can make that equal to this right
113:34 - here
113:35 - dog
113:36 - and then dot loyalty
113:39 - like that
113:40 - and then we can remove this part here
113:43 - and now we have successfully inherited
113:46 - all of the properties that's being
113:48 - returned here so we get name we get
113:49 - status we get speak and we get feed
113:53 - we get all of these here
113:56 - and now we add two more properties onto
113:58 - this property we have or onto this table
114:01 - we get from this
114:02 - and return that
114:04 - now we'll have both the name and the
114:06 - breed even though we didn't copy paste
114:09 - any of these here
114:10 - if you run this we'll get the same
114:12 - output and once we change anything here
114:16 - so anything here for example we can add
114:18 - points for some reason
114:20 - and make that equal to 10.
114:22 - i can now in my dog
114:25 - i can access
114:26 - points
114:28 - even though i didn't actually copy paste
114:31 - that data here
114:33 - we can now also go breed and we could
114:36 - rather pass in the breed
114:38 - or
114:39 - doberman
114:41 - so now we could actually go here and say
114:44 - poodle so now we get a poodle instead
114:47 - we run this we get jc poodle
114:50 - we can overwrite functions that already
114:53 - exist here as well
114:54 - for here we say meow
114:57 - we could go
114:59 - dog
115:00 - dot speak
115:02 - and speak is a function that takes
115:04 - itself
115:06 - and then instead of saying meow it says
115:11 - woof
115:12 - so now when we go
115:14 - poodle
115:16 - speak
115:17 - it will say woof
115:19 - this is the power of inheritance so we
115:21 - can have a bunch of objects that's
115:23 - inheriting from this object so now we
115:25 - can maybe go here
115:27 - and we can create a cat
115:29 - which has the same
115:31 - types
115:32 - but this time it maybe doesn't have a
115:34 - breed because they don't know any cat
115:35 - breeds
115:36 - it doesn't have loyalty doesn't have
115:38 - speak
115:40 - and here's a cat
115:41 - and we can go here and say
115:44 - lazy and that would be cat that lazy
115:48 - is equal to true
115:50 - so if the cat is lazy or not
115:53 - now this cat has all of the items inside
115:56 - of pit
115:57 - and one more that's lazy
116:00 - and of course if you wanted to you could
116:02 - make cat inherit everything from dog
116:05 - you just of course have to pass in the
116:07 - breed which i don't know idk
116:10 - and now cat has all of the items inside
116:12 - of dog and the pit because dog has
116:15 - everything inside of pit
116:18 - so cat now has everything inside of pit
116:20 - and dog
116:21 - because cat is inheriting from dog here
116:25 - and this is the basics of oop you might
116:27 - not quite understand everything here yet
116:29 - but once we get to the game development
116:31 - section of this course then you'll
116:33 - quickly start to understand the power of
116:36 - object orientated programming and how
116:39 - everything here connects with one
116:41 - another
116:42 - and hello everyone if you are enjoying
116:44 - this tutorial please leave a like and
116:46 - subscribe for future tutorials
116:51 - and hello everyone welcome back
116:53 - to another tutorial so in this tutorial
116:56 - we'll be looking into
116:57 - love 2d live 2d is basically a framework
117:02 - that you can use to make 2d games in lua
117:06 - now first of all you need to install
117:08 - love2d
117:10 - if you are on windows then you can just
117:12 - go and get the installer if you're on
117:14 - mac you can get the zip and if you're on
117:17 - ubuntu or linux you can just get one of
117:19 - these
117:20 - since i am on arch i can just do this
117:23 - i'm going to go to terminal new terminal
117:25 - and just pac-man dash is
117:29 - love and you just need to consider that
117:32 - and that will woo and that will install
117:36 - love 2d for me
117:40 - so as you can see it's already installed
117:42 - and up to date so i'm not going to
117:43 - install it but if you're on arch that's
117:45 - how you would install it
117:48 - cool then once you have it installed
117:50 - then you can just say love
117:51 - and that should pop up something similar
117:54 - to this
117:56 - you might not have this exam this
117:58 - exactly same thing here it highly
118:01 - depends i have loved version 11.3 if you
118:04 - have a lower or a higher version of love
118:06 - you will see something different
118:08 - i do recommend having the same version
118:10 - of love as i do or at least a higher
118:13 - version
118:14 - because a lot of the features may not
118:16 - exactly work on later or newer versions
118:19 - of love so i'd recommend having 11.3 the
118:22 - same as mine
118:24 - if you ever wonder about anything or
118:26 - whatnot you can just go to the love tv
118:28 - website to love tv.org and you can click
118:30 - on this wiki here
118:33 - this wiki will basically give you all
118:35 - you need to know about love we won't be
118:37 - covering every single thing here but we
118:40 - will be covering quite a lot of this for
118:41 - example let's go to the
118:44 - let's see let's go to sound let's say
118:46 - you want to play some sound which we
118:47 - will cover in later video as you can see
118:49 - you have a bunch of things here you can
118:50 - use to work with sound let's say you
118:53 - want to go to a window then here's a
118:55 - bunch of things you can do with the
118:56 - window
118:58 - so there's a bunch of things you can do
118:59 - here i'm only going to show you the most
119:02 - basic and we will be building two games
119:04 - at the end just so you have a good idea
119:06 - of what we'll be working with
119:09 - okay
119:10 - now i think we're ready let's get
119:12 - started
119:13 - so first we need to just move this
119:16 - to the right because i don't like it if
119:18 - it's at the bottom i do love it if it's
119:20 - at the right side
119:22 - now first let's create a new file i'm
119:24 - going to call this main.lua you need to
119:26 - have at least one main.lua file here in
119:29 - order to be for love to be able to
119:31 - execute otherwise love may not know
119:33 - which file to execute
119:36 - so here it's main.lua and now i'm just
119:38 - going to close that so we have more
119:40 - space so we're still inside that file
119:42 - now take note i have a terminal open but
119:45 - if you're on windows i do believe you
119:46 - can just
119:47 - double click that love that main.lua
119:50 - file and that should run live 2d but i'm
119:52 - not sure
119:53 - if you're on windows i would actually
119:54 - recommend opening up the command line
119:56 - same on mac open up the command line and
119:58 - just saying love
120:02 - dot in that directory because as you can
120:04 - see i'm in this directory right here so
120:06 - if i were to
120:07 - just let's say open up my folder here so
120:10 - funner
120:13 - as you can see there's main.lua i'm in
120:14 - this four right here
120:16 - now first thing we need to do is we need
120:18 - to set up a basic project so to do that
120:20 - we need to go under scrutiny and make
120:22 - sure you do have love to the installed
120:24 - otherwise this might not work dot love
120:27 - this means make this a global variable
120:29 - with the name of love and we're going to
120:31 - require
120:32 - the module called love
120:36 - so basically this is normal
120:39 - lua we're just importing a module called
120:42 - love
120:43 - then next up
120:45 - we need to create three functions
120:48 - these three functions are the basic
120:50 - concepts of running a game
120:53 - so first we have a function
120:57 - called love it needs to have love at the
120:59 - start here love dot load this is very
121:02 - important i'm going to explaining all of
121:04 - this in a second we can just ignore this
121:05 - for now i'm going to copy this and i'm
121:08 - going to paste them two more times
121:11 - and i'm going to close that
121:12 - then this we can make love dot update
121:15 - and update will take in ddt and i'll
121:17 - explain that in a second
121:19 - and here we can say love the draw
121:22 - okay
121:24 - so let's explain what these are now in
121:26 - every game you have three stages you
121:29 - have the load
121:31 - the update and the drawing stage
121:34 - live2d makes this incredibly simple to
121:37 - do the loading the update and drawing in
121:39 - their respective functions
121:41 - one of the reasons i do love love is
121:43 - because of this right here because it's
121:45 - languages like java for example you'll
121:47 - have to actually go through and make
121:49 - these functions yourself and let them
121:51 - work in the background as they should
121:53 - where love2d has already configured a
121:55 - lot of this for you
121:57 - so first loading is to basically load in
122:00 - data when the application starts up so
122:02 - when we boot up the game this will load
122:05 - all of the data we need so we need to
122:07 - put things in here that we want to load
122:10 - then here with update this basically
122:13 - runs every
122:15 - once every 60 frames this should run
122:19 - once every 60 frames so this is 60
122:20 - frames per second love2d is kind of
122:23 - locked to 60 frames per second it can go
122:25 - lower if the game requires a lot of
122:27 - resources but it's kind of locked to 60
122:30 - frames per second so once you start this
122:31 - up you'll get 60 frames a second
122:36 - dt is basically delta time it's the time
122:40 - between this frame and the last
122:42 - currently you don't have to worry too
122:44 - much about this it's mostly just math so
122:46 - don't worry too much about dt we'll get
122:48 - deeper into that later
122:49 - but basically this is every frame
122:51 - imagine that it's a frame so you have 60
122:53 - frames a second this will be every frame
122:56 - it's the time between this frame and the
122:59 - i last
122:59 - to draw oh wait and we're still here and
123:01 - this will just also update everything so
123:03 - let's say we have a player if we want
123:04 - the player to move the player will be
123:06 - moved inside of this update function
123:08 - here so this will move the player
123:11 - then we have draw and this will draw
123:12 - everything to the screen so first we
123:14 - move the player and then we draw the
123:16 - player the player at its new location
123:19 - or we
123:20 - the player gets hit and then we update a
123:23 - heart getting destroyed in the game
123:25 - that's what we draw
123:27 - basically that's how it works we'll get
123:29 - deeper into these things as the
123:31 - tutorials go on but for right now it's
123:33 - not too important but we will we will
123:34 - get to it
123:36 - so let's start off with just creating a
123:38 - basic hello world so we're just going to
123:40 - skip these two for now we don't have to
123:42 - worry about them and here we can say
123:45 - love
123:46 - and you'll notice most of love's
123:47 - important
123:48 - functions start with love
123:51 - got the graphics graphics is what we use
123:54 - to draw something to the screen so we
123:56 - use graphics
123:58 - dot print and this will just basically
124:00 - print to the screen it's very simple it
124:02 - doesn't do too much
124:04 - and we can just print
124:06 - hello world
124:10 - all right now if we were to say love and
124:12 - then dot this means run love in this
124:15 - folder and it will find that main file
124:17 - and will burn it
124:19 - you'll see this but then you'll also see
124:21 - this little pop-up right here
124:23 - just saying hello world there's a little
124:26 - icon there's some text which you can
124:28 - change later and here's like the basic
124:30 - functionality you'll have and yeah
124:32 - that's the basics
124:34 - we have created our first application it
124:37 - it just displays hello world it's a
124:39 - first game
124:40 - now let's do something a bit more
124:43 - intense than just printing something to
124:45 - the screen
124:46 - just so i can show you the difference
124:47 - between load update and draw
124:49 - so here let's create a variable called
124:51 - number
124:52 - and make that equal to zero
124:54 - take note this is a global variable you
124:57 - can either do it like this or you can
124:59 - say underscore g dot number
125:03 - so that this will load in this number
125:06 - when the game starts it needs to be
125:07 - global because we need to access it
125:09 - between the other functions
125:13 - in this update right here we need to
125:15 - update the number so with every frame we
125:17 - want to update this number so we can say
125:22 - number because we're accessing this
125:23 - number right here
125:25 - if you don't know i do recommend you go
125:27 - watch the tutorial i made
125:29 - and you can say number
125:31 - plus one
125:32 - this will take this number and it will
125:34 - just add one to it
125:36 - then here where we do this we can just
125:38 - display
125:40 - number
125:41 - [Applause]
125:43 - so i'll explain what this does more in a
125:45 - second let's quickly run it and see what
125:47 - we get
125:48 - so right here you see a little number
125:50 - constantly increasing
125:53 - that is this number right here so let's
125:55 - just move this to the side
125:57 - first we set the number so when the game
125:59 - loads we set the number to zero so once
126:01 - this boots up this will be zero
126:04 - then every time with every frame this
126:07 - number updates so this number increases
126:10 - with one with every frame
126:12 - and in this drawer right here
126:15 - this will print the number to the screen
126:17 - so as you can see we first set the
126:19 - number
126:20 - and this only runs once this load that
126:22 - only runs once this update however and
126:25 - this draw runs every 60 or every frame
126:28 - so these two runs every frame
126:31 - and this prints it every frame
126:39 - so in this tutorial we'll be covering
126:41 - the
126:42 - live love2d configuration file now this
126:45 - configuration file is basically a file
126:48 - that allows us to configure application
126:51 - more to maybe get certain permissions or
126:54 - to add certain features to the
126:56 - application
126:58 - so this gets started so we just have a
127:00 - very basic application here what goes on
127:02 - in here doesn't matter too much
127:04 - because we wouldn't be using this a lot
127:07 - so first thing we need to do is we need
127:09 - to create this configuration file so you
127:11 - just right click new file or you can
127:14 - open that folder it is in for example
127:16 - you can see here there's my main.lua
127:17 - file it's creating a new file and we can
127:20 - call it conf
127:22 - dot lua
127:24 - like that and now we have a
127:26 - configuration file
127:28 - and inside of this configuration file we
127:30 - can put a function so function
127:33 - and then love.conf
127:36 - and inside of it we can just p put t
127:39 - so t is basically a variable that's
127:41 - going to be passed in for us that will
127:43 - basically contain a bunch of information
127:46 - and stuff we can use
127:49 - and then of course
127:50 - this is just for love and then here we
127:52 - basically say we want to manage the
127:54 - configuration for application
127:57 - so there's a lot of things here
127:59 - for example t dot identity
128:04 - and we can just make that equal to a
128:05 - little for now
128:07 - this will allow us to
128:10 - assign a save file i'm just going to
128:12 - also do this for now
128:14 - so this will allow us to assign a save
128:16 - file we can insert the path to that save
128:19 - directory for example
128:21 - saves or let's say data
128:24 - saves
128:28 - like that and then here we can just
128:30 - create a new folder called data instead
128:32 - of that saves
128:34 - now we have a folder with the name data
128:36 - and inside of that folder named save
128:39 - and there we can see that's the path to
128:41 - it
128:42 - so that's just basically the saves
128:44 - directory
128:45 - not too much there
128:47 - the next app
128:49 - we have and of course you can add
128:50 - multiple things here so i can continue
128:52 - underneath this if i wanted to
128:55 - and next up you have things like the
128:57 - version
128:58 - and here you can see the version of your
129:00 - game
129:01 - this is very useful because sometimes if
129:03 - you update your game especially on
129:05 - android
129:06 - there are two things that can happen
129:08 - one you can install an entirely new
129:11 - application
129:12 - or two
129:14 - that application that already exists
129:16 - will be updated where it is that's what
129:18 - you usually happen to have applications
129:20 - and that's what should be happening
129:22 - so here it can put like a version like
129:24 - 1.0.0 and i didn't do it instead of
129:26 - creation marks
129:28 - like this
129:29 - and then how you can basically determine
129:31 - when you should update what here it's up
129:33 - to you of course you can even add more
129:35 - things here like v1
129:37 - and
129:38 - lstl or whatnot you want to add to this
129:41 - but usually if it's like this
129:43 - then you can just say for minor updates
129:45 - let's say you fixed a small bug you can
129:48 - increase that by one
129:50 - and let's say you maybe just updated the
129:52 - output so
129:54 - there's just like a so instead of it
129:55 - saying game over it says game lost that
129:58 - will make it two
130:00 - so if every minor change you can
130:03 - do this
130:06 - then
130:07 - with every
130:09 - major or a major change but bigger
130:10 - change so let's say you add a full blown
130:13 - menu system or full-blown settings to
130:16 - your application like it's a new
130:18 - it's a new path to your application like
130:21 - the whole new version almost
130:23 - then you can increase this by let's say
130:24 - one or two and it remember it doesn't
130:27 - have to be small numbers this could be
130:29 - like something like this and it's
130:30 - perfectly fine to make it very large
130:32 - numbers
130:33 - it's it doesn't have to be small values
130:36 - like we put in here for example
130:38 - and then once you have basically a
130:40 - change that makes this the version 2 or
130:43 - the version 3 of your game or like any
130:45 - major version of your game you can
130:47 - increase this so this means it's
130:49 - basically not
130:50 - the first version anymore it's basically
130:52 - like the second version of the game
130:55 - a lot of people also just like to do
130:57 - this just to keep it simple they just
130:58 - use two numbers where if every major
131:01 - update so let's say for example and you
131:03 - implement in whole settings page for
131:05 - your game they will increase this
131:08 - and with every minor update they will
131:10 - increase this so let's say you added
131:12 - like a little title at the bottom in
131:14 - you can just add that or you added like
131:16 - another
131:18 - character that or npc that doesn't do
131:20 - anything
131:21 - add one there like that all right in
131:23 - case you mess around with it too much i
131:25 - just put basic versioning in here let's
131:27 - actually keep this one here just for
131:28 - interesting and remove that one
131:32 - then we also have t.console
131:35 - and
131:35 - this
131:37 - is basically
131:38 - if a
131:40 - console should be attached
131:42 - to that game and there should be a true
131:44 - or false value so false means which is
131:46 - it by default there shouldn't be a
131:48 - console attached to the game this is
131:49 - windows only take note of that if you're
131:51 - on linux or mac this won't really affect
131:54 - anything but if you're on windows you
131:56 - might notice sometimes that there's like
131:58 - a little black box this command line or
132:00 - cmd that pops up when you open up an
132:03 - application
132:04 - that's the console so if this is true
132:08 - this means that the console should be
132:09 - running in the background and it will
132:12 - basically be attached to this window so
132:14 - once you close the window the console
132:15 - will close as well
132:17 - windows only though so take note of that
132:22 - next up let's say you want to save the
132:25 - files but on an external storage
132:30 - like you want to save the files but on
132:32 - and
132:34 - sd card for example
132:37 - then we can say t dot external
132:41 - external
132:43 - storage
132:44 - all lowercase
132:46 - and
132:48 - false or this would be true then this
132:50 - means you want to save the files but you
132:53 - want to do it
132:54 - on the sd card and not on the normal
132:57 - phone storage
133:00 - and i do believe this is android only so
133:02 - take note of that i think this is
133:03 - android only so you should also
133:06 - take in consideration about this
133:09 - we also have t dot gamma
133:12 - correct is equal to true
133:15 - now this will basically in a sense
133:18 - if the system supports it
133:20 - it will enable gamma correct rendering
133:24 - i have no idea what that is
133:26 - but if this isn't supported it will do
133:28 - that it will probably just enable better
133:32 - gamma whatever i think gamma is like
133:34 - lighting or things like that
133:36 - let me google that
133:41 - yes so it is the overall brightness of
133:43 - something so
133:45 - the more bright it is the higher the
133:47 - gamma i guess
133:49 - and yeah it's something like that i
133:51 - don't usually work too much with that i
133:53 - usually just do the basics in the
133:55 - configuration files i would go for
133:56 - camera correct unless someone
133:58 - specifically like gives an issue about
134:00 - the gamma being wrong or something like
134:02 - that then i will enter that but usually
134:04 - i don't care too much about that
134:06 - okay
134:07 - next let's say you're have you played
134:09 - like an online
134:10 - game and it's like a game like pubg
134:15 - on pub g you have the option to click a
134:18 - button and then it will hear your voice
134:20 - speak
134:22 - so you can speak to people on pubg by
134:25 - clicking the microphone button
134:27 - we can enable that as well
134:30 - now
134:30 - on android
134:32 - we need to basically get a prompt that
134:35 - allows us to
134:36 - hear
134:38 - the user's voice because you may have
134:39 - noticed if you want to talk to someone
134:41 - on pubg the first time you click on that
134:43 - button it will pop up a prompt asking
134:45 - you if it can use your microphone that's
134:48 - what we're going to do here so t dot
134:50 - audio
134:51 - dot mic
134:52 - equal true so if it's on android and you
134:55 - want to enable microphone
134:57 - then this will basically give them a
134:59 - little pop-up asking hey
135:01 - can i use the mic
135:05 - cool now let's actually configure
135:07 - something we'll be able to see
135:09 - such as t.window.type
135:14 - and that should be window
135:17 - okay
135:18 - and we just make that equal to whatever
135:20 - title we want for example cool
135:23 - ball game
135:25 - now if we were to love this
135:28 - we'll get this right here which says
135:30 - cool ball game so that's this part right
135:33 - there
135:35 - so that would be the the.title
135:40 - we also have things like the window icon
135:44 - you'll notice i have a little folder
135:46 - here here with an icon inside of it
135:49 - it's called game icon.jpg
135:52 - usually you want to save these as ico
135:55 - because that's a con file but i use the
135:57 - jpg just because
136:00 - so here i can just specify
136:04 - icon
136:06 - slash
136:08 - game
136:10 - icon
136:11 - dot jpg
136:13 - now if i want to run that
136:16 - then you'll notice i have a little icon
136:18 - here now
136:19 - and that's this icon we got right here
136:21 - it's a very dark icon i should have
136:23 - picked something a bit lighter but you
136:25 - can see there's a little icon there so
136:27 - that's to change the icon if you wanted
136:29 - to do that
136:30 - then you can by doing this and you see
136:33 - it's an icon and then game icon take
136:35 - note this path is kind of relative at
136:38 - the moment because you can see here if i
136:40 - were to move my conf file outside of
136:42 - this folder right here so icon was in a
136:45 - different folder it would not find this
136:48 - icon here so keep note that the location
136:51 - of where the conf is and where icon is
136:53 - that's very important
136:55 - but we're not going to go too deep into
136:56 - that that's something completely
136:57 - different you usually have to worry
136:59 - about you can also set the window with
137:01 - for example if we were to do this
137:04 - and you can also set a height it is to
137:05 - go like this and you can say we'll go
137:07 - away
137:09 - with
137:10 - and here we say
137:12 - height
137:13 - and then
137:14 - all we need to do is specify the width
137:16 - and the height for example let's say the
137:17 - width should be
137:19 - 400 and the height should be
137:23 - 200
137:24 - which is which is a very weird ratio but
137:28 - there you go so the width is now 400 i
137:31 - believe pixels and the height is now 200
137:34 - i believe pixels
137:36 - you can of course make this as big as
137:37 - you want for example
137:40 - 1200 by 700
137:44 - which is almost a 16 by nine aspect
137:47 - ratio as you can see that right there
137:48 - now it's a lot bigger so it just depends
137:51 - how you prefer it
137:53 - you'll also notice that if i would just
137:56 - do here again
137:58 - that
137:58 - if i want to resize it i can
138:03 - so i can't resize it so even if i wanted
138:06 - to
138:07 - it just moves it it doesn't resize it
138:10 - and this is by default like this because
138:12 - usually you don't want games to just be
138:14 - resized because that could break the
138:16 - game
138:17 - but if you do want this to be allowed
138:19 - for your users you can say t dot window
138:23 - dot
138:25 - resizable is equal to true
138:29 - now the window can be resized so if i
138:32 - were to bring it over here
138:33 - now to go here
138:35 - then i can resize the window
138:37 - so it by default it is disabled and for
138:39 - good reason
138:41 - as i say you usually do not want to
138:42 - enable this because that could cause the
138:45 - game to break you'll notice in more
138:47 - popular games as well you can't resize
138:48 - the window because it's dangerous to
138:51 - resize the window
138:52 - you can also give it a minimum width and
138:54 - a minimum minimum height
138:56 - which could be better if you have this
138:58 - resizable on for example
139:00 - but i can just copy this
139:02 - and in here instead of just saying
139:05 - we have and height we can just say min
139:08 - and i'm going to copy that width there
139:09 - and just paste it here
139:11 - so now i can sit like the minimum width
139:13 - and height it's allowed to be for
139:15 - example let's say the minimum height
139:16 - it's allowed to be as 500
139:19 - and the minimum width it's allowed to be
139:22 - is let's say 1 000.
139:24 - now even though it's resizable true it
139:27 - can only be sized to a specific size so
139:30 - here if i were to resize it as you can
139:33 - see after a while it doesn't allow me to
139:35 - resize anymore but i can make it bigger
139:37 - but i can't make it smaller
139:39 - so it has like a minimum size it can be
139:41 - resized two if you want to enable the
139:44 - resizable as i said before rather not
139:47 - you can also remove a window border by
139:49 - saying t dot window dot
139:52 - border
139:54 - list
139:56 - is equal to true
140:00 - this will remove the window border which
140:02 - i don't always recommend but it's a good
140:04 - option if you want to allow your users
140:06 - to have that okay so as you can see it
140:08 - doesn't have anything up here
140:10 - this should be optional if you want to
140:12 - put it in you shouldn't force this onto
140:14 - the user because not all users like this
140:16 - you'll notice with most games you have
140:18 - an option to remove the borders and
140:20 - that's a good there's a good reason why
140:21 - there's an option to remove it and
140:23 - usually by default it's not removed
140:25 - unless it's by default full screen
140:27 - you can also enable vsync so
140:30 - vsync
140:33 - and this you should specify with a
140:35 - number i don't quite know what this
140:37 - number means but you should specify the
140:39 - number if you wanted enabled
140:41 - here it is now vsync enable
140:44 - if you don't know what it is it's i
140:46 - think it's vertical sync and it's to
140:48 - sync sound and
140:50 - and the video but it's it should be
140:52 - optional because yet again not everyone
140:54 - will benefit from b-sync
140:56 - because it's by default it is
140:58 - aligned as it should be but
141:00 - usually you don't worry too much about
141:02 - it
141:04 - okay so that should also be optional for
141:06 - the user to change you shouldn't force
141:08 - it on him again
141:10 - and here's something that could possibly
141:12 - solve my problems
141:14 - display
141:15 - tell it on what display to appear
141:18 - for example if i say display one but
141:20 - actually nope it displays that one if i
141:23 - say display two which is not my main
141:25 - display
141:26 - then ah it does appear here
141:28 - so now what we can do is instead of me
141:31 - having to continuously drag it over to
141:32 - show you i can now go here and i can
141:35 - make
141:36 - full screen
141:38 - i actually didn't know this display was
141:40 - here i just realized
141:42 - that it exists and just as you can see
141:45 - it's full screen and i didn't actually
141:47 - think this through because you know i
141:49 - can't really exit
141:50 - but yeah so that's if you wanted full
141:51 - screen now i'm going to keep that there
141:53 - because that's actually very useful i
141:55 - wish i knew that existed much sooner
141:58 - you can also specify the x and the y
142:00 - coordinate coordinates so we were to
142:03 - copy this
142:05 - and go here then we can like say
142:08 - x
142:09 - and let's make this 200 i don't know if
142:11 - this is not going to go back to this
142:12 - screen because the displays are kind of
142:14 - linked
142:15 - okay so you know it's here so the x is
142:17 - now 200 as you can see right there but
142:19 - to make that list and let's say 100
142:23 - then it's 100 from the side here
142:26 - so yeah
142:28 - then we also have y
142:32 - and let's make this 100 as well
142:36 - so let's see 100 100.
142:40 - that's very useful if you wanted to be
142:41 - at a specific location but yet again you
142:44 - might just want this if you want to save
142:45 - where the user last had the application
142:48 - when they closed it that could be a good
142:50 - feature but forcing a location yet again
142:52 - not always a good idea because that
142:54 - location may not exist on the user's
142:57 - monitor because let's say the monitor is
142:59 - smaller than yours and you set it to
143:01 - specify beyond 500 500
143:04 - they might not have a screen which is
143:06 - very rare but they might not have a
143:07 - screen that size
143:09 - so yeah just keep that as note this
143:11 - should usually be an optional thing you
143:13 - add
143:14 - all right so next up
143:16 - is something i do not recommend you play
143:18 - around with it
143:20 - it's good to know it exists but you
143:22 - should not be playing around with this
143:24 - unless you know what you're doing but
143:26 - usually you do not want to play around
143:28 - with it
143:29 - you can disable and enable modules by
143:32 - default all modules are enabled in
143:34 - love2b but you can disable them if you
143:36 - don't want them
143:38 - for example t dot modules
143:42 - dot and let's say timer is equal to
143:44 - false by default this would actually be
143:46 - true because the timer is enabled
143:50 - now this timer right here provides this
143:53 - dt here which is the time between
143:56 - this frame and the last frame
143:59 - so if we remove that module dt so if we
144:02 - make number here dt
144:04 - and then print that value dt would be
144:07 - zero
144:08 - so right there and i've accidentally
144:10 - removed my one thing i liked as you can
144:13 - see there it's zero
144:15 - but if we were to yet again just remove
144:18 - that from there and actually let's bring
144:19 - back our window display i did kind of
144:22 - like that
144:23 - so if we were to remove that disabling
144:25 - module
144:27 - then as you can see dt is a number
144:30 - so just take note you can disable
144:32 - modules which i guess would probably
144:34 - decrease the application size
144:37 - or something i don't know what it will
144:39 - really benefit in doing but you can do
144:42 - it if you want to do it
144:44 - so just take notes of that
144:47 - so usually don't just don't disable
144:49 - anything that's a good rule of thumb if
144:50 - you know you're not using something and
144:52 - you know and you know you're not going
144:54 - to use it
144:56 - then i guess disable it but usually you
144:58 - don't want to disable anything
145:00 - now if you might have fallen behind or
145:02 - you want to maybe remember some of this
145:05 - you can always find it
145:07 - here on the con on the love 2d website
145:16 - so for the most part we're going to use
145:18 - load or update here we're mostly just
145:20 - going to use draw
145:22 - so we can just focus on that
145:24 - let's try and draw a rectangle
145:27 - in lua which is pretty simple so it's
145:29 - just love dot
145:31 - graphics
145:33 - dot
145:34 - rectangle
145:37 - and here we can specify the type it
145:39 - should be
145:40 - so you have different ones like line and
145:43 - fill we'll cover both of these in a
145:45 - second so let's just say fill for now
145:48 - and then we can specify the location and
145:50 - i'm going to explain all of this in a
145:51 - second as well
145:53 - now if we were to run this you'll notice
145:56 - we have a little white square here
145:59 - and yeah so let's go look here what is
146:02 - all of this
146:03 - first we have the type fill so as you
146:06 - can see here this is like an entire box
146:09 - just wide
146:10 - but if we were to make this instead of
146:12 - fill we were to make this line
146:14 - then now we'll have a outline instead of
146:18 - having a fully filled white square
146:22 - then we have our x position which is 50
146:25 - so this is the x position
146:28 - and then our y position which is 50 and
146:30 - this is like that you can remember which
146:32 - one is x and y by remembering that x is
146:36 - going horizontally and y is going
146:38 - vertically and as you know y if we were
146:42 - to put a y here
146:43 - it has a thing that goes downwards
146:46 - so
146:47 - this would kind of represent a y shape
146:50 - and that allows you to remember that
146:53 - this section here up to down that's why
146:56 - so this point right there would be zero
146:59 - y and zero x
147:01 - here would be
147:03 - 50x but 0y and here would be 50x 50y and
147:09 - here would be 50y 0x
147:12 - we'll explore this a little bit more in
147:14 - a second
147:18 - and then here we have the width and the
147:19 - height so we were to make this 100
147:23 - then now the width with 100 as you can
147:26 - see here 100.
147:28 - let's change the x so let's make this 10
147:32 - instead
147:34 - like that
147:35 - now if we were to run you'll notice it's
147:38 - only 10 pixels from the side here
147:41 - as you can see
147:43 - and then here is the y let's increase
147:45 - the y to let's say
147:47 - 500.
147:49 - i don't know if that's actually still on
147:50 - the screen it is there we go so this is
147:52 - 500 pixels
147:54 - so yeah that's the basics of just
147:57 - drawing a rectangle you have your x you
147:59 - have your y you have your
148:01 - width and you have your height so you
148:02 - can of course make the height having
148:04 - bigger so if you wanted to make a little
148:05 - bit larger you could you see there
148:09 - now as i said before if we were to make
148:11 - this zero
148:13 - and then run it again you'll notice that
148:15 - now it's here because the x-axis if we
148:17 - go back here
148:19 - is zero so it's right there it's against
148:23 - the wall because it's zero
148:25 - if we were to make this right here zero
148:27 - and let's say this
148:28 - ten
148:31 - let's just close this
148:35 - then now as you can see it's here at the
148:38 - top because that's the y index of zero
148:41 - as you can see because remember y is
148:44 - going down like that it has like this
148:46 - little y symbol
148:49 - i'll see if i can try and edit that in
148:52 - and of course if we were to make it zero
148:54 - zero then it would be against the wall
148:58 - as you see here zero x zero wise it's
149:00 - against the wall
149:02 - now before we continue to let's say
149:06 - something different let's try and change
149:09 - the color
149:10 - because currently we only have white
149:13 - what if we wanted to make it a different
149:15 - color
149:16 - we can do that by saying love dot
149:18 - graphics
149:20 - dot set color
149:23 - and we can make it let's say
149:25 - one zero
149:27 - zero
149:28 - which would be red and i'll explain why
149:30 - in a second so we will boot this up
149:32 - you'll notice a red square now and not a
149:36 - white square
149:37 - so this right here uses rgb values
149:43 - now rgb if you don't know
149:46 - stands for red green blue
149:50 - and here below we have between zero and
149:53 - one
149:54 - so 0.5 would be fine for example so 0.5
149:58 - that would be
150:00 - halfway
150:01 - so 0
150:03 - zero zero so for this was all zero
150:06 - this would be black
150:08 - because that means there's no red
150:10 - there's no green and there's no blue
150:14 - that's it's only black so none of those
150:16 - colors exist whereas if we were to make
150:18 - this one one one
150:20 - then this would mean white because that
150:23 - means all of the red all the green that
150:25 - all the blue is in here
150:27 - now usually you don't really want to
150:28 - figure out colors like this
150:30 - oftentimes you'd want to get your
150:32 - browser and search up
150:34 - color picker
150:37 - and you'll find something like this so
150:39 - let's say you wanted a nice greenish
150:41 - color so let's go here
150:43 - and then we go like this
150:46 - cool and you'll notice here we have rgb
150:50 - we can copy that
150:52 - and now here what we can do is we can
150:54 - paste it here
150:56 - and we can say
150:59 - divided by 255
151:04 - and if you do this then we'll get this
151:06 - greenish color
151:09 - as you can see right there
151:13 - we divided by 255 because by default
151:16 - usually it's actually 255 so it's a
151:20 - number between 0 and 255 but in lua it's
151:24 - a number between 0 and 1. so if we
151:26 - divide it like this we'll get a value
151:28 - with it so if we go like this
151:30 - then we can just say
151:32 - 75 divided by 255 and that gives us
151:37 - 0.29411 so we could have put we could
151:39 - have done this
151:40 - zero 0.29411
151:43 - but first of all this is kind of
151:45 - difficult to read because you can't
151:47 - really tell
151:48 - how much that is some people this is
151:50 - pretty simple but to me it looks a lot
151:52 - more than what it really is
151:55 - and that's why i just prefer this
151:58 - so you can choose between using this or
152:00 - this
152:02 - it will give you the same output so if
152:04 - we were to run this we'll still get that
152:05 - same green
152:07 - if we can just get love as you see there
152:10 - we get the same green
152:12 - so yeah but what if we wanted to make
152:14 - this
152:15 - black so zero
152:17 - zero zero
152:19 - you'll notice
152:21 - the background is the same color so if
152:24 - we wanted to make this the same color as
152:26 - the background is now we won't be able
152:28 - to see it
152:30 - so how does one change the background
152:32 - color
152:34 - well it's pretty simple now you can
152:36 - either do it here or you can do it on
152:38 - the on load so you can change it on the
152:40 - unload or you can change it on the draw
152:43 - if you change it here it's going to do
152:45 - that change every time or every frame is
152:48 - going to make that background color the
152:50 - color you set it to
152:51 - every time you
152:53 - call this every time draw is called so
152:55 - that's every frame if you do it on
152:57 - unload it will do it once and that's
152:58 - only when it loads up so for extra
153:00 - performance sake i would recommend doing
153:02 - it here unless it's part of the game to
153:04 - change the background color
153:06 - anyways we can say love dot graphics dot
153:09 - sit background color and here we have
153:11 - the same option so i'm just gonna say
153:12 - 0.5 0.5
153:15 - and let's maybe say one
153:17 - and now if you were to run this you'll
153:20 - get this purplish color
153:22 - and then with the black box right there
153:25 - so that's how i can change the
153:26 - background color
153:28 - now let's get back to the actual topic
153:29 - of the video
153:31 - let's draw another shape let's try and
153:34 - draw in circle this time
153:37 - so let's go love.graphics.circle
153:41 - as simple as that i'm going to make the
153:43 - circle
153:44 - line and not fill but you can make it
153:46 - feel if that's what you want i'm going
153:48 - to position it at 100 100 and i'm going
153:51 - to make the size
153:53 - 50.
153:54 - now take note this is the radius so it's
153:56 - not a width and a height it's a radius
153:58 - meaning it's going to be 50 pixels to
154:00 - the left and 50 pixels to the right 50
154:03 - pixels to the top 50 pixels to the
154:05 - bottom
154:06 - this is going to be a pretty big circle
154:08 - as you can see right there
154:10 - we can actually move it out a bit more
154:12 - so let's maybe go
154:14 - 200 or 200
154:17 - that's an x and let's make it
154:19 - 500 on the y
154:22 - now if we're done this as you can see
154:24 - we get this
154:26 - so it's nice circle and whatnot now what
154:29 - if we wanted to change the color of this
154:31 - circle
154:32 - because we've already set the color have
154:34 - we not
154:36 - well it's pretty simple we just copy
154:38 - that line of code
154:39 - and paste it here again
154:41 - now we can give it a different color so
154:42 - let's say
154:43 - one zero point seven
154:46 - and
154:47 - zero
154:49 - zero zero point one there we go
154:52 - now from this we get this yellowish
154:55 - color that's kind of difficult to see
154:57 - but it is there
154:59 - so if you want to change the color you
155:00 - just basically set it here but take note
155:03 - this is important that these colors stay
155:05 - the same because of every frame
155:08 - it's going to call that again so we do
155:10 - this right now everything is going to be
155:12 - this yellowish color as you can see
155:14 - because i commented out this part so
155:16 - when this code runs again because it's
155:18 - going to set the color and then when it
155:19 - runs again it's going to not set the
155:22 - color again
155:23 - or it is going to set it again but here
155:25 - it doesn't change the color back it just
155:27 - draws and then it sits the color but
155:29 - it's already this color and then it goes
155:32 - here and it does it again and again
155:34 - where with this
155:36 - every time this runs it changes the
155:38 - color back to this
155:39 - this is something that's very important
155:41 - and you'll notice when you build the
155:42 - games
155:43 - that this does come in handy to know how
155:45 - this works
155:47 - i do recommend you play with this
155:49 - because you'll notice if you comment
155:52 - something out then this might not work
155:53 - if you'd maybe move this to a different
155:56 - location it might work so if we put this
155:57 - set color there it won't work
156:00 - as you can see there
156:01 - because
156:03 - the color is set here
156:05 - but then we come here and we change the
156:07 - color then these two execute and then we
156:09 - set the color to this and nothing is
156:11 - really drawn after that if we were to
156:14 - comment this out then now everything
156:16 - would be yellow again even though it's
156:18 - at the end as you can see there
156:21 - very good to note that
156:24 - so let's draw one more shape and then i
156:26 - want to show you how to just make
156:28 - something move
156:30 - so
156:31 - here we can maybe draw an arc
156:34 - i'm going to make it a line once again
156:37 - and
156:38 - let's say we need to exposition y
156:40 - position we can maybe keep this but
156:42 - maybe make this 250
156:45 - and in here we need an angle one and an
156:48 - angle two so i'm going to make zero and
156:51 - two and you'll see what happened in a
156:52 - second
156:54 - my bad i forgot to add the radius
156:57 - because we also need a radius i'm not
156:59 - going to make it that big let's make it
157:00 - 20.
157:02 - and now if you do this as you can see we
157:04 - have a little thing there actually let's
157:06 - make a bit bigger because it is kind of
157:08 - small so let's go maybe
157:10 - 60 i'm pretty sure that would not 660
157:13 - should be good enough
157:14 - as you can see here we have like a
157:16 - little cheese shape here
157:19 - now let's see what happens if we change
157:20 - one of the arcs to let's instead of two
157:22 - we make it five
157:24 - what will happen
157:26 - as you can see we get a little pac-man
157:29 - that's pretty cool
157:30 - you can make a pacman game of this
157:32 - because
157:33 - it already draws the arc for you all you
157:35 - need to do is make this change
157:38 - so let's see what if we make this
157:40 - two
157:41 - what will happen now because what does
157:43 - this arc really do
157:45 - as you can see
157:46 - it kind of changes where this and that
157:49 - starts and ends
157:50 - what if we made both of these 5 what
157:52 - will happen then
157:55 - nothing because now both of them start
157:57 - and end at the same place if you were to
158:00 - make this zero
158:02 - and let's make this five again
158:04 - you'll notice this
158:06 - so if we wanted to make a pacman
158:08 - we might want to go
158:10 - one
158:11 - six
158:13 - i'm pretty sure that should be
158:14 - relatively close to man
158:16 - relatively close not quite on it so let
158:19 - me make this zero again
158:22 - and as you can see here we have a little
158:24 - version of pac-man
158:26 - we might want to make the mouth a bit
158:28 - bigger so maybe make that five and make
158:30 - that one
158:34 - as you can see there now we have a
158:35 - pac-man
158:37 - you can play around with this this is
158:38 - mostly just kind of playing around to
158:40 - figure out what you want
158:42 - so you basically give it x to y the
158:44 - radius and remember the radius is
158:47 - basically from middle to the outer ball
158:49 - so it's from here to there that's 60
158:51 - pixels that part right there
158:53 - and that's there that's also 60 pixels
158:57 - now let's try and move pac-man so notice
159:00 - here we have pac-man let's try and move
159:02 - pac-man here
159:04 - forward because that's what pac-man
159:05 - would usually do it will move forward to
159:07 - eat maybe that little square there so we
159:09 - can even put that in front of pac-man so
159:12 - you can eat it so let's see here let's
159:14 - make this
159:16 - x axis
159:18 - 600 and to
159:20 - 200 i'm pretty sure that should give us
159:22 - what we wanted we go here you'll notice
159:24 - these are square for him to eat
159:26 - if we were to just make it a little bit
159:28 - smaller so
159:29 - maybe instead of six hundred
159:32 - for remains of a hundred i mean we can
159:34 - go to 70 and 70.
159:38 - so let's see that's a nice square for it
159:41 - to eat
159:42 - okay now let's make pac-man move
159:45 - so here
159:46 - i'm going to create a little variable
159:49 - just a table basic lua
159:51 - so we can say
159:53 - pac-man
159:55 - and we can make pac-man equal to nothing
159:58 - you could of course go underscore g dot
160:00 - pac-man that will also make it a global
160:02 - but it's optional both of these are
160:04 - considered global i'm going to do the
160:06 - underscore g pacman
160:08 - i'm going to say pacman
160:11 - dot x is equal to
160:14 - let's say
160:16 - let's give these x and y values here so
160:18 - let's say 200
160:20 - and then
160:22 - pac-man
160:23 - dot y
160:26 - is equal to 250
160:30 - okay now we have pac-man's to locations
160:35 - so this is basically the same as saying
160:37 - x
160:38 - and then 200 and
160:41 - y and then 250 and that should be an
160:43 - equal symbol
160:45 - it's basically the same as saying that
160:47 - we just split it up and do multiple
160:48 - lines so it's optional if you want to do
160:50 - that i like splitting it up into
160:51 - multiple lines like this
160:54 - and in here we can just specify the
160:55 - pac-man x and pac-man y
160:58 - so now pack my next
161:02 - and then pac-man y
161:04 - now if we were to run this everything
161:05 - should still look the same as you can
161:06 - see there and let's fill pac-man so
161:11 - so let's fill pac-man
161:14 - as you can see now pac-man is nicely
161:16 - filled
161:18 - now let's move pac-man so here in update
161:20 - we can say
161:21 - pac-man
161:23 - dot x
161:24 - plus equals one
161:27 - let's do that and see what happens
161:29 - oh that might be a little bit too fast
161:31 - so let's maybe and i think this should
161:33 - also be equals pacman dot x
161:36 - plus and then how many this might be a
161:38 - little fast we might need to slow down
161:40 - but let's see now it isn't so as you can
161:42 - see pac-man now moves until
161:45 - it eats this right here
161:47 - cool
161:48 - now let's make the square disappear
161:52 - once pac-man has eaten it
161:54 - so i'm going to go here and make
161:57 - pacman
161:59 - dot eat equal to false
162:03 - cool
162:04 - now i'm going to do
162:06 - is i'm going to go here and say
162:09 - underscore g dot
162:12 - food
162:13 - i'm going to say x i'm going to create
162:14 - an entire
162:16 - table just for food i'm going to make it
162:18 - equal
162:19 - to
162:20 - 600.
162:22 - there we go
162:24 - now here i'm just going to paste food x
162:26 - here
162:28 - and now i can say
162:31 - if
162:33 - pacman dot x
162:36 - is more equal to
162:38 - food x
162:40 - and let's maybe add a little bit just a
162:42 - pacman can move a tiny bit before it
162:44 - actually disappears so maybe maybe 20
162:47 - pixels
162:49 - so if pac-man x is more equal to this
162:51 - value here
162:53 - then we want to say
162:55 - pacman dot eat is equal to true
162:59 - and then here we can say
163:02 - if
163:04 - not
163:05 - pacman dot eat
163:08 - and still this basic lure if you do not
163:10 - know what i'm talking about here you
163:12 - should go watch my tutorial on it but
163:14 - i'll explain anyways so let's first see
163:16 - what happens before i expect so here we
163:18 - have a little pacman that's now moving
163:20 - trying to eat this little square here
163:23 - once it gets to it
163:25 - it disappears because pac-man just ate
163:28 - the square
163:30 - what did we do in this small game
163:32 - program we made
163:33 - so first we set the color of the
163:35 - background which doesn't necessarily
163:36 - need to be this
163:39 - then we created a pac-man table
163:42 - and pat that pac-man table contain the x
163:44 - of pac-man the why of pac-man and if
163:47 - pac-man has eaten the why in this case
163:49 - isn't that important because we didn't
163:50 - change it the eat is important because
163:53 - if pac-man has eaten meaning if he has
163:55 - eaten that pellet
163:57 - that will basically make us not droid
164:00 - because if this is
164:02 - true then this will not execute because
164:05 - not means if this is not true
164:08 - then execute otherwise if this was false
164:10 - it would be if this is not false
164:14 - as you can see
164:15 - doesn't work that good but you could
164:17 - also have swapped it around and say true
164:20 - and in here you can make
164:22 - false
164:24 - and in here you could just say if
164:26 - pac-man.eat
164:27 - or you could have actually given it to
164:30 - this food variable here instead so
164:32 - instead of doing that we can just say
164:33 - underscore food
164:35 - eaten
164:36 - and we made it made this false
164:39 - and then we could have made food eaten
164:42 - equal to true
164:44 - here and now if we were to
164:47 - now we can just say
164:48 - food eaten
164:50 - this will also work perfectly fine
164:53 - so
164:54 - yeah
164:55 - that's the basics of that whole part
164:58 - there
164:59 - as we run this you'll notice it'll works
165:01 - yeah my bad
165:04 - and just turns out
165:06 - because there's a global variable it
165:07 - doesn't really know that too well we
165:09 - might
165:10 - so it thinks we're reassigning or we're
165:13 - kind of creating any variables i'm just
165:14 - going to put underscore g here so it
165:16 - knows we're talking about this variable
165:18 - right here
165:19 - and this should be not my bad
165:22 - because if it's not eaten if the food is
165:25 - not eaten we want to draw that food
165:27 - so that's what we're doing so if it's
165:28 - not eaten we want to draw it but as soon
165:31 - as it is becoming eaten
165:33 - then we don't want to draw because it
165:34 - has been ate or eaten i didn't know how
165:36 - to do that in the previous 10 or past
165:39 - tense very weird
165:41 - and here we just move pac-man here we
165:43 - check if pac-man has
165:45 - accessed that food palette
165:48 - and in here
165:49 - we just save it should be drawn
165:52 - and in here we draw pac-man
166:00 - so just pac-man pac-man moves and
166:02 - pac-man is about to eat this palette
166:04 - here
166:07 - as you can see but it's a very boring
166:10 - game because we're not doing anything
166:12 - so why don't we move pac-man
166:15 - i'm just going to
166:17 - delete that and here i'm going to go
166:19 - underscore g
166:22 - dot food and i'm going to make that
166:25 - equal to an object
166:27 - and then i'm going to say food
166:31 - dot x
166:33 - and here i'm going to say
166:37 - food
166:40 - dot eaten
166:41 - and now these two are both objects but
166:44 - just to show you that both of these
166:46 - methods work let's actually go x is
166:47 - equal to 600
166:49 - and eaton
166:51 - is equal to false you can do it like
166:53 - this as well there's nothing wrong with
166:55 - that
166:56 - now here we can say
167:00 - food dot eaten
167:02 - and here we can also say
167:04 - food
167:05 - dot eaten
167:06 - the game should still work perfectly
167:08 - fine at the originals just say
167:10 - and here as well so both of these two
167:12 - places
167:13 - food dot x
167:15 - now the game should still work perfect
167:17 - fine if you run it if pac-man reaches
167:19 - the food palette right here it should
167:21 - pop disappear let's see
167:25 - it does cool
167:27 - now
167:29 - why didn't we try and move pac-man
167:32 - ourselves because currently we're just
167:33 - moving it with every update which is
167:36 - kind of boring
167:37 - so let's try and move it ourselves
167:42 - so first i would like to be able to tell
167:45 - pac-man when to move forward now usually
167:47 - pac-man will move forward on his own but
167:50 - i would like to move pac-man forward
167:51 - only when i tell pac-man to move forward
167:55 - so
167:56 - let's do that
167:58 - so here i'm going to
168:00 - say if
168:02 - well if love
168:06 - dot
168:07 - keyboard
168:10 - dot is down
168:12 - and i'm going to say the letter a
168:15 - then
168:17 - i want to
168:18 - basically move pac-man backwards
168:21 - so
168:22 - pac-man
168:24 - oh no package pac-man dot x
168:27 - is equal to pac-man whoa
168:31 - pac-man dot x
168:34 - minus one
168:36 - and that's your b dot x
168:39 - i'm going to comment this out just so
168:40 - that doesn't or literally actually
168:42 - deleted we don't need it
168:43 - now basically we're saying if this if
168:46 - the a key is pressed because if it is
168:49 - down if it is being
168:51 - held in us down
168:53 - do this
168:55 - that's what we're saying so if the
168:56 - keyboard key is pressed there are better
168:59 - ways to do this than what we are doing
169:00 - but for right now i think that's
169:02 - perfectly fine it's not too complex or
169:04 - anything
169:05 - now pac-man doesn't move but as soon as
169:06 - i press the a key
169:08 - it moves backwards
169:10 - which we didn't really want when we want
169:12 - to move the other way around so let's
169:14 - actually
169:16 - go here and say else
169:18 - if
169:19 - and we can just copy this
169:22 - and let's
169:24 - put
169:25 - a
169:26 - let's put d there
169:27 - and d will move pac-man
169:30 - to
169:31 - the right
169:32 - so we want to just copy this
169:35 - and paste
169:36 - now we can just make that a
169:38 - plus now you'll notice we made pacman
169:42 - here we added that dot wider so we want
169:44 - to move pacman up and down as well
169:47 - so
169:48 - let's actually
169:50 - do that
169:52 - i'm going to copy this
169:55 - i'm just going to paste it two more
169:56 - times and i'm going to make this w
169:59 - i'm going to make this s
170:01 - and now we can say
170:03 - y instead of x
170:05 - like that
170:07 - and this should be minus
170:09 - and let's see what we get
170:12 - now we can move pac-man any way we want
170:16 - because we have control over pac-man
170:18 - that we try and eat this pellet
170:21 - still gets eaten but you'll notice if i
170:23 - press a and w at the same time
170:27 - it doesn't really move up and down at
170:29 - the same time or up and lift at the same
170:32 - time
170:35 - so how do we get around that problem
170:38 - well we just instead of saying else if
170:40 - we just say if
170:42 - and we just add our end here
170:46 - as simple as that
170:48 - so just
170:49 - end
170:50 - and here we can say
170:52 - n so we just add our individual if
170:55 - statements here
170:56 - so instead of saying else if where any
170:58 - one of those can be executed we're
171:00 - saying if
171:01 - meaning all of these can be executed all
171:04 - at once without a problem
171:06 - so now if i run this
171:09 - you'll notice i'll be i'm able to move
171:11 - up and down at the same time
171:14 - as you can see right here
171:16 - and that's something you should take
171:17 - note of because sometimes in your game
171:19 - you want that to be something you can do
171:22 - but sometimes it's not so you should be
171:24 - able to kind of figure out which one you
171:26 - want for your game
171:28 - so you can know if you
171:29 - use an if statement or an if else
171:32 - statement
171:34 - cool
171:36 - now what if you wanted to rotate
171:38 - pac-man because i know the real game
171:41 - nearly rotate that much he either looks
171:43 - up or he looks down but what if we
171:46 - wanted to do that what if we wanted to
171:48 - rotate pac-man slowly
171:51 - if we want to move around because let's
171:52 - say this is the normal pac-man we want
171:54 - to make pac-man that can kind of just do
171:57 - everything
171:58 - well that's not too difficult
172:01 - so you'll notice here we have two angles
172:03 - the x angle and the y angle
172:05 - under the x angle is just angle one and
172:07 - angle two
172:08 - now we need to change this if you want
172:09 - to rotate pac-man because you'll notice
172:11 - if we make this two and then this 6
172:14 - pacman will know it will now be rotated
172:17 - as you can see right like that
172:20 - so let's try and rotate pac-man
172:23 - so i'm going to go here
172:25 - and say i'm just going to copy this
172:27 - really
172:30 - and now i want to if the
172:32 - user presses down so that's the down
172:34 - arrow on the keyboard
172:36 - if they press down
172:38 - we
172:39 - want to basically take this angle right
172:41 - here
172:43 - and we actually want to modify it a
172:45 - little bit
172:47 - we're going to create maybe this pacman
172:49 - right here
172:50 - and say
172:54 - angle
172:55 - i'm going to just say angle one is equal
172:58 - to one
172:59 - and then
173:01 - angle
173:03 - so two is equal to
173:05 - six and that's what we have here so one
173:08 - and actually it's one and five dollar
173:09 - one and six my bad
173:10 - like that
173:12 - i'm just going to attach it to pac-man
173:14 - here
173:15 - so pac-man will now have two more
173:16 - properties angle one and angle two
173:21 - like that
173:22 - now what we want to do is we want to
173:24 - change the angle one and angle two here
173:27 - so i'm gonna go like that
173:29 - and let's do this
173:31 - and maybe make this angle two
173:35 - now let's just try and see how that
173:37 - works
173:39 - now we can't really see anything
173:41 - happening
173:43 - and actually you know why this didn't
173:44 - work it's because we never assigned
173:46 - angles here
173:47 - my bad i should have done all of this
173:49 - from the start
173:51 - so there we have angle one and now we
173:52 - can make this angle two
173:54 - now if we were to run again
173:57 - as you can see pac-man spins but it's a
173:59 - little fast you know because we can't
174:01 - really control where the spin ends it's
174:02 - too fast for us to actually figure out
174:05 - so what can we do to make this slower
174:09 - well we can actually just say
174:13 - math dot pi
174:16 - times dt
174:18 - and this is where dt comes in real handy
174:20 - because now
174:22 - we can slow it down with a lot
174:25 - as you can see here it's a lot slower
174:28 - now if we want to basically
174:31 - add more here we can just say
174:34 - else
174:36 - i'll see if i mean
174:37 - i'm just going to copy this
174:39 - and i'm going to paste it here i'm going
174:41 - to say
174:42 - up
174:43 - it's going to contain the same code
174:46 - but now instead of being plus it's going
174:49 - to be minus
174:50 - meaning i can now move either
174:52 - up or down
174:55 - as you can see here everything still
174:57 - works
174:59 - currently the angle you keep it on it
175:02 - won't really change which way it moves
175:04 - if you press w s or d but you could
175:06 - change that if you wanted to but it's a
175:08 - little bit more of the scope of this
175:10 - video
175:12 - but yeah
175:14 - that's some basics on actually moving
175:17 - things in your game using your keyboard
175:20 - so getting keyboard input there are
175:22 - multiple ways to get keyboard input
175:25 - and we're going to discover those ways
175:27 - when we create the games
175:29 - but for right now i think this is more
175:32 - than enough to cover what we need
175:39 - so we have a little character here and
175:41 - we want to make him run around
175:44 - just like that this is an image and we
175:46 - basically want to load in an image and
175:48 - make it move
175:52 - so if you want to ask it you can come to
175:56 - www
175:59 - www.gameart2d.com and just this link
176:01 - right here i'll paste it in the
176:02 - description
176:04 - and you can get it right here
176:06 - and yeah let's actually show you what
176:07 - you'll get so if you go here you click
176:09 - on free download
176:11 - then you just wait for it to download
176:14 - boom it's downloaded now you can open it
176:16 - up
176:17 - then if you extract it
176:21 - like i did right here i just extracted
176:23 - it by clicking right and extract to you
176:26 - will probably have the same option on
176:27 - windows if you don't i just recommend
176:29 - you
176:30 - go to windows and or you just download
176:33 - winrar or 7z or whatnot then you'll find
176:36 - a png file
176:38 - and you'll find all of these well the
176:40 - thing is
176:42 - i didn't exactly use these like that
176:45 - what i use
176:47 - is more something like this
176:50 - as you can see it's just one image with
176:52 - a bunch of them in one this is what i
176:55 - like to call a sprite
176:57 - these right here they're to me they're
176:58 - images but they're actually sprites as
177:00 - well now you can of course just go
177:02 - online and find a way to like add these
177:04 - together i believe there is like a
177:06 - sprite option
177:07 - or a sprite website where you can just
177:09 - go and create a sprite from images
177:12 - otherwise you can just
177:16 - all right so let's get started let me
177:18 - just close this browser
177:20 - now i'm going to just delete all of this
177:22 - because we didn't need it
177:25 - and all of this as well
177:26 - and which is very long so we just plop
177:29 - that
177:31 - and then all of this as well
177:35 - cool
177:37 - now
177:38 - first we want to set up some of the
177:40 - core basics we'll need
177:43 - and also actually i noticed i left
177:45 - myself a comment here so if you want to
177:47 - also make the sprite yourself instead
177:49 - which could be good practice if you want
177:51 - to make your own sprites
177:54 - then you can go to this
177:56 - code check dot io image sprites sheet
177:59 - generator and you just browse images and
178:01 - throw them in here that's this is what i
178:03 - used i completely forgot about it
178:06 - anyhow
178:08 - now here we first need to set up some
178:10 - basic information about the character
178:12 - jack because that's what i like to call
178:14 - my character but you can call main
178:15 - character or character or whatever you
178:17 - prefer
178:19 - and we're going to make that equal to
178:22 - and x is equal to zero and y is equal to
178:26 - zero so this will be x and y position of
178:29 - jack and you're going to go underscore g
178:31 - dot to jack to specify jack or you can
178:34 - go here
178:35 - and you can say quick fix
178:37 - and they just disable by diagnostics
178:41 - like that
178:44 - and this is a vs code thing where
178:45 - basically it won't give you an error if
178:47 - you use the lowercase global like this
178:49 - about specifying underscore g
178:51 - okay
178:53 - now you'll notice i have a sprites
178:54 - folder in my directories if i were to
178:57 - open the containing folder there's a
178:58 - sprites folder inside the sprites folder
179:01 - is a spritesheet.png
179:04 - this spritesheet is just what contains
179:06 - the spriteboy over here jack
179:10 - now we need to go inside of sprites and
179:12 - we need to access that so for the
179:14 - character i'm going to also give him
179:15 - another property called sprite to
179:18 - specify this is its sprite
179:20 - it would be love
179:22 - dot graphics
179:25 - dot new
179:27 - image
179:28 - and here we can specify sprites as you
179:30 - can see there so
179:32 - sprites
179:33 - and inside of it we have a
179:35 - spritesheet.png
179:37 - i'm going to rename that and then just
179:39 - copy the text i don't actually remember
179:40 - just copy the text and i'm going to
179:42 - paste the text here
179:44 - this will basically get that entire
179:46 - sprite for me
179:48 - cool
179:50 - now that we have that
179:52 - we can go here to underneath jack
179:56 - and here we need to set the sprite's
179:58 - height and the sprite width
180:02 - so if we were to go back here and we
180:04 - click on this sprite right here
180:06 - i know can we see the properties it
180:08 - doesn't seem like it if i click here
180:10 - nope let's open up my containing folder
180:14 - properties
180:15 - and let's say image as you can see this
180:18 - is the size of this
180:20 - image
180:22 - so 500 5352
180:25 - by
180:26 - 569 nice
180:28 - now i'm going to copy that
180:31 - and i'm going to go here to my main.lua
180:34 - and just paste it there in a comment
180:35 - because that is the width and the height
180:38 - so i'm going to create two variables
180:42 - to specify the sprite width and height
180:44 - so
180:45 - sprite width
180:47 - and then also sprite
180:50 - height now of course you could have also
180:53 - if you wanted to say sprite
180:56 - and it makes sprites equal to a table so
180:57 - a table within a table then you could
181:00 - have said image
181:01 - is equal to
181:03 - this right
181:04 - here is perfectly fine as well
181:08 - and then you're going to specify the
181:09 - height
181:12 - and the width in here as well
181:14 - you could have done this this is
181:15 - perfectly fine
181:16 - but i don't want to get too complicated
181:18 - with tables because they can be kind of
181:20 - become kind of complicated so for now
181:22 - we can just do that
181:25 - okay cool right
181:27 - now here we just say it's equal to and
181:30 - now we can say 5000 or you just copy
181:32 - this part here
181:35 - paste it here and then just change that
181:37 - into a comma
181:39 - and now this basically says the sprite
181:41 - width is this and the sprite height is
181:43 - this
181:44 - you're going to split them up into two
181:45 - lines but i like to do it in one line
181:47 - just because it's fast
181:50 - so now that you have that
181:52 - you can go to the next line
181:54 - and we can finally start working with
181:56 - the sprite in a sense
181:59 - so we need to specify a quad of the
182:01 - sprite's worth so quad is basically
182:04 - let's say right here this one block here
182:06 - that would be a quad this would be the
182:08 - next quad this would be an x squad
182:11 - now they have to be equal with support
182:14 - otherwise you might get confused and
182:15 - might have a lot of trouble so make sure
182:17 - that they are and what not
182:21 - so here we can just specify the quad
182:22 - stuff
182:23 - so
182:25 - quad
182:26 - width
182:27 - is equal to
182:29 - 669 nice
182:32 - and how do i know this because i
182:33 - actually measured this beforehand if
182:36 - this is 669 per quad
182:40 - i don't know how to measure it versus it
182:42 - did ask me how to do it i can't remember
182:44 - for the life of me
182:46 - and then you have your quad
182:49 - height
182:51 - which will be the same as your sprite
182:53 - height why because as you can see all
182:56 - the quads are the same height and
182:57 - they're the height that the entire
182:59 - sprite is
183:02 - so like that
183:03 - and you could have also put this in one
183:05 - line but i wanted to show you you can do
183:06 - both if you wanted to
183:09 - now what we need to do is we need to
183:12 - basically specify for each quad now you
183:15 - could have just used a bunch of images
183:16 - like they pre like they gave us inside
183:19 - of the
183:21 - folder
183:22 - or if you use what i use you need to do
183:24 - the following you need it for every quad
183:26 - you need to specify to love got graphics
183:29 - dot new quad
183:33 - and here you specify the location you
183:36 - start at this will change the
183:38 - height of it won't change but the width
183:41 - of it will change so we're starting with
183:44 - so this starts at zero zero so meaning
183:47 - it starts right here right there
183:52 - and then we want to specify the quad
183:54 - width row
183:57 - and then the quad height
184:00 - and this will just specify the height
184:01 - and width to get it with
184:03 - for the quad and you need to specify the
184:05 - entire sprite width and sprite height
184:09 - cool now for the next one we need to
184:11 - basically specify
184:13 - the
184:14 - quad width
184:16 - and everything else stays the same
184:19 - and now we need to do it again and again
184:22 - and again and you can already see where
184:24 - this is going you're going to have to do
184:25 - that a ton of times
184:27 - and it's going to be a bunch of copy
184:29 - paste code which we want to try and
184:30 - avoid as much as possible
184:33 - so an alternative way to go about doing
184:36 - this
184:37 - is by creating a quads table like that
184:42 - and then creating a for loop
184:44 - so for
184:45 - i
184:46 - and then we can just
184:47 - remove all of these because i need it is
184:50 - equal to one
184:51 - two and how many was there let's see
184:54 - one two three four five six seven eight
184:57 - there are eight of them so one two eight
185:00 - do the following
185:03 - and we want to just copy this
185:07 - paste it in here
185:09 - and now we can just say
185:11 - quads at index of i
185:13 - is equal to this
185:15 - but now what we can do
185:17 - is we can specify
185:19 - the
185:20 - quad width
185:24 - times
185:26 - i minus one
185:28 - so it starts at zero so by default if
185:30 - it's one minus one this will be zero so
185:33 - then is the quad with time zero which
185:36 - will return zero because anything times
185:38 - zero is zero so just what we had but now
185:41 - it has times so now once this is two so
185:44 - once i turns into two those will become
185:46 - one so there's a quad width
185:48 - and then we have our quad worth times
185:50 - three and whatnot i can actually show
185:53 - you an example of how it would have
185:54 - looked if we didn't do this it would
185:56 - have looked like that
185:58 - so let me actually just
186:00 - do
186:01 - there it would look like this
186:04 - but instead of it looking like this we
186:06 - used a for loop to make it shorter so
186:08 - this quad with part here
186:11 - as you can see it starts with zero then
186:13 - it starts with itself it starts with
186:15 - times two
186:16 - times three times four that's what we do
186:19 - here so quad width
186:20 - times zero one two etc
186:24 - so we just saved ourselves
186:25 - tons of time because now if we just add
186:28 - another quote to this sprite we can just
186:30 - update this
186:31 - as simple as that
186:34 - now we want to draw this sprite to the
186:36 - screen
186:38 - so let's go here to draw
186:41 - and
186:43 - here we can say
186:46 - glove dot graphics
186:48 - dot draw
186:50 - jack because jack is our character right
186:52 - here
186:53 - and we're going to specify the sprite
186:55 - that you draw
186:57 - and you want to specify the quote it
186:59 - should draw so once and let's just
187:01 - specify one for now
187:04 - and then we're going to say jack
187:06 - at index x and also jack at index y to
187:10 - specify the location of the sprite
187:14 - now if we were to run the oh this is in
187:16 - python this is love
187:17 - now in order to run the program we get a
187:19 - massive dude right here but that's a
187:22 - sprite
187:23 - with every sprite this will change
187:25 - because the sprites will provide
187:26 - animation the remakes that sprite 5 will
187:30 - get this where the fit is now moved
187:35 - so yeah now that we know we can do this
187:37 - let's first make jack smaller because
187:39 - jack is very big so let's say
187:41 - love.graphics.scale
187:44 - and we scale it to 0.3
187:47 - this will just make it back a bit
187:49 - smaller by scaling all of the graphics
187:51 - to 0.3
187:54 - so now he's about 0.3 is original size
187:59 - of course you could have also just made
188:01 - the sprite smaller
188:03 - by actually when you make the sprite
188:04 - making it smaller
188:06 - but in this case it's not really that
188:08 - necessary we can just say scale it and
188:11 - it will be scaled
188:13 - next up we need to work on the animation
188:17 - and we can create another
188:19 - thing here and yet again you could have
188:20 - put all of this inside of here i just
188:22 - want to show you can make them different
188:24 - but usually you do want to actually keep
188:26 - them in here
188:27 - but that's not too important for now
188:30 - now we can also create an
188:32 - animation option here
188:35 - and this will be its own table it again
188:38 - you could have made this into this table
188:40 - here as well would have worked perfectly
188:41 - fine
188:42 - now i want to specify the direction he's
188:44 - going to move in so if it's left or
188:46 - right so direction
188:50 - is equal to and then here we can specify
188:52 - something like right
188:55 - you also want to specify
188:57 - the if he's standing still or not so
189:01 - idle is equal to true so that means he's
189:03 - standing still he's not doing anything
189:05 - this will allow us to kind of give him a
189:06 - specific position so let's say that's
189:09 - the idle position so if he's standing
189:11 - idle he should look like this
189:13 - if he's not idle he should be moving
189:15 - through the frames
189:19 - then we can create the frame
189:22 - and we can make that one
189:26 - and we can create a max
189:29 - frames
189:30 - and that can be eight so these max
189:32 - frames is basically
189:34 - just the amount of frames we have here
189:37 - this also means now that we have
189:38 - implemented this max frames here we can
189:41 - go and say jack
189:43 - dot animation dot max frames instead
189:46 - meaning if the max frames here ever
189:48 - change we can just not have to worry
189:50 - about it here
189:52 - we can also change the speed so if you
189:55 - wanted to faster or slower and we'll
189:57 - make that let's say
189:59 - 20 for now
190:01 - and then we also have a timer
190:03 - and we can make that 0.1
190:06 - and this will just determine when the
190:08 - character should change frames
190:10 - so the lower the timer the more the
190:12 - character will change frames
190:15 - all right so now that we have all of
190:16 - this we can start implementing it
190:19 - so first here we want to say
190:22 - if
190:24 - and not
190:26 - jack.animation.idle
190:30 - then
190:31 - basically if he's not idling
190:34 - then
190:35 - we want to say
190:40 - jack
190:41 - that animation
190:42 - the timer
190:44 - is equal to and it is a very long thing
190:46 - to type so i'm just going to copy that
190:48 - and boom
190:50 - and now here we can say plus dt and this
190:52 - will just basically be our timer it will
190:55 - determine when the frame should be
190:57 - changed
190:58 - and here we can see
191:01 - if
191:03 - the timer
191:05 - is more than 0.2
191:09 - then
191:10 - the timer will be set to 0.1 again
191:15 - and here we can basically specify
191:18 - the character
191:20 - everything
191:21 - so let's first specify just iteration so
191:23 - we can just see the character move
191:25 - so if
191:27 - i'm just going to say
191:30 - frame
191:34 - is
191:34 - more
191:36 - than the
191:39 - max frames
191:41 - then you want to change this frame back
191:43 - to one
191:45 - so just like that and just say
191:47 - frame is equal to one
191:49 - now that we have this in place we can go
191:52 - above this line of code
191:54 - and we can say
191:56 - frame
191:58 - and we just make that equal to itself
192:01 - plus one so this will basically change
192:03 - frame every time the timer hits 0.2
192:07 - and then once this frame is higher than
192:09 - 1
192:11 - or higher than 8 which is the max amount
192:13 - here
192:14 - we're going to change it back to 1
192:17 - and it's going to start over
192:19 - now instead of saying quads here we can
192:21 - just say
192:24 - and frame
192:25 - there we go
192:27 - so now we just specify the frame it on
192:29 - instead of an actual number meaning if
192:31 - we right now
192:33 - we'll we're supposed to be getting a
192:35 - moving body
192:37 - and that's because this is if it's not
192:39 - idle and currently
192:41 - our character is very much idle
192:45 - so let's just for now set the idle to
192:48 - false
192:49 - so you just see a move around
192:52 - as you can see we get a moving body we
192:54 - can't really yet do anything because we
192:56 - haven't given them any way to do
192:58 - anything
192:59 - now that we have that
193:01 - what we can do is we can implement key
193:03 - presses
193:04 - so in the previous video i did show you
193:06 - how to do key process so let's quickly
193:08 - implement that
193:10 - so if it's not idle
193:14 - actually we don't even need to use this
193:15 - if statement we can just say
193:18 - if
193:20 - love
193:22 - dot keyboard
193:24 - [Applause]
193:26 - dot is down and we specify
193:30 - uh let's say
193:34 - b
193:35 - if we specify d
193:36 - the idle should become false
193:39 - so we can just specify this idle
193:43 - and you can make that equal to false
193:44 - because this is being held down meaning
193:47 - it should move
193:50 - and then we can say
193:52 - else well let's go i'll save here
193:55 - and we can copy this
193:59 - paste it here and we can make this equal
194:01 - to a and we'll do the same thing so both
194:03 - of these will do exactly the same thing
194:06 - for right now
194:08 - and in here we can just say true
194:11 - and if none of them are like that we can
194:12 - just say else
194:15 - copy this and make it equal to
194:17 - true again
194:20 - like that
194:21 - so now
194:22 - this we can make a move
194:25 - by specifying or by pressing a and d but
194:29 - you'll notice it doesn't go back to the
194:31 - idle frame
194:32 - that is because we need to set
194:34 - the idle frame
194:37 - so when this doesn't get doesn't get
194:40 - clicked we should set the idle frame
194:44 - so basically here we can say
194:49 - frame
194:50 - is equal to
194:52 - and
194:53 - we can just specify one
194:56 - because if we're not going to press it
194:57 - we can just say one because then by
194:59 - default it will be that one as you can
195:01 - see now goes back to his idle frame
195:05 - pretty simple
195:08 - so yeah so if none of these two buttons
195:10 - are clicked then we're going to set them
195:12 - to idle and set this frame to one
195:15 - we can maybe go here and here we see the
195:17 - directional right
195:19 - so we can get the direction and here we
195:20 - can say
195:22 - control c and just change this to
195:24 - direction
195:25 - and we can make this equal to right
195:31 - and here we can make it equal to lift
195:34 - now i can use this direction here to
195:37 - specify where the character should be
195:38 - moving to
195:40 - so if
195:42 - the whoa
195:46 - direction that is right
195:50 - so if the direction is equal to right
195:52 - then we want to change the characters
195:55 - go to so
195:57 - we can say jack
195:59 - dot x because i want to change the x
196:02 - position of jack
196:03 - is equal to
196:05 - jack dot x
196:07 - plus
196:08 - anyways i just
196:10 - paste that or damn it jack dot animation
196:13 - dot speed
196:15 - so basically we'll move further to one
196:18 - side depending on where don't do that
196:21 - depending on the speed we put here
196:26 - cool
196:27 - now we want to check if it's left as
196:30 - well
196:31 - so here we can see
196:32 - else
196:34 - and we just copy this if statement
196:38 - paste it here but now we can make this
196:40 - if it's lift
196:42 - and we can say
196:43 - minus
196:45 - like that
196:47 - now if we were to run this you'll notice
196:50 - we can move forward and we can move
196:52 - backwards that's pretty neat
196:54 - if you want them to move forward or
196:55 - backwards faster or slower
196:58 - then here we can make that 30 that will
197:01 - make it move forward or backwards faster
197:03 - as you can see here
197:06 - so the more you make this the more you
197:08 - increase this
197:10 - the faster it will move so you can see
197:12 - now it's running
197:13 - i don't have enough frames to cover
197:15 - running that fast interesting
197:19 - also i forgot to mention if you're
197:20 - seeing a very bad frame rate on your end
197:23 - just think that i am filming at 15
197:25 - frames per second so you might see bad
197:27 - frames compared to what i see
197:30 - anyhow now that we have that
197:32 - we can start making the character switch
197:36 - which way it's looking towards because
197:39 - currently the character just
197:41 - runs forward backwards like it's not
197:43 - normal to run backwards like that
197:45 - so we need to make the character start
197:47 - looking forward
197:49 - so i'm just going to turn down the speed
197:50 - here to something like 20 again
197:54 - now here we can basically just get the
197:56 - direction so i'm going to just copy this
197:58 - if else statement
198:01 - and now we can just draw the
198:04 - character
198:06 - let me just actually do an lc really
198:07 - need the rest
198:09 - now we can just draw the character to
198:11 - the location we want it to
198:14 - so if it's right we can just draw him as
198:16 - normal
198:19 - but if it's
198:20 - lift you have to do a little extra to
198:24 - make it him turn because currently he
198:26 - doesn't turn
198:27 - so we have to flip him because here he's
198:30 - only facing one way so we need to kind
198:31 - of flip him around to make him face the
198:33 - other way
198:35 - so right here after you specify the y
198:37 - position
198:38 - you can specify
198:40 - zero
198:41 - negative one one
198:44 - quad width
198:47 - and zero
198:48 - now you might be wondering what are all
198:50 - of these numbers
198:51 - so this first zero here this specifies
198:54 - the radius or the radians not the radius
198:57 - this will make the character maybe let's
198:59 - say flip himself
199:01 - so instead of looking like that he's
199:03 - facing upwards or facing downwards
199:06 - that's this part right here that's the
199:07 - radiance
199:09 - this part right here
199:10 - is the scale factor
199:14 - to the x-axis and the scale factor to
199:16 - the y-axis so this will make him flip
199:18 - other way around
199:20 - this right here is the offset as well as
199:23 - this this is just to make him not look
199:24 - weird while we're moving around and i'll
199:26 - shoot her in a second so as you can see
199:28 - we can now face two ways
199:31 - so let's start with the first part if we
199:33 - go here and make that 20 for example 20
199:35 - radians not radius but radians
199:39 - actually yeah as you can see it goes
199:41 - crazy so once we switch him around he's
199:43 - facing a way different way i find it
199:47 - very funny actually
199:48 - but yeah that's if we change that
199:50 - because that will just kind of swap the
199:51 - way he's looking towards
199:53 - so whenever we don't press d it's going
199:56 - to flip him around
199:59 - this is just to keep him looking to his
200:01 - specific location so if i were to remove
200:03 - that negative there is going to look the
200:05 - same way
200:06 - no matter which way we turn actually
200:08 - he's just going to disappear oh wait
200:12 - that actually just moves him to the
200:14 - okay
200:15 - very confusing but yeah that just moves
200:16 - him backwards so i guess my origin
200:18 - offset i got that wrong probably anyways
200:21 - i can make that back to negative one but
200:24 - you'll anyways notice he didn't while i
200:26 - was doing that so as you can see it
200:28 - didn't quite turn either so if you were
200:30 - to make that one it's not going to turn
200:33 - [Applause]
200:34 - you're going to kind of
200:36 - run the same way looking
200:38 - just from a different location as you
200:39 - can see right there
200:44 - and of course you can play around with
200:45 - like making 0.4
200:47 - seeing how it turns around now could be
200:50 - interesting
200:51 - see here
200:53 - yeah now he just looks weird but
200:55 - basically he's being flipped so he's
200:57 - literally being completely flipped
200:59 - around
201:00 - you can play around with that use x to
201:03 - kind of play around with it a bit more
201:04 - to understand how it works i'm going to
201:06 - leave it right there then here is the
201:08 - same thing but just the other way around
201:10 - so if we were to minus that now we will
201:12 - do the y-axis as well so boom yeah yeah
201:16 - i probably bring him down otherwise we
201:17 - won't be able to see him
201:19 - but yeah that will do it on the y-axis
201:21 - as well
201:24 - and here we just specified a quad width
201:26 - to kind of get the offset and then the
201:28 - height so these two aren't too important
201:29 - we just need to put them there to so it
201:31 - knows where to put it
201:33 - and right now we have created a
201:35 - character
201:37 - they can actually walk around
201:40 - and do as he pleases
201:42 - and hello everyone if you're enjoying
201:44 - this tutorial please leave a like and
201:46 - subscribe for future tutorials
201:52 - you probably want to see what game we're
201:54 - going to build
201:56 - so let me just
201:58 - start up everything here and then boom
202:01 - now here we go so this game is called
202:05 - save the ball it's one of the very first
202:07 - games i made when i try to create a game
202:11 - so we have things like the fps counter
202:13 - which is optional we have buttons
202:16 - and yeah
202:17 - now if we click on play game we
202:20 - basically get this we get a little
202:21 - counter here that counts how many points
202:23 - we have this is based on seconds so
202:26 - every second will give you a counter or
202:29 - a point
202:30 - and then if you have enough points then
202:32 - the next level will start where there
202:34 - appears another ball
202:37 - now these balls will get faster and
202:39 - faster with every level you make
202:41 - for an example in this case
202:44 - the first level is 15
202:47 - and in the second level i believe is 30
202:49 - yes
202:50 - and there's another level at 40 i
202:52 - believe and one at 60 and it just goes
202:54 - on
202:56 - but it's very basic game but it teaches
202:58 - you things like collision detection
203:01 - how dt works how to get the fps how to
203:04 - draw shapes all of these things in live
203:07 - 2d
203:08 - and then you also have your game over
203:10 - screen with your score
203:12 - and you can say something like replay if
203:13 - you want and yeah
203:16 - so that's the basics of the game
203:19 - now if you do ever fall behind when
203:21 - trying to play this game
203:24 - you can always just
203:26 - go to
203:28 - well my bad
203:29 - and always just go to github and this
203:32 - link will be in the description if it's
203:34 - not just
203:35 - send a comment my way and i will
203:37 - remember to put it here
203:39 - now in this repository here youtube
203:41 - projects on
203:43 - you can go here to lua
203:46 - and inside of it you'll see a folder
203:47 - called save the ball
203:49 - and in here you'll have multiple parts
203:52 - we are on part one so everything we're
203:54 - going to do is going to be right here so
203:57 - if you fall behind or you want to maybe
203:59 - go check you can come here
204:01 - and part five would be the end result
204:05 - okay cool
204:07 - so let me just move this back to its
204:09 - original screen
204:11 - now here i have an empty folder i'm
204:13 - going to create a new folder and call it
204:16 - save the
204:18 - ball
204:19 - you can add spaces and whatnot i'm going
204:21 - to keep it spaceless
204:23 - and then in here i'm going to create a
204:25 - new document or a new file and call it
204:29 - main dot lua
204:31 - now what do you need to know before we
204:34 - start with this tutorial
204:36 - you need to know love 2d i have a whole
204:39 - course on it with like five parts or
204:41 - something
204:42 - that you can watch if you have not seen
204:44 - those tutorials yet i do recommend you
204:47 - do
204:47 - because they are going to be very useful
204:50 - you don't have to see them we are going
204:52 - to cover a lot of things from the start
204:54 - but i do recommend you do because it
204:56 - will just make things so much easier if
204:58 - you do
204:59 - and you also need love 2d installed of
205:01 - course
205:03 - now i'm going to open up vs code in here
205:06 - but you can open up whatever you want to
205:10 - i just prefer coding in vs code
205:14 - so here's vs code i'm going to close
205:16 - this
205:18 - and here you see there's my main.lua
205:20 - file i created
205:22 - cool
205:24 - now
205:26 - let's start by first importing love
205:29 - so i'm going to say
205:32 - local love
205:34 - is equal to require
205:36 - and love
205:38 - now we can create our free functions we
205:40 - need so function
205:43 - love dot load
205:45 - and this one will be love dot update
205:47 - and this will be
205:49 - love.draw
205:52 - cool so as we know this will load
205:54 - everything we need into the game
205:57 - this will update the game
205:59 - and this will draw everything to the
206:00 - screen
206:02 - now
206:02 - we can save this and we can also open up
206:04 - our terminal which i'm going to move to
206:06 - the right
206:08 - and now here we can say love dot
206:11 - so it does nothing love2d here does it
206:14 - absolutely nothing
206:16 - so what i'm going to do you do not have
206:18 - to do this but i'm going to do this
206:20 - if you can just
206:22 - there we go i'm going to create a new
206:24 - file call it conf
206:26 - lua
206:27 - you do not need to create this
206:29 - configuration file i however am going to
206:31 - create it
206:33 - because
206:34 - i would like
206:36 - my
206:37 - window to pop up on the second screen
206:40 - but you do not have to do this because
206:41 - you might not have a second screen
206:44 - so t dot window
206:48 - dot display and we can make that
206:50 - equal to two
206:52 - this should open it up on this window
206:57 - now we can just run
206:58 - love dot again
207:00 - and there we go
207:02 - cool
207:03 - now we can go back here
207:05 - will you close that con file because i
207:07 - don't need it open anymore
207:09 - and yeah
207:11 - so first i would like to set the title
207:14 - of the window
207:15 - so love dot window
207:18 - dot set
207:19 - title
207:21 - and we can set it to save
207:23 - the ball
207:25 - now you could have also put this inside
207:28 - of that conv.lua file if you saw my
207:31 - tutorial on it you do know how to put it
207:33 - in there although i want to show you the
207:35 - alternative methods of doing these
207:37 - things as well so i'm going to do it on
207:39 - the unload of this love2d game
207:42 - but if you want to you can do it here as
207:44 - well because you can do this windows
207:45 - display thing you can also do it in here
207:48 - you can do the windows resizing in here
207:49 - you can do everything you want in here
207:52 - first thing i want to do is i want us to
207:54 - be able to see the cursor
207:57 - because if you might have noticed or as
207:59 - you may have noticed
208:01 - if i were to just move this back here
208:05 - our cursor is a little white dot that's
208:08 - our mouse
208:10 - i want to code this into the game right
208:12 - now
208:14 - so let's do that let's code it in
208:17 - so first thing we'll need is we'll need
208:19 - to get the player location and that's
208:22 - going to be that little circle
208:25 - so local player is going to be equal to
208:28 - this and you could also put this inside
208:30 - of this load it's optional
208:33 - then we need three things we need the
208:35 - radius
208:38 - going to make that equal to 20
208:40 - within an x position and we're going to
208:42 - make that equal to 30 and we didn't need
208:44 - a y position and make that equal to 30.
208:46 - you could make this equal to zero as
208:47 - well
208:48 - it doesn't matter i just like doing 30
208:51 - because why not
208:53 - cool
208:55 - now we need to basically always update
208:57 - that position so player
209:00 - dot x
209:02 - and player dot y
209:05 - is equal to
209:07 - the love dot
209:09 - mouse
209:10 - no mouse
209:13 - dot get position
209:16 - so this right here returns two values it
209:20 - returns an x and a y position value
209:24 - so we're storing the first value we get
209:26 - into this player.x which is this and the
209:29 - second value we get in the player.y
209:31 - which is this
209:32 - and we're doing it on every update
209:34 - because every time the player moves the
209:36 - cursor
209:37 - an update will occur
209:40 - now you may also notice
209:42 - if i move around things might look a
209:44 - little bit laggy but that's just because
209:45 - i record on 15 frames per second
209:48 - because that's just what i'm used to and
209:50 - that's what i edit in
209:52 - so things may look a bit laggy but on
209:54 - your end it should not be looking laggy
209:55 - you should be getting about 30 to 60
209:57 - frames a second
209:59 - all right
210:01 - now here with the draw
210:03 - we want to basically draw the circle
210:06 - so i'm going to say
210:08 - love dot
210:09 - whoa
210:10 - love.graphics.circle
210:15 - i'm going to go
210:17 - fill method
210:19 - player.x
210:21 - player dot y
210:23 - and also player.radius
210:26 - this will draw a circle where the
210:28 - players x and y meets up and give it the
210:31 - radius that we specified up here
210:33 - now if we were to run this
210:36 - we'll get a massive circle
210:39 - now this is the end game circle
210:41 - because we will have two states
210:44 - that we're going to be using right now
210:47 - and those two states will determine the
210:49 - size of the player
210:52 - so i'm going to create a local game
210:54 - and it's going to be a table
210:56 - with state
211:00 - now we have a menu
211:03 - and we're going to make it equal to true
211:06 - now this will be the states we have
211:09 - so for example we have a menu state if
211:11 - it's a menu state it's going to show the
211:13 - menu if it's the paused state it's going
211:16 - to show a paused menu
211:18 - now here i'm going to make that paused
211:21 - i'm going to make that running
211:24 - and i'm going to make this
211:26 - ended
211:27 - now currently
211:30 - we want all of these to be false
211:34 - and just this one to be true
211:36 - that's for the menu state
211:38 - now down here we want to specify
211:42 - when should it do what size
211:45 - so i'm going to go if
211:47 - game.state
211:50 - and we declared state up here
211:53 - and then
211:54 - in square brackets and in quotation
211:57 - marks i'm going to say if it's the menu
211:59 - state
212:00 - so like that and you'll notice right
212:02 - here
212:03 - so if it's the menu state then we want
212:06 - to
212:07 - basically do this
212:09 - and we just want to divide this by two
212:12 - so if it's the menu state then it should
212:13 - be the normal circle size but just
212:16 - divided by two
212:18 - i'm going to create another if statement
212:21 - but this one will contain a not menu
212:24 - and there's a reason i don't make this
212:26 - an if else statement and you'll see in
212:28 - the future tutorials
212:31 - so here i'm just going to remove that
212:32 - divided by two
212:34 - now if we were to run the game
212:37 - we'll see this a much smaller circle
212:41 - that's because we're in the menu state
212:43 - so the circle is half its original size
212:46 - now if i were to change the menu to
212:49 - false
212:51 - and then the running to true
212:55 - and my bad these two should be running
212:58 - not menu
213:00 - and now that we have that we can
213:01 - actually just move that so divided by
213:03 - two and we can just move it to the
213:04 - bottom one
213:06 - so now the first one is if the game is
213:08 - in its running state meaning if the game
213:10 - is being played give us the full
213:14 - circle
213:14 - otherwise in any other state have the
213:17 - size of that circle
213:19 - now if we run it we get the full circle
213:21 - because it's in a running state
213:23 - any other state we switch to no matter
213:26 - what the state if we make this false and
213:28 - we make the state
213:31 - of paused to true
213:34 - then you will get the smaller version as
213:37 - you can see here so any other state will
213:38 - give us a smaller version but running
213:40 - will give us the big version
213:43 - cool so i'm going to change this back to
213:45 - menu state
213:49 - now we need to hide
213:52 - the cursor because as you can see the
213:54 - cursor is still there
213:55 - we don't really want the player to see
213:57 - the cursor because it breaks the
213:59 - immersion a little bit
214:01 - so to get rid of the cursor
214:03 - what you can do is here in the load we
214:06 - can say
214:08 - love dot mouse dot sit visible and you
214:12 - can make this equal to false this will
214:14 - make the mouse
214:16 - invisible
214:17 - so now
214:19 - if you run it there's no longer a mouse
214:21 - i can still move around but the mouse
214:23 - itself is gone
214:26 - now one last thing i do want to
214:27 - implement is the fps counter because
214:30 - let's say you're getting very bad fps
214:33 - you might have coded something wrong or
214:35 - something like that because the fps
214:37 - should usually stay at around 60 fps
214:41 - may be falling to 30 but usually it
214:43 - should be 60 fps and we need a way to
214:46 - see that
214:47 - so here at the top because we don't want
214:49 - the fps to block anything so it should
214:51 - be at the top so it always if there's
214:53 - something above it the fps doesn't go
214:55 - over it anyways we can say love.graphics
214:59 - dot print
215:02 - print f
215:05 - and here we can just say
215:07 - fps
215:08 - colon
215:10 - and then dot dot is to concatenate the
215:13 - string
215:14 - love the timer
215:15 - dot get
215:17 - fps
215:20 - and should be timer not time
215:23 - and there we go now if we run it
215:27 - we actually get an error
215:29 - and i believe we get this error
215:31 - because we should specify
215:35 - our font
215:38 - so
215:39 - love the graphics the new font and i'm
215:42 - going to specify 16
215:45 - and let's specify an x and y location as
215:48 - well so let's go 10 10.
215:51 - so now we have a font size of 16 at its
215:53 - x and y position is 10 and 10.
215:56 - now if we run it we still get an error
215:59 - and we just also need to specify where
216:01 - it stretches to
216:04 - so
216:04 - graphics dot
216:06 - with
216:09 - should work perfectly fine and this
216:11 - should be get with
216:12 - [Applause]
216:17 - as simple as
216:18 - that now let's hope for the best there
216:21 - we go we get a little fps
216:24 - as you see it's around 60 fps and that's
216:26 - where it's good
216:28 - okay cool now just because i have a
216:30 - little screen space i'm going to just
216:33 - split this up into multiple lines
216:36 - like that okay
216:38 - so first we display the fps
216:41 - then we set the font size
216:44 - then here is the x position which we can
216:46 - keep
216:47 - here is the y position which i would
216:50 - actually like to go
216:52 - love.graphics
216:54 - but get height
216:56 - -10 and this will put it at the bottom
216:59 - of the screen which is what i want i
217:01 - want the fps to be at the bottom of the
217:02 - screen just because it's less
217:04 - distracting let's make that 30 just to
217:06 - make a bit bigger or a bit higher
217:08 - and then this basically sits how far as
217:11 - you go before wrapping the text
217:14 - now if you were to run the code
217:16 - or fps is here at the bottom
217:20 - and that's the very first part of the
217:22 - tutorial
217:23 - we didn't do a lot we just basically set
217:25 - the game state
217:27 - created the player
217:30 - created the load the update and the draw
217:33 - functions where the load sets the window
217:35 - title
217:36 - it makes the mouse invisible
217:38 - it then we get to update and it updates
217:41 - the player x and y positions then on
217:44 - draw it puts the fps on the screen
217:47 - and if the game stays running it draws a
217:49 - circle with the player x and y position
217:52 - and also the player radius
217:54 - if the game state is not running then it
217:56 - does the same as with running but it
217:58 - divides the player size in two
218:06 - so first of all
218:08 - this right here this doesn't need to be
218:10 - here you can actually remove that it
218:12 - will run perfectly fine because by
218:14 - default love will import it but i'm
218:16 - still going to keep this here just to
218:18 - get all of those errors away and whatnot
218:21 - so yeah that's up to you
218:23 - before we continue right
218:25 - okay so in this tutorial we'll be
218:27 - creating the enemy the enemy that's
218:29 - going to kind of run after us
218:32 - and whatnot
218:34 - so first i would like to give our game
218:37 - another
218:39 - difficulty
218:42 - and difficulty is going to be set to one
218:45 - now the higher the difficulty
218:48 - the
218:48 - more difficult the game should be
218:51 - as simple as that because the speed of
218:56 - the enemies will be kind of dependent on
218:59 - the difficulty as well
219:01 - and then we want to create a table
219:03 - called enemies
219:05 - now this table isn't going to be used
219:07 - too much in this tutorial because we're
219:09 - only going to have one enemy
219:11 - but once we get deeper into it this
219:14 - table will be
219:16 - containing all our enemies
219:18 - so all our images are going to go in
219:20 - here
219:21 - we want to basically create our enemy
219:24 - object
219:25 - now we could do it in here but this file
219:27 - is already going to be very big by the
219:29 - end of this tutorial
219:31 - so we want to create a new file
219:34 - so right here we can right click new
219:36 - file and say
219:38 - enemy dot lua i'm going to give it a
219:41 - capital case
219:43 - e in its name to signify that this is an
219:46 - object it's completely optional it's
219:48 - just how i like to do things
219:51 - if you have seen my tutorial on oop
219:54 - you will probably know there's multiple
219:55 - ways you can do oop in lua
219:58 - and the first way is by using a table
220:01 - the second way is by using a function
220:03 - and a table
220:04 - and there are more ways but i don't like
220:06 - covering the others because they're kind
220:07 - of difficult to understand in my opinion
220:10 - so in this case i'm going to use
220:12 - functions and tables
220:15 - because i found those to be the most
220:18 - easiest to use
220:19 - so first we want to import love so local
220:22 - love is equal to require
220:25 - love
220:26 - cool
220:28 - and we don't need a semicolon
220:30 - we're going to create a function and
220:32 - we're going to call it enemy and this is
220:34 - going to be our object for enemy
220:36 - now at the end of this function we want
220:38 - to say return
220:39 - enemy
220:40 - and this will basically export this
220:43 - enemy when once we import it here so
220:46 - this will be exported this function
220:49 - right here it's just so this massive
220:51 - function won't have to be found or used
220:54 - or what not in here we don't have to see
220:56 - that massive function in here because it
220:58 - will be stored here so let's start with
221:01 - very basics we're going to return
221:04 - and whatever is inside of this right
221:07 - here this table is going to be what's
221:08 - returned to us
221:11 - so first we want to set the level
221:14 - to 1 by default
221:17 - the radius
221:20 - i'm going to make that equal to 20
221:23 - then the x is going to be equal
221:26 - to and there's going to be enemy
221:28 - position for in case you didn't know
221:31 - i'm going to make it let's say negative
221:32 - 10
221:34 - and the y is going to be equal to
221:36 - negative 50.
221:39 - so basically this is where the enemy's
221:41 - start position will be
221:43 - we want it to be off the screen
221:46 - and we're going to randomize where they
221:47 - actually come from later
221:49 - but currently we want it off the screen
221:52 - because it should kind of just pop into
221:54 - the screen as the level goes on so more
221:56 - enemies will pop into the screen
221:59 - cool
222:00 - so these are the first
222:01 - few things we'll use
222:05 - next up we need to basically create
222:07 - something to draw the enemy and
222:09 - something to move the enemy
222:12 - let's first try and move the enemy
222:14 - because that's probably going to be the
222:15 - most difficult part here is just moving
222:18 - the enemy and that's going to be a
222:20 - function inside of this
222:21 - table so it's a function inside of the
222:23 - table
222:25 - and it's going to take in three items
222:27 - self it again in my oop tutorial
222:31 - because it's going to take in itself
222:33 - we also want to get the player
222:36 - well player
222:38 - x and the player
222:40 - y
222:42 - you could pass in the entire player in
222:44 - here but i feel like that would just be
222:46 - kind of a waste of memory on the end of
222:48 - the day because you're going to pass an
222:49 - entire object where you can just pass
222:51 - into values so i do recommend passing in
222:54 - these two specifically just x and the y
222:57 - cool now basically we want to make the
223:01 - enemy move to the player
223:04 - that's all we want to do very simple we
223:06 - just want the enemy to go towards the
223:08 - player
223:09 - so it will just be basic if statements
223:11 - so if
223:13 - player at index x
223:16 - or at x position
223:18 - minus self.x and this self is
223:21 - referencing this x right here so where
223:23 - the enemy currently is
223:26 - so if this value is more than zero
223:31 - then
223:32 - self dot
223:34 - x
223:35 - is equal to self dot x plus
223:40 - self dot level
223:44 - so what we are doing here is basically
223:46 - if the player x
223:48 - minus self.x if that is more than zero
223:52 - and we're minusing here because
223:54 - remember x starts basically at this
223:57 - point right here
223:58 - all right so future steve here and
224:01 - you know i realized this wasn't a very
224:04 - great explanation
224:06 - so let me actually explain it better let
224:09 - me just move this to number three
224:11 - so
224:12 - here we have basically our example
224:15 - it's saying if the player at position
224:18 - the x position of the player
224:20 - minus
224:22 - the x position of the enemy so let's
224:25 - quickly go here and just draw it out
224:26 - let's say the enemy is a red square
224:30 - so this is the enemy
224:34 - and but actually let's make it a circle
224:36 - otherwise things might get confusing
224:37 - okay so the enemy is a red circle
224:40 - and the player
224:42 - is a blue circle
224:44 - just draw a nice circle here there we go
224:48 - now
224:50 - here we're saying
224:51 - if the player at position x
224:55 - okay
224:57 - so the x position of the player would be
224:59 - there at the center
225:00 - that would be
225:02 - the x position from here
225:04 - all the way up until there that's the x
225:07 - because remember x goes from side to
225:11 - side
225:12 - that's x
225:14 - while y goes up and down
225:18 - so this would be y
225:21 - so then so just remember that
225:24 - so this is the x right
225:27 - now we go here if the player x
225:31 - and
225:32 - yeah so the player x minus self.x
225:36 - and self.x would be the x of the enemy
225:40 - so this right here
225:41 - this would be the enemy x that's self.x
225:44 - so
225:46 - so this is the enemy south.x right there
225:50 - now if we go here
225:52 - we see
225:53 - if it is more than zero
225:56 - okay so let's put this in a mathematical
225:58 - perspective
226:00 - so let's say this right here is 63
226:04 - the x position of the player is at
226:06 - position 63
226:08 - and the x position of the enemy is at
226:11 - position 10.
226:13 - now we are saying
226:16 - player at position x okay so it's
226:20 - 63 whoa
226:22 - just
226:24 - 63
226:25 - right
226:29 - minus self.x okay so it's minus 10
226:32 - because remember self.x is the enemy so
226:35 - it's 63 minus 10
226:38 - right
226:39 - and that will give us
226:42 - 53
226:45 - so the position between this point
226:48 - and this point is 53
226:53 - that's basically what's being said here
226:55 - and then we're saying if it is more than
226:58 - zero and we know 53 is more than zero
227:02 - then we're saying self.x
227:05 - so this would be the player x or the
227:08 - enemy x not the player the enemy x is
227:10 - self.x everything self.x
227:14 - is equal to itself
227:16 - okay so self.x which is 10 let's let's
227:18 - make this red because we're talking
227:19 - about enemy so it's 10
227:23 - because we're saying south of the x
227:27 - okay so it's going to be itself so that
227:29 - is self.x
227:31 - plus its level
227:33 - so plus
227:34 - one
227:36 - so we are saying south to x
227:39 - becomes itself plus one so now self.x
227:42 - will be eleven
227:44 - because it will now be one step closer
227:47 - to the enemy meaning this right here
227:51 - will minus with one because 63
227:54 - minus 11 and remember we got 11 with
227:57 - that quick equation so that would be 11.
228:01 - so 63 minus 11
228:03 - is equal to 52.
228:08 - so that will basically close the gap
228:11 - between the enemy and the player
228:14 - this might be a little bit confusing to
228:16 - work with like a lot of the math might
228:18 - be in game development but don't get
228:20 - discouraged because the more you work
228:22 - with it the more you'll understand it
228:25 - so yeah back to the video now we also
228:28 - want to do the other side of x so let's
228:30 - say the enemy is to the right of the
228:32 - player so
228:34 - else if
228:36 - and then player
228:38 - [Music]
228:40 - minus self.x
228:43 - is less than zero
228:46 - so basically
228:47 - if the player x minus south.x because
228:50 - remember x becomes more the more you
228:52 - move right
228:53 - so if the enemy is more right than the
228:55 - player then this will be a negative
228:58 - value this will return something
228:59 - negative
229:01 - so basically
229:03 - let's say this right here
229:05 - that's the enemy
229:07 - and this right here oh yeah no not
229:10 - yellow we can't see that
229:12 - okay and this right there that's the
229:14 - player
229:15 - now let's say on x
229:18 - so x here will be equal to two
229:21 - and x here
229:23 - would be equal to five
229:26 - and remember this is the enemy that's
229:27 - why he's red he is bad he's the enemy
229:31 - bad
229:32 - uh so let's just full screen this so
229:34 - here we're saying if the player minus
229:36 - self.x is less than zero
229:39 - so
229:40 - if the player so two
229:42 - minus self.x and remember this is the
229:44 - enemy so minus five is less than zero
229:50 - then do something now two minus five is
229:52 - negative three
229:55 - so
229:55 - this will return true so if the enemy is
229:58 - to the right of the player
230:01 - it will return true
230:04 - and with the top one if the enemy was to
230:06 - the left of the player it would return
230:08 - true if the enemy you know it would be
230:11 - the same thing just other way around
230:13 - now here you can just say self dot
230:16 - x is equal to self.x minus self.level
230:22 - because we want to decrease the
230:24 - exposition of the enemy
230:26 - if you're having trouble kind of
230:27 - wrapping your head around this don't
230:29 - worry the first time it can be a bit
230:31 - difficult i had the same problem when i
230:33 - first thought of this like oh well my
230:35 - brain can't wrap around this math many
230:37 - worry it gets easier
230:39 - and it's going to be the same thing but
230:41 - for y
230:43 - so if y let me just
230:46 - change all of these to y
230:48 - so if player y minus self.y is more than
230:52 - zero
230:53 - then sound.y becomes the same but plus
230:56 - it's the same thing now it's just why
230:58 - because if i were to open up drawing ooh
231:03 - and basically remember y goes down
231:04 - that's how y goes
231:06 - so this is the player
231:09 - and
231:10 - this is the enemy
231:12 - now let's quickly go check here
231:14 - so if the
231:17 - player y
231:19 - minus the enemy y is less than zero so
231:22 - the enemy y let's say is equal to
231:25 - ten
231:26 - because remember goes down so this would
231:28 - be zero and this would be something like
231:31 - 20 or something
231:33 - and here the y would be equal to let's
231:36 - say five
231:38 - now here we're checking
231:40 - if the player y minus south of y is less
231:44 - than zero
231:45 - so is five minus ten is less than zero
231:48 - and those two minus will be negative
231:51 - five
231:52 - right and that is less than zero
231:54 - then
231:55 - we're saying the wrong window
231:58 - self.y becomes itself minus level so it
232:02 - will decrease
232:04 - so now we're saying okay move this
232:06 - upwards so now the y
232:09 - will
232:10 - become nine because we're moving it
232:13 - upwards
232:14 - and this is going to run with every
232:16 - update
232:17 - so it's going to move the enemy closer
232:19 - to the player with every update
232:22 - so yeah let's continue to the next part
232:24 - then
232:25 - now you want to be able to draw the
232:27 - enemy so that was going to be another
232:29 - function called draw
232:30 - it's going to be function
232:32 - taken self doesn't have to take anything
232:34 - else
232:37 - and here we first want to set the color
232:40 - love
232:42 - dot
232:43 - dot graphics
232:46 - dot set
232:47 - color
232:49 - this is basically just going to set the
232:51 - color of the thing we're going to draw
232:53 - now i'm going to choose a very random
232:55 - number
232:56 - in order to figure this out so i'm just
232:58 - going to say 1 0.5 and 0.7 i just random
233:02 - number that popped up into my head
233:04 - remember you could have also gone like
233:06 - 255 divided by two five five
233:09 - and the same here you could have just
233:10 - gone
233:11 - what's the half of two five five
233:14 - anyway the half of two five five divided
233:15 - by five five so you could have done that
233:17 - as well
233:18 - but i preferred not to in this case
233:21 - and then we're going to draw a circle
233:22 - but you can make the enemy a different
233:24 - shape than a circle i just find it
233:26 - easier to do it as a circle
233:28 - so love dot graphics dot circle and
233:32 - we're going to fill
233:34 - this circle we're going to put our
233:36 - position self.x self
233:40 - dot y and it's make the size of
233:43 - self.radius
233:46 - we're going to draw a circle
233:49 - it's the x index the y index and then
233:51 - we're going to give it this size right
233:53 - there
233:54 - and we set all of that up here
233:57 - and then we can say love dot graphics
234:00 - dot sit colors we're going to reset the
234:02 - color back to white because that's going
234:04 - to be your default background color you
234:06 - don't have to set it here but i prefer
234:08 - setting it here then having to set it
234:11 - here in this draw function over and over
234:13 - and over it also just brings it also
234:16 - just prevents a bunch of bugs that could
234:17 - possibly occur
234:20 - okay so that's the most basic version
234:22 - well later on for in letting jump in
234:24 - from random size but i think for now
234:26 - that should be fine
234:28 - so this is the enemy
234:31 - now here we have our enemy object
234:34 - and now we can insert our very first
234:36 - enemy so here in load we want to insert
234:38 - our first enemy
234:40 - table.insert and it's just a normal
234:42 - insert method
234:44 - and i'm going to insert it into the
234:46 - enemies table right there and we need to
234:49 - import enemy now that i think about it
234:50 - so local
234:53 - nm enemy
234:56 - and you don't have to
234:56 - [Music]
234:59 - give it the same name
235:00 - i just like using this name and we're
235:02 - going to say
235:03 - enemy
235:05 - and it should be capital e
235:07 - that just means basically import enemy
235:09 - from this file right here
235:12 - that's what we're saying right here
235:16 - cool
235:17 - now that we have that
235:19 - we can go here
235:21 - and we can say at index one
235:24 - insert
235:25 - our first enemy
235:27 - and it should not have a capital e
235:29 - because we gave it a lowercase e as a
235:32 - name or we should have there we go
235:34 - lowercase e not capital e
235:37 - okay but you could give it a capital kc
235:39 - name i just preferred going lowercase
235:42 - cool
235:42 - and that will insert our first enemy
235:45 - now here an update before we can
235:47 - actually try and use this enemy
235:49 - we need to basically for
235:53 - i and yeah let's just like that
235:56 - for i
235:57 - equals one
235:59 - and let's also remove all that
236:02 - until the number of enemies
236:08 - and then do so basically for every enemy
236:11 - inside of this enemies table currently
236:13 - we only have one but later we'll have
236:15 - more we want to go
236:17 - enemies
236:19 - or enemy
236:21 - or yeah enemies actually and then add
236:23 - that index so index i
236:27 - colon move take note i'm using a colon
236:29 - here and not a dot
236:31 - and then here we can just pass in the
236:32 - player
236:34 - dot x and the player
236:36 - dot y why am i passing these in because
236:39 - here in move we're taking player x and
236:41 - player y we do not have to pass in self
236:43 - because self gets passed in for us
236:48 - cool so for every enemy do this you can
236:50 - also create an update function instead
236:52 - that will instead of just moving it it
236:55 - will do all of the updating for the
236:56 - enemy that could also be something you
236:58 - can rather implement instead of move but
237:00 - this game is so basic i'm just going to
237:02 - have a move function and not an update
237:05 - cool now we need to draw the enemy
237:08 - let's go here into
237:10 - if the game state is running right
237:14 - then we can go
237:15 - and above the player because we kind of
237:18 - want the player to overlap with the
237:19 - enemy or you could do this below it
237:21 - doesn't really matter that much and
237:22 - actually i'm just going to copy this
237:24 - because it's going to be the same code
237:25 - just a different command so boom
237:28 - and here i'm just going to say
237:30 - draw so this will draw every enemy
237:33 - inside of the table
237:35 - okay so let's try to run this and see
237:37 - what we get
237:39 - love dot
237:41 - let's see
237:44 - and you know what we're not getting
237:45 - anything
237:46 - it's because currently we're in the menu
237:49 - state and everything just gets drawn if
237:52 - the state is not the menu
237:55 - so
237:56 - yeah let's go there and just go false
238:00 - and in here we can just say running is
238:03 - true
238:04 - there we go now it should work
238:07 - as you can see there the enemy comes to
238:09 - get us but currently nothing happens so
238:11 - the enemy just stops once it gets on top
238:12 - of us
238:14 - but it should later on like
238:16 - stop the game if the enemy touches us
238:18 - but you'll also notice
238:22 - the enemy always comes from the same
238:24 - side
238:27 - and that's very boring because we want
238:30 - the enemies to actually come from
238:31 - different sides to make the game more
238:33 - interesting
238:36 - so
238:37 - to do that we can just implement a
238:39 - little bit of math
238:41 - and this map will basically make the
238:44 - enemy come from different sides
238:49 - now
238:50 - here at the top i'm going to declare
238:53 - four variables
238:56 - local well local dice
239:01 - local
239:02 - x and
239:04 - y i take those these have underscores
239:07 - you didn't have to give them names of
239:09 - underscores i just find it much easier
239:11 - to work with them if they have that and
239:13 - also local and an underscore radius
239:17 - cool
239:18 - these two are not going to have any
239:20 - values associated with them at the
239:22 - moment radius will make 20 as a default
239:26 - but you can later on they modify this
239:28 - radius to give you
239:30 - more
239:32 - interesting
239:33 - sizes so let's say you want different
239:34 - size enemies that could be kind of neat
239:37 - now this radius here i'm going to paste
239:39 - it here
239:40 - this x here i'm going to paste it here
239:43 - because it's going to be modified that's
239:45 - why here i'm going to paste it here
239:48 - so these are all going to be modified
239:50 - except for radius so these are all going
239:52 - to be modified and these two will now be
239:55 - set here
239:56 - and we're doing this because we want the
239:58 - self to work when we want these
240:02 - because this is not part of the table
240:04 - it's part of the function
240:06 - but it's not part of the table that's
240:08 - being returned to us but it is part of
240:11 - the function
240:12 - so this one won't be returned to us we
240:14 - won't be able to access these values
240:17 - but we will be able to access any values
240:19 - in here it's something you have to wrap
240:21 - your head around because it can be a
240:23 - little confusing
240:25 - okay and this dice will basically
240:28 - determine from which side will the enemy
240:31 - appear from this side
240:33 - from this side from this side or from
240:36 - this side
240:39 - so i'm going to make this a
240:41 - math.random
240:46 - and we're going to make it 1 and 4.
240:50 - and before we forget
240:52 - in the main.lua file not in the enemy
240:55 - but in the main.lua file
240:58 - we want to just math.random
241:01 - seed and we want to just give it os.time
241:06 - now what we are doing here is we're
241:07 - basically saying
241:09 - every second
241:11 - change the
241:12 - seed we're going to get so whenever the
241:14 - user
241:16 - boots up the game
241:17 - their random numbers will be more random
241:20 - because if we don't add this then the
241:23 - enemies will always start from the same
241:25 - place
241:26 - and we don't want that
241:29 - because currently as you might have seen
241:31 - in my random video the random numbers
241:33 - don't really change they kind of stay
241:34 - the same
241:35 - unless we seed them so at least we see
241:39 - today
241:40 - if you don't understand that yet i do
241:42 - recommend you go watch my tutorial on it
241:44 - i do have an entire crash course on it
241:46 - after all
241:48 - cool
241:49 - now we need to basically give the dice
241:52 - functionality so we can say if
241:55 - dice
241:57 - is equal to 1
241:59 - then underscore x is equal to
242:02 - math.random so we're going to give it a
242:04 - random position on x-axis so anywhere
242:07 - random here
242:11 - so
242:12 - there we go
242:14 - master random
242:15 - and an underscore radius
242:17 - because we wanted to start at minimum at
242:20 - the radius so the
242:22 - the enemy will always be hidden no
242:25 - matter where it is on the x-axis
242:29 - and then love dot graphics dot get
242:34 - with
242:35 - and this will just further work so it
242:37 - will give us basically a random number
242:39 - between the radius so 20 and the width
242:42 - that's given to the window
242:46 - and then we want to say
242:47 - y
242:48 - well you can actually do it underneath
242:50 - y is equal to
242:52 - minus so negative
242:54 - underscore
242:55 - underscore radius
242:58 - times four
242:59 - so if the dice is one
243:01 - and it should be underscore y
243:04 - so if the dice is one
243:06 - x can be anywhere on top of this right
243:09 - here anywhere
243:12 - but y
243:14 - specifically
243:16 - will be minus the radius
243:19 - so remember it's going to basically be
243:21 - here so y 0 is here so y minus the
243:24 - radius would go up
243:26 - so minus the radius will basically mean
243:28 - hide the entire
243:31 - ball hide the entire enemy and it
243:33 - retimes it by four so it's going to be
243:36 - basically being hidden four times itself
243:39 - this will also give it a little bit of a
243:41 - time you have to wait once the knee
243:43 - level starts before it actually starts
243:45 - to jumping in so it doesn't just go into
243:47 - the screen immediately
243:49 - you'll kind of understand it once we
243:51 - actually use this
243:53 - so now we can just say
243:55 - else
243:56 - and i'm just going to copy this right
243:58 - here
243:59 - all right the little disturbance i can't
244:01 - remember where it was but okay yeah i
244:03 - believe it was just like this and boom
244:07 - okay
244:08 - now else if the dice is equal to two
244:11 - it's going to basically be the same
244:13 - thing i'm just going to copy these else
244:15 - if's because we're going to have kind of
244:17 - a lot of them except for the last one
244:19 - the last one will just be else
244:21 - and this one we can make three
244:24 - and in the else would be if it's not one
244:26 - two or three then just give it this one
244:28 - by default
244:30 - okay
244:32 - so with the second one it's going to be
244:34 - a little bit different
244:36 - it's going to basically be swapped
244:39 - so x will contain this
244:43 - and y will contain
244:47 - this
244:49 - and then here we can instead of say get
244:51 - with we can say get height
244:54 - now why is this like this why did we
244:57 - swap it around here well if the dice is
244:59 - two
245:00 - we're saying okay x should be here
245:04 - but
245:05 - it should be minus its own width
245:08 - so
245:09 - basically if you hide itself times four
245:12 - so it's going to go to the side here
245:15 - four times itself its own width and then
245:18 - with why we're saying okay
245:20 - find any place from
245:23 - this part right here
245:24 - right
245:26 - and
245:28 - just anywhere towards the height
245:30 - you don't necessarily have to specify
245:32 - this radius here you can make the zero
245:34 - because remember it's just going to come
245:35 - from a random side anyways
245:37 - but basically it's going to be able to
245:39 - come in from anywhere on this side right
245:41 - here so if the dice is 2 anywhere here
245:44 - if the dice is 1 anywhere here from the
245:46 - top
245:47 - if the dice is free however
245:50 - then
245:51 - we're going to do everything the same
245:54 - but
245:56 - this one right here this y
245:58 - we're going to say love dot graphics dot
246:01 - get height
246:04 - plus
246:06 - and then we're going to say radius times
246:08 - four
246:10 - whoa radius times four
246:15 - and known minus
246:18 - so why are we saying this here
246:22 - well basically we're saying okay if the
246:24 - dash is free x can be anywhere from this
246:27 - right here
246:29 - and they were saying okay
246:30 - the y should be the height
246:34 - plus
246:35 - itself times four so anywhere from below
246:38 - here
246:39 - so now it's not anywhere from the top
246:42 - but anywhere from the bottom like from
246:44 - here
246:46 - that's what we did here we basically set
246:48 - the y to the bottom of the screen
246:52 - and then here it will be basically the
246:54 - same
246:54 - as with if dice were two
246:58 - so we can do like that
247:00 - but now the difference is and remember
247:02 - to remove this
247:03 - minus symbol right there
247:06 - x here we can just go and
247:09 - well no no no no no
247:11 - we just go and do this
247:13 - and we can say
247:15 - love dot graphics dot get with
247:21 - plus
247:23 - and now what we're saying is okay it can
247:26 - come anywhere from this side right here
247:29 - so now it can come the the ball the
247:32 - enemy can come from anywhere inside of
247:35 - this window here not this one but the
247:37 - game window itself
247:38 - so you can either come from here the top
247:40 - which we did first
247:41 - or it can come from the side which we
247:43 - did second
247:44 - or from the bottom which we did third
247:46 - and or from this side right here from
247:48 - the right side which we did last
247:51 - and now these x and y values as its
247:53 - default values that that ball first gets
247:56 - comes from here and this will be
247:58 - different for every ball that's the nice
248:00 - part because every time we create a ball
248:03 - is going to execute all of this
248:05 - and then it's going to return this to us
248:07 - but this x and y would have changed and
248:10 - if you want you can also change the
248:11 - radius
248:13 - so yeah
248:16 - now if we were to run the game
248:20 - it comes from down the part down here
248:23 - okay let's run it again and see it's
248:24 - happening again
248:26 - oh
248:28 - attempt to perform micro let me go get
248:30 - field a function value so this is enemy
248:33 - 18 let's see here
248:35 - ah there we go that should have
248:37 - those little bracket things there
248:40 - okay let's see and it starts from this
248:43 - side now okay one more time just to make
248:45 - sure we have everything
248:47 - it starts from the top
248:49 - so that's the nice fact every time you
248:51 - start the game it starts from a
248:53 - different angle which is pretty neat
248:56 - and i believe that's all we need to do
248:59 - for the enemy
249:07 - all right
249:08 - so first we want to go to the main.lua
249:12 - file this main one right here and we
249:14 - want to make this true because today
249:17 - we're going to be working on the menu
249:20 - so we want to be able to see the menu by
249:22 - going here to true
249:23 - this shouldn't do much except for
249:26 - resizing your cursor
249:28 - so make sure it does
249:30 - now we're going to create another
249:34 - table here called local
249:37 - buttons
249:39 - and these buttons will basically contain
249:41 - all of the buttons for all of our
249:43 - different states so menu underscore
249:47 - state
249:48 - will then become
249:51 - an empty
249:52 - table
249:54 - cool now that we have that let's go here
249:57 - to the side and just create a new file
250:00 - i'm going to call this
250:03 - button.lua
250:04 - it's going to be a button class
250:07 - and this button class will basically
250:09 - contain all of the things we'll need for
250:12 - buttons
250:13 - so
250:14 - local love which you know is optional
250:16 - but i love doing this
250:18 - require
250:20 - and we can just say love
250:23 - you can create a function
250:25 - called
250:26 - button
250:28 - and
250:29 - yeah simple as that
250:31 - now we want quite a few things we're
250:33 - going to mess around with too many
250:35 - things just yet
250:37 - but i can tell you from the bat our
250:39 - button will probably have text on it and
250:42 - we probably want to set the text when we
250:44 - create the button so something like text
250:47 - and we also need to be able to execute a
250:50 - function
250:52 - so funk because when we click the button
250:55 - it should be able to do something and
250:57 - this func we pass in is what it should
250:59 - be able to do
251:01 - this befit isn't too great i don't love
251:03 - it that much but it does get the job
251:05 - done and that's what we want at this
251:08 - moment
251:09 - we also want to be able to pass an
251:11 - optional parameter into the function
251:14 - so we can include func param
251:18 - and then we want to include the width
251:20 - and then the height of the button
251:23 - okay so next we can just say return and
251:26 - it's going to return a table
251:29 - this table is going to return will
251:31 - contain width
251:33 - and that's going to be either the width
251:35 - passed in
251:36 - or 100 by default
251:39 - and then we want a height which will be
251:41 - the same thing
251:44 - so like that
251:45 - so either the height passed in or 100
251:49 - then we're going to create a function
251:51 - and this function will be able equal to
251:54 - the function passed in
251:57 - to func passed in
251:59 - or
252:00 - to a function that doesn't do much it's
252:03 - just an anonymous function it's not
252:05 - going to do anything really i'm just
252:07 - going to print
252:10 - this
252:11 - button has no
252:13 - function attached
252:16 - as simple as that if you wanted to you
252:19 - can even make it shorter and make it one
252:21 - line like that it's optional you can
252:23 - make it more than one line i kind of
252:25 - like it as one line because it just does
252:28 - a quick one-liner
252:30 - and then the function parameter
252:34 - will be
252:36 - the function parameter passed in if
252:37 - there's no function parameter passed in
252:39 - it will be nil and no parameter will be
252:42 - passed in
252:44 - and then the text will be equal to text
252:47 - or
252:49 - no text
252:52 - then the buttons
252:54 - x position will be equal to zero
252:57 - the button
253:00 - y position will be equal to zero
253:04 - and then the text on the button
253:07 - should be at position zero and in the
253:10 - text y of the button should be at
253:13 - position zero as well
253:16 - exit this is a lot of things we're just
253:17 - setting by default you don't have to
253:19 - worry too much about it
253:22 - and then of course you want to return
253:24 - the button down here before i forget
253:27 - because i'm going to forget what i did
253:28 - now
253:30 - cool now we are going to do things like
253:32 - making the button clickable and what not
253:35 - but first we want to be able to draw the
253:38 - button that's the most important part
253:40 - right now because we need to kind of get
253:41 - the button just on to see that it works
253:45 - so let's create a draw function for the
253:47 - button which will be a
253:49 - function
253:51 - and this function takes itself
253:54 - and then
253:55 - the buttons x position the buttons y
253:58 - position and in the text x and the text
254:03 - y position
254:05 - now
254:06 - i might be putting it here like the
254:07 - button x y text x and x y might be able
254:10 - to be passed in
254:12 - from here so these four attributes but
254:15 - if you wanted to you could pass them in
254:17 - here
254:19 - the reason i'm doing this is if you ever
254:21 - later want to animate the button so the
254:24 - button moves from one position to
254:26 - another position
254:28 - then you can do it from here
254:30 - you can when you draw it you can just
254:32 - move the button x and y positions as you
254:35 - please
254:36 - instead of having the x and y positions
254:38 - kind of set as soon as you create the
254:40 - button this is personal preference i
254:42 - like doing this you don't have to do
254:44 - this you can put all this you can put it
254:47 - in here there's no problem with that
254:50 - i just want to do it here
254:52 - and this also keeps this from kind of
254:54 - cluttering up and having 50 000
254:56 - freaking things it needs to take in
254:59 - because now it's being split into two
255:04 - cool
255:04 - now here we want to say self dot
255:07 - button
255:09 - x and of course you could have made this
255:10 - a table as well but we're already in a
255:12 - table so having another table within a
255:14 - table is just
255:15 - uh
255:16 - you know personal preference yet again
255:18 - and that can be equal to button x so
255:21 - this button x right here
255:24 - or self
255:26 - dot
255:27 - button x
255:29 - so this button x here or this button x
255:32 - here one of these two self.button x is
255:35 - referring to this button x don't get too
255:38 - confused here
255:39 - so just as i said you could put the
255:41 - button x and y up here as well and it
255:43 - will be set here as well
255:45 - anyhow
255:49 - and we can just copy that and do the
255:51 - same for y so
255:52 - self dot button y
255:57 - like that
255:59 - then here we can basically set the text
256:02 - position so
256:04 - if
256:06 - text x so the text does exist the x
256:09 - position of the text which is passed in
256:11 - here
256:14 - then we can say
256:16 - self.text
256:18 - at position x
256:20 - is equal to text at position x
256:23 - plus self dot
256:25 - button x
256:28 - else
256:30 - self dot
256:32 - text x is equal to self
256:36 - dot button x
256:39 - now you could have done this yet again
256:42 - in one line
256:43 - where you basically check if this exists
256:46 - and if it does exist you do your things
256:50 - you could have done like this but i find
256:51 - it to be a lot less confusing and just
256:54 - so much easier to also understand if
256:55 - you're reading it if you do it like this
256:57 - where if it's take six do all of this
256:59 - otherwise do this instead of using this
257:01 - or way here which could work
257:04 - but i'd rather not because that's going
257:07 - to be prone to bugs because i'm not too
257:08 - good at reading that
257:10 - and in here we could of course just go
257:13 - text
257:14 - y
257:15 - and in here we can say button at y
257:18 - like that now here we're just saying the
257:21 - text on the button so this is the text
257:23 - that exists on the button
257:26 - if the x
257:28 - exists so if this exposition is being
257:30 - passed in for it then
257:32 - make the original one here
257:36 - make it equal to what is passed in
257:39 - plus the button x
257:41 - we're saying the button x here because
257:44 - the button may be 30 pixels to the right
257:49 - but the text isn't just going to be
257:51 - placed onto the button automatically so
257:54 - we'll need to tell the text to add that
257:57 - x so we're going to have our button x
257:59 - and then we're going to need to add to
258:01 - it that's this here i'll show you how
258:03 - this works in a second once we actually
258:06 - draw this to the screen just so you can
258:07 - kind of get an idea
258:10 - now take that this bottom order i'm
258:11 - going to do here is very important so
258:14 - love the graphics
258:16 - dot set color
258:19 - and you can pass in your own color the
258:21 - color you want for every single button
258:23 - but in this game i'm just going to keep
258:25 - all the buttons the same color 0.6
258:28 - 0.6 0.6 is going to be a lightish color
258:33 - then we want to draw the button so
258:36 - love.graphics.rectangle
258:39 - and if you're still a little bit touchy
258:40 - on this right here don't worry i am
258:42 - going to explain it
258:44 - i just want to kind of give you
258:46 - something you can visualize when i
258:47 - explain it
258:50 - and we can just say
258:52 - fill it because we want to fill it so we
258:54 - don't see the background color of the
258:55 - game
258:57 - and then
258:59 - self.button x position edit x
259:03 - self dot
259:04 - button y
259:07 - self dot with
259:10 - and itself dot height so this is where
259:12 - the button is going to be drawn to
259:14 - and how it's going to be drawn
259:16 - okay so that's for the button we can do
259:18 - that now we need to do the text because
259:20 - remember the text isn't really part of
259:22 - the button it's its own thing so we need
259:25 - to do it here as well so love
259:28 - dot graphics
259:30 - dot
259:32 - dot sit color and we're going to make it
259:35 - equal to black
259:38 - now you can make it a different color
259:40 - but i feel like this color works
259:42 - perfectly with this lightish grayish
259:44 - color
259:46 - then we want to love dot graphics dot
259:50 - print
259:52 - and we want to print self dot
259:54 - text
259:58 - dot
259:59 - text
260:01 - and then self
260:03 - dot text
260:04 - at position x and then self dot text
260:09 - and position y
260:11 - taking it i'm using self everywhere
260:13 - because we want to on the end of the day
260:15 - use this everywhere in our code this
260:18 - will just make things so much easier so
260:20 - whatever you do do not change these
260:23 - values here or any values
260:25 - you sit in here try and keep it as much
260:27 - as possible to these globalist values we
260:30 - have here
260:31 - because believe me it's going to solve a
260:33 - lot of problems later
260:35 - and then we just want to reset
260:37 - this is optional you can do it somewhere
260:39 - else but i'm going to reset the color
260:41 - here to be white
260:43 - so that's going to be my always fallback
260:46 - default color it's going to be pure
260:48 - white
260:49 - okay we have created the button and the
260:51 - button can now be drawn
260:55 - now here we want to basically create the
260:59 - three buttons
261:01 - for our game i'm going to create just
261:03 - one button for now
261:04 - and here we have our menu state button
261:06 - so we want to create it on here so in
261:08 - the load
261:10 - we are going to
261:11 - go here
261:13 - so here with the unload
261:15 - i'm going to create a button
261:17 - or go to our buttons say dot menu state
261:21 - and then i'm going to add a play
261:23 - game button
261:26 - now this play game button is just going
261:28 - to be a button which we need to import
261:30 - let me go here and just import the
261:32 - button
261:35 - and here we can just make that
261:37 - button
261:39 - cool
261:41 - now here we can make that equal to a
261:43 - button which we just imported from this
261:45 - file we have here make sure to export
261:48 - the button by saying return button
261:51 - and in here we can pass in our value so
261:54 - first it wants text
261:56 - so here we can just say play game
262:00 - because that's what it does it tells you
262:01 - to play the game i'm going to pass in
262:04 - nil nil because we do not have a
262:06 - function or a function parameter we want
262:08 - to pass in
262:09 - then i'm going to pass in
262:11 - let's say 50 and 50.
262:15 - we're going to position it nicely later
262:16 - so they're going to be the x and the y
262:18 - position of the button
262:21 - now down here
262:23 - where we
262:24 - draw the game
262:27 - and here it says game.state running
262:30 - we want to add an
262:32 - else
262:33 - if
262:34 - because i'll save the game dot
262:36 - state is not running
262:39 - but instead it is of menu
262:44 - and this should just be in square
262:46 - brackets not circular brackets
262:49 - so else if the game state is in menu
262:52 - state
262:53 - you want to go to buttons
262:56 - dot
262:57 - menu state dot play game and we want to
263:00 - say colon draw to call the draw function
263:05 - and now in here we want to specify a
263:08 - bunch of things so i wonder if yeah
263:10 - there we go so the button x position
263:12 - you can get 10
263:13 - the button y position 20
263:16 - and then we can just maybe say
263:19 - 10 and 20 like that
263:21 - just as an example
263:24 - now it's not going to give us anything
263:26 - great and was this really x and y what
263:28 - was this
263:29 - this was
263:30 - oh the width and height so it's going to
263:32 - be 50 with 50 height and then here it's
263:34 - just going to draw it at position
263:37 - 10 and 20 and then it takes is going to
263:39 - be at position 10 and 20 as well but not
263:42 - the same 10 or 20 as this button because
263:44 - we changed that and i'll show you that
263:46 - in
263:46 - a second because i know it's going to be
263:48 - confusing
263:49 - and take note this is still here this if
263:51 - statement because if the game state is
263:52 - not running we just want the circle to
263:55 - be smaller so this the circle should be
263:57 - smaller
263:58 - in this menu state
264:00 - and the circle should be smaller in this
264:03 - running state or it should be larger in
264:05 - this running state
264:07 - anyhow
264:09 - let's go here
264:11 - and here we go so we have a button not
264:13 - really the best it's looking kind of uh
264:17 - kind of small there
264:18 - so let's just make the button a bit
264:20 - bigger
264:22 - so i'm going to go here to the above
264:25 - where it's 50 50.
264:27 - allow me to maybe make it a bit longer
264:29 - so 120 and maybe a bit shorter
264:33 - or bit less
264:34 - tall
264:36 - so 40.
264:38 - ah now that does look much better
264:41 - okay
264:42 - and then here we have a play game
264:45 - and you'll notice it looks kind of weird
264:47 - now if i were to show you something
264:49 - interesting here so
264:51 - what do we have here we have the button
264:52 - x and y position so let's make this text
264:54 - x and y position
264:56 - uh five and five just so i can show you
264:59 - what's happening because this is a kind
265:00 - of
265:01 - part that may have been confusing to a
265:02 - lot of you
265:03 - as you can see here it's five from this
265:06 - left side
265:08 - and five from the top
265:11 - now if we go back to button here
265:13 - and we don't do this we just say okay
265:18 - just make them what is passed in that's
265:21 - all you have to do just make them what
265:23 - we pass in or actually no let's actually
265:26 - uh change this up so go like that
265:29 - and we uncomment these
265:31 - there we go
265:34 - so if we just did this
265:36 - i want to show what would have happened
265:39 - so we just said self.txtx and self.texty
265:41 - is what we pass in
265:44 - then
265:45 - you can't see it
265:47 - because the text is now five pixels from
265:50 - here and five pixels from the top
265:54 - not from the but the button width and
265:57 - height but from the top so
265:59 - that breaks a lot of things so we change
266:02 - the text color then instead so here it's
266:05 - zero zero zero zero we can just make it
266:07 - one one one one then
266:11 - because all these finger pop-ups there
266:13 - we go one
266:16 - then you'll see it's right there
266:20 - now we don't want that right we don't
266:23 - want that that is why
266:26 - we have this right here
266:28 - this self.button x so even if you don't
266:31 - pass in anything it's going to be at the
266:34 - same location our button starts at
266:37 - so for example if i were to comment all
266:39 - of this back in again
266:41 - and i want to not pass in a text x or y
266:43 - which will run this then
266:47 - then
266:48 - it would look like this
266:53 - as you can see it's right there at the
266:56 - button but not at the game so that is
266:58 - why we did that we didn't want this to
267:00 - start here at the game we always wanted
267:01 - to start at the bottom x and y positions
267:06 - cool
267:07 - now let's make this
267:09 - maybe like a 1710 that should look good
267:11 - for right now
267:14 - yeah that looks perfectly fine later on
267:16 - we'll change the font a little bit to be
267:17 - a bit bigger and just match the button
267:20 - better but for now i think that's fine
267:24 - so yeah there's our first button play
267:26 - game
267:27 - let's create two more buttons
267:31 - and i'm going to just go here
267:34 - now this second button is optional
267:37 - because i'm not going to code it it's
267:39 - going to be your homework at some point
267:41 - so settings
267:43 - so it's going to be the settings button
267:46 - and then we want an exit
267:48 - game button
267:52 - and in this button we'll say
267:55 - settings
267:57 - and it's going to have the same width
267:58 - and height
268:00 - and in this button right here it will be
268:02 - exit
268:04 - game or just even exit if you want to
268:06 - and then the same with that and because
268:08 - all of them are the same width and
268:09 - height you could always make this the
268:12 - default width and height like here we
268:15 - redo this you can make it the default
268:16 - here
268:18 - that would actually be a good idea
268:20 - now we can code the exit button right
268:22 - now we can give it its function so love
268:24 - dot event
268:26 - dot quit
268:27 - because this will quit love
268:29 - so once the button is click
268:31 - it will run this code or we haven't
268:33 - really implemented that but that's what
268:35 - it should do
268:37 - take note all these are from the menu
268:39 - state because they will all be displayed
268:41 - once the menu state is true
268:44 - okay
268:45 - now we can go down here again and we can
268:47 - draw the game so
268:48 - let's go like this
268:52 - and let's draw
268:54 - settings
268:56 - and let's draw
268:59 - exit game
269:01 - and
269:02 - let's see how do they look what do we
269:04 - see
269:05 - like we just see x again because that's
269:07 - what's been drawn last
269:09 - so we can just make them all go down a
269:11 - bit we can leave the rest to be exactly
269:13 - the same so we can say 70 and here we
269:15 - can maybe like 120.
269:19 - and that looks fine to me at least
269:22 - so now we have a play game a setting and
269:24 - an exit game they don't do anything if
269:26 - you click on them but now we have that
269:30 - now we want to go back to the button
269:31 - because we need to
269:33 - make some function that will allow us to
269:36 - press the button to click the button
269:39 - so we're just going to check if it's
269:41 - been pressed and we'll do the press
269:43 - doing
269:44 - on the main in the main file
269:48 - so here we can just do something such as
269:51 - check pressed
269:54 - right
269:55 - and in this will be a function
269:59 - and here we can just put a comma
270:02 - cool
270:02 - now this will take in a self
270:05 - a mouse
270:07 - x position so where the mouse currently
270:09 - is the x position the mouse
270:12 - y position so where the mouse is
270:14 - currently at the y position and in the
270:16 - cursor radius so if we ever change the
270:18 - cursor size we don't have to worry about
270:20 - changing it here as well so cursor
270:24 - radius
270:27 - cool
270:30 - now here we can just create a basic if
270:33 - statement so if mouse
270:35 - of the exposure of the mouse plus the
270:37 - cursor
270:41 - radius
270:43 - is more or equal to self.
270:46 - button
270:48 - x
270:50 - so let me actually draw that because i
270:52 - think this will become a little bit more
270:54 - difficult to understand
270:57 - so let me just go like this
271:00 - so we are saying let me just make this a
271:02 - good
271:03 - uh easily seeable color on white
271:07 - so this is our cursor right
271:10 - and this is our button i'm going to say
271:13 - b for button
271:15 - now
271:17 - if i go here you'll see the mouse x
271:20 - position
271:21 - okay so the mouse x position and
271:23 - remember this is our mouse that right
271:25 - there is our mouse
271:28 - but remember our mouse if i can just
271:31 - make this red maybe
271:33 - our mouse is here in the center that is
271:35 - actually where our mouse is that's where
271:38 - the point of our cursor is you might
271:40 - have remembered from the first video
271:42 - where when we drew this you would have
271:44 - noticed the mouse cursor thing
271:46 - it's like that
271:50 - so that's her mouse
271:52 - right there
271:54 - now
271:55 - we go back here
271:58 - there we go we say if the mouse x
272:02 - okay
272:04 - so this is x remember so that's x and
272:07 - this is y so because remember this can
272:10 - make a y ish shape that's why this is y
272:14 - this is x
272:15 - so if the mouse x position
272:18 - uh
272:19 - let's go like that so this is the mouse
272:20 - x right so boom
272:23 - the mouse x position right there let's
272:26 - make that 32 for example
272:30 - right
272:32 - plus the cursor radius
272:36 - so
272:38 - this part right here
272:40 - this is the cursor radius
272:44 - because remember a circle
272:47 - not a good circle there a circle
272:50 - has a radius
272:52 - that right there that's the radius of a
272:55 - circle
272:57 - so take note that term is very important
272:59 - that's the radius it's only half of the
273:01 - circle so this right there so this x
273:04 - plus the radius and let's say
273:06 - this whole circle
273:09 - is
273:10 - 20 right
273:12 - so the radius would then be 10 because
273:14 - of the whole circle from here
273:17 - to here if that whole circle is 20
273:20 - and the radius is half of the circle
273:23 - then it would be 10 that would be the
273:25 - radius
273:26 - so 32 plus 10
273:29 - that's 42.
273:32 - so we're saying
273:35 - if
273:35 - 42 is more or equal to the button x
273:39 - position
273:41 - so let's say this button exposure which
273:43 - is obviously further than that circle so
273:46 - that would be this button x position
273:48 - which would be like this
273:49 - this is the button x position i should
273:51 - actually choose a different color at
273:52 - this point
273:54 - let's go maybe something like a bluish
273:56 - color i hope everyone can see that
273:59 - nope it's good like that
274:02 - okay so this is the button x the button
274:04 - x we can say
274:06 - is
274:07 - 62.
274:09 - this would then be false
274:11 - because
274:13 - here we're seeing if it's more or equal
274:15 - to
274:16 - more or equal to very important
274:19 - it's not more or equal to 62. it's 42
274:23 - it's less than 62.
274:27 - so if we move our cursor so the cursor
274:30 - is let's say like this
274:33 - so you'll notice the end of the cursor
274:35 - is inside of the button
274:38 - this within remember that's the radius
274:40 - right
274:41 - and this is 32 and let's say
274:44 - i know
274:45 - this right here that part right there
274:48 - so from
274:49 - this point right here to this part right
274:51 - here
274:52 - is let's say
274:55 - 45 because remember it's not like a lot
274:57 - there
274:58 - so that's just 45
275:02 - 45
275:04 - then we can just add the radius to it to
275:06 - get back to the middle
275:08 - that would be 10 so we can make that 55
275:12 - right
275:13 - now we can add the radius again because
275:16 - we're at center or we could have just
275:17 - added this full 20 that would have
275:18 - worked well but we add the radius again
275:20 - we'll get 65
275:23 - so remember this right here that's 45
275:26 - this whole length here that's 45
275:29 - because this is what number we made up
275:31 - at this point
275:33 - and then we add 20 to get the from this
275:36 - point of the circle to this point or two
275:39 - tens to get two radiuses because two
275:41 - radiuses makes one of the circle because
275:44 - the radius is half of the circle very
275:46 - important to know
275:48 - and then we get 65. 65
275:53 - is more
275:55 - than 62.
275:59 - thus we are pressing the button
276:02 - we are now pressing the button that is
276:05 - what all of this math does if most of
276:07 - this math went over your head
276:09 - don't worry too much about it you can
276:11 - kind of figure it out on your own as you
276:13 - play with this but basically
276:17 - if a part of the circle no matter how
276:19 - big the apartment if a part of this
276:21 - circle we have
276:24 - goes over the button
276:26 - this right here that's the button
276:28 - then we should say it's clicked
276:31 - so that this is just for the ex
276:33 - right
276:35 - simple as that
276:37 - now we also need to do it the other way
276:39 - around
276:40 - so if we go back here and let's actually
276:43 - can we create a new
276:44 - no i don't know how to create a new one
276:47 - control n doesn't work okay that's fine
276:50 - let's say we have our
276:52 - this is our circle
276:54 - and it's our button
276:55 - so this button
276:57 - now we need to do the same thing
277:01 - but for if the circle does this
277:04 - so we need to do the same thing
277:06 - because we need to take note we should
277:08 - not press this button we should not be
277:10 - able to press it if our circle is here
277:12 - and the button is here
277:15 - or
277:16 - if our button is here and the circle is
277:18 - here
277:19 - we should only press the button
277:22 - when the circle
277:24 - is basically on the button
277:26 - a part of the circle should be on the
277:28 - button but if a part of the circle is
277:31 - not on the button no matter if it's to
277:33 - the left or to the right we should not
277:35 - click that button
277:36 - only if a part of that circle is on the
277:38 - button should we click the button
277:42 - and oh okay it did make more okay good
277:44 - to know good to know so now we need to
277:47 - do the same but the other way around
277:50 - so i'm going to just put that inside of
277:52 - brackets to make it easier to read and
277:54 - i'm going to say and start another pair
277:57 - of brackets and just paste that in here
278:00 - now we want to minus the cursor radius
278:03 - here
278:04 - and we want to say instead of more than
278:06 - or equal to we can say less than or
278:08 - equal to and i recommend if you kind of
278:11 - struggle
278:12 - viewing what we're doing right now if
278:13 - you're kind of struggling seeing what's
278:15 - happening
278:16 - draw it out
278:18 - drawing out math is probably the best
278:20 - thing you can do because that's what we
278:21 - just did and if that helped you to
278:23 - understand at least the first part then
278:26 - that means if you draw it out for
278:27 - yourself then you will be able to
278:29 - understand the second part as well
278:32 - and here we can just add with so plus
278:34 - with
278:37 - self-serve if that is now this self.with
278:39 - remember
278:42 - refers
278:43 - to the width of the button
278:47 - so
278:47 - let me actually draw this again to draw
278:50 - so here we're saying
278:53 - if the mouse x so here's the mouse and
278:56 - let's list this mouse x right right
278:58 - there that's where the mouse x is
279:01 - so let's say x is equal to
279:04 - 32.
279:06 - right
279:07 - if that
279:09 - is a less than or equal to
279:13 - this button x right so this button x
279:15 - right here it starts there that's where
279:17 - the button x starts right there
279:21 - plus the button width so it can even
279:23 - plus the button voice so this is where
279:24 - it's going to be this dot right there
279:26 - that side that corner
279:29 - if it is less than that
279:32 - and we're minusing the cursor radius
279:34 - because we want this point so if this
279:37 - point
279:38 - is less than this side right here then
279:42 - this x
279:44 - this x right there if it's less
279:47 - then we want to do something so if
279:50 - so let's make this blue
279:52 - so if this part right here
279:55 - is
279:56 - past this part so if it's more than this
279:58 - x location because remember x is just a
280:02 - position
280:04 - and this red part right here is below
280:08 - this red part right here
280:10 - then we want to call the button
280:13 - this can be very confusing and i myself
280:15 - got confused here but this math is very
280:18 - important to understand because in all
280:20 - future games this is how you can code a
280:22 - button
280:23 - anyhow so i hope you understood this
280:25 - part if you don't you can still follow
280:27 - along without any problem because
280:28 - believe me i'm also trash when it comes
280:30 - to math
280:32 - cool now we need to do the exact same
280:34 - thing or we want to do it for y
280:37 - so here we can just change mouse x
280:40 - to mouse
280:41 - y
280:43 - right and then we can do the same here
280:46 - button x but button y
280:49 - and instead of with we want to say
280:50 - height
280:52 - we still keep the cursor radius because
280:54 - remember it's just a circle
280:56 - meaning if we go from the center of that
280:58 - circle
281:00 - and we add
281:01 - the circle radius whether it be
281:04 - left right or up or down
281:06 - then we'll get the edge of that circle
281:08 - location
281:10 - on x or y axis depending on which we
281:12 - choose so it should still have the
281:14 - cursor radius
281:17 - so if it's more or equal to
281:19 - the self dot button y
281:22 - and
281:23 - mouse y
281:24 - minus cursor radius
281:26 - is less than or equal to
281:28 - self dot button y
281:31 - plus self
281:33 - dot x or sub height
281:36 - then
281:38 - and take note we're using height
281:40 - with y and width with x
281:43 - because with is left to right
281:46 - height is top to bottom
281:48 - just like how y is top to bottom and x
281:52 - is left to right
281:54 - that's why we use those two respectively
281:58 - okay there we can now we know the button
282:00 - is inside
282:02 - or the cursor is inside of the button we
282:05 - know that for a fact now
282:07 - so we can just start executing stuff so
282:10 - self dot func param so if the function
282:12 - parameter exists if one was passed in
282:18 - right then would you call sao
282:21 - they want to call
282:22 - self.funk
282:25 - and we'll do pass in self.funk
282:29 - parameter like that
282:33 - else
282:35 - we want to do the same thing
282:37 - but this time we just don't want to pass
282:39 - in a parameter so the parameter was not
282:41 - passed then we don't care about it
282:44 - and just like that we have implemented a
282:47 - press operation for our button
282:51 - all right
282:54 - that was quite a long one too
282:57 - we are almost at the end though so don't
282:59 - get discouraged just yet
283:02 - cool
283:03 - now i'm going to create a mouse pressed
283:05 - function so whenever the mouse is
283:07 - pressed now you can do that within draw
283:09 - with an update within load i'm going to
283:12 - create my own entire function for it
283:14 - which is possible with love 2d
283:17 - i didn't do this in the tutorial because
283:19 - i kind of wanted to keep it for this
283:21 - tutorial so if you didn't don't notice
283:23 - this from the tutorials i had don't
283:26 - worry i did skip it for a reason
283:29 - so you can just say function love dot
283:31 - mouse
283:33 - pressed and i find this to be a lot more
283:35 - powerful than the one we had in the
283:37 - tutorial
283:39 - meaning this x
283:40 - y
283:42 - button
283:44 - is touch
283:46 - presses
283:48 - so all of these gets passed in for us we
283:51 - get the x position of our cursor the y
283:53 - position of the cursor where the right
283:56 - button was clicked the left mouse button
283:58 - was clicked or the middle mouse button
283:59 - was clicked i think there's probably
284:01 - support for other
284:03 - mouse buttons like the ones you get on
284:05 - the side of some mouse and stuff like
284:06 - that i just don't know how to work with
284:08 - them
284:09 - and then we have is touch so
284:12 - basically
284:13 - is it a touch screen you know it's a
284:15 - touchscreen mobile support
284:18 - so it is touch
284:19 - and it presses so how many presses i
284:22 - believe
284:23 - so basically if they touched with their
284:25 - finger and here's how many times they
284:27 - touched or how many times they clicked
284:29 - or whatnot we are not going to implement
284:31 - touch screen support in this game
284:34 - because i think that's i don't know i
284:35 - just think that's something you could
284:36 - probably do if you wanted to but it's
284:38 - quite a lot of debugging especially if
284:40 - you didn't have a touchscreen yourself
284:43 - anyhow
284:44 - we're gonna just say if not game.state
284:48 - is
284:49 - running
284:50 - because remember we don't really want
284:52 - the mouse to be able to click
284:54 - anything if the game state is running
284:57 - the mouse buttons shouldn't do anything
284:59 - while the game is running
285:02 - then
285:03 - so if the game is not running then
285:05 - you're allowed to do anything in here
285:07 - because if
285:08 - button
285:10 - is equal to one meaning if we pressed
285:14 - the left mouse button
285:18 - so not the button that brings up this
285:19 - one but the other button the one if i
285:21 - click like this if we click this button
285:24 - then do something
285:26 - so if
285:28 - game.state so if it's the menu state we
285:31 - want to specifically
285:34 - use the menu buttons
285:36 - then go four
285:39 - index
285:40 - and we need a value
285:43 - and we're going to say
285:44 - buttons dot
285:46 - menu state so we're going to loop all of
285:49 - the buttons in the menu state that's why
285:52 - we created it here because we're going
285:54 - to look for all of this buttons inside
285:56 - here you check if they have been pressed
285:58 - that's why it's in the menu state only
286:00 - if it's the menu state this is also to
286:01 - save a little bit of performance
286:03 - we're going to say
286:05 - buttons
286:07 - dot menu state
286:10 - dot for that dot when you say position
286:13 - index
286:16 - so that should be
286:17 - dot
286:19 - so button stop menu state at this index
286:22 - so let's say the play game button for
286:24 - example and then we want to just say
286:26 - check pressed for that button
286:30 - and you want to pass in the x the y
286:33 - and the x and y is basically the cursor
286:35 - x and y that we're passing in
286:37 - and in the player
286:41 - dot radius
286:43 - and a player radius is coming from
286:45 - here there we go player radius which in
286:48 - this case is actually 20.
286:51 - so yeah that's the radius it's
286:53 - half of the whole circle
286:57 - anyhow so you pass that so it's going to
286:59 - check if any of those buttons were
287:01 - pressed so if i were to now run this
287:03 - and let's try x again because that's
287:06 - currently the only button that has
287:07 - anything implemented
287:11 - ah and we're actually getting everybody
287:12 - worked
287:13 - so
287:14 - button.loo at 17 okay
287:17 - button lua
287:18 - at 17
287:21 - um attempt to perform algorithmic on
287:24 - field height angle value
287:27 - so let's see here
287:29 - height self dot height which is null
287:32 - value oh probably just spout it
287:34 - incorrectly there we go
287:37 - actually i think height might be
287:39 - spouting correctly i don't know i can't
287:41 - grammar for the life of me now let's try
287:43 - it again
287:44 - and it worked our game exited without
287:46 - any problem
287:48 - cool now let's quickly work on the start
287:52 - new game function and then we're done
287:54 - then we can then we can
287:56 - turn it off for today
287:59 - so
288:00 - i like to do that underneath
288:04 - i don't know actually i think i'll do it
288:05 - above load
288:08 - and maybe i'll even put this mouse press
288:11 - right here i'll put it above it as well
288:13 - why not
288:14 - and we can just do that boom okay
288:18 - now here i'm going to create a local
288:20 - function
288:21 - and i'm going to say start
288:23 - new
288:25 - game right
288:27 - and then it doesn't take in anything we
288:29 - can just say start new game
288:31 - then game dot
288:33 - state
288:34 - at
288:35 - menu
288:37 - whoops my man yeah at menu
288:40 - right
288:41 - then becomes false so we're setting the
288:43 - menu state equal to false
288:47 - and currently because we only have the
288:49 - menu and the running state we're not
288:52 - going to worry too much about other
288:53 - states
288:55 - but now we can set this running state
288:59 - equal to true because
289:01 - we're starting a new game so we should
289:02 - start running the game
289:05 - and in here
289:07 - we can also
289:08 - just create our first enemy as well so
289:11 - this part right here we can completely
289:13 - remove it and just move it up
289:16 - so now here we just boom like that
289:20 - now your start new game is pressed we're
289:22 - going to insert a new enemy into our
289:24 - game and we're going to set the menu
289:26 - state to false and then the running
289:28 - state to true
289:31 - okay now let's actually just implement
289:33 - that here so where it says nil
289:35 - we can say start new game without the
289:37 - parentheses take notice with other
289:40 - parentheses because otherwise it's just
289:41 - going to execute before it gets passed
289:44 - in
289:46 - and
289:47 - yeah then one last thing
289:50 - this is going to become more helpful
289:52 - later in the game but we can just say if
289:53 - game
289:56 - that state
289:58 - is
289:59 - running so the game state is running
290:02 - then we want to do this this is so the
290:04 - enemies don't try and keep chasing the
290:06 - player if the player is like in the menu
290:09 - or the game is paused or anything like
290:12 - that because believe me it's going to be
290:13 - very funny but the player isn't going to
290:15 - like that
290:16 - that they can still lose
290:18 - while in the menu or something like that
290:20 - anyhow so we just say they're only
290:22 - allowed to move
290:23 - if
290:25 - the
290:27 - player or if the game stays running
290:30 - cool now let's try and
290:33 - play game
290:34 - as you can see not only does our player
290:36 - grow but the enemies now start following
290:39 - us as well
290:41 - that's pretty neat
290:44 - so we did quite a lot in this tutorial
290:48 - well done if you're still following
290:50 - along
290:52 - so basically
290:54 - we created our first buttons we
290:57 - implemented touch folders buttons we
291:00 - implemented the
291:02 - drawing the buttons
291:04 - and then we implemented the actual
291:06 - functions of the buttons
291:09 - and that's that
291:17 - so let's actually start with the enemy
291:19 - let's actually try and improve the enemy
291:22 - so first off i would like us to actually
291:24 - now receive a
291:26 - level now level is basically going to
291:30 - allow us to say what level every enemy
291:33 - should be
291:34 - because we can have 10 enemies on the
291:38 - in the game like just coming at you but
291:41 - the problem is without the right
291:43 - leveling method those enemies will just
291:45 - be kind of the same thing will it be
291:47 - difficult or anything like that
291:50 - so what we can do is we can go here
291:52 - where it says level and instead of
291:54 - saying one we just make level
291:56 - equal to level
291:59 - and just in case we didn't pass in a
292:01 - level but usually you would be passing
292:04 - in a level but just in case we were not
292:07 - we can just say
292:08 - or let's say one
292:11 - and you could also if you want to make
292:13 - this underscore level instead of level
292:15 - to make it a bit easier to understand
292:18 - although i think this is perfectly fine
292:22 - you can even rename this to be lvl
292:24 - instead
292:26 - all right
292:27 - so that's all we're going to do here for
292:29 - now we will be getting back to this
292:30 - later but right now i think it's
292:32 - perfectly fine
292:34 - you probably want to know how we're
292:35 - going to kind of get the enemies and
292:37 - stuff to come in
292:39 - so i'm going to show you an example of
292:41 - what we will basically be doing
292:43 - so here
292:45 - i have
292:46 - basically what we're going to be doing
292:48 - so when we say play game we will have a
292:50 - little scoreboard here that is going to
292:53 - count
292:55 - and then once this scoreboard gets to a
292:57 - specific amount like 15
293:00 - it's going to spawn another enemy with a
293:02 - higher level the higher the level the
293:05 - faster the enemy will be
293:07 - a good thing you might want to do is you
293:09 - might want to make every enemy a
293:11 - different color maybe randomly generated
293:14 - or something like that
293:16 - and once the enemy touches you
293:18 - the game ends we'll later on implement
293:21 - an end screen or a game over screen and
293:24 - whatnot
293:26 - but that's the basics of what we're
293:27 - going to implement so we need to
293:29 - implement some sort of
293:31 - point
293:32 - system all right so here instead of game
293:36 - we can actually implement it here
293:38 - so the amount of points we have
293:42 - we can make equal to zero at start you
293:45 - could also put this inside of the player
293:47 - here
293:48 - so then the amount of points the player
293:50 - has but you could also make the amount
293:52 - of points there currently is in the game
293:54 - so whichever floats your boat best
293:57 - and in here we could say levels
294:01 - and this will basically be whenever an
294:03 - enemy spawns you can either have set
294:06 - levels like i am doing now or you can
294:08 - have randomly generated levels or levels
294:12 - at every specific interval
294:14 - something like that but i'm going to
294:16 - just going to have four levels
294:18 - five include the very first level
294:21 - and these levels will basically just be
294:24 - 15 30 60 120 so if you have these points
294:29 - so 15
294:31 - 30
294:32 - 60 and 120
294:35 - like that
294:37 - so if the player has 15 points then a
294:40 - new enemy will spawn
294:42 - if there are 30 points then a third
294:44 - enemy will spawn because you have the
294:45 - first enemy which is from zero to 14.
294:48 - they have a second enemy from 15 to 29 a
294:52 - third enemy from 30 to 59 and in the
294:56 - fourth enemy from 60
294:58 - to
295:00 - 119 and then the last enemy at level 120
295:04 - and above
295:05 - so let's implement the points
295:09 - so here with new game we can just say
295:12 - game dot points
295:14 - is equal to zero so this is basically
295:17 - whenever we start a new game we're going
295:19 - to set the points to zero
295:23 - and now with this enemies here we
295:26 - actually want to do something but
295:27 - different we want to go enemies
295:30 - so we want to create an entirely new
295:31 - enemies table so we're going to clear
295:33 - the previous enemies table
295:36 - and we can just say enemy
295:38 - and then at level one
295:41 - like that
295:43 - that means we can remove that line there
295:45 - because we have our enemy here this will
295:47 - be the very first enemy at level one you
295:50 - can do it like this or you can have it
295:52 - split up into multiple lines
295:54 - so right here where we do the love dot
295:58 - update
296:01 - inside of the
296:03 - game state or inside of the if game
296:06 - state is running this part right here
296:09 - we want to just say
296:11 - game dot points
296:12 - is equal to game dot
296:15 - points
296:16 - plus dt
296:18 - so this will basically increase the
296:20 - points constantly but with dt so
296:24 - 0.016 or
296:26 - 0.032
296:28 - however so basically about every second
296:30 - you'll get one point
296:34 - now when we go down to draw
296:36 - we can find a way to actually display
296:38 - this
296:39 - to the user
296:41 - so here and if game state is running we
296:44 - can actually put it just above enemies
296:45 - so the enemies can move over it
296:49 - but you can put it below enemies as well
296:51 - we can say love dot graphics
296:55 - dot print if and this will print text to
296:58 - the screen
296:59 - i'm gonna say
297:00 - math.floor
297:04 - game dot points
297:06 - and this will display the game points
297:09 - but to the lowest value so if we have
297:13 - 3.14
297:14 - it will display three if we have 3.5
297:18 - it will display three if we have 29.99
297:24 - it will display 29.
297:26 - so it's basically like math.round but
297:29 - just always downwards and never upwards
297:33 - we can then
297:34 - specify a font because with love
297:37 - graphics print
297:38 - you might notice we need to specify a
297:40 - font
297:41 - so let's just say love dot let's just
297:44 - copy this
297:47 - now we want it to be bigger than
297:49 - something like that fps
297:51 - because it has to attract more attention
297:53 - than the fps so we can make this about
297:55 - 24
297:56 - instead of 16.
297:59 - in here we can basically
298:02 - put our location so 0 10
298:05 - and then we can tell it how long to
298:06 - spend so love
298:08 - dot graphics
298:12 - dot get with
298:15 - and then we can also just specify center
298:19 - so all of this does a lot
298:22 - but basically you can think of it as
298:25 - displaying the text
298:27 - at the center of the screen
298:29 - i'll show you how this looks in a second
298:32 - so let's actually try to run this and
298:34 - see if it works so love dot
298:38 - alright we say play game
298:40 - and here it does so it's here at the
298:43 - center of the screen near the top
298:46 - and
298:47 - yeah it just counts about every second
298:51 - i believe this zero here is the x if we
298:53 - were to make this something like 90
298:56 - and we run it
298:58 - then you'll notice it's a bit more to
299:01 - the right
299:04 - so the 0 is basically the x and this 10
299:06 - is basically the y
299:10 - cool and then this here just
299:11 - specifically wanted to be basically
299:13 - aligned to the center
299:17 - nice
299:18 - now before we get to the enemy i would
299:20 - like to implement a better way to change
299:24 - the game state because currently the way
299:26 - we change the game state we have to
299:28 - constantly go around and we have to
299:30 - change a bunch of things manually which
299:33 - isn't what we want we want to make it as
299:35 - simple as possible so in the future when
299:38 - we return we never forget about
299:40 - something we might have to change if we
299:42 - change this value here we or if we added
299:44 - this here
299:45 - all right
299:47 - so let's say
299:49 - local and we create a function we can
299:51 - call it change
299:53 - game
299:54 - state
299:56 - i can take in state
299:58 - and here we can say game dot
300:01 - state
300:02 - menu
300:04 - so the game state is menu
300:07 - or we actually just make it state is
300:10 - equal to menu so we basically say
300:14 - make game state menu
300:17 - so true or false if the state passed in
300:20 - is equal to menu
300:22 - so if we pass in menu here it's going to
300:24 - make this value here
300:25 - that
300:27 - and we can do the same for all four of
300:29 - our current states
300:30 - so
300:31 - paused
300:34 - and here we can say
300:36 - running
300:38 - and here we can say
300:40 - and then we say ended
300:43 - so we never have to worry about changing
300:46 - another game state because here it will
300:49 - automatically make things true and false
300:52 - as we want it
300:54 - so for example here where we do this
300:56 - instead of having to sit two three four
300:58 - five states here we just call change
301:01 - game state
301:04 - like this
301:05 - and we want to set it to running
301:09 - like that
301:11 - and that will just make our life so much
301:14 - easier
301:16 - since now whenever we change the game
301:18 - state
301:19 - we don't have to everywhere we want to
301:21 - change it we don't have to constantly
301:23 - basically be doing this
301:26 - because now we have a function let's
301:28 - make sure this works
301:30 - so if i press play game it should start
301:32 - the running state
301:34 - and it does
301:35 - alright
301:37 - so next up we should maybe work on
301:39 - getting if the enemy has touched the
301:42 - player if the enemy has touched the
301:44 - player the game should end because the
301:46 - player has lost because that's the point
301:49 - of the game
301:50 - so what we can do is we can go here to
301:52 - enemy.lua
301:54 - and we can implement a new function
301:58 - check touched
302:00 - now this check touched
302:03 - will contain a function
302:06 - and this function will take itself
302:09 - player
302:10 - x
302:11 - player
302:12 - y so the player x and y position and
302:15 - then also the cursor
302:18 - radius
302:21 - like that
302:24 - and i did explain a lot of this in the
302:27 - previous tutorials i do recommend you go
302:30 - watch that if you have not where i do
302:32 - explain a lot of collision detection
302:34 - math there as well
302:38 - so now we just basically need to detect
302:41 - if the enemy is anywhere near the player
302:44 - this is going to be some some
302:46 - interesting math here so just bear with
302:48 - me for a second
302:49 - math dot square root
302:53 - so is qrt for square root
302:57 - and i'm going to create two brackets
302:58 - here so i don't get confused with
303:00 - mathematical operations and so lua knows
303:03 - what to do first
303:05 - self dot x
303:07 - so basically the enemy current x
303:10 - position
303:11 - minus player
303:13 - underscore x
303:16 - so the player current x position
303:19 - to the power of two
303:22 - and i'll explain this in a second
303:24 - you can say plus and then another pair
303:27 - of brackets self dot y
303:30 - plus i mean minus
303:33 - player
303:34 - underscore y
303:37 - and we just say times or to the power of
303:39 - two
303:41 - less or equal to cursor
303:43 - radius times two
303:46 - so basically this math here will check
303:50 - if the player is inside of the enemy
303:55 - so
303:56 - this is basically like the previous one
303:59 - just kind of in one line to make it
304:02 - easier for us you could split this up
304:05 - into multiple lines again very similar
304:08 - to what we did here inside of the button
304:10 - check pressed
304:12 - you could make it very similar to this
304:14 - not exactly like this because you know
304:16 - one is a square the other is a circle
304:18 - but in hint here both of them are
304:20 - circles
304:22 - but this will basically in the sense of
304:23 - our agreement drawing up here it will do
304:25 - this
304:26 - so this is the enemy
304:29 - this is the player
304:31 - whoa
304:32 - now in this scenario so this is the game
304:34 - scenario
304:36 - it would be
304:37 - false
304:38 - now our math will basically check this
304:42 - this is the enemy
304:45 - this is the player
304:46 - and that will return
304:48 - true
304:49 - so it will just basically check if the
304:51 - enemy
304:52 - or the player is touching each other
304:55 - because if so
304:57 - then they are
304:58 - colliding meaning the player has lost
305:03 - so yeah
305:05 - if you want to know more about this map
305:07 - i do recommend you do go maybe refresh
305:10 - up on some mathematical
305:13 - things you can do
305:14 - with circles because this is one of the
305:17 - things that works with that
305:20 - alright so once you have that you have
305:22 - your collision detection
305:24 - now with your collision detection we can
305:26 - finally do some coding to actually see
305:30 - it do something
305:32 - so
305:33 - let's go here to the running state right
305:36 - here
305:37 - so instead of this for loop
305:40 - we're going to increase a few things
305:43 - here
305:44 - to increase the amount of lines
305:47 - so right here we can say if not
305:51 - enemies at index
305:53 - i and we're getting this right here
305:57 - if not enemies at index i
306:01 - check
306:01 - touched
306:02 - this check touched will just basically
306:05 - execute this math right here to check if
306:08 - the player is inside of the enemy
306:13 - then once you have this you can just say
306:14 - player
306:16 - dot x
306:18 - player
306:19 - dot y
306:21 - player
306:23 - dot
306:24 - radius
306:26 - because this check touched needs three
306:29 - things player x player y and then the
306:31 - cursor radius which are all provided
306:34 - here
306:36 - this will check if it is touched so
306:38 - while it is not touch as you can see
306:39 - there because that has a knot so this
306:42 - will check if it's not true so if this
306:44 - does not call true if it's not being
306:47 - touched
306:49 - then
306:51 - and in here all of our things will
306:53 - happen
306:54 - let's first code the else
306:57 - because this is a quick one it's just
306:58 - change
306:59 - game state to
307:02 - menu later on this will change the game
307:04 - state to end it and what not but we
307:06 - don't really have anything for those
307:07 - states so currently it will just change
307:10 - the state back to menu
307:12 - and see this is why this change state is
307:14 - so useful because now we just call this
307:17 - and it will do all of the other
307:19 - background stuff for us
307:22 - now this enemies don't move here or his
307:24 - enemy move we can move it there so the
307:27 - enemy can move
307:29 - so we can now say
307:31 - for
307:32 - i
307:33 - is equal to one
307:36 - in
307:37 - game
307:38 - dot levels
307:40 - do
307:41 - so we're saying
307:42 - for i
307:44 - becomes one in game with levels you
307:46 - could call this something else even if
307:48 - you wanted to because we have an i here
307:50 - so you might want to call this something
307:52 - like j or k or some other
307:55 - value
307:57 - any game that labels and game the levels
308:00 - is right up here so it's 15 30 60 20.
308:04 - so we're saying
308:06 - for i equals one through that
308:09 - we can go if
308:12 - math.floor
308:13 - it again this is to make sure we round
308:16 - down
308:17 - game dot
308:20 - dot point and this is the points we have
308:22 - scored up until this point if you can
308:24 - remember
308:26 - and we can say if that is equal to
308:31 - game.levels
308:33 - at index i
308:38 - then we want to say table dot insert
308:42 - and
308:43 - enemies
308:45 - one and then
308:47 - enemy
308:49 - and game dot difficulty
308:52 - times
308:54 - i plus one
308:56 - so what are we doing here we're
308:58 - basically saying
309:00 - insert into the enemies table at
309:02 - position one
309:04 - an enemy
309:06 - that has the game the difficulty so the
309:09 - game difficulty is basically being set
309:12 - up here so it's one
309:14 - so in this case it's just going to be
309:15 - one but if you want to increase the gain
309:17 - difficulty then you can
309:19 - times in this case is going to be one
309:22 - plus one which is two but if this was
309:25 - the but if this i increases this would
309:27 - be two plus one which is three and this
309:30 - will basically increase the enemy
309:32 - difficulty or the enemy level
309:34 - aspects go on we did implement the
309:37 - leveling thing with the enemy in the
309:39 - previous vid i think it's actually in
309:41 - the two videos again not the previous
309:42 - video so let's see here
309:45 - at least a search level yeah there we go
309:48 - so self.level
309:50 - in the move
309:52 - so we did implement working with level
309:54 - so we didn't have to mess with that now
309:56 - because we did it before
309:58 - and then
309:59 - this is both to avoid bugs and you kind
310:02 - of tell the player you have done this we
310:05 - give the player one bonus point so game
310:08 - dot points
310:10 - is equal to game dot points plus one so
310:14 - we gave them one bonus point as well as
310:16 - trying to avoid a bug
310:19 - because otherwise this for loop is going
310:22 - to run multiple times
310:24 - because dt
310:26 - is going to take a while before it goes
310:29 - one full point because it's like
310:31 - 0.016 or 0.032
310:35 - so yeah we have to be careful with that
310:37 - so we give it one extra point so you can
310:39 - also break out of the loop
310:42 - there are also other ways to deal with
310:44 - it but this is the easiest way i find to
310:46 - go around it
310:47 - now once you have that you can just save
310:49 - your game over your code and let's see
310:52 - if it works
310:54 - play game
310:56 - okay here is the first enemy
310:59 - we wait until we get to 15 to see for
311:02 - the second enemy
311:10 - and here we go so now there are two
311:12 - enemies
311:13 - if we are willing to wait to 30 we
311:15 - should see a third enemy that is even
311:18 - faster
311:23 - yeah as you can see there
311:24 - and once one of them touches us we just
311:27 - go back to our main menu
311:30 - and yeah that is it for this tutorial we
311:33 - just implemented basic
311:36 - a basic point system
311:39 - and we implemented
311:40 - the basics of adding more enemies
311:50 - let's start with fixing something up
311:52 - first
311:53 - currently we don't use fonts very nicely
311:58 - because if we want a set font that we
312:00 - might want to use over a large amount of
312:03 - spaces this isn't going to work that
312:05 - well
312:06 - because we have to basically come back
312:08 - here copy and paste or remember this
312:10 - number
312:12 - that is why i think it would be best to
312:15 - create another table
312:18 - and this table we can say it's called
312:19 - local
312:20 - fonts
312:22 - now local fonts
312:24 - will just contain a few fonts for us
312:27 - so medium
312:30 - and this would be of course a medium
312:32 - sized font i'm not going to have small
312:35 - or extra small fonts i'm just going to
312:36 - go medium large and massive because
312:39 - these are the different sizes that i'm
312:41 - going to use
312:42 - nothing is going to be really small
312:45 - and i'm saying medium because the size
312:47 - of medium is going to be 16 and if
312:50 - you're a web developer you know the
312:52 - default font size is basically 16 pixels
312:56 - anyhow so we can say font is equal to
312:58 - and i'm going to copy this font because
313:01 - it's basically just going to be this
313:03 - right here
313:10 - so i'm going to paste that there
313:13 - and then i'm going to say size is equal
313:15 - to 16. we won't you really use this part
313:18 - too much but it's more for future
313:20 - reference because sometimes you want to
313:23 - access the size of the font and not just
313:26 - the font
313:27 - so it would be good to include the size
313:29 - so if you ever want to know like the
313:31 - font size like let's say you're in
313:33 - settings and you want to increase or
313:35 - decrease the font size
313:37 - then the player can maybe choose between
313:39 - large medium and small
313:41 - and you can tell them the font size is
313:43 - 16 and then it's 24 and then 60 or what
313:47 - not
313:49 - cool so that's just for future reference
313:51 - mostly it's not per se you're going to
313:53 - use or not to say it's going you're
313:55 - going to use it
313:56 - now i'm going to have two more fonts
313:58 - here one called large
314:00 - and in one called massive
314:05 - so large will be instead of 16
314:09 - 24
314:11 - and massive would be instead of 16 it
314:13 - will be 6t
314:16 - like that so now we have a fonts
314:18 - table so first let's go down here to
314:22 - where we
314:23 - draw because this is mostly where we're
314:25 - going to use the fonts
314:27 - now we will we want to set the font to
314:30 - its default whenever we draw
314:33 - this is mostly just because if we do set
314:36 - a font somewhere
314:38 - then that font won't just stay there the
314:41 - whole time and you'll notice when we get
314:43 - to the endgame state that this right
314:45 - here will become quite important so love
314:48 - dot graphics dot set font so we're going
314:51 - to set a default font for every
314:53 - iteration
314:54 - and it's going to be fonts
314:56 - dot
314:57 - medium
315:00 - dot font
315:02 - so we're basically saying
315:05 - add
315:06 - from fonts
315:08 - medium
315:09 - and then for medium
315:11 - we add font and font is just this right
315:14 - here that's basically the medium font in
315:18 - fact we can copy this
315:21 - and we can paste it
315:23 - right here
315:24 - boom
315:26 - now it's fonts medium font so whenever
315:29 - you draw this this will be the medium
315:30 - size
315:31 - this right here this would be the same
315:33 - but instead of medium it would be large
315:37 - so this will be a large font
315:41 - all right and that's currently all the
315:43 - fonts we really have if we run the game
315:45 - we should not be seeing any difference
315:48 - really
315:50 - so as you can see phones still look the
315:53 - same
315:54 - if we say play game that's still the
315:56 - same size and that's still the same size
316:00 - cool
316:02 - now i think it's time we start working
316:04 - on the end screen the game over screen
316:08 - so we'll need to create the buttons for
316:10 - this screen so here with this
316:13 - state right here this buttons
316:17 - we can go here where it says menu state
316:19 - and we can make it ended you can make
316:21 - this game over or whatever you want to
316:23 - call it i'm going to call it ended state
316:28 - so now we can have game over buttons
316:31 - now we can go to
316:33 - love.load right here and we can copy and
316:36 - paste this
316:38 - like that and instead of menu state we
316:41 - can turn that into
316:43 - entered state
316:45 - now the first one is replay so if you
316:48 - want to replay the game so
316:51 - replay
316:52 - game the second one is the menu button
316:55 - if you want to go to the menu so we can
316:57 - say menu
316:59 - and the third is exit game
317:03 - exit game will contain all of the normal
317:05 - values so love it ain't quit and just
317:08 - exit game
317:09 - this will contain menu
317:12 - and here we want to pass in
317:14 - change
317:15 - game state
317:17 - and the state we want to change it to is
317:20 - menu
317:24 - now taking it change game state was
317:27 - declared right here where it just
317:28 - changes the state to whatever is passed
317:31 - in
317:33 - and then of course
317:34 - you want our replay so right here
317:39 - replay for replay game
317:42 - yeah we're gonna make it full replay
317:44 - game
317:45 - and in here we can just say start new
317:46 - game
317:49 - now currently we didn't actually ever
317:51 - see the ended state so we'll need to go
317:53 - here to update and we'll need to change
317:55 - this
317:56 - to
317:57 - ended so from menu to ended this will
318:00 - instead of making it go back to the menu
318:02 - state where we see the menu it will make
318:05 - it go back to the game ended state or
318:07 - the game overstate and we can see the
318:09 - game over screen
318:11 - then we can go down
318:14 - and we can copy this else
318:16 - if c and like that
318:21 - now this else if will be instead of menu
318:25 - it will contain
318:27 - ended
318:29 - cool
318:30 - now i'm going to go
318:33 - love or let's just copy this here love
318:35 - that graphics.setfont
318:37 - because for the ended state we want to
318:39 - set the font to be something a bit
318:41 - bigger
318:42 - so fonts dot large
318:46 - and this will make the fonts a bit
318:47 - bigger
318:48 - this will allow us to basically
318:50 - everywhere within the game
318:53 - while it's in this state just increase
318:55 - everything with size
318:57 - then here we can go back up here and we
319:00 - just copy these three names here
319:04 - and we go back down and we can paste
319:07 - them here
319:09 - and then here we can just make menu
319:12 - ended
319:14 - so let's see
319:16 - what we can see so when we run the game
319:20 - what do we see
319:24 - okay so we see this
319:27 - it doesn't look great
319:28 - we can definitely make it a bit better
319:30 - for example instead of having it here at
319:32 - the side
319:33 - i think it would be better if we had it
319:35 - here in the center
319:37 - and we of course have to resize it a bit
319:40 - just make everything look a bit better
319:43 - so first let's try to center everything
319:47 - because i think that would look best
319:49 - so here everywhere where i say love that
319:52 - gra or where i say 10
319:55 - we can say
319:58 - love dot graphics
320:00 - dot get with
320:04 - and we can divide it by 2.25
320:08 - and this is a very specific
320:11 - value here this value was actually
320:13 - calculated while trying to find the
320:15 - perfect way to center
320:18 - our buttons
320:20 - because currently we can set the button
320:22 - x and the button y
320:25 - and this process right here allows us to
320:28 - make the button more centered if you
320:31 - have a different aspect ratio for your
320:33 - game so if i just quickly run this if
320:36 - your game wasn't this aspect ratio which
320:39 - i think is four by three
320:42 - or it's it just actually looks like a
320:43 - square it might be one by one
320:45 - but if it wasn't the same aspect ratio
320:47 - the same size
320:49 - then you will have to change these
320:51 - values here
320:53 - or you might have to it's not
320:55 - maybe you won't have to maybe you're
320:57 - lucky
320:58 - anyhow
321:00 - and in here where we say 20 70 and 120
321:06 - we can say
321:08 - love dot graph
321:11 - graphics
321:13 - dot
321:14 - get
321:16 - height because this will be the y
321:18 - position
321:21 - we can then just
321:22 - divide that
321:24 - by
321:25 - one
321:27 - point eight
321:29 - but that's only for the first one
321:31 - for the second one we will want to make
321:33 - that
321:34 - 1.53 because remember unlike with
321:38 - x here where basically all of them will
321:40 - just move here
321:43 - oh they will now move top to bottom so
321:45 - if you make this the same they will all
321:47 - be at the same
321:49 - y position
321:51 - and if you're all on the same y position
321:53 - they're going to be stacked on top of
321:55 - each other you can play with this a
321:56 - little bit if you want to to see what
321:59 - the difference would be
322:01 - if you didn't add that and stuff like
322:03 - that and here you can say 1.33
322:07 - cool
322:10 - then for the last two ones which will be
322:12 - the text positions
322:14 - we can specify
322:16 - 10 10
322:19 - and then here we can just keep that 17
322:23 - 10
322:24 - and then here we can change that to
322:27 - 22 10.
322:30 - this is quite a lot of changes so let's
322:32 - first see what we have because currently
322:35 - we did a lot of things so let's see how
322:37 - does our things look
322:41 - all right so that's already relatively
322:43 - close to the center the reason why it's
322:46 - further down to the bottom
322:48 - than what it is from the side
322:50 - is because we want to put our score here
322:52 - in the complete center
322:55 - so this will be below the score that is
322:57 - why it does this
322:59 - and the buttons work so if we go to menu
323:01 - or they don't because we haven't
323:02 - implemented clicking yet so never mind
323:04 - that
323:06 - all right so let's do the points let's
323:08 - quickly draw that before we continue to
323:10 - the button so love dot graphics dot
323:13 - print f
323:16 - and we can say math dot floor
323:20 - game dot points so we're going to put
323:23 - the game points for everyone to see we
323:26 - can say fonts dot
323:30 - massive dot font because we want it to
323:32 - be massive
323:35 - we're going to set
323:37 - this to zero
323:40 - then love dot
323:42 - graphics
323:45 - dot get height
323:49 - and we want to divide that by two
323:51 - because it's going to be kind of halfway
323:54 - and then we also want to minus the font
323:56 - size because remember
323:58 - it's basically going to look like this
324:00 - if i can open up my drawing application
324:04 - it's going to look like this so this is
324:05 - our font right
324:07 - but you have to remember so let's say
324:09 - that is the zero character
324:12 - you have to remember fonts are actually
324:14 - inside of squares just like images
324:17 - so this is actually how the font looks
324:19 - somewhat similar to this so when we do
324:22 - that we're basically saying
324:25 - this
324:29 - now we have to minus the font size
324:33 - specifically because the font still goes
324:36 - down
324:37 - so if we minus the font size
324:40 - it will go from here but up until let's
324:43 - say this point here
324:45 - because that would be the half of this
324:47 - font if we were to
324:49 - circle it like that or something
324:52 - this might be a little bit confusing to
324:53 - understand so let me actually show you
324:56 - so instead of minusing it we'll keep it
324:57 - like this for now
324:59 - and then we can say
325:02 - love.graphics dot to get with to say
325:06 - where it should bend and then we can
325:08 - just specify it should be in the center
325:12 - right once we have that we can do this
325:15 - play
325:16 - game and as you can see the one is right
325:20 - there
325:21 - and if you want this to be a bit more up
325:24 - we'll have to minus the font
325:28 - size
325:29 - so
325:30 - minus fonts dot massive
325:35 - fonts dot
325:36 - massive dot size
325:39 - not the font but the size this time
325:41 - because we want to minus it by 60.
325:45 - now if we were to run this
325:48 - boom
325:49 - r2 is nice above the buttons
325:54 - now what i would like to do is i would
325:56 - like to go up here a bit
325:59 - to where we were here and i like to
326:01 - change all of these 120s to 100 instead
326:06 - and in this 40s to 50s
326:10 - and let me show you why because now look
326:12 - actually a bit bitter
326:14 - so if we could just go like this
326:17 - as you can see it just looks a bit
326:19 - better
326:21 - and i don't think this end game looks
326:23 - that great and i don't really want the
326:24 - buttons to be too long and i want them
326:26 - to all be the same length so instead of
326:29 - exit game
326:31 - they'd rather say quit because quit
326:34 - won't be that long
326:35 - so quit
326:38 - and actually while we're at it let's
326:40 - make this instead of a replay game
326:43 - we make it replay instead
326:46 - and this will make everything nice and
326:48 - short so when we get to the game over
326:50 - screen
326:51 - everything fits into the buttons nicely
326:57 - all right
326:58 - and that is actually just perfect
327:01 - next up we need to make the buttons able
327:04 - to be
327:05 - pressed
327:06 - because currently the buttons have
327:08 - nothing to check if they're being
327:09 - pressed
327:11 - so here where we say if the game status
327:14 - menu we can say
327:16 - else if
327:18 - and then we can do the same thing here
327:20 - where we say menu
327:22 - as the menu we say
327:25 - ended
327:26 - and in here we can just specify this
327:32 - but this time instead of saying menu
327:34 - state
327:35 - we can say
327:37 - ended state
327:40 - and everything else can stay the same
327:43 - you could even maybe create a function
327:45 - that will replace this for you so you
327:48 - don't have to do this every time
327:50 - anyhow if we were to now run the game
327:53 - our buttons will work so if i were to
327:56 - end the game here
327:57 - say replay we can replay the game
328:01 - if i say menu we go back to the
328:04 - menu and then if i were to say quit
328:08 - we exit the game
328:12 - and that is basically all for this
328:14 - tutorial
328:16 - you will notice that the game is not
328:18 - quite finished yet there's quite a lot
328:20 - of things you can still do here and i
328:23 - believe the best way to learn
328:26 - is to do it yourself
328:29 - i am going to bring out another course
328:31 - which will cover some of the topics i'm
328:33 - going to give as homework
328:35 - so if you can't figure it out at all
328:38 - once you watch that tutorial you should
328:40 - be able to get a sense
328:43 - of how to do it
328:45 - so
328:46 - let's first start with what we need
328:50 - first of all
328:51 - you'll notice if archie just moved this
328:53 - to the side a little bit
328:55 - we have a paused state here
328:58 - but we did not implement that paused
329:01 - state
329:03 - implementing a post state is incredibly
329:05 - simple and i will be doing that in the
329:07 - next tutorial as well
329:09 - but currently we don't have that paused
329:12 - state
329:13 - i want you to try and implement that
329:15 - paused state it's very very simple
329:18 - and it's probably easier than you think
329:20 - it is
329:22 - next up is the settings page
329:25 - we have a settings button
329:27 - but currently all it does is say
329:30 - say this button has no function attached
329:33 - this is a bit more complex and there's a
329:35 - lot of ways you can implement the
329:36 - settings button
329:39 - i want you to try and do it first in the
329:41 - next tutorial is going to be your
329:42 - homework again but i'm going to give you
329:44 - a kind of an example a sort of
329:48 - hey you can do this
329:50 - so you can try and do it here and i
329:52 - recommend you do because it's quite a
329:54 - challenge
329:55 - and if you do it right then you have a
329:58 - perfect settings menu
330:01 - otherwise you can wait till the next
330:03 - tutorial
330:04 - where i will give you a little bit of a
330:06 - push towards the right direction i'm not
330:08 - going to implement an entire settings
330:10 - page but i will show you kind of a way
330:12 - to get started with it
330:15 - and next up is make the enemies more
330:17 - different
330:19 - currently the enemies are quite boring
330:21 - they're all circles
330:23 - they're all pink and
330:26 - that's it there's nothing special about
330:29 - any of these enemies
330:30 - in the next course i will show you a
330:33 - basic way of how to make your enemies
330:35 - more different
330:38 - so stay tuned for that if you do want to
330:42 - get the answers to this as well but
330:43 - changing these enemies up to be a bit
330:45 - more different like maybe making them
330:48 - instead of circles
330:49 - make them squares
330:51 - that could be a great idea
330:54 - maybe start a scoreboard as well
330:57 - so let's say you can have a high score
331:01 - and then you can compete to beat your
331:04 - current high score
331:07 - i'm going to show you how to do this in
331:08 - the next course as well
331:10 - but i would like you to try and
331:12 - implement this here as well because it
331:14 - can be quite difficult ooh that's a fast
331:16 - one it can be quite difficult to do
331:18 - so
331:19 - i would recommend you try and do it on
331:20 - your own first
331:23 - and hello everyone if you're enjoying
331:24 - this tutorial please leave a like and
331:27 - subscribe for future tutorials
331:30 - so in this tutorial we will be making a
331:33 - pretty cool game
331:35 - the game's name is asteroids
331:39 - so here's an example it's a little big
331:42 - let me just turn down the sound so
331:43 - everyone can hear me
331:45 - so here we basically have a new game
331:48 - settings
331:49 - and a quit option
331:51 - and we can say new game you can start a
331:54 - game it has faded fading text it has a
331:57 - working high score it has a score and it
332:00 - has lives you can shoot things
332:04 - and you can go to the next level and
332:06 - then there will be more difficult times
332:07 - ahead you can crash
332:09 - and then you'll lose a life
332:12 - you can shoot things
332:15 - now this may look incredibly simple
332:18 - but it is pretty complex with a lot of
332:22 - things working
332:23 - inside of it
332:25 - let me just go out of invincibility mode
332:27 - and there we go then when it's game over
332:29 - you have a fading game over screen
332:32 - and if you have a high near high score
332:34 - it will save that high score
332:36 - and then boom here you go
332:40 - so that is what we will be working on in
332:41 - this tutorial for future reference if
332:44 - you ever do fall behind you can go to
332:46 - get up and the link will also be in the
332:48 - description but you can go to github
332:50 - webnet to
332:52 - youtube project and then in here and go
332:55 - to lua and then the live 2d folder
332:59 - inside of the love2d folder
333:01 - you will have an asteroid game folder
333:07 - and in here you'll have all of the
333:08 - tutorials and you'll have some homework
333:11 - if you want to do it now what do you
333:14 - need in a in order to start with this
333:16 - tutorial because some of you might be
333:19 - completely new
333:20 - first you need to know lua
333:23 - if we go to our crash course and
333:26 - research it on youtube then here at the
333:28 - top is my crash course steve's teacher
333:31 - full lua programming crash course
333:34 - you will need to follow this course if
333:36 - you want to follow along of course not
333:38 - all of the topics are necessary but a
333:41 - lot of these topics are very handy to
333:43 - know about
333:45 - and once you know this it will be very
333:46 - smart of you
333:48 - to know a little bit about love2d
333:52 - so love2d right
333:54 - here and here we go now i recommend you
333:58 - know at least this one
334:00 - this one
334:01 - and this one
334:03 - and then i would also recommend you
334:05 - follow the previous tutorial gamedev
334:07 - tutorial where we created the save the
334:09 - ball game
334:11 - this tutorial covers some really basic
334:13 - items from love2d
334:15 - and if you follow the tutorial then this
334:18 - tutorial that we're going to do now will
334:20 - be a lot easier to follow along
334:24 - first we need to create a folder for our
334:27 - things
334:28 - so i'm going to go to documents
334:32 - going to go to my trash
334:35 - and then i'm going to create a new
334:37 - folder and call it
334:39 - asteroids i don't know if how to spell
334:41 - asteroids but i hope that's correct
334:43 - cool
334:44 - inside of this folder and you don't
334:46 - necessarily have to do in your trash
334:48 - folder i just have a trash folder for
334:50 - tutorials and inside of this
334:53 - folder right here you can create a new
334:55 - file
334:56 - and you can call it
334:58 - main.lua
335:01 - now once you have created a file you can
335:02 - open up vs code in here
335:05 - i wonder can i open up i can't open up
335:07 - from here anyhow i can go here to my
335:09 - terminal but you will probably have an
335:12 - option
335:14 - to go here and just right click and say
335:16 - open in vs code or whatever code editor
335:19 - you use
335:20 - we can then just say code
335:22 - blue
335:24 - code to open up vs code here
335:27 - and you should see something similar to
335:29 - this
335:31 - we can close this folder here because we
335:33 - won't need it
335:35 - now take note you do need love to the
335:36 - installed and lua so if you don't have
335:38 - those to install i do have a tutorial at
335:40 - least on how to install lua
335:42 - then here we have our main.lua
335:46 - if you also use vs code you can get the
335:48 - love to the extension
335:52 - right here
335:54 - and you can also get the
335:56 - lua extension right here
335:59 - and you also debug if you want but this
336:01 - isn't necessary it will probably auto
336:03 - download anyways
336:04 - anyhow
336:05 - now that you have that everything is
336:07 - ready to go
336:09 - let's just set up a basic project i
336:11 - think for today we don't have to go all
336:14 - out
336:15 - so just
336:16 - local
336:19 - love is equal to require
336:21 - love this is an optional step you don't
336:24 - have to do this but it is optional
336:28 - then we can create a function
336:30 - and call it love.load
336:33 - and it's just a basic love2td setup
336:37 - i mean can create
336:39 - two more functions
336:41 - for
336:42 - update i almost said delete here but
336:45 - this should be a draw
336:47 - now since we're starting off very basic
336:49 - we're not going to do a lot we only want
336:51 - to get everything up and running
336:53 - and maybe make sure everything works
336:57 - if i were to run this by saying lab dot
337:00 - and you can also use the vs code inbuilt
337:03 - terminal by going to terminal
337:05 - new terminal and then you will have the
337:07 - same thing as what i have you can just
337:10 - say love dot here as well
337:12 - this is the same thing as what you just
337:14 - saw here i just like this one more
337:16 - because it looks cooler
337:19 - and then you'll see this
337:22 - pretty neat
337:23 - we can then create a new file by
337:26 - clicking on this file icon here
337:28 - and we can call it conf dot lua
337:32 - and here we can just say local love
337:35 - is equal to
337:37 - require
337:38 - love yet again optional you don't have
337:42 - to import love
337:43 - now you can say function
337:45 - love.conf to set up the config file
337:48 - pass in the app
337:50 - we can say app.window.with
337:53 - and you can make it any width you want
337:56 - but i am going to make it equal to 128
338:02 - 128 no
338:04 - 1280 or
338:06 - 1280 and as for the height
338:09 - app.window.height
338:13 - is equal to 720. for some of you this
338:17 - might be too big
338:19 - so just for reference this is a 16 by
338:23 - nine aspect ratio we're working with
338:25 - as long as you work with the same ratio
338:27 - you don't have to change too much
338:30 - for example at 1080p
338:33 - resolution this is 720p but 1080p would
338:36 - be 1920
338:39 - in width and then 1080 in height as an
338:41 - example this would be bigger of course
338:44 - if you want to go smaller it should
338:46 - probably probably be around 480p but you
338:49 - can google a 16x9 aspect ratio smaller
338:52 - than this
338:54 - and of course we want to set the title
338:56 - app.window.title
339:00 - is equal to asteroids
339:04 - and then lastly we want to say app dot
339:06 - window dot display
339:09 - equal to
339:11 - now
339:12 - take note
339:13 - not all of you will benefit from this
339:15 - display i'm using here i have two
339:18 - monitors the one on my left which you
339:21 - cannot see
339:23 - and then the one on my right which you
339:24 - can see
339:26 - however i don't want the window to spawn
339:27 - on my left monitor which is probably
339:30 - display one
339:31 - i wanted to display on this monitor so
339:34 - let's see does everything work and it
339:36 - does it's
339:37 - big
339:38 - boy
339:40 - and it has the asteroids title
339:42 - and it spawns on this monitor so this
339:45 - one here is optional these are also
339:48 - optional but i recommend using them
339:49 - because why not as for the window width
339:52 - and height i recommend 16x9
339:55 - smaller size if you want but if you
339:57 - don't want to change the window height
339:59 - and width
340:00 - then you don't have to
340:08 - first thing i want to do is i want to
340:12 - hide my mouse
340:13 - so when i'm here the mouse should be
340:15 - gone and that's pretty simple
340:18 - to do that we can go here and say
340:21 - love
340:22 - dot mouse dot set
340:25 - visible and we can just go false and
340:28 - this will set the mouse visibility to
340:31 - false
340:33 - now for future reference we are going to
340:35 - do that in this tutorial but it will be
340:37 - smart to set our mouse
340:41 - x mouse
340:43 - y
340:44 - equal to zero or whatever you want to
340:46 - here
340:48 - so these will be two global variables
340:50 - containing the mouse x and y positions
340:54 - this is for a future reference so you
340:56 - don't have to put it here now but i do
340:57 - recommend you do because then we don't
340:59 - have to worry about it
341:01 - and then next up here in the update we
341:04 - also want to set the mouse x and y so i
341:06 - will actually just copy this
341:08 - paste it here
341:10 - and then here we can go
341:12 - love dot
341:14 - mouse
341:16 - dot get position
341:19 - and this will return the x
341:21 - and the y position of the mouse both of
341:23 - these are global scope so if you wanted
341:26 - to you can go
341:27 - underscore g dot and that would be
341:29 - allowed
341:32 - but for me here i'm just going to say
341:34 - quick fix
341:35 - and if you're in v is good you can
341:37 - choose one of these
341:38 - and i'll just go here disable
341:40 - diagnostics for
341:42 - lowercase in this file
341:45 - or even in this workspace could work but
341:47 - i'll go file
341:49 - and it will add this where it doesn't
341:50 - show that errors underneath these
341:54 - and then last but not least before we
341:56 - continue i would like to set the show
342:00 - debugging
342:02 - equal to true
342:05 - and this
342:06 - will basically
342:08 - say if you want to see debugging items
342:11 - right now we're not going to use it but
342:12 - we will later
342:14 - if we run this you can see i can no
342:16 - longer see my mouse but if i move
342:18 - outside of the screen you see here
342:20 - there's my mouse but if i go in it's
342:22 - gone
342:23 - that is what we wanted
342:26 - cool
342:27 - now we can create the player
342:30 - to do that
342:31 - we can go here and create a new file
342:35 - called
342:36 - player
342:38 - dot lua
342:39 - i'm using a capital case p
342:42 - just because i believe objects or at
342:44 - least other files should use capital
342:46 - case p unless it's the main files the
342:48 - core file is going to be used by lua i
342:50 - like the conf or the main
342:52 - cool
342:53 - now the player here will be an object if
342:55 - you don't know how to work with objects
342:57 - in lua i do recommend you go watch my
342:59 - objects tutorial i have on this now you
343:02 - can go local
343:04 - love eagles require
343:06 - and then
343:07 - love
343:08 - and if you want to you can copy this
343:10 - and you can put it in here
343:12 - take note that this diagnostics only
343:14 - works if you're in vs code if you're in
343:17 - a different ide slash code editor then
343:20 - this may not work
343:22 - now we can create a function
343:25 - call it player
343:27 - and player will take in whether the
343:29 - player is busy being debugged so
343:31 - debugging
343:33 - so if we're debugging the player then we
343:35 - want to see some extra information
343:37 - and then at the end of the file we can
343:39 - say return
343:41 - player
343:42 - nice
343:43 - now some variables you might want to set
343:45 - at the start
343:47 - will be the ship
343:49 - size
343:50 - these will be constant variables that
343:52 - will never be changed so they are
343:54 - capital case
343:56 - and we won't want to access them outside
343:58 - of this file so we're not putting them
344:00 - inside of the return
344:01 - we can make this equal to 30. you can
344:04 - change this but this will basically
344:05 - determine the ship size
344:08 - because this would be
344:10 - from the left side of the ship to the
344:13 - right side of the ship
344:14 - then we can go local
344:17 - view
344:18 - angle
344:20 - is equal to math
344:22 - dot red
344:23 - 90.
344:24 - to get an example of what this does
344:26 - because it transforms degrees into
344:29 - radians because we want to use radians
344:32 - and not degrees
344:33 - so to understand what we'll get here we
344:36 - can go here and say lua
344:38 - and then say math dot rad
344:41 - and then 90
344:42 - and that will give us 1.57
344:45 - radians
344:46 - so yeah we're going to use radians not
344:49 - degrees just keep that as note so this
344:52 - would be 1.57 radians
344:55 - and it's all to do with math stuff so
344:58 - don't worry too much about it
344:59 - then here we can say debugging
345:02 - is equal to debugging
345:04 - or false so if we do not pass in the
345:07 - debugging argument then by default it
345:10 - will be false
345:11 - that's what we are saying here now
345:13 - return is what we want to get back what
345:15 - we want to be able to access
345:17 - within this whole thing here so x will
345:21 - be the player x position which is love
345:23 - dot graphics
345:25 - dot get with divided by two so we want
345:29 - the player
345:30 - to be positioned in the center of the
345:32 - screen once the game starts so that's
345:35 - what we're doing here we can then do the
345:37 - same for y and then while instead of get
345:39 - with would be get height so now the
345:42 - player will be positioned in the center
345:45 - of the screen
345:46 - then the radius
345:48 - of the player and this will kind of be
345:50 - like the hitbox of the player
345:53 - so the circle around the player if that
345:55 - circle is hit what happens
345:57 - anyhow so the radius will be the ship
346:00 - size divided by two and then the angle
346:04 - would be equal to
346:05 - vu angle so the angle by default will be
346:08 - 90 degrees meaning the player will be
346:10 - facing upwards
346:12 - how do i know that because the player
346:14 - will be a triangle if you've seen the
346:17 - demo of the game in the first tutorial i
346:20 - showed you that the player itself will
346:21 - be a triangle and moves around
346:24 - and if the angle of the triangle is 90
346:26 - in terms of degrees and the radians 1.57
346:30 - then it will point upwards
346:32 - cool
346:33 - then rotation
346:35 - will be equal to zero so this is if the
346:37 - player has been rotated
346:39 - then thrusting
346:41 - will be equal to false if the player is
346:43 - frosting that means we want to move
346:45 - because he's frosting is blasting out
346:47 - fire and stuff which we won't could in
346:49 - this tutorial but we will code later and
346:51 - then the thrust itself will be equal
346:55 - to the x
346:57 - 0 and then the y
346:59 - zero and i'll explain what all this
347:00 - means later once we get to it
347:02 - and then this speed
347:04 - zero
347:05 - cool
347:06 - now this currently won't do anything
347:08 - so let's draw the player to the screen
347:11 - so underneath this thrust we can just
347:13 - create a function called draw this will
347:15 - be a function that takes itself
347:18 - and then here we go
347:20 - now local opacity is for future
347:23 - reference
347:24 - but basically this will determine how
347:27 - visible the player is to the screen so
347:29 - if it plays on the screen can we see the
347:31 - player or not next up we want to say
347:33 - love
347:34 - dot graphics
347:36 - dot set color and then one one one and
347:41 - this means white
347:42 - and we pass in the opacity which is also
347:45 - one so it means it's completely visible
347:47 - to draw the player we can say love dot
347:50 - graphics
347:51 - dot polygon
347:53 - and in here we can type in a lot of
347:54 - things that will draw the player first
347:56 - of all we want to draw the player as a
347:58 - line
347:59 - not just something that's being filled
348:00 - in so you can say line so it's going to
348:03 - draw lines then we want at least two
348:06 - items to draw that line so let's go
348:08 - self.x plus and this will be a little
348:11 - bit of math so
348:13 - bear with me and we have four divided by
348:16 - three and note i'm using two brackets
348:18 - here this is just for me to know okay i
348:21 - want to do the division first the
348:23 - computer will know let's do division
348:25 - first but i want to know as well let's
348:27 - do division first because when it comes
348:29 - to math operations and when to execute
348:31 - them i am still a little bit junky on
348:33 - that and you can say times self
348:36 - dot radius take note
348:39 - that this is not inside of these
348:41 - brackets instead of this brackets but
348:43 - not inside of these brackets because you
348:45 - want to execute this first so four
348:47 - divided by two and i think that should
348:49 - be three and i'm going to explain this
348:51 - in a second and then times the radius
348:54 - and then once that has completed we want
348:57 - to times that by
348:58 - math
348:59 - dot cos
349:01 - self dot angle
349:04 - now the 4 divided by three is mainly to
349:06 - find the center of the triangle
349:09 - next up here we can say self dot y so we
349:12 - can copy that line say self.y keep
349:14 - everything the same
349:16 - and in here instead of saying because we
349:18 - say sin because we want to go the other
349:20 - way so let's
349:21 - create the player and hope for the best
349:24 - so then here we can say local player
349:26 - capital p
349:27 - is equal to require player and it should
349:30 - also be a capital p because the foul has
349:32 - a capital p then down here in the
349:35 - loading section we can say player
349:37 - lowercase p is equal to capital case p
349:40 - player if you don't understand what i'm
349:42 - doing i recommend you to go watch my
349:45 - course on oop in lua and then we can
349:49 - also pass and show debucking
349:51 - so this will create this little object
349:52 - of player
349:54 - that we can use and get data from now
349:57 - here we want to just see the players so
349:59 - let me just draw player colon draw how
350:03 - can i use this because right here we
350:05 - export the draw function
350:07 - it's inside of return and then it should
350:10 - draw the player for us now if we were to
350:12 - run this
350:14 - do we get no we don't it needs at least
350:17 - three
350:18 - vertices to draw a polygon oof okay so
350:21 - we'll have to do the whole thing
350:23 - unfortunately but okay not a problem so
350:26 - since this is a lot of typing i'm just
350:28 - going to paste this here and then i'll
350:29 - walk you through it so basically here we
350:32 - have what we just coded
350:34 - and in here we say self.x minus the
350:37 - radius
350:38 - right
350:39 - times
350:40 - 2 divided by 3
350:42 - times math cos south angle so first
350:46 - we're going to times this because pod
350:48 - mass if you want to make sure of that
350:49 - you can do that anyway so we'll first
350:51 - times these and then we'll add this to
350:54 - it and it's going to be the same all the
350:56 - way around for x and y the only things
350:58 - that change is when sin and cos is being
351:01 - used and yet again i didn't quite
351:04 - understand this math it was a 1am thing
351:06 - so just excuse me if i didn't quite know
351:08 - how to explain this but you can play
351:10 - around with it if you want to understand
351:12 - it more i don't really want to
351:14 - understand it more because it breaks my
351:15 - brain not understanding it so scared of
351:18 - understanding it anyways if we try to
351:20 - run it now ah here we go does it quite
351:23 - look like the player let's see what went
351:25 - wrong oh you know what went wrong here
351:27 - we should minus it my bad
351:29 - now if we run this we'll get a triangle
351:33 - cool if you want to actually test it out
351:35 - for yourself and see how it looks what
351:37 - you could do is you could run lua and
351:39 - then open up a drawing application okay
351:42 - now there is our x position under y so x
351:45 - would be side to side as you know and y
351:48 - would be up and down as you also know to
351:51 - remember this you can remember y has
351:53 - like this little finger goes like that
351:55 - and you can add arrows here to specify
351:57 - up and down that's how i remember which
351:59 - one is x and which is why
352:01 - anyhow so there's our center
352:04 - then what we can do is let me just do
352:06 - that so first we get our self.x and
352:09 - let's say x
352:10 - itself
352:13 - is equal to
352:15 - what is it let's make it 20
352:17 - or 200 because that would be more
352:19 - realistic
352:21 - so 200
352:23 - plus
352:24 - and since we know this isn't going to
352:25 - execute yet let's first go four divided
352:27 - by three four divided by three that's
352:30 - one point three three three so one point
352:32 - three three four three times and then
352:35 - the radius as we already know
352:37 - is let's see here ship size that's with
352:40 - 15 because ship size divided by two so
352:42 - the radius would be 15 so times 15.
352:47 - so this right here is basically 20. so
352:50 - that's 20. then we times this with math
352:53 - cost and then the angle
352:55 - and this is why
352:57 - we used radians right here and not
353:00 - degrees because if this was 90 degrees
353:03 - then this would be way off so we are
353:05 - using a radiance to give it a much
353:07 - smaller value to work with because 90
353:10 - would be pretty big compared to one
353:12 - point something
353:13 - anyhow so then we can say
353:17 - dot cos
353:18 - and in here we can specify the angle and
353:21 - the angle as we know is math.rad19
353:25 - so
353:26 - math.red
353:28 - 90
353:29 - like that okay so we got our values now
353:32 - we have to times these two together so
353:35 - 19.9999
353:38 - times six
353:40 - point one two three two three three
353:44 - nine i believe that will give us this
353:46 - right here and then we can add our
353:49 - self.x which would be 200 so this value
353:53 - right here plus 200.
353:55 - now that we have that
353:56 - we can see where the next dot will be
353:59 - drawn on the x-axis so here we have our
354:02 - x and this right here that's 200 to the
354:04 - x so that's 200. now the next one would
354:08 - be 322.
354:10 - so that would be even further beyond so
354:11 - that would be like here or something and
354:14 - not not downwards it just exports a
354:17 - like it would be like here or something
354:20 - there
354:21 - and this is where this one is and you
354:23 - can just imagine
354:24 - that
354:25 - these two
354:26 - or 120 pixels from each other now with
354:30 - the y it will position this one
354:31 - downwards
354:33 - so you can use this to kind of figure
354:35 - out where everything goes if you were to
354:37 - do the math like this this is at least
354:38 - how i can understand math so if i want
354:40 - to spend the time this is how i would
354:42 - understand it so we can draw the player
354:44 - that is good progress we can't do
354:46 - anything yet but we can draw the player
354:49 - nice
354:50 - now we still have a debugging option so
354:52 - let's quickly implement that
354:54 - so right underneath opacity we can say
354:57 - if
354:58 - debugging
355:00 - then and here we can say love dot
355:02 - graphics dot set color
355:05 - and you can make this any color that is
355:07 - not white or black
355:09 - so one zero
355:11 - zero because black is the background and
355:13 - white is the color of the shape so
355:15 - making it a different color will make it
355:17 - easier to see so in this case i'm making
355:19 - it red and then love dot graphics
355:23 - the rectangle and we want to actually
355:24 - see the center of the ship this will
355:26 - just help for debugging for when we try
355:28 - and move the ship and the ship maybe
355:30 - doesn't move but the center moves or
355:32 - something like that and here you can
355:33 - just say fill and then self
355:36 - dot x minus one
355:39 - self dot y minus one
355:42 - two two
355:43 - so this positions
355:45 - it's in the center and i'll show you in
355:46 - a second what this means so if we do
355:48 - this
355:49 - and you see we have a little red dot in
355:51 - the center of our ship
355:54 - the reason i said -1 for the x and the y
355:57 - position
355:58 - was because if i didn't
356:01 - we'll be getting this and as you can see
356:03 - it's a little bit off from the center
356:06 - and we don't want that
356:08 - and the reason for that is just because
356:10 - of how we draw
356:11 - so we add minus one
356:14 - to avoid that
356:16 - and then the two two is just the size so
356:18 - if you were to change this to 4 for
356:20 - example
356:21 - then now we'll get a bigger circle
356:24 - and i will have to change it more to the
356:26 - side
356:27 - because of the size here so this will
356:28 - now have to become -2 minus 2.
356:32 - so the more you increase the size the
356:34 - more you have to move it back because
356:36 - you have to remember if i were to open
356:38 - my drawing up again
356:40 - if we have a square
356:42 - square
356:43 - like that
356:44 - this is the x position of the square
356:47 - right here so right there that's the x
356:50 - position of the square
356:51 - and we are drawing a rectangle
356:54 - inside of the
356:55 - player
356:56 - so we need to minus this to the x and
357:00 - minus to the y
357:01 - to bring this to the center of this
357:03 - square
357:04 - if you understand what that means
357:06 - anyhow so let's just change back to one
357:09 - into two
357:10 - and next i want to draw the collision of
357:14 - the
357:14 - player so when we try and collide with
357:17 - other things we can see where the
357:19 - collision would affect each other so
357:22 - love dot graphics dot circle and here we
357:26 - can say line
357:28 - self dot x self dot y we can say sound
357:32 - that x and self.y because
357:34 - the x and y of a circle is in the center
357:37 - of a circle and not at this side of the
357:39 - circle
357:40 - and itself.radius so the radius of the
357:43 - ship itself
357:44 - if we run this we get a circle around
357:46 - the ship now this circle right here is
357:49 - basically the collision so if anything
357:51 - touches that circle
357:53 - it's touching the player you might think
357:56 - this is pretty basic and it is moving
357:58 - things and it isn't quite accurate
358:01 - but believe me this does decrease the
358:03 - amount of math we have to do and you'll
358:05 - thank me for this later all right
358:07 - now whenever you don't want to see that
358:09 - you can just turn off the debugging by
358:11 - passing in false here cool now
358:15 - let's move the player
358:17 - because currently the player isn't
358:19 - moving at all and we can't move the
358:21 - player even if you wanted to so let's
358:23 - create a function and we can call the
358:25 - function move player or just move both
358:28 - will work perfectly fine
358:30 - we can then say function that takes in
358:32 - self
358:33 - and then local
358:35 - fps
358:37 - so this will get the fps of the game so
358:39 - this isn't the best way to say how fast
358:42 - the player should be moving and we could
358:44 - possibly change this in the future
358:46 - to be a better way but for right now
358:49 - saying the fps
358:50 - will be the easiest way
358:52 - so you can say love dot
358:55 - timer dot get fps
358:58 - and we're gonna scroll it down and then
359:01 - we want to set the friction and the
359:02 - friction will just basically say
359:05 - how fast the player should stop moving
359:08 - so let's go here and say
359:09 - local
359:11 - friction i will play around with this
359:12 - because it's pretty simple
359:14 - is equal to 0.7
359:17 - now we need to set the rotation speed
359:20 - of the player now i want the player to
359:23 - be able to turn a full 360 degrees
359:26 - so completely around within a second to
359:30 - accomplish this we can say self dot
359:32 - rotation is equal to 360 divided by 180
359:37 - times math dot pi divided by fps
359:41 - so first
359:43 - yeah there we go so first it will
359:45 - execute this and it will get the value
359:48 - of this so
359:50 - lua
359:51 - 360 divided by
359:54 - 1080
359:56 - that's two then it will divide these two
359:58 - so math.pi
360:00 - divided by fps so
360:03 - pi and we can assume we'll be getting
360:06 - 60 fps so that's 0.052
360:11 - so that's 2
360:12 - times 0.0523
360:18 - five like that and that should be at
360:20 - times the symbol not an end
360:22 - and they will get this value right here
360:26 - now this value right here is basically
360:28 - how much the player will turn every
360:30 - second
360:31 - cool
360:32 - now let's actually use that because i
360:33 - think it would be easier to understand
360:35 - if we use it i didn't worry too much
360:36 - there wouldn't be that much math in this
360:38 - course it's just the first one has quite
360:40 - a lot of math because of
360:42 - because we're using a triangle and
360:45 - whatnot so you don't have to worry too
360:46 - much about the math we want to basically
360:48 - say when the player should be turning
360:51 - left and right so to do that we can go
360:53 - here and do a quick fix to that and say
360:55 - love dot keyboard
360:57 - dot is down and we want the player to
361:00 - turn left whenever they click on the a
361:03 - button and you don't have to add these
361:05 - extras but i like to add options and you
361:08 - can say or
361:09 - if they press the lift button on their
361:11 - keyboard so that's like the left arrow
361:13 - on your keyboard or
361:15 - if they press the
361:17 - kp six and that's the numpad number
361:21 - c and that shouldn't be six actually
361:22 - before so that's numpad number four so
361:24 - if they're only like the numpad they
361:26 - press four then the player will also go
361:29 - so now they have a lot of options to
361:30 - choose from you don't have to add this
361:32 - mini i just like to
361:34 - and you can say self dot
361:37 - angle
361:38 - is equal to self
361:40 - dot angle plus rotation so every time
361:44 - this runs
361:45 - it will add this to the rotation so it
361:48 - will add 0.1047
361:52 - to the root to this right here that
361:54 - should be south
361:55 - to the angle
361:56 - so the angle will change every time and
361:59 - as we know the angle is in radians so we
362:02 - need a small value which we got here as
362:04 - you can see here we got 0.147 and we add
362:08 - that to this and you'll see it working
362:11 - in action in a second again copy this
362:13 - and we can then go here and say d if
362:16 - they want to go right and then write for
362:18 - the right arrow key and then kp six if
362:22 - they want to go right and then this one
362:24 - will of course be minus cool let's test
362:27 - this out
362:28 - so if i were to run this and of course
362:30 - we didn't do anything yet because we had
362:32 - to go here into the main file and we
362:36 - have to say player moves right here
362:38 - player
362:39 - move so it should execute this every
362:41 - time this update runs which is like a
362:44 - lot
362:46 - 60 times a second in fact
362:48 - run this
362:49 - you'll notice i can now rotate
362:53 - so that's pretty cool
362:56 - and it takes me a full second to do a
362:58 - full rotation
363:00 - now of course if your fps fluctuates
363:02 - like you have 30 fps then the player
363:04 - might actually rotate faster than a
363:07 - second
363:08 - so that's why they like using the fps
363:10 - but for right now that's the easy way
363:12 - out and we don't really use dt at the
363:15 - moment but we can later
363:17 - nice now let's add a movement so the
363:19 - player can move up and down
363:22 - now we're not going to add the keyboard
363:23 - bindings for this in here
363:25 - we're going to do it out here
363:27 - the reason for that is because we will
363:29 - be using that for more than just the
363:31 - player
363:33 - anyhow so then we can go
363:35 - if
363:37 - self dot thrusting
363:39 - and we set that up here it's just true
363:42 - or false so if the player is moving
363:44 - or if the player is trying to move if
363:46 - they press w the frost will be true
363:50 - then
363:52 - and here we want to start moving the
363:53 - player so self
363:55 - dot thrust
363:57 - dot x and this thrust dot x is set here
364:01 - is equal
364:03 - to itself
364:04 - whoa and then we can go plus self dot
364:07 - thrust dot speed
364:10 - and we get the speed from here which is
364:12 - zero and it shouldn't be zero and i
364:14 - don't think about it it should be five
364:16 - you know you should give it at least
364:17 - some speed so the faster you make this
364:19 - the faster the player will move so the
364:21 - higher this is the faster the player
364:23 - will move
364:24 - and here we can say
364:26 - times math.cos
364:30 - self
364:31 - and this is just to kind of nerf the
364:33 - speed and we can actually remove this in
364:35 - a second
364:36 - and then divided by f ps
364:39 - and then we can copy that again and this
364:41 - time for y
364:42 - and then we still everything the same
364:44 - but here we can go
364:46 - minus and then we do syn and there now
364:49 - currently won't do anything so let's try
364:52 - to implement that
364:54 - so right here
364:55 - between the load and update we can say
364:58 - function
364:59 - love dot key pressed
365:02 - and we can say key
365:03 - and this will allow us to add a key
365:06 - press
365:07 - then we can say
365:08 - if
365:09 - the key
365:11 - is equal to
365:12 - w
365:13 - or
365:15 - and now we can add a bunch of extra
365:16 - options yet again you only need to add
365:18 - one i just like to give choice
365:21 - and here we have three options
365:25 - one that will be the up arrow on the
365:27 - keyboard
365:28 - and then kp8 for eight on the numpad
365:34 - if it's one of those three
365:36 - then player
365:38 - dot
365:39 - frosting
365:41 - equals true so it will make the player
365:43 - frost and if we play it we don't really
365:46 - get anything
365:47 - and the reason for that is because we're
365:49 - not applying this thrust
365:51 - because you we should apply this for us
365:52 - to x position
365:55 - so self dot x is equal to itself
365:59 - plus self dot thrust
366:02 - dot x so you should apply the x amount
366:06 - of thrust to this so let's just copy
366:09 - that and do the same for y
366:10 - now if we run this
366:12 - as you can see he moves but he just kind
366:15 - of moves out of the screen first of all
366:18 - and as you can see also just constantly
366:19 - speeds
366:20 - up that is because frosting is always on
366:24 - now it'll be even worse if we were to
366:26 - remove this right here
366:28 - is that nerfs it a lot so let's go here
366:33 - and now if we were to run this
366:35 - as you can see he moves up super fast
366:38 - and even optionally in the wrong
366:40 - direction
366:42 - but yeah so this just nurse it to be
366:44 - slower and moves to the correct
366:46 - direction
366:47 - all right and you can play around with
366:48 - that
366:49 - next up we need to be able to slow down
366:51 - the player
366:52 - so else
366:53 - then we can go if
366:55 - and you could make this an else if if
366:56 - you wanted to but
366:58 - i like to just go outside in if inside
367:00 - of it self dot
367:03 - self
367:04 - dot thrust dot x if that is not equal to
367:08 - zero so the first x is still running
367:12 - and the same with the y so or because if
367:15 - the first x and y is not zero that means
367:17 - frosting is still continuing and we're
367:19 - going to go here also not zero and that
367:21 - should be y then we should decrease it
367:24 - until it becomes zero
367:26 - so self dot thrust dot x
367:30 - is equal to self dot thrust dot x
367:34 - minus
367:35 - friction
367:36 - times self dot thrust
367:39 - dot x so the higher this friction we sit
367:42 - here as you can see there the faster the
367:44 - player will stop
367:46 - and of course divided by fps and we can
367:49 - do the same for y cool now let's
367:51 - implement that
367:53 - because currently when we press the key
367:55 - we set the frost to true
367:57 - but it doesn't do anything after we set
368:00 - the key we should actually tell it
368:02 - to stop frosting at some point
368:04 - so let's go here
368:06 - so if the key instead of pressed we can
368:08 - go
368:09 - key
368:10 - release and this means once this key is
368:13 - no longer being pressed or being held in
368:16 - we want to turn this to false
368:18 - cool
368:19 - now i can run this let's see
368:22 - and as you can see
368:23 - it moves much slower
368:26 - and he actually stops so if i go like
368:28 - that it will stop at some point
368:30 - now just to give you an example if we
368:33 - were to go here to friction and up that
368:36 - to let's say 1.7 and then go
368:39 - as you can see he stops a lot faster so
368:42 - the player now just almost immediately
368:45 - stops because the friction is so high
368:47 - if you want to do the real space game
368:50 - you can make the friction something like
368:52 - zero
368:54 - now
368:55 - it will always just move forward and
368:56 - this is how asteroid actually is the
368:59 - player never actually stops
369:02 - so this friction just says how fast the
369:05 - player should stop moving 0.7 i found to
369:08 - be a fairly decent value it's not too
369:11 - fast and it's not too slow but any
369:13 - around anywhere around that will work
369:15 - cool
369:17 - the last things we need to do
369:19 - is we want to reset the color so if any
369:22 - color changes happen we want to reset it
369:24 - so love dot graphics dot set color
369:29 - and then one one one one so it's all
369:33 - visible and it's all white and then of
369:36 - course
369:37 - we want to actually just for debugging
369:39 - purposes
369:40 - show the fps so love
369:43 - dot graphics dot print love dot timer
369:48 - get
369:49 - fps
369:50 - and then 10 10 so it will print the fps
369:54 - right here around the top
369:56 - now if we run this
369:58 - you also see your fps
370:00 - comment down below what fps you are
370:02 - getting and yeah that is that we added
370:05 - the player and the player can now move
370:08 - so we have this
370:10 - oh gosh my bad that's a bug we might
370:12 - want to fix
370:14 - like there we go
370:15 - you see the player moves
370:18 - and the player stops at some point as
370:20 - well
370:21 - we should also at some point just
370:22 - implement something here so the player
370:23 - can't go off the screen
370:25 - but yeah
370:26 - and that's that
370:33 - thus we are now
370:35 - going to be working on
370:37 - this right here
370:39 - a little thruster that animates
370:41 - and moves up and down basically showing
370:45 - you that you are basically frosting
370:47 - yourself through space
370:49 - so we'll be implementing that today
370:51 - at least it's not as much math or
370:54 - massive blocks of code as in a previous
370:56 - tutorial so no need to worry
370:59 - first of all we can close this main.lua
371:03 - we'll be focusing mainly on the player
371:06 - cool
371:08 - now i would like to add two more
371:10 - attributes here to frost
371:13 - first i would like to add
371:15 - big
371:16 - flame
371:18 - and the big flame will basically
371:20 - determine
371:22 - when we change our flame size
371:25 - we'll make that false by default
371:28 - and then also flame
371:31 - and then
371:33 - 2.0
371:34 - and this will just help with the
371:36 - animation of the flame where it goes
371:38 - from big to small and from small to big
371:40 - so that would just help with that
371:43 - so first we need to actually draw
371:47 - the flame
371:48 - so let's create a function for that
371:51 - so right here we can say
371:53 - draw
371:54 - flame
371:56 - thrust
371:57 - now you'll notice
371:58 - in the code i will give you you will see
372:01 - this
372:02 - but i actually want you to instead of
372:05 - going underscores
372:06 - go camel case like this
372:09 - i am not going to do this because i am
372:12 - following a script and i can't really
372:14 - change that script now it's a little
372:16 - late
372:17 - however you can still change it
372:20 - why do we do this because this one here
372:23 - is using camel case this here is using
372:25 - camelcase this here is using camelcase
372:28 - so we want to basically stick with
372:30 - everything using camel case except for
372:33 - of course
372:34 - these constants
372:36 - now i've already scripted it so we have
372:39 - to use this but you can still change
372:42 - this to be camel case
372:44 - i just accidentally messed up
372:47 - but that will be a function
372:50 - and it will take himself
372:53 - the
372:54 - fill
372:55 - type
372:56 - so this will basically say how we're
372:58 - going to fill
372:59 - the thrust on the ship because this will
373:01 - basically automate a lot of the drawing
373:03 - process for us
373:06 - and then as well as the color
373:08 - now we can actually
373:10 - take this
373:12 - and we can copy that
373:14 - and paste it here and of course add a
373:16 - comma here
373:17 - and we'll get to editing this in a
373:19 - second
373:20 - first we want to set the color so love
373:22 - dot graphics dot set color
373:26 - to color that was passed in
373:28 - because we will change we will draw more
373:29 - than just the inside of the flame we'll
373:31 - also draw like the outside of the flame
373:33 - so we'll need to set the different
373:34 - colors and whatnot
373:37 - and in here we specify the fill type
373:39 - which can be either fill or line so when
373:42 - we use this function it will either draw
373:44 - a line or fill it for us
373:46 - now this will change a little bit
373:49 - so here we can say self.x
373:51 - minus solve the radius because this will
373:53 - have to be an upside down triangle
373:56 - solve the radius
373:58 - times
374:00 - and it's basically going to be the same
374:02 - in most regards
374:03 - so 2 divided by 3 a little bit different
374:06 - but still relatively the same
374:09 - just instead of 4 divided by 3 we're
374:10 - using 2 divided by 3 because now the
374:13 - triangle tip will be at the bottom and
374:14 - not the top
374:17 - so we say 2 divided by 3
374:20 - times
374:22 - and we can take this math.course
374:24 - self.angle
374:26 - and paste that there
374:29 - and we can say plus
374:33 - 0.5
374:36 - times
374:38 - math
374:40 - dot s-i-n-self.angle
374:44 - now you're basically throwing a
374:46 - thing on its head so don't worry too
374:48 - much
374:51 - and we can copy and paste that so now we
374:53 - have self dot y
374:56 - and instead of minus this will be
374:59 - a plus
375:00 - so plus and we can remove that plus
375:02 - there
375:04 - then it's assaulted radius and this
375:06 - should be times
375:08 - not
375:09 - that times
375:11 - 2 divided by 3 then math and instead of
375:14 - cos
375:15 - this will be s i n for a sin
375:18 - and then this will be cos
375:21 - so we're swapping those two
375:23 - and instead of plus it will be minus
375:27 - then we can
375:28 - copy these two
375:30 - as we can just copy the first
375:32 - and paste it here
375:34 - and this
375:35 - should be downwards
375:38 - then itself.x minus the
375:40 - radius times and this time we want to
375:43 - basically
375:44 - sit the flame of the thrust
375:48 - so right here
375:50 - that will help with the animation this
375:52 - will basically draw the flame a specific
375:54 - size we can remove this whole part for
375:57 - that
375:58 - and in between these we can say self
376:01 - dot thrust
376:03 - dot flame
376:05 - like that
376:06 - and why did i do that let's copy that
376:09 - and then here we can just replace
376:12 - there we go
376:14 - and this will be cos
376:18 - not sen
376:20 - we can then copy that and do the same
376:22 - for y but yet again just invert
376:25 - everything so
376:27 - minus will become plus
376:29 - and then we're good to go
376:31 - after we turn close to sin
376:33 - and then we can copy these two
376:35 - and we can paste them here
376:37 - now they will basically be the same
376:39 - thing
376:40 - but this time
376:41 - we just go from plus
376:43 - to minus and from minus to plus
376:47 - there we go that should theoretically
376:50 - draw or flame thrust but we haven't
376:52 - tested yet and that's quite a lot of
376:54 - math to draw a polygon luckily this
376:56 - should be one of the last polygons we
376:59 - draw not the last but one of the last
377:02 - now we can go to draw
377:05 - now we only want to basically show the
377:08 - thrust when we are moving forward
377:11 - so did we include yes we did include
377:13 - frosting
377:15 - so only when we move forward do we want
377:17 - to
377:18 - show the frosting so to do that we can
377:21 - go
377:22 - if
377:23 - self dot frosting
377:26 - then
377:28 - and then here we can draw everything we
377:29 - need
377:30 - for the flame of course
377:33 - now we need to check
377:35 - is it a big flame or is it a small flame
377:39 - because we can have two different flames
377:41 - a big one or a small one
377:43 - so we can go
377:45 - if not self dot thrust
377:49 - dot big flame
377:51 - so we're checking if it's not the big
377:52 - flame so if it's the small flame
377:55 - then we say self dot thrust
377:58 - dot
377:59 - flame
378:00 - and you can find all of these
378:03 - right there
378:04 - and we can make that equal to
378:06 - itself
378:08 - minus one
378:10 - divided by
378:13 - love
378:14 - dot timer dot get fps to get fps is just
378:19 - to basically
378:20 - give us a bit of animation
378:23 - so in this case it will be negative 1
378:26 - divided by
378:28 - 60.
378:30 - and this will just allow us to resize it
378:32 - for the animation
378:35 - and remember this draw will basically
378:36 - also run
378:38 - once every frame
378:39 - so you just have to remember that as
378:41 - well that's how we can get this
378:42 - animation rolling
378:45 - and let's leave that for there for now
378:47 - and just say self
378:50 - dot or not
378:51 - not dot that killing
378:54 - draw
378:54 - flame thrust
378:56 - first we want to say fill because we
378:58 - want to fill it
379:00 - and next we can draw the flame color
379:04 - in this scenario you can even make the
379:06 - flame color change depending on its size
379:08 - that's actually a cool feature you can
379:10 - add in the future but for right now i'm
379:12 - just going to give it a static size or a
379:14 - static color
379:16 - so 2 5 5
379:18 - divided by 2 5 5
379:20 - then
379:20 - 1 02
379:22 - divided by 2 5 5
379:24 - and then 25
379:27 - divided by 255 and this will give us
379:31 - almost red color
379:33 - now if we save this
379:34 - i wonder if we'll be able to run it
379:37 - attempt to index field thrust a nil
379:40 - value
379:41 - so let's quickly just
379:43 - comment this out before we continue
379:46 - and as you can see we have a flame it's
379:48 - not really animating
379:51 - but we do have a flame and that's what
379:53 - basically what we are drawing
379:55 - and it only appears when we're moving
379:58 - forward so when we're frosting
380:01 - so that right there if frosting
380:05 - cool now let's draw
380:07 - the outer line of the flame before we
380:10 - continue to self
380:11 - draw
380:13 - flame thrust and instead of fill this
380:15 - top we will say line
380:17 - and now you'll notice why i did it like
380:19 - this
380:20 - and not just put it here because we're
380:22 - going to use it two times so why have
380:25 - that code twice when we can have it once
380:28 - and then we can set the color and this
380:30 - time just to give it some variety but
380:32 - usually you should stick with one type
380:34 - so if you're using rgb like that then
380:37 - you should keep it like that but this is
380:38 - just to show you you can have multiple
380:41 - so one
380:43 - zero point one six and zero
380:46 - now if we were to run this
380:49 - you'll notice it has a little bit of an
380:51 - outline
380:52 - not very noticeable but it does give it
380:55 - a nicer feel
380:59 - cool
381:01 - now we can start resizing it and making
381:03 - it feel pretty cool
381:06 - and
381:06 - here is basically where our problems
381:09 - began
381:10 - there should be thrust
381:12 - like that so i kind of messed up the
381:14 - spelling there
381:15 - now if we were to just run this
381:18 - you'll notice the flame just kind of
381:20 - goes weird
381:22 - because this resizes the flame that's
381:24 - actually kind of cool
381:26 - that's like a sword i like that
381:30 - anyhow so
381:33 - this basically resizes it to be come
381:36 - smaller
381:38 - because if we're saying big flame we
381:40 - want it to become the bigger flame
381:43 - now to make that happen we can go here
381:45 - and say
381:47 - if self dot thrust dot flame is less
381:51 - than 1.5 so if the size has gone to
381:54 - smaller than 1.5
381:57 - then self.thrust
381:59 - dot big flame because we want to make it
382:02 - start giving the big flame why do i
382:04 - constantly did i misspell this somewhere
382:06 - no
382:08 - frost there we go
382:10 - and then
382:11 - big flame
382:13 - equal false so basically once we reach a
382:16 - certain size we want to start growing
382:18 - the flame so we're making big big flame
382:20 - equal to false
382:22 - i mean true not false
382:25 - because we want to start changing the
382:27 - big flame or to the big thing so it can
382:30 - start becoming bigger so now if we start
382:32 - flying
382:34 - you'll notice at some point it stops
382:35 - shrinking because we're not calling that
382:38 - anymore to make it continue shrinking
382:42 - because of this right here because we
382:44 - only run this if this right here is
382:46 - false in this scenario it's true and by
382:49 - default it's false
382:51 - now we need to do the opposite
382:54 - to get this to grow again
382:57 - so we can say
382:59 - else
383:02 - and there shouldn't be no colon this
383:03 - isn't python
383:05 - and now inside of this else we can copy
383:07 - this
383:08 - just paste it there
383:10 - and now instead
383:12 - of going minus 1 to decrease it we
383:15 - should plus 1 to increase it and
383:18 - remember we're dividing it by 60 so it
383:20 - stays small because
383:23 - 1 divided by 60 is pretty small if we go
383:25 - here
383:27 - and 1 divided by 60
383:31 - there you go so it will basically
383:33 - increase with this amount
383:36 - of course you could spit a specific
383:37 - value in here but this will also make it
383:40 - go
383:41 - shrink depending on the fps
383:43 - not the best way to do this i would
383:45 - recommend instead using dt
383:48 - but we can maybe try that later
383:52 - and in here instead of 1.5 it should be
383:54 - 2.5
383:56 - and then false
383:57 - so once it's size reaches 2.5 and it
384:01 - should be more not less than
384:03 - then we should turn this to false and it
384:05 - should start doing this one again until
384:08 - the flame is a specific size the small
384:10 - size then we change back to this one
384:14 - and we're doing that toggling with this
384:16 - right here
384:17 - setting to true or false
384:19 - and in here we're checking if it's true
384:21 - or false and
384:22 - executing depending on the size or
384:24 - depending on if it's true or false
384:27 - now if i were to run this
384:29 - you can see it now grows and shrinks
384:36 - now you can make it grow and shrink less
384:38 - it's up to you how much you wanted to
384:40 - grow and shrink
384:42 - to me i think that's a nice amount to
384:44 - ground shrink but you know everyone's
384:46 - eye will be different and feel different
384:48 - about it
384:50 - now one thing i also want to do because
384:52 - that bothers me quite a lot
384:54 - when we move this ship
384:57 - like this and it goes off screen
385:00 - i can't get it back
385:01 - unfortunately it is now gone forever i
385:03 - don't know how to turn that ship around
385:05 - and get it back the right way so
385:08 - what we should do is we should implement
385:11 - something to fix that
385:14 - now to do that let's go all the way down
385:17 - to right underneath this
385:19 - and we can say
385:21 - if
385:23 - self dot x
385:25 - plus self
385:26 - dot radius
385:29 - is less than zero
385:32 - so self.x plus the radius
385:35 - so let's actually open up my drawing app
385:37 - here because this i can explain pretty
385:39 - simple math
385:40 - so here's
385:41 - self.x
385:43 - right here in the center of the circle
385:47 - now the radius
385:50 - would be from this part to this
385:54 - so let's actually draw a bitter circle
385:56 - so here we go and then there now the
385:59 - radius will be from here to here
386:02 - and you might be wondering why i'm
386:04 - drawing a circle
386:06 - the reason for that is
386:07 - as you can see the collision detection
386:10 - it's a circle this also allows us
386:14 - to get
386:15 - this right here
386:17 - now if we say plus it's going to add
386:20 - these and give us this position right
386:21 - here so let me actually mark another red
386:23 - this position right here
386:26 - now when this position
386:29 - goes off screen
386:31 - so if this point right there
386:34 - goes to behind this here so off the
386:38 - screen
386:39 - where we can't see this at all anymore
386:42 - we want to make the ship
386:44 - come out from this side so now it's
386:45 - going to come back here so the ship will
386:47 - start flying here
386:49 - imagine this is the ship
386:53 - because the ship's radius
386:56 - no longer
386:57 - on the x-axis can be seen so we can just
387:00 - as well bring the ship in
387:02 - if you want to make it more complex and
387:04 - you think you have the guts to do that
387:06 - you can make the ship start getting
387:08 - drawn
387:09 - once it has reached halfway or even make
387:12 - the ship gets get drawn immediately once
387:14 - it reaches in here but that's a map i do
387:17 - not want to bring into this video
387:19 - anyhow
387:21 - so let's do that
387:23 - so i can say
387:24 - if already wait where is it f7 so self.x
387:28 - and we now have to change it because it
387:30 - went away here so we now have to make it
387:32 - come back here
387:34 - so that will be equal
387:37 - to
387:37 - love
387:39 - dot graphics
387:41 - dot get with
387:44 - and we say this specifically
387:47 - because remember the window plus its
387:50 - width
387:51 - is this part of the window so it's going
387:52 - to be the end of the window
387:55 - and then
387:56 - we add plus
387:58 - self dot radius
388:00 - this just makes it look more natural
388:03 - once we get here
388:05 - because they will come in more naturally
388:07 - instead of just poop appearing
388:09 - but of course you can make this more
388:10 - complex and make it work cooler
388:13 - so let's see if that works
388:16 - oh gosh that's a weird bug
388:19 - anyhow here we go
388:21 - ready
388:24 - oof
388:25 - gate with cannot call it
388:27 - and that should be a dot my glasses
388:30 - obscure my vision my bad
388:33 - now if we try it
388:35 - let's see
388:37 - and there we go it looked normal
388:39 - the reason it looked normal was because
388:41 - we made it only start
388:44 - appearing there once we've reached
388:46 - with the radius so it will add a radius
388:48 - to it and then it will appear so look
388:50 - more natural but of course if you were
388:52 - to remove this
388:54 - then it wouldn't look as natural it
388:56 - would just kind of plop into view so if
388:58 - we go here pop it looks natural but it
389:02 - still pops into view so it's not like
389:03 - it's animated or anything it's just
389:06 - pop
389:07 - so it's not the same
389:09 - anyhow so there's self.radius
389:12 - now we need to make it do the same for
389:14 - all of the sides so we did this side but
389:16 - we need to do this side as well
389:19 - so we can just say
389:21 - else if
389:24 - and we can specify self
389:27 - dot x
389:29 - minus
389:30 - self dot radius
389:32 - we're minusing this time
389:35 - because
389:37 - here we have our ship and here's the
389:39 - port
389:40 - now we're minusing the x so it's going
389:43 - to go here
389:44 - so
389:45 - this is where we're checking now
389:48 - and now we're going to check once it
389:50 - goes out of the screen here
389:52 - if this part is no longer in the screen
389:54 - that we can see so in the window it's
389:57 - going to start appearing here and the
389:58 - ship will start flying here again
390:01 - so it's the same thing but this time we
390:03 - check for this side instead of this side
390:06 - and we check for this side specifically
390:08 - where it comes in here instead of the
390:10 - other way around
390:11 - with this map i highly recommend playing
390:14 - with it because believe me it can
390:16 - boost your understanding of a lot if you
390:18 - play with it
390:20 - and since we know this gives us the end
390:22 - of the window we can just go if it's
390:25 - more than this
390:29 - and now we can just copy this self.x
390:32 - and actually we don't even need to we
390:34 - can just say self.x
390:38 - is equal
390:40 - to
390:41 - negative
390:43 - self dot radius because here we added
390:46 - the radius
390:47 - but now it should be zero
390:50 - minus the radius so you could say
390:53 - zero minus outer radius but that
390:55 - wouldn't make a lot of sense since by
390:57 - default negative radius would be so if
391:00 - you say zero minus 30 that will give you
391:02 - minus 30. but if you just said -30 it
391:05 - will still give you -30.
391:07 - anyhow so now we should be able to go
391:10 - with both screen so if i go here or both
391:12 - sides
391:13 - there we go there we go this side
391:16 - there we go
391:17 - so that's pretty neat
391:20 - we can do the same for y by just copying
391:23 - and pasting
391:24 - and then transforming all of this to y
391:27 - instead of x
391:30 - we can still add the radius because now
391:31 - the radius will add it downwards and
391:33 - upwards instead of left and right
391:36 - and instead of get with we now have to
391:38 - say
391:39 - get
391:40 - height
391:41 - and this will basically do everything
391:43 - for us now we go here
391:46 - bloop
391:47 - now i can turn it around
391:49 - bloop now we can't go off the screen
391:51 - which is nice
391:52 - because we don't want to go off the
391:54 - screen we want to keep coming back
392:03 - now in this tutorial we will be adding
392:05 - the game state
392:08 - it's nothing you can really see
392:11 - so i can't really show you an example of
392:13 - it in game
392:14 - however this will make our life in the
392:16 - future a lot easier because now we have
392:19 - something to manage the state of the
392:21 - game instead of us having to do it
392:23 - manually
392:25 - so let's open up this main.lua
392:30 - so we have it open
392:32 - and let's actually just create the games
392:34 - state
392:36 - so let's create a folder called states
392:40 - and inside of that
392:42 - a file called game.lua
392:46 - game.lua will contain our game state
392:50 - currently it will not really do anything
392:53 - but it will in the future do a lot
392:57 - so we can say
392:59 - function
393:01 - game
393:03 - and then we can just return
393:05 - game
393:06 - then it's out of here we can just return
393:08 - we have nothing else we need to really
393:10 - do
393:12 - and we can just return a few things
393:14 - first i want to return all of the states
393:17 - we have in the game
393:18 - this means we will have a menu state
393:20 - which will code later a paused state
393:22 - which will code later a running state
393:25 - and an ended state
393:27 - and we'll code in state later as well
393:29 - where we have the running state
393:31 - so we need to define those states
393:34 - so state
393:37 - is equal to
393:39 - and then
393:40 - menu can be false
393:44 - paused can be false
393:48 - running
393:49 - for now can be true so it's going to be
393:51 - the default state and then ended
393:54 - which will then be false
393:59 - so these are our fourth stage you can
394:01 - add more states later on as you please
394:04 - thanks to this snippet of code here it's
394:07 - not too difficult
394:09 - now what might become difficult is
394:10 - switching between states such as saying
394:13 - okay we don't want the menu state
394:15 - anymore we want this state we want to
394:17 - switch to paused or to running state and
394:20 - later on switching that state to the
394:22 - menu state all of these things they can
394:24 - be kind of difficult to implement
394:27 - so we are going to take the easy way out
394:30 - and implement something that does all of
394:32 - that
394:33 - for us
394:35 - so
394:36 - change
394:37 - game state
394:40 - is equal to a function
394:42 - and in the state we want to change to so
394:45 - state
394:47 - we can then go
394:49 - self.state.menu
394:52 - is equal to state and if that is equal
394:55 - to
394:56 - menu
394:58 - so if the text menu is passed in then
395:01 - we're switching to the menu state
395:04 - and we can do this for all of the states
395:06 - we have
395:07 - for example polls running and ended so
395:10 - here one two largest
395:13 - one two three
395:16 - and here one two three
395:20 - there's probably a better way than to
395:22 - implement it with a
395:24 - string
395:25 - but a string for our basic game is
395:28 - perfectly fine
395:30 - as long as you don't misspell something
395:32 - you'll be good to go but you could give
395:34 - it a default state if none of these are
395:36 - true
395:37 - but we're not going to worry about that
395:40 - now that we have this game stake let's
395:42 - add it to the game itself
395:46 - so right here underneath player we can
395:48 - add game
395:49 - is equal to game
395:52 - and of course we need to import game
395:54 - so
395:55 - local
395:56 - game
395:58 - is equal to require
396:00 - and as you may remember it's inside the
396:03 - states folder
396:05 - so states
396:07 - and we're going to go dot game we can go
396:08 - slash game
396:11 - this should import it into this project
396:16 - now we can go down
396:18 - and here with the update we can now
396:21 - implement some of this state checking
396:24 - so if
396:26 - game dot
396:28 - state
396:30 - dot
396:31 - running
396:33 - then only we want to move the player
396:36 - so you can move that in there and we can
396:39 - move
396:40 - this to the top
396:45 - so now we have that so only if it's in
396:47 - the running state can we move the player
396:50 - so if it's in the menu state or if it's
396:52 - in the paused state or the ended state
396:54 - we cannot move the player
396:56 - then the only other time
396:58 - we might want to have a different state
397:01 - for right now can be in the key pressed
397:05 - so we can copy this if statement
397:10 - and then
397:11 - if
397:12 - the game state is running
397:15 - then do this
397:18 - and then
397:19 - if
397:21 - the key
397:22 - is equal to
397:25 - escape
397:28 - then we want to go game and then change
397:30 - game state
397:32 - to paused
397:35 - and this will make it go to the paused
397:37 - game state
397:39 - now we need to be able to change it back
397:42 - so let's go here and say
397:43 - elsif
397:46 - game.state.paused
397:51 - and then we can just copy this so we get
397:53 - the same key input and this can change
397:56 - it back to running
397:58 - so one of the things i left for homework
398:00 - in a previous video was to implement a
398:02 - paused state for the game
398:05 - and i told you it would be really easy
398:07 - to do so
398:09 - and right now
398:10 - we have implemented a paused state for
398:12 - this game
398:14 - so if you were part of the previous
398:15 - tutorial
398:16 - then now you should understand how to do
398:18 - that if you didn't do your homework
398:21 - so yeah this is how you would implement
398:23 - a post state it's incredibly simple
398:26 - now if we were to run this we can go
398:28 - like this and if you say pause by
398:31 - pressing escape then the player doesn't
398:33 - do anything
398:34 - and once we unescape the player will
398:36 - continue
398:39 - and then like this and later we can add
398:41 - like some paused text
398:44 - but
398:45 - for right now it's fine
398:52 - in this tutorial we will be adding text
398:56 - to the game now that we have the state
398:58 - implemented
399:00 - so what we have currently is something
399:03 - like this
399:04 - so where we go like this and we can also
399:06 - pause
399:08 - like that
399:10 - pausing isn't perfect but you get the
399:12 - idea
399:13 - now when we pause i want the user to
399:16 - actually be able to see that they paused
399:18 - because let's say accidentally press the
399:20 - escape button and suddenly their game
399:23 - stops working
399:25 - they will think it's a bug but in fact
399:27 - the game is being paused
399:30 - so
399:31 - we're going to implement that and here's
399:33 - an example
399:35 - let me just bring this over here
399:37 - so let's go like this and then pause
399:40 - as you can see there's no paused text on
399:43 - the screen
399:45 - and now we go like this
399:48 - it's nice
399:51 - cool
399:52 - so that's an example of what we'll be
399:54 - doing
399:55 - now let's get started
399:57 - so we already have a states folder
400:00 - let's create a new folder
400:03 - for components
400:05 - and this folder will be used
400:07 - specifically
400:09 - for components that we might want to use
400:11 - in the game
400:12 - we'll also create another folder and
400:14 - this one will be for objects
400:18 - now the state contains the states is the
400:21 - menu game those types of states the
400:24 - objects will contain objects that we can
400:26 - touch so the player is an object
400:30 - and then the components the components
400:33 - is basically like the text it's not
400:35 - necessarily an object that we can crash
400:37 - into with the player or something like
400:40 - that
400:41 - so yeah
400:42 - now with the player we can move the
400:43 - player to objects
400:46 - there we go move
400:48 - then here we want to say
400:52 - objects
400:53 - player
400:54 - since now the player is in the objects
400:56 - folder
400:58 - we don't actually use the player here so
400:59 - we don't have to worry about it there if
401:01 - we run the game
401:03 - everything should still work fine
401:05 - cool
401:07 - then the components we can create a new
401:09 - file
401:10 - called text
401:12 - dot lua because it's text
401:15 - we include this main.lua
401:17 - and now we can start working on the text
401:20 - so first let's local
401:22 - love is equal to require
401:25 - and just
401:26 - love
401:27 - now you can create a function
401:30 - call it
401:30 - text it will take in some data and then
401:34 - it will return something
401:36 - of course a table
401:38 - and then at the end we can just say
401:39 - return
401:40 - text
401:42 - there we go
401:44 - our basic text object setup
401:47 - now we need to think of properties that
401:49 - text may have
401:52 - so
401:53 - let's actually split it up into a few
401:55 - things here
401:57 - let's go
401:58 - parameters
402:01 - now first i think all text will have
402:03 - some text
402:05 - which would be of like a string or a
402:07 - text type
402:08 - that will be displayed
402:10 - and this text will be the text
402:14 - to be displayed
402:16 - and it's required
402:18 - now you might ask why am i doing this
402:21 - like what does this benefit us with
402:23 - if i were to
402:24 - hover over my text you'll notice now we
402:27 - have parameters
402:29 - text string
402:31 - text to this takes to be displayed
402:33 - required
402:34 - this is called documenting your code so
402:36 - if someone else in the future comes back
402:38 - to our code here
402:40 - they will be able to just hover over a
402:42 - function wherever we use it and see what
402:44 - it needs
402:46 - so that's what i'm doing here if this
402:48 - wasn't here
402:49 - then as you can see we don't get any
402:51 - description so that's what i'm doing
402:53 - here
402:54 - now this is quite a lot of we're going
402:56 - to have to type so since i'm too lazy
402:58 - i'm just going to paste this from the
403:00 - already existing script code
403:03 - there we go
403:04 - we need an x for the x position of the
403:07 - text so from the side of the screen
403:10 - a y for the y position of the text from
403:12 - the top of the screen
403:14 - all of these are as far required
403:17 - we also didn't want from here everything
403:19 - is optional but we also want the font
403:22 - size
403:24 - the default will be p and i'll set up
403:26 - this in a second where we'll actually
403:27 - have some default versions if you know
403:30 - html then this will help you greatly
403:32 - and here are some of the options we can
403:34 - use
403:35 - we didn't have a fade in which will
403:37 - allow us to fade in the text so let's
403:39 - say if it's a game over we want the text
403:42 - to fade in as well as the text to fade
403:44 - out this is just the boolean so true or
403:46 - false if it should fade in and or fade
403:48 - out
403:50 - wrap with
403:52 - this is when the text should be broken
403:55 - so this should be when
403:58 - should the text break
403:59 - the default will be the window width
404:02 - but you can change this and you'll see
404:04 - later where we can change this
404:06 - then there's the align
404:08 - so where will the text be aligned on the
404:10 - screen it's like center left right
404:13 - all of that
404:14 - and in the opacity
404:16 - basically this will allow us to
404:18 - set a default opacity for the text so
404:21 - the text should maybe be a little bit
404:23 - see-through or something along those
404:25 - lines
404:26 - we can now implement that in here
404:29 - so we want the text
404:31 - the x the y the font size
404:34 - the fade in
404:37 - fade out
404:39 - wrap with
404:41 - a line
404:43 - and opacity quite a lot you don't need
404:46 - all of this
404:47 - but i feel like giving as much choice as
404:50 - possible is always a good idea
404:53 - now here above return
404:56 - we can set some of the default values so
404:58 - you can also do this in return if you
405:00 - want to but most of this will be useful
405:02 - outside of it
405:03 - so font size is equal to the font size
405:06 - that has been passed in
405:08 - or it will default to p
405:11 - for a paragraph so paragraph size
405:14 - we can then just create a space and copy
405:18 - five times we didn't want fade in fade
405:21 - out so
405:23 - fade in fade out
405:24 - wrap with
405:26 - a line and opacity so all of these
405:30 - so everyone that's optional
405:32 - then we want to replace all of these
405:34 - with those values
405:36 - and of course these as well
405:39 - and in the fade in would by default be
405:41 - false
405:44 - this will be false
405:47 - this wrap width will be
405:49 - love
405:50 - dot graphics
405:52 - dot get with
405:55 - the line would be defaulted to left
405:59 - so right here on the screen you can make
406:02 - it centers it's in the center or you can
406:04 - make it right so it's on the right
406:06 - and then the opacity here will default
406:08 - to one
406:10 - now we also want to set some constants
406:14 - first we can start with the text fade
406:16 - duration because we won't use the fade
406:17 - just yet but doing all of the setup
406:20 - beforehand will save us a lot of time in
406:22 - the future
406:24 - but you don't have to do it right now
406:25 - but i do recommend you still do it right
406:27 - now if possible
406:29 - local
406:30 - text
406:31 - and this is going to be a constant so it
406:32 - will be all caps
406:34 - fade
406:36 - there for text fade duration we'll make
406:38 - that to 5.
406:40 - now we have the problem here of this
406:42 - right here how will we set that
406:45 - now we can do that by creating something
406:47 - that can hold all of that so
406:50 - local fonts
406:53 - and here we can specify the fonts we
406:55 - want for example h1 will be the size of
406:58 - love
407:00 - dot graphics dot new font
407:03 - and we can make it something like 60
407:07 - for like 60 pixels
407:10 - we need to copy that
407:11 - two three four five six seven times
407:16 - then here we can just go h1 to h2 three
407:19 - four five six and make this p you can
407:23 - add more you can also use a different
407:24 - structure i just think that to me at
407:27 - least this makes sense since i use html
407:31 - and in html h1 is the biggest text you
407:34 - can have unless you're modified with css
407:36 - but it's the biggest text you can have
407:38 - and then p is like
407:41 - regular small text just regular text
407:44 - p is also about
407:47 - 16 pixels
407:48 - and in h6 is usually smaller than p
407:52 - h5 h4
407:55 - h3
407:57 - h2 and an h1
408:00 - there we go so there's all of our text
408:02 - sizes
408:04 - we won't use all of them but they exist
408:06 - if we need the variety from them you can
408:08 - also give them different names if that's
408:10 - what you're into
408:11 - we also want to set if fade in
408:15 - so if we try to fade in
408:17 - then you want to give the default
408:19 - opacity
408:20 - actually a lower value
408:22 - because if we want to fade in then the
408:25 - default opacity should be pretty low
408:28 - says we wanted to fit in if the default
408:31 - opacity is one it's not going to fade in
408:32 - it's going to pop in
408:34 - so opacity
408:36 - then gets overwritten to 0.1 so no
408:40 - matter what they put in here if we say
408:42 - it's fade in then we're going to force
408:44 - it to fade in by making the opacity
408:47 - 0.1
408:50 - cool
408:51 - we have now done all of this setup so
408:53 - let's use what we have here
408:56 - first we can go and say text is equal to
408:59 - the text that was passed in
409:02 - x
409:03 - but not that love
409:05 - x is equal to x
409:07 - y is equal to the y
409:10 - and opacity is equal to the opacity
409:15 - now
409:16 - whilst i could
409:18 - put all of this inside of here as well
409:22 - currently i don't think i'm going to use
409:24 - any of this
409:26 - outside
409:27 - of this text so i'm going to keep it
409:29 - here since i'm not using it outside of
409:31 - this text but if i do i can move this
409:35 - for example the opacity that i moved
409:36 - here i can move it to down here because
409:39 - what's in return is things we can use
409:41 - outside of this right here so we can't
409:44 - use this or this outside of this text
409:47 - function
409:48 - however we can use all of this outside
409:50 - of the text function
409:52 - now we can also set our default colors
409:54 - for the text
409:56 - so colors
409:58 - is equal to
409:59 - r which will be one meaning basically
410:02 - full red
410:04 - g will which will be one
410:06 - and then b which will be one so red
410:08 - green blue
410:10 - and since they're all one this also
410:12 - means that by default they are white
410:15 - so the text will be white on the
410:17 - very dark black background
410:20 - now we want to also be able to set these
410:22 - colors at any point
410:24 - and you could move these colors here if
410:26 - you don't think you use them outside of
410:28 - this text function
410:30 - but here we could go set
410:33 - color
410:34 - equal to
410:35 - and we can create a function this
410:37 - function will take itself
410:39 - red
410:40 - scroll down
410:41 - green
410:43 - and blue
410:45 - then here we can say self dot colors
410:48 - dot r is equal to red
410:50 - self dot colors
410:53 - dot
410:53 - green
410:54 - is equal to green
410:57 - self dot colors dot blue
411:01 - is equal to well is equal to blue
411:05 - so now if we use the set color it will
411:08 - set the color to whatever we pass in so
411:10 - we don't have to type this out every
411:12 - time we want to set the color
411:14 - and now for the last function that we'll
411:16 - implement and then we'll wait a while
411:18 - before we try anything else
411:20 - is the raw function because we still
411:22 - need to draw the text to screen that's a
411:24 - function
411:26 - function takes itself
411:28 - and now we basically need to say what
411:31 - text we want
411:33 - i'm going to call this tbl
411:36 - text because the text will later be
411:37 - stored inside of a table
411:39 - and also index
411:41 - and this table is what we're also going
411:43 - to pass in here with the index of what
411:45 - we want to use
411:47 - you'll understand this in a second once
411:48 - we use it
411:50 - we can then go if
411:53 - self.opacity
411:55 - is more than zero they want to do a
411:58 - bunch of things
412:00 - else
412:02 - if the opacity is not more than zero
412:05 - then we want to say table dot remove
412:09 - and we want to remove from tbr text
412:12 - the item at that index
412:15 - that should be t
412:18 - basically this is for our fading stuff
412:20 - so once it fades out we want to remove
412:22 - it from the table because if it's still
412:24 - in the table let's say after two hours
412:26 - of playing the game that means
412:28 - everything that had was text is still in
412:31 - the table two hours later and every
412:34 - table requires ram and the more ram you
412:36 - use the worse the game will perform so
412:38 - if the user plays the game for let's say
412:41 - 10 hours then by hour 10 their game will
412:44 - probably reach like
412:46 - 5 fps or something
412:48 - but yeah and we can just return
412:50 - false
412:52 - because that means there's nothing left
412:53 - to draw
412:55 - otherwise we can return true because
412:57 - there's still stuff left to draw
412:59 - okay
413:00 - now here we can start with the drawing
413:02 - things
413:03 - we can leave the fading stuff for later
413:06 - so let's first go love dot graphics dot
413:10 - set
413:11 - color
413:12 - and here we can say self
413:15 - dot colors
413:17 - dot r
413:18 - as will give us red
413:20 - self dot colors dot
413:23 - green and in self dot colors dot
413:27 - blue
413:29 - and of course self dot opacity
413:33 - and it will set the color of the text we
413:35 - currently want to draw
413:36 - then you want to set the font of the
413:38 - text you want to draw so love dot
413:41 - graphics.set font
413:43 - and then we can pass in fonts
413:46 - and then add the font size so the font
413:50 - size we can find right here which will
413:53 - be something like p or h1
413:56 - and we pass that in here to get the font
413:59 - size we'll play a little bit with this
414:01 - to kind of get the idea of what it does
414:04 - then we want to say love dot graphics
414:07 - dot
414:08 - print if
414:10 - specifically printf because of how much
414:13 - it allows us to modify
414:15 - how much we can like just do things our
414:18 - way
414:19 - like customization
414:21 - so first we want to specify the text of
414:24 - self.text and then self dot x for the x
414:28 - position
414:29 - self dot y
414:31 - for the y position
414:33 - the wrap with
414:36 - and then the align
414:37 - so as i said you don't have to make a
414:39 - lot of these things
414:41 - things you need to pass in
414:43 - that's why they're optional
414:45 - you could just hard code him in here but
414:48 - i wanted to make it
414:49 - more robust
414:51 - i think that's the word
414:53 - then also after we have done all of this
414:55 - we want to change the font size back to
414:56 - p so we have a standard font size
414:59 - everywhere
415:01 - now that we have this
415:03 - i think we can try it out
415:05 - and then once we have tried it out we
415:06 - can implement the fade in and fade out
415:09 - we won't use it yet but we'll implement
415:11 - it
415:12 - so
415:13 - let's go here instead of game
415:16 - and let's create a draw function inside
415:18 - of the game
415:20 - draw
415:21 - is equal to a function
415:23 - self
415:24 - and also faded
415:26 - i'll explain that in a second
415:28 - so first we can say if
415:30 - faded
415:32 - then
415:33 - text
415:35 - and this text is what we need to import
415:37 - so we can actually just go here to main
415:40 - copy this import
415:43 - go here
415:44 - paste it
415:45 - but now we can say text
415:47 - and text comes from components
415:52 - slash text
415:54 - and we should just say dot dot and then
415:56 - a slash to specify go back one directory
415:59 - so one folder since we're here we want
416:02 - to go back one folder and then jump into
416:04 - the components folder
416:05 - that's what this means those two dots
416:07 - means go back one folder
416:09 - also we can just say local love is equal
416:12 - to require
416:13 - love so yet again it's not required to
416:16 - specify this it's just optional but
416:19 - unlike specifying it anyways
416:21 - and then down here we can say text
416:24 - and we can pass in a bunch of things if
416:26 - we hover over text
416:29 - then unfortunately we don't get any of
416:31 - the documentation we wrote this probably
416:33 - still needs to import all of that but
416:35 - for now it's fine
416:37 - so the text we want to display is going
416:39 - to be
416:40 - paused
416:42 - then we can say zero and that will be
416:44 - for the x and then love dot graphics
416:49 - scroll down a bit
416:51 - dot
416:51 - get height
416:53 - and we can just say times 0.4 and this
416:56 - will kind of position the height
416:59 - in the center of the screen we don't say
417:01 - 0.5 because you should remember that the
417:04 - very top of the of the text
417:07 - is actually where the text gets drawn so
417:09 - if we put it at 0.5 it's actually going
417:12 - to be drawn underneath the halfway mark
417:14 - instead of in the middle of it
417:16 - here we can specify the size for example
417:20 - h1
417:21 - we can specify false and false for the
417:24 - fading and then love dot graphics dot
417:28 - get
417:29 - with
417:30 - and this is for the word wrapping
417:35 - and then where to align it to and in
417:37 - this scenario center
417:40 - if we run this or if we not run this
417:44 - everything can go and say draw
417:47 - now if we run it we won't get anything
417:50 - because we need to actually now use this
417:52 - draw inside of main
417:55 - so down here if we scroll
417:57 - we have a player.draw
417:59 - but now we can actually use our states
418:01 - to our advantage so we can say if
418:04 - game.state
418:06 - dot running
418:09 - or if the game
418:10 - dot state dot pause so if it's one of
418:13 - these two states
418:15 - we want to draw the player
418:17 - as well as game
418:20 - draw
418:22 - game.state.paused
418:27 - so we are passing in this
418:28 - game.state.paused
418:30 - the reason for it is because
418:32 - game.state.paused
418:33 - is a true or false value
418:36 - so currently if we go here
418:39 - then we are trying to get a true or
418:41 - false value so if it's true
418:43 - then draw this
418:45 - if it's false don't draw this we'll
418:47 - expand on this more later but for now
418:49 - this is fine
418:51 - all right so now we're saying draw and
418:53 - it will basically execute this right
418:55 - here
418:56 - and if the game state is not paused it
418:58 - will not draw anything inside of here
419:00 - because faded will not allow it to
419:04 - it's faded because we're going to change
419:05 - it later but yeah for right now we can
419:07 - just say love dot and see if it works
419:10 - okay now let's go and pause
419:12 - and there we go we get paused
419:16 - isn't that absolutely amazing
419:19 - so that's pretty cool
419:21 - let's make the text a bit smaller
419:23 - let's go instead of h1 we say p
419:27 - if we run that
419:29 - then the text is now super small so we
419:32 - made it able to change the text size
419:34 - by literally just changing one line
419:38 - let's change that back to h1 to make it
419:40 - nice and big
419:41 - now this is more for the future
419:44 - currently it won't benefit as i lost to
419:46 - type this however in the future it will
419:50 - definitely benefit us to time to have
419:52 - this
419:54 - so let's go here underneath opacity
419:57 - and say
419:59 - if
420:01 - fade in so if we should fade in
420:03 - do something
420:06 - else if
420:08 - fade out so if we should fade out
420:12 - then because we don't want them to both
420:14 - happen at the same time so we're using
420:16 - an if else statement so if fade in then
420:19 - we first do fade in and then we can
420:21 - change fade into false
420:23 - and then do fade out because we don't
420:25 - want two different if statements you
420:27 - want one if statement that just has an
420:29 - else if so if we want to fade in it will
420:31 - fade in but it won't try and fade out at
420:33 - the same time
420:35 - then we can go self
420:37 - dot opacity is equal to self dot opacity
420:43 - minus
420:44 - and here you can say one y is a little
420:47 - big though because our opacity is a
420:49 - range of zero to one so by saying -1
420:53 - will immediately go from seeing text to
420:56 - not seeing text so we can divide that by
421:00 - text
421:01 - fade duration so this 5 right here
421:06 - so depending on how much you make this
421:08 - the text will fade slower
421:12 - and here we can also just divide it by
421:15 - love dot
421:18 - timer
421:20 - dot
421:22 - get fps
421:26 - there we go and this will nicely fade it
421:28 - for us
421:30 - so it looks nice once it fades out we're
421:32 - not going to use it in this tutorial but
421:34 - we will use it in the future
421:36 - then here in the fade in we can check
421:39 - the opacity because if the opacity
421:42 - is more than one
421:44 - that means we have faded in so we now
421:46 - want to fade out if possible
421:48 - so we can check if
421:50 - self
421:51 - dot
421:52 - opacity is less than one so only if it's
421:56 - less than one
421:57 - then increase the opacity
421:59 - else if it's not less than one that
422:01 - means it's more than one then you want
422:03 - to set fade in
422:05 - equal to false
422:07 - now that we have set fade into false
422:08 - here that means fading will be false so
422:11 - this will not be triggered so if fade
422:13 - out is true then we'll fade out the text
422:16 - then here we can say
422:18 - self dot opacity and it will actually
422:21 - just be the same thing so let's just
422:23 - copy that
422:24 - but this time instead of minus it will
422:26 - be plus
422:28 - and now we have implemented fade out and
422:30 - fade in
422:32 - cool
422:33 - now we have added the text and we can
422:35 - use this text in a lot of the parts of
422:37 - the game and hello everyone if you're
422:39 - enjoying this tutorial please leave a
422:41 - like and subscribe for future tutorials
422:44 - so currently if we pause we have a
422:46 - paused
422:48 - text
422:50 - if we unpause this no longer there if we
422:52 - move around
422:54 - we can move around but the game is still
422:56 - pretty boring because currently we can't
422:59 - do anything we didn't have any enemies
423:01 - we just fly around we can fly off screen
423:03 - but we'll just come back so that's no
423:05 - fun
423:06 - so what are we going to do
423:08 - well of course we should add the enemy
423:11 - we should create the enemy and the enemy
423:13 - should of course be the asteroids that's
423:16 - the whole reason the game exists to
423:18 - avoid the asteroids
423:21 - so let me show you an example of what we
423:23 - will be doing today
423:26 - we can move this here
423:28 - there we go we have an asteroid
423:31 - we can't really do anything with the
423:33 - asteroid yet but we have an asteroid and
423:35 - this is the idea we want to be able to
423:37 - create multiple of these guys without
423:39 - any problem you also notice the red
423:42 - around the asteroid just like with the
423:44 - player that is the hit zone so if our
423:46 - players rid around it and that asteroid
423:49 - raid touches each other then boom the
423:52 - game ends
423:54 - and we'll implement that later yet again
423:56 - as the circles are not super accurate
423:59 - but the game itself isn't going to be
424:01 - super complex either if you want to give
424:03 - yourself an extra challenge you can try
424:04 - and make that more accurate than a
424:06 - circle
424:09 - awesome
424:10 - now one thing i want to do before we get
424:12 - into actually coding the asteroid is i
424:15 - want to add a new feature to the game
424:18 - so i'm going to remove this text here
424:21 - go into player
424:23 - and i want the player to now once we
424:25 - draw the
424:26 - player i want it to take in
424:31 - faded
424:33 - like that
424:34 - and once it takes and faded i want us to
424:37 - decrease the opacity of the player
424:40 - so here we can say if
424:43 - faded
424:44 - then we want to set opacity
424:47 - equal
424:49 - to
424:49 - 0.2 you can make it lower or higher
424:52 - depending on what you want
424:54 - now because we have this faded right
424:57 - here
424:58 - we can now go to main
425:02 - and here we can just pass in if the game
425:05 - is paused if the game is paused we want
425:08 - to fade out the player
425:11 - so let's run that
425:13 - and just see that it works
425:15 - so pause
425:17 - i don't see much of it oh wait we don't
425:19 - pause pauses this button as you can see
425:21 - the player fades out so pause the player
425:24 - still there just fade it out
425:26 - we want to implement this for the entire
425:28 - game
425:30 - so where everything fades out once you
425:32 - pause except for the debugging stuff of
425:35 - course
425:37 - cool now that we have that we can also
425:39 - implement it at different places
425:42 - so let's create a new object
425:45 - this object will be called
425:48 - asteroids
425:50 - you could call it asteroid but in the
425:52 - script i made it asteroids accidentally
425:55 - so now we'll have to stick with the
425:56 - scripts but we can say dot lua
425:59 - and now we have an asteroid but you
426:00 - could call it asteroid that would be
426:02 - perfectly fine
426:04 - we can then say let me just close this
426:06 - as well
426:08 - local love is equal to require
426:11 - love
426:12 - i just love saying that i don't know why
426:15 - we're gonna say function
426:17 - and
426:18 - asteroids and we can just return
426:22 - an empty table
426:24 - and then return
426:26 - asteroids
426:28 - we have created our basic asteroid
426:30 - object
426:31 - now first we'd want to take in the
426:33 - asteroid
426:34 - x position
426:36 - the asteroid's y position
426:39 - its size
426:41 - it's level
426:43 - so depending on the level will also
426:44 - depend on some things that asteroid
426:47 - might have
426:48 - and then
426:49 - debugging
426:50 - now here we can say debugging is equal
426:54 - to debugging
426:55 - or false
426:57 - so basically it's going to be either
426:59 - debugging or not debugging
427:02 - next we want to set things such as the
427:04 - asteroids vertices
427:07 - this is basically how many
427:09 - edges
427:10 - the asteroid will have
427:13 - we'll play around with this later so i
427:14 - can actually show you an example
427:17 - so this scenario or in this case we can
427:19 - just say local
427:20 - asteroids
427:22 - and of course you can make it something
427:24 - different
427:25 - if you don't like 10 specifically you
427:27 - can make it 11 15 50
427:30 - 5 whatever you choose i'm going to make
427:33 - it 10 because i actually found that that
427:35 - looks pretty good
427:37 - then we can also set the jaggedness
427:39 - and the jaggedness is basically just
427:41 - saying how round
427:43 - the asteroid should be the more jagged
427:45 - the less round and the more epic it
427:47 - looks but also the less accurate
427:50 - our collision detection will be so make
427:52 - sure it's not too jagged unless you're
427:54 - going to upgrade that collision
427:56 - detection
427:58 - and then we can say asteroid
428:01 - jag for jaggedness i'm not going to
428:02 - spell jack
428:04 - jagged i don't know how to spell that
428:06 - but it's 0.4
428:08 - but you can make it more or less i found
428:10 - 0.4 looks pretty good
428:13 - then you can go local and then put the
428:15 - asteroid speed
428:17 - speed and that is equal to math dot
428:21 - random
428:22 - why are we saying mafta random because
428:24 - the asteroid speed itself should be
428:26 - random
428:28 - or am i incorrect
428:29 - because if all asteroids are the same
428:31 - speed the game would be less fun
428:34 - but if this asteroid on the left moves
428:36 - five times faster than the asteroid on
428:38 - the right then that would be pretty cool
428:42 - just as an example
428:43 - meaning put in 50 so it gives in a
428:46 - random
428:47 - value till 50
428:50 - and you can say plus
428:52 - and level times two
428:56 - so depending on the asteroid level
428:59 - will add to the asteroid speed so let's
429:01 - say it's 50 and the level is five so
429:04 - there's 50 plus 10.
429:06 - you could increase this level to
429:08 - something like three or four and that
429:10 - will also make the leveling system much
429:13 - more difficult but i'm going to keep it
429:15 - low for now
429:18 - cool and we'll come back to this here at
429:19 - the top i'm currently just going to go
429:21 - to return for now
429:24 - we're going to specify x is equal to x
429:26 - so the x that's being passed in
429:29 - y is equal to y
429:32 - oh no dot love oh gosh
429:35 - that was supposed to be a comma
429:37 - and then we can say the x
429:41 - velocity
429:42 - this means how fast
429:44 - the asteroid will move on the x-axis so
429:47 - from left to
429:48 - right that will be equal to math.random
429:53 - and now we can say
429:56 - times
429:57 - asteroid speed
429:59 - so that's the one we did right here
430:01 - times
430:02 - velocity
430:05 - now velocity will determine if the
430:07 - asteroid goes forward backwards up or
430:09 - down
430:10 - so an x and x axis it will go either
430:13 - forward or backwards on y axis it will
430:15 - go either up or down so let's quickly
430:19 - create that so let's go here
430:21 - let's say local
430:23 - velocity
430:26 - is equal to negative one by default
430:30 - then we can check if
430:32 - math.random
430:35 - and here we can specify
430:38 - it's less than 0.5
430:42 - because map to random will give a value
430:43 - between 0 and 1.
430:46 - then
430:49 - and we want to say velocity
430:52 - is equal
430:53 - to 1.
430:56 - so it's negative 1 but if master random
430:58 - is less than 0.5 then we're going to
431:01 - make it one
431:02 - and this will decide where this is going
431:04 - to move this way or this way
431:07 - we don't have to worry too much about
431:09 - this now we're just setting it up
431:12 - now you may have remember before we
431:13 - continue here
431:15 - that
431:16 - in my lua tutorial i did cover
431:19 - math.random and i did cover how it's not
431:22 - always
431:23 - random
431:25 - so to make sure that the player doesn't
431:27 - get the same game every time they boot
431:30 - up the game so the same asteroid is the
431:32 - same
431:34 - way the asteroids move everything we
431:36 - should make it more random before we
431:37 - continue here because i might forget
431:39 - about that
431:40 - meaning go to main
431:42 - and here we can just specify
431:45 - right before the load right before
431:47 - everything
431:48 - math dot random seed
431:52 - as we'll see the randomness and say
431:54 - os.time
431:56 - and this will make everything more
431:58 - random it will seed it to make it less
432:02 - predictable
432:04 - cool
432:05 - now you can go back to asteroids
432:08 - and you can copy this x velocity
432:12 - and you can make a y velocity as well
432:14 - for up and down
432:16 - and it can have exactly the same math
432:19 - so it may not move the same speed up and
432:22 - down as it's moving left and right which
432:24 - is what we want
432:27 - now we need to set the radius of the
432:29 - asteroid because in the end of the day
432:31 - the asteroid is pretty much just going
432:33 - to be a circle
432:34 - so we can say radius
432:37 - is equal to
432:39 - math dot seal for math dot ceiling so
432:42 - always go up
432:44 - and then asteroid size divided by two
432:48 - and this will give the asteroid's radius
432:52 - cool
432:53 - i'm going to leave all of this here for
432:55 - a second and i'll come back to it a bit
432:56 - later
432:57 - let's draw
432:59 - this asteroid because i'm not really
433:00 - sure if we're getting everything right
433:02 - here so let's go function
433:04 - self and also if it should be faded
433:06 - because if we pause the game
433:08 - then we can yet again say local
433:11 - opacity
433:13 - if that is or that is equal to one but
433:16 - if faded
433:18 - then opacity
433:21 - is equal to 0.2
433:25 - then you want to set the color to not
433:27 - white but kind of like a grayish white
433:30 - because when i think of an asteroid i
433:32 - don't think of it as a pure white blob
433:34 - just flying to me in fact i think of it
433:35 - as a bit dark actually
433:38 - so let's make it like a grayish color in
433:40 - this scenario since the background is
433:41 - pitch black we can't really make it too
433:43 - dark because then the player will see it
433:45 - so you'll notice it's not pure white as
433:48 - you can see here by these numbers
433:51 - you can tweak these numbers to kind of
433:53 - fit your need for what you want the
433:54 - asteroid color to be
433:57 - but yeah that this will determine the
433:58 - asteroid color
434:00 - now next we need to determine the
434:02 - asteroids points
434:05 - now the points basically just say where
434:08 - the asteroid is going to be when we draw
434:10 - the polygon we have a bunch of points so
434:13 - you may have remembered when we draw the
434:15 - player
434:16 - so
434:17 - local
434:19 - points
434:20 - let's go here
434:22 - is equal to
434:25 - and here we can specify a table
434:28 - and then say self
434:31 - dot x
434:33 - plus self dot radius
434:37 - which is right here
434:39 - times
434:40 - self dot off set
434:45 - now offset is just so we can get a
434:47 - little bit of an offset
434:49 - so the game or so the asteroid which is
434:52 - like a circle if you remember with the
434:54 - player it needed a little bit of an
434:55 - offset so the
434:57 - center dot can always be in the middle
435:00 - if you could remember what we did so if
435:02 - we go here and say love dot
435:04 - then you see that little circle that
435:06 - little red dot in the center of our
435:08 - player that had to be on an offset which
435:11 - was i think like -1 and -1
435:14 - because it wasn't quite in the center of
435:16 - our triangle and in this scenario we'll
435:19 - have the same problem
435:21 - so we're setting it offset
435:24 - now to generate the offset
435:27 - we can go up here
435:29 - and we can say
435:31 - local
435:32 - offset
435:33 - is equal to
435:36 - an empty table
435:38 - then we can say four
435:40 - well not in pairs four
435:43 - i
435:44 - becomes one
435:46 - two
435:48 - and
435:49 - two where
435:51 - to where specifically are we going to
435:53 - set this offset
435:55 - well that depends on the amount of
435:57 - vertices we have
436:00 - so in this scenario we have 10 vertices
436:03 - but
436:04 - we don't want all of the asteroids to
436:06 - have the same amount of jaggedness right
436:08 - we don't want that asteroid to have five
436:11 - points and then the one next to it also
436:13 - have five points we won't want to have
436:15 - two and want to have ten and once we
436:17 - have four we want it there to be variety
436:21 - so let's create
436:23 - a more interesting
436:26 - vertice but you could if you wanted to
436:28 - just put it here put this here like that
436:31 - that's perfectly fine but i wanted to be
436:33 - a bit more random
436:35 - so here we can say local
436:37 - vert for vertices
436:40 - is equal to math.floor because we also
436:42 - want to go down but you could make it go
436:44 - math.cl
436:47 - in fact that might even be better i'm
436:48 - following a script but you could make a
436:50 - method still and that would work
436:51 - perfectly fine
436:53 - math.random
436:55 - because we want to get a random
436:57 - value
436:58 - so just right here
437:00 - so you pass that in there and just say
437:02 - plus one so we don't get zero
437:04 - plus
437:05 - and we paste that android vertices in
437:07 - there again divided by two
437:09 - and this will give us a nice random
437:11 - value
437:12 - which will also determine how
437:15 - less round
437:16 - r
437:17 - asteroid is
437:19 - so how many points it has edges
437:23 - now here instead of saying this specific
437:25 - just always 10 value
437:27 - we could specify
437:29 - vert
437:30 - plus one
437:32 - and now we can insert an offset and this
437:35 - will always generate offset at the
437:37 - correct location
437:39 - there is a table dot insert
437:42 - and then the list and value
437:45 - in this scenario we want to do offset
437:47 - and
437:48 - math.random and i'll explain this in a
437:50 - second
437:52 - times
437:53 - asteroid and let me just scroll down so
437:55 - i can autocomplete that
437:58 - times two plus one minus asteroid jack
438:02 - the thing is i can't quite explain this
438:05 - math here because you can't visualize it
438:08 - that really sucks
438:09 - but once we see this asteroid we'll be
438:12 - able to play around with this i can
438:13 - explain what's happening
438:16 - but take note before we continue that
438:18 - this right here
438:20 - is not the same
438:23 - as saying this
438:26 - they are not the same just take note of
438:27 - that for some of you might want to do
438:29 - that
438:30 - but there we go
438:32 - and we can play around with this later
438:33 - so i can show you an example but for
438:35 - right now let's just leave that like
438:36 - that so we have this
438:39 - vert and offset
438:42 - and i can get the vertices
438:44 - like this so vertvert
438:46 - and then
438:48 - offset is offset there we go
438:52 - so now we have both of these that we can
438:54 - use here
438:55 - so back to points so now we have
438:56 - self.offset which is basically
438:59 - everything we just did
439:00 - and now we need to specify at what index
439:03 - because there will be multiple
439:05 - because if you could see here
439:07 - we are forwarding through this and
439:09 - inserting for every item we're inserting
439:12 - a new offset
439:14 - or a new item for that offset the new
439:16 - location
439:17 - so now here with the points
439:19 - we need to specify
439:21 - and i'm just going to say one so the
439:23 - very first one we have
439:25 - times and we'll later modify this to be
439:28 - a bit more interesting
439:29 - math.cos
439:32 - yet again i can't quite explain this yet
439:33 - because we can't see it so we don't
439:35 - really know what we're drawing here
439:37 - but i'll show you in a second
439:39 - you can solve that angle in there
439:42 - and then with the next one
439:44 - we can just copy it
439:46 - and instead of saying x
439:48 - this will be y
439:50 - keep everything the same and instead of
439:52 - cos we say sin
439:55 - and now we didn't have this angle though
439:57 - you may have noticed that
439:59 - we can quickly generate something that
440:01 - will give us an angle just like with our
440:03 - player how we have an angle we can do
440:05 - the same here we just say
440:07 - angle
440:08 - is equal to
440:10 - math dot
440:12 - red for radians
440:14 - and then
440:15 - math.random and we just say
440:18 - math.pi you don't have to worry too much
440:21 - about the math we're doing in this
440:23 - game div course
440:25 - the more important part is that you can
440:26 - see how everything fits together to
440:29 - create something interesting
440:31 - in
440:33 - so if the math goes over your head don't
440:35 - worry there's a lot of games out there
440:37 - that you can build without all this
440:39 - complex math and in most cases you can
440:42 - do what i do and you can just literally
440:43 - copy math from online because i watched
440:46 - a lot of tutorials and i looked through
440:48 - a lot of documentation and i was like i
440:50 - don't understand any of this i copied
440:52 - paste
440:53 - test and it worked that's what i would
440:56 - recommend you do as well
440:58 - if you're not very good at map if you're
440:59 - good at math and just do this may of
441:02 - course coming out soon at some point
441:04 - so stay tuned if you want to improve
441:06 - your math
441:08 - cool so now we have our points
441:11 - but we still need a lot of the other
441:13 - points as well so this is just the first
441:15 - batch of points because if you remember
441:17 - we need
441:18 - at least
441:20 - two more here in order to complete it
441:22 - into a full triangle
441:25 - so we can create a for loop
441:28 - and then for i becomes one oh that
441:31 - should be i
441:32 - i becomes one to
441:35 - self dot vert
441:37 - minus one so the amount of vertices
441:39 - minus one
441:41 - do
441:42 - and we can just say table
441:44 - dot insert
441:46 - we can specify
441:48 - that we want to insert into points so
441:50 - this one right here
441:52 - and then what we want to insert
441:55 - for now i'm just going to copy this and
441:56 - modify it because it's quite a lot of
441:58 - typing
441:59 - because math
442:02 - so it starts with x plus cell the radius
442:05 - times the offset but instead of saying
442:08 - 1 we say i plus one because here we
442:12 - specified one but now we want to go two
442:15 - and three and four and five
442:19 - if you wanted to you could just specify
442:20 - that i should be two here from the get
442:22 - go
442:23 - but this works perfectly fine as well
442:25 - and then we can specify math.course
442:28 - self.angle
442:30 - but now we need to add a bit of extra
442:32 - mass so we can close
442:34 - this polygon we're drawing because
442:36 - remember a polygon should close if we
442:38 - just drew a triangle
442:40 - with like just three angles they're not
442:42 - going to close itself we need to make
442:43 - sure it closes
442:45 - for example if i were to open up my
442:46 - drawing app here
442:48 - if we just drew this one two three
442:51 - that that's not a triangle is it
442:54 - this is a triangle a triangle closes
442:57 - itself so we need to add some extra math
443:00 - to
443:00 - do this at some point
443:02 - or here or here but not this this is bad
443:07 - because it doesn't close itself it just
443:08 - stays open so we need to do some math to
443:11 - do this
443:12 - like that
443:14 - so now here after the angle we say plus
443:17 - i
443:18 - times math dot pi
443:21 - times 2
443:22 - divided by self.vert
443:25 - there we go
443:26 - that should be divided
443:29 - awesome
443:30 - we can then insert another one and we
443:32 - can just skip over the math for now
443:33 - because there's a lot of math here which
443:35 - you don't necessarily need to cover at
443:37 - the moment
443:38 - and we can just specify why here
443:41 - everything else will stay the same
443:42 - except instead of cos we'll have sin
443:46 - cool now we can actually go about
443:49 - drawing
443:50 - what we have so we can actually display
443:53 - it on the screen and see what we're
443:55 - working with because currently we're not
443:56 - drawing anything
443:58 - so we're going to say
443:59 - love.graphics.polygon
444:02 - and now we just specify
444:04 - that we want a line
444:07 - oh gosh
444:08 - i want a
444:09 - line
444:10 - and
444:11 - points because we generated the points
444:14 - right here it's inside of a table
444:16 - we did the points and now we're passing
444:19 - in the points so instead of doing what
444:21 - we did with player
444:23 - where we just passed in the points like
444:25 - this as you can see here the math is
444:28 - pretty much similar
444:30 - we did this instead and generated the
444:32 - points for us because
444:35 - asteroids won't all have the same amount
444:37 - of points unlike the player which only
444:39 - has three they might have 10 or 50. we
444:42 - have no idea and we don't want to draw
444:45 - each one of those out by hand because
444:46 - that's going to be a massive pain so we
444:48 - use a for loop to do it instead
444:51 - cool and let's just add some debugging
444:53 - in case you want debugging
444:55 - so if debugging
444:59 - then love dot graphics
445:02 - dot set color
445:04 - one
445:06 - o
445:07 - o so red
445:10 - and you can also specify love dot
445:13 - graphics
445:15 - to draw a circle
445:17 - we can specify we want a
445:19 - line
445:21 - and then we specify self dot x to give
445:24 - it a self x position and a y position
445:29 - and then you just specify the radius
445:33 - and there we go so this would display
445:35 - the hitbox of the asteroid
445:39 - now i still want to implement movement
445:41 - but for right now i think this is fine
445:43 - let's just go to main because i want to
445:45 - see what we draw you can probably hear
445:46 - my voice how excited i'm getting to
445:48 - seeing what we drew
445:51 - let's go down here to draw
445:53 - and now we actually need to generate an
445:56 - actual asteroid
445:58 - however i am wondering if doing it here
446:01 - would be a good idea
446:03 - i say we should rather open up the
446:06 - game states
446:08 - and we should implement a function that
446:10 - could benefit us in the future
446:13 - for example what if we had a function
446:16 - that says start
446:18 - new
446:19 - game
446:20 - and that's a function that takes itself
446:23 - and the player and i'll explain why in a
446:25 - second
446:26 - and this every time starts a new game
446:29 - when we tell it to so let's say the game
446:31 - ends because the player died or when the
446:33 - player says play game then this will
446:36 - trigger and it will restart the game
446:39 - so you could say self
446:41 - and then change the game state
446:43 - to
446:44 - running
446:46 - because we're changing the game state
446:47 - back to a running state since that's
446:49 - what's happening
446:50 - then we are creating a global
446:54 - scope
446:55 - very important to remember this a global
446:58 - scope
446:59 - variable called asteroid
447:02 - so underscore g dot or just plain out
447:04 - here asteroids
447:07 - just lowercase a
447:09 - this is a global scope variable meaning
447:12 - it can be used anywhere inside of this
447:14 - file
447:16 - or actually anywhere inside of this game
447:18 - now because we're going to import this
447:20 - file later we're going to use this and
447:22 - it's going to generate this global scope
447:25 - function or this global scope variable
447:28 - this isn't the best way to do it take
447:30 - note
447:31 - in fact i might even recommend you do
447:33 - asteroids here and say asteroids
447:36 - and in doing this or finding even a
447:38 - better place to do it than here
447:40 - but for now this will work fine
447:43 - we make that an empty table take note
447:46 - it is global scope you will get confused
447:49 - if you do not take that as note
447:51 - then we specify the asteroids current x
447:54 - and y positions
447:57 - so
447:58 - you could do this without needing to put
448:00 - a variable but i'm going to use a
448:01 - variable just to keep things simple
448:04 - so local
448:05 - asteroid x position is equal to
448:08 - math.floor
448:10 - math.random it doesn't need to be random
448:12 - you could specify a specific position
448:15 - for example we could go here and say
448:17 - table dot insert because we want at
448:20 - least one asteroid
448:22 - asteroids
448:24 - and then what index
448:26 - and then what value and in this scenario
448:29 - asteroids
448:31 - object
448:32 - we can go up here and you can copy this
448:35 - and change from text to
448:37 - asteroids
448:39 - change from components
448:41 - to
448:42 - objects
448:44 - and then here instead of saying text we
448:45 - say asteroids and this will import this
448:48 - asteroid object which we are using here
448:52 - and then we specify
448:54 - the x and y so you could give something
448:56 - like 60 100 that's perfectly fine
449:00 - then 100
449:02 - for the
449:03 - i believe that's the radius
449:05 - if you look here we go up here
449:08 - now that's the asteroid size so
449:10 - depending on the size or depending on
449:12 - what you pass in there the azure will be
449:13 - bigger or smaller
449:15 - the level which will in this scenario
449:17 - just be self.level so it will level up
449:19 - depending on the game level
449:21 - and then true for debugging
449:24 - now you could do this but it's boring
449:26 - because we want asteroids to start up at
449:29 - a different location every time we start
449:31 - up the game
449:33 - so what we could do is we could make it
449:35 - random and that's what i'm doing here
449:38 - and we say love dot graphics dot get
449:41 - with because it's the x position and it
449:44 - can appear anywhere on the x axis
449:48 - same with y
449:50 - but this time instead of saying with we
449:52 - say
449:53 - get height
449:55 - and we pass in the asteroid x
449:58 - we pass in asteroid y
450:01 - we save that
450:04 - and now we can go here back to main
450:08 - then on the game load
450:10 - when we create this game we can say game
450:13 - colon
450:15 - start new game and we can just pass in
450:17 - the player
450:18 - now currently we're just passing in the
450:20 - player this is just for future reference
450:22 - we don't have to worry about it too much
450:23 - now
450:24 - but we are passing in the player because
450:26 - later once we start a new game we want
450:29 - to position the player in the center we
450:31 - want to give the player more hp
450:35 - and so on and so forth so by default
450:37 - that means we'd want a player we could
450:39 - also specify and push in some asteroids
450:42 - in here if you wanted to as well but
450:44 - this is fine for now
450:45 - now be remember
450:47 - asteroids is a global scope variable so
450:50 - don't get confused about what we're
450:52 - doing here because remember it's a
450:53 - global scope very important to take note
450:55 - of
450:56 - so for
450:58 - and we can say underscore because we're
451:00 - not going to use this this is the index
451:02 - we're not going to use it asteroid
451:05 - and asteroids
451:08 - global scope remember that you might get
451:10 - confused so maybe make it somewhere more
451:12 - global or more local instead of global
451:15 - but for right now just remember this is
451:17 - global scope because you will get
451:18 - confused if you don't remember
451:21 - now you can say asteroids
451:23 - or asteroid and it just say draw so
451:25 - called the draw function for every
451:27 - asteroid we have so if you have multiple
451:29 - asteroids then this will call it for
451:31 - multiple asteroids
451:32 - and just pass in
451:34 - game dot state
451:36 - dot pause so if the game is paused
451:40 - so if it should be faded out or not
451:42 - let's run this and hope for the best and
451:45 - ooh
451:46 - asteroid 8
451:48 - can we perform on local level a null
451:51 - value
451:53 - that means we may not have passed in the
451:55 - level
451:57 - do we actually have a level here yet
452:01 - no we actually do not have a level here
452:03 - yet my bad
452:04 - okay so let's add a level we are
452:06 - currently at level one we can start
452:09 - there
452:10 - now if we run this
452:13 - where's the asteroid i do not see the
452:15 - asteroid
452:16 - let me draw it again
452:21 - i do not see the asteroid
452:24 - oh you know what i think this could be
452:26 - the reasons let's remove that 60 i think
452:29 - i just forgot to remove that
452:32 - let's try and run it now
452:35 - and in here we need to specify the size
452:38 - so i got so confused of all of these
452:40 - things but yeah now i think it should
452:42 - probably yes there we go
452:44 - so now we have an asteroid
452:47 - and let's maybe spawn another
452:50 - that's pretty cool
452:53 - we can of course have multiple asteroids
452:55 - let's just maybe make a four
453:00 - and then we can just copy this
453:02 - for every asteroid x
453:05 - and then copy this for every asteroid
453:07 - bar just so we can have some of an idea
453:10 - of what we see
453:14 - now if we run this we'll have four
453:16 - asteroids that spawn randomly
453:20 - cool and they all look different and
453:22 - that's kind of what i've been doing this
453:24 - whole time with all this math.random
453:26 - this one has one two three i can't
453:29 - actually show my cursor but yeah
453:32 - so you can see they have different
453:33 - amounts of
453:35 - like spikes
453:37 - and the the spikes also look way
453:39 - different
453:41 - compared to each other
453:44 - let's play around with some of the math
453:45 - just so i can show you what i meant
453:48 - if we go here
453:50 - to
453:51 - the asteroids of course
453:53 - if you were to change this to 90 for
453:56 - example
453:58 - then now as you can see they're like
454:00 - super spiky
454:01 - so if you the higher you make that the
454:03 - more spiky they can become that actually
454:06 - looks kind of cool
454:08 - but if you were to make this something
454:09 - like two
454:12 - then
454:13 - yeah you need more than two to actually
454:15 - be able to draw polygons let's make it
454:17 - four i think that should be enough
454:19 - then there you go then they all look
454:20 - kind of plain
454:24 - and in here of the jaggedness you can
454:26 - see how jagged it should be so if you
454:28 - make it a nine
454:29 - then it will be like super pointy and
454:32 - super cool looking but
454:34 - as you can see you have the red circles
454:37 - the hitboxes are not very accurate so
454:40 - unless you're going to do some extra
454:41 - math there to make it accurate i do not
454:44 - recommend making this too high
454:47 - i did pretty f4 but you could put it
454:49 - somewhere else like let's say at five
454:51 - should still be perfectly fine
454:54 - yeah it's still mostly perfectly fine
454:56 - not perfect
454:57 - but yeah and then let's say you were to
454:59 - make it 0.1
455:01 - then they'll basically all look super
455:03 - round
455:06 - and you make it a 0.0 i wonder what will
455:07 - happen would we crash
455:10 - no but it would look pretty much very
455:12 - round
455:13 - and then the more vertices you add for
455:15 - example let's say 19
455:18 - then now it'll look like a normal circle
455:20 - because there's just a bunch of
455:21 - little
455:23 - lines being drawn
455:25 - and of course if you were to make this a
455:27 - nine again
455:28 - then now it will look super weird
455:32 - so that's kind of what these were so if
455:34 - you were confused i hope this also
455:35 - cleared it up for you
455:38 - astro speed we're going to work with in
455:40 - a second and here's the offset but you
455:42 - don't have to mess with right now
455:45 - but if you want to you could and you
455:46 - could like remove some things here and
455:48 - see what offset will does we'll do so if
455:50 - we select 10 for example what will
455:53 - happen then
455:54 - as you can see not so great
455:58 - and of course if you wanted to you could
456:00 - say fill instead of line
456:02 - and that will give you like a filled
456:04 - version but then i would recommend
456:05 - choosing a color a bit more gray than
456:07 - the grayish white color we chose because
456:10 - then it just looks weird so i'd
456:12 - recommend something a lot more gray if
456:14 - you want to go something that's not line
456:16 - because it currently it kind of looks a
456:18 - little bit faded compared to uh ours
456:21 - and of course if you pause they'll all
456:23 - fade out a little bit
456:25 - and on pause pause
456:27 - like that
456:29 - cool and that's the drawing section
456:30 - completed
456:33 - some of you might want to take a break
456:34 - right now i'd actually recommend it
456:37 - but if you think you still have the guts
456:39 - to go for it
456:40 - then let's implement the movement
456:44 - so here we have a nothing starting game
456:46 - but in asteroids
456:49 - here we have the draw but the draw is
456:51 - now completed for now
456:53 - so we can now go and say
456:57 - move and move is a
456:59 - function
457:00 - takes in self and dt
457:03 - dt because we actually want to start
457:05 - implementing some good ways to move our
457:08 - objects without using fps because as i
457:10 - said fps is not a great way to specify
457:14 - how fast something should move
457:16 - use dt
457:18 - and remember dt is the time between this
457:20 - frame and the last frame so it's usually
457:22 - very small
457:24 - and it's self dot x is equal to self
457:28 - dot x
457:30 - plus
457:31 - self
457:32 - dot x
457:34 - and we can say bill for velocity
457:38 - and that's right here so that will
457:40 - basically with every move it will move x
457:43 - to where it currently is but plus its
457:45 - velocity
457:46 - and then just say times dt to make a
457:49 - move at a consistent rate
457:51 - so if it's 30 ps or if it's 60 fps it
457:54 - will get from one point to the other
457:56 - point in exactly the same time
457:59 - and you can do the same for y
458:02 - but it's time for y velocity
458:05 - cool
458:06 - so that will move it
458:09 - now we can go to main
458:11 - and we can go up to update where the
458:13 - game state is running
458:16 - and we can actually just copy this
458:19 - paste it here
458:21 - and this time we can call this ast
458:24 - index
458:26 - but you don't have to in fact you could
458:28 - possibly just keep this underscore
458:29 - because we're not necessarily going to
458:31 - use it although we might in the future
458:33 - so i'll keep that there because it
458:36 - didn't make sense to able to access the
458:38 - index from here
458:40 - but as for future reference you could
458:42 - make it underscore for now
458:44 - instead of draw we say move and we pass
458:46 - in
458:48 - dt
458:49 - where do we get dt
458:51 - dt gets passed in from update
458:54 - so update takes in dt thanks to love2d
458:58 - we take this dt and we pass it in here
459:01 - if we run this then now it moves
459:05 - which i think is kind of cool
459:07 - right again that will move a different
459:09 - direction
459:10 - move it again
459:13 - now it's incredibly slow move it again
459:17 - now you'll notice as well oh gosh i
459:19 - closed my terminal
459:21 - but you'll notice as well when i get
459:23 - back to everything
459:26 - that
459:26 - love dot
459:30 - if we run it
459:31 - then it can go off screen just give it a
459:34 - second
459:35 - my player can actually go with it off
459:37 - screen just to show you something
459:40 - you'll notice my player comes back
459:42 - but once the asteroid leaves the screen
459:45 - it never comes back
459:47 - we don't want that
459:50 - so what we can do is we can go to player
459:53 - go to move player
459:57 - copy this
459:59 - go to asteroids
460:03 - and then just
460:05 - paste this here
460:07 - and it will do the same thing as with
460:09 - the player it will make sure the
460:11 - asteroid stays on screen
460:15 - so let's run this and make sure it works
460:18 - and it's going to take a while to get
460:19 - off screen now
460:21 - there we
460:22 - go all right give it a second you can
460:25 - also put some extra math here to make it
460:27 - appear sooner on the other side but i
460:29 - think this is fine
460:31 - and there it goes it now appeared
460:35 - and just like that we made sure that the
460:37 - asteroid never goes off screen forever
460:40 - cool and of course if you want the
460:42 - ashrae to move faster you could
460:45 - upgrade the speed here
460:47 - for example let's just go plus
460:50 - nine
460:51 - for an hour uh let's go plus
460:53 - 10 actually i think that would be pretty
460:55 - good
460:56 - and now we'll move usually much faster
460:58 - but it's still random
461:00 - so let's maybe go here and just make it
461:02 - a default
461:04 - 150. let's see that should make it move
461:06 - pretty fast
461:08 - yeah there you go
461:09 - so you can just upgrade that to make it
461:11 - move faster or slower
461:14 - i maybe say increase this times two to
461:16 - maybe times five or times four times
461:17 - three depending on how difficult you
461:19 - want to gain to be this is something you
461:21 - can tweak to make the game your own to
461:24 - make it something that's just more than
461:26 - what we have
461:28 - and yeah
461:29 - that is that
461:37 - in this tutorial let's add the lasers
461:41 - you know because when you have a
461:42 - spaceship you can go pew pew pew and
461:44 - that should be destroying the
461:46 - asteroids whilst we'll not be
461:48 - implementing the destroying of the
461:50 - asteroids yet we will be implementing
461:53 - the lasers themselves
461:56 - now the lasers are much easier than you
461:58 - might think they are they're basically
462:00 - just dots on the screen that move around
462:04 - so there's not a lot of complicated math
462:06 - in drawing them it's just a little
462:07 - circle or square that moves
462:10 - so to give you an example of what we
462:13 - will be doing
462:15 - let me just go here
462:17 - and start one up
462:18 - all right so here is the example
462:22 - if i press space it shoots an asteroid
462:27 - there is limited amount of asteroids
462:29 - allowed on the screen
462:32 - so if you have too many asteroids on the
462:34 - screen it will remove some of the
462:36 - previous asteroids
462:40 - but yeah
462:42 - currently if you shoot
462:44 - an asteroid
462:46 - it can't
462:47 - because the lasers cannot destroy
462:49 - anything yet
462:51 - and i might have said asteroids earlier
462:52 - i mean there's a limited amount of
462:53 - lasers that can be on the screen not
462:55 - asteroids a limited amount of bullets
462:59 - all right it's that simple
463:01 - let's first create a new object
463:04 - and we can call it
463:06 - laser
463:07 - dot lua because this is an object
463:10 - because it's the laser is a bullet
463:13 - then right here we could just remove
463:15 - that and we could say
463:18 - function
463:19 - laser
463:21 - then we want the x position the y
463:23 - position and then the angle
463:25 - it's shooting at because the player
463:27 - might be at a specific angle and we want
463:29 - to shoot out of that angle so the player
463:31 - is looking upwards we won't shoot
463:33 - upwards of the of that angle
463:36 - anyhow then this will return
463:38 - a table and we can just return
463:42 - laser
463:43 - and there we go
463:45 - now first we want to set the laser speed
463:47 - so sitting this will determine how fast
463:50 - the laser moves so how many pixels per
463:54 - second
463:55 - in our case i think about 500 pixels a
463:58 - second is perfectly fine
464:00 - to some of you that might be a little
464:01 - fast so you might want to turn it down
464:04 - or to some it might be a little bit slow
464:07 - but it's up to you so local
464:09 - laser
464:11 - speed is equal to 500
464:14 - so in pixels per second
464:17 - we can insert the x equal to the x that
464:19 - was passed in
464:21 - the y equal to the y that was passed in
464:24 - now let's first draw what we have so
464:26 - let's draw
464:28 - that's equal to a function
464:30 - and this function will just taken self
464:32 - and fade it as well so if we pause it
464:36 - also fade out just like everything else
464:39 - and we can say
464:40 - local opacity is equal to one
464:45 - if
464:46 - faded
464:47 - then opacity is equal to 0.2
464:51 - then love
464:53 - dot graphics dot set
464:56 - color
464:57 - and you can make this red or green or
465:00 - whatever color you think a laser should
465:03 - be
465:04 - but
465:05 - i'm just going to make it white
465:07 - but you can customize the game
465:09 - and make it red green blue purple
465:11 - whatever color fits your eye the best
465:14 - you can make everything colorful and
465:15 - much more playful
465:17 - and we can just also pass in the opacity
465:21 - since we are literally just using a dot
465:25 - we can use a point so just like a point
465:28 - on the screen
465:30 - luckily love2d already has this built in
465:33 - so we can just say love dot graphics
465:36 - dot set point size
465:40 - and this is how big the dot will be i'm
465:42 - just going to say free but we'll play
465:44 - around with this so you can figure out
465:46 - what size is perfect for you
465:49 - then we can say love dot graphics dot
465:52 - points
465:54 - and now we can draw the point on self.x
465:57 - and self
465:59 - dot y
466:00 - and we forgot to require love but yet
466:03 - again it's optional so local
466:05 - love is equal to require
466:08 - love there we go
466:10 - nice
466:11 - we'll add this later but for right now
466:13 - let's just see how everything looks if
466:15 - we put it on the screen
466:17 - alright so let's go to player because
466:19 - here is where we'll be adding lasers
466:22 - we can go to the top and add a new item
466:26 - we can call it lasers and that will just
466:29 - be a table that's empty because we can
466:31 - have multiple lasers
466:33 - so we'll just have a table that can hold
466:35 - all of the lasers for us
466:37 - we can then scroll down
466:40 - and maybe right above the draw we can
466:42 - add a shoot laser function
466:45 - this function will allow us to shoot a
466:47 - laser
466:48 - and that's it
466:50 - this could be inside of lasers or a sort
466:52 - of game or where what not but i feel
466:54 - putting in sort of plays player makes
466:57 - the most sense because if you say player
466:59 - and then colon shoot laser it makes so
467:02 - much sense but if you say just laser
467:04 - shoot laser it's kind of weird so if you
467:07 - say player shoot laser then you know the
467:09 - player is shooting at laser and if you
467:10 - add an enemy like maybe a spaceship and
467:13 - a spaceship can shoot lasers
467:15 - then yet again you can just say
467:17 - spaceship or enemy colon shoot laser you
467:20 - can follow the same structure and it
467:22 - would always make sense
467:24 - cool
467:26 - now for now let's just go
467:28 - shoot
467:30 - laser and that can be a function
467:33 - that takes itself
467:35 - and here we can just
467:37 - go table dot insert
467:39 - self.laser
467:41 - and then
467:42 - create a laser object
467:44 - and we need to import laser
467:46 - so you can say
467:48 - local laser
467:50 - is equal to require
467:53 - and then object
467:55 - laser i don't know this dot syntax works
467:58 - but if it works let's use it
468:01 - but if it doesn't work you can use a
468:02 - slash
468:04 - i'm going to try this dot syntax because
468:06 - my ide constantly auto completes it like
468:09 - that for me so let's see if it works
468:12 - now down here
468:13 - where we do this we can go laser
468:16 - and then it needs the x axis
468:19 - and the x-axis will basically be the
468:21 - same
468:22 - as our player but we'll tweak this a
468:24 - little bit just to get it right let's go
468:27 - self
468:29 - dot x and we'll tweak it so it's fine
468:31 - like this
468:32 - self self.y
468:35 - self.angle
468:37 - cool
468:38 - we'll tweak it more later because this
468:39 - won't necessarily work that great yet
468:42 - but i just want to get it on screen
468:45 - now if we go to main
468:46 - we can go maybe right here to where it
468:48 - says this
468:49 - key release and we can say
468:52 - or actually let's leave that for now
468:54 - let's go here first
468:56 - and we have a few things we might want
468:58 - to do
468:59 - to shoot so there's a few things that
469:02 - the user can press if they want to shoot
469:05 - first i think space is a good item to
469:08 - press
469:10 - then as well as down like the down arrow
469:12 - key
469:14 - and then kp five like that is the five
469:18 - on the numpad i think that's also a good
469:20 - one
469:21 - and in here we could just say
469:23 - player
469:24 - shoot laser
469:26 - and it will shoot the laser
469:28 - now also want the laser to be shot if a
469:31 - mouse is pressed so let's say if the
469:34 - right mouse button is clicked we want
469:35 - the laser to be shot so they want to
469:37 - play with their mouse they can
469:39 - so let's actually do that so we can say
469:41 - function
469:43 - love dot mouse pressed
469:46 - and this takes in quite a few things so
469:48 - first it is x
469:50 - it is y
469:52 - it is the button
469:55 - that has been pressed
469:56 - is touch for example if it's a touch
469:59 - screen
470:00 - and presses which is also for if it's a
470:02 - touch screen
470:04 - i believe this x and y is mainly for the
470:06 - x and y position on screen
470:09 - so let's click here and that would be
470:11 - like 50 50 x y
470:14 - now here you can say if
470:17 - button is equal to one and this is their
470:21 - lift mouse button i think
470:24 - then you can see if
470:26 - game.state.running so only if it's the
470:28 - running state
470:30 - player
470:31 - colon
470:32 - shoot laser and that will shoot laser
470:35 - cool but currently if we're trying to
470:37 - shoot the laser we won't see anything
470:40 - because we are not drawing it
470:42 - so let's get to player and let's put the
470:44 - draw also here
470:45 - so every
470:47 - object can basically contain its own
470:50 - version of the laser so if you have
470:51 - multiple lasers on the screen then every
470:54 - object will handle their own laser so
470:56 - let's go here to draw let's just do it
470:58 - at the very bottom
471:00 - so four
471:01 - and we can just say underscore because
471:03 - we don't need the key
471:05 - laser
471:07 - in pair
471:08 - self dot
471:10 - laser
471:12 - and we can just say
471:14 - laser
471:15 - colon draw
471:16 - and then faded
471:18 - and is faded
471:21 - is basically what's being passed in here
471:23 - just like that
471:25 - let's see if this works
471:29 - okay space
471:31 - and there we go
471:33 - currently they didn't move because we
471:34 - haven't put anything there
471:36 - but now
471:38 - we can create a bunch
471:40 - of cool
471:42 - little lasers
471:44 - and we can
471:45 - not
471:47 - use our
471:49 - mouse button
471:50 - and the reason for that would be let's
471:54 - see
471:55 - ah that should be
471:57 - state
471:59 - like that
472:00 - now we can use our mouse button as well
472:07 - cool so these are our lasers as you can
472:09 - see they're just little dots on the
472:10 - screen
472:12 - there are only little dots because if we
472:14 - go to lasers we're using points
472:17 - if we were to increase this to let's say
472:19 - 30 then it will be massive dots
472:23 - as you can see
472:27 - so it depends on how big you want your
472:29 - lasers to be some people would like them
472:31 - to be really small
472:32 - although then it's kind of difficult to
472:34 - see them oh gosh where's my player
472:37 - nah there we go
472:38 - as you can see it's very difficult to
472:40 - see them
472:41 - so i think free is about a good size but
472:44 - you could go up to something like five
472:45 - or even higher depending on what your
472:47 - preference is
472:49 - 35 is a little big for me personally i'm
472:52 - going to go free because that just looks
472:53 - perfect
472:55 - cool
472:56 - so let's implement the rest of the
472:58 - things
472:59 - into our
473:01 - laser
473:02 - class
473:03 - so next up we want to move the laser so
473:06 - we can go move is equal to a function
473:10 - this function just takes itself
473:13 - now just the lack of the player we need
473:15 - velocities x
473:17 - and y velocities
473:21 - so
473:22 - we can go here and we can say
473:25 - x will for x velocity is equal to the
473:29 - laser speed
473:30 - times
473:32 - math dot cos
473:34 - passing the angle that's the angle we
473:36 - got here so the same angle as the player
473:39 - divided by and then love dot timer
473:43 - dot get fps yet again it would be better
473:46 - to rather put something like dt here
473:49 - just because it would be safer
473:51 - but i don't think it's that necessary
473:53 - for a game this small but if you plan on
473:55 - making this game much bigger then you
473:57 - could definitely implement dt here
474:00 - next we can do the same for the y
474:02 - velocity
474:03 - but this time instead of
474:06 - sin
474:07 - or cause we can go sin like that now we
474:10 - have the x and y velocities
474:12 - we also at some point probably want to
474:14 - remove
474:16 - the laser from the screen
474:18 - and how we determine that
474:21 - is based on whatever you want you can
474:23 - base it on time for example if it's been
474:25 - on the screen for five seconds remove it
474:28 - or something like that
474:30 - i however
474:31 - i'm going to determine that based on the
474:33 - distance it has traveled so let's say it
474:36 - can only go one and a half way around
474:38 - the screen or around the window
474:41 - something like that so we can just say
474:43 - distance for the distance traveled and
474:46 - we can make that equal to zero
474:48 - cool
474:50 - now we can continue to this move
474:52 - function here
474:54 - and we can say self dot x is equal to
474:57 - self
474:58 - dot x
475:00 - plus self dot
475:03 - x
475:04 - velocity
475:05 - we say x velocity because remember
475:07 - that's how fast it moves
475:09 - on the x-axis
475:11 - cool
475:12 - and then we do the cell same for y
475:16 - nice
475:18 - now we want to keep this on screen
475:21 - so we can actually just go here and we
475:23 - can copy this
475:25 - you could possibly
475:27 - make this a function
475:29 - and you just reuse the function
475:31 - constantly because we're copying and
475:33 - pasting this the whole time so it would
475:35 - actually be better to create a function
475:37 - and put this in
475:38 - but that can be your homework if you
475:40 - want to walk the extra mile
475:43 - now for this right here we don't have a
475:45 - radius because remember we're just a dot
475:47 - on the screen we are no longer a circle
475:50 - we're just a dot
475:52 - so here we have the self radius
475:55 - we can just remove that
475:57 - so like that
475:59 - delete
476:00 - now should be self dot x less than zero
476:02 - we set x to the width
476:05 - if it's
476:06 - and there's not the radius of a minus so
476:08 - let's just also remove all of those
476:11 - there we go if it's more in the width
476:14 - then we want to set it to zero and not
476:17 - the radius because we don't have a
476:18 - radius so we're going to set it to zero
476:20 - because remember zero would be this
476:22 - point right here where the window starts
476:25 - same here the y is zero
476:28 - would be this point right here where the
476:30 - window starts on the top
476:32 - next up we want to say how far it has
476:34 - traveled
476:35 - so the distance it has traveled
476:38 - so self.distance
476:41 - is equal to self dot distance
476:45 - plus
476:47 - math dot square root
476:50 - and here first we could say self dot x
476:53 - velocity
476:54 - to the power of two
476:57 - plus
476:58 - self.y velocity
477:01 - to the power of 2
477:03 - and this will just get us the distance
477:05 - it has traveled
477:07 - from point a to point b
477:10 - there's a
477:11 - part here
477:13 - cool you could use some different math
477:15 - if you want to but this works perfectly
477:17 - fine
477:18 - nice
477:20 - now we have the laser and the laser can
477:22 - move
477:24 - now let's move the laser
477:27 - so i'm going to do that right here
477:29 - inside of
477:31 - this player
477:32 - so right at the bottom
477:34 - and we can just move the laser from here
477:36 - so for
477:38 - index
477:39 - laser
477:41 - in
477:42 - self
477:43 - dot
477:44 - lasers
477:46 - we can then say laser colon move and
477:49 - this will move laser
477:50 - now if you were to run this
477:52 - the laser should move oh gosh it's
477:55 - moving but it's shooting it
477:57 - in the wrong direction
478:00 - okay so we did some wrong math
478:02 - but now the lasers they do shoot so
478:04 - let's just go back to lasers and see
478:07 - what we got wrong
478:09 - oh and right here this should be
478:11 - negative
478:13 - because it's going to move in a slightly
478:15 - different manner now it should go out of
478:17 - yes now it goes out of the top
478:20 - cool now that
478:23 - that is fixed we can have a ton of
478:25 - lasers on the screen
478:27 - i think that's actually pretty cool
478:29 - now
478:31 - never do you really want this many
478:33 - lasers on the screen you want to limit
478:35 - it so we have to basically
478:38 - tell the lasers to destroy themselves
478:41 - once they're completed with all of this
478:43 - once they're done
478:45 - so let's go here to the player and
478:47 - implement that so let's go to the top
478:51 - and we can specify the amount of
478:53 - distance the lasers are allowed to
478:55 - travel
478:57 - so you can say local
479:00 - laser
479:01 - distance
479:03 - can also call this max laser distance if
479:05 - you want
479:06 - and i'll make that equal to 0.6
479:10 - so they can basically move
479:13 - 0.6 the width of the window before they
479:16 - get destroyed
479:19 - so they can't go the whole width but
479:22 - they can go 0.6 of it
479:24 - you can change this to
479:26 - make it them travel further or
479:29 - less depending on what you prefer we
479:32 - also then specify the max amount of
479:35 - lasers
479:36 - on the screen
479:37 - and that can be 10 you could make it
479:39 - more or less depending on how difficult
479:41 - you want the game to be
479:42 - when you implement maybe levels you
479:44 - could make that let's say on the the
479:46 - most difficult level you can only have
479:48 - like three lasers on the screen at once
479:51 - cool now we need to implement something
479:52 - that will destroy the lasers so i'm
479:55 - going to copy this right here
479:57 - and instead of shoot it will be destroy
480:00 - and this is very basic we can just say
480:02 - table
480:04 - dot remove
480:06 - and we can say from self.lasers
480:09 - and then the index
480:11 - so now here we can also just take in the
480:13 - index
480:14 - so it will remove the laser at that
480:16 - index inside of the table
480:18 - now we remove the laser so down here
480:23 - there we go
480:25 - here we're laser moves
480:27 - we can say if
480:29 - and i'm just going to do this instead of
480:30 - some brackets but you don't have to i
480:32 - just feel more comfortable if i do that
480:35 - love dot distance
480:38 - love that should be laser laser dot
480:41 - distance
480:43 - if that is more than the max laser
480:46 - distance
480:47 - times
480:49 - love dot ooh
480:52 - love dot graphics
480:55 - dot
480:56 - get with and let me just fix this
480:59 - so if the laser has traveled 0.6 of the
481:04 - screen width so that's what we're doing
481:06 - here
481:07 - so 0.6 of this screen width if it's more
481:10 - than that then we want to remove it
481:12 - we can go here and say self
481:14 - dot destroy laser let's pass in self and
481:18 - index
481:20 - the index that we're getting here so
481:21 - this will be the index where this laser
481:23 - can be found
481:24 - which we're using here to destroy it
481:27 - right there
481:28 - now if we run this
481:32 - then as you can see the laser gets
481:33 - destroyed
481:40 - if the laser moves too fast
481:43 - you can make it slower if it's too slow
481:45 - you can make it faster we can only have
481:48 - up until 10 lasers on the screen
481:51 - but we haven't really implemented the
481:53 - whole 10 lasers thing just yet
481:55 - because we can definitely shoot more
481:57 - than 10 if i had to guess i'm going to
482:00 - i'm not going to count that but let's
482:02 - make it
482:04 - free so we can actually see the
482:05 - difference now if we were to run this
482:08 - as you can see
482:10 - there's definitely more than three
482:12 - so what we can do
482:14 - is we're going to shoot laser and we
482:15 - limit it so if
482:17 - the numbers in self dot
482:20 - laser serve the amount of lasers
482:23 - is less or equal to
482:25 - max lasers then only do we want to
482:29 - do this whole insert thing
482:31 - otherwise just ignore it don't allow us
482:34 - to insert another laser so we go here
482:38 - my bad
482:41 - and we run it
482:42 - here we currently only are able to do
482:44 - four
482:46 - because this is less or equal to
482:48 - so you could make it less instead and i
482:51 - will be more accurate
482:54 - as you can see only three at a time
482:59 - now if we were to change this here to
483:02 - let's say 10 then boom bob your uncle we
483:05 - can only shoot 10 lasers at a time we're
483:07 - limited now
483:10 - so you can see there's like a little
483:12 - wait period once i've reached that
483:14 - amount
483:17 - so you can tweak that to make the game
483:18 - more challenging or easier depending on
483:21 - what you prefer
483:22 - cool now one last thing is let's make
483:25 - sure all our buttons
483:26 - can shoot the laser okay closer down
483:29 - works space works
483:32 - the button number five on the numpad
483:34 - works and
483:36 - the mouse works okay so if all the
483:38 - buttons work that means we have done our
483:41 - job correctly
483:42 - we have now implemented shooting lasers
483:45 - in the game
483:51 - in this tutorial we'll be adding
483:53 - collision for those lasers and it will
483:55 - be pretty cool now i have to show you
483:57 - this let's just move this here
484:00 - if we go here and we shoot
484:02 - it splits into two shoots again it
484:04 - splits again
484:06 - and
484:06 - shoot it again now it's gone
484:09 - and this is a very customizable thing
484:11 - that have popped up here so you can make
484:14 - this more customizable and maybe break
484:16 - up into more pieces maybe move faster
484:18 - maybe be bigger or smaller
484:22 - and once you shoot it up nothing happens
484:23 - but we can implement that later
484:26 - isn't that incredibly cool
484:30 - also something you might notice
484:32 - if we were to go here
484:34 - and we were to shoot
484:37 - you'll notice it's a little explosion
484:39 - animation thing
484:40 - where it has a little bit of color once
484:42 - it touches
484:44 - the asteroid
484:46 - nice
484:47 - now i'm going to remove the whole
484:49 - debugging thing
484:51 - not from the game but just from our
484:52 - visual standpoint
484:54 - because
484:55 - currently i don't think we need it but
484:57 - if you do get stuck and some sort of
485:00 - error occurs
485:01 - turn on debugging and see what's
485:03 - happening because especially when we do
485:05 - collision detection which our debugging
485:08 - is exactly doing showing us where the
485:11 - collision happens
485:12 - then that is when it's most important
485:15 - but i'm going to disable it but i'm
485:17 - going to make sure that we can re-enable
485:19 - it easily again later
485:21 - cool
485:22 - so
485:23 - let's create a new file
485:25 - just say new file and this can be
485:28 - globals.lua
485:30 - now these are going to be variables that
485:33 - are going to be
485:34 - global scope like massive global scope
485:37 - everywhere this can be used and that's
485:39 - the point of this file
485:41 - so whatever we put in here we can use
485:43 - anywhere within the game
485:45 - so let's first do asteroid size
485:48 - and let's make that 100. we'll be using
485:51 - this asteroid size in multiple files so
485:54 - it makes sense to put it here because
485:57 - we're not going to attach this
485:59 - specifically to an object
486:01 - this will just kind of be there it will
486:03 - be able to be used whether that file
486:06 - uses the asteroid object or not
486:09 - and you want to have show
486:11 - debugging
486:12 - you can make this all capital case just
486:16 - like with this asteroid size
486:19 - but the difference is we don't want to
486:21 - change this asteroid size
486:23 - in the game it's a constant we don't
486:25 - want to touch this
486:26 - except if we're getting the value but we
486:28 - don't want to set a new value we don't
486:30 - want to change that to 150 while the
486:33 - player is playing the game we could but
486:35 - we don't want to
486:37 - show debugging however we might want the
486:39 - player to allow them to show debugging
486:43 - so like if they go into the settings
486:44 - they can turn debugging on or off if
486:46 - there may be a developer or is
486:48 - interested in that sort of thing
486:50 - and we can make that equal to false by
486:53 - default but you can keep it true if you
486:55 - still want the debugging information
486:59 - now one last thing i would like to do is
487:01 - do our distance calculation math here
487:06 - and this will just calculate the
487:07 - distance between point a
487:09 - and point b
487:11 - we can say function
487:14 - calculate
487:15 - distance
487:16 - x one
487:18 - x two so this will or this can be y one
487:22 - as well we can do x one y one x two x
487:26 - two or y two now this will be the x and
487:29 - y position of the first item then we
487:32 - want the x2 and the y2 so this will be x
487:36 - and y position of the second item we're
487:39 - trying to get the distance from you
487:42 - could put this into like your own little
487:44 - tables instead
487:45 - but i think that's overkill so let's
487:47 - just do it like this
487:49 - we can then return just a simple math
487:51 - function so math dot square root so
487:54 - squirt and then first
487:57 - we can go here and say
487:59 - x 2 minus x 1
488:02 - and then to a power of 2. you could
488:05 - split this up into multiple lines
488:07 - don't get me wrong you could split this
488:09 - up into multiple lines and why not let's
488:11 - actually show you how it will look let's
488:13 - go here and say
488:16 - local
488:17 - test
488:18 - x
488:19 - and then we can go here
488:21 - and you can move that
488:23 - like that anyway here we can go local
488:25 - this y
488:27 - for the y distance
488:29 - difference and it will be the same thing
488:31 - but this time we will have y instead of
488:33 - x like this so remember it's the second
488:36 - y minus the first y
488:39 - so it's where you are going to
488:42 - minus where you are
488:44 - that's very important to take notes off
488:46 - and then in here we can just say
488:48 - this x
488:50 - minus i mean plus
488:53 - this
488:54 - y and this will give us the distance
488:56 - between x and y so this math right here
488:59 - not between x and y but the distance
489:01 - between those two values
489:03 - x 1 and y 1 and x2 and y2 or yeah
489:08 - all right and that is the basics for
489:11 - this right here
489:12 - so that is how you calculate the
489:14 - distance between x and y
489:16 - of two items
489:18 - and now we can close that because we
489:20 - don't need it anymore and also it seems
489:21 - like this dot notation works since my
489:24 - ide auto completes that i'm just going
489:26 - to leave it like that so you just use
489:28 - this instead of slash from now on but in
489:31 - the
489:32 - game code that i'm going to provide you
489:35 - if you ever download the code it's going
489:36 - to use slash and not dot
489:39 - cool so let's remove the debugging stuff
489:41 - from our
489:43 - objects
489:44 - and stuff so let's go here and to the
489:46 - player
489:47 - and here where we take in debugging
489:49 - we're not taking that in anymore it's
489:51 - now global scope
489:53 - and it's called show debugging instead
489:54 - of debugging so
489:56 - debugging
489:59 - right here so instead of debugging we
490:00 - can say show debugging because it's
490:02 - global scope
490:05 - and you don't have to
490:07 - because lua will automatically know
490:10 - but i would recommend you go require
490:15 - global
490:17 - like that because right there so you
490:18 - want to require that is this isn't
490:20 - required to do this is an optional step
490:23 - but i do recommend if you're going to
490:24 - use global stuff here
490:26 - then you can close player
490:28 - now here in main where we
490:31 - pass in show debugging we can remove
490:33 - that and we can actually remove this
490:35 - debugging as well
490:37 - now let's first go to the laser because
490:39 - that's where a lot of the things are
490:40 - going to happen
490:42 - we're going to add a few new things
490:44 - we're going to make them like states so
490:46 - first will be the exploding
490:49 - state and this can have three values
490:53 - it can have a zero for safe
490:56 - a one for up for exploding so if it's
490:59 - currently exploding and then a two for
491:02 - it done exploding
491:04 - and it also in explode time
491:06 - and this will hold how long it has been
491:09 - exploding so if you wanted to be on the
491:11 - screen for like one second then this
491:13 - will allow you to keep it on the screen
491:14 - for one second
491:16 - cool now let's go to move right here and
491:20 - let's first check if it's exploding
491:23 - so if
491:25 - self dot
491:26 - explode
491:28 - time
491:28 - if that is more than zero then we know
491:31 - we are exploding because otherwise it
491:33 - will always be zero
491:35 - but if it's more than zero that means
491:36 - you're currently busy exploding
491:39 - so self dot exploding
491:41 - is equal to one
491:43 - what i actually recommend you do is you
491:45 - set some sort of state to help you of
491:48 - this for example
491:50 - local
491:51 - exploding
491:54 - enum or something like that and it will
491:56 - be a table that is like
491:58 - not
491:59 - exploding
492:01 - and it will keep zero and then
492:03 - exploding
492:05 - and that will keep one
492:07 - and then i think it was the last one for
492:09 - if it's
492:10 - done exploding like done exploding
492:14 - that's equal to two i'd actually
492:16 - recommend you do this instead just to
492:18 - keep things simple for you and for your
492:20 - future self because if you're going to
492:22 - continue working on this then having
492:24 - something to manage it is the smartest
492:27 - idea you can have
492:28 - however once this course is done i'm
492:31 - done with this project as well
492:34 - so i'm not going to add it to me it's
492:36 - not necessary
492:37 - while we're here let's set the explode
492:40 - duration
492:41 - explode
492:43 - duration
492:44 - and i'll just set this to 0.2 you can
492:47 - change this later depending on what you
492:49 - think is the better time to explode so
492:52 - the more you make it the longer it will
492:54 - be exploding
492:56 - now we need to implement a function
492:59 - that once we
493:01 - want to explode we can so we can go here
493:03 - and say
493:04 - explode
493:06 - is equal to a function
493:08 - and just takes in south and this will
493:09 - just explode in quotation marks our
493:13 - laser
493:14 - now we don't we're not going to mess
493:16 - with the explode time just yet currently
493:18 - we just want to remove everything
493:20 - but for right now we can say if
493:22 - self dot explode time
493:25 - is more than explode duration then end
493:30 - self.explain
493:32 - is equal
493:34 - to two and it will just make it explode
493:37 - and it will kind of allow us later to do
493:39 - some exploding animations
493:41 - next up let's maybe go to
493:44 - asteroids so we can go here we can open
493:47 - up asteroids and we can implement our
493:49 - stuff
493:50 - first let's take out debugging we didn't
493:52 - need that anymore and now we should have
493:55 - something that wants to debug but can't
493:57 - there we go
493:59 - and we can change this to
494:00 - show
494:02 - debugging and we can require globals
494:04 - like that
494:06 - and boom now that that has also been
494:09 - done
494:10 - we can now go to game.lua
494:13 - and here it goes asteroid and it adds
494:15 - this we don't need that extra one
494:17 - anymore because that was just for
494:18 - debugging debugging is now global if you
494:21 - turn debugging off everything will have
494:23 - debugging turned off if you turn it on
494:25 - everything will have it on you don't
494:26 - have to individually go change which one
494:29 - has debugging and not
494:30 - so now let's go to the player.lua and
494:34 - then go to the way button where we are
494:36 - at
494:37 - so right here we are getting the index
494:39 - and laser
494:40 - and now we want to check if the laser is
494:43 - exploding
494:44 - so for right now none of this really
494:46 - matters we can just go if
494:49 - laser
494:50 - dot exploding
494:52 - so if the laser is exploding and we're
494:53 - going to make sure if it's 2 then we can
494:56 - just say self dot destroy laser and this
494:59 - destroy laser if you can remember from
495:01 - the previous video it just destroys the
495:04 - laser very simple
495:06 - this is going to become a bit more
495:07 - complex in a second but i just want to
495:09 - get the idea out next we can go to
495:12 - lasers and when we go to explode we can
495:14 - just make it disappear so we can just
495:16 - actually for right now remove that we
495:19 - don't need that we just hit the
495:20 - exploding
495:22 - tutu now once it explodes it's going to
495:24 - set the exploding two two so we should
495:26 - also go here
495:27 - and say
495:28 - if
495:30 - self not self
495:33 - if
495:33 - laser
495:35 - dot distance so the distance it has
495:38 - traveled if it is more than the max
495:40 - laser distance so actually this right
495:42 - here so let's actually just go here
495:45 - instead and let's just go and add and
495:48 - because it already has the first part
495:50 - so if it has to travel the distance
495:53 - of the max it can
495:55 - and the
495:56 - laser dot exploding is equal to zero so
496:01 - only if it's not currently busy
496:02 - exploding
496:04 - then we can explode the laser
496:07 - so we can just go here and change this
496:08 - to explode
496:10 - and this can now be laser
496:12 - colon explode
496:14 - and it doesn't need anything this
496:16 - destroy laser however needs self and
496:19 - index
496:20 - so we will now actually see if it works
496:22 - we'll move this explode up
496:25 - so if it works it should ex or it should
496:28 - disappear once we run it
496:32 - shoot it's gone okay so it does work
496:36 - we can now just make it work better
496:38 - because as you can see they do disappear
496:41 - all right now that we know it works and
496:43 - it disappears
496:45 - let's upgrade what we have
496:47 - so if this explode we can then say
496:49 - self.explode time
496:52 - is equal to
496:54 - math
496:55 - dot seal
496:56 - to make it go upwards explode duration
497:01 - times and here we can just say love dot
497:04 - graphics dot
497:06 - get fps
497:08 - and it should be timer
497:10 - dot get fps yet again i would recommend
497:13 - we actually use dt
497:15 - but in this scenario it's not too
497:17 - important
497:18 - and we can divide it by 100
497:21 - and this will basically say
497:23 - how long
497:24 - it has been exploding for then we can go
497:26 - here and say if
497:28 - self dot explode time
497:31 - is more than explode duration
497:35 - we can just put that there and exploding
497:37 - is equal to two then
497:39 - now as we know if the explode time is
497:42 - more than zero so if explode time is
497:44 - more than zero it will sit exploding to
497:47 - one for us and then it will be busy
497:49 - exploding and we can draw things here
497:52 - like it is busy exploding like some nice
497:55 - things now the nice things i do want to
497:58 - draw is maybe like a yellow and an
498:00 - orange explosion animation type of thing
498:03 - and it will just appear once it's busy
498:05 - exploding so let's go here where we draw
498:09 - everything and we can just say if
498:12 - self dot exploding
498:15 - is less than one so if it's not
498:18 - one or two if it's zero
498:21 - then we can just do this what we've been
498:23 - doing this whole time
498:25 - otherwise if it is busy exploding we can
498:28 - go else
498:29 - then we can say love dot
498:31 - graphics
498:33 - dot set color and this will be of the
498:36 - outer explosion so the bigger
498:38 - explosion
498:39 - and we can just say
498:41 - one for complete red then
498:44 - 104 divided by 255
498:47 - and then no
498:49 - blue and you can also pass in the
498:51 - opacity in case they're pausing and we
498:53 - can set the color for the inner
498:55 - explosion so the smaller explosion
498:57 - inside to give an example of what i'm
498:59 - talking about let me just go here
499:01 - if i shoot
499:03 - as you can see it's paused but as you
499:05 - can see there's like a little
499:07 - orange part and then inside of it
499:09 - there's a yellow part
499:12 - and that's what we're currently doing we
499:13 - first did the orange part we're now
499:14 - going to do the yellow part
499:17 - and let's actually just copy this lava
499:19 - color
499:22 - and yellow would be a bit more
499:24 - greenish two three four
499:28 - and she gives it like a yellowish color
499:32 - we're gonna go here and say
499:34 - love dot graphics and we can draw a
499:36 - circle
499:37 - dot
499:39 - circle and you could of course make this
499:40 - way more complex and cooler but i think
499:43 - this is fine for now
499:44 - fill
499:45 - and then
499:46 - self dot x to give the x position of the
499:50 - laser and then self dot y
499:53 - to get the y position of the laser and
499:56 - then we want to make it a spatial size
500:00 - we first just make it a seven that's
500:01 - about that's not very big
500:04 - but
500:05 - the bigger one and we can just get times
500:07 - one
500:08 - the bigger one however will be times one
500:10 - point five
500:12 - so it will be a teeny weeny top bit
500:14 - bigger so around ten whilst this one
500:17 - here
500:18 - this one will just be seven you can even
500:20 - remove that if you want and just have a
500:22 - seven there
500:23 - but this would be seven and this would
500:24 - be almost ten maybe ten but yeah you
500:28 - could make this more like two and you
500:30 - could put this in a variable to make it
500:32 - a set size and you just add to it but
500:34 - yeah it's up to you you can change this
500:37 - so it's not math it's just a number that
500:39 - you put in there it's up to you
500:41 - now let's go look here if we run this
500:45 - then at 62 instead of our laser
500:49 - we have a problem
500:52 - it's right here
500:53 - and this should not be and
500:56 - this should be
500:58 - times my bad
501:00 - and now if you run it we should not be
501:02 - getting any errors
501:04 - cool they're not going to quite explode
501:06 - as we want just yet because if it
501:09 - doesn't hit anything we don't really
501:10 - want that explosion animation to happen
501:12 - it should just disappear otherwise it
501:14 - would be kind of weird if it just
501:15 - randomly
501:16 - flew and then boom it exploded
501:19 - then that would be bit weird
501:21 - cool let's go to player
501:23 - so first this laser move we don't always
501:26 - want to move laser if it's busy
501:27 - exploding
501:29 - the laser should just stop moving
501:31 - otherwise it's just going to hit an
501:33 - asteroid and keep on moving which is a
501:34 - bit weird but could be cool if that's
501:36 - what you want so we are already doing
501:38 - the whole explode thing here so let's go
501:41 - here to where we say exploding is equal
501:43 - to two and let's add another if
501:45 - statement
501:46 - above it
501:47 - and this one can be if it's one i mean
501:50 - not two but if it's a zero so if it's
501:52 - zero then we just want to move because
501:54 - then it's not currently exploding so you
501:56 - can just go like this but yet again we
501:58 - sit with the problem it can move and it
502:01 - can explode on the same time so you can
502:03 - just go here and say
502:05 - else if so either this one else this one
502:09 - but if it's not zero or two it's not
502:12 - going to do either of these so if it's
502:14 - one it's just going to stand still and
502:16 - it's not going to remove the laser from
502:18 - the screen because here it removes the
502:20 - laser from the screen and here it moves
502:22 - the laser but if it's one it's busy
502:25 - exploding and showing us that orange and
502:27 - yellow so we don't want to then move it
502:30 - or destroy the laser just yet
502:32 - all right
502:33 - now let's go to main
502:36 - and here maybe an update
502:38 - i'm going to
502:40 - hide this
502:41 - we can now go
502:43 - and go for
502:44 - and we don't need the index we just need
502:46 - the laser and we can just say player dot
502:50 - lasers and here we go
502:53 - laser
502:54 - colon or we don't need to expose it
502:57 - first we need to calculate the distance
502:59 - so
503:00 - if
503:01 - and then we can use calculate distance
503:04 - which is coming from that global file so
503:07 - require globals
503:09 - so that's required distance
503:11 - and then go laser dot x laser dot y so
503:16 - this is the first one this is where we
503:18 - are
503:19 - and then we need to go or then we need
503:20 - to add where we're going so the asteroid
503:23 - asteroid
503:24 - dot x and the asteroid
503:28 - dot y
503:29 - and this will calculate the distance
503:31 - between the two
503:32 - if it is less
503:35 - than the asteroid dot radius
503:38 - so if this right here
503:40 - is less than this radius of the asteroid
503:43 - so if it has entered the radius of the
503:45 - asteroid basically
503:47 - then we want to
503:48 - laser curl and explode then we want to
503:51 - explode the laser
503:53 - let's see if that works
503:56 - and that's going off screen
503:57 - and there we go
504:00 - pew and it is although it's not doing
504:04 - much it is there
504:06 - so we
504:07 - give it a shoot shot again as you can
504:09 - see now if it enters or almost enters
504:12 - depending on how
504:14 - the circle is positioned then there we
504:16 - go
504:17 - now if we were to turn on debugging here
504:19 - so if we were to rub globals again
504:22 - and we were to make debugging true
504:25 - we could see where the
504:29 - laser will explode so the red circle is
504:31 - where it will explode
504:33 - so it won't necessarily explode on this
504:35 - part right there it will explode once it
504:37 - hits the red circle
504:42 - cool
504:43 - now once we do this
504:45 - we need to
504:47 - also
504:48 - destroy the asteroid so let's go here to
504:51 - asteroids and we can add another
504:54 - function
504:55 - right underneath move
504:56 - you can also call this explode i'm going
504:59 - to call it destroy because you're
505:00 - destroying the asteroid but it's not
505:02 - necessarily exploding so destroy is
505:05 - equal to a function
505:06 - and this takes itself
505:08 - the asteroid
505:10 - table
505:11 - so this asteroids table will be provided
505:14 - to us
505:15 - it is to basically get the asteroid you
505:18 - want to destroy you could put this
505:20 - somewhere else so you don't have to make
505:22 - it part of the asteroids in fact it
505:23 - would make sense if you didn't make it
505:25 - part of the asteroid but it also makes
505:27 - sense if you do it's up to you if you
505:29 - make a part of the asteroids or not
505:31 - but then we also want the index of the
505:33 - one we want to destroy
505:35 - and then we want to take in the game as
505:36 - well so the game state i'll show you one
505:39 - we'll need all of this in a second
505:41 - first let's just remove it so table
505:43 - dot remove
505:45 - and then from the asteroids table
505:47 - the index
505:48 - so these two are passing in so let's
505:50 - quickly remove game for now
505:53 - when if we have this
505:55 - we can then go here let's let's include
505:56 - game it's not that big of a deal adding
505:58 - it here then here we can say asteroid
506:01 - colon destroy because if it's here then
506:04 - that means
506:05 - the laser has penetrated the asteroids
506:07 - we need to destroy it and we can say
506:09 - asteroids
506:11 - then the ast index that we're getting
506:14 - here so this is the table and this is
506:16 - the index
506:18 - and you can just pass in game as well
506:20 - game which is right here if we save this
506:24 - then the asteroid should also be
506:25 - destroyed once we hit it as you can see
506:27 - it's gone i'll do it again
506:30 - and then my player is gone very annoying
506:32 - bug
506:33 - i go here
506:35 - shoot gone
506:37 - now we want to split the asteroid up
506:39 - into multiple
506:41 - smaller asteroids
506:43 - so let's go here to asteroids
506:45 - and where we say destroy we can then go
506:47 - local
506:49 - min asteroid
506:52 - size and this will be the minimum size
506:53 - an asteroid can get and you say math
506:56 - dot seal and you could put this right
506:58 - here you could put it
507:00 - like up here that will also be perfectly
507:03 - fine i'm just going to do it here
507:04 - because why not and we can say asteroid
507:07 - size to the current asteroid size we
507:09 - have
507:10 - divided by eight you can change this to
507:12 - fit you however you think would be best
507:15 - then
507:16 - if
507:17 - self.radius
507:18 - if it's more
507:20 - then
507:21 - min asteroid size
507:24 - then
507:25 - we want to
507:26 - basically split the asteroid in half
507:30 - so table dot insert
507:33 - asteroids table so into this table right
507:35 - here an asteroid
507:37 - object
507:39 - with the position of self.x so the
507:41 - current asteroid exposition
507:43 - self.y
507:45 - solve the radius
507:47 - and then the game dot level
507:50 - let me go here and say self dot radius
507:53 - if we go up here to draw
507:55 - or not draw but
507:57 - here we're taking an x y
508:00 - the size and then the level
508:02 - and here we could
508:04 - make another one
508:05 - and now we have two new asteroids
508:08 - now if you wanted to you could make this
508:10 - go you can go another step and add
508:12 - another asteroid but only once one of
508:15 - these asteroids has been destroyed so
508:16 - then it splits up into three smaller
508:18 - asteroids so once the second smallest
508:20 - asteroid has been destroyed you split it
508:22 - up into three so the big asteroid
508:25 - that splits into two is your smaller
508:27 - asteroids and then this will also split
508:29 - into two but you could make it split
508:31 - into three if you're not too lazy
508:34 - however i'm going to leave it as is
508:36 - because i'm fine with it as is
508:38 - if we run the game
508:40 - and we shoot
508:43 - there we go now it's split into two
508:46 - there we go now that's also split into
508:48 - two but you could make it split into
508:49 - three if you think that's better and it
508:51 - will be more challenging
508:52 - we go here we shoot
508:55 - now there's two and then you can destroy
508:57 - the wrist
508:59 - and then here we go and the pvp
509:02 - gone
509:03 - and yeah
509:04 - that is the basics of adding collision
509:07 - detection to our game
509:15 - now we're not going to implement quite
509:17 - everything just yet we're going to
509:18 - explain the basics of destroying the
509:20 - player but a lot of the things that
509:22 - we're going to also implement will come
509:24 - later along with different parts of this
509:27 - tutorial so things will maybe be coded
509:30 - out for the future sake as other things
509:32 - will just
509:34 - be lit
509:35 - for
509:36 - later yeah so to give an example of what
509:40 - we'll be doing
509:42 - we go here
509:44 - we fly
509:46 - boom
509:47 - there we go
509:49 - so first
509:50 - let's open up the globals i want to add
509:53 - another item here
509:55 - so destroy
509:58 - asked for asteroid
510:00 - now
510:01 - you could put this inside of the
510:02 - asteroids object and i would i would
510:04 - encourage you to do if you want to
510:08 - however this global object will make it
510:10 - a lot easier to manage this
510:13 - in the future since we will be doing
510:15 - using this destroy asteroid in multiple
510:18 - files cool
510:22 - next up we can open up the player
510:25 - and it will be a lot like our
510:29 - laser
510:30 - course with collision
510:32 - but it won't just be for the player so a
510:33 - lot of the things will stay the same but
510:35 - just a bit modified for the player
510:38 - for example
510:41 - local
510:42 - explode there for exploded duration and
510:46 - that would be free so this is how long
510:48 - in seconds and the scenario three
510:50 - seconds
510:52 - then we can go here
510:54 - and we can say
510:57 - explode
510:59 - time so how long it has been exploding
511:01 - for so we'll make that zero
511:03 - exploding so if it's currently exploding
511:06 - we can make that false
511:09 - and unlike with the lasers we don't need
511:12 - a third item in exploding it can just be
511:14 - either exploding or it's not exploding
511:16 - we do need a third one
511:18 - since in usually what will happen is
511:21 - if it has finished exploding
511:23 - unlike with the laser where it just
511:25 - disappears and you know you can just
511:27 - shoot another laser
511:28 - here if the player has exploded
511:31 - then once the explosion finishes we'll
511:33 - start a new game
511:36 - or not a new game but just we'll put a
511:38 - player back and we'll respawn the player
511:40 - basically
511:42 - and we'll do that in a future tutorial
511:45 - cool
511:46 - now first thing we can do
511:48 - is we can close this
511:50 - we can close this
511:53 - and we can draw the player exploding
511:56 - so right here before the frosting
511:57 - because we don't want to frost or move
511:59 - or things like that if the player is
512:00 - exploding so we can say if
512:02 - not
512:04 - self dot
512:06 - exploding so if it's not currently
512:08 - exploding
512:11 - then we want to do all of this
512:14 - and here we can just say
512:17 - oh we can just end for now it's fine
512:21 - and we can invent this
512:24 - so
512:25 - if the player is not currently busy
512:27 - exploding allow the player to thrust
512:29 - forward and to move around and whatnot
512:33 - however
512:34 - if the player is exploding then do
512:36 - something else so draw something else
512:40 - and this will be very similar to our
512:43 - laser what we have drawn here
512:45 - so this right here so we can actually
512:47 - copy that it will just be modified a bit
512:50 - and we can paste it here
512:54 - so first we want the
512:56 - largest circle
512:59 - to be just pure red just to give it more
513:02 - intensity because
513:03 - the
513:04 - ship itself is much larger and much more
513:07 - complex
513:09 - than a laser so you want the ship's
513:11 - explosion to also look like it means
513:14 - more because it does mean more than the
513:15 - laser the laser explosion disappears
513:18 - faster and it doesn't it only has like
513:20 - two colors and it's very small
513:22 - here we want it to be rather large
513:26 - and to have more than two colors to show
513:28 - hey this is some big thing that exploded
513:31 - here
513:33 - this can stay the same
513:35 - however this time we can use
513:37 - self dot radius instead because
513:42 - we now have a
513:44 - radius to work with instead of just a
513:46 - dot
513:47 - same here we can say self to radius and
513:49 - then just times one or we can remove it
513:51 - and it doesn't have to say times one at
513:52 - all
513:53 - then here we can say one five eight to
513:57 - give it a nice little color here
514:00 - and then if we were to
514:02 - copy this paste it here
514:05 - and in here we can say
514:07 - two three four this will be the smallest
514:10 - one and it will be
514:11 - 0.5
514:14 - so you can see how they scale in size
514:16 - now that we use times and now you'll
514:18 - understand why we use times to help it
514:21 - scale without us having to do much and
514:24 - this is how it will look once it
514:25 - explodes we'll take a look on how that
514:28 - looks
514:29 - in a second
514:30 - currently let's actually just allow the
514:32 - player to explode
514:34 - so let's go to the move player section
514:37 - i'm just going to hide this draw
514:39 - in the move player section
514:42 - this whole part here
514:44 - we can just say if
514:47 - not
514:48 - self.exploding
514:50 - so if the player is not currently
514:52 - exploding
514:54 - then we can do everything
514:56 - and then paste that in there
514:58 - and you can just invent
515:01 - and there we go
515:03 - so if the player is exploding
515:06 - now you can see if the player is
515:07 - exploding we're going self
515:09 - dot exploding is equal
515:12 - to
515:13 - self.explode
515:16 - explode time could you please
515:17 - autocomplete there we go
515:19 - if that is more than zero so this will
515:21 - return true or false if the explode time
515:23 - is more than zero then the player is
515:26 - exploding
515:28 - cool
515:29 - so this will only execute
515:32 - if it's not exploding
515:34 - however take note that we don't want to
515:38 - actually stop
515:39 - the laser so this whole section here for
515:42 - the lasers
515:43 - we can move that to underneath the end
515:47 - of this if statement so there's this one
515:49 - right here
515:50 - it does not hold the lasers the lasers
515:52 - can still move and stuff if the player
515:54 - explodes the player explodes but lasers
515:57 - are not affected by it
516:00 - we can then save
516:02 - and then finally we can implement an
516:04 - explode function
516:07 - so as a function takes itself and now we
516:10 - can just say self dot explode time
516:14 - is equal to math
516:16 - dot seal
516:18 - and then specify explode duration
516:24 - times
516:26 - love
516:27 - love dot timer
516:29 - dot
516:31 - get fps
516:34 - there we go
516:35 - so this will explode the player for us
516:38 - we can then go here to globals
516:41 - not globals my bad we then go here to
516:44 - the main file
516:47 - and here where we have an update
516:50 - we can go to when it's running
516:53 - so right here when it's running then we
516:55 - have our move player first
516:57 - then we do our asteroid stuff
517:00 - then here in the asteroid stuff we can
517:02 - go
517:02 - if
517:05 - not so the player
517:07 - is not exploding
517:10 - so player
517:11 - dot exploding so if the player is not
517:14 - exploding
517:15 - we can copy this line of code for the
517:17 - laser
517:18 - like that we can paste it here
517:21 - and this will allow us to check if the
517:24 - player has collided however we don't
517:26 - need this for loop so we can just remove
517:28 - that on indent
517:30 - we have a calculate distance but this
517:32 - time instead of the laser
517:34 - it's the
517:35 - player so the player x player y
517:39 - and then player explode
517:42 - and in here we also want to go and then
517:45 - instead of saying asteroid destroy
517:47 - you want to say asteroid or
517:50 - destroy asteroid is equal to true
517:54 - and this is in our globals file destroy
517:58 - asteroid
517:59 - if this is true we want to destroy the
518:01 - asteroid
518:03 - however we don't need to set that here
518:06 - we're only setting it here if the player
518:08 - specifically explodes into an asteroid
518:11 - and you will understand more about why i
518:13 - did this in the future
518:15 - or why we are doing this
518:18 - then here we can say else so if the
518:20 - player is exploding
518:22 - then player dot explode time
518:25 - is equal to player dot explode oh gosh i
518:30 - can type
518:32 - player dot explode
518:35 - time
518:37 - minus one so it will decrease if the
518:40 - player is exploding
518:42 - then after this for loop we can go
518:45 - if
518:46 - so if we want to
518:48 - destroy
518:51 - the asteroid
518:53 - then you want to sit destroy asteroid to
518:55 - false again because we're destroying the
518:57 - asteroid
518:58 - and then
519:00 - we got asteroid
519:03 - colon destroy
519:06 - and we just actually copy this little
519:07 - asteroid destroy thing because it's the
519:09 - same code
519:10 - now one reason why we are doing this
519:12 - right here and not this here as well is
519:15 - because here there are multiple lasers
519:17 - that's going to try and destroy the
519:19 - asteroids so if two lasers
519:21 - collide with this with different
519:22 - asteroids at the same time we're going
519:25 - to have a problem because what is it
519:27 - going to do destroy asteroids is true
519:30 - so what
519:31 - if you understand what i mean here
519:33 - because if two
519:34 - lasers collide against two separate
519:36 - asteroids but a destroy asteroid is true
519:39 - it is going to be incredibly confusing
519:42 - anyhow in there we have our asked index
519:44 - and we have our game and then here we
519:45 - can move the asteroids
519:47 - now let's run the game and see if we
519:49 - explode
519:52 - boom
519:53 - and yep
519:54 - the rest of the asteroids are moving
519:57 - however if we go and we fly against an
520:00 - asteroid
520:01 - we can still see our player we don't
520:03 - want that we don't want to see our
520:05 - player
520:07 - so we should go here to player and you
520:09 - should make sure
520:11 - we got the if else statements correctly
520:13 - so if not exploding
520:16 - then it everything is just held in
520:19 - i mean this is for the moving it's not
520:20 - for the drawing okay let's go to draw
520:22 - now let's see here
520:25 - if not exploding then we can do
520:27 - everything in here
520:29 - however if the ship has exploded
520:32 - then let's see here what's happening
520:34 - all right i see
520:36 - so here we already have a bunch of
520:37 - things but this is only for the thruster
520:39 - we need to include everything as well i
520:41 - kind of missed all of this so let's just
520:44 - go like this
520:46 - and we can just
520:48 - cut
520:49 - and we can go here
520:51 - and we can just say paste
520:54 - so now we'll not only just not draw the
520:56 - thrusters but will not draw anything
520:58 - else
520:59 - while we are exploding so if we go like
521:01 - this
521:02 - and now if we were to try and hit an
521:04 - asteroid
521:05 - we can't see our player anymore
521:08 - and there we go
521:10 - we've implemented
521:12 - collision detection for the player
521:15 - and hello everyone if you're enjoying
521:17 - this tutorial please leave a like and
521:19 - subscribe for future tutorials
521:22 - in this tutorial we'll be adding lives
521:24 - to the player so once the player
521:26 - explodes instead of the game just ending
521:29 - they have a few more lives they can spin
521:31 - before the game is completely over
521:34 - so let's get started with that
521:36 - first
521:37 - i want to give you an example of what we
521:39 - currently have so if we were to go here
521:41 - and say love dot
521:44 - what we currently have there goes our
521:46 - asteroid off screen so it should appear
521:48 - out about there somewhere yeah and boom
521:51 - we explode
521:53 - and we just kind of continue
521:56 - just very boring
521:58 - however when we explode that shouldn't
522:01 - happen or when we hit something that
522:03 - shouldn't happen in fact this should
522:05 - happen
522:06 - so this is an example of what we'll be
522:08 - doing so as you can see at the top our
522:09 - player lives are there
522:11 - when we hit an asteroid
522:13 - the player lives they go red they
522:15 - disappear and we start in the middle of
522:16 - the screen again
522:19 - and we can use up all our player lives
522:21 - until we are no longer there
522:24 - once we are no longer here
522:27 - then
522:28 - game ends the last asteroid does not
522:31 - explode once we hit it that is to
522:33 - prevent a bug but you don't have to
522:35 - worry about that bug because i'm fixing
522:37 - it here for you anyways
522:39 - but let's get started
522:41 - so
522:42 - first we want to now take in the num
522:45 - lives
522:46 - so how many lives the players should
522:48 - have
522:50 - then down here we can just say
522:54 - lives is equal to num lives or by
522:57 - default they can be free so if you don't
522:59 - pass in a number of lives it will be
523:01 - free by default
523:04 - next up let's draw the player lies
523:07 - so maybe right here underneath draw we
523:10 - can say draw
523:12 - lives
523:14 - this is a function
523:16 - that takes in self and faded
523:21 - cool
523:22 - we can copy a lot of things from this
523:24 - player draw
523:26 - so if you do not mind i am going to copy
523:28 - basically everything from here because a
523:31 - lot of this code is copy paste from
523:34 - what we already do in draw because first
523:36 - we set the opacity
523:38 - depending on if it's faded the opacity
523:40 - will change
523:42 - and in here
523:43 - is where it fades a little bit from what
523:45 - we do
523:46 - usually against what we
523:49 - want to do
523:50 - we'll still keep a lot of this for
523:51 - example this right here we want to keep
523:53 - this
523:55 - so let me just delete this part here and
523:57 - this laser part as well
524:00 - we can keep this polygon
524:03 - and this
524:04 - color we can remove the debugging
524:07 - because we will be doing debugging on it
524:09 - and we can also remove all of this
524:12 - and now we have a bunch of the code
524:14 - already given to us because we have
524:16 - already coded a lot of this
524:19 - nice let's just indent this to a
524:21 - there that's much better
524:25 - now
524:25 - first we want to see what color our
524:28 - lives should be because if we go back to
524:30 - this example i have
524:34 - and i can just move it over
524:36 - and as you'll see if we have three lives
524:38 - then it's white the same color as the
524:40 - ship
524:42 - if we hit an asteroid then it becomes
524:45 - yellow
524:46 - and if we hit an asteroid again where we
524:48 - only have one live lift if i don't miss
524:50 - the asteroid which i did again
524:54 - my aim is terrible
524:56 - and now it will be red because hey you
524:59 - should watch out buddy you only have one
525:01 - live left
525:03 - and that's what we want to do here so we
525:04 - want to set the color depending on the
525:06 - amount of lives the player has
525:09 - so first we can say if
525:13 - self.lives is equal
525:15 - to two so they have two lives
525:18 - then
525:20 - we can copy this right here
525:22 - paste it there and we'll modify it in a
525:24 - second
525:25 - then we can say else
525:28 - and this will also contain an if and
525:30 - then else so we're going to go like this
525:33 - and then we can just copy this and
525:36 - paste it here
525:38 - and we can remove this
525:40 - now if they only have two lines left we
525:42 - want to make it one one and in 0.5 and
525:46 - this will make it a kind of a yellowish
525:47 - color
525:49 - if they have one life left then we want
525:51 - to make it red but not completely red
525:54 - just a little red
525:57 - so it will be red and then 0.2 green and
526:01 - 0.2 blue
526:04 - and in here if they have
526:06 - three lives so if they have three or
526:08 - more lives in the scenario because
526:10 - there's a two and a one if you want to
526:11 - add like five lives you can maybe add
526:13 - more colors or you can just make them
526:14 - all white until it hits two and they
526:17 - will change color
526:18 - anyhow if they have one will be red and
526:21 - if they don't have two or one if they
526:23 - are free it will be white
526:26 - and in the draw lives we need basically
526:29 - to get the x and y positions or to give
526:31 - it a default x and y position
526:34 - you can make this like a more globally
526:36 - state one like put it here or even put
526:38 - it here it doesn't really matter too
526:40 - much in this scenario i just want it
526:42 - here at the top of the screen so i'm
526:44 - going to do an easy
526:46 - local
526:48 - x
526:49 - pause
526:51 - y
526:52 - plus
526:54 - is equal to 45 and 30.
526:57 - so x would be 45 and y would be 30. so
527:00 - 45 from the side 30 from the top
527:03 - then we can create the for loop so 4
527:07 - i and one
527:09 - to self
527:10 - dot live so the amount of lives we have
527:15 - and we want to basically draw free lives
527:17 - so you can just plop that in there
527:19 - because the lives are the same shape as
527:20 - the spaceship
527:22 - and we can go
527:23 - if we are exploding so if self
527:27 - dot
527:28 - exploding
527:31 - then
527:33 - and then
527:34 - if
527:36 - i is equal to self dot lives so the
527:40 - amount of lives you have so we don't
527:42 - want this to happen if we have more less
527:44 - lives on the screen than what we
527:45 - currently have or more you know
527:48 - they want to basically make the
527:50 - heart completely red
527:52 - so
527:53 - love dot graphics dot set
527:56 - color
527:58 - and then
527:59 - one zero
528:01 - zero so basically once we explode then
528:04 - it should change the color of the
528:06 - spaceship
528:07 - to pure red until the explosion is over
528:10 - in which case it will switch to
528:12 - whichever colors are here
528:15 - cool
528:16 - the on here since we can't just draw the
528:19 - spaceship on the same position or at the
528:21 - same position
528:22 - everywhere we need to specify a few
528:25 - things here to make the
528:27 - the lives go in different locations
528:29 - because if we don't
528:31 - then the lives here there wouldn't be
528:33 - three lives like i i wish i could show
528:35 - my cursor here but there will be like
528:37 - three lives there
528:39 - there will only be one and
528:41 - two others on top of it
528:42 - so we need to specify where to position
528:45 - it so instead of self.x here
528:49 - we can go
528:50 - and say
528:52 - i so the current index we are on or the
528:54 - current position
528:56 - times x position and this will
528:59 - give it its wanted x position
529:02 - and then as for the self.y since the y
529:05 - will never change unless you make it go
529:07 - in the x direction instead of or in the
529:10 - y direction instead of an x direction
529:12 - then the y will never change so why
529:15 - pause
529:17 - but if you wanted to you could make the
529:19 - heart
529:21 - go from top to bottom instead of from
529:23 - left to right it depends on what you
529:26 - want personally i think going from left
529:28 - to right is perfectly fine
529:31 - but once you have done that
529:33 - then
529:34 - boom
529:36 - we are basically ready to go
529:39 - now we also need to remember
529:41 - that we don't want these to change angle
529:44 - with the spaceship you could
529:46 - there's nothing wrong with it it's just
529:48 - if you make a change angle with the
529:50 - spaceship
529:51 - then that it could
529:53 - kind of make the player a little bit
529:56 - confused about like while he's playing
529:58 - and suddenly he sees the spaceship
530:00 - hearts moving as well it could be cool
530:02 - but it could be very distracting
530:04 - personally i think it's too distracting
530:06 - and i'm going to remove it but you don't
530:07 - have to if you think it's a cool feature
530:11 - instead we can go here select all of
530:13 - these
530:14 - and remember this
530:15 - view angle we created here at the top
530:19 - that is the default angle or spaceship
530:21 - is always at so we can just specify
530:24 - view angle instead
530:27 - so now it will always face 90 degrees
530:29 - and never change but if you want it to
530:31 - change then you could then again 100 do
530:34 - that
530:34 - i just don't care to make a change
530:38 - cool
530:40 - next before we continue i would like to
530:42 - go to globals
530:44 - and make sure this is here
530:47 - just to make sure that is there so if
530:49 - you forgot about this just put it there
530:53 - nice so next up we can just go to
530:55 - the main
530:57 - file
530:59 - and let's draw our lives so let's go
531:01 - here
531:03 - and we can say
531:04 - player
531:05 - colon
531:07 - draw
531:08 - lives
531:10 - i know if the game is paused so game
531:13 - dot state
531:15 - dot paused because if the game is
531:17 - supposed to want it to be
531:18 - faded and here we go that shouldn't be
531:21 - an end symbol my bad that should be
531:23 - eight times
531:24 - okay now let's try it
531:26 - there we go so now our lives are right
531:28 - up here
531:29 - as you can see
531:31 - so that's nice
531:33 - currently if we hit an asteroid
531:34 - nothing's going to happen we're just
531:36 - going to kind of die and respawn and
531:38 - then hit them again and again again we
531:40 - don't want that to happen anymore
531:42 - because we now have lives we want the
531:44 - player lives to decrease and the player
531:46 - to restart from where he was where she
531:49 - was
531:50 - so
531:51 - let's go to the top
531:53 - and
531:54 - let's see and this is not the right file
531:56 - we go to menu and here it says explode
531:59 - time and then what the explode time does
532:02 - we can go and say
532:04 - if
532:06 - player dot explode time
532:10 - if that is equal to zero
532:14 - then we want to go
532:16 - if
532:17 - player.lives
532:20 - minus one is less than zero meaning if
532:23 - the player
532:25 - doesn't have any lives left
532:28 - then game colon change game state to
532:34 - ended because the player
532:36 - amount of lives minus one is less than
532:38 - zero meaning they have like negative one
532:40 - lives left
532:42 - then end the game
532:45 - and we should make this laser equal to
532:47 - because
532:48 - yeah just because
532:49 - but you could make it less than one if
532:51 - you wanted to
532:52 - because this city player has one life
532:54 - left now they hit an asteroid now one
532:57 - minus or now the player lives i mean
532:59 - changes to zero and zero minus one
533:03 - that is negative one and that's less
533:04 - than zero
533:06 - so in return it should change the game
533:08 - state to end it because the player has
533:10 - zero lives left then we don't want the
533:12 - game to continue
533:14 - and then we can just say return because
533:16 - we don't want this to continue the loop
533:18 - or to continue to continue this loop
533:21 - nice
533:23 - otherwise just always go player
533:26 - is equal to and then
533:28 - a new player
533:30 - and in the player
533:32 - dot lives minus one
533:37 - and there we go so now the player will
533:40 - always have one less of a life
533:43 - once they hit this or once they finish
533:46 - exploding
533:47 - and i should save without formatting
533:50 - now if you run this
533:52 - and let's see what happens when we hit
533:53 - this asteroid
533:55 - we lose the life
533:57 - and we start back at the screen
533:59 - the reason we started back at the center
534:01 - is because we create a new player and
534:02 - when we create a new player
534:05 - the player by default is in the center
534:07 - of the screen because that's what we
534:09 - hard coded here in a sense we basically
534:11 - said hey once we create a new player put
534:14 - them in the center x and y and that's
534:16 - what's happening here we're creating a
534:17 - new player and storing that player in
534:19 - the old player variable
534:21 - so don't get too confused here we're
534:22 - just creating a new player object
534:24 - storing it in here but it kind of has a
534:26 - lot of the old player stuff
534:30 - by that i just mean the lives
534:31 - so yeah now if we hit an asteroid we go
534:35 - we lose a life now we have less lives if
534:37 - it's another asteroid we lose life
534:40 - let's hit another asteroid here
534:43 - and there we go
534:45 - now the game has changed to ended state
534:49 - okay meaning it's basically over
534:52 - now i still want to do a few more things
534:55 - before we continue
534:57 - so here if destroy asked
535:00 - we can now go
535:02 - if
535:04 - and then else
535:06 - now instead of the else we can now put
535:08 - this
535:10 - and in this if statement can check
535:12 - player.lives
535:14 - minus one if that is less or equal to
535:17 - zero
535:19 - then
535:20 - we want to go
535:21 - if
535:23 - player dot explode time
535:26 - is that is equal to zero as well
535:30 - then we want to set this
535:33 - here as well
535:35 - so basically if the player lives
535:38 - is less or equal to zero
535:41 - basically the same check we did here
535:44 - however this check will not execute
535:47 - quite as quickly because this one will
535:50 - execute after this check so this check
535:52 - may be false then this executes where
535:54 - this check could be true but it executed
535:56 - after
535:57 - that so see this executed after just
535:59 - right here so after the check so player
536:01 - lives here could still be two then we go
536:04 - here and then player lives is one
536:07 - because remember code goes from up to
536:09 - down
536:10 - they're doing the same thing here but
536:11 - now it's here at the bottom and since
536:13 - it's going up to down it will trigger
536:15 - this
536:17 - and we check if the explode time is
536:19 - equal to zero
536:21 - then just do everything as normal
536:24 - however
536:25 - if the explode time is not equal to zero
536:27 - then it just don't do anything at all
536:30 - the reason for this is once we basically
536:33 - finish the game yeah once we basically
536:35 - get to the last asteroid and we hit that
536:38 - asteroid for player
536:40 - it can cause a few issues
536:43 - and this will just cause or this will
536:45 - just fix a bug in the future
536:48 - but you don't have to worry too much
536:49 - about this just put that there
536:52 - save our game we run our game and now we
536:56 - fly
536:57 - we hit
536:58 - we respawn
537:00 - we wait for our targets to come back
537:03 - we fly
537:06 - we hit we respawn and now for the last
537:09 - one we fly
537:12 - we hit
537:13 - it doesn't get destroyed immediately and
537:15 - that is exactly what we want because
537:16 - that could cause errors because let's
537:18 - say that's the very last asteroid before
537:20 - we go to the next level and it wants to
537:22 - go to the next level once we hit it
537:24 - but once we hit it we and we have our
537:27 - last life there it's not going to be a
537:28 - good match
537:30 - because let's say we only have one life
537:31 - left and there's only one asteroid left
537:33 - once we hit that asteroid and we lose
537:35 - our one life it wants to go to the next
537:36 - level and this is in the future once we
537:38 - implement levels
537:40 - but if it wants to go to the next level
537:42 - and we just lost our last life that's
537:44 - going to cause a few errors and so we
537:46 - say if we hit against an asteroid with
537:48 - our last life
537:50 - then it's game over then we don't get
537:52 - that point or anything like that
537:59 - in this tutorial we want to add a menu
538:02 - to our game
538:04 - so to give an example of the menu we're
538:06 - going to create
538:08 - we go here
538:09 - we have our little player circle
538:12 - we have a quit we have a settings and we
538:14 - have a new game if we click on quit it
538:16 - will quit the game
538:20 - settings will be your homework so
538:21 - clicking on settings will do will not do
538:23 - anything
538:25 - and then clicking on new game will start
538:27 - a new game
538:29 - then let's go here
538:34 - and then once we reach our last life
538:36 - it will give us a game over screen but
538:38 - we have yet to implement that but once
538:40 - we finish implementing that then after
538:42 - the game over screen it will take us
538:44 - back to the menu screen and that is what
538:46 - we want to do
538:48 - okay but this tutorial is going to be
538:50 - pretty long so we won't be doing the
538:52 - ending screen just yet
538:55 - so first
538:57 - let's go here to the game.lua file
539:02 - and let's go to the top
539:04 - and here where it says state
539:06 - i want to change all of the other states
539:08 - to false
539:09 - and the menu state to true so by default
539:12 - the menu state will be true
539:15 - meaning once we
539:17 - basically
539:18 - start up the game it will give us the
539:21 - menu state not currently but it should
539:23 - give us the menu state
539:26 - cool
539:28 - next up
539:29 - let's create a new component so
539:32 - component new file
539:34 - and then
539:36 - button.lua
539:37 - and this will be the buttons we want on
539:39 - the menu screen unfortunately the menu
539:42 - screen is legitimately just buttons so
539:45 - we have to do this before the menu
539:47 - screen
539:48 - we can just say
539:50 - local
539:52 - love is equal to require
539:56 - love and in local text because we're
540:00 - going to need text to display the
540:02 - buttons
540:04 - is equal to require
540:07 - components
540:09 - there are components
540:11 - dot text or slash text depending on if
540:14 - dot text doesn't work for you you can go
540:15 - slash
540:16 - both of them work for me
540:18 - we can now create a function
540:20 - and call it
540:22 - button it will take in quite a few
540:24 - things so we'll get to that and then
540:26 - return
540:27 - button
540:29 - so let's get everything already ready in
540:31 - here let's just say return and then
540:34 - there
540:35 - now a button will take a lot of things
540:38 - first once we click a button we want to
540:40 - execute a specific function for that
540:42 - button
540:43 - we don't want to implement that function
540:46 - inside of the button itself because if
540:48 - we do that then it could cause a little
540:51 - bit of a problem with us needing to
540:55 - basically for every scenario coded by
540:58 - coder function so it's better to pass in
541:00 - a function and then to execute that
541:02 - function on button click
541:04 - so we can say func for a function we
541:06 - want to take in
541:07 - also the text color of the button
541:12 - the button color itself
541:15 - the width of the button
541:17 - the height of the button
541:20 - the text on the button
541:23 - where the text should be aligned to so
541:25 - the text align
541:27 - the font size and i know this looks like
541:29 - a lot at the moment but believe me we'll
541:32 - go through all of them slowly
541:34 - the button x position
541:38 - the
541:39 - button
541:41 - y position
541:43 - the text on the buttons x position and
541:46 - then the text on the buttons y position
541:50 - cool
541:52 - so now we have the basics of a button
541:53 - here
541:55 - now first
541:56 - let's say
541:58 - local
541:59 - btn
542:01 - text for the button text is equal to an
542:03 - empty table and we'll get back to this
542:05 - in the future
542:07 - then our function is equal to the
542:09 - function passed in
542:12 - or if there's no function passed in we
542:14 - can then say or
542:16 - function and we can just remove this and
542:21 - or we can just not remove it but just
542:22 - bring it to the end of this statement so
542:25 - one liner function
542:28 - print
542:29 - and we can just print
542:33 - this
542:34 - button has no function
542:38 - attached
542:40 - so basically if they save
542:43 - or if they click the button and they
542:44 - didn't add a function to it it will
542:46 - print out to the console hey there's no
542:49 - function attached to this button you
542:50 - can't click it
542:52 - next up i want to position the text of
542:55 - the button
542:56 - now if you remember from the previous
542:59 - tutorial or from the previous game we
543:01 - made
543:02 - where if i were to go here as you see
543:05 - our buttons
543:07 - they have a little space here but if you
543:09 - could remember from the code we wrote
543:11 - for these buttons is that the text in
543:13 - the button
543:15 - is positioned relative
543:17 - to the button itself
543:19 - meaning if we position a button here
543:22 - then and we say the text is
543:25 - 10 pixels to the right then it's going
543:27 - to be inside of the button by default 10
543:29 - pixels to the right
543:31 - meaning the text isn't going to be 10
543:33 - pixels from the border of the screen
543:35 - it's going to be 10 pixels from the
543:36 - border of the button
543:39 - if you can't quite remember what we did
543:41 - here i do recommend you maybe go back to
543:43 - the files and just go check on how we
543:45 - created that button and maybe that will
543:47 - bring back some flashbacks
543:49 - but it's not a big piece of code we have
543:50 - to write for that so let's quickly do
543:52 - that
543:53 - so if
543:55 - text wise if the y position was provided
543:59 - then
544:00 - ptn
544:01 - and in text
544:03 - dot y
544:05 - will be equal to text
544:08 - underscore y
544:10 - plus
544:12 - button y so plus the y position of the
544:15 - button
544:16 - because it needs to be the amount we
544:18 - give it plus the button otherwise you'll
544:20 - have to manually calculate if you wanted
544:22 - on the center of the button where the
544:24 - center of the button would be relative
544:26 - to where we already have it so we
544:27 - anyways have to do this later on if you
544:29 - want the ticks to be inside of the
544:30 - button
544:33 - and you can still make the tick outside
544:34 - of the button even with this method here
544:36 - you just use minus or just massive value
544:39 - depending on what you want to do
544:41 - anyhow let's continue because it's a big
544:43 - file
544:44 - then we can hit it again again just go
544:46 - like whoop go like this and then do this
544:50 - but without this
544:52 - now you have a choice here
544:54 - and let me just go back to y here
544:57 - you have a choice you can either do this
544:59 - if else statement
545:02 - or you can go here and say y
545:05 - is equal to
545:07 - and then
545:09 - button y
545:10 - and you can remove this part here this
545:13 - will work just as well
545:15 - so it's up to you what you want to do
545:17 - however i'm going to use this else
545:19 - statement here
545:21 - you're going to copy this
545:23 - and now you can do it for x
545:25 - and in here you can just change this
545:28 - to x
545:30 - and there we go we have just as quickly
545:33 - added our x and y positions for the
545:35 - buttons
545:36 - or for the text on the button
545:39 - now let's go here and we can just say
545:41 - text color
545:43 - is equal to text color
545:46 - or if they didn't specify text color we
545:49 - can just make it
545:50 - white so r is equal to one
545:53 - g is equal to one and
545:56 - b is equal to one
545:58 - like that
546:01 - and we can do the same
546:03 - for button color so button color is
546:06 - equal to button color or and we just
546:09 - copy this one here
546:11 - however the difference will be
546:13 - is that by default the button color
546:15 - should not be white
546:17 - because the text is already white so if
546:19 - they don't enter the text or the button
546:21 - color you want to make sure that the
546:23 - text is still visible since the button
546:25 - would now be black
546:27 - you can swap these two if you want to
546:29 - but yeah
546:31 - and we can go the width of the button
546:34 - is equal to the width we enter or 100
546:38 - and then the height of the button is
546:40 - equal
546:42 - to the height we enter
546:44 - or 100
546:47 - the text
546:49 - is equal to text
546:50 - or
546:51 - and you don't have to specify or with
546:53 - any of these i'm just doing it for in
546:55 - case i want to leave something out there
546:57 - in case you might want to leave
546:58 - something out in the future the more
546:59 - customized this is the more things you
547:02 - can later on leave out
547:04 - anyhow and then no text added so new
547:07 - text was added we can just put that
547:09 - there
547:10 - or you could force it it depends on what
547:12 - you want
547:13 - the text x position
547:16 - is equal to the text position passed in
547:20 - and we're not using this text position
547:22 - here quite yet but you will see in a
547:24 - second where we use that
547:28 - or we can make it the button x
547:31 - or if you didn't specify at all we can
547:33 - just make it zero
547:35 - we can do the same for the y text
547:37 - position where all the x's are just y's
547:41 - and you can go here and say
547:43 - the button x position is equal to the
547:46 - button x position or zero
547:50 - and in the button y position is equal to
547:53 - the button y position
547:56 - or zero
547:58 - cool
547:59 - and then finally we need to use a text
548:01 - component
548:03 - that will put the text on the screen for
548:05 - us and we already have a text component
548:07 - that's been imported right here
548:10 - and every button will have its own text
548:11 - component so we can just say text
548:14 - component
548:16 - is equal to text
548:18 - and then we can just pass in all our
548:20 - values
548:23 - so we can say text
548:26 - btn text dot x so here we use the button
548:29 - text
548:30 - but here we specifically
548:32 - use the x and y given to us
548:36 - and you can of course do the same but
548:38 - for y
548:40 - and as you can see also our
548:41 - documentation is here which is very nice
548:43 - and this is some documentation we did a
548:45 - while back so here we go and
548:48 - as you can see we did a bunch of
548:49 - documentation and now the documentation
548:51 - appears as i'm trying to edit this
548:53 - so that's pretty neat so now we know we
548:55 - need the font size and the font size is
548:57 - passed in
549:00 - and then also whether we want it to fade
549:02 - in which is false we don't want it to
549:03 - fade in unless you want to add some
549:04 - animation
549:06 - fade out is also false
549:08 - the width
549:09 - and then the text
549:12 - align like that
549:14 - and then finally for the opacity we can
549:16 - just pass it on we don't want to change
549:17 - the opacity
549:20 - however if you have buttons in your game
549:22 - you want to make this a dynamic value so
549:24 - very value passing as a variable and not
549:28 - just one so it depends on what you want
549:29 - to do if there's buttons in your game
549:32 - and not just any menu so when they pause
549:34 - and you want it to fade out when you
549:36 - pause then making this an actual
549:38 - variable would be better
549:40 - because you can change the variable
549:41 - later
549:42 - let's draw the button because i actually
549:44 - want to get the button on the screen
549:46 - so draw is equal to function
549:50 - self
549:52 - and we just add in our comma
549:54 - then here we just say love dot graphics
549:57 - dot set color so the color we want
550:00 - the
550:01 - button to be
550:04 - and we can go self
550:06 - dot
550:08 - button color and then just specify
550:10 - red
550:12 - and we can do that for all of the colors
550:15 - colors we have so let's
550:18 - do that
550:19 - and there we go
550:21 - now the color will be set to what we
550:22 - want the button color to be
550:24 - then we can draw a rectangle so love
550:27 - dot
550:28 - graphics dot rectangle
550:31 - and you can just say fill this rectangle
550:35 - or don't fill it it depends on what you
550:37 - want but i would like to fill it since
550:39 - it's a button it makes sense to fill it
550:41 - self then the button
550:44 - x
550:45 - self dot
550:47 - button
550:48 - y
550:50 - self dot
550:51 - width
550:52 - and then self
550:54 - dot height
550:57 - and it will draw the button for us
550:59 - next up we need to do the same
551:02 - but instead for the button we need to do
551:05 - it
551:06 - for the text and we also want to reset
551:08 - the color back to white
551:10 - so here we can go here but instead of
551:12 - button color we now go text color
551:15 - and you can just say self dot text
551:19 - component
551:21 - dot draw just colon draw instead
551:25 - and this will draw the text component
551:28 - for us because it already has its own
551:30 - draw function
551:32 - cool
551:33 - now that's the basics for the button
551:35 - we'll be getting back to this a little
551:36 - bit later in the tutorial i just want to
551:38 - get the button on the screen right now
551:41 - next we can go and we can create a new
551:43 - file
551:44 - in the states folder called
551:47 - menu.lua because the new state we have
551:52 - and you can require love so
551:55 - local
551:57 - love is equal to require
551:59 - love
552:01 - local
552:02 - button and it should be with capital b
552:06 - is equal
552:07 - to require
552:09 - components.button
552:11 - and then we can say
552:13 - function menu
552:15 - takes in
552:17 - nothing yet
552:18 - and then we can just return
552:21 - a table
552:22 - and we can return menu and this will
552:25 - return the menu for us
552:27 - now we can just take in the game and
552:29 - we'll get to y and then the player and
552:30 - we'll also get to y
552:32 - next we want to draw the buttons and the
552:34 - buttons are pretty big so local and
552:36 - let's just draw one for now
552:38 - buttons is equal to
552:40 - and then here we say a new button
552:44 - the function we have let me just say nil
552:46 - for now
552:47 - because there's no function
552:49 - then the text color which can be nil and
552:52 - then nil again or the button color the
552:54 - width can be love dot graphics
552:57 - dot
552:58 - get width
553:00 - divided by three and it will give it a
553:02 - nice
553:03 - see rather smallish width
553:06 - and then the height can just be 50.
553:09 - the text can say new
553:12 - game
553:14 - it can be aligned in center
553:17 - i need to make that okay see
553:19 - the text size can be h3 or the font size
553:24 - the button x position can be love dot
553:26 - graphics
553:28 - dot get with
553:31 - divided by three and it'll kind of make
553:33 - it a little bit in the center
553:35 - and i love that graphics that gets
553:38 - height and this is for the y position
553:41 - and this can be
553:43 - times
553:44 - 0.25 and it will kind of make it go
553:48 - a quarter way down
553:50 - okay so these are buttons we have we'll
553:52 - add more a little bit later
553:54 - so here we can just say
553:57 - draw as a function is equal to function
554:01 - taken self
554:02 - for
554:04 - and then underscore
554:05 - button
554:07 - in
554:07 - buttons so for every button we want to
554:10 - draw it
554:11 - we just call
554:13 - button colon
554:14 - draw
554:16 - cool
554:17 - we have just created our menu
554:20 - we'll get back to this a little bit
554:22 - later
554:23 - we can go all the way up to load
554:27 - and now we don't want this start new
554:29 - game anymore because we don't want to
554:30 - start a new game as soon as we start to
554:32 - or as soon as we boot it up we want to
554:34 - go to the menu first so you say menu
554:37 - is equal to
554:38 - menu game
554:40 - player so just passing these two into
554:43 - the menu so the menu has to be below the
554:45 - player and the game
554:47 - now here in the love the mouse pressed
554:51 - we can just add a global global scope
554:54 - variable
554:55 - we can go here else
554:57 - and just say clicked
555:01 - mouse is equal to true so if the mouse
555:03 - has been clicked we'll use this later
555:05 - but we don't have to worry about it now
555:07 - let's just say it exists
555:09 - then you can go down here and where it
555:11 - says if game state is running we can go
555:13 - all the way to the bottom
555:15 - and we can go
555:17 - else if
555:19 - game dot
555:20 - state dot menu so if it's the menu state
555:25 - and you say clicked
555:27 - mouse is equal to false by default
555:31 - and we'll get back to this a little bit
555:32 - later as well
555:34 - and finally here in draw
555:36 - else if
555:38 - game dot state dot menu
555:41 - and you say menu
555:44 - colon
555:45 - draw
555:46 - now when we run the game we should be
555:48 - able to see a button on the screen
555:50 - okay it was the first attempt so
555:53 - oh okay we haven't imported menu yet
555:55 - that makes sense so we can just go here
555:58 - say
555:59 - local
556:01 - local
556:03 - menu is equal to require
556:06 - states dot menu
556:08 - there we go
556:09 - there we go so we have our first button
556:12 - it just looks like text because the
556:13 - button color itself isn't a different
556:16 - color
556:17 - we could if we wanted to change the
556:19 - button color
556:21 - to be something different so here is our
556:22 - menu
556:24 - where we set the button color
556:27 - which would be this one
556:29 - we can go
556:31 - r is equal to
556:34 - g is equal to
556:36 - one
556:37 - and in blue is equal to zero
556:41 - now this
556:42 - should
556:43 - give us a yellow button
556:46 - so there's the button i just made it the
556:47 - same color as the background to kind of
556:49 - made it more mystic so you know so it
556:51 - kind of looks like there is no button
556:53 - but there is actually a button let me
556:55 - just say nil back here again
556:59 - and we have just created our first
557:01 - button
557:02 - now let's draw our cursor or mouse
557:06 - because we go here we can't really see
557:07 - our mouse
557:09 - so you can just go
557:11 - if
557:12 - not
557:14 - and in game
557:15 - dot
557:16 - state
557:17 - dot running and we're not putting this
557:20 - inside of this menu checked state here
557:22 - we're putting it inside of a not game
557:23 - state running
557:25 - the reason for it is
557:27 - because
557:28 - we sometimes you want to see the cursor
557:30 - even if the game state isn't necessary
557:32 - running for example on the game over
557:34 - screen we might want to see the cursor
557:37 - in the
557:38 - settings screen that's maybe another
557:40 - state depending on how you code the game
557:43 - you want to still see the cursor
557:45 - in the paused state you still want to
557:47 - see the cursor so it depends on what you
557:50 - want to do here here we're just saying
557:51 - if it's a running state remove the
557:53 - cursor because we already have the
557:54 - player on the screen we don't want the
557:55 - cursor as an extra annoyance
557:58 - and we can just say love.graphics.circle
558:04 - and we can specify
558:06 - fill
558:08 - mouse x
558:11 - mouse y
558:13 - and a 10.
558:14 - if you want an extra nice kind of
558:17 - challenge you can draw the
558:19 - player cursor
558:21 - the same way you draw an asteroid so
558:24 - then the player cursor is an asteroid
558:26 - that can be pretty cool or you can make
558:28 - the player cursor like the spaceship as
558:31 - well but then you move it with your
558:32 - mouse
558:35 - it depends on what you want personally
558:38 - for me this little circle here
558:40 - that's all i need as you can see here so
558:42 - it's a nice little circle
558:44 - that just serves my cursor
558:47 - now let's finish implementing the button
558:49 - because it's a pretty big thing we gotta
558:52 - implement but we did the biggest part so
558:54 - it's not that big of a deal now
558:57 - so first i would like to add a function
558:59 - to make it easier to change the button
559:01 - color
559:02 - now i want to wait to make the button
559:05 - color not only settable outside of
559:07 - setting the button color
559:10 - on create but to also make it easily
559:12 - setable anywhere in the game so you can
559:14 - say set
559:16 - button
559:17 - color
559:19 - you can do function
559:20 - we take it self read
559:23 - green
559:24 - blue
559:26 - then here we say self dot
559:29 - button color
559:32 - and i'm just going to copy this because
559:33 - this is quite a
559:35 - thing to type out
559:37 - we can go here
559:39 - say that is equal to
559:41 - and we just say red green and blue
559:43 - respectively
559:45 - there we go now it's very easy to set
559:47 - the color we just say set button color
559:49 - and you specify the number we don't
559:51 - necessarily need to specify the rgb
559:54 - anymore
559:55 - next we want to do the same but for the
559:57 - text color so i'm going to copy this
559:59 - paste it
560:00 - and i said i'm saying button color we
560:02 - can say
560:03 - text color
560:05 - red green blue but instead of button
560:07 - color we can say text color
560:09 - easy
560:11 - now bloated raw we can also get
560:15 - or set a few methods here to get the
560:17 - position of the button and the position
560:19 - of the text
560:21 - so get pause you could also make this
560:23 - get button pause it depends on what you
560:26 - want to do
560:27 - but saying get button pause will kind of
560:29 - work with all of these like set button
560:31 - color set text colors things get button
560:34 - position would be smart
560:36 - pass in self and we can just return
560:39 - self dot
560:40 - button x
560:44 - and self dot
560:46 - button y
560:48 - we're just separating by a comma so
560:50 - we're getting two values from this
560:52 - function
560:54 - two of them
560:55 - not just one so take note of that we can
560:58 - then go
560:59 - get text
561:01 - pause and we can actually just copy and
561:02 - paste this to be honest
561:05 - so get
561:06 - text pause
561:08 - and instead of button x and button y
561:11 - we say
561:12 - text x and text y
561:16 - cool we have just implemented a ton of
561:18 - functions that could be useful in the
561:20 - future
561:22 - only two more to go
561:24 - i also want the function that once we
561:26 - click
561:27 - the mouse like
561:29 - once we click
561:30 - it should
561:31 - basically execute the function we have
561:33 - passed in here
561:36 - so down here
561:38 - let me just say click
561:40 - is equal to function
561:43 - takes itself
561:47 - and we just say func
561:50 - so it will just execute the function we
561:52 - have
561:54 - doesn't do anything special that's all
561:56 - it does it just executes that function
561:59 - cool and then the last one
562:02 - is just
562:03 - check
562:04 - hover so we're going to check if we're
562:06 - hovering over the button so the cursor
562:08 - is currently hovering over the button
562:11 - that is equal to a function that takes
562:13 - itself the mouse x position
562:17 - the mouse
562:19 - y position
562:21 - and in the cursor
562:24 - radius
562:26 - then we can just do this i just paste it
562:28 - in but i'll explain it so you first get
562:30 - the mouse x and then plus the cursor
562:32 - radius and i have explained this quite a
562:34 - few times especially in the first
562:36 - tutorial where we did the balls
562:39 - basically if they circle where we have a
562:42 - circle but we want to add the radius to
562:44 - that circle in this scenario since the
562:47 - button x is here we want to add a radius
562:49 - to it both ways
562:51 - that is why the button x here has the
562:53 - plus radius and then the button x here
562:55 - as the minus radius
562:57 - if you haven't seen the previous
562:58 - tutorial where we did build a game where
563:01 - we like play around with balls
563:03 - then i do recommend you go watch that
563:05 - tutorial because it is quite a good
563:08 - intro to this tutorial as well so i
563:10 - don't have to re-explain this right here
563:12 - because that just does everything the
563:13 - same as what we did with our player back
563:16 - then so we just check if the mouse x and
563:20 - y
563:21 - is above a button x
563:24 - or and y
563:25 - if it is we return true so here's the x
563:28 - and then here is the y checking if it is
563:30 - we return true otherwise we just return
563:32 - false
563:34 - cool and that is all there is for the
563:35 - button
563:37 - next is the menu let's finish up here
563:40 - so let's go here and create a bunch of
563:42 - functions we might want to do so
563:44 - local funks is equal to a table
563:48 - first we have our new game so this is
563:50 - when they click the new game button that
563:52 - is equal to a function
563:54 - and this function just goes game
563:57 - colon
563:59 - start new game
564:00 - and we pass in the player and that is
564:02 - why we need the player and the game
564:04 - passed in
564:06 - we also want a quit game function so if
564:08 - they click the quit button which we'll
564:10 - put in a second so quit game is equal to
564:13 - another function
564:15 - and then love dot graphics dot
564:20 - crap exactly event
564:22 - my bad dot quit
564:24 - and this will quit the game for us once
564:26 - we click the button
564:28 - cool
564:29 - now we have our two functions we want to
564:31 - use
564:32 - this button here i'm going to copy and
564:33 - paste it three times
564:37 - first here with this nil i'm going to
564:38 - pass in funcs
564:41 - dot
564:42 - new game
564:43 - take note however i'm not passing in
564:46 - brackets i'm not doing that i'm just
564:48 - passing in the name
564:50 - no brackets take note of that
564:54 - and here at the bottom one you can just
564:56 - say
564:57 - funks
564:59 - funks dot
565:02 - and then quit game yet again no brackets
565:06 - okay then with this button here
565:08 - we can change the text here to settings
565:12 - for the settings button
565:14 - and since all of the buttons will be
565:15 - positioned below each other
565:17 - the x-axis so this git
565:20 - width part right here can stay the same
565:22 - but since they're pushed below each
565:24 - other we can change this right here to
565:27 - 0.4 and that will mean that that will
565:29 - make this button here
565:31 - a tiny bit more below
565:36 - this button right here which is the new
565:38 - game button
565:40 - and in here of course we can say instead
565:42 - of new game we can just say
565:45 - quit
565:47 - and instead of 0.25 we can say 5 5.
565:51 - nice so we have just created our buttons
565:54 - and the functions that go with them
565:57 - now let's see if they get drawn
566:00 - and there we go
566:01 - new game settings quit
566:06 - now we need to do a few checks so once
566:08 - we like hover over a button we wanted to
566:10 - change color to red
566:11 - and if we click a button we want to
566:13 - execute a specific function
566:16 - so let's go down here and first we can
566:18 - say focused
566:20 - that will be in empty string
566:22 - and then we can create a function called
566:24 - run
566:25 - and this function
566:28 - just takes itself and if we have clicked
566:32 - we're gonna get the local position of
566:34 - the mouse so mouse x and mouse
566:38 - y
566:39 - which is equal to love dot
566:42 - mouse
566:44 - dot
566:45 - get position
566:46 - as we return both the x and y position
566:49 - and then we can go for
566:51 - name
566:53 - and
566:54 - button in
566:56 - buttons so the buttons we have here
566:59 - meaning check
567:01 - if
567:02 - button
567:04 - and then check hover which we have just
567:06 - implemented
567:07 - you can pass in the mouse
567:10 - x and then the mouse
567:12 - y if you wanted to you could have just
567:14 - made this mouse x y already implemented
567:18 - inside the chair cover but here i just
567:20 - pass it in because why not
567:22 - and we can pass in 10 and this will be
567:24 - the cursor radius we have i recommend
567:26 - you make this a variable instead that's
567:28 - maybe global or passed in or something
567:30 - like that because if you ever want to
567:32 - change the radius of the cursor then you
567:34 - have to come back here and change it as
567:36 - well so i recommend you make it like a
567:38 - variable and maybe pass it in here
567:41 - or something like that anyhow so if
567:45 - the cursor is hovering above the button
567:48 - we can just say
567:50 - if clicked
567:54 - and we get clicked passed in here
567:56 - then button
567:59 - colon click so we want to execute the
568:01 - button function we have
568:04 - and it's
568:05 - itself.focused and this is
568:07 - basically if the button was not clicked
568:10 - in a sense but it's not inside of an
568:11 - else
568:12 - is equal to name
568:14 - or we make it equal to name and you go
568:17 - button
568:18 - and then set text color
568:22 - to 0.8
568:25 - 0.8
568:27 - 0.2 and it should also be 0.2
568:30 - as we'll give it a nice reddish color
568:32 - when we hover over it
568:34 - else we want to say
568:38 - button set
568:40 - text color
568:43 - 1-1-1
568:45 - currently this focused we are not using
568:47 - it we'll use it a little bit later but
568:49 - it is there for once we want to use it
568:52 - cool the menu has now been coded
568:56 - but we are never executing this run yet
568:58 - so we need to go and execute this run
569:01 - now it is pretty simple we can just go
569:03 - here to main.lua
569:06 - here we say mouse clicked is false
569:08 - we can just say
569:11 - menu colon run
569:14 - and then mouse clicked
569:17 - or click mouse
569:19 - there we go
569:20 - and just like that we have implemented
569:22 - the menu that was like the last line of
569:24 - code
569:26 - however we hover over we were not
569:28 - getting anything yet so something might
569:29 - still be wrong
569:31 - however the buttons work so if you go
569:33 - here click quit it works if you go here
569:35 - you say
569:36 - new game it starts a new game so the
569:39 - buttons work
569:41 - however the color is not changing yet
569:45 - and right here
569:47 - where we have this love graphic set
569:49 - color this should actually be
569:52 - self dot
569:54 - text
569:56 - component
569:59 - colon set color
570:01 - which if we were to go to the text
570:03 - component here it has a function
570:06 - called
570:06 - set color where it sits the color for us
570:09 - as well
570:10 - so it has its own color function
570:13 - we're going to take this what we have
570:14 - here
570:16 - and we can paste it in here
570:19 - that is why it didn't go the color we
570:22 - wanted it to go to
570:24 - now we have our button colors as well if
570:27 - we click on settings that will do
570:28 - nothing but just print out some text
570:32 - if we click quit that will quit the game
570:34 - and then finally if we stay new game it
570:36 - will start a new game where we can crash
570:38 - and we can shoot
570:41 - and what not
570:44 - all right that was a pretty big tutorial
570:46 - well done if you sat through the whole
570:48 - thing
570:54 - so in this tutorial i'll be telling you
570:56 - all how to install lua rocks on windows
571:01 - now as far as i know there are three
571:03 - ways you can install lua rocks on
571:05 - windows
571:06 - the first way you can do it is by
571:08 - getting the executable the dot exe file
571:11 - downloading it and then just using that
571:13 - however
571:15 - it doesn't work for me so i'm assuming
571:17 - it also doesn't work for a lot of you
571:19 - another option is is to compile it from
571:22 - a source meaning you have to take the
571:23 - source code for lua rocks and you have
571:26 - to compile it yourself which i don't
571:28 - want to do and i doubt that anyone else
571:30 - would want to do
571:33 - now the third option
571:34 - is to use windows subsystem for linux
571:39 - so this is basically where you have a
571:41 - type of linux on your computer
571:45 - and i'll be showing you how to not
571:46 - uninstall or set up windows subsystem
571:49 - for linux i'll show you how to
571:52 - work with everything you need to do in
571:53 - order to
571:54 - install everything you need to use for
571:58 - lua rocks
571:59 - now to make sure we know how it works i
572:01 - created an example
572:03 - which we can use if our full screen this
572:06 - so here we have a main.lua and this file
572:10 - sits here
572:13 - right here so there's main.lua and
572:14 - there's text
572:16 - json which is these are my documents
572:20 - now here we just read the file
572:24 - as you can see here just in the
572:25 - dashboard we read a file
572:27 - and then we take that file which has
572:30 - json inside of it you don't need to know
572:31 - what json is you can just copy and paste
572:33 - this into your own text.json file
572:37 - anyhow then we decode it into a lua
572:40 - table so we take the json and we convert
572:42 - it into a lua table
572:44 - and then we access the content inside of
572:46 - it and we're doing all of this using the
572:49 - lunar json module which we installed
572:52 - through lua rocks
572:55 - so let me give you a walkthrough on how
572:57 - to set everything up
572:59 - first you need to enable windows
573:01 - subsystem for linux or wsl
573:04 - you can just say
573:07 - turn
573:08 - windows features on or off
573:11 - if you click on that you should be
573:13 - prompted with something such as this
573:16 - just scroll all the way down until you
573:18 - see this windows subsystem for linux if
573:22 - it is not checked then check it so mine
573:25 - is currently checked because it is
573:27 - already turned on so you need to check
573:28 - yours if it's not already turned on
573:32 - then you can say okay and it will
573:34 - install it for you this will take a few
573:37 - minutes so just give it some time
573:39 - after it has installed it you want to
573:41 - reboot your system so it can complete
573:43 - the installation you want to go
573:46 - power and then restart it's going to say
573:48 - it's updating but all it's actually
573:50 - doing is installing windows subsystem
573:52 - for linux
573:54 - now once your system has rebooted you
573:56 - need to install ubuntu
573:59 - luckily you can just go to the microsoft
574:01 - store so microsoft store
574:04 - right here microsoft store
574:07 - and in here you can just search for
574:09 - ubuntu i've already searched for it ah
574:12 - there it's gone
574:14 - two like that
574:17 - and then you can just scroll down until
574:19 - you see ubuntu
574:21 - 18.04 lts you can click on that
574:26 - and here it will say get you just click
574:28 - on get and it will download and install
574:31 - ubuntu for you
574:33 - once this has been completed
574:35 - you can just scroll down here and you'll
574:38 - notice this right here so this is the
574:39 - command you use to start this ubuntu
574:42 - system
574:44 - now i'm going to copy that so ctrl c
574:48 - and then we want to open up either the
574:50 - powershell or command prompt so either
574:52 - command prompt or powershell i'm going
574:55 - to use command prompt so i can look cool
574:58 - open that up
575:01 - now to make sure you look like a real
575:03 - hacker you have to say color
575:05 - o2
575:07 - there we go
575:09 - now what you can do is you can start up
575:12 - your windows subsystem for linux by
575:14 - right clicking right clicking will paste
575:16 - whatever you have
575:18 - inside of your clipboard in this case i
575:20 - copied this so it pasted this
575:23 - and this will start up ubuntu for me
575:26 - now if it's your first time starting up
575:28 - ubuntu with the windows subsystem for
575:30 - linux
575:32 - then you'll have to enter a username and
575:34 - password
575:35 - this can be anything you want just keep
575:37 - it simple so you never forget it then
575:40 - once you're here it's pretty simple
575:42 - first you want to sudo
575:44 - apt
575:47 - update
575:48 - like that
575:50 - press enter it will ask you for your
575:52 - password you say you put in your
575:53 - password and it will commence to get all
575:56 - of the latest packages it has
576:00 - then you want to say sudo
576:03 - apt update and this will update your
576:05 - linux system you have
576:09 - now i just did an update so i don't have
576:11 - anything to update but it will prompt
576:13 - you yes or no to update all of your
576:15 - packages just say yes once you've said
576:18 - yes it will update your linux system to
576:20 - its latest version
576:23 - now that you have this you want to
576:24 - install lua and lua rocks
576:28 - so you can just say
576:30 - sudo apt
576:32 - and just for in case you don't know you
576:34 - can also say apt cache
576:37 - search and this will search the
576:39 - repositories for what you need in this
576:41 - case if i say lua 5
576:44 - then here refers that everything i can
576:46 - download now you can choose between lua
576:48 - 5.1 5.2
576:51 - 5.3 and basically 5.0
576:55 - i want to get lua 5.3
576:59 - so i'm going to say
577:00 - sudo apt
577:02 - install lua 5.3
577:07 - and i also want to install lua rocks
577:10 - i can just say lua rocks
577:13 - once you do this it will ask you to
577:15 - install it you just say yes i already
577:17 - have it installed so it's not going to
577:19 - do anything
577:20 - now once you have this installed you can
577:23 - start executing your code
577:25 - so make sure
577:27 - that right here
577:29 - you have this code and this json file
577:34 - make sure you have these
577:36 - because this is the example we're going
577:37 - to use
577:39 - now currently i am not inside of my
577:42 - windows machine i'm inside of linux
577:45 - so to get into my windows machine i can
577:48 - go cd and then a forward slash
577:51 - not a backward slash but a forward slash
577:56 - this will take me to my root directory
577:58 - if i say alice it will show me all of
578:01 - the folders i have inside of this folder
578:04 - you can just go into
578:05 - cdmt for mount
578:08 - and in here you'll see all your drives
578:10 - you have
578:11 - so i have the c drive and the v drive
578:14 - to show you an example of this if i open
578:16 - up my file manager
578:18 - go to this pc
578:20 - then this is my c drive as you can see
578:22 - there's c and here's the d drive
578:26 - now the c drive
578:28 - we can go here and as you see there's
578:30 - the c drive to go into that c drive we
578:33 - can say cd
578:34 - c
578:35 - and then a forward slash
578:39 - now we want to go into users
578:43 - and then here we can just say cd
578:45 - users
578:47 - and take note i'm using a capital case u
578:49 - here because this users also has a
578:51 - capital case u
578:53 - then here is cherise the brain you can
578:56 - go into that that is my current user i
578:58 - am who i am
579:00 - then here we can also go
579:02 - cherise the brain
579:05 - then here to find where my things are
579:07 - yours might be instead of documents
579:09 - inside of desktop instead of downloads
579:12 - instead of music wherever you put your
579:14 - files you have to go mine is inside of
579:16 - onedrive
579:18 - so here i also have to go into onedrive
579:22 - onedrive and you can press tab to let it
579:25 - autocomplete for you
579:28 - and in here you'll notice we have a
579:33 - document folder
579:35 - if i go into documents
579:37 - then you'll see i have a lua folder
579:40 - and this is where my lua stuff are
579:42 - now i can just go here and see
579:45 - cd documents and then lua
579:48 - and press enter now if i say al is i
579:51 - should see a main.lua
579:54 - and a text.json so right here main.lua
579:58 - and text.json
580:00 - now once you are inside of here you'll
580:03 - see these two here
580:04 - to run this lua code you can just say
580:08 - lua 5.3
580:11 - and then main.lua if i run this i get
580:15 - jack and that means i executed the code
580:17 - inside of this main.lua
580:19 - to see what inside the file i can say
580:21 - cat which means read and in main.lua and
580:25 - you'll notice it's everything i just had
580:27 - inside of vs code luna json requires
580:30 - luna json
580:31 - and in all of this now one thing i did
580:35 - forget to tell you is how to install
580:38 - luna json because i've showed you how to
580:40 - install lua rocks
580:42 - to install luna json you can just say
580:44 - sudo
580:47 - lua rocks
580:50 - install
580:51 - luna json
580:54 - and let me just resize it a bit so
580:56 - everything's on screen
580:58 - oh so here we go sudo lua rocks install
581:01 - luna json and this is how you install
581:03 - any package in lua rocks you just say
581:05 - sudo
581:06 - lua rocks install luna json
581:10 - you press enter
581:12 - and there we go so now it should be
581:13 - installed and now of course if you try
581:15 - and run it
581:17 - it will run your things
581:18 - to uninstall a package from lua rocks
581:21 - you can say sudo
581:22 - lua rocks
581:24 - it should be remove
581:26 - luna json and this will uninstall a
581:28 - package now if i were to try and run
581:31 - this code
581:32 - it will tell me it doesn't know what
581:34 - luna json is because i have uninstalled
581:36 - it
581:37 - and then yet again to install it again i
581:39 - can just say sudo sudo lua rocks install
581:42 - luna json and just like that
581:46 - you can use lua rocks now take note
581:49 - whenever you want to run something you
581:51 - now have to run it inside of your
581:53 - windows subsystem for linux meaning this
581:56 - right here you cannot run it from
581:59 - windows not as far as i know at least
582:01 - because luna json and lua rocks are both
582:04 - installed on linux now and not on
582:06 - windows
582:08 - this is to me is the easiest method
582:10 - around this lua rocks installation issue
582:14 - we're having
582:20 - today we will be
582:23 - implementing the user score system
582:27 - then
582:29 - say in starting a game you'll see we
582:30 - have now
582:31 - two score systems there at the top
582:35 - once we blow up an asteroid with the
582:38 - score increases
582:40 - go here we blow up the asteroid
582:42 - increases and in here we no longer exist
582:47 - so you just boom
582:50 - and let me just
582:52 - boom go
582:55 - now when we go back in i think the score
582:58 - is no longer there we'll implement that
583:00 - later but the idea is once we have the
583:03 - score implemented the score should stay
583:06 - as it is
583:08 - and then we will have a high score and a
583:10 - current score
583:11 - the high score will be implemented in a
583:13 - different video it's not that complex so
583:16 - we'll probably do it near the end
583:18 - cool
583:19 - and just as a comparison this is what we
583:21 - currently have
583:24 - move this up here
583:26 - we say new game
583:28 - as you can see we don't currently have
583:30 - any score to speak of
583:33 - which is unfortunate
583:34 - so that's why we'll be implementing it
583:36 - right now because that's one of the
583:37 - things that really makes a player more
583:39 - happy to see is if they play a game like
583:41 - this and they have a score and they try
583:43 - and beat their score every time they
583:45 - play the game
583:48 - now
583:49 - let's go to our
583:51 - globals.lua
583:54 - now i'm going to assume you have lua
583:57 - rocks installed
583:59 - if you do not have lurox installed i
584:01 - believe you can just google
584:03 - lua rocks
584:06 - and there we go and then you can install
584:09 - lua rocks lua rocks allows you to
584:13 - basically just install extra packages or
584:16 - extra files for you to use in your
584:18 - program so let's say you want to
584:21 - work with mysql which is something you
584:23 - use to work with databases then you can
584:25 - go to lularocks and you can download
584:27 - this mysql package and now you can work
584:30 - with mysql
584:31 - in lua or if you want to make a chat
584:34 - then you can get this lua socket
584:36 - which allows you to basically chat or
584:38 - create a chat app
584:41 - i'm going to assume we have this already
584:44 - installed
584:46 - and if you don't you can just quickly go
584:48 - and install just pause the video go and
584:50 - install it it would be probably as
584:51 - simple as it was to install luba if not
584:54 - easier
584:57 - now if you have it installed
585:00 - make sure that you have the following in
585:04 - your path you need to have lua rocks in
585:05 - your path so this should also be in the
585:08 - installation if it isn't you just have
585:09 - to implement or add it
585:11 - you say dollar then in brackets
585:15 - lua
585:16 - rocks
585:18 - path
585:19 - dash bin
585:22 - and this will allow lua rocks to work
585:26 - and you have to add eval
585:28 - here at the front before this so if we
585:30 - just copy this
585:33 - then you have to go eval
585:35 - and every time you want to use lurox you
585:37 - have to do this what you can do is you
585:39 - can say
585:40 - you can go into your bash rc
585:43 - and this runs every time you start up
585:45 - your terminal
585:47 - and let me just run that again
585:50 - now if we go down here
585:52 - and actually it's at the way bottoms let
585:54 - me just
585:56 - on
585:57 - full screen that
586:00 - so here we go there
586:02 - so this is inside of my
586:06 - bash or c file which runs every time my
586:09 - terminal starts up so every time a
586:11 - terminal starts up we make sure i can
586:13 - use lua rock so i recommend you do the
586:15 - same if you're on linux
586:18 - now once you've done that lua rocks
586:20 - should work
586:22 - now to install what we want to install
586:24 - we need to type lua rocks
586:27 - install
586:28 - and then
586:29 - luna
586:31 - json
586:32 - this package will allow us to work with
586:34 - json
586:36 - because i want us to save our file
586:39 - in json format and you don't need to
586:41 - know json i'll explain it along the way
586:44 - a lot of people would actually prefer if
586:47 - you were to encrypt the save file but
586:49 - i'm not going to go through all that
586:50 - effort it's such a basic game that could
586:51 - be something you do on your own but you
586:53 - might want to encrypt the save file so a
586:55 - player can't spoof how much they really
586:57 - got for example let's say they really
586:59 - only got
587:00 - 5 000 points in the game
587:03 - then you might want to
587:05 - encrypt the files so they can't just go
587:07 - into the json file and change that five
587:09 - thousand to fifty thousand
587:11 - but that's out of the scope for this
587:12 - tutorial so we can just say install
587:15 - and let's see here and i do not have
587:18 - write permissions
587:20 - i'm just going to go sudo
587:22 - and then try it again
587:24 - you might want to use dash locally if
587:26 - you have the same problem i'm just going
587:27 - to go sudo just to keep things simple
587:31 - now once you have this installed
587:33 - you should be good to go
587:34 - now let's go up here and we say local
587:38 - luna json is equal to require
587:43 - luna
587:44 - json
587:46 - and we can use it just like with love
587:48 - because we've installed it
587:50 - so now we have this option here to use
587:54 - now we can create a function and this
587:56 - function will be called read json it
587:59 - will read a json file for us
588:02 - and in here we can just pass in the file
588:04 - name because we might have multiple json
588:06 - files we want to read so this is just
588:09 - for future proofing
588:11 - you don't have to necessarily add a file
588:13 - name here but just in case you add
588:15 - another file that you wanted to read
588:17 - then it easily reads that file for you
588:21 - now i recommend having all our files
588:24 - inside of a specific
588:26 - folder
588:27 - so right here we can create a new folder
588:30 - and we can call it src for source
588:32 - content this can be like your audio
588:35 - and
588:36 - your files and your images
588:38 - and whatnot
588:40 - in this case we can just say
588:42 - data that should be a folder data folder
588:45 - inside of the source folder because this
588:46 - is where all our data files would go
588:49 - preferably encrypt your data files
588:51 - because this is usually things users
588:52 - should not be tweaking
588:55 - and then here we can just say
588:57 - dot json because this will keep the save
588:59 - file or the saved data
589:02 - and then all we have to do is we have to
589:04 - use these curly brackets
589:08 - and then we just have to say
589:10 - hi
589:11 - score
589:13 - like that or if you want you can also
589:15 - use an underscore like that but
589:16 - preferably don't use a space that's not
589:19 - very good so use an underscore or a
589:21 - capsule case
589:23 - but not a space
589:25 - and you can just say zero and this will
589:27 - be the score the user has
589:29 - save that and you don't have to open
589:31 - this file for now for a long time
589:34 - cool
589:35 - now that we have that file
589:37 - we can specify
589:39 - the file we want to read so the file we
589:41 - need to open
589:43 - so local file is equal to io for input
589:47 - output dot open
589:50 - and we pass in the file path so you can
589:53 - say src
589:55 - so that would be this src file or folder
589:58 - then you want to go into the data folder
589:59 - so slash data
590:02 - and then slash because you want to
590:04 - access this save dot json
590:07 - again then just go dot dot file name
590:11 - and in dot dot because
590:13 - you might not want all of your files to
590:15 - be in dot json format you might have
590:17 - multiple formats
590:19 - dot json
590:21 - now this is just how the javascript but
590:23 - because this is saying read json
590:26 - you can just as well
590:28 - not add this here and just let them
590:29 - enter json
590:31 - but because i just want to enter the
590:33 - file name for example
590:35 - save i just say that then it will
590:37 - automatically add this.json
590:40 - for me as you can see here
590:41 - the end result will then look something
590:43 - like this
590:45 - and all i had to do was end and just
590:47 - save here and it will produce this
590:51 - and then of course here we just have to
590:53 - specify we want to open it up in read
590:55 - mode
590:56 - below that we can say local data is then
590:58 - equal to file
591:00 - colon read and we can just say we want
591:03 - to read everything so
591:05 - star and then all this will read
591:08 - everything inside of this file
591:10 - and we can say file code and close
591:12 - because we don't want the file to stay
591:14 - open
591:16 - and in return
591:17 - luna json
591:19 - dot decode
591:22 - and we can just say data
591:25 - now once you've done this everything
591:26 - should be
591:28 - still working fine if you want to test
591:30 - it you can still run your code of love
591:32 - dot and make sure everything starts up
591:34 - which it should
591:36 - cool
591:37 - now next up we can go to this game.lua
591:39 - file because we now want to add the high
591:42 - score to the game because we can now
591:44 - read this json file we have
591:46 - but
591:47 - we want to have it
591:49 - display the score here
591:52 - now this json.d code here before i
591:54 - forget basically just converts json so
591:58 - this right here to a lua object so lua
592:02 - table
592:03 - now down here we can say score by
592:05 - default is zero
592:07 - so by default when you start the game
592:09 - you get zero as the score this is the
592:10 - initial score for the
592:12 - game now here at the top we also want to
592:15 - import save
592:18 - data
592:18 - because now we want to read this file
592:21 - that is json file then we want to pass
592:23 - in the save data into this game here
592:27 - if you want to you could
592:29 - load the high score and all the safe
592:32 - stuff inside of this game here but for
592:34 - me it's better to rather do it outside
592:37 - of the game
592:38 - just to keep things simple so if you
592:40 - might have different functions you want
592:42 - to pass the same data in you don't have
592:44 - to make multiple functions in each one
592:46 - of those you can just pass it in here
592:49 - but we'll get to that a little bit later
592:51 - you can say high score
592:53 - is then equal to save data dot high
592:56 - score and this here is just a table it's
592:58 - just going to contain a high score for a
593:00 - moment
593:01 - if there's nothing there we want to say
593:02 - or zeros it will default to zero
593:06 - next we want to go but down here to
593:08 - where it says draw because you want to
593:10 - update the draw
593:12 - then go up here and say local opacity
593:15 - is equal to one
593:17 - then if
593:19 - faded
593:20 - then here we just want to set the
593:22 - opacity to 0.5 and i can just work off
593:25 - of the opacity so we don't need this if
593:28 - statement here anymore
593:29 - we're going to just unintent this
593:33 - actually this can still be inside of
593:34 - faded why not
593:36 - because this should only be displayed if
593:38 - we're currently faded because only if
593:40 - we're faded we're being paused that's
593:42 - the only time currently the game is ever
593:44 - being faded out so this can still stay
593:47 - in an if statement i don't think about
593:48 - it and because this should be above
593:50 - everything else it should be at the
593:52 - bottom of this drawer if it's at the top
593:54 - everything else is going to be above it
593:56 - so it should be at the bottom
593:58 - we're going to go text to create new
594:01 - text we want to display
594:03 - and you can just say colon draw
594:05 - then this text we want to say
594:08 - score
594:09 - and this will be the default scored
594:11 - player c like when they start up a new
594:13 - game
594:14 - coil in space and then add the self dot
594:17 - score
594:18 - then you can position it
594:20 - negative 20
594:22 - 10
594:23 - and
594:24 - our living as position i can't actually
594:26 - remember what is everything inside this
594:28 - text here what are we doing okay so
594:30 - first
594:31 - oh yeah so that is positioning for x in
594:32 - the y position cool okay then the font
594:36 - size that will be an h4
594:38 - we can say false
594:40 - and false and the false and false is
594:43 - just for this fade in and fade out
594:45 - because we didn't want it to fade in or
594:47 - out
594:48 - then you want to wrap with the line and
594:50 - the opacity
594:52 - so the wrap width will be the width of
594:54 - the window so loud.graphics.getwith
594:59 - and you can say
595:01 - right
595:02 - and then
595:04 - faded
595:06 - and opacity
595:08 - or
595:09 - 0.6
595:11 - this is a little bit weird but basically
595:13 - if it's faded
595:16 - then show the opacity we have
595:19 - otherwise just default to 0.6
595:23 - and i believe you can actually go here
595:24 - into the lua virtual environment and
595:26 - just test it out
595:27 - so let's say we have x which is equal to
595:30 - true
595:32 - and we have
595:34 - 1 which is equal to
595:37 - let's say 0.5
595:40 - and then
595:41 - 2
595:42 - which doesn't exist
595:45 - so you can just say 2 is equal to nil
595:49 - now if
595:51 - x
595:52 - and
595:54 - 2
595:55 - or
595:56 - 1
595:57 - we get 0.5 because 2 does not exist
596:00 - but if we were to say 2 is equal to 1
596:04 - then we get 1. so if x is true which in
596:08 - this case if faded is true
596:10 - and this right here has a value inside
596:13 - of it
596:14 - then display this one here so opacity
596:17 - otherwise if this has no value inside of
596:19 - it
596:20 - and this is false
596:22 - then display this
596:24 - so that's for that now we can copy this
596:27 - and we can do the same for high score so
596:29 - here is a high
596:31 - score
596:33 - and now here instead of dot score we can
596:35 - say dot high
596:36 - underscore score
596:39 - we can then make this zero
596:42 - yet again 10 because it's going to be
596:44 - the same height you can make it h5
596:47 - because this shouldn't be the main
596:48 - attraction the main attraction should be
596:49 - your score so it's going to be a little
596:51 - bit smaller before we go that right
596:53 - should be a center
596:56 - and we can also change the 0.6 to 0.5
597:00 - cool and that should draw it
597:03 - so let's just
597:05 - save
597:06 - and then let's run it and see if it
597:09 - works
597:10 - because that should theoretically draw
597:12 - it
597:14 - ah here we go
597:15 - attempt to index local save underscore
597:18 - data nil value
597:20 - you know why it's giving us that
597:22 - it's giving us that because inside of
597:25 - the main.lua
597:28 - if we go up here we are not passing a
597:30 - value in here
597:32 - so we don't have a high score i'm just
597:34 - going to say zero for now and let's run
597:36 - it and see what we get
597:40 - now we still get a value or still
597:42 - problem
597:44 - and my bad this should be a table
597:48 - high score there we go
597:53 - and that should be an equal symbol there
597:55 - we go
597:57 - now it should finally work
598:00 - new game
598:01 - now we have a high score which a little
598:03 - bit faded out because remember the main
598:05 - attraction is actually the player
598:07 - and the asteroids and the score is also
598:10 - a little bit faded but it's bigger
598:12 - because you might want to see your score
598:15 - more than what you see your high score
598:18 - all right
598:19 - now one thing before we continue this
598:22 - right here quite unnecessary because
598:24 - all we need to do is we just need to
598:27 - get the data from globals and we are
598:30 - already acquiring globals
598:32 - so we need to do is let's say
598:35 - it can be maybe like the second thing it
598:37 - does
598:40 - local save underscore data is equal to
598:45 - and we're going to say read json
598:48 - and then
598:49 - save because we want to read this file
598:52 - and you can just take this save data and
598:55 - pass it in here
598:57 - or if you really want to save space you
598:59 - can just do whoops my bad you just do
599:02 - that but i like doing this just to make
599:04 - more readable
599:06 - now let's make sure that works because
599:08 - that should read the file for us
599:11 - and then once it has read the file we
599:14 - should see that value so let's
599:16 - go up here and just run it
599:19 - okay high score is zero let's keep a
599:22 - look out for that if we change the high
599:24 - score to
599:26 - 900 what do we get do we get the same
599:29 - output or did it change because it
599:31 - should be changing
599:34 - new game and there we go now we get 900
599:37 - so we have successfully created a save
599:39 - file and read from that save file
599:44 - then last but definitely not least we
599:47 - now have to modify the asteroids a
599:50 - little bit
599:52 - because when you blow up an asteroid
599:54 - your score should increase
599:57 - so let's go right here
600:00 - and we can say
600:01 - if
600:03 - self dot radius is more or equal to
600:08 - asteroid size
600:11 - then so the radius is more equal to the
600:15 - basic asteroid size
600:18 - of course that's a little bit big so we
600:19 - want to go divided by two because
600:21 - asteroid sizes from left to right whilst
600:23 - radius is halfway
600:26 - then
600:27 - game dot score
600:30 - is then equal to itself so game dot
600:34 - score
600:35 - plus 20 and game now has a score on it
600:38 - if you go here you can see there's the
600:40 - score
600:42 - plus 20.
600:44 - we can then go else if
600:47 - and we can go self dot radius
600:50 - is less or equal to
600:53 - the min
600:55 - asteroid
600:56 - size
600:57 - then we can do the same thing as this
601:00 - but because this asteroid will
601:02 - theoretically be the smallest asteroid
601:05 - you can get we want to make them get a
601:08 - lot of points for destroying the small
601:09 - asteroids because they can be difficult
601:11 - to shoot and they multiply so they can
601:14 - also be very difficult to dodge at the
601:16 - same time
601:19 - and finally for the medium-sized
601:21 - asteroids we have we can just say else
601:23 - copy this and instead of 100 we can say
601:26 - 50.
601:28 - and then this isn't something that's
601:30 - going to really affect us too much now
601:32 - but we can also go if game dot score is
601:36 - more than game dot
601:38 - high score
601:40 - then we want to say game dot high score
601:44 - is equal to game dot score
601:47 - now this right here is basically
601:49 - whenever the player plays and their
601:50 - score is higher than the high score they
601:53 - have then the high score will also
601:55 - increase
601:56 - along with their normal score can't you
601:58 - tell them hey you are getting a new high
602:00 - score good job
602:02 - and this here will of course just add a
602:03 - score and we're already drawing the
602:05 - score to the screen so we don't have to
602:06 - worry too much about that
602:08 - we're gonna just say love dot to run it
602:12 - move it so everyone can see
602:14 - start new game
602:16 - shoot you'll notice both of these the
602:18 - high score and the score
602:20 - increases
602:22 - because the score is higher than the
602:24 - high score and of course the more we
602:26 - destroy
602:28 - the more
602:29 - we gain
602:31 - now take note of this last part we added
602:34 - here if we make the high score
602:36 - let's say 100
602:39 - then if we go back here
602:41 - we say start new game
602:44 - and we shoot an asteroid
602:50 - as you can see the high score didn't
602:51 - change but the score did
602:53 - and the high score won't change until
602:56 - our score is higher than the high score
602:58 - then you can see the high score is
602:59 - starting to change
603:03 - cool
603:04 - and that is implementing a basic save or
603:08 - score system for our game
603:16 - so to give you an idea of what we'll be
603:19 - doing
603:21 - here we go we say start new game
603:24 - just wait for that asteroid to come back
603:31 - and then one last time for our last
603:34 - help right here at the top our last life
603:37 - we crash
603:38 - oh gosh missed it completely
603:41 - and then we get a nice fading game over
603:44 - screen
603:46 - and
603:48 - it fades out
603:50 - and after it fades out we get new game
603:54 - so first of all i would like us to go to
603:56 - this menu file right here or not menu i
604:00 - meant to say main
604:01 - and here at the bottom
604:03 - where we say game dot state of menu and
604:05 - game dot state are running and paused
604:07 - what not we want to add one more else if
604:11 - we want to go
604:13 - else if
604:15 - game dot state
604:17 - dot ended so the game state has
604:20 - ended then you just say
604:23 - game
604:25 - couldn't draw
604:26 - because it has to now draw the game in
604:28 - that state but game will already know
604:30 - what state it is
604:32 - cool
604:34 - now currently this wouldn't really do
604:37 - much if we were to run the game we
604:39 - currently have
604:41 - and we were to test it out
604:47 - here we go
604:48 - oh gosh i missed it
604:51 - ah this one has a bad
604:53 - collision
604:54 - then as you can see we just get a dark
604:56 - screen we don't really go anywhere
604:59 - nothing's happening because the game
605:00 - overstate doesn't really have anything
605:02 - to draw yet
605:04 - so let's actually add that we can open
605:07 - up our game state
605:10 - and we can start here at the top
605:12 - underneath high school we can add screen
605:16 - text
605:18 - and a screen text is just a table that
605:21 - will display the text on the screen
605:24 - once we
605:25 - go to game in that state this will
605:27 - remove it and that and whatnot
605:30 - then we need to add a another variable
605:32 - here saying game
605:34 - over
605:35 - showing and this is for the animation so
605:37 - we know when the game over is showing
605:39 - and when it is not showing so you know
605:41 - when to switch from showing the game
605:44 - over state screen to showing the menu
605:47 - state screen
605:49 - so that can be false by default
605:53 - next year in change game state
605:56 - we can go if
606:00 - self dot state dot ended so if the state
606:03 - has ended
606:05 - then we can call the self
606:07 - game over function
606:11 - now this game over function is what
606:12 - we're going to create now
606:14 - basically it's going to do all the game
606:16 - over stuff for us
606:19 - so let's go here
606:21 - and say game over
606:24 - that's a function which takes itself
606:28 - and first we can set up the screen text
606:30 - that it takes that should be on the
606:32 - screen
606:34 - so self dot
606:36 - screen text
606:37 - is equal to a text component
606:42 - which contains the game overtakes which
606:45 - will fade in and out you could also
606:46 - maybe do the same and then also display
606:49 - the high score and the player score also
606:52 - fading in and fading out
606:54 - or what not something along those lines
606:56 - that could also be a very smart idea
606:59 - however we're going to keep it simple
607:01 - and just do the game over screen just
607:03 - game over and then poof done
607:05 - we can say zero
607:07 - love dot graphics dot get height
607:12 - times it by 0.4 to kind of get it in the
607:15 - middle in the center because you
607:16 - remember
607:17 - how fonts are used
607:20 - it's not necessarily starting in the
607:22 - middle of the font as well it starts
607:23 - here at the top so every letter has a
607:25 - top point and it starts there instead of
607:28 - in the middle so you just take note of
607:29 - that
607:31 - it can be size of h1 because it should
607:33 - basically take all of the attention it's
607:34 - the most important and say true true
607:39 - love dot graphics and then get
607:43 - get with
607:44 - and then center
607:47 - now if you're wondering what any of this
607:48 - means you can always just go back to
607:50 - this text file right here and just look
607:52 - at what all of these mean
607:55 - you'll notice or fade in and fade out
607:59 - right here is now set to true nothing
608:01 - else is basically set like this so the
608:04 - first time we'll be really using this
608:06 - fade in and out functionality
608:08 - then after we have done that we can just
608:10 - say self dot
608:14 - game over
608:15 - showing and we can make it equal to true
608:17 - because it's currently showing the game
608:19 - over
608:20 - if it's not showing the game over and
608:22 - the game state
608:24 - is ended
608:26 - then we should know that we want to
608:28 - switch from game state ended to game
608:31 - state menu
608:33 - because it's not showing game over
608:34 - screen
608:35 - and the state has ended so there's no
608:37 - point in showing it anymore
608:40 - now currently this won't do too much
608:43 - then right here instead of the main.lua
608:46 - we can just reduce the amount of lives
608:49 - the player currently has
608:51 - so player and it takes the lives so num
608:54 - lives and you just make that one
608:58 - now if we run it we should be able to
608:59 - see our output
609:02 - that should work we say start new game
609:06 - we uninstall live.exe
609:10 - and boom that is all we get so not
609:13 - really anything just yet
609:16 - so let's go down here
609:18 - because currently i didn't really think
609:20 - about it but this doesn't really draw to
609:22 - the screen so we put the text there but
609:24 - we never actually drew the text
609:27 - so this could do that instead of this
609:28 - draw function and let's go right
609:30 - underneath faded
609:33 - we can then say
609:35 - for
609:36 - index
609:37 - text
609:39 - in pairs
609:40 - self.screen text
609:43 - and we can say if
609:45 - self
609:46 - dot game over showing
609:49 - then
609:50 - and now here we want to draw all of the
609:52 - things while the game over is showing
609:55 - so self dot game over showing
609:58 - is then equal to text
610:01 - colon draw
610:03 - self dot screen text so it's going to
610:05 - draw the text that should be on the
610:06 - screen
610:07 - and then we can just say index
610:10 - if you're wondering what's going on here
610:11 - we can go here to text
610:13 - if we go to draw we take in the table
610:16 - text and then it's current index
610:18 - you'll notice return true or false
610:21 - that's how we know if we're supposed to
610:23 - show it or not if it returns false it's
610:25 - not currently drawing anything to the
610:27 - screen
610:28 - if it returns true it is drawing
610:30 - something to the screen
610:32 - and if you plan on adding more things
610:33 - here you just modified as a teeny bit
610:36 - so it can be
610:38 - able to do this more dynamically because
610:40 - currently it's good for one thing but if
610:42 - you have two or three things it's not
610:43 - going to be that great
610:45 - anyhow
610:46 - then you can say if
610:48 - not self.game over showing
610:52 - then so the game over is not showing
610:56 - then self
610:57 - coded
610:58 - change game state and we're going to
611:00 - change it back to the menu state
611:03 - and then otherwise is the game overstate
611:06 - isn't showing
611:08 - then you can just say
611:09 - else
611:11 - text
611:12 - draw
611:13 - self dot screen text
611:16 - and an index so this will basically
611:18 - start it off it will start to draw
611:21 - so yeah that is about that which we'll
611:23 - need i don't think we'll need any more
611:26 - let's try and run this and see what we
611:28 - get
611:29 - if we just drag this here so everyone
611:31 - can see start new game
611:33 - and end
611:37 - then we start getting a fading out game
611:40 - over screen
611:42 - thanks to everything we have already
611:44 - implemented and why did so much work at
611:46 - the start of the game
611:48 - we didn't have to do a lot now because
611:50 - we've already implemented fading in and
611:52 - fading out
611:53 - and that is for the game over screen and
611:56 - love 2d
612:02 - so in this tutorial we'll be
612:05 - implementing
612:06 - new levels as well as making the player
612:09 - invincible
612:11 - now after this tutorial the game is
612:13 - going to be a little bit broken but we
612:15 - will be fixing that in upcoming
612:17 - tutorials so don't worry too much about
612:19 - that
612:20 - now to give an example of what we'll be
612:22 - working with if i or what we'll have by
612:25 - the end of the day
612:26 - i just move this here
612:28 - now when we start a new game
612:31 - you'll notice the player blinks and if i
612:33 - try and
612:34 - go into this asteroid here nothing
612:35 - happens that is because of our new
612:38 - invincibility we added so when we start
612:40 - a new game or when we were in the player
612:43 - dies then they finally become invincible
612:45 - and they cannot be hurt for another
612:47 - while
612:48 - and this is very useful because let's
612:50 - say you have
612:52 - 20 asteroids on the screen it can be
612:54 - very difficult to avoid them immediately
612:57 - once you respawn
612:59 - so if you're invincible for a few
613:00 - seconds not only does that give you some
613:02 - time to clean up the screen and also
613:05 - make sure that you just don't
613:06 - immediately die once you respawn
613:09 - now to make sure that this works if we
613:11 - crash in here we'll actually explode
613:14 - then now we can try and crash into
613:15 - things again and we won't
613:18 - as for new levels we can just shoot
613:20 - these asteroids
613:22 - and
613:23 - i'll show you all the new levels
613:27 - and one more right here right here
613:31 - there we go so now we have level two and
613:33 - there are now two asteroids on level
613:36 - three there will be three asteroids
613:37 - level four four asteroids and so on
613:40 - but it becomes more challenging because
613:42 - each asteroid explodes into multiple
613:44 - more asteroids
613:47 - so it will become more challenging
613:48 - depending on how everything goes
613:51 - now a bug you might encounter here
613:54 - is let's say you die at level two here
613:57 - so you gave me a second
614:00 - let me
614:02 - there we go if i crash against something
614:04 - it tells me it's game over
614:06 - but once this game over screen leaves
614:08 - and we want to start a new game
614:14 - then you'll notice
614:16 - we're kind of still in the middle of the
614:17 - game but not the same game it's it's
614:19 - kind of weird
614:21 - now this is normal we are going to fix
614:23 - this in fact if you want to you can try
614:25 - and fix this yourself before the next
614:27 - tutorial but it's just normal because
614:29 - we're going to play around with some of
614:30 - the code and it's going to cause this to
614:32 - happen
614:34 - okay so let's try and implement that
614:36 - let's go to our state and open up our
614:38 - game state
614:40 - and let's see here
614:42 - where are we now we are now at draw okay
614:45 - then here in start new game we're going
614:47 - to add a few new things
614:50 - so at the top we want to go
614:53 - if
614:55 - player dot lives
614:58 - so the player lives is less or equal to
615:00 - zero
615:03 - they want to change the game state to
615:05 - ended
615:07 - so this will kind of fix a few bugs
615:10 - but also make sure we don't just start a
615:12 - new game because every time we
615:14 - level up we basically start a new game
615:17 - so if their lives is zero or less that
615:20 - means the game has been or should be
615:22 - ended
615:24 - so let's go here and we say
615:27 - self colon and then change game state
615:31 - to
615:32 - ended else
615:35 - if that's not the case if they still
615:37 - have lives left
615:39 - then their game state
615:42 - should be set to running this means it
615:44 - won't be going to the menu state for
615:47 - example
615:48 - to the paused state it will go right to
615:51 - the running state
615:53 - and now we can remove this one right
615:54 - here because we don't need that anymore
615:57 - then we want to say how many asteroids
616:00 - we want to spawn
616:02 - so we can say local
616:05 - num
616:06 - asteroids
616:07 - and that can be equal to zero
616:10 - and here we have our asteroids
616:13 - and now let's say they do level up we
616:16 - want to display the level on the screen
616:19 - even if it's level one
616:21 - if we run this
616:23 - new game it says level one so even if
616:26 - it's level one we want to display this
616:27 - on the screen
616:30 - we can then say self dot screen text
616:33 - is equal to text
616:35 - and in here we can just pass in all our
616:37 - required parameters
616:40 - so first the level we are in level
616:43 - that should be level
616:44 - with a space and then concatenate that
616:47 - by adding these two dots and saying self
616:49 - dot level
616:50 - so getting the current level say zero
616:53 - love dot graphics dot get height
616:58 - and you just times that
617:00 - by 0.25 so it won't be quite in the
617:03 - center of the screen it will be a little
617:05 - bit above the center of the screen
617:08 - and we can just add a comma there
617:10 - we go and say h1
617:12 - for the text size
617:14 - true
617:16 - true
617:19 - love.graphics.get with
617:21 - and then finally we want to position it
617:23 - inside into the center of the window
617:27 - okay so currently we also have another
617:29 - problem we have to look out for every
617:31 - time we start a new level there's a
617:32 - small possibility
617:34 - that once we start level
617:36 - the asteroid might appear on the player
617:39 - so we don't want the asteroids to spawn
617:41 - on top of the player we want asteroids
617:43 - to spawn anywhere around the player
617:46 - so to get this we want to create an
617:48 - infinite loop
617:50 - and this infinite loop will basically
617:51 - determine
617:53 - when and where everything should be
617:55 - spawned
617:56 - so let's go create a for loop first
617:59 - and exit 4i becomes 1
618:02 - and until i
618:04 - is
618:05 - num
618:06 - asteroids
618:08 - so the number of asteroids
618:10 - plus self
618:12 - dot level
618:14 - then we want to go local and in the
618:17 - asteroid exods we have here
618:20 - and we want to say
618:22 - local
618:23 - asy for asteroid y
618:25 - i do believe since we're not really
618:27 - putting anything next to it next to them
618:29 - we could possibly
618:31 - just go like this
618:34 - and it should be fine
618:36 - but just for a convenience sake i'm
618:38 - going to do this
618:40 - and then at the end of this for loop we
618:42 - want to insert into the
618:45 - table just like we usually do
618:48 - however this time we won't need to
618:51 - specify a specific size
618:53 - we can specify the asteroid size
618:57 - because then we have our specific
618:59 - asteroid size we want to spawn
619:01 - we're going to remove this
619:04 - and in between this local and this table
619:07 - insert we want to create an infinite
619:09 - loop that will reposition the x and the
619:11 - y
619:12 - until it is no longer on the player
619:16 - so we can say repeat
619:19 - until
619:20 - and we want to repeat it until the
619:22 - calculate distance
619:24 - from
619:25 - player
619:27 - x
619:28 - and player y
619:30 - and you want to say the asteroid x and
619:33 - asteroid y
619:35 - and if that is more
619:38 - than the asteroid size
619:40 - times two
619:42 - plus the player radius
619:47 - so we're checking if the distance
619:49 - between the player and the asteroid
619:52 - is more than the asteroid size
619:55 - times two plus the player radius so it
619:57 - means if the asteroid can currently
620:00 - damage the player the player was not
620:02 - invincible
620:03 - then you want to regenerate
620:06 - this
620:07 - aesx and asy
620:10 - so let's just put that here
620:13 - and let's just put that in there as well
620:16 - so it will run at least one time
620:20 - and then you will try and figure out if
620:22 - it should run again
620:24 - and will continuously rerun this code
620:27 - until the asteroid is no longer
620:29 - on the player so if the azure is no
620:31 - longer on top of the player
620:34 - and this isn't really required but i do
620:36 - want to just go on top here
620:38 - and say
620:40 - require
620:42 - globals
620:44 - because we are now using a function
620:46 - that's inside of globals but it's not
620:47 - really required
620:49 - okay cool so it's not really a guarantee
620:52 - we're going to see this change
620:55 - because we haven't really seen it in the
620:57 - past so it's not really guaranteed we'll
620:58 - even see it now but if we run our code
621:01 - it should work and nothing should be
621:03 - broken
621:04 - let's go like this say start new game
621:08 - okay and as you can see everything still
621:09 - seems to work
621:13 - but now the difference is the asteroid
621:15 - will always spawn a relatively far
621:18 - distance from the player so that they
621:20 - have a little circle they at least have
621:22 - to themselves
621:25 - okay i also see here we only have one
621:27 - life left
621:29 - but that was for development we can
621:31 - remove that later that's really required
621:33 - now
621:35 - next up we can open up the player so we
621:37 - can add the invincibility to the player
621:41 - so we're going to know how long the
621:43 - player can actually be invincible
621:45 - depending on how many times it has
621:47 - blinked and this will also indicate that
621:49 - the player is currently invincible
621:52 - if i were to just show the example again
621:55 - you'll notice the player blinks and at
621:57 - least to me as a gamer it says hey
622:01 - this player is currently invincible
622:03 - nothing can really touch it
622:05 - and once the blinking stops you're also
622:07 - no longer invincible
622:09 - so here you can see how many times you
622:11 - want it to blink so local
622:15 - local usable
622:18 - links
622:20 - and this will be the amount of blinks
622:22 - you wanted in my case i only wanted to
622:24 - blink ten times
622:25 - but then times two we're adding two to
622:28 - it because of how fast the blinking
622:32 - is compared to how long the player is
622:35 - going to be invincible
622:38 - okay so let's go
622:40 - down a bit
622:42 - then let's go right above the lasers
622:46 - and we can say invincible
622:48 - is equal
622:49 - to true so this is if the player is
622:51 - currently invincible if we cannot touch
622:54 - the player
622:56 - let's make that invincible not even
622:58 - permissible
623:00 - and here we can see
623:01 - invincible
623:04 - scene and then we can make that true as
623:06 - well
623:08 - this is if the player is currently
623:10 - grayed out or not so you'll notice we go
623:13 - from white to grayed out from white to
623:15 - grayed out this will save the players
623:16 - currently grayed out
623:18 - and here we can say time
623:20 - blinked
623:22 - and we can make that equal to the
623:24 - current usable blinks
623:26 - so this is the amount of times the
623:28 - player can blink while immortal
623:32 - cool
623:33 - now let's actually
623:34 - implement the
623:36 - design for all this so let's go to draw
623:38 - flame thrust
623:40 - and let's see here
623:42 - right above everything we can create an
623:44 - if statement
623:45 - and we can call it self
623:48 - dot
623:49 - invincible scene so if we currently are
623:52 - in the invincible scene state
623:54 - then it is a table
623:57 - dot insert
623:59 - into color
624:00 - 0.5
624:03 - and that's being passed in right here so
624:06 - the color
624:07 - and we're just basically setting it
624:10 - to 0.5 which is half its opacity
624:15 - we're going to enclose this function
624:16 - again and we can go to draw and this is
624:19 - where most of the things are going to
624:20 - happen
624:22 - let's go here into the else or not the
624:24 - else but the if statement here
624:26 - and right underneath debugging
624:29 - we can implement if the player is
624:31 - currently invincible at what should
624:32 - happen
624:34 - so if
624:35 - self dot invincible scene
624:39 - then you want to say love
624:41 - dot graphics
624:43 - dot set color
624:45 - one one one
624:48 - and then faded
624:51 - and opacity
624:53 - or 0.5
624:55 - so this will basically give us our
624:57 - default faded slash opacity we want or
625:00 - we'll just default to 0.5
625:03 - cool and in here we can just say else
625:06 - and we can copy this line paste it here
625:09 - and we can just actually we can just
625:10 - move this line up we don't need to copy
625:12 - or paste any lines
625:14 - and then we'll have this instead
625:16 - next up we can close this function and
625:19 - go down to maybe the move player right
625:21 - here
625:23 - we didn't want to take in dt
625:26 - and this is the time between the last
625:28 - frame and this frame for anyone who may
625:31 - have forgotten this will allow us to
625:32 - calculate when the player should blink
625:36 - we're gonna then say if
625:38 - self dot invincible
625:40 - then
625:42 - let me create end here
625:45 - self dot time blinked
625:48 - make that equal to self dot time
625:51 - blinked plus
625:53 - actually minus
625:55 - dt
625:55 - [Music]
625:56 - times two
625:58 - so this will first take the dt times it
626:01 - by two
626:03 - and then take what we have our current
626:05 - time length and subtract it from there
626:08 - we can then go on every uneven blank
626:12 - and make the player fully visible so in
626:14 - every uneven one for 1
626:16 - 3 five the player will be fully visible
626:19 - and not grayed out
626:21 - to do that we can say if
626:24 - math dot seal
626:26 - pass in self dot
626:28 - time blinked
626:29 - and then modulate by two and this is an
626:31 - easy way to see
626:33 - if something is an even or odd value
626:37 - so in this case if something is an even
626:39 - value it will be true here because two
626:43 - modulo two is 0 4 modulo 2 is 0
626:48 - 3 modulo 2 would be one because there's
626:50 - one left
626:52 - you're gonna just say self
626:54 - dot invisible scene
626:56 - make that equal to false
626:59 - otherwise we can say
627:01 - self dot invisible scene and make that
627:03 - to true
627:05 - then we can sit the if the player is
627:08 - invincible and make it false
627:10 - if the time blinked has
627:12 - ended so if
627:15 - self.time linked
627:18 - is less or equal to
627:21 - zero
627:22 - so if the time blinked has ended and
627:24 - there's no longer
627:27 - any reason to blink let me just say self
627:29 - dot invincible
627:31 - and make that false
627:34 - otherwise if the player currently isn't
627:37 - invincible we can just hit self dot
627:40 - time blinked equal to usable blinks
627:44 - so we're basically resetting it
627:46 - and itself
627:49 - dot invincible scene becomes false
627:53 - that's about that for the player
627:56 - and i don't believe it will be working
627:58 - just yet so if we run it the players
628:00 - will most likely not be thinking yes
628:02 - because we even haven't passed him dt
628:04 - yet
628:05 - okay to pass in dt we can go to the
628:09 - main.lua file
628:11 - and right here where it says move player
628:13 - we just pass in dt which is provided to
628:16 - us
628:18 - by love2d
628:21 - and in here
628:23 - where we say
628:24 - if not
628:25 - player.exploding we also want to now go
628:28 - and
628:29 - not
628:31 - player dot
628:33 - invincible because if the player is not
628:35 - invincible we are allowed to calculate
628:37 - the distance and make sure that the
628:39 - player is or is not exploding
628:42 - but if the player is invincible we don't
628:44 - want to do that
628:46 - cool
628:47 - and let's see here
628:49 - right before this elsif we can go
628:53 - if the
628:54 - number of asteroids
628:57 - is equal to zero
628:59 - so if there are no more asteroids left
629:01 - we can increase the game level so
629:04 - again.level
629:06 - is game.label plus one so it's going to
629:08 - increase by one and in game
629:10 - start
629:11 - new game
629:12 - and we can pass in the player and that
629:14 - will basically generate us not only a
629:16 - new player
629:17 - but
629:18 - a new game
629:20 - for the new level
629:22 - great now we save this file
629:25 - and we run it
629:29 - say start new game now the play will
629:31 - blink if we try and hit something
629:33 - we can go straight through and you'll
629:35 - see the level fade in and out
629:37 - now when we destroy this asteroid
629:43 - it should increase the level because
629:44 - there will be no more asteroids left on
629:46 - the screen
629:48 - can go here and just
629:51 - there we go so now it's level two and
629:53 - the asteroids also spawned very far away
629:56 - from us so there's no chance that once
629:57 - we go up a level and azure will spawn
630:00 - directly onto us
630:04 - cool
630:06 - let me just increase my life here so we
630:07 - can make sure if the player does
630:10 - end live we can respawn without a
630:12 - problem
630:14 - let's go here and run one
630:18 - start new game
630:21 - okay we can go through this asteroid
630:23 - we're going to shoot up this asteroid
630:26 - and go to the next level
630:29 - they will let's try and go to level
630:30 - three just to make sure that all
630:32 - labeling systems work
630:34 - thanks to how we built the game
630:35 - implementing levels is fairly simple
630:38 - it's auto generated so come on you can
630:41 - do it come on there we go yes now
630:43 - there's level three if i hit something
630:46 - okay then my hitboxes aren't the best
630:49 - okay now we're invincible again and we
630:51 - can fly right through stuff without
630:53 - getting destroyed
630:55 - until we are no longer invincible where
630:58 - will explode if you try and touch
630:59 - something
631:02 - cool
631:03 - and that's the gist of it
631:11 - now one thing i did want to show you but
631:13 - i kind of forgot in a previous tutorial
631:15 - it's kind of to show you an example of
631:16 - how we created the spawn before we get
631:18 - to the actual video
631:20 - is if we were to go to the
631:23 - i believe it would be anywhere like in
631:25 - the game or something just uh we will
631:28 - just spawn the amount of asteroids
631:30 - yeah so here is the gnome asteroids now
631:33 - when we play the game if i go
631:36 - live dot and we start the game
631:39 - new game then as you can see the
631:41 - asteroid spawns far from us but how do
631:43 - we know in the previous tutorial what we
631:44 - implemented really works that the
631:47 - asteroid will never spawn on top of us
631:50 - well when we go
631:52 - here and we change this to maybe 100
631:54 - asteroids
631:56 - and we run it again
631:58 - new game
632:00 - as you can see we have like a little
632:02 - radius around us
632:04 - where it wouldn't touch us
632:07 - same way if we were to start a new level
632:08 - it will spawn them all around us instead
632:11 - of add up so if we make this 500 for
632:13 - example
632:14 - and then we run it
632:18 - then as you can see there's a little
632:19 - radius where they won't spawn on top of
632:21 - us
632:23 - also i believe that level 500 is
632:25 - impossible
632:26 - if someone plays this game and they get
632:28 - to level 500
632:30 - then
632:30 - please show me how you defeat it because
632:32 - that would be very interesting
632:35 - all right so yeah that is just what i
632:37 - wanted to show you just to make sure you
632:39 - know that what we implemented actually
632:41 - works
632:43 - so first off one thing we have trouble
632:46 - with is if we actually start the game
632:47 - right now
632:49 - and we just wait to un
632:52 - immune ourselves
632:54 - oh wait we can like start a new level
632:57 - and whatnot
632:59 - okay now here explode okay that's fine
633:03 - let's continue
633:06 - okay now explode again now we have one
633:09 - life left and now then i can show you
633:11 - what i mean
633:14 - all right so now when i crash into this
633:16 - asteroid
633:18 - which i just missed
633:23 - and it says game over now when we start
633:26 - up a new game you may have remembered
633:27 - this bug from a previous video
633:32 - every new game then we kind of continue
633:35 - flying off where we left off
633:37 - so we just continue if i die here then
633:40 - it's just going to spawn me back at this
633:42 - exact location in the next game
633:45 - therefore we should create a reset game
633:48 - function
633:50 - so let's go into main.lua
633:54 - and right above the love.load and this
633:58 - could also be in globals if you wanted
633:59 - to or you can create a utils.lua file or
634:02 - whatnot
634:03 - but here we can say function
634:08 - reset and this will just reset
634:09 - everything for us
634:12 - and then here we can just say end
634:15 - so first we can read the save data so
634:19 - local
634:21 - save data
634:23 - that is equal to read json
634:26 - and then you just put in or
634:28 - save the json or in this case just save
634:31 - we don't need to specify json
634:33 - underneath that we can then create our
634:35 - player
634:37 - and that will just spawn a new player or
634:39 - create a new player object with free
634:42 - lives we then go game and we can create
634:44 - a new game object
634:47 - save
634:48 - data we just pass that in
634:50 - and then create a new menu object which
634:52 - is equal to menu
634:55 - and you can just pass in the game
634:58 - and the player
634:59 - and then
635:01 - destroy asteroid we can make that equal
635:03 - to false
635:05 - now this destroy asteroid you might have
635:07 - forgotten about it but if we go to our
635:10 - globals.lua
635:12 - and we can actually keep this here
635:14 - then you'll notice
635:17 - here destroy asked
635:20 - just so you know where we are coming
635:22 - from and here we're just making it false
635:24 - again in case you may have forgotten
635:26 - where this is
635:28 - then after that you basically have
635:29 - created
635:31 - a reset function
635:33 - so what we can do now is we can remove
635:37 - this
635:38 - as well as this right here
635:40 - i can you can just say reset
635:44 - because this player game and menu
635:47 - and destroy asteroid are all global
635:49 - because they don't have a local in front
635:51 - of them
635:52 - so they can still be used once we use
635:54 - this reset
635:56 - so now we're going to reset the game
635:57 - once we start it
635:59 - and whenever we die we want to reset the
636:01 - game again
636:03 - to do that we can go down to where
636:05 - update is
636:06 - and scroll all the way down
636:09 - until here where it says game.state.menu
636:13 - then we have our menu run click and then
636:15 - our mouse clicked which is false
636:18 - then here we can check if not
636:21 - reset complete
636:23 - and this is a global variable
636:25 - but actually we want to make it local to
636:27 - this file but global in the file so we
636:29 - can go up here
636:31 - and we can just
636:32 - say local
636:35 - reset complete
636:37 - and we can make that equal to
636:39 - and you might want to make this
636:41 - underscore complete or like this
636:43 - depending on how you name it when i
636:45 - scripted this video it was probably like
636:46 - super late at night and here i have like
636:48 - underscores and here captain camel case
636:51 - you should just stay consistent but i
636:52 - did this late at night so i'm not
636:54 - consistent anymore
636:56 - anyhow this will tell us when we want to
636:58 - reset the game once we're in the menu
637:00 - state
637:01 - if it's true we can just call reset
637:04 - and then reset
637:06 - complete is true
637:08 - then here we can say
637:10 - else if
637:12 - game dot state
637:15 - dot ended so the game state is ended
637:18 - we can say reset complete is equal to
637:21 - false so if we do die then the reset
637:25 - complete will become false
637:26 - then once we go into the menu state it
637:29 - will reset the game for us
637:32 - all right
637:33 - we can now just save and test this out
637:36 - this should make sure that once we
637:38 - restart the game we don't just continue
637:41 - i'm going to just decrease the amount of
637:43 - lives i have
637:44 - because free is kind of unnecessary
637:48 - so let's just make that one for now but
637:50 - you could keep it free i just don't want
637:52 - to wait forever to be able to
637:54 - die
637:57 - all right so let's see what happens i
637:59 - crash
638:01 - the game is over
638:04 - now what should happen is i should spawn
638:06 - in the middle of the screen again
638:09 - so new game
638:10 - middle of the screen level one only one
638:12 - asteroid so we have basically
638:14 - successfully reset the game
638:18 - cool we can now just change the player
638:20 - lives back to free
638:22 - save that
638:24 - next we can go to globals
638:28 - now here we want to
638:30 - write json so we already have read json
638:34 - but now we also want to write the json
638:36 - so i'm going to copy that
638:38 - paste it change it from read to right
638:42 - we also get the file name but then we
638:44 - also need to get the data we want to
638:46 - write
638:48 - now we are going to get
638:52 - a table and we want to convert that
638:54 - table into json so we can store it
638:58 - inside of our save.json because this may
639:01 - look like a table but this is actually
639:03 - json
639:04 - okay so to make sure it works we can
639:06 - also print it out to the screen if you
639:08 - want to but you're anyways going to see
639:10 - how it looks once we put it inside of
639:12 - the save the json so you could print it
639:15 - out to your screen
639:16 - or you could just look how it looks in
639:18 - the save dot json
639:20 - okay so now we can have our local file
639:23 - and we want to open it and it's going to
639:25 - be the same file
639:26 - but this time we want to open it in
639:28 - write mode instead of read mode
639:31 - then
639:32 - we want to go here
639:33 - and say
639:34 - file dot file coden right
639:38 - and the only reason i'm getting these
639:39 - yellow lines is usually because you'd
639:41 - want to check if this file is nil or not
639:43 - first
639:45 - if the file is nil you don't usually
639:46 - want to try it right to it
639:48 - so if you want to be safe you can first
639:50 - check
639:52 - if
639:54 - file
639:56 - is equal to nil
639:58 - then
639:59 - and you can just like return
640:02 - or something anything here would work or
640:05 - you could just do this if the file is
640:07 - not nil so if it's not
640:10 - nil
640:11 - then you want to
640:13 - do this as you can see now the yellow
640:15 - lines are gone because we know file is
640:18 - not nil because we checked for it first
640:20 - so yeah that's just something you want
640:22 - to maybe take note of i'm not going to
640:24 - do that right now
640:25 - but you could there's nothing wrong with
640:27 - it
640:28 - it's actually better practice i'm just
640:30 - not going to do that right now
640:32 - we can then say
640:34 - luna json
640:36 - dot
640:37 - in code so first we used d code d code
640:41 - converts
640:43 - json
640:44 - into a lua table
640:47 - whilst in code converts a lua table into
640:51 - json
640:53 - then here you just pass in data which we
640:55 - get here
640:56 - they want to close the file and then the
640:58 - function is done we don't need to return
641:00 - anything
641:02 - and this will write to our json
641:05 - to make sure it works
641:07 - we can actually just yeah that's already
641:09 - serious we don't have to change that
641:12 - we can now go to game because we want to
641:14 - save our high score so once we boot into
641:16 - the game again we have our high score
641:18 - there so you go to the top
641:20 - and we can create a new function called
641:22 - save
641:24 - game which is equal to a function
641:27 - that takes in self
641:29 - and it just does
641:31 - write json
641:33 - and in the file name which would be save
641:36 - and then
641:37 - the lua table in this case we want to
641:39 - save the high score
641:41 - and just self dot high score
641:44 - and this should
641:46 - save the file for us
641:48 - if we get a new high score
641:51 - now it won't just call itself we need to
641:53 - still call this function
641:56 - so here in game over for right now we
641:59 - can just say
642:01 - self
642:02 - colon
642:03 - save
642:04 - game
642:05 - and it will save the game for us
642:08 - let's try and run this and make sure we
642:10 - actually get that so we can open this
642:12 - save the json so we can see what happens
642:16 - we say new game current high score is
642:18 - zero
642:19 - but if i were to just go up here you'll
642:21 - notice my high score also increases but
642:24 - now we need to make sure it saves
642:26 - so just give me a second and let's blow
642:29 - up
642:34 - now you get a game over our high score
642:36 - is a thousand
642:39 - okay we need to see and make sure that
642:42 - that high score is what we see
642:44 - if i say quit then as you can see it
642:47 - updated our file
642:48 - now the high score is 110.
642:53 - okay
642:54 - now i'm just going to decrease my hp
642:57 - by going here and just saying make it
643:00 - one just gonna constantly have to wait
643:02 - forever in order to finish the game
643:05 - now let's say we only get one score here
643:09 - and as you can see our high score is 110
643:11 - now
643:12 - and our score is 20.
643:16 - so our high score and our score are two
643:18 - different things at this moment if we
643:20 - crash
643:23 - we get our game over screen
643:27 - and we get our save.json
643:29 - you'll notice our high score didn't
643:30 - change along with
643:32 - it that is because
643:35 - our high score here never changed so as
643:39 - long as this high score doesn't change
643:41 - the high score we save will not change
643:43 - either
643:45 - that is why we could just do go here and
643:47 - we didn't have to do any checks before
643:49 - because we already do checks to make
643:51 - sure that this high score doesn't go
643:54 - over the normal score unless we get more
643:58 - for example if we go here
644:00 - our high score is 100
644:02 - 110
644:04 - if we try and beat that high score
644:12 - okay so my high score increased as well
644:14 - as my score as you can see since my high
644:16 - score has been surpassed so now both of
644:19 - them will be increasing and once i
644:21 - explode
644:22 - then the high score inside of save json
644:25 - is also updated
644:29 - so you'll notice that the high score
644:31 - only changes once the score is higher
644:33 - than the high score
644:35 - and that is that for today's tutorial
644:43 - this will be your final love 2d tutorial
644:47 - however to all of you who made it all
644:50 - the way here to the very last video
644:53 - well done
644:56 - you have all done such a great job
644:58 - getting here
644:59 - and with one last step
645:02 - you can finally continue on your road to
645:04 - being a game developer
645:07 - now before we continue because i know a
645:09 - lot of you probably missed out a few
645:11 - pieces of code here or might not know
645:13 - what to do after you finish this you
645:15 - could skip this part if you want to
645:16 - because it's not that important
645:20 - but
645:21 - here we can just bring this
645:24 - over so
645:26 - all of the code is on github and this
645:29 - link will be in the description so if
645:31 - you miss anything you can just go here
645:33 - and you'll be able to find it
645:36 - all the code we have up until now
645:38 - now when you go into lua and then into
645:41 - love2d
645:43 - you'll have the asteroids game folder
645:45 - and that's what we are building
645:47 - and we are at number 15. so you can get
645:49 - number 14's code if you have fallen
645:51 - behind or if you just want to get a few
645:54 - things we'll get to in a second
645:56 - once you finish this course
645:59 - and you don't know what game to build
646:01 - next i do have a few things i want you
646:04 - to try and do on your own
646:06 - and also point a few out
646:08 - during the game play whilst i show you
646:10 - what we're implementing what you could
646:12 - also add
646:14 - so here is a lot of things called
646:16 - homework
646:17 - and you don't have to do this but if you
646:20 - do this you will learn how to build and
646:23 - game on your own without my help
646:26 - which is very useful because i would
646:29 - always be there to hold your hand
646:31 - while we code a game together
646:34 - sometimes you'll have to do that on your
646:36 - own
646:37 - and this is where it can start
646:39 - there's a lot of things you can do
646:40 - create a settings page
646:43 - because if we look here
646:47 - we have a settings button but it doesn't
646:48 - do anything so you
646:50 - can implement that settings page that's
646:53 - i want you to do
646:55 - you can add more sound effects which
646:57 - we'll be doing in this video
646:59 - you can add a better design to the menu
647:03 - add mobile support add items to the game
647:06 - so let's say
647:08 - you want to give your
647:10 - player better guns
647:12 - so let's say after every third asteroid
647:14 - to destroy
647:15 - maybe a random gun will spawn that they
647:17 - can
647:18 - if they
647:19 - hit it then instead of exploding they
647:21 - will equip the gun and then they can
647:23 - shoot better lasers than what they
647:26 - currently have
647:28 - which could help them like once they get
647:30 - to like level 500 if you have a very
647:32 - powerful gun it could be an easy game
647:35 - you can add more enemies because
647:36 - currently it's very basic but you could
647:39 - add like in the original game and ufo
647:42 - that will
647:43 - occasionally also jump in and maybe
647:45 - shoot the player or just try and hit him
647:48 - and then you should also try to destroy
647:49 - that ufo
647:51 - you can improve the performance because
647:53 - currently it's not really
647:55 - focused on performance if you have a
647:57 - very powerful pc you won't even notice
648:00 - it
648:01 - but after this tutorial
648:03 - if you have a low end pc you might
648:05 - notice frame drops going until 30 fps if
648:08 - not lower
648:10 - and last but not least
648:12 - already not yet but you can also add a
648:14 - better pull screen and then last but not
648:16 - least
648:17 - you can add multiplayer support
648:20 - this is something that can bring you
648:22 - very far in the future you can go and
648:24 - get yourself a lua
648:27 - module the love2td module or just lua
648:29 - module and you can start trying to code
648:32 - your game that two people on two
648:34 - different computers can try and play the
648:36 - game together
648:37 - it's going to be a very difficult thing
648:39 - to do but if you get this right you can
648:41 - make any game and you can make it
648:43 - multiplayer for more people to play
648:46 - together and the multiplayer game is
648:48 - usually a bit more successful than a
648:50 - single player games because multiplayer
648:52 - games you can play with your friends
648:54 - so here's a bunch of things you can do
648:56 - and we'll go for a few extras in the
648:58 - video as well
648:59 - now in this video we'll be adding
649:01 - background music and sound effects
649:04 - i want you to go here to our github page
649:06 - go to number 15 which is the last one
649:10 - then you'll notice
649:12 - here inside of source
649:14 - we now have a new folder called sounds
649:17 - go into sounds
649:19 - and here you'll also find all the sounds
649:21 - we will be using
649:23 - in the tutorial
649:24 - and you just open all of them
649:26 - and then you'll notice there's a
649:28 - download button and you can just
649:29 - download them all so you click download
649:33 - and did it start to download yes there
649:35 - it goes it downloads
649:37 - and just download all of them until you
649:39 - have all of the sounds
649:42 - there you go
649:43 - once you have all of this let me just
649:45 - move this back to a different screen
649:49 - we can then open up our file manager and
649:51 - here under source
649:53 - we can create a new folder called sounds
649:57 - and we can then go here to downloads
650:00 - where our things should be and we just
650:02 - copy all of the sounds we just got
650:05 - and we can just throw them in here into
650:07 - the sounds folder
650:09 - and there you go now you might have to
650:11 - rename a few of them because the names
650:14 - are now incredibly long and tedious
650:17 - so just go
650:18 - here there we go
650:22 - oh i didn't do anything
650:24 - there we go okay let's just rename all
650:25 - of them
650:27 - all right now latest we have two types
650:30 - of sounds here first we have ogg and mp3
650:33 - this is just to show you can use
650:35 - multiple sound types
650:37 - but usually you'd find people using ogg
650:40 - and mp3 and a lot of people also use wav
650:44 - or wav
650:46 - now i just chose ogg because i think
650:48 - that's what i got when i downloaded
650:50 - these here
650:51 - you can also play them if you want to i
650:53 - would play them but i don't think you'll
650:55 - actually hear it now that i think about
650:57 - it
650:58 - alright so i quickly fired up a
651:00 - different screen recorder so if the
651:01 - quality might be a little bit low that
651:04 - is just because i'm using obs instead of
651:06 - my simple screen recorder as usual
651:10 - now we can actually hear how this sounds
651:14 - so if we actually go here and just say
651:16 - open
651:18 - containing folder we can hear all of
651:20 - these sounds to the background music
651:25 - [Music]
651:27 - yeah then we have the explosion asteroid
651:32 - so that's when an asteroid explodes then
651:34 - when the player explodes
651:37 - and of course you could change these
651:38 - sounds to be something else i just went
651:41 - online did a quick google search for
651:43 - free music or free sounds and i just
651:46 - downloaded the first one i saw so you
651:48 - could definitely change this if you want
651:51 - that's how laser will sound then an
651:53 - option select like selecting a button
651:56 - then defroster
652:02 - then the thruster but louder
652:07 - yeah i couldn't remember why i had both
652:09 - of these but we'll try and find out
652:10 - right now all right
652:14 - so now we have the sounds
652:16 - next up we can go to components
652:19 - and create a new file
652:22 - called sfx for sound effects
652:28 - and like usual this will go local love
652:30 - is equal to require
652:33 - love
652:34 - and we have our
652:35 - function
652:37 - sfx
652:39 - which will return
652:41 - a table
652:43 - and you can just return
652:44 - sfx
652:47 - all right so first we probably want to
652:49 - select the background music
652:52 - so let's go up here and we say
652:55 - local bgm
652:57 - local
652:58 - bgm is equal to
653:00 - love.audio
653:03 - dot new source and remember
653:06 - if you're wondering about any of this
653:08 - this is on the love to the documentation
653:12 - so just go to love2td.org i think and
653:15 - then you'll find the documentation which
653:17 - explains this as well
653:19 - then we should select the background
653:21 - music
653:22 - now we can say src
653:25 - then sounds
653:27 - and then bgm dot mp3
653:32 - so
653:33 - src
653:35 - sounds
653:38 - bgm dot mp3 so we just selected it
653:42 - and then we want to set the mode
653:45 - to
653:46 - stream
653:48 - stream is when you have long
653:50 - audio tracks like background music for
653:52 - example that's going to continuously
653:54 - play for a long time
653:56 - so let's say it's 30 seconds or longer
653:58 - you probably want to use a stream
654:01 - cool
654:03 - then you want to go bgm or go to next
654:05 - line
654:06 - bgm
654:08 - colon set volume because the volume will
654:11 - be very loud but you could change this
654:13 - depending on how you like it
654:16 - and i'm going to set mine to 0.1 which
654:18 - would be very soft
654:20 - but the volume will be very loud but if
654:22 - you want it louder you could make it
654:24 - louder by just increasing this number
654:26 - then bgm
654:28 - set looping
654:30 - to true and this will make sure it loops
654:32 - continuously over and over so once the
654:36 - background music ends after it's like 30
654:38 - seconds or what not of playing it will
654:41 - start playing it again
654:43 - cool you might think this is annoying
654:44 - but a lot of games actually do this
654:46 - where just play the background music
654:47 - over and over and over again and usually
654:50 - people don't find it too annoying unless
654:51 - the background missing itself is an
654:53 - annoying tune
654:55 - cool
654:56 - now we want to link all of our effects
654:59 - so all our sound effects
655:02 - so you can go local
655:03 - effects
655:04 - and this will be a table just to make
655:06 - things easier it doesn't have to be a
655:07 - table but i'm going to make it one
655:10 - i'm going to copy this line of code
655:12 - just remove the local change bgm to ship
655:17 - explosion
655:19 - and make that equal to everything here
655:22 - but we're going to change this to
655:24 - this explosion
655:29 - ogg
655:30 - and we're going to change from stream to
655:32 - static because static is better for
655:35 - these shorter audio tracks like that's
655:38 - five seconds long or 10 seconds long if
655:40 - there's a very short and static would be
655:42 - better
655:43 - we can then
655:44 - just add a comma here
655:46 - and then copy paste it four times
655:49 - there we go
655:51 - then this can be asteroid instead of
655:53 - ship
655:54 - and then of course we just change from
655:56 - explosion player to
655:58 - to asteroid
656:00 - keep it static what not
656:03 - in this we can change to the laser and
656:05 - here i'm spelling it with an s because
656:07 - here i figured out you actually spell
656:09 - laser with an s and not as it
656:12 - so just in case you want to know but if
656:13 - you want to stay consistent because if
656:15 - you linked your laser of a set you could
656:17 - change that to z
656:19 - and then here we say laser
656:21 - here we can call the select
656:24 - and then
656:25 - option
656:26 - select
656:28 - and then thruster
656:30 - which will of course be thruster but
656:32 - loud
656:33 - so if you think the thruster is too loud
656:36 - you could probably go for normal fresher
656:39 - but this is just for making it a little
656:40 - bit louder because i think this normal
656:42 - thruster is probably a little soft
656:45 - cool
656:46 - now first when we play an effect we
656:49 - should
656:50 - have a true or false value to say if an
656:53 - effect has been played
656:55 - so if x for effect
656:59 - and then played
657:01 - we make that equal to false
657:03 - because by default nothing is being
657:05 - played then
657:07 - set
657:08 - fx
657:09 - played
657:12 - and this will basically just set this fx
657:14 - here to true or false you don't have to
657:17 - use a function for it but i'm going to
657:20 - use a function for it because it's just
657:21 - a bit safer
657:23 - we're going to go function
657:26 - self and then has
657:29 - played
657:30 - and then just self
657:32 - dot s
657:34 - or fx played
657:36 - equal to has played
657:39 - now we want to create a function to play
657:42 - the background music
657:45 - when we wanted to
657:47 - so we can just go here and say play
657:50 - bgm for background music that's a
657:52 - function
657:53 - takes itself
657:55 - and we can check if not bgm
657:59 - is playing
658:01 - so if the background music is not being
658:03 - played
658:05 - then
658:06 - end
658:08 - so this right here just checks if the
658:10 - background music is currently being
658:12 - played so if it's going dedede in the
658:15 - background
658:16 - then bg m
658:19 - play
658:20 - so if it's not playing you want to start
658:22 - playing the background music
658:25 - cool
658:26 - now we need two more functions
658:28 - first one is to play the effects so if
658:31 - you want to play a sound effect
658:33 - and then the other one is to stop a
658:34 - sound effect from playing
658:37 - so let's first do stop sound effect
658:39 - because that's the
658:41 - easiest one you can say function takes
658:44 - itself and then the effect
658:47 - then if
658:49 - effects
658:51 - and then we want to pass in the effect
658:54 - so this right here will go to these the
658:56 - effects and see if we pass in like a
658:58 - ship explosion string on our asteroid
659:00 - explosion
659:02 - and then it will try and select that one
659:04 - to see
659:06 - if it currently is playing
659:09 - which if it is
659:10 - playing then you want to stop the effect
659:13 - from playing
659:14 - so we can just copy this
659:16 - and then say stop
659:18 - as simple as that and that will stop the
659:20 - background music from playing
659:22 - next up is to actually play the effect
659:26 - now playing the effect is a bit more
659:29 - complex
659:30 - because we have so many effects we can
659:32 - just say play
659:34 - if x
659:35 - is equal to a function
659:37 - that takes itself
659:38 - the effect we want to play
659:41 - and in the mode we want to play it in
659:43 - and i'll explain this in a second
659:46 - now we will have three different modes
659:50 - we'll have single
659:52 - and the single mode is when we only want
659:55 - this effect and no other effects to play
659:59 - then we have slow mode
660:01 - and this will just
660:03 - play the effect as normal
660:06 - and then we have the else which will
660:09 - just stop this effect from playing if
660:12 - it's already playing
660:13 - and then start playing it again
660:16 - all right so let's implement that
660:19 - so if
660:20 - mode is equal to
660:22 - single and it might sound a little bit
660:24 - confusing right now but you'll
660:25 - understand what i mean in a second
660:28 - then if
660:29 - not
660:31 - self dot fx played
660:34 - then so if the effect is not being
660:36 - played right now
660:39 - then
660:40 - self colon set fx played
660:43 - to true so we want to set it to true
660:46 - and then if not
660:49 - effects
660:51 - effect
660:52 - currently is playing
660:55 - then
660:57 - we want to go
660:58 - effect
661:00 - at effect
661:01 - play
661:02 - and this will play the effect for us
661:05 - so basically this is in the sound effect
661:08 - that's only allowed to be played once
661:10 - that's why it's single
661:12 - next up we want to do the slow mode so
661:14 - else
661:15 - if
661:17 - mode is equal
661:19 - to slow
661:21 - then if
661:23 - not
661:24 - effects
661:26 - effect so the current effect
661:29 - is not being played
661:31 - then
661:32 - effects
661:34 - effect
661:36 - and then play
661:38 - now usually you don't actually have to
661:40 - do it like i'm doing right here it's
661:42 - just i like to have a little bit of
661:44 - variety in my effects they shouldn't all
661:46 - just be generic
661:50 - there should be like different versions
661:52 - of it for example single where it's only
661:54 - allowed to be played once slow where
661:56 - it's allowed to be played
661:58 - but we first check if it's currently
662:00 - being played then we can play it again
662:03 - and then finally last but not least we
662:04 - will stop the effect and start playing
662:06 - it again
662:08 - okay that can be any other command other
662:10 - than slow so else and single of course
662:14 - self
662:16 - stop
662:18 - effects and it will stop the effects
662:20 - like just like here
662:22 - and you can just say effect
662:24 - and then effect
662:27 - at effect
662:29 - and then play it
662:31 - cool and that is the sound effects file
662:34 - it could be much bigger
662:35 - but i like to keep it a little bit
662:37 - simple for right now because you might
662:39 - want to expand on this later and you
662:41 - don't want it to be
662:42 - too complex
662:44 - so let's start by going to
662:48 - the main.lua file
662:51 - and here in reset
662:53 - we can just go
662:54 - sound effect
662:56 - is equal
662:58 - to sound effects
663:00 - to create a new sound effect
663:02 - object
663:04 - and of course we should import it you
663:06 - can either use dot or slash notation as
663:08 - you can see i use both of them here as
663:10 - an example
663:11 - so sfx
663:13 - and we can just go to
663:15 - component
663:17 - dot
663:18 - sfx
663:20 - now when we load
663:23 - the game
663:24 - we want to start playing the background
663:26 - music so we can just go sfx
663:30 - and then
663:31 - play bgm and it will start playing the
663:33 - background music for us
663:36 - cool and let's play our game and see
663:38 - what we get
663:40 - and as you can see
663:42 - we get background music playing for us
663:44 - now
663:47 - all right
663:49 - so that is for the background music
663:52 - next up let's go to the menu here and
663:55 - let's just pass in sound effects
663:58 - for all three of these
664:00 - sfx
664:01 - because we're going to add sound effects
664:03 - to all three of them and we just change
664:05 - the player lives to free
664:07 - player also has another
664:10 - player object being created here so we
664:12 - can just pass in sfx here again
664:14 - there we go and we'll later on
664:17 - change that
664:19 - in the player itself
664:20 - now first let's go to menu
664:23 - which should be here in states
664:25 - and first we can take in the sound
664:27 - effect so sfx
664:30 - and then here where we go to
664:32 - run
664:34 - when we check if the button is being
664:36 - hovered on
664:38 - if it is being hovered then you want to
664:40 - go s f x
664:42 - colon
664:44 - play
664:46 - or
664:47 - play
664:48 - and then fx for the sound effect
664:51 - and you can say we want to play the
664:52 - select
664:54 - and single
664:56 - all right
664:57 - so it should be able to run if it's not
664:59 - going to crash because of those nil
665:01 - values
665:03 - as you can see it kind of plays
665:07 - however we need to also add another line
665:10 - of code
665:11 - right here instead of the else statement
665:14 - so if self
665:18 - got focused so the one is currently
665:19 - focused on is the same
665:22 - as the name
665:25 - then
665:27 - we can go
665:28 - sfx set fx played
665:32 - to false
665:34 - because you'll if you could remember if
665:36 - we go here to sfx
665:38 - and we go to single
665:41 - then here it sets it to true but here we
665:43 - check if it's already false
665:46 - now we are manually setting it to true
665:49 - or false depending on
665:51 - the context so you don't want it to play
665:54 - multiple times
665:56 - over the same like button so we're
665:59 - saying single here and we have to reset
666:01 - it to false here
666:03 - if it has already been played before we
666:06 - are allowed to play it again
666:08 - you could remove this if you want to
666:10 - it's just it does help make everything
666:13 - just work fine now go
666:15 - as you can see you can now
666:19 - go over all of them you can do multiple
666:21 - times
666:24 - cool and as for the menu state
666:28 - next up let's go to the game state
666:31 - and all we need to do here is just where
666:33 - we create this asteroid
666:36 - we just also pass in sfx for sound
666:39 - effect
666:40 - because the asteroids will also have
666:42 - sound effects for once they explode
666:45 - and before we go asteroids we can go
666:47 - player
666:49 - which should be inside of objects and
666:52 - player
666:53 - and first we can take in
666:56 - sound effects
666:58 - and then first
667:00 - here with the
667:01 - shoot laser i believe because that's
667:03 - when we want to play a shoot laser sound
667:05 - effect
667:06 - we can just go sfx
667:09 - play
667:11 - fx
667:12 - and then just the laser
667:15 - and since we're not passing anything in
667:18 - if we go here to sfx
667:20 - that means it will stop the effect if
667:23 - it's currently playing and it starts
667:24 - replaying it
667:26 - let's run that and hope it works
667:29 - as you can see now if i were to
667:33 - spam the button
667:34 - you'll notice it just keeps on playing
667:36 - because the sound effect is so short you
667:39 - don't actually hear the sound effect
667:40 - getting cut in half basically
667:43 - so if you spam it you're going to hear
667:44 - that sound effect being cut in half
667:47 - which it is currently actually doing
667:50 - next up we can go back to player and
667:52 - just go to move player
667:54 - and in here where we say if
667:56 - self.frosting so if we're currently
667:58 - frosting the player forward
668:01 - we want to go here and just say sfx
668:05 - play fx
668:07 - i'm going to say specify the
668:10 - thruster
668:12 - and then slow
668:14 - and slow of course if we go here to slow
668:18 - it will just check if the effect is
668:22 - not currently being played then it will
668:24 - just start playing the effect
668:26 - alright
668:28 - and we can do the same here
668:31 - at the bottom but now we can just say if
668:33 - that we're not currently thrusting
668:34 - ourselves forward sfx
668:37 - stop
668:38 - fx
668:40 - thruster
668:42 - cool let's see if that
668:44 - works oh
668:48 - that's weird let's try it again
668:52 - so at thirty we're trying to index a nil
668:54 - value
668:56 - so right here
668:58 - okay so thruster seems to be
669:01 - a nil value
669:04 - also it seems we haven't taken an sfx
669:06 - here in game so you can just also take
669:08 - that
669:09 - and let's see here
669:12 - uh you know what i spelt incorrectly
669:14 - there we go
669:16 - now it should work
669:18 - okay
669:22 - all right you'll notice
669:24 - every time we now frost
669:27 - it makes a nice sound and it stops once
669:29 - we stop pressing the w key
669:34 - cool
669:35 - [Music]
669:38 - then last but not least we can go to
669:41 - asteroids
669:43 - and go to the top we can take in
669:45 - sound effects
669:48 - then we want to play an effect once we
669:50 - destroy the asteroid so in the destroy
669:52 - function
669:53 - once here
669:55 - when we resize and whatnot
669:57 - we can just pass in the sound effects as
669:59 - well because we're creating new
670:01 - asteroids and then at the end
670:03 - before they remove we can just say sfx
670:08 - play fx and then we can just say
670:12 - asteroid explodes
670:15 - then if we run it and we shoot an
670:17 - asteroid we should hear
670:25 - and there you go
670:26 - so now you hear that
670:28 - every time you shoot an asteroid
670:31 - and just like that we added a sound to
670:34 - our game and believe it or not that
670:35 - actually took me a whole day to
670:37 - implement on my own
670:39 - just because we did it pretty fast
670:40 - doesn't necessarily mean it was very
670:42 - fast
670:43 - anyhow and that is the end of the love
670:46 - 2d crash course
670:49 - thank you all for watching it was a very
670:52 - fun experience doing this with all of
670:54 - you
670:56 - now before we go i might want to give
670:58 - you a little bit extra homework if
670:59 - you're up for the challenge
671:02 - you might want to make this
671:04 - on the background to make it look cool
671:06 - have the asteroids be flying in the
671:08 - background wouldn't that be cool if
671:10 - you're here in the menu state and it
671:11 - does that
671:13 - all right and if you go to new game
671:16 - you might want asteroids to explode when
671:19 - they hit each other wouldn't that be
671:21 - cool as well but then of course the
671:23 - player score doesn't necessarily have to
671:26 - increase but it could be pretty neat if
671:28 - two asteroids were to hit each other and
671:30 - then explode into more
671:32 - asteroids and yeah that's about it
671:35 - you can also try porting the game to
671:38 - android which i have not really tried
671:41 - but it would be a pretty difficult
671:43 - challenge and if you get it right then
671:45 - you can make android games for yourself
671:47 - and for your friends
671:49 - thank you for watching

Cleaned transcript:

in this complete game development course you will learn how to build a variety of games using lua and love2d first you will learn the basics of the lua programming language and then you will learn how to use lua to create games steve teaches this course he is an experienced game developer and teacher leave a comment with the type of game you plan on making welcome to your lua crash course so this course will contain everything about lua we'll learn lua and then later on we'll learn a little bit of love 3d and then we'll build a few games with lua but let's not get ahead of ourselves what exactly is lua lua is a highlevel procedural programming language designed in 1993 primarily to be embedded into other applications if most of this flew over your head it's perfectly fine most things you'll have to take in here is that lua is a procedural programming language meaning that things like object orientation doesn't really exist in there but you can simulate it these days it is mainly used in games so you'll usually see it being used with love 2d or roblox or it will be used with games built in c or c plus plus as a little bit of extra used on the side now where exactly was lua used well it was used in adobe photoshop lightroom apache the http server the awesome window manager roblox angry birds the sims 2 mafia 2 world of warcraft and fable free as you can see a lot of these are games because lua is very popular to be used with games because of how easy it is to embed lua in your game well what text editor should you use if you want to code along well it can be absolutely anything from a notepad all the way down to intellij idea i will be using vs code during this whole course mainly because that is what i've grown to love and learn but if you have no experience in any of these i would recommend using notepad but if you want something a bit more powerful then definitely go sublime text so just go to the lua website lua.org then here you have a little download option click on that now you want to just ignore all of this because compiling on windows grows who wants to do that and this is a linux only thing if i'm correct so we can actually just go to here if you don't have the time or inclination to compile lugo yourself like any normal windows user get a binary or try the live demo we want to get the binary is just basically the executable now don't be fooled by all of this you don't download it from here you go to this download page right here then make it a massive pain to actually get to what you want it's very interesting then here you have a bunch of options to choose from i would like to go with 5.3.6 because 5.4.2 has a lot of changes and stuff that just sucks so here we have a bunch of things we can choose from this is linux this is windows 32bit windows 64bit if you're on windows you probably have 64bit and take note this will also work on windows 11. just because i'm using windows 10 doesn't mean it won't work on windows 11. and then we have mac which guys seem to not be able to download and then we have more linux or that's a source this is linux now we want the 64bit zip file so we click that it will start downloading our files you just say save file and i believe it's done we can now open up our file manager and we can go to downloads and you see we have a lua 5.3.6 we can right click and extract file if you don't have this option i recommend you go install winrar or some sort of file extracting software i like using winrar because it just works i'm going to extract to lua 5.3.6 but if you just said extract here it would have been perfectly fine now in here we have a bunch of options there are a bunch of options this is just executables this is the most important file here this allows us to actually run or leave our code which we'll do in a second now what we need to do is we can go back here and we can rename this you can name it to anything you want but i'll just call it lua because it's simple you know that's liver now i'm going to copy this so you can right click and we can say copy and i'm going to go to my local c drive now you can just paste it in here if you want but i do prefer going to program files right there and then just saying paste because it's a program so we want to paste it here there we go now next thing we can do is we can open up the command prompt so you can click here search command prompt and it actually want to go to this page anyways once you search command prompt you should see this now first try type lua don't get anything as perfectly fine try to type blue five free doesn't work okay if you do get this then that means it has not yet been added to path one way to fix it is by rebooting another way to fix this is by going to settings which can i can i search here i can okay go into settings and it's searching here environment variables so here edit the system environment variables and in here you can just say environment variables down here then you don't have to worry about this too much you can go down here to path you can say edit and these are the locations where all the environment variables is as you can see my program files x86 is here but not my normal program files or at least some of these 8x86s are here so i'm going to do this i'm going to say new and i'm going to browse because the thing is we it's a very difficult way to get there so i'm going to just browse to where it is and here program files we saved it in there and there's lua now if we say okay as you can see it added it here for us so it added it to the program files or the environment variables now if we were to say okay i just need to put the folder there because it's going to scan the folder you don't have to worry about the executables you say okay you say okay and you close that then now also if you do want to you could always rename this to lua and just remove the five free i don't know if that will still work but i'm pretty sure it will you then have to exit out of the command prompt and just open it up again okay please open here and to look like a hacker you can say color o2 cool now that we look like a hacker we can clear the terminal or cls and we can say lua five free this will allow you to go lua if you see this you did it correctly also if you didn't download lua 5.3 you will have a different number here depending on the version you downloaded it and that just executes the program now we can say print test to make sure this works if it works then you're good to go next up you probably want to actually try and run a file in lua or a lua file itself i'm going to create a new folder i'm going to call it lua for my lower programs here i'm going to say new text document and make sure you can see this dot txt there we want to change that we're going to say main.lua and remove.txt if it was there and just say yes and you should see this you can then edit it with notepad if they give you the option to do it so let's open it with and let's see here more apps notepad there we go and yeah we didn't need to always open up with that then here we can of course just say print i am cool save this file by clicking file and save or just control this and you can close notepad and now here you can just shift right click and you can say open powershell window here there's multiple ways to do this but this is usually the easiest then you'll see this you can then just say lua fi free and in the file so then right there main.lua we can then say main.lua there you go i am cool if however this did not work then you can just open up your command prompt again bring it over here whoa and now we need to navigate to this folder one way you can do this you can just right click here and copy address now you can just say cd for change directory and right click if you right click then it will paste it here press enter and now you're inside of this folder now you can say lua five free and main.lua there you go i am cool first you open up vs code this is a vs code specific tutorials users vs code if you don't have it installed you do need to go and download it okay then once you have your visual studio code open you want to go to file and an open folder not open file but open folder once you say that you can go to your folder where your lua program is in so that main.lua file or whatever you call that file and here we go i have a main.lua file which just says print i am cool that's all it does it's just this file right here and i can show you that this file exists by going to my document and to that folder i just opened it there we go main.lua cool now that you have this here you can just go to terminal new terminal and here we have a terminal if you have lua already installed you can just say lua five free and then main.lua i am cool as easy as that you have just executed your lua code i'm going to open up my file manager and i'm going to go to documents i have a special folder called trash where i put all of the things that once i format my pc i don't care about it you will probably have a code folder similar to what i have here where i put all of my other code but for me i'm going to put it in trash i'm going to create a new folder and call it lua in here i want to create a new file called main dot lua if you're in windows make sure that this actually ends in main.lua and not main.lua.txt windows will oftentimes append that extension to the file name which you do not want once you have done this you can open up your code editor in this folder since i use vs code i'll quickly open it up here here we go now everything you see here is what will appear here so this main.lua that is here if this right here says main.lua.txt then windows did you win and they try to add a txt extension at the end you can just go here and then rename it and remove that.txt i'm going to close this file manager here because i don't need it open anymore all right now first off i would like to resize everything just so everyone can see great to run my lua code i will use this terminal right here but take note that this terminal is the exact same terminal as this terminal right here the two are exactly the same the only difference is this terminal is inside of vs code while this terminal is not inside of vs code that's the only difference they both run the same thing if you're on windows or mac you don't have to open up a terminal on the side you use a good terminal new terminal and you'll have a terminal to use all right now that we have that out of the way i'm just going to get my setup ready and here we go and this is why i like having this terminal here it just looks so much neater and we have a lot more space to work with next up i'm going to close my file manager because i don't need to see this lua file because i'm already in it so let's start with the basics make sure you have low install by going lua version and actually if you get this then you know lua is installed but if you go lua v then you should also see this if you just type normal lua then you'll be able to do something like print any type of text and you should see this to exit you can press ctrl and d ctrl n z or control and c alright so i have lu installed as you could see there so let's get started first i would like to tell you about comments in lua oftentimes if you're following along you want to leave yourself a little note to explain what is going on and this can be a comment a comment is not read by the computer so when you run this lua code a comment will be skipped so we go dash dash and anything that starts with two dashes is considered a comment so this is a comment this is also a comment you're not limited to the amount of comments you want or have you can just do as many as you want but that is also a single line comment it basically means that once i go to the next line i'm typing regular code you'll notice that here we have green text and here the text is not green that is because this text right here is not a comment so this is a single line comment every time you want to add one you'll have to add the two dashes to say it's the next line you also have a multiline comment if you plan on having a comment that's a few lines long such as a description of something then you can say dash dash and in two brackets like this this right here is a multiline comment and then make sure there's no space between your dashes and your brackets here there we go now this can range multiple lines so multi line comment it is amazing because now everything that's between these is part of the comment meaning if you put any code in here it will not execute same here if i put any code in here it will not execute this one is just one line whilst this one can span multiple lines all right next up let me actually show you how to print something to the screen to print something to the screen it's actually simple you just use the print command and i will print something to the screen hello world so print and then in brackets we have quotation marks and then a piece of text we want to print to the screen the quotation marks and the brackets are both important here so do not leave either of those out if you save your file and you run your file with lua main.lua and take note i'm in the same folder as this file i am in this folder if i say terminal new terminal you'll notice it's in document trash lua and that is where i currently am i know there's a lua file in here because if i say dir i can see a main.lua all right if you say lua and in your file name you'll get hello world because that's what we're printing out here you can have as many print statements as you want yet again you're not limited to anything so let's try hello jeff and here we'll now have a hello jeff and here's an example of where you could add comments here we could say print to the screen and here we can say we'll print hello world you'll notice my single line comment doesn't have to be on its own line it can be after a command for example print so here we're saying print and then we're putting a comment after it this comment will not be ready if we were to remove those the comment will be read and we will get an error such as this as you can see here it doesn't know what that is so if we make this then it can continue take note that comments will also stop code from executing so if i were to make this code a comment it will not be read so when we run this it's just going to say hello world and no longer hello jeff because hello jeff is now a comment to split your print up into multiple words or to add multiple things to your print statement we can add a comma i am cool this comma here will add these two together however take note that this comma will add a tab between the two so when we run this we'll get hello world and in a massive tab i am cool if you want to add these two together without getting a tab then you could use two dots and these two dots means concatenate concatenate just means add two pieces of text together if we save this we get one long piece of text if we add a space here then there will be a space between the two pieces of text what exactly is a data type well a data type is very easy to understand for example when i say 5 what is 5 5 is a number or an integer this is a data type five is the data type of number and that is how data types works they're very simple so we have nil nil means nothing empty null undefined so if something is nil it doesn't exist or it's empty we didn't have a number which would be something like 1 2 negative 99 9.87 these are all numbers we didn't have string and string is just a fancy word for text so anything in double quotes or single quotes these are all text we didn't have boolean this is yes or no also known as true or false so true or false if something is true you can think of it as yes if something is false you can think of it as no so when someone says is it true that you were five well that would be yes because it is true that you were five or if when you make a statement and it can be out of true or false i have been to jail that is false i have never been to jail so nope that is not true and then you have tables tables is the equivalence of arrays in lua or lists if you're coming from python tables are out of the scope of this video so we'll be leaving them for a different video on their own okay so those are data types they're the basic ones you'll mostly be working with if you're using lua now let's get an example of a variable a variable is something that can contain something else it's giving a name to something so you can reuse it later for example local name this is how you create a variable by specifying local and in the variable name this can be anything from x to name to example like that one way i like to teach is by using a little bit of math for example we have x now of course if we were to print x here and this will just display what is inside of this variable we'll get nil we can also set x equal to nil and this will be nil you also set x on a different line than when you created it so here's x and we can do that that also works we'll still get an elbow so let's say x is three now if you remember the basics of algebra you can usually say something like x plus eight is equal to eleven now you remember maybe in high school where you had to convert this to figure out what x is but in this scenario we are actually getting x we know what x is we are providing x so we know we'll get 11 here so we run this we get 11. so x here is just a placeholder for this number three here so we do this we'll get the same output but this time we're just storing it in x because now we can reuse it wherever we want so we run it we'll get 11. if we change x here to let's say 8 then x will be changed everywhere to that eight and we'll get to showing you more examples in a second but you do get two types of variables you get the local scope variable which means it is not allowed to be used outside of this file and when we get to it outside functions that is a local variable it's not allowed to be used outside of its scope so in this scenario it's scoped to this file if we create another file we cannot use this variable from that file but then you get your global scope variable which could be something like global variable and this could be 10. this global variable as you can see it does not start with local it is because it is globally allowed to be used so this global variable is allowed to be used outside of this file so if we create another lua file and we try to use this variable which we'll get to in a future tutorial we are able to use this variable however it is definitely good practice to go underscore g dot whenever you create a global variable just this this is just to specify this is a global variable it's not necessary to have this it is completely optional but it is we're kind of recommended to have an underscore g just to give that extra specification we're talking about a global scope variable now a lot of this is flying over your head don't get too concerned we'll be practicing this a bit in future tutorials as well now let's look a little bit more at variables just variables in general we can have a floating point variable and a floating point variable is something like 3.1415 what not we can have an integer type variable both of these are considered numbers and this would be a free we can have strings or single or double quotes and in any piece of text this can include these dashes that are usually used for comments and we can also do boolean so true or false booleans are a little bit out of the scope of this video so we'll definitely get back to them in the future as for strings as i said you can either do single quotes or you can do double quotes but you can also do two brackets and this will allow for multiline strings take note these strings are taken up very literal so if we were to print f here then it will get a very literal representation of what we had so if you don't want it to have a tab and a new line you might want to just do this and now you'll notice if we were to run this it will look completely different and last thing i want to show you about variables before we move on to an example of them is how you can assign multiple variables at a time for example let's go local one two three all right so we have three variables here separated by commas now we can just go one two three so now one is assigned to this one here two is assigned to this two here and three is assigned to this false here so they're following the same pattern and is how we can assign multiple variables at the same time now let's use an example where we actually use a variable for example let's go here and say local name is equal to steve then print hello my name is and remember to concatenate we can use two dots and then whatever we want to add in this case we can say name we can say name because name is a placeholder for this steve here so saying this is exactly the same as saying this let's go here i have a cool name and in steve and here we have a little bit of an example if we were to run this we'll get hello my name is steve which is here specified as name then here i have a cool name comma steve i have a cool name comma and then the name variable if you wanted to you could do this well this is perfectly fine as well it will give you the same results but think of it this way let's say this was a piece of text that was probably like a hundred thousand lines of code right and now you want to change the name from steve to mike now you have to go mic and you'll have to change it on multiple places so first mic and then you have to go mike and you have to do this a hundred thousand times immediately you can see where the benefit of using a variable would be better because if we use a variable like this then if we change it at one place to mic you can also work then it will change everywhere and take note once you have assigned a variable you can reassign it so if i go here and say name is equal to steve then now name will be equal to steve so it's first mike or muke and then steve so take note you can reassign a variable if you ever wanted to in this tutorial we'll be talking about strings aka text anything in single or double quotes so as we've learned from previous tutorial local x is equal to str this is a string this will be taken as a piece of text and we can use it the same with single quotes str this is also a string this will also be taken up as a string and last but not least these double brackets these are kind of like literal strings whatever you put in here will really be displayed so if i put a tab here this tab will be displayed if i were to print this and run it as you can see it literally takes those tabs and new lines so those are the three ways you'd usually be making a string let's continue to actually using a string so let's say we have a piece of text here hello world this is just a string normal string doesn't do anything to get the length of the string we can put a hashtag here and the hashtag in lua basically means return the length of something so we go here we'll get 11 because there's 11 characters in here we could also put the hashtag here this will also get us the length of the string because remember x here is just a placeholder for this string here so this right here that x is the same as me doing this and of course for concatenation you can just say two dots and then what you want to add there's an exclamation mark and now there will be an exclamation mark let's say you maybe have a number so local num is equal to 20 and you want to convert this number into a string a piece of text because there is a difference between numbers and strings well to do that it's fairly simple let's say local str is equal to to string and this will convert this num to a string now we print num and then also string you won't really see any difference both of them will say 20. but if we print out the type of these and we can do that by saying type and then just like that so now type and then the variable and that will give you the type of this variable if we were to run this we'll get number and then string so you'll see both of them have different types because one is now a string while the other is a number now with strings you have the cool thing of escape characters so here with print we have a bunch of escape characters we can use for example hello backslash n backslash in means a new line so go to the next line world backslash t this means give it a tab the same as saying a comma here and then putting something new there but this is just in one string i am and in backslash v take it back b may not work on windows i have heard some comments say that when they use backslash b they get like a symbol instead of a vertical tab a vertical tab is just when you tab down instead of tab lift and i'll show you that in a second but backslash v gives you a vertical tab almost 19 two backslashes will give you a backslash as a backslash escapes a character so you'll need two backslashes to get one backslash and then here we're gonna say 20 so it's kind of 19 20. and now let's say i wanted to put double quotes in the string there are two ways we can go about this the first way is i can replace these double quotes with single quotes and now i can use double quotes years this works perfectly fine but sometimes that you cannot do that sometimes that will not solve your problem in those cases if you try and do this you'll actually get an error so to keep these back or these double quotes inside of your string we can use a backslash and these will escape the double quotes and the same will be done for single quotes so if you backslash a single quote it will also be escaped and these are just a few of them there are a ton of these escape characters but i'm going to go through every single one of them if we were to print this we get hello new line because backslashing world then a tab not a space this is a space this is a tab let me get a tab because backslash t i am and in a vertical tab this might not work on windows but it just basically taps down instead of left to right almost 19 backslash 20 years and in our quotes the ignored forward slashes are not the same as backslashes so backslashes only two while a forward sash only needs one next up let's say we have a local string and this string just contains hello world with an exclamation mark now if you print it we'll get hello world but there are a few things we can do with this string which is pretty cool first off we can say print and then we can go string and this will use the string functions we have inside of lua there's a lot i'm not going to cover all of them but i will be covering the ones you might like to use the most dot lower and this will convert the string to lower case and just say str here you can do the same and then for upper to upper case and then you also have one for ling and this will get the length of the string it's the same as if you were to say instead of string the ling you're to just go hashtag hashtag you can see as a shortened version of this let's return the length of the string this will convert the string to uppercase and this will convert the string to lowercase let's see what we get so we get our normal hello world then a hello world that's just lowercase a hello world in all caps and in the length of this string so let's start with mathematical operators there's a lot of them for example five plus five we all know what this does this will add two numbers together i'm going to add a few here because we have quite a lot we didn't have minus which will of course subtract and this could go into the negative values you're not limited to just positive numbers we have times which is represented by an asterisk and not an actual x so an asterisk we have divide which is a forward slash not a backward slash but a forward slash and let's say we give 19 divided by five you have to the power of so this would be five to the power of two and then we have modulo and i'll explain this one after i've explained the rest so let's go 17. all right if we run this here we go so we start with 10 because five plus five it's ten five minus fifteen will give you negative ten five times five is twenty five 19 divided by 5 that will give you 3.8 then 5 to the power of 2 will give you 25 and then 17 modulo 5 will give you 2. now all of them are pretty simple to understand we have all learned these in school except for modulo you did learn this in school just not quite the same in a very basic sense modulo is what is left over not literally but it is what is left over for example if i say 17 divided by five well that will be five then 10 then 15 right so we were to say 17 minus 15 will get 2 because 2 is what's left over if you were to divide these two to give an example let's just go here and say 17 divided by five one gives us 3.4 and the other gives us two because 17 divided by 5 will give us how many times 17 can be divided by 5. 17 modulo 5 does the opposite it gives us how much is left over once the 2 has been divided so not this 0.4 here but the actual value because a 5 10 15 and in 20 20 cannot go into 17 so we'll have to stick with 15 because that's the lowest value we can get if we were to do this and of course 15 minus 17 or actually other way around of course 17 minus 15 will give us 2 and this is the remainder that's what's left over so it's almost the opposite of division you don't have to worry too much about it we will be using this a little bit more in the future but you can get more used to it as time goes on one thing i remember that people in my class always have trouble with was the order of execution in math an order of execution can be a difficult topic because you might not remember what order what should be executed in for example five plus two times ten now i'm relatively okay with math so i would immediately notice that this two times ten that should be done first and then after this has been done we'll get this five plus two but not everyone will notice this immediately because that is just normal not everyone is made the same so some may see this and think oh it's five plus two that's seven seven times ten that will give you seventy but in actuality it will give you twenty five because two times ten that's twenty and in twenty plus five is twenty five now if you're one of those that can't always remember in which order this happens or if you just want to change the order in which this happens then i have a solution for you brackets brackets is what we can use to specify when what should be executed so here we could say it's first 5 plus 2 then we times it by 10 because brackets will take priority over everything else and it will be done first now we will get 70 because now it's first doing this then it will add this it's perfectly fine to do it over something that is going to do first i sometimes do this as well to make myself remember this is what will happen first you can see now we'll get 25. and you can of course add more things so now if we go times seven they will first execute this then it will execute this and then it will execute this but if you want to change that you could do this now it will first do this right here then it will do this right here and then it will do this so the order of execution is up to you you can change it depending on what you want and now i can look at a few things inside of the mav library print math dot pi this will print out the value of pi very useful in some cases of 3.14159265 and so on we have math.min which will give you the minimum value of something so let's say 10 5 189 the minimum value here would be 5 that's the lowest value of all of the values passed in if we run that we'll get 5. if we change this to negative 10 for example then now we'll get negative 10 because that's the lowest value you can also do max max will do the opposite and return the largest value so now we'll get 100. then you have a rounding which can be very useful so i have math dot seal and this will round up so 20.9 and we actually give a few here 20.1 so these two both will go up they will round upwards to run this we'll get to 21. they will not round down seal is in a sense the ceiling the ceiling is always above you so if you look up then that's where around it will round towards the ceiling upwards then you have the floor the floor will do the opposite because the floor is below you it's down so it will round down that will give us 20. so this is a way to force rounding to a specific point where it's either down or up and last but not least let's talk about random numbers print math dot random simple as that you'll get a random number run it run it run it that's cool you can do multiple so that's pretty neat but sometimes you want your randomness to be more random to do that you can pass in a seed so math dot math dot random seed and we can pass in os.time and this will ensure that all random values we get here is always random they will never be repeated continuously so now if we run this we'll get more random values you did get a few that repeat here but that's just sometimes if you roll to row random you'll get the same thing and there's only updates once every second you can specify up until where it should go so if we say 10 here then it will random to 10 so 2 10 4 2 7 7 a few sevens there so we'll continuously round the random towards one and ten so between those two you specify another value here for example 50. now it will be between 10 and 50. so will not go underneath 10 and it will not go higher than 50. so your program can make decisions that it is absolutely epic your you can make your program make these decisions by using an if statement like asking a question if something is true then do something else so in this case if true take no that's a boolean then and here we can just print this was true so one of the most basic data types is used of one of the most complex type of statements that is pretty epic we run this this was true now the cool thing here is this code will only run while this here is true if i make this false then this code will no longer be ran so it skips it this makes everything way more powerful for example let's say local x is equal to 2 and if x and then this is a cool symbol is more than and let's say five then print x is more than five run it and oh x is not more than five so this will not run but if we were to say x is 9 because x is more than 5 we'll get something out of it we also have the opposite symbol so less than so we have more than and less than where you can figure out more than we'll try and get the one that's the biggest so if this one is bigger than this one because it will try to eat the largest one so this is a mouth and it's trying to eat the largest one if this is bigger than this then it will be true this is smaller than because now we'll try to eat this one and hope that this one is bigger so this will see if x is less than five run it it skips the code but if we were to make x two again then we'll get x is more that's actually less less than five but you still get the point there's a lot more comparison operators which i'll get a little bit more into but not every one of them so we have the and or not i'll get into a lot of these more than less than more or equal less or equal not equal yeah take note in other languages you'd usually have a not equal like this in lua it's not with an exclamation mark and you have two equal symbols to say equal so these are all you can use in here and they're very powerful to use for example if x is less than five and x is more or equal to two so we're checking if x is more or the number two so two three and up and this is if x is less than five this does not mean including five if x is five this will be false because this only checks if x is less than five if you say less or equal to then if x is 5 this will be true so take note then here we can say x is between 4 and 2 both included so this will come see if x is less or equal to four or less than five this will check if x is more or equal to two or in other words more than one it doesn't matter which one you use and more than more than equal or less than less than equal it more depends on what you prefer i prefer just doing more than or less than but occasionally when i'm a bit more tired i would usually go for more equal and less than or equal and if we run this it works if i make x 5 then it doesn't work but if i say less or equal to 5 which will now include a 5 then it will run it this and here just says both of these should be true so if this is true and this is false it will not execute so if i were to say true and false then it won't execute but if i say true and true it will execute or will do the opposite or we'll see if one of these are true if one of them are true it will run so it will run it won't run or it will run my bad and if both of them are false it won't run there we go and in a not we'll just basically invert something so something that is not false is true so it's kind of like speaking if something is not false it is true if it's not true it is false so not false or false and i will give this will make this one true and here again brackets becomes a important part here for example if we were to do this then it will say if not and then whatever comes from this false or false this will be false so if not false if true then so take the brackets do play a role here if i want to make this one true then it won't work if i were to remove these brackets then it won't work either because true is now false in order to make this true it will work but if i wrap these in brackets it will not work because true and true or true or true will return true and this will result in it true here so if not true brackets can make everything a bit more complex but also make what you can do a lot cooler so let me show you an example of where an if statement could be useful let's say local age is equal to 15. so this person is 15. if age is more or equal to 18. then let's say they want to go into a bar they say print you may enter they may enter the bar after 18 years or older and here if this works it will run they're not 18 or older so if we say 20 then you may enter now what if we want to give them something else for example if they're let's say 17 we want to to tell them to scram they're not welcome here so print you are not welcome be gone but you might already notice what will happen here if i run it we'll get both we could go if and then age is less than 18 and then throw this in there this is perfectly fine so now we have two if statements and it will work if we go here and say 17 then you are not welcome be gone but there's a cleaner way to do this we can go else else is when this here does not execute so when this is false now we can just move this up there and there we go we run it you're not welcome be gone if we change this to 18 then we'll run the top one let's say it's this bar is near a children's tourist attraction so kids that are under the age of 12 might want to go to that attraction so we could go here and say else if h is less than 13 so everyone that is not a teenager yet print the water slides are down the road cool so now we're checking if the user's age that's trying to enter is more equal to 18 they're allowed to enter the bar if their age is under 13 we tell them that the water slides are down the road otherwise they are not welcome and they should be gone because then we're near their teens and they're trying to sneak in to get a quick drink run this you may not enter or you may enter if we change this to 17 then they're not welcome if we change this to 10 or 10 then the water slides are down the road we can of course do more for example local birth day is equal to false now let's say it's their birthday bingo if birthday then print you get a free drink on us so now if it's their birthday they'll get a free drink so you can use an if statement within another if statement if we run this let's just maybe make this 18 we'll get you may enter if you make their birthday true then you get a free drink on us and there's a ton of things you can do more with if statements but most of these you can just get by trial and error and by practicing what we've just learned and last but not least we can also do something like this local name and let's say if local age here is more than 18 so if age is more than 18 and mike or jeff so if the age is more than 18 then their name will be mike otherwise jeff and we can imprint name this is a cool oneliner where everything can be done in one line so now we get mike because their age is more than 18. if we change this to 15 then we'll get jeff so in this one line you can set a variable using an if statement you can of course also set a variable in a normal if statement so true and then name is equal to luke this right here is also valid to print name so this will also work however this is in one line so it might be more comfortable but if you prefer writing it out like this then that's perfectly fine as well however take note if you were to say local name here it will recreate this name variable and it will be scoped between this so it will be scoped here meaning we can't use this name here so if we were to print out name here we'll get jeff if we remove this local they will add trend access this name here and we get look so take note when you declare a variable you're using local so local and this will declare a new variable and it will locally scope it so it's only allowed in its current scope loops is a way to repeat code so it continuously happens so continuously runs until you tell it to stop in lua there are three common loops we can use the most common would probably be the for loop and this is basically for a number until a number run the code so for i and this is just declaring a variable in this scope if for i becomes one so we're starting at one up until 10 so we're going up until the number 10 and then we can just say then or not then but do and here we can say print i this will count from 1 to 10 and print it out so we have 1 2 3 4 5 6 7 8 9 10 from 1 to 10 it will just loop and loop and loop and change this i variable here you can see how many steps it should take for example one is by default so it takes one step one two three up until ten you can say two and now we'll take two steps there we go you can even make it go into the negative value so negative two but this here would cause an infinite loop so we'll have to go 10 to one so it's going to flip the two so it's i is going to start at 10 until it reaches one or less and then it will stop as you can see it goes downwards because we said 2 cool so that's a basic for loop you also have a while loop so while something is true we want to do something else this here is called an infinite loop since true here never becomes false so if i say print mic it will forever print out the word mic until i quit the program with ctrl c so this will infinitely loop until either the program crashes or your pc does you can use break to break out of a loop so loop it only goes once here we could do something like local count is equal to zero and then if the count count is more than ten then we can break and of course here at the top we can say count is equal to itself count plus one cool so now we will break out of the loop without having to make this here false so now we can say that and i will print out mike 10 times cool you could also do this put that there while count and instead of more than 10 we can say listen to it so wall count is less than the number 10 run this loop now if we run it until count is at least 10 it will run this code all right and then last but not least is the repeat loop so one thing i want to show you is let's say count is equal to 10. if we do this the while loop will never run because this here is never true the repeat loops runs at least once it's a while loop but it runs at least once so repeat until and we can just take this right here put it here and then take this and put it here it's the same as a while loop but it will run at least once in other languages this would be called a do while and my bad it goes up until so we should say up until count is more than 10 or in this case let's say 5 just to show you so until this is true so it will repeat this until this is true so unlike with a while loop it will not be while true this will be while false if we run it we'll get mic at least once it will run at least once before it quits user input is relatively easy let's say we go here and say print what is your name and then the user can input something so we can say local a and s for answer but you can call this variable whatever you want and we can say io.read and this will get input from the user and then store it inside of this variable and here we can print ans we maybe go name colon and there we go if we were to run this lua file what is your name i will say mike and there we go name mic another cool thing you might be interested in knowing is how to get input on the same line as your output because sometimes you don't want an output and then an input on the next line it just kind of looks ugly and sometimes is confusing to get input on the same line instead of print you can use i o dot write this is the same as print but it does not have a new line at the end so here we can say enter your name and it will enter and it will ask for the input on the same line as this output now here we can say nick and the name is nick and of course then you can do things such as if answer is equal to nick and they can give special outputs depending on what the user inputs but i think we all already know that so if you're coming from another programming language tables are usually considered lists arrays sits dictionaries objects records cues a bunch of these things can all fit into the idea of a table a table can be all of these if you have no idea what i just said then you don't have to worry about that so let's create our first table i'm going to say local tbl and if at any point say list or a rate just know i'm referring to a table and this table will be used with these right here so these brackets anything that goes in here is part of the table this can contain any types and any amount of items so this and we can put a 2 and a 9.9 and a true all of these they are allowed booleans numbers strings even other tables so we can go here and say okay cool this is all allowed if we were to try and print out table then take note that you might not get what you expect usually when you print out something like this you expect to receive that back but in this case we will receive a memory address but if you want to get the items inside of a table you could use a for loop so for i is oh that's all caps for i is equal to one to hashtag tbl do and hashtag is just a short version of number of items in this table like if you have a string or a piece of text and you do this hashtag with it as you might remember we receive the length of that string the same concept exists for tables and in here we can say table and then pass in i if we do this we'll get each item inside of the table this 2 9.9 true and then another table because this is a table here so we'll have to forfeit that as well if we want to see the items in it now you might be wondering how does this work how can we do that well if we go look here and we say print tbl at index 1 and this is called an index and we run it we'll get this this right here is the first index so if we were to go like this we'll get index 1 which is this index 2 index 3 index 4 index 5 and the more you add of course the more indexes there will be so it starts from 1 and currently it has up until 5. if we go 5 then we'll get a table if we say 5 1 then we'll get okay because here we're saying okay go to this fifth index here and then in this fifth index return the item at index one of it so this would be one and this here would be index 2 of this table we'll cover this a little bit more in a second but this is just as an example if i were to say 4 will get true if i were to give a value that doesn't exist like 9 we'll get nil nil just means empty doesn't exist nothing now usually you'd actually create a table with the same data types it's not too often that you'll see tables using different data types unless you use it in a sense of an object which we'll get to a little bit later but when you just use it as an array so a way to store multiple values inside of one variable then you'll usually just use the same data type so just numbers or just text for example let's say we have local x well let's actually start at a a b c d e and you can imagine this going up until z and we could say we're storing one two three four five now you might already be seeing how this is not really very practical because it's fine to have a bunch of variables lying around that whole storing their own values but all of these values are related in some way but they're stored in their own variables which there's nothing wrong with this method it's just there's a more comfortable way to do this where we could go local alpha nums and as we'll get all the alphabetical numbers which we would have usually done by doing a and then a is equal to one b b is equal to two c and what not but here we can create a table with one two three four five this is the same but instead of having to use a specific variable so print a we've already grouped them together and we can just say print alpha numbers at index one this will give us the same value because a and one is the same thing if you wanted you could also put variables in here you're not limited to just values because variables on the end of the day are just values so this will still work perfectly fine if i say index 2 or b lies then then we get 2. if i were to remove this then this will no longer work so we'll get nil because b has never been defined now let's go here and say we have one three five seven 9 and we can just call this local nums then let's say we want to add another value into this table here let me just also for through each item so one to the amount of nums and here we can print nums at index i if we run this we'll get one three five seven nine now let's say i want to add one thing in here before we run that we can say table dot insert and this will insert an item into an table so first we specify the table in this case nums then you can either specify what you want to put in here or where you want to put it in if you don't specify where it's just going to put it at the end so if i say 19 here and i stop here it will insert 19 at the end so here if we run it we get 19. but if i instead in the middle put two then we'll insert 19 at position 2 here so if i run this we'll get 1 19 free so this here allows you to get a position you want to put it in without it it will just append it to the end of this table you can of course also remove and here you pass in the position not the value but the position so if i say one one will no longer exist if i say four four will no longer exist because four was seven there's also a nice special way you can loop through these tables which is underneath this normal for loop instead of using hashtag nums you can use pairs so you're good pairs and you pass in numbs noms now you can get ka and b so for k and in v in pairs num if we were to print out k we'll get these values so 1 to 5. this would be the index so in this case we could say index and v would be value so index we can actually just do index and in value and it will do work the same so index one has one index two has three index three has five so this is a nice way you can four through a table in case you don't want to for through the numbers maybe you want the index as well as the value well you can get both but then pairs it's split it's up to you which you prefer doing now let's talk about multidimensional tables also known as multidimensional arrays this is a table inside of another table for example here we can create another table one eight three okay let's create a few more this can have four this can have seven this can have five this can have two and then last we can have six and nine now if we were to print out nums we'll get our table location in the ram if we were to print out number index 1 we'll get the location of the table in that table if we specify another value in here then we'll get the first index of the first item here if we say 2 we'll get 8. if we change this here to 2 then we'll get 2 because this is index 1 of the first table this is index two of the first table and this is index three so this will be the first table now inside of it you have index one of the first table in the first table or the first item in the first table and then index two and index three and then index three two one and then one two three if you were to pass in something like hashtag nums you'll get the amount of tables in this first table so if i were to copy this a few times we'll get five but if you specify an index here for example one you'll get the length of the items here free so this is free this is five we can add more here so now it will have a different length if you want to display all of the values inside of this then you can also use a for loop so here you can go 4 i becomes one to the num or to the amount of tables and nums and then for this time j because we can't really declare i that won't be a good idea for j becomes 1 to the amount of items inside of i because i is a table so we'll get the amount of items in i so this would be i that each item inside of i would be or each value here would be j so this is i this is j so here we could print nums so nums and then at index i and index i will give us the table so we specify the next index which would be j now and in my band this here is a number it's not a table we have to say nums at index i my bad because i is a number just like j is a number it's not the actual value we run this as you can see we get 183 which is the first items and then we get four to six which is the second and then five seven seven five nine which is the last so if you're having a bit of trouble with this just note nums at index and in the first index which we can call x would be the first item or the second out of whatever x is here if you add another one here it will try and access the item inside of this item so x which is this and we'll try to access y inside of it so let's say eight if you have a table inside a table inside a table you could also add your z so if i were to have a table here as well and we can go 2 4 5 and we're gonna have a few more then i could do this where i have three attached to each other to access each item in a table but take note tables can become incredibly complex incredibly fast so i always recommend to when you use a table not add too many items into the table as in don't add three or four tables inside of one table here so this right here is already very complex if i were to go here and i were to add another table here so now i were to add another table of more values then it will be more complex because now it's not no longer x y and z it has started going to complexity where x should now be shifted to something else i'm just going to move this here to the front and we can just put an a here for now so i would say always follow the x y z rule this is the complexity rule where you don't have more than three tables inside of one another if it becomes more than free it becomes very difficult to not only manage but to work with so i'd always say try and stick with free or less tables so here there are three tables if you were to remove this like that then there are three tables so this table here this table here and this table here so unless you have specifically named items like an object which we'll be getting to then never go past the xyz complexity in a table usually just try and keep it as simple as possible then you also have one two three if we're to go like that now let's say we want to convert this into a piece of text well we can go print table dot concat and this will basically join a table of all of its elements depending on the separator you give it for example if we pass in nums to or nums and we pass in a space then it will print it out with just spaces between each item this here is now a string take note this is a piece of text and you can replace this with anything so it can be a semicolon another number so dash dash dash will work and so on and then finally for named items inside of tables and we'll get more deeper into this but for named items you can go local tbl and here we can do something like name is equal to mic and then age is equal to 12. now if we go tbl as index one and we print that then we get nil but if we go tbl and then name we get mike so this is a named table some people also see it as a dictionary or an object and yeah that those are the basics of tables now a function is a snippet of code that you can execute as if it was a variable for example let's go here and say local function say hello and this will just print hello now we can call this by going say hello and then adding two brackets at the end and this will call this function here we will print hello so if we run this we get hello and of course we can put as many things in here as we want as you can see if we were to go print one and then two as well and we were to do this so print it two times by calling hello then we'll get hello one two hello one two so every time you call this function here it will execute the code inside of it and you can call it as many times as you want this is a great way to stop yourself from having to copy paste copy paste copy paste this is a very common practice where programmers will try and reduce the amount of times they have to copy paste a line of code or even a block of code variable variables can save you a line of code a function can save you a block of code now let's say we wanted to make this hello function a bit more complex so instead of just saying hello we want to pass in a name for example hello jack well this here isn't very useful because it will always print out the same name so instead what we can do is we can pass in an argument and we can call it name so this is like a variable that gets passed into this function now instead of saying jack we can say dot dot name dot dot there we go now if we go here and we say look by passing it in here between these brackets and this would be name we'll get hello luke we change this to jack we'll get hello jack sometimes you want to give it a default value so if you don't pass any name you want to name to be a default value well to do that we can say local name is equal to name or jack so what's happening here is we're declaring a new name variable and then we're basically overwriting what this is going to be on the end of the day so we're saying this name is equal to itself or if there's nothing in here if this is a false value such as nil then make it jack so it will default to jack so if we have three here the first has nothing inside of it the second has mike and the third has sally then if we run this we get hello jack hello mike hello sally without that there if we did this we'd get an error because you cannot concatenate a nil value because this name here would be nil if we didn't pass in anything in here let's get a bit more complex and do sum and this will get the sum of two things let's say we get num1 and num2 then here we can just return the value but how does one return a value here because we could print out what it is so print num1 and num or num1 plus num2 and we could call this sum 10 and just to show you could also go local x is equal to 20 you could also pass a variable in here so x that will be 10 plus 20. if we run this we get 30. but what if we want to work with the value that this returns that this would give us so we wanted to store local answer is equal to sum and then print the answer is and then ons what if we wanted to do something like this well we'll get a problem here because we cannot concatenate a nil value this here is nil because sum just prints out this value here to return a value we can use return and this will return this value you could either do it like this or you could go local result is equal to that and then return result now anything here with return will be returned from this function and nothing after this return will be executed which we'll explore in a second if we run this now we get the answer is 30 because this here now returns this result which can be either in its own variable or like that but take note we can go here and say print thunk start and in funk end you'll notice we get some red squiggly lines and the file expected after return that is because after return we are not allowed to put anything there anymore because after return nothing will execute so if we run this it will just press an error because nothing should be after return once you return the function stops executing but this doesn't limit you as much as you think it would if we say let's go here and say local val num1 plus num2 if val is more than 10 then return val if val is less than 100 then return negative vowel otherwise we could just return val times 2. so this is an example where just because we have a return doesn't mean it will stop everything else from executing because this return will only run if the value is more than 10. and this code here will never really work as expected so let's make that equal to 10 there we go so this will only execute if the value is equal to 10. this will only execute if the value is less than 100 but not equal to 10 because this will stop execution first so if we say 1 plus 2 then that will give us negative 3 because it is less than 100 so it will give us this if we say 8 plus 2 it will give us 10 because the value is 10. if we were to say here 101 so 101 plus 2 that will give us 206 because it's the value times two let's first try to create a file that is pretty simple so let me just also open up my file viewer here so we can see if any files appear io dot output and here we can pass in a file we want to create so my file dot txt this will create a file my file.txt if i open the containing folder you'll see there's my file.txt now if i were to delete it from here you'll notice it also deletes it from here this here is the same as this here anyhow so we create this file then that will happen but take note it will empty the file if it already exists so if i go and put some text here let's actually have it here on the side of the screen and i decide i want to execute this as you can see it empties the file so you should take note here it will create the file but if it already exists it will empty the file now this output can be used also with writing to a file so io dot write and here you can put some text you want in the file hello world and we just have to io.close whenever we use any of these because you don't want the file to be open and then later on try to work with it again or if other program tries to work with it but yours already has it open it will cause issues so you always close the file after working with it now if we were to run this we can actually show this here the side again we run it we get hello world if we run it again we'll get the same output because this anyways rewrites this file it will empty it if there's nothing inside of it or if even if there is something inside of it that's the first way you can write to a file now the first way to read from a file we go io dot input this time so instead of output we are using input and then the file so myfile.txt then we can of course io.close and here we can say local file data is equal to io.read and then we can just say asterix all this will read everything inside of this file and you can of course print file data we run it we get hello world we can add some more like x2 x3 i am cool if we save that and we run it here we'll get header world x2 x3 i am cool so you first take the file we want to read and say it's an input file because you want to take input from that file then we read it with the asterix all which means read everything inside of this file and we can print the data that we read and then we can close the file or we could close the file and then print the data whichever you prefer so that's the first way to read and write a file now the second method is what you'll most likely see being used so let's first try right to a file that will be local and we can say what variable we want to save this file in so file io.open the file name so myfile.txt and then what you want to do so here we could specify all of these so read write append read and write write and read i think append and everything else read bite right byte append byte and so on and so forth but we're mainly going to be focusing on these here so first we'll have a write now w just means right so we'll write data to a file so here we can then say if file is not equal to nil so if the file we're trying to open exists then so if the file we're trying to open can be opened then we want to go file right and we can just say hello there and i will write to the file and then of course file close else if we could not open this file we could just print could not open the file now if we were to run this we'll get hello there if we were to delete this file and then run it it will generate the file and enter hello there so this method is usually the preferred method above i o dot output as well as i o dot input because we'll learn how to read right now now there are multiple ways you can read from a file one way you can do it is going file and then read and here we can just specify astrix all and this will read everything so if we go here and say x2 x3 goodbye and we read it of course we should maybe print out what we get so print then we get hello there x2 x3 goodbye you also have asterisks line which will only read one line so we go here hello there if we then do it a few times each time we do this it will read a new line so hello there x2 x3 so if you want to read line by line this is a good way to go about it by using this asterisk line otherwise you can just go astrix all and that will read everything and then last but not least let's take a look on how to append it to a file now when you write to a file you will overwrite everything that's already inside of the file so if i were to go here w and then say right and change this to goodbye then it will overwrite everything and also doesn't help if you print it but it will overwrite everything and add our goodbye but what if we wanted to add something to the end of this file then we could use a which means append so then we can say appended text if you run this we'll get appended text if you wanted to go to the next line you can use a backslash n here which means newline appended text 2. now let's append the text to on the second line so that's how to append now the term module in lua refers to a lua file that returns a single table when it is called so it returns a table or an array or an object as semi to understand it so it's basically any file that's not this main file that returns something on the end of the day and then you also have a package a package is a collection of modules so if i say i'm going to go and install a lua package that means i'm going to install a few modules that will allow me to make my coding in lua easier for example the luna cjson package because that's a package of modules i am going to use in my program to read json all right so let's get an example in here i'm going to create a new lua file call it custom.lua you can call it whatever you want then here i'm going to go and say mod is equal to a table so i'm saying this is a table here we can then go here and say function mod dot sum and here we could say x y and in return x plus y so we're putting the sum as part of this mod here you could also go sum is equal to function and then say x plus y this is just as valid if you just say return because these two mean the same thing if we were to put in x and y here so this will be the same thing and of course we can have our mod here with let's maybe say say hello and in here you can maybe get a name and then we could say print hello name now these are just very basic examples you can put any function you want here i'm just making very basic functions here as an example to show you then we return mod because this mod will now be used outside of this file so here in main.lua we can now use this module local mod is equal to require and then we pass in the name here so custom dot cass tem dot lua or just custom because it will automatically add the dot luo in searching for it this will import this module for us and store all of the things being exported inside of this right here to that variable we can then go print mod dot sum 10 5 or mod dot say hello mic if we run now we get 15 and hello mic all of them are made inside of this module here this is a way to keep one file from going like to 10 000 lines of code because you could split it up so one file could have a thousand another could have two thousand another could have five hundred and they could just make the process of reading this main file much easier since we're importing the stuff we need from outside but as the basics of modules it's just another file that's returning a table and this table contains a bunch of functions or variables that we can use here once we import it with require what exactly is oop oop is object orientated programming it is when you think of your code as objects for example you have a car that's an object a car could have wheels a car could drive a car could do this you have a pit you could have a cat pit you could be able to feed your pit you could be able to give your pet a name because a pet is just an object you could have a cup a cup is just an object that you could fill with water that's the whole idea behind oop everything in your code is an object some people love oop some people hate it i personally love oop when doing game development but prefer using procedural programming basically what we've been doing up until now with normal programs now in lua there are multiple ways to do oop there's not just one not just two there's more i'm going to show you one way to do it but if you don't like this method you could go and search for a different method that you might like more there's one that uses meta tables but i find that method to be very confusing to understand and a bit difficult to use so instead i like to use functions and simulate oop with them i'll show you an example let's create a object local function pit this is your pit now your pet could be a dog or a cat but this is a pet it is what you use when you go charlie come here i have a treat for you you're calling your pet and we will return a table because a table is the best way to get an object if you maybe come from python or from javascript then dictionaries or objects it would be this same concept and here we could do something like name is equal to charlie then here we could go and say local pet or even cat is equal to pet and then we could print cat.name anything inside of this return is public and can be used with this object now if we were to run this we get charlie because this is just a table but we disguise it as a function which generates an object for us this is nice because now i could have two pits one that's a dog and now i could go dog.name both of them will be charlie so this pit is a bit flawed let's allow us to change the name so name we would say name is equal to name or charlie so if they didn't enter a name it will default to charlie here we could say jack so my pet is called jack now my cat is charlie my dog is jack on the end of the day these are just a bunch of tables but we can create or generate tables for us by calling functions so that's pretty neat now take note if something is not in this return it won't be returned for us to use if i go age is equal to 10 i cannot use this age here i could use it here so i could go days alive is equal to h times three six five there we go now here i can't go cat age and then dog days alive only dog will return a value because age is not returned only the things in return is returned also we can just go local here so if i were to run this we'll get nil and 3650 that is because age is not returned so we don't know what it is this can be seen as a private property of your object so something you can use only in your object and it cannot be used outside of it and this here could be seen as a public property that can be used and called outside of this object you then also have two types of functions you have the speak and this function is just a normal function and we can just say print and let's just go meow even if it's a dog let's just say it meows then you also have another function which we could call feed so if you want to feed this pit that can be a function that takes in itself and we'll discuss it in a second and for now right now we don't have to do anything here we can just say print okay so here we have a basic class with two type of functions this first function here can be called with this dot syntax so speak and this is return anything so we don't have to print it but you take note this second function so we could feed here will not work because it takes in self and self is what you use to specify this object this right here this is the self it is this table self is referring to this table it's referring to itself but this won't work so if we run this we'll get meow and eating when we go self dot name and we try and run it now we'll get an error because self is a nil value so once we want to use self here which allows us to reference anything inside of this table we cannot use this dot syntax anymore we have to use colon colon basically passes dog into itself in a sense so this first value here is going to be this here so if we go here and we run this we get eating and then jack so these are the two functions you'll usually get i usually just say make all of them include self even if you're not using self because then all of your functions will require a colon and you'll never have to wonder is this function not working because it needs a dot or a colon it will always need a colon so i always say include self even if you're not using self and itself here can we use to access any value inside of this right here so i can go self speak and now we can speak we run this we get meow eating jack and then meow that is the basics of these types of functions but usually just stick with self and you won't have to memorize what the other does now let's say you want a type of pet that isn't in its own a pet or it is a pit object but it's more specific than that this is called inheritance so let's say i want another type of object so local function dog right dog takes a name but now we go return and we're like okay i want all of these inside of dog as well so we copy we paste we now have all of the same things but now we want to add a few new things we want to add breed which is equal to doberman and we have loyalty because dogs can be very loyal and we'll make that equal to zero so now we have a dog that has all the same items as this pit object here and we can go local doberman is equal to dog jesse now we can say doberman dot breed and now we can get the breed of this doberman and that's while we're adding it doberman dot name if we now run this we'll get jessie which is a doberman cool but now we decide here inside of our pit we want to add another item we want to add status and status will be something like hungary now since we want dog to have everything played as we now have to remember and this could be like a ton of objects that could have the same types of items in pit but now we have to remember hmm we have to copy this and we have to go paste it here as well we have to remember that and a lot of times you'll have five or even more objects that will be inheriting from this object so it will have all the same items so you will have to remember all of the objects that's using this object so you can go and copy paste all of these here this isn't the way to go instead you should use inheritance inheritance is when you inherit all of the different types of properties in one object and you use it in another so here we could say local dog is equal to pet and we pass in this name that gets passed into dog cool now we return dog and then instead of creating this object here we can now just append to this already existing one so dog dot breed and we can make that equal to this right here dog and then dot loyalty like that and then we can remove this part here and now we have successfully inherited all of the properties that's being returned here so we get name we get status we get speak and we get feed we get all of these here and now we add two more properties onto this property we have or onto this table we get from this and return that now we'll have both the name and the breed even though we didn't copy paste any of these here if you run this we'll get the same output and once we change anything here so anything here for example we can add points for some reason and make that equal to 10. i can now in my dog i can access points even though i didn't actually copy paste that data here we can now also go breed and we could rather pass in the breed or doberman so now we could actually go here and say poodle so now we get a poodle instead we run this we get jc poodle we can overwrite functions that already exist here as well for here we say meow we could go dog dot speak and speak is a function that takes itself and then instead of saying meow it says woof so now when we go poodle speak it will say woof this is the power of inheritance so we can have a bunch of objects that's inheriting from this object so now we can maybe go here and we can create a cat which has the same types but this time it maybe doesn't have a breed because they don't know any cat breeds it doesn't have loyalty doesn't have speak and here's a cat and we can go here and say lazy and that would be cat that lazy is equal to true so if the cat is lazy or not now this cat has all of the items inside of pit and one more that's lazy and of course if you wanted to you could make cat inherit everything from dog you just of course have to pass in the breed which i don't know idk and now cat has all of the items inside of dog and the pit because dog has everything inside of pit so cat now has everything inside of pit and dog because cat is inheriting from dog here and this is the basics of oop you might not quite understand everything here yet but once we get to the game development section of this course then you'll quickly start to understand the power of object orientated programming and how everything here connects with one another and hello everyone if you are enjoying this tutorial please leave a like and subscribe for future tutorials and hello everyone welcome back to another tutorial so in this tutorial we'll be looking into love 2d live 2d is basically a framework that you can use to make 2d games in lua now first of all you need to install love2d if you are on windows then you can just go and get the installer if you're on mac you can get the zip and if you're on ubuntu or linux you can just get one of these since i am on arch i can just do this i'm going to go to terminal new terminal and just pacman dash is love and you just need to consider that and that will woo and that will install love 2d for me so as you can see it's already installed and up to date so i'm not going to install it but if you're on arch that's how you would install it cool then once you have it installed then you can just say love and that should pop up something similar to this you might not have this exam this exactly same thing here it highly depends i have loved version 11.3 if you have a lower or a higher version of love you will see something different i do recommend having the same version of love as i do or at least a higher version because a lot of the features may not exactly work on later or newer versions of love so i'd recommend having 11.3 the same as mine if you ever wonder about anything or whatnot you can just go to the love tv website to love tv.org and you can click on this wiki here this wiki will basically give you all you need to know about love we won't be covering every single thing here but we will be covering quite a lot of this for example let's go to the let's see let's go to sound let's say you want to play some sound which we will cover in later video as you can see you have a bunch of things here you can use to work with sound let's say you want to go to a window then here's a bunch of things you can do with the window so there's a bunch of things you can do here i'm only going to show you the most basic and we will be building two games at the end just so you have a good idea of what we'll be working with okay now i think we're ready let's get started so first we need to just move this to the right because i don't like it if it's at the bottom i do love it if it's at the right side now first let's create a new file i'm going to call this main.lua you need to have at least one main.lua file here in order to be for love to be able to execute otherwise love may not know which file to execute so here it's main.lua and now i'm just going to close that so we have more space so we're still inside that file now take note i have a terminal open but if you're on windows i do believe you can just double click that love that main.lua file and that should run live 2d but i'm not sure if you're on windows i would actually recommend opening up the command line same on mac open up the command line and just saying love dot in that directory because as you can see i'm in this directory right here so if i were to just let's say open up my folder here so funner as you can see there's main.lua i'm in this four right here now first thing we need to do is we need to set up a basic project so to do that we need to go under scrutiny and make sure you do have love to the installed otherwise this might not work dot love this means make this a global variable with the name of love and we're going to require the module called love so basically this is normal lua we're just importing a module called love then next up we need to create three functions these three functions are the basic concepts of running a game so first we have a function called love it needs to have love at the start here love dot load this is very important i'm going to explaining all of this in a second we can just ignore this for now i'm going to copy this and i'm going to paste them two more times and i'm going to close that then this we can make love dot update and update will take in ddt and i'll explain that in a second and here we can say love the draw okay so let's explain what these are now in every game you have three stages you have the load the update and the drawing stage live2d makes this incredibly simple to do the loading the update and drawing in their respective functions one of the reasons i do love love is because of this right here because it's languages like java for example you'll have to actually go through and make these functions yourself and let them work in the background as they should where love2d has already configured a lot of this for you so first loading is to basically load in data when the application starts up so when we boot up the game this will load all of the data we need so we need to put things in here that we want to load then here with update this basically runs every once every 60 frames this should run once every 60 frames so this is 60 frames per second love2d is kind of locked to 60 frames per second it can go lower if the game requires a lot of resources but it's kind of locked to 60 frames per second so once you start this up you'll get 60 frames a second dt is basically delta time it's the time between this frame and the last currently you don't have to worry too much about this it's mostly just math so don't worry too much about dt we'll get deeper into that later but basically this is every frame imagine that it's a frame so you have 60 frames a second this will be every frame it's the time between this frame and the i last to draw oh wait and we're still here and this will just also update everything so let's say we have a player if we want the player to move the player will be moved inside of this update function here so this will move the player then we have draw and this will draw everything to the screen so first we move the player and then we draw the player the player at its new location or we the player gets hit and then we update a heart getting destroyed in the game that's what we draw basically that's how it works we'll get deeper into these things as the tutorials go on but for right now it's not too important but we will we will get to it so let's start off with just creating a basic hello world so we're just going to skip these two for now we don't have to worry about them and here we can say love and you'll notice most of love's important functions start with love got the graphics graphics is what we use to draw something to the screen so we use graphics dot print and this will just basically print to the screen it's very simple it doesn't do too much and we can just print hello world all right now if we were to say love and then dot this means run love in this folder and it will find that main file and will burn it you'll see this but then you'll also see this little popup right here just saying hello world there's a little icon there's some text which you can change later and here's like the basic functionality you'll have and yeah that's the basics we have created our first application it it just displays hello world it's a first game now let's do something a bit more intense than just printing something to the screen just so i can show you the difference between load update and draw so here let's create a variable called number and make that equal to zero take note this is a global variable you can either do it like this or you can say underscore g dot number so that this will load in this number when the game starts it needs to be global because we need to access it between the other functions in this update right here we need to update the number so with every frame we want to update this number so we can say number because we're accessing this number right here if you don't know i do recommend you go watch the tutorial i made and you can say number plus one this will take this number and it will just add one to it then here where we do this we can just display number so i'll explain what this does more in a second let's quickly run it and see what we get so right here you see a little number constantly increasing that is this number right here so let's just move this to the side first we set the number so when the game loads we set the number to zero so once this boots up this will be zero then every time with every frame this number updates so this number increases with one with every frame and in this drawer right here this will print the number to the screen so as you can see we first set the number and this only runs once this load that only runs once this update however and this draw runs every 60 or every frame so these two runs every frame and this prints it every frame so in this tutorial we'll be covering the live love2d configuration file now this configuration file is basically a file that allows us to configure application more to maybe get certain permissions or to add certain features to the application so this gets started so we just have a very basic application here what goes on in here doesn't matter too much because we wouldn't be using this a lot so first thing we need to do is we need to create this configuration file so you just right click new file or you can open that folder it is in for example you can see here there's my main.lua file it's creating a new file and we can call it conf dot lua like that and now we have a configuration file and inside of this configuration file we can put a function so function and then love.conf and inside of it we can just p put t so t is basically a variable that's going to be passed in for us that will basically contain a bunch of information and stuff we can use and then of course this is just for love and then here we basically say we want to manage the configuration for application so there's a lot of things here for example t dot identity and we can just make that equal to a little for now this will allow us to assign a save file i'm just going to also do this for now so this will allow us to assign a save file we can insert the path to that save directory for example saves or let's say data saves like that and then here we can just create a new folder called data instead of that saves now we have a folder with the name data and inside of that folder named save and there we can see that's the path to it so that's just basically the saves directory not too much there the next app we have and of course you can add multiple things here so i can continue underneath this if i wanted to and next up you have things like the version and here you can see the version of your game this is very useful because sometimes if you update your game especially on android there are two things that can happen one you can install an entirely new application or two that application that already exists will be updated where it is that's what you usually happen to have applications and that's what should be happening so here it can put like a version like 1.0.0 and i didn't do it instead of creation marks like this and then how you can basically determine when you should update what here it's up to you of course you can even add more things here like v1 and lstl or whatnot you want to add to this but usually if it's like this then you can just say for minor updates let's say you fixed a small bug you can increase that by one and let's say you maybe just updated the output so there's just like a so instead of it saying game over it says game lost that will make it two so if every minor change you can do this then with every major or a major change but bigger change so let's say you add a full blown menu system or fullblown settings to your application like it's a new it's a new path to your application like the whole new version almost then you can increase this by let's say one or two and it remember it doesn't have to be small numbers this could be like something like this and it's perfectly fine to make it very large numbers it's it doesn't have to be small values like we put in here for example and then once you have basically a change that makes this the version 2 or the version 3 of your game or like any major version of your game you can increase this so this means it's basically not the first version anymore it's basically like the second version of the game a lot of people also just like to do this just to keep it simple they just use two numbers where if every major update so let's say for example and you implement in whole settings page for your game they will increase this and with every minor update they will increase this so let's say you added like a little title at the bottom in you can just add that or you added like another character that or npc that doesn't do anything add one there like that all right in case you mess around with it too much i just put basic versioning in here let's actually keep this one here just for interesting and remove that one then we also have t.console and this is basically if a console should be attached to that game and there should be a true or false value so false means which is it by default there shouldn't be a console attached to the game this is windows only take note of that if you're on linux or mac this won't really affect anything but if you're on windows you might notice sometimes that there's like a little black box this command line or cmd that pops up when you open up an application that's the console so if this is true this means that the console should be running in the background and it will basically be attached to this window so once you close the window the console will close as well windows only though so take note of that next up let's say you want to save the files but on an external storage like you want to save the files but on and sd card for example then we can say t dot external external storage all lowercase and false or this would be true then this means you want to save the files but you want to do it on the sd card and not on the normal phone storage and i do believe this is android only so take note of that i think this is android only so you should also take in consideration about this we also have t dot gamma correct is equal to true now this will basically in a sense if the system supports it it will enable gamma correct rendering i have no idea what that is but if this isn't supported it will do that it will probably just enable better gamma whatever i think gamma is like lighting or things like that let me google that yes so it is the overall brightness of something so the more bright it is the higher the gamma i guess and yeah it's something like that i don't usually work too much with that i usually just do the basics in the configuration files i would go for camera correct unless someone specifically like gives an issue about the gamma being wrong or something like that then i will enter that but usually i don't care too much about that okay next let's say you're have you played like an online game and it's like a game like pubg on pub g you have the option to click a button and then it will hear your voice speak so you can speak to people on pubg by clicking the microphone button we can enable that as well now on android we need to basically get a prompt that allows us to hear the user's voice because you may have noticed if you want to talk to someone on pubg the first time you click on that button it will pop up a prompt asking you if it can use your microphone that's what we're going to do here so t dot audio dot mic equal true so if it's on android and you want to enable microphone then this will basically give them a little popup asking hey can i use the mic cool now let's actually configure something we'll be able to see such as t.window.type and that should be window okay and we just make that equal to whatever title we want for example cool ball game now if we were to love this we'll get this right here which says cool ball game so that's this part right there so that would be the the.title we also have things like the window icon you'll notice i have a little folder here here with an icon inside of it it's called game icon.jpg usually you want to save these as ico because that's a con file but i use the jpg just because so here i can just specify icon slash game icon dot jpg now if i want to run that then you'll notice i have a little icon here now and that's this icon we got right here it's a very dark icon i should have picked something a bit lighter but you can see there's a little icon there so that's to change the icon if you wanted to do that then you can by doing this and you see it's an icon and then game icon take note this path is kind of relative at the moment because you can see here if i were to move my conf file outside of this folder right here so icon was in a different folder it would not find this icon here so keep note that the location of where the conf is and where icon is that's very important but we're not going to go too deep into that that's something completely different you usually have to worry about you can also set the window with for example if we were to do this and you can also set a height it is to go like this and you can say we'll go away with and here we say height and then all we need to do is specify the width and the height for example let's say the width should be 400 and the height should be 200 which is which is a very weird ratio but there you go so the width is now 400 i believe pixels and the height is now 200 i believe pixels you can of course make this as big as you want for example 1200 by 700 which is almost a 16 by nine aspect ratio as you can see that right there now it's a lot bigger so it just depends how you prefer it you'll also notice that if i would just do here again that if i want to resize it i can so i can't resize it so even if i wanted to it just moves it it doesn't resize it and this is by default like this because usually you don't want games to just be resized because that could break the game but if you do want this to be allowed for your users you can say t dot window dot resizable is equal to true now the window can be resized so if i were to bring it over here now to go here then i can resize the window so it by default it is disabled and for good reason as i say you usually do not want to enable this because that could cause the game to break you'll notice in more popular games as well you can't resize the window because it's dangerous to resize the window you can also give it a minimum width and a minimum minimum height which could be better if you have this resizable on for example but i can just copy this and in here instead of just saying we have and height we can just say min and i'm going to copy that width there and just paste it here so now i can sit like the minimum width and height it's allowed to be for example let's say the minimum height it's allowed to be as 500 and the minimum width it's allowed to be is let's say 1 000. now even though it's resizable true it can only be sized to a specific size so here if i were to resize it as you can see after a while it doesn't allow me to resize anymore but i can make it bigger but i can't make it smaller so it has like a minimum size it can be resized two if you want to enable the resizable as i said before rather not you can also remove a window border by saying t dot window dot border list is equal to true this will remove the window border which i don't always recommend but it's a good option if you want to allow your users to have that okay so as you can see it doesn't have anything up here this should be optional if you want to put it in you shouldn't force this onto the user because not all users like this you'll notice with most games you have an option to remove the borders and that's a good there's a good reason why there's an option to remove it and usually by default it's not removed unless it's by default full screen you can also enable vsync so vsync and this you should specify with a number i don't quite know what this number means but you should specify the number if you wanted enabled here it is now vsync enable if you don't know what it is it's i think it's vertical sync and it's to sync sound and and the video but it's it should be optional because yet again not everyone will benefit from bsync because it's by default it is aligned as it should be but usually you don't worry too much about it okay so that should also be optional for the user to change you shouldn't force it on him again and here's something that could possibly solve my problems display tell it on what display to appear for example if i say display one but actually nope it displays that one if i say display two which is not my main display then ah it does appear here so now what we can do is instead of me having to continuously drag it over to show you i can now go here and i can make full screen i actually didn't know this display was here i just realized that it exists and just as you can see it's full screen and i didn't actually think this through because you know i can't really exit but yeah so that's if you wanted full screen now i'm going to keep that there because that's actually very useful i wish i knew that existed much sooner you can also specify the x and the y coordinate coordinates so we were to copy this and go here then we can like say x and let's make this 200 i don't know if this is not going to go back to this screen because the displays are kind of linked okay so you know it's here so the x is now 200 as you can see right there but to make that list and let's say 100 then it's 100 from the side here so yeah then we also have y and let's make this 100 as well so let's see 100 100. that's very useful if you wanted to be at a specific location but yet again you might just want this if you want to save where the user last had the application when they closed it that could be a good feature but forcing a location yet again not always a good idea because that location may not exist on the user's monitor because let's say the monitor is smaller than yours and you set it to specify beyond 500 500 they might not have a screen which is very rare but they might not have a screen that size so yeah just keep that as note this should usually be an optional thing you add all right so next up is something i do not recommend you play around with it it's good to know it exists but you should not be playing around with this unless you know what you're doing but usually you do not want to play around with it you can disable and enable modules by default all modules are enabled in love2b but you can disable them if you don't want them for example t dot modules dot and let's say timer is equal to false by default this would actually be true because the timer is enabled now this timer right here provides this dt here which is the time between this frame and the last frame so if we remove that module dt so if we make number here dt and then print that value dt would be zero so right there and i've accidentally removed my one thing i liked as you can see there it's zero but if we were to yet again just remove that from there and actually let's bring back our window display i did kind of like that so if we were to remove that disabling module then as you can see dt is a number so just take note you can disable modules which i guess would probably decrease the application size or something i don't know what it will really benefit in doing but you can do it if you want to do it so just take notes of that so usually don't just don't disable anything that's a good rule of thumb if you know you're not using something and you know and you know you're not going to use it then i guess disable it but usually you don't want to disable anything now if you might have fallen behind or you want to maybe remember some of this you can always find it here on the con on the love 2d website so for the most part we're going to use load or update here we're mostly just going to use draw so we can just focus on that let's try and draw a rectangle in lua which is pretty simple so it's just love dot graphics dot rectangle and here we can specify the type it should be so you have different ones like line and fill we'll cover both of these in a second so let's just say fill for now and then we can specify the location and i'm going to explain all of this in a second as well now if we were to run this you'll notice we have a little white square here and yeah so let's go look here what is all of this first we have the type fill so as you can see here this is like an entire box just wide but if we were to make this instead of fill we were to make this line then now we'll have a outline instead of having a fully filled white square then we have our x position which is 50 so this is the x position and then our y position which is 50 and this is like that you can remember which one is x and y by remembering that x is going horizontally and y is going vertically and as you know y if we were to put a y here it has a thing that goes downwards so this would kind of represent a y shape and that allows you to remember that this section here up to down that's why so this point right there would be zero y and zero x here would be 50x but 0y and here would be 50x 50y and here would be 50y 0x we'll explore this a little bit more in a second and then here we have the width and the height so we were to make this 100 then now the width with 100 as you can see here 100. let's change the x so let's make this 10 instead like that now if we were to run you'll notice it's only 10 pixels from the side here as you can see and then here is the y let's increase the y to let's say 500. i don't know if that's actually still on the screen it is there we go so this is 500 pixels so yeah that's the basics of just drawing a rectangle you have your x you have your y you have your width and you have your height so you can of course make the height having bigger so if you wanted to make a little bit larger you could you see there now as i said before if we were to make this zero and then run it again you'll notice that now it's here because the xaxis if we go back here is zero so it's right there it's against the wall because it's zero if we were to make this right here zero and let's say this ten let's just close this then now as you can see it's here at the top because that's the y index of zero as you can see because remember y is going down like that it has like this little y symbol i'll see if i can try and edit that in and of course if we were to make it zero zero then it would be against the wall as you see here zero x zero wise it's against the wall now before we continue to let's say something different let's try and change the color because currently we only have white what if we wanted to make it a different color we can do that by saying love dot graphics dot set color and we can make it let's say one zero zero which would be red and i'll explain why in a second so we will boot this up you'll notice a red square now and not a white square so this right here uses rgb values now rgb if you don't know stands for red green blue and here below we have between zero and one so 0.5 would be fine for example so 0.5 that would be halfway so 0 zero zero so for this was all zero this would be black because that means there's no red there's no green and there's no blue that's it's only black so none of those colors exist whereas if we were to make this one one one then this would mean white because that means all of the red all the green that all the blue is in here now usually you don't really want to figure out colors like this oftentimes you'd want to get your browser and search up color picker and you'll find something like this so let's say you wanted a nice greenish color so let's go here and then we go like this cool and you'll notice here we have rgb we can copy that and now here what we can do is we can paste it here and we can say divided by 255 and if you do this then we'll get this greenish color as you can see right there we divided by 255 because by default usually it's actually 255 so it's a number between 0 and 255 but in lua it's a number between 0 and 1. so if we divide it like this we'll get a value with it so if we go like this then we can just say 75 divided by 255 and that gives us 0.29411 so we could have put we could have done this zero 0.29411 but first of all this is kind of difficult to read because you can't really tell how much that is some people this is pretty simple but to me it looks a lot more than what it really is and that's why i just prefer this so you can choose between using this or this it will give you the same output so if we were to run this we'll still get that same green if we can just get love as you see there we get the same green so yeah but what if we wanted to make this black so zero zero zero you'll notice the background is the same color so if we wanted to make this the same color as the background is now we won't be able to see it so how does one change the background color well it's pretty simple now you can either do it here or you can do it on the on load so you can change it on the unload or you can change it on the draw if you change it here it's going to do that change every time or every frame is going to make that background color the color you set it to every time you call this every time draw is called so that's every frame if you do it on unload it will do it once and that's only when it loads up so for extra performance sake i would recommend doing it here unless it's part of the game to change the background color anyways we can say love dot graphics dot sit background color and here we have the same option so i'm just gonna say 0.5 0.5 and let's maybe say one and now if you were to run this you'll get this purplish color and then with the black box right there so that's how i can change the background color now let's get back to the actual topic of the video let's draw another shape let's try and draw in circle this time so let's go love.graphics.circle as simple as that i'm going to make the circle line and not fill but you can make it feel if that's what you want i'm going to position it at 100 100 and i'm going to make the size 50. now take note this is the radius so it's not a width and a height it's a radius meaning it's going to be 50 pixels to the left and 50 pixels to the right 50 pixels to the top 50 pixels to the bottom this is going to be a pretty big circle as you can see right there we can actually move it out a bit more so let's maybe go 200 or 200 that's an x and let's make it 500 on the y now if we're done this as you can see we get this so it's nice circle and whatnot now what if we wanted to change the color of this circle because we've already set the color have we not well it's pretty simple we just copy that line of code and paste it here again now we can give it a different color so let's say one zero point seven and zero zero zero point one there we go now from this we get this yellowish color that's kind of difficult to see but it is there so if you want to change the color you just basically set it here but take note this is important that these colors stay the same because of every frame it's going to call that again so we do this right now everything is going to be this yellowish color as you can see because i commented out this part so when this code runs again because it's going to set the color and then when it runs again it's going to not set the color again or it is going to set it again but here it doesn't change the color back it just draws and then it sits the color but it's already this color and then it goes here and it does it again and again where with this every time this runs it changes the color back to this this is something that's very important and you'll notice when you build the games that this does come in handy to know how this works i do recommend you play with this because you'll notice if you comment something out then this might not work if you'd maybe move this to a different location it might work so if we put this set color there it won't work as you can see there because the color is set here but then we come here and we change the color then these two execute and then we set the color to this and nothing is really drawn after that if we were to comment this out then now everything would be yellow again even though it's at the end as you can see there very good to note that so let's draw one more shape and then i want to show you how to just make something move so here we can maybe draw an arc i'm going to make it a line once again and let's say we need to exposition y position we can maybe keep this but maybe make this 250 and in here we need an angle one and an angle two so i'm going to make zero and two and you'll see what happened in a second my bad i forgot to add the radius because we also need a radius i'm not going to make it that big let's make it 20. and now if you do this as you can see we have a little thing there actually let's make a bit bigger because it is kind of small so let's go maybe 60 i'm pretty sure that would not 660 should be good enough as you can see here we have like a little cheese shape here now let's see what happens if we change one of the arcs to let's instead of two we make it five what will happen as you can see we get a little pacman that's pretty cool you can make a pacman game of this because it already draws the arc for you all you need to do is make this change so let's see what if we make this two what will happen now because what does this arc really do as you can see it kind of changes where this and that starts and ends what if we made both of these 5 what will happen then nothing because now both of them start and end at the same place if you were to make this zero and let's make this five again you'll notice this so if we wanted to make a pacman we might want to go one six i'm pretty sure that should be relatively close to man relatively close not quite on it so let me make this zero again and as you can see here we have a little version of pacman we might want to make the mouth a bit bigger so maybe make that five and make that one as you can see there now we have a pacman you can play around with this this is mostly just kind of playing around to figure out what you want so you basically give it x to y the radius and remember the radius is basically from middle to the outer ball so it's from here to there that's 60 pixels that part right there and that's there that's also 60 pixels now let's try and move pacman so notice here we have pacman let's try and move pacman here forward because that's what pacman would usually do it will move forward to eat maybe that little square there so we can even put that in front of pacman so you can eat it so let's see here let's make this x axis 600 and to 200 i'm pretty sure that should give us what we wanted we go here you'll notice these are square for him to eat if we were to just make it a little bit smaller so maybe instead of six hundred for remains of a hundred i mean we can go to 70 and 70. so let's see that's a nice square for it to eat okay now let's make pacman move so here i'm going to create a little variable just a table basic lua so we can say pacman and we can make pacman equal to nothing you could of course go underscore g dot pacman that will also make it a global but it's optional both of these are considered global i'm going to do the underscore g pacman i'm going to say pacman dot x is equal to let's say let's give these x and y values here so let's say 200 and then pacman dot y is equal to 250 okay now we have pacman's to locations so this is basically the same as saying x and then 200 and y and then 250 and that should be an equal symbol it's basically the same as saying that we just split it up and do multiple lines so it's optional if you want to do that i like splitting it up into multiple lines like this and in here we can just specify the pacman x and pacman y so now pack my next and then pacman y now if we were to run this everything should still look the same as you can see there and let's fill pacman so so let's fill pacman as you can see now pacman is nicely filled now let's move pacman so here in update we can say pacman dot x plus equals one let's do that and see what happens oh that might be a little bit too fast so let's maybe and i think this should also be equals pacman dot x plus and then how many this might be a little fast we might need to slow down but let's see now it isn't so as you can see pacman now moves until it eats this right here cool now let's make the square disappear once pacman has eaten it so i'm going to go here and make pacman dot eat equal to false cool now i'm going to do is i'm going to go here and say underscore g dot food i'm going to say x i'm going to create an entire table just for food i'm going to make it equal to 600. there we go now here i'm just going to paste food x here and now i can say if pacman dot x is more equal to food x and let's maybe add a little bit just a pacman can move a tiny bit before it actually disappears so maybe maybe 20 pixels so if pacman x is more equal to this value here then we want to say pacman dot eat is equal to true and then here we can say if not pacman dot eat and still this basic lure if you do not know what i'm talking about here you should go watch my tutorial on it but i'll explain anyways so let's first see what happens before i expect so here we have a little pacman that's now moving trying to eat this little square here once it gets to it it disappears because pacman just ate the square what did we do in this small game program we made so first we set the color of the background which doesn't necessarily need to be this then we created a pacman table and pat that pacman table contain the x of pacman the why of pacman and if pacman has eaten the why in this case isn't that important because we didn't change it the eat is important because if pacman has eaten meaning if he has eaten that pellet that will basically make us not droid because if this is true then this will not execute because not means if this is not true then execute otherwise if this was false it would be if this is not false as you can see doesn't work that good but you could also have swapped it around and say true and in here you can make false and in here you could just say if pacman.eat or you could have actually given it to this food variable here instead so instead of doing that we can just say underscore food eaten and we made it made this false and then we could have made food eaten equal to true here and now if we were to now we can just say food eaten this will also work perfectly fine so yeah that's the basics of that whole part there as we run this you'll notice it'll works yeah my bad and just turns out because there's a global variable it doesn't really know that too well we might so it thinks we're reassigning or we're kind of creating any variables i'm just going to put underscore g here so it knows we're talking about this variable right here and this should be not my bad because if it's not eaten if the food is not eaten we want to draw that food so that's what we're doing so if it's not eaten we want to draw it but as soon as it is becoming eaten then we don't want to draw because it has been ate or eaten i didn't know how to do that in the previous 10 or past tense very weird and here we just move pacman here we check if pacman has accessed that food palette and in here we just save it should be drawn and in here we draw pacman so just pacman pacman moves and pacman is about to eat this palette here as you can see but it's a very boring game because we're not doing anything so why don't we move pacman i'm just going to delete that and here i'm going to go underscore g dot food and i'm going to make that equal to an object and then i'm going to say food dot x and here i'm going to say food dot eaten and now these two are both objects but just to show you that both of these methods work let's actually go x is equal to 600 and eaton is equal to false you can do it like this as well there's nothing wrong with that now here we can say food dot eaten and here we can also say food dot eaten the game should still work perfectly fine at the originals just say and here as well so both of these two places food dot x now the game should still work perfect fine if you run it if pacman reaches the food palette right here it should pop disappear let's see it does cool now why didn't we try and move pacman ourselves because currently we're just moving it with every update which is kind of boring so let's try and move it ourselves so first i would like to be able to tell pacman when to move forward now usually pacman will move forward on his own but i would like to move pacman forward only when i tell pacman to move forward so let's do that so here i'm going to say if well if love dot keyboard dot is down and i'm going to say the letter a then i want to basically move pacman backwards so pacman oh no package pacman dot x is equal to pacman whoa pacman dot x minus one and that's your b dot x i'm going to comment this out just so that doesn't or literally actually deleted we don't need it now basically we're saying if this if the a key is pressed because if it is down if it is being held in us down do this that's what we're saying so if the keyboard key is pressed there are better ways to do this than what we are doing but for right now i think that's perfectly fine it's not too complex or anything now pacman doesn't move but as soon as i press the a key it moves backwards which we didn't really want when we want to move the other way around so let's actually go here and say else if and we can just copy this and let's put a let's put d there and d will move pacman to the right so we want to just copy this and paste now we can just make that a plus now you'll notice we made pacman here we added that dot wider so we want to move pacman up and down as well so let's actually do that i'm going to copy this i'm just going to paste it two more times and i'm going to make this w i'm going to make this s and now we can say y instead of x like that and this should be minus and let's see what we get now we can move pacman any way we want because we have control over pacman that we try and eat this pellet still gets eaten but you'll notice if i press a and w at the same time it doesn't really move up and down at the same time or up and lift at the same time so how do we get around that problem well we just instead of saying else if we just say if and we just add our end here as simple as that so just end and here we can say n so we just add our individual if statements here so instead of saying else if where any one of those can be executed we're saying if meaning all of these can be executed all at once without a problem so now if i run this you'll notice i'll be i'm able to move up and down at the same time as you can see right here and that's something you should take note of because sometimes in your game you want that to be something you can do but sometimes it's not so you should be able to kind of figure out which one you want for your game so you can know if you use an if statement or an if else statement cool now what if you wanted to rotate pacman because i know the real game nearly rotate that much he either looks up or he looks down but what if we wanted to do that what if we wanted to rotate pacman slowly if we want to move around because let's say this is the normal pacman we want to make pacman that can kind of just do everything well that's not too difficult so you'll notice here we have two angles the x angle and the y angle under the x angle is just angle one and angle two now we need to change this if you want to rotate pacman because you'll notice if we make this two and then this 6 pacman will know it will now be rotated as you can see right like that so let's try and rotate pacman so i'm going to go here and say i'm just going to copy this really and now i want to if the user presses down so that's the down arrow on the keyboard if they press down we want to basically take this angle right here and we actually want to modify it a little bit we're going to create maybe this pacman right here and say angle i'm going to just say angle one is equal to one and then angle so two is equal to six and that's what we have here so one and actually it's one and five dollar one and six my bad like that i'm just going to attach it to pacman here so pacman will now have two more properties angle one and angle two like that now what we want to do is we want to change the angle one and angle two here so i'm gonna go like that and let's do this and maybe make this angle two now let's just try and see how that works now we can't really see anything happening and actually you know why this didn't work it's because we never assigned angles here my bad i should have done all of this from the start so there we have angle one and now we can make this angle two now if we were to run again as you can see pacman spins but it's a little fast you know because we can't really control where the spin ends it's too fast for us to actually figure out so what can we do to make this slower well we can actually just say math dot pi times dt and this is where dt comes in real handy because now we can slow it down with a lot as you can see here it's a lot slower now if we want to basically add more here we can just say else i'll see if i mean i'm just going to copy this and i'm going to paste it here i'm going to say up it's going to contain the same code but now instead of being plus it's going to be minus meaning i can now move either up or down as you can see here everything still works currently the angle you keep it on it won't really change which way it moves if you press w s or d but you could change that if you wanted to but it's a little bit more of the scope of this video but yeah that's some basics on actually moving things in your game using your keyboard so getting keyboard input there are multiple ways to get keyboard input and we're going to discover those ways when we create the games but for right now i think this is more than enough to cover what we need so we have a little character here and we want to make him run around just like that this is an image and we basically want to load in an image and make it move so if you want to ask it you can come to www www.gameart2d.com and just this link right here i'll paste it in the description and you can get it right here and yeah let's actually show you what you'll get so if you go here you click on free download then you just wait for it to download boom it's downloaded now you can open it up then if you extract it like i did right here i just extracted it by clicking right and extract to you will probably have the same option on windows if you don't i just recommend you go to windows and or you just download winrar or 7z or whatnot then you'll find a png file and you'll find all of these well the thing is i didn't exactly use these like that what i use is more something like this as you can see it's just one image with a bunch of them in one this is what i like to call a sprite these right here they're to me they're images but they're actually sprites as well now you can of course just go online and find a way to like add these together i believe there is like a sprite option or a sprite website where you can just go and create a sprite from images otherwise you can just all right so let's get started let me just close this browser now i'm going to just delete all of this because we didn't need it and all of this as well and which is very long so we just plop that and then all of this as well cool now first we want to set up some of the core basics we'll need and also actually i noticed i left myself a comment here so if you want to also make the sprite yourself instead which could be good practice if you want to make your own sprites then you can go to this code check dot io image sprites sheet generator and you just browse images and throw them in here that's this is what i used i completely forgot about it anyhow now here we first need to set up some basic information about the character jack because that's what i like to call my character but you can call main character or character or whatever you prefer and we're going to make that equal to and x is equal to zero and y is equal to zero so this will be x and y position of jack and you're going to go underscore g dot to jack to specify jack or you can go here and you can say quick fix and they just disable by diagnostics like that and this is a vs code thing where basically it won't give you an error if you use the lowercase global like this about specifying underscore g okay now you'll notice i have a sprites folder in my directories if i were to open the containing folder there's a sprites folder inside the sprites folder is a spritesheet.png this spritesheet is just what contains the spriteboy over here jack now we need to go inside of sprites and we need to access that so for the character i'm going to also give him another property called sprite to specify this is its sprite it would be love dot graphics dot new image and here we can specify sprites as you can see there so sprites and inside of it we have a spritesheet.png i'm going to rename that and then just copy the text i don't actually remember just copy the text and i'm going to paste the text here this will basically get that entire sprite for me cool now that we have that we can go here to underneath jack and here we need to set the sprite's height and the sprite width so if we were to go back here and we click on this sprite right here i know can we see the properties it doesn't seem like it if i click here nope let's open up my containing folder properties and let's say image as you can see this is the size of this image so 500 5352 by 569 nice now i'm going to copy that and i'm going to go here to my main.lua and just paste it there in a comment because that is the width and the height so i'm going to create two variables to specify the sprite width and height so sprite width and then also sprite height now of course you could have also if you wanted to say sprite and it makes sprites equal to a table so a table within a table then you could have said image is equal to this right here is perfectly fine as well and then you're going to specify the height and the width in here as well you could have done this this is perfectly fine but i don't want to get too complicated with tables because they can be kind of become kind of complicated so for now we can just do that okay cool right now here we just say it's equal to and now we can say 5000 or you just copy this part here paste it here and then just change that into a comma and now this basically says the sprite width is this and the sprite height is this you're going to split them up into two lines but i like to do it in one line just because it's fast so now that you have that you can go to the next line and we can finally start working with the sprite in a sense so we need to specify a quad of the sprite's worth so quad is basically let's say right here this one block here that would be a quad this would be the next quad this would be an x squad now they have to be equal with support otherwise you might get confused and might have a lot of trouble so make sure that they are and what not so here we can just specify the quad stuff so quad width is equal to 669 nice and how do i know this because i actually measured this beforehand if this is 669 per quad i don't know how to measure it versus it did ask me how to do it i can't remember for the life of me and then you have your quad height which will be the same as your sprite height why because as you can see all the quads are the same height and they're the height that the entire sprite is so like that and you could have also put this in one line but i wanted to show you you can do both if you wanted to now what we need to do is we need to basically specify for each quad now you could have just used a bunch of images like they pre like they gave us inside of the folder or if you use what i use you need to do the following you need it for every quad you need to specify to love got graphics dot new quad and here you specify the location you start at this will change the height of it won't change but the width of it will change so we're starting with so this starts at zero zero so meaning it starts right here right there and then we want to specify the quad width row and then the quad height and this will just specify the height and width to get it with for the quad and you need to specify the entire sprite width and sprite height cool now for the next one we need to basically specify the quad width and everything else stays the same and now we need to do it again and again and again and you can already see where this is going you're going to have to do that a ton of times and it's going to be a bunch of copy paste code which we want to try and avoid as much as possible so an alternative way to go about doing this is by creating a quads table like that and then creating a for loop so for i and then we can just remove all of these because i need it is equal to one two and how many was there let's see one two three four five six seven eight there are eight of them so one two eight do the following and we want to just copy this paste it in here and now we can just say quads at index of i is equal to this but now what we can do is we can specify the quad width times i minus one so it starts at zero so by default if it's one minus one this will be zero so then is the quad with time zero which will return zero because anything times zero is zero so just what we had but now it has times so now once this is two so once i turns into two those will become one so there's a quad width and then we have our quad worth times three and whatnot i can actually show you an example of how it would have looked if we didn't do this it would have looked like that so let me actually just do there it would look like this but instead of it looking like this we used a for loop to make it shorter so this quad with part here as you can see it starts with zero then it starts with itself it starts with times two times three times four that's what we do here so quad width times zero one two etc so we just saved ourselves tons of time because now if we just add another quote to this sprite we can just update this as simple as that now we want to draw this sprite to the screen so let's go here to draw and here we can say glove dot graphics dot draw jack because jack is our character right here and we're going to specify the sprite that you draw and you want to specify the quote it should draw so once and let's just specify one for now and then we're going to say jack at index x and also jack at index y to specify the location of the sprite now if we were to run the oh this is in python this is love now in order to run the program we get a massive dude right here but that's a sprite with every sprite this will change because the sprites will provide animation the remakes that sprite 5 will get this where the fit is now moved so yeah now that we know we can do this let's first make jack smaller because jack is very big so let's say love.graphics.scale and we scale it to 0.3 this will just make it back a bit smaller by scaling all of the graphics to 0.3 so now he's about 0.3 is original size of course you could have also just made the sprite smaller by actually when you make the sprite making it smaller but in this case it's not really that necessary we can just say scale it and it will be scaled next up we need to work on the animation and we can create another thing here and yet again you could have put all of this inside of here i just want to show you can make them different but usually you do want to actually keep them in here but that's not too important for now now we can also create an animation option here and this will be its own table it again you could have made this into this table here as well would have worked perfectly fine now i want to specify the direction he's going to move in so if it's left or right so direction is equal to and then here we can specify something like right you also want to specify the if he's standing still or not so idle is equal to true so that means he's standing still he's not doing anything this will allow us to kind of give him a specific position so let's say that's the idle position so if he's standing idle he should look like this if he's not idle he should be moving through the frames then we can create the frame and we can make that one and we can create a max frames and that can be eight so these max frames is basically just the amount of frames we have here this also means now that we have implemented this max frames here we can go and say jack dot animation dot max frames instead meaning if the max frames here ever change we can just not have to worry about it here we can also change the speed so if you wanted to faster or slower and we'll make that let's say 20 for now and then we also have a timer and we can make that 0.1 and this will just determine when the character should change frames so the lower the timer the more the character will change frames all right so now that we have all of this we can start implementing it so first here we want to say if and not jack.animation.idle then basically if he's not idling then we want to say jack that animation the timer is equal to and it is a very long thing to type so i'm just going to copy that and boom and now here we can say plus dt and this will just basically be our timer it will determine when the frame should be changed and here we can see if the timer is more than 0.2 then the timer will be set to 0.1 again and here we can basically specify the character everything so let's first specify just iteration so we can just see the character move so if i'm just going to say frame is more than the max frames then you want to change this frame back to one so just like that and just say frame is equal to one now that we have this in place we can go above this line of code and we can say frame and we just make that equal to itself plus one so this will basically change frame every time the timer hits 0.2 and then once this frame is higher than 1 or higher than 8 which is the max amount here we're going to change it back to 1 and it's going to start over now instead of saying quads here we can just say and frame there we go so now we just specify the frame it on instead of an actual number meaning if we right now we'll we're supposed to be getting a moving body and that's because this is if it's not idle and currently our character is very much idle so let's just for now set the idle to false so you just see a move around as you can see we get a moving body we can't really yet do anything because we haven't given them any way to do anything now that we have that what we can do is we can implement key presses so in the previous video i did show you how to do key process so let's quickly implement that so if it's not idle actually we don't even need to use this if statement we can just say if love dot keyboard dot is down and we specify uh let's say b if we specify d the idle should become false so we can just specify this idle and you can make that equal to false because this is being held down meaning it should move and then we can say else well let's go i'll save here and we can copy this paste it here and we can make this equal to a and we'll do the same thing so both of these will do exactly the same thing for right now and in here we can just say true and if none of them are like that we can just say else copy this and make it equal to true again like that so now this we can make a move by specifying or by pressing a and d but you'll notice it doesn't go back to the idle frame that is because we need to set the idle frame so when this doesn't get doesn't get clicked we should set the idle frame so basically here we can say frame is equal to and we can just specify one because if we're not going to press it we can just say one because then by default it will be that one as you can see now goes back to his idle frame pretty simple so yeah so if none of these two buttons are clicked then we're going to set them to idle and set this frame to one we can maybe go here and here we see the directional right so we can get the direction and here we can say control c and just change this to direction and we can make this equal to right and here we can make it equal to lift now i can use this direction here to specify where the character should be moving to so if the whoa direction that is right so if the direction is equal to right then we want to change the characters go to so we can say jack dot x because i want to change the x position of jack is equal to jack dot x plus anyways i just paste that or damn it jack dot animation dot speed so basically we'll move further to one side depending on where don't do that depending on the speed we put here cool now we want to check if it's left as well so here we can see else and we just copy this if statement paste it here but now we can make this if it's lift and we can say minus like that now if we were to run this you'll notice we can move forward and we can move backwards that's pretty neat if you want them to move forward or backwards faster or slower then here we can make that 30 that will make it move forward or backwards faster as you can see here so the more you make this the more you increase this the faster it will move so you can see now it's running i don't have enough frames to cover running that fast interesting also i forgot to mention if you're seeing a very bad frame rate on your end just think that i am filming at 15 frames per second so you might see bad frames compared to what i see anyhow now that we have that we can start making the character switch which way it's looking towards because currently the character just runs forward backwards like it's not normal to run backwards like that so we need to make the character start looking forward so i'm just going to turn down the speed here to something like 20 again now here we can basically just get the direction so i'm going to just copy this if else statement and now we can just draw the character let me just actually do an lc really need the rest now we can just draw the character to the location we want it to so if it's right we can just draw him as normal but if it's lift you have to do a little extra to make it him turn because currently he doesn't turn so we have to flip him because here he's only facing one way so we need to kind of flip him around to make him face the other way so right here after you specify the y position you can specify zero negative one one quad width and zero now you might be wondering what are all of these numbers so this first zero here this specifies the radius or the radians not the radius this will make the character maybe let's say flip himself so instead of looking like that he's facing upwards or facing downwards that's this part right here that's the radiance this part right here is the scale factor to the xaxis and the scale factor to the yaxis so this will make him flip other way around this right here is the offset as well as this this is just to make him not look weird while we're moving around and i'll shoot her in a second so as you can see we can now face two ways so let's start with the first part if we go here and make that 20 for example 20 radians not radius but radians actually yeah as you can see it goes crazy so once we switch him around he's facing a way different way i find it very funny actually but yeah that's if we change that because that will just kind of swap the way he's looking towards so whenever we don't press d it's going to flip him around this is just to keep him looking to his specific location so if i were to remove that negative there is going to look the same way no matter which way we turn actually he's just going to disappear oh wait that actually just moves him to the okay very confusing but yeah that just moves him backwards so i guess my origin offset i got that wrong probably anyways i can make that back to negative one but you'll anyways notice he didn't while i was doing that so as you can see it didn't quite turn either so if you were to make that one it's not going to turn you're going to kind of run the same way looking just from a different location as you can see right there and of course you can play around with like making 0.4 seeing how it turns around now could be interesting see here yeah now he just looks weird but basically he's being flipped so he's literally being completely flipped around you can play around with that use x to kind of play around with it a bit more to understand how it works i'm going to leave it right there then here is the same thing but just the other way around so if we were to minus that now we will do the yaxis as well so boom yeah yeah i probably bring him down otherwise we won't be able to see him but yeah that will do it on the yaxis as well and here we just specified a quad width to kind of get the offset and then the height so these two aren't too important we just need to put them there to so it knows where to put it and right now we have created a character they can actually walk around and do as he pleases and hello everyone if you're enjoying this tutorial please leave a like and subscribe for future tutorials you probably want to see what game we're going to build so let me just start up everything here and then boom now here we go so this game is called save the ball it's one of the very first games i made when i try to create a game so we have things like the fps counter which is optional we have buttons and yeah now if we click on play game we basically get this we get a little counter here that counts how many points we have this is based on seconds so every second will give you a counter or a point and then if you have enough points then the next level will start where there appears another ball now these balls will get faster and faster with every level you make for an example in this case the first level is 15 and in the second level i believe is 30 yes and there's another level at 40 i believe and one at 60 and it just goes on but it's very basic game but it teaches you things like collision detection how dt works how to get the fps how to draw shapes all of these things in live 2d and then you also have your game over screen with your score and you can say something like replay if you want and yeah so that's the basics of the game now if you do ever fall behind when trying to play this game you can always just go to well my bad and always just go to github and this link will be in the description if it's not just send a comment my way and i will remember to put it here now in this repository here youtube projects on you can go here to lua and inside of it you'll see a folder called save the ball and in here you'll have multiple parts we are on part one so everything we're going to do is going to be right here so if you fall behind or you want to maybe go check you can come here and part five would be the end result okay cool so let me just move this back to its original screen now here i have an empty folder i'm going to create a new folder and call it save the ball you can add spaces and whatnot i'm going to keep it spaceless and then in here i'm going to create a new document or a new file and call it main dot lua now what do you need to know before we start with this tutorial you need to know love 2d i have a whole course on it with like five parts or something that you can watch if you have not seen those tutorials yet i do recommend you do because they are going to be very useful you don't have to see them we are going to cover a lot of things from the start but i do recommend you do because it will just make things so much easier if you do and you also need love 2d installed of course now i'm going to open up vs code in here but you can open up whatever you want to i just prefer coding in vs code so here's vs code i'm going to close this and here you see there's my main.lua file i created cool now let's start by first importing love so i'm going to say local love is equal to require and love now we can create our free functions we need so function love dot load and this one will be love dot update and this will be love.draw cool so as we know this will load everything we need into the game this will update the game and this will draw everything to the screen now we can save this and we can also open up our terminal which i'm going to move to the right and now here we can say love dot so it does nothing love2d here does it absolutely nothing so what i'm going to do you do not have to do this but i'm going to do this if you can just there we go i'm going to create a new file call it conf lua you do not need to create this configuration file i however am going to create it because i would like my window to pop up on the second screen but you do not have to do this because you might not have a second screen so t dot window dot display and we can make that equal to two this should open it up on this window now we can just run love dot again and there we go cool now we can go back here will you close that con file because i don't need it open anymore and yeah so first i would like to set the title of the window so love dot window dot set title and we can set it to save the ball now you could have also put this inside of that conv.lua file if you saw my tutorial on it you do know how to put it in there although i want to show you the alternative methods of doing these things as well so i'm going to do it on the unload of this love2d game but if you want to you can do it here as well because you can do this windows display thing you can also do it in here you can do the windows resizing in here you can do everything you want in here first thing i want to do is i want us to be able to see the cursor because if you might have noticed or as you may have noticed if i were to just move this back here our cursor is a little white dot that's our mouse i want to code this into the game right now so let's do that let's code it in so first thing we'll need is we'll need to get the player location and that's going to be that little circle so local player is going to be equal to this and you could also put this inside of this load it's optional then we need three things we need the radius going to make that equal to 20 within an x position and we're going to make that equal to 30 and we didn't need a y position and make that equal to 30. you could make this equal to zero as well it doesn't matter i just like doing 30 because why not cool now we need to basically always update that position so player dot x and player dot y is equal to the love dot mouse no mouse dot get position so this right here returns two values it returns an x and a y position value so we're storing the first value we get into this player.x which is this and the second value we get in the player.y which is this and we're doing it on every update because every time the player moves the cursor an update will occur now you may also notice if i move around things might look a little bit laggy but that's just because i record on 15 frames per second because that's just what i'm used to and that's what i edit in so things may look a bit laggy but on your end it should not be looking laggy you should be getting about 30 to 60 frames a second all right now here with the draw we want to basically draw the circle so i'm going to say love dot whoa love.graphics.circle i'm going to go fill method player.x player dot y and also player.radius this will draw a circle where the players x and y meets up and give it the radius that we specified up here now if we were to run this we'll get a massive circle now this is the end game circle because we will have two states that we're going to be using right now and those two states will determine the size of the player so i'm going to create a local game and it's going to be a table with state now we have a menu and we're going to make it equal to true now this will be the states we have so for example we have a menu state if it's a menu state it's going to show the menu if it's the paused state it's going to show a paused menu now here i'm going to make that paused i'm going to make that running and i'm going to make this ended now currently we want all of these to be false and just this one to be true that's for the menu state now down here we want to specify when should it do what size so i'm going to go if game.state and we declared state up here and then in square brackets and in quotation marks i'm going to say if it's the menu state so like that and you'll notice right here so if it's the menu state then we want to basically do this and we just want to divide this by two so if it's the menu state then it should be the normal circle size but just divided by two i'm going to create another if statement but this one will contain a not menu and there's a reason i don't make this an if else statement and you'll see in the future tutorials so here i'm just going to remove that divided by two now if we were to run the game we'll see this a much smaller circle that's because we're in the menu state so the circle is half its original size now if i were to change the menu to false and then the running to true and my bad these two should be running not menu and now that we have that we can actually just move that so divided by two and we can just move it to the bottom one so now the first one is if the game is in its running state meaning if the game is being played give us the full circle otherwise in any other state have the size of that circle now if we run it we get the full circle because it's in a running state any other state we switch to no matter what the state if we make this false and we make the state of paused to true then you will get the smaller version as you can see here so any other state will give us a smaller version but running will give us the big version cool so i'm going to change this back to menu state now we need to hide the cursor because as you can see the cursor is still there we don't really want the player to see the cursor because it breaks the immersion a little bit so to get rid of the cursor what you can do is here in the load we can say love dot mouse dot sit visible and you can make this equal to false this will make the mouse invisible so now if you run it there's no longer a mouse i can still move around but the mouse itself is gone now one last thing i do want to implement is the fps counter because let's say you're getting very bad fps you might have coded something wrong or something like that because the fps should usually stay at around 60 fps may be falling to 30 but usually it should be 60 fps and we need a way to see that so here at the top because we don't want the fps to block anything so it should be at the top so it always if there's something above it the fps doesn't go over it anyways we can say love.graphics dot print print f and here we can just say fps colon and then dot dot is to concatenate the string love the timer dot get fps and should be timer not time and there we go now if we run it we actually get an error and i believe we get this error because we should specify our font so love the graphics the new font and i'm going to specify 16 and let's specify an x and y location as well so let's go 10 10. so now we have a font size of 16 at its x and y position is 10 and 10. now if we run it we still get an error and we just also need to specify where it stretches to so graphics dot with should work perfectly fine and this should be get with as simple as that now let's hope for the best there we go we get a little fps as you see it's around 60 fps and that's where it's good okay cool now just because i have a little screen space i'm going to just split this up into multiple lines like that okay so first we display the fps then we set the font size then here is the x position which we can keep here is the y position which i would actually like to go love.graphics but get height 10 and this will put it at the bottom of the screen which is what i want i want the fps to be at the bottom of the screen just because it's less distracting let's make that 30 just to make a bit bigger or a bit higher and then this basically sits how far as you go before wrapping the text now if you were to run the code or fps is here at the bottom and that's the very first part of the tutorial we didn't do a lot we just basically set the game state created the player created the load the update and the draw functions where the load sets the window title it makes the mouse invisible it then we get to update and it updates the player x and y positions then on draw it puts the fps on the screen and if the game stays running it draws a circle with the player x and y position and also the player radius if the game state is not running then it does the same as with running but it divides the player size in two so first of all this right here this doesn't need to be here you can actually remove that it will run perfectly fine because by default love will import it but i'm still going to keep this here just to get all of those errors away and whatnot so yeah that's up to you before we continue right okay so in this tutorial we'll be creating the enemy the enemy that's going to kind of run after us and whatnot so first i would like to give our game another difficulty and difficulty is going to be set to one now the higher the difficulty the more difficult the game should be as simple as that because the speed of the enemies will be kind of dependent on the difficulty as well and then we want to create a table called enemies now this table isn't going to be used too much in this tutorial because we're only going to have one enemy but once we get deeper into it this table will be containing all our enemies so all our images are going to go in here we want to basically create our enemy object now we could do it in here but this file is already going to be very big by the end of this tutorial so we want to create a new file so right here we can right click new file and say enemy dot lua i'm going to give it a capital case e in its name to signify that this is an object it's completely optional it's just how i like to do things if you have seen my tutorial on oop you will probably know there's multiple ways you can do oop in lua and the first way is by using a table the second way is by using a function and a table and there are more ways but i don't like covering the others because they're kind of difficult to understand in my opinion so in this case i'm going to use functions and tables because i found those to be the most easiest to use so first we want to import love so local love is equal to require love cool and we don't need a semicolon we're going to create a function and we're going to call it enemy and this is going to be our object for enemy now at the end of this function we want to say return enemy and this will basically export this enemy when once we import it here so this will be exported this function right here it's just so this massive function won't have to be found or used or what not in here we don't have to see that massive function in here because it will be stored here so let's start with very basics we're going to return and whatever is inside of this right here this table is going to be what's returned to us so first we want to set the level to 1 by default the radius i'm going to make that equal to 20 then the x is going to be equal to and there's going to be enemy position for in case you didn't know i'm going to make it let's say negative 10 and the y is going to be equal to negative 50. so basically this is where the enemy's start position will be we want it to be off the screen and we're going to randomize where they actually come from later but currently we want it off the screen because it should kind of just pop into the screen as the level goes on so more enemies will pop into the screen cool so these are the first few things we'll use next up we need to basically create something to draw the enemy and something to move the enemy let's first try and move the enemy because that's probably going to be the most difficult part here is just moving the enemy and that's going to be a function inside of this table so it's a function inside of the table and it's going to take in three items self it again in my oop tutorial because it's going to take in itself we also want to get the player well player x and the player y you could pass in the entire player in here but i feel like that would just be kind of a waste of memory on the end of the day because you're going to pass an entire object where you can just pass into values so i do recommend passing in these two specifically just x and the y cool now basically we want to make the enemy move to the player that's all we want to do very simple we just want the enemy to go towards the player so it will just be basic if statements so if player at index x or at x position minus self.x and this self is referencing this x right here so where the enemy currently is so if this value is more than zero then self dot x is equal to self dot x plus self dot level so what we are doing here is basically if the player x minus self.x if that is more than zero and we're minusing here because remember x starts basically at this point right here all right so future steve here and you know i realized this wasn't a very great explanation so let me actually explain it better let me just move this to number three so here we have basically our example it's saying if the player at position the x position of the player minus the x position of the enemy so let's quickly go here and just draw it out let's say the enemy is a red square so this is the enemy and but actually let's make it a circle otherwise things might get confusing okay so the enemy is a red circle and the player is a blue circle just draw a nice circle here there we go now here we're saying if the player at position x okay so the x position of the player would be there at the center that would be the x position from here all the way up until there that's the x because remember x goes from side to side that's x while y goes up and down so this would be y so then so just remember that so this is the x right now we go here if the player x and yeah so the player x minus self.x and self.x would be the x of the enemy so this right here this would be the enemy x that's self.x so so this is the enemy south.x right there now if we go here we see if it is more than zero okay so let's put this in a mathematical perspective so let's say this right here is 63 the x position of the player is at position 63 and the x position of the enemy is at position 10. now we are saying player at position x okay so it's 63 whoa just 63 right minus self.x okay so it's minus 10 because remember self.x is the enemy so it's 63 minus 10 right and that will give us 53 so the position between this point and this point is 53 that's basically what's being said here and then we're saying if it is more than zero and we know 53 is more than zero then we're saying self.x so this would be the player x or the enemy x not the player the enemy x is self.x everything self.x is equal to itself okay so self.x which is 10 let's let's make this red because we're talking about enemy so it's 10 because we're saying south of the x okay so it's going to be itself so that is self.x plus its level so plus one so we are saying south to x becomes itself plus one so now self.x will be eleven because it will now be one step closer to the enemy meaning this right here will minus with one because 63 minus 11 and remember we got 11 with that quick equation so that would be 11. so 63 minus 11 is equal to 52. so that will basically close the gap between the enemy and the player this might be a little bit confusing to work with like a lot of the math might be in game development but don't get discouraged because the more you work with it the more you'll understand it so yeah back to the video now we also want to do the other side of x so let's say the enemy is to the right of the player so else if and then player minus self.x is less than zero so basically if the player x minus south.x because remember x becomes more the more you move right so if the enemy is more right than the player then this will be a negative value this will return something negative so basically let's say this right here that's the enemy and this right here oh yeah no not yellow we can't see that okay and this right there that's the player now let's say on x so x here will be equal to two and x here would be equal to five and remember this is the enemy that's why he's red he is bad he's the enemy bad uh so let's just full screen this so here we're saying if the player minus self.x is less than zero so if the player so two minus self.x and remember this is the enemy so minus five is less than zero then do something now two minus five is negative three so this will return true so if the enemy is to the right of the player it will return true and with the top one if the enemy was to the left of the player it would return true if the enemy you know it would be the same thing just other way around now here you can just say self dot x is equal to self.x minus self.level because we want to decrease the exposition of the enemy if you're having trouble kind of wrapping your head around this don't worry the first time it can be a bit difficult i had the same problem when i first thought of this like oh well my brain can't wrap around this math many worry it gets easier and it's going to be the same thing but for y so if y let me just change all of these to y so if player y minus self.y is more than zero then sound.y becomes the same but plus it's the same thing now it's just why because if i were to open up drawing ooh and basically remember y goes down that's how y goes so this is the player and this is the enemy now let's quickly go check here so if the player y minus the enemy y is less than zero so the enemy y let's say is equal to ten because remember goes down so this would be zero and this would be something like 20 or something and here the y would be equal to let's say five now here we're checking if the player y minus south of y is less than zero so is five minus ten is less than zero and those two minus will be negative five right and that is less than zero then we're saying the wrong window self.y becomes itself minus level so it will decrease so now we're saying okay move this upwards so now the y will become nine because we're moving it upwards and this is going to run with every update so it's going to move the enemy closer to the player with every update so yeah let's continue to the next part then now you want to be able to draw the enemy so that was going to be another function called draw it's going to be function taken self doesn't have to take anything else and here we first want to set the color love dot dot graphics dot set color this is basically just going to set the color of the thing we're going to draw now i'm going to choose a very random number in order to figure this out so i'm just going to say 1 0.5 and 0.7 i just random number that popped up into my head remember you could have also gone like 255 divided by two five five and the same here you could have just gone what's the half of two five five anyway the half of two five five divided by five five so you could have done that as well but i preferred not to in this case and then we're going to draw a circle but you can make the enemy a different shape than a circle i just find it easier to do it as a circle so love dot graphics dot circle and we're going to fill this circle we're going to put our position self.x self dot y and it's make the size of self.radius we're going to draw a circle it's the x index the y index and then we're going to give it this size right there and we set all of that up here and then we can say love dot graphics dot sit colors we're going to reset the color back to white because that's going to be your default background color you don't have to set it here but i prefer setting it here then having to set it here in this draw function over and over and over it also just brings it also just prevents a bunch of bugs that could possibly occur okay so that's the most basic version well later on for in letting jump in from random size but i think for now that should be fine so this is the enemy now here we have our enemy object and now we can insert our very first enemy so here in load we want to insert our first enemy table.insert and it's just a normal insert method and i'm going to insert it into the enemies table right there and we need to import enemy now that i think about it so local nm enemy and you don't have to give it the same name i just like using this name and we're going to say enemy and it should be capital e that just means basically import enemy from this file right here that's what we're saying right here cool now that we have that we can go here and we can say at index one insert our first enemy and it should not have a capital e because we gave it a lowercase e as a name or we should have there we go lowercase e not capital e okay but you could give it a capital kc name i just preferred going lowercase cool and that will insert our first enemy now here an update before we can actually try and use this enemy we need to basically for i and yeah let's just like that for i equals one and let's also remove all that until the number of enemies and then do so basically for every enemy inside of this enemies table currently we only have one but later we'll have more we want to go enemies or enemy or yeah enemies actually and then add that index so index i colon move take note i'm using a colon here and not a dot and then here we can just pass in the player dot x and the player dot y why am i passing these in because here in move we're taking player x and player y we do not have to pass in self because self gets passed in for us cool so for every enemy do this you can also create an update function instead that will instead of just moving it it will do all of the updating for the enemy that could also be something you can rather implement instead of move but this game is so basic i'm just going to have a move function and not an update cool now we need to draw the enemy let's go here into if the game state is running right then we can go and above the player because we kind of want the player to overlap with the enemy or you could do this below it doesn't really matter that much and actually i'm just going to copy this because it's going to be the same code just a different command so boom and here i'm just going to say draw so this will draw every enemy inside of the table okay so let's try to run this and see what we get love dot let's see and you know what we're not getting anything it's because currently we're in the menu state and everything just gets drawn if the state is not the menu so yeah let's go there and just go false and in here we can just say running is true there we go now it should work as you can see there the enemy comes to get us but currently nothing happens so the enemy just stops once it gets on top of us but it should later on like stop the game if the enemy touches us but you'll also notice the enemy always comes from the same side and that's very boring because we want the enemies to actually come from different sides to make the game more interesting so to do that we can just implement a little bit of math and this map will basically make the enemy come from different sides now here at the top i'm going to declare four variables local well local dice local x and y i take those these have underscores you didn't have to give them names of underscores i just find it much easier to work with them if they have that and also local and an underscore radius cool these two are not going to have any values associated with them at the moment radius will make 20 as a default but you can later on they modify this radius to give you more interesting sizes so let's say you want different size enemies that could be kind of neat now this radius here i'm going to paste it here this x here i'm going to paste it here because it's going to be modified that's why here i'm going to paste it here so these are all going to be modified except for radius so these are all going to be modified and these two will now be set here and we're doing this because we want the self to work when we want these because this is not part of the table it's part of the function but it's not part of the table that's being returned to us but it is part of the function so this one won't be returned to us we won't be able to access these values but we will be able to access any values in here it's something you have to wrap your head around because it can be a little confusing okay and this dice will basically determine from which side will the enemy appear from this side from this side from this side or from this side so i'm going to make this a math.random and we're going to make it 1 and 4. and before we forget in the main.lua file not in the enemy but in the main.lua file we want to just math.random seed and we want to just give it os.time now what we are doing here is we're basically saying every second change the seed we're going to get so whenever the user boots up the game their random numbers will be more random because if we don't add this then the enemies will always start from the same place and we don't want that because currently as you might have seen in my random video the random numbers don't really change they kind of stay the same unless we seed them so at least we see today if you don't understand that yet i do recommend you go watch my tutorial on it i do have an entire crash course on it after all cool now we need to basically give the dice functionality so we can say if dice is equal to 1 then underscore x is equal to math.random so we're going to give it a random position on xaxis so anywhere random here so there we go master random and an underscore radius because we wanted to start at minimum at the radius so the the enemy will always be hidden no matter where it is on the xaxis and then love dot graphics dot get with and this will just further work so it will give us basically a random number between the radius so 20 and the width that's given to the window and then we want to say y well you can actually do it underneath y is equal to minus so negative underscore underscore radius times four so if the dice is one and it should be underscore y so if the dice is one x can be anywhere on top of this right here anywhere but y specifically will be minus the radius so remember it's going to basically be here so y 0 is here so y minus the radius would go up so minus the radius will basically mean hide the entire ball hide the entire enemy and it retimes it by four so it's going to be basically being hidden four times itself this will also give it a little bit of a time you have to wait once the knee level starts before it actually starts to jumping in so it doesn't just go into the screen immediately you'll kind of understand it once we actually use this so now we can just say else and i'm just going to copy this right here all right the little disturbance i can't remember where it was but okay yeah i believe it was just like this and boom okay now else if the dice is equal to two it's going to basically be the same thing i'm just going to copy these else if's because we're going to have kind of a lot of them except for the last one the last one will just be else and this one we can make three and in the else would be if it's not one two or three then just give it this one by default okay so with the second one it's going to be a little bit different it's going to basically be swapped so x will contain this and y will contain this and then here we can instead of say get with we can say get height now why is this like this why did we swap it around here well if the dice is two we're saying okay x should be here but it should be minus its own width so basically if you hide itself times four so it's going to go to the side here four times itself its own width and then with why we're saying okay find any place from this part right here right and just anywhere towards the height you don't necessarily have to specify this radius here you can make the zero because remember it's just going to come from a random side anyways but basically it's going to be able to come in from anywhere on this side right here so if the dice is 2 anywhere here if the dice is 1 anywhere here from the top if the dice is free however then we're going to do everything the same but this one right here this y we're going to say love dot graphics dot get height plus and then we're going to say radius times four whoa radius times four and known minus so why are we saying this here well basically we're saying okay if the dash is free x can be anywhere from this right here and they were saying okay the y should be the height plus itself times four so anywhere from below here so now it's not anywhere from the top but anywhere from the bottom like from here that's what we did here we basically set the y to the bottom of the screen and then here it will be basically the same as with if dice were two so we can do like that but now the difference is and remember to remove this minus symbol right there x here we can just go and well no no no no no we just go and do this and we can say love dot graphics dot get with plus and now what we're saying is okay it can come anywhere from this side right here so now it can come the the ball the enemy can come from anywhere inside of this window here not this one but the game window itself so you can either come from here the top which we did first or it can come from the side which we did second or from the bottom which we did third and or from this side right here from the right side which we did last and now these x and y values as its default values that that ball first gets comes from here and this will be different for every ball that's the nice part because every time we create a ball is going to execute all of this and then it's going to return this to us but this x and y would have changed and if you want you can also change the radius so yeah now if we were to run the game it comes from down the part down here okay let's run it again and see it's happening again oh attempt to perform micro let me go get field a function value so this is enemy 18 let's see here ah there we go that should have those little bracket things there okay let's see and it starts from this side now okay one more time just to make sure we have everything it starts from the top so that's the nice fact every time you start the game it starts from a different angle which is pretty neat and i believe that's all we need to do for the enemy all right so first we want to go to the main.lua file this main one right here and we want to make this true because today we're going to be working on the menu so we want to be able to see the menu by going here to true this shouldn't do much except for resizing your cursor so make sure it does now we're going to create another table here called local buttons and these buttons will basically contain all of the buttons for all of our different states so menu underscore state will then become an empty table cool now that we have that let's go here to the side and just create a new file i'm going to call this button.lua it's going to be a button class and this button class will basically contain all of the things we'll need for buttons so local love which you know is optional but i love doing this require and we can just say love you can create a function called button and yeah simple as that now we want quite a few things we're going to mess around with too many things just yet but i can tell you from the bat our button will probably have text on it and we probably want to set the text when we create the button so something like text and we also need to be able to execute a function so funk because when we click the button it should be able to do something and this func we pass in is what it should be able to do this befit isn't too great i don't love it that much but it does get the job done and that's what we want at this moment we also want to be able to pass an optional parameter into the function so we can include func param and then we want to include the width and then the height of the button okay so next we can just say return and it's going to return a table this table is going to return will contain width and that's going to be either the width passed in or 100 by default and then we want a height which will be the same thing so like that so either the height passed in or 100 then we're going to create a function and this function will be able equal to the function passed in to func passed in or to a function that doesn't do much it's just an anonymous function it's not going to do anything really i'm just going to print this button has no function attached as simple as that if you wanted to you can even make it shorter and make it one line like that it's optional you can make it more than one line i kind of like it as one line because it just does a quick oneliner and then the function parameter will be the function parameter passed in if there's no function parameter passed in it will be nil and no parameter will be passed in and then the text will be equal to text or no text then the buttons x position will be equal to zero the button y position will be equal to zero and then the text on the button should be at position zero and in the text y of the button should be at position zero as well exit this is a lot of things we're just setting by default you don't have to worry too much about it and then of course you want to return the button down here before i forget because i'm going to forget what i did now cool now we are going to do things like making the button clickable and what not but first we want to be able to draw the button that's the most important part right now because we need to kind of get the button just on to see that it works so let's create a draw function for the button which will be a function and this function takes itself and then the buttons x position the buttons y position and in the text x and the text y position now i might be putting it here like the button x y text x and x y might be able to be passed in from here so these four attributes but if you wanted to you could pass them in here the reason i'm doing this is if you ever later want to animate the button so the button moves from one position to another position then you can do it from here you can when you draw it you can just move the button x and y positions as you please instead of having the x and y positions kind of set as soon as you create the button this is personal preference i like doing this you don't have to do this you can put all this you can put it in here there's no problem with that i just want to do it here and this also keeps this from kind of cluttering up and having 50 000 freaking things it needs to take in because now it's being split into two cool now here we want to say self dot button x and of course you could have made this a table as well but we're already in a table so having another table within a table is just uh you know personal preference yet again and that can be equal to button x so this button x right here or self dot button x so this button x here or this button x here one of these two self.button x is referring to this button x don't get too confused here so just as i said you could put the button x and y up here as well and it will be set here as well anyhow and we can just copy that and do the same for y so self dot button y like that then here we can basically set the text position so if text x so the text does exist the x position of the text which is passed in here then we can say self.text at position x is equal to text at position x plus self dot button x else self dot text x is equal to self dot button x now you could have done this yet again in one line where you basically check if this exists and if it does exist you do your things you could have done like this but i find it to be a lot less confusing and just so much easier to also understand if you're reading it if you do it like this where if it's take six do all of this otherwise do this instead of using this or way here which could work but i'd rather not because that's going to be prone to bugs because i'm not too good at reading that and in here we could of course just go text y and in here we can say button at y like that now here we're just saying the text on the button so this is the text that exists on the button if the x exists so if this exposition is being passed in for it then make the original one here make it equal to what is passed in plus the button x we're saying the button x here because the button may be 30 pixels to the right but the text isn't just going to be placed onto the button automatically so we'll need to tell the text to add that x so we're going to have our button x and then we're going to need to add to it that's this here i'll show you how this works in a second once we actually draw this to the screen just so you can kind of get an idea now take that this bottom order i'm going to do here is very important so love the graphics dot set color and you can pass in your own color the color you want for every single button but in this game i'm just going to keep all the buttons the same color 0.6 0.6 0.6 is going to be a lightish color then we want to draw the button so love.graphics.rectangle and if you're still a little bit touchy on this right here don't worry i am going to explain it i just want to kind of give you something you can visualize when i explain it and we can just say fill it because we want to fill it so we don't see the background color of the game and then self.button x position edit x self dot button y self dot with and itself dot height so this is where the button is going to be drawn to and how it's going to be drawn okay so that's for the button we can do that now we need to do the text because remember the text isn't really part of the button it's its own thing so we need to do it here as well so love dot graphics dot dot sit color and we're going to make it equal to black now you can make it a different color but i feel like this color works perfectly with this lightish grayish color then we want to love dot graphics dot print and we want to print self dot text dot text and then self dot text at position x and then self dot text and position y taking it i'm using self everywhere because we want to on the end of the day use this everywhere in our code this will just make things so much easier so whatever you do do not change these values here or any values you sit in here try and keep it as much as possible to these globalist values we have here because believe me it's going to solve a lot of problems later and then we just want to reset this is optional you can do it somewhere else but i'm going to reset the color here to be white so that's going to be my always fallback default color it's going to be pure white okay we have created the button and the button can now be drawn now here we want to basically create the three buttons for our game i'm going to create just one button for now and here we have our menu state button so we want to create it on here so in the load we are going to go here so here with the unload i'm going to create a button or go to our buttons say dot menu state and then i'm going to add a play game button now this play game button is just going to be a button which we need to import let me go here and just import the button and here we can just make that button cool now here we can make that equal to a button which we just imported from this file we have here make sure to export the button by saying return button and in here we can pass in our value so first it wants text so here we can just say play game because that's what it does it tells you to play the game i'm going to pass in nil nil because we do not have a function or a function parameter we want to pass in then i'm going to pass in let's say 50 and 50. we're going to position it nicely later so they're going to be the x and the y position of the button now down here where we draw the game and here it says game.state running we want to add an else if because i'll save the game dot state is not running but instead it is of menu and this should just be in square brackets not circular brackets so else if the game state is in menu state you want to go to buttons dot menu state dot play game and we want to say colon draw to call the draw function and now in here we want to specify a bunch of things so i wonder if yeah there we go so the button x position you can get 10 the button y position 20 and then we can just maybe say 10 and 20 like that just as an example now it's not going to give us anything great and was this really x and y what was this this was oh the width and height so it's going to be 50 with 50 height and then here it's just going to draw it at position 10 and 20 and then it takes is going to be at position 10 and 20 as well but not the same 10 or 20 as this button because we changed that and i'll show you that in a second because i know it's going to be confusing and take note this is still here this if statement because if the game state is not running we just want the circle to be smaller so this the circle should be smaller in this menu state and the circle should be smaller in this running state or it should be larger in this running state anyhow let's go here and here we go so we have a button not really the best it's looking kind of uh kind of small there so let's just make the button a bit bigger so i'm going to go here to the above where it's 50 50. allow me to maybe make it a bit longer so 120 and maybe a bit shorter or bit less tall so 40. ah now that does look much better okay and then here we have a play game and you'll notice it looks kind of weird now if i were to show you something interesting here so what do we have here we have the button x and y position so let's make this text x and y position uh five and five just so i can show you what's happening because this is a kind of part that may have been confusing to a lot of you as you can see here it's five from this left side and five from the top now if we go back to button here and we don't do this we just say okay just make them what is passed in that's all you have to do just make them what we pass in or actually no let's actually uh change this up so go like that and we uncomment these there we go so if we just did this i want to show what would have happened so we just said self.txtx and self.texty is what we pass in then you can't see it because the text is now five pixels from here and five pixels from the top not from the but the button width and height but from the top so that breaks a lot of things so we change the text color then instead so here it's zero zero zero zero we can just make it one one one one then because all these finger popups there we go one then you'll see it's right there now we don't want that right we don't want that that is why we have this right here this self.button x so even if you don't pass in anything it's going to be at the same location our button starts at so for example if i were to comment all of this back in again and i want to not pass in a text x or y which will run this then then it would look like this as you can see it's right there at the button but not at the game so that is why we did that we didn't want this to start here at the game we always wanted to start at the bottom x and y positions cool now let's make this maybe like a 1710 that should look good for right now yeah that looks perfectly fine later on we'll change the font a little bit to be a bit bigger and just match the button better but for now i think that's fine so yeah there's our first button play game let's create two more buttons and i'm going to just go here now this second button is optional because i'm not going to code it it's going to be your homework at some point so settings so it's going to be the settings button and then we want an exit game button and in this button we'll say settings and it's going to have the same width and height and in this button right here it will be exit game or just even exit if you want to and then the same with that and because all of them are the same width and height you could always make this the default width and height like here we redo this you can make it the default here that would actually be a good idea now we can code the exit button right now we can give it its function so love dot event dot quit because this will quit love so once the button is click it will run this code or we haven't really implemented that but that's what it should do take note all these are from the menu state because they will all be displayed once the menu state is true okay now we can go down here again and we can draw the game so let's go like this and let's draw settings and let's draw exit game and let's see how do they look what do we see like we just see x again because that's what's been drawn last so we can just make them all go down a bit we can leave the rest to be exactly the same so we can say 70 and here we can maybe like 120. and that looks fine to me at least so now we have a play game a setting and an exit game they don't do anything if you click on them but now we have that now we want to go back to the button because we need to make some function that will allow us to press the button to click the button so we're just going to check if it's been pressed and we'll do the press doing on the main in the main file so here we can just do something such as check pressed right and in this will be a function and here we can just put a comma cool now this will take in a self a mouse x position so where the mouse currently is the x position the mouse y position so where the mouse is currently at the y position and in the cursor radius so if we ever change the cursor size we don't have to worry about changing it here as well so cursor radius cool now here we can just create a basic if statement so if mouse of the exposure of the mouse plus the cursor radius is more or equal to self. button x so let me actually draw that because i think this will become a little bit more difficult to understand so let me just go like this so we are saying let me just make this a good uh easily seeable color on white so this is our cursor right and this is our button i'm going to say b for button now if i go here you'll see the mouse x position okay so the mouse x position and remember this is our mouse that right there is our mouse but remember our mouse if i can just make this red maybe our mouse is here in the center that is actually where our mouse is that's where the point of our cursor is you might have remembered from the first video where when we drew this you would have noticed the mouse cursor thing it's like that so that's her mouse right there now we go back here there we go we say if the mouse x okay so this is x remember so that's x and this is y so because remember this can make a y ish shape that's why this is y this is x so if the mouse x position uh let's go like that so this is the mouse x right so boom the mouse x position right there let's make that 32 for example right plus the cursor radius so this part right here this is the cursor radius because remember a circle not a good circle there a circle has a radius that right there that's the radius of a circle so take note that term is very important that's the radius it's only half of the circle so this right there so this x plus the radius and let's say this whole circle is 20 right so the radius would then be 10 because of the whole circle from here to here if that whole circle is 20 and the radius is half of the circle then it would be 10 that would be the radius so 32 plus 10 that's 42. so we're saying if 42 is more or equal to the button x position so let's say this button exposure which is obviously further than that circle so that would be this button x position which would be like this this is the button x position i should actually choose a different color at this point let's go maybe something like a bluish color i hope everyone can see that nope it's good like that okay so this is the button x the button x we can say is 62. this would then be false because here we're seeing if it's more or equal to more or equal to very important it's not more or equal to 62. it's 42 it's less than 62. so if we move our cursor so the cursor is let's say like this so you'll notice the end of the cursor is inside of the button this within remember that's the radius right and this is 32 and let's say i know this right here that part right there so from this point right here to this part right here is let's say 45 because remember it's not like a lot there so that's just 45 45 then we can just add the radius to it to get back to the middle that would be 10 so we can make that 55 right now we can add the radius again because we're at center or we could have just added this full 20 that would have worked well but we add the radius again we'll get 65 so remember this right here that's 45 this whole length here that's 45 because this is what number we made up at this point and then we add 20 to get the from this point of the circle to this point or two tens to get two radiuses because two radiuses makes one of the circle because the radius is half of the circle very important to know and then we get 65. 65 is more than 62. thus we are pressing the button we are now pressing the button that is what all of this math does if most of this math went over your head don't worry too much about it you can kind of figure it out on your own as you play with this but basically if a part of the circle no matter how big the apartment if a part of this circle we have goes over the button this right here that's the button then we should say it's clicked so that this is just for the ex right simple as that now we also need to do it the other way around so if we go back here and let's actually can we create a new no i don't know how to create a new one control n doesn't work okay that's fine let's say we have our this is our circle and it's our button so this button now we need to do the same thing but for if the circle does this so we need to do the same thing because we need to take note we should not press this button we should not be able to press it if our circle is here and the button is here or if our button is here and the circle is here we should only press the button when the circle is basically on the button a part of the circle should be on the button but if a part of the circle is not on the button no matter if it's to the left or to the right we should not click that button only if a part of that circle is on the button should we click the button and oh okay it did make more okay good to know good to know so now we need to do the same but the other way around so i'm going to just put that inside of brackets to make it easier to read and i'm going to say and start another pair of brackets and just paste that in here now we want to minus the cursor radius here and we want to say instead of more than or equal to we can say less than or equal to and i recommend if you kind of struggle viewing what we're doing right now if you're kind of struggling seeing what's happening draw it out drawing out math is probably the best thing you can do because that's what we just did and if that helped you to understand at least the first part then that means if you draw it out for yourself then you will be able to understand the second part as well and here we can just add with so plus with selfserve if that is now this self.with remember refers to the width of the button so let me actually draw this again to draw so here we're saying if the mouse x so here's the mouse and let's list this mouse x right right there that's where the mouse x is so let's say x is equal to 32. right if that is a less than or equal to this button x right so this button x right here it starts there that's where the button x starts right there plus the button width so it can even plus the button voice so this is where it's going to be this dot right there that side that corner if it is less than that and we're minusing the cursor radius because we want this point so if this point is less than this side right here then this x this x right there if it's less then we want to do something so if so let's make this blue so if this part right here is past this part so if it's more than this x location because remember x is just a position and this red part right here is below this red part right here then we want to call the button this can be very confusing and i myself got confused here but this math is very important to understand because in all future games this is how you can code a button anyhow so i hope you understood this part if you don't you can still follow along without any problem because believe me i'm also trash when it comes to math cool now we need to do the exact same thing or we want to do it for y so here we can just change mouse x to mouse y right and then we can do the same here button x but button y and instead of with we want to say height we still keep the cursor radius because remember it's just a circle meaning if we go from the center of that circle and we add the circle radius whether it be left right or up or down then we'll get the edge of that circle location on x or y axis depending on which we choose so it should still have the cursor radius so if it's more or equal to the self dot button y and mouse y minus cursor radius is less than or equal to self dot button y plus self dot x or sub height then and take note we're using height with y and width with x because with is left to right height is top to bottom just like how y is top to bottom and x is left to right that's why we use those two respectively okay there we can now we know the button is inside or the cursor is inside of the button we know that for a fact now so we can just start executing stuff so self dot func param so if the function parameter exists if one was passed in right then would you call sao they want to call self.funk and we'll do pass in self.funk parameter like that else we want to do the same thing but this time we just don't want to pass in a parameter so the parameter was not passed then we don't care about it and just like that we have implemented a press operation for our button all right that was quite a long one too we are almost at the end though so don't get discouraged just yet cool now i'm going to create a mouse pressed function so whenever the mouse is pressed now you can do that within draw with an update within load i'm going to create my own entire function for it which is possible with love 2d i didn't do this in the tutorial because i kind of wanted to keep it for this tutorial so if you didn't don't notice this from the tutorials i had don't worry i did skip it for a reason so you can just say function love dot mouse pressed and i find this to be a lot more powerful than the one we had in the tutorial meaning this x y button is touch presses so all of these gets passed in for us we get the x position of our cursor the y position of the cursor where the right button was clicked the left mouse button was clicked or the middle mouse button was clicked i think there's probably support for other mouse buttons like the ones you get on the side of some mouse and stuff like that i just don't know how to work with them and then we have is touch so basically is it a touch screen you know it's a touchscreen mobile support so it is touch and it presses so how many presses i believe so basically if they touched with their finger and here's how many times they touched or how many times they clicked or whatnot we are not going to implement touch screen support in this game because i think that's i don't know i just think that's something you could probably do if you wanted to but it's quite a lot of debugging especially if you didn't have a touchscreen yourself anyhow we're gonna just say if not game.state is running because remember we don't really want the mouse to be able to click anything if the game state is running the mouse buttons shouldn't do anything while the game is running then so if the game is not running then you're allowed to do anything in here because if button is equal to one meaning if we pressed the left mouse button so not the button that brings up this one but the other button the one if i click like this if we click this button then do something so if game.state so if it's the menu state we want to specifically use the menu buttons then go four index and we need a value and we're going to say buttons dot menu state so we're going to loop all of the buttons in the menu state that's why we created it here because we're going to look for all of this buttons inside here you check if they have been pressed that's why it's in the menu state only if it's the menu state this is also to save a little bit of performance we're going to say buttons dot menu state dot for that dot when you say position index so that should be dot so button stop menu state at this index so let's say the play game button for example and then we want to just say check pressed for that button and you want to pass in the x the y and the x and y is basically the cursor x and y that we're passing in and in the player dot radius and a player radius is coming from here there we go player radius which in this case is actually 20. so yeah that's the radius it's half of the whole circle anyhow so you pass that so it's going to check if any of those buttons were pressed so if i were to now run this and let's try x again because that's currently the only button that has anything implemented ah and we're actually getting everybody worked so button.loo at 17 okay button lua at 17 um attempt to perform algorithmic on field height angle value so let's see here height self dot height which is null value oh probably just spout it incorrectly there we go actually i think height might be spouting correctly i don't know i can't grammar for the life of me now let's try it again and it worked our game exited without any problem cool now let's quickly work on the start new game function and then we're done then we can then we can turn it off for today so i like to do that underneath i don't know actually i think i'll do it above load and maybe i'll even put this mouse press right here i'll put it above it as well why not and we can just do that boom okay now here i'm going to create a local function and i'm going to say start new game right and then it doesn't take in anything we can just say start new game then game dot state at menu whoops my man yeah at menu right then becomes false so we're setting the menu state equal to false and currently because we only have the menu and the running state we're not going to worry too much about other states but now we can set this running state equal to true because we're starting a new game so we should start running the game and in here we can also just create our first enemy as well so this part right here we can completely remove it and just move it up so now here we just boom like that now your start new game is pressed we're going to insert a new enemy into our game and we're going to set the menu state to false and then the running state to true okay now let's actually just implement that here so where it says nil we can say start new game without the parentheses take notice with other parentheses because otherwise it's just going to execute before it gets passed in and yeah then one last thing this is going to become more helpful later in the game but we can just say if game that state is running so the game state is running then we want to do this this is so the enemies don't try and keep chasing the player if the player is like in the menu or the game is paused or anything like that because believe me it's going to be very funny but the player isn't going to like that that they can still lose while in the menu or something like that anyhow so we just say they're only allowed to move if the player or if the game stays running cool now let's try and play game as you can see not only does our player grow but the enemies now start following us as well that's pretty neat so we did quite a lot in this tutorial well done if you're still following along so basically we created our first buttons we implemented touch folders buttons we implemented the drawing the buttons and then we implemented the actual functions of the buttons and that's that so let's actually start with the enemy let's actually try and improve the enemy so first off i would like us to actually now receive a level now level is basically going to allow us to say what level every enemy should be because we can have 10 enemies on the in the game like just coming at you but the problem is without the right leveling method those enemies will just be kind of the same thing will it be difficult or anything like that so what we can do is we can go here where it says level and instead of saying one we just make level equal to level and just in case we didn't pass in a level but usually you would be passing in a level but just in case we were not we can just say or let's say one and you could also if you want to make this underscore level instead of level to make it a bit easier to understand although i think this is perfectly fine you can even rename this to be lvl instead all right so that's all we're going to do here for now we will be getting back to this later but right now i think it's perfectly fine you probably want to know how we're going to kind of get the enemies and stuff to come in so i'm going to show you an example of what we will basically be doing so here i have basically what we're going to be doing so when we say play game we will have a little scoreboard here that is going to count and then once this scoreboard gets to a specific amount like 15 it's going to spawn another enemy with a higher level the higher the level the faster the enemy will be a good thing you might want to do is you might want to make every enemy a different color maybe randomly generated or something like that and once the enemy touches you the game ends we'll later on implement an end screen or a game over screen and whatnot but that's the basics of what we're going to implement so we need to implement some sort of point system all right so here instead of game we can actually implement it here so the amount of points we have we can make equal to zero at start you could also put this inside of the player here so then the amount of points the player has but you could also make the amount of points there currently is in the game so whichever floats your boat best and in here we could say levels and this will basically be whenever an enemy spawns you can either have set levels like i am doing now or you can have randomly generated levels or levels at every specific interval something like that but i'm going to just going to have four levels five include the very first level and these levels will basically just be 15 30 60 120 so if you have these points so 15 30 60 and 120 like that so if the player has 15 points then a new enemy will spawn if there are 30 points then a third enemy will spawn because you have the first enemy which is from zero to 14. they have a second enemy from 15 to 29 a third enemy from 30 to 59 and in the fourth enemy from 60 to 119 and then the last enemy at level 120 and above so let's implement the points so here with new game we can just say game dot points is equal to zero so this is basically whenever we start a new game we're going to set the points to zero and now with this enemies here we actually want to do something but different we want to go enemies so we want to create an entirely new enemies table so we're going to clear the previous enemies table and we can just say enemy and then at level one like that that means we can remove that line there because we have our enemy here this will be the very first enemy at level one you can do it like this or you can have it split up into multiple lines so right here where we do the love dot update inside of the game state or inside of the if game state is running this part right here we want to just say game dot points is equal to game dot points plus dt so this will basically increase the points constantly but with dt so 0.016 or 0.032 however so basically about every second you'll get one point now when we go down to draw we can find a way to actually display this to the user so here and if game state is running we can actually put it just above enemies so the enemies can move over it but you can put it below enemies as well we can say love dot graphics dot print if and this will print text to the screen i'm gonna say math.floor game dot points and this will display the game points but to the lowest value so if we have 3.14 it will display three if we have 3.5 it will display three if we have 29.99 it will display 29. so it's basically like math.round but just always downwards and never upwards we can then specify a font because with love graphics print you might notice we need to specify a font so let's just say love dot let's just copy this now we want it to be bigger than something like that fps because it has to attract more attention than the fps so we can make this about 24 instead of 16. in here we can basically put our location so 0 10 and then we can tell it how long to spend so love dot graphics dot get with and then we can also just specify center so all of this does a lot but basically you can think of it as displaying the text at the center of the screen i'll show you how this looks in a second so let's actually try to run this and see if it works so love dot alright we say play game and here it does so it's here at the center of the screen near the top and yeah it just counts about every second i believe this zero here is the x if we were to make this something like 90 and we run it then you'll notice it's a bit more to the right so the 0 is basically the x and this 10 is basically the y cool and then this here just specifically wanted to be basically aligned to the center nice now before we get to the enemy i would like to implement a better way to change the game state because currently the way we change the game state we have to constantly go around and we have to change a bunch of things manually which isn't what we want we want to make it as simple as possible so in the future when we return we never forget about something we might have to change if we change this value here we or if we added this here all right so let's say local and we create a function we can call it change game state i can take in state and here we can say game dot state menu so the game state is menu or we actually just make it state is equal to menu so we basically say make game state menu so true or false if the state passed in is equal to menu so if we pass in menu here it's going to make this value here that and we can do the same for all four of our current states so paused and here we can say running and here we can say and then we say ended so we never have to worry about changing another game state because here it will automatically make things true and false as we want it so for example here where we do this instead of having to sit two three four five states here we just call change game state like this and we want to set it to running like that and that will just make our life so much easier since now whenever we change the game state we don't have to everywhere we want to change it we don't have to constantly basically be doing this because now we have a function let's make sure this works so if i press play game it should start the running state and it does alright so next up we should maybe work on getting if the enemy has touched the player if the enemy has touched the player the game should end because the player has lost because that's the point of the game so what we can do is we can go here to enemy.lua and we can implement a new function check touched now this check touched will contain a function and this function will take itself player x player y so the player x and y position and then also the cursor radius like that and i did explain a lot of this in the previous tutorials i do recommend you go watch that if you have not where i do explain a lot of collision detection math there as well so now we just basically need to detect if the enemy is anywhere near the player this is going to be some some interesting math here so just bear with me for a second math dot square root so is qrt for square root and i'm going to create two brackets here so i don't get confused with mathematical operations and so lua knows what to do first self dot x so basically the enemy current x position minus player underscore x so the player current x position to the power of two and i'll explain this in a second you can say plus and then another pair of brackets self dot y plus i mean minus player underscore y and we just say times or to the power of two less or equal to cursor radius times two so basically this math here will check if the player is inside of the enemy so this is basically like the previous one just kind of in one line to make it easier for us you could split this up into multiple lines again very similar to what we did here inside of the button check pressed you could make it very similar to this not exactly like this because you know one is a square the other is a circle but in hint here both of them are circles but this will basically in the sense of our agreement drawing up here it will do this so this is the enemy this is the player whoa now in this scenario so this is the game scenario it would be false now our math will basically check this this is the enemy this is the player and that will return true so it will just basically check if the enemy or the player is touching each other because if so then they are colliding meaning the player has lost so yeah if you want to know more about this map i do recommend you do go maybe refresh up on some mathematical things you can do with circles because this is one of the things that works with that alright so once you have that you have your collision detection now with your collision detection we can finally do some coding to actually see it do something so let's go here to the running state right here so instead of this for loop we're going to increase a few things here to increase the amount of lines so right here we can say if not enemies at index i and we're getting this right here if not enemies at index i check touched this check touched will just basically execute this math right here to check if the player is inside of the enemy then once you have this you can just say player dot x player dot y player dot radius because this check touched needs three things player x player y and then the cursor radius which are all provided here this will check if it is touched so while it is not touch as you can see there because that has a knot so this will check if it's not true so if this does not call true if it's not being touched then and in here all of our things will happen let's first code the else because this is a quick one it's just change game state to menu later on this will change the game state to end it and what not but we don't really have anything for those states so currently it will just change the state back to menu and see this is why this change state is so useful because now we just call this and it will do all of the other background stuff for us now this enemies don't move here or his enemy move we can move it there so the enemy can move so we can now say for i is equal to one in game dot levels do so we're saying for i becomes one in game with levels you could call this something else even if you wanted to because we have an i here so you might want to call this something like j or k or some other value any game that labels and game the levels is right up here so it's 15 30 60 20. so we're saying for i equals one through that we can go if math.floor it again this is to make sure we round down game dot dot point and this is the points we have scored up until this point if you can remember and we can say if that is equal to game.levels at index i then we want to say table dot insert and enemies one and then enemy and game dot difficulty times i plus one so what are we doing here we're basically saying insert into the enemies table at position one an enemy that has the game the difficulty so the game difficulty is basically being set up here so it's one so in this case it's just going to be one but if you want to increase the gain difficulty then you can times in this case is going to be one plus one which is two but if this was the but if this i increases this would be two plus one which is three and this will basically increase the enemy difficulty or the enemy level aspects go on we did implement the leveling thing with the enemy in the previous vid i think it's actually in the two videos again not the previous video so let's see here at least a search level yeah there we go so self.level in the move so we did implement working with level so we didn't have to mess with that now because we did it before and then this is both to avoid bugs and you kind of tell the player you have done this we give the player one bonus point so game dot points is equal to game dot points plus one so we gave them one bonus point as well as trying to avoid a bug because otherwise this for loop is going to run multiple times because dt is going to take a while before it goes one full point because it's like 0.016 or 0.032 so yeah we have to be careful with that so we give it one extra point so you can also break out of the loop there are also other ways to deal with it but this is the easiest way i find to go around it now once you have that you can just save your game over your code and let's see if it works play game okay here is the first enemy we wait until we get to 15 to see for the second enemy and here we go so now there are two enemies if we are willing to wait to 30 we should see a third enemy that is even faster yeah as you can see there and once one of them touches us we just go back to our main menu and yeah that is it for this tutorial we just implemented basic a basic point system and we implemented the basics of adding more enemies let's start with fixing something up first currently we don't use fonts very nicely because if we want a set font that we might want to use over a large amount of spaces this isn't going to work that well because we have to basically come back here copy and paste or remember this number that is why i think it would be best to create another table and this table we can say it's called local fonts now local fonts will just contain a few fonts for us so medium and this would be of course a medium sized font i'm not going to have small or extra small fonts i'm just going to go medium large and massive because these are the different sizes that i'm going to use nothing is going to be really small and i'm saying medium because the size of medium is going to be 16 and if you're a web developer you know the default font size is basically 16 pixels anyhow so we can say font is equal to and i'm going to copy this font because it's basically just going to be this right here so i'm going to paste that there and then i'm going to say size is equal to 16. we won't you really use this part too much but it's more for future reference because sometimes you want to access the size of the font and not just the font so it would be good to include the size so if you ever want to know like the font size like let's say you're in settings and you want to increase or decrease the font size then the player can maybe choose between large medium and small and you can tell them the font size is 16 and then it's 24 and then 60 or what not cool so that's just for future reference mostly it's not per se you're going to use or not to say it's going you're going to use it now i'm going to have two more fonts here one called large and in one called massive so large will be instead of 16 24 and massive would be instead of 16 it will be 6t like that so now we have a fonts table so first let's go down here to where we draw because this is mostly where we're going to use the fonts now we will we want to set the font to its default whenever we draw this is mostly just because if we do set a font somewhere then that font won't just stay there the whole time and you'll notice when we get to the endgame state that this right here will become quite important so love dot graphics dot set font so we're going to set a default font for every iteration and it's going to be fonts dot medium dot font so we're basically saying add from fonts medium and then for medium we add font and font is just this right here that's basically the medium font in fact we can copy this and we can paste it right here boom now it's fonts medium font so whenever you draw this this will be the medium size this right here this would be the same but instead of medium it would be large so this will be a large font all right and that's currently all the fonts we really have if we run the game we should not be seeing any difference really so as you can see phones still look the same if we say play game that's still the same size and that's still the same size cool now i think it's time we start working on the end screen the game over screen so we'll need to create the buttons for this screen so here with this state right here this buttons we can go here where it says menu state and we can make it ended you can make this game over or whatever you want to call it i'm going to call it ended state so now we can have game over buttons now we can go to love.load right here and we can copy and paste this like that and instead of menu state we can turn that into entered state now the first one is replay so if you want to replay the game so replay game the second one is the menu button if you want to go to the menu so we can say menu and the third is exit game exit game will contain all of the normal values so love it ain't quit and just exit game this will contain menu and here we want to pass in change game state and the state we want to change it to is menu now taking it change game state was declared right here where it just changes the state to whatever is passed in and then of course you want our replay so right here replay for replay game yeah we're gonna make it full replay game and in here we can just say start new game now currently we didn't actually ever see the ended state so we'll need to go here to update and we'll need to change this to ended so from menu to ended this will instead of making it go back to the menu state where we see the menu it will make it go back to the game ended state or the game overstate and we can see the game over screen then we can go down and we can copy this else if c and like that now this else if will be instead of menu it will contain ended cool now i'm going to go love or let's just copy this here love that graphics.setfont because for the ended state we want to set the font to be something a bit bigger so fonts dot large and this will make the fonts a bit bigger this will allow us to basically everywhere within the game while it's in this state just increase everything with size then here we can go back up here and we just copy these three names here and we go back down and we can paste them here and then here we can just make menu ended so let's see what we can see so when we run the game what do we see okay so we see this it doesn't look great we can definitely make it a bit better for example instead of having it here at the side i think it would be better if we had it here in the center and we of course have to resize it a bit just make everything look a bit better so first let's try to center everything because i think that would look best so here everywhere where i say love that gra or where i say 10 we can say love dot graphics dot get with and we can divide it by 2.25 and this is a very specific value here this value was actually calculated while trying to find the perfect way to center our buttons because currently we can set the button x and the button y and this process right here allows us to make the button more centered if you have a different aspect ratio for your game so if i just quickly run this if your game wasn't this aspect ratio which i think is four by three or it's it just actually looks like a square it might be one by one but if it wasn't the same aspect ratio the same size then you will have to change these values here or you might have to it's not maybe you won't have to maybe you're lucky anyhow and in here where we say 20 70 and 120 we can say love dot graph graphics dot get height because this will be the y position we can then just divide that by one point eight but that's only for the first one for the second one we will want to make that 1.53 because remember unlike with x here where basically all of them will just move here oh they will now move top to bottom so if you make this the same they will all be at the same y position and if you're all on the same y position they're going to be stacked on top of each other you can play with this a little bit if you want to to see what the difference would be if you didn't add that and stuff like that and here you can say 1.33 cool then for the last two ones which will be the text positions we can specify 10 10 and then here we can just keep that 17 10 and then here we can change that to 22 10. this is quite a lot of changes so let's first see what we have because currently we did a lot of things so let's see how does our things look all right so that's already relatively close to the center the reason why it's further down to the bottom than what it is from the side is because we want to put our score here in the complete center so this will be below the score that is why it does this and the buttons work so if we go to menu or they don't because we haven't implemented clicking yet so never mind that all right so let's do the points let's quickly draw that before we continue to the button so love dot graphics dot print f and we can say math dot floor game dot points so we're going to put the game points for everyone to see we can say fonts dot massive dot font because we want it to be massive we're going to set this to zero then love dot graphics dot get height and we want to divide that by two because it's going to be kind of halfway and then we also want to minus the font size because remember it's basically going to look like this if i can open up my drawing application it's going to look like this so this is our font right but you have to remember so let's say that is the zero character you have to remember fonts are actually inside of squares just like images so this is actually how the font looks somewhat similar to this so when we do that we're basically saying this now we have to minus the font size specifically because the font still goes down so if we minus the font size it will go from here but up until let's say this point here because that would be the half of this font if we were to circle it like that or something this might be a little bit confusing to understand so let me actually show you so instead of minusing it we'll keep it like this for now and then we can say love.graphics dot to get with to say where it should bend and then we can just specify it should be in the center right once we have that we can do this play game and as you can see the one is right there and if you want this to be a bit more up we'll have to minus the font size so minus fonts dot massive fonts dot massive dot size not the font but the size this time because we want to minus it by 60. now if we were to run this boom r2 is nice above the buttons now what i would like to do is i would like to go up here a bit to where we were here and i like to change all of these 120s to 100 instead and in this 40s to 50s and let me show you why because now look actually a bit bitter so if we could just go like this as you can see it just looks a bit better and i don't think this end game looks that great and i don't really want the buttons to be too long and i want them to all be the same length so instead of exit game they'd rather say quit because quit won't be that long so quit and actually while we're at it let's make this instead of a replay game we make it replay instead and this will make everything nice and short so when we get to the game over screen everything fits into the buttons nicely all right and that is actually just perfect next up we need to make the buttons able to be pressed because currently the buttons have nothing to check if they're being pressed so here where we say if the game status menu we can say else if and then we can do the same thing here where we say menu as the menu we say ended and in here we can just specify this but this time instead of saying menu state we can say ended state and everything else can stay the same you could even maybe create a function that will replace this for you so you don't have to do this every time anyhow if we were to now run the game our buttons will work so if i were to end the game here say replay we can replay the game if i say menu we go back to the menu and then if i were to say quit we exit the game and that is basically all for this tutorial you will notice that the game is not quite finished yet there's quite a lot of things you can still do here and i believe the best way to learn is to do it yourself i am going to bring out another course which will cover some of the topics i'm going to give as homework so if you can't figure it out at all once you watch that tutorial you should be able to get a sense of how to do it so let's first start with what we need first of all you'll notice if archie just moved this to the side a little bit we have a paused state here but we did not implement that paused state implementing a post state is incredibly simple and i will be doing that in the next tutorial as well but currently we don't have that paused state i want you to try and implement that paused state it's very very simple and it's probably easier than you think it is next up is the settings page we have a settings button but currently all it does is say say this button has no function attached this is a bit more complex and there's a lot of ways you can implement the settings button i want you to try and do it first in the next tutorial is going to be your homework again but i'm going to give you a kind of an example a sort of hey you can do this so you can try and do it here and i recommend you do because it's quite a challenge and if you do it right then you have a perfect settings menu otherwise you can wait till the next tutorial where i will give you a little bit of a push towards the right direction i'm not going to implement an entire settings page but i will show you kind of a way to get started with it and next up is make the enemies more different currently the enemies are quite boring they're all circles they're all pink and that's it there's nothing special about any of these enemies in the next course i will show you a basic way of how to make your enemies more different so stay tuned for that if you do want to get the answers to this as well but changing these enemies up to be a bit more different like maybe making them instead of circles make them squares that could be a great idea maybe start a scoreboard as well so let's say you can have a high score and then you can compete to beat your current high score i'm going to show you how to do this in the next course as well but i would like you to try and implement this here as well because it can be quite difficult ooh that's a fast one it can be quite difficult to do so i would recommend you try and do it on your own first and hello everyone if you're enjoying this tutorial please leave a like and subscribe for future tutorials so in this tutorial we will be making a pretty cool game the game's name is asteroids so here's an example it's a little big let me just turn down the sound so everyone can hear me so here we basically have a new game settings and a quit option and we can say new game you can start a game it has faded fading text it has a working high score it has a score and it has lives you can shoot things and you can go to the next level and then there will be more difficult times ahead you can crash and then you'll lose a life you can shoot things now this may look incredibly simple but it is pretty complex with a lot of things working inside of it let me just go out of invincibility mode and there we go then when it's game over you have a fading game over screen and if you have a high near high score it will save that high score and then boom here you go so that is what we will be working on in this tutorial for future reference if you ever do fall behind you can go to get up and the link will also be in the description but you can go to github webnet to youtube project and then in here and go to lua and then the live 2d folder inside of the love2d folder you will have an asteroid game folder and in here you'll have all of the tutorials and you'll have some homework if you want to do it now what do you need in a in order to start with this tutorial because some of you might be completely new first you need to know lua if we go to our crash course and research it on youtube then here at the top is my crash course steve's teacher full lua programming crash course you will need to follow this course if you want to follow along of course not all of the topics are necessary but a lot of these topics are very handy to know about and once you know this it will be very smart of you to know a little bit about love2d so love2d right here and here we go now i recommend you know at least this one this one and this one and then i would also recommend you follow the previous tutorial gamedev tutorial where we created the save the ball game this tutorial covers some really basic items from love2d and if you follow the tutorial then this tutorial that we're going to do now will be a lot easier to follow along first we need to create a folder for our things so i'm going to go to documents going to go to my trash and then i'm going to create a new folder and call it asteroids i don't know if how to spell asteroids but i hope that's correct cool inside of this folder and you don't necessarily have to do in your trash folder i just have a trash folder for tutorials and inside of this folder right here you can create a new file and you can call it main.lua now once you have created a file you can open up vs code in here i wonder can i open up i can't open up from here anyhow i can go here to my terminal but you will probably have an option to go here and just right click and say open in vs code or whatever code editor you use we can then just say code blue code to open up vs code here and you should see something similar to this we can close this folder here because we won't need it now take note you do need love to the installed and lua so if you don't have those to install i do have a tutorial at least on how to install lua then here we have our main.lua if you also use vs code you can get the love to the extension right here and you can also get the lua extension right here and you also debug if you want but this isn't necessary it will probably auto download anyways anyhow now that you have that everything is ready to go let's just set up a basic project i think for today we don't have to go all out so just local love is equal to require love this is an optional step you don't have to do this but it is optional then we can create a function and call it love.load and it's just a basic love2td setup i mean can create two more functions for update i almost said delete here but this should be a draw now since we're starting off very basic we're not going to do a lot we only want to get everything up and running and maybe make sure everything works if i were to run this by saying lab dot and you can also use the vs code inbuilt terminal by going to terminal new terminal and then you will have the same thing as what i have you can just say love dot here as well this is the same thing as what you just saw here i just like this one more because it looks cooler and then you'll see this pretty neat we can then create a new file by clicking on this file icon here and we can call it conf dot lua and here we can just say local love is equal to require love yet again optional you don't have to import love now you can say function love.conf to set up the config file pass in the app we can say app.window.with and you can make it any width you want but i am going to make it equal to 128 128 no 1280 or 1280 and as for the height app.window.height is equal to 720. for some of you this might be too big so just for reference this is a 16 by nine aspect ratio we're working with as long as you work with the same ratio you don't have to change too much for example at 1080p resolution this is 720p but 1080p would be 1920 in width and then 1080 in height as an example this would be bigger of course if you want to go smaller it should probably probably be around 480p but you can google a 16x9 aspect ratio smaller than this and of course we want to set the title app.window.title is equal to asteroids and then lastly we want to say app dot window dot display equal to now take note not all of you will benefit from this display i'm using here i have two monitors the one on my left which you cannot see and then the one on my right which you can see however i don't want the window to spawn on my left monitor which is probably display one i wanted to display on this monitor so let's see does everything work and it does it's big boy and it has the asteroids title and it spawns on this monitor so this one here is optional these are also optional but i recommend using them because why not as for the window width and height i recommend 16x9 smaller size if you want but if you don't want to change the window height and width then you don't have to first thing i want to do is i want to hide my mouse so when i'm here the mouse should be gone and that's pretty simple to do that we can go here and say love dot mouse dot set visible and we can just go false and this will set the mouse visibility to false now for future reference we are going to do that in this tutorial but it will be smart to set our mouse x mouse y equal to zero or whatever you want to here so these will be two global variables containing the mouse x and y positions this is for a future reference so you don't have to put it here now but i do recommend you do because then we don't have to worry about it and then next up here in the update we also want to set the mouse x and y so i will actually just copy this paste it here and then here we can go love dot mouse dot get position and this will return the x and the y position of the mouse both of these are global scope so if you wanted to you can go underscore g dot and that would be allowed but for me here i'm just going to say quick fix and if you're in v is good you can choose one of these and i'll just go here disable diagnostics for lowercase in this file or even in this workspace could work but i'll go file and it will add this where it doesn't show that errors underneath these and then last but not least before we continue i would like to set the show debugging equal to true and this will basically say if you want to see debugging items right now we're not going to use it but we will later if we run this you can see i can no longer see my mouse but if i move outside of the screen you see here there's my mouse but if i go in it's gone that is what we wanted cool now we can create the player to do that we can go here and create a new file called player dot lua i'm using a capital case p just because i believe objects or at least other files should use capital case p unless it's the main files the core file is going to be used by lua i like the conf or the main cool now the player here will be an object if you don't know how to work with objects in lua i do recommend you go watch my objects tutorial i have on this now you can go local love eagles require and then love and if you want to you can copy this and you can put it in here take note that this diagnostics only works if you're in vs code if you're in a different ide slash code editor then this may not work now we can create a function call it player and player will take in whether the player is busy being debugged so debugging so if we're debugging the player then we want to see some extra information and then at the end of the file we can say return player nice now some variables you might want to set at the start will be the ship size these will be constant variables that will never be changed so they are capital case and we won't want to access them outside of this file so we're not putting them inside of the return we can make this equal to 30. you can change this but this will basically determine the ship size because this would be from the left side of the ship to the right side of the ship then we can go local view angle is equal to math dot red 90. to get an example of what this does because it transforms degrees into radians because we want to use radians and not degrees so to understand what we'll get here we can go here and say lua and then say math dot rad and then 90 and that will give us 1.57 radians so yeah we're going to use radians not degrees just keep that as note so this would be 1.57 radians and it's all to do with math stuff so don't worry too much about it then here we can say debugging is equal to debugging or false so if we do not pass in the debugging argument then by default it will be false that's what we are saying here now return is what we want to get back what we want to be able to access within this whole thing here so x will be the player x position which is love dot graphics dot get with divided by two so we want the player to be positioned in the center of the screen once the game starts so that's what we're doing here we can then do the same for y and then while instead of get with would be get height so now the player will be positioned in the center of the screen then the radius of the player and this will kind of be like the hitbox of the player so the circle around the player if that circle is hit what happens anyhow so the radius will be the ship size divided by two and then the angle would be equal to vu angle so the angle by default will be 90 degrees meaning the player will be facing upwards how do i know that because the player will be a triangle if you've seen the demo of the game in the first tutorial i showed you that the player itself will be a triangle and moves around and if the angle of the triangle is 90 in terms of degrees and the radians 1.57 then it will point upwards cool then rotation will be equal to zero so this is if the player has been rotated then thrusting will be equal to false if the player is frosting that means we want to move because he's frosting is blasting out fire and stuff which we won't could in this tutorial but we will code later and then the thrust itself will be equal to the x 0 and then the y zero and i'll explain what all this means later once we get to it and then this speed zero cool now this currently won't do anything so let's draw the player to the screen so underneath this thrust we can just create a function called draw this will be a function that takes itself and then here we go now local opacity is for future reference but basically this will determine how visible the player is to the screen so if it plays on the screen can we see the player or not next up we want to say love dot graphics dot set color and then one one one and this means white and we pass in the opacity which is also one so it means it's completely visible to draw the player we can say love dot graphics dot polygon and in here we can type in a lot of things that will draw the player first of all we want to draw the player as a line not just something that's being filled in so you can say line so it's going to draw lines then we want at least two items to draw that line so let's go self.x plus and this will be a little bit of math so bear with me and we have four divided by three and note i'm using two brackets here this is just for me to know okay i want to do the division first the computer will know let's do division first but i want to know as well let's do division first because when it comes to math operations and when to execute them i am still a little bit junky on that and you can say times self dot radius take note that this is not inside of these brackets instead of this brackets but not inside of these brackets because you want to execute this first so four divided by two and i think that should be three and i'm going to explain this in a second and then times the radius and then once that has completed we want to times that by math dot cos self dot angle now the 4 divided by three is mainly to find the center of the triangle next up here we can say self dot y so we can copy that line say self.y keep everything the same and in here instead of saying because we say sin because we want to go the other way so let's create the player and hope for the best so then here we can say local player capital p is equal to require player and it should also be a capital p because the foul has a capital p then down here in the loading section we can say player lowercase p is equal to capital case p player if you don't understand what i'm doing i recommend you to go watch my course on oop in lua and then we can also pass and show debucking so this will create this little object of player that we can use and get data from now here we want to just see the players so let me just draw player colon draw how can i use this because right here we export the draw function it's inside of return and then it should draw the player for us now if we were to run this do we get no we don't it needs at least three vertices to draw a polygon oof okay so we'll have to do the whole thing unfortunately but okay not a problem so since this is a lot of typing i'm just going to paste this here and then i'll walk you through it so basically here we have what we just coded and in here we say self.x minus the radius right times 2 divided by 3 times math cos south angle so first we're going to times this because pod mass if you want to make sure of that you can do that anyway so we'll first times these and then we'll add this to it and it's going to be the same all the way around for x and y the only things that change is when sin and cos is being used and yet again i didn't quite understand this math it was a 1am thing so just excuse me if i didn't quite know how to explain this but you can play around with it if you want to understand it more i don't really want to understand it more because it breaks my brain not understanding it so scared of understanding it anyways if we try to run it now ah here we go does it quite look like the player let's see what went wrong oh you know what went wrong here we should minus it my bad now if we run this we'll get a triangle cool if you want to actually test it out for yourself and see how it looks what you could do is you could run lua and then open up a drawing application okay now there is our x position under y so x would be side to side as you know and y would be up and down as you also know to remember this you can remember y has like this little finger goes like that and you can add arrows here to specify up and down that's how i remember which one is x and which is why anyhow so there's our center then what we can do is let me just do that so first we get our self.x and let's say x itself is equal to what is it let's make it 20 or 200 because that would be more realistic so 200 plus and since we know this isn't going to execute yet let's first go four divided by three four divided by three that's one point three three three so one point three three four three times and then the radius as we already know is let's see here ship size that's with 15 because ship size divided by two so the radius would be 15 so times 15. so this right here is basically 20. so that's 20. then we times this with math cost and then the angle and this is why we used radians right here and not degrees because if this was 90 degrees then this would be way off so we are using a radiance to give it a much smaller value to work with because 90 would be pretty big compared to one point something anyhow so then we can say dot cos and in here we can specify the angle and the angle as we know is math.rad19 so math.red 90 like that okay so we got our values now we have to times these two together so 19.9999 times six point one two three two three three nine i believe that will give us this right here and then we can add our self.x which would be 200 so this value right here plus 200. now that we have that we can see where the next dot will be drawn on the xaxis so here we have our x and this right here that's 200 to the x so that's 200. now the next one would be 322. so that would be even further beyond so that would be like here or something and not not downwards it just exports a like it would be like here or something there and this is where this one is and you can just imagine that these two or 120 pixels from each other now with the y it will position this one downwards so you can use this to kind of figure out where everything goes if you were to do the math like this this is at least how i can understand math so if i want to spend the time this is how i would understand it so we can draw the player that is good progress we can't do anything yet but we can draw the player nice now we still have a debugging option so let's quickly implement that so right underneath opacity we can say if debugging then and here we can say love dot graphics dot set color and you can make this any color that is not white or black so one zero zero because black is the background and white is the color of the shape so making it a different color will make it easier to see so in this case i'm making it red and then love dot graphics the rectangle and we want to actually see the center of the ship this will just help for debugging for when we try and move the ship and the ship maybe doesn't move but the center moves or something like that and here you can just say fill and then self dot x minus one self dot y minus one two two so this positions it's in the center and i'll show you in a second what this means so if we do this and you see we have a little red dot in the center of our ship the reason i said 1 for the x and the y position was because if i didn't we'll be getting this and as you can see it's a little bit off from the center and we don't want that and the reason for that is just because of how we draw so we add minus one to avoid that and then the two two is just the size so if you were to change this to 4 for example then now we'll get a bigger circle and i will have to change it more to the side because of the size here so this will now have to become 2 minus 2. so the more you increase the size the more you have to move it back because you have to remember if i were to open my drawing up again if we have a square square like that this is the x position of the square right here so right there that's the x position of the square and we are drawing a rectangle inside of the player so we need to minus this to the x and minus to the y to bring this to the center of this square if you understand what that means anyhow so let's just change back to one into two and next i want to draw the collision of the player so when we try and collide with other things we can see where the collision would affect each other so love dot graphics dot circle and here we can say line self dot x self dot y we can say sound that x and self.y because the x and y of a circle is in the center of a circle and not at this side of the circle and itself.radius so the radius of the ship itself if we run this we get a circle around the ship now this circle right here is basically the collision so if anything touches that circle it's touching the player you might think this is pretty basic and it is moving things and it isn't quite accurate but believe me this does decrease the amount of math we have to do and you'll thank me for this later all right now whenever you don't want to see that you can just turn off the debugging by passing in false here cool now let's move the player because currently the player isn't moving at all and we can't move the player even if you wanted to so let's create a function and we can call the function move player or just move both will work perfectly fine we can then say function that takes in self and then local fps so this will get the fps of the game so this isn't the best way to say how fast the player should be moving and we could possibly change this in the future to be a better way but for right now saying the fps will be the easiest way so you can say love dot timer dot get fps and we're gonna scroll it down and then we want to set the friction and the friction will just basically say how fast the player should stop moving so let's go here and say local friction i will play around with this because it's pretty simple is equal to 0.7 now we need to set the rotation speed of the player now i want the player to be able to turn a full 360 degrees so completely around within a second to accomplish this we can say self dot rotation is equal to 360 divided by 180 times math dot pi divided by fps so first yeah there we go so first it will execute this and it will get the value of this so lua 360 divided by 1080 that's two then it will divide these two so math.pi divided by fps so pi and we can assume we'll be getting 60 fps so that's 0.052 so that's 2 times 0.0523 five like that and that should be at times the symbol not an end and they will get this value right here now this value right here is basically how much the player will turn every second cool now let's actually use that because i think it would be easier to understand if we use it i didn't worry too much there wouldn't be that much math in this course it's just the first one has quite a lot of math because of because we're using a triangle and whatnot so you don't have to worry too much about the math we want to basically say when the player should be turning left and right so to do that we can go here and do a quick fix to that and say love dot keyboard dot is down and we want the player to turn left whenever they click on the a button and you don't have to add these extras but i like to add options and you can say or if they press the lift button on their keyboard so that's like the left arrow on your keyboard or if they press the kp six and that's the numpad number c and that shouldn't be six actually before so that's numpad number four so if they're only like the numpad they press four then the player will also go so now they have a lot of options to choose from you don't have to add this mini i just like to and you can say self dot angle is equal to self dot angle plus rotation so every time this runs it will add this to the rotation so it will add 0.1047 to the root to this right here that should be south to the angle so the angle will change every time and as we know the angle is in radians so we need a small value which we got here as you can see here we got 0.147 and we add that to this and you'll see it working in action in a second again copy this and we can then go here and say d if they want to go right and then write for the right arrow key and then kp six if they want to go right and then this one will of course be minus cool let's test this out so if i were to run this and of course we didn't do anything yet because we had to go here into the main file and we have to say player moves right here player move so it should execute this every time this update runs which is like a lot 60 times a second in fact run this you'll notice i can now rotate so that's pretty cool and it takes me a full second to do a full rotation now of course if your fps fluctuates like you have 30 fps then the player might actually rotate faster than a second so that's why they like using the fps but for right now that's the easy way out and we don't really use dt at the moment but we can later nice now let's add a movement so the player can move up and down now we're not going to add the keyboard bindings for this in here we're going to do it out here the reason for that is because we will be using that for more than just the player anyhow so then we can go if self dot thrusting and we set that up here it's just true or false so if the player is moving or if the player is trying to move if they press w the frost will be true then and here we want to start moving the player so self dot thrust dot x and this thrust dot x is set here is equal to itself whoa and then we can go plus self dot thrust dot speed and we get the speed from here which is zero and it shouldn't be zero and i don't think about it it should be five you know you should give it at least some speed so the faster you make this the faster the player will move so the higher this is the faster the player will move and here we can say times math.cos self and this is just to kind of nerf the speed and we can actually remove this in a second and then divided by f ps and then we can copy that again and this time for y and then we still everything the same but here we can go minus and then we do syn and there now currently won't do anything so let's try to implement that so right here between the load and update we can say function love dot key pressed and we can say key and this will allow us to add a key press then we can say if the key is equal to w or and now we can add a bunch of extra options yet again you only need to add one i just like to give choice and here we have three options one that will be the up arrow on the keyboard and then kp8 for eight on the numpad if it's one of those three then player dot frosting equals true so it will make the player frost and if we play it we don't really get anything and the reason for that is because we're not applying this thrust because you we should apply this for us to x position so self dot x is equal to itself plus self dot thrust dot x so you should apply the x amount of thrust to this so let's just copy that and do the same for y now if we run this as you can see he moves but he just kind of moves out of the screen first of all and as you can see also just constantly speeds up that is because frosting is always on now it'll be even worse if we were to remove this right here is that nerfs it a lot so let's go here and now if we were to run this as you can see he moves up super fast and even optionally in the wrong direction but yeah so this just nurse it to be slower and moves to the correct direction all right and you can play around with that next up we need to be able to slow down the player so else then we can go if and you could make this an else if if you wanted to but i like to just go outside in if inside of it self dot self dot thrust dot x if that is not equal to zero so the first x is still running and the same with the y so or because if the first x and y is not zero that means frosting is still continuing and we're going to go here also not zero and that should be y then we should decrease it until it becomes zero so self dot thrust dot x is equal to self dot thrust dot x minus friction times self dot thrust dot x so the higher this friction we sit here as you can see there the faster the player will stop and of course divided by fps and we can do the same for y cool now let's implement that because currently when we press the key we set the frost to true but it doesn't do anything after we set the key we should actually tell it to stop frosting at some point so let's go here so if the key instead of pressed we can go key release and this means once this key is no longer being pressed or being held in we want to turn this to false cool now i can run this let's see and as you can see it moves much slower and he actually stops so if i go like that it will stop at some point now just to give you an example if we were to go here to friction and up that to let's say 1.7 and then go as you can see he stops a lot faster so the player now just almost immediately stops because the friction is so high if you want to do the real space game you can make the friction something like zero now it will always just move forward and this is how asteroid actually is the player never actually stops so this friction just says how fast the player should stop moving 0.7 i found to be a fairly decent value it's not too fast and it's not too slow but any around anywhere around that will work cool the last things we need to do is we want to reset the color so if any color changes happen we want to reset it so love dot graphics dot set color and then one one one one so it's all visible and it's all white and then of course we want to actually just for debugging purposes show the fps so love dot graphics dot print love dot timer get fps and then 10 10 so it will print the fps right here around the top now if we run this you also see your fps comment down below what fps you are getting and yeah that is that we added the player and the player can now move so we have this oh gosh my bad that's a bug we might want to fix like there we go you see the player moves and the player stops at some point as well we should also at some point just implement something here so the player can't go off the screen but yeah and that's that thus we are now going to be working on this right here a little thruster that animates and moves up and down basically showing you that you are basically frosting yourself through space so we'll be implementing that today at least it's not as much math or massive blocks of code as in a previous tutorial so no need to worry first of all we can close this main.lua we'll be focusing mainly on the player cool now i would like to add two more attributes here to frost first i would like to add big flame and the big flame will basically determine when we change our flame size we'll make that false by default and then also flame and then 2.0 and this will just help with the animation of the flame where it goes from big to small and from small to big so that would just help with that so first we need to actually draw the flame so let's create a function for that so right here we can say draw flame thrust now you'll notice in the code i will give you you will see this but i actually want you to instead of going underscores go camel case like this i am not going to do this because i am following a script and i can't really change that script now it's a little late however you can still change it why do we do this because this one here is using camel case this here is using camelcase this here is using camelcase so we want to basically stick with everything using camel case except for of course these constants now i've already scripted it so we have to use this but you can still change this to be camel case i just accidentally messed up but that will be a function and it will take himself the fill type so this will basically say how we're going to fill the thrust on the ship because this will basically automate a lot of the drawing process for us and then as well as the color now we can actually take this and we can copy that and paste it here and of course add a comma here and we'll get to editing this in a second first we want to set the color so love dot graphics dot set color to color that was passed in because we will change we will draw more than just the inside of the flame we'll also draw like the outside of the flame so we'll need to set the different colors and whatnot and in here we specify the fill type which can be either fill or line so when we use this function it will either draw a line or fill it for us now this will change a little bit so here we can say self.x minus solve the radius because this will have to be an upside down triangle solve the radius times and it's basically going to be the same in most regards so 2 divided by 3 a little bit different but still relatively the same just instead of 4 divided by 3 we're using 2 divided by 3 because now the triangle tip will be at the bottom and not the top so we say 2 divided by 3 times and we can take this math.course self.angle and paste that there and we can say plus 0.5 times math dot sinself.angle now you're basically throwing a thing on its head so don't worry too much and we can copy and paste that so now we have self dot y and instead of minus this will be a plus so plus and we can remove that plus there then it's assaulted radius and this should be times not that times 2 divided by 3 then math and instead of cos this will be s i n for a sin and then this will be cos so we're swapping those two and instead of plus it will be minus then we can copy these two as we can just copy the first and paste it here and this should be downwards then itself.x minus the radius times and this time we want to basically sit the flame of the thrust so right here that will help with the animation this will basically draw the flame a specific size we can remove this whole part for that and in between these we can say self dot thrust dot flame like that and why did i do that let's copy that and then here we can just replace there we go and this will be cos not sen we can then copy that and do the same for y but yet again just invert everything so minus will become plus and then we're good to go after we turn close to sin and then we can copy these two and we can paste them here now they will basically be the same thing but this time we just go from plus to minus and from minus to plus there we go that should theoretically draw or flame thrust but we haven't tested yet and that's quite a lot of math to draw a polygon luckily this should be one of the last polygons we draw not the last but one of the last now we can go to draw now we only want to basically show the thrust when we are moving forward so did we include yes we did include frosting so only when we move forward do we want to show the frosting so to do that we can go if self dot frosting then and then here we can draw everything we need for the flame of course now we need to check is it a big flame or is it a small flame because we can have two different flames a big one or a small one so we can go if not self dot thrust dot big flame so we're checking if it's not the big flame so if it's the small flame then we say self dot thrust dot flame and you can find all of these right there and we can make that equal to itself minus one divided by love dot timer dot get fps to get fps is just to basically give us a bit of animation so in this case it will be negative 1 divided by 60. and this will just allow us to resize it for the animation and remember this draw will basically also run once every frame so you just have to remember that as well that's how we can get this animation rolling and let's leave that for there for now and just say self dot or not not dot that killing draw flame thrust first we want to say fill because we want to fill it and next we can draw the flame color in this scenario you can even make the flame color change depending on its size that's actually a cool feature you can add in the future but for right now i'm just going to give it a static size or a static color so 2 5 5 divided by 2 5 5 then 1 02 divided by 2 5 5 and then 25 divided by 255 and this will give us almost red color now if we save this i wonder if we'll be able to run it attempt to index field thrust a nil value so let's quickly just comment this out before we continue and as you can see we have a flame it's not really animating but we do have a flame and that's what basically what we are drawing and it only appears when we're moving forward so when we're frosting so that right there if frosting cool now let's draw the outer line of the flame before we continue to self draw flame thrust and instead of fill this top we will say line and now you'll notice why i did it like this and not just put it here because we're going to use it two times so why have that code twice when we can have it once and then we can set the color and this time just to give it some variety but usually you should stick with one type so if you're using rgb like that then you should keep it like that but this is just to show you you can have multiple so one zero point one six and zero now if we were to run this you'll notice it has a little bit of an outline not very noticeable but it does give it a nicer feel cool now we can start resizing it and making it feel pretty cool and here is basically where our problems began there should be thrust like that so i kind of messed up the spelling there now if we were to just run this you'll notice the flame just kind of goes weird because this resizes the flame that's actually kind of cool that's like a sword i like that anyhow so this basically resizes it to be come smaller because if we're saying big flame we want it to become the bigger flame now to make that happen we can go here and say if self dot thrust dot flame is less than 1.5 so if the size has gone to smaller than 1.5 then self.thrust dot big flame because we want to make it start giving the big flame why do i constantly did i misspell this somewhere no frost there we go and then big flame equal false so basically once we reach a certain size we want to start growing the flame so we're making big big flame equal to false i mean true not false because we want to start changing the big flame or to the big thing so it can start becoming bigger so now if we start flying you'll notice at some point it stops shrinking because we're not calling that anymore to make it continue shrinking because of this right here because we only run this if this right here is false in this scenario it's true and by default it's false now we need to do the opposite to get this to grow again so we can say else and there shouldn't be no colon this isn't python and now inside of this else we can copy this just paste it there and now instead of going minus 1 to decrease it we should plus 1 to increase it and remember we're dividing it by 60 so it stays small because 1 divided by 60 is pretty small if we go here and 1 divided by 60 there you go so it will basically increase with this amount of course you could spit a specific value in here but this will also make it go shrink depending on the fps not the best way to do this i would recommend instead using dt but we can maybe try that later and in here instead of 1.5 it should be 2.5 and then false so once it's size reaches 2.5 and it should be more not less than then we should turn this to false and it should start doing this one again until the flame is a specific size the small size then we change back to this one and we're doing that toggling with this right here setting to true or false and in here we're checking if it's true or false and executing depending on the size or depending on if it's true or false now if i were to run this you can see it now grows and shrinks now you can make it grow and shrink less it's up to you how much you wanted to grow and shrink to me i think that's a nice amount to ground shrink but you know everyone's eye will be different and feel different about it now one thing i also want to do because that bothers me quite a lot when we move this ship like this and it goes off screen i can't get it back unfortunately it is now gone forever i don't know how to turn that ship around and get it back the right way so what we should do is we should implement something to fix that now to do that let's go all the way down to right underneath this and we can say if self dot x plus self dot radius is less than zero so self.x plus the radius so let's actually open up my drawing app here because this i can explain pretty simple math so here's self.x right here in the center of the circle now the radius would be from this part to this so let's actually draw a bitter circle so here we go and then there now the radius will be from here to here and you might be wondering why i'm drawing a circle the reason for that is as you can see the collision detection it's a circle this also allows us to get this right here now if we say plus it's going to add these and give us this position right here so let me actually mark another red this position right here now when this position goes off screen so if this point right there goes to behind this here so off the screen where we can't see this at all anymore we want to make the ship come out from this side so now it's going to come back here so the ship will start flying here imagine this is the ship because the ship's radius no longer on the xaxis can be seen so we can just as well bring the ship in if you want to make it more complex and you think you have the guts to do that you can make the ship start getting drawn once it has reached halfway or even make the ship gets get drawn immediately once it reaches in here but that's a map i do not want to bring into this video anyhow so let's do that so i can say if already wait where is it f7 so self.x and we now have to change it because it went away here so we now have to make it come back here so that will be equal to love dot graphics dot get with and we say this specifically because remember the window plus its width is this part of the window so it's going to be the end of the window and then we add plus self dot radius this just makes it look more natural once we get here because they will come in more naturally instead of just poop appearing but of course you can make this more complex and make it work cooler so let's see if that works oh gosh that's a weird bug anyhow here we go ready oof gate with cannot call it and that should be a dot my glasses obscure my vision my bad now if we try it let's see and there we go it looked normal the reason it looked normal was because we made it only start appearing there once we've reached with the radius so it will add a radius to it and then it will appear so look more natural but of course if you were to remove this then it wouldn't look as natural it would just kind of plop into view so if we go here pop it looks natural but it still pops into view so it's not like it's animated or anything it's just pop so it's not the same anyhow so there's self.radius now we need to make it do the same for all of the sides so we did this side but we need to do this side as well so we can just say else if and we can specify self dot x minus self dot radius we're minusing this time because here we have our ship and here's the port now we're minusing the x so it's going to go here so this is where we're checking now and now we're going to check once it goes out of the screen here if this part is no longer in the screen that we can see so in the window it's going to start appearing here and the ship will start flying here again so it's the same thing but this time we check for this side instead of this side and we check for this side specifically where it comes in here instead of the other way around with this map i highly recommend playing with it because believe me it can boost your understanding of a lot if you play with it and since we know this gives us the end of the window we can just go if it's more than this and now we can just copy this self.x and actually we don't even need to we can just say self.x is equal to negative self dot radius because here we added the radius but now it should be zero minus the radius so you could say zero minus outer radius but that wouldn't make a lot of sense since by default negative radius would be so if you say zero minus 30 that will give you minus 30. but if you just said 30 it will still give you 30. anyhow so now we should be able to go with both screen so if i go here or both sides there we go there we go this side there we go so that's pretty neat we can do the same for y by just copying and pasting and then transforming all of this to y instead of x we can still add the radius because now the radius will add it downwards and upwards instead of left and right and instead of get with we now have to say get height and this will basically do everything for us now we go here bloop now i can turn it around bloop now we can't go off the screen which is nice because we don't want to go off the screen we want to keep coming back now in this tutorial we will be adding the game state it's nothing you can really see so i can't really show you an example of it in game however this will make our life in the future a lot easier because now we have something to manage the state of the game instead of us having to do it manually so let's open up this main.lua so we have it open and let's actually just create the games state so let's create a folder called states and inside of that a file called game.lua game.lua will contain our game state currently it will not really do anything but it will in the future do a lot so we can say function game and then we can just return game then it's out of here we can just return we have nothing else we need to really do and we can just return a few things first i want to return all of the states we have in the game this means we will have a menu state which will code later a paused state which will code later a running state and an ended state and we'll code in state later as well where we have the running state so we need to define those states so state is equal to and then menu can be false paused can be false running for now can be true so it's going to be the default state and then ended which will then be false so these are our fourth stage you can add more states later on as you please thanks to this snippet of code here it's not too difficult now what might become difficult is switching between states such as saying okay we don't want the menu state anymore we want this state we want to switch to paused or to running state and later on switching that state to the menu state all of these things they can be kind of difficult to implement so we are going to take the easy way out and implement something that does all of that for us so change game state is equal to a function and in the state we want to change to so state we can then go self.state.menu is equal to state and if that is equal to menu so if the text menu is passed in then we're switching to the menu state and we can do this for all of the states we have for example polls running and ended so here one two largest one two three and here one two three there's probably a better way than to implement it with a string but a string for our basic game is perfectly fine as long as you don't misspell something you'll be good to go but you could give it a default state if none of these are true but we're not going to worry about that now that we have this game stake let's add it to the game itself so right here underneath player we can add game is equal to game and of course we need to import game so local game is equal to require and as you may remember it's inside the states folder so states and we're going to go dot game we can go slash game this should import it into this project now we can go down and here with the update we can now implement some of this state checking so if game dot state dot running then only we want to move the player so you can move that in there and we can move this to the top so now we have that so only if it's in the running state can we move the player so if it's in the menu state or if it's in the paused state or the ended state we cannot move the player then the only other time we might want to have a different state for right now can be in the key pressed so we can copy this if statement and then if the game state is running then do this and then if the key is equal to escape then we want to go game and then change game state to paused and this will make it go to the paused game state now we need to be able to change it back so let's go here and say elsif game.state.paused and then we can just copy this so we get the same key input and this can change it back to running so one of the things i left for homework in a previous video was to implement a paused state for the game and i told you it would be really easy to do so and right now we have implemented a paused state for this game so if you were part of the previous tutorial then now you should understand how to do that if you didn't do your homework so yeah this is how you would implement a post state it's incredibly simple now if we were to run this we can go like this and if you say pause by pressing escape then the player doesn't do anything and once we unescape the player will continue and then like this and later we can add like some paused text but for right now it's fine in this tutorial we will be adding text to the game now that we have the state implemented so what we have currently is something like this so where we go like this and we can also pause like that pausing isn't perfect but you get the idea now when we pause i want the user to actually be able to see that they paused because let's say accidentally press the escape button and suddenly their game stops working they will think it's a bug but in fact the game is being paused so we're going to implement that and here's an example let me just bring this over here so let's go like this and then pause as you can see there's no paused text on the screen and now we go like this it's nice cool so that's an example of what we'll be doing now let's get started so we already have a states folder let's create a new folder for components and this folder will be used specifically for components that we might want to use in the game we'll also create another folder and this one will be for objects now the state contains the states is the menu game those types of states the objects will contain objects that we can touch so the player is an object and then the components the components is basically like the text it's not necessarily an object that we can crash into with the player or something like that so yeah now with the player we can move the player to objects there we go move then here we want to say objects player since now the player is in the objects folder we don't actually use the player here so we don't have to worry about it there if we run the game everything should still work fine cool then the components we can create a new file called text dot lua because it's text we include this main.lua and now we can start working on the text so first let's local love is equal to require and just love now you can create a function call it text it will take in some data and then it will return something of course a table and then at the end we can just say return text there we go our basic text object setup now we need to think of properties that text may have so let's actually split it up into a few things here let's go parameters now first i think all text will have some text which would be of like a string or a text type that will be displayed and this text will be the text to be displayed and it's required now you might ask why am i doing this like what does this benefit us with if i were to hover over my text you'll notice now we have parameters text string text to this takes to be displayed required this is called documenting your code so if someone else in the future comes back to our code here they will be able to just hover over a function wherever we use it and see what it needs so that's what i'm doing here if this wasn't here then as you can see we don't get any description so that's what i'm doing here now this is quite a lot of we're going to have to type so since i'm too lazy i'm just going to paste this from the already existing script code there we go we need an x for the x position of the text so from the side of the screen a y for the y position of the text from the top of the screen all of these are as far required we also didn't want from here everything is optional but we also want the font size the default will be p and i'll set up this in a second where we'll actually have some default versions if you know html then this will help you greatly and here are some of the options we can use we didn't have a fade in which will allow us to fade in the text so let's say if it's a game over we want the text to fade in as well as the text to fade out this is just the boolean so true or false if it should fade in and or fade out wrap with this is when the text should be broken so this should be when should the text break the default will be the window width but you can change this and you'll see later where we can change this then there's the align so where will the text be aligned on the screen it's like center left right all of that and in the opacity basically this will allow us to set a default opacity for the text so the text should maybe be a little bit seethrough or something along those lines we can now implement that in here so we want the text the x the y the font size the fade in fade out wrap with a line and opacity quite a lot you don't need all of this but i feel like giving as much choice as possible is always a good idea now here above return we can set some of the default values so you can also do this in return if you want to but most of this will be useful outside of it so font size is equal to the font size that has been passed in or it will default to p for a paragraph so paragraph size we can then just create a space and copy five times we didn't want fade in fade out so fade in fade out wrap with a line and opacity so all of these so everyone that's optional then we want to replace all of these with those values and of course these as well and in the fade in would by default be false this will be false this wrap width will be love dot graphics dot get with the line would be defaulted to left so right here on the screen you can make it centers it's in the center or you can make it right so it's on the right and then the opacity here will default to one now we also want to set some constants first we can start with the text fade duration because we won't use the fade just yet but doing all of the setup beforehand will save us a lot of time in the future but you don't have to do it right now but i do recommend you still do it right now if possible local text and this is going to be a constant so it will be all caps fade there for text fade duration we'll make that to 5. now we have the problem here of this right here how will we set that now we can do that by creating something that can hold all of that so local fonts and here we can specify the fonts we want for example h1 will be the size of love dot graphics dot new font and we can make it something like 60 for like 60 pixels we need to copy that two three four five six seven times then here we can just go h1 to h2 three four five six and make this p you can add more you can also use a different structure i just think that to me at least this makes sense since i use html and in html h1 is the biggest text you can have unless you're modified with css but it's the biggest text you can have and then p is like regular small text just regular text p is also about 16 pixels and in h6 is usually smaller than p h5 h4 h3 h2 and an h1 there we go so there's all of our text sizes we won't use all of them but they exist if we need the variety from them you can also give them different names if that's what you're into we also want to set if fade in so if we try to fade in then you want to give the default opacity actually a lower value because if we want to fade in then the default opacity should be pretty low says we wanted to fit in if the default opacity is one it's not going to fade in it's going to pop in so opacity then gets overwritten to 0.1 so no matter what they put in here if we say it's fade in then we're going to force it to fade in by making the opacity 0.1 cool we have now done all of this setup so let's use what we have here first we can go and say text is equal to the text that was passed in x but not that love x is equal to x y is equal to the y and opacity is equal to the opacity now whilst i could put all of this inside of here as well currently i don't think i'm going to use any of this outside of this text so i'm going to keep it here since i'm not using it outside of this text but if i do i can move this for example the opacity that i moved here i can move it to down here because what's in return is things we can use outside of this right here so we can't use this or this outside of this text function however we can use all of this outside of the text function now we can also set our default colors for the text so colors is equal to r which will be one meaning basically full red g will which will be one and then b which will be one so red green blue and since they're all one this also means that by default they are white so the text will be white on the very dark black background now we want to also be able to set these colors at any point and you could move these colors here if you don't think you use them outside of this text function but here we could go set color equal to and we can create a function this function will take itself red scroll down green and blue then here we can say self dot colors dot r is equal to red self dot colors dot green is equal to green self dot colors dot blue is equal to well is equal to blue so now if we use the set color it will set the color to whatever we pass in so we don't have to type this out every time we want to set the color and now for the last function that we'll implement and then we'll wait a while before we try anything else is the raw function because we still need to draw the text to screen that's a function function takes itself and now we basically need to say what text we want i'm going to call this tbl text because the text will later be stored inside of a table and also index and this table is what we're also going to pass in here with the index of what we want to use you'll understand this in a second once we use it we can then go if self.opacity is more than zero they want to do a bunch of things else if the opacity is not more than zero then we want to say table dot remove and we want to remove from tbr text the item at that index that should be t basically this is for our fading stuff so once it fades out we want to remove it from the table because if it's still in the table let's say after two hours of playing the game that means everything that had was text is still in the table two hours later and every table requires ram and the more ram you use the worse the game will perform so if the user plays the game for let's say 10 hours then by hour 10 their game will probably reach like 5 fps or something but yeah and we can just return false because that means there's nothing left to draw otherwise we can return true because there's still stuff left to draw okay now here we can start with the drawing things we can leave the fading stuff for later so let's first go love dot graphics dot set color and here we can say self dot colors dot r as will give us red self dot colors dot green and in self dot colors dot blue and of course self dot opacity and it will set the color of the text we currently want to draw then you want to set the font of the text you want to draw so love dot graphics.set font and then we can pass in fonts and then add the font size so the font size we can find right here which will be something like p or h1 and we pass that in here to get the font size we'll play a little bit with this to kind of get the idea of what it does then we want to say love dot graphics dot print if specifically printf because of how much it allows us to modify how much we can like just do things our way like customization so first we want to specify the text of self.text and then self dot x for the x position self dot y for the y position the wrap with and then the align so as i said you don't have to make a lot of these things things you need to pass in that's why they're optional you could just hard code him in here but i wanted to make it more robust i think that's the word then also after we have done all of this we want to change the font size back to p so we have a standard font size everywhere now that we have this i think we can try it out and then once we have tried it out we can implement the fade in and fade out we won't use it yet but we'll implement it so let's go here instead of game and let's create a draw function inside of the game draw is equal to a function self and also faded i'll explain that in a second so first we can say if faded then text and this text is what we need to import so we can actually just go here to main copy this import go here paste it but now we can say text and text comes from components slash text and we should just say dot dot and then a slash to specify go back one directory so one folder since we're here we want to go back one folder and then jump into the components folder that's what this means those two dots means go back one folder also we can just say local love is equal to require love so yet again it's not required to specify this it's just optional but unlike specifying it anyways and then down here we can say text and we can pass in a bunch of things if we hover over text then unfortunately we don't get any of the documentation we wrote this probably still needs to import all of that but for now it's fine so the text we want to display is going to be paused then we can say zero and that will be for the x and then love dot graphics scroll down a bit dot get height and we can just say times 0.4 and this will kind of position the height in the center of the screen we don't say 0.5 because you should remember that the very top of the of the text is actually where the text gets drawn so if we put it at 0.5 it's actually going to be drawn underneath the halfway mark instead of in the middle of it here we can specify the size for example h1 we can specify false and false for the fading and then love dot graphics dot get with and this is for the word wrapping and then where to align it to and in this scenario center if we run this or if we not run this everything can go and say draw now if we run it we won't get anything because we need to actually now use this draw inside of main so down here if we scroll we have a player.draw but now we can actually use our states to our advantage so we can say if game.state dot running or if the game dot state dot pause so if it's one of these two states we want to draw the player as well as game draw game.state.paused so we are passing in this game.state.paused the reason for it is because game.state.paused is a true or false value so currently if we go here then we are trying to get a true or false value so if it's true then draw this if it's false don't draw this we'll expand on this more later but for now this is fine all right so now we're saying draw and it will basically execute this right here and if the game state is not paused it will not draw anything inside of here because faded will not allow it to it's faded because we're going to change it later but yeah for right now we can just say love dot and see if it works okay now let's go and pause and there we go we get paused isn't that absolutely amazing so that's pretty cool let's make the text a bit smaller let's go instead of h1 we say p if we run that then the text is now super small so we made it able to change the text size by literally just changing one line let's change that back to h1 to make it nice and big now this is more for the future currently it won't benefit as i lost to type this however in the future it will definitely benefit us to time to have this so let's go here underneath opacity and say if fade in so if we should fade in do something else if fade out so if we should fade out then because we don't want them to both happen at the same time so we're using an if else statement so if fade in then we first do fade in and then we can change fade into false and then do fade out because we don't want two different if statements you want one if statement that just has an else if so if we want to fade in it will fade in but it won't try and fade out at the same time then we can go self dot opacity is equal to self dot opacity minus and here you can say one y is a little big though because our opacity is a range of zero to one so by saying 1 will immediately go from seeing text to not seeing text so we can divide that by text fade duration so this 5 right here so depending on how much you make this the text will fade slower and here we can also just divide it by love dot timer dot get fps there we go and this will nicely fade it for us so it looks nice once it fades out we're not going to use it in this tutorial but we will use it in the future then here in the fade in we can check the opacity because if the opacity is more than one that means we have faded in so we now want to fade out if possible so we can check if self dot opacity is less than one so only if it's less than one then increase the opacity else if it's not less than one that means it's more than one then you want to set fade in equal to false now that we have set fade into false here that means fading will be false so this will not be triggered so if fade out is true then we'll fade out the text then here we can say self dot opacity and it will actually just be the same thing so let's just copy that but this time instead of minus it will be plus and now we have implemented fade out and fade in cool now we have added the text and we can use this text in a lot of the parts of the game and hello everyone if you're enjoying this tutorial please leave a like and subscribe for future tutorials so currently if we pause we have a paused text if we unpause this no longer there if we move around we can move around but the game is still pretty boring because currently we can't do anything we didn't have any enemies we just fly around we can fly off screen but we'll just come back so that's no fun so what are we going to do well of course we should add the enemy we should create the enemy and the enemy should of course be the asteroids that's the whole reason the game exists to avoid the asteroids so let me show you an example of what we will be doing today we can move this here there we go we have an asteroid we can't really do anything with the asteroid yet but we have an asteroid and this is the idea we want to be able to create multiple of these guys without any problem you also notice the red around the asteroid just like with the player that is the hit zone so if our players rid around it and that asteroid raid touches each other then boom the game ends and we'll implement that later yet again as the circles are not super accurate but the game itself isn't going to be super complex either if you want to give yourself an extra challenge you can try and make that more accurate than a circle awesome now one thing i want to do before we get into actually coding the asteroid is i want to add a new feature to the game so i'm going to remove this text here go into player and i want the player to now once we draw the player i want it to take in faded like that and once it takes and faded i want us to decrease the opacity of the player so here we can say if faded then we want to set opacity equal to 0.2 you can make it lower or higher depending on what you want now because we have this faded right here we can now go to main and here we can just pass in if the game is paused if the game is paused we want to fade out the player so let's run that and just see that it works so pause i don't see much of it oh wait we don't pause pauses this button as you can see the player fades out so pause the player still there just fade it out we want to implement this for the entire game so where everything fades out once you pause except for the debugging stuff of course cool now that we have that we can also implement it at different places so let's create a new object this object will be called asteroids you could call it asteroid but in the script i made it asteroids accidentally so now we'll have to stick with the scripts but we can say dot lua and now we have an asteroid but you could call it asteroid that would be perfectly fine we can then say let me just close this as well local love is equal to require love i just love saying that i don't know why we're gonna say function and asteroids and we can just return an empty table and then return asteroids we have created our basic asteroid object now first we'd want to take in the asteroid x position the asteroid's y position its size it's level so depending on the level will also depend on some things that asteroid might have and then debugging now here we can say debugging is equal to debugging or false so basically it's going to be either debugging or not debugging next we want to set things such as the asteroids vertices this is basically how many edges the asteroid will have we'll play around with this later so i can actually show you an example so this scenario or in this case we can just say local asteroids and of course you can make it something different if you don't like 10 specifically you can make it 11 15 50 5 whatever you choose i'm going to make it 10 because i actually found that that looks pretty good then we can also set the jaggedness and the jaggedness is basically just saying how round the asteroid should be the more jagged the less round and the more epic it looks but also the less accurate our collision detection will be so make sure it's not too jagged unless you're going to upgrade that collision detection and then we can say asteroid jag for jaggedness i'm not going to spell jack jagged i don't know how to spell that but it's 0.4 but you can make it more or less i found 0.4 looks pretty good then you can go local and then put the asteroid speed speed and that is equal to math dot random why are we saying mafta random because the asteroid speed itself should be random or am i incorrect because if all asteroids are the same speed the game would be less fun but if this asteroid on the left moves five times faster than the asteroid on the right then that would be pretty cool just as an example meaning put in 50 so it gives in a random value till 50 and you can say plus and level times two so depending on the asteroid level will add to the asteroid speed so let's say it's 50 and the level is five so there's 50 plus 10. you could increase this level to something like three or four and that will also make the leveling system much more difficult but i'm going to keep it low for now cool and we'll come back to this here at the top i'm currently just going to go to return for now we're going to specify x is equal to x so the x that's being passed in y is equal to y oh no dot love oh gosh that was supposed to be a comma and then we can say the x velocity this means how fast the asteroid will move on the xaxis so from left to right that will be equal to math.random and now we can say times asteroid speed so that's the one we did right here times velocity now velocity will determine if the asteroid goes forward backwards up or down so an x and x axis it will go either forward or backwards on y axis it will go either up or down so let's quickly create that so let's go here let's say local velocity is equal to negative one by default then we can check if math.random and here we can specify it's less than 0.5 because map to random will give a value between 0 and 1. then and we want to say velocity is equal to 1. so it's negative 1 but if master random is less than 0.5 then we're going to make it one and this will decide where this is going to move this way or this way we don't have to worry too much about this now we're just setting it up now you may have remember before we continue here that in my lua tutorial i did cover math.random and i did cover how it's not always random so to make sure that the player doesn't get the same game every time they boot up the game so the same asteroid is the same way the asteroids move everything we should make it more random before we continue here because i might forget about that meaning go to main and here we can just specify right before the load right before everything math dot random seed as we'll see the randomness and say os.time and this will make everything more random it will seed it to make it less predictable cool now you can go back to asteroids and you can copy this x velocity and you can make a y velocity as well for up and down and it can have exactly the same math so it may not move the same speed up and down as it's moving left and right which is what we want now we need to set the radius of the asteroid because in the end of the day the asteroid is pretty much just going to be a circle so we can say radius is equal to math dot seal for math dot ceiling so always go up and then asteroid size divided by two and this will give the asteroid's radius cool i'm going to leave all of this here for a second and i'll come back to it a bit later let's draw this asteroid because i'm not really sure if we're getting everything right here so let's go function self and also if it should be faded because if we pause the game then we can yet again say local opacity if that is or that is equal to one but if faded then opacity is equal to 0.2 then you want to set the color to not white but kind of like a grayish white because when i think of an asteroid i don't think of it as a pure white blob just flying to me in fact i think of it as a bit dark actually so let's make it like a grayish color in this scenario since the background is pitch black we can't really make it too dark because then the player will see it so you'll notice it's not pure white as you can see here by these numbers you can tweak these numbers to kind of fit your need for what you want the asteroid color to be but yeah that this will determine the asteroid color now next we need to determine the asteroids points now the points basically just say where the asteroid is going to be when we draw the polygon we have a bunch of points so you may have remembered when we draw the player so local points let's go here is equal to and here we can specify a table and then say self dot x plus self dot radius which is right here times self dot off set now offset is just so we can get a little bit of an offset so the game or so the asteroid which is like a circle if you remember with the player it needed a little bit of an offset so the center dot can always be in the middle if you could remember what we did so if we go here and say love dot then you see that little circle that little red dot in the center of our player that had to be on an offset which was i think like 1 and 1 because it wasn't quite in the center of our triangle and in this scenario we'll have the same problem so we're setting it offset now to generate the offset we can go up here and we can say local offset is equal to an empty table then we can say four well not in pairs four i becomes one two and two where to where specifically are we going to set this offset well that depends on the amount of vertices we have so in this scenario we have 10 vertices but we don't want all of the asteroids to have the same amount of jaggedness right we don't want that asteroid to have five points and then the one next to it also have five points we won't want to have two and want to have ten and once we have four we want it there to be variety so let's create a more interesting vertice but you could if you wanted to just put it here put this here like that that's perfectly fine but i wanted to be a bit more random so here we can say local vert for vertices is equal to math.floor because we also want to go down but you could make it go math.cl in fact that might even be better i'm following a script but you could make a method still and that would work perfectly fine math.random because we want to get a random value so just right here so you pass that in there and just say plus one so we don't get zero plus and we paste that android vertices in there again divided by two and this will give us a nice random value which will also determine how less round r asteroid is so how many points it has edges now here instead of saying this specific just always 10 value we could specify vert plus one and now we can insert an offset and this will always generate offset at the correct location there is a table dot insert and then the list and value in this scenario we want to do offset and math.random and i'll explain this in a second times asteroid and let me just scroll down so i can autocomplete that times two plus one minus asteroid jack the thing is i can't quite explain this math here because you can't visualize it that really sucks but once we see this asteroid we'll be able to play around with this i can explain what's happening but take note before we continue that this right here is not the same as saying this they are not the same just take note of that for some of you might want to do that but there we go and we can play around with this later so i can show you an example but for right now let's just leave that like that so we have this vert and offset and i can get the vertices like this so vertvert and then offset is offset there we go so now we have both of these that we can use here so back to points so now we have self.offset which is basically everything we just did and now we need to specify at what index because there will be multiple because if you could see here we are forwarding through this and inserting for every item we're inserting a new offset or a new item for that offset the new location so now here with the points we need to specify and i'm just going to say one so the very first one we have times and we'll later modify this to be a bit more interesting math.cos yet again i can't quite explain this yet because we can't see it so we don't really know what we're drawing here but i'll show you in a second you can solve that angle in there and then with the next one we can just copy it and instead of saying x this will be y keep everything the same and instead of cos we say sin and now we didn't have this angle though you may have noticed that we can quickly generate something that will give us an angle just like with our player how we have an angle we can do the same here we just say angle is equal to math dot red for radians and then math.random and we just say math.pi you don't have to worry too much about the math we're doing in this game div course the more important part is that you can see how everything fits together to create something interesting in so if the math goes over your head don't worry there's a lot of games out there that you can build without all this complex math and in most cases you can do what i do and you can just literally copy math from online because i watched a lot of tutorials and i looked through a lot of documentation and i was like i don't understand any of this i copied paste test and it worked that's what i would recommend you do as well if you're not very good at map if you're good at math and just do this may of course coming out soon at some point so stay tuned if you want to improve your math cool so now we have our points but we still need a lot of the other points as well so this is just the first batch of points because if you remember we need at least two more here in order to complete it into a full triangle so we can create a for loop and then for i becomes one oh that should be i i becomes one to self dot vert minus one so the amount of vertices minus one do and we can just say table dot insert we can specify that we want to insert into points so this one right here and then what we want to insert for now i'm just going to copy this and modify it because it's quite a lot of typing because math so it starts with x plus cell the radius times the offset but instead of saying 1 we say i plus one because here we specified one but now we want to go two and three and four and five if you wanted to you could just specify that i should be two here from the get go but this works perfectly fine as well and then we can specify math.course self.angle but now we need to add a bit of extra mass so we can close this polygon we're drawing because remember a polygon should close if we just drew a triangle with like just three angles they're not going to close itself we need to make sure it closes for example if i were to open up my drawing app here if we just drew this one two three that that's not a triangle is it this is a triangle a triangle closes itself so we need to add some extra math to do this at some point or here or here but not this this is bad because it doesn't close itself it just stays open so we need to do some math to do this like that so now here after the angle we say plus i times math dot pi times 2 divided by self.vert there we go that should be divided awesome we can then insert another one and we can just skip over the math for now because there's a lot of math here which you don't necessarily need to cover at the moment and we can just specify why here everything else will stay the same except instead of cos we'll have sin cool now we can actually go about drawing what we have so we can actually display it on the screen and see what we're working with because currently we're not drawing anything so we're going to say love.graphics.polygon and now we just specify that we want a line oh gosh i want a line and points because we generated the points right here it's inside of a table we did the points and now we're passing in the points so instead of doing what we did with player where we just passed in the points like this as you can see here the math is pretty much similar we did this instead and generated the points for us because asteroids won't all have the same amount of points unlike the player which only has three they might have 10 or 50. we have no idea and we don't want to draw each one of those out by hand because that's going to be a massive pain so we use a for loop to do it instead cool and let's just add some debugging in case you want debugging so if debugging then love dot graphics dot set color one o o so red and you can also specify love dot graphics to draw a circle we can specify we want a line and then we specify self dot x to give it a self x position and a y position and then you just specify the radius and there we go so this would display the hitbox of the asteroid now i still want to implement movement but for right now i think this is fine let's just go to main because i want to see what we draw you can probably hear my voice how excited i'm getting to seeing what we drew let's go down here to draw and now we actually need to generate an actual asteroid however i am wondering if doing it here would be a good idea i say we should rather open up the game states and we should implement a function that could benefit us in the future for example what if we had a function that says start new game and that's a function that takes itself and the player and i'll explain why in a second and this every time starts a new game when we tell it to so let's say the game ends because the player died or when the player says play game then this will trigger and it will restart the game so you could say self and then change the game state to running because we're changing the game state back to a running state since that's what's happening then we are creating a global scope very important to remember this a global scope variable called asteroid so underscore g dot or just plain out here asteroids just lowercase a this is a global scope variable meaning it can be used anywhere inside of this file or actually anywhere inside of this game now because we're going to import this file later we're going to use this and it's going to generate this global scope function or this global scope variable this isn't the best way to do it take note in fact i might even recommend you do asteroids here and say asteroids and in doing this or finding even a better place to do it than here but for now this will work fine we make that an empty table take note it is global scope you will get confused if you do not take that as note then we specify the asteroids current x and y positions so you could do this without needing to put a variable but i'm going to use a variable just to keep things simple so local asteroid x position is equal to math.floor math.random it doesn't need to be random you could specify a specific position for example we could go here and say table dot insert because we want at least one asteroid asteroids and then what index and then what value and in this scenario asteroids object we can go up here and you can copy this and change from text to asteroids change from components to objects and then here instead of saying text we say asteroids and this will import this asteroid object which we are using here and then we specify the x and y so you could give something like 60 100 that's perfectly fine then 100 for the i believe that's the radius if you look here we go up here now that's the asteroid size so depending on the size or depending on what you pass in there the azure will be bigger or smaller the level which will in this scenario just be self.level so it will level up depending on the game level and then true for debugging now you could do this but it's boring because we want asteroids to start up at a different location every time we start up the game so what we could do is we could make it random and that's what i'm doing here and we say love dot graphics dot get with because it's the x position and it can appear anywhere on the x axis same with y but this time instead of saying with we say get height and we pass in the asteroid x we pass in asteroid y we save that and now we can go here back to main then on the game load when we create this game we can say game colon start new game and we can just pass in the player now currently we're just passing in the player this is just for future reference we don't have to worry about it too much now but we are passing in the player because later once we start a new game we want to position the player in the center we want to give the player more hp and so on and so forth so by default that means we'd want a player we could also specify and push in some asteroids in here if you wanted to as well but this is fine for now now be remember asteroids is a global scope variable so don't get confused about what we're doing here because remember it's a global scope very important to take note of so for and we can say underscore because we're not going to use this this is the index we're not going to use it asteroid and asteroids global scope remember that you might get confused so maybe make it somewhere more global or more local instead of global but for right now just remember this is global scope because you will get confused if you don't remember now you can say asteroids or asteroid and it just say draw so called the draw function for every asteroid we have so if you have multiple asteroids then this will call it for multiple asteroids and just pass in game dot state dot pause so if the game is paused so if it should be faded out or not let's run this and hope for the best and ooh asteroid 8 can we perform on local level a null value that means we may not have passed in the level do we actually have a level here yet no we actually do not have a level here yet my bad okay so let's add a level we are currently at level one we can start there now if we run this where's the asteroid i do not see the asteroid let me draw it again i do not see the asteroid oh you know what i think this could be the reasons let's remove that 60 i think i just forgot to remove that let's try and run it now and in here we need to specify the size so i got so confused of all of these things but yeah now i think it should probably yes there we go so now we have an asteroid and let's maybe spawn another that's pretty cool we can of course have multiple asteroids let's just maybe make a four and then we can just copy this for every asteroid x and then copy this for every asteroid bar just so we can have some of an idea of what we see now if we run this we'll have four asteroids that spawn randomly cool and they all look different and that's kind of what i've been doing this whole time with all this math.random this one has one two three i can't actually show my cursor but yeah so you can see they have different amounts of like spikes and the the spikes also look way different compared to each other let's play around with some of the math just so i can show you what i meant if we go here to the asteroids of course if you were to change this to 90 for example then now as you can see they're like super spiky so if you the higher you make that the more spiky they can become that actually looks kind of cool but if you were to make this something like two then yeah you need more than two to actually be able to draw polygons let's make it four i think that should be enough then there you go then they all look kind of plain and in here of the jaggedness you can see how jagged it should be so if you make it a nine then it will be like super pointy and super cool looking but as you can see you have the red circles the hitboxes are not very accurate so unless you're going to do some extra math there to make it accurate i do not recommend making this too high i did pretty f4 but you could put it somewhere else like let's say at five should still be perfectly fine yeah it's still mostly perfectly fine not perfect but yeah and then let's say you were to make it 0.1 then they'll basically all look super round and you make it a 0.0 i wonder what will happen would we crash no but it would look pretty much very round and then the more vertices you add for example let's say 19 then now it'll look like a normal circle because there's just a bunch of little lines being drawn and of course if you were to make this a nine again then now it will look super weird so that's kind of what these were so if you were confused i hope this also cleared it up for you astro speed we're going to work with in a second and here's the offset but you don't have to mess with right now but if you want to you could and you could like remove some things here and see what offset will does we'll do so if we select 10 for example what will happen then as you can see not so great and of course if you wanted to you could say fill instead of line and that will give you like a filled version but then i would recommend choosing a color a bit more gray than the grayish white color we chose because then it just looks weird so i'd recommend something a lot more gray if you want to go something that's not line because it currently it kind of looks a little bit faded compared to uh ours and of course if you pause they'll all fade out a little bit and on pause pause like that cool and that's the drawing section completed some of you might want to take a break right now i'd actually recommend it but if you think you still have the guts to go for it then let's implement the movement so here we have a nothing starting game but in asteroids here we have the draw but the draw is now completed for now so we can now go and say move and move is a function takes in self and dt dt because we actually want to start implementing some good ways to move our objects without using fps because as i said fps is not a great way to specify how fast something should move use dt and remember dt is the time between this frame and the last frame so it's usually very small and it's self dot x is equal to self dot x plus self dot x and we can say bill for velocity and that's right here so that will basically with every move it will move x to where it currently is but plus its velocity and then just say times dt to make a move at a consistent rate so if it's 30 ps or if it's 60 fps it will get from one point to the other point in exactly the same time and you can do the same for y but it's time for y velocity cool so that will move it now we can go to main and we can go up to update where the game state is running and we can actually just copy this paste it here and this time we can call this ast index but you don't have to in fact you could possibly just keep this underscore because we're not necessarily going to use it although we might in the future so i'll keep that there because it didn't make sense to able to access the index from here but as for future reference you could make it underscore for now instead of draw we say move and we pass in dt where do we get dt dt gets passed in from update so update takes in dt thanks to love2d we take this dt and we pass it in here if we run this then now it moves which i think is kind of cool right again that will move a different direction move it again now it's incredibly slow move it again now you'll notice as well oh gosh i closed my terminal but you'll notice as well when i get back to everything that love dot if we run it then it can go off screen just give it a second my player can actually go with it off screen just to show you something you'll notice my player comes back but once the asteroid leaves the screen it never comes back we don't want that so what we can do is we can go to player go to move player copy this go to asteroids and then just paste this here and it will do the same thing as with the player it will make sure the asteroid stays on screen so let's run this and make sure it works and it's going to take a while to get off screen now there we go all right give it a second you can also put some extra math here to make it appear sooner on the other side but i think this is fine and there it goes it now appeared and just like that we made sure that the asteroid never goes off screen forever cool and of course if you want the ashrae to move faster you could upgrade the speed here for example let's just go plus nine for an hour uh let's go plus 10 actually i think that would be pretty good and now we'll move usually much faster but it's still random so let's maybe go here and just make it a default 150. let's see that should make it move pretty fast yeah there you go so you can just upgrade that to make it move faster or slower i maybe say increase this times two to maybe times five or times four times three depending on how difficult you want to gain to be this is something you can tweak to make the game your own to make it something that's just more than what we have and yeah that is that in this tutorial let's add the lasers you know because when you have a spaceship you can go pew pew pew and that should be destroying the asteroids whilst we'll not be implementing the destroying of the asteroids yet we will be implementing the lasers themselves now the lasers are much easier than you might think they are they're basically just dots on the screen that move around so there's not a lot of complicated math in drawing them it's just a little circle or square that moves so to give you an example of what we will be doing let me just go here and start one up all right so here is the example if i press space it shoots an asteroid there is limited amount of asteroids allowed on the screen so if you have too many asteroids on the screen it will remove some of the previous asteroids but yeah currently if you shoot an asteroid it can't because the lasers cannot destroy anything yet and i might have said asteroids earlier i mean there's a limited amount of lasers that can be on the screen not asteroids a limited amount of bullets all right it's that simple let's first create a new object and we can call it laser dot lua because this is an object because it's the laser is a bullet then right here we could just remove that and we could say function laser then we want the x position the y position and then the angle it's shooting at because the player might be at a specific angle and we want to shoot out of that angle so the player is looking upwards we won't shoot upwards of the of that angle anyhow then this will return a table and we can just return laser and there we go now first we want to set the laser speed so sitting this will determine how fast the laser moves so how many pixels per second in our case i think about 500 pixels a second is perfectly fine to some of you that might be a little fast so you might want to turn it down or to some it might be a little bit slow but it's up to you so local laser speed is equal to 500 so in pixels per second we can insert the x equal to the x that was passed in the y equal to the y that was passed in now let's first draw what we have so let's draw that's equal to a function and this function will just taken self and fade it as well so if we pause it also fade out just like everything else and we can say local opacity is equal to one if faded then opacity is equal to 0.2 then love dot graphics dot set color and you can make this red or green or whatever color you think a laser should be but i'm just going to make it white but you can customize the game and make it red green blue purple whatever color fits your eye the best you can make everything colorful and much more playful and we can just also pass in the opacity since we are literally just using a dot we can use a point so just like a point on the screen luckily love2d already has this built in so we can just say love dot graphics dot set point size and this is how big the dot will be i'm just going to say free but we'll play around with this so you can figure out what size is perfect for you then we can say love dot graphics dot points and now we can draw the point on self.x and self dot y and we forgot to require love but yet again it's optional so local love is equal to require love there we go nice we'll add this later but for right now let's just see how everything looks if we put it on the screen alright so let's go to player because here is where we'll be adding lasers we can go to the top and add a new item we can call it lasers and that will just be a table that's empty because we can have multiple lasers so we'll just have a table that can hold all of the lasers for us we can then scroll down and maybe right above the draw we can add a shoot laser function this function will allow us to shoot a laser and that's it this could be inside of lasers or a sort of game or where what not but i feel putting in sort of plays player makes the most sense because if you say player and then colon shoot laser it makes so much sense but if you say just laser shoot laser it's kind of weird so if you say player shoot laser then you know the player is shooting at laser and if you add an enemy like maybe a spaceship and a spaceship can shoot lasers then yet again you can just say spaceship or enemy colon shoot laser you can follow the same structure and it would always make sense cool now for now let's just go shoot laser and that can be a function that takes itself and here we can just go table dot insert self.laser and then create a laser object and we need to import laser so you can say local laser is equal to require and then object laser i don't know this dot syntax works but if it works let's use it but if it doesn't work you can use a slash i'm going to try this dot syntax because my ide constantly auto completes it like that for me so let's see if it works now down here where we do this we can go laser and then it needs the x axis and the xaxis will basically be the same as our player but we'll tweak this a little bit just to get it right let's go self dot x and we'll tweak it so it's fine like this self self.y self.angle cool we'll tweak it more later because this won't necessarily work that great yet but i just want to get it on screen now if we go to main we can go maybe right here to where it says this key release and we can say or actually let's leave that for now let's go here first and we have a few things we might want to do to shoot so there's a few things that the user can press if they want to shoot first i think space is a good item to press then as well as down like the down arrow key and then kp five like that is the five on the numpad i think that's also a good one and in here we could just say player shoot laser and it will shoot the laser now also want the laser to be shot if a mouse is pressed so let's say if the right mouse button is clicked we want the laser to be shot so they want to play with their mouse they can so let's actually do that so we can say function love dot mouse pressed and this takes in quite a few things so first it is x it is y it is the button that has been pressed is touch for example if it's a touch screen and presses which is also for if it's a touch screen i believe this x and y is mainly for the x and y position on screen so let's click here and that would be like 50 50 x y now here you can say if button is equal to one and this is their lift mouse button i think then you can see if game.state.running so only if it's the running state player colon shoot laser and that will shoot laser cool but currently if we're trying to shoot the laser we won't see anything because we are not drawing it so let's get to player and let's put the draw also here so every object can basically contain its own version of the laser so if you have multiple lasers on the screen then every object will handle their own laser so let's go here to draw let's just do it at the very bottom so four and we can just say underscore because we don't need the key laser in pair self dot laser and we can just say laser colon draw and then faded and is faded is basically what's being passed in here just like that let's see if this works okay space and there we go currently they didn't move because we haven't put anything there but now we can create a bunch of cool little lasers and we can not use our mouse button and the reason for that would be let's see ah that should be state like that now we can use our mouse button as well cool so these are our lasers as you can see they're just little dots on the screen there are only little dots because if we go to lasers we're using points if we were to increase this to let's say 30 then it will be massive dots as you can see so it depends on how big you want your lasers to be some people would like them to be really small although then it's kind of difficult to see them oh gosh where's my player nah there we go as you can see it's very difficult to see them so i think free is about a good size but you could go up to something like five or even higher depending on what your preference is 35 is a little big for me personally i'm going to go free because that just looks perfect cool so let's implement the rest of the things into our laser class so next up we want to move the laser so we can go move is equal to a function this function just takes itself now just the lack of the player we need velocities x and y velocities so we can go here and we can say x will for x velocity is equal to the laser speed times math dot cos passing the angle that's the angle we got here so the same angle as the player divided by and then love dot timer dot get fps yet again it would be better to rather put something like dt here just because it would be safer but i don't think it's that necessary for a game this small but if you plan on making this game much bigger then you could definitely implement dt here next we can do the same for the y velocity but this time instead of sin or cause we can go sin like that now we have the x and y velocities we also at some point probably want to remove the laser from the screen and how we determine that is based on whatever you want you can base it on time for example if it's been on the screen for five seconds remove it or something like that i however i'm going to determine that based on the distance it has traveled so let's say it can only go one and a half way around the screen or around the window something like that so we can just say distance for the distance traveled and we can make that equal to zero cool now we can continue to this move function here and we can say self dot x is equal to self dot x plus self dot x velocity we say x velocity because remember that's how fast it moves on the xaxis cool and then we do the cell same for y nice now we want to keep this on screen so we can actually just go here and we can copy this you could possibly make this a function and you just reuse the function constantly because we're copying and pasting this the whole time so it would actually be better to create a function and put this in but that can be your homework if you want to walk the extra mile now for this right here we don't have a radius because remember we're just a dot on the screen we are no longer a circle we're just a dot so here we have the self radius we can just remove that so like that delete now should be self dot x less than zero we set x to the width if it's and there's not the radius of a minus so let's just also remove all of those there we go if it's more in the width then we want to set it to zero and not the radius because we don't have a radius so we're going to set it to zero because remember zero would be this point right here where the window starts same here the y is zero would be this point right here where the window starts on the top next up we want to say how far it has traveled so the distance it has traveled so self.distance is equal to self dot distance plus math dot square root and here first we could say self dot x velocity to the power of two plus self.y velocity to the power of 2 and this will just get us the distance it has traveled from point a to point b there's a part here cool you could use some different math if you want to but this works perfectly fine nice now we have the laser and the laser can move now let's move the laser so i'm going to do that right here inside of this player so right at the bottom and we can just move the laser from here so for index laser in self dot lasers we can then say laser colon move and this will move laser now if you were to run this the laser should move oh gosh it's moving but it's shooting it in the wrong direction okay so we did some wrong math but now the lasers they do shoot so let's just go back to lasers and see what we got wrong oh and right here this should be negative because it's going to move in a slightly different manner now it should go out of yes now it goes out of the top cool now that that is fixed we can have a ton of lasers on the screen i think that's actually pretty cool now never do you really want this many lasers on the screen you want to limit it so we have to basically tell the lasers to destroy themselves once they're completed with all of this once they're done so let's go here to the player and implement that so let's go to the top and we can specify the amount of distance the lasers are allowed to travel so you can say local laser distance can also call this max laser distance if you want and i'll make that equal to 0.6 so they can basically move 0.6 the width of the window before they get destroyed so they can't go the whole width but they can go 0.6 of it you can change this to make it them travel further or less depending on what you prefer we also then specify the max amount of lasers on the screen and that can be 10 you could make it more or less depending on how difficult you want the game to be when you implement maybe levels you could make that let's say on the the most difficult level you can only have like three lasers on the screen at once cool now we need to implement something that will destroy the lasers so i'm going to copy this right here and instead of shoot it will be destroy and this is very basic we can just say table dot remove and we can say from self.lasers and then the index so now here we can also just take in the index so it will remove the laser at that index inside of the table now we remove the laser so down here there we go here we're laser moves we can say if and i'm just going to do this instead of some brackets but you don't have to i just feel more comfortable if i do that love dot distance love that should be laser laser dot distance if that is more than the max laser distance times love dot ooh love dot graphics dot get with and let me just fix this so if the laser has traveled 0.6 of the screen width so that's what we're doing here so 0.6 of this screen width if it's more than that then we want to remove it we can go here and say self dot destroy laser let's pass in self and index the index that we're getting here so this will be the index where this laser can be found which we're using here to destroy it right there now if we run this then as you can see the laser gets destroyed if the laser moves too fast you can make it slower if it's too slow you can make it faster we can only have up until 10 lasers on the screen but we haven't really implemented the whole 10 lasers thing just yet because we can definitely shoot more than 10 if i had to guess i'm going to i'm not going to count that but let's make it free so we can actually see the difference now if we were to run this as you can see there's definitely more than three so what we can do is we're going to shoot laser and we limit it so if the numbers in self dot laser serve the amount of lasers is less or equal to max lasers then only do we want to do this whole insert thing otherwise just ignore it don't allow us to insert another laser so we go here my bad and we run it here we currently only are able to do four because this is less or equal to so you could make it less instead and i will be more accurate as you can see only three at a time now if we were to change this here to let's say 10 then boom bob your uncle we can only shoot 10 lasers at a time we're limited now so you can see there's like a little wait period once i've reached that amount so you can tweak that to make the game more challenging or easier depending on what you prefer cool now one last thing is let's make sure all our buttons can shoot the laser okay closer down works space works the button number five on the numpad works and the mouse works okay so if all the buttons work that means we have done our job correctly we have now implemented shooting lasers in the game in this tutorial we'll be adding collision for those lasers and it will be pretty cool now i have to show you this let's just move this here if we go here and we shoot it splits into two shoots again it splits again and shoot it again now it's gone and this is a very customizable thing that have popped up here so you can make this more customizable and maybe break up into more pieces maybe move faster maybe be bigger or smaller and once you shoot it up nothing happens but we can implement that later isn't that incredibly cool also something you might notice if we were to go here and we were to shoot you'll notice it's a little explosion animation thing where it has a little bit of color once it touches the asteroid nice now i'm going to remove the whole debugging thing not from the game but just from our visual standpoint because currently i don't think we need it but if you do get stuck and some sort of error occurs turn on debugging and see what's happening because especially when we do collision detection which our debugging is exactly doing showing us where the collision happens then that is when it's most important but i'm going to disable it but i'm going to make sure that we can reenable it easily again later cool so let's create a new file just say new file and this can be globals.lua now these are going to be variables that are going to be global scope like massive global scope everywhere this can be used and that's the point of this file so whatever we put in here we can use anywhere within the game so let's first do asteroid size and let's make that 100. we'll be using this asteroid size in multiple files so it makes sense to put it here because we're not going to attach this specifically to an object this will just kind of be there it will be able to be used whether that file uses the asteroid object or not and you want to have show debugging you can make this all capital case just like with this asteroid size but the difference is we don't want to change this asteroid size in the game it's a constant we don't want to touch this except if we're getting the value but we don't want to set a new value we don't want to change that to 150 while the player is playing the game we could but we don't want to show debugging however we might want the player to allow them to show debugging so like if they go into the settings they can turn debugging on or off if there may be a developer or is interested in that sort of thing and we can make that equal to false by default but you can keep it true if you still want the debugging information now one last thing i would like to do is do our distance calculation math here and this will just calculate the distance between point a and point b we can say function calculate distance x one x two so this will or this can be y one as well we can do x one y one x two x two or y two now this will be the x and y position of the first item then we want the x2 and the y2 so this will be x and y position of the second item we're trying to get the distance from you could put this into like your own little tables instead but i think that's overkill so let's just do it like this we can then return just a simple math function so math dot square root so squirt and then first we can go here and say x 2 minus x 1 and then to a power of 2. you could split this up into multiple lines don't get me wrong you could split this up into multiple lines and why not let's actually show you how it will look let's go here and say local test x and then we can go here and you can move that like that anyway here we can go local this y for the y distance difference and it will be the same thing but this time we will have y instead of x like this so remember it's the second y minus the first y so it's where you are going to minus where you are that's very important to take notes off and then in here we can just say this x minus i mean plus this y and this will give us the distance between x and y so this math right here not between x and y but the distance between those two values x 1 and y 1 and x2 and y2 or yeah all right and that is the basics for this right here so that is how you calculate the distance between x and y of two items and now we can close that because we don't need it anymore and also it seems like this dot notation works since my ide auto completes that i'm just going to leave it like that so you just use this instead of slash from now on but in the game code that i'm going to provide you if you ever download the code it's going to use slash and not dot cool so let's remove the debugging stuff from our objects and stuff so let's go here and to the player and here where we take in debugging we're not taking that in anymore it's now global scope and it's called show debugging instead of debugging so debugging right here so instead of debugging we can say show debugging because it's global scope and you don't have to because lua will automatically know but i would recommend you go require global like that because right there so you want to require that is this isn't required to do this is an optional step but i do recommend if you're going to use global stuff here then you can close player now here in main where we pass in show debugging we can remove that and we can actually remove this debugging as well now let's first go to the laser because that's where a lot of the things are going to happen we're going to add a few new things we're going to make them like states so first will be the exploding state and this can have three values it can have a zero for safe a one for up for exploding so if it's currently exploding and then a two for it done exploding and it also in explode time and this will hold how long it has been exploding so if you wanted to be on the screen for like one second then this will allow you to keep it on the screen for one second cool now let's go to move right here and let's first check if it's exploding so if self dot explode time if that is more than zero then we know we are exploding because otherwise it will always be zero but if it's more than zero that means you're currently busy exploding so self dot exploding is equal to one what i actually recommend you do is you set some sort of state to help you of this for example local exploding enum or something like that and it will be a table that is like not exploding and it will keep zero and then exploding and that will keep one and then i think it was the last one for if it's done exploding like done exploding that's equal to two i'd actually recommend you do this instead just to keep things simple for you and for your future self because if you're going to continue working on this then having something to manage it is the smartest idea you can have however once this course is done i'm done with this project as well so i'm not going to add it to me it's not necessary while we're here let's set the explode duration explode duration and i'll just set this to 0.2 you can change this later depending on what you think is the better time to explode so the more you make it the longer it will be exploding now we need to implement a function that once we want to explode we can so we can go here and say explode is equal to a function and just takes in south and this will just explode in quotation marks our laser now we don't we're not going to mess with the explode time just yet currently we just want to remove everything but for right now we can say if self dot explode time is more than explode duration then end self.explain is equal to two and it will just make it explode and it will kind of allow us later to do some exploding animations next up let's maybe go to asteroids so we can go here we can open up asteroids and we can implement our stuff first let's take out debugging we didn't need that anymore and now we should have something that wants to debug but can't there we go and we can change this to show debugging and we can require globals like that and boom now that that has also been done we can now go to game.lua and here it goes asteroid and it adds this we don't need that extra one anymore because that was just for debugging debugging is now global if you turn debugging off everything will have debugging turned off if you turn it on everything will have it on you don't have to individually go change which one has debugging and not so now let's go to the player.lua and then go to the way button where we are at so right here we are getting the index and laser and now we want to check if the laser is exploding so for right now none of this really matters we can just go if laser dot exploding so if the laser is exploding and we're going to make sure if it's 2 then we can just say self dot destroy laser and this destroy laser if you can remember from the previous video it just destroys the laser very simple this is going to become a bit more complex in a second but i just want to get the idea out next we can go to lasers and when we go to explode we can just make it disappear so we can just actually for right now remove that we don't need that we just hit the exploding tutu now once it explodes it's going to set the exploding two two so we should also go here and say if self not self if laser dot distance so the distance it has traveled if it is more than the max laser distance so actually this right here so let's actually just go here instead and let's just go and add and because it already has the first part so if it has to travel the distance of the max it can and the laser dot exploding is equal to zero so only if it's not currently busy exploding then we can explode the laser so we can just go here and change this to explode and this can now be laser colon explode and it doesn't need anything this destroy laser however needs self and index so we will now actually see if it works we'll move this explode up so if it works it should ex or it should disappear once we run it shoot it's gone okay so it does work we can now just make it work better because as you can see they do disappear all right now that we know it works and it disappears let's upgrade what we have so if this explode we can then say self.explode time is equal to math dot seal to make it go upwards explode duration times and here we can just say love dot graphics dot get fps and it should be timer dot get fps yet again i would recommend we actually use dt but in this scenario it's not too important and we can divide it by 100 and this will basically say how long it has been exploding for then we can go here and say if self dot explode time is more than explode duration we can just put that there and exploding is equal to two then now as we know if the explode time is more than zero so if explode time is more than zero it will sit exploding to one for us and then it will be busy exploding and we can draw things here like it is busy exploding like some nice things now the nice things i do want to draw is maybe like a yellow and an orange explosion animation type of thing and it will just appear once it's busy exploding so let's go here where we draw everything and we can just say if self dot exploding is less than one so if it's not one or two if it's zero then we can just do this what we've been doing this whole time otherwise if it is busy exploding we can go else then we can say love dot graphics dot set color and this will be of the outer explosion so the bigger explosion and we can just say one for complete red then 104 divided by 255 and then no blue and you can also pass in the opacity in case they're pausing and we can set the color for the inner explosion so the smaller explosion inside to give an example of what i'm talking about let me just go here if i shoot as you can see it's paused but as you can see there's like a little orange part and then inside of it there's a yellow part and that's what we're currently doing we first did the orange part we're now going to do the yellow part and let's actually just copy this lava color and yellow would be a bit more greenish two three four and she gives it like a yellowish color we're gonna go here and say love dot graphics and we can draw a circle dot circle and you could of course make this way more complex and cooler but i think this is fine for now fill and then self dot x to give the x position of the laser and then self dot y to get the y position of the laser and then we want to make it a spatial size we first just make it a seven that's about that's not very big but the bigger one and we can just get times one the bigger one however will be times one point five so it will be a teeny weeny top bit bigger so around ten whilst this one here this one will just be seven you can even remove that if you want and just have a seven there but this would be seven and this would be almost ten maybe ten but yeah you could make this more like two and you could put this in a variable to make it a set size and you just add to it but yeah it's up to you you can change this so it's not math it's just a number that you put in there it's up to you now let's go look here if we run this then at 62 instead of our laser we have a problem it's right here and this should not be and this should be times my bad and now if you run it we should not be getting any errors cool they're not going to quite explode as we want just yet because if it doesn't hit anything we don't really want that explosion animation to happen it should just disappear otherwise it would be kind of weird if it just randomly flew and then boom it exploded then that would be bit weird cool let's go to player so first this laser move we don't always want to move laser if it's busy exploding the laser should just stop moving otherwise it's just going to hit an asteroid and keep on moving which is a bit weird but could be cool if that's what you want so we are already doing the whole explode thing here so let's go here to where we say exploding is equal to two and let's add another if statement above it and this one can be if it's one i mean not two but if it's a zero so if it's zero then we just want to move because then it's not currently exploding so you can just go like this but yet again we sit with the problem it can move and it can explode on the same time so you can just go here and say else if so either this one else this one but if it's not zero or two it's not going to do either of these so if it's one it's just going to stand still and it's not going to remove the laser from the screen because here it removes the laser from the screen and here it moves the laser but if it's one it's busy exploding and showing us that orange and yellow so we don't want to then move it or destroy the laser just yet all right now let's go to main and here maybe an update i'm going to hide this we can now go and go for and we don't need the index we just need the laser and we can just say player dot lasers and here we go laser colon or we don't need to expose it first we need to calculate the distance so if and then we can use calculate distance which is coming from that global file so require globals so that's required distance and then go laser dot x laser dot y so this is the first one this is where we are and then we need to go or then we need to add where we're going so the asteroid asteroid dot x and the asteroid dot y and this will calculate the distance between the two if it is less than the asteroid dot radius so if this right here is less than this radius of the asteroid so if it has entered the radius of the asteroid basically then we want to laser curl and explode then we want to explode the laser let's see if that works and that's going off screen and there we go pew and it is although it's not doing much it is there so we give it a shoot shot again as you can see now if it enters or almost enters depending on how the circle is positioned then there we go now if we were to turn on debugging here so if we were to rub globals again and we were to make debugging true we could see where the laser will explode so the red circle is where it will explode so it won't necessarily explode on this part right there it will explode once it hits the red circle cool now once we do this we need to also destroy the asteroid so let's go here to asteroids and we can add another function right underneath move you can also call this explode i'm going to call it destroy because you're destroying the asteroid but it's not necessarily exploding so destroy is equal to a function and this takes itself the asteroid table so this asteroids table will be provided to us it is to basically get the asteroid you want to destroy you could put this somewhere else so you don't have to make it part of the asteroids in fact it would make sense if you didn't make it part of the asteroid but it also makes sense if you do it's up to you if you make a part of the asteroids or not but then we also want the index of the one we want to destroy and then we want to take in the game as well so the game state i'll show you one we'll need all of this in a second first let's just remove it so table dot remove and then from the asteroids table the index so these two are passing in so let's quickly remove game for now when if we have this we can then go here let's let's include game it's not that big of a deal adding it here then here we can say asteroid colon destroy because if it's here then that means the laser has penetrated the asteroids we need to destroy it and we can say asteroids then the ast index that we're getting here so this is the table and this is the index and you can just pass in game as well game which is right here if we save this then the asteroid should also be destroyed once we hit it as you can see it's gone i'll do it again and then my player is gone very annoying bug i go here shoot gone now we want to split the asteroid up into multiple smaller asteroids so let's go here to asteroids and where we say destroy we can then go local min asteroid size and this will be the minimum size an asteroid can get and you say math dot seal and you could put this right here you could put it like up here that will also be perfectly fine i'm just going to do it here because why not and we can say asteroid size to the current asteroid size we have divided by eight you can change this to fit you however you think would be best then if self.radius if it's more then min asteroid size then we want to basically split the asteroid in half so table dot insert asteroids table so into this table right here an asteroid object with the position of self.x so the current asteroid exposition self.y solve the radius and then the game dot level let me go here and say self dot radius if we go up here to draw or not draw but here we're taking an x y the size and then the level and here we could make another one and now we have two new asteroids now if you wanted to you could make this go you can go another step and add another asteroid but only once one of these asteroids has been destroyed so then it splits up into three smaller asteroids so once the second smallest asteroid has been destroyed you split it up into three so the big asteroid that splits into two is your smaller asteroids and then this will also split into two but you could make it split into three if you're not too lazy however i'm going to leave it as is because i'm fine with it as is if we run the game and we shoot there we go now it's split into two there we go now that's also split into two but you could make it split into three if you think that's better and it will be more challenging we go here we shoot now there's two and then you can destroy the wrist and then here we go and the pvp gone and yeah that is the basics of adding collision detection to our game now we're not going to implement quite everything just yet we're going to explain the basics of destroying the player but a lot of the things that we're going to also implement will come later along with different parts of this tutorial so things will maybe be coded out for the future sake as other things will just be lit for later yeah so to give an example of what we'll be doing we go here we fly boom there we go so first let's open up the globals i want to add another item here so destroy asked for asteroid now you could put this inside of the asteroids object and i would i would encourage you to do if you want to however this global object will make it a lot easier to manage this in the future since we will be doing using this destroy asteroid in multiple files cool next up we can open up the player and it will be a lot like our laser course with collision but it won't just be for the player so a lot of the things will stay the same but just a bit modified for the player for example local explode there for exploded duration and that would be free so this is how long in seconds and the scenario three seconds then we can go here and we can say explode time so how long it has been exploding for so we'll make that zero exploding so if it's currently exploding we can make that false and unlike with the lasers we don't need a third item in exploding it can just be either exploding or it's not exploding we do need a third one since in usually what will happen is if it has finished exploding unlike with the laser where it just disappears and you know you can just shoot another laser here if the player has exploded then once the explosion finishes we'll start a new game or not a new game but just we'll put a player back and we'll respawn the player basically and we'll do that in a future tutorial cool now first thing we can do is we can close this we can close this and we can draw the player exploding so right here before the frosting because we don't want to frost or move or things like that if the player is exploding so we can say if not self dot exploding so if it's not currently exploding then we want to do all of this and here we can just say oh we can just end for now it's fine and we can invent this so if the player is not currently busy exploding allow the player to thrust forward and to move around and whatnot however if the player is exploding then do something else so draw something else and this will be very similar to our laser what we have drawn here so this right here so we can actually copy that it will just be modified a bit and we can paste it here so first we want the largest circle to be just pure red just to give it more intensity because the ship itself is much larger and much more complex than a laser so you want the ship's explosion to also look like it means more because it does mean more than the laser the laser explosion disappears faster and it doesn't it only has like two colors and it's very small here we want it to be rather large and to have more than two colors to show hey this is some big thing that exploded here this can stay the same however this time we can use self dot radius instead because we now have a radius to work with instead of just a dot same here we can say self to radius and then just times one or we can remove it and it doesn't have to say times one at all then here we can say one five eight to give it a nice little color here and then if we were to copy this paste it here and in here we can say two three four this will be the smallest one and it will be 0.5 so you can see how they scale in size now that we use times and now you'll understand why we use times to help it scale without us having to do much and this is how it will look once it explodes we'll take a look on how that looks in a second currently let's actually just allow the player to explode so let's go to the move player section i'm just going to hide this draw in the move player section this whole part here we can just say if not self.exploding so if the player is not currently exploding then we can do everything and then paste that in there and you can just invent and there we go so if the player is exploding now you can see if the player is exploding we're going self dot exploding is equal to self.explode explode time could you please autocomplete there we go if that is more than zero so this will return true or false if the explode time is more than zero then the player is exploding cool so this will only execute if it's not exploding however take note that we don't want to actually stop the laser so this whole section here for the lasers we can move that to underneath the end of this if statement so there's this one right here it does not hold the lasers the lasers can still move and stuff if the player explodes the player explodes but lasers are not affected by it we can then save and then finally we can implement an explode function so as a function takes itself and now we can just say self dot explode time is equal to math dot seal and then specify explode duration times love love dot timer dot get fps there we go so this will explode the player for us we can then go here to globals not globals my bad we then go here to the main file and here where we have an update we can go to when it's running so right here when it's running then we have our move player first then we do our asteroid stuff then here in the asteroid stuff we can go if not so the player is not exploding so player dot exploding so if the player is not exploding we can copy this line of code for the laser like that we can paste it here and this will allow us to check if the player has collided however we don't need this for loop so we can just remove that on indent we have a calculate distance but this time instead of the laser it's the player so the player x player y and then player explode and in here we also want to go and then instead of saying asteroid destroy you want to say asteroid or destroy asteroid is equal to true and this is in our globals file destroy asteroid if this is true we want to destroy the asteroid however we don't need to set that here we're only setting it here if the player specifically explodes into an asteroid and you will understand more about why i did this in the future or why we are doing this then here we can say else so if the player is exploding then player dot explode time is equal to player dot explode oh gosh i can type player dot explode time minus one so it will decrease if the player is exploding then after this for loop we can go if so if we want to destroy the asteroid then you want to sit destroy asteroid to false again because we're destroying the asteroid and then we got asteroid colon destroy and we just actually copy this little asteroid destroy thing because it's the same code now one reason why we are doing this right here and not this here as well is because here there are multiple lasers that's going to try and destroy the asteroids so if two lasers collide with this with different asteroids at the same time we're going to have a problem because what is it going to do destroy asteroids is true so what if you understand what i mean here because if two lasers collide against two separate asteroids but a destroy asteroid is true it is going to be incredibly confusing anyhow in there we have our asked index and we have our game and then here we can move the asteroids now let's run the game and see if we explode boom and yep the rest of the asteroids are moving however if we go and we fly against an asteroid we can still see our player we don't want that we don't want to see our player so we should go here to player and you should make sure we got the if else statements correctly so if not exploding then it everything is just held in i mean this is for the moving it's not for the drawing okay let's go to draw now let's see here if not exploding then we can do everything in here however if the ship has exploded then let's see here what's happening all right i see so here we already have a bunch of things but this is only for the thruster we need to include everything as well i kind of missed all of this so let's just go like this and we can just cut and we can go here and we can just say paste so now we'll not only just not draw the thrusters but will not draw anything else while we are exploding so if we go like this and now if we were to try and hit an asteroid we can't see our player anymore and there we go we've implemented collision detection for the player and hello everyone if you're enjoying this tutorial please leave a like and subscribe for future tutorials in this tutorial we'll be adding lives to the player so once the player explodes instead of the game just ending they have a few more lives they can spin before the game is completely over so let's get started with that first i want to give you an example of what we currently have so if we were to go here and say love dot what we currently have there goes our asteroid off screen so it should appear out about there somewhere yeah and boom we explode and we just kind of continue just very boring however when we explode that shouldn't happen or when we hit something that shouldn't happen in fact this should happen so this is an example of what we'll be doing so as you can see at the top our player lives are there when we hit an asteroid the player lives they go red they disappear and we start in the middle of the screen again and we can use up all our player lives until we are no longer there once we are no longer here then game ends the last asteroid does not explode once we hit it that is to prevent a bug but you don't have to worry about that bug because i'm fixing it here for you anyways but let's get started so first we want to now take in the num lives so how many lives the players should have then down here we can just say lives is equal to num lives or by default they can be free so if you don't pass in a number of lives it will be free by default next up let's draw the player lies so maybe right here underneath draw we can say draw lives this is a function that takes in self and faded cool we can copy a lot of things from this player draw so if you do not mind i am going to copy basically everything from here because a lot of this code is copy paste from what we already do in draw because first we set the opacity depending on if it's faded the opacity will change and in here is where it fades a little bit from what we do usually against what we want to do we'll still keep a lot of this for example this right here we want to keep this so let me just delete this part here and this laser part as well we can keep this polygon and this color we can remove the debugging because we will be doing debugging on it and we can also remove all of this and now we have a bunch of the code already given to us because we have already coded a lot of this nice let's just indent this to a there that's much better now first we want to see what color our lives should be because if we go back to this example i have and i can just move it over and as you'll see if we have three lives then it's white the same color as the ship if we hit an asteroid then it becomes yellow and if we hit an asteroid again where we only have one live lift if i don't miss the asteroid which i did again my aim is terrible and now it will be red because hey you should watch out buddy you only have one live left and that's what we want to do here so we want to set the color depending on the amount of lives the player has so first we can say if self.lives is equal to two so they have two lives then we can copy this right here paste it there and we'll modify it in a second then we can say else and this will also contain an if and then else so we're going to go like this and then we can just copy this and paste it here and we can remove this now if they only have two lines left we want to make it one one and in 0.5 and this will make it a kind of a yellowish color if they have one life left then we want to make it red but not completely red just a little red so it will be red and then 0.2 green and 0.2 blue and in here if they have three lives so if they have three or more lives in the scenario because there's a two and a one if you want to add like five lives you can maybe add more colors or you can just make them all white until it hits two and they will change color anyhow if they have one will be red and if they don't have two or one if they are free it will be white and in the draw lives we need basically to get the x and y positions or to give it a default x and y position you can make this like a more globally state one like put it here or even put it here it doesn't really matter too much in this scenario i just want it here at the top of the screen so i'm going to do an easy local x pause y plus is equal to 45 and 30. so x would be 45 and y would be 30. so 45 from the side 30 from the top then we can create the for loop so 4 i and one to self dot live so the amount of lives we have and we want to basically draw free lives so you can just plop that in there because the lives are the same shape as the spaceship and we can go if we are exploding so if self dot exploding then and then if i is equal to self dot lives so the amount of lives you have so we don't want this to happen if we have more less lives on the screen than what we currently have or more you know they want to basically make the heart completely red so love dot graphics dot set color and then one zero zero so basically once we explode then it should change the color of the spaceship to pure red until the explosion is over in which case it will switch to whichever colors are here cool the on here since we can't just draw the spaceship on the same position or at the same position everywhere we need to specify a few things here to make the the lives go in different locations because if we don't then the lives here there wouldn't be three lives like i i wish i could show my cursor here but there will be like three lives there there will only be one and two others on top of it so we need to specify where to position it so instead of self.x here we can go and say i so the current index we are on or the current position times x position and this will give it its wanted x position and then as for the self.y since the y will never change unless you make it go in the x direction instead of or in the y direction instead of an x direction then the y will never change so why pause but if you wanted to you could make the heart go from top to bottom instead of from left to right it depends on what you want personally i think going from left to right is perfectly fine but once you have done that then boom we are basically ready to go now we also need to remember that we don't want these to change angle with the spaceship you could there's nothing wrong with it it's just if you make a change angle with the spaceship then that it could kind of make the player a little bit confused about like while he's playing and suddenly he sees the spaceship hearts moving as well it could be cool but it could be very distracting personally i think it's too distracting and i'm going to remove it but you don't have to if you think it's a cool feature instead we can go here select all of these and remember this view angle we created here at the top that is the default angle or spaceship is always at so we can just specify view angle instead so now it will always face 90 degrees and never change but if you want it to change then you could then again 100 do that i just don't care to make a change cool next before we continue i would like to go to globals and make sure this is here just to make sure that is there so if you forgot about this just put it there nice so next up we can just go to the main file and let's draw our lives so let's go here and we can say player colon draw lives i know if the game is paused so game dot state dot paused because if the game is supposed to want it to be faded and here we go that shouldn't be an end symbol my bad that should be eight times okay now let's try it there we go so now our lives are right up here as you can see so that's nice currently if we hit an asteroid nothing's going to happen we're just going to kind of die and respawn and then hit them again and again again we don't want that to happen anymore because we now have lives we want the player lives to decrease and the player to restart from where he was where she was so let's go to the top and let's see and this is not the right file we go to menu and here it says explode time and then what the explode time does we can go and say if player dot explode time if that is equal to zero then we want to go if player.lives minus one is less than zero meaning if the player doesn't have any lives left then game colon change game state to ended because the player amount of lives minus one is less than zero meaning they have like negative one lives left then end the game and we should make this laser equal to because yeah just because but you could make it less than one if you wanted to because this city player has one life left now they hit an asteroid now one minus or now the player lives i mean changes to zero and zero minus one that is negative one and that's less than zero so in return it should change the game state to end it because the player has zero lives left then we don't want the game to continue and then we can just say return because we don't want this to continue the loop or to continue to continue this loop nice otherwise just always go player is equal to and then a new player and in the player dot lives minus one and there we go so now the player will always have one less of a life once they hit this or once they finish exploding and i should save without formatting now if you run this and let's see what happens when we hit this asteroid we lose the life and we start back at the screen the reason we started back at the center is because we create a new player and when we create a new player the player by default is in the center of the screen because that's what we hard coded here in a sense we basically said hey once we create a new player put them in the center x and y and that's what's happening here we're creating a new player and storing that player in the old player variable so don't get too confused here we're just creating a new player object storing it in here but it kind of has a lot of the old player stuff by that i just mean the lives so yeah now if we hit an asteroid we go we lose a life now we have less lives if it's another asteroid we lose life let's hit another asteroid here and there we go now the game has changed to ended state okay meaning it's basically over now i still want to do a few more things before we continue so here if destroy asked we can now go if and then else now instead of the else we can now put this and in this if statement can check player.lives minus one if that is less or equal to zero then we want to go if player dot explode time is that is equal to zero as well then we want to set this here as well so basically if the player lives is less or equal to zero basically the same check we did here however this check will not execute quite as quickly because this one will execute after this check so this check may be false then this executes where this check could be true but it executed after that so see this executed after just right here so after the check so player lives here could still be two then we go here and then player lives is one because remember code goes from up to down they're doing the same thing here but now it's here at the bottom and since it's going up to down it will trigger this and we check if the explode time is equal to zero then just do everything as normal however if the explode time is not equal to zero then it just don't do anything at all the reason for this is once we basically finish the game yeah once we basically get to the last asteroid and we hit that asteroid for player it can cause a few issues and this will just cause or this will just fix a bug in the future but you don't have to worry too much about this just put that there save our game we run our game and now we fly we hit we respawn we wait for our targets to come back we fly we hit we respawn and now for the last one we fly we hit it doesn't get destroyed immediately and that is exactly what we want because that could cause errors because let's say that's the very last asteroid before we go to the next level and it wants to go to the next level once we hit it but once we hit it we and we have our last life there it's not going to be a good match because let's say we only have one life left and there's only one asteroid left once we hit that asteroid and we lose our one life it wants to go to the next level and this is in the future once we implement levels but if it wants to go to the next level and we just lost our last life that's going to cause a few errors and so we say if we hit against an asteroid with our last life then it's game over then we don't get that point or anything like that in this tutorial we want to add a menu to our game so to give an example of the menu we're going to create we go here we have our little player circle we have a quit we have a settings and we have a new game if we click on quit it will quit the game settings will be your homework so clicking on settings will do will not do anything and then clicking on new game will start a new game then let's go here and then once we reach our last life it will give us a game over screen but we have yet to implement that but once we finish implementing that then after the game over screen it will take us back to the menu screen and that is what we want to do okay but this tutorial is going to be pretty long so we won't be doing the ending screen just yet so first let's go here to the game.lua file and let's go to the top and here where it says state i want to change all of the other states to false and the menu state to true so by default the menu state will be true meaning once we basically start up the game it will give us the menu state not currently but it should give us the menu state cool next up let's create a new component so component new file and then button.lua and this will be the buttons we want on the menu screen unfortunately the menu screen is legitimately just buttons so we have to do this before the menu screen we can just say local love is equal to require love and in local text because we're going to need text to display the buttons is equal to require components there are components dot text or slash text depending on if dot text doesn't work for you you can go slash both of them work for me we can now create a function and call it button it will take in quite a few things so we'll get to that and then return button so let's get everything already ready in here let's just say return and then there now a button will take a lot of things first once we click a button we want to execute a specific function for that button we don't want to implement that function inside of the button itself because if we do that then it could cause a little bit of a problem with us needing to basically for every scenario coded by coder function so it's better to pass in a function and then to execute that function on button click so we can say func for a function we want to take in also the text color of the button the button color itself the width of the button the height of the button the text on the button where the text should be aligned to so the text align the font size and i know this looks like a lot at the moment but believe me we'll go through all of them slowly the button x position the button y position the text on the buttons x position and then the text on the buttons y position cool so now we have the basics of a button here now first let's say local btn text for the button text is equal to an empty table and we'll get back to this in the future then our function is equal to the function passed in or if there's no function passed in we can then say or function and we can just remove this and or we can just not remove it but just bring it to the end of this statement so one liner function print and we can just print this button has no function attached so basically if they save or if they click the button and they didn't add a function to it it will print out to the console hey there's no function attached to this button you can't click it next up i want to position the text of the button now if you remember from the previous tutorial or from the previous game we made where if i were to go here as you see our buttons they have a little space here but if you could remember from the code we wrote for these buttons is that the text in the button is positioned relative to the button itself meaning if we position a button here then and we say the text is 10 pixels to the right then it's going to be inside of the button by default 10 pixels to the right meaning the text isn't going to be 10 pixels from the border of the screen it's going to be 10 pixels from the border of the button if you can't quite remember what we did here i do recommend you maybe go back to the files and just go check on how we created that button and maybe that will bring back some flashbacks but it's not a big piece of code we have to write for that so let's quickly do that so if text wise if the y position was provided then ptn and in text dot y will be equal to text underscore y plus button y so plus the y position of the button because it needs to be the amount we give it plus the button otherwise you'll have to manually calculate if you wanted on the center of the button where the center of the button would be relative to where we already have it so we anyways have to do this later on if you want the ticks to be inside of the button and you can still make the tick outside of the button even with this method here you just use minus or just massive value depending on what you want to do anyhow let's continue because it's a big file then we can hit it again again just go like whoop go like this and then do this but without this now you have a choice here and let me just go back to y here you have a choice you can either do this if else statement or you can go here and say y is equal to and then button y and you can remove this part here this will work just as well so it's up to you what you want to do however i'm going to use this else statement here you're going to copy this and now you can do it for x and in here you can just change this to x and there we go we have just as quickly added our x and y positions for the buttons or for the text on the button now let's go here and we can just say text color is equal to text color or if they didn't specify text color we can just make it white so r is equal to one g is equal to one and b is equal to one like that and we can do the same for button color so button color is equal to button color or and we just copy this one here however the difference will be is that by default the button color should not be white because the text is already white so if they don't enter the text or the button color you want to make sure that the text is still visible since the button would now be black you can swap these two if you want to but yeah and we can go the width of the button is equal to the width we enter or 100 and then the height of the button is equal to the height we enter or 100 the text is equal to text or and you don't have to specify or with any of these i'm just doing it for in case i want to leave something out there in case you might want to leave something out in the future the more customized this is the more things you can later on leave out anyhow and then no text added so new text was added we can just put that there or you could force it it depends on what you want the text x position is equal to the text position passed in and we're not using this text position here quite yet but you will see in a second where we use that or we can make it the button x or if you didn't specify at all we can just make it zero we can do the same for the y text position where all the x's are just y's and you can go here and say the button x position is equal to the button x position or zero and in the button y position is equal to the button y position or zero cool and then finally we need to use a text component that will put the text on the screen for us and we already have a text component that's been imported right here and every button will have its own text component so we can just say text component is equal to text and then we can just pass in all our values so we can say text btn text dot x so here we use the button text but here we specifically use the x and y given to us and you can of course do the same but for y and as you can see also our documentation is here which is very nice and this is some documentation we did a while back so here we go and as you can see we did a bunch of documentation and now the documentation appears as i'm trying to edit this so that's pretty neat so now we know we need the font size and the font size is passed in and then also whether we want it to fade in which is false we don't want it to fade in unless you want to add some animation fade out is also false the width and then the text align like that and then finally for the opacity we can just pass it on we don't want to change the opacity however if you have buttons in your game you want to make this a dynamic value so very value passing as a variable and not just one so it depends on what you want to do if there's buttons in your game and not just any menu so when they pause and you want it to fade out when you pause then making this an actual variable would be better because you can change the variable later let's draw the button because i actually want to get the button on the screen so draw is equal to function self and we just add in our comma then here we just say love dot graphics dot set color so the color we want the button to be and we can go self dot button color and then just specify red and we can do that for all of the colors colors we have so let's do that and there we go now the color will be set to what we want the button color to be then we can draw a rectangle so love dot graphics dot rectangle and you can just say fill this rectangle or don't fill it it depends on what you want but i would like to fill it since it's a button it makes sense to fill it self then the button x self dot button y self dot width and then self dot height and it will draw the button for us next up we need to do the same but instead for the button we need to do it for the text and we also want to reset the color back to white so here we can go here but instead of button color we now go text color and you can just say self dot text component dot draw just colon draw instead and this will draw the text component for us because it already has its own draw function cool now that's the basics for the button we'll be getting back to this a little bit later in the tutorial i just want to get the button on the screen right now next we can go and we can create a new file in the states folder called menu.lua because the new state we have and you can require love so local love is equal to require love local button and it should be with capital b is equal to require components.button and then we can say function menu takes in nothing yet and then we can just return a table and we can return menu and this will return the menu for us now we can just take in the game and we'll get to y and then the player and we'll also get to y next we want to draw the buttons and the buttons are pretty big so local and let's just draw one for now buttons is equal to and then here we say a new button the function we have let me just say nil for now because there's no function then the text color which can be nil and then nil again or the button color the width can be love dot graphics dot get width divided by three and it will give it a nice see rather smallish width and then the height can just be 50. the text can say new game it can be aligned in center i need to make that okay see the text size can be h3 or the font size the button x position can be love dot graphics dot get with divided by three and it'll kind of make it a little bit in the center and i love that graphics that gets height and this is for the y position and this can be times 0.25 and it will kind of make it go a quarter way down okay so these are buttons we have we'll add more a little bit later so here we can just say draw as a function is equal to function taken self for and then underscore button in buttons so for every button we want to draw it we just call button colon draw cool we have just created our menu we'll get back to this a little bit later we can go all the way up to load and now we don't want this start new game anymore because we don't want to start a new game as soon as we start to or as soon as we boot it up we want to go to the menu first so you say menu is equal to menu game player so just passing these two into the menu so the menu has to be below the player and the game now here in the love the mouse pressed we can just add a global global scope variable we can go here else and just say clicked mouse is equal to true so if the mouse has been clicked we'll use this later but we don't have to worry about it now let's just say it exists then you can go down here and where it says if game state is running we can go all the way to the bottom and we can go else if game dot state dot menu so if it's the menu state and you say clicked mouse is equal to false by default and we'll get back to this a little bit later as well and finally here in draw else if game dot state dot menu and you say menu colon draw now when we run the game we should be able to see a button on the screen okay it was the first attempt so oh okay we haven't imported menu yet that makes sense so we can just go here say local local menu is equal to require states dot menu there we go there we go so we have our first button it just looks like text because the button color itself isn't a different color we could if we wanted to change the button color to be something different so here is our menu where we set the button color which would be this one we can go r is equal to g is equal to one and in blue is equal to zero now this should give us a yellow button so there's the button i just made it the same color as the background to kind of made it more mystic so you know so it kind of looks like there is no button but there is actually a button let me just say nil back here again and we have just created our first button now let's draw our cursor or mouse because we go here we can't really see our mouse so you can just go if not and in game dot state dot running and we're not putting this inside of this menu checked state here we're putting it inside of a not game state running the reason for it is because we sometimes you want to see the cursor even if the game state isn't necessary running for example on the game over screen we might want to see the cursor in the settings screen that's maybe another state depending on how you code the game you want to still see the cursor in the paused state you still want to see the cursor so it depends on what you want to do here here we're just saying if it's a running state remove the cursor because we already have the player on the screen we don't want the cursor as an extra annoyance and we can just say love.graphics.circle and we can specify fill mouse x mouse y and a 10. if you want an extra nice kind of challenge you can draw the player cursor the same way you draw an asteroid so then the player cursor is an asteroid that can be pretty cool or you can make the player cursor like the spaceship as well but then you move it with your mouse it depends on what you want personally for me this little circle here that's all i need as you can see here so it's a nice little circle that just serves my cursor now let's finish implementing the button because it's a pretty big thing we gotta implement but we did the biggest part so it's not that big of a deal now so first i would like to add a function to make it easier to change the button color now i want to wait to make the button color not only settable outside of setting the button color on create but to also make it easily setable anywhere in the game so you can say set button color you can do function we take it self read green blue then here we say self dot button color and i'm just going to copy this because this is quite a thing to type out we can go here say that is equal to and we just say red green and blue respectively there we go now it's very easy to set the color we just say set button color and you specify the number we don't necessarily need to specify the rgb anymore next we want to do the same but for the text color so i'm going to copy this paste it and i said i'm saying button color we can say text color red green blue but instead of button color we can say text color easy now bloated raw we can also get or set a few methods here to get the position of the button and the position of the text so get pause you could also make this get button pause it depends on what you want to do but saying get button pause will kind of work with all of these like set button color set text colors things get button position would be smart pass in self and we can just return self dot button x and self dot button y we're just separating by a comma so we're getting two values from this function two of them not just one so take note of that we can then go get text pause and we can actually just copy and paste this to be honest so get text pause and instead of button x and button y we say text x and text y cool we have just implemented a ton of functions that could be useful in the future only two more to go i also want the function that once we click the mouse like once we click it should basically execute the function we have passed in here so down here let me just say click is equal to function takes itself and we just say func so it will just execute the function we have doesn't do anything special that's all it does it just executes that function cool and then the last one is just check hover so we're going to check if we're hovering over the button so the cursor is currently hovering over the button that is equal to a function that takes itself the mouse x position the mouse y position and in the cursor radius then we can just do this i just paste it in but i'll explain it so you first get the mouse x and then plus the cursor radius and i have explained this quite a few times especially in the first tutorial where we did the balls basically if they circle where we have a circle but we want to add the radius to that circle in this scenario since the button x is here we want to add a radius to it both ways that is why the button x here has the plus radius and then the button x here as the minus radius if you haven't seen the previous tutorial where we did build a game where we like play around with balls then i do recommend you go watch that tutorial because it is quite a good intro to this tutorial as well so i don't have to reexplain this right here because that just does everything the same as what we did with our player back then so we just check if the mouse x and y is above a button x or and y if it is we return true so here's the x and then here is the y checking if it is we return true otherwise we just return false cool and that is all there is for the button next is the menu let's finish up here so let's go here and create a bunch of functions we might want to do so local funks is equal to a table first we have our new game so this is when they click the new game button that is equal to a function and this function just goes game colon start new game and we pass in the player and that is why we need the player and the game passed in we also want a quit game function so if they click the quit button which we'll put in a second so quit game is equal to another function and then love dot graphics dot crap exactly event my bad dot quit and this will quit the game for us once we click the button cool now we have our two functions we want to use this button here i'm going to copy and paste it three times first here with this nil i'm going to pass in funcs dot new game take note however i'm not passing in brackets i'm not doing that i'm just passing in the name no brackets take note of that and here at the bottom one you can just say funks funks dot and then quit game yet again no brackets okay then with this button here we can change the text here to settings for the settings button and since all of the buttons will be positioned below each other the xaxis so this git width part right here can stay the same but since they're pushed below each other we can change this right here to 0.4 and that will mean that that will make this button here a tiny bit more below this button right here which is the new game button and in here of course we can say instead of new game we can just say quit and instead of 0.25 we can say 5 5. nice so we have just created our buttons and the functions that go with them now let's see if they get drawn and there we go new game settings quit now we need to do a few checks so once we like hover over a button we wanted to change color to red and if we click a button we want to execute a specific function so let's go down here and first we can say focused that will be in empty string and then we can create a function called run and this function just takes itself and if we have clicked we're gonna get the local position of the mouse so mouse x and mouse y which is equal to love dot mouse dot get position as we return both the x and y position and then we can go for name and button in buttons so the buttons we have here meaning check if button and then check hover which we have just implemented you can pass in the mouse x and then the mouse y if you wanted to you could have just made this mouse x y already implemented inside the chair cover but here i just pass it in because why not and we can pass in 10 and this will be the cursor radius we have i recommend you make this a variable instead that's maybe global or passed in or something like that because if you ever want to change the radius of the cursor then you have to come back here and change it as well so i recommend you make it like a variable and maybe pass it in here or something like that anyhow so if the cursor is hovering above the button we can just say if clicked and we get clicked passed in here then button colon click so we want to execute the button function we have and it's itself.focused and this is basically if the button was not clicked in a sense but it's not inside of an else is equal to name or we make it equal to name and you go button and then set text color to 0.8 0.8 0.2 and it should also be 0.2 as we'll give it a nice reddish color when we hover over it else we want to say button set text color 111 currently this focused we are not using it we'll use it a little bit later but it is there for once we want to use it cool the menu has now been coded but we are never executing this run yet so we need to go and execute this run now it is pretty simple we can just go here to main.lua here we say mouse clicked is false we can just say menu colon run and then mouse clicked or click mouse there we go and just like that we have implemented the menu that was like the last line of code however we hover over we were not getting anything yet so something might still be wrong however the buttons work so if you go here click quit it works if you go here you say new game it starts a new game so the buttons work however the color is not changing yet and right here where we have this love graphic set color this should actually be self dot text component colon set color which if we were to go to the text component here it has a function called set color where it sits the color for us as well so it has its own color function we're going to take this what we have here and we can paste it in here that is why it didn't go the color we wanted it to go to now we have our button colors as well if we click on settings that will do nothing but just print out some text if we click quit that will quit the game and then finally if we stay new game it will start a new game where we can crash and we can shoot and what not all right that was a pretty big tutorial well done if you sat through the whole thing so in this tutorial i'll be telling you all how to install lua rocks on windows now as far as i know there are three ways you can install lua rocks on windows the first way you can do it is by getting the executable the dot exe file downloading it and then just using that however it doesn't work for me so i'm assuming it also doesn't work for a lot of you another option is is to compile it from a source meaning you have to take the source code for lua rocks and you have to compile it yourself which i don't want to do and i doubt that anyone else would want to do now the third option is to use windows subsystem for linux so this is basically where you have a type of linux on your computer and i'll be showing you how to not uninstall or set up windows subsystem for linux i'll show you how to work with everything you need to do in order to install everything you need to use for lua rocks now to make sure we know how it works i created an example which we can use if our full screen this so here we have a main.lua and this file sits here right here so there's main.lua and there's text json which is these are my documents now here we just read the file as you can see here just in the dashboard we read a file and then we take that file which has json inside of it you don't need to know what json is you can just copy and paste this into your own text.json file anyhow then we decode it into a lua table so we take the json and we convert it into a lua table and then we access the content inside of it and we're doing all of this using the lunar json module which we installed through lua rocks so let me give you a walkthrough on how to set everything up first you need to enable windows subsystem for linux or wsl you can just say turn windows features on or off if you click on that you should be prompted with something such as this just scroll all the way down until you see this windows subsystem for linux if it is not checked then check it so mine is currently checked because it is already turned on so you need to check yours if it's not already turned on then you can say okay and it will install it for you this will take a few minutes so just give it some time after it has installed it you want to reboot your system so it can complete the installation you want to go power and then restart it's going to say it's updating but all it's actually doing is installing windows subsystem for linux now once your system has rebooted you need to install ubuntu luckily you can just go to the microsoft store so microsoft store right here microsoft store and in here you can just search for ubuntu i've already searched for it ah there it's gone two like that and then you can just scroll down until you see ubuntu 18.04 lts you can click on that and here it will say get you just click on get and it will download and install ubuntu for you once this has been completed you can just scroll down here and you'll notice this right here so this is the command you use to start this ubuntu system now i'm going to copy that so ctrl c and then we want to open up either the powershell or command prompt so either command prompt or powershell i'm going to use command prompt so i can look cool open that up now to make sure you look like a real hacker you have to say color o2 there we go now what you can do is you can start up your windows subsystem for linux by right clicking right clicking will paste whatever you have inside of your clipboard in this case i copied this so it pasted this and this will start up ubuntu for me now if it's your first time starting up ubuntu with the windows subsystem for linux then you'll have to enter a username and password this can be anything you want just keep it simple so you never forget it then once you're here it's pretty simple first you want to sudo apt update like that press enter it will ask you for your password you say you put in your password and it will commence to get all of the latest packages it has then you want to say sudo apt update and this will update your linux system you have now i just did an update so i don't have anything to update but it will prompt you yes or no to update all of your packages just say yes once you've said yes it will update your linux system to its latest version now that you have this you want to install lua and lua rocks so you can just say sudo apt and just for in case you don't know you can also say apt cache search and this will search the repositories for what you need in this case if i say lua 5 then here refers that everything i can download now you can choose between lua 5.1 5.2 5.3 and basically 5.0 i want to get lua 5.3 so i'm going to say sudo apt install lua 5.3 and i also want to install lua rocks i can just say lua rocks once you do this it will ask you to install it you just say yes i already have it installed so it's not going to do anything now once you have this installed you can start executing your code so make sure that right here you have this code and this json file make sure you have these because this is the example we're going to use now currently i am not inside of my windows machine i'm inside of linux so to get into my windows machine i can go cd and then a forward slash not a backward slash but a forward slash this will take me to my root directory if i say alice it will show me all of the folders i have inside of this folder you can just go into cdmt for mount and in here you'll see all your drives you have so i have the c drive and the v drive to show you an example of this if i open up my file manager go to this pc then this is my c drive as you can see there's c and here's the d drive now the c drive we can go here and as you see there's the c drive to go into that c drive we can say cd c and then a forward slash now we want to go into users and then here we can just say cd users and take note i'm using a capital case u here because this users also has a capital case u then here is cherise the brain you can go into that that is my current user i am who i am then here we can also go cherise the brain then here to find where my things are yours might be instead of documents inside of desktop instead of downloads instead of music wherever you put your files you have to go mine is inside of onedrive so here i also have to go into onedrive onedrive and you can press tab to let it autocomplete for you and in here you'll notice we have a document folder if i go into documents then you'll see i have a lua folder and this is where my lua stuff are now i can just go here and see cd documents and then lua and press enter now if i say al is i should see a main.lua and a text.json so right here main.lua and text.json now once you are inside of here you'll see these two here to run this lua code you can just say lua 5.3 and then main.lua if i run this i get jack and that means i executed the code inside of this main.lua to see what inside the file i can say cat which means read and in main.lua and you'll notice it's everything i just had inside of vs code luna json requires luna json and in all of this now one thing i did forget to tell you is how to install luna json because i've showed you how to install lua rocks to install luna json you can just say sudo lua rocks install luna json and let me just resize it a bit so everything's on screen oh so here we go sudo lua rocks install luna json and this is how you install any package in lua rocks you just say sudo lua rocks install luna json you press enter and there we go so now it should be installed and now of course if you try and run it it will run your things to uninstall a package from lua rocks you can say sudo lua rocks it should be remove luna json and this will uninstall a package now if i were to try and run this code it will tell me it doesn't know what luna json is because i have uninstalled it and then yet again to install it again i can just say sudo sudo lua rocks install luna json and just like that you can use lua rocks now take note whenever you want to run something you now have to run it inside of your windows subsystem for linux meaning this right here you cannot run it from windows not as far as i know at least because luna json and lua rocks are both installed on linux now and not on windows this is to me is the easiest method around this lua rocks installation issue we're having today we will be implementing the user score system then say in starting a game you'll see we have now two score systems there at the top once we blow up an asteroid with the score increases go here we blow up the asteroid increases and in here we no longer exist so you just boom and let me just boom go now when we go back in i think the score is no longer there we'll implement that later but the idea is once we have the score implemented the score should stay as it is and then we will have a high score and a current score the high score will be implemented in a different video it's not that complex so we'll probably do it near the end cool and just as a comparison this is what we currently have move this up here we say new game as you can see we don't currently have any score to speak of which is unfortunate so that's why we'll be implementing it right now because that's one of the things that really makes a player more happy to see is if they play a game like this and they have a score and they try and beat their score every time they play the game now let's go to our globals.lua now i'm going to assume you have lua rocks installed if you do not have lurox installed i believe you can just google lua rocks and there we go and then you can install lua rocks lua rocks allows you to basically just install extra packages or extra files for you to use in your program so let's say you want to work with mysql which is something you use to work with databases then you can go to lularocks and you can download this mysql package and now you can work with mysql in lua or if you want to make a chat then you can get this lua socket which allows you to basically chat or create a chat app i'm going to assume we have this already installed and if you don't you can just quickly go and install just pause the video go and install it it would be probably as simple as it was to install luba if not easier now if you have it installed make sure that you have the following in your path you need to have lua rocks in your path so this should also be in the installation if it isn't you just have to implement or add it you say dollar then in brackets lua rocks path dash bin and this will allow lua rocks to work and you have to add eval here at the front before this so if we just copy this then you have to go eval and every time you want to use lurox you have to do this what you can do is you can say you can go into your bash rc and this runs every time you start up your terminal and let me just run that again now if we go down here and actually it's at the way bottoms let me just on full screen that so here we go there so this is inside of my bash or c file which runs every time my terminal starts up so every time a terminal starts up we make sure i can use lua rock so i recommend you do the same if you're on linux now once you've done that lua rocks should work now to install what we want to install we need to type lua rocks install and then luna json this package will allow us to work with json because i want us to save our file in json format and you don't need to know json i'll explain it along the way a lot of people would actually prefer if you were to encrypt the save file but i'm not going to go through all that effort it's such a basic game that could be something you do on your own but you might want to encrypt the save file so a player can't spoof how much they really got for example let's say they really only got 5 000 points in the game then you might want to encrypt the files so they can't just go into the json file and change that five thousand to fifty thousand but that's out of the scope for this tutorial so we can just say install and let's see here and i do not have write permissions i'm just going to go sudo and then try it again you might want to use dash locally if you have the same problem i'm just going to go sudo just to keep things simple now once you have this installed you should be good to go now let's go up here and we say local luna json is equal to require luna json and we can use it just like with love because we've installed it so now we have this option here to use now we can create a function and this function will be called read json it will read a json file for us and in here we can just pass in the file name because we might have multiple json files we want to read so this is just for future proofing you don't have to necessarily add a file name here but just in case you add another file that you wanted to read then it easily reads that file for you now i recommend having all our files inside of a specific folder so right here we can create a new folder and we can call it src for source content this can be like your audio and your files and your images and whatnot in this case we can just say data that should be a folder data folder inside of the source folder because this is where all our data files would go preferably encrypt your data files because this is usually things users should not be tweaking and then here we can just say dot json because this will keep the save file or the saved data and then all we have to do is we have to use these curly brackets and then we just have to say hi score like that or if you want you can also use an underscore like that but preferably don't use a space that's not very good so use an underscore or a capsule case but not a space and you can just say zero and this will be the score the user has save that and you don't have to open this file for now for a long time cool now that we have that file we can specify the file we want to read so the file we need to open so local file is equal to io for input output dot open and we pass in the file path so you can say src so that would be this src file or folder then you want to go into the data folder so slash data and then slash because you want to access this save dot json again then just go dot dot file name and in dot dot because you might not want all of your files to be in dot json format you might have multiple formats dot json now this is just how the javascript but because this is saying read json you can just as well not add this here and just let them enter json but because i just want to enter the file name for example save i just say that then it will automatically add this.json for me as you can see here the end result will then look something like this and all i had to do was end and just save here and it will produce this and then of course here we just have to specify we want to open it up in read mode below that we can say local data is then equal to file colon read and we can just say we want to read everything so star and then all this will read everything inside of this file and we can say file code and close because we don't want the file to stay open and in return luna json dot decode and we can just say data now once you've done this everything should be still working fine if you want to test it you can still run your code of love dot and make sure everything starts up which it should cool now next up we can go to this game.lua file because we now want to add the high score to the game because we can now read this json file we have but we want to have it display the score here now this json.d code here before i forget basically just converts json so this right here to a lua object so lua table now down here we can say score by default is zero so by default when you start the game you get zero as the score this is the initial score for the game now here at the top we also want to import save data because now we want to read this file that is json file then we want to pass in the save data into this game here if you want to you could load the high score and all the safe stuff inside of this game here but for me it's better to rather do it outside of the game just to keep things simple so if you might have different functions you want to pass the same data in you don't have to make multiple functions in each one of those you can just pass it in here but we'll get to that a little bit later you can say high score is then equal to save data dot high score and this here is just a table it's just going to contain a high score for a moment if there's nothing there we want to say or zeros it will default to zero next we want to go but down here to where it says draw because you want to update the draw then go up here and say local opacity is equal to one then if faded then here we just want to set the opacity to 0.5 and i can just work off of the opacity so we don't need this if statement here anymore we're going to just unintent this actually this can still be inside of faded why not because this should only be displayed if we're currently faded because only if we're faded we're being paused that's the only time currently the game is ever being faded out so this can still stay in an if statement i don't think about it and because this should be above everything else it should be at the bottom of this drawer if it's at the top everything else is going to be above it so it should be at the bottom we're going to go text to create new text we want to display and you can just say colon draw then this text we want to say score and this will be the default scored player c like when they start up a new game coil in space and then add the self dot score then you can position it negative 20 10 and our living as position i can't actually remember what is everything inside this text here what are we doing okay so first oh yeah so that is positioning for x in the y position cool okay then the font size that will be an h4 we can say false and false and the false and false is just for this fade in and fade out because we didn't want it to fade in or out then you want to wrap with the line and the opacity so the wrap width will be the width of the window so loud.graphics.getwith and you can say right and then faded and opacity or 0.6 this is a little bit weird but basically if it's faded then show the opacity we have otherwise just default to 0.6 and i believe you can actually go here into the lua virtual environment and just test it out so let's say we have x which is equal to true and we have 1 which is equal to let's say 0.5 and then 2 which doesn't exist so you can just say 2 is equal to nil now if x and 2 or 1 we get 0.5 because 2 does not exist but if we were to say 2 is equal to 1 then we get 1. so if x is true which in this case if faded is true and this right here has a value inside of it then display this one here so opacity otherwise if this has no value inside of it and this is false then display this so that's for that now we can copy this and we can do the same for high score so here is a high score and now here instead of dot score we can say dot high underscore score we can then make this zero yet again 10 because it's going to be the same height you can make it h5 because this shouldn't be the main attraction the main attraction should be your score so it's going to be a little bit smaller before we go that right should be a center and we can also change the 0.6 to 0.5 cool and that should draw it so let's just save and then let's run it and see if it works because that should theoretically draw it ah here we go attempt to index local save underscore data nil value you know why it's giving us that it's giving us that because inside of the main.lua if we go up here we are not passing a value in here so we don't have a high score i'm just going to say zero for now and let's run it and see what we get now we still get a value or still problem and my bad this should be a table high score there we go and that should be an equal symbol there we go now it should finally work new game now we have a high score which a little bit faded out because remember the main attraction is actually the player and the asteroids and the score is also a little bit faded but it's bigger because you might want to see your score more than what you see your high score all right now one thing before we continue this right here quite unnecessary because all we need to do is we just need to get the data from globals and we are already acquiring globals so we need to do is let's say it can be maybe like the second thing it does local save underscore data is equal to and we're going to say read json and then save because we want to read this file and you can just take this save data and pass it in here or if you really want to save space you can just do whoops my bad you just do that but i like doing this just to make more readable now let's make sure that works because that should read the file for us and then once it has read the file we should see that value so let's go up here and just run it okay high score is zero let's keep a look out for that if we change the high score to 900 what do we get do we get the same output or did it change because it should be changing new game and there we go now we get 900 so we have successfully created a save file and read from that save file then last but definitely not least we now have to modify the asteroids a little bit because when you blow up an asteroid your score should increase so let's go right here and we can say if self dot radius is more or equal to asteroid size then so the radius is more equal to the basic asteroid size of course that's a little bit big so we want to go divided by two because asteroid sizes from left to right whilst radius is halfway then game dot score is then equal to itself so game dot score plus 20 and game now has a score on it if you go here you can see there's the score plus 20. we can then go else if and we can go self dot radius is less or equal to the min asteroid size then we can do the same thing as this but because this asteroid will theoretically be the smallest asteroid you can get we want to make them get a lot of points for destroying the small asteroids because they can be difficult to shoot and they multiply so they can also be very difficult to dodge at the same time and finally for the mediumsized asteroids we have we can just say else copy this and instead of 100 we can say 50. and then this isn't something that's going to really affect us too much now but we can also go if game dot score is more than game dot high score then we want to say game dot high score is equal to game dot score now this right here is basically whenever the player plays and their score is higher than the high score they have then the high score will also increase along with their normal score can't you tell them hey you are getting a new high score good job and this here will of course just add a score and we're already drawing the score to the screen so we don't have to worry too much about that we're gonna just say love dot to run it move it so everyone can see start new game shoot you'll notice both of these the high score and the score increases because the score is higher than the high score and of course the more we destroy the more we gain now take note of this last part we added here if we make the high score let's say 100 then if we go back here we say start new game and we shoot an asteroid as you can see the high score didn't change but the score did and the high score won't change until our score is higher than the high score then you can see the high score is starting to change cool and that is implementing a basic save or score system for our game so to give you an idea of what we'll be doing here we go we say start new game just wait for that asteroid to come back and then one last time for our last help right here at the top our last life we crash oh gosh missed it completely and then we get a nice fading game over screen and it fades out and after it fades out we get new game so first of all i would like us to go to this menu file right here or not menu i meant to say main and here at the bottom where we say game dot state of menu and game dot state are running and paused what not we want to add one more else if we want to go else if game dot state dot ended so the game state has ended then you just say game couldn't draw because it has to now draw the game in that state but game will already know what state it is cool now currently this wouldn't really do much if we were to run the game we currently have and we were to test it out here we go oh gosh i missed it ah this one has a bad collision then as you can see we just get a dark screen we don't really go anywhere nothing's happening because the game overstate doesn't really have anything to draw yet so let's actually add that we can open up our game state and we can start here at the top underneath high school we can add screen text and a screen text is just a table that will display the text on the screen once we go to game in that state this will remove it and that and whatnot then we need to add a another variable here saying game over showing and this is for the animation so we know when the game over is showing and when it is not showing so you know when to switch from showing the game over state screen to showing the menu state screen so that can be false by default next year in change game state we can go if self dot state dot ended so if the state has ended then we can call the self game over function now this game over function is what we're going to create now basically it's going to do all the game over stuff for us so let's go here and say game over that's a function which takes itself and first we can set up the screen text that it takes that should be on the screen so self dot screen text is equal to a text component which contains the game overtakes which will fade in and out you could also maybe do the same and then also display the high score and the player score also fading in and fading out or what not something along those lines that could also be a very smart idea however we're going to keep it simple and just do the game over screen just game over and then poof done we can say zero love dot graphics dot get height times it by 0.4 to kind of get it in the middle in the center because you remember how fonts are used it's not necessarily starting in the middle of the font as well it starts here at the top so every letter has a top point and it starts there instead of in the middle so you just take note of that it can be size of h1 because it should basically take all of the attention it's the most important and say true true love dot graphics and then get get with and then center now if you're wondering what any of this means you can always just go back to this text file right here and just look at what all of these mean you'll notice or fade in and fade out right here is now set to true nothing else is basically set like this so the first time we'll be really using this fade in and out functionality then after we have done that we can just say self dot game over showing and we can make it equal to true because it's currently showing the game over if it's not showing the game over and the game state is ended then we should know that we want to switch from game state ended to game state menu because it's not showing game over screen and the state has ended so there's no point in showing it anymore now currently this won't do too much then right here instead of the main.lua we can just reduce the amount of lives the player currently has so player and it takes the lives so num lives and you just make that one now if we run it we should be able to see our output that should work we say start new game we uninstall live.exe and boom that is all we get so not really anything just yet so let's go down here because currently i didn't really think about it but this doesn't really draw to the screen so we put the text there but we never actually drew the text so this could do that instead of this draw function and let's go right underneath faded we can then say for index text in pairs self.screen text and we can say if self dot game over showing then and now here we want to draw all of the things while the game over is showing so self dot game over showing is then equal to text colon draw self dot screen text so it's going to draw the text that should be on the screen and then we can just say index if you're wondering what's going on here we can go here to text if we go to draw we take in the table text and then it's current index you'll notice return true or false that's how we know if we're supposed to show it or not if it returns false it's not currently drawing anything to the screen if it returns true it is drawing something to the screen and if you plan on adding more things here you just modified as a teeny bit so it can be able to do this more dynamically because currently it's good for one thing but if you have two or three things it's not going to be that great anyhow then you can say if not self.game over showing then so the game over is not showing then self coded change game state and we're going to change it back to the menu state and then otherwise is the game overstate isn't showing then you can just say else text draw self dot screen text and an index so this will basically start it off it will start to draw so yeah that is about that which we'll need i don't think we'll need any more let's try and run this and see what we get if we just drag this here so everyone can see start new game and end then we start getting a fading out game over screen thanks to everything we have already implemented and why did so much work at the start of the game we didn't have to do a lot now because we've already implemented fading in and fading out and that is for the game over screen and love 2d so in this tutorial we'll be implementing new levels as well as making the player invincible now after this tutorial the game is going to be a little bit broken but we will be fixing that in upcoming tutorials so don't worry too much about that now to give an example of what we'll be working with if i or what we'll have by the end of the day i just move this here now when we start a new game you'll notice the player blinks and if i try and go into this asteroid here nothing happens that is because of our new invincibility we added so when we start a new game or when we were in the player dies then they finally become invincible and they cannot be hurt for another while and this is very useful because let's say you have 20 asteroids on the screen it can be very difficult to avoid them immediately once you respawn so if you're invincible for a few seconds not only does that give you some time to clean up the screen and also make sure that you just don't immediately die once you respawn now to make sure that this works if we crash in here we'll actually explode then now we can try and crash into things again and we won't as for new levels we can just shoot these asteroids and i'll show you all the new levels and one more right here right here there we go so now we have level two and there are now two asteroids on level three there will be three asteroids level four four asteroids and so on but it becomes more challenging because each asteroid explodes into multiple more asteroids so it will become more challenging depending on how everything goes now a bug you might encounter here is let's say you die at level two here so you gave me a second let me there we go if i crash against something it tells me it's game over but once this game over screen leaves and we want to start a new game then you'll notice we're kind of still in the middle of the game but not the same game it's it's kind of weird now this is normal we are going to fix this in fact if you want to you can try and fix this yourself before the next tutorial but it's just normal because we're going to play around with some of the code and it's going to cause this to happen okay so let's try and implement that let's go to our state and open up our game state and let's see here where are we now we are now at draw okay then here in start new game we're going to add a few new things so at the top we want to go if player dot lives so the player lives is less or equal to zero they want to change the game state to ended so this will kind of fix a few bugs but also make sure we don't just start a new game because every time we level up we basically start a new game so if their lives is zero or less that means the game has been or should be ended so let's go here and we say self colon and then change game state to ended else if that's not the case if they still have lives left then their game state should be set to running this means it won't be going to the menu state for example to the paused state it will go right to the running state and now we can remove this one right here because we don't need that anymore then we want to say how many asteroids we want to spawn so we can say local num asteroids and that can be equal to zero and here we have our asteroids and now let's say they do level up we want to display the level on the screen even if it's level one if we run this new game it says level one so even if it's level one we want to display this on the screen we can then say self dot screen text is equal to text and in here we can just pass in all our required parameters so first the level we are in level that should be level with a space and then concatenate that by adding these two dots and saying self dot level so getting the current level say zero love dot graphics dot get height and you just times that by 0.25 so it won't be quite in the center of the screen it will be a little bit above the center of the screen and we can just add a comma there we go and say h1 for the text size true true love.graphics.get with and then finally we want to position it inside into the center of the window okay so currently we also have another problem we have to look out for every time we start a new level there's a small possibility that once we start level the asteroid might appear on the player so we don't want the asteroids to spawn on top of the player we want asteroids to spawn anywhere around the player so to get this we want to create an infinite loop and this infinite loop will basically determine when and where everything should be spawned so let's go create a for loop first and exit 4i becomes 1 and until i is num asteroids so the number of asteroids plus self dot level then we want to go local and in the asteroid exods we have here and we want to say local asy for asteroid y i do believe since we're not really putting anything next to it next to them we could possibly just go like this and it should be fine but just for a convenience sake i'm going to do this and then at the end of this for loop we want to insert into the table just like we usually do however this time we won't need to specify a specific size we can specify the asteroid size because then we have our specific asteroid size we want to spawn we're going to remove this and in between this local and this table insert we want to create an infinite loop that will reposition the x and the y until it is no longer on the player so we can say repeat until and we want to repeat it until the calculate distance from player x and player y and you want to say the asteroid x and asteroid y and if that is more than the asteroid size times two plus the player radius so we're checking if the distance between the player and the asteroid is more than the asteroid size times two plus the player radius so it means if the asteroid can currently damage the player the player was not invincible then you want to regenerate this aesx and asy so let's just put that here and let's just put that in there as well so it will run at least one time and then you will try and figure out if it should run again and will continuously rerun this code until the asteroid is no longer on the player so if the azure is no longer on top of the player and this isn't really required but i do want to just go on top here and say require globals because we are now using a function that's inside of globals but it's not really required okay cool so it's not really a guarantee we're going to see this change because we haven't really seen it in the past so it's not really guaranteed we'll even see it now but if we run our code it should work and nothing should be broken let's go like this say start new game okay and as you can see everything still seems to work but now the difference is the asteroid will always spawn a relatively far distance from the player so that they have a little circle they at least have to themselves okay i also see here we only have one life left but that was for development we can remove that later that's really required now next up we can open up the player so we can add the invincibility to the player so we're going to know how long the player can actually be invincible depending on how many times it has blinked and this will also indicate that the player is currently invincible if i were to just show the example again you'll notice the player blinks and at least to me as a gamer it says hey this player is currently invincible nothing can really touch it and once the blinking stops you're also no longer invincible so here you can see how many times you want it to blink so local local usable links and this will be the amount of blinks you wanted in my case i only wanted to blink ten times but then times two we're adding two to it because of how fast the blinking is compared to how long the player is going to be invincible okay so let's go down a bit then let's go right above the lasers and we can say invincible is equal to true so this is if the player is currently invincible if we cannot touch the player let's make that invincible not even permissible and here we can see invincible scene and then we can make that true as well this is if the player is currently grayed out or not so you'll notice we go from white to grayed out from white to grayed out this will save the players currently grayed out and here we can say time blinked and we can make that equal to the current usable blinks so this is the amount of times the player can blink while immortal cool now let's actually implement the design for all this so let's go to draw flame thrust and let's see here right above everything we can create an if statement and we can call it self dot invincible scene so if we currently are in the invincible scene state then it is a table dot insert into color 0.5 and that's being passed in right here so the color and we're just basically setting it to 0.5 which is half its opacity we're going to enclose this function again and we can go to draw and this is where most of the things are going to happen let's go here into the else or not the else but the if statement here and right underneath debugging we can implement if the player is currently invincible at what should happen so if self dot invincible scene then you want to say love dot graphics dot set color one one one and then faded and opacity or 0.5 so this will basically give us our default faded slash opacity we want or we'll just default to 0.5 cool and in here we can just say else and we can copy this line paste it here and we can just actually we can just move this line up we don't need to copy or paste any lines and then we'll have this instead next up we can close this function and go down to maybe the move player right here we didn't want to take in dt and this is the time between the last frame and this frame for anyone who may have forgotten this will allow us to calculate when the player should blink we're gonna then say if self dot invincible then let me create end here self dot time blinked make that equal to self dot time blinked plus actually minus dt times two so this will first take the dt times it by two and then take what we have our current time length and subtract it from there we can then go on every uneven blank and make the player fully visible so in every uneven one for 1 3 five the player will be fully visible and not grayed out to do that we can say if math dot seal pass in self dot time blinked and then modulate by two and this is an easy way to see if something is an even or odd value so in this case if something is an even value it will be true here because two modulo two is 0 4 modulo 2 is 0 3 modulo 2 would be one because there's one left you're gonna just say self dot invisible scene make that equal to false otherwise we can say self dot invisible scene and make that to true then we can sit the if the player is invincible and make it false if the time blinked has ended so if self.time linked is less or equal to zero so if the time blinked has ended and there's no longer any reason to blink let me just say self dot invincible and make that false otherwise if the player currently isn't invincible we can just hit self dot time blinked equal to usable blinks so we're basically resetting it and itself dot invincible scene becomes false that's about that for the player and i don't believe it will be working just yet so if we run it the players will most likely not be thinking yes because we even haven't passed him dt yet okay to pass in dt we can go to the main.lua file and right here where it says move player we just pass in dt which is provided to us by love2d and in here where we say if not player.exploding we also want to now go and not player dot invincible because if the player is not invincible we are allowed to calculate the distance and make sure that the player is or is not exploding but if the player is invincible we don't want to do that cool and let's see here right before this elsif we can go if the number of asteroids is equal to zero so if there are no more asteroids left we can increase the game level so again.level is game.label plus one so it's going to increase by one and in game start new game and we can pass in the player and that will basically generate us not only a new player but a new game for the new level great now we save this file and we run it say start new game now the play will blink if we try and hit something we can go straight through and you'll see the level fade in and out now when we destroy this asteroid it should increase the level because there will be no more asteroids left on the screen can go here and just there we go so now it's level two and the asteroids also spawned very far away from us so there's no chance that once we go up a level and azure will spawn directly onto us cool let me just increase my life here so we can make sure if the player does end live we can respawn without a problem let's go here and run one start new game okay we can go through this asteroid we're going to shoot up this asteroid and go to the next level they will let's try and go to level three just to make sure that all labeling systems work thanks to how we built the game implementing levels is fairly simple it's auto generated so come on you can do it come on there we go yes now there's level three if i hit something okay then my hitboxes aren't the best okay now we're invincible again and we can fly right through stuff without getting destroyed until we are no longer invincible where will explode if you try and touch something cool and that's the gist of it now one thing i did want to show you but i kind of forgot in a previous tutorial it's kind of to show you an example of how we created the spawn before we get to the actual video is if we were to go to the i believe it would be anywhere like in the game or something just uh we will just spawn the amount of asteroids yeah so here is the gnome asteroids now when we play the game if i go live dot and we start the game new game then as you can see the asteroid spawns far from us but how do we know in the previous tutorial what we implemented really works that the asteroid will never spawn on top of us well when we go here and we change this to maybe 100 asteroids and we run it again new game as you can see we have like a little radius around us where it wouldn't touch us same way if we were to start a new level it will spawn them all around us instead of add up so if we make this 500 for example and then we run it then as you can see there's a little radius where they won't spawn on top of us also i believe that level 500 is impossible if someone plays this game and they get to level 500 then please show me how you defeat it because that would be very interesting all right so yeah that is just what i wanted to show you just to make sure you know that what we implemented actually works so first off one thing we have trouble with is if we actually start the game right now and we just wait to un immune ourselves oh wait we can like start a new level and whatnot okay now here explode okay that's fine let's continue okay now explode again now we have one life left and now then i can show you what i mean all right so now when i crash into this asteroid which i just missed and it says game over now when we start up a new game you may have remembered this bug from a previous video every new game then we kind of continue flying off where we left off so we just continue if i die here then it's just going to spawn me back at this exact location in the next game therefore we should create a reset game function so let's go into main.lua and right above the love.load and this could also be in globals if you wanted to or you can create a utils.lua file or whatnot but here we can say function reset and this will just reset everything for us and then here we can just say end so first we can read the save data so local save data that is equal to read json and then you just put in or save the json or in this case just save we don't need to specify json underneath that we can then create our player and that will just spawn a new player or create a new player object with free lives we then go game and we can create a new game object save data we just pass that in and then create a new menu object which is equal to menu and you can just pass in the game and the player and then destroy asteroid we can make that equal to false now this destroy asteroid you might have forgotten about it but if we go to our globals.lua and we can actually keep this here then you'll notice here destroy asked just so you know where we are coming from and here we're just making it false again in case you may have forgotten where this is then after that you basically have created a reset function so what we can do now is we can remove this as well as this right here i can you can just say reset because this player game and menu and destroy asteroid are all global because they don't have a local in front of them so they can still be used once we use this reset so now we're going to reset the game once we start it and whenever we die we want to reset the game again to do that we can go down to where update is and scroll all the way down until here where it says game.state.menu then we have our menu run click and then our mouse clicked which is false then here we can check if not reset complete and this is a global variable but actually we want to make it local to this file but global in the file so we can go up here and we can just say local reset complete and we can make that equal to and you might want to make this underscore complete or like this depending on how you name it when i scripted this video it was probably like super late at night and here i have like underscores and here captain camel case you should just stay consistent but i did this late at night so i'm not consistent anymore anyhow this will tell us when we want to reset the game once we're in the menu state if it's true we can just call reset and then reset complete is true then here we can say else if game dot state dot ended so the game state is ended we can say reset complete is equal to false so if we do die then the reset complete will become false then once we go into the menu state it will reset the game for us all right we can now just save and test this out this should make sure that once we restart the game we don't just continue i'm going to just decrease the amount of lives i have because free is kind of unnecessary so let's just make that one for now but you could keep it free i just don't want to wait forever to be able to die all right so let's see what happens i crash the game is over now what should happen is i should spawn in the middle of the screen again so new game middle of the screen level one only one asteroid so we have basically successfully reset the game cool we can now just change the player lives back to free save that next we can go to globals now here we want to write json so we already have read json but now we also want to write the json so i'm going to copy that paste it change it from read to right we also get the file name but then we also need to get the data we want to write now we are going to get a table and we want to convert that table into json so we can store it inside of our save.json because this may look like a table but this is actually json okay so to make sure it works we can also print it out to the screen if you want to but you're anyways going to see how it looks once we put it inside of the save the json so you could print it out to your screen or you could just look how it looks in the save dot json okay so now we can have our local file and we want to open it and it's going to be the same file but this time we want to open it in write mode instead of read mode then we want to go here and say file dot file coden right and the only reason i'm getting these yellow lines is usually because you'd want to check if this file is nil or not first if the file is nil you don't usually want to try it right to it so if you want to be safe you can first check if file is equal to nil then and you can just like return or something anything here would work or you could just do this if the file is not nil so if it's not nil then you want to do this as you can see now the yellow lines are gone because we know file is not nil because we checked for it first so yeah that's just something you want to maybe take note of i'm not going to do that right now but you could there's nothing wrong with it it's actually better practice i'm just not going to do that right now we can then say luna json dot in code so first we used d code d code converts json into a lua table whilst in code converts a lua table into json then here you just pass in data which we get here they want to close the file and then the function is done we don't need to return anything and this will write to our json to make sure it works we can actually just yeah that's already serious we don't have to change that we can now go to game because we want to save our high score so once we boot into the game again we have our high score there so you go to the top and we can create a new function called save game which is equal to a function that takes in self and it just does write json and in the file name which would be save and then the lua table in this case we want to save the high score and just self dot high score and this should save the file for us if we get a new high score now it won't just call itself we need to still call this function so here in game over for right now we can just say self colon save game and it will save the game for us let's try and run this and make sure we actually get that so we can open this save the json so we can see what happens we say new game current high score is zero but if i were to just go up here you'll notice my high score also increases but now we need to make sure it saves so just give me a second and let's blow up now you get a game over our high score is a thousand okay we need to see and make sure that that high score is what we see if i say quit then as you can see it updated our file now the high score is 110. okay now i'm just going to decrease my hp by going here and just saying make it one just gonna constantly have to wait forever in order to finish the game now let's say we only get one score here and as you can see our high score is 110 now and our score is 20. so our high score and our score are two different things at this moment if we crash we get our game over screen and we get our save.json you'll notice our high score didn't change along with it that is because our high score here never changed so as long as this high score doesn't change the high score we save will not change either that is why we could just do go here and we didn't have to do any checks before because we already do checks to make sure that this high score doesn't go over the normal score unless we get more for example if we go here our high score is 100 110 if we try and beat that high score okay so my high score increased as well as my score as you can see since my high score has been surpassed so now both of them will be increasing and once i explode then the high score inside of save json is also updated so you'll notice that the high score only changes once the score is higher than the high score and that is that for today's tutorial this will be your final love 2d tutorial however to all of you who made it all the way here to the very last video well done you have all done such a great job getting here and with one last step you can finally continue on your road to being a game developer now before we continue because i know a lot of you probably missed out a few pieces of code here or might not know what to do after you finish this you could skip this part if you want to because it's not that important but here we can just bring this over so all of the code is on github and this link will be in the description so if you miss anything you can just go here and you'll be able to find it all the code we have up until now now when you go into lua and then into love2d you'll have the asteroids game folder and that's what we are building and we are at number 15. so you can get number 14's code if you have fallen behind or if you just want to get a few things we'll get to in a second once you finish this course and you don't know what game to build next i do have a few things i want you to try and do on your own and also point a few out during the game play whilst i show you what we're implementing what you could also add so here is a lot of things called homework and you don't have to do this but if you do this you will learn how to build and game on your own without my help which is very useful because i would always be there to hold your hand while we code a game together sometimes you'll have to do that on your own and this is where it can start there's a lot of things you can do create a settings page because if we look here we have a settings button but it doesn't do anything so you can implement that settings page that's i want you to do you can add more sound effects which we'll be doing in this video you can add a better design to the menu add mobile support add items to the game so let's say you want to give your player better guns so let's say after every third asteroid to destroy maybe a random gun will spawn that they can if they hit it then instead of exploding they will equip the gun and then they can shoot better lasers than what they currently have which could help them like once they get to like level 500 if you have a very powerful gun it could be an easy game you can add more enemies because currently it's very basic but you could add like in the original game and ufo that will occasionally also jump in and maybe shoot the player or just try and hit him and then you should also try to destroy that ufo you can improve the performance because currently it's not really focused on performance if you have a very powerful pc you won't even notice it but after this tutorial if you have a low end pc you might notice frame drops going until 30 fps if not lower and last but not least already not yet but you can also add a better pull screen and then last but not least you can add multiplayer support this is something that can bring you very far in the future you can go and get yourself a lua module the love2td module or just lua module and you can start trying to code your game that two people on two different computers can try and play the game together it's going to be a very difficult thing to do but if you get this right you can make any game and you can make it multiplayer for more people to play together and the multiplayer game is usually a bit more successful than a single player games because multiplayer games you can play with your friends so here's a bunch of things you can do and we'll go for a few extras in the video as well now in this video we'll be adding background music and sound effects i want you to go here to our github page go to number 15 which is the last one then you'll notice here inside of source we now have a new folder called sounds go into sounds and here you'll also find all the sounds we will be using in the tutorial and you just open all of them and then you'll notice there's a download button and you can just download them all so you click download and did it start to download yes there it goes it downloads and just download all of them until you have all of the sounds there you go once you have all of this let me just move this back to a different screen we can then open up our file manager and here under source we can create a new folder called sounds and we can then go here to downloads where our things should be and we just copy all of the sounds we just got and we can just throw them in here into the sounds folder and there you go now you might have to rename a few of them because the names are now incredibly long and tedious so just go here there we go oh i didn't do anything there we go okay let's just rename all of them all right now latest we have two types of sounds here first we have ogg and mp3 this is just to show you can use multiple sound types but usually you'd find people using ogg and mp3 and a lot of people also use wav or wav now i just chose ogg because i think that's what i got when i downloaded these here you can also play them if you want to i would play them but i don't think you'll actually hear it now that i think about it alright so i quickly fired up a different screen recorder so if the quality might be a little bit low that is just because i'm using obs instead of my simple screen recorder as usual now we can actually hear how this sounds so if we actually go here and just say open containing folder we can hear all of these sounds to the background music yeah then we have the explosion asteroid so that's when an asteroid explodes then when the player explodes and of course you could change these sounds to be something else i just went online did a quick google search for free music or free sounds and i just downloaded the first one i saw so you could definitely change this if you want that's how laser will sound then an option select like selecting a button then defroster then the thruster but louder yeah i couldn't remember why i had both of these but we'll try and find out right now all right so now we have the sounds next up we can go to components and create a new file called sfx for sound effects and like usual this will go local love is equal to require love and we have our function sfx which will return a table and you can just return sfx all right so first we probably want to select the background music so let's go up here and we say local bgm local bgm is equal to love.audio dot new source and remember if you're wondering about any of this this is on the love to the documentation so just go to love2td.org i think and then you'll find the documentation which explains this as well then we should select the background music now we can say src then sounds and then bgm dot mp3 so src sounds bgm dot mp3 so we just selected it and then we want to set the mode to stream stream is when you have long audio tracks like background music for example that's going to continuously play for a long time so let's say it's 30 seconds or longer you probably want to use a stream cool then you want to go bgm or go to next line bgm colon set volume because the volume will be very loud but you could change this depending on how you like it and i'm going to set mine to 0.1 which would be very soft but the volume will be very loud but if you want it louder you could make it louder by just increasing this number then bgm set looping to true and this will make sure it loops continuously over and over so once the background music ends after it's like 30 seconds or what not of playing it will start playing it again cool you might think this is annoying but a lot of games actually do this where just play the background music over and over and over again and usually people don't find it too annoying unless the background missing itself is an annoying tune cool now we want to link all of our effects so all our sound effects so you can go local effects and this will be a table just to make things easier it doesn't have to be a table but i'm going to make it one i'm going to copy this line of code just remove the local change bgm to ship explosion and make that equal to everything here but we're going to change this to this explosion ogg and we're going to change from stream to static because static is better for these shorter audio tracks like that's five seconds long or 10 seconds long if there's a very short and static would be better we can then just add a comma here and then copy paste it four times there we go then this can be asteroid instead of ship and then of course we just change from explosion player to to asteroid keep it static what not in this we can change to the laser and here i'm spelling it with an s because here i figured out you actually spell laser with an s and not as it so just in case you want to know but if you want to stay consistent because if you linked your laser of a set you could change that to z and then here we say laser here we can call the select and then option select and then thruster which will of course be thruster but loud so if you think the thruster is too loud you could probably go for normal fresher but this is just for making it a little bit louder because i think this normal thruster is probably a little soft cool now first when we play an effect we should have a true or false value to say if an effect has been played so if x for effect and then played we make that equal to false because by default nothing is being played then set fx played and this will basically just set this fx here to true or false you don't have to use a function for it but i'm going to use a function for it because it's just a bit safer we're going to go function self and then has played and then just self dot s or fx played equal to has played now we want to create a function to play the background music when we wanted to so we can just go here and say play bgm for background music that's a function takes itself and we can check if not bgm is playing so if the background music is not being played then end so this right here just checks if the background music is currently being played so if it's going dedede in the background then bg m play so if it's not playing you want to start playing the background music cool now we need two more functions first one is to play the effects so if you want to play a sound effect and then the other one is to stop a sound effect from playing so let's first do stop sound effect because that's the easiest one you can say function takes itself and then the effect then if effects and then we want to pass in the effect so this right here will go to these the effects and see if we pass in like a ship explosion string on our asteroid explosion and then it will try and select that one to see if it currently is playing which if it is playing then you want to stop the effect from playing so we can just copy this and then say stop as simple as that and that will stop the background music from playing next up is to actually play the effect now playing the effect is a bit more complex because we have so many effects we can just say play if x is equal to a function that takes itself the effect we want to play and in the mode we want to play it in and i'll explain this in a second now we will have three different modes we'll have single and the single mode is when we only want this effect and no other effects to play then we have slow mode and this will just play the effect as normal and then we have the else which will just stop this effect from playing if it's already playing and then start playing it again all right so let's implement that so if mode is equal to single and it might sound a little bit confusing right now but you'll understand what i mean in a second then if not self dot fx played then so if the effect is not being played right now then self colon set fx played to true so we want to set it to true and then if not effects effect currently is playing then we want to go effect at effect play and this will play the effect for us so basically this is in the sound effect that's only allowed to be played once that's why it's single next up we want to do the slow mode so else if mode is equal to slow then if not effects effect so the current effect is not being played then effects effect and then play now usually you don't actually have to do it like i'm doing right here it's just i like to have a little bit of variety in my effects they shouldn't all just be generic there should be like different versions of it for example single where it's only allowed to be played once slow where it's allowed to be played but we first check if it's currently being played then we can play it again and then finally last but not least we will stop the effect and start playing it again okay that can be any other command other than slow so else and single of course self stop effects and it will stop the effects like just like here and you can just say effect and then effect at effect and then play it cool and that is the sound effects file it could be much bigger but i like to keep it a little bit simple for right now because you might want to expand on this later and you don't want it to be too complex so let's start by going to the main.lua file and here in reset we can just go sound effect is equal to sound effects to create a new sound effect object and of course we should import it you can either use dot or slash notation as you can see i use both of them here as an example so sfx and we can just go to component dot sfx now when we load the game we want to start playing the background music so we can just go sfx and then play bgm and it will start playing the background music for us cool and let's play our game and see what we get and as you can see we get background music playing for us now all right so that is for the background music next up let's go to the menu here and let's just pass in sound effects for all three of these sfx because we're going to add sound effects to all three of them and we just change the player lives to free player also has another player object being created here so we can just pass in sfx here again there we go and we'll later on change that in the player itself now first let's go to menu which should be here in states and first we can take in the sound effect so sfx and then here where we go to run when we check if the button is being hovered on if it is being hovered then you want to go s f x colon play or play and then fx for the sound effect and you can say we want to play the select and single all right so it should be able to run if it's not going to crash because of those nil values as you can see it kind of plays however we need to also add another line of code right here instead of the else statement so if self got focused so the one is currently focused on is the same as the name then we can go sfx set fx played to false because you'll if you could remember if we go here to sfx and we go to single then here it sets it to true but here we check if it's already false now we are manually setting it to true or false depending on the context so you don't want it to play multiple times over the same like button so we're saying single here and we have to reset it to false here if it has already been played before we are allowed to play it again you could remove this if you want to it's just it does help make everything just work fine now go as you can see you can now go over all of them you can do multiple times cool and as for the menu state next up let's go to the game state and all we need to do here is just where we create this asteroid we just also pass in sfx for sound effect because the asteroids will also have sound effects for once they explode and before we go asteroids we can go player which should be inside of objects and player and first we can take in sound effects and then first here with the shoot laser i believe because that's when we want to play a shoot laser sound effect we can just go sfx play fx and then just the laser and since we're not passing anything in if we go here to sfx that means it will stop the effect if it's currently playing and it starts replaying it let's run that and hope it works as you can see now if i were to spam the button you'll notice it just keeps on playing because the sound effect is so short you don't actually hear the sound effect getting cut in half basically so if you spam it you're going to hear that sound effect being cut in half which it is currently actually doing next up we can go back to player and just go to move player and in here where we say if self.frosting so if we're currently frosting the player forward we want to go here and just say sfx play fx i'm going to say specify the thruster and then slow and slow of course if we go here to slow it will just check if the effect is not currently being played then it will just start playing the effect alright and we can do the same here at the bottom but now we can just say if that we're not currently thrusting ourselves forward sfx stop fx thruster cool let's see if that works oh that's weird let's try it again so at thirty we're trying to index a nil value so right here okay so thruster seems to be a nil value also it seems we haven't taken an sfx here in game so you can just also take that and let's see here uh you know what i spelt incorrectly there we go now it should work okay all right you'll notice every time we now frost it makes a nice sound and it stops once we stop pressing the w key cool then last but not least we can go to asteroids and go to the top we can take in sound effects then we want to play an effect once we destroy the asteroid so in the destroy function once here when we resize and whatnot we can just pass in the sound effects as well because we're creating new asteroids and then at the end before they remove we can just say sfx play fx and then we can just say asteroid explodes then if we run it and we shoot an asteroid we should hear and there you go so now you hear that every time you shoot an asteroid and just like that we added a sound to our game and believe it or not that actually took me a whole day to implement on my own just because we did it pretty fast doesn't necessarily mean it was very fast anyhow and that is the end of the love 2d crash course thank you all for watching it was a very fun experience doing this with all of you now before we go i might want to give you a little bit extra homework if you're up for the challenge you might want to make this on the background to make it look cool have the asteroids be flying in the background wouldn't that be cool if you're here in the menu state and it does that all right and if you go to new game you might want asteroids to explode when they hit each other wouldn't that be cool as well but then of course the player score doesn't necessarily have to increase but it could be pretty neat if two asteroids were to hit each other and then explode into more asteroids and yeah that's about it you can also try porting the game to android which i have not really tried but it would be a pretty difficult challenge and if you get it right then you can make android games for yourself and for your friends thank you for watching
