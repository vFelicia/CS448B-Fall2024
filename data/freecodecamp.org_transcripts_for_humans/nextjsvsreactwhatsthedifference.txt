With timestamps:

00:00 - what's the difference between nextjs and
00:01 - react well that's what you'll learn in
00:04 - this course from ANA Kari she helps
00:07 - developers level up their careers and
00:09 - she'll help you level up in this course
00:11 - nexs is a framework versus react is a
00:14 - library you can't necessarily compare
00:16 - the two as it's not Apples to Apples
00:18 - comparison but you may always wonder
00:20 - what would life look like without a
00:22 - framework what does a framework provide
00:24 - and should you go with a framework or
00:26 - not so in this specific course you will
00:28 - learn next year and the power that it
00:31 - provides us as it is a framework and
00:33 - compare that to react alongside vat and
00:36 - vat is a really powerful front end tool
00:39 - towards the end of this course you will
00:40 - learn what the difference between a
00:42 - framework and a library is you will
00:44 - learn different data fetching mechanisms
00:46 - and knowing which one to pick for your
00:48 - project and for your page you will learn
00:50 - different rendering strategies you will
00:52 - learn how to build a performance app and
00:54 - what goes behind the scenes of building
00:56 - a performant app you will also learn
00:58 - search engine optimization which is CEO
01:00 - and also how should you get started with
01:02 - learning react all of this will be
01:04 - covered in this specific video along the
01:07 - way you will also pick up skills with
01:09 - taen CSS and also Shad CN UI Library
01:12 - which is getting really popular these
01:14 - days alongside learning complex topics
01:17 - in depth in react wheat and nextjs
01:21 - everything that you need is right here
01:23 - and I will be walking you through each
01:24 - step one by one so what are we waiting
01:27 - for let's get started now if you are
01:29 - interested in following along in getting
01:31 - all the visuals as well as all the links
01:34 - that I have shared in this specific
01:35 - course then check out this specific link
01:38 - this is essentially a cheat sheet and a
01:40 - visual explanation of all the key next
01:42 - year's react and readed Concepts that
01:44 - I'm sharing in this specific course so
01:46 - if you are interested check out the link
01:48 - in the description or as a pin comment
01:50 - for downloading the specific cheat sheet
01:52 - now this cheat sheet is really good it
01:54 - has all the visuals and links that I've
01:57 - shared in the specific course alongside
01:59 - GitHub so you can follow along as I
02:02 - teach this course so check out if you're
02:03 - interested now whenever you are ready to
02:05 - level up your next year skills I have
02:07 - some good news I'm running a exclusive
02:10 - Hands-On workshop for you to take your
02:12 - next year's knowledge to the next level
02:14 - it will teach you everything that you
02:15 - need to know to design build and deploy
02:17 - a fullstack app with nextjs it is a live
02:20 - Workshop so you will get direct access
02:22 - to me and I will answer any questions
02:24 - that you may have as well Plus at the
02:26 - same time you will get lots of exercises
02:28 - to learn different Topics in next year s
02:30 - you will be divided into breakout rooms
02:32 - so you can learn from your Workshop
02:34 - peers as well and learn complex topics
02:36 - together and if you get stuck don't
02:38 - worry because I'm there to help guide
02:39 - you as well Additionally you can show
02:42 - off your certificate of completion at
02:44 - your workplace or on LinkedIn to
02:46 - Showcase that are a certified next
02:48 - year's developer at the same time I will
02:50 - be sharing a lot that I couldn't
02:52 - necessarily share in this specific crash
02:54 - course in that Workshop so if you're
02:56 - interested please sign up to the weight
02:58 - list as the weight list folks get
03:00 - exclusive launch discounts and special
03:02 - bonuses as well so sign up to the weight
03:04 - list and I will see you in the workshop
03:06 - so first let's try to understand the
03:07 - difference between a library and a
03:09 - framework now what exactly is a library
03:11 - versus a framework this specific visual
03:13 - really does a great job at describing
03:16 - what a library does and so does a
03:18 - framework now library and framework both
03:20 - are reusable pieces of code a framework
03:22 - will provide the overall structure a
03:24 - skeleton for your application versus a
03:26 - library is going to provide you reusable
03:28 - pieces that you can utilize and use your
03:30 - creativity to do whatever you want using
03:33 - the analogy of luggers on the left hand
03:36 - side a library is like a box of assorted
03:38 - Lego pieces without any Specific
03:40 - Instructions so as you can see here
03:42 - they're trying to figure out what
03:44 - exactly they can do using the creativity
03:46 - they have the full freedom to use the
03:48 - Lego pieces to create whatever model
03:50 - they like they can use whatever custom
03:52 - designs as per their needs but on the
03:54 - right hand side where say a framework is
03:56 - like a Lego set with a predefined model
03:59 - of instructions you follow the
04:01 - instructions what's on the box and
04:03 - create whatever you want to create now
04:05 - there is little customizations in a
04:07 - framework but because the instructions
04:09 - are so clear you know exactly what you
04:11 - need to do on the right hand side in the
04:12 - framework you're going to think less
04:14 - about a lot of the details in your
04:17 - application on the right hand side in
04:18 - the framework a lot of the hard
04:20 - decisions are made for you so you don't
04:22 - have to worry about making those
04:24 - decisions yourself versus on the left
04:26 - hand side in the library you do have to
04:28 - make those decisions yourself which can
04:29 - be harder depending on your application
04:31 - so in our case nextjs is a framework
04:34 - versus react is a library so nextjs
04:37 - gives you a lot out of the box such as
04:40 - built-in routing different data fetching
04:42 - mechanisms really rich metadata API for
04:45 - search engine optimization and a lot
04:47 - more so you you just use those specific
04:49 - apis and customize and build your
04:51 - application versus react is a library so
04:53 - we need something called as wheat
04:56 - alongside react so that we can compare
04:59 - the two that is react creating a react
05:01 - application with wheed versus with
05:03 - nextjs which is a framework and we will
05:05 - talk about that in depth a bit later as
05:08 - well but this is what a difference
05:09 - between a library and a framework is so
05:12 - what exactly is react versus nextjs well
05:15 - react is a really popular Library built
05:17 - by Facebook it is a library for not just
05:20 - the web but also for building native
05:22 - user interfaces if you want to build a
05:24 - mobile app you can definitely do that
05:25 - with react using react native react has
05:28 - definitely onboarded many many
05:30 - developers because the development is so
05:33 - much easier and faster because of react
05:35 - with react you can create UI that is
05:38 - user interfaces if you are familiar with
05:40 - other programming languages then you can
05:42 - think of react as a view layer Whatever
05:44 - Gets displayed to the user is what we'll
05:47 - be using react for you can create
05:48 - different user interfaces from a concept
05:51 - called as components and components are
05:53 - essentially individual repeatable pieces
05:55 - that combine together and are known as
05:58 - components for example in in this case
06:00 - thumbnail is a component like button is
06:02 - a component but a component can also
06:05 - comprise of different components and we
06:07 - can combine them all together to form
06:09 - different screens and pages and so on
06:11 - now react lets you build seamless
06:14 - applications and that is also a reason
06:16 - why NEX GS is in fact built on top of
06:18 - react now you can write components with
06:21 - different code and react has a special
06:23 - rendering mechanism to know when exactly
06:25 - to update what part of the UI so react
06:28 - is pretty amazing on the on the other
06:29 - hand nextjs is in fact a react framework
06:32 - for the web it is a framework that is
06:34 - built on top of react I also like to say
06:36 - it's the production framework for react
06:38 - and you will learn why in a bit now next
06:41 - GS is a full stack framework so just
06:43 - like we talked about how react is the
06:45 - view layer nextjs not just allows us to
06:48 - build the front end but it also allows
06:50 - us to build the back end and that is why
06:51 - it is a full stack framework in nextjs
06:54 - you can do a lot for example for example
06:57 - you in order for you to add routing
06:59 - between Pages next yes provides us with
07:01 - a file system based router that we can
07:04 - definitely use and we will learn all
07:06 - about that later next yes also gives us
07:08 - the ability to fetch data in different
07:11 - ways so it also gives us allows us to do
07:13 - client side rendering as well as server
07:15 - side rendering which we'll talk about in
07:16 - a second Now search engine optimization
07:18 - is really important in your application
07:20 - if that specific app needs to rank
07:22 - higher on search engines just Google
07:24 - then in that case nexs also offers us
07:27 - with a really powerful metad data API so
07:30 - that you can get improved SEO and web
07:33 - sharability as well now nextjs does a
07:35 - lot for us nextjs also has a few special
07:39 - components that we can use that the fact
07:41 - that we use them means that we get
07:43 - additional performance benefits so this
07:45 - is what a framework does a framework
07:47 - does give you a lot of magic out of the
07:50 - box so you can focus on building
07:52 - seamless applications now one topic we
07:54 - should definitely talk about in nextjs
07:56 - is the difference between a spa work and
08:00 - a static side generation workflow Spa
08:02 - means single page application whenever
08:04 - you think of react you would think of
08:06 - single page application this means that
08:08 - the page is only rendered on the browser
08:11 - and the browser just displays it on the
08:13 - page now it's not great for search
08:14 - engine optimization because if you defin
08:17 - if you do inspect the browser elements
08:19 - for example the page Source then you
08:22 - will not necessarily see anything in
08:24 - there so when Bots are going to crawl
08:26 - your website it's not going to discover
08:28 - any cont content on the page so browsers
08:31 - on demand serve the page to the user so
08:33 - if you take a look at this specific
08:35 - diagram let's say this is a developer
08:37 - writing his blog on cookies because they
08:39 - really love cookies and they ship the
08:41 - blog code to the server on I love
08:43 - cookies.com now in a single page
08:45 - application for example they will ship
08:47 - the website blog to the server and then
08:49 - every time the user asks for I love
08:51 - cookies.com either through search
08:53 - engines or by going to I love
08:56 - cookies.com directly the server is going
08:58 - to say hey hey sure let me produce the
09:01 - HTML on demand and give it to you let me
09:03 - produce the HTML JavaScript on demand
09:05 - and give it to you now let's say there's
09:07 - one more user that comes up and asks for
09:09 - I love cookies.com the server is going
09:11 - to repeat the process and regenerate
09:14 - again the HTML on demand and give it to
09:16 - the browser the browser can render it on
09:18 - the page now this process can be really
09:20 - slow because browser is doing things on
09:22 - Demand versus in a static side
09:24 - generation workflow which is what nextjs
09:26 - is really powerful for or you would also
09:28 - call that as pre PR rendering where we
09:30 - are pre-rendering the pages in this case
09:32 - if a developer writes his blog on
09:34 - cookies builds his code and ship those
09:36 - blog files to the server on I love
09:38 - cookies.com and shares that code and
09:41 - shares the HTML to the CDN which is a
09:44 - Content delivery Network so what this
09:46 - developer is going to do or what next
09:48 - year is going to help this developer do
09:51 - is that they're going to say hey I've
09:53 - written these 10 block post let's just
09:54 - pre-download them and let's just store
09:57 - them on our nearest server this way
10:00 - let's say you are asking for data from
10:02 - let's say Hong Kong or United States and
10:05 - the server closest to you is going to
10:07 - get called and going to they are going
10:09 - to give you the HTML that's already
10:11 - pregenerated for that specific block on
10:13 - top in in a spa workflow this is done on
10:16 - Demand versus in an SSG workflow the
10:19 - work is already done for you all the CDN
10:21 - does is that it returns that predefined
10:24 - work so when the user asks for I love
10:25 - cookies.com the server is already going
10:28 - to send you the pre-built files and
10:30 - they're just like here you go this means
10:32 - the response time the initial page load
10:34 - is going to be really fast and when
10:37 - search engines look for I love
10:39 - cookies.com they're going to get all the
10:41 - HTML code embedded of the blog this
10:44 - means that I love cookies.com is going
10:46 - to get discovered on different search
10:48 - engines and it's going to make the site
10:50 - really fast as well so that is the
10:52 - difference between a spa workflow and a
10:54 - static side generation workflow also
10:56 - known as pre-rendering now react is
10:58 - popularly know known for spa versus
11:00 - nextjs is popularly known for
11:02 - pre-rendering so we cannot necessarily
11:04 - compare react with nextjs because we
11:07 - cannot compare a library with a
11:09 - framework when in fact next year's
11:10 - leverages react as a library but what we
11:13 - are going to do in this specific course
11:15 - is we are going to compare something
11:17 - called as wheat with react which gives
11:20 - you the tooling necessary that whenever
11:22 - we cannot pick a framework we know how
11:24 - to configure our application and
11:26 - depending on your use case you can
11:28 - decide hey should I go with the
11:29 - framework or not and also you will learn
11:31 - the differences so even if you do go
11:33 - with the framework you will know what
11:35 - the other route is as well so weed is a
11:38 - really powerful Next Generation front
11:41 - end tooling it does provide you with
11:43 - lightning fast HMR which means that
11:46 - anytime you make changes in your files
11:48 - in your local file system those changes
11:50 - are immediately available to you on the
11:53 - browser you don't need to refresh the
11:55 - page or do anything of that sort now V
11:58 - also has support for typescript jsx CSS
12:01 - and a lot more but at the same time V
12:04 - also uses a rollup build which makes our
12:07 - development a lot faster and rollup is
12:09 - essentially a JavaScript module bundler
12:11 - that will compile all your code and make
12:14 - it really fast as you ship it to the
12:16 - browser for production and also during
12:18 - development as it already has a really
12:21 - powerful bundler which will bundle all
12:23 - your specific code now Ved with rollup
12:25 - gives you a plug-in system so we can
12:28 - basically plug in play exactly all the
12:30 - things we want in our application now
12:32 - one disadvantage of using a framework
12:35 - like nextjs is that a lot of the
12:36 - decisions are made for us so if we want
12:38 - to opt out of those decisions we can't
12:41 - really because it's going to be a lot
12:42 - harder for us to do that so wheat is
12:44 - really powerful so that's what we would
12:46 - be doing throughout this course we would
12:48 - be essentially comparing and trying to
12:50 - see hey if a framework does provide us
12:52 - this then what does wheat with react
12:55 - give us at the same time we will also be
12:57 - checking hey what features do we really
13:00 - want in our app and what can a framework
13:02 - provide versus what a non-framework
13:05 - versus what Feed plus react will provide
13:07 - us as well this way we can compare and
13:09 - have a little bit of fun while building
13:11 - our application as well my goal with
13:13 - this specific course is to help you
13:14 - decide and give you a solid
13:16 - understanding for how all of this works
13:19 - together now to understand and learn the
13:21 - difference between the two next year and
13:23 - also react plus wheat we will be
13:25 - building an app a recipe planner called
13:28 - as tasty NEX and tasty react so let me
13:32 - quickly give you a demo now these two
13:34 - apps are identical except minor design
13:36 - tweaks now on this specific page you
13:39 - will see a list of recipes of from
13:41 - different Cuisines so on the page you
13:42 - will see a list of different recipes
13:44 - that we pull from an API now when we
13:47 - click on any specific recipe you will
13:50 - read more details about the recipe as
13:52 - the name what is a prep time and cook
13:54 - time difficulty level ingredients and
13:56 - instructions alongside an image if you
13:59 - go back to all recipes then you should
14:00 - see all the different recipes on the
14:03 - page as well you will also be able to
14:05 - filter based on quisine such as Asian
14:08 - American Greek Italian Indian and so on
14:12 - so these are all the different recipes
14:14 - that you see on the page that we are
14:15 - retrieving from the API so now let's say
14:18 - we were to shrink the size of the
14:19 - viewport then this app is fully
14:21 - responsive and we change from four
14:25 - columns to three columns two columns and
14:27 - one columns based on the viewport size
14:29 - now the app is fully responsive on the
14:31 - recipe page as well so it's easily
14:34 - readable on mobile and also on different
14:37 - device sizes now if you go back to all
14:39 - recipes this is an identical app with
14:42 - the tasty react app wherein we will be
14:45 - building these cool gradients as well
14:47 - all of this in t CSS and all the
14:49 - different components that you see on the
14:51 - page are using the Shad CN UI Library so
14:54 - you will be learning Shad CN UI as well
15:02 - and also we will be using the latest and
15:04 - greatest next year's features such as
15:06 - client and server components and so on
15:08 - so this app is fully server rendered
15:10 - versus this app is not and we will learn
15:12 - the differences of the between the two
15:15 - in this course as well and you will be
15:16 - learning all about building a really
15:18 - performant app in this specific course
15:21 - so I'm really excited to get started so
15:23 - let's dive in so now let's take a look
15:25 - at how we can start a new project in
15:28 - react now the docs definitely recommend
15:31 - to use Frameworks in fact they recommend
15:33 - a few Frameworks that you can use with
15:35 - react one is nextjs other one is remix
15:38 - Gatsby you want to use Expo for react
15:40 - native applications and so on now the
15:42 - docs they highly recommend using a
15:44 - framework because they say that you by
15:47 - starting with the framework you can get
15:48 - started with react quickly and avoid
15:50 - essentially building your own framework
15:52 - later which is a valid point so if we
15:54 - take a look at this specific section
15:56 - where the question is can I use react
15:58 - without a framework they say you can
16:00 - definitely use react without a framework
16:02 - however if you're building a new app
16:04 - they recommend using a framework because
16:06 - even if you don't need routing or data
16:08 - fetching at first you will likely want
16:10 - to add some libraries for them as the
16:12 - JavaScript bundle grows with every new
16:14 - feature you might have to figure out how
16:15 - to split the code for every route
16:17 - individually now just to summarize all
16:19 - of this for you what they're saying is
16:22 - react Frameworks they do a lot for you
16:24 - so as a beginner react Dev or as you're
16:26 - starting a new project you don't need to
16:28 - worry about all the bells and whistles
16:30 - that a framework provides you so they
16:31 - highly recommend just going for a
16:33 - framework when when it comes to react
16:35 - but let's say we still don't want a user
16:37 - framework and we have a specific use
16:39 - case or we don't want to TI be tied to a
16:41 - specific Cloud platform and so on then
16:44 - in that case they basically recommend
16:46 - that hey you can roll up your own setup
16:48 - with react grab react and react Dom from
16:51 - npm set up your custom build process
16:54 - with a bundler like wheat and or parcel
16:57 - and add other tools as you need need
16:59 - them for routing static generation or
17:01 - service side rendering and more so
17:03 - that's exactly what they tell us and
17:04 - that's what we are going to do in this
17:06 - specific course we going to grab readed
17:08 - as a bundler with react and add any
17:11 - specific capabilities as we want as we
17:13 - build our app further let's talk about
17:15 - the text tack that we going to use we
17:17 - going to definitely use wheat with react
17:19 - for example to start a project to create
17:21 - a project we obviously going to use
17:23 - nextjs to as a framework option with
17:25 - react and then for styling our
17:28 - application we are going to use a
17:30 - specific Library called as Shad CN
17:32 - Shaden UI has become so popular it's
17:35 - because it allows you to build your
17:36 - component library now Shaden Library
17:39 - uses tailin CSS underneath it so we will
17:42 - be using tailin CSS to style our
17:44 - application so you will be learning a
17:45 - bit of Tailwind along the way as well
17:47 - but let me quickly talk about why we
17:50 - using Shard CM now as we build our
17:52 - application we don't want to start from
17:54 - scratch because we mainly want to focus
17:56 - on the specific crash course and the
17:57 - learnings of that so what we are going
17:59 - to do is let's say for this spe this
18:01 - specific batch component this card
18:03 - component or anything else that we need
18:06 - in our app we are mainly going to stick
18:09 - with using components from Shaden now
18:11 - keep this in mind take a look at the
18:13 - docs it says it right here Shad CN is
18:16 - not a component Library it is a
18:18 - collection of reusable components that
18:20 - you can copy paste in your apps this
18:22 - means these are beautifully designed
18:23 - components that you can mainly just copy
18:25 - paste in your application so you only
18:27 - you will only add that specific
18:29 - component and it will create a folder
18:31 - for you with that specific component
18:33 - code in it so if you look at your
18:34 - package Json there won't be any card in
18:37 - of Shad CN from it because the motive
18:39 - with shad CN UI is that it's going to
18:42 - give you all these reusable components
18:44 - that you can just copy paste in your
18:46 - code and just right away use it it's not
18:48 - going to be installed as a dependency so
18:50 - we can make whatever changes we want and
18:52 - we we can customize it however we like
18:55 - because the base is already provided to
18:57 - us plus it's open source and accessible
18:59 - so it's really awesome so for example
19:01 - from this list we're going to use the
19:02 - card component and all we're going to do
19:05 - is use this command to add card and we
19:07 - also going to use the badge component to
19:09 - display all the different Cuisines as
19:11 - well at the same time because it uses
19:13 - Tailwind we are going to build our
19:15 - application further with Tailwind so the
19:17 - rest of our page whatever we see on this
19:20 - specific page or this page all of it is
19:22 - going to be built using taen CSS now
19:25 - let's go ahead and create our react
19:27 - application with wheat now now if you
19:29 - head over to the getting started section
19:30 - and if you scroll down there are there's
19:32 - an option for scaffolding your first
19:35 - read project here let's just copy this
19:37 - specific command and we have two options
19:39 - we could just copy this command and
19:40 - follow the prompts or we could also just
19:43 - select the react as a template for
19:45 - example but let's just do this and see
19:48 - what the prompts are so if you head over
19:49 - to our terminal I've kind of divided a
19:51 - terminal into two halves the first one
19:53 - we are going to set up a react with
19:55 - wheat and the bottom one we'll set up
19:56 - our nextjs so here let's just paste what
19:59 - we copied and now we're going to call
20:00 - this tasty react because this is the
20:03 - application that we are building where
20:05 - we display the list of recipes and have
20:07 - the ability to filter them and view more
20:09 - information and follow the instructions
20:11 - of those recipes now you can call this
20:12 - whatever you like but I'm going to call
20:14 - this tasty react now here let's just go
20:16 - with react as an option I'm going to
20:18 - expand this a little bit but let's just
20:20 - go with react as an option here when it
20:22 - comes to selecting a framework at the
20:24 - same time we are going to select
20:25 - typescript plus S swc as an option so we
20:28 - definitely want typescript in our
20:29 - project but we also also need s swc now
20:32 - s swc is a extensible rust based
20:34 - platform so it will help us in compiling
20:38 - and bundling and it's 20 times faster
20:40 - than Babble so we can we can basically
20:42 - compile and bundle our JavaScript code
20:44 - in in a much faster manner so since it's
20:46 - built on top of rust it's really fast as
20:49 - well so that's what that's the option we
20:50 - going to select and now let's just
20:52 - change the directory npm install that
20:55 - will install all the packages for us to
20:58 - get get started and once it's done we
21:00 - are going to run the development server
21:03 - now our V plus react application is
21:05 - ready to go and now look at that you can
21:07 - see that there is a counter example with
21:09 - V plus react ready to go which is pretty
21:12 - awesome now let's see what the process
21:14 - looks like for next CHS now if you head
21:15 - over to the docs and head over to the
21:17 - getting started section here make sure
21:19 - you follow the system requirements
21:21 - making sure you have the latest nodejs
21:23 - version and any of these operating
21:24 - systems so let's just go here and copy
21:27 - this specific command now create next
21:29 - stab is a CLI tool that gives you a
21:31 - bunch of prompts just like we saw with
21:33 - beat to bootst our application so now
21:35 - here again if we go to the bottom
21:38 - section of the terminal just going to
21:40 - paste what we copied and here let's just
21:42 - call this tasty next we're going to use
21:45 - typescript we're going to use es lent we
21:48 - are going to use tailin CSS we're just
21:50 - going with the defaults at this point
21:52 - and we will talk about app router later
21:54 - a bit later but let just for now say yes
21:57 - and we don't want to customize anything
21:59 - again this is going to reinstall the
22:01 - dependency now one difference here is
22:03 - that with wheat we had to go ahead and
22:05 - run npm install versus with next this
22:08 - create next app already installs it for
22:10 - us so all we can do is just go to Tasty
22:13 - next and then just run our development
22:15 - server it starts off our project on
22:19 - Local Host 3001 now there you go we have
22:22 - our next GS application also ready to go
22:25 - what we need to do is add Shad CN in our
22:27 - application now now if we go to the
22:29 - installation section we can pick to
22:31 - these two Frameworks we could go with
22:33 - Ved or we could go with nextjs now let's
22:35 - just go ahead and add shat C and to be
22:37 - now remember we have already created a
22:39 - react project so we are going to only
22:41 - add Tailwind with all these different
22:43 - configurations to our project but before
22:46 - we do that let me just give you a quick
22:48 - walkth through of the projects that we
22:50 - have already set up so now let's just
22:52 - stop the server on in both cases and
22:55 - open up the application in Visual Studio
22:57 - code now Visual Studio code is going to
22:59 - be the editor of my choice but feel free
23:01 - to use whatever you like and here let's
23:03 - just open up vs code so now let's just
23:05 - go ahead and check out our Ved with
23:08 - react application now this project is
23:10 - tasty react which is configured with Ved
23:12 - plus react so here we have a public
23:14 - folder where we will sto be storing all
23:16 - our assets node modules has all our
23:19 - packages needed to bootstrap the
23:21 - specific application then we have a
23:22 - source directory now again there's a
23:24 - specific assets folder which you can add
23:26 - any of your assets to as well alongside
23:28 - the public now if we go to the app. TSX
23:32 - this is the main page of our application
23:34 - remember we saw the counter example this
23:36 - is exactly where it is created so app.
23:39 - TSX is the main file is the main page of
23:41 - our app and it also has a app. CSS with
23:45 - all the specific CSS code as well and
23:47 - then we have a index. CSS file which
23:50 - right now does not have anything
23:52 - configured but has a overall look and
23:55 - feel this is where we would be adding
23:56 - tailin CSS then we have the main. DSX
23:59 - file now the difference between an xjs
24:02 - application versus a single page
24:04 - application as this specific one is that
24:06 - it is always going to create the react
24:09 - Dom on the specific root element over
24:12 - here and it's going to render the app
24:14 - now app is the main page of application
24:17 - but this is how usually it works and
24:19 - this specific root element is in fact
24:22 - declared over here so you have the div
24:24 - ID so all your JavaScript code all your
24:26 - HTML code essentially is going going to
24:28 - be mounted here is what it's saying over
24:30 - there right here then we have the
24:32 - index.html file which has our HTML page
24:35 - itself so you can modify it later if you
24:38 - want and then this is where our
24:40 - JavaScript code that's going to get
24:42 - bundled and minified and shown here then
24:45 - we have the TS config file with with
24:47 - configuration for a project and then we
24:49 - also have a Ved config file so now weed
24:52 - config file works really well with the
24:54 - plug-in system from rollup now if we
24:56 - click on this specific option you you
24:58 - can see all the different ways we can
25:00 - configure this specific V config file
25:02 - now remember I said that V uses rollup
25:06 - to power the plug-in system this is why
25:09 - we have react as a plug-in now let's say
25:11 - we want to add some other plug-in here
25:14 - for example then we could just do that
25:16 - in the plugins array and V has a bunch
25:19 - of different plugins that we can use
25:21 - which gives us the plugin play
25:22 - optionality that we want now again we
25:24 - are importing react from plugin react s
25:27 - swc and and then Define config which is
25:30 - this spef function right here that's
25:31 - getting exported from the Ved package
25:33 - itself so this is how the tasty react
25:36 - project works now let's go ahead and
25:38 - take a look at the next year's project
25:41 - now if you take a look at next tasty
25:42 - next we have a directory here called as
25:46 - the directory now directory will have
25:49 - all our build files there so whenever
25:52 - nextjs runs our development server all
25:55 - the files that get built are right here
25:57 - and nextjs us different Json files to
25:59 - map all the different individual files
26:01 - then we have the app directory the app
26:03 - directory is basically the app router
26:06 - that we talked about in nextjs and
26:08 - that's why we have the app directory now
26:10 - the nextjs has one more router that we
26:12 - will talk about in the routing section
26:13 - as well but for now in the app directory
26:15 - we have the page. TSX file now this
26:18 - page. TSX file is essentially the page
26:21 - that we see on our Local Host 3001 so
26:25 - this specific page will have all the
26:27 - code for it so next G uses spe specific
26:31 - file names as special files for example
26:34 - page. TSX would mean that this is the
26:37 - index page in our application similarly
26:39 - we have layout that basically surrounds
26:42 - our entire application it wraps our
26:44 - entire application and here we have the
26:47 - HTML document for example and the
26:50 - children would be all the individual
26:52 - pages that we would declare in our app
26:54 - because layout is in fact the root
26:56 - layout now we also have a specific font
26:59 - setup here called as inter again we will
27:01 - take a look at fonts a bit later and we
27:03 - also have the metadata API which where
27:05 - we can configure our specific title and
27:07 - description for SEO purposes later but
27:09 - layout is essentially the root layout
27:11 - that wraps our entire application then
27:13 - we have the global CSS file which has
27:15 - our Global CSS configuration and this is
27:18 - where we are setting up Tailwind now
27:20 - keep this in mind in V with react we
27:22 - still need to add Tailwind but setting
27:24 - up this specific project in the create
27:26 - next T prompt we already set yes for
27:28 - tailin that's why tailin is already
27:30 - preconfigured which is pretty awesome so
27:32 - one last step for us to configure but
27:34 - these are the three things that we need
27:36 - for tailin this the code for Global CSS
27:39 - then in the public folder is where all
27:41 - the public assets would live for example
27:44 - then at the same time we have a next
27:45 - config file which where we will
27:47 - configure specific values for our next
27:50 - year's project that we will take a look
27:52 - at later then we have the post CSS
27:54 - config file so that we can basically add
27:56 - CSS code inside JavaScript it's for
27:59 - compiling CSS code with JavaScript and
28:01 - this is mainly used for tailin then we
28:03 - have the tailin config file which is a
28:05 - global tailin configuration whenever you
28:07 - want to extend the existing design
28:09 - system of tailin then you can definitely
28:12 - use this specific file as well now I do
28:15 - have a course on tailin that you may
28:17 - want to check out right here which is a
28:19 - tailin CSS crash course if you're
28:22 - interested this specific crash course
28:24 - will give you a in-depth overview of how
28:26 - Tailwind works so if you're if you're
28:28 - interested definitely check that out but
28:29 - going back to our project this is where
28:31 - all our Tailwind styles are set up and
28:34 - how where we would extend the existing
28:36 - design system or even replace it if you
28:38 - like then we have the TS config file
28:40 - which has our configuration for our
28:42 - project now this is how all the project
28:43 - files are set up whenever we
28:45 - bootstrapped our Ved plus react
28:47 - application alongside our nextjs
28:49 - application now as we saw earlier the
28:51 - app router comes with taen CSS as a CSS
28:55 - framework by default as we chose in
28:57 - while setting up our project so let me
29:00 - quickly give you a walkthr of tvin CSS
29:03 - so you know exactly how to style our
29:04 - application and we'll be able to follow
29:06 - along as well so for example here tvin
29:09 - CSS is essentially a utility first CSS
29:12 - framework now if you want to learn
29:14 - tailin in depth then I also have a free
29:17 - crash course for you on tailin CSS that
29:19 - you should also check out on my channel
29:21 - right here if you want to Lear in dep
29:23 - then definitely check out the tillin
29:24 - crash course on my channel now tillin is
29:27 - a utility first CSS framework so for
29:30 - example instead of typing display Flex
29:32 - in a CSS file all you're going to do is
29:35 - write Flex instead of writing padding
29:39 - top is 4 pixel or 16 pixel or one r or
29:43 - two r or so on you are going to write PT
29:47 - hyphen 4 so that is the beauty of tailin
29:50 - it these are all different utilities now
29:52 - you can think of these utilities as
29:54 - essentially JavaScript functions that
29:56 - return the specific CSS for us for
29:59 - example essentially that's what they are
30:02 - now the reason why delin has gained so
30:04 - much popularity because you don't need
30:06 - to create a separate file Al together
30:08 - you can just inline the CSS here so for
30:11 - example if you hover over this then you
30:13 - have display Flex here now if you want
30:15 - to install the specific plug-in that I
30:17 - do have then you can go to extensions in
30:21 - Visual Studio code and then look for
30:24 - tailin CSS intelligence and you will be
30:27 - able to get the intence needed to style
30:29 - your application now heading back to
30:32 - page. TSX if you see Minh screen then
30:36 - it's 100 VH which is 100 viewport so it
30:39 - sets the Min height as well so these are
30:41 - different utilities that tilin provides
30:43 - us so if you head to getting
30:45 - started you can see the utility first
30:48 - fundamentals here and why they're
30:50 - important but if we take a look at
30:53 - responsive design then dilin does
30:56 - provide us a break Point prefix as well
30:59 - so that we can style our application for
31:01 - different viewports so for example by
31:04 - default tailin focuses on mobile and
31:07 - then we go to desktop for
31:10 - example over here p24 applies to all
31:13 - viewports but if I'll specifically say I
31:16 - want p24 to apply to mobile but let's
31:20 - say I want p64 to apply to let's say
31:24 - desktop then I can just add large as a
31:27 - prefix pin also provides us with a
31:29 - design system out of the box so it gives
31:31 - us a bunch of colors already all these
31:35 - different swatches that we can just use
31:37 - so for example if I want to change the
31:39 - background color of the page to BG I
31:42 - don't know gray 800 then I could easily
31:46 - do that thanks to tailin but at the same
31:48 - time I can change this to Pink as well
31:51 - if I want but it provides us on a scale
31:54 - from of 50 to 900 or 950 these are all
31:58 - the different colors that tailin
32:00 - provides us and it goes all the way to
32:03 - 950 now it also provides as a spacing
32:06 - scale if you want to learn anything
32:08 - about getting good at building really
32:11 - good design then you need to make sure
32:13 - that you have a really good spacing
32:15 - scale now we don't need to worry about
32:16 - it because tailin automatically provides
32:18 - us for us which is this default spacing
32:21 - scale for example if you use
32:24 - PX4 then it means it's 16 pixel or one
32:27 - ram and so on so as you saw over here
32:30 - p24 is adding a padding of six Ram here
32:34 - but if I add say PX then it will only
32:37 - add padding left and padding right and
32:40 - if I want only on the y axis then I can
32:42 - just say py so all these utilities are
32:45 - really cool and really great and you
32:47 - will learn more tillin as we build our
32:49 - application further but keep this in
32:51 - mind that I will be providing you all
32:52 - the tailin Sal so you know exactly how
32:54 - they work but I won't be necessarily
32:56 - going in depth in tail so now let's go
32:59 - ahead and set up shat CN in our projects
33:01 - now again we have already created this
33:04 - specific react project with v but now
33:06 - let's go ahead and add Tailwind to our V
33:09 - plus react project let's just copy this
33:11 - and paste it right here similarly
33:13 - there's one more command that we need to
33:15 - initialize Tailwind let's copy that as
33:17 - well now let's initialize tailwind and
33:20 - next let's just add the following code
33:22 - that they recommend us in our TS config
33:25 - file where we are configuring all how
33:28 - our project we are configuring our
33:30 - project so in the TS config file let's
33:33 - go ahead and add the base URL and paths
33:36 - here you're basically saying that the
33:38 - paths anytime that we import it's going
33:41 - anytime we import using at at the rate
33:44 - it's going to resolve it to Source slash
33:46 - whatever now next we need to install the
33:50 - types for node to the Ved types for node
33:53 - and also we need to configure the Alias
33:56 - and the Ved config file as well so just
33:58 - copy this and then paste it now let's
34:00 - also just go ahead and copy how how we
34:03 - can resolve the aliases because we
34:06 - already have everything we also need to
34:08 - import path from path now let's just go
34:10 - to Ved config file and here let's just
34:12 - paste it and we need path so path is
34:14 - going to come from path we can just
34:16 - import path from path there you go now
34:19 - that we have the path added let's just
34:21 - go ahead and run the Shad CN UI init
34:24 - command to set up our project just copy
34:26 - this and now let's just go go here and
34:28 - paste it now this is going to initialize
34:30 - our shat CN UI components that we want
34:34 - and the global configuration for how
34:36 - components would be managed so would you
34:38 - like to use scripes script yes we're
34:40 - going to go with the default style we're
34:42 - going to use the base color now if you
34:44 - take a look at here they also tell us
34:47 - how to answer these questions too so for
34:49 - the global CSS file we're just going to
34:51 - copy this then we will be using CSS
34:53 - variables and the answer is yes then we
34:57 - are going to use no where is your tailin
34:59 - config file let's just copy what they
35:01 - have here where is your located it's
35:04 - right here then the aliases for
35:06 - components are going to be at at theate
35:09 - SL components so let's just paste that
35:11 - similarly the utils are just going to be
35:14 - these utils and then are you going to
35:16 - use react server components the answer
35:18 - is no and write configurations to
35:21 - components or Json now this is the Json
35:23 - file which will manage all our
35:24 - components so we're going to just say
35:26 - yes now again it's writing components.
35:28 - Json file and initializing our project
35:30 - now let's go ahead and check our project
35:33 - so now we have the components folder as
35:35 - you see here but we also have the
35:36 - components or Json file with the
35:38 - different aliases at the same time we
35:41 - have a rough schema for how where all
35:43 - the files are for shard CN to manage now
35:46 - let's just go and test it out by adding
35:48 - a button component so let's just copy
35:50 - this let's head over to the terminal and
35:52 - add shat CN button now that we add this
35:55 - Watch What Happens now here in the
35:57 - components folder now we have a UI
35:59 - folder and it has a button. TSX now
36:01 - remember in package so we not going to
36:04 - see a like an import for button but in
36:06 - fact we have the entire code for button
36:08 - literally pasted right here this means
36:11 - we can modify this button however we
36:13 - like now this specific button has
36:15 - different VAR variants such as default
36:17 - destructive outline secondary and so on
36:20 - so if you want to use that we can as
36:22 - well now let's just go and use this
36:24 - button in app. TSX now again honestly we
36:26 - don't even need need all of this so we
36:28 - can just pretty much get rid of it and
36:30 - these as well and similarly in index.ts
36:34 - we can CSS we can give everything as is
36:36 - but in app. CSS we don't need any of
36:38 - this so let's just get rid of that as
36:40 - well and now what we can do is just add
36:43 - the button from UI components button
36:46 - from shat cm and I'll just say hi hi
36:49 - there so this specific button is added
36:51 - so now let's just go ahead and check out
36:53 - our app so now here if we refresh the
36:56 - page nothing happens because our app is
36:58 - not running yet so let's just run the
37:00 - app now now let's just go ahead and
37:03 - refresh the page and look at that hi
37:05 - there is right there that means Shad CN
37:07 - components have been installed
37:09 - successfully now alongside button we
37:11 - also want badge and card so let's just
37:13 - add that as well so let's just copy this
37:15 - and add card same time let's add badge
37:18 - as well now you can see card and badge
37:21 - are already added here so we we are good
37:24 - to go now let's just go ahead and
37:26 - install shat CN with nextjs so if we go
37:29 - to the dogs and in the installation
37:30 - section this time let's select nextjs as
37:32 - a framework and again we already have
37:34 - the project so all we need to do is
37:36 - initialize shat CN UI in nextjs now here
37:40 - let's just copy what we pasted
37:42 - initialize the UI let's go with the
37:44 - default style let's go with slate would
37:46 - you like to use CSS variables yes and
37:49 - it's going to write components. Json now
37:51 - let's just go ahead and also add card as
37:54 - well as badge here as well at the same
37:58 - time we also need button so now let's
38:00 - just go ahead and check out chat CN
38:02 - right here so we have the components
38:04 - directory we have badge button and card
38:06 - ready to go and we also have a
38:08 - components. Json file which is pretty
38:10 - awesome and now if we go to page. TSX
38:14 - again we can just pretty much get rid of
38:16 - all of this so we don't even need it and
38:18 - now what we're going to do is just use
38:20 - button just to test out that shat CN is
38:23 - configured you can just call this hi
38:25 - there get rid of image import unused now
38:27 - let's just go ahead and restart the
38:29 - server now let's just refresh this page
38:32 - really quickly and look at that hi there
38:34 - sh CN button is also configured here
38:37 - that's exactly how you would configure
38:39 - Shard CN in nextjs versus Wii specific
38:42 - setup it was pretty much the same except
38:44 - that we had to install Tailwind in V
38:47 - plus react versus with nextjs it was
38:49 - already preconfigured at the same time
38:51 - the setup was a little bit simpler with
38:53 - nextjs than it was with beat plus react
38:56 - but more or less it was pretty pretty
38:57 - much the same so it felt like the almost
38:59 - like the same experience so no
39:01 - complaints here let's go ahead and add
39:03 - routes inside of our application so for
39:05 - example whenever we click on any of the
39:07 - recipe card then we definitely need to
39:09 - route to another route called as/ recipe
39:12 - SL1 and remember tasty react as well as
39:15 - tasty next are identical applications
39:17 - with maybe little minor CSS changes but
39:20 - majority of the functionality is pretty
39:21 - much the same so the same routing is
39:24 - also needed inside of next year as well
39:26 - when we route to/ res /1 at the same
39:28 - time when we click on back to all
39:30 - recipes then get taken back to the
39:32 - homepage similarly if we go to the
39:34 - recipe page and if you click on the nav
39:36 - bar and click on tasty next then we also
39:39 - get taken back to the homepage that's
39:40 - pretty much the functionality that we
39:42 - have here so routing is something that's
39:44 - really important and one of the most
39:45 - fundamental things that you need inside
39:48 - of any application so when it comes to
39:50 - routing with react and weat we have a
39:52 - few options so first we can go with a
39:54 - really popular Library called as react
39:56 - router now react router is one of my
39:59 - favorite libraries and something that I
40:01 - have used for many many projects and I
40:03 - have really used that in production
40:05 - applications and this specific library
40:06 - has scaled really well so there's
40:08 - definitely react router as an option
40:10 - then we also have another option called
40:13 - as wi now W is essentially a do one
40:16 - thing do it well Ved plug-in where it
40:19 - also offers us routing capabilities so
40:22 - for example it also uses a file system
40:24 - based routing that that nextjs offers as
40:27 - well as well so we can definitely use W
40:30 - with be to configure application and get
40:33 - routing to now W doesn't just give us
40:34 - routing it also gives us and basically
40:38 - is identical to what a framework
40:39 - provides us different data fetching
40:41 - capabilities and so on we won't be using
40:43 - white but know that this is a viable
40:45 - option that you can use alongside we
40:47 - with react as well we will be sticking
40:48 - to using react router now when it comes
40:51 - to react router we have a few different
40:53 - options and few different routers for
40:55 - different scenarios that we could use in
40:57 - application for example these are the
40:59 - four different types of routers that
41:01 - react router offers us one is the create
41:03 - browser router then we have the create
41:05 - memory router create hash router and
41:07 - create static router create browser
41:09 - routers is what we would use and is the
41:11 - recommended router for all react router
41:13 - projects so this is what we would be
41:15 - using but you would use create memory
41:17 - router for testing and component
41:19 - development essentially like for example
41:21 - when you're using story book you would
41:23 - use something called as create hash
41:25 - router for example when you're
41:26 - configuring a web server and then you
41:28 - would use something called as create
41:30 - static router but again you are
41:32 - rendering things on your server for
41:33 - example nodejs and so on again this is
41:35 - more for server side but we will be
41:37 - using something called as create browser
41:39 - router so if we go to the documentation
41:41 - for browser router what it does it
41:43 - stores the current location in the
41:44 - browser's address bar with using clean
41:46 - URLs and navigates using browser's
41:48 - built-in history stack because browser
41:50 - has a history stack already that's what
41:52 - it utilizes to route between pages so
41:55 - that's what we would be using in this
41:56 - specific project but now on the other
41:58 - hand but when it comes to using nextjs
42:01 - nextjs uses a file system based router
42:04 - this means that whenever you create a
42:07 - new file with that specific name then
42:09 - you will be able to route to it so you
42:11 - can Define different routes inside of
42:14 - next GS and those routes are also called
42:15 - as route segments so if we take a look
42:18 - at this specific diagram whenever you
42:20 - want to route to the index page it's
42:22 - called as the index route then you would
42:24 - just create a new file called as page.
42:26 - TSX which is already what we saw as well
42:28 - for example we have a page. TSX inside
42:31 - the app directory but then whenever you
42:32 - want to create a dynamic route which
42:34 - means the slug is going to be different
42:37 - what I mean by that is let's say we go
42:39 - from one card to the other then this
42:41 - value is going to change right now it's
42:43 - one but if you go to some other card
42:44 - it's two and so on so that specific
42:46 - value is different and that's what a
42:48 - dynamic route is wherein this specific
42:51 - ID which which would be the recipe ID
42:53 - would be different so what we would need
42:54 - to do is create a page. DSX file by
42:57 - creating box brackets inside of recipes
43:00 - and then creating a folder with box
43:02 - brackets so that's what a file system
43:04 - based router does all you need to do is
43:07 - create new files and then you you would
43:09 - be able to route to them so there is no
43:12 - there are no multiple options for
43:13 - creating different routers in xjs but in
43:15 - xjs there are two different types of
43:18 - routers one is the app router and the
43:20 - other one is the pages router now
43:22 - remember when we bootstrapped our next
43:24 - year's project we selected the app
43:25 - router because app router is the default
43:28 - router right now inside of nextjs but
43:30 - before app router came along we had
43:32 - something called as the pages router in
43:34 - the pages router it's it was still a
43:36 - file system based router but the
43:38 - functionality that you get in this that
43:40 - specific router was quite different with
43:42 - app router we get capabilities like
43:44 - react server components and client
43:46 - components the apis are slightly
43:48 - different with the app router and all
43:50 - the new features are now available
43:52 - inside app router this does not mean
43:54 - that pag router is outdated or
43:56 - deprecated or Legacy in any way Pages
43:59 - router is still used by many many
44:01 - companies all across the world this is
44:03 - really important that if you are using
44:05 - Pages router it's completely fine cuz
44:08 - many applications are built using nextjs
44:11 - with the pages router but as the react
44:13 - team partnered with the nextjs team and
44:15 - we had special capabilities for react
44:18 - server components and client components
44:19 - exclusively available in nextjs and the
44:22 - way you create components changes inside
44:24 - of nextjs with app router that is why a
44:26 - new router was born called as app router
44:29 - so if you want to look for into
44:30 - transitioning from Pages router to app
44:33 - router do it slowly and do it one route
44:35 - at a time because you can still have app
44:38 - pages router working alongside app
44:40 - router as you migrate those different
44:42 - routes but that's how routing Works
44:43 - inside of next year in our specific
44:45 - project we will be definitely sticking
44:47 - with AB router as it is the latest one
44:49 - and it has all the recommended features
44:51 - that we're looking for so if you're
44:52 - starting a new project I highly
44:53 - recommend using the app router itself
44:55 - now let's go ahead and set up a browser
44:57 - router again we want one route which is
45:00 - called as the index route this is more
45:02 - of index.js Convention of using page.
45:04 - TSX we'll still be using the same terms
45:06 - for index route and dynamic route and
45:08 - react router as well so what we are
45:09 - going to do is again we already have
45:12 - create route but we are going already
45:14 - have create route here but we are going
45:16 - to create a browser router and wrap it
45:18 - where we Mount our application so let's
45:21 - just copy this and now let's just close
45:23 - all of this cuz we don't need it and now
45:25 - inside of our main.ts X let's just wrap
45:28 - app with browser router now in order for
45:30 - us to use browser router we need to
45:33 - install it so let's just go to so here
45:36 - again we can just install these things
45:38 - to get the route react router just copy
45:41 - this head over to the terminal and add
45:44 - react router inside of tasty react and
45:46 - also let's just restart the server now
45:48 - what we can do is just go ahead and
45:50 - import browser router just go ahead to
45:54 - our documentation and import browser
45:56 - router from react router Dom all right
45:58 - so now we have browser router ready to
46:00 - go but now if we go inside app right now
46:02 - we have a button there but let's just
46:04 - make sure that now app is the central
46:07 - place where we Define all our routes
46:09 - means if you take a look here we have
46:11 - these specific routes so what we are
46:13 - going to do is instead of button let's
46:15 - just get rid of it let's just Define
46:17 - routes here now we are going to import
46:20 - routes from react router same route as
46:22 - well from react router now this means
46:25 - that this is the default route but what
46:28 - we want to do is we want to use the
46:29 - element property inside of react router
46:32 - and let's create a new page called as
46:34 - the home page now even though app is
46:36 - hosting all the routes let's just
46:38 - separate the pages out so what we can do
46:40 - is inside of source whoops inside of
46:42 - source directory let's just go ahead and
46:44 - create a new pages folder and here let's
46:46 - just create a homepage now this is where
46:49 - our code for recipes will be located so
46:52 - let's just call this homepage now again
46:55 - what we can do is we can just use the
46:58 - button that we had over here and let's
47:00 - just say hi I am home from Shad CN so
47:04 - everything works as expected but here
47:05 - let's just import homepage as well but
47:07 - now this is needs this needs to be a
47:09 - react we need to declare it here so this
47:12 - needs to be a react node so let's just
47:14 - declare it here as well so if everything
47:16 - works as expected then we should see hi
47:18 - I'm home here which is amazing but we
47:20 - don't just need one route we actually
47:22 - need two so whenever we go to another
47:24 - route we need SL recipes SL one so what
47:27 - we can so what we can do over here is
47:29 - let's just create a dynamic route and
47:31 - the way you would do that is by saying
47:33 - recipe SL colon recipe ID and this
47:36 - recipe ID is the dynamic segment inside
47:38 - the specific URL inside a specific route
47:41 - and now instead of homepage we're just
47:42 - going to create a new page called as the
47:44 - recipe page now here inside of homepage
47:46 - let's just call this recipe page. DSX
47:49 - again let's just create a new functional
47:51 - component let's just call this recipe
47:54 - page and now let's just say hi I am a
47:58 - recipe beautiful now we have a recipe
48:01 - page as well as we have a homepage so
48:03 - let's just go ahead and import recipe
48:05 - page here this where we saying the
48:07 - recipe Pages go here so let's just go
48:09 - ahead and try it out so now if we go
48:11 - back to our app if we let's say go to
48:13 - slash recipes slash one you can see we
48:16 - get hi I'm a recipe let's say I just go
48:19 - to whatever ID it should still take us
48:21 - to SL High a recipe page because this
48:25 - specific value is dynamic let's say I go
48:27 - to/ recipes page let's see what happens
48:29 - nothing happens it's a blank page so
48:31 - what we can do is there's one more route
48:33 - in next year as well as react router
48:35 - which is called as a catchall route so
48:37 - instead of following this specific
48:38 - convention what we need to do is we're
48:41 - going to say hey if the route PA is
48:43 - going to be asteris that means all of
48:45 - them let's just render a element now
48:47 - we're just going to say over here to
48:49 - keep it simple that this page does not
48:53 - exist for example right just to make
48:56 - sure that that we are catching all the
48:57 - routes so right now if we head over to
49:00 - our app you can see we get this page
49:02 - does not exist which which would be an
49:04 - indication for us that hey we need to
49:06 - create this page if you like but for now
49:08 - let's just keep it as is we don't need
49:09 - to worry about it this is how you can
49:11 - basically create different routes with
49:12 - react router but let's say you want to
49:14 - do the same thing with nexs we want to
49:16 - create a index route a dynamic route and
49:18 - a catch all route that we just talked
49:19 - about but we can do here is inside of
49:22 - our app we have the page. TSX which is
49:25 - our index page so we we can keep it as
49:27 - is so let's just create a recipes folder
49:30 - and let's create another folder called
49:33 - as recipe ID and because nextjs has all
49:36 - these special files where the way we
49:38 - need to Define these Pages we need to
49:40 - create a new file called as page. DSX
49:43 - that means this becomes a default page
49:45 - inside a recipe ID so if you create a
49:47 - page for example here let's just say hi
49:50 - I am a recipe I am a recipe page for
49:54 - example so now if we head over to the
49:57 - browser and go to our create next app
49:59 - and let's say we go to/ recipe slash
50:01 - whatever value we do get high am a
50:04 - recipe page let's say we go to/ recipes
50:06 - page which does not exist at this point
50:09 - let's see what happen the next JS
50:10 - automatically gives us a four or four
50:12 - page this page could not be found which
50:14 - is exactly what we Tred to do inside of
50:16 - a react router as well so we can keep
50:18 - this as is we don't need to create a
50:20 - specific special route for this one but
50:22 - this is good to know that in next year
50:24 - it automatically handles it already but
50:26 - speak speaking of special files like we
50:28 - talked about page. DSX and layout. DSX
50:31 - let's review what are the different
50:32 - special files inside of nextjs now we
50:35 - have a few special files inside of
50:37 - nextjs these are all the different files
50:39 - we have layout page loading error and so
50:42 - on and we will take a look at few of
50:44 - these in this specific course but for
50:46 - now let's just focus on layout and page
50:48 - now the layout page the special thing
50:49 - about this page is that whenever you
50:51 - whatever you add in this specific page
50:53 - will not render and this is where you
50:55 - would typically add your header and
50:56 - footer so whenever we are ready to add
50:58 - our navigation bar we would be adding it
51:01 - here in the layout file similarly we
51:02 - could also add it in the footer as well
51:04 - and then page. TSX is essentially a page
51:08 - itself so whatever gets rendered inside
51:10 - of layout is in fact the page file
51:12 - itself so anytime you want to create a
51:14 - new page a new route then you need to
51:16 - call it page. DSX let's say you want the
51:19 - loading functionality need to create a
51:21 - page called as loading dtsx and so on
51:23 - these are different special files and
51:24 - soed on xjs now by the way if you
51:26 - interested in checking out and
51:28 - downloading all the visuals that I'm
51:30 - sharing in this specific course and
51:32 - definitely take a look in the
51:33 - description below where you can download
51:35 - all the visual assets alongside all the
51:37 - links that I've offered in this specific
51:39 - course so definitely check that out so
51:40 - now if you were to compare routing with
51:42 - nextjs compared to react router or react
51:46 - with weed you can see a few differences
51:48 - it was really simple and easy in nextjs
51:51 - because nextjs already had the router
51:54 - set up so we did not need to set up any
51:56 - additional all we needed to do was
51:58 - create new files and make sure those
52:00 - files match the naming conventions that
52:02 - we talked about in the special files
52:04 - visuals versus in react router we had to
52:06 - set up the router we had to follow the
52:08 - docs and make sure all the routes are
52:10 - properly configured now if you don't
52:12 - follow the right conventions especially
52:14 - in a react router world the routes are
52:16 - not going to reender and you may wonder
52:18 - why at the same time there are different
52:19 - specific routers as well just the
52:21 - browser router hash router static router
52:23 - and so on that we took a look at so you
52:25 - need to know which router is best for
52:27 - each scenario the good thing about next
52:28 - CHS is that all these decisions are made
52:31 - for us so like all we need to do is just
52:33 - create new files in a file system and
52:35 - the routes will be created provided we
52:36 - follow the naming conventions so you can
52:38 - definitely see how a framework is
52:41 - definitely powerful when it comes to
52:43 - creating a router as a beginner react
52:45 - Dev this might be daunting for you where
52:47 - you have to set up your own router but
52:48 - as an experienced react Dev you might or
52:51 - as someone who's maybe architecting the
52:53 - app in your company maybe they can make
52:55 - those choices to decide hey like should
52:57 - I go for file system based router that
53:00 - nextjs offers us or should I just create
53:02 - my own router with react plus weed or
53:05 - even like use something like w that we
53:06 - looked at earlier as well so these are
53:08 - different ways you can create routing
53:10 - options inside of our applications and
53:13 - you can then decide which one is best
53:14 - for your specific use depending on your
53:16 - use case you might you may prefer one
53:18 - over the other so one quick tip I want
53:20 - to share when you're navigating docks
53:22 - inside of nextjs make sure that whenever
53:25 - you search any anything in the
53:27 - documentation you are selecting the
53:29 - appropriate router because we are using
53:31 - the app router make sure that is
53:32 - selected but if you want to search
53:34 - something in Pages router then select
53:35 - that instead because the apis are
53:38 - slightly different and that's why it's
53:39 - important that you get pointed to the
53:41 - right apis when you search for it in
53:43 - your documentation now let's go ahead
53:45 - and add our navigation bar inside of our
53:47 - application for example right now if we
53:50 - look at Tasty react and also if we take
53:53 - a look at Tasty next this is essentially
53:55 - your navigation bar now Shad CN also has
53:58 - a navigation bar but we won't be
53:59 - necessarily using that because our
54:01 - navigation bar is quite simple it
54:03 - literally has one text with a specific
54:05 - font and then we whenever you click on
54:08 - any card you click on the navigation bar
54:10 - it takes you back to home so basically
54:11 - it routes you back to home so what we
54:13 - need is we just we can just create like
54:14 - a custom simple component with
54:16 - navigation and then that would be it so
54:19 - let's just go ahead and create it so now
54:21 - here in components let's create a new
54:24 - component called as now. yes now what we
54:27 - can do is let's just create a functional
54:28 - component and in here let's just call
54:30 - this Navar and now what we can do is
54:34 - just copy what I'm going to give you
54:36 - just going to and what we're going to do
54:37 - is just replace this code with
54:39 - navigation bar now this is the code I've
54:41 - already prepared so you can take a look
54:43 - at the GitHub Link in the cheat sheet to
54:45 - check it out if you like but here this
54:47 - is what we would be calling tasty react
54:49 - now the best spot for us to place this
54:52 - would be in the app. TSX right above
54:54 - routes because this is sort of the entry
54:56 - point for our app the main page so let's
54:58 - just add this here and then save it now
55:01 - if you go to our application you can see
55:04 - tasty react is already on the page but
55:06 - there's one more thing we obviously need
55:08 - to also make sure that we are able to
55:09 - route to homepage as well we can just
55:12 - use anchor link for that and let's just
55:15 - wrap it up inside of each one now you
55:17 - can see that tasty react is right here
55:20 - and then if we go to we are on the
55:22 - recipes route but if I go back to Tasty
55:25 - react then I'm on the home route around
55:26 - now which is which is what we want
55:28 - similarly let's do the same inside of
55:30 - next CHS as well so now again instead of
55:32 - next CH we want tasty next here so let's
55:35 - just go ahead and do the same so what we
55:37 - can do is just copy this nav bar go
55:39 - inside our UI folder and paste it
55:42 - because it's pretty much the same but
55:44 - now inside of nextjs instead of using
55:46 - the anchor tag we will be learning a
55:48 - special component inside of nextjs for
55:50 - example we will be learning about the
55:52 - link component the link component is
55:54 - essentially a react component that
55:56 - extends the HTML anchor element to
55:59 - provide prefetching and glans and
56:01 - navigation between Nots this might sound
56:02 - really hard but what it's essentially
56:04 - saying is that link is a special
56:06 - component it's a special react component
56:08 - what it's going to do it's extend it's
56:09 - still uses the anchor tag underneath it
56:11 - but it also has additional capabilities
56:14 - such as prefetching so if we take a look
56:15 - at what prefetching is pre fetching is a
56:18 - way to preload a route in background
56:20 - before the user visits in so for example
56:22 - if we take a look at this specific app
56:24 - I'm going to let's just refresh the page
56:26 - clear it for example completely now this
56:29 - is an app that we are building inside of
56:31 - my next year's course so you should
56:33 - definitely check it out if you're
56:34 - interested this course will teach you
56:36 - everything that you need to know to
56:38 - master nexts and build production ready
56:41 - modern application so definitely check
56:44 - this out if you're interested it is a
56:46 - really comprehensive course and it also
56:48 - comes with a cheat sheet that you can
56:50 - download so you can follow along as I
56:52 - build the course as well this is the
56:54 - easy cell app that we buil inside of
56:56 - that course now this is an e-commerce
56:58 - app for example NOW Watch What Happens
57:00 - and how the link component performs here
57:02 - we are using the link component to wrap
57:04 - these cards now as I scroll down more
57:06 - images get downloaded for example we
57:08 - have the Nike shoe which is not in the
57:10 - viewport yet but it's about to come in
57:12 - the viewport and that's what prefetching
57:14 - is link component is going to prefetch
57:16 - Pages as it's about to appear in the
57:19 - viewport so you get that additional
57:20 - performance benefit plus you're not just
57:22 - downloading pages that the user may not
57:25 - even see because from for example in a
57:27 - site like Amazon there might be way too
57:30 - many pages now imagine if Amazon were to
57:32 - use nextjs then or were to use the next
57:36 - link component from nextjs then in that
57:38 - case because it's such an image heavy
57:40 - site you will see a huge performance
57:42 - benefit because next GS is only going to
57:44 - load the things that are in the viewport
57:47 - or what's about to come in the viewport
57:48 - this will make it make the initial load
57:50 - really fast and make your website really
57:52 - fast so for example if you head over to
57:55 - the easy sell app the Nike shoe is about
57:58 - to come but you can see how as we're
58:00 - about to scroll down this is the dog
58:02 - photo and that's what shows up here how
58:04 - refreshing Works inside of Link
58:05 - component so that's what we are going to
58:06 - use one to wrap each each of our cards
58:09 - inside of Link component so only the
58:11 - ones that are needed will show up in the
58:13 - viewport but also in our tasty next nav
58:16 - bar we also going to use Link component
58:18 - now even though prefetching inside of
58:20 - test tasty NE n Bar might not have that
58:23 - much of an advantage because just
58:24 - routing to the main page but if you
58:26 - think about it when you want to use the
58:28 - link component whenever you're routing
58:30 - between internal outs because of that
58:32 - addition because of those additional
58:33 - capabilities of performance and
58:35 - prefetching and all of that that we took
58:37 - a look at but let's say instead of let's
58:39 - say we want a route tasty next to my
58:41 - website this is an external Link at
58:43 - kara.com so in that case you don't
58:46 - necessarily want to use the link
58:48 - component you just want to use the Pure
58:50 - Old anchor tag that we took a look at in
58:52 - tasty react while building a tasty react
58:54 - nabar so let's just go ahead and add
58:57 - link component inside of our application
58:59 - we can just copy this line of code and
59:02 - now let's just instead of tasty react it
59:05 - should be tasty next and let's just wrap
59:07 - it with link component now let's just
59:09 - import link from next link instead of
59:12 - dashboard it should go to homepage and
59:14 - then instead of tasty react it should be
59:16 - tasty next now make sure to close the
59:18 - link tag as well so now we need to make
59:21 - sure that we add the nav bar inside of
59:23 - layout because remember that's where we
59:25 - discussed that that all our routes all
59:28 - our headers and footer will be in the
59:30 - layout cuz one they do not reender and
59:32 - second it wraps our entire application
59:34 - so here right above children we can just
59:37 - add nav bar see nav bar is going to be
59:39 - imported from there and just save it so
59:41 - now if we go back and see you can see
59:45 - tasty next is right here but we have
59:46 - also added the link component so this is
59:48 - on recipes page so if we click on tasty
59:51 - next it should take us back to home if
59:52 - you click that look at that we are also
59:54 - redirected back to home which is which
59:56 - is exactly what we want let's talk about
59:57 - the different rendering mechanisms in
59:59 - modern applications so you may have
60:01 - heard of client and server rendering and
60:03 - we definitely took a look at the single
60:05 - page application workflow and the static
60:08 - side generation or pre-rendering
60:10 - application workflow before but let's
60:12 - talk a little bit more about client and
60:14 - server rendering and the different
60:15 - mechanisms needed in the modern
60:17 - applications today again this diagram
60:19 - really does a great job I've asked AI to
60:21 - generate this for me to use the analogy
60:23 - of someone cooking in the kitchen like a
60:26 - person cooking in the kitchen so on the
60:27 - left hand side we have client rendering
60:29 - and the right hand side we have server
60:31 - rendering on the left hand side with
60:32 - client rendering you can think of it as
60:34 - the chef giving you a bunch of
60:36 - ingredients such as the dough the
60:38 - vegetables the bread the sauces and
60:41 - everything and this person right here is
60:43 - putting together all the ingredients and
60:45 - then baking it and putting it on the
60:47 - pizza dough for example definitely take
60:49 - some time as they collect all the
60:51 - ingredients together and place it and
60:54 - form this beautiful pizza for example
60:56 - now you can literally think of this as
60:58 - client rendering when you visit a
61:00 - specific website it's like the browser
61:02 - putting together everything that you
61:04 - need on the page that's your headers
61:07 - your images assets JavaScript files and
61:10 - so on on the page to give you a fully
61:13 - cooked pizza to give you a fully baked
61:15 - website the browser is basically going
61:17 - to act like this person who's going to
61:20 - put together all these ingredients
61:22 - together and making sure your website is
61:23 - functional and exactly how you want
61:25 - definitely take a bit of time if the
61:27 - website is complex enough right because
61:29 - the person is going to take a lot longer
61:31 - the browser is going to take some time
61:33 - to put together that web page for the
61:35 - user so this means that the initial load
61:38 - of your web page depending on the
61:39 - complexity of your website the number of
61:41 - assets on it and so on and will be
61:43 - really slow if you have a lot going on
61:46 - on your web page so what's exactly
61:48 - server rendering then well this time the
61:50 - chef Cooks the entire Pizza it's the
61:53 - pizza is ready made and ready to go all
61:56 - the assets are all there all the
61:58 - ingredients in the pizza are all there
62:00 - it's basically a ready to eat pizza you
62:02 - get to enjoy your meal right away
62:04 - without doing any extra work when you
62:05 - visit a specific website the server a
62:08 - powerful computer somewhere else for
62:10 - example is going to prepare the whole
62:13 - web page and give you the ready to eat
62:15 - pizza for example it sends the browser a
62:17 - complete ready to view page and all the
62:20 - browser needs to do is just show it onto
62:22 - the page that is hydrate onto the page
62:25 - so you see the web page immediately just
62:27 - like you can eat a fully cooked pizza
62:30 - because you get a ready to eat pizza
62:32 - that's what server side server rendering
62:33 - is because that powerful computer is
62:35 - really powerful all the resources are
62:37 - ready to go and the in server rendering
62:40 - you're just going to get the page ready
62:41 - to go so that's the difference between
62:43 - client rendering and server rendering so
62:45 - now if you think of react with wheat for
62:48 - example this it react mainly is known
62:51 - for building single page applications
62:54 - like we just saw what react does is what
62:57 - we described here as client rendering
62:59 - versus what nexs does is that it gives
63:02 - you the option of server rendering by
63:04 - default creting the HTML page in advance
63:06 - and showing it to the user so this is
63:09 - why many many folks opt for Frameworks
63:12 - like nextjs or even remix Gatsby and so
63:15 - on because of the server rendering
63:16 - capabilities over to Tasty react which
63:19 - is our spa application if we go to
63:21 - inspect and go to network Tab and then
63:25 - disable JavaScript and refresh the page
63:27 - you will see a blank application and if
63:29 - we head over to page Source then we what
63:32 - we see here is literally all the assets
63:35 - that are ready to download and then
63:37 - there's a script tag with a div ID root
63:39 - tag now all this JavaScript still needs
63:41 - to be downloaded and that's how the page
63:44 - will get functional but we don't see any
63:46 - HTML that was there on the page now
63:48 - let's say this is not great for search
63:50 - engines because when Bots search engine
63:52 - Bots go to check out your website
63:55 - they're now going to care about which
63:57 - fancy technology your site is using all
63:59 - they're going to look at is the source
64:01 - and see what's on your page and and
64:04 - basically decide where it should rank on
64:06 - Google now because all they're going to
64:08 - see is Dev ID route and until JavaScript
64:11 - gets downloaded then that's when they
64:13 - will see the page the initial load time
64:15 - is going to be really slow and it's not
64:17 - what you want at all let's say we go to
64:19 - an xjs website now this is my blog and
64:22 - it is fully built in xjs now let's say
64:25 - we do this the same thing here we go to
64:27 - sources and then just say disable
64:29 - JavaScript minute we do that and let me
64:31 - just refresh the page the page is fully
64:33 - functional you know why because the HTML
64:35 - is already generated thanks to server
64:37 - rendering and pre-rendering so if we
64:39 - take a look at view page Source I'm just
64:42 - going to enable line wrap here it's a
64:44 - special plugin I've installed in my
64:46 - browser if we do that you can see that
64:49 - all the HTML code is right here in fact
64:52 - let's just take a better example if you
64:53 - go to a specific blog post and go to the
64:55 - page source and again enable line wrap
64:58 - then you should see the entire block
64:59 - post here so when a bot visits the
65:01 - website they can exactly see what's on
65:03 - my page and are able to then rank my
65:06 - website higher because my initial load
65:08 - time is going to be really fast and they
65:10 - are going to recognize everything that's
65:11 - on the page that's what I mean by client
65:13 - rendering and server rendering why you
65:15 - may want to opt in more for Server
65:17 - rendering versus client rendering which
65:19 - is our single page applications in
65:21 - general react is in fact client rendered
65:23 - versus nextjs is in fact server rendered
65:25 - and not just that it has a few other
65:27 - options that we will take a look at next
65:29 - but this is why you may want to opt into
65:31 - server rendering versus client rendering
65:33 - let's add these badges as well as let's
65:36 - add these cards as well so in order for
65:38 - us to do that we have already installed
65:40 - the component from shaten it's time for
65:43 - us to start using it so let's just go
65:46 - ahead and Implement that now so let's do
65:48 - it in react first so if you go to our
65:51 - homepage and it says hi I'm home for
65:54 - example we don't don't need the button
65:56 - because we're not going to use it but we
65:58 - definitely need a badge component for
66:00 - sure so what we're going to do is here
66:03 - we will have a list
66:06 - of Cuisines so we're going to say
66:11 - Cuisines and then here this is going to
66:13 - have our list of Cuisines which we'll
66:15 - take a look at what we need is we're
66:17 - going to map through those list of
66:19 - Cuisines and here we're just going to
66:21 - add the batch component from
66:24 - chatan and we're going to map
66:26 - them we're also going to return them
66:29 - here or
66:33 - rather let's just do this because this
66:36 - is just going to act as a return anyway
66:39 - this then the second parameter of map is
66:42 - an ID so we can use that ID and the name
66:44 - of the cuisine as a way to create a
66:47 - unique key for our badge
66:51 - component so this is what we can do now
66:54 - this cu are just going to be an array of
67:01 - strings so now I already have a list of
67:05 - Cuisines I'm just going to add that so
67:08 - badge we're going to override a few
67:10 - Styles here now the variant for badge is
67:13 - going to be
67:17 - outline but there are several different
67:19 - variants as well you saw here it could
67:21 - be default destructive outline and
67:23 - secondary
67:25 - so let's just say CU Cuisine is going to
67:30 - be badge all right so so now if you go
67:34 - back here you can see that we have all
67:37 - the list of
67:39 - elements now we also want to render a
67:41 - list of cards here
67:44 - too so for that let's just basically use
67:48 - the card component here so we can just
67:49 - say card
67:51 - component so the card component let's
67:53 - just see the API for the card component
67:56 - itself so if we take a look at the shat
67:58 - CN UI Library we have the card component
68:02 - and there are two tabs here the preview
68:04 - Tab and the code tab so we can always
68:06 - review the code that we want
68:08 - here so what we can do is we really want
68:11 - a really simple
68:12 - card so we can just pretty much just
68:15 - copy
68:18 - this and then let's just paste what we
68:21 - copied and save it again we need to make
68:25 - sure we importing all of this
68:28 - from shat
68:30 - CN components UI folder that we
68:34 - have there you
68:36 - go so now if you look at it look at our
68:39 - card component we have an image we have
68:42 - a title we have a footer for example so
68:46 - we could literally make it this could be
68:47 - the header this could be the body the
68:49 - content and then this could be the
68:51 - footer that's ex that's exactly how we
68:54 - can configure this so for that we need
68:56 - an array of items so before we go and
68:59 - call our API which gives us a list of
69:02 - items we need to First make sure we can
69:04 - just add some dummy data so we can just
69:07 - say recipes I
69:10 - guess and then here this these this
69:12 - literally could be the array of recipes
69:14 - so here we can say ID is going to be
69:17 - zero or maybe let's just say start with
69:20 - one and then we will have a name which
69:23 - is going to be something like
69:26 - like chicken
69:30 - sandwich and the cuisine is going to
69:34 - be
69:36 - American something like that this way we
69:39 - can just map through it so we can just
69:42 - say recipes. map recipe again same thing
69:47 - use the second parameter in the map
69:50 - function to
69:56 - use it for the key so again we can just
69:59 - say key is going to
70:02 - be
70:04 - recipe. name and then it could be idx
70:09 - for
70:10 - example at the same time we can also use
70:12 - recipe. ID as well if you like but again
70:15 - let's just keep it as is so now instead
70:17 - of title we can just have recipe.
70:21 - name and then we don't really need a
70:23 - description so let's just get rid of it
70:25 - similarly instead of card content we can
70:29 - have ideally this would be an image but
70:32 - I just replace this so we can just say
70:35 - this is going to be the name this is
70:37 - going to be the footer and this will be
70:39 - some image that we want so now if we go
70:43 - back to our app we can see that the card
70:45 - component is already ready here we have
70:48 - the chicken sandwich and we have the
70:50 - footer which is what we Define in an
70:52 - array of elements so now so now that
70:55 - let's just let's just get rid of all of
70:59 - this and then paste what I just copied
71:02 - right here because again like I
71:05 - mentioned I'm going to give you the
71:06 - structure and the CSS for
71:08 - it so now we can just get rid of header
71:11 - alog together or header could have the
71:14 - image here
71:17 - eventually but for now we don't need to
71:19 - worry about it at the same time we need
71:21 - the key
71:23 - back so we can say recipe.
71:28 - name hyphen and then we can just say
71:31 - recipe.
71:34 - idx
71:38 - oops here here all right or just
71:44 - idx so now we have our basic card ready
71:48 - to go we don't have servings prep
71:50 - minutes or cook time minutes just add it
71:52 - here inside of our
71:55 - servings is going to be
71:57 - four prep time minutes is going to be
72:02 - four and then cook time minutes is
72:06 - probably going to be
72:08 - five okay so now we have our basic card
72:11 - component ready to go with the hover and
72:14 - all that but obviously we need to make
72:16 - sure that only shows one card so we will
72:19 - add a div around it too so that we have
72:22 - like four
72:24 - columns initially on desktop and then
72:27 - three columns and two columns and so
72:29 - on just like we have here where if we
72:33 - switch to for
72:38 - example different devices then our
72:41 - columns increase just like that so we
72:45 - want something like this so definitely
72:46 - let's configure that too again let's
72:48 - just add the necessary styling for
72:52 - that now if we go back look at that we
72:55 - do have our card ready to go let's give
72:58 - it some page styling too so that it
73:00 - looks how we want it
73:02 - to here let's
73:04 - just replace this with these two
73:07 - elements and add another
73:11 - div so now we have our card ready we our
73:15 - card is looking pretty good and
73:17 - obviously this is zoomed in so this is
73:20 - how our card looks like we definitely
73:21 - need an image but our P structure looks
73:24 - pretty identical iCal to what we want in
73:27 - this specific application now obviously
73:30 - we do want gradients as well which we'll
73:33 - configure that a bit later but for now
73:35 - let's focus on getting real data for
73:38 - tasty
73:39 - react so let's talk about data fetching
73:42 - inside of react with wheat alongside
73:45 - nextjs now we will be using this dummy
73:48 - Json data to get the list of recipes so
73:51 - if we take a look at our docs there are
73:54 - a bunch of different different recipes
73:55 - here and this is what we'll be focusing
73:57 - on it will give us a list of recipes for
74:00 - example and then we have it has
74:02 - everything that we need now let's say we
74:04 - go to two a specific ID then this gives
74:06 - us a specific recipe as well that we can
74:09 - get when we go to the individual recipe
74:11 - page for example that's what we would be
74:13 - using for data fetching now in order for
74:15 - us to fetch data inside of a react wheat
74:18 - application what we could do is use the
74:21 - fetch API now this is a very common
74:23 - fetch function that we could use at
74:25 - returns a promise and then we can use
74:27 - fetch to basically fetch any specific
74:29 - resource that we want so we could fetch
74:32 - use the fetch API to fetch the list of
74:33 - recipes and then individual recipes as
74:36 - well but in react and weed like I
74:38 - mentioned we have W which already has
74:41 - different data fetching mechanisms that
74:43 - we can use if we were to use W to
74:45 - basically get the list of items now this
74:47 - would mean that we don't necessarily
74:49 - need to client render we could in fact
74:51 - server render and opt into different
74:53 - data fetching mechanisms as we like as
74:55 - well so for example inside of data
74:57 - fetching we have different modes such as
75:00 - SSR server side rendering Spa that means
75:03 - if you want if you want spa for some
75:05 - reason then we could do that as well SSG
75:08 - which is static site generation HTML
75:10 - only so the page is only rendered to
75:12 - HTML with no zero or minimal JavaScript
75:16 - and so on so this is totally a doable
75:18 - option but in our case we're not using
75:19 - Wes but I wanted to definitely tell you
75:22 - that this is an option that we could use
75:23 - with with beat with beat and react but
75:26 - in that case we're just going to go with
75:27 - fetch we're going to use fetch to fetch
75:30 - the list of recipes but this is great
75:32 - for beat and wheat plus react and we can
75:35 - just use fetch in one of the react hooks
75:38 - basically fetch the data and manage
75:39 - State locally but when it comes to
75:41 - fetching data in nextjs there are a few
75:44 - different ways we could approach this
75:46 - the nextjs also offers us a fetch API
75:50 - but a special fetch API next GS extends
75:53 - the native fetch API and it allows us to
75:56 - configure the caching Behavior inside of
75:59 - our application so remember how I said
76:02 - that we could server render an app or a
76:04 - client render an app and so on in next
76:06 - years in fact there are a few different
76:08 - ways you could fetch data itself so one
76:10 - is called a static side generation what
76:12 - this means is that we still use the
76:14 - browser fetch but next year will extend
76:16 - the specific fetch function and add a
76:19 - property called as cash Force cash this
76:21 - means that whenever you use this
76:23 - specific function by by default your
76:25 - request data is just going to be cached
76:28 - and unless you purge that specific cache
76:30 - that data is going to stay this means
76:32 - that anytime the user accesses the data
76:35 - it's in fact cached on the server and
76:37 - you're getting that cached data over and
76:39 - over again on the other hand your data
76:41 - does get stale after a bit for example
76:43 - in our application if we were to go
76:46 - ahead and cash all of this data but
76:48 - let's say that our title we change our
76:51 - title for example then in that case now
76:53 - the data is still so what we could do in
76:55 - nextjs is we we can use something called
76:58 - as incremental static regeneration which
77:01 - would mean that every hour the data is
77:04 - going to get revalidated that we going
77:06 - to get fresh data you're going to
77:08 - request for fresh data every hour the
77:10 - first user that requests for this
77:12 - specific data the first time is going to
77:14 - still get stale data but but the next
77:16 - time the user any new user is going to
77:19 - get fresh data because that's going to
77:20 - be a signal for next year that hey go
77:22 - fetch new data and lastly we have
77:24 - servers rendering which where we can add
77:26 - a cach no store which means that there's
77:28 - going to be no caching caching and we
77:30 - are going to have fresh data every
77:32 - single time but still we will have the
77:34 - capabilities where HTML is pre-rendered
77:36 - and then we show the data after as well
77:40 - so these are different ways we could
77:41 - fetch data inside of nextjs and all
77:43 - within the fetch function but you need
77:45 - to be careful when you use the fetch
77:47 - because nextjs does cash a lot and this
77:49 - is something you need to be really aware
77:50 - of let's just go ahead and use that in
77:52 - our application let's just use
77:55 - fetch to fetch these
77:58 - recipes so now in our app we have
78:01 - recipes that are coming from a
78:04 - array we don't need this we can do is we
78:07 - can just create a local state call this
78:10 - recipes set recipes once we do get the
78:13 - data from the API we can set the recipes
78:16 - so for that let's just use a life cycle
78:18 - hook called use effect this we want this
78:21 - hook to only run the first time that
78:24 - means we we need to give it an empty
78:25 - array so we we're going to say that hey
78:29 - let's just use fetch so we can just
78:32 - say again in we cannot call a async
78:36 - function directly inside of a use effect
78:39 - so what we could do is we could just say
78:42 - get
78:43 - recipes and make this an Asing
78:46 - function and I's just say response and
78:49 - let's just say fetch and then here call
78:51 - the
78:52 - recipes and then now again let's just
78:55 - get the data so we can just say await
78:58 - response.
79:00 - Json and this gives us the response Json
79:03 - data itself and now if there is
79:08 - data then we can just set the
79:11 - recipes now we just call get recipes
79:15 - right here outside in the function this
79:18 - way we can call it inside use effect now
79:20 - keep this in mind we don't need these
79:22 - recipes anymore we can just do directly
79:25 - call them let's just set the recipes and
79:28 - set with set it with data so now let's
79:31 - just refresh the page and you can see
79:33 - that we do have an error the recipes.
79:35 - map is not a function so let's just see
79:38 - what happens so for
79:40 - example we can just console log
79:46 - data and if we open up browser developer
79:49 - tools and go to
79:51 - console then we have an object and data
79:55 - has recipes as an array so what we need
79:58 - to do is we can just say
80:01 - recipes so if that's the case then let's
80:03 - just call data
80:05 - recipes and now if everything works as
80:08 - expected then we should see a list of
80:10 - cards with all the data isn't that
80:13 - amazing so we have our list of cards
80:14 - ready to go and obviously this card does
80:17 - not look like the card that we want
80:19 - because it does not have an image now
80:22 - here where we had the placehold for
80:25 - image inside of a header let's just add
80:27 - an image so we can say image
80:31 - source and recipe.
80:34 - image and then an all tag we can just
80:37 - say recipe do
80:41 - name width is going to be
80:44 - 500 height is going to be
80:49 - 500 and let's just make it a background
80:52 - cover rounded and then let's just also
80:55 - give it a shadow and these are all
80:56 - different tailin utilities it makes it a
80:59 - background cover makes the corner
81:01 - rounded and also adds some Shadow so now
81:04 - if you do that oh my God look at that
81:07 - this our application looks exactly what
81:10 - we want it almost look like the
81:12 - application that we trying to build here
81:14 - which is awesome so this app is already
81:17 - looking pretty good so now we have all
81:19 - our images from our application right
81:23 - away so now this looks pretty great and
81:25 - this is how you could fetch data inside
81:27 - of react plus wheed but if you're
81:29 - already familiar with how data fetching
81:32 - Works in react and it's exactly that but
81:35 - now let's say we want to fetch data
81:37 - inside of nextjs then how would we do
81:39 - the same well if you want to fetch data
81:41 - inside of nextjs then again we would use
81:44 - the exact same we would do the exact
81:47 - same thing so what we are going to do is
81:50 - we literally going to copy all of this
81:54 - because everything stays the same
81:57 - there's nothing in here that should not
81:59 - be in the other page so if we go to our
82:03 - we go back here we should just basically
82:06 - replace the whole thing now if you take
82:09 - a look we get an error saying that you
82:13 - are importing a component that needs use
82:15 - effect this means it only works in a
82:17 - client component and none of its parent
82:19 - are marked with used client so they are
82:21 - server components by
82:22 - default so this just brings to the next
82:25 - topic which is client and server
82:26 - components which we'll talk about in a
82:28 - second but let's just fix this error for
82:30 - now so now we're just going to call this
82:33 - a client
82:35 - component and by calling this a client
82:37 - component we basically saying that hey
82:40 - just do perform the fetch on the in the
82:43 - browser
82:44 - itself so now if we do that you can see
82:48 - that literally
82:49 - nextjs also has the same code and
82:53 - everything works as EXP Ed which is what
82:55 - we want so you might wonder well why did
82:58 - we add that client again well let's take
83:01 - a look at that next so let's talk about
83:03 - client and server components well
83:05 - remember we had to add the use client on
83:08 - top to fix it but let's talk about what
83:11 - that is to begin with so for example in
83:14 - nextjs by default with the app router
83:16 - remember I said that a lot of things
83:20 - changed with app router this is exactly
83:22 - it with app router
83:25 - we get new client and server components
83:28 - and as of this point it's only available
83:30 - inside of
83:32 - nextjs with client
83:35 - components what happens is when a
83:37 - browser requests data for asking to
83:40 - fetch the data what we typically do is
83:43 - make an API request and that's exactly
83:45 - what we're doing right we're basically
83:46 - calling the recipes API and then the
83:49 - server is going to do the work and it's
83:50 - going to return the data the recipe data
83:53 - and then we're going to display that on
83:54 - the page which is our client on the
83:55 - browser this is fine with client
83:57 - components this is exactly what we did
83:59 - just now but but by default in nextjs
84:03 - all the components are server components
84:05 - so if you want to say that hey this
84:08 - needs to be on the client then we need
84:10 - to make it a client component and that's
84:12 - why we had to add the use client
84:15 - directive which is what we did here the
84:17 - use client directive inside our
84:19 - components inside our page so what
84:22 - exactly are server compon components
84:24 - done well what happens in a server
84:27 - component is whenever we the browser
84:31 - that is the client asked to fetch
84:34 - data we now have the ability to make
84:37 - those components themselves as server
84:40 - components what this means is we can
84:43 - just say that hey if this is a server
84:44 - component instead of browser doing the
84:46 - work of calling the API fetching the
84:50 - data and so on whenever we make an API
84:53 - request we make a call to the server the
84:56 - server then returns it back to the
84:57 - browser and the browser then passes the
85:00 - data and shows it onto the page but
85:02 - unless there's an actual need for a
85:04 - browser that means we are calling we are
85:07 - basically calling the window API or we
85:10 - are calling something that specifically
85:13 - needs a browser and we don't need a
85:16 - browser at all we can just make it a
85:18 - server and that's why and that's where
85:20 - server components were born we could
85:23 - just make components as server
85:24 - components this means the server is
85:26 - going to handle everything this means we
85:28 - can make our backend calls on the server
85:30 - itself and then it will get returned not
85:33 - in the form of Json but in the form of a
85:35 - special stream and then the browser is
85:38 - just going to show it onto the page to
85:40 - the
85:40 - user that's why server components are
85:43 - Bor when would you make components as
85:45 - client components let's say you do need
85:47 - a browser then you would make them as
85:49 - client components now in nextjs there is
85:52 - a really good
85:54 - post when should you use server versus
85:56 - client components well if you are
85:58 - fetching data accessing backend
86:00 - resources keeping sensitive information
86:03 - keeping large dependencies and all of
86:05 - that can be on the server but let's say
86:08 - you have onclick handlers onchange
86:10 - handlers you're using any of the react
86:12 - life cycle hooks such as use State use
86:15 - effect and so on and you're using any
86:17 - browser specific API such as the window
86:20 - object or you want to get users location
86:23 - then all of this can only happen on the
86:25 - browser and that is when you need to
86:27 - make it a client component otherwise by
86:29 - default everything else is just going to
86:30 - be a server
86:31 - component so this is
86:34 - why in our case we decided to make it a
86:38 - client component which we'll get to in a
86:39 - second but one of the other pros of
86:42 - server components are that you don't you
86:44 - now don't need to you don't need to
86:45 - create an a brand new API because
86:49 - everything is within the component so
86:51 - you can just get the back call the
86:53 - backend API
86:55 - whatever data response that you get back
86:57 - you show it onto the component so you
86:59 - can call the back end in the same
87:00 - component and now your client bundle is
87:02 - going to be really small because this
87:06 - because there's less stuff to
87:08 - download for the browser because server
87:11 - is performing majority of the operations
87:14 - and this is why you get a performance
87:15 - boost as well with server components
87:18 - which is pretty amazing if you were to
87:20 - take a look at a component do we want to
87:22 - use use client not really even though we
87:26 - definitely use use State because we just
87:29 - copy pasted the code from our client
87:31 - from our V plus react application we
87:34 - could just get rid of
87:36 - this and what we could do is pretty
87:41 - much extract this function out keep it
87:44 - here get rid of this also and instead of
87:47 - set recipes we can just return data.
87:51 - recipes
87:54 - now what we can do here is we can just
87:57 - directly call because this is a server
87:58 - component now because we don't have the
88:00 - used client directive so we can just say
88:03 - recipes is going to be
88:06 - await get
88:08 - recipes and this means we need to make
88:11 - this a async function now everything
88:14 - should work as expected because there is
88:16 - no client functionality at all so this
88:18 - is the beauty of using a server
88:20 - component so now if everything works as
88:22 - expected at applic application should
88:24 - perform as as it should look at that now
88:28 - we have our application identical but
88:32 - the difference is that we are this is
88:34 - going to be way faster than our V plus
88:36 - react application because the server is
88:38 - doing a lot for us but let's say you do
88:40 - want to make it a client component then
88:42 - you definitely need to add the directive
88:44 - on top called use
88:46 - client but in our case we don't need to
88:49 - worry about it because we don't need to
88:51 - add
88:52 - it now let's implement filtering so for
88:55 - example the minute we click on Asian or
88:57 - American or any of these different
88:59 - amazing usines we want to make sure that
89:02 - the cards Al also filter accordingly
89:04 - when we click on American only American
89:06 - dishes show up when we click on Italian
89:08 - only Italian Indian then only Indian and
89:11 - so on the minute we click on all then we
89:13 - want all the Cuisines to show up all the
89:15 - recipes to show up that's exactly what
89:17 - we want to implement here but in a react
89:19 - application the way we would Implement
89:21 - that is by again making sure that we are
89:24 - creating some sort of a filter storing
89:26 - the state of the badge somewhere and the
89:28 - minute we click on that you want to
89:30 - store the state of the badge and
89:31 - basically check the entire list of array
89:34 - and filter by the cuisine itself so for
89:36 - example here we have a Cuisine every
89:39 - time there's a property for that so we
89:41 - could just filter accordingly the way we
89:43 - would Implement that in react is very
89:45 - similar to what we have for get recipe
89:47 - now instead of get recipes and set
89:49 - recipes let's add another state called
89:52 - as filter recipes and set filter recipes
89:56 - again it can be empty and now what we
89:58 - want is let's also create another state
90:01 - for badge and set badge now here again
90:04 - we can just say use State and by default
90:07 - it's just going to be all so now what we
90:09 - could do is we can say that whenever a
90:12 - user clicks on badge so we can just add
90:16 - a onclick Handler here and we can just
90:18 - say handle on click and let's also pass
90:21 - in the event oops pass in the event and
90:25 - also the cuisine that we have selected
90:27 - so here again we can add another Handler
90:30 - called handle on click which is event
90:33 - and Cuisine and here again Cuisine is
90:36 - going to be a string and then event is
90:39 - going to be react. change event with
90:43 - HTML input element this is the event now
90:46 - we want to make sure that whenever a
90:48 - user does select on the batch the page
90:50 - does not refresh so we can just add pre
90:52 - and default at the same time now we can
90:54 - just set the badge to be whatever the
90:57 - user selects now at the same time let's
90:59 - just make sure by default is just empty
91:01 - and then we as the user selects the
91:03 - badge we can enable it now what we want
91:05 - to do is we want to set filter recipes
91:08 - whenever the user selects the badge so
91:10 - for that we definitely need to repurpose
91:13 - the specific function and add a use a
91:15 - filter function to filter the elements
91:17 - so what we could do is we could just
91:19 - create a new function Al together here
91:22 - and we can just call this get all
91:24 - recipes and just paste it and then
91:26 - return data. recipes oops data. recipes
91:30 - here make this an acing function and now
91:32 - instead of you can just say recipes is
91:35 - going to be get all recipes and then
91:38 - let's just await it here now if there
91:40 - are recipes then we can just set the
91:43 - recipes so everything should work as
91:44 - expected but now this enables us to use
91:47 - it inside another function because
91:50 - whenever the user has selected a badge
91:52 - we need to do the same so let's just add
91:54 - another user effect and say that hey if
91:56 - there is a badge then add the code for
91:59 - it but we need to also make sure that we
92:01 - are closing the use effect and only
92:03 - enabling this only this use effect only
92:06 - should trigger Whenever there is a badge
92:08 - so we can just say if there's a badge
92:10 - then get the filtered recipes so we can
92:13 - just say get filtered recipes now the
92:16 - filtered recipes again is going to be a
92:18 - function which is going to be a async
92:21 - function now here we can just call
92:24 - recipes and since we already checking
92:26 - for badge we can just say if recipes.
92:30 - filter recipe if the recipe. cuisine is
92:34 - equal to badge then we want to show we
92:37 - want to set this but let's just make
92:39 - sure we have filtered recipes by Cuisine
92:43 - here and now we only want this when
92:46 - going to set this Whenever there are
92:48 - filtered recipes by Cuisine so now that
92:50 - we have this we need to make one more
92:52 - tweak right now we are are only mapping
92:55 - through recipes but not through filter
92:56 - recipes so what we can say is if filter
92:59 - let's just make sure the name filter
93:01 - recipes if filter recipes. length is
93:04 - greater than zero then show filter
93:06 - recipes else recipes this way we are
93:09 - mapping through filter recipes if there
93:11 - is a filter else we're just going to
93:12 - return the recipes itself so let's just
93:14 - make sure we enclose this that we are
93:17 - able to map it and now if you click on
93:19 - Mediterranean then look at that we do
93:21 - have the filter working as well as well
93:24 - as all recipes as intended and these
93:26 - recipes are definitely mouthwatering so
93:29 - I'm definitely feeling a little hungry
93:30 - right now all right now we have filter
93:33 - implemented too so let's just go ahead
93:35 - and add the type for recipes so I've
93:37 - already added the type for recipe type
93:39 - so let's just go ahead and assign it
93:41 - wherever necessary so here you're going
93:43 - to have recipe type idx is just going to
93:47 - be number similarly we have recipe type
93:51 - here so we can easily access it and
93:53 - that's it so this is how you can
93:54 - Implement filter inside of react with
93:57 - wheat now we want to do the same thing
93:59 - in nextjs so let's see how we can do
94:00 - that now things change a little bit
94:02 - inside of next CHS remember we talked
94:04 - about client and server components how
94:07 - specific components need to be a client
94:09 - component whenever we need some
94:11 - interactivity so in this case we
94:13 - definitely need interactivity whenever
94:15 - we click on any of these items for
94:18 - example then it is interactivity that we
94:20 - need in our tasty next app so what we
94:22 - could do is but if you change make the
94:25 - entire component as client component
94:27 - then we will lose the benefit of
94:28 - performance what we could do is we could
94:30 - extract this badge component and keep
94:32 - the interactivity limited to that this
94:34 - way we can pass around props and make
94:36 - sure everything works as expected so
94:38 - let's just copy this and inside of our
94:40 - UI let's just create a badge filter
94:44 - component again we can just say it's
94:46 - going to be called Das filter let's just
94:49 - paste what we copied let's just also
94:51 - grab the Cuisines here so now let's just
94:53 - import badge as well and we need a
94:57 - onclick Handler so let's just copy that
94:59 - too so now we can just paste what we
95:01 - copied and we also need a set badge
95:04 - badge and set badge which is going to be
95:07 - a use State and then it's going to be
95:09 - empty but again we need to make this a
95:11 - client component all righty so now we
95:14 - have this going so what we could do is
95:16 - inside of our application inside of our
95:19 - page instead of calling Cuisines here we
95:23 - could just say
95:24 - batch filter and that's it now this way
95:27 - we can get rid of this Cuisines as well
95:29 - this way we can definitely have a client
95:31 - component as a child of a server
95:32 - component so this works as expected now
95:35 - how can we Bas make sure that from the
95:37 - batch filter when we do set the badge is
95:40 - the specific badge value badge value is
95:43 - what gets shared externally so that we
95:46 - are able to then filter our page and
95:48 - show and basically also so that we're
95:51 - able to filter the page and show that P
95:53 - page accordingly as well so for that
95:55 - what we can do is we need to also
95:57 - extract this code out into its own
96:00 - component this way this file can still
96:02 - stay a server component you get rid of
96:04 - this too let's create a recipe list
96:07 - component so if we say recipe list. TSX
96:10 - again this is going to be a react
96:11 - functional component say recipe list and
96:14 - now paste it what we copied we don't
96:16 - need this additional div but we also
96:19 - need to just take in whatever import we
96:21 - have here paste it just paste it and now
96:24 - here we'll have recipe list the recipe
96:27 - list can be a client component if we
96:29 - like for example but we need to set the
96:32 - recipes as well we need to make sure
96:34 - that recipes this specific recipe is
96:37 - what gets passed in here so we can just
96:39 - say recipes equals recipes just like
96:41 - that so we need to take in recipes as a
96:44 - prop so we can see recipes is going to
96:46 - be array of recipe type recipe type is
96:50 - something we need so what we can do is
96:52 - just copy paste recipe over here so we
96:55 - can just say the type is going to be
96:57 - recipe type so now we have the recipe
97:00 - and then we can just say this is going
97:01 - to be recipe type and this is going to
97:03 - be number as well so now here we just
97:06 - need to assign recipes is going to be
97:09 - this value all right so now we have this
97:12 - we have we're still making this a server
97:14 - component and passing the data as prop
97:17 - here but whenever there is a filter for
97:20 - example we also need to pass that too
97:23 - like we need to make sure that we are
97:25 - able to get that information as well so
97:28 - so let's just make sure everything works
97:29 - expected so now if we refresh the page
97:32 - you click on any filter it doesn't work
97:34 - for now but we definitely want
97:36 - everything else now in order for us to
97:38 - make sure that batch filter when it does
97:41 - set the value it's setting in a global
97:43 - place where anyone can access it so that
97:46 - eventually we could just filter the
97:48 - recipes as we want now that's not the
97:51 - case anymore right now we're just
97:52 - getting the recipes from the API and
97:54 - just mapping through it we also need to
97:56 - map through filter recipes and for that
97:58 - we need a reducer and a context to set
98:01 - the badge as well as to get the badge
98:03 - value as well we can filter it so let's
98:05 - just go ahead and create a context value
98:08 - so here we can say recipe context. DSX
98:13 - and if we just create a reducer here
98:16 - again the name is going to be selected Z
98:20 - typo here and now the initial state is
98:22 - going to be
98:23 - State and then selected Cuisine is going
98:27 - to be empty similarly if we create a
98:30 - type for initial State it's just going
98:33 - to be let's just say State it's just
98:35 - going to be State selected Cuisine is a
98:39 - string perfect so now the state can be
98:42 - assigned to here let's just move it on
98:45 - top perfect so now we also need a action
98:49 - type here so we can just say type is
98:52 - action type type again type is going to
98:54 - be string and payload can be and we
98:57 - don't need to default export it in fact
98:59 - it doesn't need to export at all so we
99:02 - can just say recipe reducer so what we
99:04 - ideally want is whenever we dispatch an
99:07 - action for selected Cuisine then the
99:10 - selected Cuisine does get set so we can
99:12 - just say selected Cuisine is going to be
99:15 - payload do
99:17 - selected beautiful so now that we have a
99:20 - basic reducer ready to go now what we
99:22 - want is a provider for context so we can
99:26 - just say recipe provider and this can
99:28 - just take children as a prop and
99:30 - children would be react. react node now
99:34 - we can just return it now this is just
99:36 - typical way of creating context so I'm
99:38 - going really fast but if we just say
99:41 - recipe context provider and then render
99:44 - the children here now we also need to
99:47 - make sure that we are getting State and
99:50 - dispatch from use reducer which is
99:53 - naturally exports and here we can just
99:55 - initialize reducer and add initial State
99:58 - here now here's the thing we don't have
100:00 - recipe context yet so we need to create
100:02 - it so we can just say this needs to be
100:04 - exported so we can just say recipe
100:07 - context will be create context from
100:10 - react and then this could be the initial
100:13 - State itself perfect so now the state or
100:16 - I guess I should say the value will be
100:19 - State comma dispatch and instead of
100:22 - state it is is going to be Cuisine and
100:25 - we can just directly access it here
100:28 - right so now let's just go ahead and
100:31 - initialize it or declare it here so now
100:34 - layout is a central spot where everyone
100:37 - the entire application can access
100:39 - everything so we would be creating
100:41 - recipe provider you would declare recipe
100:44 - provider here and wrap our entire
100:46 - application with it so we can just say
100:48 - this so recipe provider is in fact
100:50 - imported from Context which is what we
100:52 - want now that we have this let's just go
100:55 - to badge filter and instead of setting
100:57 - the badge we're just going to get
100:59 - dispatch from use context and then
101:03 - recipe context and now what we're going
101:05 - to do is we're just going to dispatch it
101:07 - so we're going to say dispatch and then
101:09 - the type is going to be what we just
101:11 - defined here and then you're going to
101:13 - have a payload now we said payload do
101:16 - selected Cuisine so we need to Define it
101:19 - selected Cuisine is going to be Cuisine
101:21 - all righty now we have set it now it's
101:24 - time for us to use it here so right now
101:26 - we just get the recipes from the API and
101:28 - declare it but what we need to do is get
101:31 - just filter the recipes here and paste
101:33 - it here too so we can just paste it and
101:35 - just let's just get the use effect as
101:37 - well we don't need recipes because we
101:40 - get that already from the API and
101:41 - instead of badge this time it's going to
101:43 - be the context that we want so you're
101:46 - going to copy this line add it here get
101:48 - import everything as needed use State
101:51 - and then state will have have the
101:53 - cuisine value the selected Cuisine value
101:56 - so we can just add that here and then we
101:59 - also need the use State the state value
102:02 - of filtered recipes here again let's
102:05 - import this two now we don't have badge
102:07 - but we do have selected Cuisine so let's
102:10 - update that similarly let's just update
102:12 - the dependencies as needed now this is
102:14 - just going to be recipe type array
102:17 - perfect so now we have this we need to
102:20 - add the same condition that we had here
102:23 - which is that if we have filtered
102:25 - recipes then we just need to get it and
102:27 - set it just like that all right so now
102:29 - let's just test it out and see what
102:31 - happens so now it says that you're
102:33 - importing a component that needs create
102:35 - context so it needs to be a client
102:37 - component so here we need to make this a
102:39 - client component but because of the
102:41 - children pattern that we using here only
102:44 - this component will be client component
102:46 - all right so now if I click on Mexican
102:47 - look at that everything works as
102:50 - expected and we are able to filter the
102:52 - way we would want it to so this is how
102:55 - filtering would work and this is how you
102:57 - could basically pull out the value and
102:59 - store it in a global place as well so
103:01 - now speaking of data fetching as we
103:03 - implemented context you can see over
103:05 - here with fetch the specific fetch
103:07 - function is special because by default
103:09 - it has an additional property of cash
103:12 - which is not something that's available
103:14 - in our in the react Ved world this is
103:16 - something that's over here so we by
103:19 - default it's in fact Force cash but
103:21 - let's say I don't want it to cash then I
103:23 - I could pick the other options as well
103:24 - so this fetch function is definitely the
103:27 - special function that we talked about
103:29 - now let's go ahead and build the
103:30 - individual recipe page all this recipe
103:32 - page does is that displays more details
103:34 - about the API and when you click on back
103:36 - to all recipes then it goes back to how
103:39 - it was now whenever you click on any of
103:42 - the individual cards is when we out so
103:44 - again back in react what we could do is
103:47 - on the homepage for card in order for us
103:49 - to link between Pages we can just say
103:51 - HRA and then close the entire card with
103:55 - a link and this time we can just say
103:57 - just go to recipe slash and we can say
104:02 - recipe. ID now this way we are linking
104:05 - between pages so homepage card can go to
104:08 - recipe page for example so if we click
104:10 - on whoops if we go here and click on
104:13 - classic margarita pizza we do get taken
104:16 - back any of these cards should take us
104:18 - back accordingly but this is recipe 1
104:20 - this is recipe 2 in the URL and three
104:24 - and so on so which is what we want so
104:26 - now let's just go ahead and build the
104:27 - recipe page further now in order for us
104:29 - to build the individual recipe page we
104:32 - just need to get the ID from the
104:35 - individual page and accordingly pull it
104:37 - now as we talked about earlier whenever
104:39 - we go to slash two and that gives you
104:41 - the individual recipe itself so what and
104:44 - we can use this specific image too so
104:46 - right now what we can do is we can just
104:48 - pull that so now in create in react
104:50 - router we can get any individual the ID
104:53 - in the URL by using a function called as
104:56 - use perams what we can do is we can just
104:58 - get the recipe ID from use Rams router
105:02 - this should give us the recipe ID itself
105:04 - and now we can just get the individual
105:07 - recipe and display it so again very the
105:10 - same idea as before we have the use
105:12 - effect and then we're going to just set
105:14 - the recipe accordingly so recipe set
105:17 - recipe use State now we can just say if
105:20 - there is a recipe ID then perform the
105:23 - operation of fetching the recipe fetch
105:25 - recipe recipe ID so now here we can just
105:28 - make this an async function so we can
105:30 - just say fetch recipe a sync now we can
105:35 - just get the recipe so now what we can
105:37 - do is we can just pretty much copy what
105:39 - we had for getting the recipe so we can
105:42 - just copy this code paste it and now
105:45 - instead of/ recipes we can just make it
105:49 - so that we can just get the recipe ID
105:52 - here and we don't need to pass it we can
105:53 - just grab it globally which we have it
105:55 - here now we just directly get the
105:57 - recipes from as an object so we don't
105:59 - need to we can just this is literally
106:01 - the recipe itself so what we can do is
106:03 - just say set recipe as data so this way
106:07 - we get the information as needed so we
106:09 - can just print dat oops data data do
106:13 - name if everything works as expected
106:15 - oops we can say recipe dot name now in
106:18 - case there is no recipe for example we
106:20 - can just say you know no no recipe found
106:24 - so now if you take a look we go here you
106:26 - can see there's classic margarita pizza
106:28 - similarly this should say vegetarian
106:30 - stir fry it does say that chocolate chip
106:32 - cookies and so on so that means our page
106:34 - is ready to get built just like we have
106:36 - a link component inside of nextjs
106:39 - there's also a link component for react
106:41 - router D that we could utilize so right
106:43 - now whenever the app that we trying to
106:45 - build we it does say back to all recipes
106:47 - so we can just copy this and here
106:49 - instead of ring relying on something
106:52 - else we can just use the link component
106:54 - from react router Dom and let's just say
106:57 - two and this just can just go back to
106:59 - home for example so now if we take a
107:01 - look at the app go back here it does
107:04 - take us back to home as intended is what
107:07 - we want but obviously there's more that
107:09 - we display on the page here so as usual
107:11 - I'm going to provide the styling for you
107:13 - so let me just paste The Styling for our
107:15 - app there you go so all we're doing here
107:18 - is we're getting the recipes we printing
107:20 - the names servings prep time minutes and
107:24 - all of that but also adding The Styling
107:26 - with it too back to our app you should
107:28 - see our recipe getting displayed as
107:30 - intended which is exactly what we want
107:33 - but you notice how there is like a
107:34 - really nice gradient in our app that
107:37 - does not exist in the app that we have
107:39 - so let's just add the gradient as well
107:41 - so inside of Tailwind when we go to
107:43 - index. CSS there are three different
107:45 - layers we have the base layer then we
107:47 - also have the components layer and the
107:49 - utilities layer now whenever you want to
107:51 - create a custom class name that could
107:52 - could be utilized in multiple places
107:54 - then you could use the different layers
107:57 - according so if I want to create a
107:59 - custom utility then I could just use the
108:01 - utilities layer itself if I want to
108:03 - create a custom Tailwind component then
108:05 - I could use the layer for components but
108:07 - now since I want to create a utilities
108:10 - this is a way we can extend it so we can
108:12 - say fancy gradient and then we can just
108:15 - paste the specific gradient that I have
108:17 - already created for us this just makes
108:19 - it a radial gradient and these are the
108:21 - three different color stops so it starts
108:23 - from left then turns into Violet and
108:25 - then it's orange towards the end so now
108:28 - if we go back you can see that we have
108:31 - this beautiful G gradient applied
108:33 - similarly because the class name called
108:34 - Francy gradient was already on the card
108:36 - as well we also got this specific
108:38 - gradient so our app is looking really
108:40 - really good now in order for us to
108:42 - implement the same inside next year we
108:43 - need to do something slightly different
108:45 - we need to use something called as
108:46 - generate static params now what these do
108:49 - is that they return a list of params to
108:52 - populate the Dynamic segment and because
108:54 - in nextjs we can cach a lot of the data
108:57 - service side render it and cach it
108:59 - because of that we don't need to
109:01 - necessarily retrieve the data every
109:03 - single time cuz right now what happens
109:04 - in our react app is that every single
109:06 - time the data is retrieved but we don't
109:08 - need to do that in nextjs we can just
109:10 - cache it for that we need to tell nextjs
109:12 - that hey I want you to basically cache
109:15 - all of these params and then keep it in
109:18 - the cache itself keep it in the Cash
109:20 - Store so next time the user access it
109:22 - the same cache itself so what we can do
109:24 - is we can just copy this and head over
109:26 - to nexts page inside of recipes and this
109:30 - time we just going to paste what we
109:31 - copied now here we are just going to
109:33 - give nextjs all the list of pages that
109:37 - we want to Cache so next JS can just
109:39 - cash it and for that reason we can just
109:43 - pretty much copy what we had inside of
109:45 - page so here we have the get recipes
109:47 - function so we can just extract this
109:49 - function out and in the lib utils or I
109:52 - guess let's just create a new lip for
109:54 - oops new lip for recipe and here let's
109:57 - just add it so anyone can access it from
110:00 - here so now in our page let's just
110:03 - import it similarly let's also import it
110:06 - here too so we can just say recipes are
110:08 - going to be get say await get recipes
110:12 - now we can just map through the recipes
110:15 - and this can be recipe will which will
110:17 - be of type recipe type and now here
110:20 - instead of slug it's going to be recipe
110:22 - ID because that's what we defined here
110:24 - the dynamic slug segment is going to be
110:26 - recipe ID so we can just say recipe ID
110:29 - is going to be recip do ID and we always
110:32 - want to make sure that ID is always a
110:34 - string and not a number so we need to
110:37 - make it do to string so now this tells
110:39 - nextjs that please generate and cash all
110:42 - these paths in general Whatever Gets
110:45 - generated in this will be accessed it
110:47 - next time but we still need to access
110:49 - the individual recipe as well over here
110:52 - so so for that we need can just we can
110:55 - just copy what we created in the recipe
110:57 - page here so now we can literally copy
111:00 - all of this and then paste it inside the
111:02 - page we don't need a use effect at all
111:05 - here we can just directly call it
111:06 - because by default this is a server
111:08 - component we don't even need react here
111:10 - you don't need to set the recipe we do
111:12 - need recipe ID now in nextjs we could
111:15 - just access the prams here and then
111:17 - params are going to be we should say
111:21 - recipe ID going to be string now Rams
111:24 - would be just here now we don't need any
111:27 - of this but if there is no recipe then
111:30 - we can get it we need to make this an
111:32 - async function and now we are able to
111:35 - get the recipe itself from our API and
111:38 - now again like we did earlier we can
111:41 - just get recipe. name and add it here
111:44 - now if we go to our nextjs app and click
111:47 - on classic margarita pizza nothing
111:50 - happens because we haven't linked it so
111:51 - now just like we did in our react app
111:54 - let's just go to our page and then link
111:57 - it so now here in card we can just add a
112:00 - link component href is going to be two
112:04 - back ticks and then let's get this and
112:08 - move it here now all we need here is we
112:11 - need to move this key on top and now all
112:14 - we need here is/ recipes recipe. ID
112:17 - there you go so now if we try again when
112:20 - we click on it it takes us and it shows
112:22 - us classic margarita pizza which is
112:24 - exactly what we want similarly it also
112:26 - gives us the vegetarian surfy name then
112:28 - we have chocolate chip cookies and so on
112:30 - and just like we did in our recipe page
112:32 - in react which is what we have here what
112:35 - we can do is pretty much get the recipe
112:38 - styling that we have and then add it to
112:40 - nextjs 2 so we can just get the recipe
112:43 - page and add it here now if everything
112:45 - works as expected the only thing is we
112:48 - need to add import the link component
112:51 - from nextjs here in of react router D
112:53 - and this should be hre all righty so now
112:56 - if we go to a classic margarita pizza we
112:59 - do get the classic margarita pizza we
113:01 - want with all the details similarly if
113:04 - you want vegetarian stir fry then we do
113:06 - get that as well then we have chocolate
113:08 - chip cookies and so on which is which is
113:10 - what we want now lastly let's just also
113:12 - add the gradient that we want as well
113:15 - again similar idea but the gradient
113:17 - would be slightly different this time so
113:19 - if we go to index. CSS that is copy this
113:23 - whole thing go to another file here it's
113:26 - not index. CSS here it's global. CSS and
113:29 - all the way to the bottom oops let's add
113:32 - but let's just tweak tweak it because we
113:34 - don't want the same colors all over
113:36 - again just make this orange we'll make
113:39 - this 400 and that's it let's see now
113:41 - well look at that our colors are looking
113:43 - beautiful and if you click on vegetarian
113:45 - stir fry then it also changes the
113:47 - background of this to which looks really
113:49 - good I'm very happy with how the app has
113:52 - come along so far and along with
113:54 - alongside that we're learning so much
113:56 - comparing reat with react alongside nexs
113:59 - 2 which is pretty awesome so this is how
114:01 - you would essentially Implement caching
114:04 - inside of nexs but how it works inside
114:06 - of react plus V2 it's pretty much
114:09 - typical react app that we are building
114:11 - for react plus weed but the difference
114:13 - is that in inside of nextjs we can
114:15 - basically cash all these so how exactly
114:17 - should you get started with react should
114:19 - you go with the framework or should you
114:21 - go with react plus speed well here's the
114:23 - thing as a beginner reactive it's really
114:25 - important for you to focus on react and
114:27 - weat and here's why even though
114:28 - Frameworks do provide a lot when though
114:30 - the react dogs recommend the use of
114:32 - framework it's really important that you
114:35 - understand what goes behind the scenes
114:36 - as well cuz if you were to get stuck
114:39 - while fetching data you can already see
114:41 - that next yes caches a lot by default so
114:44 - you may not know how to purge the cash
114:46 - or the fact that it's happening to begin
114:48 - with so this is why it's really
114:50 - important that you start with react plus
114:52 - we because you don't get get any
114:54 - specific caching there's not a lot done
114:56 - for you so you get to pick what you want
114:58 - now react as a beginner Dev is already
115:00 - complex enough there are too many topics
115:02 - such as react life cycle hooks how to
115:04 - update State how to avoid rendering how
115:07 - does rendering work and so on so react
115:09 - in itself is definitely a beast that you
115:12 - really need to master before you get
115:14 - involved with other Frameworks like
115:15 - nextjs or remix or anything of that sort
115:18 - that's why I would highly recommend you
115:20 - to go with react plus weed and that's
115:22 - why why this specific crash course was
115:23 - provided so that you get a really good
115:25 - understanding that hey how does life
115:27 - look like with react plus weed and what
115:29 - does that compare to using a framework
115:31 - as well so even though nexts is great as
115:34 - a beginner reactive it might really trip
115:36 - you up because nextjs by default cashes
115:38 - a lot so if data does go stale and if
115:41 - you're not sure how to purge that cash
115:43 - then you're going to get really confused
115:44 - as a beginner de you may not even think
115:46 - it's the framework that's doing it you
115:47 - may think that it's your own mistake
115:49 - which can be which may be true too but
115:51 - again it's really important important
115:52 - that you start with react plus s and
115:54 - then as you get more familiar with react
115:56 - and how it works then start adding a
115:58 - framework and use a framework but if you
116:00 - were to get started with a production
116:01 - application obviously it depends on your
116:04 - needs if you get a chance to start on a
116:06 - brand new project where you are among
116:09 - the few developers that are starting
116:10 - their specific project then I would
116:12 - highly recommend you to take a look at
116:14 - the pros and cons of framework as well
116:16 - as react plus site and just see how the
116:19 - two compare with each other also look
116:21 - into deployment options for how it looks
116:23 - like and you want to maybe evaluate that
116:25 - as a cloud platform as well for a
116:27 - specific company there's obviously a lot
116:29 - that goes to make sure application can
116:32 - scale V and so on so this is why this
116:34 - course was provided to help guide you so
116:37 - that even if you are getting started or
116:39 - not you can sort of compare what the
116:41 - world looks like with reactor suite and
116:43 - alongside a powerful framework like that
116:45 - now let's talk about performance now
116:47 - react plus weed by default doesn't have
116:49 - much when it comes to Performance yes we
116:51 - can optimize the react re rendering and
116:54 - make sure that the client side rendering
116:56 - is really fast and so on but out of the
116:59 - box there's nothing that it provides if
117:01 - you but if you were to use nextjs then
117:03 - just like the link component that we saw
117:05 - earlier which extends the HTML anchor
117:07 - element there's also a image component
117:09 - that nextjs provides you based on the
117:11 - user's viewport nextjs image component
117:14 - is only going to download the image
117:15 - sites necessary for your viewport for
117:17 - example if we go to the next yes app
117:21 - that we have over here and let's just
117:23 - view all the images so now let's just
117:25 - head over to the nexts app and let's go
117:28 - to the browser developer tools and right
117:30 - now we are on mobile this cash and now
117:33 - if I empty cash and hard reload let's
117:35 - see what the image size is of this one
117:37 - it's now 127 kiloby but now let's say I
117:40 - clear this and switch to mobile for
117:42 - example on a smaller device and let's
117:45 - clear this and let's just see empty cash
117:47 - and hard reload and see what happen this
117:49 - same image is now 83 kiloby now you can
117:52 - already see how the image component is
117:54 - performing really well here on a smaller
117:56 - device we don't need a huge image and
117:59 - these kilobytes are going to add up so
118:01 - that is why it's really important that
118:02 - we use the next year image component
118:05 - because it's gives us a lot of
118:07 - performance benefit out of the box so
118:09 - you may want to check out all the
118:11 - different properties that nextjs has and
118:13 - to configure your image so how about we
118:15 - just go ahead and do the same in our
118:18 - image here so now let's just go to our
118:21 - image so like we can go to recipe list
118:24 - and inside that there's the card
118:26 - component we have the image and this is
118:28 - why the prompt was that you need to use
118:31 - the image component here we can just use
118:33 - the image component from next image and
118:35 - that's it that's all we need to do so
118:37 - now as we do that it does say that we
118:39 - need to configure the domain and if you
118:41 - click on this specific URL we can just
118:43 - pretty much copy what we have here and
118:45 - we need to add
118:47 - cdn.com so if you go to next config here
118:50 - let's just add CDN dummy jon.com and we
118:55 - just need it on all ports now let's
118:57 - refresh the page and see what happens
118:59 - let's see so now you can see that the
119:01 - image still appears but now it uses a
119:04 - performing next year's image which means
119:06 - we going to get a lot of performance
119:08 - benefits out of the box which means that
119:10 - we are going to basically download a
119:13 - smaller image based on user viewport and
119:15 - as a result our app is really performant
119:17 - now there's a lot you can do with image
119:19 - component in general but I but I just
119:21 - want wanted to give you an overview of
119:23 - how there are specific components in a
119:25 - framework that make your app really
119:27 - performant out of the box but just by
119:29 - the fact that you're using them let's
119:30 - talk about fonts now so speaking of
119:32 - performance when you were to use fonts
119:35 - inside of react plus speed we just have
119:37 - to mainly just imported in our HTML file
119:39 - and that's pretty much we don't get any
119:41 - font optimization out of the box but
119:43 - let's say we want to optimize our fonts
119:45 - in general the next yes does offer us a
119:48 - a font package that will allow you to
119:51 - optimize any font fonts and remove any
119:53 - external requests in general so what
119:54 - they do is that they Again download our
119:57 - font files and our CSS file just like
119:59 - our additional assets that we have and
120:01 - download them at Bild time and they are
120:04 - self-hosting the rest of the static
120:06 - assets just like that so if you were to
120:08 - use Google fonts which again we can just
120:10 - use Google fonts using the same package
120:12 - it's really easy you need to import a
120:14 - new link from Google fonts or download a
120:16 - package it's all available out of the
120:18 - box and also no requests are sent to
120:20 - Google as well so we could just directly
120:23 - use Google fonts in general so because
120:25 - the font files are downloaded and then
120:28 - cached and then we can access it
120:29 - whenever an application is gets really
120:32 - fast now one of the reasons why your
120:34 - application the fonts can have a
120:36 - significant impact on your application
120:39 - you download a really heavy font it
120:40 - might really slow down your application
120:42 - and really cost your performance so
120:44 - that's why this next font package is
120:45 - really useful in order for us to use
120:47 - fonts and apply fonts in our app for
120:50 - example in the react TW we want the
120:51 - header to be a specific font we also
120:53 - want the rest of our page to be a
120:55 - specific font too what we're going to do
120:57 - is we're just going to head to Google
120:59 - fonts going to select two fonts we're
121:00 - going to select the Lita one font and
121:02 - also we're going to select the monserat
121:04 - font all we need to do is just copy this
121:06 - code head over to our react file and go
121:08 - to index.html and just add it in our
121:11 - head element this would mean that our
121:12 - two fonts are downloaded monserat as
121:15 - well as theader now if we head over to
121:18 - our app and go to our Network Tab and we
121:21 - look for Google font you can see that
121:24 - lilita 1 and monserat have been applied
121:27 - as well but now they are not necessarily
121:29 - applied to the elements themselves and
121:32 - for that what we're going to do is we're
121:33 - going to head to index.css and here we
121:36 - are mainly just going to paste what I
121:39 - have here we're just going to paste all
121:41 - the font families that we have so we're
121:43 - applying H1 to monat monserat and so on
121:47 - we can just tweak this and say H1 is
121:49 - going to get Lita one the font we have
121:52 - downloaded and now you can see Lita 1 is
121:55 - in fact a really cool font and then the
121:57 - rest of the fonts have moner ad has been
122:00 - applied to the rest of the font so for
122:02 - example if I inspect element select the
122:04 - specific title then it's moner ad
122:07 - whereas this one is L one so that's how
122:09 - you can just apply fonts and react plus
122:11 - site you want to do the same thing
122:12 - inside of next and what we can do is
122:15 - again use the next font package the next
122:17 - font is already available as an import
122:20 - so instead of inter font which gets
122:22 - applied by default when you bootstrap
122:24 - your nexs app then here we can just get
122:26 - Lita one and moner
122:29 - rat now what we're going to do is we're
122:31 - just going to say mon set out is going
122:33 - to be default and just keep it as is and
122:35 - add the weight necessary too so we can
122:38 - just get different weights that we want
122:40 - so we want 500
122:43 - 600 700 similarly if we want lilita as
122:48 - well then we can just get Lita font to
122:51 - so we can just just say again going to
122:53 - be Latin and then we're just going to
122:55 - say weight is going to be it only has
122:57 - one weight so it's just going to get 400
122:59 - so now alongside enter what we could do
123:02 - is we can just apply enter whoops enter
123:06 - as a class name and then we can also
123:08 - apply Lita as a class name too so this
123:11 - is how we can apply multiple fonts as
123:13 - well but again it's not going to work
123:15 - until we apply it here too so again
123:18 - we're just going to do the same copy
123:20 - pasting over here we're just going to
123:23 - say Lita one for H1 minute we do that if
123:26 - you head over to our nextjs app you can
123:29 - see how the different fonts have changed
123:32 - this one should be lilita one and then
123:35 - even these ones have lilita one for some
123:37 - reason so we can fix that but or we can
123:39 - keep it as is it doesn't matter but for
123:41 - example you can see how monserat has
123:44 - been applied to the of the text on the
123:46 - page so this is how you can apply fonts
123:48 - in xjs and how simple it is now you can
123:51 - do whatever you want the difference is
123:53 - that in with react plus wheat we did not
123:56 - get any performance benefits versus with
123:58 - nexs these fonts are going to get
124:00 - bundled and and available at build time
124:03 - and they are they they are basically
124:05 - going to be cashed and not redownloaded
124:07 - every single time from Google which is
124:09 - what we want so this gives you a really
124:10 - huge performance so now let's talk about
124:12 - search engine optimization and SEO now
124:15 - the way SEO works is that let's say on
124:17 - Google I type best mushroom lamp or I
124:20 - basically just type best recipes or best
124:23 - chicken recipes and so on that our site
124:25 - should be available on Google otherwise
124:28 - it's not going to get discovered unless
124:30 - you share the direct URL to your friends
124:33 - let's say we look for best mushroom lamb
124:34 - we have three different results orange
124:36 - lamb CB2 mushroom lamp and a post on top
124:39 - five mushroom lamp now the reason why
124:41 - these three things showed up on Google
124:43 - is because they are following a specific
124:46 - criteria that's necessary due to which
124:48 - Google have ranked them higher now in
124:50 - order for you to learn about SEO in
124:52 - general this is a really good guide on
124:55 - developers.google.com which is amazing
124:57 - that you should check out on how Google
124:58 - search works but give you a really quick
125:00 - summary we need to have a few different
125:02 - criterias to make sure that are we get
125:05 - more points by Google by the different
125:07 - search engine Bots that Google sends out
125:10 - to basically parse our site and check
125:12 - out what's on our site one is the
125:13 - description of the site so for example
125:15 - whenever we go to any site we should
125:18 - have a really good description so let's
125:20 - say we go to my website and if we go to
125:23 - the network tab right now in the head
125:25 - element I have a title of my website
125:27 - which is my website but then I also have
125:29 - a description here which is tutorials
125:31 - for developers and Engineering leaders
125:33 - and this is what I focus on I have an OG
125:35 - image I have a bunch of I have a URL I
125:38 - have a image all tag I have some Twitter
125:40 - information and so on now all of this is
125:43 - really important when it comes to
125:45 - configuring your site for SEO
125:47 - description is important what the site
125:49 - is all about What's the title of the
125:51 - site what's a canonical URL that is what
125:53 - is the true URL of that specific site am
125:55 - I following any semantics so if there
125:57 - are NE if it's necessary then for
125:59 - example this specific value should be H1
126:02 - because this is very important but this
126:04 - is for example P tag honestly this could
126:06 - be H2 and so on but like for example
126:09 - this one is H2 because this is really
126:12 - important title on my website and this
126:14 - necessarily needs to be H3 because again
126:18 - this is really important on my website
126:20 - now all of this is is really important
126:22 - and this specific hierarchy is what
126:24 - Google looks at when it tries to parse
126:26 - your website and there's a lot more that
126:27 - goes in SEO but these are a few things
126:29 - we need to definitely take a look at
126:31 - when it comes to SEO now an application
126:34 - should allow us to easily update this
126:36 - information unfortunately in react and V
126:39 - world it's not as straightforward if we
126:41 - were to update the description and add
126:43 - any of the metatags on the homepage then
126:45 - we could add that over here for example
126:48 - we could change this title to Tasty
126:51 - react and this is good in order for us
126:52 - to add the description we can add the
126:55 - description here and then all any of the
126:57 - meta taxs in general configure our site
127:00 - further but let's say we I want to do
127:01 - the same dynamically for the recipe page
127:05 - there is no API that's available out of
127:07 - the box to do that and this is where a
127:10 - package like react helmet is very useful
127:13 - where you could basically update it and
127:15 - it you can see already it has so many
127:17 - downloads but you can update the meta
127:19 - tags in your site and dynamically
127:21 - generate them this is great but it's not
127:23 - available out of the box what say inside
127:25 - of nextjs there is a specific API called
127:28 - as the metadata API now anytime you want
127:31 - to expose the title and description you
127:33 - can easily do that with the metadata API
127:35 - in fact if you go into layout it's
127:37 - already exposed here so if I want to
127:39 - change the description all I need to do
127:41 - is update this tasty next and if I want
127:44 - to say whatever description I want
127:46 - curated recipes based on 10 plus
127:51 - different
127:52 - Cuisines such as Indian American Asian
127:57 - and more something like that then in
127:59 - that case now this gives a really good
128:01 - description for my site now let's say if
128:03 - I want to update the URL in metadata API
128:06 - I could easily do that by looking at the
128:08 - documentation for instance but at the
128:10 - same time if I want to update Dynamic
128:12 - metadata then there is a function just
128:14 - like we have the function for Generate
128:16 - static prams there is a function for
128:19 - Generate generate metadata and we can
128:21 - can update open graph images we can
128:23 - update different different information
128:26 - and so on now this is all really
128:27 - straightforward inside of nexts because
128:29 - it gives us really uh additional
128:31 - capabilities for doing that but in order
128:33 - for us to do the same thing in react and
128:34 - V we might have to install a package
128:36 - called react helmet and there are more
128:38 - that I haven't really discovered yet but
128:40 - SEO is something that should be top of
128:42 - mind and next yes does make it a lot
128:44 - easier for you or Frameworks in general
128:46 - will make it a lot easier for you to do
128:48 - that because they do think about all of
128:50 - this in mind now now first load of your
128:52 - website is also really important for SEO
128:54 - so as we have seen earlier whenever we
128:57 - look let's say we disable JavaScript in
128:59 - this specific app we have done this
129:01 - before but if you do that again and
129:03 - disable JavaScript refresh the site we
129:05 - get a blank page versus if you were to
129:07 - do the same thing inside of nextjs Guru
129:09 - sources disable JavaScript and refresh
129:12 - the page we still have a fully
129:14 - functional site so when Bots look for it
129:16 - they're going to get all the information
129:18 - necessary we have a fully functional
129:20 - site we don't necessarily need
129:21 - JavaScript that means there's minimal
129:23 - JavaScript that needs to be downloaded
129:24 - and because we're following semantics
129:26 - our site is going to rank higher so this
129:28 - is why using a framework that focuses on
129:31 - pre-rendering and gives you that server
129:32 - rendering is really important versus
129:34 - something like react plus weed so using
129:36 - something like wi that will give you
129:38 - that server rendering capability is
129:40 - really really important as well so
129:41 - definitely keep that in mind when you
129:43 - make a choice for what you want to use
129:45 - in your app so now before we wrap up
129:47 - let's just make typescript happy and
129:49 - make sure that you're not making any
129:51 - mistakes with initializing state or
129:54 - anything of that sort so one for recipe
129:56 - context we added payload as any but we
129:59 - do know the payload now we know that
130:01 - payload is going to have selected
130:03 - Cuisine because that's exactly what we
130:06 - are setting over here payload do
130:09 - selected Cuisine so let's just make sure
130:12 - we have that specific payload and then
130:15 - it does say that state has no properties
130:17 - in common with type so as we decide to
130:20 - assign selected quisine directly we also
130:23 - can just tweak this area so we don't
130:26 - need an additional property called State
130:28 - we can just make it by default as
130:31 - state now recipe context does not know
130:35 - what the initial State value should be
130:37 - or the type should be so let's just fix
130:39 - that so we can just say it's going to
130:42 - have two values one is going to be the
130:44 - state is going to be just State and then
130:48 - the other value is going to be a
130:50 - dispatch fun function is going to be
130:53 - react.
130:56 - dispatch and then we just going to take
130:59 - an action type here now the initial
131:04 - State can probably have dispatch
131:07 - function as
131:08 - well which is going to be
131:16 - null whoops not here but here
131:22 - now this can be optional too text will
131:24 - be initialized with State as initial
131:27 - State and then
131:30 - dispatch is just going to be
131:35 - null so now this way we have made
131:37 - typescript happy because we have added
131:40 - the necessary types for everything now
131:42 - if we head to badge
131:44 - filter it should be a mouse event
131:46 - instead of a change event so let's just
131:48 - fix that too so we can just say mouse
131:50 - event
131:54 - HTML div
131:56 - element and then mouse
132:00 - event all righty now in order for us to
132:03 - make sure that everything works as
132:05 - expected let's go ahead and run a
132:07 - production bill now we have an
132:09 - additional command called build that
132:11 - will help us run a build for production
132:14 - so it will bundle all our files together
132:16 - and let us know if there are any errors
132:18 - as well so now here
132:21 - let's just go ahead and run npm run
132:23 - build now the minute we do that it's
132:26 - going to create a production Bill
132:29 - compile all the files and now it has
132:31 - given us an warning saying that image
132:34 - should result in slower LCP higher
132:37 - bandwidth consider using an image
132:39 - component so we forgot to
132:42 - change after copy pasting the recipe
132:46 - itself the image
132:48 - component for example here we don't need
132:51 - to
132:54 - use we don't need to use image we can
132:56 - just use the image component from nextjs
133:00 - and here let's just add recipe.
133:03 - name so now if you run the build again
133:06 - let's see what
133:11 - happens it's generating our static pages
133:14 - and collecting all the page data and now
133:17 - you can essentially see that we have
133:19 - essentially cached
133:21 - recipe 1 2 3 and 27 more paths so
133:25 - whenever we essentially Run npm Run
133:29 - start then our experience is going to be
133:31 - a lot faster for our users as well and
133:34 - this is because we have essentially
133:36 - used generate static perams as
133:41 - we as we created here and this just
133:45 - basically caches all the recipes that we
133:47 - have from the APR
133:51 - so now we can just run npm run start
133:55 - just to make sure everything works as
133:56 - expected so now we can just go to Local
133:59 - Host
134:00 - 3000 and make sure everything works as
134:03 - expected all righty so our application
134:06 - loaded really fast and if you click on
134:09 - any of the information then it works as
134:11 - expected then we have filtering working
134:14 - as well on different Cuisines and you
134:18 - can see how quick the application load
134:20 - is the initial load of our application
134:22 - is really important so this is really
134:26 - good now if you were to do the same
134:28 - thing with react let's say we were to
134:31 - run
134:32 - a npm run build which runs the build for
134:37 - react we have quite a few errors here so
134:39 - let's just fix that
134:42 - too so if you go to
134:44 - react you can see here we have these red
134:47 - swigle lines it says that property name
134:49 - does not exist on type so what we need
134:52 - to do is when we created State we can
134:54 - just add a type here called as recipe
134:57 - type so that we are
135:01 - telling the weed bill that hey we know
135:04 - this type and this does exist with all
135:06 - these different
135:08 - properties now if you go to
135:11 - homepage and if you take a look at e tag
135:14 - again we can use the mouse event
135:19 - itself so here we can just say react
135:23 - dot mouse
135:25 - event
135:27 - whoops and then just paste that
135:29 - similarly let's just copy this and paste
135:33 - the same over here as
135:36 - well all righty so now we have this
135:39 - let's also delete this code because we
135:41 - don't need it importing react but we're
135:44 - not using it
135:45 - anywhere so for that let's just get rid
135:48 - of it
135:51 - in the homepage do we have it no in the
135:54 - Navar we do have it let's get rid of
135:57 - that
135:58 - too we had it in Navar we have it in
136:00 - recipe page now let's run a build again
136:03 - so it's building for production and it
136:05 - has essentially built for production
136:08 - which is pretty amazing just go ahead
136:10 - and start our site and we have a preview
136:11 - command that we can use to start the
136:13 - site so let's do that so
136:17 - now the page load was also quite instant
136:20 - if you click on it then it's going to
136:22 - load the API
136:26 - data and then if I go back to all
136:28 - recipes we can filter everything as well
136:31 - as expected as intended so our
136:34 - application is looking pretty good but
136:36 - keep this in mind API calls are being
136:38 - made to get all the recipes and then
136:42 - individual recipes too so for example if
136:45 - I refresh the page you can see an API
136:47 - call is being made versus inside of
136:50 - nextjs
136:51 - if I go to the network tab you can see
136:56 - that this is the react server component
136:58 - description file that I talked about
137:01 - which is a very different looking file
137:02 - than a Json file it is not Json but
137:05 - that's what it uses to essentially get
137:07 - the description of the page and generate
137:09 - all the pages all righty this is how you
137:11 - set up an application in react Plus weat
137:15 - versus nextjs really hope you enjoyed
137:17 - this specific course thank you so much
137:20 - for checking out this specific crash
137:21 - course as next steps please go ahead and
137:23 - subscribe to my Channel at Kara because
137:26 - I really focus on tutorials and
137:29 - different crash courses and different
137:31 - things that help you level up as a
137:33 - developer in your career as well as if
137:35 - you into engineering leadership then I
137:36 - have some stuff for that too at the same
137:38 - time if you are interested in learning
137:41 - nextjs further then I also am running a
137:43 - nextjs workshop and you should just
137:45 - check out at next year's workshop. to
137:48 - sign up and you may get some launch disc
137:50 - counts as you part as you watch the
137:52 - specific free Cod Camp video so thank
137:54 - you so much for watching bye for now

Cleaned transcript:

what's the difference between nextjs and react well that's what you'll learn in this course from ANA Kari she helps developers level up their careers and she'll help you level up in this course nexs is a framework versus react is a library you can't necessarily compare the two as it's not Apples to Apples comparison but you may always wonder what would life look like without a framework what does a framework provide and should you go with a framework or not so in this specific course you will learn next year and the power that it provides us as it is a framework and compare that to react alongside vat and vat is a really powerful front end tool towards the end of this course you will learn what the difference between a framework and a library is you will learn different data fetching mechanisms and knowing which one to pick for your project and for your page you will learn different rendering strategies you will learn how to build a performance app and what goes behind the scenes of building a performant app you will also learn search engine optimization which is CEO and also how should you get started with learning react all of this will be covered in this specific video along the way you will also pick up skills with taen CSS and also Shad CN UI Library which is getting really popular these days alongside learning complex topics in depth in react wheat and nextjs everything that you need is right here and I will be walking you through each step one by one so what are we waiting for let's get started now if you are interested in following along in getting all the visuals as well as all the links that I have shared in this specific course then check out this specific link this is essentially a cheat sheet and a visual explanation of all the key next year's react and readed Concepts that I'm sharing in this specific course so if you are interested check out the link in the description or as a pin comment for downloading the specific cheat sheet now this cheat sheet is really good it has all the visuals and links that I've shared in the specific course alongside GitHub so you can follow along as I teach this course so check out if you're interested now whenever you are ready to level up your next year skills I have some good news I'm running a exclusive HandsOn workshop for you to take your next year's knowledge to the next level it will teach you everything that you need to know to design build and deploy a fullstack app with nextjs it is a live Workshop so you will get direct access to me and I will answer any questions that you may have as well Plus at the same time you will get lots of exercises to learn different Topics in next year s you will be divided into breakout rooms so you can learn from your Workshop peers as well and learn complex topics together and if you get stuck don't worry because I'm there to help guide you as well Additionally you can show off your certificate of completion at your workplace or on LinkedIn to Showcase that are a certified next year's developer at the same time I will be sharing a lot that I couldn't necessarily share in this specific crash course in that Workshop so if you're interested please sign up to the weight list as the weight list folks get exclusive launch discounts and special bonuses as well so sign up to the weight list and I will see you in the workshop so first let's try to understand the difference between a library and a framework now what exactly is a library versus a framework this specific visual really does a great job at describing what a library does and so does a framework now library and framework both are reusable pieces of code a framework will provide the overall structure a skeleton for your application versus a library is going to provide you reusable pieces that you can utilize and use your creativity to do whatever you want using the analogy of luggers on the left hand side a library is like a box of assorted Lego pieces without any Specific Instructions so as you can see here they're trying to figure out what exactly they can do using the creativity they have the full freedom to use the Lego pieces to create whatever model they like they can use whatever custom designs as per their needs but on the right hand side where say a framework is like a Lego set with a predefined model of instructions you follow the instructions what's on the box and create whatever you want to create now there is little customizations in a framework but because the instructions are so clear you know exactly what you need to do on the right hand side in the framework you're going to think less about a lot of the details in your application on the right hand side in the framework a lot of the hard decisions are made for you so you don't have to worry about making those decisions yourself versus on the left hand side in the library you do have to make those decisions yourself which can be harder depending on your application so in our case nextjs is a framework versus react is a library so nextjs gives you a lot out of the box such as builtin routing different data fetching mechanisms really rich metadata API for search engine optimization and a lot more so you you just use those specific apis and customize and build your application versus react is a library so we need something called as wheat alongside react so that we can compare the two that is react creating a react application with wheed versus with nextjs which is a framework and we will talk about that in depth a bit later as well but this is what a difference between a library and a framework is so what exactly is react versus nextjs well react is a really popular Library built by Facebook it is a library for not just the web but also for building native user interfaces if you want to build a mobile app you can definitely do that with react using react native react has definitely onboarded many many developers because the development is so much easier and faster because of react with react you can create UI that is user interfaces if you are familiar with other programming languages then you can think of react as a view layer Whatever Gets displayed to the user is what we'll be using react for you can create different user interfaces from a concept called as components and components are essentially individual repeatable pieces that combine together and are known as components for example in in this case thumbnail is a component like button is a component but a component can also comprise of different components and we can combine them all together to form different screens and pages and so on now react lets you build seamless applications and that is also a reason why NEX GS is in fact built on top of react now you can write components with different code and react has a special rendering mechanism to know when exactly to update what part of the UI so react is pretty amazing on the on the other hand nextjs is in fact a react framework for the web it is a framework that is built on top of react I also like to say it's the production framework for react and you will learn why in a bit now next GS is a full stack framework so just like we talked about how react is the view layer nextjs not just allows us to build the front end but it also allows us to build the back end and that is why it is a full stack framework in nextjs you can do a lot for example for example you in order for you to add routing between Pages next yes provides us with a file system based router that we can definitely use and we will learn all about that later next yes also gives us the ability to fetch data in different ways so it also gives us allows us to do client side rendering as well as server side rendering which we'll talk about in a second Now search engine optimization is really important in your application if that specific app needs to rank higher on search engines just Google then in that case nexs also offers us with a really powerful metad data API so that you can get improved SEO and web sharability as well now nextjs does a lot for us nextjs also has a few special components that we can use that the fact that we use them means that we get additional performance benefits so this is what a framework does a framework does give you a lot of magic out of the box so you can focus on building seamless applications now one topic we should definitely talk about in nextjs is the difference between a spa work and a static side generation workflow Spa means single page application whenever you think of react you would think of single page application this means that the page is only rendered on the browser and the browser just displays it on the page now it's not great for search engine optimization because if you defin if you do inspect the browser elements for example the page Source then you will not necessarily see anything in there so when Bots are going to crawl your website it's not going to discover any cont content on the page so browsers on demand serve the page to the user so if you take a look at this specific diagram let's say this is a developer writing his blog on cookies because they really love cookies and they ship the blog code to the server on I love cookies.com now in a single page application for example they will ship the website blog to the server and then every time the user asks for I love cookies.com either through search engines or by going to I love cookies.com directly the server is going to say hey hey sure let me produce the HTML on demand and give it to you let me produce the HTML JavaScript on demand and give it to you now let's say there's one more user that comes up and asks for I love cookies.com the server is going to repeat the process and regenerate again the HTML on demand and give it to the browser the browser can render it on the page now this process can be really slow because browser is doing things on Demand versus in a static side generation workflow which is what nextjs is really powerful for or you would also call that as pre PR rendering where we are prerendering the pages in this case if a developer writes his blog on cookies builds his code and ship those blog files to the server on I love cookies.com and shares that code and shares the HTML to the CDN which is a Content delivery Network so what this developer is going to do or what next year is going to help this developer do is that they're going to say hey I've written these 10 block post let's just predownload them and let's just store them on our nearest server this way let's say you are asking for data from let's say Hong Kong or United States and the server closest to you is going to get called and going to they are going to give you the HTML that's already pregenerated for that specific block on top in in a spa workflow this is done on Demand versus in an SSG workflow the work is already done for you all the CDN does is that it returns that predefined work so when the user asks for I love cookies.com the server is already going to send you the prebuilt files and they're just like here you go this means the response time the initial page load is going to be really fast and when search engines look for I love cookies.com they're going to get all the HTML code embedded of the blog this means that I love cookies.com is going to get discovered on different search engines and it's going to make the site really fast as well so that is the difference between a spa workflow and a static side generation workflow also known as prerendering now react is popularly know known for spa versus nextjs is popularly known for prerendering so we cannot necessarily compare react with nextjs because we cannot compare a library with a framework when in fact next year's leverages react as a library but what we are going to do in this specific course is we are going to compare something called as wheat with react which gives you the tooling necessary that whenever we cannot pick a framework we know how to configure our application and depending on your use case you can decide hey should I go with the framework or not and also you will learn the differences so even if you do go with the framework you will know what the other route is as well so weed is a really powerful Next Generation front end tooling it does provide you with lightning fast HMR which means that anytime you make changes in your files in your local file system those changes are immediately available to you on the browser you don't need to refresh the page or do anything of that sort now V also has support for typescript jsx CSS and a lot more but at the same time V also uses a rollup build which makes our development a lot faster and rollup is essentially a JavaScript module bundler that will compile all your code and make it really fast as you ship it to the browser for production and also during development as it already has a really powerful bundler which will bundle all your specific code now Ved with rollup gives you a plugin system so we can basically plug in play exactly all the things we want in our application now one disadvantage of using a framework like nextjs is that a lot of the decisions are made for us so if we want to opt out of those decisions we can't really because it's going to be a lot harder for us to do that so wheat is really powerful so that's what we would be doing throughout this course we would be essentially comparing and trying to see hey if a framework does provide us this then what does wheat with react give us at the same time we will also be checking hey what features do we really want in our app and what can a framework provide versus what a nonframework versus what Feed plus react will provide us as well this way we can compare and have a little bit of fun while building our application as well my goal with this specific course is to help you decide and give you a solid understanding for how all of this works together now to understand and learn the difference between the two next year and also react plus wheat we will be building an app a recipe planner called as tasty NEX and tasty react so let me quickly give you a demo now these two apps are identical except minor design tweaks now on this specific page you will see a list of recipes of from different Cuisines so on the page you will see a list of different recipes that we pull from an API now when we click on any specific recipe you will read more details about the recipe as the name what is a prep time and cook time difficulty level ingredients and instructions alongside an image if you go back to all recipes then you should see all the different recipes on the page as well you will also be able to filter based on quisine such as Asian American Greek Italian Indian and so on so these are all the different recipes that you see on the page that we are retrieving from the API so now let's say we were to shrink the size of the viewport then this app is fully responsive and we change from four columns to three columns two columns and one columns based on the viewport size now the app is fully responsive on the recipe page as well so it's easily readable on mobile and also on different device sizes now if you go back to all recipes this is an identical app with the tasty react app wherein we will be building these cool gradients as well all of this in t CSS and all the different components that you see on the page are using the Shad CN UI Library so you will be learning Shad CN UI as well and also we will be using the latest and greatest next year's features such as client and server components and so on so this app is fully server rendered versus this app is not and we will learn the differences of the between the two in this course as well and you will be learning all about building a really performant app in this specific course so I'm really excited to get started so let's dive in so now let's take a look at how we can start a new project in react now the docs definitely recommend to use Frameworks in fact they recommend a few Frameworks that you can use with react one is nextjs other one is remix Gatsby you want to use Expo for react native applications and so on now the docs they highly recommend using a framework because they say that you by starting with the framework you can get started with react quickly and avoid essentially building your own framework later which is a valid point so if we take a look at this specific section where the question is can I use react without a framework they say you can definitely use react without a framework however if you're building a new app they recommend using a framework because even if you don't need routing or data fetching at first you will likely want to add some libraries for them as the JavaScript bundle grows with every new feature you might have to figure out how to split the code for every route individually now just to summarize all of this for you what they're saying is react Frameworks they do a lot for you so as a beginner react Dev or as you're starting a new project you don't need to worry about all the bells and whistles that a framework provides you so they highly recommend just going for a framework when when it comes to react but let's say we still don't want a user framework and we have a specific use case or we don't want to TI be tied to a specific Cloud platform and so on then in that case they basically recommend that hey you can roll up your own setup with react grab react and react Dom from npm set up your custom build process with a bundler like wheat and or parcel and add other tools as you need need them for routing static generation or service side rendering and more so that's exactly what they tell us and that's what we are going to do in this specific course we going to grab readed as a bundler with react and add any specific capabilities as we want as we build our app further let's talk about the text tack that we going to use we going to definitely use wheat with react for example to start a project to create a project we obviously going to use nextjs to as a framework option with react and then for styling our application we are going to use a specific Library called as Shad CN Shaden UI has become so popular it's because it allows you to build your component library now Shaden Library uses tailin CSS underneath it so we will be using tailin CSS to style our application so you will be learning a bit of Tailwind along the way as well but let me quickly talk about why we using Shard CM now as we build our application we don't want to start from scratch because we mainly want to focus on the specific crash course and the learnings of that so what we are going to do is let's say for this spe this specific batch component this card component or anything else that we need in our app we are mainly going to stick with using components from Shaden now keep this in mind take a look at the docs it says it right here Shad CN is not a component Library it is a collection of reusable components that you can copy paste in your apps this means these are beautifully designed components that you can mainly just copy paste in your application so you only you will only add that specific component and it will create a folder for you with that specific component code in it so if you look at your package Json there won't be any card in of Shad CN from it because the motive with shad CN UI is that it's going to give you all these reusable components that you can just copy paste in your code and just right away use it it's not going to be installed as a dependency so we can make whatever changes we want and we we can customize it however we like because the base is already provided to us plus it's open source and accessible so it's really awesome so for example from this list we're going to use the card component and all we're going to do is use this command to add card and we also going to use the badge component to display all the different Cuisines as well at the same time because it uses Tailwind we are going to build our application further with Tailwind so the rest of our page whatever we see on this specific page or this page all of it is going to be built using taen CSS now let's go ahead and create our react application with wheat now now if you head over to the getting started section and if you scroll down there are there's an option for scaffolding your first read project here let's just copy this specific command and we have two options we could just copy this command and follow the prompts or we could also just select the react as a template for example but let's just do this and see what the prompts are so if you head over to our terminal I've kind of divided a terminal into two halves the first one we are going to set up a react with wheat and the bottom one we'll set up our nextjs so here let's just paste what we copied and now we're going to call this tasty react because this is the application that we are building where we display the list of recipes and have the ability to filter them and view more information and follow the instructions of those recipes now you can call this whatever you like but I'm going to call this tasty react now here let's just go with react as an option I'm going to expand this a little bit but let's just go with react as an option here when it comes to selecting a framework at the same time we are going to select typescript plus S swc as an option so we definitely want typescript in our project but we also also need s swc now s swc is a extensible rust based platform so it will help us in compiling and bundling and it's 20 times faster than Babble so we can we can basically compile and bundle our JavaScript code in in a much faster manner so since it's built on top of rust it's really fast as well so that's what that's the option we going to select and now let's just change the directory npm install that will install all the packages for us to get get started and once it's done we are going to run the development server now our V plus react application is ready to go and now look at that you can see that there is a counter example with V plus react ready to go which is pretty awesome now let's see what the process looks like for next CHS now if you head over to the docs and head over to the getting started section here make sure you follow the system requirements making sure you have the latest nodejs version and any of these operating systems so let's just go here and copy this specific command now create next stab is a CLI tool that gives you a bunch of prompts just like we saw with beat to bootst our application so now here again if we go to the bottom section of the terminal just going to paste what we copied and here let's just call this tasty next we're going to use typescript we're going to use es lent we are going to use tailin CSS we're just going with the defaults at this point and we will talk about app router later a bit later but let just for now say yes and we don't want to customize anything again this is going to reinstall the dependency now one difference here is that with wheat we had to go ahead and run npm install versus with next this create next app already installs it for us so all we can do is just go to Tasty next and then just run our development server it starts off our project on Local Host 3001 now there you go we have our next GS application also ready to go what we need to do is add Shad CN in our application now now if we go to the installation section we can pick to these two Frameworks we could go with Ved or we could go with nextjs now let's just go ahead and add shat C and to be now remember we have already created a react project so we are going to only add Tailwind with all these different configurations to our project but before we do that let me just give you a quick walkth through of the projects that we have already set up so now let's just stop the server on in both cases and open up the application in Visual Studio code now Visual Studio code is going to be the editor of my choice but feel free to use whatever you like and here let's just open up vs code so now let's just go ahead and check out our Ved with react application now this project is tasty react which is configured with Ved plus react so here we have a public folder where we will sto be storing all our assets node modules has all our packages needed to bootstrap the specific application then we have a source directory now again there's a specific assets folder which you can add any of your assets to as well alongside the public now if we go to the app. TSX this is the main page of our application remember we saw the counter example this is exactly where it is created so app. TSX is the main file is the main page of our app and it also has a app. CSS with all the specific CSS code as well and then we have a index. CSS file which right now does not have anything configured but has a overall look and feel this is where we would be adding tailin CSS then we have the main. DSX file now the difference between an xjs application versus a single page application as this specific one is that it is always going to create the react Dom on the specific root element over here and it's going to render the app now app is the main page of application but this is how usually it works and this specific root element is in fact declared over here so you have the div ID so all your JavaScript code all your HTML code essentially is going going to be mounted here is what it's saying over there right here then we have the index.html file which has our HTML page itself so you can modify it later if you want and then this is where our JavaScript code that's going to get bundled and minified and shown here then we have the TS config file with with configuration for a project and then we also have a Ved config file so now weed config file works really well with the plugin system from rollup now if we click on this specific option you you can see all the different ways we can configure this specific V config file now remember I said that V uses rollup to power the plugin system this is why we have react as a plugin now let's say we want to add some other plugin here for example then we could just do that in the plugins array and V has a bunch of different plugins that we can use which gives us the plugin play optionality that we want now again we are importing react from plugin react s swc and and then Define config which is this spef function right here that's getting exported from the Ved package itself so this is how the tasty react project works now let's go ahead and take a look at the next year's project now if you take a look at next tasty next we have a directory here called as the directory now directory will have all our build files there so whenever nextjs runs our development server all the files that get built are right here and nextjs us different Json files to map all the different individual files then we have the app directory the app directory is basically the app router that we talked about in nextjs and that's why we have the app directory now the nextjs has one more router that we will talk about in the routing section as well but for now in the app directory we have the page. TSX file now this page. TSX file is essentially the page that we see on our Local Host 3001 so this specific page will have all the code for it so next G uses spe specific file names as special files for example page. TSX would mean that this is the index page in our application similarly we have layout that basically surrounds our entire application it wraps our entire application and here we have the HTML document for example and the children would be all the individual pages that we would declare in our app because layout is in fact the root layout now we also have a specific font setup here called as inter again we will take a look at fonts a bit later and we also have the metadata API which where we can configure our specific title and description for SEO purposes later but layout is essentially the root layout that wraps our entire application then we have the global CSS file which has our Global CSS configuration and this is where we are setting up Tailwind now keep this in mind in V with react we still need to add Tailwind but setting up this specific project in the create next T prompt we already set yes for tailin that's why tailin is already preconfigured which is pretty awesome so one last step for us to configure but these are the three things that we need for tailin this the code for Global CSS then in the public folder is where all the public assets would live for example then at the same time we have a next config file which where we will configure specific values for our next year's project that we will take a look at later then we have the post CSS config file so that we can basically add CSS code inside JavaScript it's for compiling CSS code with JavaScript and this is mainly used for tailin then we have the tailin config file which is a global tailin configuration whenever you want to extend the existing design system of tailin then you can definitely use this specific file as well now I do have a course on tailin that you may want to check out right here which is a tailin CSS crash course if you're interested this specific crash course will give you a indepth overview of how Tailwind works so if you're if you're interested definitely check that out but going back to our project this is where all our Tailwind styles are set up and how where we would extend the existing design system or even replace it if you like then we have the TS config file which has our configuration for our project now this is how all the project files are set up whenever we bootstrapped our Ved plus react application alongside our nextjs application now as we saw earlier the app router comes with taen CSS as a CSS framework by default as we chose in while setting up our project so let me quickly give you a walkthr of tvin CSS so you know exactly how to style our application and we'll be able to follow along as well so for example here tvin CSS is essentially a utility first CSS framework now if you want to learn tailin in depth then I also have a free crash course for you on tailin CSS that you should also check out on my channel right here if you want to Lear in dep then definitely check out the tillin crash course on my channel now tillin is a utility first CSS framework so for example instead of typing display Flex in a CSS file all you're going to do is write Flex instead of writing padding top is 4 pixel or 16 pixel or one r or two r or so on you are going to write PT hyphen 4 so that is the beauty of tailin it these are all different utilities now you can think of these utilities as essentially JavaScript functions that return the specific CSS for us for example essentially that's what they are now the reason why delin has gained so much popularity because you don't need to create a separate file Al together you can just inline the CSS here so for example if you hover over this then you have display Flex here now if you want to install the specific plugin that I do have then you can go to extensions in Visual Studio code and then look for tailin CSS intelligence and you will be able to get the intence needed to style your application now heading back to page. TSX if you see Minh screen then it's 100 VH which is 100 viewport so it sets the Min height as well so these are different utilities that tilin provides us so if you head to getting started you can see the utility first fundamentals here and why they're important but if we take a look at responsive design then dilin does provide us a break Point prefix as well so that we can style our application for different viewports so for example by default tailin focuses on mobile and then we go to desktop for example over here p24 applies to all viewports but if I'll specifically say I want p24 to apply to mobile but let's say I want p64 to apply to let's say desktop then I can just add large as a prefix pin also provides us with a design system out of the box so it gives us a bunch of colors already all these different swatches that we can just use so for example if I want to change the background color of the page to BG I don't know gray 800 then I could easily do that thanks to tailin but at the same time I can change this to Pink as well if I want but it provides us on a scale from of 50 to 900 or 950 these are all the different colors that tailin provides us and it goes all the way to 950 now it also provides as a spacing scale if you want to learn anything about getting good at building really good design then you need to make sure that you have a really good spacing scale now we don't need to worry about it because tailin automatically provides us for us which is this default spacing scale for example if you use PX4 then it means it's 16 pixel or one ram and so on so as you saw over here p24 is adding a padding of six Ram here but if I add say PX then it will only add padding left and padding right and if I want only on the y axis then I can just say py so all these utilities are really cool and really great and you will learn more tillin as we build our application further but keep this in mind that I will be providing you all the tailin Sal so you know exactly how they work but I won't be necessarily going in depth in tail so now let's go ahead and set up shat CN in our projects now again we have already created this specific react project with v but now let's go ahead and add Tailwind to our V plus react project let's just copy this and paste it right here similarly there's one more command that we need to initialize Tailwind let's copy that as well now let's initialize tailwind and next let's just add the following code that they recommend us in our TS config file where we are configuring all how our project we are configuring our project so in the TS config file let's go ahead and add the base URL and paths here you're basically saying that the paths anytime that we import it's going anytime we import using at at the rate it's going to resolve it to Source slash whatever now next we need to install the types for node to the Ved types for node and also we need to configure the Alias and the Ved config file as well so just copy this and then paste it now let's also just go ahead and copy how how we can resolve the aliases because we already have everything we also need to import path from path now let's just go to Ved config file and here let's just paste it and we need path so path is going to come from path we can just import path from path there you go now that we have the path added let's just go ahead and run the Shad CN UI init command to set up our project just copy this and now let's just go go here and paste it now this is going to initialize our shat CN UI components that we want and the global configuration for how components would be managed so would you like to use scripes script yes we're going to go with the default style we're going to use the base color now if you take a look at here they also tell us how to answer these questions too so for the global CSS file we're just going to copy this then we will be using CSS variables and the answer is yes then we are going to use no where is your tailin config file let's just copy what they have here where is your located it's right here then the aliases for components are going to be at at theate SL components so let's just paste that similarly the utils are just going to be these utils and then are you going to use react server components the answer is no and write configurations to components or Json now this is the Json file which will manage all our components so we're going to just say yes now again it's writing components. Json file and initializing our project now let's go ahead and check our project so now we have the components folder as you see here but we also have the components or Json file with the different aliases at the same time we have a rough schema for how where all the files are for shard CN to manage now let's just go and test it out by adding a button component so let's just copy this let's head over to the terminal and add shat CN button now that we add this Watch What Happens now here in the components folder now we have a UI folder and it has a button. TSX now remember in package so we not going to see a like an import for button but in fact we have the entire code for button literally pasted right here this means we can modify this button however we like now this specific button has different VAR variants such as default destructive outline secondary and so on so if you want to use that we can as well now let's just go and use this button in app. TSX now again honestly we don't even need need all of this so we can just pretty much get rid of it and these as well and similarly in index.ts we can CSS we can give everything as is but in app. CSS we don't need any of this so let's just get rid of that as well and now what we can do is just add the button from UI components button from shat cm and I'll just say hi hi there so this specific button is added so now let's just go ahead and check out our app so now here if we refresh the page nothing happens because our app is not running yet so let's just run the app now now let's just go ahead and refresh the page and look at that hi there is right there that means Shad CN components have been installed successfully now alongside button we also want badge and card so let's just add that as well so let's just copy this and add card same time let's add badge as well now you can see card and badge are already added here so we we are good to go now let's just go ahead and install shat CN with nextjs so if we go to the dogs and in the installation section this time let's select nextjs as a framework and again we already have the project so all we need to do is initialize shat CN UI in nextjs now here let's just copy what we pasted initialize the UI let's go with the default style let's go with slate would you like to use CSS variables yes and it's going to write components. Json now let's just go ahead and also add card as well as badge here as well at the same time we also need button so now let's just go ahead and check out chat CN right here so we have the components directory we have badge button and card ready to go and we also have a components. Json file which is pretty awesome and now if we go to page. TSX again we can just pretty much get rid of all of this so we don't even need it and now what we're going to do is just use button just to test out that shat CN is configured you can just call this hi there get rid of image import unused now let's just go ahead and restart the server now let's just refresh this page really quickly and look at that hi there sh CN button is also configured here that's exactly how you would configure Shard CN in nextjs versus Wii specific setup it was pretty much the same except that we had to install Tailwind in V plus react versus with nextjs it was already preconfigured at the same time the setup was a little bit simpler with nextjs than it was with beat plus react but more or less it was pretty pretty much the same so it felt like the almost like the same experience so no complaints here let's go ahead and add routes inside of our application so for example whenever we click on any of the recipe card then we definitely need to route to another route called as/ recipe SL1 and remember tasty react as well as tasty next are identical applications with maybe little minor CSS changes but majority of the functionality is pretty much the same so the same routing is also needed inside of next year as well when we route to/ res /1 at the same time when we click on back to all recipes then get taken back to the homepage similarly if we go to the recipe page and if you click on the nav bar and click on tasty next then we also get taken back to the homepage that's pretty much the functionality that we have here so routing is something that's really important and one of the most fundamental things that you need inside of any application so when it comes to routing with react and weat we have a few options so first we can go with a really popular Library called as react router now react router is one of my favorite libraries and something that I have used for many many projects and I have really used that in production applications and this specific library has scaled really well so there's definitely react router as an option then we also have another option called as wi now W is essentially a do one thing do it well Ved plugin where it also offers us routing capabilities so for example it also uses a file system based routing that that nextjs offers as well as well so we can definitely use W with be to configure application and get routing to now W doesn't just give us routing it also gives us and basically is identical to what a framework provides us different data fetching capabilities and so on we won't be using white but know that this is a viable option that you can use alongside we with react as well we will be sticking to using react router now when it comes to react router we have a few different options and few different routers for different scenarios that we could use in application for example these are the four different types of routers that react router offers us one is the create browser router then we have the create memory router create hash router and create static router create browser routers is what we would use and is the recommended router for all react router projects so this is what we would be using but you would use create memory router for testing and component development essentially like for example when you're using story book you would use something called as create hash router for example when you're configuring a web server and then you would use something called as create static router but again you are rendering things on your server for example nodejs and so on again this is more for server side but we will be using something called as create browser router so if we go to the documentation for browser router what it does it stores the current location in the browser's address bar with using clean URLs and navigates using browser's builtin history stack because browser has a history stack already that's what it utilizes to route between pages so that's what we would be using in this specific project but now on the other hand but when it comes to using nextjs nextjs uses a file system based router this means that whenever you create a new file with that specific name then you will be able to route to it so you can Define different routes inside of next GS and those routes are also called as route segments so if we take a look at this specific diagram whenever you want to route to the index page it's called as the index route then you would just create a new file called as page. TSX which is already what we saw as well for example we have a page. TSX inside the app directory but then whenever you want to create a dynamic route which means the slug is going to be different what I mean by that is let's say we go from one card to the other then this value is going to change right now it's one but if you go to some other card it's two and so on so that specific value is different and that's what a dynamic route is wherein this specific ID which which would be the recipe ID would be different so what we would need to do is create a page. DSX file by creating box brackets inside of recipes and then creating a folder with box brackets so that's what a file system based router does all you need to do is create new files and then you you would be able to route to them so there is no there are no multiple options for creating different routers in xjs but in xjs there are two different types of routers one is the app router and the other one is the pages router now remember when we bootstrapped our next year's project we selected the app router because app router is the default router right now inside of nextjs but before app router came along we had something called as the pages router in the pages router it's it was still a file system based router but the functionality that you get in this that specific router was quite different with app router we get capabilities like react server components and client components the apis are slightly different with the app router and all the new features are now available inside app router this does not mean that pag router is outdated or deprecated or Legacy in any way Pages router is still used by many many companies all across the world this is really important that if you are using Pages router it's completely fine cuz many applications are built using nextjs with the pages router but as the react team partnered with the nextjs team and we had special capabilities for react server components and client components exclusively available in nextjs and the way you create components changes inside of nextjs with app router that is why a new router was born called as app router so if you want to look for into transitioning from Pages router to app router do it slowly and do it one route at a time because you can still have app pages router working alongside app router as you migrate those different routes but that's how routing Works inside of next year in our specific project we will be definitely sticking with AB router as it is the latest one and it has all the recommended features that we're looking for so if you're starting a new project I highly recommend using the app router itself now let's go ahead and set up a browser router again we want one route which is called as the index route this is more of index.js Convention of using page. TSX we'll still be using the same terms for index route and dynamic route and react router as well so what we are going to do is again we already have create route but we are going already have create route here but we are going to create a browser router and wrap it where we Mount our application so let's just copy this and now let's just close all of this cuz we don't need it and now inside of our main.ts X let's just wrap app with browser router now in order for us to use browser router we need to install it so let's just go to so here again we can just install these things to get the route react router just copy this head over to the terminal and add react router inside of tasty react and also let's just restart the server now what we can do is just go ahead and import browser router just go ahead to our documentation and import browser router from react router Dom all right so now we have browser router ready to go but now if we go inside app right now we have a button there but let's just make sure that now app is the central place where we Define all our routes means if you take a look here we have these specific routes so what we are going to do is instead of button let's just get rid of it let's just Define routes here now we are going to import routes from react router same route as well from react router now this means that this is the default route but what we want to do is we want to use the element property inside of react router and let's create a new page called as the home page now even though app is hosting all the routes let's just separate the pages out so what we can do is inside of source whoops inside of source directory let's just go ahead and create a new pages folder and here let's just create a homepage now this is where our code for recipes will be located so let's just call this homepage now again what we can do is we can just use the button that we had over here and let's just say hi I am home from Shad CN so everything works as expected but here let's just import homepage as well but now this is needs this needs to be a react we need to declare it here so this needs to be a react node so let's just declare it here as well so if everything works as expected then we should see hi I'm home here which is amazing but we don't just need one route we actually need two so whenever we go to another route we need SL recipes SL one so what we can so what we can do over here is let's just create a dynamic route and the way you would do that is by saying recipe SL colon recipe ID and this recipe ID is the dynamic segment inside the specific URL inside a specific route and now instead of homepage we're just going to create a new page called as the recipe page now here inside of homepage let's just call this recipe page. DSX again let's just create a new functional component let's just call this recipe page and now let's just say hi I am a recipe beautiful now we have a recipe page as well as we have a homepage so let's just go ahead and import recipe page here this where we saying the recipe Pages go here so let's just go ahead and try it out so now if we go back to our app if we let's say go to slash recipes slash one you can see we get hi I'm a recipe let's say I just go to whatever ID it should still take us to SL High a recipe page because this specific value is dynamic let's say I go to/ recipes page let's see what happens nothing happens it's a blank page so what we can do is there's one more route in next year as well as react router which is called as a catchall route so instead of following this specific convention what we need to do is we're going to say hey if the route PA is going to be asteris that means all of them let's just render a element now we're just going to say over here to keep it simple that this page does not exist for example right just to make sure that that we are catching all the routes so right now if we head over to our app you can see we get this page does not exist which which would be an indication for us that hey we need to create this page if you like but for now let's just keep it as is we don't need to worry about it this is how you can basically create different routes with react router but let's say you want to do the same thing with nexs we want to create a index route a dynamic route and a catch all route that we just talked about but we can do here is inside of our app we have the page. TSX which is our index page so we we can keep it as is so let's just create a recipes folder and let's create another folder called as recipe ID and because nextjs has all these special files where the way we need to Define these Pages we need to create a new file called as page. DSX that means this becomes a default page inside a recipe ID so if you create a page for example here let's just say hi I am a recipe I am a recipe page for example so now if we head over to the browser and go to our create next app and let's say we go to/ recipe slash whatever value we do get high am a recipe page let's say we go to/ recipes page which does not exist at this point let's see what happen the next JS automatically gives us a four or four page this page could not be found which is exactly what we Tred to do inside of a react router as well so we can keep this as is we don't need to create a specific special route for this one but this is good to know that in next year it automatically handles it already but speak speaking of special files like we talked about page. DSX and layout. DSX let's review what are the different special files inside of nextjs now we have a few special files inside of nextjs these are all the different files we have layout page loading error and so on and we will take a look at few of these in this specific course but for now let's just focus on layout and page now the layout page the special thing about this page is that whenever you whatever you add in this specific page will not render and this is where you would typically add your header and footer so whenever we are ready to add our navigation bar we would be adding it here in the layout file similarly we could also add it in the footer as well and then page. TSX is essentially a page itself so whatever gets rendered inside of layout is in fact the page file itself so anytime you want to create a new page a new route then you need to call it page. DSX let's say you want the loading functionality need to create a page called as loading dtsx and so on these are different special files and soed on xjs now by the way if you interested in checking out and downloading all the visuals that I'm sharing in this specific course and definitely take a look in the description below where you can download all the visual assets alongside all the links that I've offered in this specific course so definitely check that out so now if you were to compare routing with nextjs compared to react router or react with weed you can see a few differences it was really simple and easy in nextjs because nextjs already had the router set up so we did not need to set up any additional all we needed to do was create new files and make sure those files match the naming conventions that we talked about in the special files visuals versus in react router we had to set up the router we had to follow the docs and make sure all the routes are properly configured now if you don't follow the right conventions especially in a react router world the routes are not going to reender and you may wonder why at the same time there are different specific routers as well just the browser router hash router static router and so on that we took a look at so you need to know which router is best for each scenario the good thing about next CHS is that all these decisions are made for us so like all we need to do is just create new files in a file system and the routes will be created provided we follow the naming conventions so you can definitely see how a framework is definitely powerful when it comes to creating a router as a beginner react Dev this might be daunting for you where you have to set up your own router but as an experienced react Dev you might or as someone who's maybe architecting the app in your company maybe they can make those choices to decide hey like should I go for file system based router that nextjs offers us or should I just create my own router with react plus weed or even like use something like w that we looked at earlier as well so these are different ways you can create routing options inside of our applications and you can then decide which one is best for your specific use depending on your use case you might you may prefer one over the other so one quick tip I want to share when you're navigating docks inside of nextjs make sure that whenever you search any anything in the documentation you are selecting the appropriate router because we are using the app router make sure that is selected but if you want to search something in Pages router then select that instead because the apis are slightly different and that's why it's important that you get pointed to the right apis when you search for it in your documentation now let's go ahead and add our navigation bar inside of our application for example right now if we look at Tasty react and also if we take a look at Tasty next this is essentially your navigation bar now Shad CN also has a navigation bar but we won't be necessarily using that because our navigation bar is quite simple it literally has one text with a specific font and then we whenever you click on any card you click on the navigation bar it takes you back to home so basically it routes you back to home so what we need is we just we can just create like a custom simple component with navigation and then that would be it so let's just go ahead and create it so now here in components let's create a new component called as now. yes now what we can do is let's just create a functional component and in here let's just call this Navar and now what we can do is just copy what I'm going to give you just going to and what we're going to do is just replace this code with navigation bar now this is the code I've already prepared so you can take a look at the GitHub Link in the cheat sheet to check it out if you like but here this is what we would be calling tasty react now the best spot for us to place this would be in the app. TSX right above routes because this is sort of the entry point for our app the main page so let's just add this here and then save it now if you go to our application you can see tasty react is already on the page but there's one more thing we obviously need to also make sure that we are able to route to homepage as well we can just use anchor link for that and let's just wrap it up inside of each one now you can see that tasty react is right here and then if we go to we are on the recipes route but if I go back to Tasty react then I'm on the home route around now which is which is what we want similarly let's do the same inside of next CHS as well so now again instead of next CH we want tasty next here so let's just go ahead and do the same so what we can do is just copy this nav bar go inside our UI folder and paste it because it's pretty much the same but now inside of nextjs instead of using the anchor tag we will be learning a special component inside of nextjs for example we will be learning about the link component the link component is essentially a react component that extends the HTML anchor element to provide prefetching and glans and navigation between Nots this might sound really hard but what it's essentially saying is that link is a special component it's a special react component what it's going to do it's extend it's still uses the anchor tag underneath it but it also has additional capabilities such as prefetching so if we take a look at what prefetching is pre fetching is a way to preload a route in background before the user visits in so for example if we take a look at this specific app I'm going to let's just refresh the page clear it for example completely now this is an app that we are building inside of my next year's course so you should definitely check it out if you're interested this course will teach you everything that you need to know to master nexts and build production ready modern application so definitely check this out if you're interested it is a really comprehensive course and it also comes with a cheat sheet that you can download so you can follow along as I build the course as well this is the easy cell app that we buil inside of that course now this is an ecommerce app for example NOW Watch What Happens and how the link component performs here we are using the link component to wrap these cards now as I scroll down more images get downloaded for example we have the Nike shoe which is not in the viewport yet but it's about to come in the viewport and that's what prefetching is link component is going to prefetch Pages as it's about to appear in the viewport so you get that additional performance benefit plus you're not just downloading pages that the user may not even see because from for example in a site like Amazon there might be way too many pages now imagine if Amazon were to use nextjs then or were to use the next link component from nextjs then in that case because it's such an image heavy site you will see a huge performance benefit because next GS is only going to load the things that are in the viewport or what's about to come in the viewport this will make it make the initial load really fast and make your website really fast so for example if you head over to the easy sell app the Nike shoe is about to come but you can see how as we're about to scroll down this is the dog photo and that's what shows up here how refreshing Works inside of Link component so that's what we are going to use one to wrap each each of our cards inside of Link component so only the ones that are needed will show up in the viewport but also in our tasty next nav bar we also going to use Link component now even though prefetching inside of test tasty NE n Bar might not have that much of an advantage because just routing to the main page but if you think about it when you want to use the link component whenever you're routing between internal outs because of that addition because of those additional capabilities of performance and prefetching and all of that that we took a look at but let's say instead of let's say we want a route tasty next to my website this is an external Link at kara.com so in that case you don't necessarily want to use the link component you just want to use the Pure Old anchor tag that we took a look at in tasty react while building a tasty react nabar so let's just go ahead and add link component inside of our application we can just copy this line of code and now let's just instead of tasty react it should be tasty next and let's just wrap it with link component now let's just import link from next link instead of dashboard it should go to homepage and then instead of tasty react it should be tasty next now make sure to close the link tag as well so now we need to make sure that we add the nav bar inside of layout because remember that's where we discussed that that all our routes all our headers and footer will be in the layout cuz one they do not reender and second it wraps our entire application so here right above children we can just add nav bar see nav bar is going to be imported from there and just save it so now if we go back and see you can see tasty next is right here but we have also added the link component so this is on recipes page so if we click on tasty next it should take us back to home if you click that look at that we are also redirected back to home which is which is exactly what we want let's talk about the different rendering mechanisms in modern applications so you may have heard of client and server rendering and we definitely took a look at the single page application workflow and the static side generation or prerendering application workflow before but let's talk a little bit more about client and server rendering and the different mechanisms needed in the modern applications today again this diagram really does a great job I've asked AI to generate this for me to use the analogy of someone cooking in the kitchen like a person cooking in the kitchen so on the left hand side we have client rendering and the right hand side we have server rendering on the left hand side with client rendering you can think of it as the chef giving you a bunch of ingredients such as the dough the vegetables the bread the sauces and everything and this person right here is putting together all the ingredients and then baking it and putting it on the pizza dough for example definitely take some time as they collect all the ingredients together and place it and form this beautiful pizza for example now you can literally think of this as client rendering when you visit a specific website it's like the browser putting together everything that you need on the page that's your headers your images assets JavaScript files and so on on the page to give you a fully cooked pizza to give you a fully baked website the browser is basically going to act like this person who's going to put together all these ingredients together and making sure your website is functional and exactly how you want definitely take a bit of time if the website is complex enough right because the person is going to take a lot longer the browser is going to take some time to put together that web page for the user so this means that the initial load of your web page depending on the complexity of your website the number of assets on it and so on and will be really slow if you have a lot going on on your web page so what's exactly server rendering then well this time the chef Cooks the entire Pizza it's the pizza is ready made and ready to go all the assets are all there all the ingredients in the pizza are all there it's basically a ready to eat pizza you get to enjoy your meal right away without doing any extra work when you visit a specific website the server a powerful computer somewhere else for example is going to prepare the whole web page and give you the ready to eat pizza for example it sends the browser a complete ready to view page and all the browser needs to do is just show it onto the page that is hydrate onto the page so you see the web page immediately just like you can eat a fully cooked pizza because you get a ready to eat pizza that's what server side server rendering is because that powerful computer is really powerful all the resources are ready to go and the in server rendering you're just going to get the page ready to go so that's the difference between client rendering and server rendering so now if you think of react with wheat for example this it react mainly is known for building single page applications like we just saw what react does is what we described here as client rendering versus what nexs does is that it gives you the option of server rendering by default creting the HTML page in advance and showing it to the user so this is why many many folks opt for Frameworks like nextjs or even remix Gatsby and so on because of the server rendering capabilities over to Tasty react which is our spa application if we go to inspect and go to network Tab and then disable JavaScript and refresh the page you will see a blank application and if we head over to page Source then we what we see here is literally all the assets that are ready to download and then there's a script tag with a div ID root tag now all this JavaScript still needs to be downloaded and that's how the page will get functional but we don't see any HTML that was there on the page now let's say this is not great for search engines because when Bots search engine Bots go to check out your website they're now going to care about which fancy technology your site is using all they're going to look at is the source and see what's on your page and and basically decide where it should rank on Google now because all they're going to see is Dev ID route and until JavaScript gets downloaded then that's when they will see the page the initial load time is going to be really slow and it's not what you want at all let's say we go to an xjs website now this is my blog and it is fully built in xjs now let's say we do this the same thing here we go to sources and then just say disable JavaScript minute we do that and let me just refresh the page the page is fully functional you know why because the HTML is already generated thanks to server rendering and prerendering so if we take a look at view page Source I'm just going to enable line wrap here it's a special plugin I've installed in my browser if we do that you can see that all the HTML code is right here in fact let's just take a better example if you go to a specific blog post and go to the page source and again enable line wrap then you should see the entire block post here so when a bot visits the website they can exactly see what's on my page and are able to then rank my website higher because my initial load time is going to be really fast and they are going to recognize everything that's on the page that's what I mean by client rendering and server rendering why you may want to opt in more for Server rendering versus client rendering which is our single page applications in general react is in fact client rendered versus nextjs is in fact server rendered and not just that it has a few other options that we will take a look at next but this is why you may want to opt into server rendering versus client rendering let's add these badges as well as let's add these cards as well so in order for us to do that we have already installed the component from shaten it's time for us to start using it so let's just go ahead and Implement that now so let's do it in react first so if you go to our homepage and it says hi I'm home for example we don't don't need the button because we're not going to use it but we definitely need a badge component for sure so what we're going to do is here we will have a list of Cuisines so we're going to say Cuisines and then here this is going to have our list of Cuisines which we'll take a look at what we need is we're going to map through those list of Cuisines and here we're just going to add the batch component from chatan and we're going to map them we're also going to return them here or rather let's just do this because this is just going to act as a return anyway this then the second parameter of map is an ID so we can use that ID and the name of the cuisine as a way to create a unique key for our badge component so this is what we can do now this cu are just going to be an array of strings so now I already have a list of Cuisines I'm just going to add that so badge we're going to override a few Styles here now the variant for badge is going to be outline but there are several different variants as well you saw here it could be default destructive outline and secondary so let's just say CU Cuisine is going to be badge all right so so now if you go back here you can see that we have all the list of elements now we also want to render a list of cards here too so for that let's just basically use the card component here so we can just say card component so the card component let's just see the API for the card component itself so if we take a look at the shat CN UI Library we have the card component and there are two tabs here the preview Tab and the code tab so we can always review the code that we want here so what we can do is we really want a really simple card so we can just pretty much just copy this and then let's just paste what we copied and save it again we need to make sure we importing all of this from shat CN components UI folder that we have there you go so now if you look at it look at our card component we have an image we have a title we have a footer for example so we could literally make it this could be the header this could be the body the content and then this could be the footer that's ex that's exactly how we can configure this so for that we need an array of items so before we go and call our API which gives us a list of items we need to First make sure we can just add some dummy data so we can just say recipes I guess and then here this these this literally could be the array of recipes so here we can say ID is going to be zero or maybe let's just say start with one and then we will have a name which is going to be something like like chicken sandwich and the cuisine is going to be American something like that this way we can just map through it so we can just say recipes. map recipe again same thing use the second parameter in the map function to use it for the key so again we can just say key is going to be recipe. name and then it could be idx for example at the same time we can also use recipe. ID as well if you like but again let's just keep it as is so now instead of title we can just have recipe. name and then we don't really need a description so let's just get rid of it similarly instead of card content we can have ideally this would be an image but I just replace this so we can just say this is going to be the name this is going to be the footer and this will be some image that we want so now if we go back to our app we can see that the card component is already ready here we have the chicken sandwich and we have the footer which is what we Define in an array of elements so now so now that let's just let's just get rid of all of this and then paste what I just copied right here because again like I mentioned I'm going to give you the structure and the CSS for it so now we can just get rid of header alog together or header could have the image here eventually but for now we don't need to worry about it at the same time we need the key back so we can say recipe. name hyphen and then we can just say recipe. idx oops here here all right or just idx so now we have our basic card ready to go we don't have servings prep minutes or cook time minutes just add it here inside of our servings is going to be four prep time minutes is going to be four and then cook time minutes is probably going to be five okay so now we have our basic card component ready to go with the hover and all that but obviously we need to make sure that only shows one card so we will add a div around it too so that we have like four columns initially on desktop and then three columns and two columns and so on just like we have here where if we switch to for example different devices then our columns increase just like that so we want something like this so definitely let's configure that too again let's just add the necessary styling for that now if we go back look at that we do have our card ready to go let's give it some page styling too so that it looks how we want it to here let's just replace this with these two elements and add another div so now we have our card ready we our card is looking pretty good and obviously this is zoomed in so this is how our card looks like we definitely need an image but our P structure looks pretty identical iCal to what we want in this specific application now obviously we do want gradients as well which we'll configure that a bit later but for now let's focus on getting real data for tasty react so let's talk about data fetching inside of react with wheat alongside nextjs now we will be using this dummy Json data to get the list of recipes so if we take a look at our docs there are a bunch of different different recipes here and this is what we'll be focusing on it will give us a list of recipes for example and then we have it has everything that we need now let's say we go to two a specific ID then this gives us a specific recipe as well that we can get when we go to the individual recipe page for example that's what we would be using for data fetching now in order for us to fetch data inside of a react wheat application what we could do is use the fetch API now this is a very common fetch function that we could use at returns a promise and then we can use fetch to basically fetch any specific resource that we want so we could fetch use the fetch API to fetch the list of recipes and then individual recipes as well but in react and weed like I mentioned we have W which already has different data fetching mechanisms that we can use if we were to use W to basically get the list of items now this would mean that we don't necessarily need to client render we could in fact server render and opt into different data fetching mechanisms as we like as well so for example inside of data fetching we have different modes such as SSR server side rendering Spa that means if you want if you want spa for some reason then we could do that as well SSG which is static site generation HTML only so the page is only rendered to HTML with no zero or minimal JavaScript and so on so this is totally a doable option but in our case we're not using Wes but I wanted to definitely tell you that this is an option that we could use with with beat with beat and react but in that case we're just going to go with fetch we're going to use fetch to fetch the list of recipes but this is great for beat and wheat plus react and we can just use fetch in one of the react hooks basically fetch the data and manage State locally but when it comes to fetching data in nextjs there are a few different ways we could approach this the nextjs also offers us a fetch API but a special fetch API next GS extends the native fetch API and it allows us to configure the caching Behavior inside of our application so remember how I said that we could server render an app or a client render an app and so on in next years in fact there are a few different ways you could fetch data itself so one is called a static side generation what this means is that we still use the browser fetch but next year will extend the specific fetch function and add a property called as cash Force cash this means that whenever you use this specific function by by default your request data is just going to be cached and unless you purge that specific cache that data is going to stay this means that anytime the user accesses the data it's in fact cached on the server and you're getting that cached data over and over again on the other hand your data does get stale after a bit for example in our application if we were to go ahead and cash all of this data but let's say that our title we change our title for example then in that case now the data is still so what we could do in nextjs is we we can use something called as incremental static regeneration which would mean that every hour the data is going to get revalidated that we going to get fresh data you're going to request for fresh data every hour the first user that requests for this specific data the first time is going to still get stale data but but the next time the user any new user is going to get fresh data because that's going to be a signal for next year that hey go fetch new data and lastly we have servers rendering which where we can add a cach no store which means that there's going to be no caching caching and we are going to have fresh data every single time but still we will have the capabilities where HTML is prerendered and then we show the data after as well so these are different ways we could fetch data inside of nextjs and all within the fetch function but you need to be careful when you use the fetch because nextjs does cash a lot and this is something you need to be really aware of let's just go ahead and use that in our application let's just use fetch to fetch these recipes so now in our app we have recipes that are coming from a array we don't need this we can do is we can just create a local state call this recipes set recipes once we do get the data from the API we can set the recipes so for that let's just use a life cycle hook called use effect this we want this hook to only run the first time that means we we need to give it an empty array so we we're going to say that hey let's just use fetch so we can just say again in we cannot call a async function directly inside of a use effect so what we could do is we could just say get recipes and make this an Asing function and I's just say response and let's just say fetch and then here call the recipes and then now again let's just get the data so we can just say await response. Json and this gives us the response Json data itself and now if there is data then we can just set the recipes now we just call get recipes right here outside in the function this way we can call it inside use effect now keep this in mind we don't need these recipes anymore we can just do directly call them let's just set the recipes and set with set it with data so now let's just refresh the page and you can see that we do have an error the recipes. map is not a function so let's just see what happens so for example we can just console log data and if we open up browser developer tools and go to console then we have an object and data has recipes as an array so what we need to do is we can just say recipes so if that's the case then let's just call data recipes and now if everything works as expected then we should see a list of cards with all the data isn't that amazing so we have our list of cards ready to go and obviously this card does not look like the card that we want because it does not have an image now here where we had the placehold for image inside of a header let's just add an image so we can say image source and recipe. image and then an all tag we can just say recipe do name width is going to be 500 height is going to be 500 and let's just make it a background cover rounded and then let's just also give it a shadow and these are all different tailin utilities it makes it a background cover makes the corner rounded and also adds some Shadow so now if you do that oh my God look at that this our application looks exactly what we want it almost look like the application that we trying to build here which is awesome so this app is already looking pretty good so now we have all our images from our application right away so now this looks pretty great and this is how you could fetch data inside of react plus wheed but if you're already familiar with how data fetching Works in react and it's exactly that but now let's say we want to fetch data inside of nextjs then how would we do the same well if you want to fetch data inside of nextjs then again we would use the exact same we would do the exact same thing so what we are going to do is we literally going to copy all of this because everything stays the same there's nothing in here that should not be in the other page so if we go to our we go back here we should just basically replace the whole thing now if you take a look we get an error saying that you are importing a component that needs use effect this means it only works in a client component and none of its parent are marked with used client so they are server components by default so this just brings to the next topic which is client and server components which we'll talk about in a second but let's just fix this error for now so now we're just going to call this a client component and by calling this a client component we basically saying that hey just do perform the fetch on the in the browser itself so now if we do that you can see that literally nextjs also has the same code and everything works as EXP Ed which is what we want so you might wonder well why did we add that client again well let's take a look at that next so let's talk about client and server components well remember we had to add the use client on top to fix it but let's talk about what that is to begin with so for example in nextjs by default with the app router remember I said that a lot of things changed with app router this is exactly it with app router we get new client and server components and as of this point it's only available inside of nextjs with client components what happens is when a browser requests data for asking to fetch the data what we typically do is make an API request and that's exactly what we're doing right we're basically calling the recipes API and then the server is going to do the work and it's going to return the data the recipe data and then we're going to display that on the page which is our client on the browser this is fine with client components this is exactly what we did just now but but by default in nextjs all the components are server components so if you want to say that hey this needs to be on the client then we need to make it a client component and that's why we had to add the use client directive which is what we did here the use client directive inside our components inside our page so what exactly are server compon components done well what happens in a server component is whenever we the browser that is the client asked to fetch data we now have the ability to make those components themselves as server components what this means is we can just say that hey if this is a server component instead of browser doing the work of calling the API fetching the data and so on whenever we make an API request we make a call to the server the server then returns it back to the browser and the browser then passes the data and shows it onto the page but unless there's an actual need for a browser that means we are calling we are basically calling the window API or we are calling something that specifically needs a browser and we don't need a browser at all we can just make it a server and that's why and that's where server components were born we could just make components as server components this means the server is going to handle everything this means we can make our backend calls on the server itself and then it will get returned not in the form of Json but in the form of a special stream and then the browser is just going to show it onto the page to the user that's why server components are Bor when would you make components as client components let's say you do need a browser then you would make them as client components now in nextjs there is a really good post when should you use server versus client components well if you are fetching data accessing backend resources keeping sensitive information keeping large dependencies and all of that can be on the server but let's say you have onclick handlers onchange handlers you're using any of the react life cycle hooks such as use State use effect and so on and you're using any browser specific API such as the window object or you want to get users location then all of this can only happen on the browser and that is when you need to make it a client component otherwise by default everything else is just going to be a server component so this is why in our case we decided to make it a client component which we'll get to in a second but one of the other pros of server components are that you don't you now don't need to you don't need to create an a brand new API because everything is within the component so you can just get the back call the backend API whatever data response that you get back you show it onto the component so you can call the back end in the same component and now your client bundle is going to be really small because this because there's less stuff to download for the browser because server is performing majority of the operations and this is why you get a performance boost as well with server components which is pretty amazing if you were to take a look at a component do we want to use use client not really even though we definitely use use State because we just copy pasted the code from our client from our V plus react application we could just get rid of this and what we could do is pretty much extract this function out keep it here get rid of this also and instead of set recipes we can just return data. recipes now what we can do here is we can just directly call because this is a server component now because we don't have the used client directive so we can just say recipes is going to be await get recipes and this means we need to make this a async function now everything should work as expected because there is no client functionality at all so this is the beauty of using a server component so now if everything works as expected at applic application should perform as as it should look at that now we have our application identical but the difference is that we are this is going to be way faster than our V plus react application because the server is doing a lot for us but let's say you do want to make it a client component then you definitely need to add the directive on top called use client but in our case we don't need to worry about it because we don't need to add it now let's implement filtering so for example the minute we click on Asian or American or any of these different amazing usines we want to make sure that the cards Al also filter accordingly when we click on American only American dishes show up when we click on Italian only Italian Indian then only Indian and so on the minute we click on all then we want all the Cuisines to show up all the recipes to show up that's exactly what we want to implement here but in a react application the way we would Implement that is by again making sure that we are creating some sort of a filter storing the state of the badge somewhere and the minute we click on that you want to store the state of the badge and basically check the entire list of array and filter by the cuisine itself so for example here we have a Cuisine every time there's a property for that so we could just filter accordingly the way we would Implement that in react is very similar to what we have for get recipe now instead of get recipes and set recipes let's add another state called as filter recipes and set filter recipes again it can be empty and now what we want is let's also create another state for badge and set badge now here again we can just say use State and by default it's just going to be all so now what we could do is we can say that whenever a user clicks on badge so we can just add a onclick Handler here and we can just say handle on click and let's also pass in the event oops pass in the event and also the cuisine that we have selected so here again we can add another Handler called handle on click which is event and Cuisine and here again Cuisine is going to be a string and then event is going to be react. change event with HTML input element this is the event now we want to make sure that whenever a user does select on the batch the page does not refresh so we can just add pre and default at the same time now we can just set the badge to be whatever the user selects now at the same time let's just make sure by default is just empty and then we as the user selects the badge we can enable it now what we want to do is we want to set filter recipes whenever the user selects the badge so for that we definitely need to repurpose the specific function and add a use a filter function to filter the elements so what we could do is we could just create a new function Al together here and we can just call this get all recipes and just paste it and then return data. recipes oops data. recipes here make this an acing function and now instead of you can just say recipes is going to be get all recipes and then let's just await it here now if there are recipes then we can just set the recipes so everything should work as expected but now this enables us to use it inside another function because whenever the user has selected a badge we need to do the same so let's just add another user effect and say that hey if there is a badge then add the code for it but we need to also make sure that we are closing the use effect and only enabling this only this use effect only should trigger Whenever there is a badge so we can just say if there's a badge then get the filtered recipes so we can just say get filtered recipes now the filtered recipes again is going to be a function which is going to be a async function now here we can just call recipes and since we already checking for badge we can just say if recipes. filter recipe if the recipe. cuisine is equal to badge then we want to show we want to set this but let's just make sure we have filtered recipes by Cuisine here and now we only want this when going to set this Whenever there are filtered recipes by Cuisine so now that we have this we need to make one more tweak right now we are are only mapping through recipes but not through filter recipes so what we can say is if filter let's just make sure the name filter recipes if filter recipes. length is greater than zero then show filter recipes else recipes this way we are mapping through filter recipes if there is a filter else we're just going to return the recipes itself so let's just make sure we enclose this that we are able to map it and now if you click on Mediterranean then look at that we do have the filter working as well as well as all recipes as intended and these recipes are definitely mouthwatering so I'm definitely feeling a little hungry right now all right now we have filter implemented too so let's just go ahead and add the type for recipes so I've already added the type for recipe type so let's just go ahead and assign it wherever necessary so here you're going to have recipe type idx is just going to be number similarly we have recipe type here so we can easily access it and that's it so this is how you can Implement filter inside of react with wheat now we want to do the same thing in nextjs so let's see how we can do that now things change a little bit inside of next CHS remember we talked about client and server components how specific components need to be a client component whenever we need some interactivity so in this case we definitely need interactivity whenever we click on any of these items for example then it is interactivity that we need in our tasty next app so what we could do is but if you change make the entire component as client component then we will lose the benefit of performance what we could do is we could extract this badge component and keep the interactivity limited to that this way we can pass around props and make sure everything works as expected so let's just copy this and inside of our UI let's just create a badge filter component again we can just say it's going to be called Das filter let's just paste what we copied let's just also grab the Cuisines here so now let's just import badge as well and we need a onclick Handler so let's just copy that too so now we can just paste what we copied and we also need a set badge badge and set badge which is going to be a use State and then it's going to be empty but again we need to make this a client component all righty so now we have this going so what we could do is inside of our application inside of our page instead of calling Cuisines here we could just say batch filter and that's it now this way we can get rid of this Cuisines as well this way we can definitely have a client component as a child of a server component so this works as expected now how can we Bas make sure that from the batch filter when we do set the badge is the specific badge value badge value is what gets shared externally so that we are able to then filter our page and show and basically also so that we're able to filter the page and show that P page accordingly as well so for that what we can do is we need to also extract this code out into its own component this way this file can still stay a server component you get rid of this too let's create a recipe list component so if we say recipe list. TSX again this is going to be a react functional component say recipe list and now paste it what we copied we don't need this additional div but we also need to just take in whatever import we have here paste it just paste it and now here we'll have recipe list the recipe list can be a client component if we like for example but we need to set the recipes as well we need to make sure that recipes this specific recipe is what gets passed in here so we can just say recipes equals recipes just like that so we need to take in recipes as a prop so we can see recipes is going to be array of recipe type recipe type is something we need so what we can do is just copy paste recipe over here so we can just say the type is going to be recipe type so now we have the recipe and then we can just say this is going to be recipe type and this is going to be number as well so now here we just need to assign recipes is going to be this value all right so now we have this we have we're still making this a server component and passing the data as prop here but whenever there is a filter for example we also need to pass that too like we need to make sure that we are able to get that information as well so so let's just make sure everything works expected so now if we refresh the page you click on any filter it doesn't work for now but we definitely want everything else now in order for us to make sure that batch filter when it does set the value it's setting in a global place where anyone can access it so that eventually we could just filter the recipes as we want now that's not the case anymore right now we're just getting the recipes from the API and just mapping through it we also need to map through filter recipes and for that we need a reducer and a context to set the badge as well as to get the badge value as well we can filter it so let's just go ahead and create a context value so here we can say recipe context. DSX and if we just create a reducer here again the name is going to be selected Z typo here and now the initial state is going to be State and then selected Cuisine is going to be empty similarly if we create a type for initial State it's just going to be let's just say State it's just going to be State selected Cuisine is a string perfect so now the state can be assigned to here let's just move it on top perfect so now we also need a action type here so we can just say type is action type type again type is going to be string and payload can be and we don't need to default export it in fact it doesn't need to export at all so we can just say recipe reducer so what we ideally want is whenever we dispatch an action for selected Cuisine then the selected Cuisine does get set so we can just say selected Cuisine is going to be payload do selected beautiful so now that we have a basic reducer ready to go now what we want is a provider for context so we can just say recipe provider and this can just take children as a prop and children would be react. react node now we can just return it now this is just typical way of creating context so I'm going really fast but if we just say recipe context provider and then render the children here now we also need to make sure that we are getting State and dispatch from use reducer which is naturally exports and here we can just initialize reducer and add initial State here now here's the thing we don't have recipe context yet so we need to create it so we can just say this needs to be exported so we can just say recipe context will be create context from react and then this could be the initial State itself perfect so now the state or I guess I should say the value will be State comma dispatch and instead of state it is is going to be Cuisine and we can just directly access it here right so now let's just go ahead and initialize it or declare it here so now layout is a central spot where everyone the entire application can access everything so we would be creating recipe provider you would declare recipe provider here and wrap our entire application with it so we can just say this so recipe provider is in fact imported from Context which is what we want now that we have this let's just go to badge filter and instead of setting the badge we're just going to get dispatch from use context and then recipe context and now what we're going to do is we're just going to dispatch it so we're going to say dispatch and then the type is going to be what we just defined here and then you're going to have a payload now we said payload do selected Cuisine so we need to Define it selected Cuisine is going to be Cuisine all righty now we have set it now it's time for us to use it here so right now we just get the recipes from the API and declare it but what we need to do is get just filter the recipes here and paste it here too so we can just paste it and just let's just get the use effect as well we don't need recipes because we get that already from the API and instead of badge this time it's going to be the context that we want so you're going to copy this line add it here get import everything as needed use State and then state will have have the cuisine value the selected Cuisine value so we can just add that here and then we also need the use State the state value of filtered recipes here again let's import this two now we don't have badge but we do have selected Cuisine so let's update that similarly let's just update the dependencies as needed now this is just going to be recipe type array perfect so now we have this we need to add the same condition that we had here which is that if we have filtered recipes then we just need to get it and set it just like that all right so now let's just test it out and see what happens so now it says that you're importing a component that needs create context so it needs to be a client component so here we need to make this a client component but because of the children pattern that we using here only this component will be client component all right so now if I click on Mexican look at that everything works as expected and we are able to filter the way we would want it to so this is how filtering would work and this is how you could basically pull out the value and store it in a global place as well so now speaking of data fetching as we implemented context you can see over here with fetch the specific fetch function is special because by default it has an additional property of cash which is not something that's available in our in the react Ved world this is something that's over here so we by default it's in fact Force cash but let's say I don't want it to cash then I I could pick the other options as well so this fetch function is definitely the special function that we talked about now let's go ahead and build the individual recipe page all this recipe page does is that displays more details about the API and when you click on back to all recipes then it goes back to how it was now whenever you click on any of the individual cards is when we out so again back in react what we could do is on the homepage for card in order for us to link between Pages we can just say HRA and then close the entire card with a link and this time we can just say just go to recipe slash and we can say recipe. ID now this way we are linking between pages so homepage card can go to recipe page for example so if we click on whoops if we go here and click on classic margarita pizza we do get taken back any of these cards should take us back accordingly but this is recipe 1 this is recipe 2 in the URL and three and so on so which is what we want so now let's just go ahead and build the recipe page further now in order for us to build the individual recipe page we just need to get the ID from the individual page and accordingly pull it now as we talked about earlier whenever we go to slash two and that gives you the individual recipe itself so what and we can use this specific image too so right now what we can do is we can just pull that so now in create in react router we can get any individual the ID in the URL by using a function called as use perams what we can do is we can just get the recipe ID from use Rams router this should give us the recipe ID itself and now we can just get the individual recipe and display it so again very the same idea as before we have the use effect and then we're going to just set the recipe accordingly so recipe set recipe use State now we can just say if there is a recipe ID then perform the operation of fetching the recipe fetch recipe recipe ID so now here we can just make this an async function so we can just say fetch recipe a sync now we can just get the recipe so now what we can do is we can just pretty much copy what we had for getting the recipe so we can just copy this code paste it and now instead of/ recipes we can just make it so that we can just get the recipe ID here and we don't need to pass it we can just grab it globally which we have it here now we just directly get the recipes from as an object so we don't need to we can just this is literally the recipe itself so what we can do is just say set recipe as data so this way we get the information as needed so we can just print dat oops data data do name if everything works as expected oops we can say recipe dot name now in case there is no recipe for example we can just say you know no no recipe found so now if you take a look we go here you can see there's classic margarita pizza similarly this should say vegetarian stir fry it does say that chocolate chip cookies and so on so that means our page is ready to get built just like we have a link component inside of nextjs there's also a link component for react router D that we could utilize so right now whenever the app that we trying to build we it does say back to all recipes so we can just copy this and here instead of ring relying on something else we can just use the link component from react router Dom and let's just say two and this just can just go back to home for example so now if we take a look at the app go back here it does take us back to home as intended is what we want but obviously there's more that we display on the page here so as usual I'm going to provide the styling for you so let me just paste The Styling for our app there you go so all we're doing here is we're getting the recipes we printing the names servings prep time minutes and all of that but also adding The Styling with it too back to our app you should see our recipe getting displayed as intended which is exactly what we want but you notice how there is like a really nice gradient in our app that does not exist in the app that we have so let's just add the gradient as well so inside of Tailwind when we go to index. CSS there are three different layers we have the base layer then we also have the components layer and the utilities layer now whenever you want to create a custom class name that could could be utilized in multiple places then you could use the different layers according so if I want to create a custom utility then I could just use the utilities layer itself if I want to create a custom Tailwind component then I could use the layer for components but now since I want to create a utilities this is a way we can extend it so we can say fancy gradient and then we can just paste the specific gradient that I have already created for us this just makes it a radial gradient and these are the three different color stops so it starts from left then turns into Violet and then it's orange towards the end so now if we go back you can see that we have this beautiful G gradient applied similarly because the class name called Francy gradient was already on the card as well we also got this specific gradient so our app is looking really really good now in order for us to implement the same inside next year we need to do something slightly different we need to use something called as generate static params now what these do is that they return a list of params to populate the Dynamic segment and because in nextjs we can cach a lot of the data service side render it and cach it because of that we don't need to necessarily retrieve the data every single time cuz right now what happens in our react app is that every single time the data is retrieved but we don't need to do that in nextjs we can just cache it for that we need to tell nextjs that hey I want you to basically cache all of these params and then keep it in the cache itself keep it in the Cash Store so next time the user access it the same cache itself so what we can do is we can just copy this and head over to nexts page inside of recipes and this time we just going to paste what we copied now here we are just going to give nextjs all the list of pages that we want to Cache so next JS can just cash it and for that reason we can just pretty much copy what we had inside of page so here we have the get recipes function so we can just extract this function out and in the lib utils or I guess let's just create a new lip for oops new lip for recipe and here let's just add it so anyone can access it from here so now in our page let's just import it similarly let's also import it here too so we can just say recipes are going to be get say await get recipes now we can just map through the recipes and this can be recipe will which will be of type recipe type and now here instead of slug it's going to be recipe ID because that's what we defined here the dynamic slug segment is going to be recipe ID so we can just say recipe ID is going to be recip do ID and we always want to make sure that ID is always a string and not a number so we need to make it do to string so now this tells nextjs that please generate and cash all these paths in general Whatever Gets generated in this will be accessed it next time but we still need to access the individual recipe as well over here so so for that we need can just we can just copy what we created in the recipe page here so now we can literally copy all of this and then paste it inside the page we don't need a use effect at all here we can just directly call it because by default this is a server component we don't even need react here you don't need to set the recipe we do need recipe ID now in nextjs we could just access the prams here and then params are going to be we should say recipe ID going to be string now Rams would be just here now we don't need any of this but if there is no recipe then we can get it we need to make this an async function and now we are able to get the recipe itself from our API and now again like we did earlier we can just get recipe. name and add it here now if we go to our nextjs app and click on classic margarita pizza nothing happens because we haven't linked it so now just like we did in our react app let's just go to our page and then link it so now here in card we can just add a link component href is going to be two back ticks and then let's get this and move it here now all we need here is we need to move this key on top and now all we need here is/ recipes recipe. ID there you go so now if we try again when we click on it it takes us and it shows us classic margarita pizza which is exactly what we want similarly it also gives us the vegetarian surfy name then we have chocolate chip cookies and so on and just like we did in our recipe page in react which is what we have here what we can do is pretty much get the recipe styling that we have and then add it to nextjs 2 so we can just get the recipe page and add it here now if everything works as expected the only thing is we need to add import the link component from nextjs here in of react router D and this should be hre all righty so now if we go to a classic margarita pizza we do get the classic margarita pizza we want with all the details similarly if you want vegetarian stir fry then we do get that as well then we have chocolate chip cookies and so on which is which is what we want now lastly let's just also add the gradient that we want as well again similar idea but the gradient would be slightly different this time so if we go to index. CSS that is copy this whole thing go to another file here it's not index. CSS here it's global. CSS and all the way to the bottom oops let's add but let's just tweak tweak it because we don't want the same colors all over again just make this orange we'll make this 400 and that's it let's see now well look at that our colors are looking beautiful and if you click on vegetarian stir fry then it also changes the background of this to which looks really good I'm very happy with how the app has come along so far and along with alongside that we're learning so much comparing reat with react alongside nexs 2 which is pretty awesome so this is how you would essentially Implement caching inside of nexs but how it works inside of react plus V2 it's pretty much typical react app that we are building for react plus weed but the difference is that in inside of nextjs we can basically cash all these so how exactly should you get started with react should you go with the framework or should you go with react plus speed well here's the thing as a beginner reactive it's really important for you to focus on react and weat and here's why even though Frameworks do provide a lot when though the react dogs recommend the use of framework it's really important that you understand what goes behind the scenes as well cuz if you were to get stuck while fetching data you can already see that next yes caches a lot by default so you may not know how to purge the cash or the fact that it's happening to begin with so this is why it's really important that you start with react plus we because you don't get get any specific caching there's not a lot done for you so you get to pick what you want now react as a beginner Dev is already complex enough there are too many topics such as react life cycle hooks how to update State how to avoid rendering how does rendering work and so on so react in itself is definitely a beast that you really need to master before you get involved with other Frameworks like nextjs or remix or anything of that sort that's why I would highly recommend you to go with react plus weed and that's why why this specific crash course was provided so that you get a really good understanding that hey how does life look like with react plus weed and what does that compare to using a framework as well so even though nexts is great as a beginner reactive it might really trip you up because nextjs by default cashes a lot so if data does go stale and if you're not sure how to purge that cash then you're going to get really confused as a beginner de you may not even think it's the framework that's doing it you may think that it's your own mistake which can be which may be true too but again it's really important important that you start with react plus s and then as you get more familiar with react and how it works then start adding a framework and use a framework but if you were to get started with a production application obviously it depends on your needs if you get a chance to start on a brand new project where you are among the few developers that are starting their specific project then I would highly recommend you to take a look at the pros and cons of framework as well as react plus site and just see how the two compare with each other also look into deployment options for how it looks like and you want to maybe evaluate that as a cloud platform as well for a specific company there's obviously a lot that goes to make sure application can scale V and so on so this is why this course was provided to help guide you so that even if you are getting started or not you can sort of compare what the world looks like with reactor suite and alongside a powerful framework like that now let's talk about performance now react plus weed by default doesn't have much when it comes to Performance yes we can optimize the react re rendering and make sure that the client side rendering is really fast and so on but out of the box there's nothing that it provides if you but if you were to use nextjs then just like the link component that we saw earlier which extends the HTML anchor element there's also a image component that nextjs provides you based on the user's viewport nextjs image component is only going to download the image sites necessary for your viewport for example if we go to the next yes app that we have over here and let's just view all the images so now let's just head over to the nexts app and let's go to the browser developer tools and right now we are on mobile this cash and now if I empty cash and hard reload let's see what the image size is of this one it's now 127 kiloby but now let's say I clear this and switch to mobile for example on a smaller device and let's clear this and let's just see empty cash and hard reload and see what happen this same image is now 83 kiloby now you can already see how the image component is performing really well here on a smaller device we don't need a huge image and these kilobytes are going to add up so that is why it's really important that we use the next year image component because it's gives us a lot of performance benefit out of the box so you may want to check out all the different properties that nextjs has and to configure your image so how about we just go ahead and do the same in our image here so now let's just go to our image so like we can go to recipe list and inside that there's the card component we have the image and this is why the prompt was that you need to use the image component here we can just use the image component from next image and that's it that's all we need to do so now as we do that it does say that we need to configure the domain and if you click on this specific URL we can just pretty much copy what we have here and we need to add cdn.com so if you go to next config here let's just add CDN dummy jon.com and we just need it on all ports now let's refresh the page and see what happens let's see so now you can see that the image still appears but now it uses a performing next year's image which means we going to get a lot of performance benefits out of the box which means that we are going to basically download a smaller image based on user viewport and as a result our app is really performant now there's a lot you can do with image component in general but I but I just want wanted to give you an overview of how there are specific components in a framework that make your app really performant out of the box but just by the fact that you're using them let's talk about fonts now so speaking of performance when you were to use fonts inside of react plus speed we just have to mainly just imported in our HTML file and that's pretty much we don't get any font optimization out of the box but let's say we want to optimize our fonts in general the next yes does offer us a a font package that will allow you to optimize any font fonts and remove any external requests in general so what they do is that they Again download our font files and our CSS file just like our additional assets that we have and download them at Bild time and they are selfhosting the rest of the static assets just like that so if you were to use Google fonts which again we can just use Google fonts using the same package it's really easy you need to import a new link from Google fonts or download a package it's all available out of the box and also no requests are sent to Google as well so we could just directly use Google fonts in general so because the font files are downloaded and then cached and then we can access it whenever an application is gets really fast now one of the reasons why your application the fonts can have a significant impact on your application you download a really heavy font it might really slow down your application and really cost your performance so that's why this next font package is really useful in order for us to use fonts and apply fonts in our app for example in the react TW we want the header to be a specific font we also want the rest of our page to be a specific font too what we're going to do is we're just going to head to Google fonts going to select two fonts we're going to select the Lita one font and also we're going to select the monserat font all we need to do is just copy this code head over to our react file and go to index.html and just add it in our head element this would mean that our two fonts are downloaded monserat as well as theader now if we head over to our app and go to our Network Tab and we look for Google font you can see that lilita 1 and monserat have been applied as well but now they are not necessarily applied to the elements themselves and for that what we're going to do is we're going to head to index.css and here we are mainly just going to paste what I have here we're just going to paste all the font families that we have so we're applying H1 to monat monserat and so on we can just tweak this and say H1 is going to get Lita one the font we have downloaded and now you can see Lita 1 is in fact a really cool font and then the rest of the fonts have moner ad has been applied to the rest of the font so for example if I inspect element select the specific title then it's moner ad whereas this one is L one so that's how you can just apply fonts and react plus site you want to do the same thing inside of next and what we can do is again use the next font package the next font is already available as an import so instead of inter font which gets applied by default when you bootstrap your nexs app then here we can just get Lita one and moner rat now what we're going to do is we're just going to say mon set out is going to be default and just keep it as is and add the weight necessary too so we can just get different weights that we want so we want 500 600 700 similarly if we want lilita as well then we can just get Lita font to so we can just just say again going to be Latin and then we're just going to say weight is going to be it only has one weight so it's just going to get 400 so now alongside enter what we could do is we can just apply enter whoops enter as a class name and then we can also apply Lita as a class name too so this is how we can apply multiple fonts as well but again it's not going to work until we apply it here too so again we're just going to do the same copy pasting over here we're just going to say Lita one for H1 minute we do that if you head over to our nextjs app you can see how the different fonts have changed this one should be lilita one and then even these ones have lilita one for some reason so we can fix that but or we can keep it as is it doesn't matter but for example you can see how monserat has been applied to the of the text on the page so this is how you can apply fonts in xjs and how simple it is now you can do whatever you want the difference is that in with react plus wheat we did not get any performance benefits versus with nexs these fonts are going to get bundled and and available at build time and they are they they are basically going to be cashed and not redownloaded every single time from Google which is what we want so this gives you a really huge performance so now let's talk about search engine optimization and SEO now the way SEO works is that let's say on Google I type best mushroom lamp or I basically just type best recipes or best chicken recipes and so on that our site should be available on Google otherwise it's not going to get discovered unless you share the direct URL to your friends let's say we look for best mushroom lamb we have three different results orange lamb CB2 mushroom lamp and a post on top five mushroom lamp now the reason why these three things showed up on Google is because they are following a specific criteria that's necessary due to which Google have ranked them higher now in order for you to learn about SEO in general this is a really good guide on developers.google.com which is amazing that you should check out on how Google search works but give you a really quick summary we need to have a few different criterias to make sure that are we get more points by Google by the different search engine Bots that Google sends out to basically parse our site and check out what's on our site one is the description of the site so for example whenever we go to any site we should have a really good description so let's say we go to my website and if we go to the network tab right now in the head element I have a title of my website which is my website but then I also have a description here which is tutorials for developers and Engineering leaders and this is what I focus on I have an OG image I have a bunch of I have a URL I have a image all tag I have some Twitter information and so on now all of this is really important when it comes to configuring your site for SEO description is important what the site is all about What's the title of the site what's a canonical URL that is what is the true URL of that specific site am I following any semantics so if there are NE if it's necessary then for example this specific value should be H1 because this is very important but this is for example P tag honestly this could be H2 and so on but like for example this one is H2 because this is really important title on my website and this necessarily needs to be H3 because again this is really important on my website now all of this is is really important and this specific hierarchy is what Google looks at when it tries to parse your website and there's a lot more that goes in SEO but these are a few things we need to definitely take a look at when it comes to SEO now an application should allow us to easily update this information unfortunately in react and V world it's not as straightforward if we were to update the description and add any of the metatags on the homepage then we could add that over here for example we could change this title to Tasty react and this is good in order for us to add the description we can add the description here and then all any of the meta taxs in general configure our site further but let's say we I want to do the same dynamically for the recipe page there is no API that's available out of the box to do that and this is where a package like react helmet is very useful where you could basically update it and it you can see already it has so many downloads but you can update the meta tags in your site and dynamically generate them this is great but it's not available out of the box what say inside of nextjs there is a specific API called as the metadata API now anytime you want to expose the title and description you can easily do that with the metadata API in fact if you go into layout it's already exposed here so if I want to change the description all I need to do is update this tasty next and if I want to say whatever description I want curated recipes based on 10 plus different Cuisines such as Indian American Asian and more something like that then in that case now this gives a really good description for my site now let's say if I want to update the URL in metadata API I could easily do that by looking at the documentation for instance but at the same time if I want to update Dynamic metadata then there is a function just like we have the function for Generate static prams there is a function for Generate generate metadata and we can can update open graph images we can update different different information and so on now this is all really straightforward inside of nexts because it gives us really uh additional capabilities for doing that but in order for us to do the same thing in react and V we might have to install a package called react helmet and there are more that I haven't really discovered yet but SEO is something that should be top of mind and next yes does make it a lot easier for you or Frameworks in general will make it a lot easier for you to do that because they do think about all of this in mind now now first load of your website is also really important for SEO so as we have seen earlier whenever we look let's say we disable JavaScript in this specific app we have done this before but if you do that again and disable JavaScript refresh the site we get a blank page versus if you were to do the same thing inside of nextjs Guru sources disable JavaScript and refresh the page we still have a fully functional site so when Bots look for it they're going to get all the information necessary we have a fully functional site we don't necessarily need JavaScript that means there's minimal JavaScript that needs to be downloaded and because we're following semantics our site is going to rank higher so this is why using a framework that focuses on prerendering and gives you that server rendering is really important versus something like react plus weed so using something like wi that will give you that server rendering capability is really really important as well so definitely keep that in mind when you make a choice for what you want to use in your app so now before we wrap up let's just make typescript happy and make sure that you're not making any mistakes with initializing state or anything of that sort so one for recipe context we added payload as any but we do know the payload now we know that payload is going to have selected Cuisine because that's exactly what we are setting over here payload do selected Cuisine so let's just make sure we have that specific payload and then it does say that state has no properties in common with type so as we decide to assign selected quisine directly we also can just tweak this area so we don't need an additional property called State we can just make it by default as state now recipe context does not know what the initial State value should be or the type should be so let's just fix that so we can just say it's going to have two values one is going to be the state is going to be just State and then the other value is going to be a dispatch fun function is going to be react. dispatch and then we just going to take an action type here now the initial State can probably have dispatch function as well which is going to be null whoops not here but here now this can be optional too text will be initialized with State as initial State and then dispatch is just going to be null so now this way we have made typescript happy because we have added the necessary types for everything now if we head to badge filter it should be a mouse event instead of a change event so let's just fix that too so we can just say mouse event HTML div element and then mouse event all righty now in order for us to make sure that everything works as expected let's go ahead and run a production bill now we have an additional command called build that will help us run a build for production so it will bundle all our files together and let us know if there are any errors as well so now here let's just go ahead and run npm run build now the minute we do that it's going to create a production Bill compile all the files and now it has given us an warning saying that image should result in slower LCP higher bandwidth consider using an image component so we forgot to change after copy pasting the recipe itself the image component for example here we don't need to use we don't need to use image we can just use the image component from nextjs and here let's just add recipe. name so now if you run the build again let's see what happens it's generating our static pages and collecting all the page data and now you can essentially see that we have essentially cached recipe 1 2 3 and 27 more paths so whenever we essentially Run npm Run start then our experience is going to be a lot faster for our users as well and this is because we have essentially used generate static perams as we as we created here and this just basically caches all the recipes that we have from the APR so now we can just run npm run start just to make sure everything works as expected so now we can just go to Local Host 3000 and make sure everything works as expected all righty so our application loaded really fast and if you click on any of the information then it works as expected then we have filtering working as well on different Cuisines and you can see how quick the application load is the initial load of our application is really important so this is really good now if you were to do the same thing with react let's say we were to run a npm run build which runs the build for react we have quite a few errors here so let's just fix that too so if you go to react you can see here we have these red swigle lines it says that property name does not exist on type so what we need to do is when we created State we can just add a type here called as recipe type so that we are telling the weed bill that hey we know this type and this does exist with all these different properties now if you go to homepage and if you take a look at e tag again we can use the mouse event itself so here we can just say react dot mouse event whoops and then just paste that similarly let's just copy this and paste the same over here as well all righty so now we have this let's also delete this code because we don't need it importing react but we're not using it anywhere so for that let's just get rid of it in the homepage do we have it no in the Navar we do have it let's get rid of that too we had it in Navar we have it in recipe page now let's run a build again so it's building for production and it has essentially built for production which is pretty amazing just go ahead and start our site and we have a preview command that we can use to start the site so let's do that so now the page load was also quite instant if you click on it then it's going to load the API data and then if I go back to all recipes we can filter everything as well as expected as intended so our application is looking pretty good but keep this in mind API calls are being made to get all the recipes and then individual recipes too so for example if I refresh the page you can see an API call is being made versus inside of nextjs if I go to the network tab you can see that this is the react server component description file that I talked about which is a very different looking file than a Json file it is not Json but that's what it uses to essentially get the description of the page and generate all the pages all righty this is how you set up an application in react Plus weat versus nextjs really hope you enjoyed this specific course thank you so much for checking out this specific crash course as next steps please go ahead and subscribe to my Channel at Kara because I really focus on tutorials and different crash courses and different things that help you level up as a developer in your career as well as if you into engineering leadership then I have some stuff for that too at the same time if you are interested in learning nextjs further then I also am running a nextjs workshop and you should just check out at next year's workshop. to sign up and you may get some launch disc counts as you part as you watch the specific free Cod Camp video so thank you so much for watching bye for now
