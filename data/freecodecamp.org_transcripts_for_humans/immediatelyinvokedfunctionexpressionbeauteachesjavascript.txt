With timestamps:

00:00 - an immediately invoked function
00:02 - expression or ify for short is a
00:05 - JavaScript function that runs as soon as
00:08 - it is defined so let me give an
00:14 - example and if I run that you'll see in
00:17 - the console my favorite number is three
00:20 - note that this function has no name and
00:23 - is not stored in a variable the first
00:25 - enclosing parentheses right here makes
00:28 - the function an expression and the last
00:31 - two parentheses right here tell the
00:34 - JavaScript compiler to invoke or call
00:37 - this Anonymous function immediately
00:39 - hence the name immediately invoked
00:42 - function expression so it's just a
00:44 - function that runs right away we can
00:47 - also create a named immediately invoked
00:49 - function expression and we can pass in
00:52 - arguments so I'm going to copy this here
00:55 - make a new one and we're going to name
00:58 - this
01:00 - so here I use a default parameter that
01:04 - means if you we don't pass in anything
01:06 - it's going to set num to equal three
01:09 - however if we do pass in something it
01:10 - will set num to equal whatever we passed
01:12 - in so here it's just going to do exactly
01:15 - what we did up here and say my favorite
01:17 - number is three so if we run that we
01:19 - should see two times in the console yep
01:21 - it does it twice for up here and up here
01:24 - but now we can also call
01:27 - this and now look it immediately invokes
01:30 - it and we can call it again later and
01:32 - pass in a different argument the most
01:34 - popular use of the immediately invoked
01:36 - function expression is to avoid
01:38 - declaring variables in the global scope
01:41 - and to create closures many JavaScript
01:43 - libraries use this technique so that
01:45 - variable names don't conflict between
01:47 - the library and programs that might use
01:49 - the library here is a simple
01:56 - example so if we run that you can see
01:59 - this function is going to be invoked
02:01 - immediately and it's going to
02:03 - console.log the a but it's going to use
02:05 - the a from within the function three and
02:08 - when we console.log a again down here it
02:11 - can't access anything within this
02:12 - function or within this closure so it's
02:14 - going to use the a that we defined up
02:16 - here so you can see it's going to do
02:17 - three and then two because JavaScript
02:20 - has function level scope all the
02:22 - variables declared in this Anonymous
02:24 - function are local variables and
02:26 - therefore cannot be accessed outside the
02:28 - anonymous function see my closure video
02:31 - for more about that with es6 you can now
02:33 - accomplish some of the same things as an
02:35 - iffy in a different way let en const
02:38 - variables use block scope so as long as
02:41 - they are placed in a block they will not
02:43 - pollute the global name space so let's
02:46 - just change this example to use block
02:50 - scope I'm going to change this to b b
02:55 - and now we're just going to make this
02:56 - into a
02:57 - block so it's no longer an an
02:59 - immediately invoked function expression
03:01 - it's just a block and we're going to
03:03 - change these variables to
03:05 - let and if I run that see the first
03:08 - three and two are where we used a up
03:10 - here but the second three and two here
03:13 - are where we use B before es6 all
03:16 - variables had Global scope but now with
03:19 - constant let you can have different
03:21 - Scopes so you don't always need
03:22 - immediately invoked function Expressions
03:24 - as much as you used to well thanks for
03:26 - watching my name is Bo KS don't forget
03:29 - to subscribe and remember use your code
03:31 - for good

Cleaned transcript:

an immediately invoked function expression or ify for short is a JavaScript function that runs as soon as it is defined so let me give an example and if I run that you'll see in the console my favorite number is three note that this function has no name and is not stored in a variable the first enclosing parentheses right here makes the function an expression and the last two parentheses right here tell the JavaScript compiler to invoke or call this Anonymous function immediately hence the name immediately invoked function expression so it's just a function that runs right away we can also create a named immediately invoked function expression and we can pass in arguments so I'm going to copy this here make a new one and we're going to name this so here I use a default parameter that means if you we don't pass in anything it's going to set num to equal three however if we do pass in something it will set num to equal whatever we passed in so here it's just going to do exactly what we did up here and say my favorite number is three so if we run that we should see two times in the console yep it does it twice for up here and up here but now we can also call this and now look it immediately invokes it and we can call it again later and pass in a different argument the most popular use of the immediately invoked function expression is to avoid declaring variables in the global scope and to create closures many JavaScript libraries use this technique so that variable names don't conflict between the library and programs that might use the library here is a simple example so if we run that you can see this function is going to be invoked immediately and it's going to console.log the a but it's going to use the a from within the function three and when we console.log a again down here it can't access anything within this function or within this closure so it's going to use the a that we defined up here so you can see it's going to do three and then two because JavaScript has function level scope all the variables declared in this Anonymous function are local variables and therefore cannot be accessed outside the anonymous function see my closure video for more about that with es6 you can now accomplish some of the same things as an iffy in a different way let en const variables use block scope so as long as they are placed in a block they will not pollute the global name space so let's just change this example to use block scope I'm going to change this to b b and now we're just going to make this into a block so it's no longer an an immediately invoked function expression it's just a block and we're going to change these variables to let and if I run that see the first three and two are where we used a up here but the second three and two here are where we use B before es6 all variables had Global scope but now with constant let you can have different Scopes so you don't always need immediately invoked function Expressions as much as you used to well thanks for watching my name is Bo KS don't forget to subscribe and remember use your code for good
