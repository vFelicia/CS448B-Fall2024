With timestamps:

00:00 - you're probably wondering why we need
00:01 - another python course on this channel
00:03 - well Anil has an interesting approach to
00:06 - teaching python this beginner's course
00:08 - will help you learn python by thinking
00:10 - and types this course teaches basic
00:12 - programming Concepts instead of just
00:14 - focusing on language syntax it's always
00:17 - helpful to learn from different
00:18 - perspectives and this may be just what
00:20 - you need to Learn Python hi guys my name
00:23 - is Anil kulkani and welcome to this
00:25 - course modern python where no one
00:28 - thinking and types
00:30 - now if you wanted to Learn Python if you
00:33 - are complete beginner or if you have
00:35 - been struggling to Learn Python for a
00:38 - time then this course is for you let me
00:42 - share my journey of learning python it
00:44 - took me a pretty long time to understand
00:47 - python rather many months or rather a
00:50 - couple of years to understand Python and
00:53 - finally when I started to learn more
00:56 - about python I could understand that I I
00:59 - was struggling to Learn Python because I
01:02 - was not able to think in types
01:04 - you know python is a dynamic type
01:06 - language so sometimes you are at lost to
01:10 - understand what goes well and where we
01:13 - have to use a particular variable or a
01:15 - data type or a data structure so this
01:17 - course is obviously designed for the
01:19 - people who are totally new to python or
01:23 - if you have or if you are struggling to
01:25 - Learn Python for a while now
01:27 - throughout this course I'll be taking
01:29 - you through a smaller Journey we will
01:32 - start by thinking at types and we will
01:35 - end in thinking in layers so thinking is
01:38 - in layers is like an architectural
01:40 - pattern I will I'll help you to
01:43 - understand what goes behind creating a
01:46 - production level application before we
01:49 - can go ahead and write python we need to
01:52 - do a couple of things the first thing is
01:54 - obviously we need to install Python and
01:56 - we also need to set up our development
01:58 - environment
01:59 - but before that I would like you to meet
02:01 - my friend Lewis now Lewis is going to
02:05 - help us throughout this course for
02:06 - learning python
02:08 - before you can do anything else I want
02:10 - you to go ahead and download all of the
02:12 - source code for this entire tutorial
02:16 - what I want you to do is just go to this
02:18 - link github.com octilium slash modern
02:22 - python101 and this is where you can find
02:24 - the entire source code for this entire
02:27 - tutorial
02:28 - you can just click on code and just
02:30 - click on download zip to download all of
02:32 - the files in a zip format or if you are
02:35 - using GitHub you can simply use this
02:37 - link to to clone the repo after you have
02:40 - downloaded all of the files this is how
02:43 - it's going to look so let me open up my
02:45 - readme and just let me open up in my
02:48 - preview mode
02:49 - okay so this is how all of the files and
02:52 - the folders would look like now please
02:54 - keep in mind that on my machine I could
02:56 - have a couple of more additional folders
02:59 - just for the sake of helping me
03:00 - throughout the tutorial
03:02 - but overall this is how it's going to
03:04 - look in your machine as well at any
03:06 - point in the future if you want to
03:08 - compare your code with mine you can
03:10 - simply click on this folders for example
03:12 - if we just click on this folder type
03:14 - system you can see there are a couple of
03:17 - files which I have already written
03:19 - for example just click on this file
03:21 - variables and you can see all of the
03:24 - code is right over here if you want to
03:25 - see the sequence in which we are going
03:27 - to learn all of these files then you can
03:29 - simply click on readme and here you can
03:32 - find the sequence
03:34 - for example in this one the first file
03:36 - would be your variables the second one
03:39 - would be variable rules which is right
03:41 - over here
03:43 - and so on
03:45 - well that's it for this video in the
03:47 - next video we are going to download and
03:49 - install python on your machine
03:51 - before installing python I thought it
03:54 - would be a very nice idea to give you a
03:56 - small tour of python
03:57 - for this I want you to open up your
03:59 - favorite web browser and I want you to
04:02 - search for
04:03 - python online compiler
04:07 - and I want you to click on this link
04:09 - this is for repair id.com
04:13 - and as you can see we have a working
04:15 - python environment ready for us
04:19 - so right on this line I want to print
04:22 - out modern python 101 so just replace
04:24 - hello world with
04:26 - modern
04:28 - python 101
04:31 - and just click on the Run
04:34 - so as you can see we have the output of
04:36 - modern python 101
04:38 - let's try one more simple example and
04:41 - this time I want to print out my name
04:43 - and my name is
04:45 - octallium on this line instead of
04:48 - printing modern python I want to print
04:50 - out my name
04:51 - that's it just hit the Run button one
04:54 - more time and you can see we have the
04:57 - output of octallium as you can see right
04:59 - in Python is as simple as writing your
05:02 - plain English and from the next video we
05:05 - will see how to install Python and how
05:07 - to set up our development environment
05:08 - you can just go to the website
05:12 - python.org
05:13 - from here let me just zoom in first okay
05:18 - from here just go to downloads and as
05:22 - you can see since I'm using Mac OS so
05:24 - that's why it's showing as Mac if you're
05:27 - working on Windows most probably it will
05:29 - show you on Windows and at the time of
05:31 - recording the latest version is 3.10.5
05:35 - so I just want you to click on this and
05:38 - it will start the download you just have
05:40 - to install python just as you would
05:42 - install any other program just click on
05:44 - this it will open up a installer dialog
05:48 - so just click on continue continue
05:51 - okay agreement I agree
05:55 - and install now since I already have
05:58 - python installed I won't be installing
06:00 - but in your case if you don't have
06:02 - python installed just go ahead and click
06:04 - install
06:06 - after the installation is done I want
06:08 - you to open up your terminal if you are
06:10 - working on Windows just make sure you
06:11 - open up your Powershell
06:13 - and let me just try to zoom inside this
06:17 - as well
06:19 - so once you have your terminal open I
06:22 - want you to type python
06:25 - hyphen and capital V
06:27 - so as you can see it's showing the
06:30 - python installed version in my case it
06:33 - is 3.10.5 just make sure you have a
06:36 - version which is more than 3.10 3.9 will
06:40 - not work because I will be showing you a
06:42 - couple of new features which I have been
06:44 - introduced in the version 3.10 and if
06:47 - you are watching this video in the
06:48 - future you don't have to worry because
06:50 - all of the functionality that I'm going
06:52 - to show in this tutorial all of those
06:54 - things are going to work in the future
06:56 - as well the next thing that I want you
06:58 - to do is install Visual Studio code
07:02 - so I want you to go to this website
07:05 - code dot Visual studio.com and I want
07:09 - you to download video Studio code and
07:12 - install it
07:13 - so just click on this since I'm using a
07:15 - Mac it's showing Mac if you are using
07:18 - Windows make sure you click on the right
07:20 - button
07:22 - so just click on this
07:24 - it will again download the installer and
07:28 - you just have to install Visual Studio
07:30 - code as you would install any other
07:32 - program after installing Visual Studio
07:35 - code I want you to open it up
07:38 - so this is my visual studio code on the
07:42 - left you can see there is a small bar
07:44 - and I want you to click on extensions
07:48 - let me take it up right over here and I
07:52 - want you to search for python
07:56 - the first thing that pops out right over
07:58 - here this is the python extension by
08:00 - Microsoft I want you to click on install
08:03 - now I do have a couple of more extra
08:06 - dependencies these are optional but I
08:09 - would highly recommend you to install
08:11 - all of those so just open up a terminal
08:16 - if you're working on windows open up
08:18 - your Powershell
08:19 - and there is a command which is called
08:22 - this pip now pip actually ships with
08:24 - python I want you to type pip
08:28 - install
08:30 - IPython
08:32 - my pi and black and just hit enter so
08:37 - this are a couple of extra dependencies
08:39 - that I would like you to install now
08:41 - since I have already installed it's
08:43 - showing me as
08:44 - already satisfied but in your case it
08:47 - will go ahead and install all of the
08:48 - dependencies
08:49 - and that's it now we can start writing
08:52 - python code on our machine if we have
08:55 - some doubts then you can open up this
08:57 - readme file so this is the code that we
09:00 - downloaded from GitHub
09:02 - so inside my folder number one
09:04 - introduction just click on readme and
09:07 - you can see I have provided the links
09:09 - for everything
09:10 - there are a couple of more optional
09:12 - dependencies for example this one code
09:15 - Runner
09:16 - this one we would see in some of the
09:19 - future videos and if you want to have
09:22 - the exact same theme like mine so you
09:24 - can use this theme I'm using a theme
09:26 - which is called as Pitch Black theme
09:29 - and now if you are working on a Mac and
09:31 - if you have issues while typing this
09:34 - command so suppose you are you are
09:36 - typing python slash V and if you are not
09:40 - getting this output then just make sure
09:42 - to watch the next video where we would
09:44 - see how to rectify it sometimes on a Mac
09:47 - you may not get the desired output
09:50 - suppose you are typing python slash NV
09:53 - if you are not getting this output then
09:56 - maybe you can try typing Python 3
09:59 - hyphen and V
10:01 - now this is because Mac already comes
10:04 - with a pre-installed python but most of
10:07 - the times it is not going to be the
10:10 - latest version you can use this syntax
10:12 - python 3-3 all the time and if you want
10:16 - to use pip then also you need to type
10:19 - pip 3 and then you can say pip3 I want
10:22 - to install my
10:24 - IPython mypai and black this is also
10:28 - going to work
10:29 - but typing Python 3 and pip3 all the
10:32 - while becomes slightly boring
10:35 - so what I'm going to do is I am going to
10:38 - set up an alias
10:40 - for setting up an alias first thing that
10:42 - I want you to do is I want you to go to
10:44 - your home directory you can go to your
10:47 - home directory by typing CD and that's
10:50 - it let me clear up my terminal by typing
10:53 - control and L
10:55 - now if you type LS
10:58 - Dash A L that means I want to list all
11:02 - of my files and folders inside my
11:04 - current directory and I also want to see
11:06 - some of my hidden files as well
11:10 - so as you can see it's a pretty long
11:12 - list but the file that I am interested
11:14 - is this one
11:16 - it's called as dot
11:18 - zshrc that's the file where we will set
11:22 - up an alias I want you to go ahead and
11:25 - open up that file inside your code
11:27 - editor you can open up the same file
11:30 - inside virtual Studio code by typing
11:32 - code
11:33 - followed by the name of the file don't
11:36 - forget to put the dot before and now
11:40 - just press enter
11:43 - if you are not able to open up this file
11:45 - from your terminal then inside your
11:48 - Visual Studio code I want you to
11:50 - type shift command and P and it will
11:54 - open up a new window and I simply want
11:56 - you to
11:57 - type code and you can see the pop-up
12:01 - shell command install code command in
12:04 - the path I want to click that and after
12:07 - clicking that you can simply
12:09 - close and open up your terminal once
12:12 - again
12:13 - and
12:15 - let me just Zoom inside
12:19 - and now we can see I want to open up my
12:22 - DOT zshrc file inside my code editor
12:26 - just hit enter
12:28 - for now just ignore all of the stuff
12:30 - which I have inside my zshrc that's
12:33 - because I'm using a lot of fancy setup
12:36 - the thing that I want you to add inside
12:38 - your zshrc are just these two lines
12:43 - so what we are doing is we are just
12:46 - setting up an alias that means whenever
12:49 - we are typing python inside our terminal
12:52 - at that time we actually need to type
12:55 - Python 3 and the same thing goes with
12:58 - Pip whenever we are typing pip I want my
13:01 - system to invoke pip 3 instead so this
13:04 - is what our Alias is going to do
13:07 - just save your zsh RC filing again go
13:11 - back to a terminal I again want you to
13:13 - close and open up your terminal one more
13:15 - time again let me Zoom inside it and now
13:18 - this time if you're typing python
13:21 - hyphen and V it should give you the
13:24 - right output now that we have python
13:26 - installed on our system it's time to
13:28 - write our very first hello world program
13:31 - but before we can write our hello world
13:33 - program I would like you to create our
13:35 - very own directory structure so that we
13:38 - can organize all of the code in a much
13:40 - better way
13:41 - so for that I would like you to open up
13:43 - your your finder or if you're on a
13:46 - Windows just open up any window and
13:49 - navigate to to the place where you want
13:51 - to create the folder so I am just going
13:54 - inside my home directory and here I'm
13:57 - going to create a folder by the name of
13:59 - modern
14:01 - python
14:03 - 101
14:05 - you can create this folder wherever you
14:07 - want after this I am just going to open
14:09 - up my visual studio code and I'm going
14:13 - to drag this folder inside my visual
14:16 - studio code
14:17 - okay so here we are here I am going to
14:21 - create one more folder and I'm going to
14:23 - name it as 0 1
14:26 - introduction
14:28 - let me spell it right
14:31 - and inside this folder let's create our
14:34 - very first Python program so let's
14:36 - create a file inside of this and I want
14:39 - you to name the file as
14:41 - hello world dot py always make sure that
14:46 - we have the extension as dot p y so dot
14:48 - py stands for a python file and right
14:51 - now what we are going to do is we are
14:53 - simply going to print hello world to our
14:55 - terminal
14:57 - a couple of lectures ago we have seen
14:58 - how to do it online by using a python
15:01 - online compiler but in this video let's
15:04 - try to do it on our local machine
15:07 - let me just collapse my sidebar
15:11 - the first thing that I want you to write
15:13 - here is an inbuilt function by the name
15:15 - of print so basically what we are trying
15:17 - to do is
15:18 - we want to tell python hey python I want
15:21 - you to print
15:25 - hello world
15:27 - and that's it now I want you to open up
15:30 - your terminal and inside this terminal
15:33 - let us see how we can execute this file
15:37 - I'm inside my directory of modern python
15:40 - 101
15:41 - from here I want to go to my newly
15:43 - created folder 0 1 introduction and once
15:48 - inside this folder I can simply run my
15:50 - file by typing python followed by the
15:53 - name of the file and just press enter
15:56 - and here you can see we have the right
15:59 - output of hello world
16:01 - if you want to change this from Hello
16:03 - World to hello octallium
16:06 - let's do it let us save the file again
16:10 - go back to the terminal
16:11 - let me clear up my terminal let us try
16:15 - running the file by typing python
16:17 - followed by the file name one more time
16:20 - and we have the desired output of hello
16:22 - octallium
16:24 - now typing Python and hello world.py all
16:27 - the time becomes a little boring in
16:29 - order to automate this task we are going
16:31 - to install one more extension and this
16:34 - time the name of the extension is called
16:36 - as code Runner
16:38 - so I want you to go to your extensions
16:40 - Tab and I wanted to search for
16:43 - code Runner
16:44 - this is the plugin make sure you install
16:47 - this plugin
16:49 - once we have this plugin in place we can
16:52 - simply run the file I'll just show you
16:54 - how to do it
16:56 - let me close my terminal let me close
16:59 - all of this
17:00 - so once we have the plugin installed you
17:02 - can simply click on this play icon right
17:04 - over here and that's going to execute
17:06 - your file
17:07 - so as you can see the code on extension
17:09 - actually exuded my file and I have the
17:12 - output of hello world on the screen so
17:15 - this video was just to give you a small
17:17 - feel of writing python on our local
17:19 - machine from the next videos python is
17:21 - going to get much more interesting and
17:23 - we will start to learn all of the basic
17:25 - fundamentals of python
17:27 - now let's actually start learning Python
17:30 - and the first concept that we are going
17:32 - to learn in Python is all about
17:34 - Understanding Variables
17:37 - but before we can understand variables
17:39 - we need to go on a picnic with Lewis yes
17:42 - let's go on a picnic and then let's see
17:44 - what variables is all about
17:47 - so Lewis is planning for a picnic and he
17:50 - is going to pack a slice of pizza in his
17:53 - Tupperware
17:54 - you don't want to go hungry on a picnic
17:56 - do you Lewis also wants to pack some of
17:58 - his clothes inside a bag and also a
18:01 - bottle of water now let's try to
18:03 - visualize this concept A Little More
18:05 - technically
18:07 - so you can imagine your Tupperware bag
18:10 - and bottles to be your containers
18:13 - and what this containers are going to
18:15 - hold
18:16 - is this slice of pizza clothes and water
18:19 - so you can imagine all of these things
18:22 - to be values so the containers are going
18:25 - to hold all of the values now let's try
18:28 - to see all of these things in the world
18:29 - of python
18:31 - so here we have three containers
18:34 - Tupperware bag and bottle and we have
18:38 - three values slice of pizza cloves and
18:41 - water
18:42 - so essentially what's happening is your
18:45 - containers are just like your variables
18:47 - because your variables are going to hold
18:49 - some data you can translate this concept
18:52 - in Python by typing like this on the
18:55 - left you can see Tupperware is a
18:58 - variable and the variable of Tupperware
19:01 - is holding a value of slice of pizzas
19:05 - this equal to is also called as the
19:07 - assignment operator that means we are
19:10 - assigning the value on the right to the
19:12 - variable on the left and the same thing
19:14 - goes with bag and bottle as well now
19:17 - it's time for us to create some more
19:19 - variables
19:20 - so I'm inside my folder number two type
19:24 - system so this is the code that we
19:26 - downloaded from GitHub
19:28 - and this is the folder that we created
19:30 - remember we've created a folder called
19:33 - as modern python 101 so this is where I
19:36 - am
19:37 - here I am going to create one more
19:39 - folder
19:40 - and I'm going to name it as 0 to type
19:43 - system
19:45 - and inside of this I want you to create
19:47 - one more file by the name of
19:49 - variables dot pi
19:52 - and this is where we are going to create
19:54 - some of our variables
19:56 - here is the scenario Lewis wants to go
19:59 - for a party and he has three items with
20:02 - him he has balloons he has some crackers
20:05 - and he has some hats but he has only a
20:09 - single box
20:10 - so let's see what he is going to do
20:13 - let's create a variable called as box
20:16 - here we are going to create our variable
20:18 - called as box and let us assign the
20:22 - value of
20:23 - balloons to the variable of box please
20:26 - remember to put this inverted commas
20:28 - because this is the value that has been
20:31 - assigned to our variable of box on the
20:35 - next line we simply want to print out
20:37 - our variable so as you already know we
20:40 - can simply say hey python I want you to
20:42 - print out my variable and the name of my
20:44 - variable is box
20:46 - that's it just save a file and let's try
20:50 - to run the file
20:52 - now there are two ways of running the
20:54 - file if we have code Runner installed
20:56 - you can simply click on this and this is
20:58 - going to run your file and here you can
21:00 - see we have the output of balloons or
21:02 - you can also run the file from a
21:04 - terminal in order to run the file from
21:06 - the terminal first we need to go inside
21:08 - in the right folder
21:10 - as you can see right now I am inside the
21:13 - folder modern python 101 and I need to
21:15 - navigate inside my folder which is 0 2
21:19 - type system once inside this folder you
21:22 - can run the file by typing python
21:24 - followed by the name of the file in my
21:27 - case the name of the file is simply
21:29 - variables dot pi and hit enter
21:32 - so as you can see we have the output of
21:35 - balloons
21:36 - let me put up a small Command right here
21:38 - all of these lines that you can see over
21:40 - here which starts with a hash sign this
21:44 - actually means a comment and these lines
21:46 - are actually going to be ignored by
21:48 - python while executing your file now the
21:51 - suppose Lewis wants to take crackers
21:53 - instead of balloons so let's see how we
21:56 - can reassign the value to our variable
21:58 - let me put up a command
22:00 - and here we can simply reassign by
22:03 - saying that
22:04 - for the variable of box I want to
22:07 - reassign the value to a new one and the
22:09 - new value is going to be called as
22:11 - crackers
22:14 - let me get the spelling right
22:16 - and we can again try to print it out so
22:19 - let's try to print out
22:21 - the box one more time
22:24 - let me run the file
22:27 - and here we have the output so you can
22:30 - see the first output is balloon and this
22:33 - output is coming from from right over
22:36 - here from line number seven
22:38 - and on the next line I have the output
22:40 - of crackers this output is coming from
22:42 - this line line number 11. at line number
22:46 - 11 the variable of box no longer holds
22:50 - the value of balloons because we have
22:52 - reassigned the value on our line number
22:54 - 10. the new value that the variable of
22:57 - box holds right now is just crackers
23:01 - now for the last time if Lewis wants to
23:03 - change his mind and this time he wants
23:06 - to take hats so let's see how we can
23:08 - reassign the value for the last time let
23:10 - me put up some comments before we can do
23:12 - that so for the last time we are going
23:14 - to reassign the value of box and this
23:17 - time the new value is going to be hats
23:20 - and as usual we simply want to print out
23:23 - the value inside our variable so we can
23:25 - say hey python I want you to print my
23:28 - variable of box that's it just save your
23:30 - file and try to run it for the last time
23:34 - so as you can see we have the output of
23:37 - hats and sorry we can see the output of
23:40 - hats
23:41 - now this output is coming from our line
23:44 - number 15. the current value that our
23:46 - variable of box is holding is hats the
23:50 - previous values of crackers and balloons
23:52 - all of these values are now replaced and
23:55 - the only existing value Inside the Box
23:57 - variable is hats
24:00 - till now we have seen how to work and
24:02 - create variables now let's have a look
24:05 - at what's happening behind the scenes
24:10 - so this were the variables that we
24:12 - created last time we created just one
24:15 - variable called as box but we assign the
24:18 - value of balloons crackers and hats to
24:21 - the same variable now let's see what's
24:24 - happening behind the scene and how
24:25 - python is treating all of these
24:27 - variables
24:29 - just imagine this is the memory of your
24:32 - PC and let's see now how python is going
24:36 - to handle your variables
24:38 - in Practical terms how python handles
24:40 - the memory would be very different in a
24:43 - practical scenario
24:44 - but right now just have a look at this I
24:47 - have simplified things so that it's much
24:49 - more easy for us to understand
24:51 - so just imagine all of the green area is
24:54 - the memory of your PC now let's see
24:57 - what's happening python would read all
24:59 - of your source code
25:01 - and as soon as it comes across this line
25:04 - box is equal to balloons what python is
25:07 - going to do is python is going to create
25:09 - a variable called as box inside the
25:12 - memory and python would look at the
25:15 - right hand side and it's going to find
25:16 - balloons so it's going to assign the
25:19 - value of balloons to the box and all of
25:22 - these things are happening inside the
25:24 - memory
25:25 - so on the next line when you are trying
25:28 - to print out box you get the output as
25:30 - balloons
25:31 - but what happens when python goes to the
25:34 - next line that is this one where you are
25:37 - reassigning the value of box to crackers
25:40 - at that time the value of balloons is
25:42 - actually taken out and a new value of
25:45 - crackers is been assigned to the Box
25:48 - so after your line number six this is
25:50 - how your box is actually going to look
25:52 - like so box is going to hold just the
25:55 - value of crackers that's why online
25:57 - number seven when we are trying to print
25:59 - out the value of box we get the value of
26:01 - crackers
26:02 - now the same thing is going to continue
26:04 - on the next line as well when python
26:06 - comes across this line box is equal to
26:09 - hats it's going to remove the value of
26:12 - crackers inside the memory and it's
26:13 - going to assign a new value of hats and
26:16 - box would be equal to hats inside the
26:19 - memory and that's the output that we are
26:21 - getting from line number 10. till now we
26:24 - have a much better understanding of
26:26 - variables and this time we are going to
26:28 - see what you don't have to do while
26:30 - creating a variable
26:31 - you can't just arbitrarily name your
26:34 - variable there are certain rules for
26:36 - declaring your variables and that is
26:38 - what I am going to talk in this video
26:41 - this is the code from GitHub and I
26:44 - wanted to click on this file variable
26:45 - tools I don't want you to waste your
26:48 - time just watching my type so I'm just
26:50 - going to copy this file from my GitHub
26:52 - folder
26:53 - to my modern python 101 folder and let
26:57 - me just paste it right inside my zero
27:00 - two type system
27:02 - so here is the file and now let me try
27:05 - to explain what's happening
27:07 - the first thing that we are going to
27:09 - talk is something about declaration
27:11 - Styles there are different styles in
27:14 - which you can declare a variable
27:16 - the first style that you can see over
27:18 - here this is called as camel case the
27:22 - first alphabet would be in small case
27:24 - and the next words would start with the
27:26 - alphabet so this is called as camel case
27:29 - the next is your Pascal case in Pascal
27:32 - case as you can see all of the words
27:34 - they would start with the capital
27:35 - alphabet
27:37 - the next one as you can see right over
27:39 - here on line number 11 this is called as
27:41 - snake case
27:43 - online number 12 this is also a variable
27:46 - but this is used to declare a constant
27:48 - I'll be talking about constants in the
27:50 - future
27:51 - this is also a valid variable and
27:54 - normally you would use the syntax with
27:56 - an underscore whenever you want to
27:58 - declare a private variable I will be
28:01 - explaining what is a private variable as
28:03 - well in the future this is also a valid
28:06 - variable where you can have a number at
28:07 - the back
28:08 - and you can mix your numbers with your
28:12 - snake case or your
28:14 - camel case or Pascal case or any other
28:16 - case that you want so till now what I've
28:19 - done is I have declared a couple of
28:20 - variables and let's try to print them
28:23 - out and see how they look on our
28:25 - terminal let me just run the file
28:29 - and oh let me first try and clear my
28:33 - terminal
28:34 - now let me go back to the file and let
28:35 - me run it once again so here we can see
28:39 - we can use different variable styles to
28:41 - get our output now let's have a look at
28:44 - the different rules for not declaring a
28:46 - variable
28:47 - as you can see online number 29 you
28:50 - cannot declare a variable which starts
28:53 - with the number if I just uncomment this
28:56 - file
28:56 - it's going to show me an error
28:59 - similarly on line number 30 let me just
29:01 - comment this back
29:03 - so similarly on 30 if we have a hyphen
29:05 - it's not going to work if we have some
29:08 - special characters like a comma it's not
29:10 - going to work if you use a dollar sign
29:13 - at the front it's also not going to work
29:15 - and if your variables has a space in
29:18 - between so that 2 is not going to work
29:20 - so whenever you are creating or
29:22 - declaring variables always keep these
29:24 - things in mind when it comes to your
29:27 - style you just have to be consistent in
29:29 - whatever style that you are choosing
29:31 - as a normal convention whenever we want
29:34 - to declare any variables or the name of
29:37 - the functions we would use snake case
29:41 - but that's just the convention it's not
29:44 - required
29:45 - and whenever you want to declare the
29:47 - name of a class at that time we would be
29:50 - using the Pascal case
29:52 - and whenever we want to declare a
29:54 - constant at that time we would use
29:56 - everything in uppercase now we have been
29:59 - making very good progress with our
30:00 - variables
30:02 - we have seen how to assign values to our
30:05 - variables but we have seen how to assign
30:07 - only a single type of value to our
30:10 - variables
30:11 - you can see over here balloons crackers
30:14 - and hats all of this data types are
30:17 - called as strings
30:20 - so whenever you are working with your
30:22 - Python Programming you always have to
30:24 - work with some sort of a data and this
30:26 - data can be classified into different
30:28 - categories
30:29 - the first category that we are going to
30:32 - see is something called as a primitive
30:34 - data type
30:35 - so what do I mean by a primitive data
30:38 - type it simply means that these data
30:40 - types are already present inside python
30:44 - the first data type we have already
30:46 - worked with it's called as a string and
30:48 - you can see it's always inside a code
30:52 - for declaring a string you can use
30:54 - double quotes or you can use a single
30:56 - code both of them are valid syntax the
30:59 - next one is called as an integer so you
31:02 - can see we have whole numbers so 45 is a
31:06 - kind of integer the next one would be a
31:08 - float whenever you have some decimal
31:10 - places it's called as a float inside
31:13 - python
31:14 - and the last one is called as a Boolean
31:16 - Boolean can have only two types either
31:19 - it can be true or it can be a false
31:22 - now let's go back to our code editor and
31:24 - create some of this basic primitive data
31:27 - types
31:28 - so let's create a new file inside my
31:30 - folder 0 to type system I am going to
31:33 - create a new file and I'm going to name
31:35 - it as primitive data types Dot
31:39 - p y
31:41 - let me add some comments as well
31:43 - now let's start creating our variables
31:47 - first let us create a variable for
31:49 - holding our string and I'm going to call
31:52 - it as my string that's it so my string
31:55 - is my variable and it's going to hold
31:58 - the value of Lewis
32:01 - let me spell it right
32:04 - the next variable would be my integer my
32:07 - end for short it's going to be 45
32:10 - next one would be my
32:13 - float it would be 3.14 the next one
32:18 - would be my bull it stands for my
32:20 - Boolean data and this time I am going to
32:23 - assign it the value of true
32:25 - make sure you always use the T with the
32:28 - capital T
32:29 - and that's it we have declared our
32:31 - variables and we have assigned the
32:33 - variables with the primitive data types
32:36 - now let's try to print one by one so I
32:40 - want to say first I want to print my my
32:44 - string let me just copy and paste it now
32:47 - the next thing that I want to print
32:49 - would be my integer
32:51 - next let me print out my float
32:55 - and the last I want to print out my
32:58 - Boolean value
33:00 - just save the file and let me run the
33:02 - file inside my terminal and here we have
33:05 - the output Lewis 45
33:07 - 3.14 and true the last thing that I want
33:11 - to discuss in this video is about your
33:13 - styling
33:15 - for example you can see right here
33:17 - single quotes is also a valid string and
33:21 - if you use double quotes
33:23 - it's also a valid string so which style
33:27 - should you use basically you can use any
33:29 - style but you have to make sure that you
33:32 - are consistent throughout your code base
33:33 - in order to avoid such situations when
33:37 - you're working in a large team the
33:39 - python Community has come up with some
33:41 - of the style formatters and one of the
33:44 - style format is called as black
33:46 - so if you remember at the beginning we
33:48 - have installed a couple of optional
33:50 - dependencies and one of the dependency
33:52 - was called as black if you have not
33:54 - installed then you can simply open up a
33:56 - terminal
33:58 - let me clear all of this
34:00 - and you can install the dependency by
34:03 - simply typing pip
34:05 - install and black
34:07 - and this will install the optional
34:09 - dependency
34:10 - black is a code formatter and we are
34:14 - going to use black to format our code so
34:17 - that it is consistent throughout
34:20 - the first thing that I want you to do is
34:22 - I want you to open up the settings for
34:24 - visual studio code on a Mac you can do
34:26 - that by typing command and a comma I
34:29 - think on our Windows it should be
34:30 - controlled and a comma
34:33 - so this is my settings file and I want
34:35 - you to type
34:36 - save
34:39 - and the first option that I can see over
34:40 - here is called as format on Save I want
34:43 - you to select this now again go back
34:47 - search for black
34:49 - so here you can see the first option
34:52 - python formatting black path make sure
34:55 - you have black right over here
34:57 - and that's it
34:59 - just close your settings file
35:01 - and
35:02 - let me save this file it's saying that
35:05 - format autopape is not installed install
35:08 - no I don't want to use that one I want
35:10 - to use black so I'm just going to click
35:12 - on this one use black
35:15 - and that's it now if I come back to this
35:18 - and if I put a single quotes
35:22 - now just watch what happens when I save
35:24 - my file
35:25 - it automatically formats from a single
35:28 - code to a double quote black is a really
35:31 - useful utility and we would be using
35:33 - black so that all of our styling is
35:36 - similar
35:36 - since we know a little bit more about
35:38 - strings let's try and see how we can
35:41 - output the string in our desired format
35:44 - this is also called as string formatting
35:47 - let me create a new file inside my
35:50 - folder
35:51 - and I'm going to name the file as string
35:53 - formatting dot pi
35:56 - let me put up a comment at the top what
35:58 - I want to show in this video is how we
36:01 - can have a desired string output
36:04 - don't worry if the concept sounds a
36:06 - little strange it will get cleared in
36:08 - just a couple of seconds suppose I want
36:11 - to print a statement saying that hello
36:13 - and followed by a variable
36:16 - and that variable can hold a name for
36:18 - example you can say hello Lewis or you
36:21 - can say hello Chico or some of the name
36:24 - so let me first create a variable called
36:26 - as name and let me assign it a value of
36:30 - Lewis
36:32 - now let's see how to format this string
36:35 - and get an output as hello Lewis
36:39 - let me
36:40 - collapse my sidebar and here I can say
36:44 - print
36:45 - and I can put my codes but before my
36:48 - quotes I need to add one more alphabet
36:51 - called as F that means I want to have a
36:54 - formatted string and here I can say
36:57 - hello and I want to print the name over
37:00 - here
37:02 - so I am going to use curly brackets and
37:05 - inside the curly brackets I can place my
37:07 - variable so I can say name let's save
37:10 - the file and try to run it
37:12 - and here we have we have the output as
37:14 - hello Lewis
37:16 - there is one more format of doing this
37:19 - we can simply say print and then we can
37:22 - say
37:23 - hello
37:25 - you can put a comma followed by the
37:27 - variable that you want to print so I can
37:29 - say name
37:30 - just save a file and let me run it one
37:33 - more time
37:34 - so as you can see we have the same
37:37 - output
37:38 - but normally you will see me using a
37:40 - formatted string so let me just take out
37:42 - the second example I'm not going to use
37:44 - this kind of syntax
37:46 - now let's see how we can output a string
37:49 - saying that Lewis is Dash and dash years
37:54 - old and dash and dash has to be filled
37:56 - by an variable
37:58 - so I can create a variable called as age
38:00 - and I can say age is 13 and here I want
38:04 - to print Lewis is 13 years old so I can
38:07 - use a print statement again I am going
38:10 - to use a formatted string so F and
38:12 - quotes then inside my curly brackets the
38:15 - first variable that I want to print is
38:18 - the name so name goes over here
38:21 - so Lewis is then I want to place the age
38:26 - right over here is 13
38:28 - years old
38:31 - that's it just save your file and try to
38:34 - run it one more time and we have the
38:36 - output Lewis is 13 years old
38:40 - let's do a couple of more practice over
38:42 - here
38:43 - suppose Lewis has a dog and then let me
38:48 - spell it right
38:49 - and the name of the dog is Chico
38:53 - and this time we want to print out Lewis
38:55 - has a dog named Chico so you can say
38:58 - print again your formatted string your
39:02 - curly brackets your placeholder for your
39:05 - name so Lewis
39:07 - has
39:08 - a dog named
39:12 - and the dog variable goes right over
39:14 - here
39:15 - and that's it
39:17 - let us try to run the file
39:19 - and we have the output Lewis has a dog
39:22 - named Chico
39:24 - let's do it for the last time suppose
39:26 - Lewis also has a cat
39:29 - and the name of the cat is Coco
39:31 - so let me copy and paste this line
39:34 - and I can say Lewis
39:36 - has a cat name and the variable of cat
39:39 - would go right over here
39:42 - let me save the file and let me run it
39:45 - for the last time
39:46 - and here we have the output Lewis has a
39:49 - cat named Coco
39:51 - we are making really good progress but
39:54 - this time I want to make a program that
39:57 - would have a bug inside it
39:59 - so let me create a file inside my folder
40:04 - and I'm going to name the file as my
40:07 - first bug Dot py
40:09 - bug actually means that we have some
40:12 - sort of an undesired behavior in our
40:14 - program
40:15 - so let me put up some comments okay now
40:18 - let's get started with this one
40:21 - let's create a variable called as box
40:24 - and let's assign the value of balloons
40:26 - to it
40:29 - and let me print out a formatted
40:33 - statement saying that
40:35 - box contains
40:38 - and the variable of box goes right here
40:43 - let me just run this file and we have
40:45 - the output that the box contains
40:47 - balloons
40:49 - now just watch closely what happens I
40:52 - can also say box
40:54 - is equal to 10.
40:57 - now this really doesn't make any sense
40:59 - why would I want to store 10 inside
41:00 - balloons balloons is a string 10 is an
41:04 - integer
41:06 - but if you try to print this we are
41:08 - going to get an output
41:10 - let me copy and paste this line from
41:13 - here
41:14 - just blow this let me save it and let me
41:17 - try to run the program
41:18 - and we have the output box contains 10.
41:23 - and this is because python isn't
41:26 - dynamically typed language and this was
41:29 - the point where I really struggled when
41:31 - I was learning python
41:33 - but you don't have to worry about this
41:35 - you can easily solve this problem by
41:37 - thinking in types in this video I am
41:40 - going to introduce to you a concept
41:42 - which is called as type hinting let me
41:45 - put up a command so what type ending
41:47 - really means is we always want to
41:48 - associate a type with our variables
41:52 - and this will really help us to create
41:54 - robust programs and to take care of all
41:57 - of the bugs before we can actually run
42:00 - the program now let's start thinking in
42:02 - types let's create a variable called as
42:05 - food
42:06 - and let us assign it a value of milk
42:10 - now I want to tell python that food
42:13 - should always contain the value of a
42:15 - string it cannot contain any other value
42:17 - and the way to do it is by using a type
42:20 - hint
42:21 - you can write a type in right over here
42:23 - let me take it a little
42:26 - you can add a type and try to here so
42:28 - after the name of the variable just put
42:31 - a colon then we can see this variable
42:35 - has to be of the type of a string and
42:38 - this you can write Str so Str means
42:41 - food variable is of the type of a string
42:44 - and that's it and let us print out a
42:47 - statement saying that
42:49 - let us do a formatted string we can say
42:52 - Lewis is going to drink inside the curly
42:58 - brackets we can see food
43:00 - and I'll just save it and run your file
43:03 - and we have the output Lewis is going to
43:05 - drink milk
43:07 - we can reassign the variable food from
43:10 - milk to
43:13 - and then we can say
43:16 - Lewis is going to eat
43:20 - let me save the file and let me try to
43:22 - run it and we have the output Lewis is
43:25 - going to eat eggs
43:28 - now this time if I say food is equal to
43:31 - false
43:32 - let me just copy and paste this line so
43:35 - let me just paste it right over here
43:38 - save the file and let me run it for the
43:42 - last time
43:44 - but watch this
43:45 - we still have the output it's saying
43:48 - that Lewis is going to eat false false
43:52 - and doesn't make any sense over here so
43:54 - this is what we call as a bug this is an
43:57 - undesired Behavior we don't want to
44:00 - assign faults to our food
44:02 - the way to take care of this is by using
44:04 - one more plugin which is called as my pi
44:08 - first thing we need to install my Pi I
44:11 - hope you installed my Pi in the
44:12 - beginning where I was discussing about
44:14 - the optional dependencies
44:16 - if not you can just open up your
44:18 - terminal
44:19 - let me clear all of this
44:22 - and you can install my Pi by saying pip
44:24 - install follow followed by my pack and
44:28 - that's it
44:30 - after installing my Pi I want you to
44:32 - open up the settings again you can open
44:34 - up the settings by
44:36 - by pressing command and comma on a Mac
44:39 - it should be Ctrl and comma on Windows
44:41 - and here I want you to type Wi-Fi
44:46 - and I want you to click on this python
44:48 - linking my Pi enabled
44:51 - just click on this one
44:53 - and that's it now you can see the code
44:55 - editor is highlighting false and it's
44:58 - saying that we have some sort of issue
44:59 - over here if you just hover over false
45:02 - it's going to say incompatible types in
45:05 - assignment
45:06 - expression has Type Bool variable has
45:09 - Type string what it means is variable
45:13 - has a type of Str so if you refer the
45:17 - line number 20 we have assigned the type
45:20 - of string to our variable that's what
45:23 - this error is trying to tell us we have
45:25 - declared the variable as string but in
45:27 - the expression we are trying to assign
45:29 - it a value of Boolean that's why it's
45:32 - not going to work
45:33 - or rather it's going to work because
45:35 - python isn't dynamically typed language
45:37 - but at least in your code editor is
45:40 - going to show you that something is
45:42 - wrong so you can see on the top as well
45:44 - it's showing an error right over here as
45:46 - well
45:47 - but if you see the file and if you try
45:49 - to run the file one more time
45:51 - it's going to execute
45:53 - you can see we are executing our Python
45:56 - program
45:57 - so this is the thing with python python
45:59 - is in dynamically typed language and
46:01 - it's not going to enforce the data types
46:03 - on the runtime
46:05 - that is why to prevent such kind of bugs
46:07 - we are going to use my pie and we are
46:10 - going to use type hinting everywhere
46:13 - let's try to do some more practice with
46:15 - our primitive data types
46:17 - so let's create one more program right
46:20 - over here
46:21 - and let me create a file and the name of
46:25 - the file is just practice.py let me put
46:28 - up some comments as usual
46:30 - and let me collapse my sidebar
46:33 - now this as you can see Triple codes
46:36 - these are also a valid comment and
46:39 - normally you would use triple quotes
46:41 - whenever you want to write some kind of
46:43 - a documentation inside the string but
46:45 - the thing about this triple chords is
46:47 - you can also create strings and you can
46:50 - also do a string formatting by using
46:52 - triple quotes we are going to see an
46:54 - example of this right in this video here
46:57 - is the situation Lewis wants to open up
47:00 - a pizza shop and he needs to write a
47:03 - program for accepting orders
47:05 - now this is a very important tip before
47:09 - you always start coding first you always
47:12 - and always need to visualize now let's
47:15 - just try to visualize our pizza shop and
47:18 - let us try to think what all variables
47:20 - we would require
47:22 - the first and the most obvious is we
47:24 - would require a variable for customer
47:27 - that's the place where we would save the
47:29 - customer data
47:31 - the second variable could be a pizza
47:33 - base maybe you would like to have a thin
47:36 - base or a base filled with cheese or
47:39 - whatever you prefer
47:41 - the next variable could be for storing
47:43 - the pizza size maybe it's like a 12 inch
47:46 - pizza or maybe it's like a 14 or 16 inch
47:48 - pizza so we would require a variable for
47:51 - storing the size as well if it is a
47:53 - pizza it also needs to have some kind of
47:55 - a topping so we would need one more
47:58 - variable for topping one more for cheese
48:02 - and one more for the price
48:04 - so this is how we would first visualize
48:07 - the entire program and only after
48:09 - visualizing your program you would start
48:12 - coding
48:13 - I will come to this concept A little
48:15 - later in detail but right now let's get
48:18 - going and let's create some of the
48:19 - variables let us create the first
48:21 - variable called as customer
48:24 - the type of customer is going to be a
48:26 - string so let us try write Str and the
48:30 - name of the customer would be CC
48:33 - let me put CS Capital
48:36 - the next variable would be for my pizza
48:39 - base so I can say my pizza base
48:42 - again the type is going to be string
48:46 - this time I want to have a thin base the
48:50 - next one would be for my
48:53 - Pizza size
48:57 - now I bought my pizza size to be an
49:00 - integer suppose I want to eat a 12 inch
49:03 - pizza so that's what this is going to
49:04 - indicate
49:06 - the next one would be for my topping
49:09 - topping has to be a string and I want to
49:13 - have some toppings of olives
49:16 - the next one let us create a Boolean
49:19 - saying that extra cheese
49:21 - and let us create
49:24 - the typing in so the extra cheese
49:27 - variable is going to be of the type of
49:29 - Bool so the customer can say yes they
49:32 - want false if they don't want in case
49:35 - they want extra cheese then we can say
49:38 - true otherwise it's going to be false
49:41 - the last one is going to be price
49:43 - now since price is going to contain
49:45 - decimal values so we can say price is
49:48 - going to be a float and we can say this
49:51 - is for 8.99 dollars
49:54 - just save it and now let's try to print
49:57 - all of these values in our terminal let
50:00 - me put up one more comment over here
50:03 - now since this program is for accepting
50:05 - pizza orders let's try to write print
50:09 - statements that would make some sense
50:12 - so the first one I can say
50:15 - received
50:16 - order from followed by
50:20 - the name of the customer
50:23 - let me save it the next line we can
50:26 - print some of the pizza details so we
50:28 - can say print again for the formatted
50:32 - string and then we can see
50:34 - the pizza base would be the pizza base
50:40 - then we can say size
50:45 - is going to be Pizza size in inches
50:50 - followed by
50:52 - toppings
50:54 - and I can write toppings over here
50:58 - save this
51:01 - now let us try to print if the customer
51:03 - wants extra cheese or not so we can
51:06 - again say is
51:10 - extra
51:13 - cheese required
51:16 - and let us put the value right over here
51:18 - extra cheese
51:21 - and the last thing we want to print is
51:23 - going to be the price so we can say
51:27 - bill amount
51:29 - is going to be the price so I can put
51:31 - the price right over here
51:33 - let me run the program and here we have
51:37 - the output
51:38 - received order from CC let me take this
51:42 - a little down
51:44 - and
51:45 - and now we can start comparing
51:48 - so you can see we have declared the name
51:50 - of the customer as CC that's what we
51:52 - have right over here
51:54 - the base of the pizza is thin so thin is
51:57 - what we want the size is 12 and the
52:00 - topping is volumes
52:02 - do we require extra cheese yes we
52:04 - require and the total amount is 8.99
52:08 - dollars
52:09 - let us have a look at one more
52:11 - alternative syntax of using formatted
52:14 - string let me put up a command right
52:16 - here
52:18 - now this time I am going to construct an
52:21 - entire string which will hold all of
52:23 - these values
52:24 - in order to save all of this data let me
52:27 - create a new variable by the name of
52:30 - order
52:32 - details is going to be of the type of
52:34 - string
52:36 - and now this is the interesting part we
52:39 - can create a formatted string outside
52:42 - the print statement as well so I can say
52:44 - F and I can put
52:47 - my comma right over here
52:49 - but I'm going to use triple quotes
52:52 - because I want to create my string which
52:55 - is going to be in multiple lines
52:58 - so if you just compare your output you
53:01 - can see we have multiple lines on the
53:03 - first line we have the statement for
53:06 - received order the next line has the
53:09 - pizza details and so on so I want my
53:12 - string to be multi-line that's the
53:14 - reason why I'm using triple quotes right
53:17 - over here now between these triple codes
53:19 - let's start adding our values now this
53:22 - is pretty simple I just have to copy
53:26 - from above let me just
53:28 - paste this inside
53:30 - the same thing for this as well
53:33 - please note that I am not copying the
53:35 - inverted commas because I already have
53:38 - them outside
53:39 - let me put this line
53:45 - this one as well
53:47 - and this as well
53:55 - so what we have essentially done from
53:58 - line number 34 to line number 39 is we
54:02 - have created an attached string and we
54:05 - have saved that string to a variable and
54:08 - the name of the variable is called as
54:09 - order details
54:11 - on the next line we can simply print out
54:13 - the order details so we can say simply
54:16 - print my order details
54:20 - and that's it let's try to run this file
54:24 - and we have the output
54:27 - let me just comment all of this for a
54:31 - moment so that the output is much more
54:34 - clear
54:35 - Let Me Clear My terminal again go back
54:38 - and let me try to run the file
54:42 - so now you can see our formatted string
54:45 - is also working
54:46 - let us have a look at one more very
54:49 - simple alternative
54:51 - we just saw that we can create a
54:53 - multi-line string by using triple codes
54:55 - and assign that string to a variable
54:58 - but let us ask the question do we really
55:01 - require a variable maybe not
55:04 - we can simply print out the entire
55:06 - statement so what I'm going to do is I'm
55:09 - just copying all of this formatted
55:12 - string
55:13 - let me copy all of this let me go down
55:17 - let me write print and inside my print
55:21 - function I'm just going to paste
55:23 - everything as it is
55:25 - that's it let me just save the file
55:27 - and let me run it
55:30 - and as you can see we have the desired
55:33 - output you can use any of the string
55:36 - formatting style there is no right and
55:38 - wrong method in this one
55:40 - welcome to a new section
55:42 - this section is all about decisions
55:45 - decisions and more decisions
55:49 - and we are going to learn how to take
55:51 - Decisions by the use of flow control
55:53 - mechanisms that means there are multiple
55:56 - flow control statements such as if and
55:59 - else while while and do and some other
56:02 - statements so we will have a look at all
56:04 - of this control flow statements
56:08 - first thing that I want you to do is go
56:10 - back to your code editor and let's
56:13 - create a new folder right over here
56:16 - let me name it as 0 3 flow control
56:21 - and the first file that I am going to
56:24 - create over here is called as driving
56:26 - license Dot py
56:32 - let me put up a comment as usual now
56:35 - let's see what's happening Lewis wants
56:38 - to drive a car and he wants to know if
56:40 - he can apply for a driving license or
56:42 - not
56:43 - so first let me declare a variable
56:45 - called as age is going to be of the type
56:48 - of integer and let me assign a value of
56:51 - 13 to it the first flow control
56:53 - statement that I am going to introduce
56:55 - in this video is the if and else
56:58 - statement suppose the legal driving age
57:01 - in your country is 16. so right now we
57:04 - can create a very simple if and else
57:07 - blocks we can say if
57:09 - the age
57:11 - is less than 16
57:14 - . in that scenario I want to print out
57:18 - you are not
57:24 - eligible for a
57:27 - license
57:29 - but what happens if you are more than 16
57:32 - in that case you are eligible for
57:35 - license
57:36 - so on the next line we can simply say
57:39 - else so that means you are actually more
57:43 - than 16 years old
57:44 - and let me copy and paste it right over
57:47 - here
57:48 - here I can say you are eligible for a
57:51 - license
57:52 - let's have a look at what's exactly
57:54 - happening
57:55 - python is going to read your file from
57:58 - top to the bottom
57:59 - on line number six it is going to create
58:02 - a new variable called as age and it is
58:04 - going to assign the value of third into
58:06 - it
58:07 - when python comes to line number 12 it's
58:10 - going to try to evaluate this statement
58:12 - right over here
58:15 - what's happening in this statement
58:17 - my age is 13 13 is less than 16 so this
58:22 - condition on line number 12 is true
58:25 - and since this condition is true python
58:28 - is going to print whatever which is
58:30 - inside the if block you can see the line
58:33 - number 13 is indented towards the right
58:35 - so this is a tab space so that means
58:38 - this line belongs to the if log so
58:42 - python is simply going to print out you
58:44 - are not eligible for a license
58:46 - and after printing this block python is
58:49 - actually going to skip the else part
58:51 - because it's not the case with us and
58:54 - python will go to line number 16 where
58:57 - it will exit from the program let me
58:59 - just save the file and let me try to run
59:01 - it
59:03 - so as you can see we have the output you
59:06 - are not eligible for a license
59:08 - now let's try to imagine what happens
59:10 - after a couple of years
59:12 - so after a couple of years the age would
59:15 - be 19. now let me copy and paste the
59:19 - exact same flow control statement and
59:22 - let me put it right over here
59:25 - let me save it and let me try to run the
59:27 - file
59:29 - so the second time we get the output you
59:32 - are eligible for a license
59:34 - and this is the case because on line
59:37 - number 21 you can see now Lewis is 19
59:40 - years old
59:42 - let's go back to our code
59:44 - one thing that I want you to understand
59:46 - is it's not necessary to have an else
59:49 - block we can simply write an if block so
59:52 - let me put up a comment
59:54 - and let me just copy and paste this
59:57 - block
60:00 - right over here
60:02 - let me
60:04 - comment this let me
60:07 - comment all of this
60:10 - so the only thing we have in our file
60:12 - right now is this variable age
60:16 - which we declared as 13 online number
60:18 - six and we reassign the value on line
60:21 - number 21
60:22 - and we have this if an else block now I
60:27 - am going to take out the else block and
60:30 - I'm going to
60:31 - left indent this line
60:33 - so that means we do not have an else
60:35 - Block in this condition
60:37 - this is just the if block and this is
60:41 - the next line let's see what's happening
60:42 - let me scale the file and try to run the
60:45 - file one more time
60:48 - ah so in this case I am getting the
60:50 - output you are eligible for a license
60:53 - now let's see what's exactly happening
60:56 - when python comes to this line land
60:58 - number 32 it's again going to evaluate
61:01 - this statement
61:03 - in our case the age is 19 so 19 is not
61:08 - less than 16 and since this condition
61:11 - will evaluate to false python is going
61:15 - to skip the if Law And since we are
61:18 - going to skip the if block python is not
61:21 - going to print this line it will simply
61:24 - move to the next line on the next line
61:26 - that is on line number 35 we are simply
61:29 - going to print out you are eligible for
61:31 - a license and that's what we get on our
61:34 - terminal you can check the terminal one
61:36 - more time
61:37 - let me
61:40 - let me clear up all of these things let
61:42 - me run the file one more time
61:45 - and that's it you have the output of you
61:48 - are eligible for a license you can also
61:51 - chain multiple if and as blocks let me
61:53 - show you an example for that
61:55 - now suppose after too many years Lewis
61:59 - is 100 years old
62:01 - let me just go and copy the code from
62:04 - above so let me just copy
62:08 - this one
62:09 - and
62:11 - right over here
62:13 - and let me uncomment all of this
62:16 - here we can start chaining our if and
62:18 - else blocks
62:20 - so on the next line I can say else and
62:22 - if in Python we write it as e l i f that
62:26 - means else and if
62:28 - so the next condition that I want to
62:30 - check is my age
62:32 - greater than 100
62:35 - in that case I want to print out
62:38 - you are too old to get a license
62:42 - let me comment this one
62:46 - now let me try to run the file
62:50 - oh but what is this
62:52 - we are getting an output saying that you
62:55 - are eligible for a license but that's
62:58 - not we want we want to print out you are
63:01 - too old to get a license
63:03 - and we have a small bug and that bug is
63:07 - exactly on line number 45.
63:09 - we are saying that if the age is greater
63:12 - than 100
63:13 - but right now our age is 100
63:17 - so in order to make this statement true
63:20 - we have to say if the age is more than
63:23 - or equal to 100
63:26 - now let's save it and let us try to run
63:28 - the file one more time
63:31 - and this time we have a proper output
63:33 - saying that you are too old to get a
63:35 - license
63:36 - till now we have seen very simple if and
63:39 - else blocks let's try to expand our
63:42 - knowledge
63:43 - and this time let me create a new file
63:45 - by the name of alien license dot pi
63:49 - here is the situation Lewis desperately
63:54 - wants to drive a car and he hears that
63:57 - in a planet called as zorton there is no
64:00 - age limit for getting a license so let's
64:02 - see how we can address this situation
64:05 - let us create a couple of variables the
64:08 - first one would be for age
64:10 - of the type of integer age is 13
64:13 - the next one for a planet
64:16 - Planet the type would be string and let
64:20 - me assign it to Earth initially
64:24 - let me introduce to you a little more
64:26 - complex statements by using and and or
64:30 - statements
64:32 - so let's start writing our compound if
64:34 - and else blocks along with and and or
64:38 - the first case would be if the age is
64:42 - less than 16 and
64:45 - the planet
64:47 - is
64:48 - Earth
64:50 - in that case I simply want to print out
64:53 - that you are not eligible for a license
64:56 - on Earth here you can see I have double
64:59 - equal to that simply means that this is
65:02 - a comparison operator we assist and
65:06 - compare if the value inside the variable
65:09 - planet is equal to Earth or not
65:12 - now let's move on to the next blog for
65:15 - the else statement here we can say else
65:18 - if
65:21 - the age is greater than 16
65:24 - and if the planet
65:27 - is again Earth
65:30 - in that case I want to print out that
65:33 - you are eligible for a license on Earth
65:37 - but what happens if both of these values
65:40 - are false what happens if the planet is
65:43 - zorton or what happens if the age is
65:45 - less than 16 but you are trying to apply
65:48 - for license consultant
65:50 - let's try to create one more condition
65:53 - over here let us write an if and less
65:55 - block right over here so we can say else
65:58 - if
66:00 - if the age is less than 16
66:03 - and if the planet
66:06 - is zorton
66:09 - in that case I want to print out
66:13 - you can apply for resort in your license
66:16 - because it's valid in the planet's Orton
66:20 - let me save the file
66:21 - and let me try running it and let us see
66:25 - what output we are getting
66:27 - so I am getting the output that you are
66:29 - not eligible for license on Earth
66:32 - so let's get back to the code and let us
66:34 - evaluate what's exactly happening let us
66:37 - begin with evaluating all of the if and
66:40 - LC block
66:41 - let's start with this one on line number
66:43 - 13 let me put up a comment over here
66:47 - so this is how the evaluation is taking
66:50 - place
66:52 - python is going to compare is the age
66:54 - less than 16 yes my age is 13 13 is less
66:59 - than 16 so the first statement is going
67:02 - to evaluate to true so that comes right
67:04 - here
67:06 - the next operator that we have is and so
67:09 - and comes right over here
67:11 - now python will go to the last statement
67:14 - it's going to compare is planet equal to
67:17 - Earth so as you can see on land number
67:19 - seven we have assigned the value of
67:21 - Earth to planet
67:23 - hence this statement also evaluates to
67:25 - True Earth is equal to Earth so that's
67:28 - why we have a true over here and since
67:31 - we have two truths this entire statement
67:34 - on line number 13 evaluates to true so
67:37 - we can print out you are not eligible
67:39 - for a license on Earth and right after
67:41 - this let me put up one more comment just
67:44 - to explain what's happening and since
67:47 - this if statement on line number 13
67:50 - evaluates to true
67:52 - the execution is going to stop right at
67:55 - this point python is not going to go to
67:58 - the next alternative block python will
68:00 - directly jump to line number 22 and it
68:03 - will exit from our program so that's
68:05 - what is exactly happening so let me put
68:08 - up some more comments right here
68:11 - execution does not reach over here the
68:14 - same thing for this one as well let's do
68:17 - a small exercise
68:19 - on line number 14 we have tried to
68:21 - evaluate the statement
68:23 - let us try to evaluate the statements on
68:26 - line number 18 and line number 21 as
68:28 - well let me put up a comment right here
68:32 - now let's try to evaluate this statement
68:36 - my current age is 13. as you can see on
68:39 - line number six we have assigned the age
68:42 - as 13
68:43 - so the first statement age is 13 13 is
68:48 - greater than 16 no it's not so we have
68:50 - false right over here
68:52 - the next operator is and so and comes
68:55 - right over here
68:57 - the next statement is planet equal to a
69:00 - yes my planet is equal to what so we
69:03 - have a true
69:04 - but in this case we have one false and
69:07 - one true
69:08 - so this statement is going to evaluate
69:11 - to forms let's see what's happening on
69:13 - line number 22 let me put up a comment
69:16 - right over here as well
69:18 - so as you can see the age is 13 13 is
69:22 - less than 16 so we have a true condition
69:25 - over here
69:26 - now the planet
69:28 - the planet currently is Earth and Earth
69:31 - is not equal to zorton so we have faults
69:33 - over here
69:34 - one true and one Falls is always going
69:37 - to give you an false statement
69:39 - we can actually try to improve our logic
69:42 - at this time by introducing an or
69:45 - statement remember insult and even if
69:48 - you are less than 16 you are still
69:50 - eligible for a license
69:52 - so we don't have to check this condition
69:54 - at all we can simply say if you are age
69:57 - 16
69:58 - or if the planet is rotten in that case
70:02 - you can apply for resort in your license
70:06 - in this case the evaluation will be
70:08 - different my age is less than 16 it's
70:12 - true and right here instead of n we have
70:15 - an or condition
70:16 - the next is planet is resultant so
70:20 - that's again going to be false true or
70:23 - false
70:24 - now this time whenever we have an or
70:27 - condition and we have one true and one
70:29 - false it's always going to evaluate to
70:32 - True since we have an or statement the
70:35 - true wins over the false
70:38 - but since the first block is executing
70:41 - we are not going to execute this block
70:43 - and just for your reference let me put
70:47 - all of the and and all tables right over
70:49 - here
70:51 - so these are all of the and and or
70:54 - scenarios
70:56 - but you can do much better
70:58 - if you are in confusion
71:00 - just open up your terminal and I want
71:03 - you to open up the IPython shell
71:06 - remember we have installed IPython at
71:09 - the beginning of the series if you have
71:11 - not installed you can simply install by
71:14 - typing pip
71:15 - installed
71:17 - I python
71:19 - what happens is python actually comes
71:22 - with a shell you can simply type python
71:27 - this takes you inside a python shell and
71:29 - here you can start writing python
71:31 - commands for example I can say OnePlus 2
71:34 - and I get the output of 3.
71:38 - you can exit this Shell by typing Ctrl
71:41 - and D
71:43 - now I python is a slightly better
71:45 - version of this and it's slightly more
71:48 - interactive so I prefer to use IPython
71:51 - shell
71:52 - just type IPython and go inside the
71:55 - shell
71:56 - let me clear up the terminal
71:58 - and whenever you are confused what
72:01 - statement evaluates to what you can
72:04 - simply type right over here here you can
72:06 - type what happens if I have one
72:08 - condition which is true and the next
72:11 - condition which is also a true
72:15 - we get a true but what happens if I have
72:18 - one true and one false condition
72:21 - we have a false
72:23 - what happens if I have one true
72:27 - or false
72:30 - then also we get a true
72:32 - what happens if I have a false and also
72:36 - false
72:38 - we get a false
72:40 - let us try to evaluate one last
72:41 - condition
72:43 - what happens if I have a false
72:48 - and
72:49 - false in that case it also evaluates to
72:53 - false so you can always come back to
72:55 - this iPad and shell and see how the
72:58 - statements are being evaluated now
73:00 - suppose Lewis migrates to zorton then
73:04 - let's see what's happening
73:06 - let me put up a comment now Lewis is no
73:09 - longer staying on Earth he's staying in
73:12 - Jordan
73:13 - let me copy and paste all of this
73:17 - and put it right over here
73:20 - I am not going to change any of the
73:22 - logic
73:24 - let me just run the file as usual and
73:27 - let us see what output we are getting
73:30 - oh first I need to exit this you can
73:33 - exit this by pressing Ctrl and D yes I
73:37 - want to exit let me clear up my terminal
73:40 - go back to the file
73:42 - let me save it one more time and let me
73:44 - try running it it looks like we have a
73:47 - small bug and I exactly know what we did
73:51 - wrong
73:52 - at this point we did not reassign the
73:56 - value of planet to zorton that's what we
73:59 - need to do so we can say map planet now
74:02 - is
74:03 - certain that's it just save your file
74:06 - and let us try to run the file one more
74:08 - time
74:09 - now we have the desired output
74:12 - you can apply for resulting in license
74:14 - now let's try to see how the statements
74:17 - are being evaluated so let's see what's
74:19 - happening on line number 48
74:22 - this statement Planet equal to Earth
74:24 - this time it's going to evaluate as
74:27 - false
74:29 - true and false is going to evaluate true
74:32 - or false and so we are not going to
74:36 - execute this block
74:38 - let's go to the new block age is greater
74:42 - than 16 no it's false Planet equal to
74:45 - Earth no it's false because we are
74:48 - staying in zorton
74:49 - false and false we have a false so
74:52 - python will go to the last condition
74:54 - age is less than 16 true
74:57 - Planet equal result and yeah it's also
75:01 - true
75:01 - true or true
75:04 - equals to true and that's the reason why
75:06 - we have this output as you can apply for
75:08 - result Indian license let's try to see
75:11 - the next Concept in the flow control
75:13 - mechanism
75:14 - and this time I am going to introduce
75:17 - you A New Concept which is called as
75:19 - looping we can iterate over things that
75:22 - is called as looping and we can iterate
75:25 - by using a for Loop let me create a new
75:28 - file as usual and let me show what I'm
75:30 - talking about
75:31 - here I am going to create a new file and
75:34 - I am going to name it as printmyname.pi
75:38 - and let me put up a command
75:40 - so this is the situation this time now
75:44 - since Lewis is staying in Jordan
75:47 - he has to do things in a shortening way
75:50 - in zorton they don't print your name on
75:53 - a single line
75:54 - they want to print each and every
75:56 - character of your team on a different
75:58 - line so let's see how we can do that
76:00 - first let me create a variable for name
76:03 - and let me assign the type as string
76:07 - the name is Lewis and this time let me
76:11 - introduce you One More Concept which is
76:13 - called as the for Loop and we are going
76:16 - to use the for Loop to iterate over all
76:19 - of the characters in Lewis it simply
76:23 - means that we want to go from one
76:25 - alphabet to another throughout this
76:28 - string creating a for Loop is very
76:31 - simple we can simply say
76:33 - for
76:35 - character inside my name I simply want
76:39 - to print out
76:40 - the character let me put up a comment
76:44 - right here
76:45 - so on each iteration we are just going
76:47 - to print a character let me save the
76:49 - file and let me try running it here we
76:53 - have the output
76:54 - we have each and every character on a
76:56 - new line
76:57 - and we are doing this by using a very
77:00 - simple for Loop now let's see what's
77:02 - happening inside each of the iteration
77:04 - here we are saying for character in name
77:07 - first time the character is L you can
77:11 - see right over here we get the output of
77:13 - L
77:14 - you can write over here as well
77:16 - the next character is o u i n s
77:21 - so on each iteration we are printing a
77:24 - single character on new line
77:26 - let's try to move on and learn One More
77:29 - Concept for flow control mechanisms
77:32 - this time I am going to show you the
77:34 - while loop
77:36 - for this as usual let me create a new
77:38 - file
77:40 - and let me name it as guess Planet dot
77:43 - pi
77:44 - and this time this is the situation
77:48 - now since Lewis has migrated to zodan
77:50 - his friend from Earth they are a little
77:53 - curious to know where he is so Lewis
77:56 - decides to write a program that will
77:58 - make his friends guess the name of the
78:01 - planet for this simple program I am
78:03 - going to create three variables
78:06 - first variable would be as a Boolean so
78:09 - I can say
78:10 - correct guess this would be an Boolean
78:15 - initially let me assign it the value of
78:17 - faults
78:18 - the next Boolean for
78:20 - guess
78:22 - so this is the place where we would be
78:25 - storing all of the gases that his
78:28 - friends are going to make initially it's
78:30 - simply going to be a blank string and
78:32 - that's it
78:33 - the next one for the planet so I can say
78:36 - planet of the type of string
78:40 - this is going to be zorton
78:44 - let us have a look at the first
78:46 - alternative
78:47 - the first thing that we want to do right
78:49 - over here is we want to create a loop
78:52 - and we want his friends to keep on
78:54 - guessing till the time they get the
78:56 - planet right
78:57 - first let us see how we can get the
79:00 - input from his friends
79:02 - the way to get an input is by using
79:05 - another inbuilt function by the name of
79:07 - input so we can say input
79:11 - and I can write a prompt over here
79:15 - Lewis says that can we guess my planet
79:18 - and I want to save the input inside my
79:21 - variable of guess so I'm just going to
79:24 - the left
79:25 - the input has to be saved inside my
79:28 - variable of guess so my guess comes
79:31 - towards the left
79:33 - let me save this and let us try to run
79:35 - this and see what's happening
79:37 - let me also print out the guess on the
79:40 - next line
79:44 - now let's try to run this file and see
79:46 - what's happening
79:49 - so as you can see I am getting the
79:51 - prompt Lewis says can you guess my
79:54 - planet
79:55 - let me write as Mars and we have the
79:58 - output
79:59 - now this output of mass is coming from
80:02 - this line from line number 15. if you
80:05 - are having some issues while running
80:07 - this file from the code Runner then what
80:10 - we can do is I want you to open up your
80:12 - settings
80:14 - let me collapse my terminal
80:17 - here I want you to write code Runner
80:22 - and let us scroll a little down I want
80:25 - you to
80:26 - go a little more down
80:29 - and I wanted to check this option run in
80:32 - terminal so make sure that this option
80:34 - is checked or what you can do is you can
80:37 - simply use the python command
80:40 - let's try to navigate inside the folder
80:43 - now this time the folder was 0 3 so you
80:46 - can go inside this folder and you can
80:49 - say hey python I want you to run my
80:52 - program which is called as guest planet
80:55 - and we have the prompt and this time it
80:58 - can be Pluto
81:00 - and we have the output of Pluto let's
81:03 - get back to our program
81:05 - here we can create our event and else
81:08 - blocks so we can say if the guess
81:11 - is equal to my current planet
81:16 - then I want to print out
81:18 - all right guess Lewis is a Jordan
81:21 - else we can say
81:23 - that I want to print out
81:26 - Lewis says it's a wrong choice I want
81:28 - you to try again
81:30 - let me see this and let us try to run
81:33 - this one more time
81:36 - suppose my planet is Mercury
81:40 - and we get the output Lewis says wrong
81:44 - choice try again let me clear up my
81:47 - terminal and let me try this program one
81:49 - more time this time I am going to write
81:52 - as zorton what's this we still have the
81:55 - output saying that it's a wrong choice
81:57 - but that's not the case we have written
82:00 - certain
82:01 - the issue is this that we have written
82:04 - zorton with a z which is in the small
82:07 - case but we have saved planet with a z
82:10 - which is in the upper case
82:12 - the point that I want to convey is all
82:15 - of the strings are going to be case
82:17 - sensitive inside python your upper case
82:21 - z is not equal to your lowercase z
82:25 - let us see how we can handle this
82:27 - situation
82:28 - we can go back to our if block right
82:31 - here
82:31 - and we can actually convert from capital
82:34 - Z to a lower Z in fact we are going to
82:38 - convert the entire string to a lowercase
82:42 - string and you can do that by using an
82:45 - inbuilt function
82:46 - now this function Works only with
82:48 - strings and since we have two strings
82:51 - guess and planet we can use that
82:54 - function right over here so we can
82:57 - simply say guess I simply want to lower
83:00 - it and after this I want you to put
83:02 - brackets so this means I want to invoke
83:06 - the function of lower I will come to
83:08 - functions a little future in the series
83:10 - but right now just go with the flow so
83:13 - what this statement is doing is
83:15 - is going to take the guess and it is
83:18 - going to convert it from whatever case
83:20 - it may be to an lower case we want to do
83:23 - the same thing for Planet as well so
83:25 - here we can say lower along with the
83:28 - brackets
83:30 - just save it
83:31 - and now let's try running this file
83:36 - let me write zorton with a smaller case
83:39 - z
83:40 - and this time we have the output right
83:43 - guess Lewis is at Jordan now let's try
83:46 - to improve the logic even more we don't
83:49 - want to exit this program
83:51 - we want to ask his friends to keep on
83:53 - guessing till the time they get the
83:56 - guess right
83:57 - and we can do this by wrapping all of
84:00 - our logic inside a while block so let's
84:03 - see how to do that
84:05 - on line number 16 let me make some space
84:08 - and uh
84:10 - here I can say while
84:13 - my
84:15 - correct guess
84:16 - is not true so that means till the time
84:21 - we don't get a correct guess I simply
84:24 - want to keep on looping so let me put a
84:26 - colon over here
84:28 - and after this I want to indent all of
84:31 - this if and S blocks one tab space
84:35 - inside
84:36 - so now if an else blocks belong to the
84:39 - while loop
84:41 - let me save it
84:43 - and let me try to run the file but we
84:46 - have a small bug let me run the file
84:48 - first and then you will understand
84:49 - what's wrong with it
84:52 - so here it goes
84:55 - it's asking me for the name of the
84:57 - planet I am writing marks
85:01 - so what's this it's keep on looping
85:04 - something's wrong with our program let
85:07 - me stop it by pressing Ctrl and C
85:10 - the issue is we are just keeping on
85:13 - looping the first thing python will go
85:16 - online by 18 it's going to see is my
85:19 - Mars equal to my Jordan it's not so it
85:22 - will go to the next line
85:24 - it says that Lewis says wrong choice try
85:28 - again so this is what we are getting
85:30 - and since our wild condition is not true
85:33 - as you can see on land number six do we
85:36 - have a correct guess false
85:38 - and that's the reason why python will
85:40 - again go back to line number 18 it's
85:43 - going to see Mars is equal to Zordon no
85:46 - so it's again going to go on a line
85:49 - number 21 and print out Lewis says wrong
85:52 - choice try again the way to come out of
85:55 - this while loop is we need to have a
85:58 - circuit breaking mechanism that's why I
86:01 - have created this variable called as
86:03 - correct guess
86:04 - so right over here after line number 19
86:08 - since we have a correct guess this time
86:10 - let us reassign the value of correct
86:12 - guess
86:14 - to true
86:16 - now let's try running this file
86:20 - oh let me
86:22 - clear up my terminal now let's try the
86:25 - file one more time
86:27 - so it's saying that can you guess my
86:29 - Planet let me see as Mars
86:33 - oh no we again have a issue let's see
86:36 - what's wrong this time
86:38 - now the issue is we are not asking for a
86:42 - new input after we get a wrong guess
86:45 - that's why we never have a correct guess
86:47 - in order to correct this let me take
86:50 - this line let me cut it out and I want
86:53 - to paste it right over here
86:56 - let me indent
86:57 - so we have a proper variable
87:00 - we don't require this pin statement now
87:03 - let me take it out
87:05 - and let us see if we can have a running
87:07 - program let me put the input as Pluto
87:12 - is saying wrong choice now this time it
87:15 - is again asking me for an input and is
87:19 - actually waiting for my input let me
87:21 - write Mars no it's not going to work
87:25 - Earth no it's not going to work
87:28 - let me write zorton
87:31 - and that's it we have the right guess
87:33 - let me add some comments so that it's
87:36 - much more easy for us to understand
87:38 - what's happening the first comment goes
87:40 - right over here
87:43 - so on line number 16 we are just asking
87:46 - the users for their input the next thing
87:48 - that we are doing which is right over
87:50 - here
87:52 - we are just lower casing all of the
87:55 - strings so that we have a much more
87:57 - correct comparison then as a circuit
88:00 - breaking mechanism we are setting the
88:02 - current guess variable to true so this
88:06 - is what is happening right here
88:08 - inside the else block if the condition
88:10 - is false then we are going to print the
88:13 - statement and just to give it a small
88:16 - cosmetic touch I am going to put a line
88:18 - just below this
88:20 - just save a file and let me try running
88:23 - this file for one more time
88:27 - so my first planet would be Mercury
88:32 - we have a very nice output saying that
88:34 - wrong choice and then we have a line
88:36 - below it
88:38 - now this time it's going to be zorton
88:40 - with a lowercase z
88:42 - and we have the right output there is
88:45 - one more alternative way we don't need
88:47 - to declare this variable all the time we
88:50 - can simply work directly with the while
88:52 - loop let me put up a comment and then
88:55 - let me show how it works let me copy and
88:58 - paste everything from above so let me
89:01 - just copy this
89:02 - let me go right over here
89:05 - let me paste it
89:07 - I also want to comment all of this
89:11 - once inside the while loop we have one
89:15 - more alternative which can act like our
89:18 - circuit breaker here online number 33 I
89:21 - can simply say while true
89:23 - this means that I always want you to
89:26 - start the value because true is always
89:28 - true
89:30 - and on line number 40
89:32 - instead of saying correct guess is equal
89:35 - to true I can say
89:37 - break
89:39 - so that means as soon as we have a
89:41 - condition which is right I simply want
89:43 - to break out of the value
89:46 - let me save it and let me run it and see
89:48 - if it is working or not okay so my first
89:51 - planet would be Earth
89:54 - a wrong choice the next planet is zorton
89:58 - and that's the right choice let's try to
90:01 - learn the next flow control statement
90:04 - and this time we are going to learn the
90:07 - match statement so let me open up my
90:10 - sidebar and let me create a new file by
90:13 - the name of
90:14 - match color dot py and let me put up a
90:19 - comment
90:20 - so this is what we want to do
90:22 - volt Island Resort and Lewis he has
90:25 - packed a lot of stuff and we want to
90:27 - check if he has anything that matches
90:30 - our favorite color
90:32 - and we are going to do this by using a
90:35 - match operator
90:36 - now please keep in mind that match is a
90:39 - brand new operator which was introduced
90:42 - in the version 3.10 so in case if we
90:45 - have any version below 3.10 it's not
90:48 - going to work so please make sure you
90:50 - have any version 3.10 or higher here
90:53 - what we can do is we can create a
90:55 - variable called as
90:57 - my favorite color
90:59 - and we can ask the user for an input so
91:02 - we can say input
91:04 - and here we can see
91:07 - enter your
91:10 - favorite
91:11 - color
91:14 - what's wrong with this
91:16 - spelling okay so enter your favorite
91:19 - color
91:20 - now let's try to print
91:23 - the favorite color
91:26 - let's try to run this file and let's see
91:28 - if it's working or not
91:31 - so it's asking me for my favorite color
91:33 - I say it's black
91:35 - and I have the right output
91:37 - now let's see how the match operator is
91:40 - going to work we can write that I want
91:42 - to match on my
91:44 - favorite color
91:46 - and the first case would be
91:48 - in case if I get the input as black
91:52 - in that case I want to print out a
91:54 - statement saying something like
91:56 - Lewis has a
92:00 - black
92:02 - t-shirt
92:06 - now suppose the user input
92:09 - is red then maybe in that case I want to
92:13 - print something like
92:15 - Lewis has a
92:18 - red car
92:21 - suppose my favorite color is yellow
92:27 - the code the colons has to be outside
92:30 - the codes
92:32 - and I want to print out
92:36 - Lewis has a yellow
92:40 - shoes
92:43 - now in case the favorite color is green
92:48 - in that case I want to print out
92:52 - blue is has a
92:55 - green hat
92:58 - but what happens if we don't get a match
93:01 - so in that case
93:03 - we can write like this case followed by
93:06 - an underscore so that means the default
93:09 - case would be this one in case we don't
93:12 - get the favorite color right here we can
93:14 - simply print out that
93:17 - Lewis has
93:19 - nothing in and let me put my color right
93:24 - over here
93:26 - followed by the word of color
93:28 - just save it let me save the file and
93:31 - let me try to run it one more time
93:35 - let me give the input of green
93:39 - it's working
93:40 - let me try to run the program one more
93:43 - time
93:44 - This Time Again green
93:47 - but you can see we are getting the
93:49 - output as Lewis has nothing in the green
93:52 - color
93:53 - now this is again because I have entered
93:56 - green where G is capital
93:59 - while inside the match operator you can
94:02 - see I am using a lowercase G and you
94:05 - already know that strings are case
94:08 - sensitive inside python let us tackle
94:11 - this issue and it's going to be a very
94:12 - simple thing
94:14 - we can either write over here I want to
94:16 - match my favorite color and I want to
94:20 - lowercase it first and then I want to
94:22 - match
94:23 - or we can say
94:25 - on this line I want to say that my
94:28 - favorite color should be equal to my
94:31 - favorite color but in the lower case
94:36 - or even better what we can do is we can
94:38 - write it right over here Dot
94:42 - lower
94:45 - and let me take out this line
94:47 - and that's it if you're wondering why I
94:50 - don't have a type annotation right over
94:52 - here
94:53 - and the reason is just hover over input
94:56 - and if you read the documentation it's
94:59 - saying that the output is of the type of
95:02 - a string we will look at the syntax when
95:05 - we learn a little bit more about
95:06 - functions your my Pi plugin is smart
95:10 - enough to infer that the variable
95:13 - favorite color is of the type of a
95:15 - string and since your favorite color is
95:19 - a string we can apply the lower method
95:22 - on our string you can always
95:25 - write the type over here and it's not
95:27 - going to hurt
95:28 - so this is also a valid syntax let me
95:31 - run the file for the last time and let
95:33 - us check what's happening
95:36 - now this time I am going to say red with
95:38 - the capital r
95:40 - now it's a match Lewis has the red car
95:44 - till now we have learned a lot and I
95:46 - think it's time for us to start writing
95:49 - our game
95:50 - so what I've done in the background I've
95:52 - created a file by the name of game save
95:55 - sort and underscore one you can see on
95:58 - the tab right over here as well and I've
96:01 - added a couple of comments
96:03 - let us see now what we are supposed to
96:05 - do inside this game
96:07 - now as we remember Lewis is staying at
96:10 - Jordan but this time zotan is under
96:13 - attack Thanos has arrived and he is
96:16 - going to attack zorton now fortunately
96:19 - Lewis can call his Avenger French from
96:22 - Earth and so he has made a call Avengers
96:25 - has received his call and they I want to
96:28 - send four of the Avengers to save zorton
96:31 - the four Avengers who are going to save
96:34 - zorton are Iron Man Black Widow
96:36 - Spider-Man and Hulk each of the Avengers
96:40 - have their own attack and power and they
96:42 - have to fight with Thanos in order to
96:44 - save zorton
96:45 - but we have a couple of conditions
96:48 - Avengers can only attack in pairs so
96:52 - that means at each given point of time a
96:55 - single Avenger cannot attack Thanos
96:57 - because Thanos is much more powerful so
97:00 - Avengers have to team up in pairs of two
97:03 - and they have to attack Thanos
97:05 - and while doing all of this Avengers
97:07 - only have three chances to kill Thanos
97:09 - otherwise Thanos will kill the Avengers
97:12 - and we will lose the game sounds
97:15 - interesting isn't it
97:17 - but the first thing that I want you to
97:18 - do is not write the code Yes you heard
97:22 - right I don't want you to write the code
97:25 - first
97:26 - I want you to understand what we have to
97:28 - do and then you can start writing code
97:31 - in order to understand better I want to
97:34 - introduce to you a very simple concept
97:36 - which is called as VOC dtp it's a very
97:40 - simple concept that I've come up with
97:42 - and the entire concept is divided into
97:45 - two parts so as you can see the first
97:47 - part is VOC the second part is dtp
97:51 - so the first part simply means to
97:53 - visualize outline and code the next part
97:57 - would be debug test and polish
98:00 - for now we would be concentrating on the
98:03 - first part visualize outline and code
98:07 - so as a programmer always remember first
98:10 - you always always need to visualize
98:13 - before you can code you don't have to
98:16 - write code immediately so let's start
98:18 - visualize what's going to happen inside
98:20 - of a game
98:24 - since it's a game we already have some
98:27 - characters so let's try to visualize the
98:29 - different characters that we have
98:31 - we have two main categories one category
98:34 - is for the super heroes and the next
98:37 - category is for the super villains
98:40 - we have a specific list for the
98:42 - superheroes and those are Iron Man Black
98:44 - Widow Spiderman and Hulk and for the
98:47 - super villains right now we have only a
98:50 - single super villain and his name is
98:52 - Thanos so this is where we just simply
98:55 - try to visualize how the game would look
98:57 - like
98:58 - and now we know the characters in The
99:01 - Next Step let's try to outline how this
99:04 - characters would look like and how they
99:06 - would work
99:09 - so coming to the next point of outline
99:11 - since we have characters all of the
99:14 - characters should have some properties
99:17 - they should also have some constraints
99:19 - and we should also have some sort of a
99:22 - logic I have already specified that our
99:24 - Avengers have a fire or an attack power
99:27 - but if we have an attack power then we
99:30 - would also require life and having a
99:33 - property of life would make our job much
99:35 - more simple and we can Implement a very
99:38 - simple Logic for the game now this game
99:40 - also comes with a couple of constraints
99:42 - that we can't forget
99:44 - the constants are the first one that we
99:47 - saw Avengers can only attack in parents
99:50 - so at a given time only two Avengers can
99:52 - attack a single Avenger cannot attack
99:54 - and more than two Avengers also cannot
99:57 - attack and Avengers only have 3 chances
100:00 - of defeating Thanos
100:02 - so this is where we are just trying to
100:05 - outline how our characters are going to
100:07 - look like the last and the most
100:08 - important part is
100:10 - can we come up with some kind of logic
100:13 - where we can simulate the attack now
100:16 - let's go back to our code editor and let
100:18 - us see how we can translate all of these
100:20 - things in our step number three so as
100:23 - you can see the step number three is to
100:25 - actually code
100:26 - in Step number three what we are going
100:28 - to do is we either is going to translate
100:31 - all of these things to a logic and that
100:34 - logic would be coded with python now
100:37 - let's start with declaring our variables
100:40 - if you refer our outline we have a
100:42 - property and the properties are for your
100:46 - fire or attack power and one for the
100:48 - life
100:49 - so let's go right over here and let us
100:52 - start creating some of our variables so
100:54 - we can see
100:56 - the attack power of Iron Man
101:00 - so I can see Iron Man
101:02 - attack
101:04 - power
101:05 - and just suppose it to be 250
101:10 - now let's start thinking in types
101:13 - now since it's a power I have to do some
101:16 - sort of calculations so it must be
101:19 - either an integer or in fluid
101:21 - for the sake of Simplicity I am keeping
101:24 - it as integer the next thing that I want
101:26 - you to remember is
101:28 - since this is an attack power we are not
101:32 - going to change the attack power in the
101:34 - future so no matter even if we are
101:37 - losing or we are winning the game the
101:39 - attack power of Iron Man is always going
101:42 - to be 250 so just as a stylistic
101:46 - preference I want to name my variable
101:49 - everything in uppercase
101:51 - so this would denote that I want to have
101:54 - a constant instead of a variable
101:57 - now what do I mean by constant a
102:00 - constant simply means there is some
102:02 - value which we don't want to change and
102:04 - that is what we are indicating by
102:06 - writing everything in the upper case
102:09 - Now features hover over our variable you
102:12 - can see on the left we have constant
102:15 - so that means our code editor knows that
102:18 - this is a constant but we can go further
102:21 - and we can improve our typing for this I
102:24 - am going to import and use something
102:26 - from an additional package
102:29 - now what is a package
102:31 - package is basically some code that the
102:34 - developers of python have written and
102:36 - have put all of this code inside a
102:38 - library which is called as the standard
102:40 - Library so what I'm going to do is
102:43 - I want to say I want to go to my
102:46 - typing package so this package lives
102:50 - inside the python standard Library
102:52 - please remember that standard library is
102:55 - already built into python so from the
102:57 - package of typing I want to import
103:03 - finally and we can wrap this integer
103:06 - inside
103:08 - finally
103:11 - now it's very clear that Iron Man attack
103:14 - power it's not just a variable it's a
103:17 - constant and we don't want to change the
103:19 - value of the constant throughout our
103:21 - program let us repeat the same thing for
103:24 - Black Widow Spiderman and Hulk as well
103:27 - the next superhero would be our Black
103:30 - Widow and she has a power of 180 the
103:35 - next one would be Spider-Man Spider-Man
103:37 - has an attack power of 190. the last
103:40 - superhero would be Hulk and Hulk since
103:43 - he is the biggest guy he has an attack
103:45 - power of 300. let me put up some
103:48 - commands right here so
103:50 - this is where we are declaring our
103:52 - constants and on the top let me put up
103:55 - one more comment so this is the stuff
103:57 - that we are importing now let's go back
103:59 - to our outline just to figure it out
104:01 - what we are supposed to do next
104:04 - we have defined the attack power now we
104:07 - also need the life
104:09 - so let me go to the next line and here I
104:12 - am going to define the life of Thanos
104:15 - and the life of Thanos is 1500. as you
104:19 - can see I don't want the life of Thanos
104:21 - to be a constant I want it to be a
104:23 - variable that's why I am declaring
104:25 - everything in small case
104:28 - and my my pie is smart enough to infer
104:31 - that Thanos is of the type of integer or
104:35 - if you want to be explicit you can
104:37 - always type int right over here the
104:40 - reason why I don't want it to be
104:42 - constant would get much more clear when
104:44 - we implement the logic for the game now
104:46 - let's go back to our outline
104:48 - and here you can see we have a couple of
104:51 - constraints the first constant is
104:53 - Avengers can only attack in pairs so let
104:57 - us go back to our game and I want the
104:59 - game users the ability to choose our
105:02 - pairs in order to give this ability I am
105:05 - going to create one more variable called
105:08 - as choices and let me assign it the
105:10 - value of 0. again I don't need to
105:13 - annotate as integer because my Pi would
105:16 - be smart enough to infer that my choice
105:19 - is variable would always be an integer
105:22 - after this let us create a couple of if
105:24 - and else blocks and let us start
105:26 - creating our pairs for our Avengers for
105:30 - the sake of Simplicity I am just going
105:32 - to create pairs in line so what I mean
105:34 - the first pair would be Iron Man and
105:37 - Black Widow
105:38 - the second pair would be Black Widow and
105:41 - Spider-Man
105:42 - the third pair would be Spider-Man and
105:44 - Hulk and the fourth pair would be Iron
105:47 - Man and Hulk but you're free to make the
105:49 - pairs in whatever choice you want
105:52 - so here we can say if my choice
105:56 - is one in that case I simply want to
105:59 - print out that Iron Man and Black Widow
106:02 - are attacking Thanos the next choice
106:04 - would be
106:05 - Choice number two
106:07 - and this time I want to print out Black
106:10 - Widow and Spider-Man are attacking
106:12 - Thanos
106:14 - next choice would be three
106:17 - and this time Spider-Man and Hulk are
106:20 - attacking Thanos and the last one
106:25 - if the choice is number four then Hulk
106:28 - and Iron Man are attacking Thanos while
106:31 - doing all of this let us not forget that
106:33 - we want to ask the user for the choice
106:36 - of The Avengers
106:38 - so let us Implement that logic and I
106:40 - want to implement that logic before our
106:42 - if and else blocks
106:44 - so here I can since we want to ask the
106:47 - user for the input we need an input
106:49 - block
106:51 - and let us display a prompt message
106:53 - saying that enter your pair number
106:55 - we want to assign the input back to our
106:58 - variable of choice so Choice goes on the
107:02 - left
107:03 - and let me save my program but as you
107:05 - can see we have a small bug so if we
107:08 - just try to hover
107:09 - you can see that we have an error saying
107:12 - that
107:13 - incompatible types in assignment
107:15 - expression has type of string variable
107:18 - has type of integer
107:20 - so this was what I was telling you about
107:23 - variable has the type of integer our
107:27 - variable of choice as you can see on
107:29 - line number 29 we have declared a
107:31 - variable called as choice
107:32 - and the type of this variable is an
107:35 - integer
107:36 - but if you hover on input and if you
107:39 - read the documentation
107:41 - it is actually giving us a string
107:45 - so this is where when you start thinking
107:47 - in types it's going to help you to avoid
107:49 - a lot of bugs to address this bug it's a
107:53 - very simple solution
107:54 - we simply want to convert the string to
107:58 - an integer
107:59 - and the way to do that is by using a
108:02 - cast let me just show you how it is done
108:04 - so I am going to wrap all of this inside
108:06 - my brackets
108:08 - and I want to cast all of this into an
108:11 - integer
108:13 - so what this means is my input is going
108:16 - to give me a string and I want to
108:18 - convert that string into an integer
108:21 - right over here
108:23 - now our types are going to match on the
108:26 - left is also an integer and on the right
108:28 - is also an integer now let me see my
108:31 - program and let me try to run it
108:35 - suppose I want my pair number two
108:39 - you can see Black Widow and Spider-Man
108:41 - are attacking Thanos
108:43 - let me try to run the file one more time
108:46 - let me go by pair number four
108:48 - Hulk and and man are attacking Thanos
108:51 - so we have some basic logic in place
108:54 - this time let us display a nice message
108:57 - to the user informing them of all of the
108:59 - pairs which are there inside the game
109:02 - so before I ask the input I want to
109:05 - display a nice message for this I am
109:08 - going to create a new variable called as
109:10 - message and I am going to assign some
109:13 - string value to it so let me create a
109:15 - variable called as message
109:17 - and I'm going to assign some value to it
109:21 - and this is the value
109:23 - so please note that I am creating a
109:25 - multi-line string by using triple quotes
109:28 - and just before we can show the choices
109:31 - I want to print out the message let us
109:34 - do that right over here so we can say
109:36 - print and my message let me save the
109:40 - file and let's try to run it
109:43 - and this time we have a very nice
109:45 - message and we can see all of the pairs
109:48 - who can attack Thanos
109:50 - this time let us go with the pair number
109:53 - three
109:54 - and we get the output that
109:56 - Spider-Man and Hulk are attacking Thanos
109:59 - let me clear up my terminal
110:01 - and let us go back to our code
110:05 - now since this message is never going to
110:07 - change I can actually make it as a
110:10 - constant so let me change from the
110:13 - lowercase to the upper case
110:16 - and here as well
110:18 - so we have a message in the form of a
110:21 - constant let me put up a comment right
110:24 - over here saying that this is going to
110:26 - be one of my helper message
110:28 - and I can utilize this message multiple
110:31 - times whenever I want throughout my
110:33 - program
110:34 - now the next part would be since we have
110:36 - multiple chances of attacking Thanos we
110:39 - need some kind of a loop and inside the
110:42 - loop we can keep on attacking Thanos for
110:44 - at least three times in order to
110:47 - simulate this Loop situation I am going
110:50 - to use a while loop so I can just come
110:52 - down over here and just before my print
110:55 - message I can see
110:57 - while
110:58 - true
111:00 - and let me indent it's why it has to be
111:03 - while not white and let me indent all of
111:07 - this thing
111:08 - one tab space inside so all of this
111:10 - belongs to the while loop now now let's
111:13 - see since we have a while loop we also
111:16 - need some kind of a circuit breaking
111:18 - mechanism in order to exit
111:21 - now let's go back to our outline and see
111:24 - how we can do that one of the constraint
111:26 - is that we only have three chances of
111:29 - attacking Thanos
111:30 - another constraint is if we have already
111:33 - lost or we have already one then we can
111:36 - simply break out and we don't have to
111:37 - play a game so we are going to combine
111:39 - this logic together and come up with a
111:42 - very simple circuit breaking mechanism
111:45 - so let me go back to my code
111:47 - now inside my while loop we need to have
111:50 - some sort of circuit breaking mechanism
111:52 - so let me put up a command either we can
111:55 - break out whenever we win or we can
111:59 - break out whenever we lose so let's
112:02 - write our logic right we are but before
112:05 - adding the logic we need to create one
112:08 - more variable and that variable is going
112:10 - to hold our number of attacks as you can
112:13 - see the constants we have three chances
112:15 - for an attack so let's save that data
112:18 - inside one variable let me go to the top
112:20 - and declare a variable right over here
112:24 - so this is called as attack numbers and
112:26 - I am going to assign it a value of 0
112:28 - initially
112:29 - let us go back to the while loop and let
112:31 - us Write Our Winning or our losing
112:34 - conditions first let us see the winning
112:37 - condition so we can say if
112:39 - the life of Thanos
112:42 - is less than or equal to 0 that means we
112:45 - have 1 but we need to add one more
112:48 - condition right over here the second
112:50 - constraint and that constraint would be
112:52 - if my number of attacks is also less
112:55 - than or equal to 3.
112:57 - only in this case I am going to win
112:59 - otherwise I am going to lose and I am
113:02 - going to print some kind of a message
113:03 - over here so right now let me
113:05 - just put up a comment that this is for
113:07 - the for the win
113:10 - for the else block that means if we have
113:12 - lost so we can say if my attack numbers
113:16 - are greater than or equal to 3 oh this
113:20 - has to be else and if
113:23 - now in case my attack numbers are more
113:26 - than or equal to 3
113:27 - in that case I am actually going to lose
113:33 - now before I forget we need to add the
113:35 - break statements to actually
113:38 - break out of the while loop so let me
113:41 - add them right away
113:43 - the next thing that we need to do is we
113:46 - want to display a nice winning or a nice
113:48 - losing message so what I have done is I
113:51 - have already written a nice message
113:54 - which I am going to paste it right over
113:56 - here just above the message so the first
113:59 - one would be my winning message and it's
114:02 - going to be you successfully saved
114:04 - zorton along with a couple of emojis
114:08 - and since this is a constant
114:10 - all of this is capital and this is final
114:13 - Str if you want it you can write this if
114:16 - you don't want you can take it out and
114:18 - my pie is smart enough to infer that
114:20 - it's a constant of the type of string
114:22 - the next message would be our losing
114:25 - message so I'm just saying that Thanos
114:27 - killed Avengers and captured zorton
114:30 - the reason why I have all of this
114:33 - separately in a constant or in a
114:35 - variable is because in future if you
114:37 - don't like this emojis you can simply
114:39 - take them out
114:41 - and you don't have to change all of the
114:43 - logic that you write below you have to
114:45 - just change one constant or one variable
114:48 - and it's going to reflect throughout
114:50 - your code it makes our code much more
114:52 - manageable let me put back my Emojis I
114:55 - just love them
114:57 - and go back to our if and else block let
115:00 - me
115:02 - remove this and I can say here I want to
115:05 - print my
115:06 - win message and
115:10 - here I want to print my
115:13 - lose message
115:16 - sorry it's going to be a lost message
115:19 - let me save my file now let us go back
115:21 - to our outline and let us see what we
115:24 - need to do next
115:26 - now we have to do the most important
115:28 - part that is how to actually simulate
115:31 - the attack unfortunately for us this is
115:34 - the most simplest part let's see how we
115:37 - can do that
115:39 - suppose you are using the first pair
115:42 - right over here in this case what's
115:44 - happening is
115:45 - Iron Man and Black Widow they are going
115:48 - to attack Thanos
115:49 - and if we just scroll up
115:52 - Iron Man Has a power of 250 Black Widow
115:55 - has a power of 180 and Thanos has a life
115:59 - of 1500
116:00 - so when Iron Man and Black Widow are
116:03 - attacking Thanos we simply want to minus
116:06 - the attack power from the life of Thanos
116:09 - and since we have two Avengers who are
116:12 - attacking Thanos we have to reduce the
116:15 - value by 250 and 180 from 1500 and that
116:19 - is how we simulate an attack
116:22 - so let's go down over here and let us
116:24 - Implement that logic
116:26 - so we can say that my new Thanos life
116:30 - would be my current Thanos life minus my
116:34 - Iron Man
116:35 - attack power
116:37 - and also minus the
116:40 - Black Widow attack power and that's it
116:44 - and after doing this we also want to
116:46 - increment the number of attacks since we
116:49 - already have done one attack so we can
116:51 - say my current attack number would be my
116:56 - attack number plus one
116:59 - so initially if you see the attack
117:01 - number is zero
117:04 - and whenever we have an actual attack we
117:07 - are going to increment it by one and
117:09 - remember we have a constraint right on
117:12 - line number 49 that we cannot have more
117:14 - than three attacks
117:16 - if we have more than three tags then we
117:18 - are going to lose the game let us do the
117:21 - same thing for our choice number 2 3 and
117:23 - 4 as well let me just
117:25 - copy this
117:27 - let me paste over here and before the
117:31 - attack I have to say that my
117:33 - Thanos life would be my Thomas life
117:36 - minus
117:38 - Black Widow attack power minus the
117:42 - Spider-Man attack power
117:46 - let me go to the new line right here
117:49 - again the same thing let me copy here as
117:51 - well
117:52 - and then here my Thanos life would be my
117:57 - Thanos life minus
117:59 - Spider-Man attack power minus
118:02 - Hulk attack power
118:06 - let us go to the last choice
118:08 - and here we can say again the same thing
118:10 - Thanos like would be
118:13 - Thanos life minus
118:15 - Hulk attack power
118:16 - minus Iron Man attack power
118:20 - here is my Iron Man
118:22 - save it and that's it I think we are
118:25 - good to go and we can try out our game
118:27 - so let's give it a try
118:30 - let me take this up a little bit
118:34 - so the first thing is we have a nice
118:36 - message saying that we have the
118:38 - following pairs
118:39 - for the first pair I want to go with the
118:42 - first one Iron Man and Black Widow so I
118:44 - just press one and enter
118:47 - so I get the message that Iron Man and
118:50 - Black Widow are attacking Thanos
118:52 - now it's asking me for the second pair
118:54 - now I can say I want to go with Black
118:58 - Widow and Spider-Man so I enter my
119:01 - choice number two
119:03 - again we get a message saying that black
119:05 - Widow and Spider-Man are attacking
119:07 - Thanos and it is asking me for my third
119:09 - pair let me go with Hulk and Iron Man so
119:12 - I can type 4
119:15 - and that's it and unfortunately we have
119:17 - lost the game
119:19 - Thanos has killed Avengers and he has
119:21 - captured zotan
119:23 - let us play the game one more time
119:26 - this time I am going to choose my pair
119:28 - number four Hulk and Iron Man
119:31 - and my pair number one and again my pair
119:34 - number four and that's amazing finally
119:38 - we have been able to save zorton you can
119:40 - see the message right over here
119:43 - and this brings us to the end of section
119:45 - number three
119:46 - just take a break have some nice snacks
119:48 - or coffee and I will see you in the next
119:50 - section
119:51 - welcome to a brand new section
119:54 - this section is all about data
119:56 - structures
119:57 - data structures is just a common name
120:00 - for how we can group our data together
120:02 - and the first data structure that we are
120:05 - going to see is called as a list now
120:07 - since Lewis has a migrated to zorton he
120:10 - has been making a lot of progress and in
120:13 - Jordan people greet each other by saying
120:15 - Zola
120:16 - so Lewis wants to write a simple program
120:19 - where he can beat all of his friends by
120:21 - saying Zola followed by the name of the
120:23 - friend you can do this by using multiple
120:26 - print statements but that is not a very
120:29 - effective approach what if you have
120:31 - hundreds or thousands of friends then
120:34 - you can imagine that using a print
120:36 - statement for each and every friend
120:38 - would get too tedious instead python
120:41 - offers a much better solution
120:43 - and that is called as a list so what we
120:46 - are going to do is we are going to
120:47 - create a list and after that we are
120:50 - simply going to look through the list
120:52 - and print a grading message to each one
120:54 - of his friend let's see how to do this
120:57 - behind the scenes I have created a new
120:59 - folder called as zero four data
121:01 - structures and I'm working in this file
121:04 - called as friends dot pi so let's get
121:07 - started with this one let us create a
121:09 - variable called as friends oh let me get
121:12 - the spelling right
121:14 - now this friends is going to be a list
121:17 - for creating a list you have to use open
121:20 - and closing square brackets and inside
121:22 - this you have to insert all of your
121:24 - elements
121:25 - suppose the first friend is CC
121:28 - and then we have a bunch of other
121:30 - friends Rocco Chico and Nico so this is
121:34 - what a list in Python looks like now
121:37 - let's see how we can add the type hints
121:39 - to this one
121:40 - now obviously this is a list so what we
121:43 - can do is here we can simply say that
121:45 - friends is a list and after that let us
121:48 - try and specify what kind of data that
121:51 - our list would be holding and if you see
121:54 - all of our data types are strings so
121:57 - what we can do is we can simply tell
121:58 - that this list is going to be a list of
122:01 - strings the next point that I want to
122:04 - tell you is all the lists in Python they
122:08 - always start with the index number of
122:10 - zero so let me put a command and then
122:12 - let me try to explain what's happening
122:14 - so this is how your list will look
122:16 - inside the memory
122:18 - on index number 0 it will have CC on
122:21 - index number one it will have Roku on
122:24 - index number 2 Chico and so on always
122:27 - remember that list will always start
122:29 - with the index number of 0 and this is
122:32 - common across all of the programming
122:34 - languages not only in Python the next
122:37 - point that I want to share is if you see
122:40 - the length our length is 4 that means we
122:43 - have four elements inside the list so
122:45 - this is the first element second third
122:48 - and fourth so the length of our list
122:50 - would be four but the index number would
122:54 - be up till 3. let's print out the
122:57 - friends and see how they look like so
122:58 - let me print the prints right over here
123:01 - and let me run this file
123:04 - so these are the friends we have friends
123:06 - right over here now let's create a very
123:09 - simple for Loop and greet all of his
123:12 - friends
123:13 - so let me start by putting some comments
123:15 - let me take this a little up and we can
123:18 - use a very simple for Loop so we can say
123:21 - for
123:23 - friend in my list of friends
123:27 - for every friend I simply want to print
123:30 - out a greeting message saying that
123:33 - Zola followed by
123:36 - the name of my friend
123:38 - let us run this file
123:40 - so here we have the output Zola CC Zola
123:43 - Rocco and so on
123:46 - let's see what Lewis wants to do next
123:49 - so Lewis simply wants to count his
123:51 - number of friends
123:52 - so remember I just told you that the
123:55 - length of this list would be 4 and we
123:57 - can find that out by using an inbuilt
124:00 - function which is also called as length
124:02 - let me show you right over here let's
124:05 - print out friends
124:08 - length
124:10 - and inside the curly brackets I can find
124:12 - the length by using the inbuilt function
124:15 - called as length Len and let us pass our
124:19 - list to it just save and run your file
124:21 - and your we have friends length is 4 and
124:26 - that is what we were expecting let's see
124:28 - what Lewis is doing next oh he had a
124:32 - fight with Nico and he wants to unfriend
124:34 - him
124:35 - now let's see how we can take Nico out
124:38 - of our list so we can see Nico Nico is
124:41 - the last element inside our list and we
124:44 - can remove him by using an inbuilt
124:46 - function which is called as Pop let me
124:49 - show you how it is to be done
124:51 - so I can say I want to unfriend
124:54 - and I can say from my list of friends I
124:58 - simply want to pop the last value now
125:00 - since Nico is the last element we can
125:03 - use this method to remove an element
125:05 - from the list
125:06 - let us print out the friend that we have
125:09 - just unfriended so we can just say
125:12 - unfriend and let me put my curlies and
125:16 - let me put unfriend over here let me
125:19 - also copy and paste our friends
125:22 - and let's see how our list is looking
125:25 - right now so let me just
125:27 - paste it right over here
125:29 - just save it and try to run your file
125:32 - and here we have it we have unfriended
125:35 - Nico and this is how our current list of
125:39 - friends looks like Let Us Go Back
125:42 - let us see what Lewis is up to this time
125:45 - so Lewis has made a new friend by the
125:47 - name of zico so let us see how we can
125:50 - add Z code to our list we can add zico
125:53 - by using another input function by the
125:56 - name of append let's see how to do that
125:59 - so here I can say in my list of friends
126:02 - I want to append one more element and
126:05 - that element is called as zico
126:09 - let us copy this line and paste the new
126:12 - list
126:13 - let me save it let me try to run my file
126:17 - and here you can see we have zico at the
126:19 - back
126:20 - one more thing you must have noticed
126:22 - that I am not assigning a variable for
126:25 - this operation so for example I am not
126:27 - doing something like this
126:29 - the reason is if you just hover over
126:31 - append
126:33 - you can read the documentation this
126:35 - function returns none that's why I'm not
126:38 - assigning it back to my list of friends
126:43 - but at the same time if you hover over
126:45 - Pop now this method of Pop is actually
126:48 - returning back a string that's why I'm
126:51 - using a new variable on the left to
126:53 - collect that data
126:55 - but for this we can't do the same now
126:57 - let's see what Lewis is up to so let me
127:00 - go down right over here
127:02 - and let me paste a new comments this
127:05 - time Lewis wants to know who is his
127:08 - third friend inside the list let us
127:10 - check it out let me open up my terminal
127:12 - so this is how our latest list looks
127:16 - like so cc is a first print Rocco is the
127:19 - second one and Chico is a third friend
127:22 - so let's see how we can get this value
127:24 - from our list and we can do that by
127:27 - using our indexes
127:29 - so just remember let me scroll a little
127:31 - up our list it has a set of indexes and
127:35 - always remember that the index is going
127:37 - to start from 0. now let's see how we
127:40 - can get the third value from our list
127:43 - so here I can simply print out
127:46 - from my list of friends
127:48 - I simply want the friend who is on the
127:51 - index number 2.
127:53 - now remember we are using 2 because our
127:57 - index starts at zero
127:59 - let me put a command
128:01 - so let me save this file and let us try
128:03 - to run this file and here we have the
128:06 - output Chico is the third friend inside
128:09 - the list
128:10 - let us go back
128:12 - this time Lewis again had a fight but
128:15 - this time he had a fight with Roku and
128:18 - we need to remove Roku from our list as
128:20 - well
128:21 - let me scroll to our list
128:24 - if you see Roku is inside our list at
128:27 - index number one so let me show you how
128:29 - we can do this so let us go down
128:32 - here I can say from my list of friends I
128:36 - simply want to remove
128:39 - Roku that's it
128:42 - let me copy this line and
128:46 - paste it over here and let us try
128:48 - running this file so this is our new
128:51 - list we have CC Chico and zico we have
128:55 - successfully removed Roku from our list
128:58 - let's see what Lewis is up to next and
129:01 - it seems like Lewis and Rocco have
129:03 - become friends again
129:05 - so let's see how we can add Roku back to
129:07 - our list
129:08 - remember that Roku was at index number
129:11 - one so we want to insert Rocco back to
129:14 - its original index so let me show you
129:16 - how it is to be done so here I can say
129:18 - in my list of friends I want to insert
129:22 - at index number one
129:24 - the element of groco
129:27 - and let me try to print out the list one
129:30 - more time
129:32 - that's it just see run your file and
129:35 - this is the new list we have Roku back
129:38 - at index number one inside the friends
129:40 - list
129:41 - let's go back and let's see what Luis
129:43 - wants to do next so this time Lewis
129:46 - wants to confirm if Roku is in the
129:49 - friends list or not and we can do this
129:51 - by using our if and in syntax
129:54 - so what we can say right over here is
129:57 - if
129:58 - Roku
130:00 - in my list of friends then I simply want
130:04 - to print out yay Roku is in the front
130:07 - list or else I can print out
130:09 - some other message so let me save the
130:12 - file and let us try to run this one
130:15 - now since Roku is inside the list we get
130:18 - the output that yay the Roku is in the
130:21 - friends list
130:22 - let us go back
130:24 - let's see what's happening next so this
130:27 - time Lewis patches up with Nico as well
130:29 - and this time Niko has become his number
130:32 - one friend so we want to add Nico back
130:35 - to our list of friends
130:37 - but since Nico is his number one friend
130:40 - right now we want to add Nico at the
130:43 - beginning of the list so we can do this
130:45 - by using the same syntax
130:47 - right over here we can use the same
130:49 - syntax
130:50 - and let's see how to do this so we can
130:52 - say
130:53 - in my list of friends I want to insert
130:57 - at index number 0
131:00 - the element of Nico and let us print our
131:04 - list of friends as well so let me go
131:06 - down
131:07 - let me paste and let us run this file
131:11 - and here you can see we have Nico as the
131:14 - first element inside of a list
131:17 - let us go back so this time Lewis wants
131:20 - to sort his friends in alphabetical
131:22 - order
131:23 - and luckily it's very simple we simply
131:25 - have to say
131:27 - friends I simply want
131:29 - to sort it
131:30 - let me copy and paste the list of
131:33 - friends
131:34 - and let us run this file
131:37 - and here we have the output you can see
131:40 - all of the names are sorted
131:41 - alphabetically so CC Chico comes first
131:45 - Nico Rocco and finally we have zico
131:49 - let us go back
131:50 - so this time Lewis doesn't really like
131:53 - this ordering and he wants to reverse
131:55 - the order
131:57 - luckily this too is very simple
132:00 - let me just copy this and let me
132:03 - paste it right over here
132:05 - and instead of sort I simply have to say
132:08 - I want to not remove I want to reverse
132:12 - that's it and let us run this file
132:16 - and this time we have the new list and
132:19 - you can see the first element is zico
132:21 - and the last element is CC
132:24 - let's see what's happening next
132:27 - and this time Lewis again had a fight
132:29 - with Nico and we again need to remove
132:32 - Nico from our list but before removing
132:35 - Nico let us have a look at our list
132:38 - so this is how our list is currently
132:40 - looking like and Nico is the third
132:43 - element or you can see the index number
132:45 - of Nico is two so keeping this in mind
132:49 - let us go back and see how we can remove
132:51 - the go from the list earlier I have
132:54 - shown you two different methods of
132:56 - removing elements one was this one of
133:01 - remove and the first one was with the
133:03 - pop method let me show you one more
133:05 - method Again by using pop let me copy
133:09 - all of this
133:10 - and let us go down
133:15 - now since Nico is at index number two
133:18 - what I can do is I can tell python that
133:21 - I want to pop an element from an index
133:23 - number two
133:24 - let us save and let us run this file for
133:27 - the last time
133:28 - and here we have it we have unfriended
133:31 - Nicole and this is our updated list
133:34 - the next data structure that we are
133:36 - going to learn is called as a tuple
133:38 - behind the scenes I have created a new
133:41 - file which is called as subjects.pi and
133:44 - let's see what's going to happen let me
133:46 - collapse my sidebar
133:49 - now it's time for Lewis to go to school
133:51 - and he has to choose his subjects but
133:55 - his school wants to make sure that once
133:57 - a student chooses their subjects they
134:00 - won't be able to change it so let's see
134:02 - how we can do this and the way to do
134:04 - this is by using a tuple
134:07 - so you can imagine Tuple to be like a
134:10 - stricter brother off list once you
134:12 - create a tuple you can't change or
134:14 - modify it so let's see how to create a
134:17 - tuple
134:18 - so let's say that we want to create a
134:20 - tuple by the name of
134:22 - subjects
134:24 - and the way to create a tuple is by
134:26 - using the round brackets and instead of
134:29 - these round brackets we have to add our
134:32 - elements suppose the first subject would
134:35 - be maths the next could be
134:38 - science then we can see history now
134:43 - remember that's similar to our list our
134:45 - tuples will also start with index number
134:47 - zero that means the index number for Max
134:51 - is 0 for science it would be 1 and for
134:54 - history it would be two
134:56 - let us see how to add typing for this
134:58 - one
134:59 - so here I can say that subjects is
135:02 - obviously a tuple
135:04 - and the way to define its type is we
135:06 - have to put our square brackets and
135:09 - since tuples are strict we have to
135:11 - define the data type for each and every
135:14 - element
135:15 - so for example in this Tuple we have
135:17 - three elements and the types are string
135:20 - and string so here we can see that the
135:23 - first element is a string
135:25 - the second is the string as well and the
135:28 - third is the string as well
135:30 - suppose we had one more element
135:32 - so if I say that we have one more
135:35 - element as 13
135:36 - now the data type of 13 is an integer
135:40 - so what we would have to do is after
135:42 - this we would have to say that my fourth
135:45 - element is of the type of integer
135:48 - so make sure whenever you are creating a
135:50 - tuple you write the data type of all the
135:53 - elements inside the Tuple let me take it
135:55 - out this is not required for our example
135:57 - right now
135:58 - let me also put up a comment so saying
136:01 - that the index number for match is 0 for
136:04 - Sans is 1 and history is two
136:07 - let's see what we can do next so let me
136:10 - take it a little up
136:12 - so this time Lewis wants to count his
136:14 - number of subjects and you can do that
136:17 - by using the inbuilt function called as
136:19 - length so we can use a simple print
136:22 - statement and we can say that
136:24 - number of
136:27 - subjects then inside our curly brackets
136:30 - we can use the inbuilt function called
136:32 - as length and let us just pass our Tuple
136:36 - inside so we can say subjects
136:39 - let us run and see the output
136:42 - and here we can see that the number of
136:44 - subjects is three
136:46 - let us go back
136:47 - the next thing that Lewis has to do is
136:50 - Lewis has to sign up for all of the
136:52 - subjects
136:54 - so let us create a very simple Loop and
136:56 - by using the loop we can sign up for all
136:58 - of the different subjects
137:00 - you can use your regular for Loops to
137:03 - iterate over the Tuple so here it goes
137:06 - we can see for my subject in my couple
137:11 - of subjects
137:13 - for each iteration I can simply print
137:15 - out a statement saying that Lewis is
137:19 - signing up for let me get my spelling
137:24 - right Mr be signing up for and inside
137:27 - the curly brackets we simply have to say
137:29 - for my subject let us run and let us see
137:33 - the output
137:34 - so here it is Lewis is signing up for
137:37 - maths and then for Science and the last
137:41 - one is history
137:43 - let us go back
137:44 - so this time Lewis wants to see which is
137:47 - his second subject and we can do that by
137:51 - using our index so as I just mentioned
137:54 - tuples also have indexes so the second
137:57 - subject would have an index of one
138:00 - so let us try and print it out
138:02 - here I can simply say that I want to
138:05 - print out
138:06 - from my top love subjects the subject at
138:10 - my index number one
138:11 - also let me put up a comment saying that
138:14 - since the double starts from index 0 we
138:17 - are using one let us see the output
138:20 - so you can see the second subject is
138:23 - science
138:24 - let us go back
138:25 - and this time let us see what's
138:27 - happening
138:28 - so this time the school wants Lewis to
138:31 - take another three subjects to get his
138:33 - full credits now what happens is once
138:36 - you create a tuple you can't add
138:38 - different elements to a tuple
138:40 - for example when we saw list we could
138:43 - append elements to the list but you
138:45 - can't do for the Tuple then what can you
138:48 - do well you can add two different tuples
138:50 - and create a new Tuple let me show you
138:53 - how it is to be done so suppose the
138:56 - additional subjects which he has to take
139:00 - would be a new Tuple and we can say that
139:03 - the new subjects are English Python and
139:06 - physics on the next line we can create a
139:09 - new Tuple called as my total subjects
139:13 - and we can simply add our top subjects
139:17 - plus our additional subjects
139:20 - so now we have a new Tuple which has all
139:23 - of the subjects together
139:25 - we can also try and print it out so here
139:28 - let me just say that my
139:30 - all subjects would be my couple of total
139:35 - subjects let us run it
139:37 - and here we have the output you can see
139:40 - we have English Python and physics at
139:42 - the back and also we have maths Science
139:45 - and History
139:47 - so this is our newly created Tuple let
139:51 - us go back and let's see what's
139:52 - happening this time now it's obvious
139:55 - that out of all of the subjects Lewis
139:57 - loves Python and he wants to make sure
140:00 - that python is inside his list of
140:02 - subjects so we can check for an element
140:05 - inside a tuple by using our if and else
140:08 - blocks so let us see how to do that
140:12 - so here we can simply say that if python
140:15 - is in my Tuple of total subjects if this
140:20 - is true then I simply want to print out
140:22 - yay Lewis is going to Learn Python if
140:26 - not so we can say else
140:28 - we can print out oh no no python for
140:32 - Lewis so let us save this file and let
140:35 - us try to run this file for the last
140:36 - time
140:37 - and here we have the output
140:39 - now since python is inside our Tuple we
140:43 - get the output of a Lewis is going to
140:46 - Learn Python
140:48 - now let's try to learn about
140:49 - dictionaries
140:51 - dictionaries are of mapping type that
140:54 - means the dictionary are going to map a
140:56 - key to a value
140:58 - so let us see what's going to happen
141:00 - right now behind the scenes I've created
141:03 - a file called as marks.pi and I'm
141:05 - working in this one so let me collapse
141:07 - my sidebar and let us see what's
141:09 - happening
141:11 - now this time Lewis has given his exam
141:13 - and he has received his marks
141:16 - so let us see how it looks like so we
141:19 - can create a dictionary and call it as
141:21 - marks
141:23 - the way to declare a dictionary is by
141:25 - using your curly brackets
141:27 - and inside of this curly brackets let us
141:30 - give the key and the value pairs suppose
141:33 - the first subject is maths so we can say
141:36 - Max
141:37 - and he scored maybe 80 marks in his
141:40 - match so this is how your key and value
141:43 - pairs look like on the left of the colon
141:46 - we have a key and on the right we have a
141:49 - value
141:50 - let us give a couple of more key and
141:52 - value pairs suppose the next subject was
141:55 - science and suppose he fed 82 marks in
141:59 - science
142:00 - and let me add a couple of more subjects
142:03 - as well
142:04 - so this is his score
142:06 - and the next line let us print out all
142:09 - of this subjects we can say
142:11 - in my formatted string my marks and
142:16 - let us see marks let me save the file
142:19 - and let us try running this one
142:22 - and here is output so this is the
142:25 - dictionary that we just created
142:27 - now let us go back and see what's
142:29 - happening next
142:31 - let me put some comments right over here
142:34 - so this time Lewis wants to check all of
142:36 - the subjects now remember inside our
142:39 - dictionary the keys are our subjects so
142:43 - let us see how we can just get the keys
142:45 - out of our dictionary
142:47 - the way to do that is very simple let's
142:50 - also use a for Loop to print out the
142:52 - keys so we can say for my subject in my
142:58 - dictionary of marks
143:00 - I want to get all of the keys and for
143:03 - each iteration we simply want to print
143:06 - out the subject let us run this file and
143:08 - see the output
143:10 - so here is our output we have all of the
143:13 - keys inside our dictionary
143:15 - now let us go back and let's see what's
143:17 - going to happen next
143:19 - so this time Lewis wants to check all of
143:22 - his marks now again remember that the
143:25 - marks are the values
143:27 - so anything on the right is the value
143:29 - and this time we want to get only the
143:32 - marks out of our dictionary
143:34 - so let us do that and the way to do that
143:37 - is similar to something like this so let
143:40 - me show you how it is to be done
143:42 - so we can say for my score
143:45 - in my dictionary of marks I want to get
143:49 - only the values
143:50 - and for each iteration I just want to
143:53 - print out my score
143:56 - let me save the file and let me try to
143:58 - run this file and here we have the
144:01 - output here you can see we have all of
144:03 - our score
144:05 - let us go back
144:07 - let us see what Lewis wants to do next
144:09 - so let me take a little up
144:12 - this time Lewis wants to check out all
144:15 - of the subjects and marks together that
144:18 - means we simply have to print out our
144:20 - key and value pairs so let us see how we
144:23 - can do that
144:24 - again let us use our for Loop to print
144:26 - out the key and values so we can say
144:29 - for
144:31 - now since the keys is for the subjects
144:34 - let us call subject and on the right we
144:37 - have score so we can say score
144:40 - in my dictionary of marks I want to get
144:44 - all of the items now this method is
144:47 - going to return our key and values which
144:50 - we are capturing right over here
144:53 - and for each iteration let us print out
144:56 - our KN value pairs so here I can say
145:00 - that my
145:01 - subject and here we can say the score
145:06 - and we can say the score is out of
145:09 - just let me save it and let us try
145:11 - running this file
145:13 - and here we have the output match Lewis
145:16 - code 80 out of 100 science was 82
145:19 - history was 78 and so on
145:22 - now let us go back and see what we have
145:24 - to do next
145:26 - and this time Luis wants to check if he
145:29 - has passed in all of the subjects or not
145:31 - and the passing marks are 50.
145:34 - so let us see how we can do this
145:36 - we can do this by using our for Loop and
145:39 - our if and edge blocks so let me show
145:41 - you how it is to be done
145:43 - so here we can say for
145:46 - my subject and my score in my marks dot
145:52 - items
145:53 - for each iteration I want to check if my
145:57 - score is greater than or equal to 50
146:00 - only in that case I can print out that
146:04 - subject and I can say pass
146:08 - else if the score is less than 15 that
146:11 - means he has failed and so we can print
146:14 - out the name of the subject so we can
146:17 - say
146:18 - the subject and we can see field let me
146:22 - save it and let me try to run this file
146:25 - so let's see how he has done in his exam
146:28 - match is a pass science is a pass
146:30 - oh but what's this English is a field so
146:34 - let's see what's going to happen next
146:36 - let us go back to our file
146:38 - so let me take it a little up and let me
146:41 - put some comments so those things that
146:44 - there was some kind of a totally mistake
146:46 - for his English paper and he's asking
146:48 - for a revaluation
146:50 - and after the revaluation the new marks
146:53 - are 70 so let us see how we can update
146:56 - the values in our dictionary
146:58 - so this time what we want to do is let
147:01 - me show the dictionary
147:03 - so this time we want to update the marks
147:06 - of English from 35
147:08 - 270 so let us see how we can do that so
147:12 - let me go down
147:14 - and here I can say that from my
147:17 - dictionary of marks I want to go to my
147:20 - key of English
147:22 - and I want to assign the new value of
147:25 - 17. so this is how you can update the
147:28 - values inside your dictionary
147:30 - on the next line we can print out the
147:32 - value we can say something like this
147:35 - Lewis
147:37 - score inside the curly brackets we can
147:40 - see the marks of English
147:44 - in English
147:46 - so let me just save this and let me try
147:48 - to run this file
147:51 - so here we have the output saying that
147:53 - Lewis scored 70 in English
147:56 - now here what we are doing is this
147:58 - syntax we are just retrieving the value
148:01 - from our dictionary
148:03 - so the syntax means that from my
148:05 - dictionary of marks I want to get the
148:09 - value for the key of English let us see
148:12 - what is happening next now this time low
148:15 - is also took an exam for geography and
148:17 - his code 78 marks
148:20 - so this time what we have to do is we
148:22 - have to create a new key and a new value
148:24 - this time remember we don't have
148:26 - geography inside our dictionary of marks
148:29 - and we have to create one right now
148:31 - so what we can say is for my dictionary
148:34 - of marks I want to create a new key for
148:38 - my geography and I want to assign the
148:41 - value of
148:42 - 78 to it and Lewis also wants to check
148:46 - if he has passed in all of his subjects
148:48 - or not
148:49 - so let me go up and I just have to copy
148:52 - all of this and let me paste it right
148:56 - over here
148:57 - so here is the output and it looks like
149:00 - Lewis has passed in all of his subjects
149:03 - and you can also see we have the output
149:06 - for geography as well
149:08 - now let us go back so let's see what's
149:11 - happening this time
149:13 - so this time his friends on zorton they
149:16 - want to know how much Lewis scored in
149:18 - Python so let us see how we can retrieve
149:21 - the values from our dictionary so let me
149:24 - show you the first alternative
149:26 - let us create a new variable called as
149:29 - our python score and we can retrieve a
149:33 - value by using the syntax so we want to
149:35 - say that go to my dictionary of marks
149:38 - and I want you to get the value for the
149:41 - key of python and that's how you
149:44 - retrieve the value but this syntax has a
149:47 - couple of limitations which I'll explain
149:49 - it shortly but first let us print out
149:51 - these values let us print out the marks
149:54 - in Python so we can say Lewis
149:57 - core the python score in Python let us
150:03 - run this file
150:04 - and here we have the output saying that
150:07 - Lewis scored 98 in Python now let me
150:10 - show you one more alternative method let
150:13 - us go down and let me
150:15 - put one more comment and here again we
150:17 - can say that the python score and this
150:21 - time we can use one more alternate
150:23 - syntax so what we can say that from a
150:25 - dictionary of marks I want to get the
150:29 - values for my key of python and on the
150:33 - next line let us print out the same
150:35 - statement so let me copy from here and
150:38 - let me paste it right over here
150:40 - and let us run our file
150:43 - so this time we can see we again have
150:45 - the output now let us go back and let's
150:48 - see what's happening next
150:50 - so let us see what's happening this time
150:53 - and this time his friends from Earth
150:56 - they want to know how much Lewis code in
150:59 - Java
151:01 - so what we can do we can create a
151:02 - variable called as
151:04 - JavaScript and we can save from a
151:07 - dictionary of marks I want to get the
151:10 - value for my key of java and the next
151:15 - line let me try and print it out so what
151:17 - I can say that I want to print out Lewis
151:20 - code
151:22 - Java score in Java let me see and let me
151:27 - run this file and this time you can see
151:29 - that we have an error and the error is
151:32 - called as key error now this is because
151:36 - our dictionary does not have a keyword
151:38 - as Java so this is one of the
151:40 - limitations of using this syntax right
151:44 - over here let me put up a command saying
151:46 - that this syntax will throw an error now
151:50 - let's see a better way of getting the
151:52 - values from our dictionary and that is
151:55 - by using the get method that we just saw
151:58 - on the next line let me paste some
152:02 - comments and I want to comment this out
152:04 - because this is always going to fail so
152:07 - let us go down right over here
152:09 - let me take everything up so here let me
152:12 - create one more variable called as our
152:15 - Java score and let us use the get syntax
152:18 - so what we can say is from my dictionary
152:22 - of marks I want you to get
152:24 - the value for the key called as Java let
152:28 - me save this and this time let us try to
152:31 - print out this same sentence so I can
152:34 - just copy and let me paste it right over
152:38 - here let us run this file and see the
152:40 - output
152:41 - so this time we get the output of Lewis
152:44 - scored none in Java so let us go back
152:47 - and let us see what's happening
152:49 - now this method of get returns a none if
152:53 - it can't find the value and that's what
152:56 - is happening right over here one thing
152:58 - that I forgot to show is how to use the
153:00 - typing for this one so let us go up and
153:02 - let me show you how to write the type
153:04 - hints for our dictionary
153:07 - so this variable of marks this is a
153:09 - dictionary so we can say this is our
153:11 - dictionary
153:12 - and inside the brackets we also have to
153:15 - mention the types for our keys and
153:17 - values so here we can say that since all
153:21 - of the keys are string so the key is
153:24 - going to be of the type of string and
153:26 - the values are integers so we can just
153:28 - say int and that's it now let us go down
153:32 - and let us see what's happening so here
153:34 - on the line 108 this get method is going
153:38 - to return none or if it finds a value it
153:41 - is going to return our score which is of
153:43 - the type of integer now let us use our
153:46 - if and else blocks to print something
153:48 - meaningful so here we can say that if my
153:52 - Java score is none that means if we
153:56 - can't find the value
153:58 - then we can simply print out saying that
154:02 - Lewis did not study Java
154:05 - and else we want to print out this
154:08 - statement so let me take it inside my
154:10 - else blog and let us try to run this
154:12 - file and here it is we have the output
154:15 - of Lewis did not study in Java
154:18 - now let us go back
154:20 - the last thing that I wanted to show you
154:22 - is how to delete some elements or how to
154:25 - delete the key and value pairs from our
154:28 - dictionary now suppose we want to delete
154:30 - the key and value pair for English
154:33 - then we can say that I want to delete
154:35 - from my dish media of marks
154:39 - English so this is how the syntax goes
154:41 - let me remove the extra codes
154:44 - now let us print our marks one more time
154:47 - so I can see
154:49 - marks and let us print out the marks
154:52 - right over here
154:53 - let me run this file so this is how our
154:57 - dictionary is looking and you can see we
154:59 - have deleted English from our dictionary
155:01 - as well the last thing that I wanted to
155:04 - mention for this one is the lookups and
155:07 - dictionary are extremely fast what do I
155:10 - mean by lookup
155:12 - so on line number 108 we are getting the
155:15 - value from our dictionary so this is a
155:17 - lookup when we were working with our
155:19 - list or tuples we were using indexing
155:23 - but for a dictionary we always use the
155:26 - key to get the data and this is the
155:28 - reason why lookups in dictionary are
155:31 - extremely fast
155:32 - and we would be using dictionaries and
155:35 - lists in our final project as well so
155:38 - make sure you go through them a couple
155:40 - of times and understand what's exactly
155:42 - happening
155:43 - there is one last thing that I wanted to
155:45 - show you so if you open up the code from
155:48 - the GitHub so this is the code from
155:50 - GitHub
155:51 - inside my 4.04 data structures this is
155:55 - the file which I am referring to it is
155:57 - called as dictionary
155:59 - now let me collapse my sidebar
156:02 - so here I have one more sample
156:04 - dictionary called as pizza and you can
156:07 - see the structure is very interesting
156:09 - the first key value pairs we have
156:11 - integer as the key and string as the
156:15 - value
156:16 - for the next one we have a float as our
156:19 - key the next one is even more
156:21 - interesting we have a tuple as the key
156:24 - and the last one we have a Boolean value
156:27 - as a key now the interesting part is
156:29 - this is a valid syntax
156:32 - so let me copy all of this and let me
156:35 - paste all of these things inside my
156:37 - IPython shell so here it is let me paste
156:41 - it right over here and let us try to
156:43 - print out our pizza
156:44 - so you can see we have a valid output so
156:48 - what happens is you can use any data
156:50 - type for a key as long as it is
156:53 - immutable
156:54 - so our strings are immutable integers
156:57 - are immutable floats booleans are also
157:00 - immutable and we also saw that our
157:03 - tuples are immutable as well so you can
157:06 - use all of these data types as your keys
157:10 - the way to retrieve the data is similar
157:13 - so let me give you some small examples
157:16 - so here we can say from my dictionary of
157:18 - pizza
157:19 - I want to get the value for the key of
157:22 - 10. and here we have the output
157:26 - the same thing can go for our float as
157:29 - well so we can say 8.99
157:32 - and here we have the value
157:34 - you can do the same thing for our Tuple
157:36 - as well let me copy this Tuple
157:39 - and here I can say from my dictionary of
157:42 - Pisa I want to get the value from the
157:45 - key and this time the key is a tuple so
157:47 - let me paste it right over here
157:50 - and you can see we have the right output
157:53 - but before we make such additionally I
157:55 - want you to wait and think do you think
157:57 - that this is going to be a developer
157:59 - friendly dictionary I would rather think
158:02 - not
158:03 - I just wanted to show you that you can
158:06 - create such dictionaries and all of this
158:08 - is a valid syntax
158:12 - now let us have a look at the next data
158:14 - structure and this data structure is all
158:17 - about being unique
158:19 - the name of this data structure is
158:22 - called as a set
158:24 - for this video I have created a new file
158:27 - called as teach dot pi and let's get
158:30 - working with this one
158:32 - so let's see what's happening this time
158:34 - Lewis wants to show some of his English
158:37 - magic to zortans but Jordan's they can't
158:41 - understand what's happening and they
158:43 - want to see each alphabet separately
158:45 - that means they want to understand each
158:48 - unique alphabets so let's see what's
158:50 - going to happen next
158:52 - so suppose we have a magic word called
158:56 - as
158:57 - Abracadabra now let's see how we can get
159:00 - the unique alphabets from our string
159:04 - so on the next line let us create one
159:07 - more variable called as unique alphabets
159:10 - and in order to get unique alphabets
159:13 - from the string we have to create a set
159:16 - and the way to create a set is by using
159:20 - the cost which is called as set and let
159:24 - us pass our variable magic words to this
159:27 - one
159:27 - now if you hover over the variable
159:30 - unique alphabets
159:31 - you can see the type is set and the set
159:35 - is of the type of a string
159:37 - so let's write that over here so this is
159:40 - a set and the data type is for the
159:43 - string let us print out our unique
159:46 - alphabets so here we can say I simply
159:48 - want to print out
159:50 - my unit alphabets
159:53 - let me save it and let us try to run
159:56 - this file and here we have all of the
159:58 - unique alphabets
160:00 - so let me take this a little up
160:02 - so inside our word of abracadabra
160:05 - the alphabets of c d a b and R all of
160:10 - this alphabets are unique
160:12 - let us go back let's try one more time
160:16 - and this time let us use a sentence so
160:19 - we can create a sentence like this the
160:22 - big blue sky and the big blue ocean and
160:25 - let us see the unique alphabets so I can
160:27 - reuse my variable of unique alphabets
160:31 - and this time let us create a set from
160:33 - our sentence and let me copy and paste
160:37 - this line
160:39 - right over here let us run the file
160:42 - and this time we have an output so all
160:46 - of this alphabets are unique inside our
160:48 - sentence
160:49 - but what happens if you want to check
160:51 - the unique words instead of the
160:54 - characters let us see how to do that the
160:57 - first thing that we would need to do is
160:58 - we would want to convert our sentence
161:01 - into a list of words
161:04 - so let us see how to do that first let
161:07 - me create a variable called as my word
161:10 - list
161:11 - and we can simply split our sentence by
161:14 - using an inbuilt function by the name of
161:16 - split
161:17 - so we can say that I want to split my
161:20 - sentence now if you see the type of
161:23 - sentence is a string right
161:25 - so on a string you have a method called
161:28 - as
161:29 - split
161:30 - so this is going to return a list of all
161:33 - of the words inside the sentence let us
161:35 - try to print it out on the next line so
161:38 - let me say
161:39 - my word list
161:42 - is my variable of
161:45 - word list let us try to run this file
161:49 - so here you can see we have the list of
161:52 - all of the words inside the sentence so
161:54 - the next step is to actually create a
161:57 - set out of our words list and once we
162:00 - create a set then we can know all of the
162:02 - unique words inside our sentence so
162:05 - let's do that let me put up comments in
162:08 - that we need to extract the unique words
162:12 - let us create a variable called as
162:15 - unique words and we simply need to
162:18 - create a set out of our word list
162:22 - let us try to print it out
162:24 - so here I can say
162:26 - my unique
162:28 - words
162:29 - and the variable of unique words let us
162:34 - try to run this file
162:37 - so here you can see the unique words are
162:39 - big Ocean Blue Sky the and and also one
162:44 - more thing that I want you to note that
162:46 - at the beginning and at the end we have
162:49 - the curly brackets so you can see right
162:51 - over here
162:52 - for the beginning we have a curly
162:54 - bracket and at the last we have a curly
162:56 - bracket so this symbolizes a set in the
162:59 - dictionary we had key and value pairs
163:01 - inside curly brackets but for a set we
163:05 - only have values
163:07 - so let us go back
163:08 - so this time zortans they are really
163:11 - impressed and they want to see if we can
163:14 - add a couple of more words to our set
163:17 - so let's see how we can try and update
163:19 - our set so what we can do is let us take
163:22 - the existing set for our unique words
163:25 - and we can say that we want to update
163:28 - with the new values and here we need to
163:31 - pass an iterable that means you can pass
163:34 - a list or a tuple or any other data
163:37 - structure which is iterable
163:39 - so let me paste some values right over
163:41 - here so let us see if we can update with
163:44 - the new values of big blue and Sky let
163:47 - me copy this line and let me
163:51 - paste it right over here and let me try
163:54 - to run this file
163:56 - now if you see nothing is happening
163:59 - this line and the line before that
164:02 - they are exactly the same now what's
164:05 - happening
164:06 - no sense set is all about being unique
164:09 - we can't add the existing values to the
164:12 - set if you go back to our code big blue
164:16 - and Sky these words are already existing
164:19 - inside our set so nothing is happening
164:22 - let me put up a comment if you try to
164:25 - update your set with existing values
164:27 - nothing is going to happen
164:29 - now let us try to update with some other
164:32 - words which are not there inside the set
164:34 - so I can say my unique words
164:38 - I want to update with the new values and
164:41 - this time I want to pass the value of
164:43 - green and grass
164:45 - let me copy this
164:48 - paste it right over here now let us try
164:51 - to run our file and this time you can
164:54 - see we have the words of green and grass
164:56 - inside our set let us go back and let us
164:59 - see what's happening next let me put
165:01 - some comment right over here saying that
165:03 - something does happen
165:06 - now what happens is zortens they don't
165:09 - like the word of grass now let's see how
165:12 - we can remove the word of grass from our
165:14 - set so we can simply say that from my
165:17 - list of unique words I want to remove
165:21 - and I want to remove the element of
165:23 - grass
165:25 - and again let me copy and paste all of
165:28 - this
165:29 - and let us save and let us run our file
165:32 - and you can see that this time we have
165:34 - removed the word of grass from our set
165:37 - let us go back now I just wanted to let
165:40 - you know that you can do a lot of other
165:43 - operations on sets such as your union
165:45 - and intersections and so on but I would
165:48 - not be covering all of those inside this
165:50 - tutorials now let us see how we can use
165:53 - data structures for our game so behind
165:56 - the scenes I've created a new file
165:58 - called as game saves button 2 and this
166:01 - is the file and I have also pasted a
166:04 - couple of comments right over here
166:06 - so this time what is happening is the
166:09 - war is just getting more intensified
166:12 - this time the army of Thanos is also
166:15 - arriving and since it's going to be a
166:18 - very intense fight
166:19 - our program will automatically choose
166:22 - superhero and the super villain and our
166:25 - Avengers have exactly three chances to
166:27 - defeat Thanos now this time since we
166:30 - have already seen data structures
166:32 - we are going to create a nice data
166:35 - structure for our characters but first
166:37 - let me go to my old file inside my
166:39 - folder number zero three
166:42 - and let's copy a couple of things from
166:44 - here
166:44 - so
166:46 - let me copy from here
166:49 - till my last message
166:53 - let me go back let me collapse my
166:55 - sidebar
166:57 - and let me paste it right over here
167:00 - so this is our current file now let's
167:03 - get started this time we are going to
167:05 - define a nice structure for our
167:07 - characters you have seen that our
167:09 - character has an attack power and Thanos
167:13 - had life but this time our super
167:16 - villains are also going to attack our
167:18 - superheroes so all of the characters
167:20 - will have a property of life as well so
167:24 - let us see how we can do all of these
167:26 - things let me create a constant and let
167:29 - me call it as Iron Man
167:31 - and the most ideal data structure would
167:33 - be additionally now since with
167:36 - dictionary we can have the key and value
167:37 - pairs it makes much more sense to use a
167:40 - dictionary right over here
167:42 - the first key would be for the name of
167:44 - the character
167:46 - so in this case the name is Iron Man
167:50 - the next key would be for the attack
167:52 - power so I can say my
167:55 - attack power
167:57 - the value is of the type of an integer
168:00 - and the attack power of Iron Man IS 250
168:05 - the last key and value pair would be for
168:07 - the life so you can say I want to have a
168:10 - key for my life let's give him a life of
168:13 - say
168:14 - 1000 now let us see how we can Define
168:17 - the types for this one now obviously
168:20 - Iron Man is a dictionary now if you see
168:23 - the structure of our dictionary
168:25 - all of the keys are strings but for the
168:28 - values sometimes we have a string and
168:32 - sometimes we have an integer
168:35 - so let us see how we can Define the
168:36 - types over here
168:38 - since all of the types the keys are
168:40 - going to be string so we can see the key
168:43 - is of the type of a string and the value
168:45 - we can see it's either going to be a
168:48 - string or it is going to be an integer
168:51 - so this is how you define the types for
168:54 - our Iron Man
168:55 - now since this is going to be a constant
168:58 - we can wrap all of these things inside
169:00 - final so let me do that
169:03 - let me put my brackets and let me say
169:06 - final but what happens is typing all of
169:10 - these things again and again becomes so
169:12 - boring so what we can do is we can use a
169:15 - small trick and that trick is called as
169:18 - in typing Alias so what I can do is let
169:21 - me just cut out all of these things and
169:23 - here let me create a new variable called
169:25 - as character and I can Define the type
169:29 - right over here so what I am doing on
169:31 - line number 20 is I'm defining a new
169:34 - variable called as character and I am
169:37 - assigning the type to it so what I can
169:40 - do on line number 22 is I can simply say
169:43 - that Iron Man is a constant of the type
169:47 - of character
169:48 - so this is going to save us a lot of
169:50 - typing let me put up some comments over
169:53 - here
169:54 - now let us go down and let's create some
169:57 - more superheroes so let me just paste it
170:00 - right over here so what I've done is I
170:02 - have created three more superheroes one
170:05 - is Black Widow Spiderman and Hulk and I
170:08 - have also assigned values to each of our
170:11 - superhero let me put a comment right
170:13 - over here so this is for our superheroes
170:16 - similarly let us also do for our super
170:19 - villains so let me put a comment right
170:22 - over here
170:23 - so I can say that let us Define a super
170:25 - villain called as Thanos
170:27 - the type would be final and we can say
170:31 - character right over here
170:33 - and let's create our dictionary so we
170:35 - can say the name is Thanos the attack
170:40 - power is 1500 and life is 1500 similarly
170:48 - let me create some other supervillains
170:50 - as well so I've created a couple of more
170:53 - super villains One is Red Skull and the
170:55 - last one is Proxima now since we have a
170:59 - structure for our character
171:00 - we don't need all of these things so let
171:03 - me take it out the next thing is let us
171:06 - create a list of all of our superheroes
171:09 - and all of our super villains
171:11 - so let me put up a comment and let us
171:13 - create a list for our superheroes
171:16 - and we can say this is going to be a
171:18 - list so I can put my square brackets the
171:21 - first is our Iron Man next is
171:25 - Black Widow next is Spider-Man and last
171:29 - is the Hulk now let us see how we can
171:32 - Define the typing for this one so
171:34 - superheroes is a list
171:36 - and the type is of the character let us
171:40 - go down and let us create one more for
171:42 - our supervillains as well so I can say
171:45 - that my villains is again going to be a
171:49 - list of my
171:51 - character and let us create a list right
171:53 - over here the first is our Thanos then
171:57 - is for the Red Skull and losses for
172:00 - Proxima let us go down and let me put up
172:05 - a comment right here that choices and
172:07 - attack numbers all of this are our
172:10 - helper variables it takes out and let me
172:15 - take this out as well that's not
172:17 - required now let's go down
172:19 - and let us see how we can implement the
172:22 - actual attack
172:23 - the last time we had used a while loop
172:26 - this time I want to show you a for Loop
172:29 - and I also wanted to show you a new
172:31 - keyword that keyword is called as range
172:35 - so first let me type and then I will try
172:38 - and explain what's happening so I can
172:40 - create a for Loop saying that for attack
172:43 - in my range of 3 now let me try to
172:48 - explain what's happening if you remember
172:51 - we have a constraint that Avengers can
172:53 - attack only three times and that's what
172:56 - I'm doing right over here let me open up
172:58 - my IPython shell and let me try to
173:01 - explain over there
173:02 - so range is an inbuilt keyword inside
173:05 - python
173:06 - so we are typing as for my number in my
173:10 - range of 3
173:11 - I simply want to print out my number
173:14 - let's see what kind of output we are
173:16 - getting
173:17 - so we get the output of 0 1 and 2 and
173:20 - after we get to our for Loop is going to
173:23 - stop so that means our Loop ran for
173:26 - three times this was the first this was
173:29 - the second and this was the third time
173:31 - so this is where I am trying to
173:34 - implement our constraint of Maximum
173:36 - three attacks
173:37 - so here our for Loop will run for
173:41 - exactly three times and then it will
173:43 - exit let's see what we can do next now
173:46 - since this is a very intense fight our
173:48 - program has to choose a superhero and a
173:52 - super villain randomly so let's see how
173:55 - we can do that first let me put our
173:56 - Command and here again I want to show
173:59 - you one more function which is built
174:01 - into Python and that is called as random
174:04 - integers so what's going to happen is
174:06 - for each iteration of our for Loop we
174:10 - want to choose a superhero and a super
174:12 - villain and remember our superheroes and
174:15 - supervillains are listed and lists have
174:19 - indexes right
174:20 - so for Iron Man the index number would
174:23 - be zero for Black Widow the index number
174:25 - would be one Spider-Man would be index
174:27 - number two and Hulk would be index
174:30 - number three
174:31 - so what we are going to do is we are
174:33 - just going to generate a random index
174:35 - number and we are going to take that
174:38 - Superhero out of our list of superheroes
174:40 - and similarly for our villains as well
174:43 - but before we can generate an random
174:45 - integer first we need to import that
174:48 - functionality
174:50 - so here I can say from my package of
174:53 - Random I want to import something which
174:56 - is called as random int let us go down
175:01 - and let us see how to use this let me go
175:04 - to my iPath and shell and let me give
175:06 - you a small demo right over here here I
175:08 - can say from random I want to import my
175:11 - random integer
175:13 - and let us try and see the output of
175:15 - random end
175:16 - and let us pass the values of 0 to 10.
175:20 - so this time we get an 8 let us try to
175:23 - make it one more time this time we have
175:25 - a three this time we have a seven
175:29 - so you see that we can randomly generate
175:32 - different numbers so let's see how to
175:34 - use this inside our program
175:37 - so here I can say that for each
175:39 - iteration of the for loop I want to
175:42 - generate a random integer and my
175:44 - starting index would be 3
175:46 - and my last index would be 3
175:50 - now let's see why I'm writing 3 over
175:52 - here the first time we want to generate
175:55 - a random integer for our hero so let me
175:58 - create a variable called as
176:00 - hero index and assign the value right
176:03 - over here now let's see what's happening
176:06 - if you see our list of superheroes we
176:08 - have four elements that means the length
176:12 - is 4 but the index number is 3 that is
176:16 - why I am writing 3 right over here let
176:18 - us generate a random integer for our
176:20 - billion as well so let me create a
176:23 - variable called as
176:25 - villain index and I can use the same
176:28 - function random integer I want to start
176:31 - at 0 and at the max I want to have 2
176:35 - that's because the length of valence is
176:37 - 3. now let's see what we can do next
176:41 - so what we are doing on line number 54
176:43 - and 55 is we are just generating a
176:46 - random integer number
176:48 - the next thing is we can use that
176:51 - integer number to get a superhero from
176:54 - our list so let's see how to do that
176:57 - so let me put up a comment saying that
176:59 - we have a couple of more helper
177:01 - variables and I can say that I want to
177:04 - get my current superhero
177:07 - from my list of superheroes and the
177:11 - index number is the randomly generated
177:14 - number which we have stored in the
177:16 - variable of hero index so that means on
177:19 - line number 54 we are just generating an
177:23 - index number
177:24 - and online number 57 we are using that
177:28 - index number to get a superhero from our
177:31 - list of superheroes let us do the same
177:34 - thing for our villain as well
177:36 - so here I can say that my current
177:39 - villain would be from my list of
177:41 - villains from the index of my villain
177:45 - index
177:46 - let us try to print out the values and
177:48 - see what's happening
177:49 - so here I can say I want to print out my
177:52 - current superhero
177:54 - and I want to print out my current
177:57 - supervillain
177:59 - let us run this file so here is the
178:02 - output
178:03 - for the first iteration we have Iron Man
178:06 - and Proxima for the second iteration we
178:09 - have black widow and red skull for the
178:12 - third iteration we have Iron Man and
178:14 - Thanos so you see for each time we have
178:17 - a different pair who is going to attack
178:19 - each other and that's what we want so
178:21 - let us go back to our program
178:24 - let us display a nice message right over
178:26 - here
178:27 - so let us see I want to print using my
178:30 - formatted string
178:32 - the first thing I want to display is my
178:34 - attack numbers I can save my attack and
178:37 - let us also display the names of our
178:40 - superhero and our super villain who are
178:43 - going to fight so I can say inside my
178:45 - curly brackets that my
178:48 - superhero and let us also get the name
178:50 - now remember that current superhero is a
178:53 - dictionary and we can get the values by
178:56 - using our key and values and tags so I
178:58 - can say that I want to get the value of
179:01 - my key of name and then we can say that
179:05 - is going to fight with here we can
179:11 - display the name of our super villain so
179:13 - I can say my
179:14 - current villain and I want to retrieve
179:18 - the value from my key of name let me
179:21 - save it
179:22 - let us take out this line it's not
179:24 - required now and let me try and run this
179:27 - file
179:28 - so this time we have an output for the
179:31 - first attack we have black widow who is
179:34 - going to fight with Red Skull
179:36 - the next time we have black widow again
179:38 - and she is going to fight with Thanos
179:40 - the last time Spider-Man is good fight
179:43 - with Thanos what we can do right over
179:45 - here is instead of displaying 0 we can
179:48 - start from one so let me go back and
179:51 - here I can say attack plus of one let me
179:55 - save it and let me try to run the file
179:58 - so this time we have a much better
180:00 - output let us go back
180:03 - so here before we can attack we also
180:06 - need to calculate the total life so
180:08 - what's happening is for each iteration
180:10 - of our for Loop we have a superhero and
180:13 - you also have a villain so we need to
180:16 - calculate the life of our superheroes as
180:19 - well as our super villains for that we
180:22 - would need two more variables so let me
180:24 - go right over here
180:25 - and create two new variables right over
180:28 - here
180:29 - so the first one would be for our hero
180:32 - life and initially give it a value of 0
180:35 - the next one is for our villain life
180:37 - again let us set it to a value of zero
180:40 - now we don't require this variables
180:43 - because remember we are using the
180:45 - function of range so we can simply take
180:49 - them out it's not required
180:51 - let me take it up
180:53 - let me save my file and let us go down
180:56 - right over here
180:57 - let me put up a comment saying that
180:59 - first we need to add the life for each
181:01 - iteration so I can say for my life
181:04 - and for each iteration what I want to do
181:07 - is this is my life of hero and I want to
181:11 - add the life of my current hero to my
181:14 - hero life for each iteration so I can
181:17 - say my hero life plus my current hero
181:20 - and from my current hero I want to get
181:22 - the value of his life let us do the same
181:26 - thing for the life of villains as well
181:28 - so I can say my villain life is equal to
181:31 - my villain life plus my current villain
181:35 - and I want to get the value for life
181:39 - now what we can do is we can also use
181:42 - our shorthand syntax that means we can
181:45 - take this out and here we can say plus
181:48 - equal to so this means the exact same
181:51 - thing let me do it for the villain life
181:54 - as well so let me take it out plus equal
181:57 - to now you see that we have an error
181:59 - right over here but for now just ignore
182:02 - this error all of this errors will go
182:04 - away when we Implement these characters
182:06 - by using classes now let's see how to
182:10 - implement the actual attack so let me
182:12 - put up a command now what is going to
182:14 - happen is our villain is going to attack
182:16 - the hero so what we need to do is we
182:20 - need to minus the attacking power of the
182:23 - villain from the life of the hero so let
182:26 - us do that right over here so I can say
182:28 - that my hero life would be my hero life
182:32 - and minus I want to have the attacking
182:35 - power of my villain so I can say my
182:37 - current villain I want to get the attack
182:40 - power we can use our shorthand syntax
182:43 - right over here as well so here I can
182:46 - take this out and I can say minus equal
182:49 - to let us do the same thing for the
182:51 - villain life as well so here I can say
182:53 - my villain life minus equal to the
182:57 - current superhero and I want to get the
183:00 - attacking power of my superhero
183:03 - now let's see what to do next so this
183:06 - attack is going to happen for three
183:08 - times and after the attack is done we
183:11 - need to see if we are willing or we are
183:13 - losing so once we are out of the for
183:15 - Loop let us print a nice separating line
183:18 - so let me put up a command and let us
183:22 - print a nice separating line so I can
183:24 - say equal to multiplied by 70. so what
183:28 - this is going to do is it is simply
183:30 - going to repeat the string of equal to
183:32 - 70 times next let me take it a little up
183:36 - and let me put up a command so this time
183:39 - we want to check if we are winning or if
183:41 - we are losing and the logic for this is
183:43 - very simple if the life of the heroes is
183:46 - greater than or equal to the life of the
183:49 - villains that means the Avengers have
183:52 - won so let us do that right over here so
183:54 - we can say if the hero life is greater
183:57 - than or equal to
183:59 - the villain life
184:01 - then we simply want to print our win
184:04 - message
184:05 - else that means we have lost so let us
184:09 - print out the Lost message that's it let
184:12 - me save my file and let me try running
184:15 - this amazing we have a nice output so
184:19 - here you can see that we attacked three
184:21 - times the first time Spider-Man attacked
184:24 - Proxima the second time again Spider-Man
184:26 - attacked Red Skull and the third time
184:29 - Black Widow attacked Red Skull but
184:32 - unfortunately Thanos killed Avengers and
184:35 - he has captured zorton let us try
184:38 - playing one more time so let me play one
184:40 - more time okay so this time we have
184:42 - saved it's so amazing
184:45 - welcome to the last video in this
184:47 - section
184:48 - now this is an extra video and I want
184:51 - you to come back to this video after you
184:53 - learn about classes
184:55 - I am putting this video right over here
184:57 - just for the sake of completeness
184:59 - in this video we are going to learn
185:01 - about enums so behind the scenes I have
185:04 - created a file called as choices and let
185:07 - us see what's going to happen now elams
185:10 - are the perfect data structures whenever
185:12 - you want to create multiple choices or
185:15 - varieties so let's see how to do that
185:17 - the first thing is we need to import
185:20 - enum so we can say from my package of
185:24 - enum I want to import enum and let us
185:28 - Import Auto also so I'll explain what is
185:31 - it all about suppose you wanted to
185:33 - create choices for different pizza sizes
185:36 - so let us see how to do that so I can
185:39 - say my class
185:41 - of my pizza size now this inherits from
185:45 - my class of enum
185:47 - let me put up some documentation
185:49 - and here we can say that my first choice
185:52 - would be for a small size
185:54 - and we can assign it a value of 8
185:57 - the next choice could be medium it could
186:01 - be at 10 inches then we have one more
186:04 - for large
186:05 - it could be 12.
186:07 - so what this simply means is we have
186:09 - created an enem of pizza size and we
186:12 - have three choices small medium and
186:15 - large
186:15 - now let us see how to work with this
186:17 - enum so let me go down
186:20 - let us create a variable of choice and
186:23 - suppose the choice of the pizza size
186:24 - could be medium
186:26 - so we can say from my enum of pizza size
186:30 - I simply want the medium value
186:33 - let us print out the value on the next
186:35 - line so I can say print and I can say
186:39 - one order four now in order to get the
186:43 - value we can say from my enum of choice
186:46 - I want to get the value and then I can
186:49 - write inch pizza so let me save this and
186:52 - let me run this file and we have the
186:55 - output one order for a 10 inch pizza so
186:59 - let us go back
187:00 - let us create one more enum for colors
187:03 - of a t-shirt so I can make a class and
187:07 - the class is for color this also
187:09 - inherits from my enum
187:11 - let me write some documentation this is
187:14 - for my t-shirt varieties and here I can
187:16 - say that my first choice is red and I
187:19 - can give it a value of red the next
187:22 - could be blue and green let us also try
187:25 - to print out the values
187:26 - so let me go right over here and let me
187:29 - copy this line let me go down let me
187:32 - paste it right over here and here we can
187:35 - see one order for my colors suppose we
187:40 - want to have Green Dot we can get the
187:42 - value right over here
187:43 - and this becomes my t-shirt
187:47 - that's it just save and run your file
187:50 - and here we have the output one order
187:53 - for a green t-shirt let us go back let
187:56 - us create one more enum there may be
187:58 - times we don't require a value
188:01 - let me show you one example let me
188:03 - create a class called as role we can
188:07 - inherit from enum now suppose you want
188:10 - to create different rules for your stuff
188:13 - it could be a associate it could be a
188:15 - supervisor and so on and you don't want
188:18 - to assign values to them but what we can
188:20 - do is we can automatically give them
188:23 - values let us see how to do that
188:25 - suppose the first rule is for an
188:27 - associate
188:28 - we can assign it a value by using our
188:31 - imported function called as Auto now
188:34 - remember on on line number eight we are
188:37 - importing Auto and that's what we are
188:39 - going to use right away
188:41 - so what this Auto is going to do is the
188:44 - first time it is going to assign the
188:46 - value as 1 the next time it is going to
188:48 - assign the value of 2 so suppose we have
188:51 - one more role for a supervisor
188:54 - and we assign it to Auto so this time
188:57 - the value of supervisor would be set to
189:00 - 2. suppose we have one more rule for the
189:02 - manager
189:04 - now this time the value of manager would
189:06 - be 3 let us try and print it out so I
189:09 - can say print from my in above role I
189:13 - want you to go to my manager and I want
189:16 - you to print the value
189:18 - let us run this file and here you can
189:21 - see that the value of manager is
189:23 - automatically set to 3.
189:26 - welcome to a brand new section this
189:29 - section is all about functions
189:31 - till now we have used inbuilt functions
189:34 - such as print and in this section we are
189:37 - going to learn how to create our own
189:39 - functions but before we can create our
189:42 - own functions I wanted to talk a little
189:44 - bit about functions the main goal of a
189:48 - function is for your data processing you
189:51 - have some sort of an input this input
189:53 - goes inside your function your function
189:56 - processes the data and finally we would
190:00 - like to have some sort of an output
190:03 - so this is your ideal function
190:06 - you take an input you process it and you
190:08 - give back an output but in real life
190:11 - it's not so simple
190:13 - so let's try learning more about
190:15 - functions so let us go back to our code
190:18 - editor behind the scenes I've created a
190:21 - folder called as zero five functions and
190:24 - this is the file called as greater dot
190:26 - Pi let us see what's going to happen
190:28 - right now so this is a very simple
190:31 - program for greeting
190:33 - and the people in shortened they greet
190:36 - each other by saying Zola
190:38 - and Lewis wants to write a program where
190:40 - he can greet his friends in Zola so
190:43 - let's define a function and the way to
190:45 - define a function is by using the
190:48 - keyword called as def followed by the
190:51 - name of the function so we can say the
190:53 - name of my function is greda and this
190:57 - function accepts one argument and we can
191:00 - call that argument as anything in this
191:03 - case I am going to call that argument as
191:06 - name and then you put your colons and
191:09 - inside of this you have to write the
191:11 - body or the logic of the function you
191:14 - can also write some sort of a
191:16 - documentation and you can do that by
191:18 - using your triple quotes so you can say
191:20 - that this function greets
191:23 - Zoltan let us go to the next line and
191:26 - let us print out a greeting message so
191:29 - what we can do is we can simply print
191:31 - out a message we can use our formatted
191:34 - string and then we can say Zola followed
191:37 - by the name now let us see how we can
191:40 - Define the types for this function
191:43 - we can say that this function of Grita
191:45 - accepts one argument and we can Define
191:49 - the type right over here so we can say
191:51 - my argument has to be the type of a
191:54 - string and since this function returns
191:57 - nothing so we can say that this function
192:00 - is going to return
192:02 - none let's create one more function
192:05 - called as main so we can say this is my
192:08 - main function
192:09 - this function does not accept any
192:12 - arguments and this function returns
192:15 - nothing
192:15 - here we can create a list of all of the
192:18 - friends so I can create a variable
192:20 - called as
192:22 - friends and let me assign some values to
192:24 - it so these are all of the lists of the
192:27 - friends and we want to greet all of
192:29 - these friends
192:30 - we can create a very simple for Loop and
192:33 - using the for Loop we can call this
192:35 - function let me show how it is to be
192:38 - done but before that let me add the
192:40 - types for this as well so friends is a
192:43 - list and the data type is a string or
192:47 - the next line we can say that for my
192:50 - friend in my list of friends for each
192:55 - iteration I simply want to invoke the
192:58 - function of greeter and pass a name so
193:01 - what we can say right over here is
193:03 - for each iteration I want to call the
193:05 - function of Greater and I simply want to
193:08 - pass the friend each time now the reason
193:11 - why we have created a main function is
193:14 - just by sake of convention we always
193:17 - like our programs to start with the
193:19 - function which is named as Main
193:22 - now let us see how to use this function
193:24 - you need to invoke or you need to call
193:27 - this function in order for our program
193:29 - to run so on the next line we can invoke
193:33 - our main function and the way to invoke
193:35 - is by just writing main along with the
193:38 - brackets
193:39 - so whenever you write the brackets that
193:41 - means that you want to invoke the
193:43 - function if you just write like this it
193:46 - means an assignment but if you want to
193:49 - run that means you want to put the
193:51 - brackets so let me save this and let me
193:54 - try to run this file
193:56 - and here we have the output so we have
193:58 - Zola CC Zola Rocco and so on
194:02 - we just saw how to write a function and
194:05 - in this video I'll show you how we can
194:07 - write a slightly better version of our
194:10 - greater function
194:12 - first let us go back to our diagram
194:14 - now in an Ideal World We would like to
194:17 - take one input and we would also like to
194:19 - give back an output
194:22 - but let us have a look at this function
194:24 - called as greeter we are taking an input
194:27 - but we are not returning an output so
194:30 - let us see how we can create a better
194:32 - version of this so behind the scenes
194:34 - I've created a file called as beta
194:37 - greater dot pi
194:38 - and let us get started with this one let
194:41 - us go back to this file and let me copy
194:43 - all of these things so let me copy right
194:45 - from here
194:47 - let me go back to this file and let me
194:50 - paste everything right over here let me
194:52 - collapse my sidebar and this time let us
194:55 - try and return something so instead of
194:59 - just printing Zola followed by the name
195:01 - we can actually return this value so let
195:05 - me take out the print statement the
195:08 - bracket as well and here I can say that
195:10 - I want to return my new string so what
195:13 - this function is going to do is it is
195:16 - accepting one argument and it is
195:18 - transforming that string into a greeting
195:21 - message and we are returning that string
195:24 - as well now since this function is
195:27 - returning a value we also need to change
195:30 - the type over here and the type is
195:32 - string so what happens is when we were
195:36 - using the print function we were causing
195:39 - something which is called as a side
195:41 - effect but this function is a more pure
195:43 - function it takes one input and it gives
195:46 - back one output now it is the
195:49 - responsibility of the color function of
195:51 - how to handle the written data let me
195:54 - tell you let me show you what I mean by
195:56 - it but first let me write some comments
195:58 - so let me go right over here and put me
196:00 - some comments
196:02 - saying that the call function is
196:04 - responsible for the written data and
196:08 - here I can say that
196:09 - this function transform the original
196:12 - string to something useful and let us
196:15 - change the documentation as well so this
196:17 - function is going to return a greeting
196:20 - message
196:21 - now let us go down and let us see what's
196:23 - happening on line number 25 we are
196:26 - invoking the function of Grita and our
196:29 - main function is responsible for calling
196:32 - this function
196:33 - nut means conceptually you can call the
196:37 - main function as your caller function
196:39 - that means main is calling greater and
196:43 - now it is the responsibility of your
196:46 - caller function that means it is the
196:48 - responsibility of your main function
196:50 - of how to handle the return values
196:54 - now this pattern is very useful
196:56 - what if you wanted to check for the
196:58 - written values
197:00 - you can check for the written values and
197:02 - you can do something with it let us have
197:04 - a small example right over here let me
197:07 - put up some comments over here now
197:09 - suppose Lewis finds Chico to be queued
197:12 - so what we can do is we can say for each
197:14 - iteration
197:16 - if Chico is in the output of my function
197:20 - of grida so greater and friend
197:24 - now remember our function of Grita is
197:27 - returning back a string
197:29 - and if that string contains Chico then
197:33 - we can't print out something like this
197:35 - so here we can say that print is cute or
197:40 - else we can simply print out the message
197:42 - as it is so here we can simply print our
197:46 - glitter and friend
197:49 - so what's happening is for each
197:51 - iteration our function of Grider is
197:54 - returning back some values and that
197:57 - value is Zola followed by the name of
198:00 - the friend so for the first iteration
198:02 - the return value is Zola CC the second
198:05 - time is zolaroko and the third time is
198:08 - Chico and so on
198:10 - but since the function of gritter is
198:13 - returning as data we can handle that
198:15 - data in multiple ways so first let me
198:18 - run this file and then let me try and
198:20 - explain you again one more time
198:23 - so here we have the output that Chico is
198:26 - cute
198:27 - so what's happening online number 27 is
198:30 - let me open up my IPython shell
198:33 - so here I can see if Chico in Sola Chico
198:37 - then we have the answer as true
198:40 - if we say something like this
198:44 - Lewis in zorachico the answer is false
198:49 - and that is what we are doing on this
198:51 - line
198:52 - suppose the output of this function is
198:54 - zorachico that time we simply want to
198:57 - print out a message saying that Chico is
199:00 - cute so basically what we are trying to
199:03 - do is our caller function is handling
199:06 - the response of glitter in multiple ways
199:10 - let's have some more practice with our
199:12 - functions for this video Behind the
199:15 - Scenes I've created a file called as
199:16 - weight dot pi and let us see what's
199:19 - happening
199:21 - now since Lewis is staying in zorton
199:23 - gravity Works differently over there and
199:27 - this time we want to calculate how much
199:29 - you wait in zorton and this is the
199:32 - formula to convert the Earth's weight to
199:35 - salt and sweet let me go down over here
199:38 - and let us Define a function which is
199:40 - called as
199:42 - calculate weight
199:44 - this will accept one argument which you
199:47 - can call as weight
199:50 - we can Define the type as a float
199:52 - because your weight can have decimal
199:54 - values so let me write the type the
199:57 - float and this function will also return
200:00 - the float value
200:03 - inside the body of the function we can
200:05 - have one single return statement and we
200:08 - can say that I want to return and here
200:11 - we can calculate the weight by using the
200:13 - formula so we can see
200:16 - the weight plus of 32
200:19 - divided by 8.
200:23 - now let us try and print out the weight
200:25 - so let me write a very simple print
200:27 - statement
200:28 - we can use our formatted strings so you
200:31 - can see
200:32 - U way and inside the curly brackets let
200:36 - us invoke the function so I can say
200:38 - calculate weight
200:41 - and for example let's pass 60 kgs
200:45 - and then you can see kgs on
200:49 - zorton let us say this and let us try
200:53 - running this program
200:55 - so here we have the output saying that
200:57 - you weigh 11.5 kgs on certain
201:01 - let us go back I wanted to show you one
201:04 - small trick what happens if we want to
201:07 - display exactly two decimal places or
201:10 - three decimal places and so on
201:12 - the way to do that is right over here so
201:15 - here we can say that
201:17 - I want to display my two decimal places
201:20 - for the float
201:23 - receive a file and drive Renegade for
201:25 - the last time
201:27 - and here we have the output so you can
201:29 - see we have two decimal places
201:33 - let us have a look at the next example
201:36 - this time I am working on this file
201:38 - called as fly dot pi and let's see
201:41 - what's happening this time now we just
201:43 - saw that gravity insulting is much less
201:46 - as compared to Earth
201:48 - so what happens is if you weigh 15 kgs
201:51 - or less then you can actually fly on
201:54 - certain
201:55 - so what Lewis wants to do is Lewis wants
201:58 - to see which of his friends can fly so
202:02 - let's see how to work with this one
202:04 - and there is one very important concept
202:06 - which is called as single responsibility
202:09 - principle
202:10 - and let us see what do I mean by this
202:12 - principle in this video
202:15 - so as a convention let us create our
202:17 - main function first and from there we
202:20 - will create functions as we require them
202:22 - so let me Define my main function so I
202:25 - can say my Define and Main this function
202:28 - does not take anything and it returns
202:30 - none so I can write none over here now
202:34 - inside of this function let us create
202:36 - the friends of Lewis so let me create my
202:39 - dictionary of friends and let me assign
202:42 - some values to it so here we can see
202:44 - that we have a couple of values cc is
202:47 - being 54 Rocco is being 88 and so on
202:51 - let us also write the types for this one
202:53 - so friends is medicinally
202:56 - the keys are strings and the values are
203:00 - integers what we can do over here is
203:03 - instead of just declaring integers we
203:06 - can also write a float so in case if you
203:09 - have a decimal value in the future we
203:11 - can easily handle it if we declare it as
203:13 - a float
203:14 - next let us create a function called as
203:17 - flying friends and see which of the
203:19 - friends can fly so I can say my function
203:22 - of flying friends
203:23 - and we just have to pass the dictionary
203:26 - of friends
203:28 - now let us go up and let us start
203:30 - creating our functions
203:32 - so as you can see there is one small
203:35 - constraint and that constant is you have
203:38 - to weigh 15 kgs in order to fly so what
203:41 - we can do is we can create a constant
203:44 - so let me call the constant as maximum
203:47 - flying bit and we can assign it a value
203:50 - of 15 let us also Define the type for
203:53 - this one so since this is a constant it
203:56 - has to be declared as final
203:58 - but before we can write final we need to
204:00 - import it
204:01 - so here I can say that from typing I
204:06 - want to import final and here we can use
204:09 - the keyword of final so our maximum
204:13 - flying weight is a final and the pipe we
204:16 - can Define it to be a float as well now
204:19 - let us go down and let us create the
204:21 - function for flying friends so here we
204:24 - can say that Define
204:26 - flying friends this takes one argument
204:30 - let us call that argument as friends
204:34 - and and as you can see on line number 28
204:37 - we are passing the argument of friends
204:39 - and the type of friends is this one is
204:42 - dictionary string and Float so let me
204:45 - copy this right from here and let me go
204:48 - back to my line number 18 so we can
204:50 - Define the type right over here so this
204:52 - friends is going to be a dictionary and
204:55 - this function is not going to return
204:57 - anything so I can just write none let me
205:00 - also write some documentation for this
205:02 - function
205:03 - so what this function is going to do is
205:05 - this function is going to display all of
205:08 - the flying and non-flying friends now
205:10 - remember that this function is creating
205:13 - a side effect this function is not going
205:16 - to return anything that's why we can say
205:19 - that this function creates a side effect
205:21 - now let us go down and let us Define the
205:24 - body of this function so here what we
205:27 - can do is we can use a for Loop to
205:30 - iterate over the friends and see which
205:33 - of the friends can fly or not
205:35 - so I can see for the name and Earth
205:40 - weight in the dictionary of friends
205:44 - we want to get all of the items now
205:47 - remember that the keys are the names so
205:49 - if you see right over here the key is
205:51 - the name that's why I'm naming this
205:53 - parameter as name and the values are the
205:57 - weight so that's what I'm calling as
205:59 - Earth weight right over here
206:01 - so for each iteration the first thing
206:04 - that we want to do is we want to
206:06 - calculate the weight in certain so let
206:09 - me create a variable called as
206:11 - zort and weed and here we need to
206:14 - calculate but for calculation let us
206:17 - create another function called as
206:19 - calculate weight so let me write the
206:22 - function first and then we will create
206:24 - it so calculate weight would be my
206:26 - function and I need to pass my Earth
206:29 - weight to it now let us go up and Define
206:32 - this function
206:33 - we have defined this function in our
206:35 - last video so let me open up that file
206:38 - right over here so the file was called
206:40 - as weight dot pi and I just have to copy
206:43 - this go back to my current file
206:46 - let me collapse my sidebar and let me go
206:50 - to the top
206:51 - and we can paste it right over here let
206:54 - me also add some documentation
206:56 - so what this function is doing is this
206:59 - function is calculating your weight in
207:01 - zorton
207:02 - so this is an example of data
207:05 - transformation it is taking a weight in
207:08 - kgs and it is returning the same weight
207:11 - but in short and in weight you can also
207:14 - say that this function is a pure
207:16 - function since it takes one input and
207:19 - gives back one output now let us go back
207:22 - to our function of prime friends
207:24 - so on line number 36 we are able to
207:27 - calculate the weight in zorton
207:29 - now the next thing to do is we just need
207:32 - to check if we can fly or not so here we
207:35 - can say that if and here we need one
207:38 - more function to check if we can fly or
207:41 - not so first let me write it and then we
207:44 - will create the function we can call
207:46 - that function as can fly
207:49 - and we need to pass the weight in
207:52 - shorten so let me pass my zorton weight
207:54 - now let us go up and create this
207:56 - function as can fly so just let me go
208:00 - right over here
208:01 - and I can Define my function as can fly
208:04 - this function accepts weight and the
208:09 - type would be a float and this function
208:12 - is going to return a Boolean value
208:15 - let me write some documentation for this
208:17 - as well
208:18 - so the only responsibility of this
208:20 - function is it is going to see if you
208:23 - can fly or not that's why we have the
208:25 - written value as the Boolean
208:27 - so this function is also a very nice
208:30 - example of data transformation
208:33 - so you can see that we are accepting a
208:36 - data which is of the type of fluid then
208:38 - we are transforming the data and we are
208:41 - transforming from a float value to a
208:43 - Boolean value
208:45 - let us see how we can write the body of
208:47 - this function
208:49 - now the body of this function is very
208:51 - simple we just have to say that we have
208:54 - to return
208:55 - if my weight is less than or equal to
208:58 - our constant of Maximum flying weight
209:02 - so what we are doing is we are basically
209:04 - composing functions where each function
209:07 - has only a single responsibility for
209:10 - example this function of can fly the
209:13 - only responsibility of this function is
209:16 - to say you if you can fly or not
209:19 - now the only responsibility of this
209:22 - function calculate weight is just to
209:25 - transform the weight from the Earth to
209:26 - the Sorting in weight now let us go back
209:30 - on line number 47 we have created this
209:33 - function can fly now this function is
209:36 - retaining a bull value so we can use it
209:39 - with our if and else blocks let me take
209:41 - it a little up
209:43 - so here we can see that if the friend
209:46 - can fly then we can simply print out a
209:49 - nice statement saying that here we can
209:51 - put the name and then you can display
209:54 - the weight in zorton and then we can say
209:58 - kgs can fly on Jordan
210:01 - else that means the friend can't fly in
210:05 - that case let us print out another
210:07 - statement saying that
210:09 - the name followed by the certain weight
210:12 - can only walk on zorton let us save it
210:16 - and let us try running this file but
210:18 - before we can run this file we have to
210:21 - invoke our main function so let me go at
210:24 - the bottom and here I can say that I
210:27 - want to invoke my main function so I can
210:29 - say mean followed by our brackets let me
210:32 - save it and now let's run this file so
210:36 - here we have the output
210:37 - CC the weight is 10.75 in shortened so
210:42 - she can fly but for Nico Nico weighs
210:46 - 16.75 so he can only walk on zorton and
210:50 - similar with zico as well
210:52 - so getting back to our program what we
210:55 - have done is we have seen how to create
210:57 - functions which can have a single
211:00 - responsibility principle now let us
211:03 - understand one more very important part
211:05 - of functions and that is how we can work
211:08 - with variable arguments and variable
211:11 - keyword arguments let me create a file
211:14 - over here and let me name it as
211:16 - arguments and keyword arguments that
211:19 - means args and kwarts for short
211:24 - let me put up some comments
211:26 - the first thing that I want to show you
211:28 - inside this program is all about
211:30 - unpacking first we will see how we can
211:33 - unpack a couple of data structures in
211:35 - Python and once we understand unpacking
211:37 - then we can move to the variable and the
211:41 - keyword variable arguments so the first
211:43 - thing that I want to show you is all
211:45 - about unpacking suppose you have a tuple
211:48 - like this Lewis and Zappa you can unpack
211:52 - the values of this Tuple in a single
211:54 - line so on the left I can say that my
211:57 - Lewis would be my first name so I can
212:00 - write fname
212:02 - and Zappa would be my last name so I can
212:05 - say l name
212:06 - and that's it this is called as Tuple
212:09 - unpacking Lewis would be assigned to
212:13 - this variable and Zappa would be
212:15 - assigned to this variable just to
212:18 - confirm let us print out the values and
212:20 - see what we are getting
212:22 - and you can see we are getting the right
212:23 - values
212:24 - now let's see how we can unpack a list
212:28 - suppose you have a list like this and I
212:31 - want to unpack this list but while
212:33 - unpacking I only want the first value
212:36 - inside a variable and I want all of the
212:39 - rest into a separate list
212:41 - we can do this by using a special syntax
212:44 - so I can say first then I can say star
212:49 - rest of the values is equal to my list
212:52 - so let's see what's happening the first
212:55 - value that means cc is assigned to this
212:58 - variable and Roku Chico and Nico inside
213:02 - a list is being assigned to this
213:04 - variable we can name the variables
213:07 - whatever you want let's try to print out
213:09 - the value and check if we are getting
213:11 - the right output or not let me run the
213:14 - file
213:15 - and here you can check the output
213:17 - let me take it up
213:19 - the first value is CC and that's what we
213:22 - are getting right over here rest is a
213:25 - list of all of the remaining values
213:27 - Rocco Chico and Nico that's what we have
213:30 - right over here next let us see how we
213:33 - can unpack a dictionary suppose we have
213:36 - an existing dictionary like this so this
213:38 - is for specifications
213:40 - type is dynamic optional static typing
213:43 - and it is found everywhere let us create
213:46 - a new dictionary and let us try to
213:48 - unpack the existing dictionary into it
213:51 - so let me call the new variable as Lang
213:55 - and I can see
213:57 - name is python
214:01 - now I can unpack the entire dictionary
214:04 - right over here by using a very special
214:07 - syntax so I can say star star
214:11 - followed by the name of the dictionary
214:13 - that we want to unpack so the name of
214:16 - the dictionary is specs
214:18 - that's it let us print it out and see
214:21 - what we are getting
214:22 - and as you can see we have the right
214:24 - dictionary so the name is Python and
214:27 - here you can see we have unpacked the
214:30 - entire other dictionary as well now
214:32 - let's go back to our program now let's
214:35 - try to think of a situation where we
214:37 - would use this functionality suppose we
214:40 - have a function and this function has to
214:43 - accept unknown number of arguments at
214:47 - that time we can use this functionality
214:50 - now suppose we have a function called as
214:52 - unknown friends
214:55 - and we don't know the number of friends
214:57 - that we are going to get in the
214:59 - arguments so here I can see that we are
215:01 - going to receive variable argument and
215:05 - that variable argument I can declare by
215:07 - writing so star and the name of the
215:10 - variable as a convention whenever we are
215:13 - getting variable arguments we name that
215:17 - variable as args now let's go to the
215:20 - body and see what we can do with this
215:22 - one let's try to Simply print out the
215:25 - values so I can say for
215:28 - my friend in my arguments
215:32 - I simply want to print out my friend oh
215:36 - it has to be friend not friends so
215:41 - this looks good
215:43 - now let's see how we can add types to
215:46 - this function
215:47 - by default python is going to pack all
215:50 - of the variable arguments inside a tuple
215:53 - so essentially what's happening is this
215:56 - argument is going to be of the type of
215:58 - Tuple and since this function is not
216:00 - returning anything this is going to
216:03 - return
216:04 - none let us invoke this function on the
216:07 - next line so I can say my unknown
216:08 - friends
216:09 - and here let me pass a couple of friends
216:12 - so I am passing an unknown number of
216:15 - friends
216:16 - now adding type in to this variable it's
216:19 - a little tricky because by default RX is
216:22 - a tuple but we can say this Tuple is of
216:25 - the type of string and that's it this is
216:29 - how we would add type hints to our
216:31 - variable arguments this simply means
216:34 - that our variable of args is a tuple and
216:38 - the data type inside the Tuple is of the
216:41 - type of string
216:42 - let us try to save this file and let me
216:45 - try to run it
216:47 - and we have the right output we can see
216:49 - all of the friends right over here so
216:51 - all of these friends are coming from
216:53 - this line
216:55 - right over here line number 33 now
216:58 - similarly we can also accept keyword
217:00 - arguments now what do you mean by
217:03 - keyword argument first let me write the
217:06 - program and then I will explain what
217:08 - exactly I mean by a keyword argument so
217:11 - let me put up a comment
217:13 - so suppose we have a function called as
217:16 - unknown product and this function
217:18 - accepts a variable keyword arguments so
217:22 - that can be denoted by two stars and by
217:25 - convention we always name the variable
217:28 - as
217:29 - kwarjs that means keyword arguments now
217:33 - let's see what we can do inside the body
217:35 - of this function
217:37 - now what python is going to do is it is
217:40 - going to pack all of the keyword
217:42 - arguments in the form of a dictionary
217:45 - so we can simply print out the key
217:48 - and the value
217:50 - from our keyword arcs
217:53 - dot items
217:55 - and let us print it out I can also write
217:58 - this in a short form V for value and K
218:02 - for for the key and here I can simply
218:05 - say I want to print out
218:08 - my key
218:10 - and
218:11 - my value
218:15 - now let me try to invoke this function
218:17 - by passing keyword arguments so this is
218:20 - the place where all the things are going
218:23 - to get cleared so I can say my unknown
218:25 - product and the keyword arguments would
218:28 - look something like this
218:30 - name is equal to Pizza price is equal to
218:33 - 3.99 topping is equal to olives and so
218:37 - on
218:37 - so you can see all of the arguments are
218:40 - in the form of the key and the value the
218:43 - key and the value
218:44 - so that's why we call this variable as a
218:48 - variable keyword argument
218:50 - by default it's always going to be in a
218:53 - form of a dictionary now let's see how
218:55 - we can add types to this one
218:58 - now adding types for this one is really
219:01 - very tricky
219:02 - if you see our keyword arguments the
219:05 - first one is a string the next one is a
219:07 - float
219:08 - the last one is a Boolean so we don't
219:10 - know what kind of argument we can get
219:12 - inside the dictionary
219:14 - so this time what we can say that the
219:16 - values can be anything so I can write
219:19 - the type as any and let me import any
219:22 - from our typing Library
219:25 - so on the top I can say
219:28 - from typing
219:31 - I want to import any so what this really
219:36 - means is since we don't know the value
219:39 - of the type of the dictionary we are
219:42 - going to accept any kind of a value and
219:44 - since this function is not going to
219:46 - return anything we can say that the
219:49 - return type is none let's try to run our
219:53 - program and here is output let me just
219:56 - take it up
219:57 - so for the variable keyword arguments we
220:01 - have name price toppings and extra
220:04 - cheese
220:05 - and that is what we have right over here
220:07 - now let's see how we can combine both of
220:10 - these Concepts together
220:12 - that means let us combine the variable
220:15 - arguments and the variable keyword
220:18 - arguments in a single function
220:20 - so let me put up a comment over here
220:24 - suppose I have a function called as
220:26 - invoice
220:28 - wherein I am supposed to generate an
220:30 - invoice for a product but I don't know
220:33 - what is the product I don't know the
220:36 - characteristics of the product then how
220:38 - do I handle this situation so let's see
220:40 - how we can Define the function
220:42 - the first argument can be the name of
220:45 - the product so I can simply write as
220:48 - product
220:49 - the type is going to be a string
220:52 - after that since we don't know what the
220:54 - product is all about or the different
220:56 - varieties of the product we can simply
220:59 - write that we can also accept a variable
221:02 - argument right over here now suppose the
221:05 - user gives an argument in the form of
221:07 - keywords we can handle that situation as
221:10 - well by using our keyword argument so we
221:13 - can say double star
221:15 - keyword and args
221:18 - and this time let us simply print out
221:20 - our product arguments and our keyword
221:23 - arguments so I can say I want to print
221:25 - out my product let me copy and paste
221:29 - then I want to print out my arguments
221:32 - then I want to print out my keyword
221:34 - arguments now since this function is not
221:37 - good written anything so I can say that
221:40 - it's going to return none
221:43 - now let's try to invoke this function so
221:46 - let me go down over here I can say
221:49 - invoice
221:50 - my product would be
221:52 - sneakers
221:54 - now suppose the sneakers are available
221:56 - in black and white color so I can give a
221:59 - variable number of arguments so I can
222:02 - say
222:03 - black
222:05 - and white
222:07 - we can also Define a couple of keyword
222:09 - arguments over here suppose we know the
222:11 - name of the brand so we can say my brand
222:14 - is equal to me bits Nike
222:19 - the category would be my Air Jordans
222:25 - price could be
222:27 - 899.99 dollars
222:31 - in
222:32 - stock would be a Boolean value and let
222:35 - me assign it a value of
222:37 - false these stickers are not in stock
222:40 - let me save my file so as you can see my
222:44 - formatter which is black it
222:46 - automatically formats my file now let me
222:49 - save the file and let me run it for the
222:52 - last time and here we have the output so
222:55 - let me just
222:56 - take this down
222:58 - the product is our stickers so that's
223:01 - what we are getting over here now this
223:03 - arguments by default this is going to be
223:05 - a tuple so that's why we have a tuple
223:08 - over here and the keyword arguments this
223:12 - is always going to be packed as a
223:14 - dictionary so that's why we have the
223:16 - last line as a dictionary
223:18 - there is one more important concept that
223:20 - I want to cover and after that we can
223:22 - move on to our game
223:24 - this concept is called as your local and
223:28 - Global variables
223:31 - for this I want you to create a new
223:33 - folder right over here
223:35 - and I want you to call that folder as
223:38 - scratch pad
223:39 - you can utilize this folder for adding
223:42 - small programs and for doing small
223:44 - experiments I always create and use a
223:47 - scratch folder let's create one file
223:50 - inside of this folder
223:52 - and let me name it as
223:54 - variable Scopes let me put up a heading
223:57 - right over here so we are going to talk
223:59 - about global and local scopes for that
224:03 - let us try to understand One More
224:05 - Concept
224:06 - all of these files that we are creating
224:09 - these files are technically called as
224:12 - modules
224:14 - so in the world of python all of these
224:16 - files are modules now let's go back to
224:19 - our file
224:21 - inside our module if we declare a
224:24 - variable like this num is equal to 10
224:28 - that means this variable has a global
224:32 - scope that means anyone inside our
224:34 - module can use this variable any
224:37 - function or any functionality or any
224:40 - variable inside the module can use this
224:43 - variable so let's create a function
224:45 - called as print Global num
224:49 - and this is simply going to print out
224:52 - our number
224:54 - let me save it and let me invoke it
224:57 - right over here so I can say print
225:00 - Global number we can do a slight
225:02 - improvement over here we can use a
225:05 - formatted string and we can say
225:08 - Global number is and this is my number
225:11 - now let us try to execute this file
225:16 - and we have a output saying that the
225:18 - global number is 10. now let us see what
225:22 - happens if we declare one more function
225:24 - and if you declare the same variable
225:28 - inside that function so let me create a
225:31 - new function by the name of
225:33 - print num
225:36 - this does not accept anything and inside
225:39 - this function let me assign a value of
225:42 - 20
225:43 - to the variable of num
225:46 - and let us try to print out and see what
225:48 - values we are getting over here so I can
225:50 - use my formatted string my local number
225:54 - is the now
225:57 - let us invoke this function and let us
226:00 - see what we are getting
226:03 - let me
226:05 - run this file
226:07 - and here is output
226:09 - now watch closely what's happening
226:12 - on line number eight we have declared
226:14 - that the num is 10.
226:17 - and on line number 16 we are saying that
226:20 - num is equal to 20.
226:23 - now what happens is whenever python sees
226:26 - we have the same variable
226:28 - python is going to create a new variable
226:31 - called as num and this variable is
226:34 - available only inside our variable of
226:37 - print num and that's it
226:40 - so this is also called as variable
226:42 - shadowing now please keep in mind that
226:45 - this variable shadowing can introduce a
226:48 - lot of bugs and this bugs can be really
226:50 - difficult to debug
226:53 - just to demonstrate let me go right over
226:56 - here and let me say I want to print my
226:59 - num
227:01 - let me save it and let me try to
227:03 - run it
227:05 - so here you can see the global num is 10
227:09 - but on the second line the local number
227:12 - is 20. and this 20 is coming from our
227:16 - line number line number 17 so this
227:19 - variable is accessible only inside this
227:21 - function and it is not valid outside
227:24 - outside only this number that we have
227:28 - declared on line number eight is visible
227:31 - that's why we are getting the output of
227:33 - 10 right over here now let us see how we
227:36 - can access This Global variable and how
227:39 - we can do some operations on it let us
227:42 - create a new function by the name of
227:44 - increment number here we simply want to
227:47 - increment our number by 2 so we can say
227:49 - my num
227:50 - plus equal to 2.
227:53 - but what's happening right over here is
227:55 - python is seeing that we are doing some
227:57 - sort of an operation on num so python is
228:01 - going to create a new variable we want
228:03 - to increment the global num
228:06 - so we have to explicitly tell python
228:09 - that hey python I want you to use
228:11 - the global num
228:13 - and that's it let me put up some
228:15 - comments so I have a comment for this
228:18 - one and this one is my function or my
228:22 - local scope and this one for my Global
228:25 - declaration
228:26 - let me save it now let me increment the
228:29 - number and then we can print it out so
228:31 - let me say that I want to increment the
228:34 - number
228:35 - let me save it and let me try to run it
228:39 - so this time you can see the global
228:42 - number is 12. now let's see one more
228:45 - behavior of the global number so here
228:48 - let me create a new function
228:51 - by the name of increment my local num
228:57 - and here I am saying that my new number
229:01 - is is equal to my existing number
229:06 - plus of 10.
229:08 - and let me print out my new number right
229:13 - over here now can you tell me what is
229:15 - going to be the output of line number
229:18 - 13. well we don't have to guess we can
229:21 - simply run the program and let's see
229:22 - what output we are getting so let me
229:25 - invoke the function right over here so I
229:27 - can say
229:28 - my new function I want to invoke it let
229:31 - me save the file and let me run it
229:34 - so as you can see I am getting the
229:36 - output as 22. let us see what's
229:39 - happening right over here so as you can
229:41 - see on land number 29
229:44 - the value inside num is 12 you can see
229:48 - that's what it is and since we are
229:50 - creating a new variable and we are
229:53 - trying to assign value to the new
229:55 - variable
229:56 - python is taking this num from the
229:59 - global scope
230:00 - in the global scope the value is 12 and
230:03 - we are trying to add 10 that's why the
230:06 - new number is 22. in the next video we
230:09 - will go back to our game and let us see
230:12 - how we can divide all of the logic into
230:14 - small functions
230:15 - now let's see how we can use functions
230:18 - inside our game so I want to do just
230:21 - copy this file from folder number four
230:24 - to our folder number five
230:27 - and I want to just rename this file from
230:31 - number 2 to number three
230:34 - and that's it and let me also change the
230:37 - documentation for this module in this
230:39 - video we are going to concentrate on two
230:41 - main things the first concept is called
230:43 - as dry that means don't repeat yourself
230:47 - what this means is whenever we have some
230:50 - kind of a logic that is repeating at
230:52 - that time we want to take the logic out
230:54 - and put that logic inside a function and
230:57 - we can keep on using that function
230:59 - wherever we require it the next one is
231:02 - what I've already shown you this is
231:03 - called as single responsibility
231:06 - principle that means we want to Define
231:08 - our functions in a way that one function
231:11 - will ideally do one job at a time
231:15 - let's see how we can do all of these
231:16 - things
231:18 - let me go down over here so here you can
231:20 - see that we have a list of all the
231:22 - superheroes and all of our super
231:24 - villains
231:25 - so what I can do is I can create a
231:27 - function that will return the list of
231:30 - all of this superheroes and
231:32 - supervillains as well now why do we need
231:35 - to do this the answer is we want to
231:37 - isolate parts of our program
231:40 - suppose you are working in a team and
231:42 - you don't want any other developer to
231:44 - add or subtract from your list of
231:47 - characters so that's why we need to have
231:50 - some sort of an isolation so let us
231:52 - create a function for superheroes and
231:55 - supervillains as well let me put a
231:58 - comment right over here so this block is
232:00 - going to be for my superheroes let me
232:03 - Define a function called as get all
232:06 - superheroes this is not going to take
232:08 - anything and let me take all of these
232:12 - things inside my function and since I am
232:15 - going to return a list of superheroes I
232:17 - will also cut my line from 51
232:21 - and I'll put it inside my function
232:24 - which is right over here
232:27 - I also need to return my list so I'm
232:30 - going to use the keyword of return and I
232:32 - want to return my list of superheroes
232:35 - now since my function is returning a
232:39 - list of characters so the return type of
232:41 - my function would be
232:43 - like this so this function is going to
232:46 - return a list of characters till now I
232:49 - have been using this keyword of final
232:51 - because I just wanted to show you that
232:53 - whenever we type everything in capital
232:56 - that symbolizes a constant and we don't
232:59 - want to change the value in the future
233:01 - but these days your code editor and my
233:04 - pack is smart enough to infer that if we
233:07 - write everything in capital we can
233:09 - actually skip writing final so I am just
233:11 - going to take it out what I can do is I
233:13 - can just leave Final on this line number
233:15 - 40 just as a reference for you
233:18 - and let me take it out
233:20 - right over here and this one and this
233:25 - one let me see my file if you just hover
233:28 - over any of the variable you can see
233:30 - that we have the word of constant that
233:33 - means my pi and your code editor they
233:36 - are able to correctly in for that this
233:38 - is a constant let us create one more
233:40 - function to get a particular superhero
233:42 - in this function we can get all of the
233:45 - superheroes but what happens if we want
233:47 - to get a particular superhero and
233:50 - remember this is a list of superheroes
233:52 - so we can get a particular superhero if
233:55 - we know the index suppose the index
233:58 - number is 1 so we can return Black Widow
234:00 - if the index number is 3 then we can
234:03 - return Hulk and so on so let's create a
234:06 - function to return a single superhero
234:08 - let's create a function right over here
234:10 - so I can say Define a function called as
234:13 - get superhero this function is going to
234:16 - accept one parameter called as index of
234:18 - the type of integer
234:20 - and let us see what this function is
234:22 - going to return
234:23 - this function is going to return a
234:26 - character
234:27 - but what happens if we can't find a
234:30 - character in that case we also have to
234:32 - return none
234:34 - so this function is either going to
234:37 - return a character or it is going to
234:39 - return none
234:40 - let's see how we can implement the logic
234:43 - let me add some documentation right over
234:45 - here but before we can get a superhero
234:48 - we need the list of our superheroes
234:51 - but that's pretty easy we just created
234:54 - an entire function for this so I can
234:56 - just say
234:58 - that my
235:00 - superheroes is equal to the function get
235:04 - all superheroes and that's it we have
235:07 - the list of all our superheroes now
235:09 - let's see the logic of getting a single
235:11 - superhero from the list of superheroes
235:14 - we already know how to work with indexes
235:17 - but this time we have to be a little
235:19 - more careful what happens if we get
235:21 - index number which does not exist in
235:24 - that time our program will panic and it
235:26 - will exit but we don't want this kind of
235:29 - a behavior
235:30 - let me go to my IPython shell and let me
235:33 - show you what I'm talking about
235:35 - suppose I have a list called as
235:38 - my characters would be
235:41 - a b c and d here you can see the length
235:44 - is 4 so I have four characters so the
235:47 - length is four but my index number stops
235:50 - at 3. so this is my index number 0 index
235:54 - number one index number two and index
235:57 - number three we don't have a index
235:59 - number four
236:01 - now what happens if I say I want to get
236:03 - characters on my index number 4. this is
236:07 - going to cause an error let's see what's
236:09 - happening so as we can see we have an
236:11 - error and the error is the index is out
236:15 - of range and we want to avoid this
236:17 - situation inside our program because we
236:19 - don't want our program to panic and exit
236:23 - so let's go back and here we can say
236:26 - if my index
236:29 - so if my index is less than the length
236:34 - of my list of superheroes only then I
236:38 - can have the right index number so here
236:41 - I can say I simply want to return
236:44 - from the list of superheroes the
236:46 - superhero at the given index
236:48 - else we have some issue and here I can
236:52 - return
236:53 - none because we can't find a superhero
236:57 - let me just save my file let's do the
237:00 - same logic for our super villains as
237:02 - well let me put up a comment these blogs
237:04 - are for my villains let us Define a
237:07 - function get all villains
237:10 - this is going to return a list of my
237:13 - characters
237:15 - and let me take all of these things
237:18 - inside
237:21 - and then I also want to return my list
237:24 - so return villains
237:27 - then we want one more function to get
237:29 - our single villain so let me copy and
237:32 - paste this block
237:34 - so this goes right over here
237:38 - this becomes from superheroes to villain
237:46 - and that's it so now we have a way of
237:48 - getting a particular character and and
237:51 - how to get a list of our characters now
237:54 - let's see where we can use this logic
237:57 - the place where we want to use this is
238:00 - right over here on line number 98 and 99
238:02 - here you can see we first generate a
238:05 - random index and after that we want to
238:08 - get a superhero given that index
238:11 - let me use the function right over here
238:14 - but before we can use this function as
238:16 - we can see we have a block for the
238:19 - attack we can create a function for the
238:21 - attack and we can isolate this
238:23 - functionality as well so let's start
238:25 - doing that so let me add a comment
238:27 - saying that this is the main Logic for
238:30 - the game
238:31 - and I can define a function called as
238:34 - attack
238:35 - this is going to return nothing so I can
238:37 - say none
238:40 - and let me take all of these things
238:42 - inside
238:44 - my function so all of this things goes
238:48 - inside my function
238:50 - let us change this logic so this becomes
238:52 - I want to get
238:54 - super hero from the given hero index
238:59 - and this becomes
239:02 - and get my villain
239:04 - from the given index just save a file
239:09 - and you can see we have a bunch of
239:11 - Errors let's start addressing this
239:13 - errors one by one
239:14 - first thing that I want to change is
239:16 - this variable what I mean to say attack
239:19 - is the attack number so we can improve
239:22 - the name of the variable from Attack to
239:24 - attack number
239:26 - let me change right over here as well so
239:29 - as you can see inside my print statement
239:31 - I'm using this variable so this also
239:34 - needs to be changed from Attack to
239:35 - attack number there is one more final
239:38 - point that I want you to think
239:40 - if you see at the definition of our get
239:42 - superhero we are returning a character
239:45 - or none
239:47 - so what happens if we don't have a
239:49 - superhero or if you don't have a villain
239:51 - in that case we can't have a fight let's
239:54 - create some logic to handle this as well
239:57 - so here after this line I can say
240:01 - if
240:02 - I have a superhero and if I have villain
240:07 - so my current villain
240:09 - only in that case I can do something let
240:12 - me write a comment over here so if you
240:14 - have a superhero and we have a super
240:16 - villain in that case we are going to
240:19 - have the attack
240:21 - else that means we don't have a
240:23 - superhero we don't have a super villain
240:25 - that means we have an error so let me
240:28 - print out a message saying that error no
240:31 - superhero or villains to fight now let
240:33 - us go to this line land number one or
240:35 - four
240:36 - what happens if we have a valid hero and
240:39 - a valid villain then we need to have an
240:42 - actual attack so all of this logic from
240:45 - line number 108 to 117 should go right
240:49 - over here but we are going to create one
240:51 - more function to simulate the attack if
240:55 - you're wondering why do we require so
240:57 - many functions
240:58 - the answer is for flexibility if in the
241:02 - future you have some more characters if
241:05 - you are fighting seeing changes then you
241:07 - can change only a single function and
241:09 - the changes would be reflected
241:11 - throughout your program
241:13 - so we want to have our program as
241:15 - modular as possible
241:18 - that's the reason why we are creating so
241:20 - many different functions first let me
241:22 - invoke the function and then I will
241:24 - Define the function so the function
241:26 - would be called as simulate attack
241:29 - similar attack
241:31 - now let's see what we need to pass to
241:33 - this function the first thing that I
241:36 - want to pass is my attack number
241:38 - we can have only three attacks so that's
241:41 - why we have the range of three over here
241:43 - so I can say
241:45 - the first parameter I want to pass is my
241:47 - attack number then obviously we need the
241:50 - superhero and we also need the super
241:52 - villain
241:54 - now let's go down to line number 107 and
241:57 - let's create this function so let me
241:59 - just copy
242:01 - all of this
242:03 - let me go down let me create a function
242:06 - let me say that
242:08 - Define function put my codes
242:12 - let me add a command
242:15 - I also need to adjust the spacing
242:17 - because this is out of format
242:24 - now let's work on this function so here
242:27 - I don't need the word of current
242:30 - this has to go this also has to go
242:34 - it has to go from everywhere so let me
242:36 - do a multi select
242:40 - so this looks good let me save my file
242:42 - everything is looking really good let me
242:45 - put a comment right where so this is a
242:47 - place where we are
242:49 - setting the life this is where we print
242:51 - some nice message and this is the place
242:54 - where the actual attack is taking place
242:56 - but I'm not really happy with this logic
242:59 - here we are manually adding and we are
243:01 - manually decrementing let us create
243:04 - functions for this as well
243:06 - you must be thinking that I have gone
243:08 - crazy why do we require so many
243:10 - functions let me ask you a question
243:13 - suppose tomorrow the logic of the game
243:16 - evolves and you have some bonus
243:18 - attacking power or you have some bonus
243:21 - life then what do you do so at that time
243:24 - you simply have to change the logic in a
243:26 - single function and that's it so let's
243:29 - develop this habit of making the logic
243:31 - inside different functions as possible
243:34 - and let us try to stick to the principle
243:36 - of single responsibility function
243:39 - that means I want my function to do only
243:42 - one job and also in the future when we
243:44 - learn testing at that time testing
243:47 - functions becomes a much more simpler
243:50 - job so let's see what functions we are
243:52 - going to require we are going to require
243:54 - one function to increment the life of
243:57 - the superhero
243:58 - want to increment the life of the
244:00 - villain
244:01 - and then one more to decrement the life
244:04 - of the villain and one more to decrement
244:06 - the life of the superhero so we require
244:08 - four different functions to do all of
244:10 - these things so let me go to the top
244:14 - and uh
244:16 - here just below the characters let me
244:19 - put up a comment so this block is for
244:21 - the live let me go below and
244:24 - I want to take this variables
244:27 - to the top as well so let me paste it
244:30 - right here and here we can start
244:32 - creating our functions
244:34 - the first one was to increment the hero
244:37 - life
244:40 - so this function accepts life which is
244:42 - all the type of integer and it returns
244:46 - nothing so it has to return none
244:48 - let me put a comment now let's see how
244:51 - to use the logic inside of this here I
244:54 - have to operate on this variable
244:56 - and if you remember the last video this
244:59 - variable is defined on a global scope
245:01 - that means I have to use the keyword of
245:03 - global to reference this one so let me
245:06 - go down over here and
245:07 - let me say that I want to use the global
245:10 - variable of
245:11 - hero life
245:13 - and let us increment the life so I can
245:16 - say hero like is equal to
245:20 - plus my life
245:22 - and that's it
245:24 - we can also use the shorthand syntax so
245:27 - I can simply say
245:31 - plus equal to
245:33 - so let us copy and paste this one and
245:37 - this time let us
245:39 - decrement so I can say
245:41 - decrement
245:43 - this becomes
245:45 - decreases this becomes minus equal to
245:49 - and let us do the same thing for our
245:52 - villain as well so let me copy all of
245:55 - this
245:56 - and let me put it over here
245:59 - and my hero becomes villain so let me do
246:02 - a multi select
246:03 - and this becomes my
246:07 - villain let me copy and paste this one
246:10 - for the last time so this one to
246:13 - decrement
246:14 - so this becomes
246:17 - decrement
246:19 - decreases
246:21 - minus equal to
246:23 - let me save my file everything is
246:26 - looking really good
246:27 - let us go down and see what we are
246:29 - supposed to do next
246:32 - now once inside our function of simulate
246:35 - attack let's see how we can use this
246:37 - functionality but first let us set the
246:40 - types for our function definition so the
246:42 - attack number is my integer
246:45 - my superhero is my character
246:49 - villain is also of the type of my
246:52 - character and this function is going to
246:55 - return nothing so I can say none now
246:59 - let's use the newly created functions so
247:02 - we can use the function right over here
247:03 - so I want to increment the life of
247:06 - superheroes let me grab this
247:10 - let me take it out and write the name of
247:13 - the function this was to increment the
247:16 - hero life
247:17 - same thing will happen here also let me
247:20 - take it out
247:23 - put inside my brackets I want to
247:25 - increment my life of the villain
247:29 - let us do the same thing so here first I
247:32 - want to decrement the life of the hero
247:35 - so
247:36 - let me put this inside my brackets
247:40 - and I can see I want to decrement
247:43 - the hero life
247:46 - and let us do it
247:48 - here as well
247:49 - and here I can say
247:51 - I can decrement
247:53 - the villain life
247:55 - just save your file and we can see we
247:57 - have a couple of Errors so let's see
247:59 - what's happening so what's happening is
248:02 - my Pi is complaining because of
248:04 - incompatible types for now you can
248:07 - ignore the error but let me try and
248:09 - explain what's happening all of these
248:11 - errors will go away when we convert all
248:13 - of the characters into classes in the
248:15 - future videos but right now what's
248:17 - happening is if we go to the definition
248:19 - of our character
248:25 - here you can see the values can either
248:28 - be a string or an integer this is the
248:31 - thing that my Pi is trying to complain
248:34 - is saying that we can't add or we can't
248:37 - subtract strings right over here
248:40 - so that's why it is showing this error
248:42 - so let's move on and let's go to the
248:44 - next block
248:46 - so this is the place where we are seeing
248:48 - if we have lost or if we have won the
248:51 - game we can create a function for this
248:53 - as well so I can put up a command saying
248:56 - that this is for my final game status
248:58 - and let us Define a function called as
249:01 - win or lose it's not going to accept
249:06 - anything
249:07 - and it is going to return nothing
249:11 - let me take all of these things inside
249:15 - we can slightly improve the code as well
249:17 - on line number 164 and 166 we are
249:22 - printing a statement so let us get those
249:25 - variables inside our function so here
249:28 - they are let me take them out
249:32 - and and let me
249:34 - paste it right over here
249:38 - they have to have the right formatting
249:40 - let me put up some documentation right
249:42 - here
249:43 - and a little space
249:46 - let me save and see if everything is all
249:48 - right or not everything looks good and
249:51 - we have a very nicely typed program the
249:54 - last thing to do is just to Define our
249:56 - main function and we simply have to
249:58 - invoke it writing the main function is
250:01 - the most simplest thing so we can just
250:03 - say
250:04 - let me Define my main function
250:08 - this is also going to return nothing so
250:11 - this is the place where we would start
250:13 - the game first thing is we want to have
250:15 - an attack
250:16 - the next thing is we want to check if we
250:19 - have lost or won
250:21 - and that's it the last thing to do is we
250:24 - simply have to invoke this function so I
250:27 - can just say main just save a file and
250:31 - let me just browse if we have some
250:32 - errors or not
250:35 - we can ignore this error as I have just
250:38 - explained
250:39 - but let me check if we have some errors
250:43 - no no everything is looking beautiful
250:47 - all right so let's go down and let us
250:49 - try and play this game beautiful it
250:52 - looks like I have defeated Thanos in the
250:55 - first try itself it's amazing
250:57 - hi we are officially at the end of this
251:00 - section
251:01 - but I have decided to add one more bonus
251:04 - video
251:05 - now this bonus video is all about
251:07 - teaching you higher order functions
251:10 - now learning higher order functions can
251:13 - be a little bit challenging for
251:15 - beginners so I want you to just sit back
251:18 - and relax and just watch as if you are
251:21 - watching a movie
251:22 - if you can understand the concept then
251:24 - it's really amazing if you can't there
251:27 - is nothing to lose and normally it will
251:30 - take you multiple attempts maybe twice
251:33 - or Thrice before you can understand the
251:35 - concept
251:36 - and which is perfectly fine I don't
251:39 - blame you for that the concept itself
251:41 - can be a little more challenging so just
251:44 - enjoy and see if you can get it
251:48 - welcome to the world of functions
251:50 - let's start by understanding what are
251:53 - functions and how they are managed
251:55 - inside our memory so suppose we have a
251:59 - couple of functions so here I have
252:01 - defined two functions one is hello and
252:03 - the next one is good morning
252:06 - so these are pretty simple functions now
252:09 - let's see what's happening inside our
252:11 - memory
252:12 - so this green area would be our memory
252:14 - now please keep in mind that this is a
252:17 - very simplified version in actual life
252:19 - things are much more complicated let's
252:22 - see what's going to happen now when
252:24 - python comes across this line number
252:26 - three and four it is going to create a
252:29 - function called as hello inside our
252:31 - memory so this is what is happening we
252:33 - have a function called as hello inside
252:36 - our memory now the next question is how
252:39 - does python know how many functions it
252:41 - has created inside the memory the answer
252:44 - is python gives each and every object a
252:47 - unique ID now what do I mean by an
252:49 - object object is a generic term just
252:53 - like all of us are human beings but we
252:55 - are also animals same thing anything
252:57 - inside the world of python is an object
253:00 - a variable is an object a class is
253:02 - object a function is object anything is
253:06 - an object inside the world of python so
253:08 - let me say python is going to create an
253:10 - object which is also type type of
253:12 - function inside the memory and the way
253:15 - python is going to keep a drag of all of
253:17 - the objects inside the memory is by
253:19 - giving each one of them a unique ID it's
253:23 - just like us every one of us has a
253:25 - unique passport number so you can say
253:28 - each one of us has a unique ID as well
253:30 - the next question would be how does
253:33 - python know where does the object live
253:35 - it knows because it allocates some
253:38 - address to the object it's just like us
253:41 - every one of us has an address similarly
253:44 - inside the world of python every object
253:46 - which is created inside the memory also
253:49 - has an address and this is how it looks
253:52 - like now this format is a very special
253:54 - format it is called as hexadecimal
253:57 - format you can see this address always
253:59 - starts with a 0 followed by an X so
254:02 - whenever you see this format it means
254:04 - it's an hexadecimal format it is just a
254:07 - way of representating the memory inside
254:10 - our computer now what happens when
254:13 - python goes to next line line number
254:15 - seven it sees that we have another
254:17 - function so it goes back to the memory
254:19 - and it creates another function by the
254:22 - name of good morning
254:23 - now good morning also has a unique ID
254:25 - and it also has a unique address
254:29 - so for example we can say good morning
254:31 - has this address right over here we can
254:34 - see this in action inside our IPython
254:36 - shell so let me open up my IPython shell
254:40 - so here it is so here I can see my
254:43 - definition of hello it's simply printing
254:46 - out hello world so here I'm just
254:48 - creating a very simple function
254:51 - let us see the ID of this function so I
254:54 - can simply type I want to see the ID of
254:56 - my function called as hello
254:58 - so this is the unique ID of our function
255:01 - you can also ask python to reveal the
255:04 - type of this object so you can say I
255:06 - want to see the type of hello
255:09 - and the type is a function if you want
255:11 - to see the address then we can say I
255:14 - want to see the hexadecimal of the
255:17 - object which has an ID of hello
255:22 - and here it is so this is the address of
255:25 - hello inside our memory let us create
255:28 - one more function so let me Define a
255:31 - function called as good morning and on
255:33 - the next line I can say I simply want to
255:35 - print
255:36 - good morning
255:38 - so we have another function let's see
255:42 - the idea of good morning
255:46 - now you can see we have a different ID
255:48 - this ID ends in 144 the idea of hello
255:52 - was 0 3 2. let us also check the address
255:55 - of this one so I can say hex ID of good
255:59 - morning
256:01 - so you can see we have a different
256:03 - address so this is F7 F0 and here it was
256:07 - b370 so that means hello and good
256:10 - morning are two different objects with
256:13 - two different ID and with two different
256:15 - address inside our memory
256:18 - Let Me Clear My terminal
256:20 - and now watch closely what happens if I
256:23 - create a variable called discrete and if
256:25 - I assign it the value of hello and if I
256:28 - try to invoke greed
256:31 - we have an output called as hello world
256:34 - so what's this what's happening behind
256:36 - the scenes now let us go back to our
256:38 - diagram to understand what's happening
256:40 - what's happening is python is actually
256:43 - playing a trick with us
256:44 - so this is the variable which we just
256:47 - created
256:48 - but if you check its address it has the
256:51 - same address as hello
256:54 - so in short what python is doing is it
256:56 - is just creating a reference to hello so
256:59 - the grid variable is just referencing
257:02 - the function of hello it's just like
257:04 - sharing your house and when we invoke
257:07 - this function by using brackets so
257:10 - when we use the bracket that means we
257:13 - are invoking
257:14 - here you can see I don't have the
257:16 - bracket on line number 33 I am just
257:18 - assigning the function of hello to grid
257:20 - and on the next line I am using brackets
257:23 - to invoke the function and when we
257:26 - invoke the function we get the output of
257:29 - hello world so what happens is when we
257:31 - invoke grid it goes back
257:34 - it says that grid is actually
257:36 - referencing hello and behind the scenes
257:39 - it's this function which is being
257:41 - executed
257:42 - but on the scene it looks like it's the
257:45 - function called as grid which is being
257:46 - executed
257:49 - now let's get back to our code editor
257:51 - and start writing some code
257:53 - what I've done is behind the scenes I
257:56 - have created a new file called as Hof
257:58 - this stands for higher order functions
258:01 - Dot py and I have created a couple of
258:04 - comments for us
258:05 - the type of function is also called as
258:08 - callable
258:09 - because this object can be called we can
258:12 - give some arguments to it and we can get
258:14 - some values from it that's why in the
258:16 - world of python functions are also
258:18 - called as callables if you're thinking
258:21 - why do we need this kind of a
258:23 - functionality the answer is till now we
258:25 - have been passing data to the functions
258:28 - but sometimes it can be very expensive
258:31 - so what's the solution the solution is
258:34 - passing the function to the data you
258:37 - have to just start thinking in Reverse
258:39 - so what we are going to do is we have
258:41 - some data and we would be passing
258:43 - functions to it imagine you have
258:45 - terabytes and terabytes of data it would
258:47 - be so expensive to transport all of this
258:50 - data from one server to the another
258:52 - server just for the sake of computation
258:54 - instead we can simply pass a function to
258:57 - the data and we can get our job done
258:59 - much more easily so let's start by
259:01 - creating the same function called as
259:03 - hello right over here so
259:06 - this is the function that we created the
259:08 - next point I again want to reiterate
259:10 - that function is just a regular object
259:12 - of the type of function there is nothing
259:15 - special about it now let us print let us
259:19 - also try to print the ID of hello
259:23 - and let us also try to print
259:27 - the type of
259:30 - let me run the file so here it is
259:34 - let me take it up a little bit
259:36 - okay so when I'm saying I just want to
259:39 - print hello so hello is a function which
259:42 - is present at this address
259:44 - the ID is this one and the type
259:48 - is actually a class of the type of
259:50 - function let's get back and see what
259:53 - else we can do now let's try to create a
259:55 - variable and assign the value of hello
259:57 - to that variable so let me put a command
260:01 - and let us create the variable called as
260:03 - grid and let me assign the value of
260:06 - hello to it again remember I'm not
260:08 - putting my brackets over here because I
260:10 - am not invoking the function I am just
260:12 - assigning the function hello to the
260:15 - variable of grid now let us try to
260:17 - invoke the function of grid so let me
260:20 - write grid with the brackets let me save
260:23 - the file and let me try to run the file
260:26 - so here we have the output of hello
260:28 - world let us go back and see how we can
260:31 - add types to all of this variables I
260:34 - just explained that hello is also called
260:36 - as a callable inside the world of python
260:39 - so the type of grid is actually a
260:42 - callable type
260:43 - let me go up and let me see that
260:47 - from
260:49 - typing
260:51 - I want to import
260:53 - callable
260:55 - now let us go down
260:57 - let us start adding our types right over
261:00 - here so grid
261:01 - is of the type of callable now if you
261:04 - see the function of hello it is not
261:07 - taking any arguments and it is returning
261:10 - none
261:11 - so what we can do is callable let us put
261:14 - some brackets this means that grid is of
261:17 - the type of volleyball and inside this
261:19 - brackets we have to specify the input
261:22 - arguments and the output of the function
261:25 - and here inside the square brackets the
261:28 - first argument is always a kind of list
261:31 - and the second argument is the return
261:34 - type of this function now let's see how
261:37 - we can add the types hello it is not
261:40 - accepting any arguments so the first
261:43 - argument to callable would be empty next
261:46 - our function of hello is returning none
261:49 - so here after the comma I can say
261:52 - it's a callable which returns none and
261:55 - that's it we have a nicely typed
261:57 - function as well let me add some
261:59 - comments just for the sake of reference
262:01 - so here we are just assigning the values
262:03 - and here we are invoking the function
262:06 - let us see what else we can do with our
262:08 - functions let me put a separator and let
262:12 - me put some comments
262:14 - so this time we are going to create a
262:17 - universal gritter remember I just
262:19 - explained the concept that we can also
262:21 - pass the functions to the data that's
262:24 - what we are going to do right now I am
262:27 - going to create a universal greeter that
262:30 - takes two arguments the first argument
262:32 - would be for the name and the second
262:34 - argument will actually take a function
262:37 - now suppose you want to grid Zola then
262:40 - our universe are greater function will
262:42 - grid as Zola if you want to create as
262:45 - good morning then our function will
262:47 - great as good morning
262:49 - if you want to create as goodbye then
262:51 - our function will great as goodbye
262:53 - sounds awesome isn't it so first let me
262:56 - type all of the functions and then I
262:58 - will try to explain all of them let me
263:00 - create the first function called as Zola
263:03 - so what this function is doing is it is
263:06 - simply taking one argument and it is
263:08 - returning a Grita in the form of Zola
263:10 - followed by the name let's create one
263:14 - more function for good morning the next
263:16 - would be for goodbye now let's create
263:18 - our Universal Creator function so let me
263:21 - put up a comment over here and I can see
263:24 - my
263:25 - Universal
263:27 - greeter so this function is going to
263:30 - accept
263:30 - two parameters the first parameter is
263:33 - the name
263:35 - and let me get the spelling right string
263:38 - the name is of the type of a string now
263:41 - what should be the next argument
263:43 - the next argument is of the type of a
263:46 - function
263:47 - let me name it as greet up
263:51 - the type of this is callable
263:54 - now let's see how we can Define the
263:57 - types inside callable look at all of the
264:00 - functions which I have created Zola good
264:02 - morning goodbye
264:04 - the function signature is common all of
264:07 - these functions accept only one
264:09 - parameter that two of the type of string
264:12 - and all of this function returns a
264:15 - single argument which is also of the
264:17 - type of string
264:19 - so that's what I am going to pass right
264:21 - over here let's see how we can Define
264:23 - the types so the first argument is a
264:26 - list and the second argument is the
264:30 - return type all of the functions are
264:32 - returning strings so I can just write
264:35 - string over here and all of the
264:38 - functions are also accepting a string so
264:40 - inside my inner brackets I can say
264:42 - string so this is called as a function
264:45 - signature
264:46 - all of this function except one string
264:49 - and return one string
264:51 - same thing we are saying over here our
264:53 - callable accepts one string and returns
264:56 - one string
264:57 - now let's see how we can Define the body
264:59 - of this function let me add some
265:02 - documentation
265:03 - now here you will be amazed it is just
265:07 - two lines function
265:08 - the first thing that we want to do is
265:10 - let us take the function of Grita
265:13 - and pass it the argument of name that's
265:17 - it
265:18 - that's the entire Logic Let Me assign
265:21 - the output to a variable called as
265:23 - message
265:27 - on the next line let me simply
265:29 - print it out
265:32 - just save a file
265:34 - let me try to run the file and after
265:36 - that I will again try to explain what's
265:38 - happening but before that I want to
265:40 - comment all of these things let me
265:43 - comment out all of this I don't need all
265:45 - of these things the grid function as
265:48 - well
265:50 - let us invoke our Universal greater
265:53 - function and then we can have a nice
265:55 - output so let me go right over here
265:58 - and here let's see how we can invoke the
266:01 - function so let me say Universal greeter
266:05 - my name is
266:07 - thallium
266:09 - now let's see what we can pass as the
266:12 - second argument if you see right here my
266:14 - IDE is telling me that Glitter is also a
266:17 - type of function
266:18 - these brackets it denotes a function it
266:22 - takes a string and it returns a string
266:25 - so basically we can pass any functions
266:28 - that satisfies this signature
266:31 - and luckily all of our functions Zola
266:34 - good morning and goodbye satisfy these
266:37 - conditions so we are going to pass one
266:40 - by one inside the universal reader for
266:43 - the first one let me pass simply as Zola
266:47 - now remember I don't have to put
266:49 - brackets because I am not invoking I
266:51 - simply have to pass my function and
266:53 - that's it let me copy and paste
266:56 - let me take a little up
267:00 - the second one would be good morning
267:04 - the last one would be goodbye that's it
267:07 - just save a file
267:08 - and let's try to run it and hopefully
267:11 - this time we should have a nice output
267:15 - wow it's so amazing single function can
267:19 - produce multiple outputs now let's see
267:22 - behind the scenes what's exactly
267:24 - happening for example let us take just
267:27 - this line line number 65 so Zola is
267:31 - actually a function and this is how it
267:34 - looks now let's go back to our
267:36 - definition right over here this Zola
267:39 - comes as a function called as greater
267:42 - inside our function
267:44 - now this greater is just a reference to
267:47 - the function of Zola
267:49 - let me open up my diagram one more time
267:51 - so imagine this to be our greater
267:53 - function and this to be Zola
267:56 - so greater is just a reference to Zola
267:59 - and whenever we invoke this function
268:01 - behind the scenes the original function
268:04 - is being evoked so let me go back to my
268:07 - code so you can see on line number 61 we
268:10 - have a new variable called as Grita so
268:13 - this grid is actually a reference to
268:15 - Zola we pass one argument of name to the
268:18 - function
268:19 - this name goes right over here and if
268:22 - you see the function definition we are
268:24 - returning a string called as Zola
268:27 - followed by the name we are saving this
268:29 - string inside a variable called as
268:31 - message and we simply want to print it
268:34 - out this is happening with each of the
268:36 - functions
268:37 - the second time what happens is we are
268:39 - passing good morning now the second time
268:42 - this greater over here this references
268:45 - good morning and what good morning is
268:48 - doing is it is simply returning a string
268:50 - good morning followed by the name if we
268:53 - capture this output inside this variable
268:55 - right over here and we are printing it
268:57 - out and the same thing goes with goodbye
269:01 - as well that's the reason why every time
269:03 - we have a unique output first time grida
269:06 - was referencing Zola so we have Zola
269:09 - octallium second time it was good
269:10 - morning so we have good morning
269:12 - octallium and the last time we had
269:15 - goodbye so we have goodbye octallium
269:17 - sounds pretty neat isn't it
269:20 - now let's get back and let's try to
269:23 - learn a little bit more about functions
269:25 - let me put a separator
269:28 - a function as we saw can accept a
269:31 - function but a function can also return
269:34 - a function
269:36 - now this part really took me a couple of
269:38 - attempts to understand so if you can't
269:40 - get it don't worry
269:42 - you will eventually get it so let's go
269:45 - down and let's see how we can create a
269:47 - function that accepts as well as returns
269:51 - a function
269:52 - let me put up a comment
269:54 - let us see how we can create a function
269:56 - that will return us a function
270:00 - let me Define a function called as
270:03 - add Wi-Fi
270:05 - this takes one argument number which is
270:08 - of the type of integer
270:11 - now since this function actually returns
270:14 - a function so we can say this is going
270:17 - to return a callable
270:20 - and we will Define the types A little
270:22 - later on right now just go ahead and let
270:25 - us type the body of the function
270:27 - let me add some documentation
270:30 - now what I'm going to do is I am going
270:32 - to create one more function inside this
270:35 - function
270:37 - so let's create one more function
270:40 - let me create a function called as by 5
270:43 - and
270:45 - this actually does not accept anything
270:47 - and this function returns an integer
270:52 - inside this let me say I want to return
270:54 - the number that we get right over here
270:56 - so I want to return that number
271:00 - plus of 5 so this is the function inside
271:05 - this one and since our outer function it
271:09 - has to also return a callable so we need
271:12 - to have a return statement
271:14 - and this time I am simply going to
271:16 - return my function which is going to be
271:19 - this one called as Wi-Fi
271:23 - first let us see the type hinting and
271:25 - then we will try to understand what's
271:27 - happening so let me go back to this line
271:30 - so we know that this function is
271:32 - supposed to return a callable type
271:35 - now this callable type is actually this
271:38 - function so now we can start adding
271:40 - types to it so here goes my brackets
271:43 - first one is for the inputs
271:46 - after the comma is for the output this
271:49 - function is returning an integer so let
271:51 - me write
271:53 - int over here and this function is not
271:55 - accepting anything so this argument
271:57 - remains blank
271:59 - just save a file so this is also called
272:02 - as your higher order function
272:05 - let's see how we can work with these
272:08 - functions let me say that a new variable
272:10 - called as sum is equal to
272:13 - my function of add by Phi is
272:16 - let me pass a argument of 5 if it is
272:19 - hover over right over here so your IDE
272:22 - is also telling you that the return type
272:24 - is a function which accepts nothing but
272:27 - returns an integer so what's happening
272:30 - is a variable of sum now this is
272:33 - referencing to this variable which is
272:36 - inside
272:37 - we can also invoke some and let's see if
272:39 - we are getting the right output or not
272:42 - so I can say print and sum
272:45 - and that's it the reason why we are not
272:48 - giving any input right over here is
272:50 - because sum is referencing this function
272:53 - right over here and this function does
272:56 - not accept any argument that's why it is
272:58 - blank let me just save it and let me try
273:02 - to run this file and here we have the
273:05 - output of 10.
273:06 - so this Phi plus this Phi is equal to
273:10 - 10. well we can also written a function
273:13 - that accepts an argument
273:15 - that means we can create a function
273:17 - which can actually accept something and
273:21 - do with the data
273:23 - so this time let us create a new
273:25 - function called as universal adder but
273:29 - this Adder is going to be a little
273:30 - unique
273:31 - this Adder is going to add to numbers
273:34 - and subtract by one it's our own add-up
273:38 - so let me go down over here let me take
273:41 - it up
273:42 - let me add a comment
273:45 - and let us Define a function called as
273:47 - our unique adder
273:50 - now this accepts one number so this is
273:52 - going to be our first number so let me
273:55 - call it as num1
273:58 - the type is integer this also returns a
274:03 - callable
274:04 - we will add types shortly
274:07 - let me add some documentation now let us
274:10 - create one function right over here
274:12 - but this function is going to accept
274:15 - another number
274:16 - and we are going to return this number
274:19 - plus another number minus of 1.
274:23 - so I can say Define
274:25 - our adder
274:27 - this function also accepts one argument
274:29 - let me call it as num2
274:33 - type of integer
274:34 - and this one returns an integer
274:39 - and let us place our logic right over
274:42 - here
274:42 - so since this is a unique Adder what we
274:46 - want to do is
274:47 - we want to add the first number
274:50 - the second number and minus of 1.
274:55 - let us go below and complete the
274:57 - function by adding our return statement
275:00 - so we can say
275:01 - this function right over here this is
275:04 - going to return a callable and this time
275:07 - this callable is going to be Adder so we
275:09 - can say return Adder
275:14 - let us Define the typing for this one so
275:17 - our brackets
275:19 - one more brackets inside for the input
275:21 - argument and the next one for the
275:24 - written argument
275:25 - let us see this function this function
275:28 - is returning an integer so we can say
275:32 - integer right over here and this
275:35 - function is also accepting one integer
275:38 - so inside this brackets I can say
275:41 - integer
275:43 - and that's it we have a beautifully
275:45 - typed function as well
275:47 - let's try to invoke this function and
275:50 - let us see if it is doing its job or not
275:53 - so my order would be my unique Adder let
275:57 - me pass one argument of five
276:00 - and as you can see this is returning one
276:03 - more function and the function signature
276:05 - is integer returning an integer
276:09 - let us print out the value let me use my
276:12 - print statement
276:14 - adder and here I want to give my next
276:18 - number
276:19 - so I want to add Phi and Phi let us see
276:22 - what output we should get so I want to
276:25 - add my 5 with my 5 but minus of 1 so the
276:30 - output should be 9 so let me save my
276:32 - file and let us try running it
276:36 - and here we have the output of 9.
276:39 - let us go back and let us try to study
276:41 - what's happening
276:43 - so what's happening is our function of
276:46 - unique Adder is returning another
276:49 - function
276:50 - so this Adder is referencing the return
276:53 - callable from this function and the
276:56 - return callable is this function right
276:59 - over here so in short add a is
277:02 - referencing this Adder over here
277:06 - let us try with one more example so let
277:09 - me add
277:11 - four
277:12 - and three the output should be four plus
277:16 - three seven minus one six let me save it
277:19 - and let me try to run it and here we
277:23 - have the output of six let me put it
277:25 - back to five and five
277:27 - now let us move to the last part which
277:29 - is called as a Lambda
277:31 - let me put a separator line over here
277:34 - and let me put some comments so we are
277:39 - going to learn about Lambda now lambdas
277:42 - are pretty simple but they are often
277:44 - neglected
277:45 - trust me they are not really complicated
277:47 - it is just a different way of declaring
277:51 - your functions
277:53 - let me first type and then I will show
277:55 - you what's exactly happening let me go
277:57 - to the top
277:59 - right over here
278:01 - now this is a function called as hello
278:05 - let us see how we can Define this hello
278:07 - using a Lambda
278:10 - so I can say my new function called as
278:12 - hello number two
278:14 - would be
278:16 - a Lambda Lambda simply means a function
278:19 - now this function is not accepting any
278:22 - arguments so we can just write colon but
278:25 - this returns a string so we can say this
278:28 - is going to return
278:31 - hello world and that's it it's so simple
278:35 - the entire function can be condensed
278:37 - into a single line let me copy this and
278:41 - let me go back to my IPython shell
278:43 - and let's play over there so let me
278:46 - paste it right over here and I can
278:48 - invoke my Hello to just a circular
278:51 - function and we have the output of hello
278:54 - world
278:55 - so lambdas are just your regular
278:57 - functions but they are declared in a
279:00 - different way suppose this function
279:02 - accepts one argument then that argument
279:05 - will come before this columns let me
279:08 - take it out and let me show you one more
279:10 - example
279:11 - let us go right over here for Zola so I
279:15 - can say my Zola number two
279:17 - would be my Lambda now this function of
279:21 - Zola accepts one argument as name so I
279:25 - can write name
279:27 - and this returns a formatted string so
279:30 - you can just copy
279:32 - and
279:34 - paste it right over here and that's it
279:36 - we have a Lambda function ready
279:39 - let me copy this and paste it in my
279:42 - IPython shell let me paste it
279:45 - and that's it
279:46 - let us invoke this one Zola to
279:51 - octallium
279:54 - I forgot to close the string let me
279:56 - close it
279:57 - and we have the output of Zola octalium
280:01 - it's pretty simple isn't it
280:05 - let me again take it out
280:09 - so just for the sake of practice let us
280:12 - create one function which will act like
280:15 - a calculator now just imagine your
280:17 - calculator it's a single calculator but
280:20 - it can do multiple functions it can do
280:22 - addition subtraction Division and so on
280:26 - so we are going to try and mimic the
280:28 - same functionality by using lambdas so
280:32 - here let me create my first Lambda by
280:34 - the name of ADD
280:36 - so I can say this is going to be a
280:38 - Lambda
280:39 - this accepts two number so my number one
280:42 - and my number two
280:44 - and this is just going to return the sum
280:47 - so I can say number one
280:49 - Plus
280:50 - number two if you notice we don't use
280:54 - the keyword of written inside the Lambda
280:56 - because whatever value that comes after
280:59 - the colon it's automatically returned
281:02 - let me save this one
281:03 - now as a convention the arguments for
281:07 - Lambda functions are written as X and Y
281:09 - but you can write num1 and num2 but
281:13 - right now just for the sake of
281:14 - Simplicity let me convert this to X and
281:17 - Y so let me Define
281:19 - multi select this argument becomes my X
281:22 - and the next argument becomes my y
281:26 - let us see how we can add types to our
281:29 - function
281:31 - so as we know Lambda is nothing is just
281:34 - a function and we know the function is
281:37 - also called as a callable we can say it
281:40 - is of the type of callable
281:44 - now inside the first brackets are for
281:47 - the inputs the next one is for the
281:50 - output
281:51 - now let us see what's happening our
281:54 - function of Lambda is accepting two
281:57 - inputs this is the first one and this is
281:59 - the second one and we want to say that
282:02 - both of the inputs should be of the type
282:05 - of integer so let's go back right over
282:08 - here and we can say the first argument
282:10 - is an integer the second argument is an
282:13 - integer as well and we are returning a
282:16 - single value so we can say this function
282:20 - is going to return a single value of a
282:22 - type of integer and that's it let us
282:25 - create one for subtract and one for
282:27 - multiply so let me just copy and paste
282:30 - this would be for subtract
282:33 - I just have to make a very small change
282:35 - this has to be x minus
282:38 - and this one would be for multiply again
282:41 - this is X into
282:44 - so you can see it's so simple let's
282:47 - define a calculator on the next line so
282:49 - I can say Define calc
282:52 - now let's see the inputs so obviously we
282:56 - required two numbers so I can say my
282:58 - first one is an integer the second one
283:01 - is also an integer
283:04 - and the third one is going to be a
283:07 - function let me call that function as
283:09 - operation
283:12 - so we are going to operate on both of
283:14 - this number that's why I'm going to call
283:16 - this function as operation we can call
283:18 - anything that you want the type of this
283:21 - one is exactly the type of this one so I
283:24 - just have to copy and paste
283:26 - from here to here
283:30 - now let's go to the return type
283:33 - and this is going to return an integer
283:36 - so what's happening is we have a Lambda
283:38 - it is taking two integers and it is also
283:42 - giving an integer in return so this is
283:44 - what we want to return so this integer
283:46 - comes from here to here
283:49 - and inside let me put some documentation
283:52 - here the written statement is extremely
283:54 - simple
283:56 - we simply want to execute the operation
283:58 - on both our numbers so number one and
284:03 - number two that's it and we simply have
284:06 - to return the output so I can say return
284:11 - save your file and we have a nicely
284:13 - defined calculator as well let's try to
284:16 - invoke our function and let's see if we
284:19 - are getting the right output or not let
284:21 - us try adding 4 and 5 so I can say I
284:24 - want to print
284:25 - the output of my calculator
284:28 - I want to add 4 and 5 and the operation
284:32 - here is going to be this add operation
284:35 - so I can just pass that function right
284:37 - over here I can say add
284:39 - next let us do subtract and multiply as
284:43 - well so this will be
284:46 - subtract and this would be
284:49 - multiply
284:50 - save your file and let us try it running
284:53 - for the last time
284:55 - and here is output
284:58 - 4 plus 5 is 9 4 minus 5 is -1
285:03 - 4 multiplied by 5 is 20 well that's it
285:07 - for this video I hope you really enjoyed
285:10 - working with functions more you start
285:12 - practicing with functions more you will
285:15 - start loving them and once you are
285:17 - hooked to functions you will never want
285:19 - to go back again
285:21 - and if you want to learn the functional
285:23 - approach of programming
285:24 - then perhaps python may not be the right
285:27 - programming language because python is
285:29 - an object oriented language if you want
285:32 - to learn more about the functional
285:33 - aspect then you can learn languages such
285:36 - as Elixir Haskell and Scala those
285:39 - languages are built around the
285:41 - functional approach
285:43 - welcome to a brand new section this
285:46 - section is all about object oriented
285:49 - programming
285:51 - even though the name sounds pretty big
285:53 - but the concept is not so difficult some
285:57 - of the main aspects of object oriented
285:59 - programming are classes instances
286:03 - inheritance and polymorphism
286:06 - so I will be covering all of those
286:08 - inside this series let's go to our code
286:12 - editor and let's start creating some
286:14 - classes behind the scenes I have created
286:16 - one more folder called as zero six oops
286:19 - and inside of this folder I have created
286:23 - a file called as basic dot pi and I have
286:26 - posted some documentation right inside
286:28 - this file first let us create a class
286:31 - and then we will see what is it all
286:33 - about and after that I will come to all
286:36 - of this documentation so let me collapse
286:39 - my sidebar
286:40 - so let me go below and
286:43 - let us create our very first class so we
286:46 - can use the keyword of class
286:48 - followed by the name of the class let me
286:51 - just call it as some class I don't care
286:54 - the name right now
286:56 - the next line is for the documentation
286:58 - of the class so let me add some
287:01 - documentation saying that defines an
287:03 - empty class and inside of this I don't
287:05 - want to pass any logic for now I want to
287:08 - keep the body as empty
287:10 - so I can simply say pass
287:13 - and that's it we have created our very
287:16 - first class let's try to print it out
287:18 - and see what output we are getting so I
287:21 - can say
287:22 - I want to print out
287:25 - some class let us save it and let us try
287:28 - to run it and here we have the output
287:31 - underscore underscore main underscore
287:33 - underscore dot some class
287:36 - now this output looks a little bit
287:38 - cryptic and we will take care of these
287:41 - things in the future but what this is
287:43 - trying to say is in the main file
287:46 - there is a class called as some class so
287:51 - this sum class means this class
287:54 - and this underscore underscore main
287:56 - underscore underscore simply means the
287:58 - main file
288:00 - now this is just a naming convention
288:02 - whenever we execute some python module
288:05 - python behind the scenes names the main
288:09 - module as underscore underscore main
288:11 - underscore underscore so this double
288:13 - underscores are also called as Dundas
288:16 - python makes a lot of use of this
288:18 - tenders and we would be seeing them
288:21 - shortly let us go back and create some
288:23 - more classes let me put a separator
288:27 - let us create a class which represents a
288:30 - person so I can say class
288:32 - followed by the name of the class now
288:35 - remember the name of the classes are in
288:38 - Pascal case that means the first
288:40 - alphabet of each word has to be Capital
288:42 - if you check this class my S was capital
288:45 - and C was Capital just make sure you
288:48 - always follow this convention whenever
288:50 - you want to define a class
288:52 - now let's go right over here and create
288:55 - a class of person
288:58 - let me add some documentation that this
289:00 - class defines a person now let's see
289:03 - let's try to imagine a structure of a
289:05 - person every person has a first name and
289:08 - a last name so let us give this
289:10 - properties to our class of person and we
289:13 - can do that by using a Dunder method
289:16 - which is called as init now don't fuss
289:18 - over what is this method what is a class
289:21 - and whatever I'm going to show you right
289:23 - now this video is just to show you what
289:25 - is the class and in the next video I
289:27 - will explain you all of the things which
289:29 - are happening behind the scenes right
289:31 - now just go with the flow the first
289:33 - function inside your class always has to
289:37 - be a special function by the name of
289:39 - Dunder in it so this is how you define
289:43 - it Define
289:44 - Dunder
289:46 - in it
289:47 - Dunder this is just a naming convention
289:51 - by python we have a Dunder in the front
289:53 - and under at the back
289:55 - there is nothing special about this
289:57 - function this is just like your regular
289:59 - function just that we have a different
290:02 - naming style for this one now since this
290:05 - init function belongs to a class the
290:09 - first argument should always be self
290:11 - self actually acts like a reference it
290:15 - means the instance of this class again
290:17 - don't worry I will explain all of these
290:19 - things in the next video this function
290:21 - of init is going to accept two more
290:24 - parameters the first one would be for
290:28 - the first name of the person
290:30 - the type is going to be a string next
290:33 - one would be the last name
290:36 - again a string and always remember that
290:40 - this init method returns nothing so the
290:44 - return type is going to be none and
290:47 - inside let us see how we can construct a
290:50 - person here we have to say that cell Dot
290:55 - first name is equal to first name so
291:00 - what I am trying to do is I am just
291:01 - taking the first name and I am creating
291:04 - an instance variable called as first
291:07 - name
291:08 - now this can be anything I can also name
291:10 - it as
291:11 - if name and I can write this as F name
291:16 - it doesn't really matter
291:18 - the same goes for this one you can call
291:20 - this ABC it doesn't matter but if you
291:23 - are writing ABC over here then this also
291:26 - has to be ABC but as a convention it is
291:30 - normally cell
291:31 - and let me change this to my first name
291:34 - let us create one more instance variable
291:37 - for the last name so I want to say
291:40 - for my instance of a person so that
291:43 - means for self Dot
291:46 - last name is equal to last name so the
291:50 - same thing I am taking the last name
291:52 - from my init method and I'm creating
291:55 - something which is called as an instance
291:57 - variable right over here now let's see
292:00 - how we can work with this class so I
292:03 - want to say my first person is a type of
292:08 - person the first name is Lewis
292:12 - the last name is Zappa let me save this
292:16 - and let us try to print
292:20 - first person that's it let me comment
292:24 - this out I don't want this one and let
292:26 - me run this file
292:29 - and here we have one more cryptic output
292:32 - saying that it is main dot person object
292:35 - at so and so address
292:37 - if you have seen my last lecture about
292:39 - higher order functions you can make it
292:42 - out that this is a hexadecimal address
292:45 - for this object let us go back and see
292:47 - if we can improve this one let us create
292:50 - one more Dunder method and this time the
292:53 - name of the random method is called as
292:55 - underscore underscore r e p r
292:58 - so this stands for representation
293:02 - underscore underscore and self always
293:05 - remember the first argument by default
293:08 - inside a class should always be self now
293:11 - this is going to return a string so I'm
293:15 - going to put a string over here
293:16 - and let me just say return and I am
293:20 - going to return a string so I can just
293:23 - say inside my codes that this is a
293:27 - class of the type of
293:31 - person
293:34 - that's it just save a file and try to
293:37 - run it so this time we have a much
293:40 - better output so this underscore
293:42 - underscore init and underscore
293:44 - underscore repr these are also called as
293:47 - magic methods python is always going to
293:50 - look for this magic methods whenever it
293:53 - has to create an instance of the person
293:56 - class let me add some
293:59 - documentation over here
294:01 - so this magic method of repr is also
294:05 - known as the official representation of
294:09 - your class now let's see one more magic
294:11 - method let us open up the terminal one
294:14 - more time and to be frank this output
294:17 - doesn't make much sense except that this
294:20 - is saying it is just a class of the
294:22 - person
294:23 - it is not giving any details of which is
294:25 - a person what the first name what is the
294:28 - last name and so on
294:29 - but we can improve this by using one
294:32 - more magic method and this time the name
294:35 - of this magic method is underscore
294:37 - underscore Str so I can say Define my
294:41 - Str
294:43 - so this Str simply means for the string
294:47 - representation of the class and as a
294:50 - convention it has to accept self as the
294:52 - first argument
294:54 - this method also returns string
294:58 - let me add the documentation saying that
295:00 - this magic methods provides string
295:03 - representation of an instance I will
295:06 - explain all of these things in the next
295:07 - video instance and classes right now
295:09 - just go with the flow and complete this
295:11 - video so here I can say I want to return
295:14 - a string let me construct one string by
295:17 - using our string formatting
295:20 - so I can say person
295:22 - the way to get the first name and the
295:24 - last name is using this syntax self DOT
295:28 - first name inside this curly brackets I
295:31 - simply have to say I want to get
295:33 - the first name of this instance
295:39 - so self is acting as a reference it is
295:42 - telling python I want to fetch the first
295:44 - name of this particular person only so
295:48 - let us have the last name as well so we
295:50 - can say self Dot last name
295:54 - let us save the file and let us try to
295:56 - run it
295:57 - so this time we have a much better
296:00 - output and this output also makes some
296:02 - sense that this is a person and the name
296:05 - of the person is Louis Zappa
296:07 - let us create one more person let me put
296:10 - up a comment first over here
296:13 - so what we are doing is we are creating
296:16 - an instance of the class of person let
296:21 - us create one more person so I can say
296:23 - the second person would be person the
296:27 - first name could be CC let me get the C
296:30 - capital and her surname could be
296:35 - Neutron
296:37 - let us printed out
296:40 - let me print out my second person
296:44 - save your file and just run it and here
296:47 - we have the output the second person is
296:49 - CC the first person is Lewis
296:53 - so I think we have learned enough for
296:55 - this first video in the next video I
296:57 - will explain all of these things and
297:00 - hopefully you would have a better
297:01 - understanding of classes
297:03 - now let us try to demystify our classes
297:07 - so this is the class of person that we
297:10 - have created in the last video
297:12 - for this slide I had to slightly
297:14 - compress the syntax so we can see some
297:17 - of the namings are different from the
297:19 - names that we gave the last time
297:22 - so just go with the flow so this was the
297:25 - class that we created last time the name
297:27 - of the class is called as a person and
297:30 - we have a couple of magic methods inside
297:32 - of this one
297:34 - now let's see what's happening inside
297:36 - our memory
297:38 - so as usual this is our memory and let's
297:41 - see what's going to happen next python
297:43 - will see that we have a class called as
297:45 - person and it is going to create a class
297:48 - inside its memory
297:50 - now this class doesn't hold any data
297:54 - this class that you can see over here
297:56 - this is just like a design or rather it
297:59 - is just like a blueprint for a building
298:02 - but we don't have the building yet and
298:05 - how do we know what is the design of
298:08 - this class we can see the design of this
298:11 - class with the special method called as
298:13 - init
298:15 - this method is also called as the
298:18 - Constructor or the initialization of our
298:21 - class so let me repeat
298:23 - this is just a class it does not hold
298:26 - any data it is just like a design or
298:29 - blueprint now let us see what's going to
298:32 - happen on our line number 15. whenever
298:35 - we are creating an object of the type of
298:39 - person
298:39 - that time we say that we are creating an
298:43 - instance of the class of person
298:46 - so let's see what's going to happen
298:48 - python is going to take the design of
298:50 - person from our underscore underscore
298:53 - init method so it's going to take the
298:55 - design so we have the design
298:58 - and it's going to create an instance by
299:00 - the name of person one
299:02 - so as you can see we have an instance by
299:05 - the name of person one
299:07 - so that is being constructed inside our
299:10 - memory the same thing happens with
299:12 - person 2 as well python is going to take
299:14 - the design of person
299:16 - and it is going to create an instance of
299:19 - person two so here it is so this is the
299:23 - basic difference between a class and an
299:25 - instance class is like the basic
299:28 - blueprint or the design
299:30 - and an instance is an object of the type
299:34 - of class so person one and person 2 are
299:37 - called as instances the design is called
299:40 - as a class now if you have seen my
299:42 - earlier video about higher order
299:43 - functions you must be knowing that
299:46 - different objects have different memory
299:49 - address
299:51 - so person number one and person number
299:53 - two are completely different objects and
299:56 - they have a completely different memory
299:58 - address just imagine that this is the
300:01 - memory address for person one
300:03 - and this is the memory address for
300:06 - person number two now let's see what's
300:08 - happening behind our Constructor or our
300:11 - Dunder init method so this method is
300:14 - just acting like fill in the blanks so
300:17 - you can see our Constructor this is for
300:19 - the first name and this is for the last
300:21 - name
300:22 - and you can see right over here first
300:24 - name and the last name this init method
300:28 - just acts like a fill in the blanks
300:30 - so it's going to take Lewis from here
300:32 - and it is going to put it right over
300:34 - here
300:35 - is going to take Zappa and it is going
300:37 - to put it right over here
300:39 - so that's what is happening
300:41 - so if you see inside the memory when the
300:43 - first instance is created
300:46 - init method is going to assign the first
300:48 - name to Lewis and the last name to Zappa
300:52 - same thing is going to happen with
300:54 - person number two as well whenever we
300:57 - are creating this instance the init
300:59 - method is going to assign
301:01 - the last name sorry this has to be first
301:03 - name not last name
301:05 - the first name to CC and the last name
301:08 - to Neutron
301:09 - the last thing that I wanted to explain
301:11 - is all about this keyword of self
301:14 - now self only acts as a reference that
301:17 - means it tells python on which instance
301:20 - do I populate in the data or if you want
301:23 - to get the data it simply tells python
301:25 - from which instance do I have the data
301:28 - let me show this in action let us go
301:31 - back to the previous class which is
301:33 - right over here and on the next line let
301:35 - us print out the first name for both the
301:38 - persons so I can say I want to print out
301:41 - my first person's
301:43 - first name
301:45 - and let us do the same thing for the
301:48 - second person as well
301:50 - the save a file and let us try to run it
301:54 - and you can see we have a different
301:55 - output
301:57 - let me take it up the first person's
301:59 - first name is Lewis
302:02 - the second person's first name is CC the
302:05 - way python can keep a track of this is
302:07 - because of the keyword of self so this
302:10 - first name belongs to the instance of
302:14 - this one
302:15 - so let me show in the diagram whenever
302:18 - we are printing the first name of the
302:20 - first person the self references to the
302:23 - instance on this memory address so
302:26 - python can correctly retrieve the date
302:28 - of Lewis and that's what we are seeing
302:30 - on our terminal so let me open up the
302:33 - terminal and this is what we get and
302:36 - similarly when we say we want to print
302:38 - out the first name of the second person
302:41 - let us go back to the diagram the self
302:44 - is telling python that this time the
302:48 - person is actually this one and this
302:50 - person can be found at this address
302:53 - so the first name this time would be CC
302:56 - and not Lewis
302:58 - I hope now we have a much better
303:00 - understanding of classes instances
303:02 - objects Constructor and so on now let us
303:06 - move on in the next video
303:08 - we just saw that instances have
303:11 - different memory address let me go back
303:14 - to diagram
303:15 - so here I explained that this instance
303:18 - has a different memory address and this
303:20 - instance has a different memory address
303:23 - now let's see that in action let us go
303:26 - back to our code
303:28 - and here let me put up a comment
303:31 - and I don't want this one so I can take
303:35 - it out
303:36 - this one as well and let's print out the
303:39 - memory address of our P1 and P2 as well
303:42 - so I can say print my formatted string
303:47 - and I can say P1 is located at memory
303:50 - address and if you have seen my video on
303:53 - higher order functions we know that we
303:55 - can get the memory address from hex
303:59 - and then inside we require the ID of the
304:02 - object
304:03 - and we require the ID of P1
304:07 - let me copy and paste it this time it
304:10 - has to be P2 this also has to be P2
304:14 - just save it and let us try to run it so
304:18 - here we can see P1 is located at this
304:22 - address so here you can see this is four
304:25 - seven six three f
304:27 - and P2 is 479 e d so you can see we have
304:32 - two different instances at two different
304:34 - memory locations and both of them have
304:37 - taken the design from the class of
304:40 - person and the Constructor was our init
304:43 - method let's create one more function
304:46 - inside our class
304:47 - so let us create a simple function for
304:50 - grid
304:51 - so I can say Define grid
304:55 - and as you know the first argument
304:57 - should always be the self
304:59 - always acts like a reference and this
305:02 - one actually does not return anything so
305:05 - I can say none
305:06 - and here I can say print
305:10 - formatted string
305:12 - let me put the first name
305:14 - self DOT first name
305:17 - and then I can print a message saying
305:19 - that first name says hello that's it
305:23 - just save your file now just one small
305:25 - technical detail all of the functions
305:28 - that we create inside the class they are
305:31 - called as methods so let me put up a
305:34 - comment over here so
305:36 - this is a method that prints a greeting
305:39 - message
305:40 - so methods and functions is the same
305:43 - thing the only difference is that
305:45 - methods are always tied to some class
305:48 - that's why they are called as methods
305:51 - now let's see how we can call this
305:53 - methods
305:54 - so let me go right over here let us get
305:57 - the first instance so we can say P1
306:00 - and we can call the method by Dot and
306:03 - the name of the method so we can say I
306:06 - simply want to invoke the method of grid
306:08 - on the first person we can do the same
306:11 - thing on the second person as well so I
306:14 - can say
306:15 - second person and let me put up a
306:18 - command
306:20 - that's it let me save and let me run it
306:23 - and here we have the output Lewis says
306:26 - hello CC says hello
306:29 - if we go back to the definition of class
306:31 - you can see we have four different
306:33 - methods in it representation the string
306:37 - representation and grid What
306:39 - differentiates between this random
306:42 - methods and the regular method is that
306:43 - python by default is going to search for
306:47 - this render methods so that it can
306:50 - Implement its own magic if you change
306:52 - the name from init to something else
306:54 - then the class Constructor is not going
306:57 - to work
306:58 - so always make sure you get the naming
307:00 - convention right in it is for the
307:02 - construction
307:03 - repr is for the official representation
307:07 - and this is just for your reference this
307:10 - is called as a string representation
307:12 - even though the name starts with an
307:14 - underscore you can use them just as your
307:17 - regular function
307:18 - let's see how to do that let us go right
307:21 - over here
307:22 - let me make some space and
307:25 - let me print out P1 dot underscore
307:29 - underscore SDR
307:32 - and that's it
307:33 - so what we are doing is we are simply
307:36 - calling the method called as SDR on the
307:39 - instance of P1 that's it let me save and
307:42 - let me try to run the file
307:44 - and here it is we have the output of
307:47 - person Lewis Zappa so this is absolutely
307:51 - possible but this is not the recommended
307:54 - way of doing it so let me put up a
307:56 - comment
307:57 - possible but not recommended
308:00 - well that's it for this one in the next
308:02 - video we will convert the character from
308:05 - our game to a class now let's see how we
308:08 - can convert the character from our game
308:10 - to a class
308:12 - What I've Done behind the scenes I have
308:14 - created a new file called as character
308:16 - dot Pi inside my zero six folder let us
308:20 - go back to the folder number five and
308:22 - inside the game so this is how our
308:25 - character looks like our character has a
308:28 - name attack power and life
308:30 - we can use this parameters to create our
308:34 - own class so let us go back to our
308:36 - character.py file let me collapse my
308:39 - sidebar and let's start creating a class
308:42 - for our character so the first is the
308:45 - keyword of class followed by the name
308:47 - character let us go inside the first
308:51 - method is always going to be the
308:53 - Constructor that means our underscore
308:55 - underscore edit method so we can
308:58 - write like this Define
309:00 - my init
309:02 - remember the first argument should
309:05 - always be self for reference here we can
309:09 - accept three different arguments let us
309:12 - go back to the game
309:13 - so we need one argument for the name one
309:16 - argument for the attack power and one
309:19 - argument for life so let us go back to
309:22 - our init method and here I can see I
309:25 - want to accept a name
309:27 - pipe string
309:29 - next is attack power
309:32 - pipe is an integer
309:34 - life
309:35 - the type is an integer and this method
309:39 - always returns none let us create some
309:43 - variables inside again you have to
309:45 - follow the conventions
309:47 - you have to write self dot name
309:51 - and let us take the data from this
309:53 - variable and put it right over here so I
309:56 - can say name remember that you can name
309:58 - this anything so I can just call this as
310:00 - n
310:02 - but you have to change over here also
310:05 - but as a convention normally we would
310:07 - like to keep it the same names so let me
310:10 - go back
310:11 - the next is for the attack power so I
310:13 - can say self Dot
310:15 - attack power would be my attack power
310:20 - the text would be self dot life
310:23 - would be my life
310:27 - let me add some documentation right over
310:29 - here
310:31 - saying that this method creates an
310:33 - instance of character let me add some
310:37 - documentation for the class as well so
310:40 - this is for documentation of the class
310:42 - that this class defines a character
310:46 - now let us create an instance of this
310:48 - class so let me create a villain first
310:51 - so I can say a villain
310:53 - villain the first one would be a
310:56 - character
310:57 - the name would be
311:00 - Thanos
311:01 - his attack power is 400 and his life is
311:06 - 1500 let me
311:09 - print out the villain number one
311:12 - let us save the file and let me try to
311:14 - execute this file
311:16 - and here we have the output but as you
311:19 - know this is a little cryptic output so
311:21 - what python is telling that this is a
311:24 - character object add this and this
311:26 - memory address but you already know how
311:29 - we can improve this so let's start
311:31 - adding some of the dender or the magic
311:33 - methods the first one I can save is my
311:36 - repr the first argument is self and this
311:41 - returns a string
311:44 - I can say return so this is my class of
311:50 - the type of character
311:53 - let me save the file and let me run one
311:56 - more time so this time we have a little
311:58 - better output my VLAN is actually a
312:00 - class of character
312:02 - let us improve further by using our Str
312:05 - method so we can Define it right over
312:08 - here
312:09 - SDR
312:11 - first argument is always the self
312:15 - this this returns a string and let us
312:20 - construct a string right over here
312:22 - so I can see the name
312:25 - it would be self dot name
312:29 - next would be the attack power
312:34 - and this would be self dot attack power
312:38 - next would be life
312:42 - so this would be self dot life
312:46 - that's it let me save it and let me try
312:49 - to run it so this time we have a much
312:52 - better output the name is Thanos attack
312:54 - power is 400 and the life is 1500 let us
312:58 - go back and let us create some more
313:00 - characters let me put up one comment
313:03 - over here so while constructing a class
313:06 - you can actually use key and value pairs
313:09 - so let us create one more villain and
313:12 - let's see how we can do this so this is
313:14 - my villain number two
313:16 - it is a character and here we can use
313:19 - the key value pairs so I can say the
313:22 - name
313:23 - maybe this time it is Red Skull
313:27 - the attack power is 300.
313:30 - and the life is 800 and that's it
313:35 - let me try to print out the second
313:37 - villain as well so I can say villain
313:39 - number two
313:41 - just save it and try to run it and here
313:44 - we have the output Red Skull attack
313:46 - power 300 life 800. now the beauty of
313:50 - this key value pairs is you don't have
313:53 - to specify the arguments in a given
313:55 - sequence you can mix up the sequence but
313:57 - still we can have a proper instance so
314:00 - let me show you maybe I can just take
314:02 - this out and put it here
314:07 - and let me save this let me try to run
314:11 - it one more time and still we have the
314:13 - right output let us go back and let us
314:16 - try to create some more Heroes let me
314:18 - create one hero so this is Iron Man
314:21 - attack power is 250 life is thousand let
314:24 - me create one more so this time it is
314:27 - Black Widow the attack power is 180 and
314:29 - the life is 800 and let us also print
314:32 - them out let me run the file for the
314:35 - last time
314:36 - and here we have the output Thanos Red
314:39 - Skull Iron Man and Black Widow before we
314:42 - can move ahead let us take a small pause
314:45 - and let us think do we really require
314:47 - classes let us go back to the earlier
314:50 - program that we wrote
314:51 - so let me go back to my file called as
314:53 - basic
314:55 - and let me collapse my sidebar
314:57 - so let us ask a very fundamental
314:59 - question do we require a class
315:03 - the answer is it depends
315:06 - whenever you want to have a structure
315:08 - and a behavior together at that time
315:11 - using a class makes much more sense if
315:15 - you require just the data then you can
315:18 - use any of the data structures you can
315:20 - use a list you can use a dictionary or
315:22 - some other custom data structures as
315:24 - well but whenever the structure and
315:26 - behavior is tied together that's the
315:29 - best place to create a class for example
315:32 - in this file we have a class of person
315:35 - now let's see what's happening
315:38 - person has a structure and that
315:41 - structure is defined by the first name
315:43 - and the last name
315:44 - now this person can also have a behavior
315:47 - a person can greet another person so we
315:50 - have a method called as greed
315:53 - so greed Can Be Imagined like a behavior
315:56 - of a person
315:57 - a person can have different kinds of
316:00 - behaviors a person can walk a person can
316:03 - talk a person can eat
316:05 - so all of this Can Be Imagined as
316:07 - behaviors but all of this behaviors is
316:11 - tied to a structure and that structure
316:15 - is the First theme last name and maybe
316:17 - you can have multiple other parameters
316:19 - such as your age your location and so on
316:23 - so just keep this in mind classes are
316:25 - not the solution for everything
316:28 - make sure you use the right data
316:30 - structure or the right classes only when
316:32 - it is required let us learn more about
316:35 - classes and this time let us learn about
316:38 - class membership till now we have been
316:41 - creating variables inside our
316:43 - Constructor
316:44 - so for example in our class of character
316:47 - so we can say surf.name is a member of
316:51 - the instance of this class
316:53 - same thing attack power can also be
316:55 - called as an instance variable let us
316:58 - create a new class and let us try to
317:00 - study what is this all about so behind
317:03 - the scenes I have created a file called
317:05 - as
317:06 - members.pi added a couple of comments so
317:09 - let's try to see what's happening inside
317:11 - let us try to create a class called as
317:14 - box
317:17 - and let us Define an init method this
317:20 - box has two sides this is my side number
317:23 - one I can say the type is integer my
317:28 - next side
317:30 - also the type of integer
317:33 - it returns none
317:36 - let us create the variables inside so I
317:38 - can say my
317:40 - side a is equal to my side a and my
317:46 - side B is equal to my side B now what we
317:51 - have done is we have created variables
317:53 - inside our Constructor class now
317:56 - remember what this method does it
317:59 - actually creates an instance and fills
318:02 - in the value so if we refer this diagram
318:04 - our Constructor is simply filling the
318:07 - values of the instances so the variables
318:10 - that create inside they are called as
318:13 - instance variables let me put up a
318:16 - comment right over here
318:18 - now if you go back to the diagram
318:21 - the data is different for every instance
318:23 - so for example the first name for person
318:27 - number one was Lewis
318:29 - and for person number two it was CC
318:33 - now let us see how to create class
318:35 - members let me put up a command so this
318:39 - class members are defined on the class
318:42 - scope so this class members are defined
318:45 - outside our Constructors so let us
318:47 - Define a couple of class members as well
318:50 - let us create a variable and we can see
318:54 - box type and this is going to be a
318:57 - packaging Carton and the color for this
319:01 - one would be brown so this variables
319:04 - that we have created box type and color
319:07 - this variables would be accessible to
319:10 - all of the classes please note that we
319:12 - don't have self over here because we
319:15 - don't need reference to an instance
319:18 - this data is available to all of the
319:21 - classes and all of the instances let us
319:24 - create a Str method
319:26 - here I can say Define my
319:29 - Str
319:31 - ugan cell
319:33 - this always returns a string and I can
319:37 - say
319:38 - return
319:39 - my side a would be
319:43 - my self dot side a
319:47 - and my side B would be
319:53 - sorry it has to be self Dot
319:56 - side B
319:58 - for this example I am going to skip the
320:00 - repr but you can write it on your own
320:03 - let us create an instance called as the
320:06 - first box and I can say the box side a
320:10 - maybe it's three and the next is 4.
320:14 - let us try to print out my box so I can
320:17 - say I want to print my box
320:20 - let me save it and let me try to run it
320:24 - so here we have a box side a is3 and the
320:28 - side B is 4 now let us try to print the
320:31 - class variables
320:33 - from an instance
320:35 - remember this class instances are
320:38 - available for all of the instances so I
320:41 - can simply say I want to print my
320:44 - box first Dot box type
320:48 - and let us print the color as well so I
320:51 - can say the color
320:53 - let me save it and let me run it so we
320:57 - have the output it's a packaging Carton
320:59 - and the color is brown let us go back
321:01 - and let us try to solidify this concept
321:04 - of class members now this class members
321:07 - are available on classes itself you
321:10 - don't have to create an instance
321:13 - that means if you go back to the design
321:15 - we can get back the data from the design
321:18 - itself we don't have to create an
321:21 - instance to get back the data now let's
321:24 - see this in action what we did till now
321:26 - is we created an instance of the box and
321:30 - then we printed
321:31 - this variables right over here but we
321:34 - can simply say I want to print the box
321:37 - type from the class of box
321:41 - let me copy and paste we can also say I
321:44 - want to see the color
321:45 - that's it just save it and let me try to
321:47 - run it and we have the output packaging
321:51 - Carton and brown
321:53 - so this time what we did is we simply
321:55 - accessed this variables from the class
321:57 - we did not create an instance so this is
322:01 - what I mean to say when all of the class
322:03 - members are available to the class
322:06 - itself and also to the instances let us
322:09 - create one more box and
322:12 - print it out so let me print my box
322:14 - number two
322:16 - and just for the sake of confirming we
322:19 - can say my B2 dot box type
322:23 - and my B2 dot color
322:27 - and we should get the same output let me
322:30 - save it and let me run this file for the
322:32 - last time
322:33 - and here it is we get the exact same
322:37 - output let us try to study the next
322:39 - Concept in our object oriented
322:42 - programming and this concept is called
322:44 - as inheritance and polymorphism
322:48 - what I've done is I have created a file
322:51 - right over here called as inheritance
322:53 - and polymorphism
322:54 - and let us try to see what's going on
322:57 - just to give you a very simple example
323:00 - we are all human beings but we are also
323:04 - animals that means we inherit a lot of
323:08 - properties from animals for example all
323:11 - of us have eyes ears hands and legs but
323:15 - all of us human beings we don't speak
323:17 - the same language now that's
323:19 - polymorphism in action inheritance means
323:23 - we inherit all of the features of an
323:25 - animal
323:26 - and polymorphism means even though we
323:29 - have the same properties but we exhibit
323:32 - different Behavior now let's create some
323:35 - classes and see this in action let us
323:38 - create the first class called as animal
323:40 - so let us create a class of
323:44 - animal
323:46 - let us Define our methods over here
323:51 - first is the cell
323:52 - and let me accept one argument for name
323:57 - one for the age and one for the number
324:02 - of legs
324:05 - this returns nothing so I can say none
324:08 - let me put up a comment that we are
324:11 - going to create and initialize the
324:13 - instance variables let's start creating
324:16 - some of our instance variables so I can
324:18 - say my self Dot name is equal to my name
324:23 - then myself dot is is equal to age
324:28 - then self dot of legs is equal to Magnum
324:34 - of legs let us also create the Str
324:36 - method so I can say Define my SDR
324:41 - it
324:42 - takes a self it returns a string
324:47 - and here I can return
324:50 - let's say we can just return the name
324:52 - for now so I can say name and this would
324:56 - be self Dot
324:58 - name let us try to give animals some
325:00 - kind of behavior so let us create a
325:03 - method called as talk on animal so I can
325:06 - say Define a method called as talk
325:09 - the first parameter would be self and
325:12 - this is going to return nothing so none
325:15 - for now let me put up some documentation
325:17 - saying that this method makes the animal
325:20 - talk but let's see what we can do right
325:22 - now
325:23 - since we don't know what kind of animal
325:25 - it is that's why we can't talk yet so
325:28 - let us print the same thing right over
325:30 - here
325:31 - so I can say print
325:33 - my formatted string
325:37 - self dot name
325:40 - can't talk yet so let us go down and let
325:44 - us create one animal so this is my first
325:47 - animal so I can say
325:49 - I want a instance of the class of animal
325:52 - the name is Robin Age maybe he's 10
325:57 - years old number of legs is 4 then let
326:01 - us print out the animal and let's also
326:05 - try to make the animal talk so
326:08 - a1.com just save a file and let me run
326:12 - it so here we have the output we have
326:15 - Robin and Robin can't talk yet now let's
326:19 - go back and let's see how we can create
326:21 - some sort of inheritance
326:23 - let us create a dog now remember dog is
326:27 - a kind of animal so you can say that dog
326:30 - inherits from animal let me create a
326:33 - class and then I will try to explain
326:35 - what's happening so let me create a
326:37 - class called as dog
326:39 - now here inside the brackets we have to
326:42 - specify from which class we are
326:44 - inheriting so dog is inheriting from the
326:48 - class of annual so this is how it goes
326:52 - let us create our Constructor right over
326:54 - here as well so Define init
326:58 - self now let's see what happens since
327:01 - the dog inherits from animal dog also
327:04 - needs to accept all of these parameters
327:06 - name age number of legs so let me just
327:10 - copy and paste
327:13 - and here we can accept some more
327:16 - arguments as well
327:17 - so let me create one more argument for
327:20 - breed so we can accept one for breed let
327:24 - me get the spelling right let us go down
327:26 - and let us start creating our instance
327:29 - variables here at this point python can
327:32 - do a small bit of magic for us
327:35 - since dog is inheriting from animal we
327:39 - don't have to create all of the instance
327:41 - variables manually instead what we can
327:43 - do is we can pass the common data to the
327:47 - class we are inheriting from so we are
327:50 - going to take all of this data and we
327:52 - are going to pass this data to animal so
327:55 - technically animal can be also called as
327:58 - your parent class or it can also be
328:00 - called as your super class let me put up
328:03 - a comment so we want to take all of the
328:06 - common features and pass it to the
328:08 - parent or the super class python
328:10 - provides a keyword called as super so
328:13 - this super means the class of animal and
328:16 - now we want to pass all of this data to
328:19 - one method and that method is called as
328:21 - init now remember in it is just like any
328:24 - other function except it has underscores
328:27 - at the beginning and at the end so we
328:30 - can call that method as we can call any
328:32 - other method so we can say super
328:34 - and underscore underscore init
328:38 - underscore underscore
328:40 - and let us pass the common features
328:42 - which is the name
328:45 - age and the number of legs now it is the
328:50 - responsibility of the superclass that
328:53 - means the class of animal to create
328:55 - instance variables for the name age and
328:58 - number of legs
328:59 - the only argument that is remaining is
329:01 - for the breed so inside dog we can
329:04 - create one more instance variable called
329:06 - as self dot breed and we can assign the
329:10 - value we can also create extra instance
329:13 - variable even though we are not
329:15 - accepting parameters right over here so
329:17 - let me give you a small example so I can
329:20 - say self DOT type is equal to dog so you
329:24 - can see we can create instance variables
329:26 - wherever we want them so let me save
329:29 - this
329:30 - so this is what I mean by inheritance
329:32 - dog is a class which inherits from
329:35 - animals and they share a lot of common
329:38 - functionality that's why we are passing
329:41 - the common functionality to the
329:43 - superclass and we can create some
329:45 - additional instance variables as well
329:46 - now let's see how we can introduce
329:48 - polymorphism in this class remember
329:51 - remember the superclass of animal has a
329:55 - method of Str so let's override this
329:58 - method and let us create a different Str
330:00 - method for dog so let's see how we can
330:03 - do that the syntax is going to be
330:05 - exactly the same so we have to say
330:07 - Define Str takes in a cell
330:11 - gives back a string
330:13 - and let me print out a message over here
330:16 - let us use the formatted string so we
330:19 - can say
330:20 - self DOT type
330:24 - followed by the self dot name
330:27 - and let us also print out the breed so I
330:31 - can say the breed of the dog is
330:33 - self Dot bead
330:36 - oh sorry we can't print because remember
330:39 - the Str method always has to return a
330:42 - string so thanks to our typing my code
330:46 - editor is catching an error so this has
330:49 - to be
330:50 - written not string
330:53 - let me take out the brackets
330:55 - now everything looks good now let's
330:58 - create it all so I can go right over
331:00 - here so I can say my first dog
331:03 - is an instance of the class of dog
331:07 - the name is whiskey
331:09 - the age I can use my keyword arguments
331:12 - as well so my age is five years old
331:16 - number of legs is obviously four and the
331:20 - breed maybe the breed could be Doberman
331:23 - let's try to print out our dog so I can
331:26 - say print
331:28 - my dog let me save it and let me try to
331:31 - run this file so here you can see we
331:34 - have a doberman by the name of whiskey
331:36 - and the breed is double man now let us
331:39 - try and explore some more benefits of
331:41 - inheritance
331:43 - so you can see we have created a class
331:45 - of dog which inherits from animals since
331:49 - dog inherits from animals it also
331:52 - inherits all of the behavior of animal
331:54 - the class of dog does not have a method
331:57 - for talk but the class of animal has it
332:00 - so we can actually make the dog talk as
332:02 - well so we can say
332:04 - D1 dot talk let me save it and let me
332:08 - try to run this file
332:10 - and we get the output that whiskey can't
332:13 - talk it but we can use our polymorphism
332:16 - and we can make whiskey talk so let's
332:19 - see how to do that
332:20 - so inside my class of dog we are going
332:23 - to create a new method called a stock
332:26 - and the new method is going to override
332:28 - the method inside the class of animal
332:32 - so it's just like creating an another
332:34 - method so we can say Define talk
332:39 - it always takes self
332:42 - this is going to return nothing and here
332:45 - let's print out
332:46 - so I can say self Dot
332:49 - name
332:51 - says woof and let me save the file and
332:55 - let us try running this and now we have
332:58 - the output whiskey is saying woof let us
333:01 - go back and let us see what else we can
333:03 - do
333:04 - let me take out this space this class of
333:07 - dog it can have its own Behavior now
333:10 - since this is a dog our dog can also
333:12 - sniff different items so let's create a
333:15 - method called a sniff on dog so let us
333:18 - go down over here so I can say Define a
333:21 - method called a sniff
333:23 - the first argument is always the self
333:26 - now these methods are just like your
333:29 - regular functions they can also accept
333:31 - arguments so let me take an argument for
333:33 - the item that the dog is supposed to
333:36 - sniff
333:37 - it is going to be a string this method
333:39 - is also going to return nothing so I can
333:41 - just say none
333:43 - and let us print out a message
333:46 - self dot name
333:49 - is sniffing out the item so please note
333:54 - that here we don't have to use self dot
333:56 - because item is not an instance variable
334:00 - item is just an regular argument on a
334:04 - regular function let us go down and let
334:06 - us try to sniff so let me say D1 I want
334:10 - you to sniff for ball save a file and
334:14 - let us run it so here we can see we have
334:17 - the output whiskey is sniffing out ball
334:20 - let us create one more class for cat and
334:23 - since cat is also an animal cat is going
334:26 - to inherit animal as well so you can see
334:29 - we can have multiple classes that can
334:31 - inherit from other classes as well let
334:34 - me put a comment saying that this method
334:37 - of talk
334:38 - this is the place we are altering the
334:40 - method and we are adding some
334:42 - polymorphic Behavior so let me go down
334:44 - and let me put a separator
334:47 - and let us create a class of CAD
334:50 - and creating that class is pretty simple
334:52 - I just have to copy all of these things
334:55 - so let me copy let me go down and
334:58 - paste it right over here let's change
335:01 - the name from Dog to cat
335:04 - the type also is a cat this time we
335:09 - don't want the comment now and the cat
335:11 - says meow and we don't want this method
335:15 - because cats are not so good at sniffing
335:17 - so let me take it out let us create one
335:20 - instance of our cat so I can say my cat
335:23 - number one is my cat
335:26 - the name is Jess
335:28 - suppose she's two years old number of
335:31 - legs is four and the breed could be a
335:36 - Persian cat let us print out the cat so
335:40 - I can say print
335:42 - and let us also make the cat talk so I
335:46 - can say C1 dot top that's it let us run
335:50 - the file
335:51 - and we have the output so we have a cat
335:55 - named Jess the British is a Persian cat
335:57 - and chess is saying meow
336:00 - so now you get the idea just for the
336:02 - sake of practice let us create one more
336:05 - class for a dinosaur now this dinosaur
336:08 - is also going to inherit from animal let
336:11 - me copy and paste this separator let me
336:14 - copy all of this as well and let me go
336:17 - down and let me paste it right over here
336:21 - so since this is a dinosaur I can just
336:23 - say Dino and this has to be Dyno as well
336:28 - and since we don't know what dinosaurs
336:31 - can talk put some random text
336:35 - now the dinosaur can also hunt so let us
336:38 - create one method for hunt so let's
336:40 - create one method called as hunt it
336:45 - accepts itself
336:46 - and returns a none
336:50 - here I can say print self dot name
336:55 - is out for hunting let's create one
336:59 - dinosaur so I can say my Dino one is
337:02 - equal to my Dino
337:04 - suppose the name is Adam
337:08 - age could be eight years old suppose the
337:13 - number of legs are two and the breed
337:16 - would be T-Rex let's print out the dyno
337:19 - let us also make the dino talk and also
337:24 - let us make the Dino Hunt that's it let
337:28 - me save and let me run the file and we
337:31 - have the output so this is a dinosaur
337:33 - Adam is saying something Adam is out for
337:37 - hunting
337:39 - so now you get the idea we can have
337:40 - multiple classes inheriting from a
337:43 - single class or you can also inherit
337:45 - from multiple classes as well but we are
337:48 - not covering that in this tutorials let
337:51 - me put a separator and let me show you
337:53 - one nice trick we can also ask python if
337:57 - a certain class inherits from other
337:59 - class or not so let's see if the dog and
338:02 - the cat inherits from animal or not so I
338:06 - can say print
338:08 - and we can use an inbuilt method called
338:11 - as is instance the first argument is the
338:15 - object that we want to compare so let me
338:17 - pass my dog and the next argument is the
338:20 - parent class that we want to compare
338:22 - with so suppose I want to see if the dog
338:25 - is of the type of animal so let me save
338:28 - it and let me try to run it and here we
338:31 - have the answer it's true and that's
338:33 - because the glass of dog is inheriting
338:36 - from animal now here I want you to
338:38 - understand one point all of the dogs are
338:41 - animals but all of the animals are not
338:44 - dogs so please keep this in your mind
338:46 - let us check if demon
338:50 - is a kind of dog so I can say is
338:53 - instance Devon and dog let me print it
338:56 - out
338:58 - and yes it is let us do one last time
339:01 - for our cat so let me copy and paste so
339:04 - this becomes C1 and
339:07 - this becomes cat and let us see the
339:10 - output so here it is C1 is an instance
339:13 - of cat as well
339:15 - now let's try to learn about decorators
339:18 - so this decorators are like the higher
339:21 - order functions but this higher order
339:23 - functions are already built into python
339:26 - this decorators can give some additional
339:28 - behaviors to our classes
339:31 - so we are going to have a look at couple
339:33 - of these decorators some of the
339:35 - decorators that we are going to see are
339:37 - property static methods class methods
339:40 - Getters and finally setters
339:44 - so I have created a new file called as
339:45 - decorators and I'm going to work inside
339:48 - this file for this example let us
339:50 - imagine that we are working for a store
339:53 - and we have to write a software that
339:55 - will manage our stuff now since all of
339:58 - the staff members are also persons
340:01 - so first I am going to create a class of
340:04 - person and then I will create a class of
340:07 - staff that inherits from person so let
340:10 - us start with the person first
340:12 - so I can see the class of person
340:18 - our Constructor in it
340:22 - self
340:23 - and suppose we want to accept the first
340:26 - name
340:27 - this is a string the last name this is
340:30 - also a string
340:32 - and this returns nothing
340:36 - inside let us create some instance
340:38 - variables so we can say self Dot
340:41 - first name is equal to my first name
340:44 - as self Dot last name is equal to my
340:48 - last name
340:50 - let us also create the string method so
340:53 - I can say
340:54 - Str
340:56 - uck and this always returns a string
341:01 - so I can say return this is a person and
341:05 - then I can say my
341:07 - self DOT first name and
341:11 - self dot last name let us create one
341:15 - person and print it out so I can say
341:18 - this is going to be sorry not permission
341:21 - I want a person
341:24 - the first name would be Lewis the last
341:27 - name would be Zappa
341:30 - and let us try to print him out
341:34 - now let me try to run and see the output
341:37 - so we have the output of Lewis Zappa
341:40 - till now you are familiar with
341:42 - everything
341:43 - now let's go to the example now suppose
341:46 - you want to retrieve the full name every
341:48 - time now instead of creating one more
341:51 - instance variable over here saying that
341:54 - self Dot
341:56 - full name is equal to something
341:57 - something
341:59 - instead of this we can create a property
342:01 - and that property will create a full
342:04 - name for us and we can retrieve it just
342:06 - as we would retrieve any other instance
342:08 - variables so let me take out this line
342:11 - and let me show you how to use our first
342:14 - decorator so let me go down over here
342:17 - the way you use a decorator is by this
342:21 - symbol at the rate and then you name the
342:23 - decorate so this time The Decorator that
342:25 - I want to show you this is called as
342:27 - property
342:29 - so this is our decorator
342:31 - and after that let us create the
342:33 - function so I can say Define
342:36 - full name
342:38 - this takes self as the first parameter
342:42 - and returns a string next line we can
342:46 - simply
342:47 - create the full name and it has written
342:49 - the full name so we can just say self
342:52 - DOT first name and self dot last name so
342:59 - what we have essentially done is this
343:01 - full name right over here this would act
343:04 - just like your instance variable so just
343:07 - imagine that here we had one more
343:10 - instance variable called as self dot
343:12 - full name so this property will function
343:15 - exactly like this let me show you this
343:18 - in action so let me take it out
343:21 - let us go down and let us try to print
343:23 - the full name of the first person so I
343:26 - can say print
343:28 - first persons full name that's it now
343:32 - since this is a property we don't have
343:34 - to use brackets after this one because
343:37 - remember full name is just like your
343:40 - instance variable let me try to execute
343:43 - the program
343:44 - and here we have the output Lewis Zappa
343:47 - now let us go back and let's start
343:50 - working on some other classes but before
343:52 - that let me put some separators so this
343:55 - is one separator and this is another
343:57 - separator
343:59 - now let's create the class of stuff and
344:02 - this staff will inherit from person but
344:05 - let us try to expand our knowledge over
344:07 - here Suppose there are different
344:08 - categories in the staff there could be
344:11 - an associate there could be a manager
344:13 - and so on so we can have multiple roles
344:16 - and each of these roles can have
344:20 - different salaries so suppose if you are
344:23 - a associate then your salary could be 15
344:26 - for an hour if you are a supervisor it
344:29 - would be twenty dollars if you are a
344:30 - manager it could be 25 dollars
344:33 - so what we want to do is whenever we
344:35 - create a new class we also want to
344:37 - dynamically give that person a different
344:40 - salary based on his role sounds a little
344:44 - complicated but don't worry let me show
344:46 - you how to do this
344:47 - now since we have to Define different
344:49 - roles at this time using an enum is the
344:54 - best option so if you have not seen my
344:57 - video on enum I would highly recommend
344:59 - you to go back and see that video so
345:01 - that was in my section number four and I
345:05 - think that file was this choices dot pi
345:08 - so we are going to use this enums in
345:10 - this file
345:12 - I want to use enums because I want to
345:14 - Define different rules let's see how to
345:17 - do that let me go to the top
345:19 - and first let me try to import a couple
345:22 - of things so
345:24 - from my package of enum I want to import
345:28 - enum and I also want to import my auto
345:32 - so now we can define an enum let me
345:35 - create one called as class role so this
345:39 - inherits from my enum
345:42 - and inside this let me put some
345:44 - documentation that this rule is for our
345:47 - staff members
345:49 - now let's create a couple of rules
345:51 - suppose the first role is for an
345:53 - associate so I can say associate and let
345:56 - me write Auto over here the next one
346:00 - could be a supervisor again is equal to
346:03 - auto
346:05 - the last one could be a manager so I can
346:08 - say manager is equal to Auto let me just
346:12 - save it and let us go down
346:15 - and let's start creating our class of
346:17 - stuff let me put some separators here as
346:20 - well
346:21 - okay now let us go down and here let us
346:25 - start creating the class
346:27 - and the class is of stuff and this class
346:30 - inherits from person so here let us
346:34 - first Define our Constructor so I can
346:36 - say Define my init
346:40 - the first argument is always self
346:43 - now let us see now since stuff inherits
346:47 - from person person requires two
346:49 - arguments first for the first name and
346:51 - for the last name so let me just copy
346:54 - and paste right from here so I can take
346:57 - this
346:58 - and put it right over here
347:01 - now the next argument that we want is
347:04 - for the rule remember we want to take
347:06 - the rule and we would be dynamically
347:08 - creating the salary depending on the
347:11 - role
347:12 - so I can say I also want to accept a
347:14 - rule and the type would be
347:16 - rule
347:18 - this method always returns nothing so I
347:21 - can say none so inside this we want to
347:24 - pass the data to our superclass
347:27 - so let me put a comment and then I can
347:29 - say
347:31 - I want my super to initialize with my
347:36 - first name
347:37 - and my last name now let us create some
347:41 - more instance variables maybe we can
347:44 - accept one more parameter for the staff
347:46 - ID so let me write it right over here
347:49 - so I can say the staff ID
347:52 - would be an integer now let us go down
347:55 - and let us start creating the instance
347:58 - variables so the first variable would be
348:02 - for the staff ID and this is is equal to
348:06 - the staff ID let us create one more
348:09 - instance variable called as is
348:13 - stuff and let us put it to true so
348:17 - remember we can always create instance
348:20 - variables even though we are not
348:21 - accepting them inside our Constructor
348:24 - method next it could be for the role so
348:26 - I can say self dot rule is equal to
348:29 - rule
348:31 - now for the next one I also want to
348:33 - record the date of joining for the staff
348:36 - member so let's see how we can do that
348:38 - so I can say self Dot date
348:43 - joined
348:45 - and this time the value has to be in the
348:48 - format of date date and time fortunately
348:51 - python has an inbuilt library for doing
348:54 - exactly this and the name of the library
348:56 - as you can guess it is called as date
348:59 - time so let me go above and let me
349:02 - import it so here I can say
349:05 - from
349:06 - my library of
349:08 - date time
349:10 - I want to import
349:13 - date time now let us go down and let's
349:17 - see how we can assign the value of date
349:20 - time so here we can simply say date time
349:23 - for now so what's happening is the
349:27 - moment that we are creating this
349:28 - instance
349:29 - we can have the date time automatically
349:32 - assigned to our variable
349:34 - before we proceed I want you to wait and
349:37 - I want you to think once we have a staff
349:40 - member I don't want anyone to
349:42 - accidentally change the date joint
349:45 - so what's the solution let us try and
349:48 - make this variable a private variable
349:50 - now there is no real concept of private
349:53 - and public but we have a convention so
349:56 - whenever we put an underscore this means
349:59 - that we want to keep this variable as
350:01 - private you can also write double
350:04 - underscore or a single underscore it's
350:07 - up to you normally whenever we want to
350:09 - enforce that it's a strictly private
350:12 - then we can use double underscore
350:14 - but a single underscore also means that
350:17 - we want to keep this variable as private
350:19 - so let me write a comment right over
350:22 - here
350:23 - so this is going to be our private
350:25 - member and all of this are public
350:27 - variables the next thing to do is we
350:30 - want to assign the salary but the salary
350:32 - has to be dynamically assigned depending
350:35 - on the role if the role is often
350:37 - Associated then the salary has to be 15
350:40 - if it is the supervisor then the salary
350:43 - has to be 20 dollars if it is a manager
350:46 - then the salary has to be 25 dollars
350:48 - let's see how we can dynamically assign
350:51 - a new instance variable called a salary
350:53 - and assign values to it so let me put up
350:55 - a comment that we want to dynamically
350:59 - create and assign values
351:01 - so let's see we can use an if an else
351:04 - statement so we can check if the rule is
351:07 - for supervisor or for manager and so on
351:09 - but we can also use our match statement
351:12 - so in this example let us use the match
351:15 - so I can say let us match for the role
351:19 - the first case that I want to match is
351:22 - for my role dot associate
351:26 - so in case this rule is for an associate
351:29 - then at that time I want to dynamically
351:32 - create an instance variable called as
351:34 - salary
351:35 - and I want to assign the value of 15 let
351:39 - us also add some type hinting so instead
351:42 - of 15 it can also be 15.5 15.75 and so
351:45 - on
351:46 - so let us declare this instance variable
351:49 - as a float
351:50 - now you must be wondering why do I need
351:53 - to have a type hint right over here but
351:55 - here we don't have the answer is it's
351:58 - because we have declared the types right
352:00 - over here so this first name is a string
352:02 - so by default this first name is also
352:04 - going to be a string staff ID is an
352:06 - integer so here the staff ID is also
352:09 - going to be an integer and my Pi is
352:11 - smart enough to infer all of these
352:13 - things but here since we don't have this
352:16 - instance variable declared anywhere we
352:18 - have to be explicit and let us declare
352:20 - the type is going to be a float here
352:23 - again let us think about the visibility
352:25 - I don't want anyone to change the salary
352:28 - salary has to be privately managed so we
352:31 - can see I can put an underscore or I can
352:33 - put a double underscore let us go to the
352:36 - next case suppose the rule is for an
352:41 - supervisor then I can say self dot
352:45 - underscore underscore salary
352:48 - would be twenty dollars
352:51 - then I can say if the rule is for a
352:55 - manager
352:56 - then I want to assign the salary of 25
353:00 - let us also Define the string method for
353:03 - this one so I can say Define my
353:06 - Str self this return a string
353:12 - so let me
353:14 - return so I can say this is a staff
353:17 - member
353:18 - the name is
353:21 - self now here I can use the property
353:24 - that we have defined for full name
353:27 - if you scroll little up
353:29 - we don't have an instance variable for
353:31 - full name but we have declared a
353:33 - property and that's what I'm going to
353:36 - use right over here I want to display
353:38 - the full name so I'm using self dot full
353:40 - name next we can also display the ID so
353:43 - I can say ID is my self dot staff ID let
353:48 - us go down and let us try to create a
353:51 - staff member this time so I can say my
353:53 - staff member is my
353:56 - stuff the first name is Chico
353:59 - the last name is Jonas staff ID can be
354:03 - three two four five let's give her a
354:05 - role of manager so I can use my enum I
354:07 - can say the role is role dot manager and
354:11 - let us try to print it out so let me
354:14 - print my stuff that's it let me run the
354:18 - file so we have a new staff member so
354:20 - you can see right over here the name is
354:22 - Chico Jonas and the ID is three two four
354:25 - five let us go back and let us see what
354:27 - more we can do with our classes the next
354:29 - decorator is called as the class method
354:32 - just imagine the scenario that we
354:34 - already have a person in our database
354:36 - and this person is joining our shop as a
354:40 - staff member so what we can do is we can
354:42 - simply take that person as an argument
354:44 - if you see right over here we are taking
354:46 - first name and last name as an argument
354:48 - instead of this we can take a person and
354:50 - from that person we can create another
354:53 - class for the staff
354:55 - so let us go down right over here
354:58 - and this is called as class method and
355:02 - now always remember this method is you
355:04 - should create an another class till now
355:07 - we have been working with instances but
355:09 - what this class will do it will return
355:12 - another class which is all the type of
355:14 - stuff itself so let's see how to do that
355:17 - suppose we want to create a new staff
355:19 - member from an existing person so I can
355:22 - say Define new so new is just the name
355:25 - of the function you can write anything
355:27 - that you want and since this is a class
355:30 - method the first argument is called as a
355:33 - class till now we have been taking the
355:35 - first argument as self so we can see it
355:39 - was selled
355:40 - but since the class method works on the
355:42 - class that's the reason why the first
355:44 - argument is a class if you are still
355:46 - confused then let me go back to my
355:48 - diagram so this is a class and this is
355:51 - an instance the class method is going to
355:54 - work on the class itself that means we
355:57 - can create a new person from a design of
356:00 - the person that's what it really means
356:02 - let us write the different arguments so
356:05 - obviously we want to create a new staff
356:07 - member from an existing person so we
356:10 - need to accept a person next we also
356:13 - need a staff ID so this is going to be
356:17 - an integer then we also need a rule the
356:21 - type is for the rule now here this
356:25 - method is going to return an another
356:27 - instance of the class and that instance
356:29 - is of the type of stuff itself so this
356:32 - function returns a staff let me add some
356:36 - documentation saying that this is going
356:40 - to create a new instance of the staff
356:42 - itself and let's see how we can create a
356:45 - staff in this case this class actually
356:48 - means
356:50 - staff so here we can see I want to
356:53 - return
356:54 - a new staff member
356:58 - and the first name is going to be the
357:00 - first name of the person that we are
357:02 - accepting so I can say
357:04 - person DOT first name the next argument
357:07 - is
357:08 - the person dot last name then we have to
357:12 - give the staff ID and then we also have
357:16 - to give role now unfortunately we can't
357:20 - write this syntax but what we can do is
357:22 - since this class means staff we simply
357:26 - have to replace staff
357:28 - with class and it's the same thing now
357:32 - the written value is of the type of
357:34 - staff
357:35 - but what's happening is we are trying to
357:37 - return the staff member before we have
357:40 - defined the class of stuff so in order
357:43 - for this code to work we have to do
357:45 - something so we have to go a little up
357:48 - and we have to say
357:51 - from
357:53 - future
357:54 - I want to import
357:57 - annotations
357:59 - so what do I exactly mean to say is
358:04 - since this method right oh yeah the
358:07 - method of new is retaining a staff
358:09 - but at this time python does not know
358:12 - what the stock because python has not
358:14 - yet created this class
358:16 - but by importing this functionality from
358:19 - futures
358:21 - we can tell python what's exactly
358:23 - happening so let us go down and let us
358:26 - add one person to our staff member
358:29 - so since we already have a person called
358:32 - as Lewis Zappa maybe he joins our store
358:35 - so let us create a staff member from
358:38 - Lewis Zappa so let me say my staff
358:41 - number one so here let us create a new
358:44 - staff member by using this class method
358:48 - the first argument as you can see it's
358:50 - for a person so let me pass my first
358:53 - person the staff ID could be one two
358:56 - three four and the rule could be the
358:59 - role of a supervisor now let us try to
359:02 - print it out let me say I want to print
359:05 - my
359:06 - first staff member and this I can say
359:09 - this is my second staff member
359:13 - disable file and try to run it so we
359:16 - have the output the first staff member
359:18 - is Louis Zappa with id1234 and we have
359:22 - one another if you are a little confused
359:25 - then just keep in mind that class method
359:28 - is a method that returns an instance of
359:33 - the same class now let's try to move on
359:35 - and let's learn a little bit more about
359:37 - classes now since we have defined this
359:41 - instance variable as private date join
359:44 - but what happens if anyone wants to see
359:46 - what is the joining date so we can
359:49 - create another property that will
359:51 - display the joining date so we can go
359:54 - down and let me create a property so
359:56 - here I can use my decorator called as
360:00 - property let me Define the property
360:02 - called as joined
360:05 - on this text the self and this is going
360:09 - to return a string
360:12 - let me put up some documentation saying
360:15 - that this is for the joining date of the
360:17 - staff member and since this has to
360:20 - return the joining date we can simply
360:22 - say I want to return and here I can say
360:25 - myself
360:27 - dot underscore date joined
360:31 - now if you're wondering why do we have
360:33 - to do all of these things and the answer
360:35 - is since this is a property we cannot
360:38 - assign values to an property at least
360:41 - not yet in technical terms this is also
360:44 - called as in getter in short we can
360:46 - simply get the value from here but we
360:49 - can't set the value over here later on
360:51 - when I teach you about Getters and
360:53 - Setters at that time we can actually use
360:56 - properties to get as well as set
360:58 - different properties but for now let us
361:00 - go with the flow
361:02 - and let me try to save the file and let
361:04 - me try to run it let us try to see the
361:08 - joining date of Lewis so I can say
361:11 - print Dot joint on
361:15 - and that's it let me try to run the file
361:18 - and we have a joining date now this
361:21 - joining date looks pretty complicated
361:23 - it's in a different format but
361:25 - fortunately we can also have the output
361:28 - which we can understand so let's see how
361:30 - we can do that suppose I want to see the
361:33 - date in a format of month day and the
361:35 - year so let's see how we can format this
361:38 - fortunately there is one inbuilt method
361:41 - for our date time and that is called as
361:44 - string format and we have to use a
361:47 - couple of keywords right over here so
361:48 - let me paste it over here so this
361:51 - capital b stands for the month the
361:53 - lowercase d stands for the day
361:55 - and obviously y stands for the year so
361:58 - let me save this and let me try to run
362:01 - this file and here we have a much better
362:04 - output so the date of joining Fort Lewis
362:06 - Zappa is July the 6th and the year is
362:10 - 2022. let us see the last concept that I
362:12 - want to teach you in decorators and this
362:15 - concept is called as Getters and setters
362:18 - I have already partially explained that
362:21 - this property right here this property
362:23 - acts as a getter that means I can always
362:26 - get a date but I can't set a date but
362:30 - let's see what happens if we want to set
362:32 - and value suppose we promote an employee
362:35 - suppose an associate becomes a
362:37 - supervisor or a supervisor becomes a
362:40 - manager that time we also need to
362:42 - increase the salary so let us see how we
362:45 - can do that by using our Getters and
362:47 - Setters now if you remember we have
362:49 - declared the salary as a private member
362:52 - but what happens if our HR department
362:55 - wants to see the salary so first let us
362:58 - create a property or a getter to see the
363:00 - salary and then we will see how to use a
363:03 - setup to set the new salary so let us go
363:06 - down and let us create one property for
363:09 - the salary so I can say property and let
363:13 - me call it as
363:15 - salary tax the self as an argument and
363:19 - this returns a string I think I have
363:22 - declared it as a float yeah it's a float
363:25 - so this has to return a float
363:30 - let me put a comment
363:32 - so this acts like a getter of the salary
363:35 - and we simply have to return our self
363:39 - dot underscore underscore salary let us
363:43 - see the salary of Lewis so let me say I
363:46 - want to print
363:49 - stuff one dot
363:51 - salary and that's it let me run the file
363:54 - and here you can see the salary is
363:57 - twenty dollars for an hour now let's see
363:59 - what happens if I try to set the salary
364:02 - so if I say my S1 dot salary is equal to
364:06 - 17
364:08 - let me save it we have an error so if
364:10 - you just try to hover
364:12 - it says that property salary is defined
364:15 - in staff is a rate only so what this is
364:18 - trying to say is we can only get the
364:20 - value we can't set and we can't set
364:22 - because this is just a read only
364:25 - property so this is the beauty of
364:26 - Getters and Setters we can't
364:28 - accidentally change the values but what
364:31 - happens if we do want to change the
364:33 - value at that time we need to create
364:36 - another method which is called as a
364:38 - setup let's see how to do that normally
364:41 - you would use a Setter when you need to
364:43 - do some kind of validation before you
364:46 - want to set the values now in this case
364:48 - let us see what kind of validation do we
364:51 - require if you remember if the rule is
364:54 - foreign associate the minimum salary is
364:56 - 15 dollars for a supervisor the minimum
364:59 - salary is twenty dollars now if the role
365:02 - is for supervisor but if we try to set
365:05 - the salary which is lower than 20
365:07 - dollars then we don't want that to
365:09 - happen so this is a part of our
365:11 - validation logic and we can use that
365:14 - inside our setup method the way to
365:17 - declare the setup method is kind of
365:19 - weird in Python but let me show you how
365:21 - it is so the syntax is I want to say for
365:26 - my salary this is the setup so this is a
365:30 - Syntax for the setup this simply means
365:33 - that we are declaring a Setter method
365:35 - for the property of salary let us create
365:38 - the function for
365:41 - salary
365:43 - obviously the first argument is for the
365:45 - self and the next argument is for the
365:48 - amount that is the amount of salary that
365:50 - you want to give the employee so I can
365:52 - take one more parameter called let's
365:54 - amount the type would be of a float and
365:57 - since this is a setup we are not going
365:59 - to return anything so I can say none let
366:02 - me put up a comment saying that this is
366:05 - our setup method
366:07 - and inside of this let us see how we can
366:09 - use our validation logic and how we can
366:12 - set the new values let's start with the
366:15 - associate the associate cannot have a
366:18 - salary Which is less than 15 dollars so
366:20 - we can say if my self dot rule is role
366:27 - dot associate
366:28 - and if the amount
366:32 - is less than 15 dollars that means it is
366:35 - going to fail our validation because we
366:37 - can't give an associate a salary Which
366:39 - is less than 15 dollars so let me print
366:42 - out a message saying that error
366:45 - associate cannot have a salary less than
366:47 - 15 dollars
366:49 - now what happens inside any of the
366:51 - methods you have access to all of the
366:54 - instance variables so if you see I'm
366:56 - using this instance variable called as
366:58 - self dot Rule and we have defined this
367:01 - self dot role right over here
367:06 - so this is where it is online number 60
367:09 - but since we are inside the same class
367:11 - we can have access to all of the
367:14 - instance variables the same thing is
367:16 - happening everywhere so for example in
367:18 - this property of salary I can access the
367:21 - salary a natural the salary is being
367:23 - declared right over here either online
367:26 - 66 68 or 70 but we can still access all
367:31 - of the instance variables let us go down
367:33 - and let us create the next validation
367:36 - logic so this was for an associate next
367:39 - let us create one for the supervisor and
367:42 - the last one for the manager so we can
367:45 - say
367:46 - else if
367:48 - the rule
367:50 - is for the role of supervisor and if the
367:56 - given amount is is less than 20 then we
368:00 - need to print an error message so we can
368:02 - say supervisor cannot have a salary
368:04 - Which is less than 20 dollars let's go
368:07 - to the next one we can again check if
368:10 - the role this time
368:11 - is for the role of a manager
368:16 - and if the amount is less than 25 then
368:21 - let us print one more error saying that
368:24 - manager cannot have a salary less than
368:26 - so this should be 25
368:28 - dollars for an hour now let us go down
368:31 - now what happens if we pass all of this
368:33 - validation that means we have the right
368:35 - Rule and we also have the right amount
368:38 - in that case we can assign that amount
368:40 - as a salary so here I can say else
368:44 - if everything is fine
368:46 - then my salary is equal to the given
368:51 - amount and let me print a nice message
368:54 - saying that self dot full name
368:59 - now has a salary of dollars and
369:04 - self dot salary and I can write per hour
369:07 - so remember that this salary is a
369:10 - property so as you can see the visual
369:13 - studio code is telling you that this is
369:14 - a property and this is a get a method
369:17 - now let me save the file now let me try
369:20 - to run it if you see online number 120 I
369:24 - am assigning a value of 17
369:26 - but the role is for a supervisor and if
369:30 - you see inside our validation logic
369:32 - supervisor cannot have a salary of 20
369:35 - that means we should get an error let me
369:38 - save the file and let us try to run it
369:40 - and see if we can get an error and
369:42 - that's it we have the right output so
369:44 - it's saying that error supervisor cannot
369:46 - have a salary less than 20 dollars for
369:48 - an hour what happens if you try to set
369:51 - the salary which is valid so I can say
369:53 - s1. salary is equal to 20 or maybe I can
369:57 - say 22 so let me save it and let me try
370:00 - to
370:01 - run it and we have the right output so
370:04 - on the next line you can see Louis Zappa
370:06 - now has a salary of 22 dollars for an
370:09 - hour let us go back to the file and this
370:12 - time I want to show you the final
370:14 - decorator in this section now we have
370:17 - been inheriting classes for example here
370:20 - the class of staff is inheriting from
370:23 - person in some of the earlier examples
370:26 - we were inheriting classes such as
370:28 - animals dogs and so on but what happens
370:30 - if I want to say that you can't inherit
370:33 - this class whatever class I have created
370:35 - this is the last and final class and no
370:39 - one can inherit it we can do that by
370:42 - using a different decorator but first
370:44 - let me import that
370:45 - and that comes from our typing Library
370:48 - so I can see right over here from
370:51 - my library of
370:54 - typing
370:55 - I want to import
370:58 - final
370:59 - and just before the class stack we want
371:01 - to declare as final we have to use it so
371:05 - suppose I want to say my class of staff
371:07 - is a final and no one can inherit it so
371:10 - I can just say
371:12 - at the rate and this is going to be my
371:14 - final class
371:16 - let me save it and let us give it a try
371:20 - so suppose let me put a separator over
371:22 - here
371:27 - suppose someone creates a class called
371:30 - as HR
371:31 - and let us try inheriting from staff and
371:35 - we can keep the body as empty so let me
371:38 - just write pass
371:39 - let me try to save it
371:41 - now you can see the code editor is
371:44 - highlighting that we have some issue and
371:46 - it is saying that the class of stuff is
371:49 - marked as final and it cannot be
371:51 - subclassed so let me just comment it out
371:54 - and I think we have done for this video
371:56 - let us start converting our game into
371:59 - classes
372:00 - so the first thing that I want to do is
372:02 - let me just copy and
372:06 - paste it inside this folder let me
372:09 - rename from 3 to 4 and let me change the
372:15 - documentation so this is where we are
372:18 - trying to improve our design by using
372:20 - classes so let's see how we can start
372:22 - using classes inside our game till now
372:25 - we have been using an alias but now what
372:28 - we can do is
372:29 - instead of using an alias for the
372:31 - character we can actually create a class
372:33 - for character so let us go right over
372:36 - here and let us create our class for
372:40 - character so we can see class character
372:43 - now let's see what instance variables do
372:46 - we require
372:47 - now each of the character has three main
372:50 - things you can see right over here name
372:53 - attack power and life so we can Define
372:56 - these as our instance variables so let
373:00 - us do that
373:01 - Define init
373:05 - cell the first is the name is going to
373:09 - be a string
373:12 - attack power integer
373:17 - life is also an integer
373:20 - this returns nothing
373:25 - let me write some documentation saying
373:27 - that this creates an instance of
373:29 - character
373:31 - so here I can say self dot name is equal
373:34 - to the name self Dot attack power is
373:40 - equal to the attack power
373:43 - self taught life is equal to
373:47 - the life let's also create a nice Str
373:50 - method so we can say
373:53 - Define a string method for this one
373:56 - self and this always returns a string
374:02 - and inside let us make a nice string
374:05 - representation for the character so I
374:08 - can say
374:09 - the name of the character is self dot
374:13 - name the
374:16 - attack power
374:19 - is going to be
374:21 - self dot attack power
374:24 - and the life is going to be
374:28 - self
374:29 - dot live let me save it next let us see
374:33 - how we can create superheroes and our
374:36 - villains
374:37 - now superheroes can inherit from our
374:40 - character and our vlans can also inherit
374:43 - from our characters
374:45 - so let's see how to do that so let's
374:47 - create a class called as superhero so
374:51 - you can say my class of
374:54 - superhero this inherits from the
374:57 - character let me put some documentation
375:01 - and let us write the init method now
375:04 - since this is inheriting from character
375:06 - I can simply copy and paste all of this
375:12 - copy and paste
375:16 - and this
375:19 - returns nothing
375:21 - now inside since we are inheriting we
375:24 - can use the super keyword and we can say
375:27 - super
375:29 - dot init and we can simply pass
375:33 - the name
375:35 - attack power
375:37 - and the life
375:39 - so the superclass of character would be
375:42 - responsible for creating all of this
375:44 - instance variables
375:46 - next we can also create one more
375:48 - instance variable called as a rule
375:51 - so this instance variable can say that
375:54 - this is a superhero or this is a super
375:57 - villain
375:58 - in order to define a role again let us
376:00 - go back and create a nice enum so let me
376:04 - go to the top
376:05 - and first thing that I want to do is I
376:08 - want to import so from enum I want to
376:12 - import my enum
376:14 - and also I want Auto I can say my class
376:19 - of
376:21 - character type this inherits from enum
376:26 - let me add some documentation then I can
376:29 - say superhero and assign it to Auto then
376:33 - I can say villain and assign it to Auto
376:36 - as well so let me save this and let us
376:40 - go on below
376:42 - here I can create one more instance
376:44 - variable I can say cell dot rule and
376:48 - this would be equal to my character type
376:51 - Dot
376:52 - superhero
376:54 - let us also create the Str method so I
376:57 - can say
376:58 - Str yourself this returns a string
377:04 - let me copy and paste all of this
377:09 - let me put it here
377:11 - not just before the name I can say that
377:13 - this is a superhero so I can say
377:16 - this is a superhero and put a nice Arrow
377:19 - now since this line is really long so we
377:22 - can do one small trick
377:24 - let me take it down and I want to have
377:27 - brackets around this so this is my
377:30 - opening bracket and right over here I
377:33 - can put my closing bracket
377:35 - and what I can do is let me cut this
377:39 - portion out for the life
377:42 - and on the next line I can simply again
377:44 - say F and paste it over there
377:48 - and that's it so this is also a valid
377:51 - syntax next let us create the same thing
377:53 - for our villain so I can simply copy all
377:56 - of this
377:58 - paste it down
378:01 - so from Superhero
378:04 - it becomes my villain
378:07 - and this has to be my villain
378:12 - this has to be again my villain let us
378:16 - go down and we don't need all of these
378:18 - things because we already have a class
378:20 - for character
378:21 - so I can take all of this out I don't
378:24 - want any of this
378:26 - now let's see what we can do with life
378:29 - with life I'm going to do a very small
378:31 - trick I am going to create a class for
378:34 - life but all of the methods would be
378:36 - static that's because I don't want to
378:38 - create an instance of life it makes no
378:41 - sense I just want access to Hero life
378:43 - and we're in life so let me create it
378:46 - first and then I will try and explain so
378:49 - here I can say this is going to be a
378:52 - class of life
378:54 - and what I want to do is I want to take
378:57 - all of these things inside
379:00 - so
379:02 - till yeah
379:03 - all of these things goes inside my class
379:07 - now let's start changing them one by one
379:09 - now what happens is you can see my these
379:13 - two variables
379:14 - these are outside my init method or
379:17 - rather I don't have a init method over
379:19 - here and that's also perfectly fine
379:22 - these two variables belongs to the class
379:24 - so they can also be called as my class
379:27 - variables and that's what I want there
379:30 - is one other alternative approach let me
379:33 - paste it right over here
379:35 - that approach is called as data classes
379:39 - but I am not going to cover them inside
379:41 - this course you can use this link to
379:43 - study more about data classes
379:46 - now let us continue with our journey
379:48 - I'm going to use a new decorator which
379:51 - is called as static method so let me
379:54 - copy and first let me
379:57 - paste everywhere and then I will try and
379:59 - explain what's happening since this hero
380:02 - life and we're in life belongs to the
380:03 - class I no longer have to use the
380:05 - keyword of global and hero life
380:08 - so I can take it out
380:10 - and now what happens is this hero life
380:13 - is actually a class member of the class
380:16 - of life so I can simply say
380:19 - life dot hero live plus equal to life
380:24 - so this means that this hero life
380:26 - variable references exactly this one let
380:30 - me save it and then I will try and
380:32 - explain what this new decorator is doing
380:34 - now if you see I am not taking the
380:37 - argument as self for static method
380:40 - that's because this decorator works on
380:43 - the class directly it does not have to
380:46 - create an instance let us go back to our
380:49 - decorators file and there I will try and
380:52 - demonstrate what's happening so this is
380:55 - our decorators file
380:57 - now let me go back to the diagram itself
381:00 - so here is our diagram again whenever I
381:03 - am saying that this is a static method
381:05 - means that we can call that starting
381:08 - method from the class itself
381:11 - we don't need to create instances for
381:14 - example
381:15 - here in our decorators file you can see
381:18 - that we have this one date time dot now
381:21 - no matter whatever the class you don't
381:24 - need an extra instance we can have a
381:27 - common functionality
381:29 - that's what I mean to say by a starting
381:31 - method so basically static method is
381:33 - just like any other method but it does
381:36 - not take a self argument because it
381:39 - works directly on the class and not on
381:42 - the instance suppose we can create a
381:44 - static method called as describe and
381:46 - that static method will just describe
381:49 - what this class is going to do so let's
381:51 - create it and see it in action so let me
381:53 - go down and just after this property
381:56 - joint on I can create my static method
381:59 - so I can use my decorator
382:01 - of static method the name would be
382:04 - describe
382:06 - so again this is not going to take
382:08 - itself neither this is going to take a
382:11 - class because this is independent of
382:13 - everything this is going to return none
382:17 - let me write some documentation what's
382:20 - happening so this method is just going
382:22 - to describe what this class is all about
382:25 - so I can just print out that this is a
382:30 - class to
382:32 - create a path member
382:35 - now let me go down
382:37 - and here I can simply call this method
382:40 - on my class so let me call it at the top
382:44 - I can say staff Dot describe and since
382:49 - it's a method I need to use my brackets
382:52 - that's it let me run this file and here
382:56 - we have the output class to create a
382:58 - staff member Now using this same concept
383:01 - let us go back to our game now here what
383:04 - happens is we have two class members
383:06 - hero life and we're in life
383:08 - I want to get access to this variables
383:11 - and that's what I'm doing right over
383:13 - here by using a static method you can
383:16 - get a little bit more clarity when we
383:18 - use this method later in this video
383:21 - for now let us change all of the syntax
383:23 - so this one also becomes my
383:26 - static method and I don't want Global
383:30 - and this becomes my live dot hero live
383:34 - same thing for this one this also
383:36 - becomes my static method I don't need
383:39 - the global I can say
383:42 - my life got villain life
383:44 - and
383:45 - same thing for this one as well
383:48 - so this also becomes my static method
383:51 - I don't need the global and this is my
383:55 - life Dot
383:57 - that's it just save a file let us go
383:59 - down
384:01 - so here what we can say is this is a
384:04 - list of superheroes so instead of just
384:06 - character I can say
384:08 - This Is My Superhero next what I can do
384:12 - is I can create instances of My
384:14 - Superhero by using the newly created
384:16 - class so I can say my Iron Man
384:21 - is a superhero the name is obviously
384:26 - Iron Man
384:29 - next the attack power is
384:32 - 250 and the
384:37 - life is
384:38 - 1000 so similarly let us create
384:41 - instances for all of the other
384:43 - superheroes as well
384:45 - so here we have we have a black widow
384:47 - Spiderman and Hulk now since we have
384:50 - everything in classes I don't require
384:52 - this constant so I can just take them
384:54 - out they are not required this becomes a
384:58 - list of
384:59 - superheroes
385:00 - and I have to change this as well
385:03 - so Iron Man
385:06 - Black Widow
385:09 - Spiderman
385:10 - and Maya Hulk let us go down so this
385:15 - instead of character we can say this is
385:17 - going to return a superhero rest
385:20 - everything Remains the Same so let us go
385:22 - down to villains this is going to be a
385:25 - list of our villains
385:27 - again let us do the same thing let us
385:29 - create instances so I can say my Thanos
385:32 - is equal to my villain
385:35 - the name is
385:37 - Thanos
385:40 - my attack power is 400
385:44 - life is 1500 let us create the rest as
385:48 - well so we have all of them let us take
385:51 - out all of this it's not required
385:54 - this becomes my villain and we need to
385:59 - change all of this as well
386:02 - fastest tunnels then it's The Red Skull
386:07 - and then is Proxima let us go down so
386:11 - this becomes my villain and everything
386:14 - is looking good let us go down and let
386:17 - us see where we need to do some more
386:19 - changes
386:21 - this becomes a
386:23 - superhero and this becomes a villain now
386:27 - let's see where we are going to use the
386:29 - class of life and the static methods
386:32 - that we have created
386:33 - we are going to use exactly right over
386:36 - here for the set life and for the actual
386:38 - attack so here I can say from my life
386:42 - I want to access the static method
386:44 - called as increment hero life and I
386:48 - simply want to pass the life of the
386:50 - superhero so I can say my superhero dot
386:55 - live and we can use the syntax because
386:58 - life is just an instance variable on
387:01 - superhero so this is the beauty of
387:03 - working with classes
387:05 - let us go down again we can do the same
387:08 - thing we can say
387:09 - from my class of life I want to access
387:12 - the static method of increment villain
387:15 - life
387:17 - and I want to pass the life of my
387:20 - villain we don't need all of these lines
387:22 - we can take them out we can do the same
387:25 - thing right over here as well so I can
387:28 - say
387:29 - live dot I want to decrement my hero
387:33 - life
387:33 - let's pass
387:35 - the attack power of the villain and same
387:39 - thing below live broad decrement villain
387:43 - life and let's pass the superhero
387:48 - attack power
387:50 - we don't need all of this
387:52 - we can take it out
387:54 - let's save our file now let us go to
387:57 - this line it seems that we have some
387:59 - error so let's see what's happening
388:01 - value of superhero is not indexable oh
388:04 - yeah that's right now since this is a
388:07 - class we have to say superhero
388:10 - dot in the name and here also villain
388:14 - dot name
388:17 - and now the error is gone let us go down
388:20 - and here what we can do since hero life
388:23 - and villain life are now the class
388:25 - variables of life so we can simply say
388:31 - live dot hero live
388:33 - and yet it becomes life dot villain life
388:37 - and now we have a beautifully typed
388:40 - object oriented game design so let me
388:43 - save my file
388:44 - and let me try to run this
388:47 - now that's really amazing everything is
388:50 - working perfect and it seems that I have
388:52 - also won the game welcome to the last
388:55 - video in this section this video is all
388:58 - about the different magic methods that
389:00 - we can use inside our classes
389:02 - till now we have seen only three magic
389:04 - methods one was in it second one was
389:07 - repr and the third one was Str but
389:11 - python provides many more of this magic
389:13 - methods so let me try and cover some of
389:16 - the most commonly used magic methods
389:18 - what I've done is behind the scenes I've
389:21 - created a file called as box
389:23 - and let us start working with this as
389:26 - you can see it's completely empty so
389:29 - let's create a class
389:30 - call it as box
389:33 - and
389:35 - the edit method this box is going to
389:38 - have two sides so I can say my side a
389:41 - the type is an integer
389:45 - similarly we have side B type is an
389:48 - integer
389:50 - this is going to return nothing
389:53 - and
389:54 - my instance variable so my side a
389:58 - is equal to my side a and my
390:03 - side B is equal to my
390:07 - side of B so let's create the wrapper
390:10 - method so you are already familiar with
390:13 - it I am just returning a new string
390:15 - called as class of box now let me create
390:17 - the Str method so till now there is
390:20 - nothing new to you inside my Str method
390:23 - I'm just returning a nicely formatted
390:25 - string saying that this is a box and
390:28 - side a and the value of side B let us
390:31 - create two boxes so this is my first box
390:34 - and this is my second box let us also
390:37 - print them out so I can say
390:40 - print my box first and print my box
390:43 - number two as well
390:44 - so let me save the file and let me run
390:47 - so till now there is nothing new to you
390:49 - let us go back now suppose what happens
390:52 - if you do something like this I want to
390:55 - say I want to add both of them together
390:57 - so if I say B1 plus B2 is equal to my B3
391:03 - and then I want to print my B3 let us
391:07 - save and let us try to run this file and
391:09 - see what's happening
391:11 - it's saying that this is an unsupported
391:14 - operand and that's because python does
391:17 - not know how to add one box with another
391:19 - box but we can implement this
391:22 - functionality by using different magic
391:24 - methods
391:25 - so if you go back and if you say minus
391:29 - again if you try to run
391:31 - again we have some sort of an error
391:33 - because python does not know how to
391:36 - minus these boxes
391:37 - and the same thing will happen for all
391:40 - of the different operations such as
391:42 - multiplication division less than
391:45 - greater than less than equal to greater
391:47 - than equal to and so on but what we can
391:50 - do is by using different magic methods
391:52 - we can implement this functionality on
391:55 - our class so let's see how we can do
391:57 - this step by step the first thing that I
392:00 - want to show you is how we can use the
392:02 - in operator so let me give you a small
392:04 - example this is my IPython shell
392:08 - if I say
392:09 - o in
392:13 - octolium
392:14 - so we get a true so let us see how we
392:17 - can implement this syntax of in for our
392:20 - box
392:23 - we can implement this by using another
392:26 - matching method and the name of this
392:28 - matching method has to be specific and
392:31 - the name is underscore underscore
392:33 - contains underscore underscore
392:37 - this tricks self as the first argument
392:40 - the next argument is what we want to
392:42 - check so let me name that argument as
392:44 - number
392:46 - for now let us skip the type and I will
392:48 - come back to it a little later let us
392:51 - see what this type has to return let us
392:53 - go back to my iPad and shell and here
392:56 - you can see the return type is of the
392:58 - type of Boolean so that's what is going
393:00 - to be the return type
393:03 - so this function is going to return a
393:05 - Boolean that is it has to return true or
393:08 - false the logic for this is pretty
393:10 - simple let me again go back to my iPad
393:13 - and shell and let me show it first over
393:15 - here suppose we have a list so let me
393:18 - call it as L and this is 1 comma 2.
393:23 - now if I say 1 in my list of L
393:28 - we get the answer of true if I say 3 in
393:31 - my list of L we get the answer of false
393:35 - so what we can do is we can simply
393:37 - create a list of both the sides so side
393:39 - 1 and side 2 and we can simply compare
393:41 - that the other argument is inside that
393:44 - list or not so let's see how to do that
393:47 - here we can simply say return
393:50 - if the given number is inside my list
393:54 - and I can say
393:56 - the first List member is my self dot
393:59 - side of a
394:00 - and my
394:02 - side of B
394:04 - now this method works but this is not
394:06 - foolproof what happens if this second
394:09 - argument is not a number if someone
394:11 - provides a Boolean value or some other
394:14 - value then how we can say the user that
394:16 - we have an error so for this let me show
394:19 - you some new syntax so let me go down
394:22 - let me put a comment now if you remember
394:24 - when I was teaching you about classes
394:26 - and instances
394:28 - we use one method which is called as is
394:31 - instance and then we could check if the
394:34 - dog is an instance of animal if the cat
394:36 - is an instance of animal or not so we
394:38 - are going to do the same thing right
394:40 - here we are going to check if this
394:42 - number is of the type of integer or not
394:45 - if this number is not of the type of
394:47 - integer then we can simply throw a
394:50 - number so here what we can say number
394:53 - it can be any object we don't know
394:55 - beforehand what the user is going to
394:57 - provide so object is a generic term and
395:00 - if you remember everything inside python
395:02 - is an object so we can say number could
395:05 - be any object and now let's try to see
395:07 - if the number is an integer or not so we
395:10 - can say if then we can use the inbuilt
395:13 - function called as is instance
395:16 - then we can say is my number and
395:19 - instance of my integer and if not so let
395:22 - me go up and I can use the word if not
395:25 - here I want to throw an error so I can
395:28 - say
395:29 - raise not implemented error now since
395:33 - this number is not the type of an
395:36 - integer we don't know how to do the
395:38 - comparison so we simply raise an error
395:41 - in the next section I'll be teaching you
395:43 - more about errors right now just try and
395:46 - understand if in a situation we don't
395:48 - know what to do we can simply raise an
395:52 - error so that's what we are doing right
395:54 - over here let me save it and let me show
395:56 - you it in action so we don't want this
396:00 - one here I can say is 4 inside my box of
396:05 - 1 and I can also say is
396:09 - 6 inside my box of one let me save it
396:12 - and let us run this file
396:15 - so here we have the output let me take
396:18 - it up 4 in box number one yes and that's
396:22 - true
396:23 - six in box number one false let us see
396:26 - what's happening
396:27 - so this is our box number one we don't
396:30 - have a six over here now watch closely
396:32 - what happens if I write something like
396:35 - this
396:37 - I can write a over
396:39 - let me save it and let me try to run it
396:43 - and this time we get an error and this
396:45 - error is of the type of not implemented
396:48 - error and that is what we have coded if
396:51 - you go back to our line number line
396:53 - number 15
396:54 - since a is a string but we want an
396:57 - integer so what's happening is in this
397:00 - line we are raising an error if we try
397:02 - to evaluate is instance number is a type
397:05 - of instance it's going to fail because
397:08 - here the number is actually the string
397:11 - of a so if not an instance of integer
397:15 - then we want to raise an error and
397:17 - that's what we are doing so if we just
397:19 - open up the terminal we are throwing and
397:21 - not implemented error so this error
397:24 - which is called as not implemented error
397:26 - so this is a standard way of throwing an
397:29 - error inside this method let's see some
397:32 - other operators so if I want to say is
397:35 - my box one
397:36 - is equal to my box 2. let us see how we
397:39 - can do this syntax
397:41 - right now let me take it out
397:43 - and since this line is always going to
397:46 - fail let me take it down and let me
397:49 - comment it out so let me go right over
397:52 - here and
397:53 - I want to copy and paste till this one
397:57 - let me go down
397:59 - and let me paste
398:02 - since we want to see both the boxes are
398:04 - equal or not
398:06 - the magic method is called as equal
398:08 - short form EQ let me write the proper
398:11 - documentation so this
398:14 - so this checks if both boxes are equal
398:16 - or not
398:17 - and this line is the standard check that
398:19 - we want to have now let's see what to do
398:21 - right over here this time we expect a
398:24 - box so let me change the name of the
398:27 - variable from number to a box let me go
398:31 - down so this also has to be
398:34 - box here we want to check if the given
398:38 - object which we call as box
398:40 - is an instance of the class of box or
398:43 - not so instead of integer this has to be
398:46 - my class of box
398:49 - so if the another object is also a box
398:51 - only then we can have a comparison but
398:55 - there is a small limitation of python we
398:57 - can't use the syntax directly but we can
399:01 - use a small hack and let me show how we
399:04 - can do this
399:05 - again let me go to the top and I can say
399:08 - from my future
399:11 - I want to import my annotations
399:15 - and now we can use the syntax which is
399:18 - right over here now let us see how we
399:20 - can compare both of the boxes
399:23 - now what happens is the box has a side
399:25 - side a and a side B if both of the boxes
399:28 - has to be equal that means both of the
399:32 - sides should match so that's what we are
399:35 - going to see right over here I can see
399:37 - that return self dot side of a is equal
399:41 - to is equal to
399:43 - the Box dot side of a
399:46 - maybe we can rename this variable we can
399:49 - call this as the other or we can say the
399:53 - other box
399:54 - right now I'll just write this as other
399:56 - so right now we are comparing the self
399:58 - plot side a with others side a
400:02 - similarly we also need to compare the
400:04 - side b as well so here I can say I want
400:08 - my side a to be equal and I also want my
400:12 - side B to be equal so I can say self
400:16 - plot side B
400:18 - has to be equal to the other Dot
400:23 - side of B and this also needs to be
400:27 - changed from box to other so let us go
400:30 - down and here we can say I want to print
400:34 - if my box one is equal to my box 2 let
400:39 - me save this and let me
400:41 - run this file
400:43 - and here we have the output false box
400:46 - number one is not equal to box number
400:49 - two let us go back and let us try to
400:51 - implement some other methods let us try
400:54 - how we can check for less than and less
400:57 - than equal to so what I mean is how we
401:00 - can implement this Behavior B1 less than
401:03 - and B2
401:05 - or less than or equal to B2 so let us go
401:09 - up right where and let us start creating
401:14 - our method let me copy till this line
401:18 - and let me paste it over here
401:21 - so whenever we say that we want to
401:23 - compare if it is less than the magic
401:25 - method is called as
401:27 - LT which stands for less than let me
401:32 - also write the proper documentation so
401:34 - instead of this we want this one now
401:37 - let's check if the other box is smaller
401:40 - or not one simple way of doing this is
401:42 - by calculating area or you can also use
401:45 - this syntax but I think using the area
401:48 - is a much more cleaner method now since
401:51 - we already have the side A and B we can
401:54 - define a property for area and we can
401:56 - use that property right over here
401:59 - so let me go over here and let me create
402:03 - a decorator for my property I can say
402:08 - this is for my area
402:10 - self
402:11 - and this returns an integer so I want to
402:15 - return
402:16 - my site a multiplied by
402:21 - my side of B
402:25 - now this makes things much more simple
402:27 - so here's simply what I can do is I can
402:30 - go right over here and I can say return
402:34 - self dot area
402:37 - is it less than the others area and
402:41 - that's it
402:42 - let me save my file but what happens is
402:45 - this magic method is only for less than
402:48 - we also want to compare for less than
402:52 - and equal to so if you go to this line
402:54 - number 44 we have an equal operator as
402:57 - well
402:58 - so let's see how we can Implement that
403:00 - and that's pretty simple let me just
403:03 - copy all of this
403:05 - and paste it
403:09 - now this magic method is called as less
403:12 - than or equal to that means L and E and
403:16 - on this line we simply have to add equal
403:18 - to and that's it so let us start
403:21 - printing all of these things so let me
403:23 - go down over here here I can say I want
403:26 - to print if my B1
403:28 - is less than B2 one more beauty of this
403:33 - magic method is we have simply defined a
403:36 - magic method for less than and less than
403:38 - equal to but python can infer how to
403:41 - implement greater than or greater than
403:43 - and equal as well it simply has to
403:46 - reverse the logic and python does it
403:48 - behind the scenes we don't have to
403:50 - create another methods since we already
403:52 - have these two methods in place
403:55 - so here I also want to check if my
403:58 - box of one is greater than my box of 2
404:04 - we can also use the less than an equal
404:07 - so we can we can see
404:09 - if this is my less than or equal and we
404:12 - can also use the greater than an equal
404:15 - so this one
404:18 - let me take out this line let me
404:23 - comment all of this let me
404:26 - comment all of this and let us try to
404:29 - run this one
404:31 - so here we have the output let us check
404:33 - if the output is true or not the first
404:36 - one is is my box number one less than my
404:39 - box number two
404:40 - let's see what's happening
404:42 - 3 multiplied by 4 is 12
404:45 - 2 multiplied by 5 is then so that means
404:48 - my box number one is larger than my box
404:51 - number two
404:52 - let's see the statement so this is
404:54 - exactly opposite my box number one is
404:57 - larger so this becomes false and that's
405:00 - what we have over here in the second
405:02 - line yes my box number one is larger so
405:05 - we have the output of true
405:07 - and so on for the line number 53 and 54
405:10 - as well let us go back and let us see
405:12 - some other methods as well now let us
405:15 - see how we can Implement some basic
405:17 - operations such as addition
405:19 - multiplication division and so on
405:21 - luckily writing all of those methods is
405:24 - just a matter of copy and paste so let
405:27 - me show you first let us create a method
405:29 - for addition so where we can add two
405:31 - boxes let me copy and paste since this
405:35 - is for addition the magic method is
405:37 - called as ADD let me change the
405:41 - documentation and let me also get my
405:43 - spacing right
405:45 - and here we simply have to add the areas
405:48 - that's it let's check what's the error
405:51 - oh yes now it's saying that it got an
405:54 - integer as the return type but it is
405:57 - expecting and Boolean so let's see
405:59 - what's happening oh yes here we have
406:01 - written Boolean as the written value but
406:04 - that's not what is happening area is an
406:07 - integer so let us update this from
406:09 - Boolean to an integer so you see there
406:13 - are so many benefits of having a very
406:16 - well typed code let us Implement other
406:18 - methods for subtraction multiplication
406:21 - and division as well let us create one
406:23 - for subtraction
406:26 - and since it is a subtract we can
406:30 - say that this is subtract let me change
406:33 - the documentation
406:35 - and this becomes
406:38 - minus let us do for
406:41 - multiplication
406:44 - and since this is multiplication this
406:46 - becomes mul for multiplication
406:50 - let me change the documentation
406:53 - and this becomes multiplied the next one
406:57 - for division now this becomes a little
407:01 - tricky if you think for division it
407:04 - would be just div you are partially
407:07 - right but that's not what is happening
407:09 - let us go back to our IPython shell and
407:12 - let me try and explain what's going to
407:14 - happen
407:14 - so suppose if I say 1 divided by 2
407:19 - we have the answer of 0.5 this is called
407:23 - as true division now if I say 2 divided
407:27 - by 3 we get the answer of 0.6 as well
407:30 - again you can see this is a true
407:33 - division
407:34 - but if you watch closely we have two
407:37 - integers and the output is a float what
407:40 - happens if you want to have the output
407:42 - as an integer as well
407:44 - in that case we have to use
407:46 - double slash and then three
407:49 - so this syntax is called as flow
407:52 - Division and this syntax is called as a
407:55 - true division the written value of an
407:58 - true division is always a float and the
408:01 - return value of floor division is an
408:04 - integer so let us go back to our code
408:07 - and see how we can do this the first one
408:10 - can be our true division so I can just
408:13 - say this is my true Division and this
408:16 - becomes my true division now remember
408:19 - that the return type is going to be a
408:22 - float this time
408:23 - since this is going to be a true
408:25 - division
408:27 - let me copy and paste this for our
408:31 - floor division so here I can say I want
408:35 - to have my
408:36 - floor Division and here I want to have
408:40 - one more slash and that's it let us go
408:43 - and let us print out all of these things
408:46 - so let me go right over here and let me
408:50 - put all of my print statements let me
408:53 - comment all of these things out and let
408:57 - me try to run this file and here we have
409:01 - the output
409:02 - so B1 minus B2 is 2 let us check if that
409:06 - is the case or not
409:08 - so the area of first box is 12 the area
409:12 - of the second box is 10 and that's what
409:15 - is happening so 12 minus 10 we get the
409:17 - answer of 2. and if you check the answer
409:20 - of all of the other methods obviously
409:22 - all of them are going to be right
409:25 - when I was going through the code I
409:27 - realized that we have a small mistake
409:29 - it's not really a mistake it is just
409:32 - about following the best practices of
409:34 - python so let me try and explain
409:37 - everywhere we are trying and throwing
409:39 - this error called as not implemented
409:41 - error which is absolutely fine but the
409:44 - guidelines in Python suggest that
409:46 - whenever we have a binary operation that
409:50 - time we simply have to raise an error
409:52 - which is called as not Implement so this
409:55 - and this are two different things please
409:57 - keep that in mind so let me Rectify all
410:00 - of these things
410:01 - so let me just copy and paste it
410:04 - everywhere
410:06 - so all of this let me do my multi select
410:12 - this becomes my not implemented
410:15 - this one and this one as well so let me
410:19 - save the file what I mean by an binary
410:22 - operation so all of this operations
410:24 - minus plus multiplication division Etc
410:28 - all of these are called as binary
410:31 - operations
410:32 - but this one when we are checking 4
410:35 - inside B1 this is not a binary operation
410:38 - so in this case we are using
410:41 - not implemented error and whenever we
410:44 - have a binary operation at that time we
410:47 - are using just not implemented
410:50 - well that's it for this video and now we
410:53 - are officially at the end of the section
410:55 - and I will see you in the next section
410:57 - where I will try and expand your
410:59 - knowledge of error handling in Python
411:02 - welcome to a new section this section is
411:05 - all about error handling in Python
411:08 - now errors in Python can be divided into
411:11 - a couple of categories
411:13 - the first category can be thought as
411:15 - your syntax errors that means whenever
411:18 - you make some errors in typing those
411:21 - errors are called as your syntax errors
411:23 - now fortunately these errors are very
411:26 - easy to catch and these days we have
411:29 - much better tooling inside Visual Studio
411:32 - code and our plugin my Pi or if you are
411:35 - using an IDE such as pycharm all of
411:38 - these tools will help you to catch
411:40 - syntax errors
411:42 - the second category can be thought as
411:44 - your runtime errors
411:46 - that means this errors are not reflected
411:49 - inside your code but whenever you try to
411:52 - run it this errors will pop up this
411:54 - error is a little bit difficult to debug
411:56 - so as we saw in our last video whenever
411:59 - we can't handle a situation we were
412:02 - raising some kind of Errors so when we
412:04 - raise those kind of Errors at least we
412:07 - can have some idea what's going wrong
412:09 - during our run time and this errors in
412:12 - Python are called as exceptions so let's
412:15 - see one by one all of this the first
412:17 - thing that we are going to see is the
412:19 - most common one and that is called as
412:21 - your syntax errors so let me go back to
412:25 - my code editor and what I've done is
412:28 - behind the scenes I've created a new
412:31 - folder called as 0 7 error handling and
412:34 - this is a file called as maths dot pi
412:38 - now let's see what's happening there is
412:41 - some red line right here print X and Y
412:44 - this is an example of my syntax errors
412:47 - so at least I need to have a comma right
412:50 - over here or I need to have like my
412:53 - formatted string so something like this
412:56 - and this has to be inside my curlies
413:01 - and this as well
413:04 - and now if you try and save your error
413:06 - will go away so this is one of the most
413:09 - common errors called as a syntax error
413:12 - now let me try and show you what do I
413:14 - mean by a runtime error so what I've
413:17 - done is I've created another file called
413:19 - as divider and let's see what's going to
413:22 - happen this time let's create a function
413:24 - that divides two numbers so I can say
413:27 - Define divide
413:30 - the first number could be an X the next
413:33 - is in y
413:35 - and this does not return anything
413:39 - and we can simply print out my x divided
413:44 - by y so till now everything looks
413:46 - perfect and we don't have any errors now
413:49 - let me go down
413:50 - and let me say I want to divide my
413:53 - four
413:55 - by zero now what's going to happen we
413:58 - can't divide any number by zero it's
414:01 - just not possible so what is going to
414:03 - happen is our program is going to panic
414:06 - and it is going to exit so let me save
414:08 - and let me run this file and let me show
414:11 - you this in action so here it is our
414:14 - program pan it and we have an error
414:16 - which is called as zero division error
414:19 - division by zero so this is an example
414:22 - of runtime errors
414:24 - there are no visible errors inside the
414:26 - code but whenever we are trying to
414:28 - execute this code we have some errors so
414:31 - let me put a comment over here so this
414:33 - throws or raises an error and the type
414:37 - of the error is zero division error if
414:41 - you open up a terminal that's what we
414:43 - have so this is a type of error or
414:46 - rather this is a type of exception in
414:49 - the world of python let us try to expand
414:51 - our knowledge of errors
414:53 - so in this program we saw that when we
414:57 - Panic we get an error this error is a
415:00 - very specific one and the name of this
415:02 - error is called as 0 division error now
415:06 - python gives us an error handling
415:08 - mechanism in the form of try and accept
415:10 - blocks so let us see how we can use that
415:13 - syntax to catch this zero division error
415:16 - so let me go back and let me create a
415:18 - new file and I can name the file as
415:21 - smart
415:23 - divider dot pi
415:26 - so let us create our function called as
415:28 - smart divider again it's going to accept
415:32 - X which is integer
415:35 - Y is also an integer this is
415:40 - returning nothing
415:42 - now let's see how we can do a very smart
415:44 - division last time we saw that when we
415:47 - divided by 0 we got an error and that
415:51 - error was 0 division error we can catch
415:55 - that by using our try and accept blocks
415:58 - so this is how the try and accept blocks
416:01 - goes so inside the trial
416:04 - this is the code that you want to try so
416:07 - trying the code
416:09 - and in case this code fails then we can
416:13 - say accept and this is the place we are
416:15 - going to catch the specific error
416:19 - and we have that error then do something
416:22 - with the error
416:24 - let us see how we can fill these blocks
416:27 - so inside try let us see if we can
416:30 - divide or not so I can just say my
416:32 - number
416:33 - is equal to x divided by y
416:37 - and I want to
416:39 - print out my number now what happens if
416:42 - we get the same zero division error so
416:45 - we can tell python that whenever we are
416:47 - going to have that error I want my
416:50 - accept block to catch it so I can say
416:52 - accept my
416:54 - zero division error so that means
416:57 - whenever I get this error I want to
416:59 - catch that error and after catching that
417:02 - error I can do something with it so let
417:04 - me just print out some message
417:07 - can't divide by 0 use some other number
417:11 - now let us go back and let us try
417:15 - dividing by 4 with 0
417:19 - and let us try to run this so this time
417:22 - we have a much better output our program
417:25 - is not panicking instead we get a very
417:29 - helpful message saying that can't divide
417:31 - by 0 use some other number so as you can
417:35 - see we can handle our errors now imagine
417:38 - one more scenario
417:39 - instead of 4 I write as a
417:43 - then what happens let us run and see
417:46 - what's happening this time again we have
417:49 - some other error and this time the error
417:51 - is called as type error and
417:54 - unfortunately our program is panicking
417:56 - and it is terminating Midway let's see
418:00 - how we can handle this situation as well
418:02 - so let me go back and let me create
418:05 - another file this time I will name it as
418:09 - really smart divider and let us start
418:13 - writing the code for this one let me
418:16 - copy and paste the code from my smart
418:18 - divider so
418:20 - let me take all of this and paste inside
418:24 - my really smart divider
418:26 - so since this is a really smart divider
418:28 - I can say this is my really smart
418:31 - divider let us have a look at the error
418:34 - one more time so what's happening is
418:36 - let me take it down
418:39 - so what's happening is we were trying to
418:42 - divide by a
418:44 - now a is of the type of a string and
418:48 - fourth is all the type of integer
418:51 - both of them are essentially of
418:53 - different types so that's what this
418:55 - error is saying so we have a type error
418:58 - let us see how we can catch this error
419:01 - as well we can chain our accept blocks
419:04 - so we can say if we have a zero division
419:07 - error then I want to catch it right over
419:09 - here but if there is a type error so I
419:12 - can say accept my type error let me
419:16 - catch it right over here
419:17 - and this time I can print out both X and
419:21 - Y needs to be a number but what happens
419:24 - if we don't know what kind of error we
419:27 - are going to get that time we can use
419:29 - some other syntax and this is called as
419:32 - accept
419:34 - exception so now this exception class is
419:37 - the base class for all of the different
419:39 - exceptions so just as we saw in our
419:42 - classes dog was a subclass of animal so
419:46 - same thing all of these errors zero
419:48 - division error type error and all of
419:50 - these things all of these errors inherit
419:53 - from exception now the same logic goes
419:57 - over here
419:58 - dog is an animal cat is an animal same
420:01 - thing any errors that we get is also an
420:04 - exception and that's what we are trying
420:06 - to catch over here here we can also add
420:09 - an alias so we can say I want to catch
420:12 - my exception
420:13 - as a variable called as e then we can
420:17 - simply print out what happened wrong so
420:19 - here I can say
420:21 - oops something went wrong and let me
420:24 - print out my exception which we are
420:27 - calling just as e
420:29 - and that's it this time we have a really
420:32 - smart divider let's try to invoke it
420:36 - so I can say my really
420:38 - smart divider cannot divide 3 with 0 can
420:42 - you divide
420:43 - three with four
420:46 - can divide 3 with a
420:49 - now let me try to save and run this file
420:52 - and this time we have the output
420:55 - so the first time we have a 0 so we have
420:58 - the output can't divide by zero
421:01 - second time everything looks good so we
421:03 - have the answer
421:04 - third time we have a string so we have
421:07 - the output both X and Y needs to be a
421:10 - number we are making really good
421:12 - progress with errors
421:14 - and let us learn the last missing pieces
421:17 - for our error handling
421:19 - so let me create a new file let me call
421:22 - it as try
421:24 - else and finally dot pi
421:29 - and let me copy all of the code from my
421:32 - really smart divider and let me paste
421:35 - into this file let let us call the
421:38 - function just as divider so let me
421:41 - take this out
421:42 - there are two more pieces for this
421:45 - puzzle so till now we have seen the try
421:48 - block and the accept block now let's see
421:50 - the else block now what happens is if
421:54 - this condition succeeds then the code
421:57 - inside the else block can be executed so
422:00 - inside my try block I am just trying to
422:03 - see if I can divide x with Y if this
422:06 - succeeds then I can say that I want to
422:09 - print
422:11 - right over here the naming is a little
422:14 - weird but we can't really help it so
422:16 - whenever a try block succeeds we can use
422:19 - an else block to execute some other code
422:22 - as well let me add a couple of print
422:24 - statements just for the sake of clarity
422:27 - so else is executed only when try
422:29 - succeeds so we are trying to see if x
422:32 - can be divided by y or not and if that
422:35 - succeeds only then we want to print out
422:37 - the number now the last piece is called
422:40 - as
422:41 - finally
422:43 - now no matter what happens if the try
422:46 - succeeds or it fails this finary block
422:49 - is always going to execute so let me
422:53 - write a print statement right over here
422:55 - you may not appreciate the beauty of
422:58 - this block finally but just imagine a
423:01 - scenario that you're writing a web
423:02 - application and you want to write
423:04 - something to the database or suppose you
423:07 - are interacting with some other apis and
423:09 - you want to do some kind of a cleanup
423:11 - operation maybe you want to delete some
423:14 - files maybe you want to insert some
423:15 - files so no matter the outcome if the
423:18 - operation succeeds or fails we can have
423:21 - that logic inside the finally block now
423:24 - let me save this file and let me run
423:27 - this file
423:28 - so as you can see
423:31 - we always have this output of finally so
423:35 - no matter the outcome we always have
423:37 - this block let me comment one of this so
423:40 - that we have much more clarity we try
423:42 - and run the file so we have a zero
423:44 - division error and since we have some
423:47 - error the code inside the else block did
423:50 - not execute but the code inside our
423:53 - final block executed and we have this
423:56 - output right over here now let me go
423:59 - back and let us drive the second one let
424:01 - me comment this out and let me try to
424:04 - run this so now see what's happening
424:07 - since this operation is succeeding
424:10 - we go to the else block and inside the
424:13 - else block we first print these two
424:15 - lines
424:16 - so that's what is happening we have
424:18 - those two lines right over here and
424:20 - after that we are printing out the
424:22 - number so which is 0.75
424:25 - and this block finally this is always
424:28 - going to execute so that's what is
424:31 - happening so if you try with this one
424:33 - you can have the same output so let me
424:35 - uncomment this so since we have an error
424:38 - our else block will not execute let me
424:41 - run this file for the last time so here
424:43 - it is we have a statement saying that X
424:46 - and Y needs to be number
424:48 - the code inside the edge block is
424:50 - totally omitted but the code inside
424:52 - final block is executed and we have the
424:55 - output right over here let us have a
424:58 - look at the next kind of error and this
425:01 - kind of error is called as assertion
425:03 - error now this assert statement that I
425:06 - am going to show you this statements are
425:08 - very useful in testing now we are not
425:11 - going to learn testing in the series but
425:14 - I just wanted to show you the assert
425:16 - statement so what I have done is behind
425:18 - the scenes I've created a file called as
425:21 - find Sohan so what's going to happen
425:23 - right now is
425:25 - Lewis has a list of friends and let us
425:28 - try to see if we can find a particular
425:30 - friend in that list or not so let me
425:33 - name the function as find Zohan
425:38 - and this accepts a name of the friend
425:40 - that we want to find so this returns
425:44 - nothing so we can say none
425:48 - so this is the list of friends so I can
425:51 - just copy and paste it right over here
425:53 - now let us create our try and else
425:55 - blocks so normally you'd write as name
425:59 - in my list of friends
426:03 - and this would give you a Boolean value
426:05 - of true or not
426:06 - but what we can do is we can also use
426:09 - the keyword of assert so what I mean to
426:12 - say that I want python to assert if the
426:15 - name is inside the list of friends or
426:17 - not if the name is not present that
426:20 - means we can have a kind of error and
426:23 - this time the error would be assertion
426:25 - error so let us use the accept block to
426:29 - catch our assertion error so you can say
426:32 - or not arithmetic I want
426:35 - assertion and then we can see let us
426:39 - print out the name
426:44 - not found now in case we get a match and
426:47 - this statement succeeds then we can also
426:50 - write the else block and we can print
426:53 - out saying that
426:56 - found
426:58 - followed by the name
427:01 - we can also include the final block
427:03 - remember that this is always going to
427:05 - execute let us print Maybe
427:10 - goodbye that's it let us try searching
427:13 - for a couple of friends
427:15 - so I can say find
427:18 - Zohan and let us try to find for Zohan
427:22 - himself let me copy and paste
427:25 - and let me try to search for Sarah and
427:28 - let us run this file
427:31 - so we can see
427:33 - in the first case we found Zohan so we
427:36 - are printing out fine Zohan the final
427:39 - block always executes we have so we have
427:42 - goodbye as well
427:43 - the second time we could not find Sarah
427:46 - and it threw an assertion error which
427:49 - was caught inside this except block
427:51 - so we have the output of Sarah is not
427:54 - found
427:55 - and
427:56 - the finery block again executed so we
427:59 - have the output of goodbye till now we
428:01 - have been seeing how to catch an error
428:04 - but now let us see how we can actually
428:06 - throw an error
428:08 - so let me create a new file right over
428:10 - here
428:12 - this is going to be my fine Zohan part 2
428:16 - dot pi
428:18 - and let me copy and paste all of this
428:21 - code from here
428:26 - now let's get working on this file now
428:28 - since I am not catching any errors I
428:31 - don't require this try and else blocks
428:33 - so let me take it out now if you can't
428:36 - find the name inside the list of friends
428:39 - at that time we want to raise an error
428:42 - so we can say that we can't find the
428:44 - given value that means we can raise a
428:48 - value error here we can say if
428:51 - the name is not inside my list of
428:56 - friends
428:57 - then I can raise an error and I can
429:00 - raise a value error and I can also give
429:03 - a custom message saying that the name
429:08 - is not found
429:11 - and we can also say else in case we find
429:14 - the match we can simply
429:17 - print it out we can say found
429:20 - and followed by the name so let me save
429:24 - it and let me try and run this file
429:28 - so the first time we have a match so our
429:31 - program will not panic but the second
429:33 - time we don't have a match and our
429:36 - program will Panic with an value error
429:38 - so let's see that in action
429:41 - and here we have it the first time we
429:44 - could find a match so we have an output
429:48 - but for the second time our program
429:50 - panicked and it threw the value error
429:53 - which you can see right over here so we
429:55 - have a value error followed by our
429:58 - message saying that Sarah is not found
430:01 - well this brings us to the end of this
430:03 - section as well if you want to learn
430:05 - more about errors you can go to this
430:07 - link so this is all of the files from
430:10 - GitHub go inside this folder error
430:13 - handling and go to this file readme I
430:16 - have put up a reference right over here
430:18 - you can visit this link to learn more
430:20 - about errors and that's it for this one
430:22 - and I will catch you in the next section
430:24 - welcome to a brand new section
430:28 - this section is all about learning
430:30 - packages packages are used to organize
430:33 - our code so let's see how to create some
430:35 - packages but before that let us see a
430:38 - couple of examples where we have used
430:39 - them for example inside our game we have
430:43 - been importing a random end from random
430:46 - I also enum and auto from enum what this
430:50 - means is we are importing something that
430:52 - is useful from us
430:54 - from a package or a module and you can
430:58 - see this gives a very nice organization
431:00 - so it's very clear from a random module
431:03 - I am importing something random from my
431:05 - enum I'm importing something as enum so
431:08 - you get a lot more clarity inside your
431:10 - code so let me go inside my zero eight
431:13 - packages folder and inside of this let
431:16 - me create a new folder the name of this
431:19 - one is 0 1
431:20 - local
431:22 - modules for the sake of clarity I am
431:25 - going to open this newly created module
431:27 - inside a new code editor window so I can
431:30 - just go inside this
431:32 - I can say 0 8 packages and I want my
431:36 - code Editor to open
431:39 - zero one local modules in a new window
431:43 - so here we are if we just hover you can
431:45 - see I am inside my folder01 local
431:48 - modules suppose you are taking a maths
431:51 - class and you have to do a lot of
431:53 - calculations and this calculations
431:55 - involve squares rectangles circles and
431:59 - so on so let's see how we can divide all
432:01 - of this functionality by using our
432:03 - modules let's say we have to do some
432:06 - operations on a circle so let's create
432:08 - the first file
432:10 - let me call this as
432:12 - Circle Dot py
432:14 - and let me create a class of circle and
432:18 - let us create the init method so I can
432:21 - say Define my init this takes itself and
432:25 - this also takes a radius
432:27 - suppose the radius can be a float value
432:31 - this returns nothing
432:34 - and inside we can say self Dot
432:38 - radius is equal to my
432:41 - radius let us also create the Str method
432:45 - so I can say my
432:46 - Str would be myself
432:49 - and this returns a string here I can
432:53 - return saying that my
432:55 - radius is my
432:58 - self dot radius now in the same class
433:01 - you also have to deal with rectangles so
433:04 - in order to organize our code we can
433:07 - create another file for this rectangle
433:10 - we don't have to Club all of the
433:12 - functionality inside a single file so
433:14 - let's do that so right over here let me
433:17 - create a new file called as rectangle.pi
433:21 - and let us create the class for
433:25 - rectangle
433:26 - let us create one more file for dealing
433:29 - with squares
433:31 - so I can create another file called as
433:34 - my Square dot pi
433:37 - and let me just copy and paste from
433:40 - rectangle
433:43 - so let me paste it
433:45 - this becomes my
433:47 - Square this becomes just my
433:51 - side I don't need this
433:54 - and my
433:57 - side is equal to my side
434:00 - this becomes minus square and I can just
434:04 - say that this is
434:06 - My Side Y my side and that's it oh I
434:10 - forgot to put a colon so
434:13 - so what we did is we segregated all of
434:16 - the functionality into different files
434:19 - now technically all of these files are
434:22 - called as modules inside python we may
434:25 - call them as files but they are
434:28 - identified as modules
434:29 - so what we can do is we can import
434:32 - functionality from this modules so let's
434:35 - say we have a file called as geometry
434:37 - and from that model of geometry we can
434:41 - import all of these functionalities and
434:43 - we can work with them so let me show you
434:45 - all of these things in action
434:47 - so let me create a file called as
434:51 - geometry dot pi and here I can see from
434:55 - my module of circle I want to import the
435:00 - class of circle
435:02 - same thing we can do for rectangle and
435:04 - square so I can say
435:06 - from the module of my
435:09 - rectangle
435:11 - I want to import my rectangle
435:15 - and the last one from my model of square
435:19 - I want to
435:21 - I want to import
435:23 - Square
435:25 - so what we are doing is we are simply
435:27 - importing the things that we want to
435:29 - work with now this file Circle rectangle
435:32 - and square they can have multiple
435:34 - functions or they can have multiple
435:36 - classes but we just need to import the
435:39 - things that we want to work with so let
435:41 - us create a circle
435:44 - maybe the radius is 5
435:47 - let us create a rectangle so I can say
435:50 - my
435:51 - rectangle let me give some random values
435:54 - then let us create a square
435:58 - let me give some random value as well
436:02 - and then we can simply print them out so
436:05 - this is my C
436:07 - and this is my rectangle and this is my
436:11 - Square let me save it and let me try to
436:15 - run this file
436:17 - so as you can see we have the right
436:19 - output first one is a circle with a
436:21 - radius of 5 then we have a rectangle and
436:24 - then we have a square so in this example
436:27 - what we did is we created different
436:29 - modules but if you look closely Square
436:32 - rectangle and circle all of these things
436:35 - belong together and we can create a
436:37 - package which I will show you in the
436:39 - next video we just saw how to create
436:42 - different modules and in this video I
436:44 - will teach you how to take all of the
436:46 - common models together and how to create
436:48 - a package out of it you must have
436:50 - noticed that we have a couple of
436:52 - additional files
436:53 - let me take it right over here so this
436:56 - was the folder that we created in the
436:57 - last video and you can see we have
437:00 - multiple different folders one of the
437:02 - first folder that you can see is for
437:04 - this one this is called as py cache you
437:07 - don't have to touch this folder this is
437:09 - just a mechanism by python to speed up
437:12 - your code just let it be there now for
437:14 - this video let me just copy and paste
437:16 - this folder
437:18 - and let me
437:20 - rename this to 0 to
437:24 - package
437:26 - and also let me open up the folder
437:28 - inside a new window so I can say code
437:32 - 02 package
437:35 - so here we are so this is the exact same
437:38 - code that we created in our last video
437:42 - now what happens is circle rectangle and
437:45 - square all of this are similar all of
437:48 - this are shapes and we can organize our
437:51 - code in a much better way so let's
437:53 - create a package which is called as
437:56 - shapes so packages are nothing they are
437:59 - just a special kind of directory so let
438:02 - me create my directory and let me name
438:05 - it as shapes
438:07 - after this I am just going to copy my
438:09 - circle inside my shapes yes I want to
438:13 - move
438:14 - same thing for my rectangle and my
438:17 - Square as well so let me just drag all
438:20 - of these files inside my folder of
438:22 - shapes
438:24 - yes I want to move now we need just one
438:27 - more file to declare that this folder is
438:30 - and package and not just an ordinary
438:32 - directory the way to do that is by
438:34 - creating a file and the name of the file
438:37 - is very important the name of the file
438:39 - is underscore underscore init underscore
438:43 - underscore Dot py when python sees this
438:47 - file it considers your directory to be
438:50 - an package now let's see how we can
438:53 - import all of this circle rectangle and
438:55 - square in our file of geometry
438:59 - so here you can see we have a couple of
439:01 - errors and that's because we have moved
439:04 - all of this code inside a new package
439:07 - and the name of the package is called as
439:09 - shapes so here we have to say that from
439:13 - my package of shapes
439:15 - I want you to go to the model of circle
439:18 - and you can say that by putting a DOT
439:22 - so this means from my package of shapes
439:24 - I want you to go to the model of circle
439:27 - and inside the model of circle I want
439:30 - you to import my class of circle
439:33 - same thing will go with the rectangle
439:35 - so here I can say
439:38 - shape slot rectangle and this also goes
439:41 - to
439:43 - my shapes dot Square just save a file
439:46 - and that's it if you try to run the file
439:49 - here you can see we have a proper output
439:52 - there is one more concept that I wanted
439:54 - to explain in this video
439:57 - so what's happening in this video is
439:58 - shapes is an isolated directory or you
440:01 - can say it's an isolated package
440:04 - which has certain functionality
440:07 - and we have created a file called as
440:09 - geometry and this file is interacting
440:12 - with our package of shapes so
440:14 - conceptually you can call this file as
440:17 - your client and the package of shapes as
440:20 - your API so what we are doing is we have
440:23 - created a client file which is
440:25 - interacting with our API
440:28 - it's a very simple concept now let us
440:30 - see how we can import functionality from
440:33 - within a package itself so let me copy
440:36 - and paste this folder and let me call
440:39 - this as
440:41 - 0 3
440:44 - and local package and let me open this
440:48 - folder in a new window
440:50 - so I can say code
440:53 - 0 3
440:55 - now suppose you are inside your package
440:58 - of shapes and inside this package if you
441:01 - have to work with any of the modules how
441:03 - would you do it let me show you with a
441:05 - small example suppose we have a file
441:08 - called as shape dot pi and inside this
441:11 - file if you want to import Circle
441:13 - rectangle and square you must be
441:16 - thinking that we can simply say from
441:18 - rectangle I want to import rectangle
441:21 - well you are partially right but not
441:24 - entirely right the way to do it is by
441:26 - putting a DOT right over here
441:29 - so this means that from my current
441:32 - package so this dot means my current
441:34 - package from my current package I want
441:37 - you to go to my model of rectangle and
441:40 - from that module I want you to import
441:42 - rectangle let's do the same thing for
441:46 - Circle so I can say dot Circle I want to
441:49 - import my circle and also I can say from
441:54 - dot of square
441:57 - I want to import my Square now let us go
442:01 - to our client file and let's see how we
442:03 - can interact with this file so let me go
442:06 - back to my geometry dot Pi now this
442:09 - syntax is perfectly fine it's going to
442:11 - work but let us use our newly created
442:14 - file so what we have done is we have
442:16 - created a file called as shapes dot pi
442:19 - and we have imported all of the other
442:21 - models inside this file so here what we
442:24 - can do is we can simply say from map
442:27 - package of shapes
442:29 - I want to import the model of shapes so
442:33 - this shape means this module right over
442:37 - here and here we can see I want the
442:39 - circle which is inside my model of
442:43 - shapes
442:45 - and that's it let me copy and paste it
442:47 - everywhere
442:49 - let me
442:51 - paste it here
442:53 - paste it here
442:54 - and that's it let me save it and let me
442:57 - try to run this file and we have the
442:59 - right output let's see if we can further
443:02 - improve our code so I'm going to copy
443:05 - this folder and paste it one more time
443:09 - and let me rename this to 0 4 package
443:15 - underscore init
443:17 - and let me open up that folder in a new
443:21 - window so
443:22 - my code04
443:26 - okay so here we are so what we were
443:29 - doing in the last video is we created a
443:31 - new model called as shapes and this
443:34 - module was importing the functionality
443:36 - from all of the other modules but we can
443:38 - do better instead of creating a new
443:41 - module we can simply take all of this
443:43 - Imports let us copy them and let us put
443:47 - all of these things inside my init file
443:50 - that's it just save it and I can't get
443:53 - rid of this file so let me just delete
443:56 - this it's not required
443:59 - now let us go back to our clan file so
444:02 - this is our geometry here we can simply
444:04 - say that I just want to import shapes
444:07 - and that's it
444:09 - just save a file and everything should
444:11 - work just as before so let me try to run
444:14 - this file and still we have the right
444:17 - output so what's happening is we are
444:20 - just importing the entire package and
444:22 - since we have all of the modules which
444:24 - are imported inside our init method we
444:27 - can have access to all of them right
444:29 - over here so this init method just acts
444:32 - like a Constructor for your entire
444:34 - package so it's similar to our classes
444:36 - we were using the same naming convention
444:39 - to have a Constructor for our class the
444:42 - same thing goes over here but here we
444:44 - are constructing a package instead of a
444:47 - class and that's about it I am so
444:50 - excited to see you in the last section
444:52 - in this last section we have two
444:54 - projects the first one is for a cash
444:57 - register and the second one is obviously
445:00 - is going to be our game but this section
445:02 - marks a fundamental shift till now we
445:06 - have been thinking and writing with our
445:08 - types but this time we would be seeing
445:11 - how we can organize the code in
445:13 - different layers just in the last
445:15 - section we saw how we can create
445:17 - packages packages was one way of
445:20 - organizing our code but now let's try to
445:22 - think beyond our packages let's try to
445:25 - think more about in the architecture
445:27 - point of view now this concept may sound
445:30 - a little alien but by the time we are
445:32 - finished with our projects this concept
445:35 - would be much clear to you for now let
445:38 - us concentrate on the first project so
445:40 - this project is all about a cash
445:43 - register but before we can jump in and
445:45 - just start writing our code I want us to
445:48 - take some time and let us think how we
445:50 - can design this application so I want
445:53 - you to take back to the concept of voc
445:56 - dtp so this is a very simple concept
445:59 - which I propose for your learning so
446:01 - this concept stands for your visualize
446:04 - outline code so this is your face number
446:06 - one once you're done with the first
446:08 - phase the second phase would be debug
446:10 - test and polish let us try to see one
446:13 - concept at a time
446:15 - so this is going to be our problem
446:17 - statement we simply want to make a
446:20 - simple cache register suppose you have a
446:23 - shop and you want to create a software
446:26 - for your cash register so basically we
446:29 - just want to implement at what's
446:31 - happening at our checkout counter just
446:34 - try to imagine what's happening over
446:36 - there normally you would hand your items
446:39 - to the cashier the cashier would scan
446:41 - the item he will generate an invoice the
446:45 - cashier would accept the payments and he
446:47 - will hand over the products to you so
446:49 - out of all of these things let us just
446:51 - try to concentrate on the cash register
446:54 - so let us go to our first phase which is
446:57 - this one visualize outline and code
447:01 - inside this phase the first step would
447:03 - be to visualize let us try to visualize
447:06 - how our application would look like
447:08 - let's try to imagine what's happening
447:11 - inside the cache register as soon as the
447:13 - cash shares scans an item an item is
447:16 - added to the invoice now what happens if
447:19 - the customer wants to change the
447:21 - quantity the cashier can simply update
447:23 - the quantity and what happens if the
447:26 - customer changes his mind and he wants
447:29 - to drop an item then simply cashier can
447:31 - delete the item from the invoice the
447:34 - next thing that I want you to think is
447:35 - an item can also have different
447:38 - components such as a discount of our tax
447:41 - which can be added to the invoice now
447:44 - just to help you visualize how our code
447:46 - will look after implementing our cash
447:48 - register I have created a nice
447:51 - dictionary so let me show you this is
447:53 - how our final outcome should look like
447:56 - let me zoom out a bit
448:00 - okay
448:02 - so this is our final outcome
448:05 - if you watch closely it's not
448:07 - complicated it's just a dictionary
448:09 - structure we have a couple of keys and
448:12 - we have a couple of values
448:15 - let's see what keys do we have the first
448:17 - key is for the customer the next key is
448:21 - for the invoice total the next one is
448:23 - for the items and the last one is for
448:26 - the purchase date now let's see at the
448:28 - values the value for the customer is a
448:31 - dictionary itself the value for the
448:33 - total is a float now here for the items
448:36 - it gets a little more interesting this
448:39 - bracket to this bracket this is the
448:42 - value and inside this value we again
448:45 - have dictionaries so these are the
448:47 - different items so we have one atom for
448:50 - an apple the next one is for an egg next
448:53 - one for milk and inside this items we
448:56 - can add different components such as
448:58 - your discount
448:59 - your quantity and your subtotal and for
449:02 - the purchase date we simply have to
449:04 - display the date of purchase that's very
449:07 - easy now the thing is I could visualize
449:10 - this data structure just because I have
449:12 - some practice but the same thing can
449:14 - happen with you when you practice a
449:16 - little bit more you can visualize this
449:18 - design even before you can start coding
449:21 - let us go to the next step let me zoom
449:24 - in again let us go to the next step
449:26 - which is outline here what we are trying
449:29 - to do is we simply want to outline our
449:32 - structure so if you see right over here
449:35 - in this step we have a couple of
449:37 - different objects
449:39 - first one was for the customer for the
449:42 - invoice total items and so on so let us
449:44 - try to outline what component or what
449:47 - classes or what objects we would require
449:50 - inside our application
449:52 - so here I am inside the next step for
449:55 - outline
449:56 - obviously we require a customer the next
449:58 - thing we require is the item that the
450:01 - customer is buying
450:02 - and the next thing which I have already
450:04 - explained we require an invoice entry
450:07 - why do we require a separate invoice
450:10 - entry is because different items can
450:12 - have different discounts or offers or
450:15 - they could have some kind of Taxation so
450:18 - for the sake of Simplicity let us call
450:20 - this item as invoice item so this means
450:24 - once you have the item Insider invoice
450:27 - it will have a slightly different
450:29 - structure and finally we have a place
450:32 - called as cash register so this object
450:35 - keeps in record of everything that is
450:37 - happening on the counter so let's try to
450:39 - summarize the objects that we are going
450:42 - to require so we need a customer we need
450:45 - an item we need one more for the invoice
450:48 - item and the last one obviously we
450:50 - require a cash register so till now we
450:53 - have much more clarity about our
450:54 - application and the different objects
450:57 - that would be going inside our
450:59 - application and you would be tempted to
451:01 - just open up your code editor and start
451:03 - writing your code but I want you to hold
451:06 - your guns let's try to do little bit
451:08 - more planning so before we can write the
451:11 - code let us try to describe how our
451:14 - objects so that means let us try to
451:16 - visualize how all of these objects would
451:19 - look like in the world of python so
451:21 - let's see I have created a couple of
451:23 - diagrams for you this is how our
451:25 - customer would look like our customer
451:27 - would require a couple of instance
451:30 - variable it could also have some methods
451:32 - and the type of them and obviously our
451:35 - customer needs a first name and last
451:37 - name the type of this one is obviously
451:39 - is good with string and for the sake of
451:42 - customer we don't require any methods
451:44 - now let us go to the next object or the
451:47 - next class
451:49 - so this class is for the actual item
451:51 - itself we need some kind of an
451:54 - identifier so that every product needs a
451:57 - unique ID so we can have an ID as our
452:00 - instance variable
452:01 - then we also need a name for an item
452:04 - then we also require a price in this
452:07 - case let us keep the type as a float
452:10 - because we may have some decimal places
452:12 - as well the next one is a little more
452:14 - interesting we also need one instance
452:17 - variable for the measurement unit here
452:20 - the question is how do you measure the
452:22 - product
452:23 - it can be in kgs grams liters Etc so we
452:27 - need some kind of a unit that will
452:30 - describe how to measure this item now
452:33 - let's go to the next object or the next
452:35 - class this is our invoice item this
452:39 - class is pretty simple it has to accept
452:41 - one item so I have created one instance
452:44 - variable for the item and since there
452:46 - can be some kind of a discount we need
452:49 - one more instance variable for a
452:50 - discount and the customer can purchase
452:52 - in multiple quantities so we have one
452:55 - more instance variable for quantity now
452:58 - for this class we require one more
453:00 - method and that is to have our subtotal
453:03 - we need some small Maps over here we
453:06 - need to figure out how much is a
453:07 - discount and how much is the quantity so
453:10 - each item can have a different subtotal
453:13 - and that's what we are trying to
453:15 - calculate inside this method let us go
453:17 - to the next and the last class that we
453:20 - require
453:21 - and this one is for our cash register so
453:25 - this class is going to record everything
453:28 - that is happening inside our shop so
453:30 - let's have a look at the different
453:31 - instance variables first obviously it
453:34 - needs to know who is the customer that
453:36 - is making the purchase it also needs to
453:39 - know the different items that are being
453:41 - purchased it also needs to record the
453:43 - purchase date and here you must be
453:45 - thinking that we require one more
453:47 - instance variable to display the invoice
453:50 - total well you are right but instead of
453:53 - just creating an instance variable we
453:56 - are going to create a method called as
453:58 - get invoice total the reason is we have
454:01 - different items and different items have
454:04 - different subtotals so let us use this
454:07 - method to calculate the total of all of
454:09 - the subtotals this is more of a
454:12 - convenience feature now let's see what
454:14 - are the methods this class is going to
454:16 - have obviously at the cache register you
454:19 - can add an item you can update an item
454:21 - you can remove an item and at the last
454:24 - we can also display our invoice so till
454:27 - this time we have much more clarity on
454:29 - our application we have a nice outline
454:32 - in place we know which classes or which
454:34 - objects needs to go inside our
454:36 - application we know what instance
454:39 - variables are required the type of them
454:41 - the methods that are required for all of
454:43 - these things so we have a much better
454:46 - design and a much better Clarity with us
454:49 - and now we can think of writing all of
454:51 - these things inside our code editor but
454:53 - before we can do that I just wanted to
454:55 - show you one more thing so the document
454:58 - that I have put together this is
455:00 - technically also known as a unified
455:02 - modeling language diagram
455:04 - well to be precise this diagram is a
455:07 - little bit different from the document
455:09 - that I have put you can go to Google and
455:12 - check it out I have left the links in
455:14 - the redmi file and in fact free code cam
455:16 - has a full course on unified modeling
455:19 - language you can click over here to have
455:21 - the link for this one the next thing is
455:23 - just to translate all of this document
455:25 - inside the code and I have just shown
455:28 - you once we are done with our code the
455:31 - cache register would look something like
455:33 - this
455:35 - so this is what we are trying and going
455:37 - to code and this structure that we are
455:39 - going to code can also be imagined to be
455:42 - a data structure so now we get it there
455:45 - is nothing big about data structures it
455:48 - is just a way to represent our data here
455:51 - you can see that we have a custom data
455:54 - structure of the type of cache register
455:57 - in the next video we will actually start
455:59 - writing the code and I will see you then
456:01 - now let's get going what I've done is
456:04 - I've created a folder called as 0 9
456:07 - projects and inside this folder I've
456:10 - created one more folder called as
456:12 - project one cache register and I also
456:15 - have this file inside my project so let
456:18 - me open up this project in a new window
456:20 - so I can say code
456:22 - and here it is
456:25 - so now let's start writing our code let
456:27 - us see our outline
456:31 - here you can see that we have four
456:34 - different objects that are required so
456:36 - let's start with one of them at a time
456:39 - let us create the first file for our
456:41 - customer so it's going to be customer
456:43 - dot Pi this is going to be class of
456:46 - customer
456:48 - and let me Define my init method is
456:52 - going to be a self and let us go back to
456:55 - the document and here we can see we
456:58 - already know the instance variables and
457:00 - the type the two variables would be
457:01 - first name and the last name let me just
457:04 - collapse my sidebar so let's create the
457:06 - init method for the first name and the
457:08 - last name so let me go over here so my
457:12 - first name is a string my last name is
457:15 - also a string and this returns nothing
457:19 - here I can say that my self DOT first
457:24 - name is equal to my first name and then
457:27 - my self dot last name is equal to my
457:31 - last name let us create an wrapper
457:34 - method for this as well so let me say
457:37 - self this always returns a string and
457:41 - this can return a very simple string
457:44 - saying that this is a class for customer
457:46 - let me add some documentation class as
457:49 - well okay so this is the class for the
457:52 - customer details now I'll just create
457:55 - the Str method so this takes in a cell
457:59 - and returns a string so we can say I
458:03 - simply want to return self DOT first
458:06 - name and I also require myself dot last
458:10 - name let us go back and see which is the
458:13 - next item so the next object that we
458:15 - want to create is
458:17 - for an item so let me open up my sidebar
458:21 - let me create a new file called as item
458:24 - dot pi
458:25 - and let's see what are the different
458:28 - parameters required so item requires
458:31 - four different instance variables ID of
458:34 - the type of integer name String price
458:38 - float and measurement unit which is
458:41 - going to be a string so let me
458:44 - go back to my file of items.pi
458:47 - and I can say my class of item let me
458:51 - add some documentation then let's create
458:54 - our init method so I can say my init
458:56 - cell the first one was the ID that type
459:00 - is integer the next one was name the
459:03 - type is a string next one was price the
459:08 - type is a float the last one was
459:10 - measurement unit this is going to be our
459:13 - string this returns nothing let us
459:18 - create the instance variable so self dot
459:20 - ID is equal to my ID
459:23 - then self dot name is equal to the name
459:27 - self dot price is equal to my price
459:31 - and self dot measurement unit is equal
459:34 - to my measurement unit let me add a
459:37 - small comment over here so our
459:40 - measurement unit could be a kg or ml or
459:43 - so on next let us create the repr method
459:46 - so I can say wrapper self returns per
459:51 - string and I can say return that this is
459:54 - a class of item next let us create the
459:57 - Str method so Str self this returns a
460:03 - string and you can say return then we
460:06 - can put the name of the item and let's
460:08 - display the price so let's say it's
460:10 - going to be dollars and it's self dot
460:14 - price per unit so we can say self dot
460:19 - measurement unit let's go to the
460:21 - document and see which is the next thing
460:23 - that we want to create so the next thing
460:25 - is invoice item things get a little more
460:28 - interesting from here
460:30 - if you see the instance variable the
460:32 - first one is an item but the type is an
460:35 - item so please keep that in mind
460:37 - and for this class you also have a
460:40 - method called as get subtotal and this
460:43 - method Returns the subtotal after
460:45 - adjusting for the discount and for the
460:47 - quantity so let's create one more file
460:50 - right here let me call it as
460:52 - invoice item dot py let me collapse my
460:57 - sidebar and let's say this is going to
461:00 - be class of my invoice item let me add
461:04 - some documentation let's create the init
461:07 - file init cell the first argument is for
461:11 - an item and the type is item but this is
461:14 - not going to work because we don't have
461:16 - item in this file let us import it from
461:20 - the module so we can just go right over
461:22 - here and we can see from the module of
461:26 - my item I want to import the class of
461:30 - item now this will work the next
461:33 - argument was for quantity and the type
461:36 - was integer the last one is for Discount
461:40 - the type is a float here we can do one
461:44 - more trick we can assign the values
461:46 - right over here so that means if the
461:49 - user does not provide an argument for
461:51 - Discount that means by default the
461:54 - discount would be assigned a value of 0
461:56 - so this is a very convenient feature of
461:58 - python now this is going to return none
462:02 - self dot item is equal to my item self
462:06 - dot quantity is equal to my quantity
462:09 - self dot my discount is equal to my
462:14 - discount now let's see what else we
462:16 - require
462:18 - so we also require a method called as
462:21 - get subtotal so let's create that method
462:24 - but before that let us create our
462:26 - wrapper and Str method so let me write
462:30 - my wrapper takes itself returns a string
462:34 - and it can written saying that this is a
462:37 - class of invoice item the next is for my
462:40 - string takes the self and returns an Str
462:45 - and let us create a nice string for this
462:47 - so we can say the item and let us
462:51 - display the self now here I want to
462:54 - display the name of the item and we can
462:56 - get the name of the item through our
462:59 - type of item
463:00 - so we can say self Dot item Dot
463:05 - name so if you go to the definition of
463:07 - item you can see we have an instance
463:10 - variable of name so this is what we are
463:12 - trying to refer right over here next we
463:15 - can say the quantity and let us display
463:18 - self dot quantity then let us display
463:22 - the discount so we can see this is
463:26 - dollars
463:27 - and it is self dot discount we can also
463:32 - display
463:33 - the subtotal we have not yet created
463:36 - this but we will create it shortly so
463:38 - let me write it first and then we will
463:40 - create it so I can say subtotal would be
463:44 - self Dot get subtotal remember we have
463:49 - not yet created this method but we will
463:51 - create it shortly and let's do one more
463:54 - small trick over here
463:55 - let us display only two decimal places
463:58 - we can do that by using the syntax so we
464:01 - can say colon and we just want two
464:04 - decimal places for our float
464:07 - uh now this line looks a little longer
464:10 - so let us try to divide it so let me
464:13 - take this line and let us put a bracket
464:16 - opening one and the closing one let me
464:20 - take it inside and let me cut all of
464:24 - these things clear and let me go to the
464:27 - next line and let me paste it over here
464:30 - okay so this looks much better now this
464:33 - is complaining because we don't have
464:34 - this method till now let us go and
464:36 - create this method so we can say Define
464:39 - get sub total this just takes the cell
464:43 - and this Returns the float now let us
464:47 - see how we can get the subtotal what I'm
464:50 - going to do is I am going to use a very
464:52 - simple Trick In fact I am going to
464:54 - define a private member right over here
464:56 - so let me put up a comment saying that
464:59 - this is a private member let me call it
465:01 - as self dot underscore subtotal now
465:06 - remember since I want this very able to
465:08 - be kept as private that's why I'm using
465:11 - underscore right over here now python
465:13 - does not have a concept of private and
465:15 - public but this symbolizes to other
465:18 - developers that we want to keep this
465:20 - variable as private now let's just
465:22 - calculate the subtotal which is pretty
465:24 - easy so we require the price from the
465:27 - item multiplied by the quantity and
465:31 - minus the discount now let us go back to
465:35 - this method get subtotal and we simply
465:38 - have to return it so I can say self dot
465:42 - subtotal the reason why we are doing all
465:44 - of these things is I don't want any
465:47 - other developer or any other user to
465:50 - accidentally change my subtotal I want
465:53 - it to be kept as private that's why I'm
465:55 - using this method you can also create a
465:58 - property called as subtotal which is
466:00 - also a valid solution you can definitely
466:02 - do that but right now for the sake of
466:05 - Simplicity I'm just creating a private
466:07 - member let us go back to the document
466:09 - and see what is next so the next one
466:11 - that we want to create is for the cache
466:14 - register itself so this is the cash
466:16 - register note the types that we have
466:18 - over here customer is all the type of
466:21 - customer then we have the next instance
466:23 - variable items the type is in dictionary
466:26 - then we have the purchase date the type
466:28 - is date time and we have a couple of
466:31 - methods on this as well let us create a
466:34 - new file right over here and call it as
466:37 - cash register dot Pi let me collapse my
466:41 - sidebar and we can say my class of cash
466:45 - register let me add some documentation
466:48 - that this is the cash register for each
466:51 - customer then we can Define the init
466:53 - method so self so as we just saw the
466:57 - first argument is for the customer that
466:59 - type is customer we also need to import
467:02 - customer which we will do shortly we
467:05 - also need to have one more for the items
467:07 - and
467:09 - that is a dictionary
467:12 - and we need one more for the date
467:14 - but before we can finish all of this
467:16 - definition let me first go and import
467:18 - customer so I can say from the module of
467:22 - customer I want to import my customer
467:26 - now let me go down over here this
467:29 - Returns the none here I want you to wait
467:33 - and think how to create the instance
467:35 - variable in this case what I'm going to
467:37 - do is I'm not going to accept items over
467:40 - here instead let us create an instance
467:42 - variable directly first let us say self
467:45 - Dot customer is equal to my customer
467:49 - here we can say self dot items is equal
467:52 - to an empty dictionary just imagine
467:55 - before purchasing anything the basket is
467:59 - always empty so that's what we are
468:01 - saying this has to be items
468:04 - that's what we are saying since we don't
468:05 - have any items inside our checkout
468:08 - that's why let us assign an empty
468:10 - dictionary to it but here how do we
468:12 - Define what are going to be the keys and
468:15 - what are going to be the values of this
468:17 - dictionary let us write the type in
468:19 - right where items is my dictionary but
468:22 - what are the types which is the key and
468:25 - which is the value let us go back to our
468:27 - design document and try and see what we
468:30 - exactly want
468:31 - this is a small trick right over here if
468:34 - you see the design of items items is
468:37 - actually a dictionary and inside this
468:40 - dictionary we have the key is of the
468:42 - type of a string so let us go back to
468:45 - our definition right over here and we
468:47 - can see the key is going to be of the
468:50 - type of string
468:51 - now let's see what is going to be the
468:54 - type of value so let us go back the
468:56 - value is of the type of invoice type
468:59 - so if we remember inside the invoice
469:02 - item we have fields for the discount
469:04 - name quantity and we are also
469:07 - calculating the subtotal so what we can
469:09 - do is inside the cache registry we can
469:13 - have the value which is of the type of
469:15 - invoice item so I can say invoice item
469:20 - let us go up and let us also import so
469:22 - that we can use it so I can say from
469:25 - my module of invoice item I want to
469:29 - import the class of invoice item so
469:32 - remember whenever we are creating these
469:34 - items
469:35 - the key is always going to be the string
469:38 - so if you just go back to the design
469:40 - document
469:41 - here it is inside the items the key is
469:45 - always going to be the name of the item
469:47 - and the value is always going to be of
469:50 - the type of invoice type let us go back
469:53 - to the class the next one that we want
469:55 - is for the purchase date now we have
469:57 - already seen it earlier we can
469:59 - automatically create the purchase date
470:01 - by using our date time library and
470:05 - that's what we are going to do in this
470:06 - document as well first let us go and
470:08 - import so I can say I can say from date
470:13 - time I want to import my date time and
470:17 - let us create an instance variable we
470:19 - can call it as self dot purchase did and
470:24 - we can generate this automatically by
470:26 - using date time and we want today's date
470:30 - time so we can just say now let us go
470:33 - down and let us create the wrapper and
470:36 - the scr method so I can say this is my
470:39 - repr self returns or spring
470:43 - and I can say return that this is a
470:47 - class of cash register let us also
470:50 - Define an SDR method we can say cell
470:54 - it returns a string here we can just
470:58 - return and here we can say first I want
471:02 - to display my customer so let us display
471:05 - my customer now what's going to happen
471:07 - right over here is we are simply calling
471:10 - self Dot customer
471:12 - and if you go to the customer so let me
471:14 - open up my customer file the scr of
471:18 - customer file returns a string in this
471:21 - format first name and the last name so
471:23 - whenever we are printing this customer
471:25 - by default we will get the first and the
471:28 - last name together
471:29 - we don't have to say customer DOT first
471:32 - name and last name it's not required
471:34 - next let us also display the total
471:37 - number of items so we can say total
471:39 - items and we can get that
471:42 - from the length of our items so let us
471:46 - go back to the document
471:48 - here it is so items is a dictionary we
471:52 - have three keys apple egg and milk so
471:55 - that means we have a length of three
471:56 - till now we have been using Len with
471:58 - lists but we can also use length with
472:01 - dictionaries as well and when you use
472:03 - length with dictionary it's always going
472:06 - to count the number of items so that's
472:08 - what we want right over here so total
472:10 - items is the length of my self dot items
472:14 - let us now implement the different
472:16 - methods for this one
472:17 - let us see which methods we require
472:21 - so let me scroll a little up
472:24 - so we require methods to add update
472:26 - remove and so on
472:28 - first let us see how we can add items to
472:31 - our cache register so let us go back let
472:34 - us create a new method called as add
472:38 - item by default the first argument
472:40 - itself now let's see which are the
472:43 - arguments we need to accept if we have
472:46 - to add an item we need to know what's
472:48 - the item so the first argument is going
472:51 - to be an item the type is going to be an
472:53 - item let us go and import item as well
472:56 - so I can say from my model of item let
473:00 - me import my class of item let us go
473:04 - back to this method now since we know
473:06 - which is the item we also need to know
473:09 - how much is the quantity so this is
473:12 - going to be an integer
473:13 - and we also need to know how much is a
473:16 - discount so discount is going to be a
473:18 - float we can do one more trick over here
473:20 - if quantity and discount are not given
473:23 - we can set some default values so by
473:26 - default the discount would be zero and
473:28 - by default the quantity will always be 1
473:32 - so this returns and none so let me write
473:35 - none over here let me add some
473:37 - documentation
473:39 - and let us see how we can write the body
473:41 - of this function now the first thing is
473:44 - we would like to add an item to a card
473:46 - only if it is not existing if we already
473:50 - have this item inside our cash register
473:54 - we can simply update it we don't have to
473:56 - add it so the first check would be for
473:59 - this one so I can say so I can say if my
474:03 - item dot name not in my
474:09 - cell of items first let us type it out
474:13 - and then I will explain what's happening
474:15 - so let us go to the next line here I
474:18 - want to create a new item
474:20 - but if you scroll up the key is a string
474:23 - the value is an invoice item so that's
474:26 - what I am going to create right over
474:27 - here if you find it a little confusing
474:30 - just go with the flow and after we are
474:32 - done typing this function I will explain
474:34 - what's happening so here I want to
474:36 - create a new item is equal to the type
474:39 - is an invoice item so create an instance
474:42 - of my invoice item and let's see what it
474:47 - takes it takes an item quantity and
474:50 - discount that we already have right over
474:52 - here we just need to pass all of those
474:54 - inside so the first is for the item
474:58 - second is my quantity
475:01 - third is my
475:03 - discount
475:05 - the next thing that I want to do is I
475:07 - want to set the key and value pairs
475:09 - again let us first type it out and then
475:11 - I will try and explain so I can say my
475:14 - self dot items now here the key is going
475:19 - to be a string so this is the part that
475:22 - we are working on the key is the string
475:24 - and the value is the invoice item
475:27 - so if you refer the document
475:31 - I want the key to be the name of the
475:33 - item so that's what we are going to do
475:35 - right over here
475:37 - let us go down and we can say that the
475:39 - key has to be
475:41 - the name of the item and the value is
475:46 - the new item which we just created now
475:49 - let us go to the next line what happens
475:51 - if this item is already existing inside
475:53 - our registry
475:54 - so we can say else we simply want to
475:58 - print out we can see item dot name
476:01 - already in card you want to update
476:04 - instead let me take out one more extra
476:06 - comma we don't require this one now let
476:10 - me try and explain what's happening
476:12 - right over here let us go back to this
476:14 - document now let's see how the logic
476:17 - goes
476:18 - so suppose this is my iPad and shell let
476:21 - me create
476:22 - my cache register
476:25 - for now it can be an empty dictionary
476:29 - so this is all good
476:31 - now let us go to this line our cash
476:34 - register has one key which is called as
476:37 - item and the value is of a type of
476:40 - dictionary itself
476:42 - so let us do that over here so we can
476:45 - say for my register I want to create one
476:49 - key which is called as items sorry it
476:52 - has to be items
476:54 - and this is
476:55 - an empty dictionary
476:58 - let us try to print it out so this is
477:00 - how our register is looking right now we
477:03 - can also use the if and in syntax when
477:06 - working with our dictionaries suppose we
477:08 - want to check if our dictionary has one
477:11 - key which is called as items or not so
477:13 - we can say items in register and that is
477:17 - true let us check for customer in the
477:21 - resistor so that's false because we
477:23 - don't have a key called as customer
477:25 - inside the resistor we can use the same
477:28 - syntax when referring to items as well
477:31 - remember items is also a type of
477:34 - dictionary let us assign some values to
477:37 - these items and then we can check for
477:39 - the if and in conditions
477:42 - let me copy
477:45 - all of this I just want this one
477:48 - and we can say for my directory of
477:52 - register I want you to go to my
477:55 - directory of items now what we can do is
477:59 - since this is a directory we can also
478:02 - create new keys and new values over here
478:04 - so here I can say I want to create a new
478:07 - key
478:08 - for my Apple
478:11 - and the value is this one we just copied
478:15 - right over here so let me just paste it
478:17 - over here so this is the value
478:19 - and that's it let me just clear all of
478:23 - this
478:24 - let us try to see how the resistor is
478:28 - looking right now so this is how it is
478:30 - looking inside the register we have a
478:32 - key called as items and inside the items
478:35 - we have apple as of now
478:37 - let us copy and paste one more product
478:41 - this one so let me copy this
478:45 - and we can use the same syntax so I want
478:49 - to say
478:50 - register is a directory I want you to go
478:53 - and find
478:56 - the key of items here let us create
478:59 - another key by the name of eggs
479:02 - and let us assign a value of this thing
479:06 - to it
479:07 - and that's it let me clear it and let us
479:11 - see how our
479:12 - register is looking now
479:15 - so here we have it first we have an
479:17 - apple which is right over here and then
479:20 - we have an egg now let us check if an
479:23 - particular product is inside our items
479:25 - or not
479:27 - so we can say apple
479:31 - in my
479:33 - register I want to access my dictionary
479:36 - of items
479:37 - and in this dictionary so from year to
479:41 - year we want to see if we have any Keys
479:44 - called as Apple we do have so the answer
479:47 - of this one should be true
479:49 - and that's it we have the answer of true
479:53 - let us try to search if we have milk
479:55 - inside our items or not so let me just
479:57 - go and change this
480:00 - from Apple
480:02 - will false we don't have milk inside our
480:06 - items now if I just flip the statement
480:10 - so if I say milk
480:12 - not in now let's see what we get as a
480:15 - response so the response is true milk is
480:19 - not in miter is free
480:21 - now since my milk is not there inside my
480:24 - register only then I would like to add
480:26 - it if it is existing then I would simply
480:29 - like to update it now let us go back to
480:32 - our code and try to
480:34 - relate what's happening so let us have a
480:38 - look at this line at line number 24. I
480:41 - am just trying to check if an item is
480:43 - existing in our items or not on line
480:46 - number 26
480:48 - so items is our dictionary the key is
480:51 - going to be the name of the item so
480:53 - that's what I've taken right over here
480:55 - and we are assigning this item
480:57 - to the key that we just created and we
481:00 - have a beautiful structure in place but
481:02 - this function is not at complete the
481:04 - moment we add one item we also need to
481:07 - upgrade our total otherwise our logic
481:10 - would be wrong so let's see how to do
481:12 - that in order to show the totally
481:15 - inverse value
481:16 - we would also require one more
481:18 - additional instance variable so let us
481:21 - create one private this time so we can
481:23 - say this is a private member and I can
481:26 - say self plot invoice total
481:29 - initially let us set it to zero I want
481:33 - the type to be a float
481:35 - instead of an integer
481:37 - now what happens right over here
481:39 - whenever we are adding an item
481:42 - we also need to increase the invoice
481:44 - total that's pretty simple so we can
481:47 - simply say self Dot underscore invoice
481:51 - total plus equal to and we can say my
481:55 - new item
481:56 - dot get subtotal
482:00 - remember when we created this invoice
482:03 - item
482:04 - we implemented this method to calculate
482:06 - the subtotal and why do we need this
482:09 - method because we have to adjust for the
482:11 - quantity and discount
482:12 - and that's what we are using right over
482:14 - here so this method gives us the
482:17 - subtotal for the new item which we
482:19 - simply want to add to our invoice total
482:21 - but the issue is this method is not
482:24 - reliable what happens if you have a typo
482:27 - instead of plus we have minus or we need
482:30 - to do some other validation logic before
482:32 - we can increase the total the answer is
482:35 - let us create one function that will
482:37 - increase the subtotal so let's create
482:40 - one method right over here so we can say
482:43 - increase the invoice total the first
482:48 - argument would be obviously the self now
482:50 - let's see what argument should we take
482:53 - if you go down we can get the subtotal
482:55 - if we have the access to our new item
482:58 - the type of this new item is an invoice
483:02 - item so that's what we need to get right
483:04 - over here so this function accepts an
483:08 - item which is or the type of
483:11 - invoice item and this returns nothing
483:16 - let us add a documentation saying that
483:18 - this increments the total inverse value
483:21 - each time an item is added let us go
483:24 - down and let us take this line this is
483:26 - what we are exactly doing right over
483:28 - here
483:29 - let me paste it and let us change the
483:34 - name of the variable because the
483:35 - variable we are calling it as just the
483:37 - item over here so this is the item let
483:41 - us go below and use this newly created
483:43 - function here we can say I want to sell
483:46 - Dot I want to increment my invoice total
483:51 - and I simply need to pass the new item
483:54 - inside of this so new item the last
483:58 - modification that I want to do over here
484:00 - is I want to keep this method as private
484:03 - I don't want any other developer to
484:06 - accidentally change my logic let us go
484:09 - down and let me update this syntax as
484:11 - well now we have a beautifully typed and
484:14 - a much more stable code and while we are
484:17 - here let us create one more method
484:19 - to decrease or decrement the invoice
484:22 - total whenever we are deleting an item
484:25 - from the register we would also need one
484:27 - method to decrease the subtotal so let's
484:30 - do it right now let me copy and paste
484:33 - all of this
484:35 - the name changes from increment to
484:38 - decrement this also changes to decrement
484:41 - and this becomes removed
484:46 - and this becomes
484:48 - minus equal to and that's it let us
484:51 - create the next method to update our
484:52 - card the logic is somewhat similar to
484:55 - this one so let me copy and paste all of
484:58 - this
485:00 - this has to be update let me change the
485:03 - documentation so this becomes too
485:07 - update an existing item and this one
485:10 - becomes not in the card
485:13 - and do you want to purchase instead now
485:17 - let's see the logic for this one we can
485:19 - update an item only if it is existing so
485:22 - let's do that right over here so let us
485:25 - change from not in to just in so if we
485:29 - have that item only then let us try and
485:31 - update it but before we can update that
485:34 - item we need to get the old atom back
485:37 - and we also need to decrease from the
485:40 - invoice total so here we can say that my
485:43 - old item is equal to my self dot items
485:50 - and I want to retrieve a specific item
485:53 - and this item would be
485:55 - my item dot name so let us go back to
486:00 - our IPython and let's see what's
486:01 - happening over here
486:03 - we are just trying to retrieve a data so
486:07 - this is our existing register and
486:10 - suppose we want to get all of the
486:11 - details for X suppose we want to update
486:15 - the discount or the quantity and so on
486:17 - before we can update we need to retrieve
486:21 - it first so I can say my
486:23 - egg details
486:26 - first I want to go to my register now
486:30 - since this is a dictionary I want to
486:32 - access my key and the name of my key is
486:35 - items
486:37 - and inside items I want to access
486:39 - another key this time the name of the
486:42 - key is X we can see right here we have a
486:46 - key called as X
486:47 - so this will retrieve the value for this
486:51 - one
486:52 - let us see what's happening
486:54 - oh there is a syntax error so this has
486:57 - to be a square bracket let us try to
486:59 - print the egg details now
487:02 - and we have the details in place and
487:05 - that's what we are doing right here we
487:07 - are simply trying to retrieve an item
487:10 - from its key now remember the keys are
487:13 - always string values so if you go right
487:16 - over here we can see item is a
487:19 - dictionary
487:20 - and the key is a string this string is
487:23 - the name of the item so that's what we
487:25 - want
487:26 - after we have the old item we also need
487:30 - to decrement its value so we can say
487:33 - self I want to decrement the value and I
487:39 - simply need to pass an item so let us
487:41 - pass just the old item on the next line
487:44 - we are going to create a new item with
487:47 - updated quantity and discount and we are
487:50 - going to add that item back to our
487:52 - register so all of this logic Remains
487:55 - the Same let us go to the next part and
487:57 - let us see how we can delete an item but
488:00 - first let me go back to my iPad and
488:02 - shell and let me show you how to delete
488:04 - an item from a dictionary let me clear
488:08 - all of this and let us print our
488:10 - register one more time
488:13 - so you can see resistor has a key of
488:16 - items and inside these items we have two
488:19 - another items one is for apple and one
488:22 - is for our eggs suppose we want to
488:24 - delete Apple
488:25 - let's see how to do that the way to do
488:28 - that is by using a keyword called as
488:30 - delete
488:31 - and after this we simply need to specify
488:34 - which key we want to delete so I want to
488:37 - say I want you to go to my register from
488:41 - register I want you to access my items
488:44 - and once inside my items I want you to
488:47 - delete my key of Apple
488:50 - and that's it now we should try to print
488:53 - a resistor and you can see we have
488:56 - deleted Apple let's use this syntax
488:59 - right over here to delete an item from
489:01 - our register right over here let me copy
489:04 - and paste all of this
489:10 - let me take a little up the name is
489:14 - remove we don't need the quantity and
489:16 - the discount we just need to know the
489:18 - item that we are supposed to delete let
489:21 - me update the documentation so this is
489:23 - going to be removed item from our cache
489:26 - resistor we don't require this as well
489:29 - now let's see the logic we can delete an
489:32 - item only if it is existing and that's
489:36 - what we are checking over here so we
489:38 - need this logic in place since we are
489:40 - not creating any item we can delete all
489:43 - of these things here we are retrieving
489:46 - an item the next line we are
489:48 - decrementing the invoice total now we
489:51 - simply have to delete it from our
489:52 - dictionary and we have already seen the
489:55 - syntax so we can say I want to delete
489:57 - from my items and the key would be my
490:02 - item dot name and let us see what else
490:05 - is remaining
490:07 - it will go back to my document
490:10 - and we have to implement this methods
490:13 - get invoice total and display which are
490:16 - pretty simple let's create the first one
490:19 - we can say get invoice total this takes
490:25 - a self and this returns a float let me
490:28 - add some documentation and here we
490:31 - simply have to return cell dot
490:35 - underscore invoice total the last one is
490:38 - to display our invoice so let us create
490:40 - some pretty looking output so I can say
490:44 - display my invoice takes the self and it
490:49 - returns
490:50 - nothing let us try to visualize how our
490:53 - invoice would look like
490:55 - now this is the code from my GitHub
490:58 - repository I am inside my projects and
491:01 - project number one if I run this file I
491:05 - have a output
491:06 - and this is how our invoice would look
491:10 - like so on the first line we would like
491:12 - to have a nice separator followed by the
491:15 - customer details and followed by the
491:17 - date of the purchase so let us go back
491:20 - and let us do all of these things
491:22 - here we can create a nice separator line
491:24 - by using a print statement
491:27 - and I would just like to say that this
491:30 - is my separator multiplied by 70 times
491:34 - so what this is going to do it is going
491:36 - to repeat this symbol for 70 times
491:38 - before this let us insert a blank line
491:41 - so we have a nice spacing in place
491:44 - next let us see what we want we want the
491:47 - customer details and the date so we can
491:50 - just go back and
491:52 - here on the next line I can simply say I
491:56 - want to print self and if you see our
491:59 - Str method that's what we are doing
492:01 - right over here
492:02 - so this is our string method customer
492:05 - and followed by the total items
492:08 - and that's what we want right over here
492:11 - the next line is for the date
492:14 - so let us go down
492:17 - and on the next line we can say I want
492:20 - to print my date and we already have it
492:25 - so I can say self dot purchase read now
492:29 - remember in some of the earlier videos
492:31 - we formatted this date and time
492:34 - according to the month day and the year
492:36 - that's what we are going to do right now
492:38 - as well
492:39 - so I can use the method called as
492:42 - string format time and let us give us a
492:47 - format so this format stands for the
492:49 - month the day and the year let's see
492:52 - what we need next
492:53 - we require one separator and after the
492:57 - separator we require all of the items so
493:00 - let's get back and let me copy this line
493:03 - from here let me change the separator
493:06 - from plus to our Dash and in the next
493:09 - line we want to print all of the items
493:12 - that's pretty easy so I can just say for
493:15 - my item in my self dot items dot values
493:22 - let us print out the item and this has
493:26 - to be brackets because we want to get
493:28 - the values out of our dictionary next
493:31 - let us see what we want
493:33 - so we require one more separator total
493:36 - price and one last separator so let's do
493:40 - that
493:41 - let me copy and paste this right over
493:45 - here
493:47 - on the next line we can see that my
493:50 - total price would be in dollars
493:55 - serve Dot get invoice total and let us
494:00 - display only two to seven points so I
494:03 - can say colon and I want two decimal
494:07 - points for my float
494:09 - and that's it let us go back and check
494:12 - oh no we require one more separator
494:15 - so let me copy this and
494:20 - paste it right over here now we have a
494:23 - way to display our invoice as well we
494:26 - are using multiple print statements but
494:28 - if you want you can use a template or
494:30 - you can also use a multi-line string as
494:33 - well but this is much more simple for
494:35 - now now let's get back to our document
494:39 - so we have everything in place
494:42 - let us check what's remaining so code we
494:47 - have cache register in place now we just
494:49 - need to find out a way to interact with
494:52 - our cache register so that means we just
494:54 - need to create a client that can
494:56 - interact with our resistor so let me
494:59 - create a new file let me name it as the
495:02 - Vista Dot py
495:04 - so this would be our clad file and here
495:07 - obviously first we need to import our
495:09 - cache register so let me collapse my
495:12 - sidebar and I can save from the model of
495:16 - cache register I simply want to import
495:19 - my cache register and then we also need
495:22 - a customer so I can say from my model of
495:26 - customer I need customer the last thing
495:29 - I want is the item so I can save from
495:33 - item let's import
495:36 - item let's create the first item so let
495:40 - us create milk so we can say milk is an
495:43 - item let's give it an idea of 100
495:47 - name would be just milk
495:50 - price could be 4.5 dollars and the
495:54 - measurement unit can be a liter let us
495:57 - create our customer as well so I can
496:00 - save my customer one
496:02 - is my customer
496:04 - the first name is Lewis
496:08 - the last name is Zappa now this customer
496:11 - is going to the store and making an
496:13 - purchase so let us create a cash
496:16 - register for Lewis so we can say this is
496:19 - my cash register number one we simply
496:22 - have to give the customer and that is
496:25 - our customer number one let us try to
496:27 - print out our cash register right now so
496:30 - I can say print my cash register one
496:35 - let me save it and let me try to run
496:38 - this file so right now the customer is
496:40 - Louis Zappa and the total number of
496:43 - items is 0 and that's true because we
496:46 - have not yet added any items so let's
496:49 - get back and let's make Lewis purchase
496:51 - something so here we can see that
496:54 - my cash register one I simply want to
496:58 - add an item and the item I want to add
497:01 - is my milk now you can give some
497:03 - additional arguments as well the
497:05 - quantity and the discount right now let
497:07 - us go with the default values
497:09 - and let us try and save and run this
497:12 - file
497:13 - now we can see we have one item on our
497:15 - invoice
497:16 - let us go back
497:18 - let us create some more items let us
497:21 - create one as egg so I can say item the
497:26 - ID could be 101 the name is egg the
497:30 - price could be 99 Cents for one egg
497:33 - the measurement unit is for a piece then
497:37 - we can make one for Rice we can say item
497:41 - id could be one or two name is arise
497:46 - price could be four dollars for a kg
497:51 - let's create one last one maybe for an
497:55 - apple we can say
497:57 - item ID could be 103
498:01 - the name is Apple maybe it is for 5.67
498:05 - dollars
498:07 - for a kg now let us make Lewis purchase
498:11 - some other items as well suppose Lewis
498:13 - also wants to purchase eggs so we can
498:16 - say
498:17 - cr1 dot add items so Lewis wants to buy
498:21 - some eggs suppose this time he is
498:24 - purchasing 12x
498:25 - and for quantity of 12x there is a
498:28 - discount of 50 cents that's it let us
498:31 - save the file and let us try to run this
498:34 - so this time you can see we have two
498:36 - items in our invoice
498:38 - a little better way to display the
498:40 - invoice could be by using our inbuilt
498:43 - function so let me take it out
498:45 - and let me say cr1 dot I want to display
498:49 - my invoice
498:50 - now let us try to run this file
498:53 - so this time we have a much better
498:55 - output so we can see the customer is
498:57 - Louis Zappa there are two items this is
499:01 - the date of his purchase and these are
499:04 - the items remember for the egg we
499:06 - specified the quantity was 12 and there
499:09 - was a discount of 50 cents that's what
499:11 - we have over here here you can see we
499:13 - have only one item so the subtotal is
499:16 - 450 for this one we have 12 items minus
499:19 - the discount and so the subtotal is
499:22 - right over here and right over here we
499:24 - have the total price as well let's try
499:27 - to play a little bit more with this one
499:29 - let's try to upgrade one item so suppose
499:32 - Lewis thinks that 12x are like a lot and
499:37 - he wants to buy only 10x so we can say I
499:41 - want to update my eggs
499:43 - and this time the quantity is 10 but
499:46 - fortunately the store is in a good mood
499:48 - and the store is offering a discount of
499:51 - say one dollar so let us save it and
499:54 - give it a try so you see we have an
499:57 - updated quantity of 10 discount of one
499:59 - dollar and we also have an updated
500:02 - subtotal as well and automatically the
500:05 - total price also gets updated
500:08 - let us go back and let us try to add one
500:12 - more item suppose this time Lewis wants
500:16 - to buy some rice
500:18 - maybe he wants to buy three kgs of rice
500:21 - and there is a 75 cent discount on this
500:24 - one
500:25 - so let me save this and let us run the
500:28 - file
500:29 - so this time we have three items and we
500:32 - also have rice in our items as well let
500:34 - us go back now let us see if we try to
500:37 - add an item which is already existing
500:39 - then what happens so let me copy and
500:42 - paste this one
500:44 - save and let us try to run the file so
500:46 - here you can see we get the prompt say
500:48 - that rice is already in card do you want
500:51 - to update instead so you can see all of
500:53 - our code is working beautifully and if
500:56 - you see right over here nothing is
500:58 - changed everything is just as before let
501:01 - us go back now what happens if we try to
501:03 - update an item which does not exist so
501:07 - suppose we say that we are trying to
501:09 - update an item maybe we are trying to
501:12 - update
501:13 - for apple and the quantity could be 10
501:16 - the discount could be zero
501:18 - so let me save it and let me try to run
501:21 - this one so again we get a nice message
501:23 - saying that Apple not in card purchase
501:26 - instead and if you see the invoice it's
501:28 - just as before there are no changes to
501:31 - our items
501:32 - so let us go back
501:34 - so right over here we can say that
501:37 - we want to
501:39 - remove eggs
501:42 - and let us try to display our invoice
501:45 - after repoing as well so let me copy
501:48 - this
501:49 - and let me paste right over here let me
501:52 - run this file
501:53 - so here you can see this is the earlier
501:56 - invoice in this invoice we have eggs and
501:59 - and this is the next one when we remove
502:02 - we don't have eggs in our invoice
502:05 - so you can see we can also remove an
502:07 - item from our invoice
502:09 - I also wanted to show one more trick
502:11 - right over here
502:12 - we can also create an alias for
502:15 - customers Suppose there is a big
502:17 - application and there are two files and
502:20 - inside both of the two files we have a
502:23 - class of customer then we can create an
502:25 - alias so we can just say that I want to
502:27 - import customer as my customer and we
502:32 - simply have to update one line over here
502:35 - so this instead of a customer this will
502:38 - be called as
502:39 - my customer
502:41 - just save your file and if you try to
502:43 - run it everything works smoothly let us
502:46 - go back and let us create one more
502:48 - customer just for the last time so we
502:51 - can say my customer 2 is my customer and
502:58 - first name is Chico her surname is
503:02 - Neutron let us create a cache register
503:06 - for this one as well so this is going to
503:08 - be my
503:09 - cash register for my customer number two
503:13 - suppose she is purchasing some milk and
503:17 - the quantity could be four liters here I
503:19 - can also use my keyword syntax so I can
503:22 - say my quantity would be
503:24 - 4 4 and suppose we have a discount of 10
503:29 - dollars let us try to add one more item
503:32 - so this time she wants to buy some eggs
503:35 - and the quantity is 25 next she decides
503:39 - to update the quantity of x
503:41 - so next time the quantity is 48 now
503:44 - fortunately the store is offering a
503:46 - discount of 12 on the quantity of 48.
503:49 - Chico also wants to buy some apples so
503:52 - let us buy some apples as well and let
503:56 - us display the invoice
503:58 - that's it let me save the file and let
504:01 - me try to run this file
504:04 - so here we have the invoice for Chico so
504:07 - Chico has three items milk egg and
504:10 - apples for the milk the quantity was
504:13 - four liters the updated quantity for X
504:16 - was 48 and for apples it was 8 and this
504:20 - is the total price now we have a
504:23 - beautiful program in place let us go
504:25 - back I wanted to mention one point over
504:28 - here if you see the code inside my
504:30 - GitHub so this is the code downloaded
504:32 - from GitHub my GitHub file has a couple
504:34 - of more methods for example if you go to
504:37 - cash register I have a couple of extra
504:40 - methods so all of this is extra and I
504:43 - had to create this methods because I
504:45 - wanted to see the output in a dictionary
504:48 - format
504:49 - so if you go to this document
504:52 - I wanted to have the output in this
504:54 - format
504:55 - so that is why I had to do a couple of
504:58 - more work
504:59 - and that's the reason why you can see
505:01 - all of these methods but I am not going
505:03 - to explain all of these methods inside
505:05 - this tutorial if you want you can give
505:07 - it an attempt and try and study what's
505:09 - happening but to just give you a short
505:12 - idea I am converting everything to a
505:15 - form of a dictionary and finally I am
505:18 - exporting that dictionary to a Json
505:20 - format that's why I can have a nicely
505:22 - formatted output now if I go to this
505:25 - file register so this is on my GitHub
505:28 - code so here I am using this method to
505:30 - Json to have a nicely formatted output
505:33 - now if you run this file I can get the
505:36 - output in the way I desired I hope you
505:39 - learned something new in this video now
505:41 - this video had a lot of Concepts and it
505:44 - was very densely packed so if you don't
505:46 - understand any concept you are not to be
505:48 - blamed it's quite natural that it will
505:50 - take you some time to understand maybe
505:52 - you have to go through this video a
505:54 - couple of times you would also need to
505:57 - have some better understanding of how to
505:59 - work with your dictionaries before you
506:01 - can understand what's exactly happening
506:03 - in this code so this project is going to
506:05 - test all of your basic understanding of
506:07 - python up till now now the next game
506:10 - would be much more easy to implement and
506:12 - I'll see you in the next video I am so
506:15 - happy to see you in the last part of
506:16 - this entire tutorial
506:19 - the last part is all about our game
506:21 - saving zotan and in this final project
506:25 - we would be actually implementing how to
506:28 - think in layers first we will write all
506:31 - of the code and then I will try and
506:33 - explain why we did what we did so for
506:37 - starters I have created a folder called
506:39 - as project 2 savings Orton as you can
506:43 - see it's all empty so let me go and let
506:45 - me copy my file it's right inside my
506:49 - section number six
506:51 - let me copy this
506:53 - and let me paste inside my project
506:56 - number two let me open up the project in
506:59 - a new window so I can say I want to open
507:03 - my project number two
507:08 - and that's it we have a nice and clean
507:10 - slate to work with and this is our
507:13 - existing code now let's begin till now
507:16 - we have seen how to organize our code in
507:18 - different modules but for this game we
507:21 - are going to create a package of game
507:23 - and that package will contain all of the
507:26 - logic and everything that goes for
507:28 - creating a nice game so here I am going
507:31 - to create a package called as game and
507:33 - as you know making a package is very
507:35 - simple it's just like creating a
507:37 - directory
507:38 - so let me create a directory let me call
507:41 - it as game and let us create our init
507:44 - file
507:45 - so that python knows that this is a
507:48 - package
507:49 - now let me drag and drop this file
507:51 - inside my package
507:54 - yes I am want to move now let's begin
507:57 - with our code so let us get started let
508:00 - me open up this file and let's see the
508:03 - first one we have for the character type
508:05 - so what we want to do is we want to make
508:08 - our game as modular as possible so what
508:11 - we are going to do is we are going to
508:13 - take out everything and everything goes
508:16 - inside its own module so inside my
508:20 - package of game let me create a module
508:23 - by the name of character type dot Pi I
508:27 - simply have to copy and paste everything
508:29 - so right from here I need the Imports
508:32 - let me take all of this let me cut it
508:35 - out go to my character type and paste it
508:39 - let us see what's next
508:42 - the next one is our character so let's
508:44 - create one more module inside our
508:47 - package of game
508:48 - and let us call it as character dot Pi
508:52 - again I simply have to cut all of this
508:54 - so let me take everything from here
508:58 - let me cut it out and go and paste right
509:02 - over here let us go back
509:04 - the next is for the superhero so again
509:08 - let us create a new file
509:11 - superhero dot pi and let me take
509:15 - everything from here let us cut it out
509:18 - go to our superhero file let me paste
509:21 - this and we can see we have a couple of
509:23 - errors and that's because we need to
509:26 - import character and character type so
509:28 - let me go to the top
509:31 - now here since we are working inside a
509:33 - package we need to say that from the
509:36 - current package the module of character
509:39 - I want to import the class of character
509:43 - the same thing for character type as
509:45 - well so from the current package I want
509:48 - you to go to a model called as character
509:51 - type I want you to import my
509:54 - character type now if you save all of
509:56 - the errors will go away let us go back
509:58 - the next one is for villain so again go
510:02 - back right over here
510:03 - let us create a new file called as
510:06 - villain dot pi and
510:10 - let us take all of these things
510:13 - let us cut it out and paste it right
510:16 - over here also let us do our Imports so
510:20 - from director import character
510:24 - from character type import my character
510:28 - type let us go back
510:31 - so the next one is for the life let us
510:33 - create a new file called as live dot pi
510:37 - and
510:39 - let me take all of these things
510:44 - till till the last till yeah
510:47 - let me cut it out and
510:50 - paste it right over here let me save it
510:53 - let's go back to this file and if you
510:56 - see this file is pretty much empty now
510:58 - so let me delete all of the blank lines
511:01 - from here I don't require all of these
511:03 - things
511:04 - let me take out the documentation as
511:06 - well because we already know what it's
511:09 - all about don't require this as well so
511:11 - let me go on the top so we have a much
511:14 - smaller file this time and let's see how
511:17 - we can improve even further but before
511:19 - we can go a little further I wanted to
511:21 - add a couple of more classes the first
511:24 - class that I wanted to add is for a
511:26 - player it would be so nice to have a
511:28 - player so let's create a very simple
511:31 - class for player so let me say my player
511:35 - dot Pi this is going to be my class of
511:38 - player I can Define my init the first is
511:42 - obviously the self next could be for the
511:45 - first name this is string next for the
511:48 - last name this is also a string and this
511:52 - returns nothing I can say self DOT first
511:56 - name is equal to my first name and self
512:00 - dot last name is equal to my last name
512:04 - let us create the wrapper method so I
512:08 - can say retr and sell this returns a
512:13 - string and it can return saying that
512:16 - this is a class of player
512:18 - let us create the string method as well
512:22 - so our self this returns a string so let
512:26 - me just return the first name and the
512:28 - last name so I can say self dot my first
512:31 - name and self dot my last name that's it
512:36 - and this time we are going to have one
512:39 - more class and that class is for the
512:42 - game State just imagine when we are just
512:44 - starting the game we can have a
512:47 - different state maybe initializing when
512:49 - we are playing the state changes from
512:52 - initializing to in progress and at the
512:54 - last the state can change to either win
512:57 - or lose so we can keep a track of the
513:00 - state by creating a new class so let us
513:03 - create a new module right over here
513:06 - so this is going to be called as my
513:08 - gamestate dot Pi for this I am going to
513:12 - use the enum so I can say from my enum I
513:16 - want to import enum and auto then I can
513:20 - say my class of game state which
513:23 - inherits from enum let me add some
513:26 - documentation first one we can call as
513:28 - initializing so set it to Auto next one
513:32 - for in progress again set it to Auto the
513:36 - last two would be for the win and the
513:38 - Lost
513:39 - let's take a moment to review what we
513:41 - have done up till now we have created a
513:44 - module for each of the objects inside
513:46 - the game but if we have a look at all
513:49 - our modules they are basically
513:52 - structures for something for example
513:55 - character this is a structure for
513:57 - something character type again a
514:00 - structure for the types of characters
514:01 - game State the types of game state that
514:04 - we can have
514:05 - for player again we just have a
514:07 - structure the same thing for superheroes
514:10 - so this is just a structure for
514:12 - superheroes and so on so technically we
514:16 - can call all of these structures as
514:18 - schemas so schema simply represents a
514:22 - structure and that's it so let's create
514:25 - another package inside the game of
514:27 - package called as schemas and let us put
514:31 - all of this functionality inside that
514:33 - package so inside my game let us create
514:37 - one more folder by the name of schema
514:41 - and to make this folder a package let me
514:44 - create file inside of this it has to be
514:47 - again init underscore underscore dot Pi
514:51 - so let me collapse all of these things
514:53 - on the top level we don't have anything
514:55 - we just have a package of game inside
514:59 - the package of game we have another
515:01 - package called as schema now let us move
515:03 - all of the schemas into the right
515:05 - package
515:06 - so my character type my character
515:10 - game State live player
515:14 - superhero and villain all of these
515:18 - things will go inside my package of
515:20 - schema
515:21 - yes I want to move everything
515:24 - so let me collapse my schema right over
515:27 - here
515:28 - so inside my package of game we have
515:30 - three things
515:32 - first one is an another package of
515:34 - schema
515:35 - then our init file and last one is our
515:38 - game file now let us go back to our game
515:41 - file let's see what's next
515:44 - here we can see that we are retrieving
515:48 - all of the superheroes or we are
515:50 - retrieving a single superhero normally
515:53 - in an application you would have a
515:56 - database where you will store all of the
515:58 - superheroes and all of the super
516:00 - villains and that database could be
516:03 - controlled by something which is called
516:04 - as a models so just to get a field of
516:07 - models let us create one more package
516:10 - inside game
516:12 - so inside game let me create a folder
516:15 - called as models and inside this folder
516:19 - let us create a init file to make it
516:21 - unpackage let us go back to my games
516:24 - file now what happens in an application
516:27 - whenever you want to interact with a
516:29 - database so you can imagine all of these
516:32 - things to be a part of the database
516:34 - because this is the place where we are
516:37 - storing all of our data so normally a
516:40 - model would do all of these things for
516:42 - us so let's go into models and let us
516:45 - create one model for our superheroes
516:48 - so this becomes my superheroes dot pi
516:52 - and let us create one more model for our
516:54 - villains so this would be my file for
516:58 - villains dot pi and let us start writing
517:01 - up a code inside of this so first let me
517:03 - go to my superheroes so let us declare a
517:07 - class called as super hero model
517:11 - and let us create the init method now
517:15 - this init method does not take any
517:17 - argument because we don't need anything
517:19 - and this returns nothing now for the
517:23 - instance variable we can simply return
517:25 - all of the superheroes or a single
517:28 - superhero so let's see how we can do
517:30 - that we can declare an instance variable
517:33 - called as self.all and we can return all
517:37 - of the superheroes but let's see how to
517:39 - do that for now let me assign it a blank
517:42 - list let me go back to my file of my
517:45 - game here I just want to cut out all of
517:48 - this functionality for get all
517:50 - superheroes and get superhero
517:53 - let me cut it out go back to my models
517:57 - file
517:58 - and let me paste everything right here
518:02 - now since this belongs to the class I
518:05 - want to take it inside so
518:07 - let me take it inside the class
518:10 - and since now these are members of the
518:12 - class the first argument has to be self
518:15 - and here as well the first argument has
518:19 - to be
518:20 - self now let's see what to do next now
518:23 - this method called as get all
518:26 - superheroes it returns a list of
518:29 - superheroes so this means that this is
518:32 - the schema of the superhero
518:34 - so let's import it let me go to the top
518:37 - now what happens is we are inside the
518:40 - package of models and the schema of
518:42 - superheroes resides in some other
518:45 - package called as schema which is right
518:47 - over here so here we can say from
518:51 - my package of game I want to go to the
518:54 - package of schema and from here I want
518:57 - to go to the model of superhero and once
519:01 - over there I simply want to import my
519:04 - superhero now you can see all of the
519:07 - errors are gone
519:08 - let me save this the next thing is this
519:11 - is complaining because we have not given
519:13 - the tides for this one so self dot all
519:16 - is going to be a list of all my
519:20 - superheroes right now it is blank but we
519:23 - can easily get it from this method so I
519:26 - can say
519:27 - this is just myself dot get all
519:31 - superheroes and that's it so what this
519:34 - method is doing is it already has the
519:36 - data for all of the superheroes
519:39 - on this line it is creating a list
519:42 - and on this line it is returning that
519:45 - list so we have access to all of the
519:47 - superheroes now what happens here is
519:49 - since we have an instance variable
519:52 - called as self.all we don't have to
519:54 - expose this method to everyone and so we
519:58 - can make this method as a private method
520:00 - and you know the way to make it private
520:02 - is by putting an underscore so this
520:05 - syntax has to be updated right over here
520:07 - so this also becomes my underscore now
520:10 - let us go to this one
520:12 - so this has to be my self dot underscore
520:16 - get all superheroes and in fact we don't
520:20 - require this line at all because this
520:23 - time we already have a class and we
520:25 - already have access to all of the
520:27 - superheroes inside our instance variable
520:30 - called as self dot all so what we can do
520:34 - is we can take out this line
520:36 - and here we can simply check for the
520:39 - length of
520:40 - self dot all and this also gets updated
520:44 - to self dot all
520:48 - and everything is looking beautiful
520:51 - let us also create the string method
520:53 - right over here so we can say Define my
520:55 - Str
520:57 - ICT self and it returns a string as well
521:01 - now let's see what we would like to
521:03 - display now since this model represents
521:06 - our data we can simply print out a list
521:09 - of our superheroes
521:11 - so let's do that over here so what we
521:13 - can do is we can simply print out the
521:16 - names of our superheroes inside a list
521:18 - let's see how to do that first let us
521:21 - create a list for all of the names so
521:23 - this can be a list of string and let me
521:26 - assign it to a empty value then let us
521:30 - just populate this list with all of the
521:32 - names of the superhero so I can say for
521:35 - my superhero in my self dot all I simply
521:40 - want to append to my list of names so I
521:43 - can say name dot append and each time I
521:46 - want to append the name of my superhero
521:49 - so I can say my super hero and his name
521:52 - and let's see we have an error missing
521:55 - written statement oh yes we are not
521:58 - returning the list so we can say return
522:01 - my list of name now we have one more
522:05 - error and this error is because the
522:08 - return type is a string but we are
522:10 - returning a list so let's do one thing
522:12 - let's use our formatted string so I can
522:15 - use my formatted string and let me put
522:18 - this inside my curly brackets now
522:20 - everything is looking good let us repeat
522:22 - the same thing for our villains as well
522:24 - so let me copy all of these things from
522:27 - this file go inside my models then to my
522:31 - villains and let me paste over here so
522:34 - this becomes my villain this becomes my
522:38 - villain
522:40 - this also becomes my villain
522:43 - Everything Changes this also becomes my
522:47 - villain again
522:49 - here we have a
522:52 - villain
522:54 - let's change
522:56 - this one as well and this also needs to
522:59 - change so this will be villains we don't
523:03 - have this method as of now but let us go
523:05 - to the games file and let us copy
523:09 - everything right from here so let us cut
523:12 - all of these things
523:14 - and go inside our villains model
523:18 - let me
523:20 - paste everything over here and let me
523:22 - take everything inside my class now
523:26 - since this belongs to a class let us add
523:29 - self then this becomes a private method
523:33 - then we need to add self over here this
523:37 - line needs to go this line becomes my
523:41 - self dot all same thing over here this
523:45 - also becomes my self.all and this is
523:49 - just for our super villains everything
523:51 - is looking really good so till now what
523:53 - we have done is we have segregated our
523:56 - code as per it functionality wherever we
523:59 - had only the structure all of those
524:01 - files wet inside my schemas and where I
524:05 - have to interact with my database or my
524:07 - data those files went inside my models
524:10 - now let us go back to our games file so
524:14 - this is my game file right over here
524:17 - let us start deleting all of these
524:19 - things which are not required
524:22 - so let me take it up if you see we would
524:25 - have a bunch of Errors now let's try to
524:27 - work on this file now this file is all
524:30 - about the game and the actual logic so
524:33 - this is the place where we are actually
524:35 - implementing the game so the first thing
524:37 - that I want to do is I want to rename
524:40 - this file now since this file is all
524:42 - about implementation I like to call this
524:45 - file as just impl so which stands for
524:49 - implementation you are free to name this
524:52 - file whatever you want you can call this
524:54 - file as your logic your brain or
524:56 - anything that you want but for me
524:58 - implementation makes much more sense now
525:01 - let's see what we can do inside this
525:03 - file first let me close this folder and
525:07 - this one as well and let me only open
525:10 - this file so this is where we are
525:12 - working right now our implementation is
525:15 - all about a game so the first thing that
525:17 - we require right via is we require a
525:20 - class of game this class will keep a
525:23 - track of everything it will keep a track
525:25 - of which player is playing the game what
525:28 - is the game state is the game in
525:30 - progress or someone has won or someone
525:33 - has lost what is the state who are the
525:35 - superheroes and who are the super
525:38 - villains and this class is also going to
525:41 - control all of the methods that we have
525:43 - defined over here so it's going to
525:45 - control our attack
525:46 - and our win or lose as well so let's
525:49 - create a class so this class is like the
525:52 - implementation of the entire game let us
525:55 - create a class called as game let us
525:59 - Define the init method it takes a self
526:02 - now this init method only requires a
526:05 - player we will just take one player and
526:08 - we will initialize a blank game in
526:10 - return so let's accept one player the
526:13 - type is a player now remember inside our
526:16 - schemas we already have a player which
526:19 - is right over here so let's go and
526:21 - import the player from our schema and we
526:24 - need to do one more change so this is
526:26 - not a single schema this is key Mars so
526:29 - let us add an s yes we want to make some
526:33 - changes now since we have changed the
526:35 - name of the package let us go to our
526:38 - models
526:39 - so by default Visual Studio code is
526:42 - going to do this for you but if it is
526:44 - not happening inside your IDE then make
526:46 - sure this is schemas and for villains
526:49 - this also needs to be schemas so let me
526:52 - go back to my implementation of file so
526:54 - here on the top I can say that from my
526:57 - current package so remember right now we
527:00 - are directly inside our package of game
527:02 - so let me collapse my models and schemas
527:05 - so you can see our file of
527:07 - implementation is at the same levels as
527:10 - our models and schemas and game itself
527:13 - is a package so we can see from the
527:16 - current package
527:17 - I want you to go to the package of
527:19 - schemas then go to the model of player
527:22 - and import our player let us go to this
527:27 - line right over here so our init method
527:30 - returns nothing now let's see what kind
527:33 - of instance variables do we require
527:35 - first let me write all of the instance
527:37 - variables and after that we can populate
527:41 - them the first one would be for the
527:43 - player and we already have the data
527:46 - that's right over here cell dot player
527:48 - next I want to keep a track of the game
527:51 - state so I can say self dot state would
527:55 - be my game State we will import that
527:58 - shortly let us create the next variable
528:00 - first we also need to keep a track of
528:03 - all of the superheroes and all of the
528:05 - super villains so let us create an
528:07 - instance variable for all of the
528:10 - superheroes let me get my Spring right
528:13 - this has to be my superheroes and we
528:16 - need one more variable for our villains
528:20 - now let's see how we can populate all of
528:22 - these things for the state we already
528:25 - have a game State defined inside our
528:27 - schemas so we can say
528:30 - from the current package go to schemas
528:33 - go to my
528:35 - game State and import my game State now
528:40 - let's see the first time we don't have
528:42 - any data so we can assign the state to
528:45 - initializing so we can just say my state
528:47 - would be game state DOT initializing
528:51 - now let's see for the next one we can
528:53 - get all of the superheroes from our
528:56 - models so let's go and import our models
528:59 - as well
529:00 - so I can say from my current package
529:04 - go to my models go to my superheroes and
529:08 - import my superhero model let's do the
529:12 - same thing for our villains as well so
529:14 - dot models dot villains import
529:20 - the villain model and here we simply
529:23 - want to initialize it so this becomes my
529:27 - superhero model this becomes my villain
529:31 - model now just remember when we created
529:33 - the model so if you go over here and if
529:37 - you see the superheroes you can see the
529:39 - Constructor does not accept any argument
529:42 - so that's what we are doing over here we
529:44 - are not giving any arguments because it
529:46 - is not required and with this we can
529:49 - easily have access to all of the
529:50 - superheroes and all of the super
529:52 - villains as well let us create the
529:55 - wrapper and the stream methods for this
529:57 - as well so we can say my wrapper method
530:01 - takes a self this returns a string and
530:06 - let it return that this is a class of
530:09 - game next let us create and string
530:13 - method as well this returns a string now
530:17 - let's see what we would like to return
530:19 - maybe we would like to return all of
530:21 - this details on separate lines so let's
530:24 - see how to do that so I can say I want
530:26 - to return a formatted string let me
530:30 - collapse my sidebar for a while now and
530:32 - let me take it up so the first thing
530:34 - that we want to display is obviously in
530:37 - the player and you can say self dot
530:40 - player now we want to display lay the
530:42 - state on a next line we can use a small
530:45 - trick over here we can say backslash and
530:48 - N so this is going to create a new line
530:50 - for us automatically and on the next
530:53 - line I would like to display my state so
530:55 - I can say the state would be my self Dot
531:00 - let me put a comma here as well so on
531:04 - the next line I would like to display my
531:06 - superheroes oh I need a code right over
531:09 - here so I can say my
531:12 - superheroes would be my self dot
531:16 - superheroes let me get my spelling right
531:19 - let me put my comma and we require one
531:23 - more line now since this is getting a
531:25 - little long let me split this so let me
531:28 - put a brackets and let me take it down
531:32 - and let me add one more formatted string
531:35 - right over here and this would be for
531:37 - our villains so we can just say that
531:40 - self dot above valence let us go below
531:44 - and let us take all of these things
531:46 - inside our class of games let me copy
531:50 - all of these things the method of attack
531:52 - the method of
531:54 - similar attack and we also need this
531:56 - method of win or lose till this point I
531:59 - want everything inside my class let me
532:02 - take it inside let me save the file
532:05 - and now we don't need all of these
532:08 - things because right now we are just
532:10 - creating a package and we will see how
532:13 - to use this package in the future so let
532:16 - me take it out and you can see we have a
532:18 - bunch of Errors so let's try and work
532:21 - with our file
532:24 - so let's work with this one so this is
532:27 - the place where the attack is taking
532:29 - place so I can just say in this block is
532:31 - for the attack now since this belongs to
532:34 - the class of game we can write self
532:38 - same thing will happen with our simulate
532:41 - attack as well so I can just write self
532:43 - right over here so let me save this
532:45 - again this one this also has to take
532:49 - myself looks good now let us go back
532:52 - now let's see how the attack is going to
532:55 - take place now let's fine tune our
532:57 - attack Logic Let me put some
532:59 - documentation so whenever we start an
533:02 - attack we can change our state from
533:04 - initializing to in progress inside this
533:07 - we can say self dot state so when we
533:10 - start an attack it changes to my game
533:14 - State DOT in progress then let's print
533:18 - out a nice line saying that start in
533:20 - attack and if you want to check the
533:22 - state we can simply print out the state
533:25 - as well so you can just say my self dot
533:28 - state so let us go down now let us have
533:31 - a look at this line at this line we are
533:34 - trying to get a single superhero but now
533:37 - we have this method inside our model so
533:40 - let me open up the file inside models if
533:43 - you go to our superhero
533:45 - now we have created a class called as
533:48 - superhero model and inside this class we
533:51 - have a method called as get super hero
533:54 - so let us try to reference this method
533:56 - right inside our implementation file so
534:00 - what we can write here is we can simply
534:02 - say that we want to go to the self dot
534:05 - our superheroes so remember this
534:08 - superhero is actually the superhero
534:10 - model
534:11 - let me show you one more time so you can
534:13 - see this superheroes is actually the
534:16 - superhero models so we can access this
534:19 - method right over here get superhero and
534:21 - that's the way we can get our superhero
534:23 - let's do the same thing for the villain
534:25 - so I can say my self dot villains dot
534:29 - get villain let me collapse my sidebar
534:32 - now let's go to this line land number
534:34 - 43.
534:35 - so since this method belongs to the
534:39 - class it has to be self dot now what
534:42 - this method is doing it is actually
534:45 - doing the attack so we can have a little
534:47 - better naming convention so we can just
534:49 - change the name from simulate to do the
534:53 - attack let me change right over here
534:55 - also and we can do one more thing we can
534:58 - mark this method as private because this
535:01 - is all about our internal logic no one
535:04 - has to know how we are doing the attack
535:06 - it's up to us how do we implement the
535:08 - logic this also needs to be my double
535:10 - underscore you can write a single
535:12 - underscore it's up to you so this simply
535:15 - means that this method is just private
535:18 - to this class now we have a bunch of
535:20 - other errors for superhero villain and
535:23 - life as well so let's import all of this
535:25 - and all of the errors will go away let
535:27 - us go to the top and here we can say
535:30 - from my schemas from my superhero let us
535:35 - import my superhero schema the same
535:39 - thing we can do for the villain as well
535:41 - so from dot schemas dot our villain let
535:45 - us import the villain schema and we can
535:48 - do the same thing from dot schemas dot
535:52 - my life let me import my life and let's
535:55 - see what's happening next
535:59 - so you can see lot of the errors have
536:01 - gone
536:01 - now this is a pretty easy error to fix
536:04 - we just have to import final and that's
536:06 - it but let's not do it right over here
536:08 - let us create a new file called as
536:10 - constants now let me explain why do we
536:13 - require a new file called less constants
536:15 - there may be times where we can have
536:18 - multiple constraints for our game for
536:20 - example let us go right over here in
536:23 - this method of attack you can see that
536:26 - we have hardwired the value right over
536:28 - here three so we have three over here
536:31 - because we have
536:32 - four superheroes and we have two over
536:34 - here because we have three super
536:36 - villains so we can think that all of
536:38 - these are simply constraints for our
536:40 - game but we can make our game much more
536:43 - modular what happens if you want to
536:45 - attack four times five times or what
536:48 - happens if we have multiple superheroes
536:50 - or multiple super villains we need to
536:52 - have a very easy method of doing all of
536:55 - these things so for this convenience let
536:57 - us create a new file inside our game
537:00 - inside my package of game I want to
537:03 - create a new file called as constants
537:06 - let me add some documentation you can
537:09 - imagine this file to be just a helper
537:11 - module and that's what this is doing the
537:14 - first one was for the number of attacks
537:16 - so we can just say the number of attacks
537:18 - and we can assign a value of 3 over here
537:21 - now let us go back to our implementation
537:23 - file and instead of hard wiring 3 over
537:27 - here let us import that and let us use
537:29 - that constant over there so we can say
537:33 - from current package go to the model of
537:36 - constants and import my number of
537:39 - attacks so let us go down and let us use
537:42 - that right over here now we can increase
537:45 - and decrease the number of attacks as
537:47 - desired let's go little down over here
537:51 - let us do the same thing for this one
537:53 - let us take it out so these values are
537:56 - never going to change they are going to
537:57 - be constants no matter what so let me
538:00 - cut it out let me go to my constants let
538:03 - me paste over here let me fix the indent
538:06 - now if you already know that we don't
538:08 - require a final keyword because when we
538:11 - name all of this in uppercase by default
538:13 - my Pi or our IDE is going to treat them
538:16 - as constants so we can take this one out
538:19 - and this one as well and in fact we
538:22 - don't require string as well because our
538:25 - IDE would be able to infer all of those
538:27 - things let us go back to our
538:29 - implementation and let us imported so
538:33 - let me go to the top so from constants I
538:35 - also need to get my winning message and
538:38 - also my loss message let us go down
538:42 - now since we already have access to
538:44 - winning and the losing message we don't
538:46 - have to do anything let me take out this
538:49 - line This is not required now let's see
538:52 - what's happening right over here here we
538:54 - also need to update the state of the
538:56 - game suppose we are winning then we can
538:59 - say self dot the state would be my game
539:03 - state DOT win and in case we have lost
539:07 - then we can say game state DOT lost so
539:12 - now we can keep a track of the state of
539:14 - the game at any given point of time
539:16 - there is one last thing to do in this
539:19 - file
539:19 - and that is right over here
539:22 - so here if you see we are using 3 and 2
539:25 - because we have four superheroes and we
539:27 - have three super villains but what
539:29 - happens if we decide to add a couple of
539:32 - more superheroes or a couple of more
539:34 - super villains so let's try to make this
539:36 - code a little bit more modular as
539:39 - possible so what we want to do right
539:41 - over here is we can simply say I want to
539:44 - have the length of my self dot
539:47 - superheroes dot all minus of one now
539:52 - remember your index is always one less
539:55 - than the length and that's what we are
539:57 - doing right over here let us do the same
539:59 - thing here as well so I can say the
540:02 - length of my self dot my villains dot
540:06 - all and I want to minus of one the last
540:10 - thing to do inside this package
540:12 - is to create a file and let us create a
540:15 - file let us name it as game dot py now
540:19 - this file will have a single line of
540:21 - code so first let me write it and then
540:23 - let me explain what I'm trying to do so
540:25 - I can say from the current package I
540:28 - want you to go into my implementation
540:30 - and I want you to import my game as well
540:34 - as my player and that's it so what we
540:37 - have done is we have created an API
540:40 - which means your application programming
540:43 - interface so whenever some other
540:45 - developers have to interact with their
540:48 - code or if they want to play your game
540:49 - they simply needs access to just this
540:53 - one file game.py they don't have to
540:56 - import any of these things models
540:58 - schemas constants implementation nothing
541:00 - of those things are required all of
541:03 - those things are our internal
541:05 - implementation the clients don't need to
541:08 - know all of the logic they simply have
541:10 - to consume our logic that means this
541:12 - simply have to consume our API so now we
541:16 - are getting logic we have been creating
541:19 - our application in different layers so
541:22 - this was a layer just for our schemas
541:25 - models was just a layer for our database
541:28 - or rather data in our case and this game
541:32 - this file acts as our API now let us
541:35 - create a client file and let us play our
541:38 - game so outside the game let us create
541:41 - our client so let me call it as main dot
541:44 - file so by convention main is always
541:47 - going to be the most important file or
541:49 - the place where our program starts and
541:52 - as a convention we require a function
541:55 - which is called as main so this is the
541:58 - place where python will start all of our
542:00 - execution so this file can also be
542:03 - thought as your client let me put up a
542:06 - documentation so this file or rather
542:08 - this model is just as a client it is
542:11 - going to consume our API game and that's
542:14 - it let us import our API so we can say
542:18 - from my package of game I want you to go
542:21 - to the model of game and from here I
542:24 - simply want you to import my class of
542:27 - game and player now this looks a little
542:30 - odd game dot game but what we can do we
542:33 - can improve our design with a small
542:35 - trick so let us go back to our package
542:38 - of game and let us go back to the model
542:41 - of game let me copy this single line and
542:44 - let me put it inside the init file so
542:47 - this init file is for the game so I can
542:50 - just put my edit file right over here
542:52 - now I don't require this module let me
542:55 - take it out
542:57 - yes move to trash let me add some
543:00 - documentation over here so since we have
543:02 - this inside our init file we can simply
543:05 - write
543:06 - from game
543:08 - import game and player it becomes so
543:11 - simple now let us go back to our API
543:14 - file which is this one now the beauty of
543:17 - creating apis is with time your game is
543:20 - going to evolve and sometimes you may
543:22 - have some breaking changes so this was
543:24 - our first version maybe you can have a
543:27 - version 2 or maybe you can have a
543:29 - version 3 but at that time the client
543:32 - does not need to update his code we can
543:34 - refactor all of the code inside
543:37 - but the skip is API file the same
543:40 - so you see we have a lot of advantages
543:43 - of breaking our application into
543:45 - multiple layers now let's get going to
543:48 - the last part and let us create the main
543:50 - method where we can actually play our
543:52 - game unfortunately this is the most
543:55 - easiest part let me collapse my sidebar
543:58 - so this is returning nothing so I can
544:01 - say none let me put some documentation
544:04 - this is the place where our game begins
544:06 - Let Us create the first player so we can
544:09 - say my first player is my player and
544:12 - Lewis the last name is Zappa now let's
544:17 - create a game for Lewis so we can see we
544:21 - want a game for our player number one
544:24 - here let us just check the state of the
544:26 - game and since we are just starting the
544:28 - game our state would be initializing so
544:31 - let us just check if that's the case or
544:34 - not I want to see the state of my game
544:37 - one so game one dot State and the last
544:40 - thing to do is we need to invoke our
544:43 - main method so let me save the file and
544:46 - let me try
544:47 - running it beautiful so as you can see
544:50 - we have the state of initializing and
544:53 - that's what we expected right
544:55 - now let's start with the attack so here
544:57 - we can say I just want to have my game
545:00 - one dot attack but before that let us
545:02 - try to print the game itself so let me
545:05 - say print I want to print my game one
545:08 - let me comment this for a moment run the
545:12 - file and this is how your game looks
545:15 - like the player is Louis Zappa state is
545:18 - initializing this is the list of all our
545:21 - superheroes and these are all our super
545:23 - villains beautiful isn't it let us go
545:26 - back and let us have the attack first so
545:28 - we can say I want to have my attack and
545:31 - after the attack I want to see if I have
545:34 - winning or if I am losing let me save it
545:38 - and let me try to run the file amazing
545:41 - so we have a very beautiful output
545:43 - unfortunately we lost and Thanos killed
545:46 - our Avengers but it is such a beautiful
545:48 - experience let us go back and I want to
545:51 - make one last Small Change what we can
545:54 - do is we we can create something which
545:56 - is called as method chaining that means
545:59 - what if we have a syntax like this game
546:01 - one dot attack and here we can just say
546:04 - dot win or lose so this will look so
546:07 - neat and nice let's see how we can do
546:10 - that and it's very easy to do it let me
546:12 - open up my sidebar now remember all of
546:15 - the implementation happens in a single
546:17 - file so it becomes very easy to find out
546:20 - where do we need to make our changes and
546:22 - all of the changes happens in this file
546:25 - for implementation now since we want to
546:27 - have method chaining we simply have to
546:30 - return the game so that means on our
546:32 - method of attack we simply want to
546:34 - return the game itself so I can say this
546:37 - method is going to return my game let me
546:40 - collapse my sidebar and I also need to
546:42 - return so at the bottom right over here
546:46 - let me go on the next line I simply have
546:49 - to say that I want to return self now in
546:52 - order for this syntax to work we need to
546:54 - import one more thing so let me go to
546:56 - the top
546:57 - the first thing that we want to do is
546:59 - from future I want to import my
547:02 - annotations now we can use this syntax
547:06 - let us do the same thing for our method
547:09 - of win or lose so this returns a game
547:13 - and at the bottom let me just say let me
547:17 - return self beautiful let me close this
547:21 - file and let me go to my main file we
547:24 - can assign the game back to our variable
547:26 - so I can say game one is equal to my
547:28 - game one now let us print the state one
547:31 - more time right over here so what's
547:34 - happening is we are starting with an
547:36 - attack and then we are checking if you
547:38 - are winning or losing initially the
547:40 - state would be initializing and after
547:42 - the game it could either be win or it
547:45 - could either be lost let me take this
547:47 - little up so the first thing that we
547:49 - want to do is we want to print the game
547:52 - then the status then we play the actual
547:55 - game
547:56 - and let us have the state back again so
547:59 - let me save this and let me play this
548:02 - game so here it is
548:05 - so this is our game right here the
548:07 - player is Lewis state is initializing
548:10 - superheroes super villains beautiful
548:12 - then we are starting the attack after we
548:15 - start the attack the state changes to in
548:18 - progress this is how the attack is
548:20 - taking place but unfortunately Thanos
548:23 - has killed Avengers so our final status
548:25 - is game State lost so let us play one
548:28 - more time let us see if you are winning
548:30 - or not
548:31 - no lost no lost again lost lost oh this
548:37 - time we are winning it's so amazing so
548:40 - here you can see that when we won the
548:43 - game our state is game State win it's so
548:47 - damn amazing
548:49 - let us create one more player and let us
548:52 - play the game for the last time
548:54 - so let me go right over here and let me
548:56 - create one more player this player would
548:59 - be Chico Neutron and let us go down over
549:05 - here now just for the sake of nice print
549:08 - route let us print a blank line before
549:11 - the next game so here we can see my game
549:14 - number two would be my game and this
549:17 - time we can say my player is going to be
549:20 - my player number two and we can start
549:23 - playing the game here itself so we can
549:25 - say dot attack and after the attack I
549:28 - simply want to check if I am winning or
549:31 - if I'm losing this method chaining makes
549:34 - our game so easy to use so let me save
549:38 - the file and let me play the game for
549:40 - the last time oh I think both of us lost
549:43 - Kiko also lost the game and uh Lewis
549:47 - also lost the game let us play the game
549:49 - one more time no
549:52 - oh yes at least this time Lewis has won
549:56 - the game before we say we are done let
549:59 - us have a look at last time now there is
550:01 - no more coding left I just want to show
550:04 - this file and this file is called as
550:06 - thinking in layers so let me collapse my
550:10 - terminal my sidebar and let me put this
550:12 - in my preview mode so this is the last
550:15 - thing that I wanted to show you let us
550:17 - try to conceptualize what we have
550:19 - learned so far in this video by making
550:21 - this game so what we did was we divided
550:24 - our application into multiple layers now
550:27 - let's see what we exactly did you can
550:29 - imagine the first layer was our data
550:31 - layer and the packages were responsible
550:34 - for our data layer live inside the
550:36 - folder or rather the packages of models
550:39 - and schemas the visibility is private
550:42 - and the role is internal so what happens
550:45 - is whenever we want to interact with the
550:47 - database whenever we want to create a
550:50 - structure all of that code will go only
550:53 - in this packages the advantage is when
550:56 - we have multiple people working on the
550:58 - same project all of us can know where to
551:01 - find the data the next layer can be
551:03 - thought as our business logic layer and
551:06 - this layer is represented by our
551:08 - implementation and we have all of our
551:11 - implementation inside this file I
551:13 - ampl.pi again the visibility is private
551:17 - and the role is internal that means we
551:20 - as the developer of this game or of this
551:23 - Library only we can handle this file the
551:26 - next layer can be called as an API the
551:29 - package of game can be thought as our
551:31 - API remember we added a couple of files
551:34 - to our init method and our client can
551:37 - simply import all of those things from
551:39 - our package so essentially what is
551:41 - happening is our API is acting like an
551:45 - interface between our internal logic and
551:48 - our consumer so the visibility of our
551:51 - API becomes public and our main dot Pi
551:54 - file can be thought as a client because
551:56 - the client simply consumes our API and I
552:00 - hope this gives you a much better
552:02 - understanding of why we divided our code
552:05 - so much and why we created so many
552:07 - packages
552:08 - now that was such an amazing amazing
552:11 - effort and I would like you to
552:13 - congratulate yourself
552:15 - this was a pretty tough and a very
552:17 - intense course for beginner and you
552:20 - definitely deserve much needed
552:22 - appreciation you have done an amazing
552:25 - job
552:26 - wow that was one really awesome journey
552:29 - and I am so happy to see you at the end
552:32 - of this course
552:33 - now remember that the course is just
552:36 - ending but your journey is just starting
552:39 - and you have to do a lot before you can
552:42 - really understand python the first thing
552:44 - that you need to do is you need to solve
552:47 - a lot of problems
552:49 - and I also have a couple of topics that
552:52 - you can see if you want to progress in
552:54 - Python
552:55 - so
552:57 - and here they are so this is what you
553:00 - should be learning next have a look at
553:03 - how to handle files and folders
553:05 - iterators and generators form a very
553:08 - important part of python especially when
553:10 - you are working with classes and you
553:12 - want to create it labels
553:14 - so make sure you have a look at them
553:16 - then list comprehensions are also very
553:19 - useful
553:20 - the next point about data serialization
553:23 - and deserialization
553:25 - now this is very important when you are
553:27 - working with web applications where you
553:29 - have to convert your Json data or if
553:32 - you're working with some other data
553:33 - types such as if you want to convert
553:35 - your CSV file or Excel files to pandas
553:39 - data frame and so on the next is
553:41 - decorators we already had a small look
553:44 - about decorators but decorators is a
553:47 - pretty big topic the next is about your
553:50 - object oriented programming in which I
553:52 - would like you to have a look at
553:54 - abstract base classes and also oops in
553:58 - this tutorial we saw how we can inherit
554:00 - from a single class but in practice you
554:03 - can inherit from multiple classes you
554:06 - can also create classes that act as an
554:09 - interface so there is a lot more to
554:11 - learn about oops as well the next point
554:13 - is about multi-threading and
554:15 - multi-processing and the next one would
554:18 - be your concurrency and async IO now
554:21 - python has been a little notorious when
554:23 - it comes to concurrency but lately there
554:26 - have been a lot of development
554:27 - especially with the async iOS and tax
554:30 - so if you want to make concurrent
554:32 - applications in Python I would suggest
554:34 - you to learn a little bit more about
554:36 - concurrency the next one is testing now
554:40 - without testing none of your
554:41 - applications are going to be complete
554:43 - python ships with a testing framework
554:46 - which is called as unit testing and
554:49 - there are a couple of other testing
554:50 - Frameworks such as Pi test the next
554:53 - would be web Frameworks if you want to
554:56 - create web applications or if you want
554:58 - to create apis then I would suggest you
555:00 - to have a look at Django flask and fast
555:03 - API and last if you are interested you
555:06 - can always try learning machine learning
555:08 - and deep learning so this itself is a
555:10 - very huge Topic in Python and again I
555:13 - can't stress enough that you have to
555:15 - solve more problems and finally before I
555:19 - say goodbye I would really love to hear
555:21 - from you you can visit my website or you
555:24 - can tag me on Twitter or obviously you
555:26 - can check me out on YouTube as well
555:28 - see you and let the power of python be
555:31 - with you

Cleaned transcript:

you're probably wondering why we need another python course on this channel well Anil has an interesting approach to teaching python this beginner's course will help you learn python by thinking and types this course teaches basic programming Concepts instead of just focusing on language syntax it's always helpful to learn from different perspectives and this may be just what you need to Learn Python hi guys my name is Anil kulkani and welcome to this course modern python where no one thinking and types now if you wanted to Learn Python if you are complete beginner or if you have been struggling to Learn Python for a time then this course is for you let me share my journey of learning python it took me a pretty long time to understand python rather many months or rather a couple of years to understand Python and finally when I started to learn more about python I could understand that I I was struggling to Learn Python because I was not able to think in types you know python is a dynamic type language so sometimes you are at lost to understand what goes well and where we have to use a particular variable or a data type or a data structure so this course is obviously designed for the people who are totally new to python or if you have or if you are struggling to Learn Python for a while now throughout this course I'll be taking you through a smaller Journey we will start by thinking at types and we will end in thinking in layers so thinking is in layers is like an architectural pattern I will I'll help you to understand what goes behind creating a production level application before we can go ahead and write python we need to do a couple of things the first thing is obviously we need to install Python and we also need to set up our development environment but before that I would like you to meet my friend Lewis now Lewis is going to help us throughout this course for learning python before you can do anything else I want you to go ahead and download all of the source code for this entire tutorial what I want you to do is just go to this link github.com octilium slash modern python101 and this is where you can find the entire source code for this entire tutorial you can just click on code and just click on download zip to download all of the files in a zip format or if you are using GitHub you can simply use this link to to clone the repo after you have downloaded all of the files this is how it's going to look so let me open up my readme and just let me open up in my preview mode okay so this is how all of the files and the folders would look like now please keep in mind that on my machine I could have a couple of more additional folders just for the sake of helping me throughout the tutorial but overall this is how it's going to look in your machine as well at any point in the future if you want to compare your code with mine you can simply click on this folders for example if we just click on this folder type system you can see there are a couple of files which I have already written for example just click on this file variables and you can see all of the code is right over here if you want to see the sequence in which we are going to learn all of these files then you can simply click on readme and here you can find the sequence for example in this one the first file would be your variables the second one would be variable rules which is right over here and so on well that's it for this video in the next video we are going to download and install python on your machine before installing python I thought it would be a very nice idea to give you a small tour of python for this I want you to open up your favorite web browser and I want you to search for python online compiler and I want you to click on this link this is for repair id.com and as you can see we have a working python environment ready for us so right on this line I want to print out modern python 101 so just replace hello world with modern python 101 and just click on the Run so as you can see we have the output of modern python 101 let's try one more simple example and this time I want to print out my name and my name is octallium on this line instead of printing modern python I want to print out my name that's it just hit the Run button one more time and you can see we have the output of octallium as you can see right in Python is as simple as writing your plain English and from the next video we will see how to install Python and how to set up our development environment you can just go to the website python.org from here let me just zoom in first okay from here just go to downloads and as you can see since I'm using Mac OS so that's why it's showing as Mac if you're working on Windows most probably it will show you on Windows and at the time of recording the latest version is 3.10.5 so I just want you to click on this and it will start the download you just have to install python just as you would install any other program just click on this it will open up a installer dialog so just click on continue continue okay agreement I agree and install now since I already have python installed I won't be installing but in your case if you don't have python installed just go ahead and click install after the installation is done I want you to open up your terminal if you are working on Windows just make sure you open up your Powershell and let me just try to zoom inside this as well so once you have your terminal open I want you to type python hyphen and capital V so as you can see it's showing the python installed version in my case it is 3.10.5 just make sure you have a version which is more than 3.10 3.9 will not work because I will be showing you a couple of new features which I have been introduced in the version 3.10 and if you are watching this video in the future you don't have to worry because all of the functionality that I'm going to show in this tutorial all of those things are going to work in the future as well the next thing that I want you to do is install Visual Studio code so I want you to go to this website code dot Visual studio.com and I want you to download video Studio code and install it so just click on this since I'm using a Mac it's showing Mac if you are using Windows make sure you click on the right button so just click on this it will again download the installer and you just have to install Visual Studio code as you would install any other program after installing Visual Studio code I want you to open it up so this is my visual studio code on the left you can see there is a small bar and I want you to click on extensions let me take it up right over here and I want you to search for python the first thing that pops out right over here this is the python extension by Microsoft I want you to click on install now I do have a couple of more extra dependencies these are optional but I would highly recommend you to install all of those so just open up a terminal if you're working on windows open up your Powershell and there is a command which is called this pip now pip actually ships with python I want you to type pip install IPython my pi and black and just hit enter so this are a couple of extra dependencies that I would like you to install now since I have already installed it's showing me as already satisfied but in your case it will go ahead and install all of the dependencies and that's it now we can start writing python code on our machine if we have some doubts then you can open up this readme file so this is the code that we downloaded from GitHub so inside my folder number one introduction just click on readme and you can see I have provided the links for everything there are a couple of more optional dependencies for example this one code Runner this one we would see in some of the future videos and if you want to have the exact same theme like mine so you can use this theme I'm using a theme which is called as Pitch Black theme and now if you are working on a Mac and if you have issues while typing this command so suppose you are you are typing python slash V and if you are not getting this output then just make sure to watch the next video where we would see how to rectify it sometimes on a Mac you may not get the desired output suppose you are typing python slash NV if you are not getting this output then maybe you can try typing Python 3 hyphen and V now this is because Mac already comes with a preinstalled python but most of the times it is not going to be the latest version you can use this syntax python 33 all the time and if you want to use pip then also you need to type pip 3 and then you can say pip3 I want to install my IPython mypai and black this is also going to work but typing Python 3 and pip3 all the while becomes slightly boring so what I'm going to do is I am going to set up an alias for setting up an alias first thing that I want you to do is I want you to go to your home directory you can go to your home directory by typing CD and that's it let me clear up my terminal by typing control and L now if you type LS Dash A L that means I want to list all of my files and folders inside my current directory and I also want to see some of my hidden files as well so as you can see it's a pretty long list but the file that I am interested is this one it's called as dot zshrc that's the file where we will set up an alias I want you to go ahead and open up that file inside your code editor you can open up the same file inside virtual Studio code by typing code followed by the name of the file don't forget to put the dot before and now just press enter if you are not able to open up this file from your terminal then inside your Visual Studio code I want you to type shift command and P and it will open up a new window and I simply want you to type code and you can see the popup shell command install code command in the path I want to click that and after clicking that you can simply close and open up your terminal once again and let me just Zoom inside and now we can see I want to open up my DOT zshrc file inside my code editor just hit enter for now just ignore all of the stuff which I have inside my zshrc that's because I'm using a lot of fancy setup the thing that I want you to add inside your zshrc are just these two lines so what we are doing is we are just setting up an alias that means whenever we are typing python inside our terminal at that time we actually need to type Python 3 and the same thing goes with Pip whenever we are typing pip I want my system to invoke pip 3 instead so this is what our Alias is going to do just save your zsh RC filing again go back to a terminal I again want you to close and open up your terminal one more time again let me Zoom inside it and now this time if you're typing python hyphen and V it should give you the right output now that we have python installed on our system it's time to write our very first hello world program but before we can write our hello world program I would like you to create our very own directory structure so that we can organize all of the code in a much better way so for that I would like you to open up your your finder or if you're on a Windows just open up any window and navigate to to the place where you want to create the folder so I am just going inside my home directory and here I'm going to create a folder by the name of modern python 101 you can create this folder wherever you want after this I am just going to open up my visual studio code and I'm going to drag this folder inside my visual studio code okay so here we are here I am going to create one more folder and I'm going to name it as 0 1 introduction let me spell it right and inside this folder let's create our very first Python program so let's create a file inside of this and I want you to name the file as hello world dot py always make sure that we have the extension as dot p y so dot py stands for a python file and right now what we are going to do is we are simply going to print hello world to our terminal a couple of lectures ago we have seen how to do it online by using a python online compiler but in this video let's try to do it on our local machine let me just collapse my sidebar the first thing that I want you to write here is an inbuilt function by the name of print so basically what we are trying to do is we want to tell python hey python I want you to print hello world and that's it now I want you to open up your terminal and inside this terminal let us see how we can execute this file I'm inside my directory of modern python 101 from here I want to go to my newly created folder 0 1 introduction and once inside this folder I can simply run my file by typing python followed by the name of the file and just press enter and here you can see we have the right output of hello world if you want to change this from Hello World to hello octallium let's do it let us save the file again go back to the terminal let me clear up my terminal let us try running the file by typing python followed by the file name one more time and we have the desired output of hello octallium now typing Python and hello world.py all the time becomes a little boring in order to automate this task we are going to install one more extension and this time the name of the extension is called as code Runner so I want you to go to your extensions Tab and I wanted to search for code Runner this is the plugin make sure you install this plugin once we have this plugin in place we can simply run the file I'll just show you how to do it let me close my terminal let me close all of this so once we have the plugin installed you can simply click on this play icon right over here and that's going to execute your file so as you can see the code on extension actually exuded my file and I have the output of hello world on the screen so this video was just to give you a small feel of writing python on our local machine from the next videos python is going to get much more interesting and we will start to learn all of the basic fundamentals of python now let's actually start learning Python and the first concept that we are going to learn in Python is all about Understanding Variables but before we can understand variables we need to go on a picnic with Lewis yes let's go on a picnic and then let's see what variables is all about so Lewis is planning for a picnic and he is going to pack a slice of pizza in his Tupperware you don't want to go hungry on a picnic do you Lewis also wants to pack some of his clothes inside a bag and also a bottle of water now let's try to visualize this concept A Little More technically so you can imagine your Tupperware bag and bottles to be your containers and what this containers are going to hold is this slice of pizza clothes and water so you can imagine all of these things to be values so the containers are going to hold all of the values now let's try to see all of these things in the world of python so here we have three containers Tupperware bag and bottle and we have three values slice of pizza cloves and water so essentially what's happening is your containers are just like your variables because your variables are going to hold some data you can translate this concept in Python by typing like this on the left you can see Tupperware is a variable and the variable of Tupperware is holding a value of slice of pizzas this equal to is also called as the assignment operator that means we are assigning the value on the right to the variable on the left and the same thing goes with bag and bottle as well now it's time for us to create some more variables so I'm inside my folder number two type system so this is the code that we downloaded from GitHub and this is the folder that we created remember we've created a folder called as modern python 101 so this is where I am here I am going to create one more folder and I'm going to name it as 0 to type system and inside of this I want you to create one more file by the name of variables dot pi and this is where we are going to create some of our variables here is the scenario Lewis wants to go for a party and he has three items with him he has balloons he has some crackers and he has some hats but he has only a single box so let's see what he is going to do let's create a variable called as box here we are going to create our variable called as box and let us assign the value of balloons to the variable of box please remember to put this inverted commas because this is the value that has been assigned to our variable of box on the next line we simply want to print out our variable so as you already know we can simply say hey python I want you to print out my variable and the name of my variable is box that's it just save a file and let's try to run the file now there are two ways of running the file if we have code Runner installed you can simply click on this and this is going to run your file and here you can see we have the output of balloons or you can also run the file from a terminal in order to run the file from the terminal first we need to go inside in the right folder as you can see right now I am inside the folder modern python 101 and I need to navigate inside my folder which is 0 2 type system once inside this folder you can run the file by typing python followed by the name of the file in my case the name of the file is simply variables dot pi and hit enter so as you can see we have the output of balloons let me put up a small Command right here all of these lines that you can see over here which starts with a hash sign this actually means a comment and these lines are actually going to be ignored by python while executing your file now the suppose Lewis wants to take crackers instead of balloons so let's see how we can reassign the value to our variable let me put up a command and here we can simply reassign by saying that for the variable of box I want to reassign the value to a new one and the new value is going to be called as crackers let me get the spelling right and we can again try to print it out so let's try to print out the box one more time let me run the file and here we have the output so you can see the first output is balloon and this output is coming from from right over here from line number seven and on the next line I have the output of crackers this output is coming from this line line number 11. at line number 11 the variable of box no longer holds the value of balloons because we have reassigned the value on our line number 10. the new value that the variable of box holds right now is just crackers now for the last time if Lewis wants to change his mind and this time he wants to take hats so let's see how we can reassign the value for the last time let me put up some comments before we can do that so for the last time we are going to reassign the value of box and this time the new value is going to be hats and as usual we simply want to print out the value inside our variable so we can say hey python I want you to print my variable of box that's it just save your file and try to run it for the last time so as you can see we have the output of hats and sorry we can see the output of hats now this output is coming from our line number 15. the current value that our variable of box is holding is hats the previous values of crackers and balloons all of these values are now replaced and the only existing value Inside the Box variable is hats till now we have seen how to work and create variables now let's have a look at what's happening behind the scenes so this were the variables that we created last time we created just one variable called as box but we assign the value of balloons crackers and hats to the same variable now let's see what's happening behind the scene and how python is treating all of these variables just imagine this is the memory of your PC and let's see now how python is going to handle your variables in Practical terms how python handles the memory would be very different in a practical scenario but right now just have a look at this I have simplified things so that it's much more easy for us to understand so just imagine all of the green area is the memory of your PC now let's see what's happening python would read all of your source code and as soon as it comes across this line box is equal to balloons what python is going to do is python is going to create a variable called as box inside the memory and python would look at the right hand side and it's going to find balloons so it's going to assign the value of balloons to the box and all of these things are happening inside the memory so on the next line when you are trying to print out box you get the output as balloons but what happens when python goes to the next line that is this one where you are reassigning the value of box to crackers at that time the value of balloons is actually taken out and a new value of crackers is been assigned to the Box so after your line number six this is how your box is actually going to look like so box is going to hold just the value of crackers that's why online number seven when we are trying to print out the value of box we get the value of crackers now the same thing is going to continue on the next line as well when python comes across this line box is equal to hats it's going to remove the value of crackers inside the memory and it's going to assign a new value of hats and box would be equal to hats inside the memory and that's the output that we are getting from line number 10. till now we have a much better understanding of variables and this time we are going to see what you don't have to do while creating a variable you can't just arbitrarily name your variable there are certain rules for declaring your variables and that is what I am going to talk in this video this is the code from GitHub and I wanted to click on this file variable tools I don't want you to waste your time just watching my type so I'm just going to copy this file from my GitHub folder to my modern python 101 folder and let me just paste it right inside my zero two type system so here is the file and now let me try to explain what's happening the first thing that we are going to talk is something about declaration Styles there are different styles in which you can declare a variable the first style that you can see over here this is called as camel case the first alphabet would be in small case and the next words would start with the alphabet so this is called as camel case the next is your Pascal case in Pascal case as you can see all of the words they would start with the capital alphabet the next one as you can see right over here on line number 11 this is called as snake case online number 12 this is also a variable but this is used to declare a constant I'll be talking about constants in the future this is also a valid variable and normally you would use the syntax with an underscore whenever you want to declare a private variable I will be explaining what is a private variable as well in the future this is also a valid variable where you can have a number at the back and you can mix your numbers with your snake case or your camel case or Pascal case or any other case that you want so till now what I've done is I have declared a couple of variables and let's try to print them out and see how they look on our terminal let me just run the file and oh let me first try and clear my terminal now let me go back to the file and let me run it once again so here we can see we can use different variable styles to get our output now let's have a look at the different rules for not declaring a variable as you can see online number 29 you cannot declare a variable which starts with the number if I just uncomment this file it's going to show me an error similarly on line number 30 let me just comment this back so similarly on 30 if we have a hyphen it's not going to work if we have some special characters like a comma it's not going to work if you use a dollar sign at the front it's also not going to work and if your variables has a space in between so that 2 is not going to work so whenever you are creating or declaring variables always keep these things in mind when it comes to your style you just have to be consistent in whatever style that you are choosing as a normal convention whenever we want to declare any variables or the name of the functions we would use snake case but that's just the convention it's not required and whenever you want to declare the name of a class at that time we would be using the Pascal case and whenever we want to declare a constant at that time we would use everything in uppercase now we have been making very good progress with our variables we have seen how to assign values to our variables but we have seen how to assign only a single type of value to our variables you can see over here balloons crackers and hats all of this data types are called as strings so whenever you are working with your Python Programming you always have to work with some sort of a data and this data can be classified into different categories the first category that we are going to see is something called as a primitive data type so what do I mean by a primitive data type it simply means that these data types are already present inside python the first data type we have already worked with it's called as a string and you can see it's always inside a code for declaring a string you can use double quotes or you can use a single code both of them are valid syntax the next one is called as an integer so you can see we have whole numbers so 45 is a kind of integer the next one would be a float whenever you have some decimal places it's called as a float inside python and the last one is called as a Boolean Boolean can have only two types either it can be true or it can be a false now let's go back to our code editor and create some of this basic primitive data types so let's create a new file inside my folder 0 to type system I am going to create a new file and I'm going to name it as primitive data types Dot p y let me add some comments as well now let's start creating our variables first let us create a variable for holding our string and I'm going to call it as my string that's it so my string is my variable and it's going to hold the value of Lewis let me spell it right the next variable would be my integer my end for short it's going to be 45 next one would be my float it would be 3.14 the next one would be my bull it stands for my Boolean data and this time I am going to assign it the value of true make sure you always use the T with the capital T and that's it we have declared our variables and we have assigned the variables with the primitive data types now let's try to print one by one so I want to say first I want to print my my string let me just copy and paste it now the next thing that I want to print would be my integer next let me print out my float and the last I want to print out my Boolean value just save the file and let me run the file inside my terminal and here we have the output Lewis 45 3.14 and true the last thing that I want to discuss in this video is about your styling for example you can see right here single quotes is also a valid string and if you use double quotes it's also a valid string so which style should you use basically you can use any style but you have to make sure that you are consistent throughout your code base in order to avoid such situations when you're working in a large team the python Community has come up with some of the style formatters and one of the style format is called as black so if you remember at the beginning we have installed a couple of optional dependencies and one of the dependency was called as black if you have not installed then you can simply open up a terminal let me clear all of this and you can install the dependency by simply typing pip install and black and this will install the optional dependency black is a code formatter and we are going to use black to format our code so that it is consistent throughout the first thing that I want you to do is I want you to open up the settings for visual studio code on a Mac you can do that by typing command and a comma I think on our Windows it should be controlled and a comma so this is my settings file and I want you to type save and the first option that I can see over here is called as format on Save I want you to select this now again go back search for black so here you can see the first option python formatting black path make sure you have black right over here and that's it just close your settings file and let me save this file it's saying that format autopape is not installed install no I don't want to use that one I want to use black so I'm just going to click on this one use black and that's it now if I come back to this and if I put a single quotes now just watch what happens when I save my file it automatically formats from a single code to a double quote black is a really useful utility and we would be using black so that all of our styling is similar since we know a little bit more about strings let's try and see how we can output the string in our desired format this is also called as string formatting let me create a new file inside my folder and I'm going to name the file as string formatting dot pi let me put up a comment at the top what I want to show in this video is how we can have a desired string output don't worry if the concept sounds a little strange it will get cleared in just a couple of seconds suppose I want to print a statement saying that hello and followed by a variable and that variable can hold a name for example you can say hello Lewis or you can say hello Chico or some of the name so let me first create a variable called as name and let me assign it a value of Lewis now let's see how to format this string and get an output as hello Lewis let me collapse my sidebar and here I can say print and I can put my codes but before my quotes I need to add one more alphabet called as F that means I want to have a formatted string and here I can say hello and I want to print the name over here so I am going to use curly brackets and inside the curly brackets I can place my variable so I can say name let's save the file and try to run it and here we have we have the output as hello Lewis there is one more format of doing this we can simply say print and then we can say hello you can put a comma followed by the variable that you want to print so I can say name just save a file and let me run it one more time so as you can see we have the same output but normally you will see me using a formatted string so let me just take out the second example I'm not going to use this kind of syntax now let's see how we can output a string saying that Lewis is Dash and dash years old and dash and dash has to be filled by an variable so I can create a variable called as age and I can say age is 13 and here I want to print Lewis is 13 years old so I can use a print statement again I am going to use a formatted string so F and quotes then inside my curly brackets the first variable that I want to print is the name so name goes over here so Lewis is then I want to place the age right over here is 13 years old that's it just save your file and try to run it one more time and we have the output Lewis is 13 years old let's do a couple of more practice over here suppose Lewis has a dog and then let me spell it right and the name of the dog is Chico and this time we want to print out Lewis has a dog named Chico so you can say print again your formatted string your curly brackets your placeholder for your name so Lewis has a dog named and the dog variable goes right over here and that's it let us try to run the file and we have the output Lewis has a dog named Chico let's do it for the last time suppose Lewis also has a cat and the name of the cat is Coco so let me copy and paste this line and I can say Lewis has a cat name and the variable of cat would go right over here let me save the file and let me run it for the last time and here we have the output Lewis has a cat named Coco we are making really good progress but this time I want to make a program that would have a bug inside it so let me create a file inside my folder and I'm going to name the file as my first bug Dot py bug actually means that we have some sort of an undesired behavior in our program so let me put up some comments okay now let's get started with this one let's create a variable called as box and let's assign the value of balloons to it and let me print out a formatted statement saying that box contains and the variable of box goes right here let me just run this file and we have the output that the box contains balloons now just watch closely what happens I can also say box is equal to 10. now this really doesn't make any sense why would I want to store 10 inside balloons balloons is a string 10 is an integer but if you try to print this we are going to get an output let me copy and paste this line from here just blow this let me save it and let me try to run the program and we have the output box contains 10. and this is because python isn't dynamically typed language and this was the point where I really struggled when I was learning python but you don't have to worry about this you can easily solve this problem by thinking in types in this video I am going to introduce to you a concept which is called as type hinting let me put up a command so what type ending really means is we always want to associate a type with our variables and this will really help us to create robust programs and to take care of all of the bugs before we can actually run the program now let's start thinking in types let's create a variable called as food and let us assign it a value of milk now I want to tell python that food should always contain the value of a string it cannot contain any other value and the way to do it is by using a type hint you can write a type in right over here let me take it a little you can add a type and try to here so after the name of the variable just put a colon then we can see this variable has to be of the type of a string and this you can write Str so Str means food variable is of the type of a string and that's it and let us print out a statement saying that let us do a formatted string we can say Lewis is going to drink inside the curly brackets we can see food and I'll just save it and run your file and we have the output Lewis is going to drink milk we can reassign the variable food from milk to and then we can say Lewis is going to eat let me save the file and let me try to run it and we have the output Lewis is going to eat eggs now this time if I say food is equal to false let me just copy and paste this line so let me just paste it right over here save the file and let me run it for the last time but watch this we still have the output it's saying that Lewis is going to eat false false and doesn't make any sense over here so this is what we call as a bug this is an undesired Behavior we don't want to assign faults to our food the way to take care of this is by using one more plugin which is called as my pi first thing we need to install my Pi I hope you installed my Pi in the beginning where I was discussing about the optional dependencies if not you can just open up your terminal let me clear all of this and you can install my Pi by saying pip install follow followed by my pack and that's it after installing my Pi I want you to open up the settings again you can open up the settings by by pressing command and comma on a Mac it should be Ctrl and comma on Windows and here I want you to type WiFi and I want you to click on this python linking my Pi enabled just click on this one and that's it now you can see the code editor is highlighting false and it's saying that we have some sort of issue over here if you just hover over false it's going to say incompatible types in assignment expression has Type Bool variable has Type string what it means is variable has a type of Str so if you refer the line number 20 we have assigned the type of string to our variable that's what this error is trying to tell us we have declared the variable as string but in the expression we are trying to assign it a value of Boolean that's why it's not going to work or rather it's going to work because python isn't dynamically typed language but at least in your code editor is going to show you that something is wrong so you can see on the top as well it's showing an error right over here as well but if you see the file and if you try to run the file one more time it's going to execute you can see we are executing our Python program so this is the thing with python python is in dynamically typed language and it's not going to enforce the data types on the runtime that is why to prevent such kind of bugs we are going to use my pie and we are going to use type hinting everywhere let's try to do some more practice with our primitive data types so let's create one more program right over here and let me create a file and the name of the file is just practice.py let me put up some comments as usual and let me collapse my sidebar now this as you can see Triple codes these are also a valid comment and normally you would use triple quotes whenever you want to write some kind of a documentation inside the string but the thing about this triple chords is you can also create strings and you can also do a string formatting by using triple quotes we are going to see an example of this right in this video here is the situation Lewis wants to open up a pizza shop and he needs to write a program for accepting orders now this is a very important tip before you always start coding first you always and always need to visualize now let's just try to visualize our pizza shop and let us try to think what all variables we would require the first and the most obvious is we would require a variable for customer that's the place where we would save the customer data the second variable could be a pizza base maybe you would like to have a thin base or a base filled with cheese or whatever you prefer the next variable could be for storing the pizza size maybe it's like a 12 inch pizza or maybe it's like a 14 or 16 inch pizza so we would require a variable for storing the size as well if it is a pizza it also needs to have some kind of a topping so we would need one more variable for topping one more for cheese and one more for the price so this is how we would first visualize the entire program and only after visualizing your program you would start coding I will come to this concept A little later in detail but right now let's get going and let's create some of the variables let us create the first variable called as customer the type of customer is going to be a string so let us try write Str and the name of the customer would be CC let me put CS Capital the next variable would be for my pizza base so I can say my pizza base again the type is going to be string this time I want to have a thin base the next one would be for my Pizza size now I bought my pizza size to be an integer suppose I want to eat a 12 inch pizza so that's what this is going to indicate the next one would be for my topping topping has to be a string and I want to have some toppings of olives the next one let us create a Boolean saying that extra cheese and let us create the typing in so the extra cheese variable is going to be of the type of Bool so the customer can say yes they want false if they don't want in case they want extra cheese then we can say true otherwise it's going to be false the last one is going to be price now since price is going to contain decimal values so we can say price is going to be a float and we can say this is for 8.99 dollars just save it and now let's try to print all of these values in our terminal let me put up one more comment over here now since this program is for accepting pizza orders let's try to write print statements that would make some sense so the first one I can say received order from followed by the name of the customer let me save it the next line we can print some of the pizza details so we can say print again for the formatted string and then we can see the pizza base would be the pizza base then we can say size is going to be Pizza size in inches followed by toppings and I can write toppings over here save this now let us try to print if the customer wants extra cheese or not so we can again say is extra cheese required and let us put the value right over here extra cheese and the last thing we want to print is going to be the price so we can say bill amount is going to be the price so I can put the price right over here let me run the program and here we have the output received order from CC let me take this a little down and and now we can start comparing so you can see we have declared the name of the customer as CC that's what we have right over here the base of the pizza is thin so thin is what we want the size is 12 and the topping is volumes do we require extra cheese yes we require and the total amount is 8.99 dollars let us have a look at one more alternative syntax of using formatted string let me put up a command right here now this time I am going to construct an entire string which will hold all of these values in order to save all of this data let me create a new variable by the name of order details is going to be of the type of string and now this is the interesting part we can create a formatted string outside the print statement as well so I can say F and I can put my comma right over here but I'm going to use triple quotes because I want to create my string which is going to be in multiple lines so if you just compare your output you can see we have multiple lines on the first line we have the statement for received order the next line has the pizza details and so on so I want my string to be multiline that's the reason why I'm using triple quotes right over here now between these triple codes let's start adding our values now this is pretty simple I just have to copy from above let me just paste this inside the same thing for this as well please note that I am not copying the inverted commas because I already have them outside let me put this line this one as well and this as well so what we have essentially done from line number 34 to line number 39 is we have created an attached string and we have saved that string to a variable and the name of the variable is called as order details on the next line we can simply print out the order details so we can say simply print my order details and that's it let's try to run this file and we have the output let me just comment all of this for a moment so that the output is much more clear Let Me Clear My terminal again go back and let me try to run the file so now you can see our formatted string is also working let us have a look at one more very simple alternative we just saw that we can create a multiline string by using triple codes and assign that string to a variable but let us ask the question do we really require a variable maybe not we can simply print out the entire statement so what I'm going to do is I'm just copying all of this formatted string let me copy all of this let me go down let me write print and inside my print function I'm just going to paste everything as it is that's it let me just save the file and let me run it and as you can see we have the desired output you can use any of the string formatting style there is no right and wrong method in this one welcome to a new section this section is all about decisions decisions and more decisions and we are going to learn how to take Decisions by the use of flow control mechanisms that means there are multiple flow control statements such as if and else while while and do and some other statements so we will have a look at all of this control flow statements first thing that I want you to do is go back to your code editor and let's create a new folder right over here let me name it as 0 3 flow control and the first file that I am going to create over here is called as driving license Dot py let me put up a comment as usual now let's see what's happening Lewis wants to drive a car and he wants to know if he can apply for a driving license or not so first let me declare a variable called as age is going to be of the type of integer and let me assign a value of 13 to it the first flow control statement that I am going to introduce in this video is the if and else statement suppose the legal driving age in your country is 16. so right now we can create a very simple if and else blocks we can say if the age is less than 16 . in that scenario I want to print out you are not eligible for a license but what happens if you are more than 16 in that case you are eligible for license so on the next line we can simply say else so that means you are actually more than 16 years old and let me copy and paste it right over here here I can say you are eligible for a license let's have a look at what's exactly happening python is going to read your file from top to the bottom on line number six it is going to create a new variable called as age and it is going to assign the value of third into it when python comes to line number 12 it's going to try to evaluate this statement right over here what's happening in this statement my age is 13 13 is less than 16 so this condition on line number 12 is true and since this condition is true python is going to print whatever which is inside the if block you can see the line number 13 is indented towards the right so this is a tab space so that means this line belongs to the if log so python is simply going to print out you are not eligible for a license and after printing this block python is actually going to skip the else part because it's not the case with us and python will go to line number 16 where it will exit from the program let me just save the file and let me try to run it so as you can see we have the output you are not eligible for a license now let's try to imagine what happens after a couple of years so after a couple of years the age would be 19. now let me copy and paste the exact same flow control statement and let me put it right over here let me save it and let me try to run the file so the second time we get the output you are eligible for a license and this is the case because on line number 21 you can see now Lewis is 19 years old let's go back to our code one thing that I want you to understand is it's not necessary to have an else block we can simply write an if block so let me put up a comment and let me just copy and paste this block right over here let me comment this let me comment all of this so the only thing we have in our file right now is this variable age which we declared as 13 online number six and we reassign the value on line number 21 and we have this if an else block now I am going to take out the else block and I'm going to left indent this line so that means we do not have an else Block in this condition this is just the if block and this is the next line let's see what's happening let me scale the file and try to run the file one more time ah so in this case I am getting the output you are eligible for a license now let's see what's exactly happening when python comes to this line land number 32 it's again going to evaluate this statement in our case the age is 19 so 19 is not less than 16 and since this condition will evaluate to false python is going to skip the if Law And since we are going to skip the if block python is not going to print this line it will simply move to the next line on the next line that is on line number 35 we are simply going to print out you are eligible for a license and that's what we get on our terminal you can check the terminal one more time let me let me clear up all of these things let me run the file one more time and that's it you have the output of you are eligible for a license you can also chain multiple if and as blocks let me show you an example for that now suppose after too many years Lewis is 100 years old let me just go and copy the code from above so let me just copy this one and right over here and let me uncomment all of this here we can start chaining our if and else blocks so on the next line I can say else and if in Python we write it as e l i f that means else and if so the next condition that I want to check is my age greater than 100 in that case I want to print out you are too old to get a license let me comment this one now let me try to run the file oh but what is this we are getting an output saying that you are eligible for a license but that's not we want we want to print out you are too old to get a license and we have a small bug and that bug is exactly on line number 45. we are saying that if the age is greater than 100 but right now our age is 100 so in order to make this statement true we have to say if the age is more than or equal to 100 now let's save it and let us try to run the file one more time and this time we have a proper output saying that you are too old to get a license till now we have seen very simple if and else blocks let's try to expand our knowledge and this time let me create a new file by the name of alien license dot pi here is the situation Lewis desperately wants to drive a car and he hears that in a planet called as zorton there is no age limit for getting a license so let's see how we can address this situation let us create a couple of variables the first one would be for age of the type of integer age is 13 the next one for a planet Planet the type would be string and let me assign it to Earth initially let me introduce to you a little more complex statements by using and and or statements so let's start writing our compound if and else blocks along with and and or the first case would be if the age is less than 16 and the planet is Earth in that case I simply want to print out that you are not eligible for a license on Earth here you can see I have double equal to that simply means that this is a comparison operator we assist and compare if the value inside the variable planet is equal to Earth or not now let's move on to the next blog for the else statement here we can say else if the age is greater than 16 and if the planet is again Earth in that case I want to print out that you are eligible for a license on Earth but what happens if both of these values are false what happens if the planet is zorton or what happens if the age is less than 16 but you are trying to apply for license consultant let's try to create one more condition over here let us write an if and less block right over here so we can say else if if the age is less than 16 and if the planet is zorton in that case I want to print out you can apply for resort in your license because it's valid in the planet's Orton let me save the file and let me try running it and let us see what output we are getting so I am getting the output that you are not eligible for license on Earth so let's get back to the code and let us evaluate what's exactly happening let us begin with evaluating all of the if and LC block let's start with this one on line number 13 let me put up a comment over here so this is how the evaluation is taking place python is going to compare is the age less than 16 yes my age is 13 13 is less than 16 so the first statement is going to evaluate to true so that comes right here the next operator that we have is and so and comes right over here now python will go to the last statement it's going to compare is planet equal to Earth so as you can see on land number seven we have assigned the value of Earth to planet hence this statement also evaluates to True Earth is equal to Earth so that's why we have a true over here and since we have two truths this entire statement on line number 13 evaluates to true so we can print out you are not eligible for a license on Earth and right after this let me put up one more comment just to explain what's happening and since this if statement on line number 13 evaluates to true the execution is going to stop right at this point python is not going to go to the next alternative block python will directly jump to line number 22 and it will exit from our program so that's what is exactly happening so let me put up some more comments right here execution does not reach over here the same thing for this one as well let's do a small exercise on line number 14 we have tried to evaluate the statement let us try to evaluate the statements on line number 18 and line number 21 as well let me put up a comment right here now let's try to evaluate this statement my current age is 13. as you can see on line number six we have assigned the age as 13 so the first statement age is 13 13 is greater than 16 no it's not so we have false right over here the next operator is and so and comes right over here the next statement is planet equal to a yes my planet is equal to what so we have a true but in this case we have one false and one true so this statement is going to evaluate to forms let's see what's happening on line number 22 let me put up a comment right over here as well so as you can see the age is 13 13 is less than 16 so we have a true condition over here now the planet the planet currently is Earth and Earth is not equal to zorton so we have faults over here one true and one Falls is always going to give you an false statement we can actually try to improve our logic at this time by introducing an or statement remember insult and even if you are less than 16 you are still eligible for a license so we don't have to check this condition at all we can simply say if you are age 16 or if the planet is rotten in that case you can apply for resort in your license in this case the evaluation will be different my age is less than 16 it's true and right here instead of n we have an or condition the next is planet is resultant so that's again going to be false true or false now this time whenever we have an or condition and we have one true and one false it's always going to evaluate to True since we have an or statement the true wins over the false but since the first block is executing we are not going to execute this block and just for your reference let me put all of the and and all tables right over here so these are all of the and and or scenarios but you can do much better if you are in confusion just open up your terminal and I want you to open up the IPython shell remember we have installed IPython at the beginning of the series if you have not installed you can simply install by typing pip installed I python what happens is python actually comes with a shell you can simply type python this takes you inside a python shell and here you can start writing python commands for example I can say OnePlus 2 and I get the output of 3. you can exit this Shell by typing Ctrl and D now I python is a slightly better version of this and it's slightly more interactive so I prefer to use IPython shell just type IPython and go inside the shell let me clear up the terminal and whenever you are confused what statement evaluates to what you can simply type right over here here you can type what happens if I have one condition which is true and the next condition which is also a true we get a true but what happens if I have one true and one false condition we have a false what happens if I have one true or false then also we get a true what happens if I have a false and also false we get a false let us try to evaluate one last condition what happens if I have a false and false in that case it also evaluates to false so you can always come back to this iPad and shell and see how the statements are being evaluated now suppose Lewis migrates to zorton then let's see what's happening let me put up a comment now Lewis is no longer staying on Earth he's staying in Jordan let me copy and paste all of this and put it right over here I am not going to change any of the logic let me just run the file as usual and let us see what output we are getting oh first I need to exit this you can exit this by pressing Ctrl and D yes I want to exit let me clear up my terminal go back to the file let me save it one more time and let me try running it it looks like we have a small bug and I exactly know what we did wrong at this point we did not reassign the value of planet to zorton that's what we need to do so we can say map planet now is certain that's it just save your file and let us try to run the file one more time now we have the desired output you can apply for resulting in license now let's try to see how the statements are being evaluated so let's see what's happening on line number 48 this statement Planet equal to Earth this time it's going to evaluate as false true and false is going to evaluate true or false and so we are not going to execute this block let's go to the new block age is greater than 16 no it's false Planet equal to Earth no it's false because we are staying in zorton false and false we have a false so python will go to the last condition age is less than 16 true Planet equal result and yeah it's also true true or true equals to true and that's the reason why we have this output as you can apply for result Indian license let's try to see the next Concept in the flow control mechanism and this time I am going to introduce you A New Concept which is called as looping we can iterate over things that is called as looping and we can iterate by using a for Loop let me create a new file as usual and let me show what I'm talking about here I am going to create a new file and I am going to name it as printmyname.pi and let me put up a command so this is the situation this time now since Lewis is staying in Jordan he has to do things in a shortening way in zorton they don't print your name on a single line they want to print each and every character of your team on a different line so let's see how we can do that first let me create a variable for name and let me assign the type as string the name is Lewis and this time let me introduce you One More Concept which is called as the for Loop and we are going to use the for Loop to iterate over all of the characters in Lewis it simply means that we want to go from one alphabet to another throughout this string creating a for Loop is very simple we can simply say for character inside my name I simply want to print out the character let me put up a comment right here so on each iteration we are just going to print a character let me save the file and let me try running it here we have the output we have each and every character on a new line and we are doing this by using a very simple for Loop now let's see what's happening inside each of the iteration here we are saying for character in name first time the character is L you can see right over here we get the output of L you can write over here as well the next character is o u i n s so on each iteration we are printing a single character on new line let's try to move on and learn One More Concept for flow control mechanisms this time I am going to show you the while loop for this as usual let me create a new file and let me name it as guess Planet dot pi and this time this is the situation now since Lewis has migrated to zodan his friend from Earth they are a little curious to know where he is so Lewis decides to write a program that will make his friends guess the name of the planet for this simple program I am going to create three variables first variable would be as a Boolean so I can say correct guess this would be an Boolean initially let me assign it the value of faults the next Boolean for guess so this is the place where we would be storing all of the gases that his friends are going to make initially it's simply going to be a blank string and that's it the next one for the planet so I can say planet of the type of string this is going to be zorton let us have a look at the first alternative the first thing that we want to do right over here is we want to create a loop and we want his friends to keep on guessing till the time they get the planet right first let us see how we can get the input from his friends the way to get an input is by using another inbuilt function by the name of input so we can say input and I can write a prompt over here Lewis says that can we guess my planet and I want to save the input inside my variable of guess so I'm just going to the left the input has to be saved inside my variable of guess so my guess comes towards the left let me save this and let us try to run this and see what's happening let me also print out the guess on the next line now let's try to run this file and see what's happening so as you can see I am getting the prompt Lewis says can you guess my planet let me write as Mars and we have the output now this output of mass is coming from this line from line number 15. if you are having some issues while running this file from the code Runner then what we can do is I want you to open up your settings let me collapse my terminal here I want you to write code Runner and let us scroll a little down I want you to go a little more down and I wanted to check this option run in terminal so make sure that this option is checked or what you can do is you can simply use the python command let's try to navigate inside the folder now this time the folder was 0 3 so you can go inside this folder and you can say hey python I want you to run my program which is called as guest planet and we have the prompt and this time it can be Pluto and we have the output of Pluto let's get back to our program here we can create our event and else blocks so we can say if the guess is equal to my current planet then I want to print out all right guess Lewis is a Jordan else we can say that I want to print out Lewis says it's a wrong choice I want you to try again let me see this and let us try to run this one more time suppose my planet is Mercury and we get the output Lewis says wrong choice try again let me clear up my terminal and let me try this program one more time this time I am going to write as zorton what's this we still have the output saying that it's a wrong choice but that's not the case we have written certain the issue is this that we have written zorton with a z which is in the small case but we have saved planet with a z which is in the upper case the point that I want to convey is all of the strings are going to be case sensitive inside python your upper case z is not equal to your lowercase z let us see how we can handle this situation we can go back to our if block right here and we can actually convert from capital Z to a lower Z in fact we are going to convert the entire string to a lowercase string and you can do that by using an inbuilt function now this function Works only with strings and since we have two strings guess and planet we can use that function right over here so we can simply say guess I simply want to lower it and after this I want you to put brackets so this means I want to invoke the function of lower I will come to functions a little future in the series but right now just go with the flow so what this statement is doing is is going to take the guess and it is going to convert it from whatever case it may be to an lower case we want to do the same thing for Planet as well so here we can say lower along with the brackets just save it and now let's try running this file let me write zorton with a smaller case z and this time we have the output right guess Lewis is at Jordan now let's try to improve the logic even more we don't want to exit this program we want to ask his friends to keep on guessing till the time they get the guess right and we can do this by wrapping all of our logic inside a while block so let's see how to do that on line number 16 let me make some space and uh here I can say while my correct guess is not true so that means till the time we don't get a correct guess I simply want to keep on looping so let me put a colon over here and after this I want to indent all of this if and S blocks one tab space inside so now if an else blocks belong to the while loop let me save it and let me try to run the file but we have a small bug let me run the file first and then you will understand what's wrong with it so here it goes it's asking me for the name of the planet I am writing marks so what's this it's keep on looping something's wrong with our program let me stop it by pressing Ctrl and C the issue is we are just keeping on looping the first thing python will go online by 18 it's going to see is my Mars equal to my Jordan it's not so it will go to the next line it says that Lewis says wrong choice try again so this is what we are getting and since our wild condition is not true as you can see on land number six do we have a correct guess false and that's the reason why python will again go back to line number 18 it's going to see Mars is equal to Zordon no so it's again going to go on a line number 21 and print out Lewis says wrong choice try again the way to come out of this while loop is we need to have a circuit breaking mechanism that's why I have created this variable called as correct guess so right over here after line number 19 since we have a correct guess this time let us reassign the value of correct guess to true now let's try running this file oh let me clear up my terminal now let's try the file one more time so it's saying that can you guess my Planet let me see as Mars oh no we again have a issue let's see what's wrong this time now the issue is we are not asking for a new input after we get a wrong guess that's why we never have a correct guess in order to correct this let me take this line let me cut it out and I want to paste it right over here let me indent so we have a proper variable we don't require this pin statement now let me take it out and let us see if we can have a running program let me put the input as Pluto is saying wrong choice now this time it is again asking me for an input and is actually waiting for my input let me write Mars no it's not going to work Earth no it's not going to work let me write zorton and that's it we have the right guess let me add some comments so that it's much more easy for us to understand what's happening the first comment goes right over here so on line number 16 we are just asking the users for their input the next thing that we are doing which is right over here we are just lower casing all of the strings so that we have a much more correct comparison then as a circuit breaking mechanism we are setting the current guess variable to true so this is what is happening right here inside the else block if the condition is false then we are going to print the statement and just to give it a small cosmetic touch I am going to put a line just below this just save a file and let me try running this file for one more time so my first planet would be Mercury we have a very nice output saying that wrong choice and then we have a line below it now this time it's going to be zorton with a lowercase z and we have the right output there is one more alternative way we don't need to declare this variable all the time we can simply work directly with the while loop let me put up a comment and then let me show how it works let me copy and paste everything from above so let me just copy this let me go right over here let me paste it I also want to comment all of this once inside the while loop we have one more alternative which can act like our circuit breaker here online number 33 I can simply say while true this means that I always want you to start the value because true is always true and on line number 40 instead of saying correct guess is equal to true I can say break so that means as soon as we have a condition which is right I simply want to break out of the value let me save it and let me run it and see if it is working or not okay so my first planet would be Earth a wrong choice the next planet is zorton and that's the right choice let's try to learn the next flow control statement and this time we are going to learn the match statement so let me open up my sidebar and let me create a new file by the name of match color dot py and let me put up a comment so this is what we want to do volt Island Resort and Lewis he has packed a lot of stuff and we want to check if he has anything that matches our favorite color and we are going to do this by using a match operator now please keep in mind that match is a brand new operator which was introduced in the version 3.10 so in case if we have any version below 3.10 it's not going to work so please make sure you have any version 3.10 or higher here what we can do is we can create a variable called as my favorite color and we can ask the user for an input so we can say input and here we can see enter your favorite color what's wrong with this spelling okay so enter your favorite color now let's try to print the favorite color let's try to run this file and let's see if it's working or not so it's asking me for my favorite color I say it's black and I have the right output now let's see how the match operator is going to work we can write that I want to match on my favorite color and the first case would be in case if I get the input as black in that case I want to print out a statement saying something like Lewis has a black tshirt now suppose the user input is red then maybe in that case I want to print something like Lewis has a red car suppose my favorite color is yellow the code the colons has to be outside the codes and I want to print out Lewis has a yellow shoes now in case the favorite color is green in that case I want to print out blue is has a green hat but what happens if we don't get a match so in that case we can write like this case followed by an underscore so that means the default case would be this one in case we don't get the favorite color right here we can simply print out that Lewis has nothing in and let me put my color right over here followed by the word of color just save it let me save the file and let me try to run it one more time let me give the input of green it's working let me try to run the program one more time This Time Again green but you can see we are getting the output as Lewis has nothing in the green color now this is again because I have entered green where G is capital while inside the match operator you can see I am using a lowercase G and you already know that strings are case sensitive inside python let us tackle this issue and it's going to be a very simple thing we can either write over here I want to match my favorite color and I want to lowercase it first and then I want to match or we can say on this line I want to say that my favorite color should be equal to my favorite color but in the lower case or even better what we can do is we can write it right over here Dot lower and let me take out this line and that's it if you're wondering why I don't have a type annotation right over here and the reason is just hover over input and if you read the documentation it's saying that the output is of the type of a string we will look at the syntax when we learn a little bit more about functions your my Pi plugin is smart enough to infer that the variable favorite color is of the type of a string and since your favorite color is a string we can apply the lower method on our string you can always write the type over here and it's not going to hurt so this is also a valid syntax let me run the file for the last time and let us check what's happening now this time I am going to say red with the capital r now it's a match Lewis has the red car till now we have learned a lot and I think it's time for us to start writing our game so what I've done in the background I've created a file by the name of game save sort and underscore one you can see on the tab right over here as well and I've added a couple of comments let us see now what we are supposed to do inside this game now as we remember Lewis is staying at Jordan but this time zotan is under attack Thanos has arrived and he is going to attack zorton now fortunately Lewis can call his Avenger French from Earth and so he has made a call Avengers has received his call and they I want to send four of the Avengers to save zorton the four Avengers who are going to save zorton are Iron Man Black Widow SpiderMan and Hulk each of the Avengers have their own attack and power and they have to fight with Thanos in order to save zorton but we have a couple of conditions Avengers can only attack in pairs so that means at each given point of time a single Avenger cannot attack Thanos because Thanos is much more powerful so Avengers have to team up in pairs of two and they have to attack Thanos and while doing all of this Avengers only have three chances to kill Thanos otherwise Thanos will kill the Avengers and we will lose the game sounds interesting isn't it but the first thing that I want you to do is not write the code Yes you heard right I don't want you to write the code first I want you to understand what we have to do and then you can start writing code in order to understand better I want to introduce to you a very simple concept which is called as VOC dtp it's a very simple concept that I've come up with and the entire concept is divided into two parts so as you can see the first part is VOC the second part is dtp so the first part simply means to visualize outline and code the next part would be debug test and polish for now we would be concentrating on the first part visualize outline and code so as a programmer always remember first you always always need to visualize before you can code you don't have to write code immediately so let's start visualize what's going to happen inside of a game since it's a game we already have some characters so let's try to visualize the different characters that we have we have two main categories one category is for the super heroes and the next category is for the super villains we have a specific list for the superheroes and those are Iron Man Black Widow Spiderman and Hulk and for the super villains right now we have only a single super villain and his name is Thanos so this is where we just simply try to visualize how the game would look like and now we know the characters in The Next Step let's try to outline how this characters would look like and how they would work so coming to the next point of outline since we have characters all of the characters should have some properties they should also have some constraints and we should also have some sort of a logic I have already specified that our Avengers have a fire or an attack power but if we have an attack power then we would also require life and having a property of life would make our job much more simple and we can Implement a very simple Logic for the game now this game also comes with a couple of constraints that we can't forget the constants are the first one that we saw Avengers can only attack in parents so at a given time only two Avengers can attack a single Avenger cannot attack and more than two Avengers also cannot attack and Avengers only have 3 chances of defeating Thanos so this is where we are just trying to outline how our characters are going to look like the last and the most important part is can we come up with some kind of logic where we can simulate the attack now let's go back to our code editor and let us see how we can translate all of these things in our step number three so as you can see the step number three is to actually code in Step number three what we are going to do is we either is going to translate all of these things to a logic and that logic would be coded with python now let's start with declaring our variables if you refer our outline we have a property and the properties are for your fire or attack power and one for the life so let's go right over here and let us start creating some of our variables so we can see the attack power of Iron Man so I can see Iron Man attack power and just suppose it to be 250 now let's start thinking in types now since it's a power I have to do some sort of calculations so it must be either an integer or in fluid for the sake of Simplicity I am keeping it as integer the next thing that I want you to remember is since this is an attack power we are not going to change the attack power in the future so no matter even if we are losing or we are winning the game the attack power of Iron Man is always going to be 250 so just as a stylistic preference I want to name my variable everything in uppercase so this would denote that I want to have a constant instead of a variable now what do I mean by constant a constant simply means there is some value which we don't want to change and that is what we are indicating by writing everything in the upper case Now features hover over our variable you can see on the left we have constant so that means our code editor knows that this is a constant but we can go further and we can improve our typing for this I am going to import and use something from an additional package now what is a package package is basically some code that the developers of python have written and have put all of this code inside a library which is called as the standard Library so what I'm going to do is I want to say I want to go to my typing package so this package lives inside the python standard Library please remember that standard library is already built into python so from the package of typing I want to import finally and we can wrap this integer inside finally now it's very clear that Iron Man attack power it's not just a variable it's a constant and we don't want to change the value of the constant throughout our program let us repeat the same thing for Black Widow Spiderman and Hulk as well the next superhero would be our Black Widow and she has a power of 180 the next one would be SpiderMan SpiderMan has an attack power of 190. the last superhero would be Hulk and Hulk since he is the biggest guy he has an attack power of 300. let me put up some commands right here so this is where we are declaring our constants and on the top let me put up one more comment so this is the stuff that we are importing now let's go back to our outline just to figure it out what we are supposed to do next we have defined the attack power now we also need the life so let me go to the next line and here I am going to define the life of Thanos and the life of Thanos is 1500. as you can see I don't want the life of Thanos to be a constant I want it to be a variable that's why I am declaring everything in small case and my my pie is smart enough to infer that Thanos is of the type of integer or if you want to be explicit you can always type int right over here the reason why I don't want it to be constant would get much more clear when we implement the logic for the game now let's go back to our outline and here you can see we have a couple of constraints the first constant is Avengers can only attack in pairs so let us go back to our game and I want the game users the ability to choose our pairs in order to give this ability I am going to create one more variable called as choices and let me assign it the value of 0. again I don't need to annotate as integer because my Pi would be smart enough to infer that my choice is variable would always be an integer after this let us create a couple of if and else blocks and let us start creating our pairs for our Avengers for the sake of Simplicity I am just going to create pairs in line so what I mean the first pair would be Iron Man and Black Widow the second pair would be Black Widow and SpiderMan the third pair would be SpiderMan and Hulk and the fourth pair would be Iron Man and Hulk but you're free to make the pairs in whatever choice you want so here we can say if my choice is one in that case I simply want to print out that Iron Man and Black Widow are attacking Thanos the next choice would be Choice number two and this time I want to print out Black Widow and SpiderMan are attacking Thanos next choice would be three and this time SpiderMan and Hulk are attacking Thanos and the last one if the choice is number four then Hulk and Iron Man are attacking Thanos while doing all of this let us not forget that we want to ask the user for the choice of The Avengers so let us Implement that logic and I want to implement that logic before our if and else blocks so here I can since we want to ask the user for the input we need an input block and let us display a prompt message saying that enter your pair number we want to assign the input back to our variable of choice so Choice goes on the left and let me save my program but as you can see we have a small bug so if we just try to hover you can see that we have an error saying that incompatible types in assignment expression has type of string variable has type of integer so this was what I was telling you about variable has the type of integer our variable of choice as you can see on line number 29 we have declared a variable called as choice and the type of this variable is an integer but if you hover on input and if you read the documentation it is actually giving us a string so this is where when you start thinking in types it's going to help you to avoid a lot of bugs to address this bug it's a very simple solution we simply want to convert the string to an integer and the way to do that is by using a cast let me just show you how it is done so I am going to wrap all of this inside my brackets and I want to cast all of this into an integer so what this means is my input is going to give me a string and I want to convert that string into an integer right over here now our types are going to match on the left is also an integer and on the right is also an integer now let me see my program and let me try to run it suppose I want my pair number two you can see Black Widow and SpiderMan are attacking Thanos let me try to run the file one more time let me go by pair number four Hulk and and man are attacking Thanos so we have some basic logic in place this time let us display a nice message to the user informing them of all of the pairs which are there inside the game so before I ask the input I want to display a nice message for this I am going to create a new variable called as message and I am going to assign some string value to it so let me create a variable called as message and I'm going to assign some value to it and this is the value so please note that I am creating a multiline string by using triple quotes and just before we can show the choices I want to print out the message let us do that right over here so we can say print and my message let me save the file and let's try to run it and this time we have a very nice message and we can see all of the pairs who can attack Thanos this time let us go with the pair number three and we get the output that SpiderMan and Hulk are attacking Thanos let me clear up my terminal and let us go back to our code now since this message is never going to change I can actually make it as a constant so let me change from the lowercase to the upper case and here as well so we have a message in the form of a constant let me put up a comment right over here saying that this is going to be one of my helper message and I can utilize this message multiple times whenever I want throughout my program now the next part would be since we have multiple chances of attacking Thanos we need some kind of a loop and inside the loop we can keep on attacking Thanos for at least three times in order to simulate this Loop situation I am going to use a while loop so I can just come down over here and just before my print message I can see while true and let me indent it's why it has to be while not white and let me indent all of this thing one tab space inside so all of this belongs to the while loop now now let's see since we have a while loop we also need some kind of a circuit breaking mechanism in order to exit now let's go back to our outline and see how we can do that one of the constraint is that we only have three chances of attacking Thanos another constraint is if we have already lost or we have already one then we can simply break out and we don't have to play a game so we are going to combine this logic together and come up with a very simple circuit breaking mechanism so let me go back to my code now inside my while loop we need to have some sort of circuit breaking mechanism so let me put up a command either we can break out whenever we win or we can break out whenever we lose so let's write our logic right we are but before adding the logic we need to create one more variable and that variable is going to hold our number of attacks as you can see the constants we have three chances for an attack so let's save that data inside one variable let me go to the top and declare a variable right over here so this is called as attack numbers and I am going to assign it a value of 0 initially let us go back to the while loop and let us Write Our Winning or our losing conditions first let us see the winning condition so we can say if the life of Thanos is less than or equal to 0 that means we have 1 but we need to add one more condition right over here the second constraint and that constraint would be if my number of attacks is also less than or equal to 3. only in this case I am going to win otherwise I am going to lose and I am going to print some kind of a message over here so right now let me just put up a comment that this is for the for the win for the else block that means if we have lost so we can say if my attack numbers are greater than or equal to 3 oh this has to be else and if now in case my attack numbers are more than or equal to 3 in that case I am actually going to lose now before I forget we need to add the break statements to actually break out of the while loop so let me add them right away the next thing that we need to do is we want to display a nice winning or a nice losing message so what I have done is I have already written a nice message which I am going to paste it right over here just above the message so the first one would be my winning message and it's going to be you successfully saved zorton along with a couple of emojis and since this is a constant all of this is capital and this is final Str if you want it you can write this if you don't want you can take it out and my pie is smart enough to infer that it's a constant of the type of string the next message would be our losing message so I'm just saying that Thanos killed Avengers and captured zorton the reason why I have all of this separately in a constant or in a variable is because in future if you don't like this emojis you can simply take them out and you don't have to change all of the logic that you write below you have to just change one constant or one variable and it's going to reflect throughout your code it makes our code much more manageable let me put back my Emojis I just love them and go back to our if and else block let me remove this and I can say here I want to print my win message and here I want to print my lose message sorry it's going to be a lost message let me save my file now let us go back to our outline and let us see what we need to do next now we have to do the most important part that is how to actually simulate the attack unfortunately for us this is the most simplest part let's see how we can do that suppose you are using the first pair right over here in this case what's happening is Iron Man and Black Widow they are going to attack Thanos and if we just scroll up Iron Man Has a power of 250 Black Widow has a power of 180 and Thanos has a life of 1500 so when Iron Man and Black Widow are attacking Thanos we simply want to minus the attack power from the life of Thanos and since we have two Avengers who are attacking Thanos we have to reduce the value by 250 and 180 from 1500 and that is how we simulate an attack so let's go down over here and let us Implement that logic so we can say that my new Thanos life would be my current Thanos life minus my Iron Man attack power and also minus the Black Widow attack power and that's it and after doing this we also want to increment the number of attacks since we already have done one attack so we can say my current attack number would be my attack number plus one so initially if you see the attack number is zero and whenever we have an actual attack we are going to increment it by one and remember we have a constraint right on line number 49 that we cannot have more than three attacks if we have more than three tags then we are going to lose the game let us do the same thing for our choice number 2 3 and 4 as well let me just copy this let me paste over here and before the attack I have to say that my Thanos life would be my Thomas life minus Black Widow attack power minus the SpiderMan attack power let me go to the new line right here again the same thing let me copy here as well and then here my Thanos life would be my Thanos life minus SpiderMan attack power minus Hulk attack power let us go to the last choice and here we can say again the same thing Thanos like would be Thanos life minus Hulk attack power minus Iron Man attack power here is my Iron Man save it and that's it I think we are good to go and we can try out our game so let's give it a try let me take this up a little bit so the first thing is we have a nice message saying that we have the following pairs for the first pair I want to go with the first one Iron Man and Black Widow so I just press one and enter so I get the message that Iron Man and Black Widow are attacking Thanos now it's asking me for the second pair now I can say I want to go with Black Widow and SpiderMan so I enter my choice number two again we get a message saying that black Widow and SpiderMan are attacking Thanos and it is asking me for my third pair let me go with Hulk and Iron Man so I can type 4 and that's it and unfortunately we have lost the game Thanos has killed Avengers and he has captured zotan let us play the game one more time this time I am going to choose my pair number four Hulk and Iron Man and my pair number one and again my pair number four and that's amazing finally we have been able to save zorton you can see the message right over here and this brings us to the end of section number three just take a break have some nice snacks or coffee and I will see you in the next section welcome to a brand new section this section is all about data structures data structures is just a common name for how we can group our data together and the first data structure that we are going to see is called as a list now since Lewis has a migrated to zorton he has been making a lot of progress and in Jordan people greet each other by saying Zola so Lewis wants to write a simple program where he can beat all of his friends by saying Zola followed by the name of the friend you can do this by using multiple print statements but that is not a very effective approach what if you have hundreds or thousands of friends then you can imagine that using a print statement for each and every friend would get too tedious instead python offers a much better solution and that is called as a list so what we are going to do is we are going to create a list and after that we are simply going to look through the list and print a grading message to each one of his friend let's see how to do this behind the scenes I have created a new folder called as zero four data structures and I'm working in this file called as friends dot pi so let's get started with this one let us create a variable called as friends oh let me get the spelling right now this friends is going to be a list for creating a list you have to use open and closing square brackets and inside this you have to insert all of your elements suppose the first friend is CC and then we have a bunch of other friends Rocco Chico and Nico so this is what a list in Python looks like now let's see how we can add the type hints to this one now obviously this is a list so what we can do is here we can simply say that friends is a list and after that let us try and specify what kind of data that our list would be holding and if you see all of our data types are strings so what we can do is we can simply tell that this list is going to be a list of strings the next point that I want to tell you is all the lists in Python they always start with the index number of zero so let me put a command and then let me try to explain what's happening so this is how your list will look inside the memory on index number 0 it will have CC on index number one it will have Roku on index number 2 Chico and so on always remember that list will always start with the index number of 0 and this is common across all of the programming languages not only in Python the next point that I want to share is if you see the length our length is 4 that means we have four elements inside the list so this is the first element second third and fourth so the length of our list would be four but the index number would be up till 3. let's print out the friends and see how they look like so let me print the prints right over here and let me run this file so these are the friends we have friends right over here now let's create a very simple for Loop and greet all of his friends so let me start by putting some comments let me take this a little up and we can use a very simple for Loop so we can say for friend in my list of friends for every friend I simply want to print out a greeting message saying that Zola followed by the name of my friend let us run this file so here we have the output Zola CC Zola Rocco and so on let's see what Lewis wants to do next so Lewis simply wants to count his number of friends so remember I just told you that the length of this list would be 4 and we can find that out by using an inbuilt function which is also called as length let me show you right over here let's print out friends length and inside the curly brackets I can find the length by using the inbuilt function called as length Len and let us pass our list to it just save and run your file and your we have friends length is 4 and that is what we were expecting let's see what Lewis is doing next oh he had a fight with Nico and he wants to unfriend him now let's see how we can take Nico out of our list so we can see Nico Nico is the last element inside our list and we can remove him by using an inbuilt function which is called as Pop let me show you how it is to be done so I can say I want to unfriend and I can say from my list of friends I simply want to pop the last value now since Nico is the last element we can use this method to remove an element from the list let us print out the friend that we have just unfriended so we can just say unfriend and let me put my curlies and let me put unfriend over here let me also copy and paste our friends and let's see how our list is looking right now so let me just paste it right over here just save it and try to run your file and here we have it we have unfriended Nico and this is how our current list of friends looks like Let Us Go Back let us see what Lewis is up to this time so Lewis has made a new friend by the name of zico so let us see how we can add Z code to our list we can add zico by using another input function by the name of append let's see how to do that so here I can say in my list of friends I want to append one more element and that element is called as zico let us copy this line and paste the new list let me save it let me try to run my file and here you can see we have zico at the back one more thing you must have noticed that I am not assigning a variable for this operation so for example I am not doing something like this the reason is if you just hover over append you can read the documentation this function returns none that's why I'm not assigning it back to my list of friends but at the same time if you hover over Pop now this method of Pop is actually returning back a string that's why I'm using a new variable on the left to collect that data but for this we can't do the same now let's see what Lewis is up to so let me go down right over here and let me paste a new comments this time Lewis wants to know who is his third friend inside the list let us check it out let me open up my terminal so this is how our latest list looks like so cc is a first print Rocco is the second one and Chico is a third friend so let's see how we can get this value from our list and we can do that by using our indexes so just remember let me scroll a little up our list it has a set of indexes and always remember that the index is going to start from 0. now let's see how we can get the third value from our list so here I can simply print out from my list of friends I simply want the friend who is on the index number 2. now remember we are using 2 because our index starts at zero let me put a command so let me save this file and let us try to run this file and here we have the output Chico is the third friend inside the list let us go back this time Lewis again had a fight but this time he had a fight with Roku and we need to remove Roku from our list as well let me scroll to our list if you see Roku is inside our list at index number one so let me show you how we can do this so let us go down here I can say from my list of friends I simply want to remove Roku that's it let me copy this line and paste it over here and let us try running this file so this is our new list we have CC Chico and zico we have successfully removed Roku from our list let's see what Lewis is up to next and it seems like Lewis and Rocco have become friends again so let's see how we can add Roku back to our list remember that Roku was at index number one so we want to insert Rocco back to its original index so let me show you how it is to be done so here I can say in my list of friends I want to insert at index number one the element of groco and let me try to print out the list one more time that's it just see run your file and this is the new list we have Roku back at index number one inside the friends list let's go back and let's see what Luis wants to do next so this time Lewis wants to confirm if Roku is in the friends list or not and we can do this by using our if and in syntax so what we can say right over here is if Roku in my list of friends then I simply want to print out yay Roku is in the front list or else I can print out some other message so let me save the file and let us try to run this one now since Roku is inside the list we get the output that yay the Roku is in the friends list let us go back let's see what's happening next so this time Lewis patches up with Nico as well and this time Niko has become his number one friend so we want to add Nico back to our list of friends but since Nico is his number one friend right now we want to add Nico at the beginning of the list so we can do this by using the same syntax right over here we can use the same syntax and let's see how to do this so we can say in my list of friends I want to insert at index number 0 the element of Nico and let us print our list of friends as well so let me go down let me paste and let us run this file and here you can see we have Nico as the first element inside of a list let us go back so this time Lewis wants to sort his friends in alphabetical order and luckily it's very simple we simply have to say friends I simply want to sort it let me copy and paste the list of friends and let us run this file and here we have the output you can see all of the names are sorted alphabetically so CC Chico comes first Nico Rocco and finally we have zico let us go back so this time Lewis doesn't really like this ordering and he wants to reverse the order luckily this too is very simple let me just copy this and let me paste it right over here and instead of sort I simply have to say I want to not remove I want to reverse that's it and let us run this file and this time we have the new list and you can see the first element is zico and the last element is CC let's see what's happening next and this time Lewis again had a fight with Nico and we again need to remove Nico from our list but before removing Nico let us have a look at our list so this is how our list is currently looking like and Nico is the third element or you can see the index number of Nico is two so keeping this in mind let us go back and see how we can remove the go from the list earlier I have shown you two different methods of removing elements one was this one of remove and the first one was with the pop method let me show you one more method Again by using pop let me copy all of this and let us go down now since Nico is at index number two what I can do is I can tell python that I want to pop an element from an index number two let us save and let us run this file for the last time and here we have it we have unfriended Nicole and this is our updated list the next data structure that we are going to learn is called as a tuple behind the scenes I have created a new file which is called as subjects.pi and let's see what's going to happen let me collapse my sidebar now it's time for Lewis to go to school and he has to choose his subjects but his school wants to make sure that once a student chooses their subjects they won't be able to change it so let's see how we can do this and the way to do this is by using a tuple so you can imagine Tuple to be like a stricter brother off list once you create a tuple you can't change or modify it so let's see how to create a tuple so let's say that we want to create a tuple by the name of subjects and the way to create a tuple is by using the round brackets and instead of these round brackets we have to add our elements suppose the first subject would be maths the next could be science then we can see history now remember that's similar to our list our tuples will also start with index number zero that means the index number for Max is 0 for science it would be 1 and for history it would be two let us see how to add typing for this one so here I can say that subjects is obviously a tuple and the way to define its type is we have to put our square brackets and since tuples are strict we have to define the data type for each and every element so for example in this Tuple we have three elements and the types are string and string so here we can see that the first element is a string the second is the string as well and the third is the string as well suppose we had one more element so if I say that we have one more element as 13 now the data type of 13 is an integer so what we would have to do is after this we would have to say that my fourth element is of the type of integer so make sure whenever you are creating a tuple you write the data type of all the elements inside the Tuple let me take it out this is not required for our example right now let me also put up a comment so saying that the index number for match is 0 for Sans is 1 and history is two let's see what we can do next so let me take it a little up so this time Lewis wants to count his number of subjects and you can do that by using the inbuilt function called as length so we can use a simple print statement and we can say that number of subjects then inside our curly brackets we can use the inbuilt function called as length and let us just pass our Tuple inside so we can say subjects let us run and see the output and here we can see that the number of subjects is three let us go back the next thing that Lewis has to do is Lewis has to sign up for all of the subjects so let us create a very simple Loop and by using the loop we can sign up for all of the different subjects you can use your regular for Loops to iterate over the Tuple so here it goes we can see for my subject in my couple of subjects for each iteration I can simply print out a statement saying that Lewis is signing up for let me get my spelling right Mr be signing up for and inside the curly brackets we simply have to say for my subject let us run and let us see the output so here it is Lewis is signing up for maths and then for Science and the last one is history let us go back so this time Lewis wants to see which is his second subject and we can do that by using our index so as I just mentioned tuples also have indexes so the second subject would have an index of one so let us try and print it out here I can simply say that I want to print out from my top love subjects the subject at my index number one also let me put up a comment saying that since the double starts from index 0 we are using one let us see the output so you can see the second subject is science let us go back and this time let us see what's happening so this time the school wants Lewis to take another three subjects to get his full credits now what happens is once you create a tuple you can't add different elements to a tuple for example when we saw list we could append elements to the list but you can't do for the Tuple then what can you do well you can add two different tuples and create a new Tuple let me show you how it is to be done so suppose the additional subjects which he has to take would be a new Tuple and we can say that the new subjects are English Python and physics on the next line we can create a new Tuple called as my total subjects and we can simply add our top subjects plus our additional subjects so now we have a new Tuple which has all of the subjects together we can also try and print it out so here let me just say that my all subjects would be my couple of total subjects let us run it and here we have the output you can see we have English Python and physics at the back and also we have maths Science and History so this is our newly created Tuple let us go back and let's see what's happening this time now it's obvious that out of all of the subjects Lewis loves Python and he wants to make sure that python is inside his list of subjects so we can check for an element inside a tuple by using our if and else blocks so let us see how to do that so here we can simply say that if python is in my Tuple of total subjects if this is true then I simply want to print out yay Lewis is going to Learn Python if not so we can say else we can print out oh no no python for Lewis so let us save this file and let us try to run this file for the last time and here we have the output now since python is inside our Tuple we get the output of a Lewis is going to Learn Python now let's try to learn about dictionaries dictionaries are of mapping type that means the dictionary are going to map a key to a value so let us see what's going to happen right now behind the scenes I've created a file called as marks.pi and I'm working in this one so let me collapse my sidebar and let us see what's happening now this time Lewis has given his exam and he has received his marks so let us see how it looks like so we can create a dictionary and call it as marks the way to declare a dictionary is by using your curly brackets and inside of this curly brackets let us give the key and the value pairs suppose the first subject is maths so we can say Max and he scored maybe 80 marks in his match so this is how your key and value pairs look like on the left of the colon we have a key and on the right we have a value let us give a couple of more key and value pairs suppose the next subject was science and suppose he fed 82 marks in science and let me add a couple of more subjects as well so this is his score and the next line let us print out all of this subjects we can say in my formatted string my marks and let us see marks let me save the file and let us try running this one and here is output so this is the dictionary that we just created now let us go back and see what's happening next let me put some comments right over here so this time Lewis wants to check all of the subjects now remember inside our dictionary the keys are our subjects so let us see how we can just get the keys out of our dictionary the way to do that is very simple let's also use a for Loop to print out the keys so we can say for my subject in my dictionary of marks I want to get all of the keys and for each iteration we simply want to print out the subject let us run this file and see the output so here is our output we have all of the keys inside our dictionary now let us go back and let's see what's going to happen next so this time Lewis wants to check all of his marks now again remember that the marks are the values so anything on the right is the value and this time we want to get only the marks out of our dictionary so let us do that and the way to do that is similar to something like this so let me show you how it is to be done so we can say for my score in my dictionary of marks I want to get only the values and for each iteration I just want to print out my score let me save the file and let me try to run this file and here we have the output here you can see we have all of our score let us go back let us see what Lewis wants to do next so let me take a little up this time Lewis wants to check out all of the subjects and marks together that means we simply have to print out our key and value pairs so let us see how we can do that again let us use our for Loop to print out the key and values so we can say for now since the keys is for the subjects let us call subject and on the right we have score so we can say score in my dictionary of marks I want to get all of the items now this method is going to return our key and values which we are capturing right over here and for each iteration let us print out our KN value pairs so here I can say that my subject and here we can say the score and we can say the score is out of just let me save it and let us try running this file and here we have the output match Lewis code 80 out of 100 science was 82 history was 78 and so on now let us go back and see what we have to do next and this time Luis wants to check if he has passed in all of the subjects or not and the passing marks are 50. so let us see how we can do this we can do this by using our for Loop and our if and edge blocks so let me show you how it is to be done so here we can say for my subject and my score in my marks dot items for each iteration I want to check if my score is greater than or equal to 50 only in that case I can print out that subject and I can say pass else if the score is less than 15 that means he has failed and so we can print out the name of the subject so we can say the subject and we can see field let me save it and let me try to run this file so let's see how he has done in his exam match is a pass science is a pass oh but what's this English is a field so let's see what's going to happen next let us go back to our file so let me take it a little up and let me put some comments so those things that there was some kind of a totally mistake for his English paper and he's asking for a revaluation and after the revaluation the new marks are 70 so let us see how we can update the values in our dictionary so this time what we want to do is let me show the dictionary so this time we want to update the marks of English from 35 270 so let us see how we can do that so let me go down and here I can say that from my dictionary of marks I want to go to my key of English and I want to assign the new value of 17. so this is how you can update the values inside your dictionary on the next line we can print out the value we can say something like this Lewis score inside the curly brackets we can see the marks of English in English so let me just save this and let me try to run this file so here we have the output saying that Lewis scored 70 in English now here what we are doing is this syntax we are just retrieving the value from our dictionary so the syntax means that from my dictionary of marks I want to get the value for the key of English let us see what is happening next now this time low is also took an exam for geography and his code 78 marks so this time what we have to do is we have to create a new key and a new value this time remember we don't have geography inside our dictionary of marks and we have to create one right now so what we can say is for my dictionary of marks I want to create a new key for my geography and I want to assign the value of 78 to it and Lewis also wants to check if he has passed in all of his subjects or not so let me go up and I just have to copy all of this and let me paste it right over here so here is the output and it looks like Lewis has passed in all of his subjects and you can also see we have the output for geography as well now let us go back so let's see what's happening this time so this time his friends on zorton they want to know how much Lewis scored in Python so let us see how we can retrieve the values from our dictionary so let me show you the first alternative let us create a new variable called as our python score and we can retrieve a value by using the syntax so we want to say that go to my dictionary of marks and I want you to get the value for the key of python and that's how you retrieve the value but this syntax has a couple of limitations which I'll explain it shortly but first let us print out these values let us print out the marks in Python so we can say Lewis core the python score in Python let us run this file and here we have the output saying that Lewis scored 98 in Python now let me show you one more alternative method let us go down and let me put one more comment and here again we can say that the python score and this time we can use one more alternate syntax so what we can say that from a dictionary of marks I want to get the values for my key of python and on the next line let us print out the same statement so let me copy from here and let me paste it right over here and let us run our file so this time we can see we again have the output now let us go back and let's see what's happening next so let us see what's happening this time and this time his friends from Earth they want to know how much Lewis code in Java so what we can do we can create a variable called as JavaScript and we can save from a dictionary of marks I want to get the value for my key of java and the next line let me try and print it out so what I can say that I want to print out Lewis code Java score in Java let me see and let me run this file and this time you can see that we have an error and the error is called as key error now this is because our dictionary does not have a keyword as Java so this is one of the limitations of using this syntax right over here let me put up a command saying that this syntax will throw an error now let's see a better way of getting the values from our dictionary and that is by using the get method that we just saw on the next line let me paste some comments and I want to comment this out because this is always going to fail so let us go down right over here let me take everything up so here let me create one more variable called as our Java score and let us use the get syntax so what we can say is from my dictionary of marks I want you to get the value for the key called as Java let me save this and this time let us try to print out this same sentence so I can just copy and let me paste it right over here let us run this file and see the output so this time we get the output of Lewis scored none in Java so let us go back and let us see what's happening now this method of get returns a none if it can't find the value and that's what is happening right over here one thing that I forgot to show is how to use the typing for this one so let us go up and let me show you how to write the type hints for our dictionary so this variable of marks this is a dictionary so we can say this is our dictionary and inside the brackets we also have to mention the types for our keys and values so here we can say that since all of the keys are string so the key is going to be of the type of string and the values are integers so we can just say int and that's it now let us go down and let us see what's happening so here on the line 108 this get method is going to return none or if it finds a value it is going to return our score which is of the type of integer now let us use our if and else blocks to print something meaningful so here we can say that if my Java score is none that means if we can't find the value then we can simply print out saying that Lewis did not study Java and else we want to print out this statement so let me take it inside my else blog and let us try to run this file and here it is we have the output of Lewis did not study in Java now let us go back the last thing that I wanted to show you is how to delete some elements or how to delete the key and value pairs from our dictionary now suppose we want to delete the key and value pair for English then we can say that I want to delete from my dish media of marks English so this is how the syntax goes let me remove the extra codes now let us print our marks one more time so I can see marks and let us print out the marks right over here let me run this file so this is how our dictionary is looking and you can see we have deleted English from our dictionary as well the last thing that I wanted to mention for this one is the lookups and dictionary are extremely fast what do I mean by lookup so on line number 108 we are getting the value from our dictionary so this is a lookup when we were working with our list or tuples we were using indexing but for a dictionary we always use the key to get the data and this is the reason why lookups in dictionary are extremely fast and we would be using dictionaries and lists in our final project as well so make sure you go through them a couple of times and understand what's exactly happening there is one last thing that I wanted to show you so if you open up the code from the GitHub so this is the code from GitHub inside my 4.04 data structures this is the file which I am referring to it is called as dictionary now let me collapse my sidebar so here I have one more sample dictionary called as pizza and you can see the structure is very interesting the first key value pairs we have integer as the key and string as the value for the next one we have a float as our key the next one is even more interesting we have a tuple as the key and the last one we have a Boolean value as a key now the interesting part is this is a valid syntax so let me copy all of this and let me paste all of these things inside my IPython shell so here it is let me paste it right over here and let us try to print out our pizza so you can see we have a valid output so what happens is you can use any data type for a key as long as it is immutable so our strings are immutable integers are immutable floats booleans are also immutable and we also saw that our tuples are immutable as well so you can use all of these data types as your keys the way to retrieve the data is similar so let me give you some small examples so here we can say from my dictionary of pizza I want to get the value for the key of 10. and here we have the output the same thing can go for our float as well so we can say 8.99 and here we have the value you can do the same thing for our Tuple as well let me copy this Tuple and here I can say from my dictionary of Pisa I want to get the value from the key and this time the key is a tuple so let me paste it right over here and you can see we have the right output but before we make such additionally I want you to wait and think do you think that this is going to be a developer friendly dictionary I would rather think not I just wanted to show you that you can create such dictionaries and all of this is a valid syntax now let us have a look at the next data structure and this data structure is all about being unique the name of this data structure is called as a set for this video I have created a new file called as teach dot pi and let's get working with this one so let's see what's happening this time Lewis wants to show some of his English magic to zortans but Jordan's they can't understand what's happening and they want to see each alphabet separately that means they want to understand each unique alphabets so let's see what's going to happen next so suppose we have a magic word called as Abracadabra now let's see how we can get the unique alphabets from our string so on the next line let us create one more variable called as unique alphabets and in order to get unique alphabets from the string we have to create a set and the way to create a set is by using the cost which is called as set and let us pass our variable magic words to this one now if you hover over the variable unique alphabets you can see the type is set and the set is of the type of a string so let's write that over here so this is a set and the data type is for the string let us print out our unique alphabets so here we can say I simply want to print out my unit alphabets let me save it and let us try to run this file and here we have all of the unique alphabets so let me take this a little up so inside our word of abracadabra the alphabets of c d a b and R all of this alphabets are unique let us go back let's try one more time and this time let us use a sentence so we can create a sentence like this the big blue sky and the big blue ocean and let us see the unique alphabets so I can reuse my variable of unique alphabets and this time let us create a set from our sentence and let me copy and paste this line right over here let us run the file and this time we have an output so all of this alphabets are unique inside our sentence but what happens if you want to check the unique words instead of the characters let us see how to do that the first thing that we would need to do is we would want to convert our sentence into a list of words so let us see how to do that first let me create a variable called as my word list and we can simply split our sentence by using an inbuilt function by the name of split so we can say that I want to split my sentence now if you see the type of sentence is a string right so on a string you have a method called as split so this is going to return a list of all of the words inside the sentence let us try to print it out on the next line so let me say my word list is my variable of word list let us try to run this file so here you can see we have the list of all of the words inside the sentence so the next step is to actually create a set out of our words list and once we create a set then we can know all of the unique words inside our sentence so let's do that let me put up comments in that we need to extract the unique words let us create a variable called as unique words and we simply need to create a set out of our word list let us try to print it out so here I can say my unique words and the variable of unique words let us try to run this file so here you can see the unique words are big Ocean Blue Sky the and and also one more thing that I want you to note that at the beginning and at the end we have the curly brackets so you can see right over here for the beginning we have a curly bracket and at the last we have a curly bracket so this symbolizes a set in the dictionary we had key and value pairs inside curly brackets but for a set we only have values so let us go back so this time zortans they are really impressed and they want to see if we can add a couple of more words to our set so let's see how we can try and update our set so what we can do is let us take the existing set for our unique words and we can say that we want to update with the new values and here we need to pass an iterable that means you can pass a list or a tuple or any other data structure which is iterable so let me paste some values right over here so let us see if we can update with the new values of big blue and Sky let me copy this line and let me paste it right over here and let me try to run this file now if you see nothing is happening this line and the line before that they are exactly the same now what's happening no sense set is all about being unique we can't add the existing values to the set if you go back to our code big blue and Sky these words are already existing inside our set so nothing is happening let me put up a comment if you try to update your set with existing values nothing is going to happen now let us try to update with some other words which are not there inside the set so I can say my unique words I want to update with the new values and this time I want to pass the value of green and grass let me copy this paste it right over here now let us try to run our file and this time you can see we have the words of green and grass inside our set let us go back and let us see what's happening next let me put some comment right over here saying that something does happen now what happens is zortens they don't like the word of grass now let's see how we can remove the word of grass from our set so we can simply say that from my list of unique words I want to remove and I want to remove the element of grass and again let me copy and paste all of this and let us save and let us run our file and you can see that this time we have removed the word of grass from our set let us go back now I just wanted to let you know that you can do a lot of other operations on sets such as your union and intersections and so on but I would not be covering all of those inside this tutorials now let us see how we can use data structures for our game so behind the scenes I've created a new file called as game saves button 2 and this is the file and I have also pasted a couple of comments right over here so this time what is happening is the war is just getting more intensified this time the army of Thanos is also arriving and since it's going to be a very intense fight our program will automatically choose superhero and the super villain and our Avengers have exactly three chances to defeat Thanos now this time since we have already seen data structures we are going to create a nice data structure for our characters but first let me go to my old file inside my folder number zero three and let's copy a couple of things from here so let me copy from here till my last message let me go back let me collapse my sidebar and let me paste it right over here so this is our current file now let's get started this time we are going to define a nice structure for our characters you have seen that our character has an attack power and Thanos had life but this time our super villains are also going to attack our superheroes so all of the characters will have a property of life as well so let us see how we can do all of these things let me create a constant and let me call it as Iron Man and the most ideal data structure would be additionally now since with dictionary we can have the key and value pairs it makes much more sense to use a dictionary right over here the first key would be for the name of the character so in this case the name is Iron Man the next key would be for the attack power so I can say my attack power the value is of the type of an integer and the attack power of Iron Man IS 250 the last key and value pair would be for the life so you can say I want to have a key for my life let's give him a life of say 1000 now let us see how we can Define the types for this one now obviously Iron Man is a dictionary now if you see the structure of our dictionary all of the keys are strings but for the values sometimes we have a string and sometimes we have an integer so let us see how we can Define the types over here since all of the types the keys are going to be string so we can see the key is of the type of a string and the value we can see it's either going to be a string or it is going to be an integer so this is how you define the types for our Iron Man now since this is going to be a constant we can wrap all of these things inside final so let me do that let me put my brackets and let me say final but what happens is typing all of these things again and again becomes so boring so what we can do is we can use a small trick and that trick is called as in typing Alias so what I can do is let me just cut out all of these things and here let me create a new variable called as character and I can Define the type right over here so what I am doing on line number 20 is I'm defining a new variable called as character and I am assigning the type to it so what I can do on line number 22 is I can simply say that Iron Man is a constant of the type of character so this is going to save us a lot of typing let me put up some comments over here now let us go down and let's create some more superheroes so let me just paste it right over here so what I've done is I have created three more superheroes one is Black Widow Spiderman and Hulk and I have also assigned values to each of our superhero let me put a comment right over here so this is for our superheroes similarly let us also do for our super villains so let me put a comment right over here so I can say that let us Define a super villain called as Thanos the type would be final and we can say character right over here and let's create our dictionary so we can say the name is Thanos the attack power is 1500 and life is 1500 similarly let me create some other supervillains as well so I've created a couple of more super villains One is Red Skull and the last one is Proxima now since we have a structure for our character we don't need all of these things so let me take it out the next thing is let us create a list of all of our superheroes and all of our super villains so let me put up a comment and let us create a list for our superheroes and we can say this is going to be a list so I can put my square brackets the first is our Iron Man next is Black Widow next is SpiderMan and last is the Hulk now let us see how we can Define the typing for this one so superheroes is a list and the type is of the character let us go down and let us create one more for our supervillains as well so I can say that my villains is again going to be a list of my character and let us create a list right over here the first is our Thanos then is for the Red Skull and losses for Proxima let us go down and let me put up a comment right here that choices and attack numbers all of this are our helper variables it takes out and let me take this out as well that's not required now let's go down and let us see how we can implement the actual attack the last time we had used a while loop this time I want to show you a for Loop and I also wanted to show you a new keyword that keyword is called as range so first let me type and then I will try and explain what's happening so I can create a for Loop saying that for attack in my range of 3 now let me try to explain what's happening if you remember we have a constraint that Avengers can attack only three times and that's what I'm doing right over here let me open up my IPython shell and let me try to explain over there so range is an inbuilt keyword inside python so we are typing as for my number in my range of 3 I simply want to print out my number let's see what kind of output we are getting so we get the output of 0 1 and 2 and after we get to our for Loop is going to stop so that means our Loop ran for three times this was the first this was the second and this was the third time so this is where I am trying to implement our constraint of Maximum three attacks so here our for Loop will run for exactly three times and then it will exit let's see what we can do next now since this is a very intense fight our program has to choose a superhero and a super villain randomly so let's see how we can do that first let me put our Command and here again I want to show you one more function which is built into Python and that is called as random integers so what's going to happen is for each iteration of our for Loop we want to choose a superhero and a super villain and remember our superheroes and supervillains are listed and lists have indexes right so for Iron Man the index number would be zero for Black Widow the index number would be one SpiderMan would be index number two and Hulk would be index number three so what we are going to do is we are just going to generate a random index number and we are going to take that Superhero out of our list of superheroes and similarly for our villains as well but before we can generate an random integer first we need to import that functionality so here I can say from my package of Random I want to import something which is called as random int let us go down and let us see how to use this let me go to my iPath and shell and let me give you a small demo right over here here I can say from random I want to import my random integer and let us try and see the output of random end and let us pass the values of 0 to 10. so this time we get an 8 let us try to make it one more time this time we have a three this time we have a seven so you see that we can randomly generate different numbers so let's see how to use this inside our program so here I can say that for each iteration of the for loop I want to generate a random integer and my starting index would be 3 and my last index would be 3 now let's see why I'm writing 3 over here the first time we want to generate a random integer for our hero so let me create a variable called as hero index and assign the value right over here now let's see what's happening if you see our list of superheroes we have four elements that means the length is 4 but the index number is 3 that is why I am writing 3 right over here let us generate a random integer for our billion as well so let me create a variable called as villain index and I can use the same function random integer I want to start at 0 and at the max I want to have 2 that's because the length of valence is 3. now let's see what we can do next so what we are doing on line number 54 and 55 is we are just generating a random integer number the next thing is we can use that integer number to get a superhero from our list so let's see how to do that so let me put up a comment saying that we have a couple of more helper variables and I can say that I want to get my current superhero from my list of superheroes and the index number is the randomly generated number which we have stored in the variable of hero index so that means on line number 54 we are just generating an index number and online number 57 we are using that index number to get a superhero from our list of superheroes let us do the same thing for our villain as well so here I can say that my current villain would be from my list of villains from the index of my villain index let us try to print out the values and see what's happening so here I can say I want to print out my current superhero and I want to print out my current supervillain let us run this file so here is the output for the first iteration we have Iron Man and Proxima for the second iteration we have black widow and red skull for the third iteration we have Iron Man and Thanos so you see for each time we have a different pair who is going to attack each other and that's what we want so let us go back to our program let us display a nice message right over here so let us see I want to print using my formatted string the first thing I want to display is my attack numbers I can save my attack and let us also display the names of our superhero and our super villain who are going to fight so I can say inside my curly brackets that my superhero and let us also get the name now remember that current superhero is a dictionary and we can get the values by using our key and values and tags so I can say that I want to get the value of my key of name and then we can say that is going to fight with here we can display the name of our super villain so I can say my current villain and I want to retrieve the value from my key of name let me save it let us take out this line it's not required now and let me try and run this file so this time we have an output for the first attack we have black widow who is going to fight with Red Skull the next time we have black widow again and she is going to fight with Thanos the last time SpiderMan is good fight with Thanos what we can do right over here is instead of displaying 0 we can start from one so let me go back and here I can say attack plus of one let me save it and let me try to run the file so this time we have a much better output let us go back so here before we can attack we also need to calculate the total life so what's happening is for each iteration of our for Loop we have a superhero and you also have a villain so we need to calculate the life of our superheroes as well as our super villains for that we would need two more variables so let me go right over here and create two new variables right over here so the first one would be for our hero life and initially give it a value of 0 the next one is for our villain life again let us set it to a value of zero now we don't require this variables because remember we are using the function of range so we can simply take them out it's not required let me take it up let me save my file and let us go down right over here let me put up a comment saying that first we need to add the life for each iteration so I can say for my life and for each iteration what I want to do is this is my life of hero and I want to add the life of my current hero to my hero life for each iteration so I can say my hero life plus my current hero and from my current hero I want to get the value of his life let us do the same thing for the life of villains as well so I can say my villain life is equal to my villain life plus my current villain and I want to get the value for life now what we can do is we can also use our shorthand syntax that means we can take this out and here we can say plus equal to so this means the exact same thing let me do it for the villain life as well so let me take it out plus equal to now you see that we have an error right over here but for now just ignore this error all of this errors will go away when we Implement these characters by using classes now let's see how to implement the actual attack so let me put up a command now what is going to happen is our villain is going to attack the hero so what we need to do is we need to minus the attacking power of the villain from the life of the hero so let us do that right over here so I can say that my hero life would be my hero life and minus I want to have the attacking power of my villain so I can say my current villain I want to get the attack power we can use our shorthand syntax right over here as well so here I can take this out and I can say minus equal to let us do the same thing for the villain life as well so here I can say my villain life minus equal to the current superhero and I want to get the attacking power of my superhero now let's see what to do next so this attack is going to happen for three times and after the attack is done we need to see if we are willing or we are losing so once we are out of the for Loop let us print a nice separating line so let me put up a command and let us print a nice separating line so I can say equal to multiplied by 70. so what this is going to do is it is simply going to repeat the string of equal to 70 times next let me take it a little up and let me put up a command so this time we want to check if we are winning or if we are losing and the logic for this is very simple if the life of the heroes is greater than or equal to the life of the villains that means the Avengers have won so let us do that right over here so we can say if the hero life is greater than or equal to the villain life then we simply want to print our win message else that means we have lost so let us print out the Lost message that's it let me save my file and let me try running this amazing we have a nice output so here you can see that we attacked three times the first time SpiderMan attacked Proxima the second time again SpiderMan attacked Red Skull and the third time Black Widow attacked Red Skull but unfortunately Thanos killed Avengers and he has captured zorton let us try playing one more time so let me play one more time okay so this time we have saved it's so amazing welcome to the last video in this section now this is an extra video and I want you to come back to this video after you learn about classes I am putting this video right over here just for the sake of completeness in this video we are going to learn about enums so behind the scenes I have created a file called as choices and let us see what's going to happen now elams are the perfect data structures whenever you want to create multiple choices or varieties so let's see how to do that the first thing is we need to import enum so we can say from my package of enum I want to import enum and let us Import Auto also so I'll explain what is it all about suppose you wanted to create choices for different pizza sizes so let us see how to do that so I can say my class of my pizza size now this inherits from my class of enum let me put up some documentation and here we can say that my first choice would be for a small size and we can assign it a value of 8 the next choice could be medium it could be at 10 inches then we have one more for large it could be 12. so what this simply means is we have created an enem of pizza size and we have three choices small medium and large now let us see how to work with this enum so let me go down let us create a variable of choice and suppose the choice of the pizza size could be medium so we can say from my enum of pizza size I simply want the medium value let us print out the value on the next line so I can say print and I can say one order four now in order to get the value we can say from my enum of choice I want to get the value and then I can write inch pizza so let me save this and let me run this file and we have the output one order for a 10 inch pizza so let us go back let us create one more enum for colors of a tshirt so I can make a class and the class is for color this also inherits from my enum let me write some documentation this is for my tshirt varieties and here I can say that my first choice is red and I can give it a value of red the next could be blue and green let us also try to print out the values so let me go right over here and let me copy this line let me go down let me paste it right over here and here we can see one order for my colors suppose we want to have Green Dot we can get the value right over here and this becomes my tshirt that's it just save and run your file and here we have the output one order for a green tshirt let us go back let us create one more enum there may be times we don't require a value let me show you one example let me create a class called as role we can inherit from enum now suppose you want to create different rules for your stuff it could be a associate it could be a supervisor and so on and you don't want to assign values to them but what we can do is we can automatically give them values let us see how to do that suppose the first rule is for an associate we can assign it a value by using our imported function called as Auto now remember on on line number eight we are importing Auto and that's what we are going to use right away so what this Auto is going to do is the first time it is going to assign the value as 1 the next time it is going to assign the value of 2 so suppose we have one more role for a supervisor and we assign it to Auto so this time the value of supervisor would be set to 2. suppose we have one more rule for the manager now this time the value of manager would be 3 let us try and print it out so I can say print from my in above role I want you to go to my manager and I want you to print the value let us run this file and here you can see that the value of manager is automatically set to 3. welcome to a brand new section this section is all about functions till now we have used inbuilt functions such as print and in this section we are going to learn how to create our own functions but before we can create our own functions I wanted to talk a little bit about functions the main goal of a function is for your data processing you have some sort of an input this input goes inside your function your function processes the data and finally we would like to have some sort of an output so this is your ideal function you take an input you process it and you give back an output but in real life it's not so simple so let's try learning more about functions so let us go back to our code editor behind the scenes I've created a folder called as zero five functions and this is the file called as greater dot Pi let us see what's going to happen right now so this is a very simple program for greeting and the people in shortened they greet each other by saying Zola and Lewis wants to write a program where he can greet his friends in Zola so let's define a function and the way to define a function is by using the keyword called as def followed by the name of the function so we can say the name of my function is greda and this function accepts one argument and we can call that argument as anything in this case I am going to call that argument as name and then you put your colons and inside of this you have to write the body or the logic of the function you can also write some sort of a documentation and you can do that by using your triple quotes so you can say that this function greets Zoltan let us go to the next line and let us print out a greeting message so what we can do is we can simply print out a message we can use our formatted string and then we can say Zola followed by the name now let us see how we can Define the types for this function we can say that this function of Grita accepts one argument and we can Define the type right over here so we can say my argument has to be the type of a string and since this function returns nothing so we can say that this function is going to return none let's create one more function called as main so we can say this is my main function this function does not accept any arguments and this function returns nothing here we can create a list of all of the friends so I can create a variable called as friends and let me assign some values to it so these are all of the lists of the friends and we want to greet all of these friends we can create a very simple for Loop and using the for Loop we can call this function let me show how it is to be done but before that let me add the types for this as well so friends is a list and the data type is a string or the next line we can say that for my friend in my list of friends for each iteration I simply want to invoke the function of greeter and pass a name so what we can say right over here is for each iteration I want to call the function of Greater and I simply want to pass the friend each time now the reason why we have created a main function is just by sake of convention we always like our programs to start with the function which is named as Main now let us see how to use this function you need to invoke or you need to call this function in order for our program to run so on the next line we can invoke our main function and the way to invoke is by just writing main along with the brackets so whenever you write the brackets that means that you want to invoke the function if you just write like this it means an assignment but if you want to run that means you want to put the brackets so let me save this and let me try to run this file and here we have the output so we have Zola CC Zola Rocco and so on we just saw how to write a function and in this video I'll show you how we can write a slightly better version of our greater function first let us go back to our diagram now in an Ideal World We would like to take one input and we would also like to give back an output but let us have a look at this function called as greeter we are taking an input but we are not returning an output so let us see how we can create a better version of this so behind the scenes I've created a file called as beta greater dot pi and let us get started with this one let us go back to this file and let me copy all of these things so let me copy right from here let me go back to this file and let me paste everything right over here let me collapse my sidebar and this time let us try and return something so instead of just printing Zola followed by the name we can actually return this value so let me take out the print statement the bracket as well and here I can say that I want to return my new string so what this function is going to do is it is accepting one argument and it is transforming that string into a greeting message and we are returning that string as well now since this function is returning a value we also need to change the type over here and the type is string so what happens is when we were using the print function we were causing something which is called as a side effect but this function is a more pure function it takes one input and it gives back one output now it is the responsibility of the color function of how to handle the written data let me tell you let me show you what I mean by it but first let me write some comments so let me go right over here and put me some comments saying that the call function is responsible for the written data and here I can say that this function transform the original string to something useful and let us change the documentation as well so this function is going to return a greeting message now let us go down and let us see what's happening on line number 25 we are invoking the function of Grita and our main function is responsible for calling this function nut means conceptually you can call the main function as your caller function that means main is calling greater and now it is the responsibility of your caller function that means it is the responsibility of your main function of how to handle the return values now this pattern is very useful what if you wanted to check for the written values you can check for the written values and you can do something with it let us have a small example right over here let me put up some comments over here now suppose Lewis finds Chico to be queued so what we can do is we can say for each iteration if Chico is in the output of my function of grida so greater and friend now remember our function of Grita is returning back a string and if that string contains Chico then we can't print out something like this so here we can say that print is cute or else we can simply print out the message as it is so here we can simply print our glitter and friend so what's happening is for each iteration our function of Grider is returning back some values and that value is Zola followed by the name of the friend so for the first iteration the return value is Zola CC the second time is zolaroko and the third time is Chico and so on but since the function of gritter is returning as data we can handle that data in multiple ways so first let me run this file and then let me try and explain you again one more time so here we have the output that Chico is cute so what's happening online number 27 is let me open up my IPython shell so here I can see if Chico in Sola Chico then we have the answer as true if we say something like this Lewis in zorachico the answer is false and that is what we are doing on this line suppose the output of this function is zorachico that time we simply want to print out a message saying that Chico is cute so basically what we are trying to do is our caller function is handling the response of glitter in multiple ways let's have some more practice with our functions for this video Behind the Scenes I've created a file called as weight dot pi and let us see what's happening now since Lewis is staying in zorton gravity Works differently over there and this time we want to calculate how much you wait in zorton and this is the formula to convert the Earth's weight to salt and sweet let me go down over here and let us Define a function which is called as calculate weight this will accept one argument which you can call as weight we can Define the type as a float because your weight can have decimal values so let me write the type the float and this function will also return the float value inside the body of the function we can have one single return statement and we can say that I want to return and here we can calculate the weight by using the formula so we can see the weight plus of 32 divided by 8. now let us try and print out the weight so let me write a very simple print statement we can use our formatted strings so you can see U way and inside the curly brackets let us invoke the function so I can say calculate weight and for example let's pass 60 kgs and then you can see kgs on zorton let us say this and let us try running this program so here we have the output saying that you weigh 11.5 kgs on certain let us go back I wanted to show you one small trick what happens if we want to display exactly two decimal places or three decimal places and so on the way to do that is right over here so here we can say that I want to display my two decimal places for the float receive a file and drive Renegade for the last time and here we have the output so you can see we have two decimal places let us have a look at the next example this time I am working on this file called as fly dot pi and let's see what's happening this time now we just saw that gravity insulting is much less as compared to Earth so what happens is if you weigh 15 kgs or less then you can actually fly on certain so what Lewis wants to do is Lewis wants to see which of his friends can fly so let's see how to work with this one and there is one very important concept which is called as single responsibility principle and let us see what do I mean by this principle in this video so as a convention let us create our main function first and from there we will create functions as we require them so let me Define my main function so I can say my Define and Main this function does not take anything and it returns none so I can write none over here now inside of this function let us create the friends of Lewis so let me create my dictionary of friends and let me assign some values to it so here we can see that we have a couple of values cc is being 54 Rocco is being 88 and so on let us also write the types for this one so friends is medicinally the keys are strings and the values are integers what we can do over here is instead of just declaring integers we can also write a float so in case if you have a decimal value in the future we can easily handle it if we declare it as a float next let us create a function called as flying friends and see which of the friends can fly so I can say my function of flying friends and we just have to pass the dictionary of friends now let us go up and let us start creating our functions so as you can see there is one small constraint and that constant is you have to weigh 15 kgs in order to fly so what we can do is we can create a constant so let me call the constant as maximum flying bit and we can assign it a value of 15 let us also Define the type for this one so since this is a constant it has to be declared as final but before we can write final we need to import it so here I can say that from typing I want to import final and here we can use the keyword of final so our maximum flying weight is a final and the pipe we can Define it to be a float as well now let us go down and let us create the function for flying friends so here we can say that Define flying friends this takes one argument let us call that argument as friends and and as you can see on line number 28 we are passing the argument of friends and the type of friends is this one is dictionary string and Float so let me copy this right from here and let me go back to my line number 18 so we can Define the type right over here so this friends is going to be a dictionary and this function is not going to return anything so I can just write none let me also write some documentation for this function so what this function is going to do is this function is going to display all of the flying and nonflying friends now remember that this function is creating a side effect this function is not going to return anything that's why we can say that this function creates a side effect now let us go down and let us Define the body of this function so here what we can do is we can use a for Loop to iterate over the friends and see which of the friends can fly or not so I can see for the name and Earth weight in the dictionary of friends we want to get all of the items now remember that the keys are the names so if you see right over here the key is the name that's why I'm naming this parameter as name and the values are the weight so that's what I'm calling as Earth weight right over here so for each iteration the first thing that we want to do is we want to calculate the weight in certain so let me create a variable called as zort and weed and here we need to calculate but for calculation let us create another function called as calculate weight so let me write the function first and then we will create it so calculate weight would be my function and I need to pass my Earth weight to it now let us go up and Define this function we have defined this function in our last video so let me open up that file right over here so the file was called as weight dot pi and I just have to copy this go back to my current file let me collapse my sidebar and let me go to the top and we can paste it right over here let me also add some documentation so what this function is doing is this function is calculating your weight in zorton so this is an example of data transformation it is taking a weight in kgs and it is returning the same weight but in short and in weight you can also say that this function is a pure function since it takes one input and gives back one output now let us go back to our function of prime friends so on line number 36 we are able to calculate the weight in zorton now the next thing to do is we just need to check if we can fly or not so here we can say that if and here we need one more function to check if we can fly or not so first let me write it and then we will create the function we can call that function as can fly and we need to pass the weight in shorten so let me pass my zorton weight now let us go up and create this function as can fly so just let me go right over here and I can Define my function as can fly this function accepts weight and the type would be a float and this function is going to return a Boolean value let me write some documentation for this as well so the only responsibility of this function is it is going to see if you can fly or not that's why we have the written value as the Boolean so this function is also a very nice example of data transformation so you can see that we are accepting a data which is of the type of fluid then we are transforming the data and we are transforming from a float value to a Boolean value let us see how we can write the body of this function now the body of this function is very simple we just have to say that we have to return if my weight is less than or equal to our constant of Maximum flying weight so what we are doing is we are basically composing functions where each function has only a single responsibility for example this function of can fly the only responsibility of this function is to say you if you can fly or not now the only responsibility of this function calculate weight is just to transform the weight from the Earth to the Sorting in weight now let us go back on line number 47 we have created this function can fly now this function is retaining a bull value so we can use it with our if and else blocks let me take it a little up so here we can see that if the friend can fly then we can simply print out a nice statement saying that here we can put the name and then you can display the weight in zorton and then we can say kgs can fly on Jordan else that means the friend can't fly in that case let us print out another statement saying that the name followed by the certain weight can only walk on zorton let us save it and let us try running this file but before we can run this file we have to invoke our main function so let me go at the bottom and here I can say that I want to invoke my main function so I can say mean followed by our brackets let me save it and now let's run this file so here we have the output CC the weight is 10.75 in shortened so she can fly but for Nico Nico weighs 16.75 so he can only walk on zorton and similar with zico as well so getting back to our program what we have done is we have seen how to create functions which can have a single responsibility principle now let us understand one more very important part of functions and that is how we can work with variable arguments and variable keyword arguments let me create a file over here and let me name it as arguments and keyword arguments that means args and kwarts for short let me put up some comments the first thing that I want to show you inside this program is all about unpacking first we will see how we can unpack a couple of data structures in Python and once we understand unpacking then we can move to the variable and the keyword variable arguments so the first thing that I want to show you is all about unpacking suppose you have a tuple like this Lewis and Zappa you can unpack the values of this Tuple in a single line so on the left I can say that my Lewis would be my first name so I can write fname and Zappa would be my last name so I can say l name and that's it this is called as Tuple unpacking Lewis would be assigned to this variable and Zappa would be assigned to this variable just to confirm let us print out the values and see what we are getting and you can see we are getting the right values now let's see how we can unpack a list suppose you have a list like this and I want to unpack this list but while unpacking I only want the first value inside a variable and I want all of the rest into a separate list we can do this by using a special syntax so I can say first then I can say star rest of the values is equal to my list so let's see what's happening the first value that means cc is assigned to this variable and Roku Chico and Nico inside a list is being assigned to this variable we can name the variables whatever you want let's try to print out the value and check if we are getting the right output or not let me run the file and here you can check the output let me take it up the first value is CC and that's what we are getting right over here rest is a list of all of the remaining values Rocco Chico and Nico that's what we have right over here next let us see how we can unpack a dictionary suppose we have an existing dictionary like this so this is for specifications type is dynamic optional static typing and it is found everywhere let us create a new dictionary and let us try to unpack the existing dictionary into it so let me call the new variable as Lang and I can see name is python now I can unpack the entire dictionary right over here by using a very special syntax so I can say star star followed by the name of the dictionary that we want to unpack so the name of the dictionary is specs that's it let us print it out and see what we are getting and as you can see we have the right dictionary so the name is Python and here you can see we have unpacked the entire other dictionary as well now let's go back to our program now let's try to think of a situation where we would use this functionality suppose we have a function and this function has to accept unknown number of arguments at that time we can use this functionality now suppose we have a function called as unknown friends and we don't know the number of friends that we are going to get in the arguments so here I can see that we are going to receive variable argument and that variable argument I can declare by writing so star and the name of the variable as a convention whenever we are getting variable arguments we name that variable as args now let's go to the body and see what we can do with this one let's try to Simply print out the values so I can say for my friend in my arguments I simply want to print out my friend oh it has to be friend not friends so this looks good now let's see how we can add types to this function by default python is going to pack all of the variable arguments inside a tuple so essentially what's happening is this argument is going to be of the type of Tuple and since this function is not returning anything this is going to return none let us invoke this function on the next line so I can say my unknown friends and here let me pass a couple of friends so I am passing an unknown number of friends now adding type in to this variable it's a little tricky because by default RX is a tuple but we can say this Tuple is of the type of string and that's it this is how we would add type hints to our variable arguments this simply means that our variable of args is a tuple and the data type inside the Tuple is of the type of string let us try to save this file and let me try to run it and we have the right output we can see all of the friends right over here so all of these friends are coming from this line right over here line number 33 now similarly we can also accept keyword arguments now what do you mean by keyword argument first let me write the program and then I will explain what exactly I mean by a keyword argument so let me put up a comment so suppose we have a function called as unknown product and this function accepts a variable keyword arguments so that can be denoted by two stars and by convention we always name the variable as kwarjs that means keyword arguments now let's see what we can do inside the body of this function now what python is going to do is it is going to pack all of the keyword arguments in the form of a dictionary so we can simply print out the key and the value from our keyword arcs dot items and let us print it out I can also write this in a short form V for value and K for for the key and here I can simply say I want to print out my key and my value now let me try to invoke this function by passing keyword arguments so this is the place where all the things are going to get cleared so I can say my unknown product and the keyword arguments would look something like this name is equal to Pizza price is equal to 3.99 topping is equal to olives and so on so you can see all of the arguments are in the form of the key and the value the key and the value so that's why we call this variable as a variable keyword argument by default it's always going to be in a form of a dictionary now let's see how we can add types to this one now adding types for this one is really very tricky if you see our keyword arguments the first one is a string the next one is a float the last one is a Boolean so we don't know what kind of argument we can get inside the dictionary so this time what we can say that the values can be anything so I can write the type as any and let me import any from our typing Library so on the top I can say from typing I want to import any so what this really means is since we don't know the value of the type of the dictionary we are going to accept any kind of a value and since this function is not going to return anything we can say that the return type is none let's try to run our program and here is output let me just take it up so for the variable keyword arguments we have name price toppings and extra cheese and that is what we have right over here now let's see how we can combine both of these Concepts together that means let us combine the variable arguments and the variable keyword arguments in a single function so let me put up a comment over here suppose I have a function called as invoice wherein I am supposed to generate an invoice for a product but I don't know what is the product I don't know the characteristics of the product then how do I handle this situation so let's see how we can Define the function the first argument can be the name of the product so I can simply write as product the type is going to be a string after that since we don't know what the product is all about or the different varieties of the product we can simply write that we can also accept a variable argument right over here now suppose the user gives an argument in the form of keywords we can handle that situation as well by using our keyword argument so we can say double star keyword and args and this time let us simply print out our product arguments and our keyword arguments so I can say I want to print out my product let me copy and paste then I want to print out my arguments then I want to print out my keyword arguments now since this function is not good written anything so I can say that it's going to return none now let's try to invoke this function so let me go down over here I can say invoice my product would be sneakers now suppose the sneakers are available in black and white color so I can give a variable number of arguments so I can say black and white we can also Define a couple of keyword arguments over here suppose we know the name of the brand so we can say my brand is equal to me bits Nike the category would be my Air Jordans price could be 899.99 dollars in stock would be a Boolean value and let me assign it a value of false these stickers are not in stock let me save my file so as you can see my formatter which is black it automatically formats my file now let me save the file and let me run it for the last time and here we have the output so let me just take this down the product is our stickers so that's what we are getting over here now this arguments by default this is going to be a tuple so that's why we have a tuple over here and the keyword arguments this is always going to be packed as a dictionary so that's why we have the last line as a dictionary there is one more important concept that I want to cover and after that we can move on to our game this concept is called as your local and Global variables for this I want you to create a new folder right over here and I want you to call that folder as scratch pad you can utilize this folder for adding small programs and for doing small experiments I always create and use a scratch folder let's create one file inside of this folder and let me name it as variable Scopes let me put up a heading right over here so we are going to talk about global and local scopes for that let us try to understand One More Concept all of these files that we are creating these files are technically called as modules so in the world of python all of these files are modules now let's go back to our file inside our module if we declare a variable like this num is equal to 10 that means this variable has a global scope that means anyone inside our module can use this variable any function or any functionality or any variable inside the module can use this variable so let's create a function called as print Global num and this is simply going to print out our number let me save it and let me invoke it right over here so I can say print Global number we can do a slight improvement over here we can use a formatted string and we can say Global number is and this is my number now let us try to execute this file and we have a output saying that the global number is 10. now let us see what happens if we declare one more function and if you declare the same variable inside that function so let me create a new function by the name of print num this does not accept anything and inside this function let me assign a value of 20 to the variable of num and let us try to print out and see what values we are getting over here so I can use my formatted string my local number is the now let us invoke this function and let us see what we are getting let me run this file and here is output now watch closely what's happening on line number eight we have declared that the num is 10. and on line number 16 we are saying that num is equal to 20. now what happens is whenever python sees we have the same variable python is going to create a new variable called as num and this variable is available only inside our variable of print num and that's it so this is also called as variable shadowing now please keep in mind that this variable shadowing can introduce a lot of bugs and this bugs can be really difficult to debug just to demonstrate let me go right over here and let me say I want to print my num let me save it and let me try to run it so here you can see the global num is 10 but on the second line the local number is 20. and this 20 is coming from our line number line number 17 so this variable is accessible only inside this function and it is not valid outside outside only this number that we have declared on line number eight is visible that's why we are getting the output of 10 right over here now let us see how we can access This Global variable and how we can do some operations on it let us create a new function by the name of increment number here we simply want to increment our number by 2 so we can say my num plus equal to 2. but what's happening right over here is python is seeing that we are doing some sort of an operation on num so python is going to create a new variable we want to increment the global num so we have to explicitly tell python that hey python I want you to use the global num and that's it let me put up some comments so I have a comment for this one and this one is my function or my local scope and this one for my Global declaration let me save it now let me increment the number and then we can print it out so let me say that I want to increment the number let me save it and let me try to run it so this time you can see the global number is 12. now let's see one more behavior of the global number so here let me create a new function by the name of increment my local num and here I am saying that my new number is is equal to my existing number plus of 10. and let me print out my new number right over here now can you tell me what is going to be the output of line number 13. well we don't have to guess we can simply run the program and let's see what output we are getting so let me invoke the function right over here so I can say my new function I want to invoke it let me save the file and let me run it so as you can see I am getting the output as 22. let us see what's happening right over here so as you can see on land number 29 the value inside num is 12 you can see that's what it is and since we are creating a new variable and we are trying to assign value to the new variable python is taking this num from the global scope in the global scope the value is 12 and we are trying to add 10 that's why the new number is 22. in the next video we will go back to our game and let us see how we can divide all of the logic into small functions now let's see how we can use functions inside our game so I want to do just copy this file from folder number four to our folder number five and I want to just rename this file from number 2 to number three and that's it and let me also change the documentation for this module in this video we are going to concentrate on two main things the first concept is called as dry that means don't repeat yourself what this means is whenever we have some kind of a logic that is repeating at that time we want to take the logic out and put that logic inside a function and we can keep on using that function wherever we require it the next one is what I've already shown you this is called as single responsibility principle that means we want to Define our functions in a way that one function will ideally do one job at a time let's see how we can do all of these things let me go down over here so here you can see that we have a list of all the superheroes and all of our super villains so what I can do is I can create a function that will return the list of all of this superheroes and supervillains as well now why do we need to do this the answer is we want to isolate parts of our program suppose you are working in a team and you don't want any other developer to add or subtract from your list of characters so that's why we need to have some sort of an isolation so let us create a function for superheroes and supervillains as well let me put a comment right over here so this block is going to be for my superheroes let me Define a function called as get all superheroes this is not going to take anything and let me take all of these things inside my function and since I am going to return a list of superheroes I will also cut my line from 51 and I'll put it inside my function which is right over here I also need to return my list so I'm going to use the keyword of return and I want to return my list of superheroes now since my function is returning a list of characters so the return type of my function would be like this so this function is going to return a list of characters till now I have been using this keyword of final because I just wanted to show you that whenever we type everything in capital that symbolizes a constant and we don't want to change the value in the future but these days your code editor and my pack is smart enough to infer that if we write everything in capital we can actually skip writing final so I am just going to take it out what I can do is I can just leave Final on this line number 40 just as a reference for you and let me take it out right over here and this one and this one let me see my file if you just hover over any of the variable you can see that we have the word of constant that means my pi and your code editor they are able to correctly in for that this is a constant let us create one more function to get a particular superhero in this function we can get all of the superheroes but what happens if we want to get a particular superhero and remember this is a list of superheroes so we can get a particular superhero if we know the index suppose the index number is 1 so we can return Black Widow if the index number is 3 then we can return Hulk and so on so let's create a function to return a single superhero let's create a function right over here so I can say Define a function called as get superhero this function is going to accept one parameter called as index of the type of integer and let us see what this function is going to return this function is going to return a character but what happens if we can't find a character in that case we also have to return none so this function is either going to return a character or it is going to return none let's see how we can implement the logic let me add some documentation right over here but before we can get a superhero we need the list of our superheroes but that's pretty easy we just created an entire function for this so I can just say that my superheroes is equal to the function get all superheroes and that's it we have the list of all our superheroes now let's see the logic of getting a single superhero from the list of superheroes we already know how to work with indexes but this time we have to be a little more careful what happens if we get index number which does not exist in that time our program will panic and it will exit but we don't want this kind of a behavior let me go to my IPython shell and let me show you what I'm talking about suppose I have a list called as my characters would be a b c and d here you can see the length is 4 so I have four characters so the length is four but my index number stops at 3. so this is my index number 0 index number one index number two and index number three we don't have a index number four now what happens if I say I want to get characters on my index number 4. this is going to cause an error let's see what's happening so as we can see we have an error and the error is the index is out of range and we want to avoid this situation inside our program because we don't want our program to panic and exit so let's go back and here we can say if my index so if my index is less than the length of my list of superheroes only then I can have the right index number so here I can say I simply want to return from the list of superheroes the superhero at the given index else we have some issue and here I can return none because we can't find a superhero let me just save my file let's do the same logic for our super villains as well let me put up a comment these blogs are for my villains let us Define a function get all villains this is going to return a list of my characters and let me take all of these things inside and then I also want to return my list so return villains then we want one more function to get our single villain so let me copy and paste this block so this goes right over here this becomes from superheroes to villain and that's it so now we have a way of getting a particular character and and how to get a list of our characters now let's see where we can use this logic the place where we want to use this is right over here on line number 98 and 99 here you can see we first generate a random index and after that we want to get a superhero given that index let me use the function right over here but before we can use this function as we can see we have a block for the attack we can create a function for the attack and we can isolate this functionality as well so let's start doing that so let me add a comment saying that this is the main Logic for the game and I can define a function called as attack this is going to return nothing so I can say none and let me take all of these things inside my function so all of this things goes inside my function let us change this logic so this becomes I want to get super hero from the given hero index and this becomes and get my villain from the given index just save a file and you can see we have a bunch of Errors let's start addressing this errors one by one first thing that I want to change is this variable what I mean to say attack is the attack number so we can improve the name of the variable from Attack to attack number let me change right over here as well so as you can see inside my print statement I'm using this variable so this also needs to be changed from Attack to attack number there is one more final point that I want you to think if you see at the definition of our get superhero we are returning a character or none so what happens if we don't have a superhero or if you don't have a villain in that case we can't have a fight let's create some logic to handle this as well so here after this line I can say if I have a superhero and if I have villain so my current villain only in that case I can do something let me write a comment over here so if you have a superhero and we have a super villain in that case we are going to have the attack else that means we don't have a superhero we don't have a super villain that means we have an error so let me print out a message saying that error no superhero or villains to fight now let us go to this line land number one or four what happens if we have a valid hero and a valid villain then we need to have an actual attack so all of this logic from line number 108 to 117 should go right over here but we are going to create one more function to simulate the attack if you're wondering why do we require so many functions the answer is for flexibility if in the future you have some more characters if you are fighting seeing changes then you can change only a single function and the changes would be reflected throughout your program so we want to have our program as modular as possible that's the reason why we are creating so many different functions first let me invoke the function and then I will Define the function so the function would be called as simulate attack similar attack now let's see what we need to pass to this function the first thing that I want to pass is my attack number we can have only three attacks so that's why we have the range of three over here so I can say the first parameter I want to pass is my attack number then obviously we need the superhero and we also need the super villain now let's go down to line number 107 and let's create this function so let me just copy all of this let me go down let me create a function let me say that Define function put my codes let me add a command I also need to adjust the spacing because this is out of format now let's work on this function so here I don't need the word of current this has to go this also has to go it has to go from everywhere so let me do a multi select so this looks good let me save my file everything is looking really good let me put a comment right where so this is a place where we are setting the life this is where we print some nice message and this is the place where the actual attack is taking place but I'm not really happy with this logic here we are manually adding and we are manually decrementing let us create functions for this as well you must be thinking that I have gone crazy why do we require so many functions let me ask you a question suppose tomorrow the logic of the game evolves and you have some bonus attacking power or you have some bonus life then what do you do so at that time you simply have to change the logic in a single function and that's it so let's develop this habit of making the logic inside different functions as possible and let us try to stick to the principle of single responsibility function that means I want my function to do only one job and also in the future when we learn testing at that time testing functions becomes a much more simpler job so let's see what functions we are going to require we are going to require one function to increment the life of the superhero want to increment the life of the villain and then one more to decrement the life of the villain and one more to decrement the life of the superhero so we require four different functions to do all of these things so let me go to the top and uh here just below the characters let me put up a comment so this block is for the live let me go below and I want to take this variables to the top as well so let me paste it right here and here we can start creating our functions the first one was to increment the hero life so this function accepts life which is all the type of integer and it returns nothing so it has to return none let me put a comment now let's see how to use the logic inside of this here I have to operate on this variable and if you remember the last video this variable is defined on a global scope that means I have to use the keyword of global to reference this one so let me go down over here and let me say that I want to use the global variable of hero life and let us increment the life so I can say hero like is equal to plus my life and that's it we can also use the shorthand syntax so I can simply say plus equal to so let us copy and paste this one and this time let us decrement so I can say decrement this becomes decreases this becomes minus equal to and let us do the same thing for our villain as well so let me copy all of this and let me put it over here and my hero becomes villain so let me do a multi select and this becomes my villain let me copy and paste this one for the last time so this one to decrement so this becomes decrement decreases minus equal to let me save my file everything is looking really good let us go down and see what we are supposed to do next now once inside our function of simulate attack let's see how we can use this functionality but first let us set the types for our function definition so the attack number is my integer my superhero is my character villain is also of the type of my character and this function is going to return nothing so I can say none now let's use the newly created functions so we can use the function right over here so I want to increment the life of superheroes let me grab this let me take it out and write the name of the function this was to increment the hero life same thing will happen here also let me take it out put inside my brackets I want to increment my life of the villain let us do the same thing so here first I want to decrement the life of the hero so let me put this inside my brackets and I can see I want to decrement the hero life and let us do it here as well and here I can say I can decrement the villain life just save your file and we can see we have a couple of Errors so let's see what's happening so what's happening is my Pi is complaining because of incompatible types for now you can ignore the error but let me try and explain what's happening all of these errors will go away when we convert all of the characters into classes in the future videos but right now what's happening is if we go to the definition of our character here you can see the values can either be a string or an integer this is the thing that my Pi is trying to complain is saying that we can't add or we can't subtract strings right over here so that's why it is showing this error so let's move on and let's go to the next block so this is the place where we are seeing if we have lost or if we have won the game we can create a function for this as well so I can put up a command saying that this is for my final game status and let us Define a function called as win or lose it's not going to accept anything and it is going to return nothing let me take all of these things inside we can slightly improve the code as well on line number 164 and 166 we are printing a statement so let us get those variables inside our function so here they are let me take them out and and let me paste it right over here they have to have the right formatting let me put up some documentation right here and a little space let me save and see if everything is all right or not everything looks good and we have a very nicely typed program the last thing to do is just to Define our main function and we simply have to invoke it writing the main function is the most simplest thing so we can just say let me Define my main function this is also going to return nothing so this is the place where we would start the game first thing is we want to have an attack the next thing is we want to check if we have lost or won and that's it the last thing to do is we simply have to invoke this function so I can just say main just save a file and let me just browse if we have some errors or not we can ignore this error as I have just explained but let me check if we have some errors no no everything is looking beautiful all right so let's go down and let us try and play this game beautiful it looks like I have defeated Thanos in the first try itself it's amazing hi we are officially at the end of this section but I have decided to add one more bonus video now this bonus video is all about teaching you higher order functions now learning higher order functions can be a little bit challenging for beginners so I want you to just sit back and relax and just watch as if you are watching a movie if you can understand the concept then it's really amazing if you can't there is nothing to lose and normally it will take you multiple attempts maybe twice or Thrice before you can understand the concept and which is perfectly fine I don't blame you for that the concept itself can be a little more challenging so just enjoy and see if you can get it welcome to the world of functions let's start by understanding what are functions and how they are managed inside our memory so suppose we have a couple of functions so here I have defined two functions one is hello and the next one is good morning so these are pretty simple functions now let's see what's happening inside our memory so this green area would be our memory now please keep in mind that this is a very simplified version in actual life things are much more complicated let's see what's going to happen now when python comes across this line number three and four it is going to create a function called as hello inside our memory so this is what is happening we have a function called as hello inside our memory now the next question is how does python know how many functions it has created inside the memory the answer is python gives each and every object a unique ID now what do I mean by an object object is a generic term just like all of us are human beings but we are also animals same thing anything inside the world of python is an object a variable is an object a class is object a function is object anything is an object inside the world of python so let me say python is going to create an object which is also type type of function inside the memory and the way python is going to keep a drag of all of the objects inside the memory is by giving each one of them a unique ID it's just like us every one of us has a unique passport number so you can say each one of us has a unique ID as well the next question would be how does python know where does the object live it knows because it allocates some address to the object it's just like us every one of us has an address similarly inside the world of python every object which is created inside the memory also has an address and this is how it looks like now this format is a very special format it is called as hexadecimal format you can see this address always starts with a 0 followed by an X so whenever you see this format it means it's an hexadecimal format it is just a way of representating the memory inside our computer now what happens when python goes to next line line number seven it sees that we have another function so it goes back to the memory and it creates another function by the name of good morning now good morning also has a unique ID and it also has a unique address so for example we can say good morning has this address right over here we can see this in action inside our IPython shell so let me open up my IPython shell so here it is so here I can see my definition of hello it's simply printing out hello world so here I'm just creating a very simple function let us see the ID of this function so I can simply type I want to see the ID of my function called as hello so this is the unique ID of our function you can also ask python to reveal the type of this object so you can say I want to see the type of hello and the type is a function if you want to see the address then we can say I want to see the hexadecimal of the object which has an ID of hello and here it is so this is the address of hello inside our memory let us create one more function so let me Define a function called as good morning and on the next line I can say I simply want to print good morning so we have another function let's see the idea of good morning now you can see we have a different ID this ID ends in 144 the idea of hello was 0 3 2. let us also check the address of this one so I can say hex ID of good morning so you can see we have a different address so this is F7 F0 and here it was b370 so that means hello and good morning are two different objects with two different ID and with two different address inside our memory Let Me Clear My terminal and now watch closely what happens if I create a variable called discrete and if I assign it the value of hello and if I try to invoke greed we have an output called as hello world so what's this what's happening behind the scenes now let us go back to our diagram to understand what's happening what's happening is python is actually playing a trick with us so this is the variable which we just created but if you check its address it has the same address as hello so in short what python is doing is it is just creating a reference to hello so the grid variable is just referencing the function of hello it's just like sharing your house and when we invoke this function by using brackets so when we use the bracket that means we are invoking here you can see I don't have the bracket on line number 33 I am just assigning the function of hello to grid and on the next line I am using brackets to invoke the function and when we invoke the function we get the output of hello world so what happens is when we invoke grid it goes back it says that grid is actually referencing hello and behind the scenes it's this function which is being executed but on the scene it looks like it's the function called as grid which is being executed now let's get back to our code editor and start writing some code what I've done is behind the scenes I have created a new file called as Hof this stands for higher order functions Dot py and I have created a couple of comments for us the type of function is also called as callable because this object can be called we can give some arguments to it and we can get some values from it that's why in the world of python functions are also called as callables if you're thinking why do we need this kind of a functionality the answer is till now we have been passing data to the functions but sometimes it can be very expensive so what's the solution the solution is passing the function to the data you have to just start thinking in Reverse so what we are going to do is we have some data and we would be passing functions to it imagine you have terabytes and terabytes of data it would be so expensive to transport all of this data from one server to the another server just for the sake of computation instead we can simply pass a function to the data and we can get our job done much more easily so let's start by creating the same function called as hello right over here so this is the function that we created the next point I again want to reiterate that function is just a regular object of the type of function there is nothing special about it now let us print let us also try to print the ID of hello and let us also try to print the type of let me run the file so here it is let me take it up a little bit okay so when I'm saying I just want to print hello so hello is a function which is present at this address the ID is this one and the type is actually a class of the type of function let's get back and see what else we can do now let's try to create a variable and assign the value of hello to that variable so let me put a command and let us create the variable called as grid and let me assign the value of hello to it again remember I'm not putting my brackets over here because I am not invoking the function I am just assigning the function hello to the variable of grid now let us try to invoke the function of grid so let me write grid with the brackets let me save the file and let me try to run the file so here we have the output of hello world let us go back and see how we can add types to all of this variables I just explained that hello is also called as a callable inside the world of python so the type of grid is actually a callable type let me go up and let me see that from typing I want to import callable now let us go down let us start adding our types right over here so grid is of the type of callable now if you see the function of hello it is not taking any arguments and it is returning none so what we can do is callable let us put some brackets this means that grid is of the type of volleyball and inside this brackets we have to specify the input arguments and the output of the function and here inside the square brackets the first argument is always a kind of list and the second argument is the return type of this function now let's see how we can add the types hello it is not accepting any arguments so the first argument to callable would be empty next our function of hello is returning none so here after the comma I can say it's a callable which returns none and that's it we have a nicely typed function as well let me add some comments just for the sake of reference so here we are just assigning the values and here we are invoking the function let us see what else we can do with our functions let me put a separator and let me put some comments so this time we are going to create a universal gritter remember I just explained the concept that we can also pass the functions to the data that's what we are going to do right now I am going to create a universal greeter that takes two arguments the first argument would be for the name and the second argument will actually take a function now suppose you want to grid Zola then our universe are greater function will grid as Zola if you want to create as good morning then our function will great as good morning if you want to create as goodbye then our function will great as goodbye sounds awesome isn't it so first let me type all of the functions and then I will try to explain all of them let me create the first function called as Zola so what this function is doing is it is simply taking one argument and it is returning a Grita in the form of Zola followed by the name let's create one more function for good morning the next would be for goodbye now let's create our Universal Creator function so let me put up a comment over here and I can see my Universal greeter so this function is going to accept two parameters the first parameter is the name and let me get the spelling right string the name is of the type of a string now what should be the next argument the next argument is of the type of a function let me name it as greet up the type of this is callable now let's see how we can Define the types inside callable look at all of the functions which I have created Zola good morning goodbye the function signature is common all of these functions accept only one parameter that two of the type of string and all of this function returns a single argument which is also of the type of string so that's what I am going to pass right over here let's see how we can Define the types so the first argument is a list and the second argument is the return type all of the functions are returning strings so I can just write string over here and all of the functions are also accepting a string so inside my inner brackets I can say string so this is called as a function signature all of this function except one string and return one string same thing we are saying over here our callable accepts one string and returns one string now let's see how we can Define the body of this function let me add some documentation now here you will be amazed it is just two lines function the first thing that we want to do is let us take the function of Grita and pass it the argument of name that's it that's the entire Logic Let Me assign the output to a variable called as message on the next line let me simply print it out just save a file let me try to run the file and after that I will again try to explain what's happening but before that I want to comment all of these things let me comment out all of this I don't need all of these things the grid function as well let us invoke our Universal greater function and then we can have a nice output so let me go right over here and here let's see how we can invoke the function so let me say Universal greeter my name is thallium now let's see what we can pass as the second argument if you see right here my IDE is telling me that Glitter is also a type of function these brackets it denotes a function it takes a string and it returns a string so basically we can pass any functions that satisfies this signature and luckily all of our functions Zola good morning and goodbye satisfy these conditions so we are going to pass one by one inside the universal reader for the first one let me pass simply as Zola now remember I don't have to put brackets because I am not invoking I simply have to pass my function and that's it let me copy and paste let me take a little up the second one would be good morning the last one would be goodbye that's it just save a file and let's try to run it and hopefully this time we should have a nice output wow it's so amazing single function can produce multiple outputs now let's see behind the scenes what's exactly happening for example let us take just this line line number 65 so Zola is actually a function and this is how it looks now let's go back to our definition right over here this Zola comes as a function called as greater inside our function now this greater is just a reference to the function of Zola let me open up my diagram one more time so imagine this to be our greater function and this to be Zola so greater is just a reference to Zola and whenever we invoke this function behind the scenes the original function is being evoked so let me go back to my code so you can see on line number 61 we have a new variable called as Grita so this grid is actually a reference to Zola we pass one argument of name to the function this name goes right over here and if you see the function definition we are returning a string called as Zola followed by the name we are saving this string inside a variable called as message and we simply want to print it out this is happening with each of the functions the second time what happens is we are passing good morning now the second time this greater over here this references good morning and what good morning is doing is it is simply returning a string good morning followed by the name if we capture this output inside this variable right over here and we are printing it out and the same thing goes with goodbye as well that's the reason why every time we have a unique output first time grida was referencing Zola so we have Zola octallium second time it was good morning so we have good morning octallium and the last time we had goodbye so we have goodbye octallium sounds pretty neat isn't it now let's get back and let's try to learn a little bit more about functions let me put a separator a function as we saw can accept a function but a function can also return a function now this part really took me a couple of attempts to understand so if you can't get it don't worry you will eventually get it so let's go down and let's see how we can create a function that accepts as well as returns a function let me put up a comment let us see how we can create a function that will return us a function let me Define a function called as add WiFi this takes one argument number which is of the type of integer now since this function actually returns a function so we can say this is going to return a callable and we will Define the types A little later on right now just go ahead and let us type the body of the function let me add some documentation now what I'm going to do is I am going to create one more function inside this function so let's create one more function let me create a function called as by 5 and this actually does not accept anything and this function returns an integer inside this let me say I want to return the number that we get right over here so I want to return that number plus of 5 so this is the function inside this one and since our outer function it has to also return a callable so we need to have a return statement and this time I am simply going to return my function which is going to be this one called as WiFi first let us see the type hinting and then we will try to understand what's happening so let me go back to this line so we know that this function is supposed to return a callable type now this callable type is actually this function so now we can start adding types to it so here goes my brackets first one is for the inputs after the comma is for the output this function is returning an integer so let me write int over here and this function is not accepting anything so this argument remains blank just save a file so this is also called as your higher order function let's see how we can work with these functions let me say that a new variable called as sum is equal to my function of add by Phi is let me pass a argument of 5 if it is hover over right over here so your IDE is also telling you that the return type is a function which accepts nothing but returns an integer so what's happening is a variable of sum now this is referencing to this variable which is inside we can also invoke some and let's see if we are getting the right output or not so I can say print and sum and that's it the reason why we are not giving any input right over here is because sum is referencing this function right over here and this function does not accept any argument that's why it is blank let me just save it and let me try to run this file and here we have the output of 10. so this Phi plus this Phi is equal to 10. well we can also written a function that accepts an argument that means we can create a function which can actually accept something and do with the data so this time let us create a new function called as universal adder but this Adder is going to be a little unique this Adder is going to add to numbers and subtract by one it's our own addup so let me go down over here let me take it up let me add a comment and let us Define a function called as our unique adder now this accepts one number so this is going to be our first number so let me call it as num1 the type is integer this also returns a callable we will add types shortly let me add some documentation now let us create one function right over here but this function is going to accept another number and we are going to return this number plus another number minus of 1. so I can say Define our adder this function also accepts one argument let me call it as num2 type of integer and this one returns an integer and let us place our logic right over here so since this is a unique Adder what we want to do is we want to add the first number the second number and minus of 1. let us go below and complete the function by adding our return statement so we can say this function right over here this is going to return a callable and this time this callable is going to be Adder so we can say return Adder let us Define the typing for this one so our brackets one more brackets inside for the input argument and the next one for the written argument let us see this function this function is returning an integer so we can say integer right over here and this function is also accepting one integer so inside this brackets I can say integer and that's it we have a beautifully typed function as well let's try to invoke this function and let us see if it is doing its job or not so my order would be my unique Adder let me pass one argument of five and as you can see this is returning one more function and the function signature is integer returning an integer let us print out the value let me use my print statement adder and here I want to give my next number so I want to add Phi and Phi let us see what output we should get so I want to add my 5 with my 5 but minus of 1 so the output should be 9 so let me save my file and let us try running it and here we have the output of 9. let us go back and let us try to study what's happening so what's happening is our function of unique Adder is returning another function so this Adder is referencing the return callable from this function and the return callable is this function right over here so in short add a is referencing this Adder over here let us try with one more example so let me add four and three the output should be four plus three seven minus one six let me save it and let me try to run it and here we have the output of six let me put it back to five and five now let us move to the last part which is called as a Lambda let me put a separator line over here and let me put some comments so we are going to learn about Lambda now lambdas are pretty simple but they are often neglected trust me they are not really complicated it is just a different way of declaring your functions let me first type and then I will show you what's exactly happening let me go to the top right over here now this is a function called as hello let us see how we can Define this hello using a Lambda so I can say my new function called as hello number two would be a Lambda Lambda simply means a function now this function is not accepting any arguments so we can just write colon but this returns a string so we can say this is going to return hello world and that's it it's so simple the entire function can be condensed into a single line let me copy this and let me go back to my IPython shell and let's play over there so let me paste it right over here and I can invoke my Hello to just a circular function and we have the output of hello world so lambdas are just your regular functions but they are declared in a different way suppose this function accepts one argument then that argument will come before this columns let me take it out and let me show you one more example let us go right over here for Zola so I can say my Zola number two would be my Lambda now this function of Zola accepts one argument as name so I can write name and this returns a formatted string so you can just copy and paste it right over here and that's it we have a Lambda function ready let me copy this and paste it in my IPython shell let me paste it and that's it let us invoke this one Zola to octallium I forgot to close the string let me close it and we have the output of Zola octalium it's pretty simple isn't it let me again take it out so just for the sake of practice let us create one function which will act like a calculator now just imagine your calculator it's a single calculator but it can do multiple functions it can do addition subtraction Division and so on so we are going to try and mimic the same functionality by using lambdas so here let me create my first Lambda by the name of ADD so I can say this is going to be a Lambda this accepts two number so my number one and my number two and this is just going to return the sum so I can say number one Plus number two if you notice we don't use the keyword of written inside the Lambda because whatever value that comes after the colon it's automatically returned let me save this one now as a convention the arguments for Lambda functions are written as X and Y but you can write num1 and num2 but right now just for the sake of Simplicity let me convert this to X and Y so let me Define multi select this argument becomes my X and the next argument becomes my y let us see how we can add types to our function so as we know Lambda is nothing is just a function and we know the function is also called as a callable we can say it is of the type of callable now inside the first brackets are for the inputs the next one is for the output now let us see what's happening our function of Lambda is accepting two inputs this is the first one and this is the second one and we want to say that both of the inputs should be of the type of integer so let's go back right over here and we can say the first argument is an integer the second argument is an integer as well and we are returning a single value so we can say this function is going to return a single value of a type of integer and that's it let us create one for subtract and one for multiply so let me just copy and paste this would be for subtract I just have to make a very small change this has to be x minus and this one would be for multiply again this is X into so you can see it's so simple let's define a calculator on the next line so I can say Define calc now let's see the inputs so obviously we required two numbers so I can say my first one is an integer the second one is also an integer and the third one is going to be a function let me call that function as operation so we are going to operate on both of this number that's why I'm going to call this function as operation we can call anything that you want the type of this one is exactly the type of this one so I just have to copy and paste from here to here now let's go to the return type and this is going to return an integer so what's happening is we have a Lambda it is taking two integers and it is also giving an integer in return so this is what we want to return so this integer comes from here to here and inside let me put some documentation here the written statement is extremely simple we simply want to execute the operation on both our numbers so number one and number two that's it and we simply have to return the output so I can say return save your file and we have a nicely defined calculator as well let's try to invoke our function and let's see if we are getting the right output or not let us try adding 4 and 5 so I can say I want to print the output of my calculator I want to add 4 and 5 and the operation here is going to be this add operation so I can just pass that function right over here I can say add next let us do subtract and multiply as well so this will be subtract and this would be multiply save your file and let us try it running for the last time and here is output 4 plus 5 is 9 4 minus 5 is 1 4 multiplied by 5 is 20 well that's it for this video I hope you really enjoyed working with functions more you start practicing with functions more you will start loving them and once you are hooked to functions you will never want to go back again and if you want to learn the functional approach of programming then perhaps python may not be the right programming language because python is an object oriented language if you want to learn more about the functional aspect then you can learn languages such as Elixir Haskell and Scala those languages are built around the functional approach welcome to a brand new section this section is all about object oriented programming even though the name sounds pretty big but the concept is not so difficult some of the main aspects of object oriented programming are classes instances inheritance and polymorphism so I will be covering all of those inside this series let's go to our code editor and let's start creating some classes behind the scenes I have created one more folder called as zero six oops and inside of this folder I have created a file called as basic dot pi and I have posted some documentation right inside this file first let us create a class and then we will see what is it all about and after that I will come to all of this documentation so let me collapse my sidebar so let me go below and let us create our very first class so we can use the keyword of class followed by the name of the class let me just call it as some class I don't care the name right now the next line is for the documentation of the class so let me add some documentation saying that defines an empty class and inside of this I don't want to pass any logic for now I want to keep the body as empty so I can simply say pass and that's it we have created our very first class let's try to print it out and see what output we are getting so I can say I want to print out some class let us save it and let us try to run it and here we have the output underscore underscore main underscore underscore dot some class now this output looks a little bit cryptic and we will take care of these things in the future but what this is trying to say is in the main file there is a class called as some class so this sum class means this class and this underscore underscore main underscore underscore simply means the main file now this is just a naming convention whenever we execute some python module python behind the scenes names the main module as underscore underscore main underscore underscore so this double underscores are also called as Dundas python makes a lot of use of this tenders and we would be seeing them shortly let us go back and create some more classes let me put a separator let us create a class which represents a person so I can say class followed by the name of the class now remember the name of the classes are in Pascal case that means the first alphabet of each word has to be Capital if you check this class my S was capital and C was Capital just make sure you always follow this convention whenever you want to define a class now let's go right over here and create a class of person let me add some documentation that this class defines a person now let's see let's try to imagine a structure of a person every person has a first name and a last name so let us give this properties to our class of person and we can do that by using a Dunder method which is called as init now don't fuss over what is this method what is a class and whatever I'm going to show you right now this video is just to show you what is the class and in the next video I will explain you all of the things which are happening behind the scenes right now just go with the flow the first function inside your class always has to be a special function by the name of Dunder in it so this is how you define it Define Dunder in it Dunder this is just a naming convention by python we have a Dunder in the front and under at the back there is nothing special about this function this is just like your regular function just that we have a different naming style for this one now since this init function belongs to a class the first argument should always be self self actually acts like a reference it means the instance of this class again don't worry I will explain all of these things in the next video this function of init is going to accept two more parameters the first one would be for the first name of the person the type is going to be a string next one would be the last name again a string and always remember that this init method returns nothing so the return type is going to be none and inside let us see how we can construct a person here we have to say that cell Dot first name is equal to first name so what I am trying to do is I am just taking the first name and I am creating an instance variable called as first name now this can be anything I can also name it as if name and I can write this as F name it doesn't really matter the same goes for this one you can call this ABC it doesn't matter but if you are writing ABC over here then this also has to be ABC but as a convention it is normally cell and let me change this to my first name let us create one more instance variable for the last name so I want to say for my instance of a person so that means for self Dot last name is equal to last name so the same thing I am taking the last name from my init method and I'm creating something which is called as an instance variable right over here now let's see how we can work with this class so I want to say my first person is a type of person the first name is Lewis the last name is Zappa let me save this and let us try to print first person that's it let me comment this out I don't want this one and let me run this file and here we have one more cryptic output saying that it is main dot person object at so and so address if you have seen my last lecture about higher order functions you can make it out that this is a hexadecimal address for this object let us go back and see if we can improve this one let us create one more Dunder method and this time the name of the random method is called as underscore underscore r e p r so this stands for representation underscore underscore and self always remember the first argument by default inside a class should always be self now this is going to return a string so I'm going to put a string over here and let me just say return and I am going to return a string so I can just say inside my codes that this is a class of the type of person that's it just save a file and try to run it so this time we have a much better output so this underscore underscore init and underscore underscore repr these are also called as magic methods python is always going to look for this magic methods whenever it has to create an instance of the person class let me add some documentation over here so this magic method of repr is also known as the official representation of your class now let's see one more magic method let us open up the terminal one more time and to be frank this output doesn't make much sense except that this is saying it is just a class of the person it is not giving any details of which is a person what the first name what is the last name and so on but we can improve this by using one more magic method and this time the name of this magic method is underscore underscore Str so I can say Define my Str so this Str simply means for the string representation of the class and as a convention it has to accept self as the first argument this method also returns string let me add the documentation saying that this magic methods provides string representation of an instance I will explain all of these things in the next video instance and classes right now just go with the flow and complete this video so here I can say I want to return a string let me construct one string by using our string formatting so I can say person the way to get the first name and the last name is using this syntax self DOT first name inside this curly brackets I simply have to say I want to get the first name of this instance so self is acting as a reference it is telling python I want to fetch the first name of this particular person only so let us have the last name as well so we can say self Dot last name let us save the file and let us try to run it so this time we have a much better output and this output also makes some sense that this is a person and the name of the person is Louis Zappa let us create one more person let me put up a comment first over here so what we are doing is we are creating an instance of the class of person let us create one more person so I can say the second person would be person the first name could be CC let me get the C capital and her surname could be Neutron let us printed out let me print out my second person save your file and just run it and here we have the output the second person is CC the first person is Lewis so I think we have learned enough for this first video in the next video I will explain all of these things and hopefully you would have a better understanding of classes now let us try to demystify our classes so this is the class of person that we have created in the last video for this slide I had to slightly compress the syntax so we can see some of the namings are different from the names that we gave the last time so just go with the flow so this was the class that we created last time the name of the class is called as a person and we have a couple of magic methods inside of this one now let's see what's happening inside our memory so as usual this is our memory and let's see what's going to happen next python will see that we have a class called as person and it is going to create a class inside its memory now this class doesn't hold any data this class that you can see over here this is just like a design or rather it is just like a blueprint for a building but we don't have the building yet and how do we know what is the design of this class we can see the design of this class with the special method called as init this method is also called as the Constructor or the initialization of our class so let me repeat this is just a class it does not hold any data it is just like a design or blueprint now let us see what's going to happen on our line number 15. whenever we are creating an object of the type of person that time we say that we are creating an instance of the class of person so let's see what's going to happen python is going to take the design of person from our underscore underscore init method so it's going to take the design so we have the design and it's going to create an instance by the name of person one so as you can see we have an instance by the name of person one so that is being constructed inside our memory the same thing happens with person 2 as well python is going to take the design of person and it is going to create an instance of person two so here it is so this is the basic difference between a class and an instance class is like the basic blueprint or the design and an instance is an object of the type of class so person one and person 2 are called as instances the design is called as a class now if you have seen my earlier video about higher order functions you must be knowing that different objects have different memory address so person number one and person number two are completely different objects and they have a completely different memory address just imagine that this is the memory address for person one and this is the memory address for person number two now let's see what's happening behind our Constructor or our Dunder init method so this method is just acting like fill in the blanks so you can see our Constructor this is for the first name and this is for the last name and you can see right over here first name and the last name this init method just acts like a fill in the blanks so it's going to take Lewis from here and it is going to put it right over here is going to take Zappa and it is going to put it right over here so that's what is happening so if you see inside the memory when the first instance is created init method is going to assign the first name to Lewis and the last name to Zappa same thing is going to happen with person number two as well whenever we are creating this instance the init method is going to assign the last name sorry this has to be first name not last name the first name to CC and the last name to Neutron the last thing that I wanted to explain is all about this keyword of self now self only acts as a reference that means it tells python on which instance do I populate in the data or if you want to get the data it simply tells python from which instance do I have the data let me show this in action let us go back to the previous class which is right over here and on the next line let us print out the first name for both the persons so I can say I want to print out my first person's first name and let us do the same thing for the second person as well the save a file and let us try to run it and you can see we have a different output let me take it up the first person's first name is Lewis the second person's first name is CC the way python can keep a track of this is because of the keyword of self so this first name belongs to the instance of this one so let me show in the diagram whenever we are printing the first name of the first person the self references to the instance on this memory address so python can correctly retrieve the date of Lewis and that's what we are seeing on our terminal so let me open up the terminal and this is what we get and similarly when we say we want to print out the first name of the second person let us go back to the diagram the self is telling python that this time the person is actually this one and this person can be found at this address so the first name this time would be CC and not Lewis I hope now we have a much better understanding of classes instances objects Constructor and so on now let us move on in the next video we just saw that instances have different memory address let me go back to diagram so here I explained that this instance has a different memory address and this instance has a different memory address now let's see that in action let us go back to our code and here let me put up a comment and I don't want this one so I can take it out this one as well and let's print out the memory address of our P1 and P2 as well so I can say print my formatted string and I can say P1 is located at memory address and if you have seen my video on higher order functions we know that we can get the memory address from hex and then inside we require the ID of the object and we require the ID of P1 let me copy and paste it this time it has to be P2 this also has to be P2 just save it and let us try to run it so here we can see P1 is located at this address so here you can see this is four seven six three f and P2 is 479 e d so you can see we have two different instances at two different memory locations and both of them have taken the design from the class of person and the Constructor was our init method let's create one more function inside our class so let us create a simple function for grid so I can say Define grid and as you know the first argument should always be the self always acts like a reference and this one actually does not return anything so I can say none and here I can say print formatted string let me put the first name self DOT first name and then I can print a message saying that first name says hello that's it just save your file now just one small technical detail all of the functions that we create inside the class they are called as methods so let me put up a comment over here so this is a method that prints a greeting message so methods and functions is the same thing the only difference is that methods are always tied to some class that's why they are called as methods now let's see how we can call this methods so let me go right over here let us get the first instance so we can say P1 and we can call the method by Dot and the name of the method so we can say I simply want to invoke the method of grid on the first person we can do the same thing on the second person as well so I can say second person and let me put up a command that's it let me save and let me run it and here we have the output Lewis says hello CC says hello if we go back to the definition of class you can see we have four different methods in it representation the string representation and grid What differentiates between this random methods and the regular method is that python by default is going to search for this render methods so that it can Implement its own magic if you change the name from init to something else then the class Constructor is not going to work so always make sure you get the naming convention right in it is for the construction repr is for the official representation and this is just for your reference this is called as a string representation even though the name starts with an underscore you can use them just as your regular function let's see how to do that let us go right over here let me make some space and let me print out P1 dot underscore underscore SDR and that's it so what we are doing is we are simply calling the method called as SDR on the instance of P1 that's it let me save and let me try to run the file and here it is we have the output of person Lewis Zappa so this is absolutely possible but this is not the recommended way of doing it so let me put up a comment possible but not recommended well that's it for this one in the next video we will convert the character from our game to a class now let's see how we can convert the character from our game to a class What I've Done behind the scenes I have created a new file called as character dot Pi inside my zero six folder let us go back to the folder number five and inside the game so this is how our character looks like our character has a name attack power and life we can use this parameters to create our own class so let us go back to our character.py file let me collapse my sidebar and let's start creating a class for our character so the first is the keyword of class followed by the name character let us go inside the first method is always going to be the Constructor that means our underscore underscore edit method so we can write like this Define my init remember the first argument should always be self for reference here we can accept three different arguments let us go back to the game so we need one argument for the name one argument for the attack power and one argument for life so let us go back to our init method and here I can see I want to accept a name pipe string next is attack power pipe is an integer life the type is an integer and this method always returns none let us create some variables inside again you have to follow the conventions you have to write self dot name and let us take the data from this variable and put it right over here so I can say name remember that you can name this anything so I can just call this as n but you have to change over here also but as a convention normally we would like to keep it the same names so let me go back the next is for the attack power so I can say self Dot attack power would be my attack power the text would be self dot life would be my life let me add some documentation right over here saying that this method creates an instance of character let me add some documentation for the class as well so this is for documentation of the class that this class defines a character now let us create an instance of this class so let me create a villain first so I can say a villain villain the first one would be a character the name would be Thanos his attack power is 400 and his life is 1500 let me print out the villain number one let us save the file and let me try to execute this file and here we have the output but as you know this is a little cryptic output so what python is telling that this is a character object add this and this memory address but you already know how we can improve this so let's start adding some of the dender or the magic methods the first one I can save is my repr the first argument is self and this returns a string I can say return so this is my class of the type of character let me save the file and let me run one more time so this time we have a little better output my VLAN is actually a class of character let us improve further by using our Str method so we can Define it right over here SDR first argument is always the self this this returns a string and let us construct a string right over here so I can see the name it would be self dot name next would be the attack power and this would be self dot attack power next would be life so this would be self dot life that's it let me save it and let me try to run it so this time we have a much better output the name is Thanos attack power is 400 and the life is 1500 let us go back and let us create some more characters let me put up one comment over here so while constructing a class you can actually use key and value pairs so let us create one more villain and let's see how we can do this so this is my villain number two it is a character and here we can use the key value pairs so I can say the name maybe this time it is Red Skull the attack power is 300. and the life is 800 and that's it let me try to print out the second villain as well so I can say villain number two just save it and try to run it and here we have the output Red Skull attack power 300 life 800. now the beauty of this key value pairs is you don't have to specify the arguments in a given sequence you can mix up the sequence but still we can have a proper instance so let me show you maybe I can just take this out and put it here and let me save this let me try to run it one more time and still we have the right output let us go back and let us try to create some more Heroes let me create one hero so this is Iron Man attack power is 250 life is thousand let me create one more so this time it is Black Widow the attack power is 180 and the life is 800 and let us also print them out let me run the file for the last time and here we have the output Thanos Red Skull Iron Man and Black Widow before we can move ahead let us take a small pause and let us think do we really require classes let us go back to the earlier program that we wrote so let me go back to my file called as basic and let me collapse my sidebar so let us ask a very fundamental question do we require a class the answer is it depends whenever you want to have a structure and a behavior together at that time using a class makes much more sense if you require just the data then you can use any of the data structures you can use a list you can use a dictionary or some other custom data structures as well but whenever the structure and behavior is tied together that's the best place to create a class for example in this file we have a class of person now let's see what's happening person has a structure and that structure is defined by the first name and the last name now this person can also have a behavior a person can greet another person so we have a method called as greed so greed Can Be Imagined like a behavior of a person a person can have different kinds of behaviors a person can walk a person can talk a person can eat so all of this Can Be Imagined as behaviors but all of this behaviors is tied to a structure and that structure is the First theme last name and maybe you can have multiple other parameters such as your age your location and so on so just keep this in mind classes are not the solution for everything make sure you use the right data structure or the right classes only when it is required let us learn more about classes and this time let us learn about class membership till now we have been creating variables inside our Constructor so for example in our class of character so we can say surf.name is a member of the instance of this class same thing attack power can also be called as an instance variable let us create a new class and let us try to study what is this all about so behind the scenes I have created a file called as members.pi added a couple of comments so let's try to see what's happening inside let us try to create a class called as box and let us Define an init method this box has two sides this is my side number one I can say the type is integer my next side also the type of integer it returns none let us create the variables inside so I can say my side a is equal to my side a and my side B is equal to my side B now what we have done is we have created variables inside our Constructor class now remember what this method does it actually creates an instance and fills in the value so if we refer this diagram our Constructor is simply filling the values of the instances so the variables that create inside they are called as instance variables let me put up a comment right over here now if you go back to the diagram the data is different for every instance so for example the first name for person number one was Lewis and for person number two it was CC now let us see how to create class members let me put up a command so this class members are defined on the class scope so this class members are defined outside our Constructors so let us Define a couple of class members as well let us create a variable and we can see box type and this is going to be a packaging Carton and the color for this one would be brown so this variables that we have created box type and color this variables would be accessible to all of the classes please note that we don't have self over here because we don't need reference to an instance this data is available to all of the classes and all of the instances let us create a Str method here I can say Define my Str ugan cell this always returns a string and I can say return my side a would be my self dot side a and my side B would be sorry it has to be self Dot side B for this example I am going to skip the repr but you can write it on your own let us create an instance called as the first box and I can say the box side a maybe it's three and the next is 4. let us try to print out my box so I can say I want to print my box let me save it and let me try to run it so here we have a box side a is3 and the side B is 4 now let us try to print the class variables from an instance remember this class instances are available for all of the instances so I can simply say I want to print my box first Dot box type and let us print the color as well so I can say the color let me save it and let me run it so we have the output it's a packaging Carton and the color is brown let us go back and let us try to solidify this concept of class members now this class members are available on classes itself you don't have to create an instance that means if you go back to the design we can get back the data from the design itself we don't have to create an instance to get back the data now let's see this in action what we did till now is we created an instance of the box and then we printed this variables right over here but we can simply say I want to print the box type from the class of box let me copy and paste we can also say I want to see the color that's it just save it and let me try to run it and we have the output packaging Carton and brown so this time what we did is we simply accessed this variables from the class we did not create an instance so this is what I mean to say when all of the class members are available to the class itself and also to the instances let us create one more box and print it out so let me print my box number two and just for the sake of confirming we can say my B2 dot box type and my B2 dot color and we should get the same output let me save it and let me run this file for the last time and here it is we get the exact same output let us try to study the next Concept in our object oriented programming and this concept is called as inheritance and polymorphism what I've done is I have created a file right over here called as inheritance and polymorphism and let us try to see what's going on just to give you a very simple example we are all human beings but we are also animals that means we inherit a lot of properties from animals for example all of us have eyes ears hands and legs but all of us human beings we don't speak the same language now that's polymorphism in action inheritance means we inherit all of the features of an animal and polymorphism means even though we have the same properties but we exhibit different Behavior now let's create some classes and see this in action let us create the first class called as animal so let us create a class of animal let us Define our methods over here first is the cell and let me accept one argument for name one for the age and one for the number of legs this returns nothing so I can say none let me put up a comment that we are going to create and initialize the instance variables let's start creating some of our instance variables so I can say my self Dot name is equal to my name then myself dot is is equal to age then self dot of legs is equal to Magnum of legs let us also create the Str method so I can say Define my SDR it takes a self it returns a string and here I can return let's say we can just return the name for now so I can say name and this would be self Dot name let us try to give animals some kind of behavior so let us create a method called as talk on animal so I can say Define a method called as talk the first parameter would be self and this is going to return nothing so none for now let me put up some documentation saying that this method makes the animal talk but let's see what we can do right now since we don't know what kind of animal it is that's why we can't talk yet so let us print the same thing right over here so I can say print my formatted string self dot name can't talk yet so let us go down and let us create one animal so this is my first animal so I can say I want a instance of the class of animal the name is Robin Age maybe he's 10 years old number of legs is 4 then let us print out the animal and let's also try to make the animal talk so a1.com just save a file and let me run it so here we have the output we have Robin and Robin can't talk yet now let's go back and let's see how we can create some sort of inheritance let us create a dog now remember dog is a kind of animal so you can say that dog inherits from animal let me create a class and then I will try to explain what's happening so let me create a class called as dog now here inside the brackets we have to specify from which class we are inheriting so dog is inheriting from the class of annual so this is how it goes let us create our Constructor right over here as well so Define init self now let's see what happens since the dog inherits from animal dog also needs to accept all of these parameters name age number of legs so let me just copy and paste and here we can accept some more arguments as well so let me create one more argument for breed so we can accept one for breed let me get the spelling right let us go down and let us start creating our instance variables here at this point python can do a small bit of magic for us since dog is inheriting from animal we don't have to create all of the instance variables manually instead what we can do is we can pass the common data to the class we are inheriting from so we are going to take all of this data and we are going to pass this data to animal so technically animal can be also called as your parent class or it can also be called as your super class let me put up a comment so we want to take all of the common features and pass it to the parent or the super class python provides a keyword called as super so this super means the class of animal and now we want to pass all of this data to one method and that method is called as init now remember in it is just like any other function except it has underscores at the beginning and at the end so we can call that method as we can call any other method so we can say super and underscore underscore init underscore underscore and let us pass the common features which is the name age and the number of legs now it is the responsibility of the superclass that means the class of animal to create instance variables for the name age and number of legs the only argument that is remaining is for the breed so inside dog we can create one more instance variable called as self dot breed and we can assign the value we can also create extra instance variable even though we are not accepting parameters right over here so let me give you a small example so I can say self DOT type is equal to dog so you can see we can create instance variables wherever we want them so let me save this so this is what I mean by inheritance dog is a class which inherits from animals and they share a lot of common functionality that's why we are passing the common functionality to the superclass and we can create some additional instance variables as well now let's see how we can introduce polymorphism in this class remember remember the superclass of animal has a method of Str so let's override this method and let us create a different Str method for dog so let's see how we can do that the syntax is going to be exactly the same so we have to say Define Str takes in a cell gives back a string and let me print out a message over here let us use the formatted string so we can say self DOT type followed by the self dot name and let us also print out the breed so I can say the breed of the dog is self Dot bead oh sorry we can't print because remember the Str method always has to return a string so thanks to our typing my code editor is catching an error so this has to be written not string let me take out the brackets now everything looks good now let's create it all so I can go right over here so I can say my first dog is an instance of the class of dog the name is whiskey the age I can use my keyword arguments as well so my age is five years old number of legs is obviously four and the breed maybe the breed could be Doberman let's try to print out our dog so I can say print my dog let me save it and let me try to run this file so here you can see we have a doberman by the name of whiskey and the breed is double man now let us try and explore some more benefits of inheritance so you can see we have created a class of dog which inherits from animals since dog inherits from animals it also inherits all of the behavior of animal the class of dog does not have a method for talk but the class of animal has it so we can actually make the dog talk as well so we can say D1 dot talk let me save it and let me try to run this file and we get the output that whiskey can't talk it but we can use our polymorphism and we can make whiskey talk so let's see how to do that so inside my class of dog we are going to create a new method called a stock and the new method is going to override the method inside the class of animal so it's just like creating an another method so we can say Define talk it always takes self this is going to return nothing and here let's print out so I can say self Dot name says woof and let me save the file and let us try running this and now we have the output whiskey is saying woof let us go back and let us see what else we can do let me take out this space this class of dog it can have its own Behavior now since this is a dog our dog can also sniff different items so let's create a method called a sniff on dog so let us go down over here so I can say Define a method called a sniff the first argument is always the self now these methods are just like your regular functions they can also accept arguments so let me take an argument for the item that the dog is supposed to sniff it is going to be a string this method is also going to return nothing so I can just say none and let us print out a message self dot name is sniffing out the item so please note that here we don't have to use self dot because item is not an instance variable item is just an regular argument on a regular function let us go down and let us try to sniff so let me say D1 I want you to sniff for ball save a file and let us run it so here we can see we have the output whiskey is sniffing out ball let us create one more class for cat and since cat is also an animal cat is going to inherit animal as well so you can see we can have multiple classes that can inherit from other classes as well let me put a comment saying that this method of talk this is the place we are altering the method and we are adding some polymorphic Behavior so let me go down and let me put a separator and let us create a class of CAD and creating that class is pretty simple I just have to copy all of these things so let me copy let me go down and paste it right over here let's change the name from Dog to cat the type also is a cat this time we don't want the comment now and the cat says meow and we don't want this method because cats are not so good at sniffing so let me take it out let us create one instance of our cat so I can say my cat number one is my cat the name is Jess suppose she's two years old number of legs is four and the breed could be a Persian cat let us print out the cat so I can say print and let us also make the cat talk so I can say C1 dot top that's it let us run the file and we have the output so we have a cat named Jess the British is a Persian cat and chess is saying meow so now you get the idea just for the sake of practice let us create one more class for a dinosaur now this dinosaur is also going to inherit from animal let me copy and paste this separator let me copy all of this as well and let me go down and let me paste it right over here so since this is a dinosaur I can just say Dino and this has to be Dyno as well and since we don't know what dinosaurs can talk put some random text now the dinosaur can also hunt so let us create one method for hunt so let's create one method called as hunt it accepts itself and returns a none here I can say print self dot name is out for hunting let's create one dinosaur so I can say my Dino one is equal to my Dino suppose the name is Adam age could be eight years old suppose the number of legs are two and the breed would be TRex let's print out the dyno let us also make the dino talk and also let us make the Dino Hunt that's it let me save and let me run the file and we have the output so this is a dinosaur Adam is saying something Adam is out for hunting so now you get the idea we can have multiple classes inheriting from a single class or you can also inherit from multiple classes as well but we are not covering that in this tutorials let me put a separator and let me show you one nice trick we can also ask python if a certain class inherits from other class or not so let's see if the dog and the cat inherits from animal or not so I can say print and we can use an inbuilt method called as is instance the first argument is the object that we want to compare so let me pass my dog and the next argument is the parent class that we want to compare with so suppose I want to see if the dog is of the type of animal so let me save it and let me try to run it and here we have the answer it's true and that's because the glass of dog is inheriting from animal now here I want you to understand one point all of the dogs are animals but all of the animals are not dogs so please keep this in your mind let us check if demon is a kind of dog so I can say is instance Devon and dog let me print it out and yes it is let us do one last time for our cat so let me copy and paste so this becomes C1 and this becomes cat and let us see the output so here it is C1 is an instance of cat as well now let's try to learn about decorators so this decorators are like the higher order functions but this higher order functions are already built into python this decorators can give some additional behaviors to our classes so we are going to have a look at couple of these decorators some of the decorators that we are going to see are property static methods class methods Getters and finally setters so I have created a new file called as decorators and I'm going to work inside this file for this example let us imagine that we are working for a store and we have to write a software that will manage our stuff now since all of the staff members are also persons so first I am going to create a class of person and then I will create a class of staff that inherits from person so let us start with the person first so I can see the class of person our Constructor in it self and suppose we want to accept the first name this is a string the last name this is also a string and this returns nothing inside let us create some instance variables so we can say self Dot first name is equal to my first name as self Dot last name is equal to my last name let us also create the string method so I can say Str uck and this always returns a string so I can say return this is a person and then I can say my self DOT first name and self dot last name let us create one person and print it out so I can say this is going to be sorry not permission I want a person the first name would be Lewis the last name would be Zappa and let us try to print him out now let me try to run and see the output so we have the output of Lewis Zappa till now you are familiar with everything now let's go to the example now suppose you want to retrieve the full name every time now instead of creating one more instance variable over here saying that self Dot full name is equal to something something instead of this we can create a property and that property will create a full name for us and we can retrieve it just as we would retrieve any other instance variables so let me take out this line and let me show you how to use our first decorator so let me go down over here the way you use a decorator is by this symbol at the rate and then you name the decorate so this time The Decorator that I want to show you this is called as property so this is our decorator and after that let us create the function so I can say Define full name this takes self as the first parameter and returns a string next line we can simply create the full name and it has written the full name so we can just say self DOT first name and self dot last name so what we have essentially done is this full name right over here this would act just like your instance variable so just imagine that here we had one more instance variable called as self dot full name so this property will function exactly like this let me show you this in action so let me take it out let us go down and let us try to print the full name of the first person so I can say print first persons full name that's it now since this is a property we don't have to use brackets after this one because remember full name is just like your instance variable let me try to execute the program and here we have the output Lewis Zappa now let us go back and let's start working on some other classes but before that let me put some separators so this is one separator and this is another separator now let's create the class of stuff and this staff will inherit from person but let us try to expand our knowledge over here Suppose there are different categories in the staff there could be an associate there could be a manager and so on so we can have multiple roles and each of these roles can have different salaries so suppose if you are a associate then your salary could be 15 for an hour if you are a supervisor it would be twenty dollars if you are a manager it could be 25 dollars so what we want to do is whenever we create a new class we also want to dynamically give that person a different salary based on his role sounds a little complicated but don't worry let me show you how to do this now since we have to Define different roles at this time using an enum is the best option so if you have not seen my video on enum I would highly recommend you to go back and see that video so that was in my section number four and I think that file was this choices dot pi so we are going to use this enums in this file I want to use enums because I want to Define different rules let's see how to do that let me go to the top and first let me try to import a couple of things so from my package of enum I want to import enum and I also want to import my auto so now we can define an enum let me create one called as class role so this inherits from my enum and inside this let me put some documentation that this rule is for our staff members now let's create a couple of rules suppose the first role is for an associate so I can say associate and let me write Auto over here the next one could be a supervisor again is equal to auto the last one could be a manager so I can say manager is equal to Auto let me just save it and let us go down and let's start creating our class of stuff let me put some separators here as well okay now let us go down and here let us start creating the class and the class is of stuff and this class inherits from person so here let us first Define our Constructor so I can say Define my init the first argument is always self now let us see now since stuff inherits from person person requires two arguments first for the first name and for the last name so let me just copy and paste right from here so I can take this and put it right over here now the next argument that we want is for the rule remember we want to take the rule and we would be dynamically creating the salary depending on the role so I can say I also want to accept a rule and the type would be rule this method always returns nothing so I can say none so inside this we want to pass the data to our superclass so let me put a comment and then I can say I want my super to initialize with my first name and my last name now let us create some more instance variables maybe we can accept one more parameter for the staff ID so let me write it right over here so I can say the staff ID would be an integer now let us go down and let us start creating the instance variables so the first variable would be for the staff ID and this is is equal to the staff ID let us create one more instance variable called as is stuff and let us put it to true so remember we can always create instance variables even though we are not accepting them inside our Constructor method next it could be for the role so I can say self dot rule is equal to rule now for the next one I also want to record the date of joining for the staff member so let's see how we can do that so I can say self Dot date joined and this time the value has to be in the format of date date and time fortunately python has an inbuilt library for doing exactly this and the name of the library as you can guess it is called as date time so let me go above and let me import it so here I can say from my library of date time I want to import date time now let us go down and let's see how we can assign the value of date time so here we can simply say date time for now so what's happening is the moment that we are creating this instance we can have the date time automatically assigned to our variable before we proceed I want you to wait and I want you to think once we have a staff member I don't want anyone to accidentally change the date joint so what's the solution let us try and make this variable a private variable now there is no real concept of private and public but we have a convention so whenever we put an underscore this means that we want to keep this variable as private you can also write double underscore or a single underscore it's up to you normally whenever we want to enforce that it's a strictly private then we can use double underscore but a single underscore also means that we want to keep this variable as private so let me write a comment right over here so this is going to be our private member and all of this are public variables the next thing to do is we want to assign the salary but the salary has to be dynamically assigned depending on the role if the role is often Associated then the salary has to be 15 if it is the supervisor then the salary has to be 20 dollars if it is a manager then the salary has to be 25 dollars let's see how we can dynamically assign a new instance variable called a salary and assign values to it so let me put up a comment that we want to dynamically create and assign values so let's see we can use an if an else statement so we can check if the rule is for supervisor or for manager and so on but we can also use our match statement so in this example let us use the match so I can say let us match for the role the first case that I want to match is for my role dot associate so in case this rule is for an associate then at that time I want to dynamically create an instance variable called as salary and I want to assign the value of 15 let us also add some type hinting so instead of 15 it can also be 15.5 15.75 and so on so let us declare this instance variable as a float now you must be wondering why do I need to have a type hint right over here but here we don't have the answer is it's because we have declared the types right over here so this first name is a string so by default this first name is also going to be a string staff ID is an integer so here the staff ID is also going to be an integer and my Pi is smart enough to infer all of these things but here since we don't have this instance variable declared anywhere we have to be explicit and let us declare the type is going to be a float here again let us think about the visibility I don't want anyone to change the salary salary has to be privately managed so we can see I can put an underscore or I can put a double underscore let us go to the next case suppose the rule is for an supervisor then I can say self dot underscore underscore salary would be twenty dollars then I can say if the rule is for a manager then I want to assign the salary of 25 let us also Define the string method for this one so I can say Define my Str self this return a string so let me return so I can say this is a staff member the name is self now here I can use the property that we have defined for full name if you scroll little up we don't have an instance variable for full name but we have declared a property and that's what I'm going to use right over here I want to display the full name so I'm using self dot full name next we can also display the ID so I can say ID is my self dot staff ID let us go down and let us try to create a staff member this time so I can say my staff member is my stuff the first name is Chico the last name is Jonas staff ID can be three two four five let's give her a role of manager so I can use my enum I can say the role is role dot manager and let us try to print it out so let me print my stuff that's it let me run the file so we have a new staff member so you can see right over here the name is Chico Jonas and the ID is three two four five let us go back and let us see what more we can do with our classes the next decorator is called as the class method just imagine the scenario that we already have a person in our database and this person is joining our shop as a staff member so what we can do is we can simply take that person as an argument if you see right over here we are taking first name and last name as an argument instead of this we can take a person and from that person we can create another class for the staff so let us go down right over here and this is called as class method and now always remember this method is you should create an another class till now we have been working with instances but what this class will do it will return another class which is all the type of stuff itself so let's see how to do that suppose we want to create a new staff member from an existing person so I can say Define new so new is just the name of the function you can write anything that you want and since this is a class method the first argument is called as a class till now we have been taking the first argument as self so we can see it was selled but since the class method works on the class that's the reason why the first argument is a class if you are still confused then let me go back to my diagram so this is a class and this is an instance the class method is going to work on the class itself that means we can create a new person from a design of the person that's what it really means let us write the different arguments so obviously we want to create a new staff member from an existing person so we need to accept a person next we also need a staff ID so this is going to be an integer then we also need a rule the type is for the rule now here this method is going to return an another instance of the class and that instance is of the type of stuff itself so this function returns a staff let me add some documentation saying that this is going to create a new instance of the staff itself and let's see how we can create a staff in this case this class actually means staff so here we can see I want to return a new staff member and the first name is going to be the first name of the person that we are accepting so I can say person DOT first name the next argument is the person dot last name then we have to give the staff ID and then we also have to give role now unfortunately we can't write this syntax but what we can do is since this class means staff we simply have to replace staff with class and it's the same thing now the written value is of the type of staff but what's happening is we are trying to return the staff member before we have defined the class of stuff so in order for this code to work we have to do something so we have to go a little up and we have to say from future I want to import annotations so what do I exactly mean to say is since this method right oh yeah the method of new is retaining a staff but at this time python does not know what the stock because python has not yet created this class but by importing this functionality from futures we can tell python what's exactly happening so let us go down and let us add one person to our staff member so since we already have a person called as Lewis Zappa maybe he joins our store so let us create a staff member from Lewis Zappa so let me say my staff number one so here let us create a new staff member by using this class method the first argument as you can see it's for a person so let me pass my first person the staff ID could be one two three four and the rule could be the role of a supervisor now let us try to print it out let me say I want to print my first staff member and this I can say this is my second staff member disable file and try to run it so we have the output the first staff member is Louis Zappa with id1234 and we have one another if you are a little confused then just keep in mind that class method is a method that returns an instance of the same class now let's try to move on and let's learn a little bit more about classes now since we have defined this instance variable as private date join but what happens if anyone wants to see what is the joining date so we can create another property that will display the joining date so we can go down and let me create a property so here I can use my decorator called as property let me Define the property called as joined on this text the self and this is going to return a string let me put up some documentation saying that this is for the joining date of the staff member and since this has to return the joining date we can simply say I want to return and here I can say myself dot underscore date joined now if you're wondering why do we have to do all of these things and the answer is since this is a property we cannot assign values to an property at least not yet in technical terms this is also called as in getter in short we can simply get the value from here but we can't set the value over here later on when I teach you about Getters and Setters at that time we can actually use properties to get as well as set different properties but for now let us go with the flow and let me try to save the file and let me try to run it let us try to see the joining date of Lewis so I can say print Dot joint on and that's it let me try to run the file and we have a joining date now this joining date looks pretty complicated it's in a different format but fortunately we can also have the output which we can understand so let's see how we can do that suppose I want to see the date in a format of month day and the year so let's see how we can format this fortunately there is one inbuilt method for our date time and that is called as string format and we have to use a couple of keywords right over here so let me paste it over here so this capital b stands for the month the lowercase d stands for the day and obviously y stands for the year so let me save this and let me try to run this file and here we have a much better output so the date of joining Fort Lewis Zappa is July the 6th and the year is 2022. let us see the last concept that I want to teach you in decorators and this concept is called as Getters and setters I have already partially explained that this property right here this property acts as a getter that means I can always get a date but I can't set a date but let's see what happens if we want to set and value suppose we promote an employee suppose an associate becomes a supervisor or a supervisor becomes a manager that time we also need to increase the salary so let us see how we can do that by using our Getters and Setters now if you remember we have declared the salary as a private member but what happens if our HR department wants to see the salary so first let us create a property or a getter to see the salary and then we will see how to use a setup to set the new salary so let us go down and let us create one property for the salary so I can say property and let me call it as salary tax the self as an argument and this returns a string I think I have declared it as a float yeah it's a float so this has to return a float let me put a comment so this acts like a getter of the salary and we simply have to return our self dot underscore underscore salary let us see the salary of Lewis so let me say I want to print stuff one dot salary and that's it let me run the file and here you can see the salary is twenty dollars for an hour now let's see what happens if I try to set the salary so if I say my S1 dot salary is equal to 17 let me save it we have an error so if you just try to hover it says that property salary is defined in staff is a rate only so what this is trying to say is we can only get the value we can't set and we can't set because this is just a read only property so this is the beauty of Getters and Setters we can't accidentally change the values but what happens if we do want to change the value at that time we need to create another method which is called as a setup let's see how to do that normally you would use a Setter when you need to do some kind of validation before you want to set the values now in this case let us see what kind of validation do we require if you remember if the rule is foreign associate the minimum salary is 15 dollars for a supervisor the minimum salary is twenty dollars now if the role is for supervisor but if we try to set the salary which is lower than 20 dollars then we don't want that to happen so this is a part of our validation logic and we can use that inside our setup method the way to declare the setup method is kind of weird in Python but let me show you how it is so the syntax is I want to say for my salary this is the setup so this is a Syntax for the setup this simply means that we are declaring a Setter method for the property of salary let us create the function for salary obviously the first argument is for the self and the next argument is for the amount that is the amount of salary that you want to give the employee so I can take one more parameter called let's amount the type would be of a float and since this is a setup we are not going to return anything so I can say none let me put up a comment saying that this is our setup method and inside of this let us see how we can use our validation logic and how we can set the new values let's start with the associate the associate cannot have a salary Which is less than 15 dollars so we can say if my self dot rule is role dot associate and if the amount is less than 15 dollars that means it is going to fail our validation because we can't give an associate a salary Which is less than 15 dollars so let me print out a message saying that error associate cannot have a salary less than 15 dollars now what happens inside any of the methods you have access to all of the instance variables so if you see I'm using this instance variable called as self dot Rule and we have defined this self dot role right over here so this is where it is online number 60 but since we are inside the same class we can have access to all of the instance variables the same thing is happening everywhere so for example in this property of salary I can access the salary a natural the salary is being declared right over here either online 66 68 or 70 but we can still access all of the instance variables let us go down and let us create the next validation logic so this was for an associate next let us create one for the supervisor and the last one for the manager so we can say else if the rule is for the role of supervisor and if the given amount is is less than 20 then we need to print an error message so we can say supervisor cannot have a salary Which is less than 20 dollars let's go to the next one we can again check if the role this time is for the role of a manager and if the amount is less than 25 then let us print one more error saying that manager cannot have a salary less than so this should be 25 dollars for an hour now let us go down now what happens if we pass all of this validation that means we have the right Rule and we also have the right amount in that case we can assign that amount as a salary so here I can say else if everything is fine then my salary is equal to the given amount and let me print a nice message saying that self dot full name now has a salary of dollars and self dot salary and I can write per hour so remember that this salary is a property so as you can see the visual studio code is telling you that this is a property and this is a get a method now let me save the file now let me try to run it if you see online number 120 I am assigning a value of 17 but the role is for a supervisor and if you see inside our validation logic supervisor cannot have a salary of 20 that means we should get an error let me save the file and let us try to run it and see if we can get an error and that's it we have the right output so it's saying that error supervisor cannot have a salary less than 20 dollars for an hour what happens if you try to set the salary which is valid so I can say s1. salary is equal to 20 or maybe I can say 22 so let me save it and let me try to run it and we have the right output so on the next line you can see Louis Zappa now has a salary of 22 dollars for an hour let us go back to the file and this time I want to show you the final decorator in this section now we have been inheriting classes for example here the class of staff is inheriting from person in some of the earlier examples we were inheriting classes such as animals dogs and so on but what happens if I want to say that you can't inherit this class whatever class I have created this is the last and final class and no one can inherit it we can do that by using a different decorator but first let me import that and that comes from our typing Library so I can see right over here from my library of typing I want to import final and just before the class stack we want to declare as final we have to use it so suppose I want to say my class of staff is a final and no one can inherit it so I can just say at the rate and this is going to be my final class let me save it and let us give it a try so suppose let me put a separator over here suppose someone creates a class called as HR and let us try inheriting from staff and we can keep the body as empty so let me just write pass let me try to save it now you can see the code editor is highlighting that we have some issue and it is saying that the class of stuff is marked as final and it cannot be subclassed so let me just comment it out and I think we have done for this video let us start converting our game into classes so the first thing that I want to do is let me just copy and paste it inside this folder let me rename from 3 to 4 and let me change the documentation so this is where we are trying to improve our design by using classes so let's see how we can start using classes inside our game till now we have been using an alias but now what we can do is instead of using an alias for the character we can actually create a class for character so let us go right over here and let us create our class for character so we can see class character now let's see what instance variables do we require now each of the character has three main things you can see right over here name attack power and life so we can Define these as our instance variables so let us do that Define init cell the first is the name is going to be a string attack power integer life is also an integer this returns nothing let me write some documentation saying that this creates an instance of character so here I can say self dot name is equal to the name self Dot attack power is equal to the attack power self taught life is equal to the life let's also create a nice Str method so we can say Define a string method for this one self and this always returns a string and inside let us make a nice string representation for the character so I can say the name of the character is self dot name the attack power is going to be self dot attack power and the life is going to be self dot live let me save it next let us see how we can create superheroes and our villains now superheroes can inherit from our character and our vlans can also inherit from our characters so let's see how to do that so let's create a class called as superhero so you can say my class of superhero this inherits from the character let me put some documentation and let us write the init method now since this is inheriting from character I can simply copy and paste all of this copy and paste and this returns nothing now inside since we are inheriting we can use the super keyword and we can say super dot init and we can simply pass the name attack power and the life so the superclass of character would be responsible for creating all of this instance variables next we can also create one more instance variable called as a rule so this instance variable can say that this is a superhero or this is a super villain in order to define a role again let us go back and create a nice enum so let me go to the top and first thing that I want to do is I want to import so from enum I want to import my enum and also I want Auto I can say my class of character type this inherits from enum let me add some documentation then I can say superhero and assign it to Auto then I can say villain and assign it to Auto as well so let me save this and let us go on below here I can create one more instance variable I can say cell dot rule and this would be equal to my character type Dot superhero let us also create the Str method so I can say Str yourself this returns a string let me copy and paste all of this let me put it here not just before the name I can say that this is a superhero so I can say this is a superhero and put a nice Arrow now since this line is really long so we can do one small trick let me take it down and I want to have brackets around this so this is my opening bracket and right over here I can put my closing bracket and what I can do is let me cut this portion out for the life and on the next line I can simply again say F and paste it over there and that's it so this is also a valid syntax next let us create the same thing for our villain so I can simply copy all of this paste it down so from Superhero it becomes my villain and this has to be my villain this has to be again my villain let us go down and we don't need all of these things because we already have a class for character so I can take all of this out I don't want any of this now let's see what we can do with life with life I'm going to do a very small trick I am going to create a class for life but all of the methods would be static that's because I don't want to create an instance of life it makes no sense I just want access to Hero life and we're in life so let me create it first and then I will try and explain so here I can say this is going to be a class of life and what I want to do is I want to take all of these things inside so till yeah all of these things goes inside my class now let's start changing them one by one now what happens is you can see my these two variables these are outside my init method or rather I don't have a init method over here and that's also perfectly fine these two variables belongs to the class so they can also be called as my class variables and that's what I want there is one other alternative approach let me paste it right over here that approach is called as data classes but I am not going to cover them inside this course you can use this link to study more about data classes now let us continue with our journey I'm going to use a new decorator which is called as static method so let me copy and first let me paste everywhere and then I will try and explain what's happening since this hero life and we're in life belongs to the class I no longer have to use the keyword of global and hero life so I can take it out and now what happens is this hero life is actually a class member of the class of life so I can simply say life dot hero live plus equal to life so this means that this hero life variable references exactly this one let me save it and then I will try and explain what this new decorator is doing now if you see I am not taking the argument as self for static method that's because this decorator works on the class directly it does not have to create an instance let us go back to our decorators file and there I will try and demonstrate what's happening so this is our decorators file now let me go back to the diagram itself so here is our diagram again whenever I am saying that this is a static method means that we can call that starting method from the class itself we don't need to create instances for example here in our decorators file you can see that we have this one date time dot now no matter whatever the class you don't need an extra instance we can have a common functionality that's what I mean to say by a starting method so basically static method is just like any other method but it does not take a self argument because it works directly on the class and not on the instance suppose we can create a static method called as describe and that static method will just describe what this class is going to do so let's create it and see it in action so let me go down and just after this property joint on I can create my static method so I can use my decorator of static method the name would be describe so again this is not going to take itself neither this is going to take a class because this is independent of everything this is going to return none let me write some documentation what's happening so this method is just going to describe what this class is all about so I can just print out that this is a class to create a path member now let me go down and here I can simply call this method on my class so let me call it at the top I can say staff Dot describe and since it's a method I need to use my brackets that's it let me run this file and here we have the output class to create a staff member Now using this same concept let us go back to our game now here what happens is we have two class members hero life and we're in life I want to get access to this variables and that's what I'm doing right over here by using a static method you can get a little bit more clarity when we use this method later in this video for now let us change all of the syntax so this one also becomes my static method and I don't want Global and this becomes my live dot hero live same thing for this one this also becomes my static method I don't need the global I can say my life got villain life and same thing for this one as well so this also becomes my static method I don't need the global and this is my life Dot that's it just save a file let us go down so here what we can say is this is a list of superheroes so instead of just character I can say This Is My Superhero next what I can do is I can create instances of My Superhero by using the newly created class so I can say my Iron Man is a superhero the name is obviously Iron Man next the attack power is 250 and the life is 1000 so similarly let us create instances for all of the other superheroes as well so here we have we have a black widow Spiderman and Hulk now since we have everything in classes I don't require this constant so I can just take them out they are not required this becomes a list of superheroes and I have to change this as well so Iron Man Black Widow Spiderman and Maya Hulk let us go down so this instead of character we can say this is going to return a superhero rest everything Remains the Same so let us go down to villains this is going to be a list of our villains again let us do the same thing let us create instances so I can say my Thanos is equal to my villain the name is Thanos my attack power is 400 life is 1500 let us create the rest as well so we have all of them let us take out all of this it's not required this becomes my villain and we need to change all of this as well fastest tunnels then it's The Red Skull and then is Proxima let us go down so this becomes my villain and everything is looking good let us go down and let us see where we need to do some more changes this becomes a superhero and this becomes a villain now let's see where we are going to use the class of life and the static methods that we have created we are going to use exactly right over here for the set life and for the actual attack so here I can say from my life I want to access the static method called as increment hero life and I simply want to pass the life of the superhero so I can say my superhero dot live and we can use the syntax because life is just an instance variable on superhero so this is the beauty of working with classes let us go down again we can do the same thing we can say from my class of life I want to access the static method of increment villain life and I want to pass the life of my villain we don't need all of these lines we can take them out we can do the same thing right over here as well so I can say live dot I want to decrement my hero life let's pass the attack power of the villain and same thing below live broad decrement villain life and let's pass the superhero attack power we don't need all of this we can take it out let's save our file now let us go to this line it seems that we have some error so let's see what's happening value of superhero is not indexable oh yeah that's right now since this is a class we have to say superhero dot in the name and here also villain dot name and now the error is gone let us go down and here what we can do since hero life and villain life are now the class variables of life so we can simply say live dot hero live and yet it becomes life dot villain life and now we have a beautifully typed object oriented game design so let me save my file and let me try to run this now that's really amazing everything is working perfect and it seems that I have also won the game welcome to the last video in this section this video is all about the different magic methods that we can use inside our classes till now we have seen only three magic methods one was in it second one was repr and the third one was Str but python provides many more of this magic methods so let me try and cover some of the most commonly used magic methods what I've done is behind the scenes I've created a file called as box and let us start working with this as you can see it's completely empty so let's create a class call it as box and the edit method this box is going to have two sides so I can say my side a the type is an integer similarly we have side B type is an integer this is going to return nothing and my instance variable so my side a is equal to my side a and my side B is equal to my side of B so let's create the wrapper method so you are already familiar with it I am just returning a new string called as class of box now let me create the Str method so till now there is nothing new to you inside my Str method I'm just returning a nicely formatted string saying that this is a box and side a and the value of side B let us create two boxes so this is my first box and this is my second box let us also print them out so I can say print my box first and print my box number two as well so let me save the file and let me run so till now there is nothing new to you let us go back now suppose what happens if you do something like this I want to say I want to add both of them together so if I say B1 plus B2 is equal to my B3 and then I want to print my B3 let us save and let us try to run this file and see what's happening it's saying that this is an unsupported operand and that's because python does not know how to add one box with another box but we can implement this functionality by using different magic methods so if you go back and if you say minus again if you try to run again we have some sort of an error because python does not know how to minus these boxes and the same thing will happen for all of the different operations such as multiplication division less than greater than less than equal to greater than equal to and so on but what we can do is by using different magic methods we can implement this functionality on our class so let's see how we can do this step by step the first thing that I want to show you is how we can use the in operator so let me give you a small example this is my IPython shell if I say o in octolium so we get a true so let us see how we can implement this syntax of in for our box we can implement this by using another matching method and the name of this matching method has to be specific and the name is underscore underscore contains underscore underscore this tricks self as the first argument the next argument is what we want to check so let me name that argument as number for now let us skip the type and I will come back to it a little later let us see what this type has to return let us go back to my iPad and shell and here you can see the return type is of the type of Boolean so that's what is going to be the return type so this function is going to return a Boolean that is it has to return true or false the logic for this is pretty simple let me again go back to my iPad and shell and let me show it first over here suppose we have a list so let me call it as L and this is 1 comma 2. now if I say 1 in my list of L we get the answer of true if I say 3 in my list of L we get the answer of false so what we can do is we can simply create a list of both the sides so side 1 and side 2 and we can simply compare that the other argument is inside that list or not so let's see how to do that here we can simply say return if the given number is inside my list and I can say the first List member is my self dot side of a and my side of B now this method works but this is not foolproof what happens if this second argument is not a number if someone provides a Boolean value or some other value then how we can say the user that we have an error so for this let me show you some new syntax so let me go down let me put a comment now if you remember when I was teaching you about classes and instances we use one method which is called as is instance and then we could check if the dog is an instance of animal if the cat is an instance of animal or not so we are going to do the same thing right here we are going to check if this number is of the type of integer or not if this number is not of the type of integer then we can simply throw a number so here what we can say number it can be any object we don't know beforehand what the user is going to provide so object is a generic term and if you remember everything inside python is an object so we can say number could be any object and now let's try to see if the number is an integer or not so we can say if then we can use the inbuilt function called as is instance then we can say is my number and instance of my integer and if not so let me go up and I can use the word if not here I want to throw an error so I can say raise not implemented error now since this number is not the type of an integer we don't know how to do the comparison so we simply raise an error in the next section I'll be teaching you more about errors right now just try and understand if in a situation we don't know what to do we can simply raise an error so that's what we are doing right over here let me save it and let me show you it in action so we don't want this one here I can say is 4 inside my box of 1 and I can also say is 6 inside my box of one let me save it and let us run this file so here we have the output let me take it up 4 in box number one yes and that's true six in box number one false let us see what's happening so this is our box number one we don't have a six over here now watch closely what happens if I write something like this I can write a over let me save it and let me try to run it and this time we get an error and this error is of the type of not implemented error and that is what we have coded if you go back to our line number line number 15 since a is a string but we want an integer so what's happening is in this line we are raising an error if we try to evaluate is instance number is a type of instance it's going to fail because here the number is actually the string of a so if not an instance of integer then we want to raise an error and that's what we are doing so if we just open up the terminal we are throwing and not implemented error so this error which is called as not implemented error so this is a standard way of throwing an error inside this method let's see some other operators so if I want to say is my box one is equal to my box 2. let us see how we can do this syntax right now let me take it out and since this line is always going to fail let me take it down and let me comment it out so let me go right over here and I want to copy and paste till this one let me go down and let me paste since we want to see both the boxes are equal or not the magic method is called as equal short form EQ let me write the proper documentation so this so this checks if both boxes are equal or not and this line is the standard check that we want to have now let's see what to do right over here this time we expect a box so let me change the name of the variable from number to a box let me go down so this also has to be box here we want to check if the given object which we call as box is an instance of the class of box or not so instead of integer this has to be my class of box so if the another object is also a box only then we can have a comparison but there is a small limitation of python we can't use the syntax directly but we can use a small hack and let me show how we can do this again let me go to the top and I can say from my future I want to import my annotations and now we can use the syntax which is right over here now let us see how we can compare both of the boxes now what happens is the box has a side side a and a side B if both of the boxes has to be equal that means both of the sides should match so that's what we are going to see right over here I can see that return self dot side of a is equal to is equal to the Box dot side of a maybe we can rename this variable we can call this as the other or we can say the other box right now I'll just write this as other so right now we are comparing the self plot side a with others side a similarly we also need to compare the side b as well so here I can say I want my side a to be equal and I also want my side B to be equal so I can say self plot side B has to be equal to the other Dot side of B and this also needs to be changed from box to other so let us go down and here we can say I want to print if my box one is equal to my box 2 let me save this and let me run this file and here we have the output false box number one is not equal to box number two let us go back and let us try to implement some other methods let us try how we can check for less than and less than equal to so what I mean is how we can implement this Behavior B1 less than and B2 or less than or equal to B2 so let us go up right where and let us start creating our method let me copy till this line and let me paste it over here so whenever we say that we want to compare if it is less than the magic method is called as LT which stands for less than let me also write the proper documentation so instead of this we want this one now let's check if the other box is smaller or not one simple way of doing this is by calculating area or you can also use this syntax but I think using the area is a much more cleaner method now since we already have the side A and B we can define a property for area and we can use that property right over here so let me go over here and let me create a decorator for my property I can say this is for my area self and this returns an integer so I want to return my site a multiplied by my side of B now this makes things much more simple so here's simply what I can do is I can go right over here and I can say return self dot area is it less than the others area and that's it let me save my file but what happens is this magic method is only for less than we also want to compare for less than and equal to so if you go to this line number 44 we have an equal operator as well so let's see how we can Implement that and that's pretty simple let me just copy all of this and paste it now this magic method is called as less than or equal to that means L and E and on this line we simply have to add equal to and that's it so let us start printing all of these things so let me go down over here here I can say I want to print if my B1 is less than B2 one more beauty of this magic method is we have simply defined a magic method for less than and less than equal to but python can infer how to implement greater than or greater than and equal as well it simply has to reverse the logic and python does it behind the scenes we don't have to create another methods since we already have these two methods in place so here I also want to check if my box of one is greater than my box of 2 we can also use the less than an equal so we can we can see if this is my less than or equal and we can also use the greater than an equal so this one let me take out this line let me comment all of this let me comment all of this and let us try to run this one so here we have the output let us check if the output is true or not the first one is is my box number one less than my box number two let's see what's happening 3 multiplied by 4 is 12 2 multiplied by 5 is then so that means my box number one is larger than my box number two let's see the statement so this is exactly opposite my box number one is larger so this becomes false and that's what we have over here in the second line yes my box number one is larger so we have the output of true and so on for the line number 53 and 54 as well let us go back and let us see some other methods as well now let us see how we can Implement some basic operations such as addition multiplication division and so on luckily writing all of those methods is just a matter of copy and paste so let me show you first let us create a method for addition so where we can add two boxes let me copy and paste since this is for addition the magic method is called as ADD let me change the documentation and let me also get my spacing right and here we simply have to add the areas that's it let's check what's the error oh yes now it's saying that it got an integer as the return type but it is expecting and Boolean so let's see what's happening oh yes here we have written Boolean as the written value but that's not what is happening area is an integer so let us update this from Boolean to an integer so you see there are so many benefits of having a very well typed code let us Implement other methods for subtraction multiplication and division as well let us create one for subtraction and since it is a subtract we can say that this is subtract let me change the documentation and this becomes minus let us do for multiplication and since this is multiplication this becomes mul for multiplication let me change the documentation and this becomes multiplied the next one for division now this becomes a little tricky if you think for division it would be just div you are partially right but that's not what is happening let us go back to our IPython shell and let me try and explain what's going to happen so suppose if I say 1 divided by 2 we have the answer of 0.5 this is called as true division now if I say 2 divided by 3 we get the answer of 0.6 as well again you can see this is a true division but if you watch closely we have two integers and the output is a float what happens if you want to have the output as an integer as well in that case we have to use double slash and then three so this syntax is called as flow Division and this syntax is called as a true division the written value of an true division is always a float and the return value of floor division is an integer so let us go back to our code and see how we can do this the first one can be our true division so I can just say this is my true Division and this becomes my true division now remember that the return type is going to be a float this time since this is going to be a true division let me copy and paste this for our floor division so here I can say I want to have my floor Division and here I want to have one more slash and that's it let us go and let us print out all of these things so let me go right over here and let me put all of my print statements let me comment all of these things out and let me try to run this file and here we have the output so B1 minus B2 is 2 let us check if that is the case or not so the area of first box is 12 the area of the second box is 10 and that's what is happening so 12 minus 10 we get the answer of 2. and if you check the answer of all of the other methods obviously all of them are going to be right when I was going through the code I realized that we have a small mistake it's not really a mistake it is just about following the best practices of python so let me try and explain everywhere we are trying and throwing this error called as not implemented error which is absolutely fine but the guidelines in Python suggest that whenever we have a binary operation that time we simply have to raise an error which is called as not Implement so this and this are two different things please keep that in mind so let me Rectify all of these things so let me just copy and paste it everywhere so all of this let me do my multi select this becomes my not implemented this one and this one as well so let me save the file what I mean by an binary operation so all of this operations minus plus multiplication division Etc all of these are called as binary operations but this one when we are checking 4 inside B1 this is not a binary operation so in this case we are using not implemented error and whenever we have a binary operation at that time we are using just not implemented well that's it for this video and now we are officially at the end of the section and I will see you in the next section where I will try and expand your knowledge of error handling in Python welcome to a new section this section is all about error handling in Python now errors in Python can be divided into a couple of categories the first category can be thought as your syntax errors that means whenever you make some errors in typing those errors are called as your syntax errors now fortunately these errors are very easy to catch and these days we have much better tooling inside Visual Studio code and our plugin my Pi or if you are using an IDE such as pycharm all of these tools will help you to catch syntax errors the second category can be thought as your runtime errors that means this errors are not reflected inside your code but whenever you try to run it this errors will pop up this error is a little bit difficult to debug so as we saw in our last video whenever we can't handle a situation we were raising some kind of Errors so when we raise those kind of Errors at least we can have some idea what's going wrong during our run time and this errors in Python are called as exceptions so let's see one by one all of this the first thing that we are going to see is the most common one and that is called as your syntax errors so let me go back to my code editor and what I've done is behind the scenes I've created a new folder called as 0 7 error handling and this is a file called as maths dot pi now let's see what's happening there is some red line right here print X and Y this is an example of my syntax errors so at least I need to have a comma right over here or I need to have like my formatted string so something like this and this has to be inside my curlies and this as well and now if you try and save your error will go away so this is one of the most common errors called as a syntax error now let me try and show you what do I mean by a runtime error so what I've done is I've created another file called as divider and let's see what's going to happen this time let's create a function that divides two numbers so I can say Define divide the first number could be an X the next is in y and this does not return anything and we can simply print out my x divided by y so till now everything looks perfect and we don't have any errors now let me go down and let me say I want to divide my four by zero now what's going to happen we can't divide any number by zero it's just not possible so what is going to happen is our program is going to panic and it is going to exit so let me save and let me run this file and let me show you this in action so here it is our program pan it and we have an error which is called as zero division error division by zero so this is an example of runtime errors there are no visible errors inside the code but whenever we are trying to execute this code we have some errors so let me put a comment over here so this throws or raises an error and the type of the error is zero division error if you open up a terminal that's what we have so this is a type of error or rather this is a type of exception in the world of python let us try to expand our knowledge of errors so in this program we saw that when we Panic we get an error this error is a very specific one and the name of this error is called as 0 division error now python gives us an error handling mechanism in the form of try and accept blocks so let us see how we can use that syntax to catch this zero division error so let me go back and let me create a new file and I can name the file as smart divider dot pi so let us create our function called as smart divider again it's going to accept X which is integer Y is also an integer this is returning nothing now let's see how we can do a very smart division last time we saw that when we divided by 0 we got an error and that error was 0 division error we can catch that by using our try and accept blocks so this is how the try and accept blocks goes so inside the trial this is the code that you want to try so trying the code and in case this code fails then we can say accept and this is the place we are going to catch the specific error and we have that error then do something with the error let us see how we can fill these blocks so inside try let us see if we can divide or not so I can just say my number is equal to x divided by y and I want to print out my number now what happens if we get the same zero division error so we can tell python that whenever we are going to have that error I want my accept block to catch it so I can say accept my zero division error so that means whenever I get this error I want to catch that error and after catching that error I can do something with it so let me just print out some message can't divide by 0 use some other number now let us go back and let us try dividing by 4 with 0 and let us try to run this so this time we have a much better output our program is not panicking instead we get a very helpful message saying that can't divide by 0 use some other number so as you can see we can handle our errors now imagine one more scenario instead of 4 I write as a then what happens let us run and see what's happening this time again we have some other error and this time the error is called as type error and unfortunately our program is panicking and it is terminating Midway let's see how we can handle this situation as well so let me go back and let me create another file this time I will name it as really smart divider and let us start writing the code for this one let me copy and paste the code from my smart divider so let me take all of this and paste inside my really smart divider so since this is a really smart divider I can say this is my really smart divider let us have a look at the error one more time so what's happening is let me take it down so what's happening is we were trying to divide by a now a is of the type of a string and fourth is all the type of integer both of them are essentially of different types so that's what this error is saying so we have a type error let us see how we can catch this error as well we can chain our accept blocks so we can say if we have a zero division error then I want to catch it right over here but if there is a type error so I can say accept my type error let me catch it right over here and this time I can print out both X and Y needs to be a number but what happens if we don't know what kind of error we are going to get that time we can use some other syntax and this is called as accept exception so now this exception class is the base class for all of the different exceptions so just as we saw in our classes dog was a subclass of animal so same thing all of these errors zero division error type error and all of these things all of these errors inherit from exception now the same logic goes over here dog is an animal cat is an animal same thing any errors that we get is also an exception and that's what we are trying to catch over here here we can also add an alias so we can say I want to catch my exception as a variable called as e then we can simply print out what happened wrong so here I can say oops something went wrong and let me print out my exception which we are calling just as e and that's it this time we have a really smart divider let's try to invoke it so I can say my really smart divider cannot divide 3 with 0 can you divide three with four can divide 3 with a now let me try to save and run this file and this time we have the output so the first time we have a 0 so we have the output can't divide by zero second time everything looks good so we have the answer third time we have a string so we have the output both X and Y needs to be a number we are making really good progress with errors and let us learn the last missing pieces for our error handling so let me create a new file let me call it as try else and finally dot pi and let me copy all of the code from my really smart divider and let me paste into this file let let us call the function just as divider so let me take this out there are two more pieces for this puzzle so till now we have seen the try block and the accept block now let's see the else block now what happens is if this condition succeeds then the code inside the else block can be executed so inside my try block I am just trying to see if I can divide x with Y if this succeeds then I can say that I want to print right over here the naming is a little weird but we can't really help it so whenever a try block succeeds we can use an else block to execute some other code as well let me add a couple of print statements just for the sake of clarity so else is executed only when try succeeds so we are trying to see if x can be divided by y or not and if that succeeds only then we want to print out the number now the last piece is called as finally now no matter what happens if the try succeeds or it fails this finary block is always going to execute so let me write a print statement right over here you may not appreciate the beauty of this block finally but just imagine a scenario that you're writing a web application and you want to write something to the database or suppose you are interacting with some other apis and you want to do some kind of a cleanup operation maybe you want to delete some files maybe you want to insert some files so no matter the outcome if the operation succeeds or fails we can have that logic inside the finally block now let me save this file and let me run this file so as you can see we always have this output of finally so no matter the outcome we always have this block let me comment one of this so that we have much more clarity we try and run the file so we have a zero division error and since we have some error the code inside the else block did not execute but the code inside our final block executed and we have this output right over here now let me go back and let us drive the second one let me comment this out and let me try to run this so now see what's happening since this operation is succeeding we go to the else block and inside the else block we first print these two lines so that's what is happening we have those two lines right over here and after that we are printing out the number so which is 0.75 and this block finally this is always going to execute so that's what is happening so if you try with this one you can have the same output so let me uncomment this so since we have an error our else block will not execute let me run this file for the last time so here it is we have a statement saying that X and Y needs to be number the code inside the edge block is totally omitted but the code inside final block is executed and we have the output right over here let us have a look at the next kind of error and this kind of error is called as assertion error now this assert statement that I am going to show you this statements are very useful in testing now we are not going to learn testing in the series but I just wanted to show you the assert statement so what I have done is behind the scenes I've created a file called as find Sohan so what's going to happen right now is Lewis has a list of friends and let us try to see if we can find a particular friend in that list or not so let me name the function as find Zohan and this accepts a name of the friend that we want to find so this returns nothing so we can say none so this is the list of friends so I can just copy and paste it right over here now let us create our try and else blocks so normally you'd write as name in my list of friends and this would give you a Boolean value of true or not but what we can do is we can also use the keyword of assert so what I mean to say that I want python to assert if the name is inside the list of friends or not if the name is not present that means we can have a kind of error and this time the error would be assertion error so let us use the accept block to catch our assertion error so you can say or not arithmetic I want assertion and then we can see let us print out the name not found now in case we get a match and this statement succeeds then we can also write the else block and we can print out saying that found followed by the name we can also include the final block remember that this is always going to execute let us print Maybe goodbye that's it let us try searching for a couple of friends so I can say find Zohan and let us try to find for Zohan himself let me copy and paste and let me try to search for Sarah and let us run this file so we can see in the first case we found Zohan so we are printing out fine Zohan the final block always executes we have so we have goodbye as well the second time we could not find Sarah and it threw an assertion error which was caught inside this except block so we have the output of Sarah is not found and the finery block again executed so we have the output of goodbye till now we have been seeing how to catch an error but now let us see how we can actually throw an error so let me create a new file right over here this is going to be my fine Zohan part 2 dot pi and let me copy and paste all of this code from here now let's get working on this file now since I am not catching any errors I don't require this try and else blocks so let me take it out now if you can't find the name inside the list of friends at that time we want to raise an error so we can say that we can't find the given value that means we can raise a value error here we can say if the name is not inside my list of friends then I can raise an error and I can raise a value error and I can also give a custom message saying that the name is not found and we can also say else in case we find the match we can simply print it out we can say found and followed by the name so let me save it and let me try and run this file so the first time we have a match so our program will not panic but the second time we don't have a match and our program will Panic with an value error so let's see that in action and here we have it the first time we could find a match so we have an output but for the second time our program panicked and it threw the value error which you can see right over here so we have a value error followed by our message saying that Sarah is not found well this brings us to the end of this section as well if you want to learn more about errors you can go to this link so this is all of the files from GitHub go inside this folder error handling and go to this file readme I have put up a reference right over here you can visit this link to learn more about errors and that's it for this one and I will catch you in the next section welcome to a brand new section this section is all about learning packages packages are used to organize our code so let's see how to create some packages but before that let us see a couple of examples where we have used them for example inside our game we have been importing a random end from random I also enum and auto from enum what this means is we are importing something that is useful from us from a package or a module and you can see this gives a very nice organization so it's very clear from a random module I am importing something random from my enum I'm importing something as enum so you get a lot more clarity inside your code so let me go inside my zero eight packages folder and inside of this let me create a new folder the name of this one is 0 1 local modules for the sake of clarity I am going to open this newly created module inside a new code editor window so I can just go inside this I can say 0 8 packages and I want my code Editor to open zero one local modules in a new window so here we are if we just hover you can see I am inside my folder01 local modules suppose you are taking a maths class and you have to do a lot of calculations and this calculations involve squares rectangles circles and so on so let's see how we can divide all of this functionality by using our modules let's say we have to do some operations on a circle so let's create the first file let me call this as Circle Dot py and let me create a class of circle and let us create the init method so I can say Define my init this takes itself and this also takes a radius suppose the radius can be a float value this returns nothing and inside we can say self Dot radius is equal to my radius let us also create the Str method so I can say my Str would be myself and this returns a string here I can return saying that my radius is my self dot radius now in the same class you also have to deal with rectangles so in order to organize our code we can create another file for this rectangle we don't have to Club all of the functionality inside a single file so let's do that so right over here let me create a new file called as rectangle.pi and let us create the class for rectangle let us create one more file for dealing with squares so I can create another file called as my Square dot pi and let me just copy and paste from rectangle so let me paste it this becomes my Square this becomes just my side I don't need this and my side is equal to my side this becomes minus square and I can just say that this is My Side Y my side and that's it oh I forgot to put a colon so so what we did is we segregated all of the functionality into different files now technically all of these files are called as modules inside python we may call them as files but they are identified as modules so what we can do is we can import functionality from this modules so let's say we have a file called as geometry and from that model of geometry we can import all of these functionalities and we can work with them so let me show you all of these things in action so let me create a file called as geometry dot pi and here I can see from my module of circle I want to import the class of circle same thing we can do for rectangle and square so I can say from the module of my rectangle I want to import my rectangle and the last one from my model of square I want to I want to import Square so what we are doing is we are simply importing the things that we want to work with now this file Circle rectangle and square they can have multiple functions or they can have multiple classes but we just need to import the things that we want to work with so let us create a circle maybe the radius is 5 let us create a rectangle so I can say my rectangle let me give some random values then let us create a square let me give some random value as well and then we can simply print them out so this is my C and this is my rectangle and this is my Square let me save it and let me try to run this file so as you can see we have the right output first one is a circle with a radius of 5 then we have a rectangle and then we have a square so in this example what we did is we created different modules but if you look closely Square rectangle and circle all of these things belong together and we can create a package which I will show you in the next video we just saw how to create different modules and in this video I will teach you how to take all of the common models together and how to create a package out of it you must have noticed that we have a couple of additional files let me take it right over here so this was the folder that we created in the last video and you can see we have multiple different folders one of the first folder that you can see is for this one this is called as py cache you don't have to touch this folder this is just a mechanism by python to speed up your code just let it be there now for this video let me just copy and paste this folder and let me rename this to 0 to package and also let me open up the folder inside a new window so I can say code 02 package so here we are so this is the exact same code that we created in our last video now what happens is circle rectangle and square all of this are similar all of this are shapes and we can organize our code in a much better way so let's create a package which is called as shapes so packages are nothing they are just a special kind of directory so let me create my directory and let me name it as shapes after this I am just going to copy my circle inside my shapes yes I want to move same thing for my rectangle and my Square as well so let me just drag all of these files inside my folder of shapes yes I want to move now we need just one more file to declare that this folder is and package and not just an ordinary directory the way to do that is by creating a file and the name of the file is very important the name of the file is underscore underscore init underscore underscore Dot py when python sees this file it considers your directory to be an package now let's see how we can import all of this circle rectangle and square in our file of geometry so here you can see we have a couple of errors and that's because we have moved all of this code inside a new package and the name of the package is called as shapes so here we have to say that from my package of shapes I want you to go to the model of circle and you can say that by putting a DOT so this means from my package of shapes I want you to go to the model of circle and inside the model of circle I want you to import my class of circle same thing will go with the rectangle so here I can say shape slot rectangle and this also goes to my shapes dot Square just save a file and that's it if you try to run the file here you can see we have a proper output there is one more concept that I wanted to explain in this video so what's happening in this video is shapes is an isolated directory or you can say it's an isolated package which has certain functionality and we have created a file called as geometry and this file is interacting with our package of shapes so conceptually you can call this file as your client and the package of shapes as your API so what we are doing is we have created a client file which is interacting with our API it's a very simple concept now let us see how we can import functionality from within a package itself so let me copy and paste this folder and let me call this as 0 3 and local package and let me open this folder in a new window so I can say code 0 3 now suppose you are inside your package of shapes and inside this package if you have to work with any of the modules how would you do it let me show you with a small example suppose we have a file called as shape dot pi and inside this file if you want to import Circle rectangle and square you must be thinking that we can simply say from rectangle I want to import rectangle well you are partially right but not entirely right the way to do it is by putting a DOT right over here so this means that from my current package so this dot means my current package from my current package I want you to go to my model of rectangle and from that module I want you to import rectangle let's do the same thing for Circle so I can say dot Circle I want to import my circle and also I can say from dot of square I want to import my Square now let us go to our client file and let's see how we can interact with this file so let me go back to my geometry dot Pi now this syntax is perfectly fine it's going to work but let us use our newly created file so what we have done is we have created a file called as shapes dot pi and we have imported all of the other models inside this file so here what we can do is we can simply say from map package of shapes I want to import the model of shapes so this shape means this module right over here and here we can see I want the circle which is inside my model of shapes and that's it let me copy and paste it everywhere let me paste it here paste it here and that's it let me save it and let me try to run this file and we have the right output let's see if we can further improve our code so I'm going to copy this folder and paste it one more time and let me rename this to 0 4 package underscore init and let me open up that folder in a new window so my code04 okay so here we are so what we were doing in the last video is we created a new model called as shapes and this module was importing the functionality from all of the other modules but we can do better instead of creating a new module we can simply take all of this Imports let us copy them and let us put all of these things inside my init file that's it just save it and I can't get rid of this file so let me just delete this it's not required now let us go back to our clan file so this is our geometry here we can simply say that I just want to import shapes and that's it just save a file and everything should work just as before so let me try to run this file and still we have the right output so what's happening is we are just importing the entire package and since we have all of the modules which are imported inside our init method we can have access to all of them right over here so this init method just acts like a Constructor for your entire package so it's similar to our classes we were using the same naming convention to have a Constructor for our class the same thing goes over here but here we are constructing a package instead of a class and that's about it I am so excited to see you in the last section in this last section we have two projects the first one is for a cash register and the second one is obviously is going to be our game but this section marks a fundamental shift till now we have been thinking and writing with our types but this time we would be seeing how we can organize the code in different layers just in the last section we saw how we can create packages packages was one way of organizing our code but now let's try to think beyond our packages let's try to think more about in the architecture point of view now this concept may sound a little alien but by the time we are finished with our projects this concept would be much clear to you for now let us concentrate on the first project so this project is all about a cash register but before we can jump in and just start writing our code I want us to take some time and let us think how we can design this application so I want you to take back to the concept of voc dtp so this is a very simple concept which I propose for your learning so this concept stands for your visualize outline code so this is your face number one once you're done with the first phase the second phase would be debug test and polish let us try to see one concept at a time so this is going to be our problem statement we simply want to make a simple cache register suppose you have a shop and you want to create a software for your cash register so basically we just want to implement at what's happening at our checkout counter just try to imagine what's happening over there normally you would hand your items to the cashier the cashier would scan the item he will generate an invoice the cashier would accept the payments and he will hand over the products to you so out of all of these things let us just try to concentrate on the cash register so let us go to our first phase which is this one visualize outline and code inside this phase the first step would be to visualize let us try to visualize how our application would look like let's try to imagine what's happening inside the cache register as soon as the cash shares scans an item an item is added to the invoice now what happens if the customer wants to change the quantity the cashier can simply update the quantity and what happens if the customer changes his mind and he wants to drop an item then simply cashier can delete the item from the invoice the next thing that I want you to think is an item can also have different components such as a discount of our tax which can be added to the invoice now just to help you visualize how our code will look after implementing our cash register I have created a nice dictionary so let me show you this is how our final outcome should look like let me zoom out a bit okay so this is our final outcome if you watch closely it's not complicated it's just a dictionary structure we have a couple of keys and we have a couple of values let's see what keys do we have the first key is for the customer the next key is for the invoice total the next one is for the items and the last one is for the purchase date now let's see at the values the value for the customer is a dictionary itself the value for the total is a float now here for the items it gets a little more interesting this bracket to this bracket this is the value and inside this value we again have dictionaries so these are the different items so we have one atom for an apple the next one is for an egg next one for milk and inside this items we can add different components such as your discount your quantity and your subtotal and for the purchase date we simply have to display the date of purchase that's very easy now the thing is I could visualize this data structure just because I have some practice but the same thing can happen with you when you practice a little bit more you can visualize this design even before you can start coding let us go to the next step let me zoom in again let us go to the next step which is outline here what we are trying to do is we simply want to outline our structure so if you see right over here in this step we have a couple of different objects first one was for the customer for the invoice total items and so on so let us try to outline what component or what classes or what objects we would require inside our application so here I am inside the next step for outline obviously we require a customer the next thing we require is the item that the customer is buying and the next thing which I have already explained we require an invoice entry why do we require a separate invoice entry is because different items can have different discounts or offers or they could have some kind of Taxation so for the sake of Simplicity let us call this item as invoice item so this means once you have the item Insider invoice it will have a slightly different structure and finally we have a place called as cash register so this object keeps in record of everything that is happening on the counter so let's try to summarize the objects that we are going to require so we need a customer we need an item we need one more for the invoice item and the last one obviously we require a cash register so till now we have much more clarity about our application and the different objects that would be going inside our application and you would be tempted to just open up your code editor and start writing your code but I want you to hold your guns let's try to do little bit more planning so before we can write the code let us try to describe how our objects so that means let us try to visualize how all of these objects would look like in the world of python so let's see I have created a couple of diagrams for you this is how our customer would look like our customer would require a couple of instance variable it could also have some methods and the type of them and obviously our customer needs a first name and last name the type of this one is obviously is good with string and for the sake of customer we don't require any methods now let us go to the next object or the next class so this class is for the actual item itself we need some kind of an identifier so that every product needs a unique ID so we can have an ID as our instance variable then we also need a name for an item then we also require a price in this case let us keep the type as a float because we may have some decimal places as well the next one is a little more interesting we also need one instance variable for the measurement unit here the question is how do you measure the product it can be in kgs grams liters Etc so we need some kind of a unit that will describe how to measure this item now let's go to the next object or the next class this is our invoice item this class is pretty simple it has to accept one item so I have created one instance variable for the item and since there can be some kind of a discount we need one more instance variable for a discount and the customer can purchase in multiple quantities so we have one more instance variable for quantity now for this class we require one more method and that is to have our subtotal we need some small Maps over here we need to figure out how much is a discount and how much is the quantity so each item can have a different subtotal and that's what we are trying to calculate inside this method let us go to the next and the last class that we require and this one is for our cash register so this class is going to record everything that is happening inside our shop so let's have a look at the different instance variables first obviously it needs to know who is the customer that is making the purchase it also needs to know the different items that are being purchased it also needs to record the purchase date and here you must be thinking that we require one more instance variable to display the invoice total well you are right but instead of just creating an instance variable we are going to create a method called as get invoice total the reason is we have different items and different items have different subtotals so let us use this method to calculate the total of all of the subtotals this is more of a convenience feature now let's see what are the methods this class is going to have obviously at the cache register you can add an item you can update an item you can remove an item and at the last we can also display our invoice so till this time we have much more clarity on our application we have a nice outline in place we know which classes or which objects needs to go inside our application we know what instance variables are required the type of them the methods that are required for all of these things so we have a much better design and a much better Clarity with us and now we can think of writing all of these things inside our code editor but before we can do that I just wanted to show you one more thing so the document that I have put together this is technically also known as a unified modeling language diagram well to be precise this diagram is a little bit different from the document that I have put you can go to Google and check it out I have left the links in the redmi file and in fact free code cam has a full course on unified modeling language you can click over here to have the link for this one the next thing is just to translate all of this document inside the code and I have just shown you once we are done with our code the cache register would look something like this so this is what we are trying and going to code and this structure that we are going to code can also be imagined to be a data structure so now we get it there is nothing big about data structures it is just a way to represent our data here you can see that we have a custom data structure of the type of cache register in the next video we will actually start writing the code and I will see you then now let's get going what I've done is I've created a folder called as 0 9 projects and inside this folder I've created one more folder called as project one cache register and I also have this file inside my project so let me open up this project in a new window so I can say code and here it is so now let's start writing our code let us see our outline here you can see that we have four different objects that are required so let's start with one of them at a time let us create the first file for our customer so it's going to be customer dot Pi this is going to be class of customer and let me Define my init method is going to be a self and let us go back to the document and here we can see we already know the instance variables and the type the two variables would be first name and the last name let me just collapse my sidebar so let's create the init method for the first name and the last name so let me go over here so my first name is a string my last name is also a string and this returns nothing here I can say that my self DOT first name is equal to my first name and then my self dot last name is equal to my last name let us create an wrapper method for this as well so let me say self this always returns a string and this can return a very simple string saying that this is a class for customer let me add some documentation class as well okay so this is the class for the customer details now I'll just create the Str method so this takes in a cell and returns a string so we can say I simply want to return self DOT first name and I also require myself dot last name let us go back and see which is the next item so the next object that we want to create is for an item so let me open up my sidebar let me create a new file called as item dot pi and let's see what are the different parameters required so item requires four different instance variables ID of the type of integer name String price float and measurement unit which is going to be a string so let me go back to my file of items.pi and I can say my class of item let me add some documentation then let's create our init method so I can say my init cell the first one was the ID that type is integer the next one was name the type is a string next one was price the type is a float the last one was measurement unit this is going to be our string this returns nothing let us create the instance variable so self dot ID is equal to my ID then self dot name is equal to the name self dot price is equal to my price and self dot measurement unit is equal to my measurement unit let me add a small comment over here so our measurement unit could be a kg or ml or so on next let us create the repr method so I can say wrapper self returns per string and I can say return that this is a class of item next let us create the Str method so Str self this returns a string and you can say return then we can put the name of the item and let's display the price so let's say it's going to be dollars and it's self dot price per unit so we can say self dot measurement unit let's go to the document and see which is the next thing that we want to create so the next thing is invoice item things get a little more interesting from here if you see the instance variable the first one is an item but the type is an item so please keep that in mind and for this class you also have a method called as get subtotal and this method Returns the subtotal after adjusting for the discount and for the quantity so let's create one more file right here let me call it as invoice item dot py let me collapse my sidebar and let's say this is going to be class of my invoice item let me add some documentation let's create the init file init cell the first argument is for an item and the type is item but this is not going to work because we don't have item in this file let us import it from the module so we can just go right over here and we can see from the module of my item I want to import the class of item now this will work the next argument was for quantity and the type was integer the last one is for Discount the type is a float here we can do one more trick we can assign the values right over here so that means if the user does not provide an argument for Discount that means by default the discount would be assigned a value of 0 so this is a very convenient feature of python now this is going to return none self dot item is equal to my item self dot quantity is equal to my quantity self dot my discount is equal to my discount now let's see what else we require so we also require a method called as get subtotal so let's create that method but before that let us create our wrapper and Str method so let me write my wrapper takes itself returns a string and it can written saying that this is a class of invoice item the next is for my string takes the self and returns an Str and let us create a nice string for this so we can say the item and let us display the self now here I want to display the name of the item and we can get the name of the item through our type of item so we can say self Dot item Dot name so if you go to the definition of item you can see we have an instance variable of name so this is what we are trying to refer right over here next we can say the quantity and let us display self dot quantity then let us display the discount so we can see this is dollars and it is self dot discount we can also display the subtotal we have not yet created this but we will create it shortly so let me write it first and then we will create it so I can say subtotal would be self Dot get subtotal remember we have not yet created this method but we will create it shortly and let's do one more small trick over here let us display only two decimal places we can do that by using the syntax so we can say colon and we just want two decimal places for our float uh now this line looks a little longer so let us try to divide it so let me take this line and let us put a bracket opening one and the closing one let me take it inside and let me cut all of these things clear and let me go to the next line and let me paste it over here okay so this looks much better now this is complaining because we don't have this method till now let us go and create this method so we can say Define get sub total this just takes the cell and this Returns the float now let us see how we can get the subtotal what I'm going to do is I am going to use a very simple Trick In fact I am going to define a private member right over here so let me put up a comment saying that this is a private member let me call it as self dot underscore subtotal now remember since I want this very able to be kept as private that's why I'm using underscore right over here now python does not have a concept of private and public but this symbolizes to other developers that we want to keep this variable as private now let's just calculate the subtotal which is pretty easy so we require the price from the item multiplied by the quantity and minus the discount now let us go back to this method get subtotal and we simply have to return it so I can say self dot subtotal the reason why we are doing all of these things is I don't want any other developer or any other user to accidentally change my subtotal I want it to be kept as private that's why I'm using this method you can also create a property called as subtotal which is also a valid solution you can definitely do that but right now for the sake of Simplicity I'm just creating a private member let us go back to the document and see what is next so the next one that we want to create is for the cache register itself so this is the cash register note the types that we have over here customer is all the type of customer then we have the next instance variable items the type is in dictionary then we have the purchase date the type is date time and we have a couple of methods on this as well let us create a new file right over here and call it as cash register dot Pi let me collapse my sidebar and we can say my class of cash register let me add some documentation that this is the cash register for each customer then we can Define the init method so self so as we just saw the first argument is for the customer that type is customer we also need to import customer which we will do shortly we also need to have one more for the items and that is a dictionary and we need one more for the date but before we can finish all of this definition let me first go and import customer so I can say from the module of customer I want to import my customer now let me go down over here this Returns the none here I want you to wait and think how to create the instance variable in this case what I'm going to do is I'm not going to accept items over here instead let us create an instance variable directly first let us say self Dot customer is equal to my customer here we can say self dot items is equal to an empty dictionary just imagine before purchasing anything the basket is always empty so that's what we are saying this has to be items that's what we are saying since we don't have any items inside our checkout that's why let us assign an empty dictionary to it but here how do we Define what are going to be the keys and what are going to be the values of this dictionary let us write the type in right where items is my dictionary but what are the types which is the key and which is the value let us go back to our design document and try and see what we exactly want this is a small trick right over here if you see the design of items items is actually a dictionary and inside this dictionary we have the key is of the type of a string so let us go back to our definition right over here and we can see the key is going to be of the type of string now let's see what is going to be the type of value so let us go back the value is of the type of invoice type so if we remember inside the invoice item we have fields for the discount name quantity and we are also calculating the subtotal so what we can do is inside the cache registry we can have the value which is of the type of invoice item so I can say invoice item let us go up and let us also import so that we can use it so I can say from my module of invoice item I want to import the class of invoice item so remember whenever we are creating these items the key is always going to be the string so if you just go back to the design document here it is inside the items the key is always going to be the name of the item and the value is always going to be of the type of invoice type let us go back to the class the next one that we want is for the purchase date now we have already seen it earlier we can automatically create the purchase date by using our date time library and that's what we are going to do in this document as well first let us go and import so I can say I can say from date time I want to import my date time and let us create an instance variable we can call it as self dot purchase did and we can generate this automatically by using date time and we want today's date time so we can just say now let us go down and let us create the wrapper and the scr method so I can say this is my repr self returns or spring and I can say return that this is a class of cash register let us also Define an SDR method we can say cell it returns a string here we can just return and here we can say first I want to display my customer so let us display my customer now what's going to happen right over here is we are simply calling self Dot customer and if you go to the customer so let me open up my customer file the scr of customer file returns a string in this format first name and the last name so whenever we are printing this customer by default we will get the first and the last name together we don't have to say customer DOT first name and last name it's not required next let us also display the total number of items so we can say total items and we can get that from the length of our items so let us go back to the document here it is so items is a dictionary we have three keys apple egg and milk so that means we have a length of three till now we have been using Len with lists but we can also use length with dictionaries as well and when you use length with dictionary it's always going to count the number of items so that's what we want right over here so total items is the length of my self dot items let us now implement the different methods for this one let us see which methods we require so let me scroll a little up so we require methods to add update remove and so on first let us see how we can add items to our cache register so let us go back let us create a new method called as add item by default the first argument itself now let's see which are the arguments we need to accept if we have to add an item we need to know what's the item so the first argument is going to be an item the type is going to be an item let us go and import item as well so I can say from my model of item let me import my class of item let us go back to this method now since we know which is the item we also need to know how much is the quantity so this is going to be an integer and we also need to know how much is a discount so discount is going to be a float we can do one more trick over here if quantity and discount are not given we can set some default values so by default the discount would be zero and by default the quantity will always be 1 so this returns and none so let me write none over here let me add some documentation and let us see how we can write the body of this function now the first thing is we would like to add an item to a card only if it is not existing if we already have this item inside our cash register we can simply update it we don't have to add it so the first check would be for this one so I can say so I can say if my item dot name not in my cell of items first let us type it out and then I will explain what's happening so let us go to the next line here I want to create a new item but if you scroll up the key is a string the value is an invoice item so that's what I am going to create right over here if you find it a little confusing just go with the flow and after we are done typing this function I will explain what's happening so here I want to create a new item is equal to the type is an invoice item so create an instance of my invoice item and let's see what it takes it takes an item quantity and discount that we already have right over here we just need to pass all of those inside so the first is for the item second is my quantity third is my discount the next thing that I want to do is I want to set the key and value pairs again let us first type it out and then I will try and explain so I can say my self dot items now here the key is going to be a string so this is the part that we are working on the key is the string and the value is the invoice item so if you refer the document I want the key to be the name of the item so that's what we are going to do right over here let us go down and we can say that the key has to be the name of the item and the value is the new item which we just created now let us go to the next line what happens if this item is already existing inside our registry so we can say else we simply want to print out we can see item dot name already in card you want to update instead let me take out one more extra comma we don't require this one now let me try and explain what's happening right over here let us go back to this document now let's see how the logic goes so suppose this is my iPad and shell let me create my cache register for now it can be an empty dictionary so this is all good now let us go to this line our cash register has one key which is called as item and the value is of a type of dictionary itself so let us do that over here so we can say for my register I want to create one key which is called as items sorry it has to be items and this is an empty dictionary let us try to print it out so this is how our register is looking right now we can also use the if and in syntax when working with our dictionaries suppose we want to check if our dictionary has one key which is called as items or not so we can say items in register and that is true let us check for customer in the resistor so that's false because we don't have a key called as customer inside the resistor we can use the same syntax when referring to items as well remember items is also a type of dictionary let us assign some values to these items and then we can check for the if and in conditions let me copy all of this I just want this one and we can say for my directory of register I want you to go to my directory of items now what we can do is since this is a directory we can also create new keys and new values over here so here I can say I want to create a new key for my Apple and the value is this one we just copied right over here so let me just paste it over here so this is the value and that's it let me just clear all of this let us try to see how the resistor is looking right now so this is how it is looking inside the register we have a key called as items and inside the items we have apple as of now let us copy and paste one more product this one so let me copy this and we can use the same syntax so I want to say register is a directory I want you to go and find the key of items here let us create another key by the name of eggs and let us assign a value of this thing to it and that's it let me clear it and let us see how our register is looking now so here we have it first we have an apple which is right over here and then we have an egg now let us check if an particular product is inside our items or not so we can say apple in my register I want to access my dictionary of items and in this dictionary so from year to year we want to see if we have any Keys called as Apple we do have so the answer of this one should be true and that's it we have the answer of true let us try to search if we have milk inside our items or not so let me just go and change this from Apple will false we don't have milk inside our items now if I just flip the statement so if I say milk not in now let's see what we get as a response so the response is true milk is not in miter is free now since my milk is not there inside my register only then I would like to add it if it is existing then I would simply like to update it now let us go back to our code and try to relate what's happening so let us have a look at this line at line number 24. I am just trying to check if an item is existing in our items or not on line number 26 so items is our dictionary the key is going to be the name of the item so that's what I've taken right over here and we are assigning this item to the key that we just created and we have a beautiful structure in place but this function is not at complete the moment we add one item we also need to upgrade our total otherwise our logic would be wrong so let's see how to do that in order to show the totally inverse value we would also require one more additional instance variable so let us create one private this time so we can say this is a private member and I can say self plot invoice total initially let us set it to zero I want the type to be a float instead of an integer now what happens right over here whenever we are adding an item we also need to increase the invoice total that's pretty simple so we can simply say self Dot underscore invoice total plus equal to and we can say my new item dot get subtotal remember when we created this invoice item we implemented this method to calculate the subtotal and why do we need this method because we have to adjust for the quantity and discount and that's what we are using right over here so this method gives us the subtotal for the new item which we simply want to add to our invoice total but the issue is this method is not reliable what happens if you have a typo instead of plus we have minus or we need to do some other validation logic before we can increase the total the answer is let us create one function that will increase the subtotal so let's create one method right over here so we can say increase the invoice total the first argument would be obviously the self now let's see what argument should we take if you go down we can get the subtotal if we have the access to our new item the type of this new item is an invoice item so that's what we need to get right over here so this function accepts an item which is or the type of invoice item and this returns nothing let us add a documentation saying that this increments the total inverse value each time an item is added let us go down and let us take this line this is what we are exactly doing right over here let me paste it and let us change the name of the variable because the variable we are calling it as just the item over here so this is the item let us go below and use this newly created function here we can say I want to sell Dot I want to increment my invoice total and I simply need to pass the new item inside of this so new item the last modification that I want to do over here is I want to keep this method as private I don't want any other developer to accidentally change my logic let us go down and let me update this syntax as well now we have a beautifully typed and a much more stable code and while we are here let us create one more method to decrease or decrement the invoice total whenever we are deleting an item from the register we would also need one method to decrease the subtotal so let's do it right now let me copy and paste all of this the name changes from increment to decrement this also changes to decrement and this becomes removed and this becomes minus equal to and that's it let us create the next method to update our card the logic is somewhat similar to this one so let me copy and paste all of this this has to be update let me change the documentation so this becomes too update an existing item and this one becomes not in the card and do you want to purchase instead now let's see the logic for this one we can update an item only if it is existing so let's do that right over here so let us change from not in to just in so if we have that item only then let us try and update it but before we can update that item we need to get the old atom back and we also need to decrease from the invoice total so here we can say that my old item is equal to my self dot items and I want to retrieve a specific item and this item would be my item dot name so let us go back to our IPython and let's see what's happening over here we are just trying to retrieve a data so this is our existing register and suppose we want to get all of the details for X suppose we want to update the discount or the quantity and so on before we can update we need to retrieve it first so I can say my egg details first I want to go to my register now since this is a dictionary I want to access my key and the name of my key is items and inside items I want to access another key this time the name of the key is X we can see right here we have a key called as X so this will retrieve the value for this one let us see what's happening oh there is a syntax error so this has to be a square bracket let us try to print the egg details now and we have the details in place and that's what we are doing right here we are simply trying to retrieve an item from its key now remember the keys are always string values so if you go right over here we can see item is a dictionary and the key is a string this string is the name of the item so that's what we want after we have the old item we also need to decrement its value so we can say self I want to decrement the value and I simply need to pass an item so let us pass just the old item on the next line we are going to create a new item with updated quantity and discount and we are going to add that item back to our register so all of this logic Remains the Same let us go to the next part and let us see how we can delete an item but first let me go back to my iPad and shell and let me show you how to delete an item from a dictionary let me clear all of this and let us print our register one more time so you can see resistor has a key of items and inside these items we have two another items one is for apple and one is for our eggs suppose we want to delete Apple let's see how to do that the way to do that is by using a keyword called as delete and after this we simply need to specify which key we want to delete so I want to say I want you to go to my register from register I want you to access my items and once inside my items I want you to delete my key of Apple and that's it now we should try to print a resistor and you can see we have deleted Apple let's use this syntax right over here to delete an item from our register right over here let me copy and paste all of this let me take a little up the name is remove we don't need the quantity and the discount we just need to know the item that we are supposed to delete let me update the documentation so this is going to be removed item from our cache resistor we don't require this as well now let's see the logic we can delete an item only if it is existing and that's what we are checking over here so we need this logic in place since we are not creating any item we can delete all of these things here we are retrieving an item the next line we are decrementing the invoice total now we simply have to delete it from our dictionary and we have already seen the syntax so we can say I want to delete from my items and the key would be my item dot name and let us see what else is remaining it will go back to my document and we have to implement this methods get invoice total and display which are pretty simple let's create the first one we can say get invoice total this takes a self and this returns a float let me add some documentation and here we simply have to return cell dot underscore invoice total the last one is to display our invoice so let us create some pretty looking output so I can say display my invoice takes the self and it returns nothing let us try to visualize how our invoice would look like now this is the code from my GitHub repository I am inside my projects and project number one if I run this file I have a output and this is how our invoice would look like so on the first line we would like to have a nice separator followed by the customer details and followed by the date of the purchase so let us go back and let us do all of these things here we can create a nice separator line by using a print statement and I would just like to say that this is my separator multiplied by 70 times so what this is going to do it is going to repeat this symbol for 70 times before this let us insert a blank line so we have a nice spacing in place next let us see what we want we want the customer details and the date so we can just go back and here on the next line I can simply say I want to print self and if you see our Str method that's what we are doing right over here so this is our string method customer and followed by the total items and that's what we want right over here the next line is for the date so let us go down and on the next line we can say I want to print my date and we already have it so I can say self dot purchase read now remember in some of the earlier videos we formatted this date and time according to the month day and the year that's what we are going to do right now as well so I can use the method called as string format time and let us give us a format so this format stands for the month the day and the year let's see what we need next we require one separator and after the separator we require all of the items so let's get back and let me copy this line from here let me change the separator from plus to our Dash and in the next line we want to print all of the items that's pretty easy so I can just say for my item in my self dot items dot values let us print out the item and this has to be brackets because we want to get the values out of our dictionary next let us see what we want so we require one more separator total price and one last separator so let's do that let me copy and paste this right over here on the next line we can see that my total price would be in dollars serve Dot get invoice total and let us display only two to seven points so I can say colon and I want two decimal points for my float and that's it let us go back and check oh no we require one more separator so let me copy this and paste it right over here now we have a way to display our invoice as well we are using multiple print statements but if you want you can use a template or you can also use a multiline string as well but this is much more simple for now now let's get back to our document so we have everything in place let us check what's remaining so code we have cache register in place now we just need to find out a way to interact with our cache register so that means we just need to create a client that can interact with our resistor so let me create a new file let me name it as the Vista Dot py so this would be our clad file and here obviously first we need to import our cache register so let me collapse my sidebar and I can save from the model of cache register I simply want to import my cache register and then we also need a customer so I can say from my model of customer I need customer the last thing I want is the item so I can save from item let's import item let's create the first item so let us create milk so we can say milk is an item let's give it an idea of 100 name would be just milk price could be 4.5 dollars and the measurement unit can be a liter let us create our customer as well so I can save my customer one is my customer the first name is Lewis the last name is Zappa now this customer is going to the store and making an purchase so let us create a cash register for Lewis so we can say this is my cash register number one we simply have to give the customer and that is our customer number one let us try to print out our cash register right now so I can say print my cash register one let me save it and let me try to run this file so right now the customer is Louis Zappa and the total number of items is 0 and that's true because we have not yet added any items so let's get back and let's make Lewis purchase something so here we can see that my cash register one I simply want to add an item and the item I want to add is my milk now you can give some additional arguments as well the quantity and the discount right now let us go with the default values and let us try and save and run this file now we can see we have one item on our invoice let us go back let us create some more items let us create one as egg so I can say item the ID could be 101 the name is egg the price could be 99 Cents for one egg the measurement unit is for a piece then we can make one for Rice we can say item id could be one or two name is arise price could be four dollars for a kg let's create one last one maybe for an apple we can say item ID could be 103 the name is Apple maybe it is for 5.67 dollars for a kg now let us make Lewis purchase some other items as well suppose Lewis also wants to purchase eggs so we can say cr1 dot add items so Lewis wants to buy some eggs suppose this time he is purchasing 12x and for quantity of 12x there is a discount of 50 cents that's it let us save the file and let us try to run this so this time you can see we have two items in our invoice a little better way to display the invoice could be by using our inbuilt function so let me take it out and let me say cr1 dot I want to display my invoice now let us try to run this file so this time we have a much better output so we can see the customer is Louis Zappa there are two items this is the date of his purchase and these are the items remember for the egg we specified the quantity was 12 and there was a discount of 50 cents that's what we have over here here you can see we have only one item so the subtotal is 450 for this one we have 12 items minus the discount and so the subtotal is right over here and right over here we have the total price as well let's try to play a little bit more with this one let's try to upgrade one item so suppose Lewis thinks that 12x are like a lot and he wants to buy only 10x so we can say I want to update my eggs and this time the quantity is 10 but fortunately the store is in a good mood and the store is offering a discount of say one dollar so let us save it and give it a try so you see we have an updated quantity of 10 discount of one dollar and we also have an updated subtotal as well and automatically the total price also gets updated let us go back and let us try to add one more item suppose this time Lewis wants to buy some rice maybe he wants to buy three kgs of rice and there is a 75 cent discount on this one so let me save this and let us run the file so this time we have three items and we also have rice in our items as well let us go back now let us see if we try to add an item which is already existing then what happens so let me copy and paste this one save and let us try to run the file so here you can see we get the prompt say that rice is already in card do you want to update instead so you can see all of our code is working beautifully and if you see right over here nothing is changed everything is just as before let us go back now what happens if we try to update an item which does not exist so suppose we say that we are trying to update an item maybe we are trying to update for apple and the quantity could be 10 the discount could be zero so let me save it and let me try to run this one so again we get a nice message saying that Apple not in card purchase instead and if you see the invoice it's just as before there are no changes to our items so let us go back so right over here we can say that we want to remove eggs and let us try to display our invoice after repoing as well so let me copy this and let me paste right over here let me run this file so here you can see this is the earlier invoice in this invoice we have eggs and and this is the next one when we remove we don't have eggs in our invoice so you can see we can also remove an item from our invoice I also wanted to show one more trick right over here we can also create an alias for customers Suppose there is a big application and there are two files and inside both of the two files we have a class of customer then we can create an alias so we can just say that I want to import customer as my customer and we simply have to update one line over here so this instead of a customer this will be called as my customer just save your file and if you try to run it everything works smoothly let us go back and let us create one more customer just for the last time so we can say my customer 2 is my customer and first name is Chico her surname is Neutron let us create a cache register for this one as well so this is going to be my cash register for my customer number two suppose she is purchasing some milk and the quantity could be four liters here I can also use my keyword syntax so I can say my quantity would be 4 4 and suppose we have a discount of 10 dollars let us try to add one more item so this time she wants to buy some eggs and the quantity is 25 next she decides to update the quantity of x so next time the quantity is 48 now fortunately the store is offering a discount of 12 on the quantity of 48. Chico also wants to buy some apples so let us buy some apples as well and let us display the invoice that's it let me save the file and let me try to run this file so here we have the invoice for Chico so Chico has three items milk egg and apples for the milk the quantity was four liters the updated quantity for X was 48 and for apples it was 8 and this is the total price now we have a beautiful program in place let us go back I wanted to mention one point over here if you see the code inside my GitHub so this is the code downloaded from GitHub my GitHub file has a couple of more methods for example if you go to cash register I have a couple of extra methods so all of this is extra and I had to create this methods because I wanted to see the output in a dictionary format so if you go to this document I wanted to have the output in this format so that is why I had to do a couple of more work and that's the reason why you can see all of these methods but I am not going to explain all of these methods inside this tutorial if you want you can give it an attempt and try and study what's happening but to just give you a short idea I am converting everything to a form of a dictionary and finally I am exporting that dictionary to a Json format that's why I can have a nicely formatted output now if I go to this file register so this is on my GitHub code so here I am using this method to Json to have a nicely formatted output now if you run this file I can get the output in the way I desired I hope you learned something new in this video now this video had a lot of Concepts and it was very densely packed so if you don't understand any concept you are not to be blamed it's quite natural that it will take you some time to understand maybe you have to go through this video a couple of times you would also need to have some better understanding of how to work with your dictionaries before you can understand what's exactly happening in this code so this project is going to test all of your basic understanding of python up till now now the next game would be much more easy to implement and I'll see you in the next video I am so happy to see you in the last part of this entire tutorial the last part is all about our game saving zotan and in this final project we would be actually implementing how to think in layers first we will write all of the code and then I will try and explain why we did what we did so for starters I have created a folder called as project 2 savings Orton as you can see it's all empty so let me go and let me copy my file it's right inside my section number six let me copy this and let me paste inside my project number two let me open up the project in a new window so I can say I want to open my project number two and that's it we have a nice and clean slate to work with and this is our existing code now let's begin till now we have seen how to organize our code in different modules but for this game we are going to create a package of game and that package will contain all of the logic and everything that goes for creating a nice game so here I am going to create a package called as game and as you know making a package is very simple it's just like creating a directory so let me create a directory let me call it as game and let us create our init file so that python knows that this is a package now let me drag and drop this file inside my package yes I am want to move now let's begin with our code so let us get started let me open up this file and let's see the first one we have for the character type so what we want to do is we want to make our game as modular as possible so what we are going to do is we are going to take out everything and everything goes inside its own module so inside my package of game let me create a module by the name of character type dot Pi I simply have to copy and paste everything so right from here I need the Imports let me take all of this let me cut it out go to my character type and paste it let us see what's next the next one is our character so let's create one more module inside our package of game and let us call it as character dot Pi again I simply have to cut all of this so let me take everything from here let me cut it out and go and paste right over here let us go back the next is for the superhero so again let us create a new file superhero dot pi and let me take everything from here let us cut it out go to our superhero file let me paste this and we can see we have a couple of errors and that's because we need to import character and character type so let me go to the top now here since we are working inside a package we need to say that from the current package the module of character I want to import the class of character the same thing for character type as well so from the current package I want you to go to a model called as character type I want you to import my character type now if you save all of the errors will go away let us go back the next one is for villain so again go back right over here let us create a new file called as villain dot pi and let us take all of these things let us cut it out and paste it right over here also let us do our Imports so from director import character from character type import my character type let us go back so the next one is for the life let us create a new file called as live dot pi and let me take all of these things till till the last till yeah let me cut it out and paste it right over here let me save it let's go back to this file and if you see this file is pretty much empty now so let me delete all of the blank lines from here I don't require all of these things let me take out the documentation as well because we already know what it's all about don't require this as well so let me go on the top so we have a much smaller file this time and let's see how we can improve even further but before we can go a little further I wanted to add a couple of more classes the first class that I wanted to add is for a player it would be so nice to have a player so let's create a very simple class for player so let me say my player dot Pi this is going to be my class of player I can Define my init the first is obviously the self next could be for the first name this is string next for the last name this is also a string and this returns nothing I can say self DOT first name is equal to my first name and self dot last name is equal to my last name let us create the wrapper method so I can say retr and sell this returns a string and it can return saying that this is a class of player let us create the string method as well so our self this returns a string so let me just return the first name and the last name so I can say self dot my first name and self dot my last name that's it and this time we are going to have one more class and that class is for the game State just imagine when we are just starting the game we can have a different state maybe initializing when we are playing the state changes from initializing to in progress and at the last the state can change to either win or lose so we can keep a track of the state by creating a new class so let us create a new module right over here so this is going to be called as my gamestate dot Pi for this I am going to use the enum so I can say from my enum I want to import enum and auto then I can say my class of game state which inherits from enum let me add some documentation first one we can call as initializing so set it to Auto next one for in progress again set it to Auto the last two would be for the win and the Lost let's take a moment to review what we have done up till now we have created a module for each of the objects inside the game but if we have a look at all our modules they are basically structures for something for example character this is a structure for something character type again a structure for the types of characters game State the types of game state that we can have for player again we just have a structure the same thing for superheroes so this is just a structure for superheroes and so on so technically we can call all of these structures as schemas so schema simply represents a structure and that's it so let's create another package inside the game of package called as schemas and let us put all of this functionality inside that package so inside my game let us create one more folder by the name of schema and to make this folder a package let me create file inside of this it has to be again init underscore underscore dot Pi so let me collapse all of these things on the top level we don't have anything we just have a package of game inside the package of game we have another package called as schema now let us move all of the schemas into the right package so my character type my character game State live player superhero and villain all of these things will go inside my package of schema yes I want to move everything so let me collapse my schema right over here so inside my package of game we have three things first one is an another package of schema then our init file and last one is our game file now let us go back to our game file let's see what's next here we can see that we are retrieving all of the superheroes or we are retrieving a single superhero normally in an application you would have a database where you will store all of the superheroes and all of the super villains and that database could be controlled by something which is called as a models so just to get a field of models let us create one more package inside game so inside game let me create a folder called as models and inside this folder let us create a init file to make it unpackage let us go back to my games file now what happens in an application whenever you want to interact with a database so you can imagine all of these things to be a part of the database because this is the place where we are storing all of our data so normally a model would do all of these things for us so let's go into models and let us create one model for our superheroes so this becomes my superheroes dot pi and let us create one more model for our villains so this would be my file for villains dot pi and let us start writing up a code inside of this so first let me go to my superheroes so let us declare a class called as super hero model and let us create the init method now this init method does not take any argument because we don't need anything and this returns nothing now for the instance variable we can simply return all of the superheroes or a single superhero so let's see how we can do that we can declare an instance variable called as self.all and we can return all of the superheroes but let's see how to do that for now let me assign it a blank list let me go back to my file of my game here I just want to cut out all of this functionality for get all superheroes and get superhero let me cut it out go back to my models file and let me paste everything right here now since this belongs to the class I want to take it inside so let me take it inside the class and since now these are members of the class the first argument has to be self and here as well the first argument has to be self now let's see what to do next now this method called as get all superheroes it returns a list of superheroes so this means that this is the schema of the superhero so let's import it let me go to the top now what happens is we are inside the package of models and the schema of superheroes resides in some other package called as schema which is right over here so here we can say from my package of game I want to go to the package of schema and from here I want to go to the model of superhero and once over there I simply want to import my superhero now you can see all of the errors are gone let me save this the next thing is this is complaining because we have not given the tides for this one so self dot all is going to be a list of all my superheroes right now it is blank but we can easily get it from this method so I can say this is just myself dot get all superheroes and that's it so what this method is doing is it already has the data for all of the superheroes on this line it is creating a list and on this line it is returning that list so we have access to all of the superheroes now what happens here is since we have an instance variable called as self.all we don't have to expose this method to everyone and so we can make this method as a private method and you know the way to make it private is by putting an underscore so this syntax has to be updated right over here so this also becomes my underscore now let us go to this one so this has to be my self dot underscore get all superheroes and in fact we don't require this line at all because this time we already have a class and we already have access to all of the superheroes inside our instance variable called as self dot all so what we can do is we can take out this line and here we can simply check for the length of self dot all and this also gets updated to self dot all and everything is looking beautiful let us also create the string method right over here so we can say Define my Str ICT self and it returns a string as well now let's see what we would like to display now since this model represents our data we can simply print out a list of our superheroes so let's do that over here so what we can do is we can simply print out the names of our superheroes inside a list let's see how to do that first let us create a list for all of the names so this can be a list of string and let me assign it to a empty value then let us just populate this list with all of the names of the superhero so I can say for my superhero in my self dot all I simply want to append to my list of names so I can say name dot append and each time I want to append the name of my superhero so I can say my super hero and his name and let's see we have an error missing written statement oh yes we are not returning the list so we can say return my list of name now we have one more error and this error is because the return type is a string but we are returning a list so let's do one thing let's use our formatted string so I can use my formatted string and let me put this inside my curly brackets now everything is looking good let us repeat the same thing for our villains as well so let me copy all of these things from this file go inside my models then to my villains and let me paste over here so this becomes my villain this becomes my villain this also becomes my villain Everything Changes this also becomes my villain again here we have a villain let's change this one as well and this also needs to change so this will be villains we don't have this method as of now but let us go to the games file and let us copy everything right from here so let us cut all of these things and go inside our villains model let me paste everything over here and let me take everything inside my class now since this belongs to a class let us add self then this becomes a private method then we need to add self over here this line needs to go this line becomes my self dot all same thing over here this also becomes my self.all and this is just for our super villains everything is looking really good so till now what we have done is we have segregated our code as per it functionality wherever we had only the structure all of those files wet inside my schemas and where I have to interact with my database or my data those files went inside my models now let us go back to our games file so this is my game file right over here let us start deleting all of these things which are not required so let me take it up if you see we would have a bunch of Errors now let's try to work on this file now this file is all about the game and the actual logic so this is the place where we are actually implementing the game so the first thing that I want to do is I want to rename this file now since this file is all about implementation I like to call this file as just impl so which stands for implementation you are free to name this file whatever you want you can call this file as your logic your brain or anything that you want but for me implementation makes much more sense now let's see what we can do inside this file first let me close this folder and this one as well and let me only open this file so this is where we are working right now our implementation is all about a game so the first thing that we require right via is we require a class of game this class will keep a track of everything it will keep a track of which player is playing the game what is the game state is the game in progress or someone has won or someone has lost what is the state who are the superheroes and who are the super villains and this class is also going to control all of the methods that we have defined over here so it's going to control our attack and our win or lose as well so let's create a class so this class is like the implementation of the entire game let us create a class called as game let us Define the init method it takes a self now this init method only requires a player we will just take one player and we will initialize a blank game in return so let's accept one player the type is a player now remember inside our schemas we already have a player which is right over here so let's go and import the player from our schema and we need to do one more change so this is not a single schema this is key Mars so let us add an s yes we want to make some changes now since we have changed the name of the package let us go to our models so by default Visual Studio code is going to do this for you but if it is not happening inside your IDE then make sure this is schemas and for villains this also needs to be schemas so let me go back to my implementation of file so here on the top I can say that from my current package so remember right now we are directly inside our package of game so let me collapse my models and schemas so you can see our file of implementation is at the same levels as our models and schemas and game itself is a package so we can see from the current package I want you to go to the package of schemas then go to the model of player and import our player let us go to this line right over here so our init method returns nothing now let's see what kind of instance variables do we require first let me write all of the instance variables and after that we can populate them the first one would be for the player and we already have the data that's right over here cell dot player next I want to keep a track of the game state so I can say self dot state would be my game State we will import that shortly let us create the next variable first we also need to keep a track of all of the superheroes and all of the super villains so let us create an instance variable for all of the superheroes let me get my Spring right this has to be my superheroes and we need one more variable for our villains now let's see how we can populate all of these things for the state we already have a game State defined inside our schemas so we can say from the current package go to schemas go to my game State and import my game State now let's see the first time we don't have any data so we can assign the state to initializing so we can just say my state would be game state DOT initializing now let's see for the next one we can get all of the superheroes from our models so let's go and import our models as well so I can say from my current package go to my models go to my superheroes and import my superhero model let's do the same thing for our villains as well so dot models dot villains import the villain model and here we simply want to initialize it so this becomes my superhero model this becomes my villain model now just remember when we created the model so if you go over here and if you see the superheroes you can see the Constructor does not accept any argument so that's what we are doing over here we are not giving any arguments because it is not required and with this we can easily have access to all of the superheroes and all of the super villains as well let us create the wrapper and the stream methods for this as well so we can say my wrapper method takes a self this returns a string and let it return that this is a class of game next let us create and string method as well this returns a string now let's see what we would like to return maybe we would like to return all of this details on separate lines so let's see how to do that so I can say I want to return a formatted string let me collapse my sidebar for a while now and let me take it up so the first thing that we want to display is obviously in the player and you can say self dot player now we want to display lay the state on a next line we can use a small trick over here we can say backslash and N so this is going to create a new line for us automatically and on the next line I would like to display my state so I can say the state would be my self Dot let me put a comma here as well so on the next line I would like to display my superheroes oh I need a code right over here so I can say my superheroes would be my self dot superheroes let me get my spelling right let me put my comma and we require one more line now since this is getting a little long let me split this so let me put a brackets and let me take it down and let me add one more formatted string right over here and this would be for our villains so we can just say that self dot above valence let us go below and let us take all of these things inside our class of games let me copy all of these things the method of attack the method of similar attack and we also need this method of win or lose till this point I want everything inside my class let me take it inside let me save the file and now we don't need all of these things because right now we are just creating a package and we will see how to use this package in the future so let me take it out and you can see we have a bunch of Errors so let's try and work with our file so let's work with this one so this is the place where the attack is taking place so I can just say in this block is for the attack now since this belongs to the class of game we can write self same thing will happen with our simulate attack as well so I can just write self right over here so let me save this again this one this also has to take myself looks good now let us go back now let's see how the attack is going to take place now let's fine tune our attack Logic Let me put some documentation so whenever we start an attack we can change our state from initializing to in progress inside this we can say self dot state so when we start an attack it changes to my game State DOT in progress then let's print out a nice line saying that start in attack and if you want to check the state we can simply print out the state as well so you can just say my self dot state so let us go down now let us have a look at this line at this line we are trying to get a single superhero but now we have this method inside our model so let me open up the file inside models if you go to our superhero now we have created a class called as superhero model and inside this class we have a method called as get super hero so let us try to reference this method right inside our implementation file so what we can write here is we can simply say that we want to go to the self dot our superheroes so remember this superhero is actually the superhero model let me show you one more time so you can see this superheroes is actually the superhero models so we can access this method right over here get superhero and that's the way we can get our superhero let's do the same thing for the villain so I can say my self dot villains dot get villain let me collapse my sidebar now let's go to this line land number 43. so since this method belongs to the class it has to be self dot now what this method is doing it is actually doing the attack so we can have a little better naming convention so we can just change the name from simulate to do the attack let me change right over here also and we can do one more thing we can mark this method as private because this is all about our internal logic no one has to know how we are doing the attack it's up to us how do we implement the logic this also needs to be my double underscore you can write a single underscore it's up to you so this simply means that this method is just private to this class now we have a bunch of other errors for superhero villain and life as well so let's import all of this and all of the errors will go away let us go to the top and here we can say from my schemas from my superhero let us import my superhero schema the same thing we can do for the villain as well so from dot schemas dot our villain let us import the villain schema and we can do the same thing from dot schemas dot my life let me import my life and let's see what's happening next so you can see lot of the errors have gone now this is a pretty easy error to fix we just have to import final and that's it but let's not do it right over here let us create a new file called as constants now let me explain why do we require a new file called less constants there may be times where we can have multiple constraints for our game for example let us go right over here in this method of attack you can see that we have hardwired the value right over here three so we have three over here because we have four superheroes and we have two over here because we have three super villains so we can think that all of these are simply constraints for our game but we can make our game much more modular what happens if you want to attack four times five times or what happens if we have multiple superheroes or multiple super villains we need to have a very easy method of doing all of these things so for this convenience let us create a new file inside our game inside my package of game I want to create a new file called as constants let me add some documentation you can imagine this file to be just a helper module and that's what this is doing the first one was for the number of attacks so we can just say the number of attacks and we can assign a value of 3 over here now let us go back to our implementation file and instead of hard wiring 3 over here let us import that and let us use that constant over there so we can say from current package go to the model of constants and import my number of attacks so let us go down and let us use that right over here now we can increase and decrease the number of attacks as desired let's go little down over here let us do the same thing for this one let us take it out so these values are never going to change they are going to be constants no matter what so let me cut it out let me go to my constants let me paste over here let me fix the indent now if you already know that we don't require a final keyword because when we name all of this in uppercase by default my Pi or our IDE is going to treat them as constants so we can take this one out and this one as well and in fact we don't require string as well because our IDE would be able to infer all of those things let us go back to our implementation and let us imported so let me go to the top so from constants I also need to get my winning message and also my loss message let us go down now since we already have access to winning and the losing message we don't have to do anything let me take out this line This is not required now let's see what's happening right over here here we also need to update the state of the game suppose we are winning then we can say self dot the state would be my game state DOT win and in case we have lost then we can say game state DOT lost so now we can keep a track of the state of the game at any given point of time there is one last thing to do in this file and that is right over here so here if you see we are using 3 and 2 because we have four superheroes and we have three super villains but what happens if we decide to add a couple of more superheroes or a couple of more super villains so let's try to make this code a little bit more modular as possible so what we want to do right over here is we can simply say I want to have the length of my self dot superheroes dot all minus of one now remember your index is always one less than the length and that's what we are doing right over here let us do the same thing here as well so I can say the length of my self dot my villains dot all and I want to minus of one the last thing to do inside this package is to create a file and let us create a file let us name it as game dot py now this file will have a single line of code so first let me write it and then let me explain what I'm trying to do so I can say from the current package I want you to go into my implementation and I want you to import my game as well as my player and that's it so what we have done is we have created an API which means your application programming interface so whenever some other developers have to interact with their code or if they want to play your game they simply needs access to just this one file game.py they don't have to import any of these things models schemas constants implementation nothing of those things are required all of those things are our internal implementation the clients don't need to know all of the logic they simply have to consume our logic that means this simply have to consume our API so now we are getting logic we have been creating our application in different layers so this was a layer just for our schemas models was just a layer for our database or rather data in our case and this game this file acts as our API now let us create a client file and let us play our game so outside the game let us create our client so let me call it as main dot file so by convention main is always going to be the most important file or the place where our program starts and as a convention we require a function which is called as main so this is the place where python will start all of our execution so this file can also be thought as your client let me put up a documentation so this file or rather this model is just as a client it is going to consume our API game and that's it let us import our API so we can say from my package of game I want you to go to the model of game and from here I simply want you to import my class of game and player now this looks a little odd game dot game but what we can do we can improve our design with a small trick so let us go back to our package of game and let us go back to the model of game let me copy this single line and let me put it inside the init file so this init file is for the game so I can just put my edit file right over here now I don't require this module let me take it out yes move to trash let me add some documentation over here so since we have this inside our init file we can simply write from game import game and player it becomes so simple now let us go back to our API file which is this one now the beauty of creating apis is with time your game is going to evolve and sometimes you may have some breaking changes so this was our first version maybe you can have a version 2 or maybe you can have a version 3 but at that time the client does not need to update his code we can refactor all of the code inside but the skip is API file the same so you see we have a lot of advantages of breaking our application into multiple layers now let's get going to the last part and let us create the main method where we can actually play our game unfortunately this is the most easiest part let me collapse my sidebar so this is returning nothing so I can say none let me put some documentation this is the place where our game begins Let Us create the first player so we can say my first player is my player and Lewis the last name is Zappa now let's create a game for Lewis so we can see we want a game for our player number one here let us just check the state of the game and since we are just starting the game our state would be initializing so let us just check if that's the case or not I want to see the state of my game one so game one dot State and the last thing to do is we need to invoke our main method so let me save the file and let me try running it beautiful so as you can see we have the state of initializing and that's what we expected right now let's start with the attack so here we can say I just want to have my game one dot attack but before that let us try to print the game itself so let me say print I want to print my game one let me comment this for a moment run the file and this is how your game looks like the player is Louis Zappa state is initializing this is the list of all our superheroes and these are all our super villains beautiful isn't it let us go back and let us have the attack first so we can say I want to have my attack and after the attack I want to see if I have winning or if I am losing let me save it and let me try to run the file amazing so we have a very beautiful output unfortunately we lost and Thanos killed our Avengers but it is such a beautiful experience let us go back and I want to make one last Small Change what we can do is we we can create something which is called as method chaining that means what if we have a syntax like this game one dot attack and here we can just say dot win or lose so this will look so neat and nice let's see how we can do that and it's very easy to do it let me open up my sidebar now remember all of the implementation happens in a single file so it becomes very easy to find out where do we need to make our changes and all of the changes happens in this file for implementation now since we want to have method chaining we simply have to return the game so that means on our method of attack we simply want to return the game itself so I can say this method is going to return my game let me collapse my sidebar and I also need to return so at the bottom right over here let me go on the next line I simply have to say that I want to return self now in order for this syntax to work we need to import one more thing so let me go to the top the first thing that we want to do is from future I want to import my annotations now we can use this syntax let us do the same thing for our method of win or lose so this returns a game and at the bottom let me just say let me return self beautiful let me close this file and let me go to my main file we can assign the game back to our variable so I can say game one is equal to my game one now let us print the state one more time right over here so what's happening is we are starting with an attack and then we are checking if you are winning or losing initially the state would be initializing and after the game it could either be win or it could either be lost let me take this little up so the first thing that we want to do is we want to print the game then the status then we play the actual game and let us have the state back again so let me save this and let me play this game so here it is so this is our game right here the player is Lewis state is initializing superheroes super villains beautiful then we are starting the attack after we start the attack the state changes to in progress this is how the attack is taking place but unfortunately Thanos has killed Avengers so our final status is game State lost so let us play one more time let us see if you are winning or not no lost no lost again lost lost oh this time we are winning it's so amazing so here you can see that when we won the game our state is game State win it's so damn amazing let us create one more player and let us play the game for the last time so let me go right over here and let me create one more player this player would be Chico Neutron and let us go down over here now just for the sake of nice print route let us print a blank line before the next game so here we can see my game number two would be my game and this time we can say my player is going to be my player number two and we can start playing the game here itself so we can say dot attack and after the attack I simply want to check if I am winning or if I'm losing this method chaining makes our game so easy to use so let me save the file and let me play the game for the last time oh I think both of us lost Kiko also lost the game and uh Lewis also lost the game let us play the game one more time no oh yes at least this time Lewis has won the game before we say we are done let us have a look at last time now there is no more coding left I just want to show this file and this file is called as thinking in layers so let me collapse my terminal my sidebar and let me put this in my preview mode so this is the last thing that I wanted to show you let us try to conceptualize what we have learned so far in this video by making this game so what we did was we divided our application into multiple layers now let's see what we exactly did you can imagine the first layer was our data layer and the packages were responsible for our data layer live inside the folder or rather the packages of models and schemas the visibility is private and the role is internal so what happens is whenever we want to interact with the database whenever we want to create a structure all of that code will go only in this packages the advantage is when we have multiple people working on the same project all of us can know where to find the data the next layer can be thought as our business logic layer and this layer is represented by our implementation and we have all of our implementation inside this file I ampl.pi again the visibility is private and the role is internal that means we as the developer of this game or of this Library only we can handle this file the next layer can be called as an API the package of game can be thought as our API remember we added a couple of files to our init method and our client can simply import all of those things from our package so essentially what is happening is our API is acting like an interface between our internal logic and our consumer so the visibility of our API becomes public and our main dot Pi file can be thought as a client because the client simply consumes our API and I hope this gives you a much better understanding of why we divided our code so much and why we created so many packages now that was such an amazing amazing effort and I would like you to congratulate yourself this was a pretty tough and a very intense course for beginner and you definitely deserve much needed appreciation you have done an amazing job wow that was one really awesome journey and I am so happy to see you at the end of this course now remember that the course is just ending but your journey is just starting and you have to do a lot before you can really understand python the first thing that you need to do is you need to solve a lot of problems and I also have a couple of topics that you can see if you want to progress in Python so and here they are so this is what you should be learning next have a look at how to handle files and folders iterators and generators form a very important part of python especially when you are working with classes and you want to create it labels so make sure you have a look at them then list comprehensions are also very useful the next point about data serialization and deserialization now this is very important when you are working with web applications where you have to convert your Json data or if you're working with some other data types such as if you want to convert your CSV file or Excel files to pandas data frame and so on the next is decorators we already had a small look about decorators but decorators is a pretty big topic the next is about your object oriented programming in which I would like you to have a look at abstract base classes and also oops in this tutorial we saw how we can inherit from a single class but in practice you can inherit from multiple classes you can also create classes that act as an interface so there is a lot more to learn about oops as well the next point is about multithreading and multiprocessing and the next one would be your concurrency and async IO now python has been a little notorious when it comes to concurrency but lately there have been a lot of development especially with the async iOS and tax so if you want to make concurrent applications in Python I would suggest you to learn a little bit more about concurrency the next one is testing now without testing none of your applications are going to be complete python ships with a testing framework which is called as unit testing and there are a couple of other testing Frameworks such as Pi test the next would be web Frameworks if you want to create web applications or if you want to create apis then I would suggest you to have a look at Django flask and fast API and last if you are interested you can always try learning machine learning and deep learning so this itself is a very huge Topic in Python and again I can't stress enough that you have to solve more problems and finally before I say goodbye I would really love to hear from you you can visit my website or you can tag me on Twitter or obviously you can check me out on YouTube as well see you and let the power of python be with you
