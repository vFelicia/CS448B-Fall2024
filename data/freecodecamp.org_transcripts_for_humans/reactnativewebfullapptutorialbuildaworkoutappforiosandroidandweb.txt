With timestamps:

00:00 - welcome to the beginning of my react
00:02 - native web series in this series we're
00:04 - going to be building out a workout app
00:06 - specifically we're going to be modeling
00:08 - it after this program called strong
00:10 - lifts they have an app and we're going
00:12 - to be implementing some of the
00:13 - functionality for this app specifically
00:16 - we're going to go over keeping track of
00:18 - your workout and then the history of
00:20 - your workout and have an app that does
00:22 - that now we're going to be building this
00:24 - with react native web so what this means
00:27 - is at the end of this we should have not
00:29 - only a website but also an ios and
00:32 - android app that does it for us
00:35 - and we should only be having one code
00:37 - base or at least the majority of it's
00:39 - going to be a single code base
00:41 - now here are the other things that we're
00:43 - going to be using to build out this app
00:45 - secondly we're going to be using mobx
00:47 - for state management and then pairing
00:49 - with that we're going to be using
00:50 - typescript as the programming language
00:53 - we're going to be using react navigation
00:55 - to be able to change pages in both the
00:57 - app or change pages in the website and
01:00 - we're going to be using react hooks for
01:01 - the entire thing and then we're going to
01:03 - be just working with the front end for
01:05 - this and so we're going to be storing
01:07 - data in local storage or async storage
01:10 - on the phone so that way we can persist
01:13 - the workout data as the user uses the
01:15 - app or uses the website and doesn't lose
01:17 - it after they come back to it
01:20 - all right so in this video we're going
01:21 - to set up our react native web project
01:25 - now to do this
01:26 - you can do kind of a multitude of
01:28 - boilerplates but i'm going to be doing
01:30 - create react app to start off with
01:33 - and then we're going to be
01:35 - you're free to choose a different one if
01:36 - you want to and then we're going to be
01:38 - possibly using our own webpack config
01:40 - later if we need to change some of the
01:41 - config
01:42 - and then we're going to basically just
01:44 - be going through the client side
01:45 - rendering portion of the react native
01:48 - web app
01:49 - uh
01:50 - read me for now
01:51 - so i went ahead and ready set up the
01:53 - react native or the create react app
01:56 - project right here so if you want to do
01:58 - the same you just go and run yarn create
02:01 - and you run react app and then whatever
02:04 - you want to name it and then i did dash
02:06 - dash typescript to make this a
02:07 - typescript project
02:10 - and then after that we should see some
02:11 - typescript files in the source and i
02:14 - just have this open in vs code right now
02:16 - so the first thing that i want to do is
02:18 - i want to add react native to this
02:20 - project
02:21 - so i'm going to say yarn add and i'm
02:23 - going to install react native react
02:26 - native web and then this package called
02:28 - react art or react art which react
02:31 - native web needs
02:32 - now i'm trying something new for this
02:34 - series you'll notice i have versions at
02:36 - the end of all of these
02:38 - the reason for that is i'm going to be
02:39 - trying these exact versions so you can
02:41 - follow along with me and hopefully as
02:44 - the series progresses there won't be any
02:46 - changes with you installing a
02:49 - later version of the package also the
02:51 - other thing you're going to want to make
02:53 - sure you install react native .55
02:56 - because if we take a look at the react
02:58 - native
02:59 - web documentation
03:01 - it's compatible with that version and
03:03 - not higher
03:04 - so we'll go ahead and install these
03:06 - three packages and then we're going to
03:07 - install the types for react native that
03:10 - way we have type definitions when we use
03:12 - typescript with it
03:14 - so we're going to say yarn add as a dev
03:16 - dependency and we're going to be adding
03:18 - react native and i can just bring that
03:20 - up so you can see it better
03:24 - and again i'm installing the types at
03:27 - version .55 just so it matches up
03:30 - so after we have installed those things
03:32 - we're ready to basically take out some
03:34 - things from the create react app which
03:36 - we just do not need so for example we do
03:38 - not need the svg
03:40 - index.css app or apptest or apps.css so
03:44 - i'm just gonna go ahead and just delete
03:45 - those now
03:48 - and then in the index.tsx file i'm gonna
03:50 - go ahead and delete this line right here
03:52 - and then we're going to paste in this
03:55 - client-side rendering code right here
04:03 - and so now we're just going to
04:05 - remove this react dom.render instead of
04:08 - us saying reactdom.render we're just
04:10 - going to be using
04:12 - this app register now notice uh ours is
04:15 - called root here this get element by id
04:18 - so we're just gonna rename this to root
04:19 - right here as well
04:22 - and the way that we're gonna go
04:23 - throughout the series is i think we're
04:24 - going to build out
04:26 - react native web or at least the website
04:30 - and then at the end we'll get it working
04:31 - with the app or maybe in the middle
04:34 - we'll spin up also the app and make sure
04:35 - that it's working but we're going to
04:37 - primarily develop this from a the
04:40 - website point of view and basically the
04:42 - process of doing this is we're actually
04:44 - going to just be writing all our code
04:46 - uh using react native import so you'll
04:49 - notice we've imported from react native
04:50 - here we're going to be importing from
04:52 - react native the entire time through our
04:54 - code
04:55 - all right so i'm gonna go ahead and save
04:56 - this
04:57 - and it's going to remove those dead
04:59 - imports at the top i have it so a vs
05:01 - code setting so it
05:03 - does that for me if you want to turn
05:04 - that on you can go to preferences
05:06 - settings
05:08 - and if you come click on the brackets
05:10 - over here you can see the bracket
05:12 - versions of your settings and i believe
05:14 - one of them i have organize imports
05:17 - yeah so this editor.code actions on save
05:20 - i have it automatically running organize
05:21 - imports so you're going to see that
05:23 - throughout the series happening
05:25 - so now that we have this initialized in
05:28 - our index.tsx we want to just go into
05:30 - our app itself and convert it to using
05:32 - react components or react native
05:34 - components so that's just app.tsx right
05:37 - over here
05:38 - and we're not going to be using classes
05:39 - we're going to be using function
05:41 - components and
05:43 - hooks
05:44 - so i'm going to say const app and here
05:47 - we're just going to say
05:49 - return
05:51 - and also the other thing i want to
05:52 - mention is probably throughout this i'm
05:54 - going to be using some
05:56 - different shortcuts so i'm going to be
05:58 - posting my vs code settings below if you
06:01 - want to get these as well so one of them
06:03 - i have is called rnss so this is going
06:06 - to create style sheets for me so we're
06:08 - going to be using style sheets from
06:09 - react native
06:10 - to do this so these are little snippets
06:13 - and also i have rh for react hook and so
06:16 - this is going to
06:18 - spit out a snippet that looks like this
06:20 - and so here i can say
06:22 - uh the name my component app and this
06:25 - one doesn't take any props so i can just
06:27 - say
06:27 - say it like that
06:29 - and now i can put whatever stuff i want
06:30 - here
06:31 - anyway i'm gonna get delete all this
06:33 - stuff we don't need any of that code
06:34 - right there
06:35 - and i can get rid of all this stuff here
06:37 - and basically we can empty the file and
06:40 - just have this
06:42 - and we don't need to export this
06:44 - so now we're going to actually be using
06:46 - a react native components here so i'm
06:49 - going to say view
06:50 - and then we're going to say text and
06:52 - we're going to say hello
06:54 - from react native web
06:57 - and of course we need to import all
06:58 - these and i can i just hit command and
07:01 - then period this is another one you're
07:03 - going to see me do throughout the series
07:05 - to import things
07:06 - i can either import just this view or
07:09 - import all missing imports the other
07:11 - thing you'll see me do is if i have my
07:13 - cursor here i can hit command and space
07:16 - to auto complete get this menu up both
07:18 - of those i'm going to be constantly
07:20 - doing throughout the series so it's good
07:21 - to add those to your repertoire as well
07:24 - um and yeah the text we want to also
07:26 - import i just did command period and it
07:28 - doesn't look like it's slaying me
07:30 - import it so usually i'll hit command
07:32 - space to uh sorry control space and i'll
07:35 - bring it up and you can see
07:37 - i want to auto import from react native
07:38 - we'll hit enter
07:40 - all right so this is what the start of
07:42 - our application is going to look like if
07:44 - i come back over here
07:46 - we need to start the server up
07:48 - say yarn start
07:50 - and then when this boots up we can go to
07:52 - localhost 3000
07:54 - and it's going to actually render the
07:56 - view and the text and so
07:58 - the thing with
07:59 - create react app is underneath the hood
08:02 - what it's going to do is it's going to
08:05 - change react native to react native web
08:09 - and it's going to be using those
08:10 - components and then react native web
08:12 - turns the view component into divs
08:15 - and i guess the text component maybe
08:17 - also into divs but anyway we can see the
08:19 - text right here
08:20 - show up we can even inspect this and see
08:22 - what the heck it created for us you'll
08:24 - notice with react native web it spits
08:26 - out a whole bunch of classes for us
08:29 - that's an interesting thing i noticed
08:31 - but anyway
08:32 - that's kind of your introduction to
08:34 - react native web of how to set it up
08:36 - recap of what we did is we installed
08:39 - three packages
08:40 - react art react native and react native
08:43 - web
08:45 - and then inside our index.tx we
08:48 - initialized our app using this bit of
08:51 - code that we got from the readme
08:53 - instead of
08:54 - the react-dom
08:56 - and then in our app we're just going to
08:58 - go ahead and continue to flush out this
09:00 - thing using
09:01 - react native components
09:07 - so before we go any farther i want to
09:09 - make sure we can get react native setup
09:12 - with react hooks so that's we're going
09:14 - to be doing in today's video and start
09:17 - off with we're going to be using the
09:18 - react native cli now usually when i
09:21 - start a react native project i'll
09:23 - usually opt for expo just because the
09:25 - development experience is a lot better
09:27 - and you can start up the emulator and
09:29 - build the application a lot faster
09:32 - but as of today or currently they do not
09:35 - support react hooks at least i don't
09:36 - believe they do so we're just going to
09:38 - be using the react native cli for this
09:41 - so to do so we are going to first
09:43 - install it and we're going to install it
09:45 - globally
09:46 - by running this command npm
09:48 - i-g and i already have it installed
09:51 - globally so i'm just going to interrupt
09:53 - it
09:54 - next thing we're going to do is run the
09:56 - cli to create a project in react native
10:00 - so we're building the project in
10:01 - typescript so we're going to follow this
10:03 - guide right here
10:04 - and we're just going to run this command
10:06 - right here and i've already done this
10:08 - initialized a my awesome project
10:11 - and that's what i have open vs code
10:13 - right here
10:14 - so after that the first thing i want to
10:16 - do is if we look at our package.json
10:18 - you'll notice that they have two
10:19 - dependencies react and react native so
10:23 - we want to set up hooks in this project
10:25 - so we're going to need the latest
10:26 - version of react
10:28 - or at least react 16.8
10:31 - and then for react native we're going to
10:33 - need version 59 to work so we're going
10:36 - to install both of those
10:38 - so we're going to say npmi
10:40 - and install react at version 16.8.2 and
10:44 - react native at 0.59
10:46 - and this is currently a release
10:47 - candidate so that's why there's this
10:49 - dash rca
10:51 - so we're going to go ahead and install
10:52 - that
10:53 - and then
10:54 - especially with react native you might
10:57 - have saw or mentioned last video that
11:00 - with react native web it's only
11:02 - compatible with .55 and we're currently
11:05 - using we just installed five nine to use
11:07 - in this particular project
11:09 - so this is what i'm going to attempt and
11:11 - we'll see how well it works
11:13 - is i'm going to be using 5 9 in the
11:16 - react native project
11:18 - this one and then our web project we're
11:20 - going to be sharing the same components
11:23 - but we'll see if we can get it working
11:27 - the components even though we're not
11:29 - we're gonna try not to rely on any react
11:32 - native
11:33 - five nine
11:34 - features that would break the react
11:37 - native web project but we'll see how
11:38 - that goes
11:39 - um anyway so we got this uh installed
11:43 - so we can go to the app.tsx so this is
11:46 - what's currently being rendered
11:48 - if we were to start the app right now
11:50 - i'm gonna just delete the app.js because
11:53 - we do not need it if you click on it
11:55 - you'll notice it has the flow version if
11:57 - you want to use flow but we're going to
11:59 - be using typescript
12:01 - all right so we're just going to write
12:02 - out a simple hook to make sure this
12:05 - works so i'm going to say down here
12:07 - just export defaults app
12:10 - and then i'm going to convert this into
12:13 - a
12:14 - function
12:15 - so i'm going to say const app
12:19 - and then this is going to just return
12:21 - and then i'm going to just copy the view
12:26 - and then we're going to say
12:29 - const
12:31 - use state
12:33 - and we're just going to create a little
12:34 - counter to make sure it works
12:36 - so here i'm going to say count and set
12:39 - count
12:41 - and then here i'm going to display the
12:43 - current oops current value of count
12:45 - and then below that we're going to
12:46 - render a react native button
12:51 - we're going to say increment
12:53 - and then whenever you press this we're
12:55 - just going to say set count
12:57 - is equal to count one
13:00 - and we're going to give that a save we
13:02 - don't really need the props here
13:04 - and now if we go to our package.json we
13:06 - want to run this project so we can start
13:08 - the cli or the packager by running yarn
13:12 - start or npm start
13:17 - the next thing that we have to do is
13:18 - actually start the emulator itself
13:21 - so i'm going to be running the ios
13:23 - emulator
13:24 - so what i'm going to do is i'm going to
13:26 - say
13:27 - ios here and i'm going to say react
13:30 - native run ios
13:33 - now for those of you that are on a
13:35 - windows computer you're going to need to
13:37 - use android and you're going to need to
13:38 - have
13:40 - android studio installed and have an
13:42 - emulator created and when you have both
13:44 - those things
13:45 - you can create an android script here
13:47 - and just say run android
13:50 - and you want to make sure i believe your
13:52 - android emulator needs to be running
13:54 - when you run this command but if for the
13:57 - ios one it'll automatically stir it up
13:58 - for you
14:00 - so we're going to say npm run ios
14:03 - and uh just a heads up this will
14:04 - probably take a few minutes to actually
14:06 - build this on the emulator and get it
14:08 - all working
14:10 - and then we'll see our application and
14:11 - make sure it works
14:14 - so mine finished building and i can see
14:15 - the app starting up here now if you
14:18 - don't see it started up what should
14:19 - happen is if you go to just the screen
14:22 - with all the apps there should be a new
14:24 - icon it should say my awesome project or
14:26 - whatever you named your project you can
14:28 - just open that up to see it
14:30 - so if we go ahead and click this we can
14:32 - see it's incrementing the state so hooks
14:34 - are indeed working with react native
14:36 - right now
14:38 - so where we're going to go from here is
14:39 - we can now have our react native project
14:42 - set up and we also have our react
14:44 - project setup
14:46 - so the next thing is is we're going to
14:47 - set up a mono repo so that way we can
14:50 - create basically that one code base that
14:53 - we're sharing with our react native
14:54 - setup and with our react setup and
14:57 - basically that one
14:58 - module or package that we're going to
15:00 - share between both of them and we'll set
15:02 - that up
15:08 - so we are now going to set up a mono
15:09 - repo and the reason we are doing this so
15:12 - it's easy to share the code between the
15:14 - react and the react native project that
15:17 - we set up already now i just did a step
15:19 - before i started this video i created a
15:21 - folder which i just called my monorepo
15:24 - and then i took the two folders or
15:26 - projects that we worked on in the last
15:28 - two videos and put them in here so i
15:30 - copied the my awesome project into this
15:33 - folder and i also copied the react
15:35 - native web series and this reaction of
15:37 - web series is just what i called
15:39 - the project that we created with create
15:41 - react app
15:43 - so i'm going to be starting from here
15:45 - and the first thing that we're going to
15:46 - do is set up yarn workspaces
15:49 - so in my mono repo once you have these
15:51 - copied over we're going to create a
15:53 - folder called packages
15:55 - and then i'm going to rename my awesome
15:58 - project to app and that's where the
16:01 - react native code is going to go
16:03 - and then i'm going to rename this to
16:05 - web
16:06 - and i'm going to put that in packages so
16:08 - here's what our file structure looks
16:10 - like right now
16:11 - and then next i'm going to say
16:14 - npm
16:15 - i dash y
16:17 - or
16:17 - init
16:18 - slash y
16:20 - to initialize
16:21 - a repo here or a package.json i mean
16:25 - and then to actually make it into a yarn
16:27 - workspace we need to say at the top here
16:30 - private is equal to true
16:32 - and we're going to say
16:34 - i'll just add this at the bottom
16:37 - workspaces
16:40 - and then here's where we specify what
16:41 - our workspaces are
16:43 - we're going to say packages star
16:45 - so what that means is any uh thing that
16:48 - we add in the packages folder is going
16:50 - to be considered a package that yarn
16:52 - workspaces
16:53 - are going to see and be able to do stuff
16:55 - with
16:57 - so now if i were to run yarn right now
17:00 - it should install all the dev
17:02 - dependencies for everything and i'm just
17:04 - going to real quickly just remove
17:06 - oh perfect area have this up
17:08 - all the node modules and all these
17:10 - packages so remove an app and remove it
17:13 - in web
17:14 - and i can do it with this command so i'm
17:16 - saying remove rf packages and then i'm
17:19 - saying doesn't matter what package you
17:20 - can do that with the star command and
17:22 - then remove node modules you could also
17:24 - just go into each package and remove it
17:26 - there's only two right now that's a
17:27 - little shortcut for you
17:29 - all right so i deleted that i'm just
17:32 - gonna go ahead and run yarn and i'll let
17:33 - this run in the background
17:36 - uh because it's gonna probably take a
17:37 - few minutes to like install that stuff
17:39 - so next thing that we're going to do is
17:41 - we're going to create a new folder which
17:42 - we're going to call common
17:44 - so common is basically where we're going
17:46 - to start we're going to be developing
17:47 - stuff most of the time so this is where
17:49 - the one code base is going to live
17:51 - and then both the app and the web are
17:53 - going to use this one code base
17:55 - so i'm going to go inside of
17:58 - packages common and we're going to just
18:00 - initialize this with a package.json as
18:03 - well
18:04 - now i'm going to give this a let's
18:06 - refresh there we go i'm going to give
18:08 - this a name
18:10 - i'm just going to call mine wow
18:12 - so whenever you deal with yarn
18:14 - workspaces
18:15 - or monorepos in general usually you'll
18:17 - have the name of your monorepo
18:19 - and you'll say at the name of your
18:21 - monorepo slash the name of the
18:23 - individual package this case i'm just
18:25 - naming my monorepo wow
18:28 - and that's what i'm going to put here
18:31 - next up we're going to create a source
18:34 - folder and inside of there i'm going to
18:37 - say
18:37 - index.tsx
18:39 - um and here i'm just going to paste just
18:42 - a demo app at the one that we created so
18:44 - if i go to app app.tsx
18:47 - i'm just going to copy the app that we
18:49 - created
18:50 - so copy this
18:52 - paste it in
18:53 - and of course we need to install uh
18:56 - react and react native and stuff in here
18:58 - so let me just make sure this is
19:00 - finished running it is
19:02 - um cool so in here i'm gonna say yarn
19:04 - add we're gonna add react native and
19:07 - react
19:08 - and we're gonna add react at 16.8.2
19:13 - all right so when that is done we're
19:15 - then going to install the dev
19:16 - dependencies for react native and then
19:18 - we're also going to install the
19:20 - typescript and then we're going to have
19:22 - to add a ts config to this
19:25 - so let's do that and i am installing
19:27 - this as typescript 3.3.3 and then this
19:30 - is just the latest types for react
19:32 - native even though we are using a later
19:35 - version of react native itself this is
19:36 - kind of the latest types
19:39 - all right so uh now we can say here i
19:42 - can just
19:43 - import this all from react native or
19:45 - whatnot
19:46 - it's taking a second to load instead of
19:48 - me manually importing this i'm gonna
19:49 - just give it a second and we're going to
19:51 - create a ts config
19:54 - all right so in our ts config i'm just
19:56 - going to copy what we have in the web
20:00 - and then we're going to make a few
20:01 - changes
20:03 - so for this
20:04 - we're going to say allow js we're going
20:06 - to remove that we don't want to allow js
20:09 - instead of isolated modules we're going
20:11 - to say declaration is true
20:13 - and when we set declarations to true we
20:16 - build the module what's going to happen
20:18 - is it's going to have typescript
20:20 - declaration files in it which is what we
20:21 - want
20:22 - and here we're going to say gsx is going
20:25 - to be react
20:27 - and then no emit i'm going to get rid of
20:29 - that
20:31 - and then module i believe we need to
20:33 - change this to common js
20:35 - and then i'm going to say in out
20:37 - directory i'm going to say is dist
20:40 - and i believe that's all the changes
20:41 - that we need to make to this file but
20:43 - when we build a project and then try to
20:45 - use it we'll see if we have any problems
20:48 - all right so this should be good loading
20:50 - it is so i'm just going to say
20:52 - command period and import everything in
20:57 - and it looks like text didn't get
20:59 - imported for some reason so control
21:01 - space and we'll import that
21:04 - and did stylesheet get added nope there
21:07 - we go
21:08 - instead of export default i'm just going
21:10 - to export it
21:13 - like that
21:14 - and that looks pretty good in the
21:16 - pangs.json we are going to say
21:20 - ts
21:21 - tsc
21:23 - and i'm going to rename this to build
21:25 - and what this does is this runs the
21:27 - typescript compiler and it's going to
21:28 - compile our code so if i come here say
21:31 - yarn builds
21:33 - and it's going to look in the source
21:35 - folder build it and we can see the dist
21:37 - so a couple things if you know this work
21:39 - correctly is in your dist folder you
21:41 - should see an
21:42 - index.d.t.s should just look like this i
21:44 - guess
21:45 - and then in your index.js it should look
21:48 - like this
21:49 - and you'll notice that there's not jsx
21:51 - in here right so
21:53 - it does not look like this where there's
21:54 - brackets and stuff that's jsx
21:57 - it looks like this and we're saying
21:59 - create element in here so that's
22:01 - important
22:03 - um yup so that is pretty much all we
22:05 - need to do in common i believe
22:07 - so next we want to basically use this
22:09 - code base and both of these projects so
22:12 - today we're going to start by adding it
22:13 - to the web so to do that we're going to
22:15 - head over to the webspace.json
22:17 - and we need to first add the common
22:19 - package as a dependency so i usually
22:21 - just come in here and i say wow common
22:24 - and then we're gonna set the version of
22:26 - it and if we come to common package.json
22:29 - it'll tell us the version is just 1.0
22:32 - um oh the strong one
22:34 - so we're going to put that there
22:38 - and then after we add that we just need
22:40 - to say yarn
22:41 - so we're gonna cd over to the web
22:45 - and that's just going to add uh this
22:47 - common package in here
22:49 - uh and now if i go to my app.tsx instead
22:52 - of just saying hello from react native
22:53 - web what i'm going to do
22:56 - is delete this app
22:58 - and i'm just going to export the app
22:59 - which we get from
23:01 - that package
23:04 - which we said is wow
23:06 - common
23:08 - all right um and let's see if uh
23:11 - currently cannot find it
23:13 - uh i'm not sure
23:15 - i'm i just hit command and then p or if
23:18 - you do command capital p it'll open this
23:20 - little window i'm going to restart the
23:21 - typescript server to see if it actually
23:23 - can find the module the other thing you
23:25 - can do to double check is if i do an ls
23:28 - node modules i'm able to see whether or
23:31 - not it was added and we can see at wow
23:34 - is not there so that means it didn't get
23:36 - added for some reason so i either messed
23:38 - something up
23:39 - uh or it didn't get added for whatever
23:41 - reason so i'm just going to say
23:44 - yarn again or you know what
23:46 - i'm just going to remove the node
23:47 - modules all together and just have yarn
23:49 - run again and see if it gets added this
23:51 - time oh you know what
23:54 - we forgot one important step that's why
23:55 - it's not working so if we go back to our
23:58 - common package.json
24:00 - if we look at this main
24:01 - we need to specify where the main file
24:04 - is so for us it's going to be inside of
24:06 - dist and then index.js so let's add that
24:09 - real quick
24:12 - all right so
24:13 - now we're going to just
24:15 - i don't know if we need to re-yarn
24:17 - if i go back to the app
24:19 - oh cool so you notice how it just went
24:21 - from red to orange i don't know if
24:23 - you're watching right there
24:24 - it also is no longer an error here so it
24:27 - was able to find this file now
24:30 - so we're going to say yarn start um and
24:32 - we're going to get this error about skip
24:35 - pre-fight check
24:36 - um or that we did some things wrong and
24:39 - it's going to tell us some things are
24:40 - wrong basically we're trying to access a
24:42 - module outside and maybe we're doing
24:44 - some other stuff wrong but we can just
24:46 - add this skip preflight check to the
24:48 - beginning and everything will work so
24:51 - let's go ahead and do that so skip
24:53 - pre-flight check is true
24:56 - now for those of you guys that are on
24:58 - windows to get this to work we can add
25:00 - cross m in front of this
25:03 - so
25:03 - i'm now going to add cross m
25:06 - as well and it doesn't matter what uh
25:09 - version of cross mv you get it should
25:10 - probably work
25:12 - and that just makes this work on windows
25:16 - all right so let's do yarn start again
25:19 - um and if this works correctly what
25:21 - happens when this starts up is we should
25:24 - see
25:25 - this little app counter that we have
25:27 - where we can click on it and it's going
25:29 - to increment the count
25:30 - using hooks in our website so it looks
25:33 - like no crashes
25:35 - come over here we see our little welcome
25:37 - to react native
25:38 - can increment and that's our hooks
25:40 - working
25:41 - so awesome so what we just set up is a
25:44 - common package which we are now using in
25:47 - the website
25:48 - so getting this to work with react
25:50 - native is also a little tricky so that's
25:52 - what we're going to save to the next
25:54 - video and so we're going to import
25:56 - basically this common package or get the
25:57 - common package working with the app
26:00 - as well and so what's going to happen is
26:03 - in the future we're just going to be
26:04 - coding in this common folder
26:07 - and then both the web and the app is
26:10 - going to get this code and should
26:12 - basically be building the app and the
26:14 - website in parallel
26:16 - now i just want to go over real quick a
26:18 - few things that is important about what
26:20 - we set up because this can be kind of
26:21 - tricky to get working so if it is not
26:24 - working for you these are the few things
26:26 - that you want to check
26:27 - so you notice i was coming over here and
26:29 - i was saying ls no modules and couldn't
26:31 - find it i think what i was doing wrong
26:33 - about that is one it should be
26:35 - in the root folder and there it is so if
26:38 - i do ls dot dot dot
26:40 - in the root directory or the root
26:43 - mono root mono repo we can see the wow
26:46 - folder and we can see comments so that
26:48 - is important to be able to see
26:51 - so the thing is again
26:53 - this was important we we missed this at
26:55 - first you want to make sure that you
26:56 - have index or this dist
26:59 - this main is pointing at an actual file
27:01 - that exists and that's pointing at disk
27:03 - index.js
27:05 - one other thing i want to add real quick
27:06 - is i'm going to add this thing called
27:08 - rimraf
27:09 - so this is going to delete the build
27:10 - folder or this disk folder every time we
27:12 - build that way we don't have stale data
27:14 - in there so i'm going to say remraftdist
27:17 - and we're going to build
27:18 - okay so i'm going to cd back over to
27:23 - common
27:24 - and uh yarn add as deficiency rimraf and
27:28 - this doesn't really matter what version
27:29 - either
27:31 - and so what that's going to do is it's
27:32 - just going to delete the folder and then
27:34 - it's going to build it each time and if
27:35 - we do yarn build nothing will really
27:37 - change but that just helps get
27:39 - consistent builds sometimes i get funky
27:41 - stuff when i don't do that
27:43 - the other thing is with the ts config
27:46 - there's a couple important things
27:48 - make sure the jsx is set to react make
27:50 - sure that the module is commonjs
27:54 - and the last one is declaration is set
27:56 - to true
27:57 - and so when you build stuff you get a
27:59 - nice dist that has the right output that
28:01 - we want and notice we're saying include
28:04 - source here that's how we know it knows
28:06 - to build the source folder right there
28:08 - as well
28:09 - and that's pretty much the key parts of
28:12 - getting this to work i think
28:14 - and then after that we just add of
28:15 - course
28:16 - uh this to our package.json the
28:20 - wow package or the common wow package
28:26 - we're going to use this common package
28:28 - that we created and use it in our app
28:30 - package which is based on react native
28:33 - now getting yarn workspaces and
28:35 - importing from our workspaces is
28:37 - actually a little tricky
28:39 - with react native and we're gonna see
28:41 - why that is
28:42 - in a couple minutes as we kind of run
28:44 - into some of these issues and we'll deal
28:46 - with some of the workarounds to get it
28:48 - to work
28:49 - so to start off though we are going to
28:50 - just install or add
28:53 - the dependency to our package.json in
28:55 - our react native project so i'm going to
28:57 - say
28:58 - at wow
28:59 - common that's just what i named it and
29:02 - i'm going to put version 0 here
29:05 - and then i can go to
29:07 - the i'm right in the packages app right
29:10 - here and i have
29:11 - yarn
29:13 - to install that
29:15 - um after that in the app.tsx
29:18 - i'm gonna just replace all this code
29:20 - that we have here with the app
29:22 - so i'm gonna delete this
29:24 - delete this
29:25 - delete this
29:27 - and then the app is going to be coming
29:29 - from
29:30 - that common package
29:35 - and then here if i just say app
29:39 - we can have this is what we want to
29:41 - render
29:42 - now uh if we tried just starting up the
29:44 - application right now we'd actually get
29:46 - an error
29:48 - we can try that if you want so we can
29:50 - say yarn start and it's going to say
29:52 - cannot find module
29:53 - now if we go to our package.json we can
29:55 - see why that is so it's trying to start
29:58 - the react native cli and you'll notice
30:00 - the path it's looking for
30:02 - node modules and then the react native
30:05 - one
30:06 - and if we just do an ls to see if that
30:08 - exists
30:09 - react native
30:11 - we'll actually see that the file does
30:13 - not exist or the directory does not
30:14 - exist and the reason for that is we're
30:16 - using a yarn workspace and so how yarn
30:19 - workspaces work is they hoist up the
30:21 - modules so what that means is it's
30:24 - actually sitting in our root directory
30:26 - so if we do an ls and we go up two
30:29 - directories into that node modules
30:32 - and we look for the react native package
30:35 - you'll notice we will find it that's
30:36 - because it was hoisted up
30:38 - so we can avoid this problem
30:41 - because we basically want it in this
30:43 - current directly current directory we
30:45 - could lift it up if we wanted to
30:47 - but i'm going to say
30:50 - no hoist so this is a trick that you can
30:52 - use with yarn workspaces
30:54 - and how it works is we can specify
30:56 - either in the root directory
30:58 - we could use that or in the child
31:00 - directory which we're going to be using
31:02 - no hoist on the react native package so
31:05 - i'm going to copy this
31:07 - and i'm going to paste it in my dev
31:09 - dependencies or sorry not my dev
31:11 - dependencies but in the package.json at
31:13 - the bottom
31:14 - and i'll link a link to this article
31:16 - this kind of goes more in depth about
31:18 - how no hoist works
31:20 - but basically what's going to happen is
31:21 - the react native
31:23 - dependency instead of being in the root
31:26 - node modules it's going to come down to
31:28 - the node modules that is in the app
31:30 - now whenever i add a change like that
31:32 - like i just added the no hoist option
31:34 - here
31:36 - i like to just destroy the node modules
31:38 - and reinstall them because usually stuff
31:39 - gets messed up in the middle
31:42 - also
31:43 - i just saw this was being unsaved i'm
31:45 - just going to save all right there
31:47 - all right so i'm going to do remove
31:50 - um and i'm going to remove rf both the
31:52 - node modules that's in this current
31:54 - directory and also just the
31:56 - route as well just to be safe sometimes
31:59 - stuff gets messed up
32:01 - now the next problem we're going to hit
32:03 - is after we get this it's going to be
32:04 - able to start up okay
32:07 - but what happens with yarn workspaces is
32:09 - to be able to access this common package
32:12 - and to be able to make changes to the
32:14 - common package
32:16 - and not having to do a yarn install
32:18 - every time is they use sim links
32:21 - now one of the downsides of react native
32:22 - or one thing that doesn't work with
32:24 - react native very well right now is sim
32:26 - links
32:27 - so what we're going to have to do is
32:28 - work around it
32:30 - so one option to work around it and that
32:32 - worked out real quick we'll talk about
32:34 - how we're going to handle sim links in a
32:35 - second let's just look if our node
32:37 - modules worked
32:39 - so if i do an ls on this node modules
32:41 - slash react native
32:43 - you'll notice it's now here so if i were
32:45 - to do a yarn start it should indeed
32:48 - start the packager
32:50 - now the other thing i just want to
32:51 - mention is i have my
32:54 - application up and running over here or
32:56 - my simulator and if i try to reload this
32:58 - right now it should have a problem yeah
33:00 - perfect well not perfect but here's the
33:03 - error
33:04 - at wow common does not exist in the
33:06 - haste module map
33:08 - so this is where it can't basically get
33:10 - the sim link that we're using for that
33:13 - now uh one thing i want to mention real
33:15 - quick is uh to start up my simulator
33:17 - over there i just did uh yarn ios which
33:21 - ran uh this over here um
33:25 - let's start up the simulator and the
33:26 - other thing is when i was starting it up
33:28 - because i moved this into a different
33:31 - folder
33:32 - when we were setting up the workspace
33:34 - there's this ios build folder right here
33:37 - that has a basically cached version of
33:39 - the build and it had the relative
33:41 - directories all messed up so i had to
33:43 - delete this build folder to get that to
33:45 - work so you may have to do the same
33:46 - thing if you were on mac
33:49 - i'm not sure if there's equivalent for
33:50 - android doesn't look like it
33:53 - all right so uh so we started that we
33:55 - need to handle this next error now i'm
33:57 - not sure the best way to handle sim
33:59 - links in react native right now i'm not
34:01 - sure if there's a standard way because
34:03 - the default bundler that comes with
34:05 - react native i don't believe works with
34:07 - it
34:09 - and there's a ton of open issues about
34:10 - it so hopefully that'll be fixed soon
34:12 - but one way that's super easy to fix it
34:14 - is this this one library called wml
34:17 - and basically what this does is we can
34:19 - just specify a directory so for us we're
34:22 - going to specify the common directory
34:25 - and it's going to basically copy over
34:27 - the files every time we make a change so
34:29 - we're going to be using that so if you
34:31 - don't have this already installed on
34:32 - your computer you're just going to run
34:33 - npm install
34:35 - and it's going to install globally
34:38 - so after that what we're going to do is
34:40 - uh control see this
34:43 - is we're going to say add
34:45 - and we're going to run this command
34:46 - right here so we're gonna go up a
34:47 - directory and get the common folder and
34:50 - then we're gonna put it into our node
34:52 - modules
34:53 - at wow common so you'll notice here this
34:55 - is just the name of the package
34:58 - and here's where the local directory is
35:00 - all right so if i do add
35:02 - i'm going to say yes ignore node modules
35:05 - and then what i can do is wml start
35:08 - so now what's going to happen is anytime
35:09 - i make a change in the common folder
35:11 - over there it's going to copy over all
35:14 - the files
35:16 - and where it's going to copy is that
35:18 - node modules slash wow
35:21 - if we take a look at that we can see
35:24 - funny enough it looks like our app is
35:26 - here i'm not sure why that's there
35:28 - slash common and we can see our code is
35:30 - there
35:31 - now uh
35:32 - i don't actually want
35:35 - uh it kind of looked pink there and i
35:37 - don't want it to be pink uh because that
35:39 - usually means it's a sim link but uh
35:41 - let's just see if this
35:43 - fixed it
35:45 - so uh yarn start
35:48 - and if it didn't i'm just going to
35:49 - delete it and then recreate it
35:53 - so let's reload this
35:55 - um yeah see i didn't think it would
35:59 - and
36:00 - i'm just going to
36:02 - let's do an ls
36:04 - on it again just to make sure
36:06 - um okay when i do an ls here
36:09 - it showed it like that but if i didn't
36:11 - ls here
36:13 - oh this is because i'm in the root
36:14 - directory
36:15 - that was just my bad
36:17 - all right let's come back over here
36:20 - so one thing i notice about the air is
36:22 - it's coming from react or it's coming
36:25 - from not being able to find the module
36:27 - react
36:28 - so what we can do is we can say no hoist
36:31 - on react as well as react native and
36:34 - that should be able to find it
36:36 - so i'm going to just copy paste this
36:39 - and i'm going to say react here instead
36:41 - of react native
36:43 - give that a save
36:44 - and then i'm just going to remove the
36:46 - node modules and the parent
36:49 - reason being if i remove them locally
36:51 - it's going to destroy kind of our sim
36:53 - link setup or our wml setup
36:56 - so i'm just going to say
36:58 - remove the root one and do yarn and that
37:00 - should add it for us
37:02 - and then when this is done what we can
37:04 - do to double check this works is again
37:06 - we can just do an ls on the node modules
37:08 - and make sure that it's all there
37:10 - another thing is to make sure your wl or
37:14 - wml
37:15 - thing is working
37:17 - is you can go to uh
37:19 - packages app
37:21 - and if we do an ls there
37:23 - on common
37:26 - uh oh it's mine
37:30 - oh i guess it deleted mine even though i
37:32 - didn't want to delete all right we can
37:34 - just restart it so ctrl c
37:36 - and we'll restart that
37:38 - and let's come back over here
37:42 - all right so it exists and if i go into
37:44 - dist you should be able to see the
37:46 - index.js that's all good because this is
37:48 - what we're actually importing is that
37:50 - index.js from the dist folder
37:53 - so you want to make sure that's there
37:55 - and now we should have a node modules
37:57 - react it should probably be done loading
37:59 - yeah
38:00 - so i'm going to come back
38:03 - and just say yarn start
38:05 - and start the packager
38:07 - and then get this running
38:10 - all right cool so that looks like it's
38:12 - able to load down and we can increment
38:14 - so it is working
38:16 - so as you can see it's a little tricky
38:18 - to get this set up
38:19 - but the gist of it is
38:21 - we had to
38:23 - know hoists and things so bring some
38:24 - modules down so in our case we had to do
38:27 - react native and react
38:29 - and then after that the other tricky
38:30 - part is making sure that the packages
38:34 - that we're using
38:35 - are sim linked or in this case we didn't
38:38 - want them sim linked
38:40 - so we had to bring them over
38:42 - by using wml
38:44 - and to do that we said add and then we
38:46 - say start which actually moves them over
38:48 - now whenever we make changes to the
38:50 - comment it should move it over so we
38:52 - don't need to do anything there as long
38:54 - as we have this up and running
38:56 - the other thing is if we were to add
38:58 - more packages we wanted to depend on
39:00 - we'd have to wml add
39:02 - now there are some other ways to achieve
39:04 - this same thing i believe
39:06 - in the past i've played around with uh i
39:08 - believe it's called like react native
39:10 - config or something where you can kind
39:12 - of get it
39:14 - i don't know if that solves the sim link
39:16 - problem or if it solves the no hoist
39:18 - problem
39:19 - but one of those but it can be a little
39:21 - harder to set up where this is
39:24 - not too bad to set up so i figured we'd
39:25 - start here and if we run into more
39:27 - problems we can investigate that
39:30 - later
39:31 - and then the only other thing is
39:33 - as we program stuff in the future we're
39:36 - going to be basically just doing stuff
39:37 - in the common folder
39:39 - and then the app should be getting the
39:41 - updates
39:42 - and the web should be getting the
39:43 - updates at the same time and i'm pretty
39:45 - much just going to focus on what it
39:47 - looks like on the web just because it's
39:49 - a lot easier to
39:50 - get set up and to also just view it and
39:53 - watch the renders in real time versus
39:55 - react native
40:01 - we're going to be going over how you can
40:02 - use mobx with react hooks to start off
40:05 - we're going to install two libraries in
40:07 - the common package the first one is
40:09 - going to be mobx at version 5.9
40:12 - and then we're going to be using mobx
40:14 - react light at version 1.01
40:18 - and this library is going to allow us to
40:19 - actually get it working with hooks
40:21 - so we're go ahead and install that
40:23 - and for those of you that are not
40:24 - familiar with mobx what we're going to
40:26 - be using it for is state so it is a
40:28 - state management library
40:30 - now to start off we're going to be
40:31 - inside our common package i'm going to
40:34 - go to source and create a new file i'm
40:36 - going to create a folder outside which
40:38 - i'm going to call stores and we're going
40:40 - to say counter
40:42 - store dot ts
40:44 - so here i'm going to say class
40:46 - counter store
40:47 - and i'm just going to close that
40:49 - and we're going to have a single field
40:50 - which i'm going to call count and it's
40:52 - going to have a default value of 0. now
40:54 - i want to make this field observable so
40:56 - we can do that with mobx by saying
40:58 - observable
40:59 - and we're going to import that
41:04 - and that's coming from mobex
41:07 - now it's going to complain about this if
41:09 - we hover over you can see tells us we do
41:11 - not have experimental decorators turned
41:13 - on so we can go over to our ts config
41:15 - and turn that on
41:17 - and so here we're going to say decorator
41:19 - it's going to be this experimental
41:21 - decorators set to true
41:23 - if i give that a save and i come back
41:25 - over here it should no longer be
41:26 - complaining about this now
41:29 - and i'm going to say export const and
41:31 - we're going to say counter store context
41:35 - and we're going to say create context
41:38 - and that's coming from react and then
41:40 - we're going to say new counter store
41:43 - and give that a save now this counter
41:45 - store context is what we're going to use
41:47 - in our components and then we can
41:49 - basically interact with the store that
41:50 - way
41:51 - so now in our index.ts we had a basic
41:54 - example before where we were using use
41:56 - state to store the state of a counter
41:58 - and then we were incrementing it
42:00 - so now we're going to start by making
42:02 - this work with mob x we're going to
42:04 - start by wrapping it with an observer
42:06 - and we're going to just wrap the entire
42:08 - function there and now observer is
42:10 - coming from that other package we
42:11 - installed so that's mobx react light
42:16 - observer
42:18 - and then here instead of using use state
42:20 - we're going to say const
42:22 - counter store
42:24 - is equal to use context so we're using
42:27 - the use context hook
42:29 - and then we're going to pass in the
42:30 - counter store context that we created
42:34 - so now what i can do is i can say
42:36 - calendar store dot count to display the
42:39 - count and then when i press on the
42:41 - button
42:42 - i can say counter counterstore
42:44 - dot count and then we can just directly
42:46 - mutate it by incrementing it
42:49 - so cool so now i want to see this and
42:51 - see if it works so to start off i have
42:53 - my server already running for the
42:55 - website so i have that up and i'm just
42:58 - going to compile the code here
43:00 - so i'm going to go to the package.json
43:02 - and i'm going to add a new flag that'll
43:04 - make this a little easier called watch
43:07 - and so we're going to say ts
43:09 - tsc and we're gonna say dash watch
43:14 - and so what's gonna happen is when we uh
43:16 - run this so
43:17 - yarn watch
43:18 - it's going to compile our code and watch
43:20 - for any changes we make and real
43:22 - recompile it
43:24 - all right so here is our website just
43:26 - give this a refresh and then if we
43:28 - increment you'll notice it worked just
43:30 - the same as it did before
43:32 - um so pretty cool and uh mobx looks
43:35 - pretty sweet being able to just mutate
43:36 - it like that is pretty simple i like
43:38 - that
43:39 - so of course we're going to be using
43:41 - mobx for the state management for our
43:44 - application so we're going to be using
43:46 - it to store basically the state for
43:48 - working out or for workouts so we're
43:51 - going to start by creating a new store
43:53 - today and i'm gonna call it the workout
43:55 - store
43:57 - and here i'm gonna say class workout
44:00 - store
44:00 - and today we're just gonna map out kind
44:02 - of a few different things that we're
44:04 - gonna store in this so
44:06 - there's basically four different uh or
44:08 - five different exercises that this
44:10 - workout uses so we're going to store
44:12 - that all in the store and we're also
44:14 - going to start off by kind of
44:16 - hard-coding things and then we're going
44:18 - to go back later and possibly make this
44:20 - generic and work with say any set of
44:22 - exercises
44:23 - so the four exercises is squat or five
44:26 - exercises is squat and what i'm going to
44:28 - do is i'm going to call this current
44:30 - squat
44:32 - and when i say current squat this is
44:34 - what it stands for is kind of like how
44:36 - much are you currently squatting and
44:38 - this is going to be a number so for
44:39 - example you may be squatting 500 pounds
44:42 - or 100 pounds and we're going to track
44:44 - that in this variable
44:46 - let's see why it's unhappy oh has no
44:48 - initializer um let's turn that setting
44:51 - off for now
44:53 - uh
44:53 - [Music]
44:55 - initializer
44:58 - strict property initializers is i think
45:00 - what we need just turn off to be able to
45:02 - get rid of that warning
45:05 - say false
45:07 - and cool
45:09 - and then we're going to say
45:11 - squat
45:12 - bench press
45:14 - overhead press
45:16 - overhead press and i guess let's be
45:18 - consistent i said press there do press
45:20 - there
45:22 - deadlift
45:26 - and that'll be a number two
45:29 - and then lastly is the barbell row
45:33 - all right so these are the five
45:34 - exercises and again i've kind of hard
45:37 - coded it here we could also go with the
45:39 - approach where we kind of have this in
45:40 - an array but i'm going to start dead
45:42 - simple and then we're going to kind of
45:43 - refactor things out and make it more
45:45 - dynamic as we go
45:48 - we also need to know so how the workout
45:50 - works is we're going to have two
45:51 - different days
45:52 - like a a day and a b day and so we need
45:54 - to know what our last day was because we
45:57 - do a different exercise on each day so
45:59 - for example i don't know maybe on the a
46:00 - day you do squat bench deadlift and on
46:03 - the b day you do squat overhead barbell
46:05 - something like that
46:07 - so we're going to say
46:09 - last
46:10 - workout type
46:12 - and we're going to make that a
46:15 - a union so we're going to say
46:18 - workout type
46:20 - is equal
46:21 - is either an a day or a b day
46:26 - and so that's going to be of that type
46:28 - workout type
46:30 - or why don't we call this workout day
46:32 - that makes more sense either an a day or
46:34 - a b day
46:37 - so we're going to say last workout day
46:39 - well i don't think last workout day
46:41 - really makes sense we'll say last
46:43 - workout type is fine
46:45 - and uh let's make that a lowercase oh i
46:47 - suppose
46:49 - um and then the last thing that i can
46:50 - think of at least to start off with is
46:52 - we want to know the history of what
46:54 - lifts that you've done
46:56 - and so we can keep track of that and the
46:58 - way i want to keep track of it is kind
47:00 - of a dictionary that way we can keep
47:02 - track of in the key being the date so
47:05 - what i'm thinking is
47:07 - create an interface which we're going to
47:09 - call history
47:11 - called workout history not to confuse it
47:13 - with any other type of history like
47:14 - browser history or something
47:16 - so the key i'm thinking is going to be a
47:18 - string representing the date so we're
47:21 - going to say
47:22 - key of string
47:24 - and here
47:26 - i don't think i need to say key i like
47:28 - to say key
47:30 - and then the value of this is going to
47:32 - be i guess an array
47:36 - and the array is going to have basically
47:39 - the values for that day
47:40 - so here i'm going to call this the
47:44 - movement
47:45 - or the exercise is a better name
47:47 - exercise
47:49 - is a string
47:50 - and then the value which is a number
47:53 - so for example uh what that might look
47:56 - like
47:57 - is i'm thinking something like this
48:01 - so on the 18th so uh
48:06 - let's see what month is it
48:08 - i don't know like o2
48:10 - 18
48:11 - 2019
48:14 - is going to be the key
48:16 - and then the value is going to be array
48:17 - that looks like this
48:19 - and then the exercise
48:21 - might be squat
48:23 - and then the value might be like 90. so
48:26 - this day you squatted 90 pounds
48:29 - and then
48:31 - right maybe you also did bench press
48:33 - that day and did that for a hundred
48:35 - pounds
48:36 - so this is what i'm thinking the data
48:37 - structure to be and we may improve this
48:40 - data structure a little bit and add more
48:42 - fields to this later on but this is what
48:44 - i'm thinking for the start of it
48:46 - anyway this is kind of the start of our
48:48 - store uh let's go ahead and just add the
48:50 - type real quick
48:52 - um and then the next videos we're going
48:54 - to continue kind of working on this
48:55 - store and start adding some components
48:57 - and start rendering some things for it
49:00 - but before we end this video let's just
49:01 - export this so export cons workout store
49:04 - context
49:06 - is equal to create context
49:10 - new workout store
49:18 - so i was wanting to go over navigation
49:20 - today specifically adding a button here
49:23 - that was like start workout and then
49:24 - we'd be transitioning to a new screen
49:27 - and to do that i was planning on using
49:28 - react navigation
49:30 - because i saw they have a react native
49:32 - web version
49:34 - and it works really nice for a react
49:36 - native so it'd be nice to be able to use
49:38 - it
49:39 - but after i tried out the example i saw
49:41 - the reaction of web one was kind of just
49:44 - meh
49:45 - and i didn't see a great way to
49:47 - integrate it so we could have one kind
49:49 - of routes that would work for both the
49:52 - native
49:53 - and for the web
49:54 - i didn't see a great way to do that and
49:57 - they didn't have typescript types so i
49:59 - was like let's go check out how devhub
50:01 - does it to see how they were doing
50:03 - navigation
50:04 - and it turns out they actually have just
50:07 - a ternary operation and they have just
50:09 - two screens
50:11 - a login screen
50:12 - and a main screen and that's how they're
50:14 - picking
50:16 - and our application is not too complex
50:18 - so i figured we might as well do it in a
50:19 - similar manner and use mob x to keep the
50:22 - state and just kind of have a tern area
50:24 - where we switch which page we're
50:26 - displaying
50:27 - because react navigation at least for
50:29 - the web
50:31 - seems like it still has some time before
50:33 - it's production ready slash really
50:36 - a good choice
50:37 - so that's we're going to do in today's
50:39 - video so i have the app up
50:43 - earth website up and we're going to
50:44 - create a
50:46 - in the common package a new folder here
50:49 - and i'm going to call this
50:51 - routes actually i'm just going to create
50:53 - it as a file
50:55 - called routes.tsx and this is going to
50:57 - basically where i'm going to store it
51:00 - so i'm going to export cons routes
51:03 - and we're going to return
51:05 - null for now
51:06 - now i said we're going to store this in
51:09 - mobex so i'm going to create a new store
51:11 - which i'm going to say
51:12 - routers or i guess route
51:15 - routes store
51:17 - i don't know if that's the best name for
51:18 - it
51:20 - um then i'm going to come over here and
51:21 - just copy the counter example
51:26 - so route
51:28 - uh actually you know i like router store
51:30 - better just thinking about it let's go
51:34 - matches this better i guess well i guess
51:36 - i call that routes oh well
51:38 - uh
51:39 - so i'm going to say router store here
51:42 - router store context
51:45 - and then i'm going to say this is going
51:46 - to be a path
51:48 - and the default path i'm going to say is
51:50 - the home page
51:52 - which uh actually i'm going to call the
51:54 - home page the history page
51:56 - because i think we're going to store the
51:57 - workout history
51:59 - on the front page so i'm going to call
52:01 - that history
52:03 - and then
52:04 - actually not
52:06 - well so the history kind of implies like
52:08 - uh navigation history or route history
52:11 - so i don't want that to be confusing so
52:12 - that's just kind of what went through my
52:14 - brain with the naming convention right
52:15 - here
52:16 - um so you know what maybe we'll go back
52:19 - to home but i think i'll keep it for
52:21 - history for now
52:22 - um
52:23 - maybe i'll come and switch it later as
52:25 - you can see i'm not great with naming
52:26 - things
52:27 - um all right so we have this and so
52:29 - we're just gonna use this in our routes
52:31 - over here
52:32 - in the same manner that we use the
52:34 - counter context so we'll use that
52:40 - so this is going to be the router store
52:43 - use context
52:44 - router store context let's import use
52:48 - context
52:51 - and come back to our router store
52:54 - not router store
52:56 - we just need to use observer around this
52:59 - i was going to copy and paste but
53:00 - there's not really a good way to copy
53:02 - and paste it so we'll just let's do that
53:05 - and then we need to import this from the
53:06 - mobx lite
53:08 - so that is this one right here
53:11 - for a reason it doesn't auto-complete
53:14 - well for me at least when i do like uh
53:16 - control space uh just kidding it worked
53:19 - today so actually we're good to go
53:21 - and so what i'm thinking here is we'll
53:22 - just conditionally render stuff based on
53:24 - what the router store value is
53:27 - so if i go to i'm going to create a new
53:29 - folder now which i'm going to call
53:31 - modules
53:32 - inside of there i'm going to call create
53:34 - a history you know what yeah that's
53:36 - confusing let's just call it home no
53:38 - i'll call workout history there we go
53:41 - that's what i should really just do to
53:43 - make it super clear
53:45 - so we'll say
53:47 - work out history
53:50 - um and here i'm gonna say export const
53:53 - workout history
53:57 - and i should really
53:59 - one
54:00 - i already have a oh this should be tsx
54:05 - tsx
54:07 - uh
54:08 - i forgot i have the uh rh uh thing that
54:11 - i was gonna use this is my uh template
54:14 - they just create a react hook or a
54:16 - snippet
54:17 - so let's use that to just save us a
54:19 - little typing
54:20 - workout history
54:22 - uh and so the workout history is just
54:24 - going to say
54:26 - view
54:27 - text
54:29 - workout history
54:31 - page for now
54:33 - import all that
54:35 - import the text as well
54:37 - and we're going to have just empty props
54:39 - for now
54:40 - give that a save
54:43 - and then the other screen is going to be
54:45 - the
54:46 - current
54:47 - workout dot tsx
54:53 - and uh
54:54 - you know we could just copy what we have
54:56 - over here because we're gonna do the
54:57 - same thing
54:58 - and just rename it
55:01 - that'll be the fastest
55:03 - uh and i misspelled page but that is
55:06 - okay
55:06 - current workout page
55:09 - and let's rename that current workout
55:13 - page
55:14 - okay so let's just recap what we have so
55:16 - far i made a dummy component called
55:18 - current workout i created another dummy
55:20 - component called workout history and
55:22 - these are basically going to represent
55:24 - the pages of our application
55:26 - we have a mobx store that's going to
55:28 - store which page we're actually
55:30 - rendering and using this path
55:33 - and maybe path is not the best name
55:35 - really it should be like i guess say
55:37 - screen is the best name for it i suppose
55:40 - uh and then in routes over here this is
55:43 - what's going to display and you know
55:45 - what instead of routes we could really
55:46 - call it router i think that makes more
55:48 - sense because that's really what it's
55:49 - doing
55:51 - so what we're going to do here is
55:52 - basically decide which one we're going
55:53 - to render
55:55 - so here we can say router store dot
55:57 - screen
55:58 - is equal to
56:00 - workouts history and you know what
56:03 - i should make this uh this a type a
56:06 - union type and then we get auto
56:08 - completion
56:09 - so uh
56:10 - you can say route
56:12 - workout history is really the only route
56:15 - right now
56:18 - all right so now if i do that i think we
56:20 - should get auto completion here yeah
56:23 - so pretty cool you get auto completion
56:24 - on strings because it knows that the
56:26 - only possible type this can be is
56:27 - workout history so there we go
56:30 - so if it's equal to workout history
56:32 - we're gonna render the workout history
56:34 - screen
56:35 - otherwise we're gonna just render the
56:38 - current workout
56:39 - current workout page
56:43 - i just want to call it current workout
56:44 - not current workout page so let me get
56:45 - rid of that
56:47 - uh so we'll rename that there and then
56:49 - that's good there
56:51 - uh and looks like i need to import to
56:53 - react at the top
56:56 - uh so this router now is what's going to
56:58 - be uh rendered over here
57:00 - so uh we have all this junk and we're
57:02 - saying export const app
57:04 - now i'm just going to say export
57:07 - com actually we should just say export
57:10 - all from router
57:13 - actually that's not what i want to do
57:16 - i want to say
57:19 - so what i'm trying to decide is
57:21 - if i want to actually keep this
57:22 - container style and i think i do so i
57:24 - think i'm just going to get rid of all
57:25 - this stuff here and do this
57:28 - and so now we'll have router like that
57:31 - okay i think i like that
57:33 - so i'm gonna get rid of this we don't
57:35 - need an observer here
57:38 - and we can get rid of some of these
57:39 - styles
57:41 - all right so now what we're doing is
57:43 - we're rendering our app which just
57:44 - renders the router
57:46 - and then that router has these two
57:48 - screens right here
57:50 - so let's look at that so we have this
57:52 - it's his workout history page
57:55 - um and so now if i want to change pages
58:00 - we can add our observer
58:03 - um
58:04 - observer
58:07 - and then we can get access to the
58:09 - mobx state that we used or the
58:13 - router store
58:15 - and that allows us to say use context
58:18 - and we're going to say router store
58:22 - router store context
58:24 - and we're going to just add a button to
58:26 - transition so this is going to be
58:29 - like create workouts
58:32 - and actually
58:34 - on react native you say title so create
58:36 - workout like that
58:38 - and then we're gonna say on press
58:41 - and we're gonna say router store dot
58:43 - screen is equal to workout history
58:46 - oh you know what it can be now two
58:48 - possible screens
58:51 - so button
58:53 - react native is where import it from
58:55 - so let's go back to our screen over here
58:57 - so it can either be workout history
58:59 - or
59:01 - current workout
59:03 - so we're just going to transition this
59:05 - to current workouts
59:07 - give that a save
59:09 - uh so now if i click that it'll
59:11 - transition me to the current workout
59:13 - page and of course if i refresh it's
59:15 - going to take us back to the home page
59:16 - or the workout history page
59:18 - so cool and we can add a button back
59:21 - over here it says like go back or
59:23 - something
59:25 - which we'll do in the future and this is
59:27 - going to be basically how we're going to
59:28 - store
59:29 - or access the router state is we can
59:32 - just access it through the
59:34 - uh
59:35 - router store context that we created
59:37 - with mobx
59:39 - anyway so that's how we're going to be
59:40 - handling navigation it's just through
59:42 - this mobx store
59:44 - because one it's dead simple um and it
59:46 - will work and looks like it is you can
59:48 - actually use this in a real application
59:50 - and dev hub has had success with that
59:53 - anyway guys uh there's one last thing
59:54 - that i want to do before i end the video
59:56 - and that's just to
59:58 - make this style uh a slight change to
60:00 - this so i just want to make so this
60:03 - wraps or that this is kind of like phone
60:05 - size
60:06 - so if i right click and inspect
60:09 - i can click on this
60:11 - we can get what the size of like a phone
60:13 - is so for example we can get a large
60:16 - mobile phone is 425 pixels
60:19 - so i'm going to just set like this
60:20 - container to 425 pixels or i'm going to
60:23 - create a new one which i'm going to call
60:24 - a wrapper
60:27 - so style
60:28 - wrapper
60:30 - styles.wrapper
60:33 - and what my wrapper is going to do here
60:35 - is all it's going to say is the width is
60:37 - going to be 100
60:38 - but it's going to have a max width of
60:41 - 425
60:42 - reason why i'm doing this is because i
60:44 - don't want my content to just like
60:46 - stretch uh the entire screen as it gets
60:49 - really big and i kind of just want it to
60:50 - be centered right here at 425 and that
60:53 - be where it stays
60:55 - so that's the plan is to have like this
60:57 - little wrapper and i think i want the
60:59 - color i can't decide if i want this
61:00 - color
61:01 - in the center i think i do so i'm just
61:03 - going to move
61:05 - the background color to here
61:07 - and have it like that
61:10 - um the other thing that we need to do is
61:12 - you'll notice that the color doesn't
61:14 - extend the full screen if i hover over
61:17 - this we're not currently doing or we're
61:19 - not
61:20 - uh
61:21 - this is this content if we hover over
61:23 - you can see that blue it's not taking up
61:25 - the full screen there's actually
61:27 - something in the react uh
61:29 - native web documentation about this how
61:31 - we have to make the height 100
61:33 - so we're going to do that real quick
61:34 - because uh that will be helpful so this
61:36 - spans the whole screen as well
61:39 - so to do that we actually need to touch
61:41 - some html so we're going to go just to
61:44 - the web public index.html
61:47 - and all we're going to do is we're going
61:48 - to add a few styles so we're going to
61:50 - say style
61:51 - height 100
61:54 - is the first one we're going to add
61:56 - and we're just going to add that to both
61:58 - the html the body and the div
62:02 - because those are all the things that
62:03 - are uh not 100 right now uh so if we
62:06 - look at the html is now 100 body the div
62:10 - and now i think this we can set it as
62:12 - 100 i think now and then it'll be able
62:14 - to match
62:15 - also one thing i noticed when i was uh
62:17 - kind of digging around with this is the
62:20 - inspect tool's kind of broken with react
62:22 - native web or at least it's not as good
62:24 - you'll notice if i'm like looking at the
62:26 - styles of stuff it's kind of broken up
62:29 - a ton
62:30 - so like let's say i want to see what
62:31 - color this button is
62:34 - it's not really clear and everything's
62:35 - broken up into 100 properties
62:38 - so the
62:39 - inspect
62:40 - being able to inspect and basically
62:42 - replace the css and stuff is not exactly
62:44 - something you can do with react native
62:46 - web because of that and how many just
62:48 - classes they spit on to this
62:51 - but anyway that's just the side note
62:52 - that i noticed
62:53 - if we come back over here we can uh
62:56 - say this is has a height of 100 i think
62:59 - we're saying flex 1
63:01 - so i'm not sure what else we need to add
63:04 - to make it i think that was the only
63:05 - things that i saw in the docs to make
63:07 - the height 100
63:09 - um
63:11 - i guess we have to target this guy right
63:12 - here and set its height to 100 which is
63:15 - this is kind of the outermost div that
63:16 - we just did or the outermost view so i'm
63:19 - gonna go check the react native web uh
63:21 - docs in the next video we'll make sure
63:23 - this spans the entire page because we
63:26 - kind of want it to
63:30 - we're going to be building out this card
63:32 - as a component it's going to be keeping
63:34 - track of basically the current user's
63:36 - workout so for example as they're
63:39 - squatting they're going to be marking
63:41 - how many reps they did and keeping track
63:43 - of their sets with this
63:44 - now before we actually build this
63:46 - component out there's one thing that i
63:47 - want to do real quick when i left you
63:49 - last we wanted to fix the height of our
63:52 - application because right now it's not
63:54 - stretching to the very bottom
63:56 - and we can easily fix this by making two
63:58 - changes
63:59 - the first is in our public index.html
64:03 - we want to just come over here
64:05 - and uh this div which has an id of root
64:08 - we're gonna add a display flex on it
64:12 - and then after that in our index.tsx if
64:16 - we come back in our common package
64:19 - we're just going to say on our wrapper
64:21 - a flex of 1.
64:23 - and so what that's going to do now is uh
64:26 - this div
64:28 - is going to allow whatever content is in
64:29 - there to grow i'm in flex and then we
64:32 - said flex 1 to make it grow
64:34 - the wrapper grows and also the container
64:37 - grows and now it goes all the way down
64:38 - the screen so we're able to fix that
64:41 - all right so now we're going to get on
64:42 - to this component and start building
64:44 - this now before we actually start
64:45 - building this component i thought it'd
64:47 - be helpful to kind of go through how i
64:49 - look at this and what goes through my
64:50 - brain when i'm kind of like envisioning
64:52 - how to build this i know this is a
64:54 - little bit blurry but
64:56 - it'll do and we kind of get the general
64:58 - shape of everything
64:59 - so when i see something like this i
65:01 - actually kind of in my head
65:04 - break it up into a lot of different
65:06 - boxes
65:07 - because most layouts what i'll do is
65:09 - i'll break it up into
65:11 - big boxes and then smaller individual
65:13 - boxes and that's usually all layout is a
65:15 - bunch of boxes even though this may not
65:17 - even look that boxy
65:19 - so to start off the first thing that i
65:20 - kind of think about is like i see the
65:22 - edges right here and just the container
65:24 - itself i think about so the first thing
65:26 - i noticed is like it has rounded corners
65:29 - so we're gonna have to add a border
65:30 - radius to the container
65:32 - then i notice there's a little shadow so
65:34 - we're gonna have to add a box shadow for
65:35 - the container itself and then i kind of
65:37 - go into the content itself the first
65:40 - thing i notice is there's some natural
65:41 - splits so for example the content is
65:44 - kind of split in the middle here
65:46 - so we immediately see we're gonna have
65:48 - like a view on top which is going to be
65:50 - this portion and then we have a view on
65:51 - the bottom which is this portion itself
65:54 - that was like the first big split that i
65:56 - saw
65:57 - and so you can already imagine our
65:59 - container may display
66:01 - the flex direction maybe a column and
66:03 - we'll have this
66:05 - on top and this on the bottom
66:07 - and then we'll notice this is going to
66:08 - be a text field and if we look at this
66:11 - we'll basically see there's a little
66:12 - padding on the side here and there's a
66:14 - little padding on the side here and then
66:16 - basically there's a ton of space in
66:18 - between them right
66:20 - so i imagine we're going to do something
66:22 - like space between there's a justify
66:25 - content setting which basically spaces
66:27 - this and pushes all the space between
66:29 - the items so i imagine we're going to
66:31 - have a view here
66:33 - then we're going to have some text
66:35 - some text and then our view is going to
66:37 - say justify content space between and
66:39 - it's going to spread them like that
66:42 - and then the bottom view down here
66:45 - we can take a look at this again we're
66:46 - gonna have some space in between and
66:48 - we'll notice they're equally spaced out
66:50 - and basically this is just a bunch of
66:52 - boxes again so we just have a bunch of
66:54 - boxes and they just repeat each other
66:56 - the boxes themselves have a couple
66:58 - states we can see that here
67:00 - this has like some numbers and this has
67:02 - just blank
67:03 - but this is actually not too complex
67:05 - right so we're going to have some
67:06 - padding of some sort on this as well
67:09 - equal on all sides
67:10 - we're going to notice there is a border
67:12 - radius
67:14 - around it so we gonna have a circle and
67:16 - then inside of this so this is going to
67:18 - be a view right and then inside of the
67:19 - view is going to be some text the actual
67:22 - number itself
67:23 - anyway that's kind of how i like break
67:25 - it down the layout before i even start
67:27 - coding i actually like will think this
67:29 - all in my head
67:30 - and kind of just go through how i break
67:32 - down the ui and that's kind of what i
67:34 - imagine each little piece to be
67:37 - uh all right so now that we kind of have
67:38 - an idea of what each piece is let's go
67:41 - ahead and start making this so i said
67:43 - the first thing we're going to start
67:44 - with or at least the first thing i think
67:45 - about is this outside container so we're
67:47 - going to kind of create that
67:49 - so let's hop on over to our code
67:51 - and i'm going to make this into its own
67:53 - component and i'm going to create a new
67:55 - folder here called
67:57 - ui and i'm going to call this the
67:59 - workout card
68:00 - dot tsx
68:02 - and the reason why i made i made a
68:04 - folder for it is because i see this as a
68:06 - piece that could be used across our
68:08 - application it's kind of like a shared
68:10 - ui piece
68:12 - so i'm going to say rh for my react hook
68:14 - snippet and we're going to say workout
68:16 - card
68:19 - and so i'm going to say rnss this is my
68:22 - snippet for style sheets
68:24 - and we're going to start by having an
68:26 - outermost view and so this view is going
68:28 - to be that card that we just talked
68:30 - about and let me just push this over a
68:32 - little bit
68:33 - so we're going to say
68:35 - card
68:36 - and we're going to just apply that style
68:38 - onto this real quick so we're going to
68:40 - say style
68:41 - styles.card
68:43 - and then just for the sake of viewing it
68:46 - i'm just going to say text
68:48 - hey guys
68:49 - i'm going to import that and i'm going
68:50 - to import all these things so i just hit
68:52 - control and space to bring up the
68:54 - intellisense
68:55 - and i'll do that
68:57 - other other thing i wanted to mention is
68:59 - you don't always have to do the hotkeys
69:01 - too there's this little light bulb that
69:02 - sometimes appears you can click on that
69:04 - and then i'll do the same thing where
69:05 - you can auto import things
69:08 - all right so now we're going to deal
69:09 - with this card style so i already said
69:11 - the border radius we're going to have
69:13 - something it didn't look too bad some
69:15 - say like a board radius of 3.
69:17 - the background color was white so we're
69:20 - going to say fff
69:22 - and then lastly was that box shadow and
69:24 - i actually didn't even know how to do a
69:25 - box shadow
69:26 - and react before i did this so i just
69:28 - went on over to
69:30 - or sorry react native so i just went
69:32 - over stack overflow and saw this answer
69:35 - and we can use these properties
69:37 - uh to add a box shadow
69:40 - and then and all these chat uh variables
69:42 - we can kind of play with a little bit to
69:44 - get a better shadow uh i played with the
69:46 - numbers a little bit and i thought width
69:48 - of two height of two and then a shadow
69:50 - opacity of point three looked pretty
69:51 - nice
69:53 - but uh basically you can do whatever you
69:54 - want and i think i also set the shadow
69:56 - radius to match
69:58 - the shadow ray or the radius that we
70:00 - used up here
70:02 - so the other thing i like to do is just
70:04 - to render this right away and kind of
70:06 - get a feel for what it's looking like
70:08 - so i'm going to just go over to the
70:09 - current workout screen that we have and
70:11 - i'm going to just render a workout card
70:15 - workout card
70:17 - and just to get a feel for it
70:19 - the other thing i'm going to do real
70:20 - quick is add a style sheet here i'm just
70:23 - going to call this the container and i'm
70:25 - going to set the background color just
70:26 - for this page to be fa fafa that way we
70:29 - can just see some contrast between the
70:31 - actual background color of the card and
70:33 - the background color of this oops we're
70:34 - gonna say styles.container
70:37 - all right give that a save
70:38 - and let's go take a look at our content
70:40 - i don't know if i mentioned this but i'm
70:42 - gonna have just like the uh yarn watch
70:45 - running on the common package and then i
70:47 - just have my server running from the web
70:50 - so those are just kind of constantly
70:52 - running throughout the series
70:54 - all right so let's go over to that page
70:55 - by saying create workouts uh here we can
70:57 - see our card being rendered
70:59 - um the other thing i'm going to do is
71:01 - just add a little bit of margin
71:03 - everywhere so i'll say like a margin of
71:04 - 10. that way it's just
71:06 - not up against the edge and i can see it
71:08 - a little bit
71:09 - so there we go nice
71:11 - other thing i'm going to do real quick
71:12 - is just head over to our router store
71:15 - and set the default state to current
71:17 - workout so we don't have to have the
71:18 - screen change every single time
71:21 - all right
71:23 - so this is a good start for our card so
71:25 - why don't we start making uh the two uh
71:28 - top view first so i said there's going
71:31 - to be a view here
71:33 - and a view down here so we're going to
71:35 - create those two
71:37 - so uh back to our workout cart
71:40 - so here i'm going to say this is going
71:42 - to be like our top view and then we have
71:44 - a bottom view
71:45 - and uh here
71:47 - we're going to say flex direction
71:50 - is going to be a column that way we get
71:52 - them stacked
71:54 - and again i can display some text if i
71:57 - want to
71:58 - and just say bottom for now
72:00 - because we're going to fill on the top
72:01 - first
72:02 - so for this we saw some text
72:04 - and this was actually the workout
72:07 - they're doing so why don't we take that
72:08 - as a prop
72:10 - so here i'm going to say
72:12 - uh exercise
72:16 - and that's just the name of the exercise
72:19 - and we're just going to take that as a
72:20 - prop and we'll render that here
72:26 - uh and then on the other side we saw
72:28 - was i believe was just uh i guess the
72:32 - amount of reps that we're doing
72:34 - and then
72:36 - for the weight that we're doing it at so
72:38 - we could just say
72:40 - um here we'll say
72:42 - reps
72:43 - and weight
72:45 - as a string
72:47 - and we'll take that as another prop that
72:49 - we're gonna have on the right side
72:52 - so reps and weight
72:55 - um
72:56 - and i guess it's the set as well but uh
72:59 - that'll cover it
73:01 - so actually not i guess we it's better
73:03 - to be the most clear so uh one thing i
73:06 - can do i don't know if i hit f2
73:08 - uh it brings up this little window i
73:10 - don't know if it's going to rename it
73:11 - here and here let's see if it does
73:14 - or maybe if i do an f2 here it'll do it
73:18 - so i'm going to say reps
73:20 - sets and weight
73:22 - i don't know if that really uh
73:25 - that really even looks that good of a
73:27 - variable name
73:28 - i think i like reps and weight better it
73:29 - just looks a lot cleaner
73:32 - all right anyway it didn't really f too
73:34 - well
73:36 - all right so let's add that so i'm going
73:37 - to say exercise
73:39 - it's going to be squat
73:41 - and the reps and weight is going to be a
73:44 - 5x5
73:46 - and we're doing 260 today
73:51 - um the other thing is if we look at our
73:52 - workout card right now i believe the
73:54 - text probably is like all mashed up
73:57 - against each other
73:59 - nope it's actually
74:01 - rendered below each other that's kind of
74:02 - interesting i would have thought they
74:04 - would do you know what i think the
74:05 - default might be a flex direction is a
74:08 - column instead of row maybe
74:10 - i can't remember
74:12 - anyway so we're going to add a style to
74:13 - this that way they are next to each
74:15 - other or not next to each other at least
74:17 - on the same line
74:18 - so here i'm going to say top row
74:21 - and we're going to say flux direction
74:24 - is a row
74:26 - and then we're going to say justify
74:28 - well let's just see what that looks like
74:29 - for restraint
74:30 - before we add the next step so we're
74:33 - going to say styles.top row
74:37 - and now they should be side by side
74:40 - nice and so now we just want to add
74:41 - space so this is on the other side over
74:43 - here
74:44 - so for that we're going to say
74:46 - justify
74:48 - content
74:49 - space between
74:52 - and so now it's going to just jam space
74:54 - between them and they're now on the
74:56 - sides
74:57 - so i mean the next thing is we want to
74:58 - just add some padding and we're
75:00 - basically adding padding all around the
75:02 - cards itself so i can just say on my
75:05 - card up here
75:07 - you can just add a padding of i don't
75:09 - know like 10 or something
75:11 - see what that looks like
75:12 - um that looks pretty good we could maybe
75:15 - add a little bit less
75:16 - it also looks a little spacey on the
75:18 - bottom but we can make these little
75:20 - changes later
75:21 - the other thing i'm just capitalized
75:22 - squat
75:25 - and over here i'm now going to just
75:28 - maybe make the text a little bit bigger
75:31 - so here i'm going to say top row text
75:37 - and i don't know font size 16
75:42 - style
75:44 - styles dot top row
75:47 - and then same style we're going to apply
75:48 - to the other one as well
75:52 - all right let's take a look at that
75:54 - awesome
75:56 - uh so let's do the bottom row now so we
75:59 - have this part
76:01 - and let's go back to our whiteboard we
76:02 - don't really need this anymore
76:05 - so the bottom row again we're gonna have
76:07 - a view and you'll notice it's kind of a
76:10 - row and then we're just going to
76:11 - basically be
76:12 - looping through
76:14 - um these five different things
76:16 - so let's actually add the prop for that
76:18 - first so this is going to be
76:21 - basically
76:22 - these sets
76:23 - and this is going to be um i guess this
76:26 - is really just an array
76:28 - and it's going to be the values either i
76:31 - think i'm going to say the value is a
76:32 - string because there's a couple
76:33 - different states
76:35 - one of the states is an x marked through
76:37 - it one of the states is blank and the
76:39 - other state is a number with a color so
76:42 - five four three two one and so on
76:45 - so i'm gonna just say this is a string
76:46 - array
76:48 - and i guess i guess this makes more
76:50 - sense to say reps
76:53 - but we already said
76:55 - is this really is this considered reps
76:57 - or is this considered set
76:59 - um i guess it is
77:01 - sets this makes more sense i think
77:04 - um
77:05 - all right so we have an array of sets
77:10 - and we're basically going to map through
77:11 - that and render them here so we're going
77:13 - to say sets dot map
77:15 - and for each set we're going to return a
77:17 - view
77:22 - so first off
77:24 - uh actually i'm not sure
77:26 - the best thing
77:28 - for the key itself i actually think the
77:30 - only key we have for this is going to be
77:32 - the index
77:35 - so key we'll say it's the index because
77:37 - there's really nothing unique about the
77:39 - set themselves it's just going to be the
77:41 - number five or something
77:44 - all right and i guess we could say set
77:46 - plus the index that may i guess makes
77:48 - the most sense
77:50 - all right so this view is going to be
77:52 - that red circle thing
77:54 - so we'll style that in a second
77:56 - because it can possibly again be three
77:58 - different states
78:00 - so why don't we say
78:02 - um
78:03 - if set is equal to x
78:06 - then we're going to return
78:08 - just the text
78:11 - x
78:13 - and we're going to style this in a
78:14 - second
78:15 - if set is blank we're going to just
78:18 - render a blank text
78:20 - otherwise we're going to render the
78:21 - circle right here and for all of these
78:23 - we're going to have to say a key
78:29 - so key
78:34 - all right the other thing is this is
78:36 - also going to be a row
78:38 - so why don't we just add the style for
78:40 - that real quick
78:43 - so this is going to be the bottom
78:46 - row
78:47 - and flex direction is going to be row
78:52 - and then the uh we're gonna use justify
78:54 - content
78:56 - and we're gonna say
78:58 - space
78:59 - uh we wanna do space between but we also
79:02 - wanna do i think i don't know if space
79:04 - between or space evenly is gonna work
79:06 - out better well i'll just have to see
79:07 - what it looks like
79:10 - all right so why don't we start with
79:11 - what the red circles look like
79:13 - and render that first
79:15 - so we're gonna have some kind of view
79:17 - with a large border radius so i'm gonna
79:20 - say circle
79:23 - is going to have a border radius
79:25 - of say 9
79:28 - and then we're also going to have to set
79:29 - a background color
79:31 - and i thought it'd be kind of nice to
79:33 - instead of just copying their color
79:34 - scheme to make our own color scheme so i
79:37 - just went to color.adobe this is a nice
79:40 - little tool
79:41 - uh it has a little color wheel where you
79:42 - can put a color
79:44 - and it'll give you there's different
79:45 - ways you can do to create basically
79:47 - color palettes so right now i'm doing
79:48 - complimentary color palette for just
79:50 - white and so we're gonna make our little
79:53 - circles this green color
79:55 - all right so come back over here
79:58 - and we'll render this color
80:00 - for our circle
80:02 - all right so here we're going to say
80:04 - style
80:06 - styles.circle and then inside of that
80:10 - we're just going to render some text
80:13 - and we may need to like align this in
80:16 - the center and stuff and this is just
80:17 - going to be the set itself
80:20 - so let's go ahead and add some sets over
80:22 - here so let's say
80:25 - for now we're just going to do an array
80:27 - of five and we'll have that a couple
80:29 - times
80:31 - so five sets of five
80:34 - is what we'll do at first and let's just
80:35 - see what that looks like
80:37 - um
80:38 - didn't i say
80:39 - flex row i thought just see what i
80:42 - messed up with my card
80:44 - because they're all stacked
80:46 - did i do
80:47 - bottom row flex direction
80:50 - is uh a row
80:52 - so okay i just didn't actually set it
80:54 - okay
80:56 - so we're gonna say
81:00 - styles dot
81:02 - bottom row
81:04 - and let's see what that looks like now
81:06 - um all right uh we should we didn't
81:09 - actually do a very good job because
81:11 - we need to add i guess some padding to
81:13 - make it more circular
81:16 - so let's play with the padding a little
81:17 - bit
81:21 - i don't think i really made too many
81:22 - circles like this let's do like 10 just
81:24 - see what even padding looks like
81:26 - alright so this looks kind of blocky i
81:28 - think i just need to add like a border
81:30 - radius of way more maybe like 15
81:34 - and then i'll get more circular all
81:35 - right we got an oval
81:37 - 20
81:40 - uh is that as much as we can go
81:42 - so let's say padding of now 30.
81:46 - um that's like that
81:49 - all right let's say board rate is 30.
81:52 - um all right we're almost at a circle
81:55 - i don't know like 60.
81:57 - just get let's just get there
82:00 - i feel like there's probably an optimal
82:01 - circle amount here i'm gonna have to
82:03 - google this after i'm done with this
82:05 - video i think we'll just call this good
82:07 - for now and then i'll google if i just
82:08 - need to do i don't know if you're just
82:10 - supposed to set like a giant border
82:12 - radius to get a good circle or what
82:14 - because this is still looking a little
82:16 - weird here
82:17 - uh anyway so let's shrink the padding a
82:19 - little bit
82:21 - let's do like
82:22 - 15. um and then let's go ahead space
82:27 - evenly
82:28 - looks pretty decent i think the other
82:30 - thing is i want some like padding on the
82:32 - bottom itself i also want to make the
82:35 - text of this
82:36 - white so uh this is going to be circle
82:40 - text
82:45 - color is going to be
82:47 - fff
82:54 - so this is the circle text
82:56 - and then i want to add some padding to
82:58 - the top of this
82:59 - so on our bottom row
83:01 - i'm going to say
83:03 - margin
83:04 - top
83:06 - and let's just say like 10.
83:08 - i know 10's like the magic number today
83:11 - uh we could probably do like a wee bit
83:12 - more maybe like 14.
83:16 - all right um
83:18 - all right this kind of looks like what
83:19 - it should look like i think
83:21 - um let's go ahead and do the other two
83:24 - states so there are two states where
83:26 - there's an x in the middle and that it's
83:29 - grayed out
83:31 - all right so for us uh
83:35 - that's gonna be these two right here
83:37 - um and we're gonna use the circle in all
83:39 - three states
83:40 - that's something i didn't really think
83:42 - about so uh
83:44 - what we're gonna do
83:48 - let's copy this
83:51 - the only thing that differs is its color
83:54 - so we'll taste that
83:58 - and what we're going to do is just take
84:00 - an array of styles
84:03 - and here we're going to set
84:05 - i guess styles dot gray
84:10 - and all that styles.gray does is set the
84:12 - background color to gray
84:15 - and so this is going to render
84:17 - some text
84:19 - and it's going to be an x
84:22 - let's do a big capital x oops
84:26 - and this is just going to be a blank
84:28 - there's going to be nothing it's just a
84:29 - single view oops
84:33 - and let's close that tag alright so
84:34 - let's add the styles.gray
84:41 - background color
84:43 - and i don't know if i ca it came with a
84:45 - gray over here that would work
84:46 - um this is f oh all of them are fff this
84:50 - brown could work as well let's try that
84:51 - out
84:55 - um
84:56 - let's see if that looks funky or not i
84:58 - guess it's no longer really gray all
85:00 - right so let's let's render a few
85:02 - different ones so this is going to be an
85:04 - x
85:05 - all right let's let's do that one blank
85:06 - and this one's an x
85:09 - all right so these are two different
85:10 - states for it
85:12 - so this has a slightly different padding
85:15 - uh if it doesn't have a number or not
85:17 - so i think when i had to figure out how
85:19 - to do a nice even circle we'll fix the
85:21 - padding on this thing
85:23 - but i think that looks fine enough
85:25 - the circ the text itself we could
85:26 - probably uh increase a little bit
85:29 - on all of them
85:31 - so we'll come back to our card
85:33 - so i said circled text right here i
85:36 - think i'm going to just rename that to
85:37 - white text
85:39 - because i want to say a circle text and
85:42 - set the global
85:44 - font size by the way i did f2 to rename
85:47 - that that's how that little pop-up came
85:48 - up and i think it renamed it down here
85:50 - automatically for me so just a heads up
85:52 - on that
85:53 - so circle size we'll say font size of
85:57 - let's do 15 again
86:00 - or did i say 16 above we'll do 16 again
86:03 - and then i can set that here so style
86:05 - styles
86:07 - dot circle text
86:09 - and we'll do that here as well
86:12 - so it's going to be white text
86:14 - and it's going to be styles.circle
86:18 - and one last thing i want to do is
86:20 - actually make this x like more of a
86:23 - gray color i think
86:26 - i already did gray here this should
86:28 - really be
86:29 - the background could be like faded
86:32 - background
86:35 - because we could change the color on
86:36 - that so this is gonna be gray text
86:40 - and we're gonna say color and i'm just
86:42 - gonna say gray
86:44 - uh and
86:45 - you know i spelled it with an a there
86:46 - and an e there
86:48 - all right so let's add that
86:53 - styles doctor
86:56 - let's take a look
86:58 - now we kind of grayed out x that's kind
87:00 - of the feel i think they had on theirs
87:03 - so there we go that's basically the
87:05 - start of our kind of our component card
87:07 - here
87:08 - um i think in the next video what we'll
87:10 - do is we'll perfect the circle itself
87:13 - uh also i wanna before we end the video
87:16 - just see how space between and space
87:19 - evenly looked
87:21 - um
87:22 - so space between spread it to the edges
87:25 - maybe that's better i think that fit
87:27 - more to what this was doing whereas on
87:29 - the edges yeah i think that was closer
87:30 - to what this was like
87:33 - so yeah we're going to make this
87:34 - interactive and actually respond to for
87:36 - example clicks and we'll also get the
87:38 - circles working
87:44 - so we're going to start by making these
87:46 - ovals into circles thank you guys in the
87:48 - comments for suggestions on how to do
87:50 - that and then we're going to be making
87:51 - them interactive so when you actually
87:53 - click on them they're going to change
87:55 - and then lastly i got a cool mobx tip in
87:57 - the comments as well that we're going to
87:59 - implement we're going to be doing a root
88:01 - store that we're going to set up today
88:03 - so to start off let's go ahead and fix
88:05 - these circles
88:06 - so we're going to go over to our circle
88:09 - style and we're going to remove the
88:11 - padding instead of padding just doing a
88:13 - height and width so a height of 50 and a
88:16 - width of 50.
88:18 - and then the recommendation was to do
88:20 - half of the height slash width as our
88:22 - border radius so in this case we'll do
88:24 - 25.
88:25 - so if we come back over here you'll
88:26 - notice they are way more circular
88:29 - now the number itself is now off the
88:31 - plane
88:32 - we can fix that by coming over to the
88:34 - circle text and just saying
88:37 - margin auto
88:39 - give that a save
88:40 - and now we have it centered
88:42 - the other thing i want to mention real
88:43 - quick is this gray that we put in there
88:46 - is kind of hard to read so i just went
88:48 - into the color wheel that we used
88:50 - yesterday pasted the brown that we're
88:52 - using
88:53 - and uh
88:54 - basically just replace it with this so
88:56 - just picked a different complementary
88:58 - color um and uh seems to work better so
89:01 - i'm gonna just replace the gray text
89:02 - that we were using so paste that in
89:06 - and that's what it looks like and you
89:07 - can see it still has that kind of faded
89:09 - view but it's a little bit more readable
89:11 - all right so let's start with this root
89:13 - store that i was talking about we'll
89:15 - start with that so the idea with this is
89:17 - we want to be able to access multiple
89:19 - stores
89:20 - so in our mobx we have a router store
89:23 - and a workout store and we want to
89:25 - access both of them and so one way to
89:27 - access both of them
89:29 - is for example we could say use context
89:32 - and we could say
89:34 - our workout store here in our router
89:36 - store and just have use context twice
89:39 - but downside of this we could have used
89:40 - contacts a bunch of times so it's kind
89:42 - of repetitive
89:43 - and also
89:45 - we may want to use the router store
89:48 - inside of the workout store or be able
89:50 - to access the data and vice versa so
89:52 - that's the what we're going to set up
89:54 - with the root store it's going to give
89:55 - us access to both of those things an
89:56 - easy way to access all the stores and
89:59 - also a way for the stores to see each
90:01 - other
90:02 - so we're going to create a file in our
90:03 - stores called root store
90:06 - dot ts
90:07 - and i'm going to say export
90:10 - class root store
90:13 - and the idea of this is we're going to
90:15 - be creating a field on the root store
90:18 - for every single store that we have so
90:20 - i'm gonna say
90:21 - router store
90:23 - and we're just gonna say is a new router
90:25 - store
90:27 - and uh we need to export it
90:31 - export and we're no longer going to need
90:33 - the context
90:35 - which will uh the router store context
90:37 - because we're just going to create a
90:38 - single context for the root store so
90:41 - i'm going to remove that
90:43 - i'm going to remove it from the workouts
90:44 - door as well
90:46 - and export it
90:49 - all right so back to our route so we
90:51 - have a router
90:53 - store
90:55 - and then we're going to be passing in
90:57 - uh this which i'll explain in a second
91:00 - so we're gonna do a workout store here
91:02 - as well
91:06 - all right so the reason why we're
91:07 - passing in uh this is that way we can
91:09 - access the all the different stores that
91:12 - are on there
91:13 - uh to be able to get this work to work
91:15 - we just need to go over to our router
91:16 - store and accept this as a constructor
91:19 - so uh let me just save all these files
91:22 - come over to router store
91:25 - and here we're gonna say constructor and
91:27 - here we're gonna take a root store as
91:29 - the prop
91:30 - or really this is just the first
91:32 - parameter of the constructor
91:34 - i'm going to say root store
91:35 - i'm going to say this dot root store
91:38 - is equal to root store
91:40 - and so what we get from this well
91:41 - actually let's add the type up here so
91:43 - root store
91:46 - is a root store
91:48 - so the advantage is now we can access it
91:50 - by saying this dot
91:53 - and restore dot and we can access for
91:56 - example the workout data in our router
91:58 - store if we need to
92:00 - uh and we're not going to be needing it
92:02 - in this video but we may need in a
92:04 - future video i'm going to have copy this
92:06 - over and just paste this into the
92:08 - workout as well
92:10 - all right and we're just going to import
92:12 - these
92:15 - and then back to our root store
92:18 - uh we're just going to create a context
92:20 - from it so we're saying export cons root
92:23 - store context
92:25 - is equal to create context
92:28 - and a new root store
92:31 - so now how we actually use this center
92:33 - application we can go back to our router
92:36 - here we're going to call this root store
92:38 - instead say root store context
92:42 - and now we just say root store dot
92:44 - router store to access it but if we
92:46 - wanted to we also have access now to our
92:49 - workout store
92:50 - so now we don't have to spam a bunch of
92:52 - contexts we just access it through that
92:55 - and then we're just going to do the same
92:57 - thing in our workout history that's the
92:59 - other place we're using the router store
93:03 - all right
93:05 - and oops that should be root store
93:08 - dot router store
93:10 - then let's import those give it a save
93:13 - and uh we're good to go all right so
93:15 - let's just make sure we didn't break
93:16 - anything
93:18 - if we come back over here and we see
93:20 - everything nicely i mean we didn't
93:22 - really break it it's compiling
93:24 - everything's good
93:25 - all right so that's the uh rootstore uh
93:28 - method or i guess you'd say
93:30 - uh uh abstraction i guess
93:33 - so uh next up we're going to make this
93:35 - interactive so
93:37 - to make this interactive we want to
93:38 - start storing stuff in our workout store
93:41 - basically we want to store the current
93:43 - workout
93:44 - and when the user clicks we're going to
93:45 - decrement the amount of reps that they
93:47 - actually did on that workout so for
93:49 - example this means that they did five
93:51 - reps of the squat
93:53 - all right so
93:55 - we're come back over here i'm gonna make
93:56 - these fields observable
93:59 - observable
94:01 - um and i'm just gonna copy that and add
94:03 - it to each field
94:05 - um and let's
94:07 - add a space
94:09 - paste that in
94:15 - all right and we'll remove that
94:17 - all right
94:19 - so now i made each one of these
94:21 - observable we're going to have an extra
94:22 - field on here and this is going to be
94:24 - like the current exercises that the user
94:26 - is doing so i'm going to say current
94:28 - exercises
94:31 - and this is going to be an array
94:33 - um so i'm going to make the call this
94:35 - current exercise
94:37 - so we're going to create this type and
94:39 - it's going to be an array and at first
94:40 - the array is going to be empty
94:42 - so let's create an interface for this
94:46 - current exercise
94:49 - and for this we're going to have a few
94:50 - things so we're going to have the weight
94:54 - which is going to be a number we're
94:56 - going to have the number of reps
94:59 - so num reps
95:01 - we have the number of sets
95:04 - and actually we're just going to say
95:06 - reps i think instead of num reps i think
95:07 - that makes more sense
95:12 - and then the exercise itself which is
95:14 - just going to be a string
95:16 - um so that's pretty much all the data
95:17 - that we need to know about this
95:19 - uh so we're just going to head on over
95:21 - to our workout history and we're going
95:24 - to just create a add-on to this current
95:27 - exercise array
95:30 - so here whenever we transition screens
95:33 - right here we're just going to say root
95:34 - store
95:36 - dot workout store
95:37 - dots
95:39 - current
95:41 - exercises dot push so we're gonna add a
95:44 - few exercises for them to do uh right
95:47 - before we move to the screen
95:50 - so oh there's one other thing that we
95:52 - need to add to that
95:53 - we need to keep track of the sets that
95:55 - they're doing
95:57 - so sets is going to be an array of
95:59 - strings
96:01 - all right so here we're going to say uh
96:04 - the name or the exercise is going to be
96:07 - squat
96:08 - the number of sets is going to be five
96:11 - the reps is going to be five
96:13 - now the sets is going to be an array
96:16 - that looks something like this
96:18 - so five
96:19 - five
96:21 - five
96:23 - and i think later on we're going to make
96:25 - a function to automatically create this
96:26 - for us but we'll hard code it for now
96:29 - and the weight we're going to do at 260
96:31 - today
96:33 - um and so if we wanted to we could do
96:34 - this a couple times
96:36 - and i think with push you can actually
96:39 - make this into a single call so if i
96:40 - just do a comma there you can do it like
96:43 - this
96:46 - and we can do another exercise so say we
96:49 - want to do the bench press
96:53 - bench press
96:56 - we'll do five five and then the weight
96:58 - i'm only going to do 200 on
97:01 - and then the deadlift we're only going
97:03 - to do one set
97:05 - so i'm going to say deadlift
97:07 - for 360
97:09 - and this is all going to be x's
97:13 - all right
97:15 - and number of sets is just going to be
97:16 - one
97:18 - all right so let's go to our current
97:20 - workout so that is basically just going
97:23 - to read these values map through them
97:25 - and render the cards
97:27 - so let's do that we're going to first
97:29 - need to wrap this in an observable
97:32 - obser or sorry observer
97:37 - because we want to access that context
97:40 - so root store
97:41 - use context
97:43 - and here we're going to do the root
97:45 - store
97:46 - context and then instead of just having
97:49 - a single workout card like that we're
97:51 - going to say root store
97:53 - dot workout store dot
97:56 - current exercises dot map
97:59 - and so for each
98:00 - exercise which i guess we'll just call
98:03 - e
98:04 - we're going to return a workout card
98:09 - um so here i'm going to say the key is
98:11 - just the name of the exercise
98:13 - and we can say exercise there
98:16 - and then the this this little thing
98:19 - right here we can create
98:21 - so we'll make this a string template
98:26 - so this is the amount of weight that
98:28 - they're doing so e dot wait
98:31 - this is the number of reps
98:35 - so e dot reps and this is the number of
98:38 - sets
98:39 - so e dot num sets
98:41 - and then this is the sets themselves so
98:44 - we're going to say e dot sets
98:46 - so we're going to give that a save let's
98:48 - come look at that and it should just be
98:50 - rendering a couple cards
98:52 - but i messed up somewhere
98:54 - the other thing that i wanted to do real
98:56 - quick is uh oh we add observer here
98:59 - we're gonna have to add observer to the
99:00 - workout card as well because this is
99:02 - actually using the mobx values i don't
99:05 - think that's our particular problem
99:06 - though
99:08 - observer
99:13 - um the other thing i wanted to do real
99:14 - quick is just in our
99:16 - i noticed when this was blank that this
99:18 - was not the right color
99:20 - so if i come back over here and we go to
99:22 - our workout history
99:24 - um oh sorry it's current workout
99:27 - you notice how we set the background
99:28 - color to f a fafa it's not showing
99:31 - we just need to say flex one i believe
99:33 - so it stretches across the whole screen
99:35 - okay so now you'll notice we have like
99:37 - this light gray and then there's this
99:39 - light blue because we have some margin
99:41 - in our index i think
99:43 - um
99:44 - no we didn't add any margin here i don't
99:47 - know what we have a margin on
99:51 - i don't know if we set a margin anywhere
99:52 - in our application it could just be on
99:54 - the body itself
99:56 - that there's some kind of margin
100:00 - we do an inspect maybe we'll be able to
100:01 - see it
100:06 - we set a margin left oh you know what we
100:08 - did set a margin we set it right here
100:12 - let's change that to padding
100:17 - and there we go now we have fully grade
100:19 - all right so let's figure out what the
100:20 - heck is going wrong with this oh yeah so
100:22 - we're actually starting on this current
100:24 - workout page when really we are never
100:26 - coming over to workout history and
100:28 - adding the items to the array so that
100:31 - just means we need to come over to our
100:33 - router store and change the what the uh
100:36 - basically the starting route is supposed
100:38 - to be workout history
100:40 - so now if i come back over here we
100:42 - create a workout
100:43 - we can see the cards actually showing up
100:46 - so nice
100:47 - let's add a little bit of margin so that
100:49 - they
100:50 - are not just like smashed against each
100:51 - other but we can see we're
100:52 - programmatically creating our workout
100:54 - right here so that's pretty neat
100:57 - um so just go back to i guess the
100:59 - workout card
101:01 - and then in the card itself we'll just
101:04 - set a margin bottom
101:06 - of 10 that seems to be the magic number
101:08 - we've been using
101:12 - and
101:14 - create workout nice
101:17 - all right so
101:18 - lastly we just want to be able to click
101:20 - and this will be kind of cycle through
101:23 - so to do that we're going to just add an
101:25 - on press
101:27 - now we can't add an on press well maybe
101:29 - you can on press the view i don't even
101:30 - know if you can doesn't look like
101:32 - there's an on press property
101:34 - but anyway we're going to use touchable
101:35 - opacity
101:39 - that has an on press that we can use
101:42 - and then what we're going to do is take
101:44 - a on press function as a prop here so
101:47 - we're going to say on set press
101:50 - and what we're going to pass in is the
101:51 - index that they pressed
101:54 - and then it's just going to be returning
101:56 - void so this is the type definition for
101:58 - a function
102:00 - and so here we're going to say onset
102:03 - press
102:04 - and here we're going to say
102:06 - onset press
102:08 - and then we're just going to pass in the
102:09 - index
102:10 - so in our function up here we're going
102:12 - to have to actually handle this and
102:14 - actually update the uh
102:16 - the little circle
102:18 - so we're going to make this a touchable
102:20 - opacity and the x we do not need to make
102:23 - a touchable opacity so we can just
102:24 - ignore that so let's copy this
102:27 - and we're going to just paste it in here
102:32 - and let's just there we go
102:35 - and come back to our current workout now
102:38 - implement this onset press
102:41 - so this is going to be the set index
102:45 - and so what we're going to do is
102:47 - we basically know what the current value
102:49 - is so we say
102:53 - called v which is going to be the
102:55 - current exercise sets
102:57 - set index
103:01 - so this v is just going to be for
103:02 - example a string that says the value 5
103:05 - because we're just getting the current
103:06 - set
103:07 - and so we're just going to check if the
103:09 - current set is blank because if it is
103:13 - uh we're gonna say
103:15 - new value
103:16 - is a string
103:19 - and we're gonna say the new value should
103:20 - be
103:22 - uh after you hit nothing it should be i
103:25 - believe five
103:27 - or really it should be the number of
103:29 - reps so we're gonna say e
103:32 - reps
103:34 - and we need to make that into a string
103:35 - so
103:37 - back ticks
103:39 - like that
103:40 - else if v is equal to zero
103:44 - it is now oops not returned
103:47 - is equal to
103:50 - an empty string
103:51 - single
103:52 - and then else the new value is going to
103:55 - be
103:56 - uh whatever the current value is minus
103:58 - one so value is currently a string so
104:01 - we're going to say parse int
104:03 - v minus one
104:05 - and then this needs to be a string so
104:06 - we're going to convert it like that
104:09 - and then lastly since we're using mobx
104:11 - we can just directly
104:13 - update the the value now i don't know if
104:15 - we can just update the value here that
104:17 - we're mapping through we can try that
104:19 - and see if that will work
104:21 - so i can say dot sets
104:24 - set index
104:26 - and that's equal to the new value
104:28 - all right so let's see if this updates
104:30 - when we click on anything now so go
104:32 - create
104:33 - and sure enough it does so we can just
104:35 - modify it there which is pretty neat
104:37 - okay so we can see we can cycle through
104:39 - that now
104:40 - um so click that notice click on the x
104:43 - doesn't do anything
104:45 - but so yeah so how this works is for
104:47 - example
104:48 - if i'm dead lifting i basically you know
104:51 - actually everything should start off
104:53 - at
104:54 - uh blank so go to workout history this
104:57 - should actually start out all blank not
105:00 - a bunch of fives
105:02 - it should look like that when it starts
105:04 - and then as i squat when i do the first
105:06 - squat i'll click it i did five reps then
105:08 - i did five reps and then here maybe i
105:11 - only did three reps and then here i went
105:13 - down to i don't know zero reps and i
105:14 - failed
105:15 - so that's kind of how you keep track of
105:17 - your reps as you're doing it
105:23 - so we're going to be building this
105:24 - little timer component at the bottom
105:26 - here today we're going to start with
105:27 - building out the ui and then we're going
105:29 - to create a mobx store that's going to
105:31 - increment the timer and keep the state
105:34 - for it
105:34 - now the purpose of this timer is after
105:36 - you complete an exercise you want to
105:38 - wait like five minutes or so or three
105:40 - minutes and then do the exercise again
105:42 - so this timer is going to keep track of
105:44 - that time for you and as you proceed
105:46 - it's going to tell you how much time you
105:47 - have left before you need to do the
105:48 - exercise again
105:50 - so let's go ahead and start off with the
105:52 - ui of this so the first thing is it's
105:54 - going to be at the very bottom and we're
105:56 - going to start on that now
105:59 - so the bottom we're gonna create a new
106:01 - ui component here i'm gonna call this
106:04 - workout timer.tsx
106:07 - and i'm gonna say react hook
106:09 - and
106:10 - use my snippet
106:11 - and then workout timer
106:13 - now we're going to render a view
106:15 - and you'll notice the view was at the
106:17 - very bottom of the screen
106:18 - so the way that we get something at the
106:20 - very bottom on the screen is we're going
106:21 - to be using absolute positioning
106:24 - so i'm going to say container style here
106:28 - and i'm going to say position absolute
106:31 - and then i'm going to say the bottom 0
106:34 - and i'm going to say left of 0.
106:37 - that way it's starting very at the very
106:39 - left most and at the very bottom most
106:42 - next i'm going to give it a height of
106:44 - let's say 50
106:45 - and a width of 100
106:47 - uh then i'm going to set a background
106:49 - color for it
106:51 - and then for this i'm just going to go
106:52 - back to our color wheel and pick one of
106:54 - the colors let's go ahead and pick the
106:55 - green
106:57 - and paste that in
107:00 - and so i'm going to say style
107:03 - styles dot container
107:05 - and then inside of here i'm just going
107:07 - to say text
107:08 - and i'm going to say hello for now and
107:10 - we're just going to see if this renders
107:12 - a box at the very bottom of the screen
107:15 - so
107:16 - we'll import this
107:19 - and
107:20 - not view base
107:22 - view
107:24 - and we'll give this a save and then i'm
107:26 - going to just come over here to the
107:27 - current workout and render this workout
107:30 - timer at the bottom
107:33 - so give that a save then let's come back
107:36 - to our react application create the
107:38 - workout and you'll notice now we have a
107:41 - box at the very bottom and it says hello
107:43 - in it so that's kind of how we're going
107:44 - to position
107:46 - the box and we have to give it a height
107:49 - because we don't really have much
107:51 - content in this but i guess we could
107:52 - have done it based off of the content
107:54 - too but i'm just going to do a static
107:55 - height i think
107:57 - all right so the next thing is i'm not
107:59 - going to worry about the text in the
108:00 - middle i'm just going to have the timer
108:02 - on the left and then x on the right
108:05 - so this is going to be the text on the
108:07 - left
108:07 - and then this is going to be the x on
108:09 - the right
108:10 - so let's style each one of these
108:13 - i'm going to start with the x
108:16 - the x i'm going to again just pick a
108:18 - color
108:19 - from our color picker
108:21 - and i'll just go with this one
108:26 - and then the font size i'm gonna say as
108:29 - like
108:30 - 20. we'll see if that's too big
108:32 - and then this is going to be the actual
108:34 - time
108:35 - uh time text
108:38 - and this is going to be
108:40 - the color i'll say is white
108:43 - and the font size a little bit smaller
108:45 - maybe 18.
108:48 - right now i'm just calling it hello but
108:50 - we're going to be replacing that in a
108:52 - little bit
108:53 - so styles.time text and then
108:56 - style
108:57 - styles.x
109:00 - and then i want space to be between
109:02 - these guys again so in my container i'm
109:04 - going to say
109:06 - uh flex
109:08 - actually justify content
109:11 - space between
109:12 - and that should push them to the edges
109:15 - all right so let's take a look at it
109:17 - create the workout
109:18 - um
109:19 - it looks like i need to have them in a
109:21 - row so i'm going to say flex direction
109:23 - row
109:24 - flex direction
109:25 - [Music]
109:26 - grill that way they align
109:30 - and now we have them on opposite sides
109:32 - cool so next thing is i want to add
109:34 - basically some spacing some padding
109:36 - around it and basically center them
109:39 - so i'm going to say align items center
109:43 - and then i'm just going to add like a
109:44 - padding of 10 or something
109:47 - and we'll give that a save
109:51 - all right and we'll see what that looks
109:52 - like good and actually i don't want to
109:54 - add a padding because uh one other thing
109:57 - that we're going to add is kind of like
109:58 - a loading indicator at the top that's
110:01 - not something you can see in the
110:02 - screenshot but it's in the app itself
110:04 - is basically when the timer starts
110:06 - there's a little line that kind of goes
110:07 - across so we're going to be building
110:09 - that i guess we'll build that at the end
110:10 - when we have the state in there
110:13 - uh so this is basically going to be the
110:14 - time and then we have this little x i
110:16 - want the x to be
110:17 - quite a bit bigger i think maybe like 30
110:20 - so it's easy to click on
110:23 - and uh
110:24 - i guess we want a little bit more spa uh
110:27 - space i guess padding on the side of
110:30 - that as well and i also want to make it
110:32 - uh touchable
110:34 - touchable opacity like that
110:37 - and then i'm going to say on press
110:39 - and then here we're just going to say uh
110:41 - a prop that we're going to take in here
110:44 - so on x press
110:48 - push and this is just going to be a
110:50 - function
110:50 - and that's the function definition so it
110:53 - takes no parameters and then returns
110:54 - void so nothing
110:57 - onexpress
110:59 - i'll pass that in there
111:03 - and so when we render it over here we're
111:04 - gonna have to use that
111:06 - on x press
111:10 - and for now i'm just gonna do nothing
111:12 - when the x is pressed
111:15 - so now it should be clickable
111:18 - so sweet and again let's add a little
111:20 - bit more
111:21 - i'm gonna say padding is like 30 and i'm
111:24 - just going to say
111:25 - padding on the left and the right side
111:28 - so that should be
111:30 - padding vertical or sorry horizontal
111:35 - because we're already centering it
111:37 - all right so cool
111:39 - so i'm pretty happy with this right now
111:41 - we can click on this the next thing is
111:44 - we want to make this interactive by
111:45 - interactive i mean this should be
111:47 - incrementing
111:48 - up as we
111:50 - kind of like a timer approach
111:52 - so to do this we're going to create a
111:53 - new store to keep track of this so i'm
111:55 - going to say workout timer store
111:59 - dot ts
112:01 - class workouts timer store
112:05 - and now what are we going to actually
112:06 - put inside of this right so i was
112:08 - looking at this one article and i liked
112:10 - their approach they were basically
112:11 - building a stopwatch with mobx and so
112:14 - that's going to be very similar to what
112:15 - we're doing so we're going to take a few
112:17 - cues for for how they kind of set up
112:20 - theirs
112:21 - so what they do is they have instead of
112:24 - for example creating the number of
112:25 - seconds that the timer has been running
112:27 - for basically you have a date the timer
112:30 - started off and then you do a difference
112:32 - between the start and the current date
112:34 - which we'll see in a second
112:36 - so we're going to create an observable
112:38 - here and this is going to be basically
112:39 - the start time
112:41 - um and so start time
112:44 - i'm going to just say
112:45 - is a new date but we're going to talk
112:48 - about that in a second what we're going
112:49 - to do instead
112:51 - and so basically what we want to do is
112:53 - also we want to know whether the timer
112:54 - is running so you create an is running
112:56 - variable and this is going to be false
112:58 - by default
113:00 - the other thing is i want to know the
113:02 - amount of seconds
113:04 - that i have
113:05 - basically passed so for example let's
113:08 - say we started a current date
113:10 - and then or sorry start a current or
113:13 - some time and then we want to compare
113:14 - the start time versus the current time
113:17 - and compute the difference in seconds so
113:19 - that's what this is going to store right
113:21 - here
113:22 - so the next thing is is we basically
113:24 - need to start the timer and we need to
113:27 - basically end the timer and then in the
113:29 - middle we're going to have this thing
113:31 - called measure
113:32 - which basically is going to be running
113:34 - every they did every 10 milliseconds i
113:37 - believe we're going to run it every
113:38 - second and basically it's gonna compute
113:40 - the difference but you'll see what this
113:41 - this will make more sense in a second
113:43 - and i'll link this article below if you
113:45 - want to check it out because it's pretty
113:46 - good
113:47 - uh so we're gonna create an action uh i
113:50 - we haven't really used actions in mobx
113:52 - before basically they're just a function
113:54 - that changed some of the variables or
113:56 - the fields in the store
113:58 - so we're going to do this start timer
114:00 - and i'm not going to worry about this
114:01 - check right here we don't really have
114:03 - that problem
114:04 - and no actually in our particular
114:07 - application we actually don't want it to
114:09 - function like that anyway
114:11 - all right so they what they use for the
114:13 - start time is they're using uh moment
114:16 - and so we're going to be using a
114:17 - slightly different library for that it's
114:19 - called day js so we're going to install
114:21 - that and it doesn't really matter what
114:23 - version you install that
114:25 - you're an ad
114:27 - so just go ahead and do that and
114:28 - basically
114:29 - djs is is a moment but it's not as large
114:34 - i believe it matches most of the apis if
114:36 - not all of them but it just does not
114:38 - have a giant bundle size and we don't
114:41 - really need all the features of moment
114:43 - anyway we just need the ones that djs
114:45 - supports really we're only using one
114:47 - function of it which we'll see in a
114:48 - second
114:49 - so we start the timer we're basically
114:51 - going to say we're currently
114:53 - running so we set that to true and then
114:54 - we get the current time
114:57 - and then we're just going to import djs
114:59 - here
115:01 - uh there we go
115:03 - and then we're going to call this timer
115:05 - uh and then instead of new date here
115:07 - we'll call new here we'll call we'll
115:09 - make it a day js as the default
115:13 - all right so let's do the uh measure
115:15 - action
115:17 - oops
115:18 - should be measure
115:20 - actually i can just copy their measure
115:21 - we're going to basically do that
115:26 - all right
115:27 - so their measure what they do is if it's
115:30 - currently so if you turn this variable
115:32 - off
115:33 - measure is going to stop
115:35 - because basically what it does is it
115:36 - recursively calls itself
115:38 - so as soon as we say false it's going to
115:41 - stop running so that's what that does
115:44 - what it does next is it sets the current
115:46 - uh difference in time so that's gonna be
115:48 - the seconds variable for us since we
115:50 - don't really care about milliseconds
115:52 - and then lastly it's gonna
115:54 - do set timeout and so what set time it
115:56 - does is after this many milliseconds
115:58 - it's going to call this function and so
116:00 - you notice it's calling itself so it's
116:02 - recursively calling itself waiting 10
116:05 - milliseconds
116:06 - for us we just care about seconds so
116:08 - we'll do that
116:10 - and then this i'm going to call this
116:11 - seconds
116:12 - and we're going to say djs.diff
116:15 - and then we just have to say the unit
116:16 - that we want back in this case uh the
116:18 - second
116:19 - so what's going to happen is djs creates
116:22 - a
116:23 - date object and the current time
116:25 - so it's going to say the current time
116:28 - difference to when we started and that's
116:30 - going to be in seconds
116:32 - all right so we have start timer the
116:35 - last thing we really need is just to end
116:36 - the timer
116:38 - and to end the timer it's very simple
116:40 - all we do is we set is running to false
116:43 - and then
116:44 - that stops it from basically continuing
116:47 - to measure itself over and over again
116:50 - and by the way
116:51 - whenever measure gets called basically
116:53 - we're going to be able to see the new
116:55 - value of seconds and that's going to
116:56 - re-render our application so that's how
116:58 - that's going to work
117:00 - and then we basically want to just add a
117:01 - helper here which i'm calling display
117:04 - and it's similar to what they did
117:06 - and we're going to say computed
117:08 - and this is going to be display
117:11 - and so we haven't done a computed
117:14 - property either so a computed property
117:16 - is basically it uses some of the fields
117:19 - and it generates a new field based off
117:22 - of it so for example we're basically
117:24 - going to take the current difference in
117:25 - seconds so there might be 30 seconds
117:27 - difference and we're just going to
117:28 - format that into a string
117:31 - so we're going to say and also this is
117:33 - going to be a variable that we want to
117:35 - actually i'll show you guys the
117:36 - difference before i'm going to add the
117:38 - get keyword but i'll show you what the
117:40 - difference is with including it and not
117:42 - including that is
117:44 - so here i want to display the number of
117:46 - minutes so i'm going to say this dot
117:48 - seconds
117:50 - divided by 60 and then i'm just going to
117:52 - say math.floor on that
117:55 - and i guess i can say const minutes
117:58 - to be super clear
118:01 - and then the number of seconds
118:03 - right is going to be this dot seconds
118:06 - mod
118:10 - and then all i want to do is i may want
118:12 - to pad this with a zero as well but i
118:15 - guess why don't i show you guys what
118:16 - this looks like first
118:18 - minutes
118:19 - colon seconds
118:24 - all right
118:25 - and now if we go back over to our
118:27 - current workout i want to pass to our
118:30 - workout timer
118:31 - the current time
118:33 - so we're going to say current time
118:36 - and we're going to say this or sorry not
118:38 - this we just need to access our root
118:40 - store
118:41 - and we'll say root store dot and now we
118:44 - want to access the workout timer store
118:47 - so we need to add that to our root store
118:49 - so let's go to that
118:53 - and we're going to say workout timer
118:58 - and i'm not going to worry about passing
119:00 - this in because we're not going to need
119:01 - it
119:06 - so now we can access that over here
119:11 - and we're going to say dot display
119:16 - and we'll come back over here and we're
119:18 - going to say
119:21 - current time
119:24 - is a string
119:27 - and so instead of rendering hello here
119:29 - we're going to render current time
119:39 - uh and if i come back over to this
119:41 - you'll notice i'm calling display like a
119:42 - regular function
119:44 - now if i want this to be more of a
119:46 - property that's constantly changing
119:48 - instead of calling it as a function i
119:49 - can do that
119:51 - and that is what that git keyword does
119:53 - so when i say git basically it's going
119:56 - to call the function to get the property
119:58 - and now we can use it as just a regular
120:00 - property and we can access the field
120:02 - like that
120:04 - so pretty cool
120:06 - so let's just see if we see stuff and we
120:08 - don't get any errors
120:10 - oh let's re-watch
120:13 - now you'll notice we're not actually
120:15 - starting the timer so that should uh we
120:17 - shouldn't see it ticking
120:19 - but if we right here on the workout card
120:22 - when we press on a workout
120:25 - um
120:26 - i guess we'll do it at the bottom here
120:29 - now i guess let's just do at the top
120:32 - i keep wanting to say this but we're
120:33 - just going to say
120:34 - rootstore.timer.isrunning
120:37 - or sorry
120:38 - we don't call is running we say start
120:40 - timer
120:41 - and that's just going to call our action
120:42 - to kick things off
120:45 - all right so we'll come over here so we
120:46 - can see it's
120:48 - zeros
120:49 - we can see our x here
120:51 - and if i press this
120:53 - you'll notice it's incrementing every
120:55 - sync it now so pretty neat
120:58 - um so let's take this a step further one
121:01 - thing is we may want to pad this with a
121:03 - zero so it just looks a little bit nicer
121:06 - so i guess we go to our workout or store
121:09 - and we can just make a simple utility
121:11 - function
121:13 - and we're just gonna say const pad zero
121:20 - and this is just going to take a number
121:23 - and it's going to say if number is
121:25 - greater than 10
121:28 - greater or equal to 10. we'll just
121:30 - return it otherwise we're going to
121:32 - return
121:33 - it with a zero in front
121:36 - so give that a save and then we can wrap
121:38 - these
121:45 - pad zero
121:48 - and now i think we should see zero zero
121:51 - click on this
121:53 - and it increments nicely cool
121:56 - uh the other thing is i want to close
121:58 - the timer
122:00 - when i click on the x
122:03 - so and that should really reset the
122:05 - timer as well so if we come back to the
122:07 - current workout
122:09 - and the on press here we're just going
122:11 - to say
122:12 - rootstore.workouttimer
122:16 - and we're going to say stop or end timer
122:18 - i guess that's what i called it
122:21 - we'll pass that in
122:22 - so now we'll let tick
122:24 - one two three or whatever click the x
122:27 - and oh it's not
122:29 - cannot add property is running object is
122:31 - not extensible
122:33 - oh what happened to this workout timer
122:35 - what i do
122:36 - this dot is running is now false
122:40 - i wonder if it's because i didn't call
122:42 - it in a lambda
122:47 - if i do that i wonder if it works
122:49 - see so start it
122:52 - increment
122:54 - do that
122:55 - yep and it looks like i guess i'm not
122:57 - resetting the seconds to zero so that
122:59 - would be a good thing to do
123:01 - but that stopped it i'm actually not
123:02 - sure why i need to do a lambda with this
123:05 - probably something to do with it being
123:06 - an observable or something that was
123:07 - causing it to be weird things
123:10 - so in this we're going to say
123:11 - this.seconds is equal to zero too
123:15 - uh the other thing is we only want this
123:17 - timer to display if it's running so
123:20 - we're going to say this dot
123:21 - sorry root store dot
123:24 - workouts timer dot is running
123:29 - and if it is and we can just do a
123:31 - ternary otherwise we're gonna terminal
123:34 - reason why i went with ternary instead
123:35 - of doing double and there is sometimes
123:37 - i've had problems with that with react
123:39 - native doing the and so i usually do
123:41 - that
123:43 - so we should not see the timer right
123:44 - away i click on this we now see the
123:46 - timer and it started and it's going
123:49 - uh the last thing that we can do is
123:52 - we can add a little
123:54 - progress bar if you wanted at the top
123:56 - here that kind of goes as it increments
123:59 - but before we do that let me click the
124:01 - clear make sure that works
124:03 - click it again nice also if i click this
124:06 - i want to restart the timer nice that
124:08 - worked
124:12 - the other thing i wanted to do real
124:13 - quick before we actually do the progress
124:14 - bar is
124:16 - i want to stop the timer if this
124:18 - component gets unmounted
124:20 - so to do that i'm going to say use
124:22 - effect
124:25 - and i only want this to run
124:28 - once
124:29 - and in the cleanup function here all i'm
124:32 - going to say is
124:33 - rootstore.stop timer
124:36 - or
124:37 - into timer
124:41 - and i'm just going to go to my thing
124:43 - real quick and rename this so i'm going
124:44 - to push f2 to stop timer because i
124:46 - constantly keep typing that
124:49 - um
124:50 - and that should rename it over here and
124:52 - f2 did rename it over here for me
124:54 - automatically cool
124:56 - uh so so with the use effect you'll
124:58 - notice i returned a function this is the
125:00 - cleanup function meaning it's only going
125:02 - to be called this component i believe is
125:04 - getting unmounted so it should stop the
125:07 - timer then and then i put a
125:09 - brackets here because i only want this
125:10 - to be called at the beginning
125:12 - okay so let's do that progress bar real
125:14 - quick that should be pretty easy if we
125:16 - go to our workout timer
125:18 - basically all we're gonna do here is we
125:20 - want to have something that has a width
125:22 - that changes
125:23 - so here i'm gonna say
125:25 - line
125:26 - it's going to have a height of let's say
125:29 - three
125:30 - uh we're not going to set the width
125:32 - background color of this again let's go
125:35 - pick up color from this
125:37 - uh let's try this brown
125:40 - see how that looks
125:44 - and let me think if there's anything
125:46 - else i don't think that's anything else
125:47 - that needs to go with that
125:49 - i want to wrap
125:51 - these guys in a view
125:55 - and then i want to have a view up here
125:59 - and this view up here
126:00 - is going to be the line
126:04 - and it's going to sit out on top so
126:05 - styles.line
126:07 - so basically at the very top of the
126:09 - component i want the line and then i
126:10 - want this stuff inside of it
126:13 - but i kind of have some flex stuff going
126:15 - on so i'm going to have to move that
126:16 - down
126:17 - so i'm going to create a style called
126:19 - row
126:20 - and what row is going to do is it's
126:22 - going to say justify content flex
126:24 - direction and center all that fun stuff
126:27 - all right so we'll put that here
126:30 - style styles dot row
126:32 - all right i'm just gonna see what this
126:34 - looks like um
126:36 - and
126:37 - this is going to be a array because we
126:40 - want to pass in an a width and the width
126:42 - is going to be constantly changing so
126:45 - i'm just going to set the 50 right now
126:46 - so we can see what it looks like
126:49 - press this all right so i can kind of
126:51 - see this thing right here you'll notice
126:53 - how it's getting pushed to the side
126:54 - because we have some padding
126:56 - so what i want to do i'm going to say
126:58 - with this view i'm going to have it flex
127:01 - so the row here is going to flex one
127:06 - and i'm going to move the padding to the
127:08 - bottom to the row
127:11 - all right and press this and now it's
127:14 - right here now that's super hard to read
127:16 - so why don't i pick a different color
127:18 - uh let's try this one and see if that
127:20 - shows up better
127:22 - if it doesn't we can just pick white too
127:27 - all right
127:29 - all right that looks way better cool
127:32 - and so what's going to happen is we
127:33 - basically just want to compute the
127:35 - percent of the width we should be
127:36 - showing and we're going to just take
127:38 - that as a property and compute that in
127:40 - our store
127:41 - so percent is a string
127:46 - percent and that's what we're just going
127:48 - to pass in here
127:51 - all right so we don't really have a
127:53 - percent yet so
127:55 - we're going to create that in our store
127:57 - so i'm going to say
127:58 - rootstore.workouttimer
128:01 - dot percent and then let's go create
128:03 - that percent
128:04 - so our timer over here this is going to
128:06 - be another computed property
128:11 - and i'm going to say percent and
128:12 - basically what the percent is going to
128:14 - be
128:15 - is i don't want this to be any bigger
128:18 - than a hundred percent
128:19 - so i'm going to say math dot
128:22 - the smallest number here the max or the
128:25 - max it can be is i want it to be no
128:26 - bigger than 100
128:28 - and what's going to happen is i'm going
128:31 - to
128:32 - put a percent sign here at the end
128:33 - because this is just the format of the
128:35 - width
128:36 - and then here i want to get the current
128:38 - diff
128:39 - so that's going to be seconds divided by
128:42 - whatever i want the completion to be
128:44 - so if i want the timer to run out at 3
128:47 - minutes i'd put 180 seconds if i wanted
128:50 - like five minutes i would put what five
128:52 - times sixty three hundred
128:55 - all right so
128:56 - if we take a look at that we should be
128:58 - able to see a little timer that will
129:00 - increment i don't see anything so i
129:02 - wonder if i messed something up
129:05 - i'm just go over to the percent and
129:07 - console.log it and see what the value is
129:09 - so
129:12 - console.log be percent and see what
129:15 - we're getting
129:17 - because basically what we want to
129:18 - display
129:19 - is uh
129:21 - a zero percent good and then it should
129:22 - be incrementally getting bigger
129:25 - okay so it's super small right now
129:28 - so that's the problem so i just need to
129:31 - times this times 100.
129:35 - so wrap that in parentheses and to say
129:37 - times 100
129:39 - give that a save
129:41 - click that
129:43 - and there we go
129:44 - so as we can see it's kind of ticking
129:47 - and we can see the percentage is
129:49 - increasing there we can see we have like
129:51 - a little progress bar going now so
129:53 - that's pretty neat
129:54 - and then so basically all right i want
129:56 - to do
129:57 - one exercise it's gonna reset the timer
130:00 - and then it's gonna go and let's say i'm
130:02 - done waiting i can either just click the
130:03 - x or i can do that and the other thing
130:07 - is
130:07 - when it gets down to zero and i click it
130:10 - and it goes here it should clear the
130:12 - timer as well so let's add that real
130:14 - quick that's very easy too
130:16 - that's going to be just uh so when it's
130:18 - zero and we click to make it nothing
130:21 - we're gonna say
130:22 - rootstore.workouttimer.stop
130:29 - so we could stop the timer by clicking
130:31 - it a couple times
130:34 - and going to zero and clicking it
130:38 - sweet
130:39 - so anyway this is pretty nifty uh i'm
130:42 - really enjoying mob x and i really like
130:45 - just putting these values
130:47 - um into mobx being able to create these
130:49 - computed values automatically that are
130:51 - automatically changing as everything is
130:53 - changing
130:54 - and then we can kind of uh we basically
130:57 - just created this measure method that
130:58 - just constantly tapping every second
131:00 - that is
131:02 - causing a re-render and changing the
131:04 - time on the screen and the other cool
131:06 - thing about us using start time is if
131:09 - for example we were to persist the state
131:11 - which we're going to do later
131:13 - and the user comes back they're going to
131:15 - see how much elapsed time has happened
131:17 - because we're storing the start time
131:23 - so we are revisiting the topic of
131:25 - navigation today because we have a
131:28 - little bit of a flaw in our current
131:30 - setup
131:31 - so right now we are storing the
131:32 - navigation state in mobx
131:35 - and what that means is we're not syncing
131:37 - it with the url right now
131:40 - so if i were to create a workout this is
131:42 - a different screen and you'll notice the
131:44 - url does not change and that is the flaw
131:46 - that we currently have
131:47 - and so what that means is if i were to
131:49 - refresh the page or just revisit this
131:52 - url we'd start back over here and
131:55 - there's no way to visit this screen
131:57 - directly
131:59 - which you would experience with a
132:00 - regular website oops
132:02 - so that is what we're going to try
132:04 - fixing today now you'll notice the
132:06 - reason why i picked this option in the
132:08 - first place is because i tried out react
132:10 - navigation
132:11 - and the web version of it was not very
132:14 - good and it would be very difficult to
132:16 - try to do get that to work
132:18 - and also get it to work with the native
132:20 - version
132:21 - but i forgot about this one package that
132:23 - i used to use
132:25 - for a react native called react router
132:27 - so react router is the standard for
132:30 - the web navigation if you're building a
132:32 - website and react you're probably using
132:34 - react router
132:35 - but they also have a native version and
132:37 - i use using this for a little bit but i
132:39 - found react navigation to be way
132:42 - stronger when using yak native but i
132:44 - think react router is a great choice for
132:46 - what we're currently doing because it is
132:49 - a very similar api between the web and
132:52 - the native so if we just look at what
132:54 - the web looks like we can go to the
132:55 - quick start
132:57 - you'll notice basically what they do is
132:59 - you create a router
133:01 - and then you put routes in it
133:03 - and the native version is the exact same
133:05 - so if we come look at this
133:07 - we go to the quick start
133:09 - we're just going to create a router
133:13 - now they call it native router so we
133:15 - have to deal with that
133:16 - but you just say routes the same way and
133:18 - you deal with api in almost the same
133:20 - manner and it's not widely different so
133:23 - this is going to work great for our
133:24 - react native web because we can easily
133:26 - switch between the react native and the
133:29 - web version so that's we're going to
133:30 - implement today
133:32 - so we're going to start by coming over
133:34 - to our code
133:35 - and i have the router.tsx open in our
133:38 - common package because that's what we're
133:39 - going to be playing around with so to
133:41 - start off i'm going to just install
133:44 - the types
133:45 - for both of these packages and then also
133:47 - the packages themselves and i'm
133:50 - installing that version 4.31 and 4.24
133:54 - and you'll notice i'm installing react
133:56 - router dom and react router
133:58 - native
134:00 - and then when this is done we're going
134:01 - to install the packages themselves
134:04 - react router dom
134:06 - and 4.3.1 at dom and the native is 4.3.0
134:12 - all right so the next thing that we're
134:13 - going to do
134:14 - is i'm going to just rename this current
134:16 - file that we have router to routes just
134:19 - so it's a little bit clearer
134:21 - so i'm going to rename this
134:24 - to routes and it's gonna ask me if i
134:27 - want to update this everywhere i'm gonna
134:28 - say yes so what that means is in my
134:31 - index file where we're importing the
134:33 - routes it just automatically renamed it
134:35 - for me
134:36 - all right i'm also gonna push f2
134:39 - and rename this to routes
134:41 - so save that and save that over here
134:43 - again just refactors it in vs code so
134:45 - it's now updated over here
134:48 - so now i'm going to create a new folder
134:49 - here
134:50 - and i'm going to call it router so that
134:52 - was the whole reason why i just renamed
134:54 - it because i want to create a new folder
134:55 - called reader here
134:56 - and then i'm going to create a folder
134:58 - called index.ts
135:00 - and or sorry a file and a file called
135:02 - index.web.ts
135:05 - so this is how we're going to get things
135:06 - to work so
135:08 - react or create react app out of the box
135:12 - reads dot web files first before it
135:15 - reads dot ts files so what that means is
135:19 - we can put all our web related code
135:21 - inside of these files
135:23 - and this we can call our native file
135:25 - code
135:26 - and so create react app is going to read
135:28 - this file whereas react native is going
135:30 - to read this file so we can switch them
135:32 - so what that means is
135:34 - here i can say export
135:36 - from react router dom
135:39 - and here i'm going to say browser router
135:42 - as router so this is me just exporting
135:46 - this import and renaming it at the same
135:48 - time we're also going to be using the
135:50 - route
135:52 - and the switch component so basically
135:55 - any component that we want to use from
135:57 - react router dom or react router native
135:59 - we want to export here and import them
136:01 - from here
136:03 - so you'll notice this is the dom package
136:05 - so this is the web version
136:07 - we're going to come over to our index.ts
136:09 - file over here
136:10 - and we're going to say browser router
136:13 - we're going to replace this to react
136:14 - router native and then replace that to
136:18 - the native
136:19 - router
136:21 - you'll notice i named it router here
136:23 - and router here so it's the exact same
136:25 - name i want all the exports to match up
136:27 - so you'll notice we're exporting three
136:29 - things router route and switch and
136:32 - they're matching
136:33 - the only difference is this is coming
136:35 - from the native package and this dot web
136:37 - file is coming from the dom package
136:40 - so now what we're going to do is in our
136:41 - routes folder over here or sorry routes
136:43 - file over here is we're just going to
136:45 - import from the router
136:48 - so i'm going to say
136:50 - get rid of all this code that we have
136:52 - here
136:54 - we don't need this observer thing
136:55 - anymore
136:58 - i'm going to say router and you'll
137:00 - notice i'm importing this from dot slash
137:02 - router now it automatically did
137:05 - index.web but we're just going to say
137:09 - router like that
137:10 - because we want it to just get the index
137:12 - file here
137:14 - and basically react
137:16 - create react app is going to pick the
137:18 - dot web version for us so we don't even
137:19 - have to worry about this
137:22 - all right so inside a router we're going
137:23 - to say route
137:25 - or sorry we're going to say switch first
137:28 - and we're gonna wrap it and switch again
137:30 - we wanna make sure we're importing from
137:32 - this package
137:34 - and then we're gonna have a route in
137:36 - there
137:39 - all right so we're gonna say exact path
137:42 - is going to be the slash this is the
137:45 - index or the first component that we
137:46 - want rendered
137:48 - we're going to say component and here
137:49 - we're going to pass in the
137:52 - workout history
137:55 - and then we can create another route
137:57 - which we can say
137:59 - current workout
138:01 - and this is going to be at the path
138:03 - slash current workout
138:06 - and then we're going to import route
138:09 - and that's coming from the router
138:10 - package as well
138:13 - and so now we can go into our
138:15 - uh component the workouts
138:18 - no not that we don't need the stores
138:20 - it's going to be our modules workout
138:22 - history so here we are connecting to the
138:25 - root store and we are saying
138:28 - changing the page here
138:30 - so instead of doing the
138:32 - router store we're going to remove that
138:34 - line of code
138:36 - we are going to be using the history and
138:38 - we can get the history from our props
138:40 - and uh we need to add the type
138:42 - definition to our props to let
138:44 - typescript know that we are a route
138:47 - so we're going to say route component
138:48 - props
138:50 - and we're fine to import that from react
138:52 - router
138:53 - um and so now
138:55 - if we go like this and i hit control
138:56 - space it's gonna know we have a history
138:58 - prop in there
139:00 - so then i come down here and i say
139:01 - history.push
139:03 - and then we're gonna go to the slash
139:05 - current workout screen
139:08 - so i'll give that a save so we can even
139:10 - delete our router store just to make
139:12 - sure we're not using it anywhere
139:14 - um and go to my root store just get rid
139:17 - of it
139:20 - there we go
139:22 - so again what we did here is uh because
139:25 - we have it as a route over here right
139:27 - we're passing this workout history
139:29 - component
139:30 - that means it's going to pass down a
139:32 - prop to it called history so this is a
139:35 - react router thing and history allows us
139:36 - to change pages so we change pages by
139:39 - pushing
139:40 - and again we just did add this to our
139:42 - props which are passing in here that way
139:44 - it just makes it uh so it's type
139:46 - definitions for it
139:48 - and then lastly just to recap the router
139:50 - thing that we did right here
139:52 - so
139:53 - when we do create react app or we read
139:55 - this in the browser so we can see it
139:57 - rendering right here it is using the
140:00 - router package to react this one this
140:03 - import
140:04 - react router dom and when it's using the
140:06 - one over here
140:08 - is when we run the app
140:10 - so i'm going to say yarn watch and now
140:12 - we can see this in action
140:14 - all right um we'll refresh
140:18 - um
140:19 - let's see if it looks like we got a
140:20 - little bit of an error i'm just going to
140:22 - refresh
140:26 - let's see
140:27 - looks like
140:29 - uncaught exception
140:30 - looks like it had trouble loading it
140:33 - i think what i need to do is in my
140:35 - routes i think because i didn't say
140:37 - slash index maybe
140:39 - i'm that could be causing it some
140:40 - trouble
140:42 - yeah it looks like that was it uh so it
140:44 - looks like we need to explicitly say
140:46 - slash index on there just to be clear
140:50 - um and now we can see it's that and when
140:53 - i click on this you'll notice we are
140:55 - going to navigate the url now you'll
140:56 - notice that changed and we're on this
140:58 - page and we can see this page here
141:01 - now i notice we get this
141:02 - little thing in our invalid prop
141:05 - component
141:06 - expected the type function but got an
141:08 - object
141:10 - i'm assuming it's talking about our
141:12 - workout history here we're passing we're
141:14 - wrapping it with an observer
141:16 - um and then we're passing that to the
141:18 - route
141:19 - so it doesn't look like it caused any
141:22 - like problem i guess just a warning
141:25 - not sure what's going on there i don't
141:27 - know if it's just a it looks like it's a
141:29 - prop type warning i think we can safely
141:31 - ignore this i don't know if there's a
141:33 - way to suppress this warning or anything
141:37 - but doesn't look like it's causing a
141:38 - problem anyway this should work all the
141:40 - same now the only difference is we now
141:43 - if i were to refresh the page we're
141:44 - going to stay on this page
141:46 - now we didn't really code this
141:47 - expecting we could go to this page so
141:50 - you don't see any workout data but we
141:52 - can fix that in the future so but now we
141:54 - can navigate to different pages like
141:56 - this and it works like a website you
141:58 - would expect
142:00 - so we can use react router to easily
142:03 - switch
142:04 - because the apis are so similar between
142:06 - the native and the other ones so i think
142:08 - this is a good choice when using
142:10 - react native web is to use this because
142:12 - you can easily switch between the two
142:15 - also one thing i wanted to mention real
142:16 - quick before i end the video
142:18 - is create react app worked
142:21 - out of the box but if you go to the docs
142:23 - for react native web and i'll link this
142:25 - below
142:27 - they show you a webpack configuration so
142:29 - you can get this working so what you
142:31 - basically add to your webpack say that
142:33 - you want to accept the extension
142:36 - extension.web.js or our case.web.ts
142:39 - for typescript
142:41 - and then it'll read it
142:43 - these type of files
142:48 - so we're going to be going over how you
142:50 - can persist your mobx stores
142:53 - and the reason why we want to do that is
142:55 - so we can keep track of the workouts a
142:57 - user has done so for example when i
143:00 - create a workout right now and i refresh
143:02 - the page it just disappears
143:04 - so i want to keep that data and keep the
143:06 - data as we store it in the history so if
143:09 - you do several workouts we have all that
143:11 - data so when you come back to the
143:12 - website we have that and so the way
143:15 - we're going to be persisting this is on
143:17 - the website local storage and on the
143:20 - app
143:20 - async storage
143:22 - now there's a nice library that is going
143:24 - to help us out called mobx persist that
143:26 - we're going to be using and the cool
143:28 - thing about this library is we can
143:29 - actually just pass in async storage to
143:31 - it
143:32 - and it works out of the box with react
143:34 - native and the cool thing about react
143:36 - native web is it actually handles async
143:39 - storage they re-implemented and so
143:41 - underneath the hood they're going to use
143:43 - local storage and persist it like that
143:45 - on the web so we don't actually have to
143:46 - do anything to get this to work with
143:48 - both the website and the app we just use
143:51 - async storage here
143:52 - so we're going to start off by
143:53 - installing this package
143:55 - so i'm going to say you are an ad mobx
143:58 - persist and i'm installing it at this
144:00 - version
144:01 - and the cool thing about this package as
144:03 - well is it's written in typescript so
144:05 - we're going to get type safe type safety
144:07 - out of it without having to install
144:09 - extra types
144:10 - and i'm just going to run yarn watch on
144:12 - this
144:14 - alright so how it works is we are going
144:16 - to
144:18 - basically decorate the fields that we
144:20 - want to persist so i currently have the
144:22 - workout timer store up so here i'm going
144:25 - to say
144:26 - persist and i'm gonna just import that
144:29 - doesn't look like it's auto completing
144:31 - so we'll just write it ourselves
144:34 - so mob x persist
144:38 - and so i'm gonna just decorate the
144:40 - persist on all three of these fields
144:45 - and then after we persist this what we
144:47 - need to do if we come look at the
144:49 - example here
144:51 - is we then have to create a hydrate
144:53 - function and then we just call hydrate
144:56 - on our store
144:57 - so i'm going to copy hydrate and you'll
144:59 - notice what we do is we create an
145:01 - instance of our store and then we
145:03 - hydrate it
145:05 - so i'm going to copy this hydrate and
145:07 - where we're creating an instance of the
145:09 - workout timer store is in the root so
145:12 - we're gonna head over here
145:14 - so i'm paste in hydrate here and i'm
145:17 - just gonna get rid of the comments and
145:18 - tells us if we're using async storage we
145:20 - need to set this to true so we'll set
145:22 - that to true
145:23 - and we're going to pass an async storage
145:25 - in here
145:26 - and we're going to import create this is
145:28 - coming from mobx persist
145:31 - so we've created this hydrate function
145:33 - and then i'm just going to in the
145:35 - constructor
145:36 - of the root store
145:38 - call
145:39 - hydrate
145:40 - and then we're gonna pass in the key for
145:42 - how it's gonna store it so i'm gonna
145:44 - call it workout timer
145:46 - and then we're gonna pass in the store
145:48 - itself so this dot workout
145:50 - timer and so we want to do the same
145:53 - thing for our workout store as well
145:55 - so we can come over here and i want to
145:57 - persist all these fields
146:00 - so
146:01 - we're going to say at persist
146:04 - and i'm going to copy that and i'm gonna
146:06 - do it for each one
146:11 - and
146:13 - that and that
146:14 - cool
146:16 - so if i go back to my root store now
146:19 - i can come back over here
146:21 - and we're going to give it another key
146:24 - this i'm going to call out call just
146:25 - work out and this is going to be this
146:27 - dot workout store
146:29 - so basically what is happening here is
146:32 - in our constructor when we create a new
146:34 - root store
146:35 - it's going to
146:36 - hydrate both the workout time restore
146:39 - and the workout store and what hydrate
146:41 - is doing is it's checking whether this
146:43 - is stored in local storage or async
146:46 - storage in our case
146:48 - and if it is it's going to hydrate it or
146:50 - put the field values into these two
146:52 - stores and it's also going to listen and
146:54 - it's going to save these values as they
146:56 - change over time
146:58 - and if we want to we can pass in i
147:00 - believe a debounce value to
147:03 - this and you can see that right there
147:05 - and the bounce specifies how many
147:07 - milliseconds we want
147:09 - it to wait so for example if we want it
147:11 - to save
147:13 - on every update that's the default if we
147:15 - want to save every 10 milliseconds or so
147:18 - we can debounce it that
147:21 - and so we could add that if we want to
147:23 - i'm just going to leave it off for
147:24 - simplicity's sake
147:27 - next thing is if we see if this works
147:29 - you can come back over here i think we
147:31 - should get an error out of the box
147:33 - so if i come to my console over here
147:36 - and
147:37 - you'll notice we have an uncaught
147:38 - exception
147:40 - it says this value is not a primitive
147:42 - so what that means is any of our fields
147:45 - that are not just a simple
147:47 - like number value or a string or
147:50 - something we need to actually specify
147:52 - what the data type is
147:54 - so what we can do is we can pass a
147:56 - parameter in here and we need to specify
147:57 - what kind of object this is
147:59 - or if it's a list map or an object this
148:02 - is a list
148:04 - the history is also a list
148:08 - and then the other one is in our workout
148:10 - timer store this djs is an object
148:15 - so we're going to say object there
148:16 - give that a save let this refresh and
148:19 - you'll notice we don't get any more
148:21 - error there
148:22 - so if now i create a workout we can see
148:25 - that's here and now if i were to refresh
148:27 - it's going to save the values in local
148:29 - storage and read them so now you can see
148:32 - that and also as i make changes so if i
148:34 - click on that
148:35 - click on this here a couple times i
148:37 - refresh you'll notice our data is saved
148:40 - so as we're working out if we were to
148:41 - come back to the website we'd have all
148:43 - that data saved
148:44 - now one thing you may notice is the
148:47 - timer right here hasn't actually started
148:49 - again
148:50 - so what we can do is we can head back
148:52 - over to our
148:54 - root store and we can trigger the timer
148:56 - to start so hydrate actually returns a
148:59 - promise so we can wait for the promise
149:01 - to finish
149:03 - at least
149:04 - i mean it's not showing a promise in the
149:06 - type definition here but in their
149:08 - example i believe they were doing dot
149:10 - then on it so uh we're gonna do dot then
149:12 - on it too
149:14 - so on the workout timer i can say after
149:16 - it's done hydrating i can say this dot
149:19 - workout timer store
149:22 - and i'm going to just do an if statement
149:24 - so if it's running
149:26 - we're just going to kick it off
149:28 - by saying measure
149:31 - give that a save
149:33 - so now when it's first started if
149:35 - it should be running then we just kick
149:37 - it off and the cool thing about how we
149:39 - started this is we're saving the date it
149:41 - started so if i were to refresh the page
149:43 - it's not like the timer is going to
149:44 - reset because we're saving the date it
149:47 - was
149:48 - off by or start it at
149:50 - and again we can click to reset it if we
149:52 - want to and start a new set
149:55 - um like that
149:56 - so that's pretty nifty and the last
149:58 - thing i want to do is just show you guys
150:00 - where this is actually being stored so
150:02 - if you go to the application tab
150:04 - and you click on local storage here and
150:06 - you click on log host 3000 we can see
150:09 - here is our state so you'll notice the
150:11 - key
150:12 - that we passed in here that is actually
150:15 - the key for local storage and
150:19 - you'll notice here the values all being
150:21 - stored and we can see all the data
150:23 - being stored here
150:25 - and it's also one of those things if you
150:26 - wanted to clear out this i could clear
150:28 - it out
150:29 - refresh the page and you'll notice it
150:31 - wrote it right away so it wrote it
150:33 - pretty quick if i refresh
150:36 - it'll get rid of that so that's how the
150:38 - data is being persisted and again we're
150:40 - using async storage so this will work on
150:42 - both react native and react native web
150:44 - because react native web implements this
150:50 - so we're going to be building out this
150:52 - component right here today so this is
150:54 - like a little card that tracks your
150:56 - history of workouts so every time you
150:58 - complete a workout it's going to show up
151:00 - on the home page as a little card like
151:03 - this
151:04 - now before we actually create the card
151:05 - we're going to just add a quick thing to
151:07 - the current workout page we're going to
151:10 - create a little button right here that
151:11 - we're can click on and when we click on
151:14 - it it's basically going to save the
151:15 - current workout to the history
151:18 - and then we're basically just going to
151:19 - render that history as cards so that's
151:22 - the game plan for today
151:24 - so let's go ahead and start with that
151:25 - button that i mentioned
151:26 - so we're gonna pop on over to the
151:28 - current workout screen and we're just
151:31 - gonna add a button and now i'm just
151:32 - gonna add a button at the very bottom
151:34 - here
151:35 - so uh
151:36 - it's gonna it can go between the workout
151:38 - timer
151:39 - and everything else
151:41 - and it's going to be a react native
151:43 - button
151:45 - and we can set the title um i'm just
151:48 - going to call say save here and i'm
151:50 - going to just say all caps for it
151:52 - and looks like i just need to add on
151:53 - press and the error will go away
151:57 - cool
151:58 - so we'll talk about what we're actually
152:00 - going to put in the on press in a second
152:02 - let's just see if the button shows up
152:04 - awesome it does
152:06 - so next in this on press what we're
152:08 - going to do is we first want to
152:11 - basically put the current work out if we
152:13 - look at our workout store
152:15 - we have an array of current exercises
152:18 - and so basically we want to store that
152:20 - in the workout history over here
152:23 - and given a particular day
152:25 - if we remember what this workout history
152:27 - is
152:28 - we can look up here what we did this is
152:29 - going to be a key which is going to be
152:32 - the
152:33 - day and then the exercises that they did
152:36 - that day
152:38 - and this value someone recommended
152:39 - switching it so we have format with the
152:42 - year up front so i'm going to go ahead
152:43 - and do that as well
152:46 - so
152:47 - the workout
152:48 - history is basically equivalent to a
152:50 - current exercise
152:53 - which has these properties so we can go
152:55 - ahead and just say an array of current
152:57 - exercises is going to be the workout
152:59 - history
153:00 - so i'm going to just move this down here
153:06 - and so here
153:11 - i'm going to say current workout or
153:13 - current exercise an array
153:15 - so basically on a given day
153:18 - someone did an array of current
153:20 - exercises is the idea
153:22 - so we don't really need this anymore
153:24 - this is comments not really
153:25 - representative of what we're doing
153:28 - so basically we're going to do is we're
153:29 - going to take this
153:30 - array and save it in the history at a
153:33 - current day
153:34 - so that means we're gonna say
153:37 - rootstore
153:39 - dot workout
153:41 - and then here we're gonna say history
153:44 - and then here we're going to
153:46 - actually we're not going to do it like
153:47 - that we're going to say dot
153:48 - or i guess in our case a string and so
153:50 - this is where we're going to actually
153:52 - say like a date like that and then what
153:54 - we're going to set equal to is the array
153:56 - of exercises
153:58 - so
154:01 - dot rootstore.workoutstore.his
154:02 - or sorry dot current
154:06 - uh current exercises there we are
154:09 - and then basically this array here we're
154:11 - just going to
154:13 - clear
154:14 - so then we're gonna set that to an empty
154:15 - array
154:16 - and then after that we're going to go to
154:18 - a different page and again i'm hard
154:20 - coding the date here but we're going to
154:21 - deal with that in a second
154:23 - um and
154:25 - this we're just going to go back to the
154:26 - home page after you save the workout so
154:28 - i'm going to say history.push
154:30 - push and we're gonna go to dot slash or
154:33 - just the slash which is the home page
154:35 - in history we're gonna get from the
154:37 - props here
154:40 - so uh
154:42 - let's add the prop type here where uh
154:45 - the typescript type so we're going to
154:46 - say
154:47 - route component props
154:49 - and then here we have access to that now
154:55 - so let's see this in action
154:57 - so if i save this
155:01 - it looks like either something crashed
155:03 - or did not push to the state
155:05 - cannot set the property that of
155:07 - undefined i hope that would make sense
155:10 - so if we go back to our route store or
155:12 - workout store we just actually never
155:14 - define this
155:15 - so i'm going to set the default value to
155:17 - an empty object like that
155:20 - all right
155:21 - um
155:22 - oh yes
155:24 - so this is no longer a list this is an
155:26 - object
155:29 - all right and cool no more complaints
155:32 - hit save
155:33 - takes us back to this page awesome
155:35 - so now if i were to go to
155:38 - that current workout screen directly
155:40 - should be blank because we cleared out
155:42 - that array
155:43 - awesome
155:44 - uh
155:45 - um
155:46 - so i just hit back and then this is
155:48 - blank
155:49 - that was weird okay it's loading still
155:52 - now
155:53 - anyway so the next thing is to actually
155:55 - format what the current day is so
155:58 - we're going to be using djs since we're
155:59 - already using that in this project and
156:01 - they have a dot format function that
156:03 - we're going to use
156:04 - and then we can format into the specific
156:05 - date we want so what we're going to do
156:08 - is we're going to say your year year
156:10 - then the month
156:11 - and then the day and the day is going to
156:13 - be padded with a zero too
156:16 - so here go back to our store or current
156:19 - workout screen
156:21 - and at the bottom here instead of hard
156:23 - coding the date
156:25 - we're gonna get the current day here
156:27 - and then we're gonna say dot format
156:30 - and uh looks like that auto imported for
156:32 - me
156:33 - for some reason it says require here
156:35 - though so i'm just going to change that
156:37 - to from
156:38 - there we are
156:41 - all right so we're going to say year
156:43 - year year
156:44 - and here we're going to say month month
156:46 - then day day
156:47 - so give that a save and then if i open
156:51 - up my application i can see what the
156:53 - state of everything is so here's the
156:55 - exercises that i did on this date
156:58 - and i can create a workout
157:00 - click on some days or some exercises and
157:03 - hit save
157:05 - so this is kind of odd it was kind of
157:07 - like floating there
157:09 - but when i move this it's anchored at
157:11 - the bottom now
157:14 - interesting so notice how this
157:18 - when we scroll deeper in the page this
157:20 - is always there
157:21 - i think uh i might need to like change
157:24 - this to some kind of like anchoring it
157:26 - to the bottom always
157:28 - i'm not sure exactly what css or style
157:30 - we're gonna have to apply to it to get
157:32 - that to fix so we'll fix that in a
157:33 - future video
157:35 - anyway let's give this a save and now if
157:37 - we go to our application state
157:39 - we should see a new day which is today's
157:42 - current date
157:43 - for me and we can see the exercises so
157:47 - awesome so next up is now that we're
157:49 - actually saving stuff in the history we
157:52 - want to display them here in card form
157:55 - so first off you'll notice that the card
157:57 - over there is kind of resembling the
157:58 - card here so i figured we would abstract
158:01 - kind of the logic that we used well not
158:03 - really logic but the style that we used
158:06 - for the card here into its own component
158:08 - so we can reuse that
158:10 - so i'm going to create a new file here
158:12 - which i'm just going to call card
158:14 - and this is going to say a react hook
158:17 - though we're not really going to use any
158:18 - hooks in this particular component
158:21 - and here we don't really need any
158:23 - particular props at least right now so
158:25 - i'm just going to leave them
158:26 - blank and we're just going to render a
158:29 - view
158:30 - and we're going to render the children
158:33 - so the children is a default prop that
158:36 - when we say react.fc
158:38 - that it automatically adds for us
158:41 - uh this and the reason why we are
158:44 - putting the children here
158:45 - is whenever we do card like that and
158:48 - then say we have text
158:50 - like that
158:51 - this is the children so we're just
158:52 - making sure to actually render the
158:54 - children
158:56 - so this view we're going to steal the
158:58 - styles that we used over here
159:05 - so i'm going to use my template for that
159:07 - rnss
159:08 - paste in the card
159:10 - and then here i'm going to say style
159:13 - is equal to
159:15 - styles.card
159:20 - and now let's see if there's anything
159:22 - here that's very specific to what we
159:24 - were doing i would say like the margin
159:25 - bottom here is kind of specific to it
159:28 - and also uh i guess the padding was
159:32 - sufficient but the margin bottom is kind
159:34 - of specific to that particular component
159:36 - so i'm going to remove the margin bottom
159:38 - here
159:40 - and i'm going to come back to the
159:41 - workout card
159:43 - and we're going to remove it here
159:46 - and instead we might just say like
159:48 - container or i guess like card container
159:52 - and that's going to have the margin
159:54 - bottom on it
159:56 - so now here i can render this card
159:59 - and you'll notice without the margin i
160:01 - believe the cards will stick together
160:04 - i think yep they'll stick together so we
160:06 - can just wrap them with a card container
160:12 - and that'll add the margin
160:15 - so a view and then we're gonna say
160:16 - styles.card container
160:21 - nice all right so now we're gonna come
160:23 - back over here and we're gonna use that
160:24 - card component to display over here
160:27 - so uh we're gonna say
160:30 - history car dot tsx and this is going to
160:33 - use that card that we just created
160:37 - so we're going to say card here and then
160:39 - what do we want inside of our card right
160:41 - so if we look at
160:42 - the thing over here we're basically
160:44 - taking
160:45 - the day
160:46 - that this workout happened and then the
160:49 - current exercises that occurred there so
160:52 - what i'm going to do here is i'm going
160:54 - to say
160:56 - the day which i'm going to just take as
160:58 - a string so if they want to pass
161:00 - something else like for example on going
161:02 - in they can
161:04 - and then here we're going to take the
161:05 - current exercises
161:08 - and we're going to say current exercise
161:11 - and looks like we didn't export it so
161:12 - i'm just going to go to our workout
161:13 - store and export this type
161:17 - and current
161:19 - exercise and that's going to be an array
161:22 - so we're going to have our day and our
161:23 - current exercises
161:25 - oh you know what did i misspell yep let
161:28 - me spell it here
161:29 - uh x
161:30 - exercises
161:35 - uh yep that looks good
161:37 - actually
161:38 - x er size is
161:41 - with an s there we go i think that's
161:43 - right spelling's pretty hard though
161:46 - all right so
161:47 - inside of our card here we're going to
161:50 - render those
161:54 - oops there we are
161:57 - so we're gonna have text at the very top
161:59 - and again we're just going to render the
162:01 - day here
162:02 - uh so we're gonna do any kind of
162:03 - formatting on that on the particular and
162:06 - we could even just say like
162:08 - header is more a generic of what we're
162:10 - really rendering here they can pass
162:12 - whatever they want in
162:14 - and then at the bottom here well let's
162:17 - actually first just import all this
162:18 - stuff
162:20 - import that import our card
162:24 - and then we're basically gonna loop
162:26 - through the current exercises that the
162:27 - user did that day
162:29 - uh and basically give a prefix of that
162:32 - so squat is sq
162:35 - bench press is bp and so i guess there's
162:37 - like a mapping of shorthand here
162:39 - so like the exercise
162:42 - shorthand and maybe we should put this
162:45 - in our store is this type
162:48 - i'm not sure the best place to create
162:49 - this map but we can say
162:52 - exercise short name
162:55 - so here we can say squat
162:57 - is sq
162:59 - and if we take a look at our workout
163:01 - store i forget what i was naming them
163:04 - i think maybe in the workout history all
163:06 - right so i did a capital s
163:09 - is that so we're going to say squat here
163:13 - and this should really be a capital
163:15 - right there
163:16 - all right and let's see
163:19 - i guess i can just write them out
163:20 - because i remember them
163:21 - so we have deadlift that's going to be
163:24 - dl
163:26 - we're gonna have bench press
163:30 - bp
163:31 - overhead press
163:33 - and
163:34 - let's just make sure i name this what i
163:35 - think i named it
163:37 - well you know we haven't even no i did
163:39 - capital p on that as well
163:41 - so let's make sure i match that and i
163:43 - didn't actually and maybe i should store
163:44 - this
163:45 - overhead press
163:48 - maybe i should store these values in
163:50 - some kind of enum or something
163:52 - uh that way i'm using the exact same
163:54 - name everywhere or put them in a
163:56 - constant variables i mean that would be
163:57 - better i just
163:59 - should be ohp
164:02 - uh and then the last one is row
164:06 - row
164:12 - purpose being that i just did this is
164:13 - just so we can have the little short
164:15 - acronyms for what we're going to display
164:17 - here
164:18 - so let's map through the current
164:20 - exercises
164:24 - and then for each exercise
164:30 - we're going to render some text
164:33 - and uh the key for this since we're
164:35 - mapping
164:36 - i don't think there's really anything
164:37 - unique
164:38 - about a particular exercise i guess
164:41 - maybe the name we know is gonna be
164:42 - unique
164:43 - uh because what i was thinking is maybe
164:45 - you could have the same name multiple
164:47 - times but uh why don't we use that for
164:48 - the key i think it's pretty safe
164:50 - so here we save exercise
164:54 - so inside of here the string that they
164:56 - were using was
164:58 - first the name so we're going to use our
165:00 - exercise short name
165:02 - map and then we're going to pass in the
165:04 - exercise itself
165:07 - and i'm guessing it's going to get mad
165:09 - at us because it's not one of these keys
165:12 - so i'm just going to say
165:14 - as any
165:16 - or you know what i think it actually
165:17 - wants us to say kiev
165:21 - and type of
165:22 - exercise short name
165:24 - there we go
165:25 - so basically the reason why i had to do
165:28 - this particular
165:29 - notation so this is a typescript thing
165:32 - so basically we created a map right here
165:34 - which it maps to
165:36 - squat maps here deadlift maps here bench
165:38 - maps here right and so if i hover over
165:41 - the type you'll notice it says these are
165:43 - the only keys available
165:45 - so i have to say i can't just pass a
165:47 - string as the key i have to pass a key
165:50 - of one of these things so the way i can
165:52 - do that is i can say type of this
165:54 - and then the key
165:56 - the key of means to grab one of these
166:00 - now the other thing i could do is
166:01 - instead i could say this is
166:03 - an object which the key is a string and
166:06 - it maps to a string
166:08 - and then i wouldn't have to do that so
166:10 - either one would work but notice i'm
166:12 - going to lose the auto completion so if
166:14 - i were to say like
166:16 - exercise short name dot
166:19 - i can't do dot squat it's not going to
166:21 - know that that exists because i kind of
166:23 - remove that i'm going to go with this
166:25 - approach because it types it the best
166:30 - or it's the strictest
166:32 - so okay so i put a space
166:34 - and then here is basically
166:38 - how much whether they how many sets they
166:40 - did and how many reps they did
166:43 - so here we're going to say
166:45 - there's an x in the middle and we're
166:46 - going to say c dot sets
166:49 - by a number of reps
166:53 - and
166:54 - this should be
166:55 - numb sets
166:57 - and i don't think i did numb wraps i
166:58 - just did reps
167:00 - and lastly the weight that they did at
167:04 - all right um
167:06 - i'll just see what this looks like now
167:08 - and to get a gist of what's going on and
167:10 - then we might need to style some of
167:12 - these things
167:14 - and i think everything should be
167:16 - a single line so i think this looks okay
167:19 - so uh we'll go to our index
167:23 - i guess i guess our index is really work
167:25 - out history page
167:26 - and i'm not going to worry about what we
167:28 - have here i'm going to just put the
167:30 - button underneath we're going to deal
167:31 - with the button in a different video
167:34 - so here i'm going to say
167:34 - rootstore.history.map
167:41 - so for each workout
167:44 - oh you know what we can't map over the
167:45 - history because the history is a
167:48 - object so i'm going to say
167:50 - object.entries
167:55 - so what object.entries does is it turns
167:57 - an object into an array and this array
168:00 - has two values
168:02 - or not two values but the array what it
168:05 - is is uh each entry or each uh or
168:09 - i guess item in the array is an array of
168:12 - itself and we can destructure it and the
168:14 - first is going to be the key and the
168:15 - second is going to be the value
168:17 - so value makes sense the key in this
168:19 - case is going to be the date
168:22 - maybe we'll just say dt there
168:25 - so here i'm going to say return
168:27 - and then here i can say with the workout
168:30 - history as we're looping through we're
168:32 - going to just render a history card for
168:34 - each one
168:38 - the key is going to be the day so we can
168:41 - pass in dt there
168:43 - and then here we can pass in
168:46 - uh the
168:47 - i guess what else we need to pass in we
168:50 - need to pass we passed the props
168:53 - of uh
168:54 - oh we just didn't import it maybe
168:58 - no we have the props passed in it wasn't
169:00 - giving me auto completion so i always
169:02 - just want to double check and make sure
169:03 - i didn't mess something up that's
169:04 - usually like a cue that i did mess
169:06 - something up
169:07 - all right so
169:09 - header
169:10 - now the header is kind of interesting
169:11 - because basically we need to take this
169:13 - date and reformat into something
169:15 - prettier but i'm just going to display
169:17 - the date right now uh because the date
169:19 - here is just going to be a string and
169:20 - that's fine for now and then we can make
169:22 - it prettier in a second
169:24 - and then the current exercises is going
169:26 - to be the value
169:29 - oops
169:30 - go this way
169:33 - um all right so here's our cards so
169:35 - we'll notice the card they're taking the
169:37 - entire screen with
169:39 - so i want to first
169:42 - i guess split them so there are two
169:43 - columns
169:45 - so i'm thinking a for each loop in this
169:47 - case maybe easier to create those rows
169:50 - instead of a mapping
169:51 - so we're going to give that a try so
169:54 - what i'm going to do is i'm going to
169:55 - create an array here called const
169:58 - rows
170:00 - and that's going to be an array and
170:01 - really what this is an array of is jsx
170:04 - elements
170:07 - and
170:08 - i guess it's an array of arrays
170:11 - so we'll do it like that
170:13 - and then we're going to say
170:15 - copy this
170:20 - dot 4 each
170:23 - um and then same thing here this is
170:24 - still
170:27 - we still do in this manner where the
170:28 - first value is the date second value is
170:31 - the value
170:32 - i'm going to say rows.push
170:38 - and i think what we're going to do is
170:41 - basically on even elements
170:45 - so we need the index
170:47 - we're going to push on to the array or
170:49 - create a new ray and on odd elements
170:51 - we're going to push on
170:53 - there may be a simpler way to do this
170:54 - but we're going to say
170:56 - if the current index mod 2 is equal to 0
171:00 - we know it's even
171:01 - and we're basically just going to say
171:03 - row stop push
171:05 - and then here we're going to push on our
171:08 - item
171:09 - which in this case is a history card
171:13 - all right
171:16 - and otherwise
171:18 - if it's an odd element
171:21 - all we're going to do is get the last
171:23 - item in the rows
171:25 - and append to it
171:27 - so we're going to say else
171:30 - rows
171:33 - rows dot length minus one
171:35 - dot push
171:37 - and we're gonna push on to that and
171:39 - we're still gonna create a history so
171:41 - notice we're gonna do this twice so i'm
171:43 - gonna just say
171:45 - instead of doing it twice i can say
171:47 - const
171:49 - history card
171:55 - and do that
171:57 - so basically what we're doing is at the
171:59 - end
172:00 - we're going to have an array that looks
172:02 - something like this
172:05 - so
172:07 - we're going to have a history card
172:09 - and another history card and we're just
172:11 - going to have pairs of two like that
172:13 - because basically whenever we hit an
172:15 - even we're going to push on a new array
172:18 - and whenever it's odd we're going to
172:19 - fill the array like that
172:21 - all right let's go ahead and now render
172:24 - our rows
172:25 - so come down here
172:27 - i'm going to say rows.map and for each
172:30 - row
172:31 - we basically are going to render a view
172:35 - and then just put the other stuff inside
172:37 - of it like that
172:40 - and the key here is going to be the
172:41 - index
172:46 - so now we definitely need to create a
172:47 - style for this
172:49 - so we're going to say rnss
172:53 - row
172:55 - and i guess the first row is going to be
172:57 - a flex direction or first style i mean
173:00 - it's a flex direction row
173:03 - alright so style styles dot row
173:07 - give that a save
173:09 - see what that looks like
173:11 - and now we're getting much more of a row
173:13 - shaped at least we only have two so
173:15 - let's save a couple more
173:17 - you know what we're gonna be saving this
173:19 - and it's just gonna be saving over the
173:21 - item
173:22 - yeah see how we're just saving more
173:23 - items onto this i guess
173:27 - do this again
173:31 - interesting i guess maybe i just had
173:32 - multiple items on it that's why i did
173:34 - that
173:37 - um i think the best way to do this
173:40 - because i basically just want to fill
173:41 - this with some more items
173:44 - so i basically kind of just want like a
173:45 - random date
173:47 - is the idea so let's see
173:50 - if i go to my
173:52 - workouts history is that where we're
173:54 - creating it no we're current workout
173:58 - so basically i just need a
174:01 - a random date i don't even know the best
174:03 - way to generate that so i just looked up
174:05 - how we actually create random dates and
174:07 - i found this nice stack overflow and i'm
174:10 - basically just going to copy and paste
174:11 - this and just see if this works for the
174:14 - purposes of just generating some fake
174:15 - data for us
174:18 - so i'm just going to paste that right
174:19 - inside of the djs function
174:22 - and uh let's start creating some fake
174:24 - dates awesome so it looks like it does
174:27 - in fact work
174:28 - and this is just some fake data for us
174:30 - so we can see some days being rendered
174:36 - there's two big things that we're going
174:37 - to be doing in this video the first big
174:39 - thing is fixing this row or this grid
174:41 - right here so it's not all mashed up
174:43 - together and then secondly we're going
174:45 - to make these clickable and when we
174:47 - click on them we're going to be taken to
174:49 - a new page where we can actually see the
174:52 - workout data for that day and so to do
174:54 - that we're going to be creating a new
174:56 - route which takes some route params
174:58 - using react router
175:00 - but before we do either of those things
175:02 - there's a small fix we need and that is
175:04 - with the create workout screen
175:06 - so you'll notice it is a long list of
175:08 - stuff and if i click here to start the
175:10 - timer and start scrolling
175:12 - this thing just randomly starts floating
175:14 - in the middle here so we're gonna fix
175:15 - that real quick
175:17 - so if i come over to my current workout
175:20 - what we're going to do is we're just
175:21 - going to wrap
175:23 - our
175:24 - button or everything in a scroll view
175:26 - besides the timer
175:29 - so i'm going to say scroll view
175:34 - and wrap it all the way here and so this
175:36 - is a react native element that just
175:38 - makes things scrollable
175:40 - and we'll immediately notice we have a
175:41 - scroll bar here now and as we scroll
175:44 - uh this is visible still but you'll
175:46 - notice it's blocking the button at the
175:48 - bottom if we click on that
175:50 - so we may want to add like just a little
175:51 - space at the bottom
175:53 - so it fits
175:55 - so i guess uh
175:56 - if we go to content
175:59 - uh inset
176:00 - is that uh
176:02 - uh um that might be the right thing but
176:04 - i was just planning on doing content
176:06 - container style
176:08 - and then setting it like
176:09 - a margin bottom
176:12 - and like i don't remember how how big we
176:14 - made it like 50 or something
176:16 - um so that way it's pushed up a little
176:18 - bit and you can still see that there so
176:20 - sweet
176:21 - third thing is you'll notice like
176:22 - there's a little bit of spacing right
176:24 - here because the scroll bar is
176:27 - we have some padding on the view and not
176:29 - in the scroll bar
176:31 - so what i can do
176:32 - is say scroll view
176:35 - i guess
176:36 - scroll container is a better name for it
176:39 - and we're going to just move the padding
176:40 - to the scroll container i'm also going
176:42 - to take the margin bottom and put that
176:44 - in here as well
176:47 - and pass that to the content style
176:53 - and that should have an r there
176:57 - and you'll notice i'm using the content
176:59 - container style on the scroll view as
177:01 - opposed to the style
177:03 - this is something to actually access the
177:05 - content or the view that is inside of
177:08 - the scroll view so that is on purpose
177:11 - and so we only have the scroll bar there
177:13 - cool so all right let's jump into the
177:15 - main thing we're going to do today so
177:16 - the first thing was
177:18 - at this home page over here fixing up
177:20 - the
177:21 - grid that we made so someone mentioned
177:24 - possibly doing like css grid here and i
177:27 - think this is like an excellent use case
177:29 - for css grid but unfortunately react
177:31 - native does not have css grid all they
177:34 - have is flexbox so that's our only thing
177:37 - now there are some grid libraries but
177:38 - basically they just wrap using flexbox
177:41 - so we're gonna have to deal with this
177:42 - ourselves
177:44 - all right so
177:45 - with that said the first thing that i
177:46 - want to do is just wrap
177:48 - our
177:49 - in workout history wrap our cards
177:52 - in a view
177:56 - and what i'm going to say here is i need
177:58 - to move the key since this is the
178:00 - outermost
178:02 - view
178:02 - and we're going to create a new style
178:04 - for it so styles dot
178:06 - i guess we'll call this
178:09 - card container
178:15 - and so what's going to be inside this
178:16 - card container is i'm gonna say first
178:19 - off a flex of one so what that's gonna
178:22 - do is it's gonna have it expand across
178:25 - the whole half so flex one on this one
178:28 - flex one on this one it's gonna split 50
178:30 - 50.
178:31 - next thing i'm just going to add some
178:32 - padding
178:34 - say paddington
178:36 - that way they're a little spaced out and
178:37 - we can actually start seeing some cards
178:39 - forming so nice so this looks a little
178:41 - bit better
178:42 - and then maybe we want to do something
178:44 - besides two because these are not that
178:46 - wide of cards
178:47 - so we can go to our i percent two and we
178:50 - can increment this how many columns that
178:53 - we want so in this case let's do three
178:55 - columns
178:56 - and we have three of these
178:58 - now notice that because we're using
179:00 - flexbox these are flexing all the
179:02 - remaining space so here this is doing a
179:05 - 1550 split here
179:07 - uh so what we really need to do is kind
179:08 - of add some placeholders in this case i
179:11 - think is the easiest way to solve this
179:13 - so the way i'll usually do this is if we
179:16 - go to where we're rendering this row i'm
179:18 - just going to check the length of the
179:20 - row
179:21 - so if the length is less than three
179:23 - items then we know we need to have an
179:26 - extra view otherwise we can just render
179:28 - null
179:29 - and so this view is just going to be a
179:30 - placeholder so we're going to create a
179:33 - styles.placeholder
179:37 - and we'll come back to our style up here
179:39 - and first thing we're going to do is
179:41 - just say flex 1 on it
179:44 - and you'll notice uh that's going to
179:46 - have it there and you know what we're
179:47 - going to apply the same things
179:49 - as the card container so instead of
179:50 - using placeholder we can just reuse that
179:53 - style
179:53 - but anyway you'll notice that we'll uh
179:56 - at least push it over a little bit and
179:58 - now to match the padding we're going to
179:59 - have to use the same thing as cart
180:01 - container and set a padding of 10 on it
180:04 - but since it's a duplicate i'm not going
180:06 - to do it i'm just going to say
180:07 - styles.card container
180:09 - and reuse that style
180:12 - and now you'll notice we have basically
180:14 - there's an invisible placeholder right
180:16 - here that you can't see
180:18 - if we set like a background color you'd
180:20 - be able to see it's like
180:23 - background color
180:24 - pink
180:26 - right um you'd be able to see there's
180:29 - one right here and let's use margin
180:31 - instead of padding
180:33 - and it'll be even clearer
180:37 - all right and you can see here is our
180:39 - little pink placeholder there
180:41 - anyway let me put that back
180:44 - all right so this is the gist of this uh
180:47 - i also thought we could have a ton of
180:49 - workouts uh in the history so i figured
180:52 - it'd be a good place to use a flat list
180:55 - that's a component in react native that
180:57 - is good for lists that are long
180:59 - so we're gonna have to re-kind of think
181:02 - about how we have this current set up a
181:05 - little bit because we can't
181:07 - in this particular format render the
181:09 - flat list well
181:10 - so what i'm thinking is to reorganize
181:12 - this a tad instead of
181:15 - like putting making a rose
181:18 - of jsx we're going to create a new
181:20 - slightly new data type here
181:22 - so i'm going to comment this out and so
181:25 - what i'm going to do instead is our rows
181:27 - are going to be still a 2d array
181:31 - but i'm now going to create a new data
181:33 - type here
181:35 - inside of it i'm just going to say
181:37 - the date which is going to be a string
181:40 - and then i'm going to say exercises
181:42 - which is just the array of current
181:43 - exercises
181:45 - so this is kind of a similar data
181:47 - structure to what we had before a 2d
181:50 - array but now instead of having
181:53 - uh gsx we're going to be rendering just
181:56 - we're not rendering but we're going to
181:57 - store objects the objects have a date
182:00 - which maps to this and a value
182:02 - which maps to these exercises so to
182:05 - match it the names i'm just going to say
182:07 - date and exercises here
182:09 - um
182:11 - exercises there we go i have trouble
182:14 - spelling that word
182:15 - and then we're going to put this here
182:17 - date exercises
182:20 - and same thing goes here
182:24 - and the reason why we're reformatting it
182:26 - like this is this is just a little bit
182:28 - easier of a data structure to pass into
182:31 - a flat list
182:32 - all right so we'll come down here
182:35 - and
182:36 - i'm going to say flat list
182:39 - so first thing that i'm going to do on
182:41 - this is
182:44 - pass in the data
182:46 - which i'm going to have rows
182:48 - and
182:50 - two things just hit me that i forgot to
182:52 - do
182:53 - one we may have to have two placeholders
182:58 - if the length is if the length is only
183:00 - one then we're gonna have to render two
183:02 - placeholders so we can do it like this
183:04 - so if the length is two
183:06 - this will be false and will only render
183:07 - one placeholder but if we have uh one
183:10 - both of these are going to be true and
183:12 - it's going to render both
183:13 - the other thing is i brought a tab up
183:15 - for it because i want to show you guys
183:17 - on the scroll view that we made we need
183:19 - to set this keyboard should persist taps
183:24 - what this does is sometimes in scroll
183:27 - lists you have trouble tapping on things
183:29 - and we want to tap on
183:31 - uh the items in that scroll list so we
183:34 - can get around that problem by passing
183:36 - in always
183:37 - and i'll link the docs if you want to
183:39 - see the other options you can pass to
183:40 - this
183:42 - and this allows you to tap and it not
183:45 - and have it work correctly
183:48 - but anyway back with the flat list we're
183:50 - passing in our rows
183:53 - and with a flat list let's import this
183:58 - and uh if you didn't see that
184:00 - flawless coming from react native itself
184:03 - so there is a prop on here called key
184:05 - extractor so what k extractor does is it
184:08 - takes one of the items
184:10 - so in this case i'm just going to say
184:12 - item
184:13 - and if we look at what the item is we
184:15 - can hover over it and see
184:17 - you'll notice this is an array of dates
184:19 - slash
184:20 - exercises and we need to return a string
184:23 - that is a unique key
184:25 - so i think what i want to use for the
184:27 - unique key is the dates and i want
184:30 - something like if i have three dates
184:33 - i think i want to have something like
184:35 - this
184:37 - so date one
184:40 - and then like a space date two and date
184:42 - three
184:43 - all in a string
184:45 - so we have an array so i think a good
184:48 - way to take that array and turn it into
184:50 - string is to use the reduce function
184:53 - so we can say item.reduce so this is an
184:56 - array function the first parameter is a
184:59 - function that takes the previous value
185:01 - and the current value
185:03 - and then we have to return something
185:06 - and then the second value of this
185:08 - is our initial state which in this case
185:10 - is an empty string so how the reduce
185:12 - function works is it's going to call the
185:14 - function that you pass in for each item
185:17 - and each item it's going to pass in for
185:19 - the
185:20 - current value and then previous value is
185:22 - going to be
185:24 - either the initial value or whatever was
185:26 - returned before
185:27 - so what that means is we're going to say
185:29 - previous value plus
185:31 - put a space between it
185:32 - the current value
185:34 - so all that's going to do is it's going
185:35 - to make a string that looks like this
185:37 - and it's going to append the three dates
185:38 - together
185:40 - and then lastly we need to render the
185:42 - item for this
185:44 - and this is really what the row is going
185:45 - to look like
185:47 - so we can copy what we have here
185:50 - up here
185:52 - and then this is going to be
185:55 - item is the key to access and you'll see
185:59 - same thing as we were dealing with
186:00 - before
186:01 - now we don't have to actually pass a key
186:03 - to this because that's what key
186:04 - extractor does
186:06 - all right so we're going to keep this
186:08 - and all we're going to do here is kind
186:10 - of a mix of what
186:12 - this and what we did up here
186:15 - so i'm going to uncomment this and bring
186:17 - it down here
186:19 - so to render this all we did was loop
186:22 - through the exercises
186:23 - so here i'm going to say
186:26 - item.map
186:27 - and for each one
186:30 - we're going to render this
186:33 - and so here i can say
186:36 - date and exercises
186:38 - so the key is going to be a date
186:40 - the header is going to be
186:42 - a date as well and this is going to be
186:44 - exercises
186:46 - and we just need to import that
186:49 - so we don't need this
186:51 - we're going to need this these two
186:53 - placeholder things here still because
186:55 - this is gonna we're still gonna need
186:56 - placeholders because we have odd numbers
186:58 - out or whatever
187:00 - all right so item and item
187:03 - give that a save
187:06 - um so i don't think we'll see anything
187:08 - different here and let's see did i mess
187:09 - something up pretty badly
187:12 - i think
187:15 - um this looks good here
187:18 - we don't need this anymore
187:22 - i think that could have been what's
187:23 - causing yeah if that looked like it was
187:25 - causing the problem
187:26 - uh and this is the same
187:30 - two children with the same key object
187:32 - object object
187:33 - that's because i didn't say
187:36 - current value dot date okay
187:40 - so current value is if we hover over it
187:42 - we can even see
187:43 - is the object
187:46 - it's the date which is string and the
187:48 - exercises we have access to so we want
187:50 - to use the date to pin that
187:52 - and then previous value again is
187:54 - whatever we have on there and you can
187:55 - hover over it you'll know it's just a
187:56 - string it's going to be this and then
187:58 - it's going to be whatever we turn return
188:00 - before it as it kind of maps over each
188:02 - item
188:04 - all right so you'll notice it looks the
188:05 - exact same but it is now in a flat list
188:07 - meaning it will work better with long
188:09 - lists of data
188:11 - so last thing that i want to do is make
188:13 - these clickable so
188:15 - and basically take you to a new screen
188:17 - when you click on it
188:18 - and i'm just going to get rid of this
188:20 - comment because it's not relevant
188:21 - anymore
188:22 - get rid of this as well
188:24 - okay
188:25 - so to make these clickable we can go
188:28 - over to our card
188:30 - and we're going to take an optional prop
188:32 - called on press
188:37 - and we use the question mark to say it's
188:39 - question uh
188:40 - possibly undefined
188:42 - and here we're gonna say onpress
188:45 - so if they pass in a on press we're
188:48 - going to use a touchable
188:50 - opacity
188:52 - instead of a regular view that way it
188:54 - has a nice on click
188:57 - and we can still use the same
188:59 - styles.card
189:01 - so it's going to look like a card but
189:02 - now it's clickable
189:04 - all right so
189:06 - now in our workout history over here i
189:08 - can pass an on press
189:11 - to this guy right here
189:13 - or actually i guess because our history
189:16 - card underneath
189:18 - uses
189:21 - yeah uses a card right here so i guess
189:23 - it would work like that
189:25 - so i guess i can just use the
189:27 - the header which is a date i'm just
189:29 - thinking my head i guess we want to pass
189:31 - the on press here
189:33 - i think we want to
189:34 - add an on press here though
189:39 - i was thinking whether we want to put
189:40 - the logic and the history card or move
189:42 - it up and i think i want to move it up
189:45 - to put it here instead of past you
189:47 - putting the logic of how the changing of
189:49 - page works
189:51 - so in that case we're going to pass a
189:52 - prop down called on press
189:57 - and we're going to pass that in here
190:03 - so now in our workout history we're
190:05 - going to define what onpress does here
190:07 - in this case it's going to say
190:08 - history.push
190:11 - and uh let's see if we have yep we have
190:14 - history imported
190:16 - and what we're gonna do is we're gonna
190:17 - go to slash workout
190:19 - slash
190:20 - and we're gonna do the current date
190:24 - so i'm going to go like this and make
190:27 - this a bracketed function
190:32 - and let me
190:33 - so lets me save and reformat it
190:36 - so what i want is i would like to have
190:39 - the year here then the month and the day
190:43 - of of the workout so to do that we have
190:47 - the date
190:49 - and it is separated by dashes so i'm
190:52 - going to say date.split by the dash
190:57 - and so here we're going to say
190:58 - parts.date
191:00 - or sorry parts.0
191:03 - for the year and then the month
191:06 - and then the day
191:11 - sorry this is your b1 this should be two
191:14 - okay so we haven't actually created that
191:16 - route but we can go ahead and click on
191:18 - this
191:19 - and it should take us to a different
191:20 - page and it should have the slash on it
191:22 - so something did not work
191:27 - um so i'm just going to see if this on
191:29 - press is getting called
191:32 - pressed
191:36 - all right
191:38 - and it is not being called so let's just
191:40 - go one deeper to the history card
191:43 - uh
191:44 - this and then our card click on that
191:49 - oh i forgot to pass on press
191:52 - to the touchable opacity here
191:59 - all right so let's click on this should
192:00 - take us to 2018 11 18.
192:03 - 2018 11 18 awesome
192:06 - so it's gonna be actually really easy to
192:07 - render the what goes here
192:10 - so let's first create the route for it
192:13 - so we're gonna go over to our routes
192:15 - create a new one here i'm going to say
192:17 - slash workout
192:19 - slash year and by the way this is how
192:21 - you do variables in react router so this
192:23 - is a variable in the url
192:25 - the year the month
192:28 - and the day
192:30 - and this is going to render the current
192:31 - workout
192:32 - component so in our current workout now
192:34 - we're going to take some things from the
192:36 - uh oops from the
192:39 - the url
192:40 - so now to tell react router that we have
192:43 - some things that we expect in the
192:45 - url
192:46 - we're going to say year
192:48 - string
192:50 - month string and day string now these
192:54 - may not be there if someone comes from
192:56 - the current workout
192:58 - so if we go back not that to routes
193:01 - you'll notice that we are rendering the
193:02 - current workout both on a route that
193:04 - looks like this
193:06 - and a route that looks like that so it's
193:08 - possible that someone came here with no
193:10 - route params on there
193:13 - so that's why i did undefined at the top
193:15 - here because they can possibly be
193:16 - undefined
193:18 - and so we can have access to those
193:21 - variables
193:22 - by saying match
193:24 - and then params
193:26 - and there's going to be a day a month
193:29 - and a year
193:33 - and then here now i'm just going to see
193:35 - if this throws an error
193:38 - um
193:39 - okay good i didn't know if it was going
193:41 - to complain
193:42 - um
193:44 - i didn't know it was going to complain
193:45 - because we have the we're destructuring
193:47 - these and they're undefined on the
193:49 - current ooh
193:51 - we didn't go to current workout slash
193:52 - current workout there we go
193:54 - okay yeah i didn't complain because the
193:56 - params are going to be undefined and
193:58 - we're destructuring them here so i
194:00 - didn't know if it was going to be upset
194:01 - about that but it looks like it's okay
194:03 - so i'm going to make a variable
194:05 - um is current
194:08 - workout so we could rename this uh thing
194:12 - because this really is just the display
194:14 - for the workout it may not be the
194:15 - current workout
194:17 - um so it's the current workout if
194:19 - there's not a year
194:21 - and there's not a month and there's not
194:23 - a day
194:26 - and so basically how this works now
194:29 - is we're going to do a check here
194:31 - so we're going to say is current workout
194:34 - if it is we're going to map through the
194:36 - current exercises otherwise we're going
194:38 - to get the day in history
194:40 - so we're going to say
194:42 - date key
194:44 - is equal to year
194:46 - dash month
194:51 - dash day and then we're going to look
194:52 - this up in our history
194:55 - so we're going to say root store
194:58 - dot
195:01 - workout store dot history
195:04 - and then use the date key
195:07 - and then we need to wrap this in
195:08 - parentheses so we're going to pick
195:10 - whether we're doing the current exercise
195:12 - or pick the exercises at a given day and
195:14 - we're going to map through those
195:16 - so just give you an idea here's all the
195:18 - exercises on this day
195:21 - um
195:22 - let's try this day and we can see we
195:24 - have just these three so nice
195:26 - the other thing is when i click on a
195:29 - workout actually that's good it should
195:31 - update automatically i think really the
195:33 - only last thing is when we save
195:36 - we can get rid of this random day
195:39 - when we save the workout
195:41 - we don't need to clear the current
195:43 - exercises
195:45 - if if we're doing a day in history so it
195:48 - is current workouts
195:50 - we're going to do this logic
195:53 - else
195:54 - we're going to just save the day in
195:59 - in history actually we don't even have
196:00 - to save it because it's automatically
196:02 - going to be updating it for us so that's
196:04 - awesome
196:08 - so only if we are working with a current
196:10 - workout do we need to actually save it
196:13 - in history
196:14 - otherwise we're going to be direct
196:17 - directly mutating the history i believe
196:20 - and there's no need to actually update
196:22 - it and so what i mean by directly
196:23 - mutating
196:25 - is when i hit this
196:27 - right two it's gonna actually save this
196:30 - and if i come back over here
196:32 - which day was i even working on was it
196:33 - this one yeah it's gonna remember the
196:35 - two in history and there's actually no
196:37 - need to hit save it's gonna save just
196:39 - goes back pretty much it's gonna
196:41 - remember that day
196:43 - so we can make changes to the day
196:45 - days in history now we can see the
196:46 - values
196:48 - all right so that's all i wanted to
196:49 - cover in this video we covered a ton
196:52 - quick recap is we went over fetching
196:55 - basically different workouts
196:57 - based on the date we have in the url
197:01 - and we use this to look up the key
197:04 - and i can count to log this
197:07 - date key
197:12 - so all we do is we take that and we can
197:13 - close this we don't need that
197:15 - right so
197:17 - in this case 1213 we look up that
197:19 - workout in our history object and then
197:22 - we display those exercises that we know
197:24 - the user did we even let the user update
197:27 - the days in history if they want to as
197:29 - well
197:33 - we're going to start off by making a
197:35 - floating action button
197:36 - now those are those little things you
197:38 - see in the bottom right corner of
197:40 - applications and you click on them they
197:42 - usually are used to add things and we're
197:45 - going to use that button to create
197:47 - workouts instead of putting that button
197:49 - all the way up here
197:51 - and then after that what we're going to
197:52 - do is we're going to start adding
197:54 - workout progressions
197:56 - or what i mean by that is after you do a
197:59 - workout you should increase the amount
198:00 - of work or the amount of weight you do
198:03 - the next workout so we're going to go
198:06 - through how you can increase that or
198:07 - basically create a workout plan
198:10 - all right so let's jump into the code
198:11 - for the floating action button
198:14 - so to start off we're going to create a
198:15 - new component in our ui here which i'm
198:18 - going to abbreviate fab for fab floating
198:21 - action button
198:23 - and i'm going to use our react hook
198:25 - snippet
198:27 - and i'm going to say our our style
198:30 - snippet as well
198:31 - and here we're going to say
198:33 - fab
198:35 - and the first thing is we're gonna have
198:36 - a touchable opacity
198:39 - and the touchable opacity is just so we
198:41 - can click on it and this will be the
198:43 - circle itself
198:44 - and then inside of the circle we're
198:46 - gonna have some text in our case we're
198:48 - just gonna have a plus sign
198:50 - um
198:51 - and then i'm just going to import that
198:53 - from react native
198:55 - so now i'm going to pass in the styles
198:58 - so i'm going to say style.fab and then
199:00 - here i'm going to say style styles.txt
199:03 - so we'll create a text style as well
199:05 - now for the text we'll start with that
199:07 - first because it's going to be pretty
199:08 - easy
199:09 - for the most part we're just going to
199:10 - say font size 18 or something like that
199:13 - and then for the touchable opacity we're
199:16 - going to do this in pieces so i think
199:18 - the first thing we want to start with is
199:20 - getting it located on the screen i'm
199:22 - going to give it like a width of 40 a
199:25 - height of 40.
199:26 - and then i'm going to
199:28 - say
199:29 - background color so we can see what it
199:31 - looks like we'll just make it pink
199:34 - and then we're going to do
199:36 - position absolute
199:39 - and then i'm going to position it
199:40 - at the bottom 10 pixels away and from
199:43 - the right 10 pixels away so let's take a
199:46 - look at what that looks like here
199:49 - um oh
199:50 - we need to actually render it so let's
199:52 - go to our workout history and render it
199:53 - at the bottom
199:55 - so
199:56 - let's say fab
199:58 - render that and see what it looks like
200:01 - um
200:01 - [Music]
200:02 - all right it does not match i think my
200:04 - disk here got messed up so i'm just
200:06 - going to delete it
200:09 - and run yarn watch again
200:11 - to just recompile it
200:15 - and give it a refresh
200:17 - oh you know what i think when i do that
200:19 - i'm gonna have to restart the
200:21 - client as well
200:25 - all right
200:26 - so what i expect uh for this is at the
200:29 - bottom
200:30 - we should have see like a little pink
200:32 - square so there we go cool now i notice
200:35 - it's not really 10 pixels from the
200:36 - bottom
200:37 - and the reason for that is our view
200:40 - that's the entire page is not flexing
200:43 - so i'm gonna create a style for it to
200:45 - have it flex so
200:47 - i'm gonna say container
200:51 - flex one
200:54 - and then this outermost style
200:56 - i'm going to say
200:58 - styles
200:59 - dot container so now this thing's going
201:02 - to be the entire page and so this can be
201:04 - 10 pixels away from the bottom because
201:06 - we need that outer container to take up
201:07 - the whole page
201:08 - all right so and we can see we can click
201:10 - on it as well next thing is we want this
201:12 - to be
201:15 - circular so we can use the same tactic
201:17 - as we did with the other circles
201:19 - and say border radius
201:22 - and half of the width slash height which
201:24 - in this case would be 20. so now we have
201:26 - a circle
201:27 - and then really the last piece of this
201:29 - is to make it
201:31 - uh i think we did our card is to add the
201:34 - shadow to it
201:36 - so i'm going to copy these three
201:37 - properties or these four properties that
201:38 - we used in our card
201:40 - to give it the shadow so shadow color
201:42 - and then some properties on the shadow
201:46 - and now we have a pretty nice looking
201:47 - button there uh the only other thing and
201:49 - by the way how this works is it kind of
201:51 - is floating above
201:53 - everything right so you can see it
201:55 - uh it kind of
201:57 - i don't know if we should have it so
201:58 - where it's kind of like over the scroll
202:00 - so maybe we should
202:01 - uh push it to the right like 20 pixels
202:05 - and do 20 pixels off the bottom to be
202:07 - more like there
202:09 - that might be better
202:11 - anyway you'll notice the button is going
202:12 - to be floating over the content
202:15 - all right
202:17 - and then really the last thing is to
202:18 - like get this plus sign centered in the
202:20 - middle there
202:23 - so we're going to say align items
202:25 - center
202:26 - justify
202:28 - content center
202:33 - all right now we have our plus
202:35 - now the plus to me maybe this is just an
202:37 - optical illusion looks like it's not
202:39 - dead center it might be to the
202:42 - left and right a little bit
202:44 - so if you wanted to you could add a
202:45 - little bit of margin on the text to the
202:47 - left and right
202:48 - to push it to like
202:50 - margin left
202:53 - two pixels margin bottom two pixels and
202:56 - that'll kind of push it a little bit
202:59 - and i think this looks a tad more
203:01 - centered in my opinion but it could just
203:03 - be an optical illusion
203:05 - all right so basically this button here
203:06 - we've now created a nice stylized one
203:09 - and we can click on it
203:10 - uh it's gonna do what our create workout
203:12 - button does up there so we can go ahead
203:15 - and remove that from our workout history
203:17 - so let's see what that was doing
203:20 - i'm gonna just copy the on press for
203:21 - that button
203:23 - and i'm gonna put that in the on press
203:26 - of this
203:27 - so we need to add an on press
203:29 - that way we can this works
203:33 - and uh we don't need this watch man i
203:35 - just have that on my clipboard
203:38 - all right
203:39 - and uh
203:41 - get rid of that
203:45 - and we're going to now in our props in
203:48 - the fab say on press
203:53 - and pass that to the opacity
204:01 - so now what should happen is i click on
204:02 - this it should take me to a workout page
204:05 - now
204:06 - we're gonna work on that next is
204:09 - what happens when that plus sign is
204:11 - pressed
204:12 - so first off we don't want to just push
204:14 - on exercises every single time
204:18 - if they're already in the middle of a
204:19 - workout we just can take them to the
204:21 - workout instead of creating a new
204:22 - workout
204:23 - so i'm going to do is i'm going to go to
204:25 - our workout store
204:28 - and
204:28 - uh oh by the way you guys just saw me do
204:31 - something
204:32 - that might have been confusing what just
204:33 - happened
204:35 - so i navigated to the workout store the
204:38 - way i did that i should explain that is
204:41 - i hit command or i guess control
204:43 - probably on windows
204:44 - and then i hovered over this variable
204:46 - and i can click on it and it'll tell me
204:48 - where it came from
204:50 - so you notice i clicked it once it took
204:52 - me to the root store and i hit command
204:54 - click again on the workout store and
204:57 - that's how i navigated to where the heck
204:58 - this came from so that's another way i
205:00 - commonly navigate besides just using the
205:02 - folder tree here
205:05 - um all right so yeah so i'm going to add
205:07 - a computed property on this
205:10 - so i'm going to say computed
205:13 - and i'm just going to say
205:16 - has current
205:18 - workout
205:20 - and this is going to be a boolean we're
205:22 - just going to return
205:23 - this dot
205:25 - current exercises stop length
205:28 - and uh this is going to be
205:32 - a boolean
205:34 - so i'm going to cast it to a boolean
205:36 - using the not sign twice so that'll cast
205:39 - this number into a boolean so basically
205:41 - if it's zero it's going to be false if
205:43 - it's larger than zero it's going to be
205:44 - true
205:45 - and all i'm doing is i'm checking if
205:47 - there's some values in current exercise
205:50 - so now what i can do is
205:54 - if
205:56 - rootstore.workoutstore
205:58 - dot
205:59 - has current workout
206:04 - want to do this or i guess the opposite
206:06 - so if there's not a workout
206:10 - so what's going to happen is we're not
206:11 - going to push on exercises
206:14 - unless um
206:15 - they're not in a workout currently
206:18 - and so the way we know if they're not a
206:20 - workout is if that's blank
206:22 - so
206:24 - uh did i ruin something
206:26 - oh yes i forgot to add the get property
206:32 - so we're just going to add the git
206:35 - name to that
206:37 - and then that allow us to access it like
206:39 - we are here
206:40 - where we don't have to call it as a
206:42 - function we can just access it as a
206:43 - field
206:45 - okay so now i'm going to go back over
206:47 - here
206:48 - and hit save
206:50 - that has a whole bunch of junk in it but
206:51 - if i click on this
206:53 - hit save
206:54 - or if i just like go back and you notice
206:56 - how i'm hitting plus every time we're
206:58 - not adding a whole bunch of workouts
207:00 - we're just looking at the same workout
207:01 - multiple times
207:03 - so the next thing is i want to fix up
207:05 - what we're actually doing for the
207:07 - current workouts
207:08 - so first off we should be doing a
207:10 - different workout
207:12 - depending on what day it is
207:14 - so the way we have it set up in our
207:16 - let's go back to our store
207:18 - is we have the the current workout day
207:21 - and i'm gonna set some default values so
207:23 - i'm gonna say it's gonna start as an a
207:25 - day
207:26 - and uh the current squat weight i'm
207:28 - going to say 45
207:30 - and basically you're going to just start
207:32 - with just the bar
207:33 - which is 45 pounds
207:35 - and then barbell row and both the
207:37 - deadlift are going to be kind of hard to
207:39 - start with
207:40 - just the bar so we're gonna say
207:43 - uh let's maybe hopefully they have like
207:45 - some bumper weights they're like 10
207:46 - pounds or something so we'll say 65
207:48 - pounds you'll start with
207:51 - okay so
207:53 - now with these values this is what i'm
207:55 - going to increment and the current squat
207:57 - value and all that stuff is what we're
207:59 - going to persist and as the user is
208:01 - working out we're going to increment
208:03 - these numbers
208:04 - so the way we're going to do that is
208:07 - first off we're going to hinge on that
208:08 - day so here i'm going to say
208:13 - rootstore.workoutstore
208:16 - and we're going to say last workout type
208:19 - and we're just going to inverse it
208:22 - so we're going to say we're going to
208:24 - look at what the last workout day was if
208:26 - it was a then we're now going to do a b
208:30 - and vice versa
208:34 - so that should be b that should be a
208:37 - this way so all this does is when we hit
208:39 - the plus it's now going to toggle
208:40 - between a and b
208:42 - um because we're checking if it's a
208:45 - last time then we now want it to be a b
208:49 - this logic may need to happen somewhere
208:51 - else
208:52 - or maybe i should reword this
208:55 - and say like what the current workout
208:56 - type what is
208:59 - um so if the last workout was an a the
209:01 - next one would be a b no this makes
209:03 - sense i think
209:06 - all right so that's
209:08 - going to switch between the workout
209:10 - types the next thing is to actually
209:12 - increment the weight and use that here
209:15 - so instead of doing these weights we're
209:17 - basically going to check what day it is
209:19 - and do a different condition
209:21 - so again i'm going to be hard coding
209:23 - this here
209:25 - for simplicity's sake but
209:27 - ideally you should probably put this in
209:28 - some kind of array of exercises or
209:30 - whatnot
209:32 - or maybe a condition of some sort so
209:34 - we're going to say
209:35 - last workout type
209:37 - if it was equal to b that means today is
209:40 - an a day
209:42 - and on a day you're going to do this set
209:44 - of exercises
209:46 - oh and this this this stuff should go
209:48 - inside of there
209:52 - all right so we're going to say do these
209:54 - set of exercises
210:02 - and we'll paste that in there
210:05 - all right so so
210:06 - what we're going to use is the current
210:08 - values as well
210:11 - so we're going to say root store
210:13 - dot workout
210:14 - store dot
210:16 - and then we're gonna grab all these
210:17 - current values
210:20 - current barbell current bench
210:25 - deadlift
210:28 - squat and overhead press
210:32 - and i guess i'll move this outside of
210:33 - here
210:37 - all right so the name of its squat
210:39 - number of sets
210:40 - and then the weight here is going to be
210:42 - the current squat weight
210:45 - current bench press weight
210:48 - and
210:51 - i'm going to just create a const
210:53 - empty
210:55 - sets
210:58 - because we're going to basically reuse
211:00 - this in multiple places
211:03 - and now what i'm going to do here is i'm
211:05 - going to say
211:07 - dot dot empty sets
211:08 - and what this is going to do is it's
211:10 - going to basically just create a new
211:11 - instance of this array i don't know if
211:14 - we would have a problem with having the
211:16 - sets like references to the same
211:19 - array so that's why i want to create a
211:20 - new array each time just to be safe
211:29 - all right and then down here
211:31 - we're going to say
211:33 - actually deadlift is special so we'll
211:35 - just
211:36 - hard code it like that
211:38 - current deadlift
211:41 - and then at the bottom here i'm
211:44 - basically going to just say i'm going to
211:46 - increment each one by two pounds
211:48 - or 2.5 pounds i guess
211:55 - so squat
211:57 - 2.5 and then
212:00 - bench press
212:02 - and then deadlift
212:05 - so basically what's happening is we're
212:08 - going to do these exercises
212:10 - and then we're going to increment the
212:12 - weight for next week
212:14 - when we do them
212:17 - and then we're going to basically copy
212:19 - this
212:22 - and do the same thing but with different
212:24 - exercises on the b day
212:26 - so again you can see where we kind of
212:28 - have some duplication of things where it
212:30 - may be simpler to switch this out with
212:32 - some kind of looping
212:34 - so
212:35 - we're gonna be doing an overhead press
212:37 - and a barbell row but we still do squat
212:41 - so barbell
212:42 - row
212:51 - empty sets and then here current barbell
212:54 - row
212:59 - and then we're just rinsing repeating
213:00 - overhead press here
213:06 - and we're pretty much done i think now
213:09 - um with this switching so let's see what
213:12 - we just accomplished
213:14 - so now when i hit a press on this we'll
213:16 - get squat bench deadlift
213:18 - and uh let's see what poundage we're at
213:22 - let's save this so now
213:23 - squat overhead press barbell we're at
213:25 - these pounds
213:27 - save it and if we look at what we're
213:29 - gonna do next week squat is oh you know
213:31 - what it's 2.5 on each side so that
213:33 - really this should really be five
213:37 - that's how much i want to increment by
213:40 - but you'll notice how the squat
213:42 - incremented there
213:44 - and we got a new set of exercises so now
213:47 - it's going to oscillate between these
213:49 - exercises
213:52 - each week
213:54 - and we slowly increase the weight of
213:55 - them
213:57 - and what not
213:59 - anyway guys i think that is the end of
214:01 - us adding features to this application
214:05 - in the next video what i'm going to do
214:07 - is make sure the app works
214:10 - the react native one
214:12 - and at least on the ios emulator
214:15 - and then also deploy this to netlify now
214:17 - there's a ton of things that we could
214:18 - add to this to make it better and a ton
214:20 - of different features
214:22 - so i hope this gave you a good
214:24 - introduction and how you can get started
214:26 - with this and a good starting framework
214:28 - and i invite you encourage you to start
214:30 - adding some features onto this get an
214:32 - idea of how it might work switch up the
214:34 - styles of things
214:35 - and kind of make it your own workout
214:37 - application customize the different
214:40 - lifts
214:41 - and set up if you work out to your
214:43 - routine
214:48 - we're going to go over how we can deploy
214:50 - our react native web application to
214:52 - netlify so this is the website and to
214:55 - start off we're going to be making three
214:58 - changes to the project for the purposes
215:01 - of getting this to work to deploy
215:03 - the first is in our common package in
215:06 - the package.json we want to add a script
215:08 - called post install so this is a special
215:11 - npm script
215:12 - that gets run after someone does a yarn
215:15 - install or an npm install so basically
215:17 - what happens is when the uninstall is
215:19 - going to get run it's also going to
215:20 - build the project
215:22 - in this case it's just going to generate
215:24 - the dist folder so whenever this project
215:26 - is installed the dist folder for common
215:28 - is going to be created
215:30 - and the reason we want this is because
215:32 - we're going to be building the
215:33 - application on netlify and it's going to
215:35 - need to be able to access this dist
215:38 - folder so it needs to be built
215:40 - so that's how we're going to trigger it
215:41 - secondly we're going to go to our web
215:44 - package and we're going to be running
215:46 - the build command and we need to add the
215:50 - cross and the skip pre-flight check to
215:52 - beginning of it to get it to work
215:54 - similar to we had we did it for the
215:56 - beginning of start here
215:58 - and the build command basically what
216:00 - that does is it's going to take our
216:01 - react application here and it's going to
216:04 - spit out a build folder with the
216:07 - basically compiled code or transpiled
216:09 - code that's minify and all that fun
216:11 - stuff
216:12 - and then lastly to get our routing to
216:14 - work on netlify since we are using react
216:17 - router
216:19 - in the public folder of our web package
216:21 - we have to create a special file called
216:23 - underscore redirects so this is
216:25 - something that works with netlify and
216:27 - basically we're saying
216:29 - any time zone goes to a path
216:32 - we want to redirect them to the
216:34 - index.html file basically all this does
216:37 - is it says allow react router to do
216:40 - routing for us
216:42 - all right so those three after you make
216:44 - those three changes i went ahead and
216:46 - committed the code
216:48 - and then i pushed it up to github now
216:51 - the branch that i'm working on i called
216:53 - it prod let's just clear that so i
216:56 - called it prod and i committed and
216:57 - pushed up to this prod branch
217:00 - now i said we're going to deploy to
217:02 - netlify i went overhead and i already
217:04 - created a netlify
217:05 - account i have a netlify project that i
217:08 - created you're going to want to do the
217:09 - same thing i connected my github
217:12 - repository but you could do git lab if
217:14 - you want to as well after that i chose
217:16 - the repository that i want to link it to
217:18 - because basically what we're setting up
217:20 - here is whenever you push to the github
217:22 - or get lab repo it's going to
217:25 - grab that code from netlify or netfly is
217:27 - going to grab that code
217:29 - is going to
217:31 - build it and then it's going to deploy
217:32 - it
217:33 - and then after you pick a repository
217:35 - it's going to ask you for some build
217:36 - options so these are the build options
217:38 - that you're going to want to do your
217:39 - build command is going to be the
217:41 - following
217:42 - so basically we're just going to run npm
217:45 - run build inside of the uh web package
217:47 - so you just cd into the web package and
217:50 - then you run npm run build and then here
217:52 - we just specifying the directory where
217:54 - our compiled code's going to be or the
217:56 - once it's built in our case it's going
217:58 - to be in packages web slash build
218:01 - now another important thing is
218:03 - i went ahead and just said the latest
218:06 - version of yarn as a build
218:09 - variable
218:10 - so
218:11 - i said yarn underscore version 1.13 and
218:14 - basically what this does is it tells
218:16 - netify to use this version of yarn
218:18 - i just make sure to do that so it
218:19 - doesn't have any problem with the arm
218:20 - workspaces and i just grabbed that
218:23 - version off of the latest one that i
218:24 - have on my computer
218:26 - all right so after i did that basically
218:28 - the site deploys
218:29 - and that's pretty much it you can go to
218:31 - the poise log you can see the
218:33 - the ones that hopefully published my
218:35 - first try it failed
218:37 - but you can see the logs if you have any
218:39 - problems you can go and see what error
218:41 - you have and
218:43 - you can try fixing it
218:44 - but after that it's going to deploy your
218:46 - site you can even give your site a name
218:48 - and set it to https if you want to
218:51 - i can see my site here
218:53 - react native web workout is what i named
218:55 - it so this is live in production anyone
218:58 - can access this so if you want to you
219:00 - can come access it too and the data is
219:02 - all stored in local storage so
219:03 - everyone's going to get a different
219:04 - version
219:05 - and we can now do our workouts and
219:07 - whatnot and save them
219:09 - anyway that is how you deploy it to
219:11 - netlify
219:12 - with react native web you'll notice it's
219:14 - not too much different from a react
219:17 - project it's pretty much the exact same
219:19 - the only difference is really stuff to
219:21 - deal with react router and yarn
219:23 - workspaces
219:25 - now i also mentioned that i check out
219:26 - the app
219:27 - and i spent about an hour trying to get
219:30 - it working but i just ran into basically
219:32 - the same sim link problem and just
219:34 - having problems with the dependencies
219:37 - i'm not really sure the best way to set
219:38 - up since we did react native cli
219:41 - i'm not really familiar with how to get
219:43 - yarn workspaces working well with it
219:45 - i've always used expo before
219:48 - so
219:49 - instead of just trying tons more and
219:51 - more workarounds i was kind of getting
219:52 - tired of trying it um especially because
219:55 - i saw that
219:56 - facebook has uh
219:59 - made a little announcement about how
220:00 - they're going to tackle
220:02 - the sim links problem
220:04 - and estimate about a month away uh so
220:08 - this issue was created two days ago it
220:10 - looks like um so about a month from now
220:12 - sim link should be working so i was like
220:13 - i don't even feel like trying to get
220:16 - some links workarounds i'm just gonna go
220:18 - ahead and
220:19 - forget about it and wait a month until
220:21 - this is complete
220:23 - anyway if this video is uh if you're
220:26 - watching this like a month from now
220:27 - check the date sim links may be working
220:30 - and you can try out the app um using
220:32 - that but for now i'm not going to worry
220:34 - about it we got the web version of it up
220:36 - and rank so i'm happy with that and this
220:38 - is the one that i wanted to see the most
220:40 - anyway
220:41 - anyway that is the end of this workout
220:43 - series i hope you guys liked it
220:45 - and until next time i'll see you guys
220:47 - later
221:02 - you

Cleaned transcript:

welcome to the beginning of my react native web series in this series we're going to be building out a workout app specifically we're going to be modeling it after this program called strong lifts they have an app and we're going to be implementing some of the functionality for this app specifically we're going to go over keeping track of your workout and then the history of your workout and have an app that does that now we're going to be building this with react native web so what this means is at the end of this we should have not only a website but also an ios and android app that does it for us and we should only be having one code base or at least the majority of it's going to be a single code base now here are the other things that we're going to be using to build out this app secondly we're going to be using mobx for state management and then pairing with that we're going to be using typescript as the programming language we're going to be using react navigation to be able to change pages in both the app or change pages in the website and we're going to be using react hooks for the entire thing and then we're going to be just working with the front end for this and so we're going to be storing data in local storage or async storage on the phone so that way we can persist the workout data as the user uses the app or uses the website and doesn't lose it after they come back to it all right so in this video we're going to set up our react native web project now to do this you can do kind of a multitude of boilerplates but i'm going to be doing create react app to start off with and then we're going to be you're free to choose a different one if you want to and then we're going to be possibly using our own webpack config later if we need to change some of the config and then we're going to basically just be going through the client side rendering portion of the react native web app uh read me for now so i went ahead and ready set up the react native or the create react app project right here so if you want to do the same you just go and run yarn create and you run react app and then whatever you want to name it and then i did dash dash typescript to make this a typescript project and then after that we should see some typescript files in the source and i just have this open in vs code right now so the first thing that i want to do is i want to add react native to this project so i'm going to say yarn add and i'm going to install react native react native web and then this package called react art or react art which react native web needs now i'm trying something new for this series you'll notice i have versions at the end of all of these the reason for that is i'm going to be trying these exact versions so you can follow along with me and hopefully as the series progresses there won't be any changes with you installing a later version of the package also the other thing you're going to want to make sure you install react native .55 because if we take a look at the react native web documentation it's compatible with that version and not higher so we'll go ahead and install these three packages and then we're going to install the types for react native that way we have type definitions when we use typescript with it so we're going to say yarn add as a dev dependency and we're going to be adding react native and i can just bring that up so you can see it better and again i'm installing the types at version .55 just so it matches up so after we have installed those things we're ready to basically take out some things from the create react app which we just do not need so for example we do not need the svg index.css app or apptest or apps.css so i'm just gonna go ahead and just delete those now and then in the index.tsx file i'm gonna go ahead and delete this line right here and then we're going to paste in this clientside rendering code right here and so now we're just going to remove this react dom.render instead of us saying reactdom.render we're just going to be using this app register now notice uh ours is called root here this get element by id so we're just gonna rename this to root right here as well and the way that we're gonna go throughout the series is i think we're going to build out react native web or at least the website and then at the end we'll get it working with the app or maybe in the middle we'll spin up also the app and make sure that it's working but we're going to primarily develop this from a the website point of view and basically the process of doing this is we're actually going to just be writing all our code uh using react native import so you'll notice we've imported from react native here we're going to be importing from react native the entire time through our code all right so i'm gonna go ahead and save this and it's going to remove those dead imports at the top i have it so a vs code setting so it does that for me if you want to turn that on you can go to preferences settings and if you come click on the brackets over here you can see the bracket versions of your settings and i believe one of them i have organize imports yeah so this editor.code actions on save i have it automatically running organize imports so you're going to see that throughout the series happening so now that we have this initialized in our index.tsx we want to just go into our app itself and convert it to using react components or react native components so that's just app.tsx right over here and we're not going to be using classes we're going to be using function components and hooks so i'm going to say const app and here we're just going to say return and also the other thing i want to mention is probably throughout this i'm going to be using some different shortcuts so i'm going to be posting my vs code settings below if you want to get these as well so one of them i have is called rnss so this is going to create style sheets for me so we're going to be using style sheets from react native to do this so these are little snippets and also i have rh for react hook and so this is going to spit out a snippet that looks like this and so here i can say uh the name my component app and this one doesn't take any props so i can just say say it like that and now i can put whatever stuff i want here anyway i'm gonna get delete all this stuff we don't need any of that code right there and i can get rid of all this stuff here and basically we can empty the file and just have this and we don't need to export this so now we're going to actually be using a react native components here so i'm going to say view and then we're going to say text and we're going to say hello from react native web and of course we need to import all these and i can i just hit command and then period this is another one you're going to see me do throughout the series to import things i can either import just this view or import all missing imports the other thing you'll see me do is if i have my cursor here i can hit command and space to auto complete get this menu up both of those i'm going to be constantly doing throughout the series so it's good to add those to your repertoire as well um and yeah the text we want to also import i just did command period and it doesn't look like it's slaying me import it so usually i'll hit command space to uh sorry control space and i'll bring it up and you can see i want to auto import from react native we'll hit enter all right so this is what the start of our application is going to look like if i come back over here we need to start the server up say yarn start and then when this boots up we can go to localhost 3000 and it's going to actually render the view and the text and so the thing with create react app is underneath the hood what it's going to do is it's going to change react native to react native web and it's going to be using those components and then react native web turns the view component into divs and i guess the text component maybe also into divs but anyway we can see the text right here show up we can even inspect this and see what the heck it created for us you'll notice with react native web it spits out a whole bunch of classes for us that's an interesting thing i noticed but anyway that's kind of your introduction to react native web of how to set it up recap of what we did is we installed three packages react art react native and react native web and then inside our index.tx we initialized our app using this bit of code that we got from the readme instead of the reactdom and then in our app we're just going to go ahead and continue to flush out this thing using react native components so before we go any farther i want to make sure we can get react native setup with react hooks so that's we're going to be doing in today's video and start off with we're going to be using the react native cli now usually when i start a react native project i'll usually opt for expo just because the development experience is a lot better and you can start up the emulator and build the application a lot faster but as of today or currently they do not support react hooks at least i don't believe they do so we're just going to be using the react native cli for this so to do so we are going to first install it and we're going to install it globally by running this command npm ig and i already have it installed globally so i'm just going to interrupt it next thing we're going to do is run the cli to create a project in react native so we're building the project in typescript so we're going to follow this guide right here and we're just going to run this command right here and i've already done this initialized a my awesome project and that's what i have open vs code right here so after that the first thing i want to do is if we look at our package.json you'll notice that they have two dependencies react and react native so we want to set up hooks in this project so we're going to need the latest version of react or at least react 16.8 and then for react native we're going to need version 59 to work so we're going to install both of those so we're going to say npmi and install react at version 16.8.2 and react native at 0.59 and this is currently a release candidate so that's why there's this dash rca so we're going to go ahead and install that and then especially with react native you might have saw or mentioned last video that with react native web it's only compatible with .55 and we're currently using we just installed five nine to use in this particular project so this is what i'm going to attempt and we'll see how well it works is i'm going to be using 5 9 in the react native project this one and then our web project we're going to be sharing the same components but we'll see if we can get it working the components even though we're not we're gonna try not to rely on any react native five nine features that would break the react native web project but we'll see how that goes um anyway so we got this uh installed so we can go to the app.tsx so this is what's currently being rendered if we were to start the app right now i'm gonna just delete the app.js because we do not need it if you click on it you'll notice it has the flow version if you want to use flow but we're going to be using typescript all right so we're just going to write out a simple hook to make sure this works so i'm going to say down here just export defaults app and then i'm going to convert this into a function so i'm going to say const app and then this is going to just return and then i'm going to just copy the view and then we're going to say const use state and we're just going to create a little counter to make sure it works so here i'm going to say count and set count and then here i'm going to display the current oops current value of count and then below that we're going to render a react native button we're going to say increment and then whenever you press this we're just going to say set count is equal to count one and we're going to give that a save we don't really need the props here and now if we go to our package.json we want to run this project so we can start the cli or the packager by running yarn start or npm start the next thing that we have to do is actually start the emulator itself so i'm going to be running the ios emulator so what i'm going to do is i'm going to say ios here and i'm going to say react native run ios now for those of you that are on a windows computer you're going to need to use android and you're going to need to have android studio installed and have an emulator created and when you have both those things you can create an android script here and just say run android and you want to make sure i believe your android emulator needs to be running when you run this command but if for the ios one it'll automatically stir it up for you so we're going to say npm run ios and uh just a heads up this will probably take a few minutes to actually build this on the emulator and get it all working and then we'll see our application and make sure it works so mine finished building and i can see the app starting up here now if you don't see it started up what should happen is if you go to just the screen with all the apps there should be a new icon it should say my awesome project or whatever you named your project you can just open that up to see it so if we go ahead and click this we can see it's incrementing the state so hooks are indeed working with react native right now so where we're going to go from here is we can now have our react native project set up and we also have our react project setup so the next thing is is we're going to set up a mono repo so that way we can create basically that one code base that we're sharing with our react native setup and with our react setup and basically that one module or package that we're going to share between both of them and we'll set that up so we are now going to set up a mono repo and the reason we are doing this so it's easy to share the code between the react and the react native project that we set up already now i just did a step before i started this video i created a folder which i just called my monorepo and then i took the two folders or projects that we worked on in the last two videos and put them in here so i copied the my awesome project into this folder and i also copied the react native web series and this reaction of web series is just what i called the project that we created with create react app so i'm going to be starting from here and the first thing that we're going to do is set up yarn workspaces so in my mono repo once you have these copied over we're going to create a folder called packages and then i'm going to rename my awesome project to app and that's where the react native code is going to go and then i'm going to rename this to web and i'm going to put that in packages so here's what our file structure looks like right now and then next i'm going to say npm i dash y or init slash y to initialize a repo here or a package.json i mean and then to actually make it into a yarn workspace we need to say at the top here private is equal to true and we're going to say i'll just add this at the bottom workspaces and then here's where we specify what our workspaces are we're going to say packages star so what that means is any uh thing that we add in the packages folder is going to be considered a package that yarn workspaces are going to see and be able to do stuff with so now if i were to run yarn right now it should install all the dev dependencies for everything and i'm just going to real quickly just remove oh perfect area have this up all the node modules and all these packages so remove an app and remove it in web and i can do it with this command so i'm saying remove rf packages and then i'm saying doesn't matter what package you can do that with the star command and then remove node modules you could also just go into each package and remove it there's only two right now that's a little shortcut for you all right so i deleted that i'm just gonna go ahead and run yarn and i'll let this run in the background uh because it's gonna probably take a few minutes to like install that stuff so next thing that we're going to do is we're going to create a new folder which we're going to call common so common is basically where we're going to start we're going to be developing stuff most of the time so this is where the one code base is going to live and then both the app and the web are going to use this one code base so i'm going to go inside of packages common and we're going to just initialize this with a package.json as well now i'm going to give this a let's refresh there we go i'm going to give this a name i'm just going to call mine wow so whenever you deal with yarn workspaces or monorepos in general usually you'll have the name of your monorepo and you'll say at the name of your monorepo slash the name of the individual package this case i'm just naming my monorepo wow and that's what i'm going to put here next up we're going to create a source folder and inside of there i'm going to say index.tsx um and here i'm just going to paste just a demo app at the one that we created so if i go to app app.tsx i'm just going to copy the app that we created so copy this paste it in and of course we need to install uh react and react native and stuff in here so let me just make sure this is finished running it is um cool so in here i'm gonna say yarn add we're gonna add react native and react and we're gonna add react at 16.8.2 all right so when that is done we're then going to install the dev dependencies for react native and then we're also going to install the typescript and then we're going to have to add a ts config to this so let's do that and i am installing this as typescript 3.3.3 and then this is just the latest types for react native even though we are using a later version of react native itself this is kind of the latest types all right so uh now we can say here i can just import this all from react native or whatnot it's taking a second to load instead of me manually importing this i'm gonna just give it a second and we're going to create a ts config all right so in our ts config i'm just going to copy what we have in the web and then we're going to make a few changes so for this we're going to say allow js we're going to remove that we don't want to allow js instead of isolated modules we're going to say declaration is true and when we set declarations to true we build the module what's going to happen is it's going to have typescript declaration files in it which is what we want and here we're going to say gsx is going to be react and then no emit i'm going to get rid of that and then module i believe we need to change this to common js and then i'm going to say in out directory i'm going to say is dist and i believe that's all the changes that we need to make to this file but when we build a project and then try to use it we'll see if we have any problems all right so this should be good loading it is so i'm just going to say command period and import everything in and it looks like text didn't get imported for some reason so control space and we'll import that and did stylesheet get added nope there we go instead of export default i'm just going to export it like that and that looks pretty good in the pangs.json we are going to say ts tsc and i'm going to rename this to build and what this does is this runs the typescript compiler and it's going to compile our code so if i come here say yarn builds and it's going to look in the source folder build it and we can see the dist so a couple things if you know this work correctly is in your dist folder you should see an index.d.t.s should just look like this i guess and then in your index.js it should look like this and you'll notice that there's not jsx in here right so it does not look like this where there's brackets and stuff that's jsx it looks like this and we're saying create element in here so that's important um yup so that is pretty much all we need to do in common i believe so next we want to basically use this code base and both of these projects so today we're going to start by adding it to the web so to do that we're going to head over to the webspace.json and we need to first add the common package as a dependency so i usually just come in here and i say wow common and then we're gonna set the version of it and if we come to common package.json it'll tell us the version is just 1.0 um oh the strong one so we're going to put that there and then after we add that we just need to say yarn so we're gonna cd over to the web and that's just going to add uh this common package in here uh and now if i go to my app.tsx instead of just saying hello from react native web what i'm going to do is delete this app and i'm just going to export the app which we get from that package which we said is wow common all right um and let's see if uh currently cannot find it uh i'm not sure i'm i just hit command and then p or if you do command capital p it'll open this little window i'm going to restart the typescript server to see if it actually can find the module the other thing you can do to double check is if i do an ls node modules i'm able to see whether or not it was added and we can see at wow is not there so that means it didn't get added for some reason so i either messed something up uh or it didn't get added for whatever reason so i'm just going to say yarn again or you know what i'm just going to remove the node modules all together and just have yarn run again and see if it gets added this time oh you know what we forgot one important step that's why it's not working so if we go back to our common package.json if we look at this main we need to specify where the main file is so for us it's going to be inside of dist and then index.js so let's add that real quick all right so now we're going to just i don't know if we need to reyarn if i go back to the app oh cool so you notice how it just went from red to orange i don't know if you're watching right there it also is no longer an error here so it was able to find this file now so we're going to say yarn start um and we're going to get this error about skip prefight check um or that we did some things wrong and it's going to tell us some things are wrong basically we're trying to access a module outside and maybe we're doing some other stuff wrong but we can just add this skip preflight check to the beginning and everything will work so let's go ahead and do that so skip preflight check is true now for those of you guys that are on windows to get this to work we can add cross m in front of this so i'm now going to add cross m as well and it doesn't matter what uh version of cross mv you get it should probably work and that just makes this work on windows all right so let's do yarn start again um and if this works correctly what happens when this starts up is we should see this little app counter that we have where we can click on it and it's going to increment the count using hooks in our website so it looks like no crashes come over here we see our little welcome to react native can increment and that's our hooks working so awesome so what we just set up is a common package which we are now using in the website so getting this to work with react native is also a little tricky so that's what we're going to save to the next video and so we're going to import basically this common package or get the common package working with the app as well and so what's going to happen is in the future we're just going to be coding in this common folder and then both the web and the app is going to get this code and should basically be building the app and the website in parallel now i just want to go over real quick a few things that is important about what we set up because this can be kind of tricky to get working so if it is not working for you these are the few things that you want to check so you notice i was coming over here and i was saying ls no modules and couldn't find it i think what i was doing wrong about that is one it should be in the root folder and there it is so if i do ls dot dot dot in the root directory or the root mono root mono repo we can see the wow folder and we can see comments so that is important to be able to see so the thing is again this was important we we missed this at first you want to make sure that you have index or this dist this main is pointing at an actual file that exists and that's pointing at disk index.js one other thing i want to add real quick is i'm going to add this thing called rimraf so this is going to delete the build folder or this disk folder every time we build that way we don't have stale data in there so i'm going to say remraftdist and we're going to build okay so i'm going to cd back over to common and uh yarn add as deficiency rimraf and this doesn't really matter what version either and so what that's going to do is it's just going to delete the folder and then it's going to build it each time and if we do yarn build nothing will really change but that just helps get consistent builds sometimes i get funky stuff when i don't do that the other thing is with the ts config there's a couple important things make sure the jsx is set to react make sure that the module is commonjs and the last one is declaration is set to true and so when you build stuff you get a nice dist that has the right output that we want and notice we're saying include source here that's how we know it knows to build the source folder right there as well and that's pretty much the key parts of getting this to work i think and then after that we just add of course uh this to our package.json the wow package or the common wow package we're going to use this common package that we created and use it in our app package which is based on react native now getting yarn workspaces and importing from our workspaces is actually a little tricky with react native and we're gonna see why that is in a couple minutes as we kind of run into some of these issues and we'll deal with some of the workarounds to get it to work so to start off though we are going to just install or add the dependency to our package.json in our react native project so i'm going to say at wow common that's just what i named it and i'm going to put version 0 here and then i can go to the i'm right in the packages app right here and i have yarn to install that um after that in the app.tsx i'm gonna just replace all this code that we have here with the app so i'm gonna delete this delete this delete this and then the app is going to be coming from that common package and then here if i just say app we can have this is what we want to render now uh if we tried just starting up the application right now we'd actually get an error we can try that if you want so we can say yarn start and it's going to say cannot find module now if we go to our package.json we can see why that is so it's trying to start the react native cli and you'll notice the path it's looking for node modules and then the react native one and if we just do an ls to see if that exists react native we'll actually see that the file does not exist or the directory does not exist and the reason for that is we're using a yarn workspace and so how yarn workspaces work is they hoist up the modules so what that means is it's actually sitting in our root directory so if we do an ls and we go up two directories into that node modules and we look for the react native package you'll notice we will find it that's because it was hoisted up so we can avoid this problem because we basically want it in this current directly current directory we could lift it up if we wanted to but i'm going to say no hoist so this is a trick that you can use with yarn workspaces and how it works is we can specify either in the root directory we could use that or in the child directory which we're going to be using no hoist on the react native package so i'm going to copy this and i'm going to paste it in my dev dependencies or sorry not my dev dependencies but in the package.json at the bottom and i'll link a link to this article this kind of goes more in depth about how no hoist works but basically what's going to happen is the react native dependency instead of being in the root node modules it's going to come down to the node modules that is in the app now whenever i add a change like that like i just added the no hoist option here i like to just destroy the node modules and reinstall them because usually stuff gets messed up in the middle also i just saw this was being unsaved i'm just going to save all right there all right so i'm going to do remove um and i'm going to remove rf both the node modules that's in this current directory and also just the route as well just to be safe sometimes stuff gets messed up now the next problem we're going to hit is after we get this it's going to be able to start up okay but what happens with yarn workspaces is to be able to access this common package and to be able to make changes to the common package and not having to do a yarn install every time is they use sim links now one of the downsides of react native or one thing that doesn't work with react native very well right now is sim links so what we're going to have to do is work around it so one option to work around it and that worked out real quick we'll talk about how we're going to handle sim links in a second let's just look if our node modules worked so if i do an ls on this node modules slash react native you'll notice it's now here so if i were to do a yarn start it should indeed start the packager now the other thing i just want to mention is i have my application up and running over here or my simulator and if i try to reload this right now it should have a problem yeah perfect well not perfect but here's the error at wow common does not exist in the haste module map so this is where it can't basically get the sim link that we're using for that now uh one thing i want to mention real quick is uh to start up my simulator over there i just did uh yarn ios which ran uh this over here um let's start up the simulator and the other thing is when i was starting it up because i moved this into a different folder when we were setting up the workspace there's this ios build folder right here that has a basically cached version of the build and it had the relative directories all messed up so i had to delete this build folder to get that to work so you may have to do the same thing if you were on mac i'm not sure if there's equivalent for android doesn't look like it all right so uh so we started that we need to handle this next error now i'm not sure the best way to handle sim links in react native right now i'm not sure if there's a standard way because the default bundler that comes with react native i don't believe works with it and there's a ton of open issues about it so hopefully that'll be fixed soon but one way that's super easy to fix it is this this one library called wml and basically what this does is we can just specify a directory so for us we're going to specify the common directory and it's going to basically copy over the files every time we make a change so we're going to be using that so if you don't have this already installed on your computer you're just going to run npm install and it's going to install globally so after that what we're going to do is uh control see this is we're going to say add and we're going to run this command right here so we're gonna go up a directory and get the common folder and then we're gonna put it into our node modules at wow common so you'll notice here this is just the name of the package and here's where the local directory is all right so if i do add i'm going to say yes ignore node modules and then what i can do is wml start so now what's going to happen is anytime i make a change in the common folder over there it's going to copy over all the files and where it's going to copy is that node modules slash wow if we take a look at that we can see funny enough it looks like our app is here i'm not sure why that's there slash common and we can see our code is there now uh i don't actually want uh it kind of looked pink there and i don't want it to be pink uh because that usually means it's a sim link but uh let's just see if this fixed it so uh yarn start and if it didn't i'm just going to delete it and then recreate it so let's reload this um yeah see i didn't think it would and i'm just going to let's do an ls on it again just to make sure um okay when i do an ls here it showed it like that but if i didn't ls here oh this is because i'm in the root directory that was just my bad all right let's come back over here so one thing i notice about the air is it's coming from react or it's coming from not being able to find the module react so what we can do is we can say no hoist on react as well as react native and that should be able to find it so i'm going to just copy paste this and i'm going to say react here instead of react native give that a save and then i'm just going to remove the node modules and the parent reason being if i remove them locally it's going to destroy kind of our sim link setup or our wml setup so i'm just going to say remove the root one and do yarn and that should add it for us and then when this is done what we can do to double check this works is again we can just do an ls on the node modules and make sure that it's all there another thing is to make sure your wl or wml thing is working is you can go to uh packages app and if we do an ls there on common uh oh it's mine oh i guess it deleted mine even though i didn't want to delete all right we can just restart it so ctrl c and we'll restart that and let's come back over here all right so it exists and if i go into dist you should be able to see the index.js that's all good because this is what we're actually importing is that index.js from the dist folder so you want to make sure that's there and now we should have a node modules react it should probably be done loading yeah so i'm going to come back and just say yarn start and start the packager and then get this running all right cool so that looks like it's able to load down and we can increment so it is working so as you can see it's a little tricky to get this set up but the gist of it is we had to know hoists and things so bring some modules down so in our case we had to do react native and react and then after that the other tricky part is making sure that the packages that we're using are sim linked or in this case we didn't want them sim linked so we had to bring them over by using wml and to do that we said add and then we say start which actually moves them over now whenever we make changes to the comment it should move it over so we don't need to do anything there as long as we have this up and running the other thing is if we were to add more packages we wanted to depend on we'd have to wml add now there are some other ways to achieve this same thing i believe in the past i've played around with uh i believe it's called like react native config or something where you can kind of get it i don't know if that solves the sim link problem or if it solves the no hoist problem but one of those but it can be a little harder to set up where this is not too bad to set up so i figured we'd start here and if we run into more problems we can investigate that later and then the only other thing is as we program stuff in the future we're going to be basically just doing stuff in the common folder and then the app should be getting the updates and the web should be getting the updates at the same time and i'm pretty much just going to focus on what it looks like on the web just because it's a lot easier to get set up and to also just view it and watch the renders in real time versus react native we're going to be going over how you can use mobx with react hooks to start off we're going to install two libraries in the common package the first one is going to be mobx at version 5.9 and then we're going to be using mobx react light at version 1.01 and this library is going to allow us to actually get it working with hooks so we're go ahead and install that and for those of you that are not familiar with mobx what we're going to be using it for is state so it is a state management library now to start off we're going to be inside our common package i'm going to go to source and create a new file i'm going to create a folder outside which i'm going to call stores and we're going to say counter store dot ts so here i'm going to say class counter store and i'm just going to close that and we're going to have a single field which i'm going to call count and it's going to have a default value of 0. now i want to make this field observable so we can do that with mobx by saying observable and we're going to import that and that's coming from mobex now it's going to complain about this if we hover over you can see tells us we do not have experimental decorators turned on so we can go over to our ts config and turn that on and so here we're going to say decorator it's going to be this experimental decorators set to true if i give that a save and i come back over here it should no longer be complaining about this now and i'm going to say export const and we're going to say counter store context and we're going to say create context and that's coming from react and then we're going to say new counter store and give that a save now this counter store context is what we're going to use in our components and then we can basically interact with the store that way so now in our index.ts we had a basic example before where we were using use state to store the state of a counter and then we were incrementing it so now we're going to start by making this work with mob x we're going to start by wrapping it with an observer and we're going to just wrap the entire function there and now observer is coming from that other package we installed so that's mobx react light observer and then here instead of using use state we're going to say const counter store is equal to use context so we're using the use context hook and then we're going to pass in the counter store context that we created so now what i can do is i can say calendar store dot count to display the count and then when i press on the button i can say counter counterstore dot count and then we can just directly mutate it by incrementing it so cool so now i want to see this and see if it works so to start off i have my server already running for the website so i have that up and i'm just going to compile the code here so i'm going to go to the package.json and i'm going to add a new flag that'll make this a little easier called watch and so we're going to say ts tsc and we're gonna say dash watch and so what's gonna happen is when we uh run this so yarn watch it's going to compile our code and watch for any changes we make and real recompile it all right so here is our website just give this a refresh and then if we increment you'll notice it worked just the same as it did before um so pretty cool and uh mobx looks pretty sweet being able to just mutate it like that is pretty simple i like that so of course we're going to be using mobx for the state management for our application so we're going to be using it to store basically the state for working out or for workouts so we're going to start by creating a new store today and i'm gonna call it the workout store and here i'm gonna say class workout store and today we're just gonna map out kind of a few different things that we're gonna store in this so there's basically four different uh or five different exercises that this workout uses so we're going to store that all in the store and we're also going to start off by kind of hardcoding things and then we're going to go back later and possibly make this generic and work with say any set of exercises so the four exercises is squat or five exercises is squat and what i'm going to do is i'm going to call this current squat and when i say current squat this is what it stands for is kind of like how much are you currently squatting and this is going to be a number so for example you may be squatting 500 pounds or 100 pounds and we're going to track that in this variable let's see why it's unhappy oh has no initializer um let's turn that setting off for now uh initializer strict property initializers is i think what we need just turn off to be able to get rid of that warning say false and cool and then we're going to say squat bench press overhead press overhead press and i guess let's be consistent i said press there do press there deadlift and that'll be a number two and then lastly is the barbell row all right so these are the five exercises and again i've kind of hard coded it here we could also go with the approach where we kind of have this in an array but i'm going to start dead simple and then we're going to kind of refactor things out and make it more dynamic as we go we also need to know so how the workout works is we're going to have two different days like a a day and a b day and so we need to know what our last day was because we do a different exercise on each day so for example i don't know maybe on the a day you do squat bench deadlift and on the b day you do squat overhead barbell something like that so we're going to say last workout type and we're going to make that a a union so we're going to say workout type is equal is either an a day or a b day and so that's going to be of that type workout type or why don't we call this workout day that makes more sense either an a day or a b day so we're going to say last workout day well i don't think last workout day really makes sense we'll say last workout type is fine and uh let's make that a lowercase oh i suppose um and then the last thing that i can think of at least to start off with is we want to know the history of what lifts that you've done and so we can keep track of that and the way i want to keep track of it is kind of a dictionary that way we can keep track of in the key being the date so what i'm thinking is create an interface which we're going to call history called workout history not to confuse it with any other type of history like browser history or something so the key i'm thinking is going to be a string representing the date so we're going to say key of string and here i don't think i need to say key i like to say key and then the value of this is going to be i guess an array and the array is going to have basically the values for that day so here i'm going to call this the movement or the exercise is a better name exercise is a string and then the value which is a number so for example uh what that might look like is i'm thinking something like this so on the 18th so uh let's see what month is it i don't know like o2 18 2019 is going to be the key and then the value is going to be array that looks like this and then the exercise might be squat and then the value might be like 90. so this day you squatted 90 pounds and then right maybe you also did bench press that day and did that for a hundred pounds so this is what i'm thinking the data structure to be and we may improve this data structure a little bit and add more fields to this later on but this is what i'm thinking for the start of it anyway this is kind of the start of our store uh let's go ahead and just add the type real quick um and then the next videos we're going to continue kind of working on this store and start adding some components and start rendering some things for it but before we end this video let's just export this so export cons workout store context is equal to create context new workout store so i was wanting to go over navigation today specifically adding a button here that was like start workout and then we'd be transitioning to a new screen and to do that i was planning on using react navigation because i saw they have a react native web version and it works really nice for a react native so it'd be nice to be able to use it but after i tried out the example i saw the reaction of web one was kind of just meh and i didn't see a great way to integrate it so we could have one kind of routes that would work for both the native and for the web i didn't see a great way to do that and they didn't have typescript types so i was like let's go check out how devhub does it to see how they were doing navigation and it turns out they actually have just a ternary operation and they have just two screens a login screen and a main screen and that's how they're picking and our application is not too complex so i figured we might as well do it in a similar manner and use mob x to keep the state and just kind of have a tern area where we switch which page we're displaying because react navigation at least for the web seems like it still has some time before it's production ready slash really a good choice so that's we're going to do in today's video so i have the app up earth website up and we're going to create a in the common package a new folder here and i'm going to call this routes actually i'm just going to create it as a file called routes.tsx and this is going to basically where i'm going to store it so i'm going to export cons routes and we're going to return null for now now i said we're going to store this in mobex so i'm going to create a new store which i'm going to say routers or i guess route routes store i don't know if that's the best name for it um then i'm going to come over here and just copy the counter example so route uh actually you know i like router store better just thinking about it let's go matches this better i guess well i guess i call that routes oh well uh so i'm going to say router store here router store context and then i'm going to say this is going to be a path and the default path i'm going to say is the home page which uh actually i'm going to call the home page the history page because i think we're going to store the workout history on the front page so i'm going to call that history and then actually not well so the history kind of implies like uh navigation history or route history so i don't want that to be confusing so that's just kind of what went through my brain with the naming convention right here um so you know what maybe we'll go back to home but i think i'll keep it for history for now um maybe i'll come and switch it later as you can see i'm not great with naming things um all right so we have this and so we're just gonna use this in our routes over here in the same manner that we use the counter context so we'll use that so this is going to be the router store use context router store context let's import use context and come back to our router store not router store we just need to use observer around this i was going to copy and paste but there's not really a good way to copy and paste it so we'll just let's do that and then we need to import this from the mobx lite so that is this one right here for a reason it doesn't autocomplete well for me at least when i do like uh control space uh just kidding it worked today so actually we're good to go and so what i'm thinking here is we'll just conditionally render stuff based on what the router store value is so if i go to i'm going to create a new folder now which i'm going to call modules inside of there i'm going to call create a history you know what yeah that's confusing let's just call it home no i'll call workout history there we go that's what i should really just do to make it super clear so we'll say work out history um and here i'm gonna say export const workout history and i should really one i already have a oh this should be tsx tsx uh i forgot i have the uh rh uh thing that i was gonna use this is my uh template they just create a react hook or a snippet so let's use that to just save us a little typing workout history uh and so the workout history is just going to say view text workout history page for now import all that import the text as well and we're going to have just empty props for now give that a save and then the other screen is going to be the current workout dot tsx and uh you know we could just copy what we have over here because we're gonna do the same thing and just rename it that'll be the fastest uh and i misspelled page but that is okay current workout page and let's rename that current workout page okay so let's just recap what we have so far i made a dummy component called current workout i created another dummy component called workout history and these are basically going to represent the pages of our application we have a mobx store that's going to store which page we're actually rendering and using this path and maybe path is not the best name really it should be like i guess say screen is the best name for it i suppose uh and then in routes over here this is what's going to display and you know what instead of routes we could really call it router i think that makes more sense because that's really what it's doing so what we're going to do here is basically decide which one we're going to render so here we can say router store dot screen is equal to workouts history and you know what i should make this uh this a type a union type and then we get auto completion so uh you can say route workout history is really the only route right now all right so now if i do that i think we should get auto completion here yeah so pretty cool you get auto completion on strings because it knows that the only possible type this can be is workout history so there we go so if it's equal to workout history we're gonna render the workout history screen otherwise we're gonna just render the current workout current workout page i just want to call it current workout not current workout page so let me get rid of that uh so we'll rename that there and then that's good there uh and looks like i need to import to react at the top uh so this router now is what's going to be uh rendered over here so uh we have all this junk and we're saying export const app now i'm just going to say export com actually we should just say export all from router actually that's not what i want to do i want to say so what i'm trying to decide is if i want to actually keep this container style and i think i do so i think i'm just going to get rid of all this stuff here and do this and so now we'll have router like that okay i think i like that so i'm gonna get rid of this we don't need an observer here and we can get rid of some of these styles all right so now what we're doing is we're rendering our app which just renders the router and then that router has these two screens right here so let's look at that so we have this it's his workout history page um and so now if i want to change pages we can add our observer um observer and then we can get access to the mobx state that we used or the router store and that allows us to say use context and we're going to say router store router store context and we're going to just add a button to transition so this is going to be like create workouts and actually on react native you say title so create workout like that and then we're gonna say on press and we're gonna say router store dot screen is equal to workout history oh you know what it can be now two possible screens so button react native is where import it from so let's go back to our screen over here so it can either be workout history or current workout so we're just going to transition this to current workouts give that a save uh so now if i click that it'll transition me to the current workout page and of course if i refresh it's going to take us back to the home page or the workout history page so cool and we can add a button back over here it says like go back or something which we'll do in the future and this is going to be basically how we're going to store or access the router state is we can just access it through the uh router store context that we created with mobx anyway so that's how we're going to be handling navigation it's just through this mobx store because one it's dead simple um and it will work and looks like it is you can actually use this in a real application and dev hub has had success with that anyway guys uh there's one last thing that i want to do before i end the video and that's just to make this style uh a slight change to this so i just want to make so this wraps or that this is kind of like phone size so if i right click and inspect i can click on this we can get what the size of like a phone is so for example we can get a large mobile phone is 425 pixels so i'm going to just set like this container to 425 pixels or i'm going to create a new one which i'm going to call a wrapper so style wrapper styles.wrapper and what my wrapper is going to do here is all it's going to say is the width is going to be 100 but it's going to have a max width of 425 reason why i'm doing this is because i don't want my content to just like stretch uh the entire screen as it gets really big and i kind of just want it to be centered right here at 425 and that be where it stays so that's the plan is to have like this little wrapper and i think i want the color i can't decide if i want this color in the center i think i do so i'm just going to move the background color to here and have it like that um the other thing that we need to do is you'll notice that the color doesn't extend the full screen if i hover over this we're not currently doing or we're not uh this is this content if we hover over you can see that blue it's not taking up the full screen there's actually something in the react uh native web documentation about this how we have to make the height 100 so we're going to do that real quick because uh that will be helpful so this spans the whole screen as well so to do that we actually need to touch some html so we're going to go just to the web public index.html and all we're going to do is we're going to add a few styles so we're going to say style height 100 is the first one we're going to add and we're just going to add that to both the html the body and the div because those are all the things that are uh not 100 right now uh so if we look at the html is now 100 body the div and now i think this we can set it as 100 i think now and then it'll be able to match also one thing i noticed when i was uh kind of digging around with this is the inspect tool's kind of broken with react native web or at least it's not as good you'll notice if i'm like looking at the styles of stuff it's kind of broken up a ton so like let's say i want to see what color this button is it's not really clear and everything's broken up into 100 properties so the inspect being able to inspect and basically replace the css and stuff is not exactly something you can do with react native web because of that and how many just classes they spit on to this but anyway that's just the side note that i noticed if we come back over here we can uh say this is has a height of 100 i think we're saying flex 1 so i'm not sure what else we need to add to make it i think that was the only things that i saw in the docs to make the height 100 um i guess we have to target this guy right here and set its height to 100 which is this is kind of the outermost div that we just did or the outermost view so i'm gonna go check the react native web uh docs in the next video we'll make sure this spans the entire page because we kind of want it to we're going to be building out this card as a component it's going to be keeping track of basically the current user's workout so for example as they're squatting they're going to be marking how many reps they did and keeping track of their sets with this now before we actually build this component out there's one thing that i want to do real quick when i left you last we wanted to fix the height of our application because right now it's not stretching to the very bottom and we can easily fix this by making two changes the first is in our public index.html we want to just come over here and uh this div which has an id of root we're gonna add a display flex on it and then after that in our index.tsx if we come back in our common package we're just going to say on our wrapper a flex of 1. and so what that's going to do now is uh this div is going to allow whatever content is in there to grow i'm in flex and then we said flex 1 to make it grow the wrapper grows and also the container grows and now it goes all the way down the screen so we're able to fix that all right so now we're going to get on to this component and start building this now before we actually start building this component i thought it'd be helpful to kind of go through how i look at this and what goes through my brain when i'm kind of like envisioning how to build this i know this is a little bit blurry but it'll do and we kind of get the general shape of everything so when i see something like this i actually kind of in my head break it up into a lot of different boxes because most layouts what i'll do is i'll break it up into big boxes and then smaller individual boxes and that's usually all layout is a bunch of boxes even though this may not even look that boxy so to start off the first thing that i kind of think about is like i see the edges right here and just the container itself i think about so the first thing i noticed is like it has rounded corners so we're gonna have to add a border radius to the container then i notice there's a little shadow so we're gonna have to add a box shadow for the container itself and then i kind of go into the content itself the first thing i notice is there's some natural splits so for example the content is kind of split in the middle here so we immediately see we're gonna have like a view on top which is going to be this portion and then we have a view on the bottom which is this portion itself that was like the first big split that i saw and so you can already imagine our container may display the flex direction maybe a column and we'll have this on top and this on the bottom and then we'll notice this is going to be a text field and if we look at this we'll basically see there's a little padding on the side here and there's a little padding on the side here and then basically there's a ton of space in between them right so i imagine we're going to do something like space between there's a justify content setting which basically spaces this and pushes all the space between the items so i imagine we're going to have a view here then we're going to have some text some text and then our view is going to say justify content space between and it's going to spread them like that and then the bottom view down here we can take a look at this again we're gonna have some space in between and we'll notice they're equally spaced out and basically this is just a bunch of boxes again so we just have a bunch of boxes and they just repeat each other the boxes themselves have a couple states we can see that here this has like some numbers and this has just blank but this is actually not too complex right so we're going to have some padding of some sort on this as well equal on all sides we're going to notice there is a border radius around it so we gonna have a circle and then inside of this so this is going to be a view right and then inside of the view is going to be some text the actual number itself anyway that's kind of how i like break it down the layout before i even start coding i actually like will think this all in my head and kind of just go through how i break down the ui and that's kind of what i imagine each little piece to be uh all right so now that we kind of have an idea of what each piece is let's go ahead and start making this so i said the first thing we're going to start with or at least the first thing i think about is this outside container so we're going to kind of create that so let's hop on over to our code and i'm going to make this into its own component and i'm going to create a new folder here called ui and i'm going to call this the workout card dot tsx and the reason why i made i made a folder for it is because i see this as a piece that could be used across our application it's kind of like a shared ui piece so i'm going to say rh for my react hook snippet and we're going to say workout card and so i'm going to say rnss this is my snippet for style sheets and we're going to start by having an outermost view and so this view is going to be that card that we just talked about and let me just push this over a little bit so we're going to say card and we're going to just apply that style onto this real quick so we're going to say style styles.card and then just for the sake of viewing it i'm just going to say text hey guys i'm going to import that and i'm going to import all these things so i just hit control and space to bring up the intellisense and i'll do that other other thing i wanted to mention is you don't always have to do the hotkeys too there's this little light bulb that sometimes appears you can click on that and then i'll do the same thing where you can auto import things all right so now we're going to deal with this card style so i already said the border radius we're going to have something it didn't look too bad some say like a board radius of 3. the background color was white so we're going to say fff and then lastly was that box shadow and i actually didn't even know how to do a box shadow and react before i did this so i just went on over to or sorry react native so i just went over stack overflow and saw this answer and we can use these properties uh to add a box shadow and then and all these chat uh variables we can kind of play with a little bit to get a better shadow uh i played with the numbers a little bit and i thought width of two height of two and then a shadow opacity of point three looked pretty nice but uh basically you can do whatever you want and i think i also set the shadow radius to match the shadow ray or the radius that we used up here so the other thing i like to do is just to render this right away and kind of get a feel for what it's looking like so i'm going to just go over to the current workout screen that we have and i'm going to just render a workout card workout card and just to get a feel for it the other thing i'm going to do real quick is add a style sheet here i'm just going to call this the container and i'm going to set the background color just for this page to be fa fafa that way we can just see some contrast between the actual background color of the card and the background color of this oops we're gonna say styles.container all right give that a save and let's go take a look at our content i don't know if i mentioned this but i'm gonna have just like the uh yarn watch running on the common package and then i just have my server running from the web so those are just kind of constantly running throughout the series all right so let's go over to that page by saying create workouts uh here we can see our card being rendered um the other thing i'm going to do is just add a little bit of margin everywhere so i'll say like a margin of 10. that way it's just not up against the edge and i can see it a little bit so there we go nice other thing i'm going to do real quick is just head over to our router store and set the default state to current workout so we don't have to have the screen change every single time all right so this is a good start for our card so why don't we start making uh the two uh top view first so i said there's going to be a view here and a view down here so we're going to create those two so uh back to our workout cart so here i'm going to say this is going to be like our top view and then we have a bottom view and uh here we're going to say flex direction is going to be a column that way we get them stacked and again i can display some text if i want to and just say bottom for now because we're going to fill on the top first so for this we saw some text and this was actually the workout they're doing so why don't we take that as a prop so here i'm going to say uh exercise and that's just the name of the exercise and we're just going to take that as a prop and we'll render that here uh and then on the other side we saw was i believe was just uh i guess the amount of reps that we're doing and then for the weight that we're doing it at so we could just say um here we'll say reps and weight as a string and we'll take that as another prop that we're gonna have on the right side so reps and weight um and i guess it's the set as well but uh that'll cover it so actually not i guess we it's better to be the most clear so uh one thing i can do i don't know if i hit f2 uh it brings up this little window i don't know if it's going to rename it here and here let's see if it does or maybe if i do an f2 here it'll do it so i'm going to say reps sets and weight i don't know if that really uh that really even looks that good of a variable name i think i like reps and weight better it just looks a lot cleaner all right anyway it didn't really f too well all right so let's add that so i'm going to say exercise it's going to be squat and the reps and weight is going to be a 5x5 and we're doing 260 today um the other thing is if we look at our workout card right now i believe the text probably is like all mashed up against each other nope it's actually rendered below each other that's kind of interesting i would have thought they would do you know what i think the default might be a flex direction is a column instead of row maybe i can't remember anyway so we're going to add a style to this that way they are next to each other or not next to each other at least on the same line so here i'm going to say top row and we're going to say flux direction is a row and then we're going to say justify well let's just see what that looks like for restraint before we add the next step so we're going to say styles.top row and now they should be side by side nice and so now we just want to add space so this is on the other side over here so for that we're going to say justify content space between and so now it's going to just jam space between them and they're now on the sides so i mean the next thing is we want to just add some padding and we're basically adding padding all around the cards itself so i can just say on my card up here you can just add a padding of i don't know like 10 or something see what that looks like um that looks pretty good we could maybe add a little bit less it also looks a little spacey on the bottom but we can make these little changes later the other thing i'm just capitalized squat and over here i'm now going to just maybe make the text a little bit bigger so here i'm going to say top row text and i don't know font size 16 style styles dot top row and then same style we're going to apply to the other one as well all right let's take a look at that awesome uh so let's do the bottom row now so we have this part and let's go back to our whiteboard we don't really need this anymore so the bottom row again we're gonna have a view and you'll notice it's kind of a row and then we're just going to basically be looping through um these five different things so let's actually add the prop for that first so this is going to be basically these sets and this is going to be um i guess this is really just an array and it's going to be the values either i think i'm going to say the value is a string because there's a couple different states one of the states is an x marked through it one of the states is blank and the other state is a number with a color so five four three two one and so on so i'm gonna just say this is a string array and i guess i guess this makes more sense to say reps but we already said is this really is this considered reps or is this considered set um i guess it is sets this makes more sense i think um all right so we have an array of sets and we're basically going to map through that and render them here so we're going to say sets dot map and for each set we're going to return a view so first off uh actually i'm not sure the best thing for the key itself i actually think the only key we have for this is going to be the index so key we'll say it's the index because there's really nothing unique about the set themselves it's just going to be the number five or something all right and i guess we could say set plus the index that may i guess makes the most sense all right so this view is going to be that red circle thing so we'll style that in a second because it can possibly again be three different states so why don't we say um if set is equal to x then we're going to return just the text x and we're going to style this in a second if set is blank we're going to just render a blank text otherwise we're going to render the circle right here and for all of these we're going to have to say a key so key all right the other thing is this is also going to be a row so why don't we just add the style for that real quick so this is going to be the bottom row and flex direction is going to be row and then the uh we're gonna use justify content and we're gonna say space uh we wanna do space between but we also wanna do i think i don't know if space between or space evenly is gonna work out better well i'll just have to see what it looks like all right so why don't we start with what the red circles look like and render that first so we're gonna have some kind of view with a large border radius so i'm gonna say circle is going to have a border radius of say 9 and then we're also going to have to set a background color and i thought it'd be kind of nice to instead of just copying their color scheme to make our own color scheme so i just went to color.adobe this is a nice little tool uh it has a little color wheel where you can put a color and it'll give you there's different ways you can do to create basically color palettes so right now i'm doing complimentary color palette for just white and so we're gonna make our little circles this green color all right so come back over here and we'll render this color for our circle all right so here we're going to say style styles.circle and then inside of that we're just going to render some text and we may need to like align this in the center and stuff and this is just going to be the set itself so let's go ahead and add some sets over here so let's say for now we're just going to do an array of five and we'll have that a couple times so five sets of five is what we'll do at first and let's just see what that looks like um didn't i say flex row i thought just see what i messed up with my card because they're all stacked did i do bottom row flex direction is uh a row so okay i just didn't actually set it okay so we're gonna say styles dot bottom row and let's see what that looks like now um all right uh we should we didn't actually do a very good job because we need to add i guess some padding to make it more circular so let's play with the padding a little bit i don't think i really made too many circles like this let's do like 10 just see what even padding looks like alright so this looks kind of blocky i think i just need to add like a border radius of way more maybe like 15 and then i'll get more circular all right we got an oval 20 uh is that as much as we can go so let's say padding of now 30. um that's like that all right let's say board rate is 30. um all right we're almost at a circle i don't know like 60. just get let's just get there i feel like there's probably an optimal circle amount here i'm gonna have to google this after i'm done with this video i think we'll just call this good for now and then i'll google if i just need to do i don't know if you're just supposed to set like a giant border radius to get a good circle or what because this is still looking a little weird here uh anyway so let's shrink the padding a little bit let's do like 15. um and then let's go ahead space evenly looks pretty decent i think the other thing is i want some like padding on the bottom itself i also want to make the text of this white so uh this is going to be circle text color is going to be fff so this is the circle text and then i want to add some padding to the top of this so on our bottom row i'm going to say margin top and let's just say like 10. i know 10's like the magic number today uh we could probably do like a wee bit more maybe like 14. all right um all right this kind of looks like what it should look like i think um let's go ahead and do the other two states so there are two states where there's an x in the middle and that it's grayed out all right so for us uh that's gonna be these two right here um and we're gonna use the circle in all three states that's something i didn't really think about so uh what we're gonna do let's copy this the only thing that differs is its color so we'll taste that and what we're going to do is just take an array of styles and here we're going to set i guess styles dot gray and all that styles.gray does is set the background color to gray and so this is going to render some text and it's going to be an x let's do a big capital x oops and this is just going to be a blank there's going to be nothing it's just a single view oops and let's close that tag alright so let's add the styles.gray background color and i don't know if i ca it came with a gray over here that would work um this is f oh all of them are fff this brown could work as well let's try that out um let's see if that looks funky or not i guess it's no longer really gray all right so let's let's render a few different ones so this is going to be an x all right let's let's do that one blank and this one's an x all right so these are two different states for it so this has a slightly different padding uh if it doesn't have a number or not so i think when i had to figure out how to do a nice even circle we'll fix the padding on this thing but i think that looks fine enough the circ the text itself we could probably uh increase a little bit on all of them so we'll come back to our card so i said circled text right here i think i'm going to just rename that to white text because i want to say a circle text and set the global font size by the way i did f2 to rename that that's how that little popup came up and i think it renamed it down here automatically for me so just a heads up on that so circle size we'll say font size of let's do 15 again or did i say 16 above we'll do 16 again and then i can set that here so style styles dot circle text and we'll do that here as well so it's going to be white text and it's going to be styles.circle and one last thing i want to do is actually make this x like more of a gray color i think i already did gray here this should really be the background could be like faded background because we could change the color on that so this is gonna be gray text and we're gonna say color and i'm just gonna say gray uh and you know i spelled it with an a there and an e there all right so let's add that styles doctor let's take a look now we kind of grayed out x that's kind of the feel i think they had on theirs so there we go that's basically the start of our kind of our component card here um i think in the next video what we'll do is we'll perfect the circle itself uh also i wanna before we end the video just see how space between and space evenly looked um so space between spread it to the edges maybe that's better i think that fit more to what this was doing whereas on the edges yeah i think that was closer to what this was like so yeah we're going to make this interactive and actually respond to for example clicks and we'll also get the circles working so we're going to start by making these ovals into circles thank you guys in the comments for suggestions on how to do that and then we're going to be making them interactive so when you actually click on them they're going to change and then lastly i got a cool mobx tip in the comments as well that we're going to implement we're going to be doing a root store that we're going to set up today so to start off let's go ahead and fix these circles so we're going to go over to our circle style and we're going to remove the padding instead of padding just doing a height and width so a height of 50 and a width of 50. and then the recommendation was to do half of the height slash width as our border radius so in this case we'll do 25. so if we come back over here you'll notice they are way more circular now the number itself is now off the plane we can fix that by coming over to the circle text and just saying margin auto give that a save and now we have it centered the other thing i want to mention real quick is this gray that we put in there is kind of hard to read so i just went into the color wheel that we used yesterday pasted the brown that we're using and uh basically just replace it with this so just picked a different complementary color um and uh seems to work better so i'm gonna just replace the gray text that we were using so paste that in and that's what it looks like and you can see it still has that kind of faded view but it's a little bit more readable all right so let's start with this root store that i was talking about we'll start with that so the idea with this is we want to be able to access multiple stores so in our mobx we have a router store and a workout store and we want to access both of them and so one way to access both of them is for example we could say use context and we could say our workout store here in our router store and just have use context twice but downside of this we could have used contacts a bunch of times so it's kind of repetitive and also we may want to use the router store inside of the workout store or be able to access the data and vice versa so that's the what we're going to set up with the root store it's going to give us access to both of those things an easy way to access all the stores and also a way for the stores to see each other so we're going to create a file in our stores called root store dot ts and i'm going to say export class root store and the idea of this is we're going to be creating a field on the root store for every single store that we have so i'm gonna say router store and we're just gonna say is a new router store and uh we need to export it export and we're no longer going to need the context which will uh the router store context because we're just going to create a single context for the root store so i'm going to remove that i'm going to remove it from the workouts door as well and export it all right so back to our route so we have a router store and then we're going to be passing in uh this which i'll explain in a second so we're gonna do a workout store here as well all right so the reason why we're passing in uh this is that way we can access the all the different stores that are on there uh to be able to get this work to work we just need to go over to our router store and accept this as a constructor so uh let me just save all these files come over to router store and here we're gonna say constructor and here we're gonna take a root store as the prop or really this is just the first parameter of the constructor i'm going to say root store i'm going to say this dot root store is equal to root store and so what we get from this well actually let's add the type up here so root store is a root store so the advantage is now we can access it by saying this dot and restore dot and we can access for example the workout data in our router store if we need to uh and we're not going to be needing it in this video but we may need in a future video i'm going to have copy this over and just paste this into the workout as well all right and we're just going to import these and then back to our root store uh we're just going to create a context from it so we're saying export cons root store context is equal to create context and a new root store so now how we actually use this center application we can go back to our router here we're going to call this root store instead say root store context and now we just say root store dot router store to access it but if we wanted to we also have access now to our workout store so now we don't have to spam a bunch of contexts we just access it through that and then we're just going to do the same thing in our workout history that's the other place we're using the router store all right and oops that should be root store dot router store then let's import those give it a save and uh we're good to go all right so let's just make sure we didn't break anything if we come back over here and we see everything nicely i mean we didn't really break it it's compiling everything's good all right so that's the uh rootstore uh method or i guess you'd say uh uh abstraction i guess so uh next up we're going to make this interactive so to make this interactive we want to start storing stuff in our workout store basically we want to store the current workout and when the user clicks we're going to decrement the amount of reps that they actually did on that workout so for example this means that they did five reps of the squat all right so we're come back over here i'm gonna make these fields observable observable um and i'm just gonna copy that and add it to each field um and let's add a space paste that in all right and we'll remove that all right so now i made each one of these observable we're going to have an extra field on here and this is going to be like the current exercises that the user is doing so i'm going to say current exercises and this is going to be an array um so i'm going to make the call this current exercise so we're going to create this type and it's going to be an array and at first the array is going to be empty so let's create an interface for this current exercise and for this we're going to have a few things so we're going to have the weight which is going to be a number we're going to have the number of reps so num reps we have the number of sets and actually we're just going to say reps i think instead of num reps i think that makes more sense and then the exercise itself which is just going to be a string um so that's pretty much all the data that we need to know about this uh so we're just going to head on over to our workout history and we're going to just create a addon to this current exercise array so here whenever we transition screens right here we're just going to say root store dot workout store dots current exercises dot push so we're gonna add a few exercises for them to do uh right before we move to the screen so oh there's one other thing that we need to add to that we need to keep track of the sets that they're doing so sets is going to be an array of strings all right so here we're going to say uh the name or the exercise is going to be squat the number of sets is going to be five the reps is going to be five now the sets is going to be an array that looks something like this so five five five and i think later on we're going to make a function to automatically create this for us but we'll hard code it for now and the weight we're going to do at 260 today um and so if we wanted to we could do this a couple times and i think with push you can actually make this into a single call so if i just do a comma there you can do it like this and we can do another exercise so say we want to do the bench press bench press we'll do five five and then the weight i'm only going to do 200 on and then the deadlift we're only going to do one set so i'm going to say deadlift for 360 and this is all going to be x's all right and number of sets is just going to be one all right so let's go to our current workout so that is basically just going to read these values map through them and render the cards so let's do that we're going to first need to wrap this in an observable obser or sorry observer because we want to access that context so root store use context and here we're going to do the root store context and then instead of just having a single workout card like that we're going to say root store dot workout store dot current exercises dot map and so for each exercise which i guess we'll just call e we're going to return a workout card um so here i'm going to say the key is just the name of the exercise and we can say exercise there and then the this this little thing right here we can create so we'll make this a string template so this is the amount of weight that they're doing so e dot wait this is the number of reps so e dot reps and this is the number of sets so e dot num sets and then this is the sets themselves so we're going to say e dot sets so we're going to give that a save let's come look at that and it should just be rendering a couple cards but i messed up somewhere the other thing that i wanted to do real quick is uh oh we add observer here we're gonna have to add observer to the workout card as well because this is actually using the mobx values i don't think that's our particular problem though observer um the other thing i wanted to do real quick is just in our i noticed when this was blank that this was not the right color so if i come back over here and we go to our workout history um oh sorry it's current workout you notice how we set the background color to f a fafa it's not showing we just need to say flex one i believe so it stretches across the whole screen okay so now you'll notice we have like this light gray and then there's this light blue because we have some margin in our index i think um no we didn't add any margin here i don't know what we have a margin on i don't know if we set a margin anywhere in our application it could just be on the body itself that there's some kind of margin we do an inspect maybe we'll be able to see it we set a margin left oh you know what we did set a margin we set it right here let's change that to padding and there we go now we have fully grade all right so let's figure out what the heck is going wrong with this oh yeah so we're actually starting on this current workout page when really we are never coming over to workout history and adding the items to the array so that just means we need to come over to our router store and change the what the uh basically the starting route is supposed to be workout history so now if i come back over here we create a workout we can see the cards actually showing up so nice let's add a little bit of margin so that they are not just like smashed against each other but we can see we're programmatically creating our workout right here so that's pretty neat um so just go back to i guess the workout card and then in the card itself we'll just set a margin bottom of 10 that seems to be the magic number we've been using and create workout nice all right so lastly we just want to be able to click and this will be kind of cycle through so to do that we're going to just add an on press now we can't add an on press well maybe you can on press the view i don't even know if you can doesn't look like there's an on press property but anyway we're going to use touchable opacity that has an on press that we can use and then what we're going to do is take a on press function as a prop here so we're going to say on set press and what we're going to pass in is the index that they pressed and then it's just going to be returning void so this is the type definition for a function and so here we're going to say onset press and here we're going to say onset press and then we're just going to pass in the index so in our function up here we're going to have to actually handle this and actually update the uh the little circle so we're going to make this a touchable opacity and the x we do not need to make a touchable opacity so we can just ignore that so let's copy this and we're going to just paste it in here and let's just there we go and come back to our current workout now implement this onset press so this is going to be the set index and so what we're going to do is we basically know what the current value is so we say called v which is going to be the current exercise sets set index so this v is just going to be for example a string that says the value 5 because we're just getting the current set and so we're just going to check if the current set is blank because if it is uh we're gonna say new value is a string and we're gonna say the new value should be uh after you hit nothing it should be i believe five or really it should be the number of reps so we're gonna say e reps and we need to make that into a string so back ticks like that else if v is equal to zero it is now oops not returned is equal to an empty string single and then else the new value is going to be uh whatever the current value is minus one so value is currently a string so we're going to say parse int v minus one and then this needs to be a string so we're going to convert it like that and then lastly since we're using mobx we can just directly update the the value now i don't know if we can just update the value here that we're mapping through we can try that and see if that will work so i can say dot sets set index and that's equal to the new value all right so let's see if this updates when we click on anything now so go create and sure enough it does so we can just modify it there which is pretty neat okay so we can see we can cycle through that now um so click that notice click on the x doesn't do anything but so yeah so how this works is for example if i'm dead lifting i basically you know actually everything should start off at uh blank so go to workout history this should actually start out all blank not a bunch of fives it should look like that when it starts and then as i squat when i do the first squat i'll click it i did five reps then i did five reps and then here maybe i only did three reps and then here i went down to i don't know zero reps and i failed so that's kind of how you keep track of your reps as you're doing it so we're going to be building this little timer component at the bottom here today we're going to start with building out the ui and then we're going to create a mobx store that's going to increment the timer and keep the state for it now the purpose of this timer is after you complete an exercise you want to wait like five minutes or so or three minutes and then do the exercise again so this timer is going to keep track of that time for you and as you proceed it's going to tell you how much time you have left before you need to do the exercise again so let's go ahead and start off with the ui of this so the first thing is it's going to be at the very bottom and we're going to start on that now so the bottom we're gonna create a new ui component here i'm gonna call this workout timer.tsx and i'm gonna say react hook and use my snippet and then workout timer now we're going to render a view and you'll notice the view was at the very bottom of the screen so the way that we get something at the very bottom on the screen is we're going to be using absolute positioning so i'm going to say container style here and i'm going to say position absolute and then i'm going to say the bottom 0 and i'm going to say left of 0. that way it's starting very at the very left most and at the very bottom most next i'm going to give it a height of let's say 50 and a width of 100 uh then i'm going to set a background color for it and then for this i'm just going to go back to our color wheel and pick one of the colors let's go ahead and pick the green and paste that in and so i'm going to say style styles dot container and then inside of here i'm just going to say text and i'm going to say hello for now and we're just going to see if this renders a box at the very bottom of the screen so we'll import this and not view base view and we'll give this a save and then i'm going to just come over here to the current workout and render this workout timer at the bottom so give that a save then let's come back to our react application create the workout and you'll notice now we have a box at the very bottom and it says hello in it so that's kind of how we're going to position the box and we have to give it a height because we don't really have much content in this but i guess we could have done it based off of the content too but i'm just going to do a static height i think all right so the next thing is i'm not going to worry about the text in the middle i'm just going to have the timer on the left and then x on the right so this is going to be the text on the left and then this is going to be the x on the right so let's style each one of these i'm going to start with the x the x i'm going to again just pick a color from our color picker and i'll just go with this one and then the font size i'm gonna say as like 20. we'll see if that's too big and then this is going to be the actual time uh time text and this is going to be the color i'll say is white and the font size a little bit smaller maybe 18. right now i'm just calling it hello but we're going to be replacing that in a little bit so styles.time text and then style styles.x and then i want space to be between these guys again so in my container i'm going to say uh flex actually justify content space between and that should push them to the edges all right so let's take a look at it create the workout um it looks like i need to have them in a row so i'm going to say flex direction row flex direction grill that way they align and now we have them on opposite sides cool so next thing is i want to add basically some spacing some padding around it and basically center them so i'm going to say align items center and then i'm just going to add like a padding of 10 or something and we'll give that a save all right and we'll see what that looks like good and actually i don't want to add a padding because uh one other thing that we're going to add is kind of like a loading indicator at the top that's not something you can see in the screenshot but it's in the app itself is basically when the timer starts there's a little line that kind of goes across so we're going to be building that i guess we'll build that at the end when we have the state in there uh so this is basically going to be the time and then we have this little x i want the x to be quite a bit bigger i think maybe like 30 so it's easy to click on and uh i guess we want a little bit more spa uh space i guess padding on the side of that as well and i also want to make it uh touchable touchable opacity like that and then i'm going to say on press and then here we're just going to say uh a prop that we're going to take in here so on x press push and this is just going to be a function and that's the function definition so it takes no parameters and then returns void so nothing onexpress i'll pass that in there and so when we render it over here we're gonna have to use that on x press and for now i'm just gonna do nothing when the x is pressed so now it should be clickable so sweet and again let's add a little bit more i'm gonna say padding is like 30 and i'm just going to say padding on the left and the right side so that should be padding vertical or sorry horizontal because we're already centering it all right so cool so i'm pretty happy with this right now we can click on this the next thing is we want to make this interactive by interactive i mean this should be incrementing up as we kind of like a timer approach so to do this we're going to create a new store to keep track of this so i'm going to say workout timer store dot ts class workouts timer store and now what are we going to actually put inside of this right so i was looking at this one article and i liked their approach they were basically building a stopwatch with mobx and so that's going to be very similar to what we're doing so we're going to take a few cues for for how they kind of set up theirs so what they do is they have instead of for example creating the number of seconds that the timer has been running for basically you have a date the timer started off and then you do a difference between the start and the current date which we'll see in a second so we're going to create an observable here and this is going to be basically the start time um and so start time i'm going to just say is a new date but we're going to talk about that in a second what we're going to do instead and so basically what we want to do is also we want to know whether the timer is running so you create an is running variable and this is going to be false by default the other thing is i want to know the amount of seconds that i have basically passed so for example let's say we started a current date and then or sorry start a current or some time and then we want to compare the start time versus the current time and compute the difference in seconds so that's what this is going to store right here so the next thing is is we basically need to start the timer and we need to basically end the timer and then in the middle we're going to have this thing called measure which basically is going to be running every they did every 10 milliseconds i believe we're going to run it every second and basically it's gonna compute the difference but you'll see what this this will make more sense in a second and i'll link this article below if you want to check it out because it's pretty good uh so we're gonna create an action uh i we haven't really used actions in mobx before basically they're just a function that changed some of the variables or the fields in the store so we're going to do this start timer and i'm not going to worry about this check right here we don't really have that problem and no actually in our particular application we actually don't want it to function like that anyway all right so they what they use for the start time is they're using uh moment and so we're going to be using a slightly different library for that it's called day js so we're going to install that and it doesn't really matter what version you install that you're an ad so just go ahead and do that and basically djs is is a moment but it's not as large i believe it matches most of the apis if not all of them but it just does not have a giant bundle size and we don't really need all the features of moment anyway we just need the ones that djs supports really we're only using one function of it which we'll see in a second so we start the timer we're basically going to say we're currently running so we set that to true and then we get the current time and then we're just going to import djs here uh there we go and then we're going to call this timer uh and then instead of new date here we'll call new here we'll call we'll make it a day js as the default all right so let's do the uh measure action oops should be measure actually i can just copy their measure we're going to basically do that all right so their measure what they do is if it's currently so if you turn this variable off measure is going to stop because basically what it does is it recursively calls itself so as soon as we say false it's going to stop running so that's what that does what it does next is it sets the current uh difference in time so that's gonna be the seconds variable for us since we don't really care about milliseconds and then lastly it's gonna do set timeout and so what set time it does is after this many milliseconds it's going to call this function and so you notice it's calling itself so it's recursively calling itself waiting 10 milliseconds for us we just care about seconds so we'll do that and then this i'm going to call this seconds and we're going to say djs.diff and then we just have to say the unit that we want back in this case uh the second so what's going to happen is djs creates a date object and the current time so it's going to say the current time difference to when we started and that's going to be in seconds all right so we have start timer the last thing we really need is just to end the timer and to end the timer it's very simple all we do is we set is running to false and then that stops it from basically continuing to measure itself over and over again and by the way whenever measure gets called basically we're going to be able to see the new value of seconds and that's going to rerender our application so that's how that's going to work and then we basically want to just add a helper here which i'm calling display and it's similar to what they did and we're going to say computed and this is going to be display and so we haven't done a computed property either so a computed property is basically it uses some of the fields and it generates a new field based off of it so for example we're basically going to take the current difference in seconds so there might be 30 seconds difference and we're just going to format that into a string so we're going to say and also this is going to be a variable that we want to actually i'll show you guys the difference before i'm going to add the get keyword but i'll show you what the difference is with including it and not including that is so here i want to display the number of minutes so i'm going to say this dot seconds divided by 60 and then i'm just going to say math.floor on that and i guess i can say const minutes to be super clear and then the number of seconds right is going to be this dot seconds mod and then all i want to do is i may want to pad this with a zero as well but i guess why don't i show you guys what this looks like first minutes colon seconds all right and now if we go back over to our current workout i want to pass to our workout timer the current time so we're going to say current time and we're going to say this or sorry not this we just need to access our root store and we'll say root store dot and now we want to access the workout timer store so we need to add that to our root store so let's go to that and we're going to say workout timer and i'm not going to worry about passing this in because we're not going to need it so now we can access that over here and we're going to say dot display and we'll come back over here and we're going to say current time is a string and so instead of rendering hello here we're going to render current time uh and if i come back over to this you'll notice i'm calling display like a regular function now if i want this to be more of a property that's constantly changing instead of calling it as a function i can do that and that is what that git keyword does so when i say git basically it's going to call the function to get the property and now we can use it as just a regular property and we can access the field like that so pretty cool so let's just see if we see stuff and we don't get any errors oh let's rewatch now you'll notice we're not actually starting the timer so that should uh we shouldn't see it ticking but if we right here on the workout card when we press on a workout um i guess we'll do it at the bottom here now i guess let's just do at the top i keep wanting to say this but we're just going to say rootstore.timer.isrunning or sorry we don't call is running we say start timer and that's just going to call our action to kick things off all right so we'll come over here so we can see it's zeros we can see our x here and if i press this you'll notice it's incrementing every sync it now so pretty neat um so let's take this a step further one thing is we may want to pad this with a zero so it just looks a little bit nicer so i guess we go to our workout or store and we can just make a simple utility function and we're just gonna say const pad zero and this is just going to take a number and it's going to say if number is greater than 10 greater or equal to 10. we'll just return it otherwise we're going to return it with a zero in front so give that a save and then we can wrap these pad zero and now i think we should see zero zero click on this and it increments nicely cool uh the other thing is i want to close the timer when i click on the x so and that should really reset the timer as well so if we come back to the current workout and the on press here we're just going to say rootstore.workouttimer and we're going to say stop or end timer i guess that's what i called it we'll pass that in so now we'll let tick one two three or whatever click the x and oh it's not cannot add property is running object is not extensible oh what happened to this workout timer what i do this dot is running is now false i wonder if it's because i didn't call it in a lambda if i do that i wonder if it works see so start it increment do that yep and it looks like i guess i'm not resetting the seconds to zero so that would be a good thing to do but that stopped it i'm actually not sure why i need to do a lambda with this probably something to do with it being an observable or something that was causing it to be weird things so in this we're going to say this.seconds is equal to zero too uh the other thing is we only want this timer to display if it's running so we're going to say this dot sorry root store dot workouts timer dot is running and if it is and we can just do a ternary otherwise we're gonna terminal reason why i went with ternary instead of doing double and there is sometimes i've had problems with that with react native doing the and so i usually do that so we should not see the timer right away i click on this we now see the timer and it started and it's going uh the last thing that we can do is we can add a little progress bar if you wanted at the top here that kind of goes as it increments but before we do that let me click the clear make sure that works click it again nice also if i click this i want to restart the timer nice that worked the other thing i wanted to do real quick before we actually do the progress bar is i want to stop the timer if this component gets unmounted so to do that i'm going to say use effect and i only want this to run once and in the cleanup function here all i'm going to say is rootstore.stop timer or into timer and i'm just going to go to my thing real quick and rename this so i'm going to push f2 to stop timer because i constantly keep typing that um and that should rename it over here and f2 did rename it over here for me automatically cool uh so so with the use effect you'll notice i returned a function this is the cleanup function meaning it's only going to be called this component i believe is getting unmounted so it should stop the timer then and then i put a brackets here because i only want this to be called at the beginning okay so let's do that progress bar real quick that should be pretty easy if we go to our workout timer basically all we're gonna do here is we want to have something that has a width that changes so here i'm gonna say line it's going to have a height of let's say three uh we're not going to set the width background color of this again let's go pick up color from this uh let's try this brown see how that looks and let me think if there's anything else i don't think that's anything else that needs to go with that i want to wrap these guys in a view and then i want to have a view up here and this view up here is going to be the line and it's going to sit out on top so styles.line so basically at the very top of the component i want the line and then i want this stuff inside of it but i kind of have some flex stuff going on so i'm going to have to move that down so i'm going to create a style called row and what row is going to do is it's going to say justify content flex direction and center all that fun stuff all right so we'll put that here style styles dot row all right i'm just gonna see what this looks like um and this is going to be a array because we want to pass in an a width and the width is going to be constantly changing so i'm just going to set the 50 right now so we can see what it looks like press this all right so i can kind of see this thing right here you'll notice how it's getting pushed to the side because we have some padding so what i want to do i'm going to say with this view i'm going to have it flex so the row here is going to flex one and i'm going to move the padding to the bottom to the row all right and press this and now it's right here now that's super hard to read so why don't i pick a different color uh let's try this one and see if that shows up better if it doesn't we can just pick white too all right all right that looks way better cool and so what's going to happen is we basically just want to compute the percent of the width we should be showing and we're going to just take that as a property and compute that in our store so percent is a string percent and that's what we're just going to pass in here all right so we don't really have a percent yet so we're going to create that in our store so i'm going to say rootstore.workouttimer dot percent and then let's go create that percent so our timer over here this is going to be another computed property and i'm going to say percent and basically what the percent is going to be is i don't want this to be any bigger than a hundred percent so i'm going to say math dot the smallest number here the max or the max it can be is i want it to be no bigger than 100 and what's going to happen is i'm going to put a percent sign here at the end because this is just the format of the width and then here i want to get the current diff so that's going to be seconds divided by whatever i want the completion to be so if i want the timer to run out at 3 minutes i'd put 180 seconds if i wanted like five minutes i would put what five times sixty three hundred all right so if we take a look at that we should be able to see a little timer that will increment i don't see anything so i wonder if i messed something up i'm just go over to the percent and console.log it and see what the value is so console.log be percent and see what we're getting because basically what we want to display is uh a zero percent good and then it should be incrementally getting bigger okay so it's super small right now so that's the problem so i just need to times this times 100. so wrap that in parentheses and to say times 100 give that a save click that and there we go so as we can see it's kind of ticking and we can see the percentage is increasing there we can see we have like a little progress bar going now so that's pretty neat and then so basically all right i want to do one exercise it's gonna reset the timer and then it's gonna go and let's say i'm done waiting i can either just click the x or i can do that and the other thing is when it gets down to zero and i click it and it goes here it should clear the timer as well so let's add that real quick that's very easy too that's going to be just uh so when it's zero and we click to make it nothing we're gonna say rootstore.workouttimer.stop so we could stop the timer by clicking it a couple times and going to zero and clicking it sweet so anyway this is pretty nifty uh i'm really enjoying mob x and i really like just putting these values um into mobx being able to create these computed values automatically that are automatically changing as everything is changing and then we can kind of uh we basically just created this measure method that just constantly tapping every second that is causing a rerender and changing the time on the screen and the other cool thing about us using start time is if for example we were to persist the state which we're going to do later and the user comes back they're going to see how much elapsed time has happened because we're storing the start time so we are revisiting the topic of navigation today because we have a little bit of a flaw in our current setup so right now we are storing the navigation state in mobx and what that means is we're not syncing it with the url right now so if i were to create a workout this is a different screen and you'll notice the url does not change and that is the flaw that we currently have and so what that means is if i were to refresh the page or just revisit this url we'd start back over here and there's no way to visit this screen directly which you would experience with a regular website oops so that is what we're going to try fixing today now you'll notice the reason why i picked this option in the first place is because i tried out react navigation and the web version of it was not very good and it would be very difficult to try to do get that to work and also get it to work with the native version but i forgot about this one package that i used to use for a react native called react router so react router is the standard for the web navigation if you're building a website and react you're probably using react router but they also have a native version and i use using this for a little bit but i found react navigation to be way stronger when using yak native but i think react router is a great choice for what we're currently doing because it is a very similar api between the web and the native so if we just look at what the web looks like we can go to the quick start you'll notice basically what they do is you create a router and then you put routes in it and the native version is the exact same so if we come look at this we go to the quick start we're just going to create a router now they call it native router so we have to deal with that but you just say routes the same way and you deal with api in almost the same manner and it's not widely different so this is going to work great for our react native web because we can easily switch between the react native and the web version so that's we're going to implement today so we're going to start by coming over to our code and i have the router.tsx open in our common package because that's what we're going to be playing around with so to start off i'm going to just install the types for both of these packages and then also the packages themselves and i'm installing that version 4.31 and 4.24 and you'll notice i'm installing react router dom and react router native and then when this is done we're going to install the packages themselves react router dom and 4.3.1 at dom and the native is 4.3.0 all right so the next thing that we're going to do is i'm going to just rename this current file that we have router to routes just so it's a little bit clearer so i'm going to rename this to routes and it's gonna ask me if i want to update this everywhere i'm gonna say yes so what that means is in my index file where we're importing the routes it just automatically renamed it for me all right i'm also gonna push f2 and rename this to routes so save that and save that over here again just refactors it in vs code so it's now updated over here so now i'm going to create a new folder here and i'm going to call it router so that was the whole reason why i just renamed it because i want to create a new folder called reader here and then i'm going to create a folder called index.ts and or sorry a file and a file called index.web.ts so this is how we're going to get things to work so react or create react app out of the box reads dot web files first before it reads dot ts files so what that means is we can put all our web related code inside of these files and this we can call our native file code and so create react app is going to read this file whereas react native is going to read this file so we can switch them so what that means is here i can say export from react router dom and here i'm going to say browser router as router so this is me just exporting this import and renaming it at the same time we're also going to be using the route and the switch component so basically any component that we want to use from react router dom or react router native we want to export here and import them from here so you'll notice this is the dom package so this is the web version we're going to come over to our index.ts file over here and we're going to say browser router we're going to replace this to react router native and then replace that to the native router you'll notice i named it router here and router here so it's the exact same name i want all the exports to match up so you'll notice we're exporting three things router route and switch and they're matching the only difference is this is coming from the native package and this dot web file is coming from the dom package so now what we're going to do is in our routes folder over here or sorry routes file over here is we're just going to import from the router so i'm going to say get rid of all this code that we have here we don't need this observer thing anymore i'm going to say router and you'll notice i'm importing this from dot slash router now it automatically did index.web but we're just going to say router like that because we want it to just get the index file here and basically react create react app is going to pick the dot web version for us so we don't even have to worry about this all right so inside a router we're going to say route or sorry we're going to say switch first and we're gonna wrap it and switch again we wanna make sure we're importing from this package and then we're gonna have a route in there all right so we're gonna say exact path is going to be the slash this is the index or the first component that we want rendered we're going to say component and here we're going to pass in the workout history and then we can create another route which we can say current workout and this is going to be at the path slash current workout and then we're going to import route and that's coming from the router package as well and so now we can go into our uh component the workouts no not that we don't need the stores it's going to be our modules workout history so here we are connecting to the root store and we are saying changing the page here so instead of doing the router store we're going to remove that line of code we are going to be using the history and we can get the history from our props and uh we need to add the type definition to our props to let typescript know that we are a route so we're going to say route component props and we're fine to import that from react router um and so now if we go like this and i hit control space it's gonna know we have a history prop in there so then i come down here and i say history.push and then we're gonna go to the slash current workout screen so i'll give that a save so we can even delete our router store just to make sure we're not using it anywhere um and go to my root store just get rid of it there we go so again what we did here is uh because we have it as a route over here right we're passing this workout history component that means it's going to pass down a prop to it called history so this is a react router thing and history allows us to change pages so we change pages by pushing and again we just did add this to our props which are passing in here that way it just makes it uh so it's type definitions for it and then lastly just to recap the router thing that we did right here so when we do create react app or we read this in the browser so we can see it rendering right here it is using the router package to react this one this import react router dom and when it's using the one over here is when we run the app so i'm going to say yarn watch and now we can see this in action all right um we'll refresh um let's see if it looks like we got a little bit of an error i'm just going to refresh let's see looks like uncaught exception looks like it had trouble loading it i think what i need to do is in my routes i think because i didn't say slash index maybe i'm that could be causing it some trouble yeah it looks like that was it uh so it looks like we need to explicitly say slash index on there just to be clear um and now we can see it's that and when i click on this you'll notice we are going to navigate the url now you'll notice that changed and we're on this page and we can see this page here now i notice we get this little thing in our invalid prop component expected the type function but got an object i'm assuming it's talking about our workout history here we're passing we're wrapping it with an observer um and then we're passing that to the route so it doesn't look like it caused any like problem i guess just a warning not sure what's going on there i don't know if it's just a it looks like it's a prop type warning i think we can safely ignore this i don't know if there's a way to suppress this warning or anything but doesn't look like it's causing a problem anyway this should work all the same now the only difference is we now if i were to refresh the page we're going to stay on this page now we didn't really code this expecting we could go to this page so you don't see any workout data but we can fix that in the future so but now we can navigate to different pages like this and it works like a website you would expect so we can use react router to easily switch because the apis are so similar between the native and the other ones so i think this is a good choice when using react native web is to use this because you can easily switch between the two also one thing i wanted to mention real quick before i end the video is create react app worked out of the box but if you go to the docs for react native web and i'll link this below they show you a webpack configuration so you can get this working so what you basically add to your webpack say that you want to accept the extension extension.web.js or our case.web.ts for typescript and then it'll read it these type of files so we're going to be going over how you can persist your mobx stores and the reason why we want to do that is so we can keep track of the workouts a user has done so for example when i create a workout right now and i refresh the page it just disappears so i want to keep that data and keep the data as we store it in the history so if you do several workouts we have all that data so when you come back to the website we have that and so the way we're going to be persisting this is on the website local storage and on the app async storage now there's a nice library that is going to help us out called mobx persist that we're going to be using and the cool thing about this library is we can actually just pass in async storage to it and it works out of the box with react native and the cool thing about react native web is it actually handles async storage they reimplemented and so underneath the hood they're going to use local storage and persist it like that on the web so we don't actually have to do anything to get this to work with both the website and the app we just use async storage here so we're going to start off by installing this package so i'm going to say you are an ad mobx persist and i'm installing it at this version and the cool thing about this package as well is it's written in typescript so we're going to get type safe type safety out of it without having to install extra types and i'm just going to run yarn watch on this alright so how it works is we are going to basically decorate the fields that we want to persist so i currently have the workout timer store up so here i'm going to say persist and i'm gonna just import that doesn't look like it's auto completing so we'll just write it ourselves so mob x persist and so i'm gonna just decorate the persist on all three of these fields and then after we persist this what we need to do if we come look at the example here is we then have to create a hydrate function and then we just call hydrate on our store so i'm going to copy hydrate and you'll notice what we do is we create an instance of our store and then we hydrate it so i'm going to copy this hydrate and where we're creating an instance of the workout timer store is in the root so we're gonna head over here so i'm paste in hydrate here and i'm just gonna get rid of the comments and tells us if we're using async storage we need to set this to true so we'll set that to true and we're going to pass an async storage in here and we're going to import create this is coming from mobx persist so we've created this hydrate function and then i'm just going to in the constructor of the root store call hydrate and then we're gonna pass in the key for how it's gonna store it so i'm gonna call it workout timer and then we're gonna pass in the store itself so this dot workout timer and so we want to do the same thing for our workout store as well so we can come over here and i want to persist all these fields so we're going to say at persist and i'm going to copy that and i'm gonna do it for each one and that and that cool so if i go back to my root store now i can come back over here and we're going to give it another key this i'm going to call out call just work out and this is going to be this dot workout store so basically what is happening here is in our constructor when we create a new root store it's going to hydrate both the workout time restore and the workout store and what hydrate is doing is it's checking whether this is stored in local storage or async storage in our case and if it is it's going to hydrate it or put the field values into these two stores and it's also going to listen and it's going to save these values as they change over time and if we want to we can pass in i believe a debounce value to this and you can see that right there and the bounce specifies how many milliseconds we want it to wait so for example if we want it to save on every update that's the default if we want to save every 10 milliseconds or so we can debounce it that and so we could add that if we want to i'm just going to leave it off for simplicity's sake next thing is if we see if this works you can come back over here i think we should get an error out of the box so if i come to my console over here and you'll notice we have an uncaught exception it says this value is not a primitive so what that means is any of our fields that are not just a simple like number value or a string or something we need to actually specify what the data type is so what we can do is we can pass a parameter in here and we need to specify what kind of object this is or if it's a list map or an object this is a list the history is also a list and then the other one is in our workout timer store this djs is an object so we're going to say object there give that a save let this refresh and you'll notice we don't get any more error there so if now i create a workout we can see that's here and now if i were to refresh it's going to save the values in local storage and read them so now you can see that and also as i make changes so if i click on that click on this here a couple times i refresh you'll notice our data is saved so as we're working out if we were to come back to the website we'd have all that data saved now one thing you may notice is the timer right here hasn't actually started again so what we can do is we can head back over to our root store and we can trigger the timer to start so hydrate actually returns a promise so we can wait for the promise to finish at least i mean it's not showing a promise in the type definition here but in their example i believe they were doing dot then on it so uh we're gonna do dot then on it too so on the workout timer i can say after it's done hydrating i can say this dot workout timer store and i'm going to just do an if statement so if it's running we're just going to kick it off by saying measure give that a save so now when it's first started if it should be running then we just kick it off and the cool thing about how we started this is we're saving the date it started so if i were to refresh the page it's not like the timer is going to reset because we're saving the date it was off by or start it at and again we can click to reset it if we want to and start a new set um like that so that's pretty nifty and the last thing i want to do is just show you guys where this is actually being stored so if you go to the application tab and you click on local storage here and you click on log host 3000 we can see here is our state so you'll notice the key that we passed in here that is actually the key for local storage and you'll notice here the values all being stored and we can see all the data being stored here and it's also one of those things if you wanted to clear out this i could clear it out refresh the page and you'll notice it wrote it right away so it wrote it pretty quick if i refresh it'll get rid of that so that's how the data is being persisted and again we're using async storage so this will work on both react native and react native web because react native web implements this so we're going to be building out this component right here today so this is like a little card that tracks your history of workouts so every time you complete a workout it's going to show up on the home page as a little card like this now before we actually create the card we're going to just add a quick thing to the current workout page we're going to create a little button right here that we're can click on and when we click on it it's basically going to save the current workout to the history and then we're basically just going to render that history as cards so that's the game plan for today so let's go ahead and start with that button that i mentioned so we're gonna pop on over to the current workout screen and we're just gonna add a button and now i'm just gonna add a button at the very bottom here so uh it's gonna it can go between the workout timer and everything else and it's going to be a react native button and we can set the title um i'm just going to call say save here and i'm going to just say all caps for it and looks like i just need to add on press and the error will go away cool so we'll talk about what we're actually going to put in the on press in a second let's just see if the button shows up awesome it does so next in this on press what we're going to do is we first want to basically put the current work out if we look at our workout store we have an array of current exercises and so basically we want to store that in the workout history over here and given a particular day if we remember what this workout history is we can look up here what we did this is going to be a key which is going to be the day and then the exercises that they did that day and this value someone recommended switching it so we have format with the year up front so i'm going to go ahead and do that as well so the workout history is basically equivalent to a current exercise which has these properties so we can go ahead and just say an array of current exercises is going to be the workout history so i'm going to just move this down here and so here i'm going to say current workout or current exercise an array so basically on a given day someone did an array of current exercises is the idea so we don't really need this anymore this is comments not really representative of what we're doing so basically we're going to do is we're going to take this array and save it in the history at a current day so that means we're gonna say rootstore dot workout and then here we're gonna say history and then here we're going to actually we're not going to do it like that we're going to say dot or i guess in our case a string and so this is where we're going to actually say like a date like that and then what we're going to set equal to is the array of exercises so dot rootstore.workoutstore.his or sorry dot current uh current exercises there we are and then basically this array here we're just going to clear so then we're gonna set that to an empty array and then after that we're going to go to a different page and again i'm hard coding the date here but we're going to deal with that in a second um and this we're just going to go back to the home page after you save the workout so i'm going to say history.push push and we're gonna go to dot slash or just the slash which is the home page in history we're gonna get from the props here so uh let's add the prop type here where uh the typescript type so we're going to say route component props and then here we have access to that now so let's see this in action so if i save this it looks like either something crashed or did not push to the state cannot set the property that of undefined i hope that would make sense so if we go back to our route store or workout store we just actually never define this so i'm going to set the default value to an empty object like that all right um oh yes so this is no longer a list this is an object all right and cool no more complaints hit save takes us back to this page awesome so now if i were to go to that current workout screen directly should be blank because we cleared out that array awesome uh um so i just hit back and then this is blank that was weird okay it's loading still now anyway so the next thing is to actually format what the current day is so we're going to be using djs since we're already using that in this project and they have a dot format function that we're going to use and then we can format into the specific date we want so what we're going to do is we're going to say your year year then the month and then the day and the day is going to be padded with a zero too so here go back to our store or current workout screen and at the bottom here instead of hard coding the date we're gonna get the current day here and then we're gonna say dot format and uh looks like that auto imported for me for some reason it says require here though so i'm just going to change that to from there we are all right so we're going to say year year year and here we're going to say month month then day day so give that a save and then if i open up my application i can see what the state of everything is so here's the exercises that i did on this date and i can create a workout click on some days or some exercises and hit save so this is kind of odd it was kind of like floating there but when i move this it's anchored at the bottom now interesting so notice how this when we scroll deeper in the page this is always there i think uh i might need to like change this to some kind of like anchoring it to the bottom always i'm not sure exactly what css or style we're gonna have to apply to it to get that to fix so we'll fix that in a future video anyway let's give this a save and now if we go to our application state we should see a new day which is today's current date for me and we can see the exercises so awesome so next up is now that we're actually saving stuff in the history we want to display them here in card form so first off you'll notice that the card over there is kind of resembling the card here so i figured we would abstract kind of the logic that we used well not really logic but the style that we used for the card here into its own component so we can reuse that so i'm going to create a new file here which i'm just going to call card and this is going to say a react hook though we're not really going to use any hooks in this particular component and here we don't really need any particular props at least right now so i'm just going to leave them blank and we're just going to render a view and we're going to render the children so the children is a default prop that when we say react.fc that it automatically adds for us uh this and the reason why we are putting the children here is whenever we do card like that and then say we have text like that this is the children so we're just making sure to actually render the children so this view we're going to steal the styles that we used over here so i'm going to use my template for that rnss paste in the card and then here i'm going to say style is equal to styles.card and now let's see if there's anything here that's very specific to what we were doing i would say like the margin bottom here is kind of specific to it and also uh i guess the padding was sufficient but the margin bottom is kind of specific to that particular component so i'm going to remove the margin bottom here and i'm going to come back to the workout card and we're going to remove it here and instead we might just say like container or i guess like card container and that's going to have the margin bottom on it so now here i can render this card and you'll notice without the margin i believe the cards will stick together i think yep they'll stick together so we can just wrap them with a card container and that'll add the margin so a view and then we're gonna say styles.card container nice all right so now we're gonna come back over here and we're gonna use that card component to display over here so uh we're gonna say history car dot tsx and this is going to use that card that we just created so we're going to say card here and then what do we want inside of our card right so if we look at the thing over here we're basically taking the day that this workout happened and then the current exercises that occurred there so what i'm going to do here is i'm going to say the day which i'm going to just take as a string so if they want to pass something else like for example on going in they can and then here we're going to take the current exercises and we're going to say current exercise and looks like we didn't export it so i'm just going to go to our workout store and export this type and current exercise and that's going to be an array so we're going to have our day and our current exercises oh you know what did i misspell yep let me spell it here uh x exercises uh yep that looks good actually x er size is with an s there we go i think that's right spelling's pretty hard though all right so inside of our card here we're going to render those oops there we are so we're gonna have text at the very top and again we're just going to render the day here uh so we're gonna do any kind of formatting on that on the particular and we could even just say like header is more a generic of what we're really rendering here they can pass whatever they want in and then at the bottom here well let's actually first just import all this stuff import that import our card and then we're basically gonna loop through the current exercises that the user did that day uh and basically give a prefix of that so squat is sq bench press is bp and so i guess there's like a mapping of shorthand here so like the exercise shorthand and maybe we should put this in our store is this type i'm not sure the best place to create this map but we can say exercise short name so here we can say squat is sq and if we take a look at our workout store i forget what i was naming them i think maybe in the workout history all right so i did a capital s is that so we're going to say squat here and this should really be a capital right there all right and let's see i guess i can just write them out because i remember them so we have deadlift that's going to be dl we're gonna have bench press bp overhead press and let's just make sure i name this what i think i named it well you know we haven't even no i did capital p on that as well so let's make sure i match that and i didn't actually and maybe i should store this overhead press maybe i should store these values in some kind of enum or something uh that way i'm using the exact same name everywhere or put them in a constant variables i mean that would be better i just should be ohp uh and then the last one is row row purpose being that i just did this is just so we can have the little short acronyms for what we're going to display here so let's map through the current exercises and then for each exercise we're going to render some text and uh the key for this since we're mapping i don't think there's really anything unique about a particular exercise i guess maybe the name we know is gonna be unique uh because what i was thinking is maybe you could have the same name multiple times but uh why don't we use that for the key i think it's pretty safe so here we save exercise so inside of here the string that they were using was first the name so we're going to use our exercise short name map and then we're going to pass in the exercise itself and i'm guessing it's going to get mad at us because it's not one of these keys so i'm just going to say as any or you know what i think it actually wants us to say kiev and type of exercise short name there we go so basically the reason why i had to do this particular notation so this is a typescript thing so basically we created a map right here which it maps to squat maps here deadlift maps here bench maps here right and so if i hover over the type you'll notice it says these are the only keys available so i have to say i can't just pass a string as the key i have to pass a key of one of these things so the way i can do that is i can say type of this and then the key the key of means to grab one of these now the other thing i could do is instead i could say this is an object which the key is a string and it maps to a string and then i wouldn't have to do that so either one would work but notice i'm going to lose the auto completion so if i were to say like exercise short name dot i can't do dot squat it's not going to know that that exists because i kind of remove that i'm going to go with this approach because it types it the best or it's the strictest so okay so i put a space and then here is basically how much whether they how many sets they did and how many reps they did so here we're going to say there's an x in the middle and we're going to say c dot sets by a number of reps and this should be numb sets and i don't think i did numb wraps i just did reps and lastly the weight that they did at all right um i'll just see what this looks like now and to get a gist of what's going on and then we might need to style some of these things and i think everything should be a single line so i think this looks okay so uh we'll go to our index i guess i guess our index is really work out history page and i'm not going to worry about what we have here i'm going to just put the button underneath we're going to deal with the button in a different video so here i'm going to say rootstore.history.map so for each workout oh you know what we can't map over the history because the history is a object so i'm going to say object.entries so what object.entries does is it turns an object into an array and this array has two values or not two values but the array what it is is uh each entry or each uh or i guess item in the array is an array of itself and we can destructure it and the first is going to be the key and the second is going to be the value so value makes sense the key in this case is going to be the date maybe we'll just say dt there so here i'm going to say return and then here i can say with the workout history as we're looping through we're going to just render a history card for each one the key is going to be the day so we can pass in dt there and then here we can pass in uh the i guess what else we need to pass in we need to pass we passed the props of uh oh we just didn't import it maybe no we have the props passed in it wasn't giving me auto completion so i always just want to double check and make sure i didn't mess something up that's usually like a cue that i did mess something up all right so header now the header is kind of interesting because basically we need to take this date and reformat into something prettier but i'm just going to display the date right now uh because the date here is just going to be a string and that's fine for now and then we can make it prettier in a second and then the current exercises is going to be the value oops go this way um all right so here's our cards so we'll notice the card they're taking the entire screen with so i want to first i guess split them so there are two columns so i'm thinking a for each loop in this case maybe easier to create those rows instead of a mapping so we're going to give that a try so what i'm going to do is i'm going to create an array here called const rows and that's going to be an array and really what this is an array of is jsx elements and i guess it's an array of arrays so we'll do it like that and then we're going to say copy this dot 4 each um and then same thing here this is still we still do in this manner where the first value is the date second value is the value i'm going to say rows.push and i think what we're going to do is basically on even elements so we need the index we're going to push on to the array or create a new ray and on odd elements we're going to push on there may be a simpler way to do this but we're going to say if the current index mod 2 is equal to 0 we know it's even and we're basically just going to say row stop push and then here we're going to push on our item which in this case is a history card all right and otherwise if it's an odd element all we're going to do is get the last item in the rows and append to it so we're going to say else rows rows dot length minus one dot push and we're gonna push on to that and we're still gonna create a history so notice we're gonna do this twice so i'm gonna just say instead of doing it twice i can say const history card and do that so basically what we're doing is at the end we're going to have an array that looks something like this so we're going to have a history card and another history card and we're just going to have pairs of two like that because basically whenever we hit an even we're going to push on a new array and whenever it's odd we're going to fill the array like that all right let's go ahead and now render our rows so come down here i'm going to say rows.map and for each row we basically are going to render a view and then just put the other stuff inside of it like that and the key here is going to be the index so now we definitely need to create a style for this so we're going to say rnss row and i guess the first row is going to be a flex direction or first style i mean it's a flex direction row alright so style styles dot row give that a save see what that looks like and now we're getting much more of a row shaped at least we only have two so let's save a couple more you know what we're gonna be saving this and it's just gonna be saving over the item yeah see how we're just saving more items onto this i guess do this again interesting i guess maybe i just had multiple items on it that's why i did that um i think the best way to do this because i basically just want to fill this with some more items so i basically kind of just want like a random date is the idea so let's see if i go to my workouts history is that where we're creating it no we're current workout so basically i just need a a random date i don't even know the best way to generate that so i just looked up how we actually create random dates and i found this nice stack overflow and i'm basically just going to copy and paste this and just see if this works for the purposes of just generating some fake data for us so i'm just going to paste that right inside of the djs function and uh let's start creating some fake dates awesome so it looks like it does in fact work and this is just some fake data for us so we can see some days being rendered there's two big things that we're going to be doing in this video the first big thing is fixing this row or this grid right here so it's not all mashed up together and then secondly we're going to make these clickable and when we click on them we're going to be taken to a new page where we can actually see the workout data for that day and so to do that we're going to be creating a new route which takes some route params using react router but before we do either of those things there's a small fix we need and that is with the create workout screen so you'll notice it is a long list of stuff and if i click here to start the timer and start scrolling this thing just randomly starts floating in the middle here so we're gonna fix that real quick so if i come over to my current workout what we're going to do is we're just going to wrap our button or everything in a scroll view besides the timer so i'm going to say scroll view and wrap it all the way here and so this is a react native element that just makes things scrollable and we'll immediately notice we have a scroll bar here now and as we scroll uh this is visible still but you'll notice it's blocking the button at the bottom if we click on that so we may want to add like just a little space at the bottom so it fits so i guess uh if we go to content uh inset is that uh uh um that might be the right thing but i was just planning on doing content container style and then setting it like a margin bottom and like i don't remember how how big we made it like 50 or something um so that way it's pushed up a little bit and you can still see that there so sweet third thing is you'll notice like there's a little bit of spacing right here because the scroll bar is we have some padding on the view and not in the scroll bar so what i can do is say scroll view i guess scroll container is a better name for it and we're going to just move the padding to the scroll container i'm also going to take the margin bottom and put that in here as well and pass that to the content style and that should have an r there and you'll notice i'm using the content container style on the scroll view as opposed to the style this is something to actually access the content or the view that is inside of the scroll view so that is on purpose and so we only have the scroll bar there cool so all right let's jump into the main thing we're going to do today so the first thing was at this home page over here fixing up the grid that we made so someone mentioned possibly doing like css grid here and i think this is like an excellent use case for css grid but unfortunately react native does not have css grid all they have is flexbox so that's our only thing now there are some grid libraries but basically they just wrap using flexbox so we're gonna have to deal with this ourselves all right so with that said the first thing that i want to do is just wrap our in workout history wrap our cards in a view and what i'm going to say here is i need to move the key since this is the outermost view and we're going to create a new style for it so styles dot i guess we'll call this card container and so what's going to be inside this card container is i'm gonna say first off a flex of one so what that's gonna do is it's gonna have it expand across the whole half so flex one on this one flex one on this one it's gonna split 50 50. next thing i'm just going to add some padding say paddington that way they're a little spaced out and we can actually start seeing some cards forming so nice so this looks a little bit better and then maybe we want to do something besides two because these are not that wide of cards so we can go to our i percent two and we can increment this how many columns that we want so in this case let's do three columns and we have three of these now notice that because we're using flexbox these are flexing all the remaining space so here this is doing a 1550 split here uh so what we really need to do is kind of add some placeholders in this case i think is the easiest way to solve this so the way i'll usually do this is if we go to where we're rendering this row i'm just going to check the length of the row so if the length is less than three items then we know we need to have an extra view otherwise we can just render null and so this view is just going to be a placeholder so we're going to create a styles.placeholder and we'll come back to our style up here and first thing we're going to do is just say flex 1 on it and you'll notice uh that's going to have it there and you know what we're going to apply the same things as the card container so instead of using placeholder we can just reuse that style but anyway you'll notice that we'll uh at least push it over a little bit and now to match the padding we're going to have to use the same thing as cart container and set a padding of 10 on it but since it's a duplicate i'm not going to do it i'm just going to say styles.card container and reuse that style and now you'll notice we have basically there's an invisible placeholder right here that you can't see if we set like a background color you'd be able to see it's like background color pink right um you'd be able to see there's one right here and let's use margin instead of padding and it'll be even clearer all right and you can see here is our little pink placeholder there anyway let me put that back all right so this is the gist of this uh i also thought we could have a ton of workouts uh in the history so i figured it'd be a good place to use a flat list that's a component in react native that is good for lists that are long so we're gonna have to rekind of think about how we have this current set up a little bit because we can't in this particular format render the flat list well so what i'm thinking is to reorganize this a tad instead of like putting making a rose of jsx we're going to create a new slightly new data type here so i'm going to comment this out and so what i'm going to do instead is our rows are going to be still a 2d array but i'm now going to create a new data type here inside of it i'm just going to say the date which is going to be a string and then i'm going to say exercises which is just the array of current exercises so this is kind of a similar data structure to what we had before a 2d array but now instead of having uh gsx we're going to be rendering just we're not rendering but we're going to store objects the objects have a date which maps to this and a value which maps to these exercises so to match it the names i'm just going to say date and exercises here um exercises there we go i have trouble spelling that word and then we're going to put this here date exercises and same thing goes here and the reason why we're reformatting it like this is this is just a little bit easier of a data structure to pass into a flat list all right so we'll come down here and i'm going to say flat list so first thing that i'm going to do on this is pass in the data which i'm going to have rows and two things just hit me that i forgot to do one we may have to have two placeholders if the length is if the length is only one then we're gonna have to render two placeholders so we can do it like this so if the length is two this will be false and will only render one placeholder but if we have uh one both of these are going to be true and it's going to render both the other thing is i brought a tab up for it because i want to show you guys on the scroll view that we made we need to set this keyboard should persist taps what this does is sometimes in scroll lists you have trouble tapping on things and we want to tap on uh the items in that scroll list so we can get around that problem by passing in always and i'll link the docs if you want to see the other options you can pass to this and this allows you to tap and it not and have it work correctly but anyway back with the flat list we're passing in our rows and with a flat list let's import this and uh if you didn't see that flawless coming from react native itself so there is a prop on here called key extractor so what k extractor does is it takes one of the items so in this case i'm just going to say item and if we look at what the item is we can hover over it and see you'll notice this is an array of dates slash exercises and we need to return a string that is a unique key so i think what i want to use for the unique key is the dates and i want something like if i have three dates i think i want to have something like this so date one and then like a space date two and date three all in a string so we have an array so i think a good way to take that array and turn it into string is to use the reduce function so we can say item.reduce so this is an array function the first parameter is a function that takes the previous value and the current value and then we have to return something and then the second value of this is our initial state which in this case is an empty string so how the reduce function works is it's going to call the function that you pass in for each item and each item it's going to pass in for the current value and then previous value is going to be either the initial value or whatever was returned before so what that means is we're going to say previous value plus put a space between it the current value so all that's going to do is it's going to make a string that looks like this and it's going to append the three dates together and then lastly we need to render the item for this and this is really what the row is going to look like so we can copy what we have here up here and then this is going to be item is the key to access and you'll see same thing as we were dealing with before now we don't have to actually pass a key to this because that's what key extractor does all right so we're going to keep this and all we're going to do here is kind of a mix of what this and what we did up here so i'm going to uncomment this and bring it down here so to render this all we did was loop through the exercises so here i'm going to say item.map and for each one we're going to render this and so here i can say date and exercises so the key is going to be a date the header is going to be a date as well and this is going to be exercises and we just need to import that so we don't need this we're going to need this these two placeholder things here still because this is gonna we're still gonna need placeholders because we have odd numbers out or whatever all right so item and item give that a save um so i don't think we'll see anything different here and let's see did i mess something up pretty badly i think um this looks good here we don't need this anymore i think that could have been what's causing yeah if that looked like it was causing the problem uh and this is the same two children with the same key object object object that's because i didn't say current value dot date okay so current value is if we hover over it we can even see is the object it's the date which is string and the exercises we have access to so we want to use the date to pin that and then previous value again is whatever we have on there and you can hover over it you'll know it's just a string it's going to be this and then it's going to be whatever we turn return before it as it kind of maps over each item all right so you'll notice it looks the exact same but it is now in a flat list meaning it will work better with long lists of data so last thing that i want to do is make these clickable so and basically take you to a new screen when you click on it and i'm just going to get rid of this comment because it's not relevant anymore get rid of this as well okay so to make these clickable we can go over to our card and we're going to take an optional prop called on press and we use the question mark to say it's question uh possibly undefined and here we're gonna say onpress so if they pass in a on press we're going to use a touchable opacity instead of a regular view that way it has a nice on click and we can still use the same styles.card so it's going to look like a card but now it's clickable all right so now in our workout history over here i can pass an on press to this guy right here or actually i guess because our history card underneath uses yeah uses a card right here so i guess it would work like that so i guess i can just use the the header which is a date i'm just thinking my head i guess we want to pass the on press here i think we want to add an on press here though i was thinking whether we want to put the logic and the history card or move it up and i think i want to move it up to put it here instead of past you putting the logic of how the changing of page works so in that case we're going to pass a prop down called on press and we're going to pass that in here so now in our workout history we're going to define what onpress does here in this case it's going to say history.push and uh let's see if we have yep we have history imported and what we're gonna do is we're gonna go to slash workout slash and we're gonna do the current date so i'm going to go like this and make this a bracketed function and let me so lets me save and reformat it so what i want is i would like to have the year here then the month and the day of of the workout so to do that we have the date and it is separated by dashes so i'm going to say date.split by the dash and so here we're going to say parts.date or sorry parts.0 for the year and then the month and then the day sorry this is your b1 this should be two okay so we haven't actually created that route but we can go ahead and click on this and it should take us to a different page and it should have the slash on it so something did not work um so i'm just going to see if this on press is getting called pressed all right and it is not being called so let's just go one deeper to the history card uh this and then our card click on that oh i forgot to pass on press to the touchable opacity here all right so let's click on this should take us to 2018 11 18. 2018 11 18 awesome so it's gonna be actually really easy to render the what goes here so let's first create the route for it so we're gonna go over to our routes create a new one here i'm going to say slash workout slash year and by the way this is how you do variables in react router so this is a variable in the url the year the month and the day and this is going to render the current workout component so in our current workout now we're going to take some things from the uh oops from the the url so now to tell react router that we have some things that we expect in the url we're going to say year string month string and day string now these may not be there if someone comes from the current workout so if we go back not that to routes you'll notice that we are rendering the current workout both on a route that looks like this and a route that looks like that so it's possible that someone came here with no route params on there so that's why i did undefined at the top here because they can possibly be undefined and so we can have access to those variables by saying match and then params and there's going to be a day a month and a year and then here now i'm just going to see if this throws an error um okay good i didn't know if it was going to complain um i didn't know it was going to complain because we have the we're destructuring these and they're undefined on the current ooh we didn't go to current workout slash current workout there we go okay yeah i didn't complain because the params are going to be undefined and we're destructuring them here so i didn't know if it was going to be upset about that but it looks like it's okay so i'm going to make a variable um is current workout so we could rename this uh thing because this really is just the display for the workout it may not be the current workout um so it's the current workout if there's not a year and there's not a month and there's not a day and so basically how this works now is we're going to do a check here so we're going to say is current workout if it is we're going to map through the current exercises otherwise we're going to get the day in history so we're going to say date key is equal to year dash month dash day and then we're going to look this up in our history so we're going to say root store dot workout store dot history and then use the date key and then we need to wrap this in parentheses so we're going to pick whether we're doing the current exercise or pick the exercises at a given day and we're going to map through those so just give you an idea here's all the exercises on this day um let's try this day and we can see we have just these three so nice the other thing is when i click on a workout actually that's good it should update automatically i think really the only last thing is when we save we can get rid of this random day when we save the workout we don't need to clear the current exercises if if we're doing a day in history so it is current workouts we're going to do this logic else we're going to just save the day in in history actually we don't even have to save it because it's automatically going to be updating it for us so that's awesome so only if we are working with a current workout do we need to actually save it in history otherwise we're going to be direct directly mutating the history i believe and there's no need to actually update it and so what i mean by directly mutating is when i hit this right two it's gonna actually save this and if i come back over here which day was i even working on was it this one yeah it's gonna remember the two in history and there's actually no need to hit save it's gonna save just goes back pretty much it's gonna remember that day so we can make changes to the day days in history now we can see the values all right so that's all i wanted to cover in this video we covered a ton quick recap is we went over fetching basically different workouts based on the date we have in the url and we use this to look up the key and i can count to log this date key so all we do is we take that and we can close this we don't need that right so in this case 1213 we look up that workout in our history object and then we display those exercises that we know the user did we even let the user update the days in history if they want to as well we're going to start off by making a floating action button now those are those little things you see in the bottom right corner of applications and you click on them they usually are used to add things and we're going to use that button to create workouts instead of putting that button all the way up here and then after that what we're going to do is we're going to start adding workout progressions or what i mean by that is after you do a workout you should increase the amount of work or the amount of weight you do the next workout so we're going to go through how you can increase that or basically create a workout plan all right so let's jump into the code for the floating action button so to start off we're going to create a new component in our ui here which i'm going to abbreviate fab for fab floating action button and i'm going to use our react hook snippet and i'm going to say our our style snippet as well and here we're going to say fab and the first thing is we're gonna have a touchable opacity and the touchable opacity is just so we can click on it and this will be the circle itself and then inside of the circle we're gonna have some text in our case we're just gonna have a plus sign um and then i'm just going to import that from react native so now i'm going to pass in the styles so i'm going to say style.fab and then here i'm going to say style styles.txt so we'll create a text style as well now for the text we'll start with that first because it's going to be pretty easy for the most part we're just going to say font size 18 or something like that and then for the touchable opacity we're going to do this in pieces so i think the first thing we want to start with is getting it located on the screen i'm going to give it like a width of 40 a height of 40. and then i'm going to say background color so we can see what it looks like we'll just make it pink and then we're going to do position absolute and then i'm going to position it at the bottom 10 pixels away and from the right 10 pixels away so let's take a look at what that looks like here um oh we need to actually render it so let's go to our workout history and render it at the bottom so let's say fab render that and see what it looks like um all right it does not match i think my disk here got messed up so i'm just going to delete it and run yarn watch again to just recompile it and give it a refresh oh you know what i think when i do that i'm gonna have to restart the client as well all right so what i expect uh for this is at the bottom we should have see like a little pink square so there we go cool now i notice it's not really 10 pixels from the bottom and the reason for that is our view that's the entire page is not flexing so i'm gonna create a style for it to have it flex so i'm gonna say container flex one and then this outermost style i'm going to say styles dot container so now this thing's going to be the entire page and so this can be 10 pixels away from the bottom because we need that outer container to take up the whole page all right so and we can see we can click on it as well next thing is we want this to be circular so we can use the same tactic as we did with the other circles and say border radius and half of the width slash height which in this case would be 20. so now we have a circle and then really the last piece of this is to make it uh i think we did our card is to add the shadow to it so i'm going to copy these three properties or these four properties that we used in our card to give it the shadow so shadow color and then some properties on the shadow and now we have a pretty nice looking button there uh the only other thing and by the way how this works is it kind of is floating above everything right so you can see it uh it kind of i don't know if we should have it so where it's kind of like over the scroll so maybe we should uh push it to the right like 20 pixels and do 20 pixels off the bottom to be more like there that might be better anyway you'll notice the button is going to be floating over the content all right and then really the last thing is to like get this plus sign centered in the middle there so we're going to say align items center justify content center all right now we have our plus now the plus to me maybe this is just an optical illusion looks like it's not dead center it might be to the left and right a little bit so if you wanted to you could add a little bit of margin on the text to the left and right to push it to like margin left two pixels margin bottom two pixels and that'll kind of push it a little bit and i think this looks a tad more centered in my opinion but it could just be an optical illusion all right so basically this button here we've now created a nice stylized one and we can click on it uh it's gonna do what our create workout button does up there so we can go ahead and remove that from our workout history so let's see what that was doing i'm gonna just copy the on press for that button and i'm gonna put that in the on press of this so we need to add an on press that way we can this works and uh we don't need this watch man i just have that on my clipboard all right and uh get rid of that and we're going to now in our props in the fab say on press and pass that to the opacity so now what should happen is i click on this it should take me to a workout page now we're gonna work on that next is what happens when that plus sign is pressed so first off we don't want to just push on exercises every single time if they're already in the middle of a workout we just can take them to the workout instead of creating a new workout so i'm going to do is i'm going to go to our workout store and uh oh by the way you guys just saw me do something that might have been confusing what just happened so i navigated to the workout store the way i did that i should explain that is i hit command or i guess control probably on windows and then i hovered over this variable and i can click on it and it'll tell me where it came from so you notice i clicked it once it took me to the root store and i hit command click again on the workout store and that's how i navigated to where the heck this came from so that's another way i commonly navigate besides just using the folder tree here um all right so yeah so i'm going to add a computed property on this so i'm going to say computed and i'm just going to say has current workout and this is going to be a boolean we're just going to return this dot current exercises stop length and uh this is going to be a boolean so i'm going to cast it to a boolean using the not sign twice so that'll cast this number into a boolean so basically if it's zero it's going to be false if it's larger than zero it's going to be true and all i'm doing is i'm checking if there's some values in current exercise so now what i can do is if rootstore.workoutstore dot has current workout want to do this or i guess the opposite so if there's not a workout so what's going to happen is we're not going to push on exercises unless um they're not in a workout currently and so the way we know if they're not a workout is if that's blank so uh did i ruin something oh yes i forgot to add the get property so we're just going to add the git name to that and then that allow us to access it like we are here where we don't have to call it as a function we can just access it as a field okay so now i'm going to go back over here and hit save that has a whole bunch of junk in it but if i click on this hit save or if i just like go back and you notice how i'm hitting plus every time we're not adding a whole bunch of workouts we're just looking at the same workout multiple times so the next thing is i want to fix up what we're actually doing for the current workouts so first off we should be doing a different workout depending on what day it is so the way we have it set up in our let's go back to our store is we have the the current workout day and i'm gonna set some default values so i'm gonna say it's gonna start as an a day and uh the current squat weight i'm going to say 45 and basically you're going to just start with just the bar which is 45 pounds and then barbell row and both the deadlift are going to be kind of hard to start with just the bar so we're gonna say uh let's maybe hopefully they have like some bumper weights they're like 10 pounds or something so we'll say 65 pounds you'll start with okay so now with these values this is what i'm going to increment and the current squat value and all that stuff is what we're going to persist and as the user is working out we're going to increment these numbers so the way we're going to do that is first off we're going to hinge on that day so here i'm going to say rootstore.workoutstore and we're going to say last workout type and we're just going to inverse it so we're going to say we're going to look at what the last workout day was if it was a then we're now going to do a b and vice versa so that should be b that should be a this way so all this does is when we hit the plus it's now going to toggle between a and b um because we're checking if it's a last time then we now want it to be a b this logic may need to happen somewhere else or maybe i should reword this and say like what the current workout type what is um so if the last workout was an a the next one would be a b no this makes sense i think all right so that's going to switch between the workout types the next thing is to actually increment the weight and use that here so instead of doing these weights we're basically going to check what day it is and do a different condition so again i'm going to be hard coding this here for simplicity's sake but ideally you should probably put this in some kind of array of exercises or whatnot or maybe a condition of some sort so we're going to say last workout type if it was equal to b that means today is an a day and on a day you're going to do this set of exercises oh and this this this stuff should go inside of there all right so we're going to say do these set of exercises and we'll paste that in there all right so so what we're going to use is the current values as well so we're going to say root store dot workout store dot and then we're gonna grab all these current values current barbell current bench deadlift squat and overhead press and i guess i'll move this outside of here all right so the name of its squat number of sets and then the weight here is going to be the current squat weight current bench press weight and i'm going to just create a const empty sets because we're going to basically reuse this in multiple places and now what i'm going to do here is i'm going to say dot dot empty sets and what this is going to do is it's going to basically just create a new instance of this array i don't know if we would have a problem with having the sets like references to the same array so that's why i want to create a new array each time just to be safe all right and then down here we're going to say actually deadlift is special so we'll just hard code it like that current deadlift and then at the bottom here i'm basically going to just say i'm going to increment each one by two pounds or 2.5 pounds i guess so squat 2.5 and then bench press and then deadlift so basically what's happening is we're going to do these exercises and then we're going to increment the weight for next week when we do them and then we're going to basically copy this and do the same thing but with different exercises on the b day so again you can see where we kind of have some duplication of things where it may be simpler to switch this out with some kind of looping so we're gonna be doing an overhead press and a barbell row but we still do squat so barbell row empty sets and then here current barbell row and then we're just rinsing repeating overhead press here and we're pretty much done i think now um with this switching so let's see what we just accomplished so now when i hit a press on this we'll get squat bench deadlift and uh let's see what poundage we're at let's save this so now squat overhead press barbell we're at these pounds save it and if we look at what we're gonna do next week squat is oh you know what it's 2.5 on each side so that really this should really be five that's how much i want to increment by but you'll notice how the squat incremented there and we got a new set of exercises so now it's going to oscillate between these exercises each week and we slowly increase the weight of them and what not anyway guys i think that is the end of us adding features to this application in the next video what i'm going to do is make sure the app works the react native one and at least on the ios emulator and then also deploy this to netlify now there's a ton of things that we could add to this to make it better and a ton of different features so i hope this gave you a good introduction and how you can get started with this and a good starting framework and i invite you encourage you to start adding some features onto this get an idea of how it might work switch up the styles of things and kind of make it your own workout application customize the different lifts and set up if you work out to your routine we're going to go over how we can deploy our react native web application to netlify so this is the website and to start off we're going to be making three changes to the project for the purposes of getting this to work to deploy the first is in our common package in the package.json we want to add a script called post install so this is a special npm script that gets run after someone does a yarn install or an npm install so basically what happens is when the uninstall is going to get run it's also going to build the project in this case it's just going to generate the dist folder so whenever this project is installed the dist folder for common is going to be created and the reason we want this is because we're going to be building the application on netlify and it's going to need to be able to access this dist folder so it needs to be built so that's how we're going to trigger it secondly we're going to go to our web package and we're going to be running the build command and we need to add the cross and the skip preflight check to beginning of it to get it to work similar to we had we did it for the beginning of start here and the build command basically what that does is it's going to take our react application here and it's going to spit out a build folder with the basically compiled code or transpiled code that's minify and all that fun stuff and then lastly to get our routing to work on netlify since we are using react router in the public folder of our web package we have to create a special file called underscore redirects so this is something that works with netlify and basically we're saying any time zone goes to a path we want to redirect them to the index.html file basically all this does is it says allow react router to do routing for us all right so those three after you make those three changes i went ahead and committed the code and then i pushed it up to github now the branch that i'm working on i called it prod let's just clear that so i called it prod and i committed and pushed up to this prod branch now i said we're going to deploy to netlify i went overhead and i already created a netlify account i have a netlify project that i created you're going to want to do the same thing i connected my github repository but you could do git lab if you want to as well after that i chose the repository that i want to link it to because basically what we're setting up here is whenever you push to the github or get lab repo it's going to grab that code from netlify or netfly is going to grab that code is going to build it and then it's going to deploy it and then after you pick a repository it's going to ask you for some build options so these are the build options that you're going to want to do your build command is going to be the following so basically we're just going to run npm run build inside of the uh web package so you just cd into the web package and then you run npm run build and then here we just specifying the directory where our compiled code's going to be or the once it's built in our case it's going to be in packages web slash build now another important thing is i went ahead and just said the latest version of yarn as a build variable so i said yarn underscore version 1.13 and basically what this does is it tells netify to use this version of yarn i just make sure to do that so it doesn't have any problem with the arm workspaces and i just grabbed that version off of the latest one that i have on my computer all right so after i did that basically the site deploys and that's pretty much it you can go to the poise log you can see the the ones that hopefully published my first try it failed but you can see the logs if you have any problems you can go and see what error you have and you can try fixing it but after that it's going to deploy your site you can even give your site a name and set it to https if you want to i can see my site here react native web workout is what i named it so this is live in production anyone can access this so if you want to you can come access it too and the data is all stored in local storage so everyone's going to get a different version and we can now do our workouts and whatnot and save them anyway that is how you deploy it to netlify with react native web you'll notice it's not too much different from a react project it's pretty much the exact same the only difference is really stuff to deal with react router and yarn workspaces now i also mentioned that i check out the app and i spent about an hour trying to get it working but i just ran into basically the same sim link problem and just having problems with the dependencies i'm not really sure the best way to set up since we did react native cli i'm not really familiar with how to get yarn workspaces working well with it i've always used expo before so instead of just trying tons more and more workarounds i was kind of getting tired of trying it um especially because i saw that facebook has uh made a little announcement about how they're going to tackle the sim links problem and estimate about a month away uh so this issue was created two days ago it looks like um so about a month from now sim link should be working so i was like i don't even feel like trying to get some links workarounds i'm just gonna go ahead and forget about it and wait a month until this is complete anyway if this video is uh if you're watching this like a month from now check the date sim links may be working and you can try out the app um using that but for now i'm not going to worry about it we got the web version of it up and rank so i'm happy with that and this is the one that i wanted to see the most anyway anyway that is the end of this workout series i hope you guys liked it and until next time i'll see you guys later you
