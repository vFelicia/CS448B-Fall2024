With timestamps:

00:15 - you
00:36 - well hello everybody uh welcome back to
00:40 - another live stream
00:42 - here on free code camp and i am sam with
00:46 - python basics and all right
00:49 - so
00:50 - last time
00:51 - i commented on
00:53 - why you should i said don't over copy
00:56 - code and i said and i and i can't
00:59 - believe i did it and i slipped her and i
01:01 - said oh we can copy this it's the same
01:05 - these two
01:06 - are not the same so that's why it failed
01:09 - over and over and over again don't copy
01:11 - code so see what happens
01:14 - well i'm glad to be back everybody uh
01:16 - jan how are you doing with your issue
01:19 - with um
01:20 - your string and your character changes
01:23 - uh i hope that hope you're making some
01:24 - progress on that but i'm glad to be back
01:27 - today on this tuesday so today what
01:29 - we're going to be doing
01:31 - is we're going to be building
01:33 - upon everything we know so we are going
01:34 - to start with a times table
01:37 - and yeah that sounds oh it's just going
01:39 - to be columns and rows yeah but then
01:41 - we're going to learn to it's going
01:43 - poorly
01:44 - but uh
01:46 - all right i i can i can help some and
01:48 - then we'll toy around we're actually
01:49 - going to look at some f string today
01:52 - uh padding um air handling
01:55 - while loop uh we're gonna throw in some
01:57 - break and then
01:59 - uh we're gonna look at prime numbers
02:01 - we're gonna do what i think is some
02:02 - pretty cool stuff some really good
02:05 - basic
02:06 - thinking planning laying out so let's
02:09 - just go ahead and get into it
02:11 - so glad to have everybody here uh we got
02:13 - some people who've been around a while
02:15 - that is awesome because then we start to
02:18 - build um a relationship and a cadence
02:21 - and then we
02:22 - we can really start start solving some
02:24 - problems so all right uh everything
02:26 - looks good
02:27 - coming through so let's just get after
02:30 - it oh and if time allows
02:32 - may we build a little cool thing that we
02:34 - can do but like i was saying um this is
02:37 - our third this is our third stream
02:40 - and we've done some stuff and i just
02:42 - realized that i told you i was gonna do
02:44 - it and i haven't done it yet but i
02:46 - promise i'll get all this code and i
02:48 - actually saved the shell
02:51 - last time so i'm actually going to then
02:53 - upload that
02:54 - to my github so we can um you guys if
02:58 - you've missed anything
02:59 - can come back and watch and pull the
03:01 - code and see what it is all right let's
03:04 - go ahead and just get into it so first
03:08 - let's let's let's build us a times table
03:12 - let's comment all this out we don't need
03:14 - anything
03:15 - to print to the screen
03:17 - let's make sure we're good all right
03:19 - awesome hey and if i have not said this
03:21 - yet to this group but don't ever delete
03:23 - code
03:24 - just comment it out you're going to want
03:26 - to see
03:28 - something that you wrote and you're like
03:29 - what how'd i handle this and also
03:32 - i think it's very very very important to
03:35 - see your evolution and how that goes
03:38 - so all right
03:39 - times table so let's think about
03:42 - how we need to do this because we're
03:44 - going to run into some problems because
03:46 - i know you can get a times table up on
03:48 - the screen but
03:50 - how are we going to handle
03:53 - one repeatability if we want to do it
03:55 - again and two what happens if the user
03:57 - makes a mistake
03:59 - so let's just jump into it
04:02 - times
04:04 - table
04:05 - if i can spell if i haven't said that
04:07 - yet i'm not the world's best speller i'd
04:09 - actually
04:10 - comment that i'm probably the world's
04:12 - worst speller so all right let me click
04:15 - over see if we got any
04:21 - thank you quincy i appreciate that um
04:24 - nice to nice to see you here
04:27 - um that's that's awesome i like that all
04:30 - right so we got to think about it
04:32 - um
04:34 - what do we want to have happen so we're
04:36 - going to get we're going to get rows and
04:38 - columns out so let's handle that first
04:41 - for
04:46 - okay uh for row
04:50 - well first we need to handle input from
04:52 - the user i'm getting ahead of myself i'm
04:54 - sorry guys so input
04:59 - please let's get this out of your way
05:01 - please
05:03 - enter
05:05 - a number so what is the first problem
05:07 - we're going to have
05:09 - right here
05:10 - what is the very first problem we're
05:12 - going to have
05:13 - with this if i'm working with numbers
05:16 - what is my first problem with input
05:22 - anybody got any thoughts jan i think
05:25 - you've helped us with this before
05:28 - shoot i need to
05:29 - maybe my kids are right maybe i do need
05:30 - a third monitor
05:33 - all right so our first problem is going
05:35 - to be if we go and try to multiply this
05:41 - so if i go
05:43 - print x
05:44 - times
05:46 - 3
05:49 - actually we ran into that last time
05:52 - divided by 2
05:54 - times
05:59 - table let me click over i bet somebody's
06:01 - already answered
06:05 - bingo
06:06 - yep
06:08 - so if i enter a number
06:10 - i get
06:12 - all kinds of problem because
06:15 - the default and this is how we can know
06:18 - you can if you're super brand new which
06:20 - is the point of this
06:23 - help
06:24 - help help help help help
06:26 - python has some awesome awesome help
06:32 - um string it is
06:36 - prop gives you standard output
06:39 - string
06:40 - and it drops all the trailing so we need
06:42 - to wrap this we need to wrap this up
06:45 - int
06:46 - so now
06:48 - i can
06:51 - get this and i give it six
06:54 - okay cool
06:56 - so we're done there
06:58 - now we're going to take this and if i
06:59 - want a times table if i want a times
07:01 - table of we're just start small and then
07:04 - we'll build up to how to handle
07:06 - um
07:08 - multiple digits
07:09 - so all right
07:11 - for
07:12 - row
07:14 - we're going to just lay this out
07:21 - and we're going to have another problem
07:22 - for row in
07:24 - range
07:25 - x
07:28 - now so we got our rows and then we've
07:32 - done this before
07:33 - so then
07:35 - then what do we need to do
07:38 - we're then going to have a loop inside a
07:39 - loop because we're going to come down
07:41 - but we also then need to go column
07:46 - for
07:47 - column
07:48 - in range
07:50 - still x
07:53 - then
07:55 - now
07:56 - here's where it gets fun
07:59 - print
08:06 - row
08:08 - times
08:09 - column
08:11 - now we got all kinds of fun stuff
08:14 - problems here
08:16 - okay anybody remember how we start
08:18 - solving this
08:22 - anybody remember what we do here
08:25 - so we need a suppression
08:28 - i'm going to suppress the new line
08:31 - and we're going to start with an empty
08:33 - string
08:36 - let's go small swing kinda all right so
08:39 - now we got a little bit of a problem so
08:40 - we've compressed we've removed all
08:43 - new lines we've removed we've suppressed
08:45 - all new lines
08:49 - all right
08:50 - so then every time after the
08:53 - each new row
08:55 - we need to bring it we need to
08:56 - reactivate it
08:59 - okay we're getting close
09:01 - all right so now
09:04 - okay so i want one space in between
09:08 - all the letters
09:10 - excuse me all the numbers
09:12 - all right uh oh here's our first dilemma
09:16 - here is our very first dilemma
09:19 - this is ugly
09:21 - so now now we need to use our f string
09:24 - so now we're going to introduce f string
09:26 - so we saw last time we use string format
09:29 - we use brackets well f string is even
09:31 - more simple
09:34 - it
09:34 - is this
09:37 - brackets
09:38 - then whatever information you want
09:40 - inside the brackets
09:42 - now with this little
09:44 - tweak right here
09:46 - so i want to right now
09:48 - we're only gonna handle
09:50 - um
09:52 - up to three
09:53 - so we're gonna do our colon
09:57 - three
09:58 - because we could do two how do we do two
09:59 - first
10:01 - so what i did
10:03 - didn't close this out
10:05 - all right
10:07 - all right
10:09 - so enter four
10:11 - uh let's run this again in c5 because i
10:13 - made a boo-boo
10:15 - all right so what did i just do
10:19 - inside my f string i said i want here's
10:22 - my here's my information
10:24 - i want my columns and rows
10:27 - multiplied and i want you to have two i
10:32 - want you to give this every
10:34 - number two places
10:37 - all right
10:38 - that's what this means and if i go up to
10:40 - three
10:41 - this is going to then
10:43 - pad
10:46 - if i go let's do five
10:49 - so i'm going to have an extra space
10:52 - right here
10:57 - and
10:58 - now
11:00 - so now we're going to have
11:02 - an issue right now
11:04 - we are just
11:07 - we're just doing this one one time
11:11 - actually let's do our air handling first
11:14 - so now
11:16 - we are using this function
11:18 - and we know
11:20 - that we need to enter
11:22 - a
11:23 - digit all right
11:25 - so what happens if we enter
11:27 - a letter
11:29 - this is super important right here
11:31 - so
11:32 - whenever a computer crashes a program
11:35 - crashes a variety of things usually
11:37 - happen but more than likely what happens
11:40 - is a scenario happened
11:43 - and air handling
11:45 - did not
11:46 - grab
11:48 - that specific issue
11:50 - and it crashed
11:51 - and most of them are handled
11:54 - but you can get enough scenarios to
11:56 - happen and when you have more elaborate
11:58 - applications they go through and you can
12:01 - end up it's just like uh your streets in
12:04 - your town there's millions of ways to
12:06 - get
12:07 - to a certain location
12:09 - so
12:10 - python has a awesome awesome awesome
12:13 - tool
12:15 - try
12:16 - and accept so we're just going to look
12:18 - at it
12:19 - and we know how to do this
12:22 - let's get back over here
12:28 - and finally yes let's handle let's
12:30 - handle those errors i like that so we
12:33 - can if you're super super new here
12:36 - we're looking at in our interactive help
12:39 - prompt and we're typing in keywords
12:41 - so we're going to look at
12:43 - try
12:44 - and let's see if i can do my alphabet
12:46 - real fast e
12:48 - uh
12:49 - except
12:50 - so these two are linked together and um
12:53 - someone's already pointed out about
12:54 - finally but we're just gonna we're just
12:56 - gonna focus on try and basically the way
12:59 - that this works is
13:01 - try this
13:02 - and if this throws an error
13:05 - then do this
13:06 - and what is
13:08 - very awesome about
13:10 - python is you can actually
13:12 - become laser focused on what type of
13:16 - error you're looking for and then what
13:18 - to do because you're going to have times
13:20 - where you're going to have different
13:21 - errors but we're we're doing stepping
13:23 - stones we're doing we're doing micro
13:25 - topics just like everything else we do
13:27 - so
13:29 - um great so now so we're going to throw
13:32 - this in here
13:33 - and we're gonna move it over
13:35 - indent region okay
13:37 - so we're gonna go try
13:40 - so we're gonna try this
13:42 - and then we're gonna come out here same
13:45 - same indention
13:46 - accept
13:48 - and then what was our
13:50 - what was our accept
13:52 - it was a
13:53 - value error value error
13:57 - it's on the same line
14:00 - value
14:01 - and the e the va the v and the e are
14:06 - and
14:07 - look there's a perfect example of me not
14:09 - spelling i know i spelled it right that
14:11 - looks perfectly fine to me
14:13 - but it's not
14:15 - much
14:20 - it's not purple
14:23 - so that is an awesome check for me when
14:25 - i knew that it was not a
14:29 - term that python didn't recognize so i
14:31 - didn't spell it right all right
14:33 - then what do i want to have happen
14:37 - so i'm going to go we're just going to
14:39 - do print and we're just going to say
14:41 - oops
14:46 - please
14:48 - enter a
14:50 - number
14:52 - now
14:54 - let's look at this all right
15:03 - all right five okay now let's run it
15:06 - again
15:08 - oops m
15:10 - oops please enter a number oh
15:12 - but it's still
15:13 - exited
15:15 - so now we need to put this in a loop
15:17 - any thoughts on what kind of loop this
15:20 - might need to be
15:23 - so it needs to be what we're going to do
15:25 - is we're going to do a while loop so
15:26 - it's just going to run
15:27 - until we tell it to exterminate or tell
15:31 - it not to or
15:32 - set a condition for it to stop
15:35 - so let's look and see so you could do
15:38 - this a couple of ways well two so you
15:41 - could hardwire this and say true which
15:43 - is what we're gonna do or you could set
15:45 - it to a if if you're having a hard time
15:47 - with
15:48 - with um wanting to see it in your head
15:50 - you could set this to a you could set a
15:52 - variable at the top
15:54 - uh set it to true have that be
15:57 - here because we're actually then going
15:59 - to look at a keyword
16:02 - so we can just see this so now we need
16:03 - to move this over
16:05 - one more time
16:07 - one more time
16:09 - all right
16:10 - so
16:11 - this is going to right now this is going
16:14 - to do this
16:16 - until something happens
16:18 - okay
16:21 - all right
16:28 - all right see
16:32 - so there's but there's no way to exit
16:35 - so i'm just going to be sitting here
16:36 - getting times tables now let's handle
16:39 - one problem first
16:41 - anybody notice it yet
16:43 - 5
16:44 - 16
16:46 - 6
16:47 - 25
16:49 - 36.
16:51 - anybody anybody notice
16:54 - it's in there and the exception block do
16:56 - we need a nest try and accept inside the
16:59 - neck
17:00 - not in this scenario because i'll show
17:02 - you how we're going to lay this out and
17:04 - it's not going to bingo we have to add
17:07 - we need to add a plus 1 to our x but no
17:11 - this is going to be sufficient
17:15 - all right
17:16 - so here we go so let's solve one pro
17:19 - always always only change your code one
17:22 - one problem one thing at a time because
17:24 - if you go starting to change
17:26 - i mean
17:27 - both of them could be wrong or only one
17:29 - of them could be wrong so you could have
17:31 - either one two or four problems
17:36 - four scenarios to check so change one
17:38 - thing rerun your code check it
17:40 - all right so we need to solve this now
17:43 - so
17:44 - restart shell okay so in the way that
17:46 - we're going to do this is we need to
17:48 - learn about
17:50 - um
17:51 - how to break how to break out of this
17:57 - there we go
18:01 - and we're just going to pose this as a
18:02 - question let's get this up here
18:05 - yep cue
18:08 - input
18:11 - do you
18:14 - want to
18:17 - want
18:18 - another
18:21 - table
18:22 - so now the way that we're going to
18:23 - handle this let's do
18:27 - yeah and then i do y
18:29 - and no
18:32 - space
18:33 - all right
18:35 - so we're gonna like always we're gonna
18:37 - do this
18:40 - real careful and real slow
18:42 - let me click over here yeah my kids
18:44 - might be right all right
18:52 - oh okay
18:53 - i gotcha
18:54 - um
18:57 - yeah that show that might show you my
19:00 - my age all right
19:01 - so now we need to do a test
19:04 - uh then we need to learn how to handle
19:07 - perfect
19:08 - we're gonna do well actually i'll show
19:11 - you about
19:12 - about the continue i remember
19:14 - when i was first learning i thought we
19:16 - needed to continue but we actually are
19:18 - not
19:19 - it's just gonna only break out so what
19:21 - does break do
19:23 - that's for those of you that is exactly
19:25 - right so those of you who haven't seen
19:27 - break yet and break is very interesting
19:30 - nope
19:31 - uh yeah oh oop sorry
19:36 - break all right
19:41 - all right
19:42 - so let's look at this
19:46 - it will only break out one level
19:48 - so if you have multiple levels and i'm
19:51 - trying to i think i do have one
19:52 - somewhere and actually i think i just
19:54 - came to it but i'm not gonna
19:56 - i'm not gonna say it because i want to
19:57 - go double check but whenever you have a
19:59 - break it won't break out of the entire
20:02 - function or the all of
20:04 - the current loop the level the way that
20:08 - i like to say it is the level you're in
20:10 - so if you have multiple
20:12 - uh
20:13 - loops and you're indented
20:16 - that break will only get you out of the
20:18 - one that it is in you'll still get
20:20 - kicked over to the previous one or the
20:22 - one on the outside so
20:24 - it's um
20:26 - uh you're indented the body the body
20:29 - that you are currently in so if i put a
20:31 - break
20:32 - so if i put a break here
20:34 - it would kick out of
20:35 - this loop if i put a break here it would
20:37 - kick out of this loop we'd stay in this
20:40 - while loop so if i want to kick out of
20:41 - the while loop i would need to have a
20:43 - break here inside the body of said
20:46 - condition now we're going to look at
20:49 - this and guess what we're going to have
20:52 - someone who may not be paying attention
20:55 - or
20:56 - wants to cause problems absolute with a
20:58 - break statement yes yes
21:05 - move to the next one yes it will make it
21:06 - it will move out a level it will move
21:08 - out a level
21:09 - all right so
21:12 - uh we got y
21:14 - if
21:15 - q
21:17 - equals
21:18 - in
21:20 - break
21:22 - now because i want you to think about it
21:25 - the loop the while loop is
21:28 - already continuing so we actually don't
21:31 - need an else
21:32 - and i get your structure and i remember
21:36 - when i was first doing this and then i
21:38 - started to test and i wanted to see how
21:41 - how clean and how small and how small
21:44 - can short can i write this so now we got
21:46 - a problem here though
21:48 - all right because
21:50 - so basically
21:53 - i want you to look at that
21:55 - so what happens if
21:57 - what happens if the person
22:00 - it's all right we gotta have a problem
22:01 - here so we go
22:04 - yes so i get another but now check this
22:08 - out so then i wanna what happens if some
22:10 - reason they have their caps lock on
22:12 - i'm hitting in
22:14 - i'm hitting in
22:16 - or
22:17 - in oh
22:18 - no i'm i'm typing that wait a minute it
22:21 - just went
22:22 - so check this out
22:24 - this is the clean and simplest
22:27 - way to do this
22:28 - so now uh
22:30 - we talked about lower
22:33 - we talked about the string
22:38 - i got my caps lock on str
22:42 - lower
22:43 - everybody know what lower does
22:46 - the string method lower
22:48 - has everybody seen that before i fly
22:50 - right into this
22:51 - everybody good
22:56 - all right
22:58 - i still haven't figured out how long the
22:59 - delay is on chat
23:01 - okay
23:02 - all right
23:04 - converts everything everything to lower
23:16 - oh caption no caps that that's perfect
23:20 - all right shoot that's not what i meant
23:22 - to do
23:24 - meant to do this
23:29 - boom
23:30 - brings everything down so
23:32 - we can actually put this
23:34 - right here at the end this is completely
23:37 - legal
23:39 - so i'm going to take whatever input
23:46 - okay
23:48 - so what i'm saying is i'm going to take
23:50 - the input just like we wrapped our int
23:52 - around our input now
23:56 - excuse me i'm going to take my input and
23:58 - i'm going to lower it so i'm going to
24:00 - then control
24:01 - because what you always want to do is
24:02 - you always want to think about where can
24:04 - i mitigate a problem
24:06 - what is the user going to pay attention
24:09 - are they going to understand are they
24:10 - going to really get what what we need so
24:12 - we want to start boxing those problems
24:15 - in
24:15 - so now i have this well what happens if
24:18 - they write no they're they're not good
24:19 - they're going to get frustrated if they
24:21 - write no and it fails so
24:25 - check this out
24:26 - here's another way so basically
24:29 - if
24:35 - i write nope
24:38 - no
24:40 - no works so basically anything that
24:43 - starts with an n capital or lower click
24:45 - case in in lowercase n capital n
24:49 - all caps no
24:51 - nope anything so basically
24:54 - what happens if they're coming through
24:56 - and in their scenario they're used to
24:58 - whoa they're used to and they go okay
25:02 - yes i'd like another one
25:04 - still works
25:05 - we are mitigating this
25:08 - and shrinking this down
25:10 - that anything that even comes close that
25:13 - starts with an n
25:15 - then we'll break out so all right that
25:17 - is
25:19 - that
25:21 - and this will just go over and over and
25:23 - over again and we handled our
25:26 - uh
25:27 - we had handled our padding
25:30 - very nicely oops let's see oh did we
25:33 - handle did we go 12 did we solve our
25:35 - problem yeah
25:36 - um yeah why not let's check and make
25:39 - sure did we do 15 will that work
25:41 - so there we go and i just love times
25:43 - tables that you just have this
25:45 - on the edges where these look the same
25:48 - this was the first thing i noticed about
25:50 - patterns as a kid where you just come
25:52 - right through here
25:54 - and it's the same on either side i just
25:56 - thought that was just the coolest thing
25:59 - but if you haven't figured out yet i'm
26:02 - very nerdy sorry
26:05 - we have this all covered so now
26:09 - now let's move on to
26:11 - prime numbers
26:12 - let me comment this out because i don't
26:15 - need to see that anymore
26:17 - let's come down here and look at all of
26:19 - this
26:23 - oops
26:24 - sorry guys
26:26 - okay
26:28 - prime numbers
26:30 - who wants to tell me and explain to me
26:32 - what a prime number is
26:35 - anybody
26:37 - so
26:40 - why isn't one a prime number
26:42 - and why is 2 and even
26:45 - why is was 2
26:46 - being an odd being an even number why is
26:48 - it prime
26:51 - so all right the definition of a prime
26:53 - number is a number
26:55 - that is divisible
26:57 - by one in itself
27:00 - so there in the definition has to be two
27:02 - numbers
27:03 - one and itself so a second has to be a
27:07 - second number so two being the only even
27:09 - prime number because
27:12 - you have two and then one
27:14 - prime and everything else is odd so that
27:17 - is very important to what we're going to
27:19 - be doing soon so we're going to be
27:21 - building
27:22 - upon this
27:24 - uh
27:24 - these things here
27:26 - with our prime and then i think we're
27:29 - going to that that flew we flew through
27:31 - that very very quickly
27:33 - so i think we'll even get to what the
27:36 - third
27:36 - idea
27:37 - that i had so i'm very actually very
27:40 - excited
27:41 - about this so all right
27:43 - we need to go
27:45 - and i want to show you what i has
27:47 - anybody ever written a
27:50 - a function of how to find if a number is
27:52 - prime or not
27:54 - anybody done that
27:57 - let's comment this out
28:02 - because what we're going to do next is
28:04 - after we because i have a feeling we'll
28:06 - be able to get through the prime very
28:07 - very quickly and then
28:10 - what is a awesome exercise is
28:13 - then can you find a
28:17 - specific
28:20 - a quantity of prime can you find
28:24 - i haven't had the need to so no okay
28:28 - well
28:36 - did we do that in session one
28:42 - oh i'm very embarrassed if we did that
28:44 - in session one
28:45 - i don't think so
28:48 - we did even an odd but we did not do
28:50 - prime
28:53 - we did an eve oh that's what you were
28:54 - saying an even check in lesson one yes
28:56 - yes yes yes
28:59 - yes we did the even odd check okay so
29:02 - basically this is just
29:03 - this is just souped up scenarios so we
29:06 - then have to go through
29:09 - we then have to think of every scenario
29:11 - and then there's even a way to do it
29:13 - because i remember the first
29:15 - the first one that i did that worked oh
29:18 - it was so painful
29:19 - it was so very very painful what i did
29:21 - is i made a
29:24 - i made a list
29:26 - to get to grab any number that was
29:30 - divisible and then i went and checked
29:32 - that list to see if there was anything
29:35 - in it so we're going to utilize our
29:38 - our break because that this is why
29:42 - i like to then tie these together now
29:45 - when i was getting started and showing i
29:48 - did not put these lessons together that
29:50 - they build wonderfully upon each other
29:53 - so we need to devise a function that is
29:56 - going to go through
29:59 - numbers
30:01 - check start start at a number go through
30:05 - and then if that number is divisible as
30:08 - a divisor
30:10 - of
30:12 - the number we are checking our potential
30:14 - prime
30:16 - then it will fail so i want you to think
30:18 - about this
30:20 - so we need to then have a way to check
30:23 - all numbers
30:25 - in a in a situation
30:27 - in a scenario
30:29 - in a certain
30:30 - window
30:32 - what would be the best thing how how how
30:34 - should we start what would be the best
30:36 - way to start what tools do we have so
30:38 - far to do this because this isn't
30:41 - awesome because where we're going to go
30:42 - is we're going to then have a function
30:44 - that's going to be able to check any
30:46 - number like if i if i said i want you to
30:48 - have a function that if i want to find
30:50 - the 1000th prime number how would we do
30:53 - that well guess what we're going to walk
30:56 - we're going to walk step by step
30:58 - through this
30:59 - so
31:01 - if we have a certain number and we know
31:03 - where we're going to stop and we know
31:04 - it's divisible we know
31:06 - we know it is at the end so basically
31:09 - we're going to go through we're going to
31:11 - use our range function
31:13 - and then
31:14 - we know what range does is i get a
31:17 - scenario
31:25 - so here we go
31:27 - so if i want to check and see if 10 is a
31:29 - prime number i don't need to do anything
31:31 - here because i don't need to test it
31:33 - because i know it's prime
31:35 - then i then i know
31:37 - that i don't need to
31:39 - if number
31:41 - greater than 1 for range in
31:44 - two
31:46 - through number divided by two
31:49 - if number modulo i
31:54 - that's pretty good
31:56 - let's see if we can let's see if we can
31:58 - even short shorten that up just a little
32:00 - bit but you are
32:02 - you're right in the ballpark that is
32:04 - that's pretty good that's that's that's
32:06 - very good
32:07 - so we really let's look at this
32:10 - so let's think about this
32:15 - so really because i don't need to check
32:18 - to check 10
32:19 - i don't need to check one or zero so i
32:22 - literally only need to check
32:25 - two
32:26 - through 2 through whatever my number is
32:30 - and
32:32 - go from there so these are the scenarios
32:34 - and i need to then iterate through this
32:38 - check check this
32:41 - iterable
32:45 - and ch divide this into and
32:48 - as as has already been pointed out if it
32:51 - is evenly divisible so if it has a
32:53 - remainder of zero
32:55 - it's a
32:56 - it's not a prime
32:58 - because if any of these are a divisor
33:01 - have a remainder of 0
33:04 - we're done
33:05 - we stop we stop checking so if we're
33:07 - checking 10 we know instantly that it is
33:10 - not a prime because 2
33:13 - goes in evenly so we're done
33:17 - my first program when i did this i had
33:19 - to go check all of them then check a
33:22 - list
33:23 - then then spit it out so let's just look
33:25 - at this let's look at how clean and
33:27 - clear and small
33:29 - we can actually make this
33:32 - so for i in
33:35 - range
33:37 - 2 through x we just saw that
33:40 - so now
33:46 - if
33:47 - i
33:49 - excuse me if x modulo
33:53 - i
33:58 - zero
34:03 - so now we need to because we're going to
34:05 - use these as return
34:09 - we're going to use return here because
34:10 - we're actually going to use this program
34:13 - to then build
34:15 - and check
34:17 - how to find a specific prime so we're
34:20 - going to use return
34:24 - so i want you to look at this
34:31 - oopsie
34:32 - return
34:35 - false
34:37 - then come out here
34:39 - return
34:41 - true
34:43 - it is literally
34:45 - this
34:46 - this clean and clear
34:49 - all right
34:52 - because
34:54 - this is what's very cool we i don't
34:55 - think we've talked about this yet with
34:57 - return
34:59 - anything where a return hits it it
35:02 - exterminates
35:03 - so you do not remember i remember i was
35:06 - getting fancy and uh i i did something
35:09 - like this
35:11 - oops
35:13 - see how it won't even let you and that
35:15 - that's how you know
35:18 - i want you to see this so i'm here at
35:20 - i'm here at the end of my
35:22 - uh my return statement and i have i have
35:25 - a false
35:26 - and i want to get clever and i want to
35:28 - put a break here a python
35:31 - already knows
35:33 - that everything in this body going below
35:36 - and even really
35:38 - all of this code is dead code
35:41 - whenever a return
35:44 - is initiated
35:46 - ever everything terminates everything
35:48 - below it is dead code will not get to so
35:50 - you do not need to have a break when we
35:52 - use return so that's what we're going to
35:54 - do here but yes if we were using print
35:57 - yes we would need to have a break so we
35:59 - would we would exterminate and go out so
36:01 - that is 100 correct
36:05 - but i'm trying to see about
36:08 - uh in that range function of number
36:12 - number if number is greater than one
36:15 - and
36:16 - uh the the floor division of two i'm
36:19 - trying to wrap my head around that but
36:21 - here all right so that is our prime
36:23 - number
36:24 - and let's go through and just check
36:29 - let's check this so we have a nice handy
36:32 - dandy list right here then we're going
36:33 - to go for
36:36 - num
36:37 - in
36:38 - test
36:41 - then print
36:47 - f
36:50 - bracket num
36:53 - is a
36:55 - prime number
36:58 - and then we call the function
37:03 - i messed this up is prime
37:07 - just to be consistent so when we're
37:09 - going to be then we pass it num
37:14 - and then close this out and then close
37:16 - that out
37:19 - oops
37:25 - so it's changing variables in the middle
37:27 - of the lesson does
37:29 - all right
37:31 - 3 is a prime number true 6 is a prime
37:34 - number false 11 is a prime number true
37:36 - and 31
37:38 - is a prime number true
37:40 - all right
37:41 - so does that all make sense of what i
37:43 - did right there so i took my
37:46 - i took my new function that i created
37:49 - i
37:50 - then took a test scenario an interval
37:54 - i'm iterating through this iterable and
37:56 - then i'm printing it out and calling
37:59 - that function
38:00 - inside my f string
38:02 - so jan this is kind of and i don't know
38:05 - if we'll get to
38:06 - um multi-line
38:08 - strings but um
38:10 - this is how you'd handle your scenario
38:12 - just to give you a little hint you'd
38:14 - have these brackets
38:16 - in here
38:18 - and you'd go back and
38:21 - have those assigned to variables
38:23 - with whatever scenario you would have
38:26 - does that make sense
38:29 - all right
38:30 - okay
38:31 - so now we need to see and figure out a
38:33 - way of how in the world we are going to
38:36 - then track
38:38 - track our
38:40 - that's not what i need to see sorry
38:43 - so the
38:45 - two is the first prime number
38:47 - three is the second
38:49 - and did i have this up and uh
38:52 - so we just need to go through
38:56 - and get started
38:57 - so all right
38:59 - so now we're going to look at
39:02 - we're going to look at the nth
39:04 - how to make an nth prime number function
39:10 - so def
39:12 - nth
39:15 - what i call this
39:17 - nth prime
39:21 - all right
39:22 - so basically the premise of this is
39:26 - is if i want the hundredth prime number
39:29 - how would we do that
39:30 - so we need a way to
39:32 - so we already know how to check
39:34 - if a if a number is a prime
39:38 - so we need to continue adding numbers so
39:42 - we need to we need to figure out
39:44 - how are we going to do this because if
39:46 - we
39:51 - well
39:52 - you are you guys are doing a really good
39:54 - job and you guys ask a lot of good
39:56 - questions ask a a lot
39:59 - a lot of good questions
40:04 - okay
40:05 - so
40:06 - look i will tell you i bet when i
40:08 - started i was probably further
40:11 - further lost than
40:14 - you guys are actually i'm i'm kind of
40:16 - intrigued if everybody wouldn't mind in
40:18 - the chat commenting how long they've
40:20 - been working with python i would love to
40:22 - know that that would be very cool
40:26 - so all right
40:28 - so we need to just we need to we need to
40:30 - decide how we're going to do this
40:31 - because i remember when i first started
40:32 - doing this i was like
40:34 - oh my god so
40:35 - i need to check the first thousand
40:37 - numbers
40:39 - that's inaccurate
40:41 - we're counting
40:43 - a sequence of
40:48 - oh very cool
40:51 - well i promise you
40:53 - in the first month of me trying and
40:56 - learning python
40:57 - um
41:01 - uh you guys are much further along than
41:03 - i was at med month one so i wanna i
41:05 - wanna tell you guys that and um
41:08 - let you guys know
41:11 - that is a lot of lines
41:13 - so that is that is uh that is very
41:16 - that's very impressive
41:18 - all right so we need to so
41:20 - we need to just we need to figure out
41:22 - how we're going to be do how we're going
41:24 - to be doing this
41:28 - well
41:29 - uh i started with c plus plus a hundred
41:33 - years ago
41:34 - and i love the idea of programming but i
41:36 - just could not get it
41:39 - then
41:40 - uh gosh it's coming up on
41:42 - eight years ago now i read some articles
41:45 - and python was in there and i was like
41:47 - wow i've never heard of this
41:49 - and i've been off to the races ever
41:51 - since so all right but our our nth prime
41:54 - number so
41:56 - when my brain first went i said okay so
41:58 - i need to check i need to figure out if
42:01 - it's in this span
42:02 - and that's inaccurate so i need to
42:04 - figure out a way to count prime numbers
42:07 - so if it passes this test
42:10 - so i need to reason why i like doing
42:12 - this right here is to show you we're
42:14 - going to be using this
42:17 - inside of this
42:18 - just like we did up here with our blank
42:21 - lines
42:23 - so it's gonna look
42:25 - a lot like this so as you can see i like
42:27 - to build i like to build one thing upon
42:30 - another so it doesn't become very
42:32 - foreign and we don't go from hello world
42:34 - to uh building a machine learn learning
42:38 - uh algorithm i like excuse me i like to
42:41 - take baby steps
42:43 - so it reinforces
42:45 - what you've learned
42:46 - and you have a toolbox full of tools
42:50 - that then
42:51 - you get you get handed any problem you
42:54 - know how to do it you want to break it
42:55 - down you want to break it down into
42:58 - something that is so simple you can
43:00 - explain to a five-year-old if you can
43:02 - explain it to a five-year-old
43:04 - you can put it in um
43:06 - python code and have the uh
43:10 - interpreter work with it all right oop
43:13 - there we go
43:14 - so
43:15 - we need to set some rules so one of the
43:17 - dirty things one of the dirt one of the
43:20 - dirty rules about programming
43:22 - is you have to have a starting point
43:25 - that's that's one of the dirty little
43:26 - secrets you just can't you just can't go
43:29 - you have to start someplace
43:31 - so i've alluded to how we're going to do
43:34 - this
43:35 - so we have a scenario
43:37 - and you have a certain set of rules so
43:38 - if i go and i want to start at 2
43:41 - and just to make this to speed this up
43:45 - we're going to realize that
43:47 - excluding 2
43:50 - every every other prime number
43:54 - is
43:55 - odd
43:56 - all right i'll say that again excluding
43:58 - 2 every other prime number is odd so
44:01 - we're going to count by two so we're
44:02 - going to speed up our loop
44:05 - by not checking every number we're only
44:07 - going to check
44:08 - the odd numbers so we're going to go by
44:10 - twos and move on so
44:12 - that being said we need to we need to
44:14 - set up our our our setup
44:17 - to then solve
44:19 - and plan how to handle this
44:21 - so we're going to take in our x number
44:24 - if if i want to find the 100th prime
44:26 - number
44:28 - you'd enter that there
44:30 - so
44:32 - and that's why that looked weird nth
44:33 - prime that was
44:35 - all right
44:36 - so we are going to start
44:39 - at three
44:41 - then our prime
44:43 - is two
44:45 - so why why am i doing this
44:48 - because again what is our starting point
44:51 - so we're gonna we're gonna kind of
44:53 - push start
44:54 - this um algorithm
44:56 - so we know the first one is two
45:00 - and then
45:01 - everything's subsequently thereafter
45:04 - starts here and will then increment by
45:07 - two every uh every odd number only i
45:11 - we're gonna we're gonna start
45:13 - just like we did here we're gonna remove
45:16 - any possibility
45:18 - well why in the world should we be
45:20 - checking all any any even number because
45:22 - we know it's not because it's divisible
45:25 - by two off the bat
45:27 - so
45:28 - then that's our starting point so if
45:30 - somebody enters
45:32 - one
45:34 - right here
45:35 - i want to know what the first prime
45:37 - number is
45:38 - okay
45:39 - i got you
45:40 - excuse me
45:42 - return
45:44 - two
45:46 - boom
45:48 - that handles that scenario so then now
45:50 - everything there after
45:53 - shoot let me see if anybody's got
46:00 - oh yes the
46:03 - yes the zen of python is actually very
46:06 - very very very cool
46:08 - uh
46:10 - do you remember how to import it
46:12 - while we're talking about this the zen
46:15 - import what and it just runs
46:21 - anybody remember
46:26 - this
46:27 - just this that's how
46:29 - set up to the top it is it is a
46:32 - python module
46:33 - runs right through here yes if you've
46:35 - not read the zen of python
46:38 - i highly recommend it it is
46:41 - it is extremely
46:43 - it's very simple
46:45 - very clean
46:46 - beautiful is better than ugly explicit
46:48 - is better than implicit simple is better
46:51 - than complex
46:52 - flat is better than nested there you go
46:55 - so just wanted to throw that out that is
46:57 - that is a very good call out so all
46:59 - right back back to back to our is prime
47:02 - so now we need to then figure out
47:06 - this
47:08 - so while prime so what what are we what
47:10 - are we testing what are we what are we
47:12 - wanting to see
47:14 - how are we going to go about this
47:17 - so while
47:18 - while what is less
47:20 - well what is less than this
47:23 - so we have we have found
47:25 - this is our second prime number oh i
47:28 - misspoke
47:29 - this is our second prime right here so
47:32 - we're going to have prime be our counter
47:34 - we could count
47:35 - so prime
47:37 - we could have had uh
47:39 - this is our
47:40 - nth prime number this is two
47:43 - and it is three so while prime
47:47 - is less than x
47:49 - we need to do something
47:53 - so if i were to input right now if i
47:55 - were to input um
47:57 - two three would come out because
48:00 - our
48:01 - second prime number
48:03 - is three
48:04 - does that make sense
48:06 - that's how we have this we could have
48:07 - set count and i forgot that i changed
48:10 - that
48:11 - because we are wanting to this is the
48:13 - second
48:14 - prime
48:16 - and we're going to do that going forward
48:18 - and if you wanted to rearrange this
48:20 - whatever prime number and then your
48:22 - count you could but the way that we're
48:24 - going to build this is we're going to
48:26 - say
48:28 - i want
48:29 - this to continue
48:31 - while
48:32 - this count is less than this
48:35 - all right
48:37 - so the first thing we need to do is
48:40 - it's it's less than this and this is the
48:42 - second one so i need to add
48:45 - to this
48:47 - so num i need to increment
48:50 - oops
48:52 - by two
48:54 - then if
48:57 - is prime
49:00 - number
49:04 - then
49:05 - prime
49:08 - plus all right
49:09 - let's go slow let's go slow let's come
49:11 - back up here
49:13 - so what am i doing right here because we
49:15 - set this up that we're gonna have this
49:18 - test
49:19 - oops i didn't drop out did i
49:22 - okay
49:24 - that's why we're setting this up because
49:26 - it's going to return create return
49:28 - create something and i think uh
49:31 - jan was that you who made that comment
49:33 - right before the stream about in place
49:36 - and um
49:37 - uh none
49:39 - so
49:40 - my function
49:42 - is returning creating
49:44 - false
49:45 - or true
49:47 - so i'm going to have my condition right
49:49 - here this is going to this is going to
49:52 - go if this is going to return either
49:54 - true or false
49:56 - so then
49:57 - if true so if
50:00 - this number num
50:03 - is
50:05 - prime it's going to come down here and
50:08 - it's going to
50:09 - then do something
50:11 - and we're going to increment prime
50:14 - by 1.
50:16 - then we're going to come out here
50:19 - and i know that i just made a mistake
50:22 - because my return didn't go orange
50:27 - all right so let's check this let me
50:29 - make sure
50:30 - do i have a table
50:33 - of
50:34 - prime numbers let's see
50:37 - 1 000 prime numbers
50:42 - there we go
50:43 - so all right let's check this and then
50:45 - we're going to
50:47 - run it
50:48 - so
50:52 - let's bring this back
50:56 - does this make sense to everybody
50:59 - because most of the time i do this
51:01 - lesson i want the
51:03 - 1 2 3 4 5 6 7 8 9 10
51:07 - 10th
51:08 - prime number okay that did work
51:12 - let's click over here
51:20 - okay
51:20 - all right cool yes uh yeah you were
51:23 - talking about in play yeah the the video
51:25 - in place or return
51:27 - are none in place of none all right so
51:30 - what what in the world did i just do so
51:33 - i took
51:34 - a i took a function
51:37 - i built another function around it
51:40 - and i'm passing in and creating a test
51:44 - of
51:45 - how in the world could we check
51:47 - and see
51:49 - if a number is
51:52 - prime so
51:54 - then i want to know
51:56 - the quantity
51:57 - of prime numbers i want to know what the
52:00 - 10th
52:01 - prime number
52:02 - is all right
52:05 - so now
52:07 - what happens if i wanted
52:09 - oh that's a good one all right i have
52:11 - another note here what happens if i
52:14 - wanted a list
52:16 - of
52:19 - how would this how would if i wanted a
52:21 - list of all the primes
52:24 - and this is going to be list
52:25 - comprehension
52:26 - all right who said who was saying last
52:28 - week that list comprehension
52:30 - is uh is a challenge
52:33 - who is saying that
52:39 - all right
52:40 - okay so we're gonna put this in a list
52:43 - comprehension and we're gonna we're
52:45 - gonna check out okay
52:46 - well cool
52:48 - how any thoughts
52:50 - of how in the world we would
52:53 - it's not all right okay well cool
52:56 - it's no no no need to have nightmares i
52:59 - already have some
53:01 - so let's just go ahead and look at this
53:05 - i'm going to go primes
53:07 - so we're going to build a list with list
53:08 - comprehension
53:10 - so we're going to we're going to get our
53:11 - brackets
53:14 - and for i
53:16 - in range so i'm going to i want to check
53:19 - the first
53:22 - 100 numbers
53:24 - so
53:25 - i know one is
53:27 - and if i want the first 100 numbers
53:30 - i'm going to go to 101.
53:32 - now that's our
53:34 - that's our header okay
53:37 - all right
53:38 - are you good there
53:43 - all right
53:44 - so instead of the body being underneath
53:48 - just like so
53:50 - i goes at the beginning
53:52 - all right this is the order i want you
53:54 - to think about making a list
53:55 - comprehension
53:57 - so i have for i in range whatever my
53:59 - iterable is
54:02 - now
54:03 - at the end of it is our condition
54:08 - and it's literally this simple
54:12 - if
54:14 - is
54:15 - because now we're going to call our
54:16 - function
54:17 - is prime i
54:19 - all right
54:21 - so let's run this
54:28 - boom
54:31 - all right
54:39 - yes shouldn't shouldn't there be i for i
54:42 - absolutely
54:43 - and if you're to that point where you
54:45 - can just flow that out that is
54:47 - absolutely fine but i like to show
54:51 - the the way to
54:53 - to deconstruct a for loop header and
54:56 - body
54:58 - than to do it in that order
55:00 - so you have your your header
55:03 - your then
55:04 - your then your iterable
55:08 - your excuse me your itter
55:10 - here's your iterable
55:12 - forgive me for misspeaking
55:14 - then here's your iter and then here's
55:15 - your condition
55:16 - so your your itter goes in front of the
55:19 - four
55:21 - all right is that a little bit better is
55:22 - that that oh is that a little bit less
55:25 - nightmarish
55:27 - and i get it i remember the first time i
55:28 - saw this especially with scenarios and
55:30 - then you have these over here and you
55:32 - start doing stuff to this
55:35 - and it's just like i don't get it and
55:37 - then there's actually more well because
55:39 - a lot of people like to show off and
55:40 - just
55:42 - good
55:43 - that's the point people then jump into
55:46 - this and they have net a nested
55:49 - list comprehension
55:51 - i'm not going to show you a nested list
55:53 - comprehension for
55:56 - a while because sometimes that's can be
55:58 - a little extra extravagant but maybe
56:01 - next week we can show speed i think
56:04 - that's a good idea because now we're
56:05 - going to work on our
56:07 - guessing game this went a lot faster
56:10 - than i wanted to so now we're going to
56:11 - build upon this
56:13 - and you could even go and build this and
56:16 - have a
56:18 - a list of a scenario of
56:21 - until
56:22 - this is 1000 so
56:25 - that would be
56:28 - well you guys you guys are awesome and
56:31 - like i said i want you to
56:34 - well cool but i want you guys to
56:37 - understand
56:38 - i promise you you guys are much further
56:40 - along
56:42 - than i was at a month i know it i mean
56:45 - if you're already uh building uh a bot i
56:48 - i didn't even understand what that was
56:50 - and having to have i mean it took me
56:52 - forever to get what a module was i mean
56:56 - when the first time i saw this i said
56:58 - well how how did they get this to come
56:59 - out well it's in the file what what file
57:02 - oh this is the name of the file no it's
57:04 - called this yeah i know that's the name
57:06 - of the module this
57:08 - so
57:08 - trust me just spit in the just said
57:12 - spend the time i don't know if you guys
57:14 - uh watched the video yesterday on my
57:17 - channel
57:18 - but
57:20 - i promise you just show up and look you
57:22 - guys are here every week you guys are
57:24 - getting this you guys are asking a lot
57:26 - of great questions you guys are doing
57:27 - good all right cool let's go ahead and
57:29 - jump into our guessing game
57:35 - so
57:36 - we got a lot
57:38 - of cool stuff to deal with the guessing
57:40 - game all right let's comment this out
57:43 - because we don't delete code right
57:44 - everybody
57:45 - we don't delete anything of code
57:49 - all right
57:50 - guessing game so we are going to
57:53 - need to come up
57:55 - with how we're going to do this
57:59 - so we got to where our first problem is
58:00 - a random number right
58:03 - how do we do random numbers
58:06 - anybody remember
58:10 - what tools do we have
58:12 - to get us a random number going oh i
58:15 - lost my
58:20 - so we need to get
58:26 - import
58:27 - random
58:30 - random
58:32 - yep
58:34 - and then which
58:37 - which one to deal with random
58:42 - oh my goodness
58:45 - i am so sorry everybody all right
58:49 - if i just want one random number
58:52 - let's say from 1 to 20
58:54 - what do i use
59:03 - 763 lines of code
59:09 - sequences pick random elements pick
59:11 - random sample
59:12 - uniform within range
59:15 - uh
59:16 - let's see
59:21 - anybody remember
59:22 - randy int
59:25 - randy ant
59:27 - that's okay
59:29 - uh
59:32 - [Music]
59:34 - so
59:37 - so randent is
59:41 - okay oops there's another comment
59:44 - rand because then
59:47 - random range we'll deal with that later
59:49 - but randint is sufficient so we need to
59:53 - uh pick
59:55 - and have
59:57 - have our number
60:00 - equals
60:04 - brand
60:05 - int
60:07 - and how to remind remind everybody what
60:10 - does randint do
60:13 - this is the only time
60:16 - that
60:17 - that i can believe
60:20 - has that b is inclusive and i want you
60:23 - to look right here this is this is math
60:26 - and only if you're nerdy math like me
60:30 - you get
60:31 - so
60:32 - open open a bracket and a parenthesis
60:36 - tells you the
60:40 - yes and that's fine that's again
60:43 - you don't know these things until you
60:44 - know these things and i mean i couldn't
60:47 - remember i could not remember anything
60:49 - but you do this stuff 10 hundred
60:52 - hundreds of times
60:54 - you just you just know what to do i mean
60:57 - you may not know that everybody wants to
61:00 - go and get a hammer the first time
61:02 - they're working on tools and a certain
61:04 - type of screwdriver well then you learn
61:07 - that there's more sophisticated tools
61:09 - and you go from there again
61:12 - you don't know what you don't know
61:14 - they're called unknown unknowns well
61:16 - we're trying to remove as many unknown
61:18 - unknowns as possible
61:20 - so here we go we have our
61:23 - we have our first problem solved well
61:24 - guess what we need to have something go
61:26 - over and over and over and over again so
61:29 - we're going to go 1 through 20.
61:32 - so we need to do something until
61:34 - something stops
61:36 - so guess what we're going to do while
61:38 - true
61:41 - now
61:44 - let's see what'd we learn
61:46 - last time of
61:50 - how it um
61:59 - would we learn how to handle last time
62:01 - taking input from the user
62:04 - if it's
62:05 - if it's wrong
62:07 - so we need to get ahead of that right
62:08 - now
62:10 - so we're going to try
62:15 - accept
62:17 - and what was our
62:20 - what was our exception
62:30 - all right
62:35 - oops
62:36 - please
62:38 - enter a
62:40 - number
62:43 - and i made a boo-boo i should have put
62:47 - pass here
62:48 - just in case something happened so all
62:50 - right passes hey i know i have a header
62:53 - and now i have
62:58 - you can in this situ in this very small
63:02 - situation
63:03 - but
63:05 - you guys are already sophisticated
63:07 - enough that i want you to get into the
63:09 - habit
63:11 - of this when i have people who don't
63:13 - even get this concept at all
63:15 - i just have them
63:17 - do accept
63:18 - but that habit is
63:20 - then you do that and you grab all
63:22 - exceptions well
63:24 - you want to be as focused as possible
63:27 - and what we just learned about
63:30 - this
63:34 - explicit is better than implicit so with
63:37 - us putting here
63:39 - value error
63:41 - we are explicitly catching that one
63:43 - error and we will hopefully we'll have
63:45 - time and we can work together and we can
63:48 - grab
63:48 - other errors
63:50 - and more sophisticated but then you just
63:51 - have these go through
63:54 - but you can you can but
63:57 - just want to be clean and clear
64:00 - and explicit in everything that we code
64:03 - and especially the things that
64:05 - i want to show you i would probably show
64:08 - that on my channel i think i've done
64:10 - that before but here on free code camp i
64:13 - want to make sure that i'm showing you
64:14 - guys
64:15 - the best the best of best practices no
64:19 - no
64:20 - no
64:21 - no whitewashing the fence so all right
64:24 - so let's just go ahead and uh finish it
64:28 - out so now okay
64:31 - so now we need to so we have we have the
64:34 - computer it's grabbing a number so what
64:36 - is the point of this we went now we're
64:38 - going to do tests of
64:41 - we want to compare
64:43 - what the what the computer picked
64:46 - to what
64:48 - to what
64:49 - we're going to guess so first of all so
64:52 - we can really kind of make sure that
64:54 - this works
64:55 - we're going to cheat a little bit
64:57 - and we're going to have this print out
64:58 - on the screen
65:04 - awesome
65:06 - nice catch thank you
65:08 - so we're going to cheat and also we want
65:10 - to make sure that our tests and our
65:12 - scenarios are
65:13 - correct
65:15 - so
65:16 - we're going to print out the number
65:18 - but now we need to take input from the
65:20 - user to compare right
65:23 - so we're going to have
65:24 - the guess
65:26 - oops
65:28 - the guess
65:29 - then what is our all-time problem
65:33 - that we have
65:34 - int input
65:37 - would i say please
65:40 - enter a
65:42 - guess
65:44 - all right
65:45 - so now here's here's where the fun
65:47 - starts now why'd that happen anybody
65:50 - know
65:51 - because i can't count
65:52 - so i know that that's now there saboom
65:55 - okay so now we are
65:59 - so let's check this
66:02 - 17. so first let's handle our first
66:05 - problem oops please enter a number 17.
66:09 - all right so here's our here's our first
66:11 - dilemma
66:13 - that
66:14 - i guess 17 and nothing happened
66:18 - so
66:19 - let's handle that first so we can get
66:21 - ahead of that
66:24 - and
66:26 - we're gonna have some excitement with
66:28 - this and uh it's the reason why i like
66:32 - this exercise so much is
66:34 - you've really got to you really have to
66:36 - understand workflow and you can make it
66:38 - extremely complicated or if you're like
66:41 - me you like to make things super super
66:43 - simple so you can remember how to do it
66:46 - so we have a while loop
66:49 - and then we need to
66:52 - learn how to handle this actually
66:55 - no we need to handle one other thing
66:58 - we need to actually then have
67:00 - a second while loop yeah sorry got ahead
67:03 - of myself
67:04 - you guys
67:05 - you guys are so good and smart i get so
67:08 - excited and i get ahead of myself i
67:10 - think it was
67:11 - last week yeah where we started doing uh
67:14 - i almost forget what yeah i need to go
67:16 - back and look at my notes and actually
67:18 - see because i i think we skipped
67:20 - i think we skipped what i kind of wanted
67:22 - to talk about
67:24 - because uh we got into
67:26 - the um
67:29 - yeah i need to go back and check because
67:31 - uh we got into the uh horse race
67:34 - and that was very cool that's one of the
67:36 - uh 25 horses yeah if you guys missed
67:39 - last last week's that was very cool we
67:41 - uh we did some cool stuff that was
67:44 - an interview question i ran across a
67:46 - while ago it's probably not one anymore
67:48 - because everybody knows the answer
67:53 - all right
67:54 - so now we need to have
67:56 - a loop here
67:59 - so while
68:04 - guess
68:05 - not equal and
68:08 - old sam would be
68:10 - having a panic attack
68:12 - right now
68:17 - so all right
68:18 - so what we what we're doing right here
68:22 - is we need this loop
68:27 - okay kind of cheat a bit and use my
68:29 - notes
68:30 - and that's fine that's fine look it's
68:33 - not cheating to go back and look what
68:35 - you it's your work it's what you've done
68:38 - i still
68:40 - google stuff all the time oh my gosh
68:43 - what does that do what's this error look
68:46 - i
68:46 - i read this one
68:48 - tweet that um
68:50 - from this data scientist i spend more
68:52 - time googling my errors than writing
68:55 - code
68:56 - look
68:56 - if you're not taking somebody else's
68:58 - work it's not cheating
69:00 - so
69:02 - if you're having to look up an error if
69:03 - you're having to look back at your notes
69:06 - that's the point of this is to go oh i
69:08 - don't remember exactly how i did it but
69:11 - i know i did it but i know i have it
69:12 - here that's why you don't throw anything
69:14 - away that's why you don't delete
69:15 - anything and that's why you definitely
69:16 - see save things to the cloud and make
69:19 - sure you never yeah don't don't leave
69:22 - any code
69:26 - that that that's funny well then you can
69:28 - uh check out uh free code camp all their
69:30 - awesome videos or python basics for all
69:34 - all of uh
69:35 - those things because that that's the
69:36 - that's the point and that's what beau
69:38 - and i were talking about about having
69:40 - all of these lessons that i have
69:43 - all compressed into streams
69:46 - that everyone can come back and watch
69:48 - all right
69:50 - i digress
69:52 - so but the reason why i would have had
69:55 - or old sam would have a panic attack is
69:58 - true and false was already
70:00 - um bad enough and then now we have a
70:03 - knot here
70:04 - but the way that i was okay and was able
70:07 - to comprehend this is you're going to do
70:09 - this as long as this
70:11 - is wrong so that's what i want you to
70:13 - think about you're going to continue
70:15 - prompting
70:17 - the guess
70:18 - of you're going to check you're going to
70:19 - continue to check because if it's not
70:22 - because you have
70:24 - how many scenarios do do we have
70:28 - any any thoughts we have we have we have
70:32 - certain number of scenarios and we have
70:33 - to handle each of those so right now
70:35 - we're handling
70:37 - any improper input so we actually have
70:40 - uh i don't
70:44 - i got you
70:48 - that's funny all right
70:50 - so we actually have four scenarios
70:53 - bad input
70:56 - correct guess guess is too high and
70:59 - guess is too low so we actually have
71:01 - four
71:02 - bad input solve that
71:04 - uh right now we're going to handle it
71:07 - if it's not the right guess
71:10 - so we we can just go ahead
71:12 - and and start there
71:15 - all right
71:16 - so
71:18 - uh
71:20 - if
71:21 - guess
71:23 - is greater than
71:25 - number
71:26 - sorry if i guessed if the guess is
71:29 - greater
71:31 - okay the guess is greater
71:33 - please
71:38 - please
71:40 - do
71:41 - please
71:43 - and
71:44 - please guess
71:46 - a
71:47 - smaller
71:49 - number
71:51 - i don't know if we want to put a
71:52 - sentence on there all right so that's
71:54 - part of it then i'm going to then
71:57 - take another guess right
72:01 - and then or here let's just let's go
72:04 - slow
72:05 - print
72:09 - so that we have
72:12 - guesses too
72:13 - large
72:15 - so then we need to do
72:23 - hang on hang on i missed a couple
72:28 - cool
72:29 - yep
72:33 - well yeah
72:34 - jan i don't know if that was you or we
72:36 - but yes
72:38 - we we got this right here then we have
72:42 - so i think it was our scenario where we
72:44 - had a
72:45 - nested
72:46 - so
72:47 - it's not right
72:49 - and then we have then two subcategories
72:51 - of not right we're either too high or
72:53 - too low so then we need to handle
72:55 - these two and two of them is a slam dunk
72:58 - we got an if
73:00 - and an else
73:02 - so then please
73:04 - guess
73:06 - a
73:08 - larger
73:10 - number
73:14 - all right
73:16 - now we've got a little bit of a problem
73:19 - so it's one
73:21 - okay i'm guessing one
73:24 - and here's our problem anybody see it
73:27 - it's just continuously going
73:30 - so what do we need to do
73:35 - that's just running and we're now 20
73:38 - 62.
73:40 - so we need to re-prompt
73:42 - right
73:45 - all right
73:48 - i know i know i know i know i know i
73:50 - know
73:51 - i finally found a scenario that it's
73:53 - okay to copy but don't copy okay i even
73:56 - i even messed up i don't even let myself
73:58 - copy uh
74:01 - okay you think
74:05 - we'll get there
74:07 - all right
74:10 - so five smaller number three
74:13 - okay guess a larger number all right so
74:15 - those two work those two work so then i
74:19 - guess four
74:20 - but then i'm all right so here we go
74:24 - so this is how we're going to then
74:26 - so you could then test you could do an
74:30 - elif but i want to show you something
74:32 - that is
74:34 - very cool and i'm going to show you
74:36 - something
74:37 - else
74:39 - so
74:40 - um
74:48 - all right
74:54 - guessed the correct
74:58 - number
74:59 - this is what is very cool
75:01 - about this and not a lot of people are
75:04 - shown this and then we're going to
75:06 - handle
75:07 - just like we did last time
75:09 - all right
75:10 - so it's 10 so i'm going to guess 8 guess
75:14 - a larger number 11 guess a smaller
75:16 - number 10.
75:17 - okay
75:18 - but now
75:19 - i need
75:22 - oops
75:26 - and then
75:33 - right here
75:47 - so what we did is then we need to then
75:50 - have a issue right here
75:54 - of do we want to play again so we get
75:56 - out of here
76:02 - because i'm up
76:03 - here
76:04 - guessing
76:06 - because i'm going to show you this i
76:08 - forgot i changed this
76:10 - to inside the try
76:12 - so now we need to do a question
76:15 - and i'll show you the scenario why we
76:17 - need to put it here
76:19 - put
76:21 - you can do the break
76:23 - it will work but i just want to give you
76:28 - yes because while
76:30 - this is what i want you to think about
76:31 - while
76:33 - true
76:35 - right
76:36 - what does else do what does else grab
76:46 - else grabs the false right
76:50 - bingo
76:51 - so that's why we are pairing the while
76:53 - and the else and then we need to then
76:56 - test here to get out of this loop
76:59 - because
77:01 - in my original because look
77:03 - this is a perfect example is i've
77:05 - written this
77:08 - probably 20 30 times over and over and
77:10 - over again and mate actually that might
77:13 - be something neat because we're gonna
77:14 - have a little bit of time i will show
77:16 - you some of my old garbage code to just
77:20 - because look i can say it
77:22 - that you guys are much further along
77:25 - here's a looping alternative yes
77:28 - absolutely that's the way i want you to
77:30 - think about it
77:31 - else is
77:33 - the the other option
77:36 - bullion you have two choices i think i'm
77:38 - in frame i need to learn about where i
77:40 - am
77:41 - you have either true or false and that
77:43 - is the basis of a processor
77:46 - that circuit is either open or closed
77:49 - everything else builds from there all
77:51 - right that's what i want you to think
77:52 - about
77:53 - you have to think about
77:55 - very binary
77:57 - can i get this down to binary or as
77:58 - close to or then start alleviating all
78:01 - right so
78:02 - yeah
78:03 - that might be something cool to do so
78:05 - i'm going to show you this i did not
78:07 - think i needed to build all this at one
78:09 - time and then i'll show you exactly why
78:12 - we could put this outside the loop
78:14 - but then we have an error
78:16 - and you'll get a bug
78:18 - and those sometimes are so fun to find
78:22 - i remember the first time i built the
78:24 - times table i
78:26 - actually that might be cool i might show
78:28 - you the
78:30 - i think i didn't break my rule yet and
78:32 - have this all
78:34 - to play
78:36 - again
78:40 - all right
78:42 - yes no
78:44 - do do do do
78:46 - then what what do we what do we learn
78:47 - how to do
78:48 - lower
78:49 - than if q
78:52 - 0 equals
78:56 - lower in
78:59 - break
79:00 - all right
79:02 - there we go so we got kicked we're
79:04 - kicked out of here
79:06 - kicked out of here right
79:09 - uh okay
79:11 - 11 guess higher 13 guess lower 12.
79:16 - you guessed correct would you like to
79:17 - play again
79:18 - no
79:20 - awesome it worked
79:22 - all right oop that's not where i want to
79:24 - go
79:26 - now
79:27 - now let's show you i remember
79:30 - uh one iteration i ran through was that
79:32 - while i was getting my notes around so i
79:36 - looked at it
79:37 - and i go well i don't need this because
79:39 - i think i was i was wanting to
79:42 - i was wanting to see
79:45 - how dependent this was
79:47 - so let's
79:49 - comment that
79:54 - copy this and i think i put it here yes
79:58 - so it gets outside of my exception
80:03 - so i said okay let's check this and i
80:06 - think let's see see if i can do this on
80:08 - purpose
80:12 - um
80:13 - ah
80:14 - and there's one more bug that i almost
80:16 - forgot about that we need to then handle
80:18 - because right now
80:22 - sorry i really like working with you
80:23 - guys i am very sorry sometimes i
80:26 - maybe at some point i will get so used
80:28 - to you guys asking some really good
80:29 - questions and um i won't i won't get as
80:33 - uh get as excited but no you guys you
80:35 - guys are phenomenal
80:37 - you guys are great
80:38 - great students great learners and
80:41 - really good questions
80:43 - so
80:44 - now i've moved this down here
80:46 - this is going to create a bug and i'm
80:47 - going to show you why let me let's see
80:49 - if i can make sure i do this on purpose
80:53 - okay
80:55 - all right
80:56 - so 15
80:58 - 17
80:59 - 16.
81:02 - ah shoot
81:05 - i thought
81:06 - ah
81:07 - here we go
81:08 - all right so i want to
81:12 - i have to rethink about what that bug is
81:14 - all right let me show you this problem
81:16 - oops please enter yes
81:18 - so
81:19 - everybody look at what that number is
81:21 - right now so i'm going to go 6
81:23 - 7 oops 9
81:26 - 8. you want to play again yes
81:29 - huh what are the odds that it's still
81:31 - eight
81:34 - yes
81:35 - okay now this is becoming
81:39 - astonishingly
81:44 - was that it
81:45 - did i get it to do it
81:49 - okay all right
81:50 - what are the odds that our guess is ate
81:54 - every single time
81:56 - anybody have any guesses of why
81:59 - what flow
82:00 - shift down there
82:05 - um
82:12 - okay
82:13 - all right
82:14 - all right let's talk about the bug that
82:17 - and i can't get the other bug to work
82:19 - um
82:20 - here
82:22 - but i just wanted to show you uh this
82:25 - let's comment that out
82:28 - actually it might it might show up here
82:31 - all right
82:32 - so did anybody notice that
82:34 - i got
82:35 - eight is the
82:36 - random number every single time
82:39 - anybody notice that
82:42 - so how do we solve that anybody see the
82:44 - problem in my code
82:49 - anybody see it yet
82:53 - here
82:55 - so i'm in this loop going over and over
82:57 - and over again
82:59 - but this is not
83:01 - so this needs to be here
83:03 - see where it needs to go
83:07 - right inside
83:09 - right here
83:10 - so now
83:12 - when i guess
83:14 - should i play again yes 17
83:18 - oh yeah 147 so is that guess the smaller
83:20 - number 17 would you like to play again
83:22 - yes
83:23 - so now
83:24 - this is where
83:26 - it needs to be actually let's check and
83:29 - uncomment this out and see if
83:33 - this grabs it
83:35 - all right uh nine
83:38 - oh i know what it is now hang on
83:41 - this is this is the problem
83:44 - so if i hit no here
83:47 - um
83:52 - okay i guess the bug
83:55 - is gone i could have sworn that was it
83:57 - but yes i did want to show you
83:59 - this right here
84:01 - and you're exactly right
84:04 - this is a true
84:05 - and if it becomes false
84:07 - grabs
84:08 - here alrighty so no
84:12 - that is that so we have about
84:14 - 36
84:16 - minutes
84:20 - generating remember inside the wall abso
84:22 - absolutely
84:23 - right we needed to move that down
84:26 - if we wanted this to truly
84:28 - truly repeat
84:30 - all right let me see where we are
84:35 - with
84:38 - this
84:40 - well we went so much faster all right
84:46 - this is a good one
84:50 - did we do leap year yet
84:53 - anybody talk about okay let's look over
84:55 - and comment do do
84:58 - have we done leap year
85:02 - jan does anybody alright you guys
85:04 - know lee pierce all right
85:06 - who knows the definition of a leap year
85:09 - i bet you a nickel you do not know
85:13 - because i thought i knew
85:15 - and i turned out i did not know so i
85:18 - thought i would have bet any amount of
85:19 - money
85:20 - that i could explain what a leap year
85:22 - was and i would think i was 40. so three
85:25 - years ago
85:26 - and i learned that i did not know
85:29 - what a leap year is anybody want to try
85:31 - for a nickel
85:33 - and i will
85:38 - oh
85:39 - okay
85:41 - a leap year
85:43 - is a year
85:47 - exactly what are the what's the
85:49 - what's the rule for a leap year i'm
85:51 - sorry i wasn't saying what's
85:53 - what's a rule for a leap year
85:59 - any comment any thoughts
86:02 - because the first guess that everybody
86:03 - tells me
86:04 - and i would have and i said the exact
86:06 - same thing i would have said the exact
86:08 - same thing
86:10 - it is a year that is divisible by four
86:14 - that is partially true
86:19 - there are two more there are two more
86:21 - scenarios
86:23 - so first
86:25 - has to be then
86:28 - almost happens every four years
86:31 - so
86:34 - the
86:35 - so 2000
86:36 - was a leap year right
86:38 - i don't know if you guys you guys were
86:40 - more than likely alive but maybe not
86:42 - that old so 2000 was a leap year
86:46 - is everybody aware of that
86:49 - but also 1900 was not
86:52 - so here's the rules and we need to build
86:54 - we need to build a function
86:57 - of let me get over
87:00 - we're going to build a function to test
87:02 - this
87:06 - so all right
87:07 - so 2000
87:11 - was a leap year
87:13 - but now here's the kicker
87:16 - 1900
87:18 - was not a leap year
87:21 - and the reason why
87:23 - is because
87:25 - it is divisible by
87:28 - 100
87:30 - and not divisible by 400.
87:33 - so i'll say that a couple of different
87:36 - ways
87:37 - so when you get to the century mark it's
87:40 - every 400 years
87:42 - so i get to tell my kids my kids were
87:44 - going a little bit after 2000 that i'm
87:47 - the first one
87:48 - to have
87:50 - to have a leap year on a century
87:53 - since 1600.
87:55 - so here we go
87:56 - so here's the rule of
87:59 - so sixteen hundred was a leap year
88:02 - because it is divisible by four
88:06 - sixteen hundred divisible by one hundred
88:10 - and sixteen hundred divisible by four
88:12 - 400.
88:15 - that is the definition of a leap year so
88:18 - 1900 is not
88:22 - a
88:24 - leap year
88:26 - because
88:28 - once it is divisible by 4 by 100
88:32 - it then immediately has to be divisible
88:34 - by
88:35 - 400 and you have a remainder of 3.
88:38 - so that is the rule every single year
88:42 - is divisible
88:44 - by
88:45 - every every year that's divisible by 400
88:48 - excluding the century marks
88:51 - are
88:52 - except
88:53 - every 400 years
88:56 - now
88:58 - let's build a function to test that
89:01 - is everybody's mind blown right now
89:02 - because i remember the first time and i
89:04 - would have bet any amount of money
89:06 - for any value
89:08 - and i would have been mad about it that
89:11 - i could have told somebody what
89:13 - what uh
89:15 - what a leap year was all right we ready
89:18 - to do this
89:20 - okay so we need to go slow and we need
89:22 - to get this figured out
89:24 - so we got leap year
89:28 - so what'd we learn we we just learned so
89:31 - uh 1992
89:33 - we're gonna check then 1600
89:36 - and 1900 2000
89:40 - and then we'll check
89:42 - 2020.
89:44 - what do we think about that does that
89:45 - sound pretty good
89:50 - i won't i won't uh i won't take it from
89:53 - you but that's one of those things that
89:55 - you keep walking around i remember uh i
89:58 - remember i told my dad about it and he
90:00 - he wanted to get he wanted to get mad he
90:03 - he does not like it when i know things
90:05 - uh that he does not and this is why
90:08 - i don't enter yeah i look i don't i
90:10 - don't i don't bet but i i would have
90:12 - like i said i would have bet any amount
90:14 - of money i don't
90:16 - but um
90:17 - all right so we need to go
90:20 - we need to go and think about this this
90:22 - is going to be
90:24 - this is going to be fun
90:26 - so you guys you guys help me how are we
90:28 - going to do this
90:31 - leap year
90:33 - so we're going to test a year
90:35 - so we got that set up so what's our
90:37 - first
90:39 - what's our first scenario
90:43 - so it has to be what
90:47 - before we
90:48 - before we even waste any time right
90:53 - how should w what should go here i guess
90:55 - i can pull this over we don't have any
90:56 - more
90:58 - lots of documentation we have to do
91:01 - all right what what should go here
91:03 - divisible by four all right
91:06 - if year
91:08 - modulo
91:10 - four
91:11 - equals
91:13 - zero
91:14 - all right so now
91:18 - all right
91:19 - good
91:21 - okay
91:22 - then what
91:23 - what'd we learn
91:26 - now here's where the true and false
91:28 - get real fun real fast
91:37 - i think i can have these ooh
91:40 - i don't need to see me somebody type
91:42 - okay all right
91:44 - all right so then now
91:48 - all right so let's look let's get this
91:52 - um
91:54 - we'll do pass
91:57 - then we'll get this uh
92:02 - oh you want to do that one already cool
92:05 - all right so if
92:08 - then x
92:10 - divisible by 100
92:13 - equals zero
92:14 - then what
92:18 - then what so i like how you're doing
92:21 - this okay so we're we're just we're just
92:23 - going through
92:24 - then so
92:26 - we got
92:28 - 400 then we checked 100
92:31 - then
92:32 - okay
92:34 - if
92:39 - 400
92:45 - yep
92:47 - so
92:49 - 4
92:50 - 100
92:51 - 400
92:53 - it's a
92:55 - it's a leap year right
93:00 - return true
93:02 - okay
93:04 - who's ready to do a bunch of else's
93:09 - oops
93:10 - all right
93:13 - so
93:15 - huh didn't think
93:25 - oh
93:26 - no need to get that
93:28 - nope because it's just a
93:30 - it's just a scenario it's just a one one
93:33 - time one time scenario you don't have to
93:35 - go through
93:40 - thank you
93:47 - all right great catch all right so we
93:51 - have our first
93:52 - true so then inside this
93:56 - which one will this be else
94:02 - what
94:06 - what's this one
94:11 - exactly all right
94:13 - so we'll work our way back out
94:15 - so if
94:17 - this scenario
94:20 - boom
94:22 - all right so then i back out one more
94:24 - right
94:29 - what's this one
94:36 - any thoughts
94:43 - it's a little backwards
94:49 - look you guys i'm gonna have to start
94:50 - hiring you guys to be my copy uh
94:54 - my editors
94:57 - alright so what is this else
95:02 - other than you guys checking my my
95:04 - spelling all right so then we go
95:11 - okay
95:12 - so then this is weird
95:20 - okay
95:24 - return true
95:28 - else
95:31 - return false
95:35 - all right
95:37 - so let's look at this
95:44 - and let me check mine true false true
95:46 - false it looks weird but let's go
95:48 - through it so now we have
95:51 - let's build this so we're going to check
95:53 - these up here here are my years years
95:58 - equals we throw these in 1992
96:02 - 1600
96:04 - 1900
96:06 - 2002
96:08 - 2020.
96:19 - okay
96:21 - all right
96:22 - so four year
96:24 - in years
96:29 - and that's fine look
96:31 - look you guys i would have never ever
96:34 - ever participated in a chat
96:36 - on when i was learning especially at a
96:38 - month
96:39 - i'd have been terrified look you okay if
96:42 - you if you haven't seen the video uh
96:44 - yesterday i'll try not to take it
96:46 - personally but look
96:49 - you only get better if you stretch your
96:52 - stretch your wings all right look you
96:54 - have got to mess up and especially when
96:58 - you're i want you to think about this we
96:59 - are completely pushing the limits of
97:01 - technology every single day
97:03 - and they don't happen because
97:06 - of we accidentally
97:09 - just it showed up no we tried something
97:11 - we broke it we tried something it didn't
97:13 - go it went horribly wrong i drive my
97:16 - kids nuts when i talk about the quote
97:18 - from
97:19 - thomas edison
97:21 - he does not say he discovered how to
97:23 - create a light bulb excuse me he doesn't
97:25 - say he invented a light bulb he
97:26 - discovered the way that a light bulb
97:29 - worked he removed all the other options
97:32 - that were wrong and the only thing that
97:34 - was left
97:35 - was a light bulb
97:37 - over ten thousand experiments of what
97:39 - didn't work
97:40 - he
97:41 - happened he removed all of them it's
97:43 - like a sculpture i want you to think
97:44 - about that
97:46 - the sculpture is there inside the rock
97:48 - michelangelo used to say that all all
97:49 - the time
97:51 - all i do is remove the excess
97:53 - you have got to try something break it
97:56 - and learn from it and go from there all
97:57 - right i know i just went off and off and
98:00 - hopefully not a lot of people just quit
98:02 - bo won't let bo won't let me back all
98:04 - right okay so here we are um
98:09 - print
98:12 - leap
98:13 - year
98:16 - uh year
98:18 - did i call the right variable
98:20 - okay and i close that out
98:22 - and know what i do wrong
98:24 - and i did not close it out
98:27 - okay
98:28 - otherwise man once told me if you ask a
98:30 - stupid question you only like
98:34 - until you hear the answer yeah
98:36 - uh if you don't ask it you'll lack
98:38 - knowledge for the rest absolutely i
98:42 - i remember when i
98:44 - a lot of parents struggle with why
98:47 - because it it takes a lot of time and
98:49 - it's a lot of energy it is a lot of
98:51 - energy all right
98:53 - so let's look at i guess i should you
98:55 - know what i should do so i should
98:56 - probably have year printed
99:01 - there
99:02 - and we could put that in our handy dandy
99:05 - f string maybe we can do that in a
99:06 - minute but all right uh
99:08 - why why why why why why i love that
99:11 - question now i love that because look
99:13 - you only get better if you ask why and
99:15 - if somebody you're working with doesn't
99:17 - tell you why
99:19 - uh
99:29 - absolutely i could not
99:31 - i could not say that better i want you
99:33 - guys to grow i have the greatest time
99:36 - being here and i
99:37 - am being extended the wonderful
99:39 - opportunity
99:40 - of um
99:41 - having being on
99:43 - this channel that um quincy
99:47 - and bo are allowing me and i just hope
99:49 - that
99:50 - you guys are all getting something out
99:52 - of this not just
99:53 - programming but
99:55 - stretching yourself pushing yourself
99:57 - uh and going from there
99:59 - so all right
100:01 - uh here we got we got 1992
100:05 - true
100:06 - 1600 false
100:09 - 1900 true
100:11 - um
100:12 - ooh
100:13 - no
100:14 - that is backwards
100:21 - hang on
100:23 - oh my goodness
100:24 - what'd i do wrong
100:27 - false false true
100:29 - oh we need to fix that
100:31 - well here we go guys
100:34 - where did i
100:35 - let me check my
100:37 - stuff over here oh will this come over
100:39 - here
100:42 - oops
100:43 - yeah i want to kill it
100:45 - sorry i need to
100:46 - uncomment this out
100:50 - and run this
100:55 - true false
100:58 - true
101:00 - oh
101:02 - anybody else catch my awesome awesome
101:05 - mistake
101:09 - there we go
101:13 - here we go okay
101:15 - again you guys
101:17 - i can't blame that stuff on you anymore
101:19 - you guys are you guys are awesome all
101:20 - right so guess what i left out a very
101:23 - big important scenario right here of
101:25 - testing that this is
101:28 - a
101:30 - true false
101:32 - true false and this is back supposed to
101:34 - be true
101:36 - let's check this again
101:39 - false
101:40 - false true true
101:42 - true there we go
101:44 - because if you missed it and i
101:47 - cannot believe i did that but i left out
101:50 - a condition of equal to zero this modulo
101:54 - equal to zero so all right we got about
101:56 - 18 minutes let's uh let's jump on
102:00 - something new so we just did
102:03 - just did that
102:05 - um
102:06 - let's see
102:08 - pull this up is that going to pull over
102:10 - there
102:14 - so i can open that let's bring that over
102:16 - here because we flew through
102:18 - through these a lot
102:20 - faster than i was imagining
102:24 - so
102:26 - ideas i'm looking for
102:29 - h i that's not right
102:35 - let me say bear with me guys
102:40 - like i said you guys are
102:45 - uh fantastic okay
102:47 - actually here's here's some
102:50 - here's some pretty good stuff oh hang on
102:53 - all right he's playing tricks on us
102:58 - always with the small things oh
103:00 - absolutely uh well i can talk to i can
103:02 - speak to that uh a ton
103:05 - so
103:06 - i well my spelling hasn't improved uh
103:09 - maybe marginally but my typing has and
103:12 - also
103:13 - if i haven't said this yet
103:15 - i
103:16 - became
103:18 - much more
103:19 - sharp-minded by having to
103:22 - focus on making sure the variables
103:25 - matched up
103:27 - and making sure i was typing correctly
103:30 - um and the speed of typing my and i know
103:33 - i'm not a fast typer i'm not i'm not
103:35 - saying anything like that but
103:37 - i am much faster than i was before
103:40 - so let's actually look at a couple of
103:42 - things
103:43 - so let's take a
103:44 - list
103:46 - and i don't think we have done
103:49 - this
103:50 - yet so we have we have a list of names
103:56 - and we're going to go
104:01 - let me just grab these names copy them
104:02 - put them over here
104:05 - so i'm going to show you the long way
104:07 - and then i'm going to show you some of
104:08 - the
104:09 - built-in functions
104:18 - well yes my younger son he has a
104:21 - mechanical keyboard and he loves
104:23 - sometimes the clicking just absolutely
104:25 - drives me bananas but all right
104:28 - so let's look at another way
104:31 - so we have for
104:32 - name name in names
104:37 - print name right
104:40 - all right well i'm going to show you
104:43 - how to think about this because there's
104:45 - going to be times there's going to be a
104:47 - time at some point and
104:49 - you're going to need to know how to
104:52 - think about this and going through and
104:54 - thinking about the
104:55 - the the index
104:57 - i don't think we've done
105:04 - he's trying to kill his keyboard that's
105:06 - funny all right
105:08 - so then we go
105:09 - lynn
105:14 - lynn
105:15 - names
105:18 - so let's look at this
105:20 - blend names
105:23 - when
105:24 - names all right would that do
105:27 - and if i could get an s in here for the
105:30 - love of all that is good
105:32 - it's all right
105:33 - let's look at this for a second
105:35 - so i think i showed you this
105:38 - so when you call der without anything
105:40 - you see everything that's in memory
105:42 - right now right so we got horses sitting
105:45 - around out there we got name we got
105:47 - names we got numbers we got race we got
105:48 - random we got shuffled
105:50 - so name
105:53 - is the last
105:55 - iter
105:57 - here so i accidentally ran lynn on name
106:02 - and steve happens to be the length of
106:04 - five well i want the land of names
106:08 - i promise guys i will figure this out
106:12 - three because there's three items inside
106:16 - names and we do help
106:20 - on len
106:21 - and we get return
106:24 - turn
106:25 - number of items in a container all right
106:27 - so string is even a container
106:30 - hang on what is it
106:35 - oh that's messed up that's the keyboard
106:37 - killed his father okay all right so now
106:40 - so since this is a
106:43 - since th this is
106:50 - another garbage collection video
106:54 - yes i uh was that you that asked about
106:56 - it i could not remember yes i um
106:59 - that was very intriguing i
107:02 - i think that would be a very good idea i
107:04 - don't think that would blow everybody
107:06 - away because actually that's kind of my
107:09 - claim to fame um i actually made a tweet
107:12 - um
107:13 - a long time ago
107:15 - and um
107:17 - gordo
107:18 - uh hearted it because that was actually
107:22 - the one of the premises there's tons of
107:24 - premises of why python became python and
107:27 - was created but it was so
107:30 - memory
107:32 - allocation
107:34 - was not important it was it was going to
107:36 - take that away from the user
107:38 - to
107:40 - enable the excuse me the the the
107:42 - programmer to um to be more free and it
107:46 - would it would free up time and be able
107:49 - to because that's that's one of the
107:51 - things
107:52 - that
107:53 - stumped me with c plus plus and just of
107:55 - just a variety of things but that that
107:58 - was that was um one of the points was
108:00 - memory control and memory allocation
108:03 - that was one of the top
108:05 - priorities of it so yes i actually think
108:08 - that's a very good idea and
108:10 - i don't think it will be over too many
108:13 - people's heads and especially
108:15 - all of these awesome new subscribers
108:17 - that um i've gotten but yes i will get
108:20 - some stuff around
108:21 - because i don't think a ton of people
108:23 - are super interested in the django
108:25 - um series so i'm gonna try to wrap that
108:27 - up as fast as possible and then we'll
108:29 - move on to some other cool stuff have
108:31 - really gotten some really good really
108:33 - cool suggestions but all right i digress
108:35 - let's finish this out in the next 12
108:36 - minutes
108:38 - so since this is a number
108:40 - an int
108:43 - and so then we can wrap this
108:46 - because again this is completely legal
108:48 - because python understands it goes hey
108:51 - you know what you're talking about
108:52 - you're passing a number in here and
108:55 - we're going from here so now
108:58 - so now i still get
109:00 - um
109:03 - names
109:07 - here we go
109:08 - so
109:10 - i'm gonna go
109:11 - here
109:12 - apparently i will never use names again
109:14 - since i cannot
109:17 - um
109:19 - keep the difference between name and
109:20 - names all right so this is completely
109:23 - legal so now
109:25 - we're going to have somebody looking at
109:26 - this and they're gonna go zero that sam
109:29 - is
109:30 - zero there's zero person so guess what
109:32 - this is how we solve this
109:34 - one
109:36 - plus
109:39 - one
109:40 - completely legal
109:42 - because again python goes hey you know
109:46 - what you're talking about
109:51 - completely legal oops
109:53 - there we go
109:54 - now
110:00 - now let's look at
110:03 - um
110:04 - check this out
110:06 - so i so we need to change this to i
110:08 - since we got rid of names
110:14 - that's more clear so
110:17 - but
110:18 - let's come back over here and look at
110:20 - this again
110:22 - lend
110:23 - names
110:24 - nailed it all right
110:26 - so we got 0 1 2.
110:28 - so down here we're going to solve it
110:30 - here
110:31 - so check this out
110:34 - 1 2 3 4.
110:39 - names
110:42 - i
110:44 - alright so what are we doing
110:46 - anybody anybody got any guesses
110:53 - so i'm actually using
110:56 - the range function
110:58 - to
110:59 - index through
111:04 - now that was a lot of work
111:07 - to show you this has anybody seen
111:10 - the built-in function that does this
111:12 - exact same thing that i just did with
111:14 - the tools that we have so far
111:18 - any i almost want to say anyone anyone
111:21 - but i doubt anybody i don't know if bo
111:24 - or quincy are still watching to get that
111:26 - reference
111:28 - i might send some real money if anybody
111:29 - gets that one that is an old movie from
111:32 - my error
111:33 - index bingo i am indexing
111:38 - fantastic
111:40 - so now
111:41 - oh
111:42 - yes i'm using index oh i see what you're
111:45 - saying index has anybody seen enumerate
111:48 - anybody seen the enumerate
111:50 - um function
111:53 - anybody seen that yet
111:57 - does this exact same thing just we don't
111:59 - have to do any extra
112:00 - thinking
112:04 - okay all right
112:06 - we need to figure out a better way to
112:08 - faster not better the chat's good
112:12 - i've used it
112:13 - but you haven't shown it okay well what
112:16 - does it do
112:21 - and that is very helpful that you guys
112:22 - can help me
112:26 - eight
112:28 - what does it do
112:31 - it's actually very cool
112:33 - so it shows the index value and value
112:36 - bingo what does it create
112:43 - so you have an interval starting point
112:46 - creates a pair
112:49 - where's the default
112:51 - anybody know that
112:52 - if i say default what do i mean
112:55 - what information
112:58 - you have
113:00 - tuple very good creates a tuple because
113:02 - whenever you see pairs
113:04 - and then it even hints right there
113:06 - defaults to zero so all right let's
113:07 - check this out
113:10 - so we got names right
113:13 - then we got
113:15 - let's just do new i remember numer
113:19 - or eight
113:21 - names
113:23 - new i remember i spent more time
113:26 - just
113:27 - forgot this
113:31 - new
113:33 - equals list
113:36 - new
113:38 - new
113:38 - forgot that part all right
113:42 - bam check this out so
113:45 - uh
113:46 - then when i do new
113:50 - up
113:52 - new index zero wrap that
113:55 - tuple very good so what this does
113:59 - and
114:00 - all right
114:02 - so default argument keyword argument um
114:06 - but it is uh default
114:09 - to zero already set so it starts at
114:13 - zero but i could come in here
114:17 - and change this
114:22 - oh yeah yeah yeah yeah yeah let's do
114:24 - this
114:25 - this is good
114:27 - have we done packing and unpacking yet
114:29 - anybody
114:31 - got a couple minutes we'll get we'll get
114:33 - into this
114:36 - oop and i just broke
114:38 - my own rule all right
114:40 - comment that out
114:43 - for
114:44 - i in
114:47 - enumerate
114:50 - hey
114:52 - all right
114:55 - names
114:56 - starts at zero i want to start at one
115:00 - sorry one
115:04 - print i
115:06 - so what am i going to do right here
115:08 - i get a tuple
115:11 - i did not talk about packing and
115:13 - unpacking awesome okay uh
115:16 - five minutes i think i think we can do
115:18 - packing and unpacking in five minutes
115:20 - so
115:21 - we have a pair
115:24 - these are set together
115:30 - so i right now because it's our last
115:34 - item
115:35 - so i is still there
115:37 - so
115:38 - num
115:40 - and name
115:42 - equals i
115:44 - [Laughter]
115:46 - uh
115:48 - what i what did i just do
115:51 - i it didn't throw an error so something
115:53 - is completely legal
115:58 - so i just unpacked this because i
116:03 - i is
116:05 - a tuple
116:06 - has a len
116:09 - of two
116:11 - i passed it
116:12 - two variables
116:14 - python goes in
116:17 - breaks this down
116:19 - unpacks assigns
116:21 - because it's just like this
116:29 - just like that
116:31 - so i want you to think about this so i
116:33 - is this
116:36 - just like this so i have
116:39 - x
116:42 - and then y and it goes in
116:46 - and just links
116:49 - the two of these together
116:51 - oh very cool
116:53 - well that's awesome
116:56 - and unpacks this
116:59 - next video we'll look at we'll look at
117:01 - uh packing back
117:03 - but this
117:04 - unpacks this
117:05 - so
117:07 - so if i have i right here
117:10 - and each time through
117:12 - this is
117:14 - this is a set this is a tuple so let's
117:16 - run this again
117:18 - oops sorry so this is my tuple
117:21 - so now i can come over here
117:29 - copy
117:30 - paste
117:32 - comment
117:37 - num
117:39 - name
117:42 - all right so
117:44 - what
117:46 - don't don't overthink this same
117:56 - so what this is
117:59 - is this is unpacking
118:04 - this
118:04 - item
118:06 - print
118:07 - num
118:09 - name
118:11 - go through
118:13 - boom
118:14 - so there we go
118:16 - i think that is a fantastic starting
118:18 - point and i promise promise promise
118:21 - and i'm gonna save this right now i did
118:23 - not save
118:25 - the
118:27 - um the file
118:29 - the shell the first time but i did shave
118:32 - shave save the file they the shell um
118:38 - shell
118:39 - shave
118:40 - save the shell wow say that three times
118:42 - fast
118:43 - save the shell the first time but i did
118:45 - save the shell
118:47 - the of everything that i typed in the
118:49 - meantime so we'll at least have that
118:52 - and i will be doing that going forward
118:55 - but absolutely awesome stream today i
118:58 - really hope you guys are having as much
119:00 - fun as i am because i really
119:02 - i really get a lot out of this and i
119:04 - have a grand grand time so i just want
119:07 - to tell you all
119:09 - thank you very much um i really truly
119:12 - enjoy these
119:13 - anything that you've seen here
119:16 - i've tried to have a more
119:19 - in-depth video over on my channel so if
119:21 - there's anything
119:23 - you want to see just bounce over there
119:26 - thank you everybody for spending time
119:28 - quincy and bo thank you for extending
119:31 - me this wonderful opportunity and we'll
119:33 - just keep going and we will see where
119:35 - this goes but as always guys thanks for
119:37 - watching stay tuned and we will see you
119:40 - guys next week
119:42 - bye guys

Cleaned transcript:

you well hello everybody uh welcome back to another live stream here on free code camp and i am sam with python basics and all right so last time i commented on why you should i said don't over copy code and i said and i and i can't believe i did it and i slipped her and i said oh we can copy this it's the same these two are not the same so that's why it failed over and over and over again don't copy code so see what happens well i'm glad to be back everybody uh jan how are you doing with your issue with um your string and your character changes uh i hope that hope you're making some progress on that but i'm glad to be back today on this tuesday so today what we're going to be doing is we're going to be building upon everything we know so we are going to start with a times table and yeah that sounds oh it's just going to be columns and rows yeah but then we're going to learn to it's going poorly but uh all right i i can i can help some and then we'll toy around we're actually going to look at some f string today uh padding um air handling while loop uh we're gonna throw in some break and then uh we're gonna look at prime numbers we're gonna do what i think is some pretty cool stuff some really good basic thinking planning laying out so let's just go ahead and get into it so glad to have everybody here uh we got some people who've been around a while that is awesome because then we start to build um a relationship and a cadence and then we we can really start start solving some problems so all right uh everything looks good coming through so let's just get after it oh and if time allows may we build a little cool thing that we can do but like i was saying um this is our third this is our third stream and we've done some stuff and i just realized that i told you i was gonna do it and i haven't done it yet but i promise i'll get all this code and i actually saved the shell last time so i'm actually going to then upload that to my github so we can um you guys if you've missed anything can come back and watch and pull the code and see what it is all right let's go ahead and just get into it so first let's let's let's build us a times table let's comment all this out we don't need anything to print to the screen let's make sure we're good all right awesome hey and if i have not said this yet to this group but don't ever delete code just comment it out you're going to want to see something that you wrote and you're like what how'd i handle this and also i think it's very very very important to see your evolution and how that goes so all right times table so let's think about how we need to do this because we're going to run into some problems because i know you can get a times table up on the screen but how are we going to handle one repeatability if we want to do it again and two what happens if the user makes a mistake so let's just jump into it times table if i can spell if i haven't said that yet i'm not the world's best speller i'd actually comment that i'm probably the world's worst speller so all right let me click over see if we got any thank you quincy i appreciate that um nice to nice to see you here um that's that's awesome i like that all right so we got to think about it um what do we want to have happen so we're going to get we're going to get rows and columns out so let's handle that first for okay uh for row well first we need to handle input from the user i'm getting ahead of myself i'm sorry guys so input please let's get this out of your way please enter a number so what is the first problem we're going to have right here what is the very first problem we're going to have with this if i'm working with numbers what is my first problem with input anybody got any thoughts jan i think you've helped us with this before shoot i need to maybe my kids are right maybe i do need a third monitor all right so our first problem is going to be if we go and try to multiply this so if i go print x times 3 actually we ran into that last time divided by 2 times table let me click over i bet somebody's already answered bingo yep so if i enter a number i get all kinds of problem because the default and this is how we can know you can if you're super brand new which is the point of this help help help help help help python has some awesome awesome help um string it is prop gives you standard output string and it drops all the trailing so we need to wrap this we need to wrap this up int so now i can get this and i give it six okay cool so we're done there now we're going to take this and if i want a times table if i want a times table of we're just start small and then we'll build up to how to handle um multiple digits so all right for row we're going to just lay this out and we're going to have another problem for row in range x now so we got our rows and then we've done this before so then then what do we need to do we're then going to have a loop inside a loop because we're going to come down but we also then need to go column for column in range still x then now here's where it gets fun print row times column now we got all kinds of fun stuff problems here okay anybody remember how we start solving this anybody remember what we do here so we need a suppression i'm going to suppress the new line and we're going to start with an empty string let's go small swing kinda all right so now we got a little bit of a problem so we've compressed we've removed all new lines we've removed we've suppressed all new lines all right so then every time after the each new row we need to bring it we need to reactivate it okay we're getting close all right so now okay so i want one space in between all the letters excuse me all the numbers all right uh oh here's our first dilemma here is our very first dilemma this is ugly so now now we need to use our f string so now we're going to introduce f string so we saw last time we use string format we use brackets well f string is even more simple it is this brackets then whatever information you want inside the brackets now with this little tweak right here so i want to right now we're only gonna handle um up to three so we're gonna do our colon three because we could do two how do we do two first so what i did didn't close this out all right all right so enter four uh let's run this again in c5 because i made a booboo all right so what did i just do inside my f string i said i want here's my here's my information i want my columns and rows multiplied and i want you to have two i want you to give this every number two places all right that's what this means and if i go up to three this is going to then pad if i go let's do five so i'm going to have an extra space right here and now so now we're going to have an issue right now we are just we're just doing this one one time actually let's do our air handling first so now we are using this function and we know that we need to enter a digit all right so what happens if we enter a letter this is super important right here so whenever a computer crashes a program crashes a variety of things usually happen but more than likely what happens is a scenario happened and air handling did not grab that specific issue and it crashed and most of them are handled but you can get enough scenarios to happen and when you have more elaborate applications they go through and you can end up it's just like uh your streets in your town there's millions of ways to get to a certain location so python has a awesome awesome awesome tool try and accept so we're just going to look at it and we know how to do this let's get back over here and finally yes let's handle let's handle those errors i like that so we can if you're super super new here we're looking at in our interactive help prompt and we're typing in keywords so we're going to look at try and let's see if i can do my alphabet real fast e uh except so these two are linked together and um someone's already pointed out about finally but we're just gonna we're just gonna focus on try and basically the way that this works is try this and if this throws an error then do this and what is very awesome about python is you can actually become laser focused on what type of error you're looking for and then what to do because you're going to have times where you're going to have different errors but we're we're doing stepping stones we're doing we're doing micro topics just like everything else we do so um great so now so we're going to throw this in here and we're gonna move it over indent region okay so we're gonna go try so we're gonna try this and then we're gonna come out here same same indention accept and then what was our what was our accept it was a value error value error it's on the same line value and the e the va the v and the e are and look there's a perfect example of me not spelling i know i spelled it right that looks perfectly fine to me but it's not much it's not purple so that is an awesome check for me when i knew that it was not a term that python didn't recognize so i didn't spell it right all right then what do i want to have happen so i'm going to go we're just going to do print and we're just going to say oops please enter a number now let's look at this all right all right five okay now let's run it again oops m oops please enter a number oh but it's still exited so now we need to put this in a loop any thoughts on what kind of loop this might need to be so it needs to be what we're going to do is we're going to do a while loop so it's just going to run until we tell it to exterminate or tell it not to or set a condition for it to stop so let's look and see so you could do this a couple of ways well two so you could hardwire this and say true which is what we're gonna do or you could set it to a if if you're having a hard time with with um wanting to see it in your head you could set this to a you could set a variable at the top uh set it to true have that be here because we're actually then going to look at a keyword so we can just see this so now we need to move this over one more time one more time all right so this is going to right now this is going to do this until something happens okay all right all right see so there's but there's no way to exit so i'm just going to be sitting here getting times tables now let's handle one problem first anybody notice it yet 5 16 6 25 36. anybody anybody notice it's in there and the exception block do we need a nest try and accept inside the neck not in this scenario because i'll show you how we're going to lay this out and it's not going to bingo we have to add we need to add a plus 1 to our x but no this is going to be sufficient all right so here we go so let's solve one pro always always only change your code one one problem one thing at a time because if you go starting to change i mean both of them could be wrong or only one of them could be wrong so you could have either one two or four problems four scenarios to check so change one thing rerun your code check it all right so we need to solve this now so restart shell okay so in the way that we're going to do this is we need to learn about um how to break how to break out of this there we go and we're just going to pose this as a question let's get this up here yep cue input do you want to want another table so now the way that we're going to handle this let's do yeah and then i do y and no space all right so we're gonna like always we're gonna do this real careful and real slow let me click over here yeah my kids might be right all right oh okay i gotcha um yeah that show that might show you my my age all right so now we need to do a test uh then we need to learn how to handle perfect we're gonna do well actually i'll show you about about the continue i remember when i was first learning i thought we needed to continue but we actually are not it's just gonna only break out so what does break do that's for those of you that is exactly right so those of you who haven't seen break yet and break is very interesting nope uh yeah oh oop sorry break all right all right so let's look at this it will only break out one level so if you have multiple levels and i'm trying to i think i do have one somewhere and actually i think i just came to it but i'm not gonna i'm not gonna say it because i want to go double check but whenever you have a break it won't break out of the entire function or the all of the current loop the level the way that i like to say it is the level you're in so if you have multiple uh loops and you're indented that break will only get you out of the one that it is in you'll still get kicked over to the previous one or the one on the outside so it's um uh you're indented the body the body that you are currently in so if i put a break so if i put a break here it would kick out of this loop if i put a break here it would kick out of this loop we'd stay in this while loop so if i want to kick out of the while loop i would need to have a break here inside the body of said condition now we're going to look at this and guess what we're going to have someone who may not be paying attention or wants to cause problems absolute with a break statement yes yes move to the next one yes it will make it it will move out a level it will move out a level all right so uh we got y if q equals in break now because i want you to think about it the loop the while loop is already continuing so we actually don't need an else and i get your structure and i remember when i was first doing this and then i started to test and i wanted to see how how clean and how small and how small can short can i write this so now we got a problem here though all right because so basically i want you to look at that so what happens if what happens if the person it's all right we gotta have a problem here so we go yes so i get another but now check this out so then i wanna what happens if some reason they have their caps lock on i'm hitting in i'm hitting in or in oh no i'm i'm typing that wait a minute it just went so check this out this is the clean and simplest way to do this so now uh we talked about lower we talked about the string i got my caps lock on str lower everybody know what lower does the string method lower has everybody seen that before i fly right into this everybody good all right i still haven't figured out how long the delay is on chat okay all right converts everything everything to lower oh caption no caps that that's perfect all right shoot that's not what i meant to do meant to do this boom brings everything down so we can actually put this right here at the end this is completely legal so i'm going to take whatever input okay so what i'm saying is i'm going to take the input just like we wrapped our int around our input now excuse me i'm going to take my input and i'm going to lower it so i'm going to then control because what you always want to do is you always want to think about where can i mitigate a problem what is the user going to pay attention are they going to understand are they going to really get what what we need so we want to start boxing those problems in so now i have this well what happens if they write no they're they're not good they're going to get frustrated if they write no and it fails so check this out here's another way so basically if i write nope no no works so basically anything that starts with an n capital or lower click case in in lowercase n capital n all caps no nope anything so basically what happens if they're coming through and in their scenario they're used to whoa they're used to and they go okay yes i'd like another one still works we are mitigating this and shrinking this down that anything that even comes close that starts with an n then we'll break out so all right that is that and this will just go over and over and over again and we handled our uh we had handled our padding very nicely oops let's see oh did we handle did we go 12 did we solve our problem yeah um yeah why not let's check and make sure did we do 15 will that work so there we go and i just love times tables that you just have this on the edges where these look the same this was the first thing i noticed about patterns as a kid where you just come right through here and it's the same on either side i just thought that was just the coolest thing but if you haven't figured out yet i'm very nerdy sorry we have this all covered so now now let's move on to prime numbers let me comment this out because i don't need to see that anymore let's come down here and look at all of this oops sorry guys okay prime numbers who wants to tell me and explain to me what a prime number is anybody so why isn't one a prime number and why is 2 and even why is was 2 being an odd being an even number why is it prime so all right the definition of a prime number is a number that is divisible by one in itself so there in the definition has to be two numbers one and itself so a second has to be a second number so two being the only even prime number because you have two and then one prime and everything else is odd so that is very important to what we're going to be doing soon so we're going to be building upon this uh these things here with our prime and then i think we're going to that that flew we flew through that very very quickly so i think we'll even get to what the third idea that i had so i'm very actually very excited about this so all right we need to go and i want to show you what i has anybody ever written a a function of how to find if a number is prime or not anybody done that let's comment this out because what we're going to do next is after we because i have a feeling we'll be able to get through the prime very very quickly and then what is a awesome exercise is then can you find a specific a quantity of prime can you find i haven't had the need to so no okay well did we do that in session one oh i'm very embarrassed if we did that in session one i don't think so we did even an odd but we did not do prime we did an eve oh that's what you were saying an even check in lesson one yes yes yes yes yes we did the even odd check okay so basically this is just this is just souped up scenarios so we then have to go through we then have to think of every scenario and then there's even a way to do it because i remember the first the first one that i did that worked oh it was so painful it was so very very painful what i did is i made a i made a list to get to grab any number that was divisible and then i went and checked that list to see if there was anything in it so we're going to utilize our our break because that this is why i like to then tie these together now when i was getting started and showing i did not put these lessons together that they build wonderfully upon each other so we need to devise a function that is going to go through numbers check start start at a number go through and then if that number is divisible as a divisor of the number we are checking our potential prime then it will fail so i want you to think about this so we need to then have a way to check all numbers in a in a situation in a scenario in a certain window what would be the best thing how how how should we start what would be the best way to start what tools do we have so far to do this because this isn't awesome because where we're going to go is we're going to then have a function that's going to be able to check any number like if i if i said i want you to have a function that if i want to find the 1000th prime number how would we do that well guess what we're going to walk we're going to walk step by step through this so if we have a certain number and we know where we're going to stop and we know it's divisible we know we know it is at the end so basically we're going to go through we're going to use our range function and then we know what range does is i get a scenario so here we go so if i want to check and see if 10 is a prime number i don't need to do anything here because i don't need to test it because i know it's prime then i then i know that i don't need to if number greater than 1 for range in two through number divided by two if number modulo i that's pretty good let's see if we can let's see if we can even short shorten that up just a little bit but you are you're right in the ballpark that is that's pretty good that's that's that's very good so we really let's look at this so let's think about this so really because i don't need to check to check 10 i don't need to check one or zero so i literally only need to check two through 2 through whatever my number is and go from there so these are the scenarios and i need to then iterate through this check check this iterable and ch divide this into and as as has already been pointed out if it is evenly divisible so if it has a remainder of zero it's a it's not a prime because if any of these are a divisor have a remainder of 0 we're done we stop we stop checking so if we're checking 10 we know instantly that it is not a prime because 2 goes in evenly so we're done my first program when i did this i had to go check all of them then check a list then then spit it out so let's just look at this let's look at how clean and clear and small we can actually make this so for i in range 2 through x we just saw that so now if i excuse me if x modulo i zero so now we need to because we're going to use these as return we're going to use return here because we're actually going to use this program to then build and check how to find a specific prime so we're going to use return so i want you to look at this oopsie return false then come out here return true it is literally this this clean and clear all right because this is what's very cool we i don't think we've talked about this yet with return anything where a return hits it it exterminates so you do not remember i remember i was getting fancy and uh i i did something like this oops see how it won't even let you and that that's how you know i want you to see this so i'm here at i'm here at the end of my uh my return statement and i have i have a false and i want to get clever and i want to put a break here a python already knows that everything in this body going below and even really all of this code is dead code whenever a return is initiated ever everything terminates everything below it is dead code will not get to so you do not need to have a break when we use return so that's what we're going to do here but yes if we were using print yes we would need to have a break so we would we would exterminate and go out so that is 100 correct but i'm trying to see about uh in that range function of number number if number is greater than one and uh the the floor division of two i'm trying to wrap my head around that but here all right so that is our prime number and let's go through and just check let's check this so we have a nice handy dandy list right here then we're going to go for num in test then print f bracket num is a prime number and then we call the function i messed this up is prime just to be consistent so when we're going to be then we pass it num and then close this out and then close that out oops so it's changing variables in the middle of the lesson does all right 3 is a prime number true 6 is a prime number false 11 is a prime number true and 31 is a prime number true all right so does that all make sense of what i did right there so i took my i took my new function that i created i then took a test scenario an interval i'm iterating through this iterable and then i'm printing it out and calling that function inside my f string so jan this is kind of and i don't know if we'll get to um multiline strings but um this is how you'd handle your scenario just to give you a little hint you'd have these brackets in here and you'd go back and have those assigned to variables with whatever scenario you would have does that make sense all right okay so now we need to see and figure out a way of how in the world we are going to then track track our that's not what i need to see sorry so the two is the first prime number three is the second and did i have this up and uh so we just need to go through and get started so all right so now we're going to look at we're going to look at the nth how to make an nth prime number function so def nth what i call this nth prime all right so basically the premise of this is is if i want the hundredth prime number how would we do that so we need a way to so we already know how to check if a if a number is a prime so we need to continue adding numbers so we need to we need to figure out how are we going to do this because if we well you are you guys are doing a really good job and you guys ask a lot of good questions ask a a lot a lot of good questions okay so look i will tell you i bet when i started i was probably further further lost than you guys are actually i'm i'm kind of intrigued if everybody wouldn't mind in the chat commenting how long they've been working with python i would love to know that that would be very cool so all right so we need to just we need to we need to decide how we're going to do this because i remember when i first started doing this i was like oh my god so i need to check the first thousand numbers that's inaccurate we're counting a sequence of oh very cool well i promise you in the first month of me trying and learning python um uh you guys are much further along than i was at med month one so i wanna i wanna tell you guys that and um let you guys know that is a lot of lines so that is that is uh that is very that's very impressive all right so we need to so we need to just we need to figure out how we're going to be do how we're going to be doing this well uh i started with c plus plus a hundred years ago and i love the idea of programming but i just could not get it then uh gosh it's coming up on eight years ago now i read some articles and python was in there and i was like wow i've never heard of this and i've been off to the races ever since so all right but our our nth prime number so when my brain first went i said okay so i need to check i need to figure out if it's in this span and that's inaccurate so i need to figure out a way to count prime numbers so if it passes this test so i need to reason why i like doing this right here is to show you we're going to be using this inside of this just like we did up here with our blank lines so it's gonna look a lot like this so as you can see i like to build i like to build one thing upon another so it doesn't become very foreign and we don't go from hello world to uh building a machine learn learning uh algorithm i like excuse me i like to take baby steps so it reinforces what you've learned and you have a toolbox full of tools that then you get you get handed any problem you know how to do it you want to break it down you want to break it down into something that is so simple you can explain to a fiveyearold if you can explain it to a fiveyearold you can put it in um python code and have the uh interpreter work with it all right oop there we go so we need to set some rules so one of the dirty things one of the dirt one of the dirty rules about programming is you have to have a starting point that's that's one of the dirty little secrets you just can't you just can't go you have to start someplace so i've alluded to how we're going to do this so we have a scenario and you have a certain set of rules so if i go and i want to start at 2 and just to make this to speed this up we're going to realize that excluding 2 every every other prime number is odd all right i'll say that again excluding 2 every other prime number is odd so we're going to count by two so we're going to speed up our loop by not checking every number we're only going to check the odd numbers so we're going to go by twos and move on so that being said we need to we need to set up our our our setup to then solve and plan how to handle this so we're going to take in our x number if if i want to find the 100th prime number you'd enter that there so and that's why that looked weird nth prime that was all right so we are going to start at three then our prime is two so why why am i doing this because again what is our starting point so we're gonna we're gonna kind of push start this um algorithm so we know the first one is two and then everything's subsequently thereafter starts here and will then increment by two every uh every odd number only i we're gonna we're gonna start just like we did here we're gonna remove any possibility well why in the world should we be checking all any any even number because we know it's not because it's divisible by two off the bat so then that's our starting point so if somebody enters one right here i want to know what the first prime number is okay i got you excuse me return two boom that handles that scenario so then now everything there after shoot let me see if anybody's got oh yes the yes the zen of python is actually very very very very cool uh do you remember how to import it while we're talking about this the zen import what and it just runs anybody remember this just this that's how set up to the top it is it is a python module runs right through here yes if you've not read the zen of python i highly recommend it it is it is extremely it's very simple very clean beautiful is better than ugly explicit is better than implicit simple is better than complex flat is better than nested there you go so just wanted to throw that out that is that is a very good call out so all right back back to back to our is prime so now we need to then figure out this so while prime so what what are we what are we testing what are we what are we wanting to see how are we going to go about this so while while what is less well what is less than this so we have we have found this is our second prime number oh i misspoke this is our second prime right here so we're going to have prime be our counter we could count so prime we could have had uh this is our nth prime number this is two and it is three so while prime is less than x we need to do something so if i were to input right now if i were to input um two three would come out because our second prime number is three does that make sense that's how we have this we could have set count and i forgot that i changed that because we are wanting to this is the second prime and we're going to do that going forward and if you wanted to rearrange this whatever prime number and then your count you could but the way that we're going to build this is we're going to say i want this to continue while this count is less than this all right so the first thing we need to do is it's it's less than this and this is the second one so i need to add to this so num i need to increment oops by two then if is prime number then prime plus all right let's go slow let's go slow let's come back up here so what am i doing right here because we set this up that we're gonna have this test oops i didn't drop out did i okay that's why we're setting this up because it's going to return create return create something and i think uh jan was that you who made that comment right before the stream about in place and um uh none so my function is returning creating false or true so i'm going to have my condition right here this is going to this is going to go if this is going to return either true or false so then if true so if this number num is prime it's going to come down here and it's going to then do something and we're going to increment prime by 1. then we're going to come out here and i know that i just made a mistake because my return didn't go orange all right so let's check this let me make sure do i have a table of prime numbers let's see 1 000 prime numbers there we go so all right let's check this and then we're going to run it so let's bring this back does this make sense to everybody because most of the time i do this lesson i want the 1 2 3 4 5 6 7 8 9 10 10th prime number okay that did work let's click over here okay all right cool yes uh yeah you were talking about in play yeah the the video in place or return are none in place of none all right so what what in the world did i just do so i took a i took a function i built another function around it and i'm passing in and creating a test of how in the world could we check and see if a number is prime so then i want to know the quantity of prime numbers i want to know what the 10th prime number is all right so now what happens if i wanted oh that's a good one all right i have another note here what happens if i wanted a list of how would this how would if i wanted a list of all the primes and this is going to be list comprehension all right who said who was saying last week that list comprehension is uh is a challenge who is saying that all right okay so we're gonna put this in a list comprehension and we're gonna we're gonna check out okay well cool how any thoughts of how in the world we would it's not all right okay well cool it's no no no need to have nightmares i already have some so let's just go ahead and look at this i'm going to go primes so we're going to build a list with list comprehension so we're going to we're going to get our brackets and for i in range so i'm going to i want to check the first 100 numbers so i know one is and if i want the first 100 numbers i'm going to go to 101. now that's our that's our header okay all right are you good there all right so instead of the body being underneath just like so i goes at the beginning all right this is the order i want you to think about making a list comprehension so i have for i in range whatever my iterable is now at the end of it is our condition and it's literally this simple if is because now we're going to call our function is prime i all right so let's run this boom all right yes shouldn't shouldn't there be i for i absolutely and if you're to that point where you can just flow that out that is absolutely fine but i like to show the the way to to deconstruct a for loop header and body than to do it in that order so you have your your header your then your then your iterable your excuse me your itter here's your iterable forgive me for misspeaking then here's your iter and then here's your condition so your your itter goes in front of the four all right is that a little bit better is that that oh is that a little bit less nightmarish and i get it i remember the first time i saw this especially with scenarios and then you have these over here and you start doing stuff to this and it's just like i don't get it and then there's actually more well because a lot of people like to show off and just good that's the point people then jump into this and they have net a nested list comprehension i'm not going to show you a nested list comprehension for a while because sometimes that's can be a little extra extravagant but maybe next week we can show speed i think that's a good idea because now we're going to work on our guessing game this went a lot faster than i wanted to so now we're going to build upon this and you could even go and build this and have a a list of a scenario of until this is 1000 so that would be well you guys you guys are awesome and like i said i want you to well cool but i want you guys to understand i promise you you guys are much further along than i was at a month i know it i mean if you're already uh building uh a bot i i didn't even understand what that was and having to have i mean it took me forever to get what a module was i mean when the first time i saw this i said well how how did they get this to come out well it's in the file what what file oh this is the name of the file no it's called this yeah i know that's the name of the module this so trust me just spit in the just said spend the time i don't know if you guys uh watched the video yesterday on my channel but i promise you just show up and look you guys are here every week you guys are getting this you guys are asking a lot of great questions you guys are doing good all right cool let's go ahead and jump into our guessing game so we got a lot of cool stuff to deal with the guessing game all right let's comment this out because we don't delete code right everybody we don't delete anything of code all right guessing game so we are going to need to come up with how we're going to do this so we got to where our first problem is a random number right how do we do random numbers anybody remember what tools do we have to get us a random number going oh i lost my so we need to get import random random yep and then which which one to deal with random oh my goodness i am so sorry everybody all right if i just want one random number let's say from 1 to 20 what do i use 763 lines of code sequences pick random elements pick random sample uniform within range uh let's see anybody remember randy int randy ant that's okay uh so so randent is okay oops there's another comment rand because then random range we'll deal with that later but randint is sufficient so we need to uh pick and have have our number equals brand int and how to remind remind everybody what does randint do this is the only time that that i can believe has that b is inclusive and i want you to look right here this is this is math and only if you're nerdy math like me you get so open open a bracket and a parenthesis tells you the yes and that's fine that's again you don't know these things until you know these things and i mean i couldn't remember i could not remember anything but you do this stuff 10 hundred hundreds of times you just you just know what to do i mean you may not know that everybody wants to go and get a hammer the first time they're working on tools and a certain type of screwdriver well then you learn that there's more sophisticated tools and you go from there again you don't know what you don't know they're called unknown unknowns well we're trying to remove as many unknown unknowns as possible so here we go we have our we have our first problem solved well guess what we need to have something go over and over and over and over again so we're going to go 1 through 20. so we need to do something until something stops so guess what we're going to do while true now let's see what'd we learn last time of how it um would we learn how to handle last time taking input from the user if it's if it's wrong so we need to get ahead of that right now so we're going to try accept and what was our what was our exception all right oops please enter a number and i made a booboo i should have put pass here just in case something happened so all right passes hey i know i have a header and now i have you can in this situ in this very small situation but you guys are already sophisticated enough that i want you to get into the habit of this when i have people who don't even get this concept at all i just have them do accept but that habit is then you do that and you grab all exceptions well you want to be as focused as possible and what we just learned about this explicit is better than implicit so with us putting here value error we are explicitly catching that one error and we will hopefully we'll have time and we can work together and we can grab other errors and more sophisticated but then you just have these go through but you can you can but just want to be clean and clear and explicit in everything that we code and especially the things that i want to show you i would probably show that on my channel i think i've done that before but here on free code camp i want to make sure that i'm showing you guys the best the best of best practices no no no no whitewashing the fence so all right so let's just go ahead and uh finish it out so now okay so now we need to so we have we have the computer it's grabbing a number so what is the point of this we went now we're going to do tests of we want to compare what the what the computer picked to what to what we're going to guess so first of all so we can really kind of make sure that this works we're going to cheat a little bit and we're going to have this print out on the screen awesome nice catch thank you so we're going to cheat and also we want to make sure that our tests and our scenarios are correct so we're going to print out the number but now we need to take input from the user to compare right so we're going to have the guess oops the guess then what is our alltime problem that we have int input would i say please enter a guess all right so now here's here's where the fun starts now why'd that happen anybody know because i can't count so i know that that's now there saboom okay so now we are so let's check this 17. so first let's handle our first problem oops please enter a number 17. all right so here's our here's our first dilemma that i guess 17 and nothing happened so let's handle that first so we can get ahead of that and we're gonna have some excitement with this and uh it's the reason why i like this exercise so much is you've really got to you really have to understand workflow and you can make it extremely complicated or if you're like me you like to make things super super simple so you can remember how to do it so we have a while loop and then we need to learn how to handle this actually no we need to handle one other thing we need to actually then have a second while loop yeah sorry got ahead of myself you guys you guys are so good and smart i get so excited and i get ahead of myself i think it was last week yeah where we started doing uh i almost forget what yeah i need to go back and look at my notes and actually see because i i think we skipped i think we skipped what i kind of wanted to talk about because uh we got into the um yeah i need to go back and check because uh we got into the uh horse race and that was very cool that's one of the uh 25 horses yeah if you guys missed last last week's that was very cool we uh we did some cool stuff that was an interview question i ran across a while ago it's probably not one anymore because everybody knows the answer all right so now we need to have a loop here so while guess not equal and old sam would be having a panic attack right now so all right so what we what we're doing right here is we need this loop okay kind of cheat a bit and use my notes and that's fine that's fine look it's not cheating to go back and look what you it's your work it's what you've done i still google stuff all the time oh my gosh what does that do what's this error look i i read this one tweet that um from this data scientist i spend more time googling my errors than writing code look if you're not taking somebody else's work it's not cheating so if you're having to look up an error if you're having to look back at your notes that's the point of this is to go oh i don't remember exactly how i did it but i know i did it but i know i have it here that's why you don't throw anything away that's why you don't delete anything and that's why you definitely see save things to the cloud and make sure you never yeah don't don't leave any code that that that's funny well then you can uh check out uh free code camp all their awesome videos or python basics for all all of uh those things because that that's the that's the point and that's what beau and i were talking about about having all of these lessons that i have all compressed into streams that everyone can come back and watch all right i digress so but the reason why i would have had or old sam would have a panic attack is true and false was already um bad enough and then now we have a knot here but the way that i was okay and was able to comprehend this is you're going to do this as long as this is wrong so that's what i want you to think about you're going to continue prompting the guess of you're going to check you're going to continue to check because if it's not because you have how many scenarios do do we have any any thoughts we have we have we have certain number of scenarios and we have to handle each of those so right now we're handling any improper input so we actually have uh i don't i got you that's funny all right so we actually have four scenarios bad input correct guess guess is too high and guess is too low so we actually have four bad input solve that uh right now we're going to handle it if it's not the right guess so we we can just go ahead and and start there all right so uh if guess is greater than number sorry if i guessed if the guess is greater okay the guess is greater please please do please and please guess a smaller number i don't know if we want to put a sentence on there all right so that's part of it then i'm going to then take another guess right and then or here let's just let's go slow print so that we have guesses too large so then we need to do hang on hang on i missed a couple cool yep well yeah jan i don't know if that was you or we but yes we we got this right here then we have so i think it was our scenario where we had a nested so it's not right and then we have then two subcategories of not right we're either too high or too low so then we need to handle these two and two of them is a slam dunk we got an if and an else so then please guess a larger number all right now we've got a little bit of a problem so it's one okay i'm guessing one and here's our problem anybody see it it's just continuously going so what do we need to do that's just running and we're now 20 62. so we need to reprompt right all right i know i know i know i know i know i know i finally found a scenario that it's okay to copy but don't copy okay i even i even messed up i don't even let myself copy uh okay you think we'll get there all right so five smaller number three okay guess a larger number all right so those two work those two work so then i guess four but then i'm all right so here we go so this is how we're going to then so you could then test you could do an elif but i want to show you something that is very cool and i'm going to show you something else so um all right guessed the correct number this is what is very cool about this and not a lot of people are shown this and then we're going to handle just like we did last time all right so it's 10 so i'm going to guess 8 guess a larger number 11 guess a smaller number 10. okay but now i need oops and then right here so what we did is then we need to then have a issue right here of do we want to play again so we get out of here because i'm up here guessing because i'm going to show you this i forgot i changed this to inside the try so now we need to do a question and i'll show you the scenario why we need to put it here put you can do the break it will work but i just want to give you yes because while this is what i want you to think about while true right what does else do what does else grab else grabs the false right bingo so that's why we are pairing the while and the else and then we need to then test here to get out of this loop because in my original because look this is a perfect example is i've written this probably 20 30 times over and over and over again and mate actually that might be something neat because we're gonna have a little bit of time i will show you some of my old garbage code to just because look i can say it that you guys are much further along here's a looping alternative yes absolutely that's the way i want you to think about it else is the the other option bullion you have two choices i think i'm in frame i need to learn about where i am you have either true or false and that is the basis of a processor that circuit is either open or closed everything else builds from there all right that's what i want you to think about you have to think about very binary can i get this down to binary or as close to or then start alleviating all right so yeah that might be something cool to do so i'm going to show you this i did not think i needed to build all this at one time and then i'll show you exactly why we could put this outside the loop but then we have an error and you'll get a bug and those sometimes are so fun to find i remember the first time i built the times table i actually that might be cool i might show you the i think i didn't break my rule yet and have this all to play again all right yes no do do do do then what what do we what do we learn how to do lower than if q 0 equals lower in break all right there we go so we got kicked we're kicked out of here kicked out of here right uh okay 11 guess higher 13 guess lower 12. you guessed correct would you like to play again no awesome it worked all right oop that's not where i want to go now now let's show you i remember uh one iteration i ran through was that while i was getting my notes around so i looked at it and i go well i don't need this because i think i was i was wanting to i was wanting to see how dependent this was so let's comment that copy this and i think i put it here yes so it gets outside of my exception so i said okay let's check this and i think let's see see if i can do this on purpose um ah and there's one more bug that i almost forgot about that we need to then handle because right now sorry i really like working with you guys i am very sorry sometimes i maybe at some point i will get so used to you guys asking some really good questions and um i won't i won't get as uh get as excited but no you guys you guys are phenomenal you guys are great great students great learners and really good questions so now i've moved this down here this is going to create a bug and i'm going to show you why let me let's see if i can make sure i do this on purpose okay all right so 15 17 16. ah shoot i thought ah here we go all right so i want to i have to rethink about what that bug is all right let me show you this problem oops please enter yes so everybody look at what that number is right now so i'm going to go 6 7 oops 9 8. you want to play again yes huh what are the odds that it's still eight yes okay now this is becoming astonishingly was that it did i get it to do it okay all right what are the odds that our guess is ate every single time anybody have any guesses of why what flow shift down there um okay all right all right let's talk about the bug that and i can't get the other bug to work um here but i just wanted to show you uh this let's comment that out actually it might it might show up here all right so did anybody notice that i got eight is the random number every single time anybody notice that so how do we solve that anybody see the problem in my code anybody see it yet here so i'm in this loop going over and over and over again but this is not so this needs to be here see where it needs to go right inside right here so now when i guess should i play again yes 17 oh yeah 147 so is that guess the smaller number 17 would you like to play again yes so now this is where it needs to be actually let's check and uncomment this out and see if this grabs it all right uh nine oh i know what it is now hang on this is this is the problem so if i hit no here um okay i guess the bug is gone i could have sworn that was it but yes i did want to show you this right here and you're exactly right this is a true and if it becomes false grabs here alrighty so no that is that so we have about 36 minutes generating remember inside the wall abso absolutely right we needed to move that down if we wanted this to truly truly repeat all right let me see where we are with this well we went so much faster all right this is a good one did we do leap year yet anybody talk about okay let's look over and comment do do have we done leap year jan does anybody alright you guys know lee pierce all right who knows the definition of a leap year i bet you a nickel you do not know because i thought i knew and i turned out i did not know so i thought i would have bet any amount of money that i could explain what a leap year was and i would think i was 40. so three years ago and i learned that i did not know what a leap year is anybody want to try for a nickel and i will oh okay a leap year is a year exactly what are the what's the what's the rule for a leap year i'm sorry i wasn't saying what's what's a rule for a leap year any comment any thoughts because the first guess that everybody tells me and i would have and i said the exact same thing i would have said the exact same thing it is a year that is divisible by four that is partially true there are two more there are two more scenarios so first has to be then almost happens every four years so the so 2000 was a leap year right i don't know if you guys you guys were more than likely alive but maybe not that old so 2000 was a leap year is everybody aware of that but also 1900 was not so here's the rules and we need to build we need to build a function of let me get over we're going to build a function to test this so all right so 2000 was a leap year but now here's the kicker 1900 was not a leap year and the reason why is because it is divisible by 100 and not divisible by 400. so i'll say that a couple of different ways so when you get to the century mark it's every 400 years so i get to tell my kids my kids were going a little bit after 2000 that i'm the first one to have to have a leap year on a century since 1600. so here we go so here's the rule of so sixteen hundred was a leap year because it is divisible by four sixteen hundred divisible by one hundred and sixteen hundred divisible by four 400. that is the definition of a leap year so 1900 is not a leap year because once it is divisible by 4 by 100 it then immediately has to be divisible by 400 and you have a remainder of 3. so that is the rule every single year is divisible by every every year that's divisible by 400 excluding the century marks are except every 400 years now let's build a function to test that is everybody's mind blown right now because i remember the first time and i would have bet any amount of money for any value and i would have been mad about it that i could have told somebody what what uh what a leap year was all right we ready to do this okay so we need to go slow and we need to get this figured out so we got leap year so what'd we learn we we just learned so uh 1992 we're gonna check then 1600 and 1900 2000 and then we'll check 2020. what do we think about that does that sound pretty good i won't i won't uh i won't take it from you but that's one of those things that you keep walking around i remember uh i remember i told my dad about it and he he wanted to get he wanted to get mad he he does not like it when i know things uh that he does not and this is why i don't enter yeah i look i don't i don't i don't bet but i i would have like i said i would have bet any amount of money i don't but um all right so we need to go we need to go and think about this this is going to be this is going to be fun so you guys you guys help me how are we going to do this leap year so we're going to test a year so we got that set up so what's our first what's our first scenario so it has to be what before we before we even waste any time right how should w what should go here i guess i can pull this over we don't have any more lots of documentation we have to do all right what what should go here divisible by four all right if year modulo four equals zero all right so now all right good okay then what what'd we learn now here's where the true and false get real fun real fast i think i can have these ooh i don't need to see me somebody type okay all right all right so then now all right so let's look let's get this um we'll do pass then we'll get this uh oh you want to do that one already cool all right so if then x divisible by 100 equals zero then what then what so i like how you're doing this okay so we're we're just we're just going through then so we got 400 then we checked 100 then okay if 400 yep so 4 100 400 it's a it's a leap year right return true okay who's ready to do a bunch of else's oops all right so huh didn't think oh no need to get that nope because it's just a it's just a scenario it's just a one one time one time scenario you don't have to go through thank you all right great catch all right so we have our first true so then inside this which one will this be else what what's this one exactly all right so we'll work our way back out so if this scenario boom all right so then i back out one more right what's this one any thoughts it's a little backwards look you guys i'm gonna have to start hiring you guys to be my copy uh my editors alright so what is this else other than you guys checking my my spelling all right so then we go okay so then this is weird okay return true else return false all right so let's look at this and let me check mine true false true false it looks weird but let's go through it so now we have let's build this so we're going to check these up here here are my years years equals we throw these in 1992 1600 1900 2002 2020. okay all right so four year in years and that's fine look look you guys i would have never ever ever participated in a chat on when i was learning especially at a month i'd have been terrified look you okay if you if you haven't seen the video uh yesterday i'll try not to take it personally but look you only get better if you stretch your stretch your wings all right look you have got to mess up and especially when you're i want you to think about this we are completely pushing the limits of technology every single day and they don't happen because of we accidentally just it showed up no we tried something we broke it we tried something it didn't go it went horribly wrong i drive my kids nuts when i talk about the quote from thomas edison he does not say he discovered how to create a light bulb excuse me he doesn't say he invented a light bulb he discovered the way that a light bulb worked he removed all the other options that were wrong and the only thing that was left was a light bulb over ten thousand experiments of what didn't work he happened he removed all of them it's like a sculpture i want you to think about that the sculpture is there inside the rock michelangelo used to say that all all the time all i do is remove the excess you have got to try something break it and learn from it and go from there all right i know i just went off and off and hopefully not a lot of people just quit bo won't let bo won't let me back all right okay so here we are um print leap year uh year did i call the right variable okay and i close that out and know what i do wrong and i did not close it out okay otherwise man once told me if you ask a stupid question you only like until you hear the answer yeah uh if you don't ask it you'll lack knowledge for the rest absolutely i i remember when i a lot of parents struggle with why because it it takes a lot of time and it's a lot of energy it is a lot of energy all right so let's look at i guess i should you know what i should do so i should probably have year printed there and we could put that in our handy dandy f string maybe we can do that in a minute but all right uh why why why why why why i love that question now i love that because look you only get better if you ask why and if somebody you're working with doesn't tell you why uh absolutely i could not i could not say that better i want you guys to grow i have the greatest time being here and i am being extended the wonderful opportunity of um having being on this channel that um quincy and bo are allowing me and i just hope that you guys are all getting something out of this not just programming but stretching yourself pushing yourself uh and going from there so all right uh here we got we got 1992 true 1600 false 1900 true um ooh no that is backwards hang on oh my goodness what'd i do wrong false false true oh we need to fix that well here we go guys where did i let me check my stuff over here oh will this come over here oops yeah i want to kill it sorry i need to uncomment this out and run this true false true oh anybody else catch my awesome awesome mistake there we go here we go okay again you guys i can't blame that stuff on you anymore you guys are you guys are awesome all right so guess what i left out a very big important scenario right here of testing that this is a true false true false and this is back supposed to be true let's check this again false false true true true there we go because if you missed it and i cannot believe i did that but i left out a condition of equal to zero this modulo equal to zero so all right we got about 18 minutes let's uh let's jump on something new so we just did just did that um let's see pull this up is that going to pull over there so i can open that let's bring that over here because we flew through through these a lot faster than i was imagining so ideas i'm looking for h i that's not right let me say bear with me guys like i said you guys are uh fantastic okay actually here's here's some here's some pretty good stuff oh hang on all right he's playing tricks on us always with the small things oh absolutely uh well i can talk to i can speak to that uh a ton so i well my spelling hasn't improved uh maybe marginally but my typing has and also if i haven't said this yet i became much more sharpminded by having to focus on making sure the variables matched up and making sure i was typing correctly um and the speed of typing my and i know i'm not a fast typer i'm not i'm not saying anything like that but i am much faster than i was before so let's actually look at a couple of things so let's take a list and i don't think we have done this yet so we have we have a list of names and we're going to go let me just grab these names copy them put them over here so i'm going to show you the long way and then i'm going to show you some of the builtin functions well yes my younger son he has a mechanical keyboard and he loves sometimes the clicking just absolutely drives me bananas but all right so let's look at another way so we have for name name in names print name right all right well i'm going to show you how to think about this because there's going to be times there's going to be a time at some point and you're going to need to know how to think about this and going through and thinking about the the the index i don't think we've done he's trying to kill his keyboard that's funny all right so then we go lynn lynn names so let's look at this blend names when names all right would that do and if i could get an s in here for the love of all that is good it's all right let's look at this for a second so i think i showed you this so when you call der without anything you see everything that's in memory right now right so we got horses sitting around out there we got name we got names we got numbers we got race we got random we got shuffled so name is the last iter here so i accidentally ran lynn on name and steve happens to be the length of five well i want the land of names i promise guys i will figure this out three because there's three items inside names and we do help on len and we get return turn number of items in a container all right so string is even a container hang on what is it oh that's messed up that's the keyboard killed his father okay all right so now so since this is a since th this is another garbage collection video yes i uh was that you that asked about it i could not remember yes i um that was very intriguing i i think that would be a very good idea i don't think that would blow everybody away because actually that's kind of my claim to fame um i actually made a tweet um a long time ago and um gordo uh hearted it because that was actually the one of the premises there's tons of premises of why python became python and was created but it was so memory allocation was not important it was it was going to take that away from the user to enable the excuse me the the the programmer to um to be more free and it would it would free up time and be able to because that's that's one of the things that stumped me with c plus plus and just of just a variety of things but that that was that was um one of the points was memory control and memory allocation that was one of the top priorities of it so yes i actually think that's a very good idea and i don't think it will be over too many people's heads and especially all of these awesome new subscribers that um i've gotten but yes i will get some stuff around because i don't think a ton of people are super interested in the django um series so i'm gonna try to wrap that up as fast as possible and then we'll move on to some other cool stuff have really gotten some really good really cool suggestions but all right i digress let's finish this out in the next 12 minutes so since this is a number an int and so then we can wrap this because again this is completely legal because python understands it goes hey you know what you're talking about you're passing a number in here and we're going from here so now so now i still get um names here we go so i'm gonna go here apparently i will never use names again since i cannot um keep the difference between name and names all right so this is completely legal so now we're going to have somebody looking at this and they're gonna go zero that sam is zero there's zero person so guess what this is how we solve this one plus one completely legal because again python goes hey you know what you're talking about completely legal oops there we go now now let's look at um check this out so i so we need to change this to i since we got rid of names that's more clear so but let's come back over here and look at this again lend names nailed it all right so we got 0 1 2. so down here we're going to solve it here so check this out 1 2 3 4. names i alright so what are we doing anybody anybody got any guesses so i'm actually using the range function to index through now that was a lot of work to show you this has anybody seen the builtin function that does this exact same thing that i just did with the tools that we have so far any i almost want to say anyone anyone but i doubt anybody i don't know if bo or quincy are still watching to get that reference i might send some real money if anybody gets that one that is an old movie from my error index bingo i am indexing fantastic so now oh yes i'm using index oh i see what you're saying index has anybody seen enumerate anybody seen the enumerate um function anybody seen that yet does this exact same thing just we don't have to do any extra thinking okay all right we need to figure out a better way to faster not better the chat's good i've used it but you haven't shown it okay well what does it do and that is very helpful that you guys can help me eight what does it do it's actually very cool so it shows the index value and value bingo what does it create so you have an interval starting point creates a pair where's the default anybody know that if i say default what do i mean what information you have tuple very good creates a tuple because whenever you see pairs and then it even hints right there defaults to zero so all right let's check this out so we got names right then we got let's just do new i remember numer or eight names new i remember i spent more time just forgot this new equals list new new forgot that part all right bam check this out so uh then when i do new up new index zero wrap that tuple very good so what this does and all right so default argument keyword argument um but it is uh default to zero already set so it starts at zero but i could come in here and change this oh yeah yeah yeah yeah yeah let's do this this is good have we done packing and unpacking yet anybody got a couple minutes we'll get we'll get into this oop and i just broke my own rule all right comment that out for i in enumerate hey all right names starts at zero i want to start at one sorry one print i so what am i going to do right here i get a tuple i did not talk about packing and unpacking awesome okay uh five minutes i think i think we can do packing and unpacking in five minutes so we have a pair these are set together so i right now because it's our last item so i is still there so num and name equals i [Laughter] uh what i what did i just do i it didn't throw an error so something is completely legal so i just unpacked this because i i is a tuple has a len of two i passed it two variables python goes in breaks this down unpacks assigns because it's just like this just like that so i want you to think about this so i is this just like this so i have x and then y and it goes in and just links the two of these together oh very cool well that's awesome and unpacks this next video we'll look at we'll look at uh packing back but this unpacks this so so if i have i right here and each time through this is this is a set this is a tuple so let's run this again oops sorry so this is my tuple so now i can come over here copy paste comment num name all right so what don't don't overthink this same so what this is is this is unpacking this item print num name go through boom so there we go i think that is a fantastic starting point and i promise promise promise and i'm gonna save this right now i did not save the um the file the shell the first time but i did shave shave save the file they the shell um shell shave save the shell wow say that three times fast save the shell the first time but i did save the shell the of everything that i typed in the meantime so we'll at least have that and i will be doing that going forward but absolutely awesome stream today i really hope you guys are having as much fun as i am because i really i really get a lot out of this and i have a grand grand time so i just want to tell you all thank you very much um i really truly enjoy these anything that you've seen here i've tried to have a more indepth video over on my channel so if there's anything you want to see just bounce over there thank you everybody for spending time quincy and bo thank you for extending me this wonderful opportunity and we'll just keep going and we will see where this goes but as always guys thanks for watching stay tuned and we will see you guys next week bye guys
