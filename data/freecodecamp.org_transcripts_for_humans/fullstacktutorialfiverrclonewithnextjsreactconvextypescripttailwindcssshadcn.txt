With timestamps:

00:00 - learn how to create a fiber clone with
00:01 - nextjs react convex typescript Tailwind
00:05 - CSS and Shad Cen this is a great project
00:08 - for improving your skills as a full
00:11 - stack developer V created this course he
00:14 - is an experienced full stack developer
00:16 - in this video we will create this Fiverr
00:19 - clone platform that lets users post gigs
00:23 - and lets other users buy gigs so here is
00:26 - a four G example gigs but there can be
00:28 - as many as you want so if I go ahead and
00:30 - click on this gig it will load the gig
00:33 - page here we have images H then we have
00:36 - uh all about the user and the gig we can
00:39 - leave reviews there is also uh basic
00:42 - standard and premium offers for example
00:45 - short here medium and long here if I'm
00:48 - the owner of the gig I'm going to have
00:49 - edit button but if I go ahead and change
00:52 - my
00:53 - account I go uh with Google on this
00:57 - other account I will be able to uh order
00:59 - order now or send message so if I click
01:02 - order now it will send me to the stripe
01:04 - checkout page and I can purchase here so
01:08 - if I want to start selling from this
01:10 - account then I'm going to click connect
01:12 - stripe and this will connect a
01:14 - platform's stripe to my stripe so I can
01:16 - start selling and the platform will take
01:19 - a 10% cut or 5% cut whatever you want to
01:22 - take I can also send message to this
01:24 - user if I have a question about his gig
01:26 - so this is the list of conversations
01:28 - that I have with all of the users and I
01:30 - can say hey tell me more about your gig
01:34 - and from this other account I can go to
01:36 - the
01:37 - Inbox and if I click this then we can
01:41 - see all of the messages I can respond
01:42 - with hey with this other
01:44 - account I can go back to homepage by
01:47 - clicking here so I can also uh search so
01:50 - if I search for
01:52 - haircut if I press search it will only
01:54 - show the haircut I can also favorite the
01:57 - gigs so if I go back I'm going to
02:00 - favorite this one I'm going to favorite
02:01 - this one as well and now I can only show
02:03 - favorited gigs so it's going to be these
02:05 - two but I can unfavorite them so it's
02:08 - going to disappear or I'm going to
02:10 - toggle off favorites I can also toggle
02:12 - by category so if I click switch to
02:15 - selling then it's going to display all
02:17 - of the gigs I'm
02:19 - selling and if I click to create I can
02:23 - create a new gig for example I can say I
02:25 - will develop your website and I can
02:27 - choose a category and subcategory
02:29 - ategory front development and if I click
02:32 - save it's going to be saved successfully
02:34 - and it's going to redirect me to this uh
02:37 - gig and now I can choose a choose a file
02:40 - to upload so I can upload this image uh
02:43 - click upload image and then I can give
02:46 - it like title so small website price
02:50 - $100 for example and whatever the
02:54 - description I can adjust all of this I
02:56 - need to save this I can save standard
02:59 - premium versions and then I can add a
03:01 - description as well and then I can
03:03 - publish before we start with the
03:05 - tutorial I invite you to join my
03:08 - school.com uh group where we teach web
03:11 - development so you have all of these
03:13 - courses and there is a community where
03:15 - you can answer questions I will be here
03:17 - for one or two hours every day and
03:19 - answering all questions and there will
03:20 - be live sessions and everything so um
03:24 - you can read more on in this description
03:28 - let's start by making a repository
03:30 - name and then MIT license and create it
03:34 - I want to go to code https and copy this
03:38 - go to folder where you want to download
03:40 - this and then run CMD git clone and then
03:44 - just paste that
03:46 - link we can exit this and go to next1
03:48 - for
03:49 - fivr here in nextjs documentation I will
03:52 - copy this npx create next app next app
03:55 - at latest and you must have no JS 18.7
03:59 - or late
04:01 - so here in this folder let's run a new
04:03 - CMD inside of it and just uh copy this
04:06 - and then add dot so we install this in
04:08 - the current folder the
04:10 - nextjs while this is installing let's go
04:12 - to clerk.com Let's also go to convex
04:17 - this will be our database and clerk will
04:19 - be our authentication so let's go to
04:22 - dashboard I will create a new
04:27 - application I will name it Fiverr clone
04:29 - Lo and enable Google and email create
04:33 - application so this is the documentation
04:35 - but we will go here to JWT token because
04:38 - we need to conve connect this to convex
04:40 - our back end so let's create a new
04:42 - template
04:44 - convex and just save
04:48 - changes now in convex let's log
04:51 - in if you want to learn more about this
04:53 - setup just go here uh look at this setup
04:55 - and de development guide it's 1 hour
04:58 - long everything is explained in deta I
05:00 - will just do this quickly now I will
05:02 - also go here and say clerk convex setup
05:06 - and I will click here convex clerk from
05:08 - convex docs this is the documation so we
05:11 - already created clerk created JWT token
05:16 - so this is what we will do next but
05:18 - after we install the proper package
05:21 - let's continue with nextjs installation
05:22 - so press okay to
05:25 - proceed it's going to install this
05:27 - package would you like typescript yes
05:30 - sink yes Tailwind CSS this yes no to
05:34 - Source directory yes to app router
05:37 - import we don't want to change this so
05:39 - if you want more explanation go to the
05:40 - video that I explained so all of the
05:42 - files are added right here we wait for
05:45 - this to install after nextjs installed
05:49 - let's look for Google setup so go here
05:51 - nextjs quick start not Google but conve
05:53 - setup and then uh
05:57 - let's this actually changed but let's
05:59 - skip this we're going to do this manual
06:02 - so npx create next app this is we
06:04 - already did this we created next app and
06:06 - then npm install convex so let's go here
06:09 - and install
06:10 - this after this we need to say npx
06:13 - convex Dev to activate convex so convex
06:15 - is our
06:17 - database so let's go and run
06:20 - that if this is your first time uh using
06:22 - convex then it will prompt you to log in
06:25 - in but okay so this is my page and I
06:27 - have four projects and I can have up to
06:29 - five projects so I'm going to create a
06:31 - new
06:33 - project the name I'm going to keep this
06:35 - recommended name and just let it
06:38 - run and we are going to just let this
06:42 - run because this will let us have
06:43 - real-time updates so whenever we change
06:46 - something in the code it's going to
06:47 - automatically reflect update in our
06:49 - database so right here with this we see
06:51 - that we got this new database and there
06:54 - are tables files everything is here so
06:57 - we will leave this running and we will
06:58 - start a new CMD for something else now
07:02 - let's look for shot CN xjs and the these
07:05 - are uh components to build a component
07:08 - Library so we're going to start from
07:10 - here npx shoty and UI latest in it so
07:13 - let's copy that these are like buttons
07:15 - and everything we need so let me paste
07:18 - this and you can go here and check like
07:20 - for example here button this is what it
07:22 - looks like and this code for this button
07:25 - will be copy pasted into your code so
07:27 - you have full full control this is not
07:29 - like material UI where you call apis and
07:33 - then but this is just this is copy paste
07:35 - and you have full control you can edit
07:37 - everything so which Styles would you
07:40 - like to use for shaty and default and
07:43 - then slate or neutral whatever color you
07:45 - want I'm going to choose slate uh this
07:47 - is yes and just wait for a
07:51 - moment let me start a new terminal and
07:54 - then say code dot to open this uh path
07:57 - into vs code code editor
08:00 - now let's go here to convex clerk setup
08:02 - so we were here already and then we're
08:05 - going to uh create a new folder out
08:07 - config DS in convex folder so go here to
08:11 - convex
08:13 - folder and create a new
08:18 - file out config TS and save and go back
08:23 - and copy this I'm going to copy this and
08:26 - then
08:27 - here we will just
08:30 - paste and save and now we need this
08:33 - issuer URL from our clerk so let's go
08:36 - back to
08:37 - clerk dashboard and here where we
08:39 - created this convex JWT token let's copy
08:42 - this ISS copy and this must name must be
08:46 - same convex as this here convex so let's
08:50 - paste this issuer URL I think you should
08:53 - keep this trailing slash and
08:56 - save now let's add all of the components
08:59 - we we will use from shoten so here in
09:02 - the button I'm going to go here and copy
09:04 - this um choose npm in my case but we
09:08 - will add some
09:09 - more these are all of the all of the
09:12 - ones that we need so it's going to be a
09:14 - core Dion
09:17 - alert
09:18 - dialogue what was it uh aspect ratio
09:23 - Avatar you can go and check what each of
09:25 - these does if you want right now or we
09:27 - we will also do it later car
09:30 - carel
09:31 - carosell and then we got dialogue drop
09:35 - checkbox dialog drop down menu so
09:37 - checkbox dialogue dropdown-menu
09:42 - I don't want to bore you so these are
09:44 - all of them just write them or you can
09:47 - write them from here and then I'm going
09:49 - to copy all of this and go here into
09:52 - Shard CN wherever and just paste it and
09:56 - run this is just a normal terminal it's
09:58 - not sh and just terminal at this
10:01 - directory so now you can check in your
10:03 - app folder this is all of your code and
10:05 - in components UI is where these
10:08 - components are getting added from Shaden
10:10 - right
10:11 - now let's return to convex clerk setup
10:13 - so we need to npm install clerk clerk
10:16 - react but it's actually we don't need to
10:18 - install that let's go and search for uh
10:21 - clerk nextjs setup and then this quick
10:25 - start so it's going to be different so
10:26 - it's going to be this cleric nextjs so
10:29 - so let's copy this and go to a terminal
10:32 - and just install that and then we're
10:35 - going to copy paste this API keys but
10:37 - not this ones because I think this ones
10:39 - the document documentation are wrong so
10:42 - let's go back to Clerk and here in API
10:45 - keys and I will just copy these two and
10:49 - let's go back to and look for env. local
10:53 - file and Below just paste it like that
10:58 - that's it so now let's run npm run Dev
11:02 - so that's going to run our application
11:03 - Local Host
11:05 - 3000 when it says ready you need to go
11:08 - and refresh because you must pull data
11:10 - for the first time you need to refresh
11:12 - so now it's compiling this route so this
11:15 - is our current APP uh let's first wrap
11:18 - this actually we need to add middleware
11:21 - so in the clerk nextjs setup uh scroll
11:24 - down and we're going to make this file
11:26 - middleware TS make it outside of
11:28 - everything so click on the outside file
11:31 - and paste it and then copy this and do
11:35 - that so this is the middleware that will
11:38 - not let us uh like so we can Define for
11:42 - example if I go here and I'm not logged
11:45 - in it should not let me uh visit this
11:49 - page so here it's prompting me to log in
11:52 - so let me say continue with
11:54 - Google and now that I'm logged in now it
11:57 - works but also we need to provide our
11:59 - database to this application we need to
12:01 - wrap our database uh in the application
12:05 - with the database so we're going to go
12:06 - on the outside and we're going to create
12:08 - a new folder call it uh
12:11 - providers and inside we're going to
12:13 - create a new file convex D
12:18 - client-provider
12:19 - TSX so we will wrap our database with
12:22 - this not the database but our page with
12:25 - this database so first we will go ahead
12:27 - and say use client because this is going
12:29 - to execute on client so nextjs has
12:31 - server components that execute on server
12:33 - and client that execute in the browser
12:36 - so when you are using hooks you need to
12:38 - use clients so I will show you then all
12:41 - of these Imports you don't need to
12:43 - import them right now whenever I have
12:45 - these Imports you can import them as we
12:47 - program so it's going to recommend you
12:48 - Imports but you will not have this this
12:51 - is what we are going to make so you
12:53 - don't have this one okay next interface
12:58 - convex lion provider
13:00 - props uh and then children is going to
13:02 - be react. node so we are going to wrap
13:06 - I'm I will show you let's go to the
13:09 - app let me save this let me go to app um
13:13 - layout and here scroll down so you have
13:16 - this
13:17 - children we're going to wrap this with
13:19 - convex client
13:22 - provider and then close it like that but
13:25 - we cannot import this because we are not
13:26 - exporting this from anywhere yet so it's
13:29 - it's an error for now so this children
13:31 - this is like the page everything like
13:33 - the page the whole page is here so
13:36 - that's going to be passed into our
13:39 - interface
13:40 - so let's now say con convex URL we need
13:44 - to initialize the convex database the
13:46 - back end process and convex public uh
13:50 - next public convex URL and this you make
13:53 - this to make sure that this
13:56 - exists so if I delete this I think it's
14:00 - going to throw an error because it's not
14:01 - sure if this event exists but if I say
14:03 - exclamation mark then I'm telling it
14:06 - this 100% exists in myn dolal f file so
14:10 - if I go to n. loal here next public conx
14:15 - URL okay then const convex new convex
14:20 - react client this is one that I imported
14:23 - here and passing convex URL to
14:27 - initialize the new convex react client
14:31 - then export const convex client provider
14:34 - so this is what we will Import in the
14:35 - other file we need to export it here and
14:39 - then let's give it this interface react.
14:41 - FC and then convex client provider props
14:44 - the interface that we defined it and
14:47 - then let's extract this
14:50 - children so make an arrow
14:53 - function and then extract children from
14:55 - this
14:57 - type so now we have these children this
14:59 - is the page that's getting ped and we're
15:01 - going to display this children so let's
15:04 - make a
15:05 - return okay we wrap everything with
15:08 - clerk provider this is our
15:09 - authentication
15:11 - provider then convex provider with clerk
15:15 - we imported that as
15:16 - well then we need to pass use out as use
15:19 - out so use out is from clerk
15:23 - nextjs then client convex uh this is the
15:26 - convex that we initialized okay so if
15:29 - the user is not authenticated show
15:33 - children authenticated show
15:35 - children and out loading so if if it's
15:38 - checking while if it's authenticated
15:41 - then just show the loading component if
15:42 - we don't have it's like a loading screen
15:45 - spinning
15:46 - bar so that's it so this is this is what
15:50 - we want to
15:51 - do okay so this uh component out loading
15:54 - doesn't exist so let's copy out loading
15:59 - close this and let's first go back to
16:02 - our layout TSX and we need to import
16:05 - this so I press control space to import
16:07 - to get these recommendations and like
16:10 - this and also provider I'm missing an O
16:14 - here so now we gave um database we
16:18 - wrapped our application with the
16:20 - database so let's go to components and
16:22 - create this out loading so let's just go
16:24 - click components new file paste it out/
16:28 - loading. TS
16:29 - xx and this uh when you say out/ loading
16:33 - it will create a folder out when you put
16:37 - slash in the loading component first
16:40 - import image from next image then we
16:43 - will export cons loading Arrow
16:45 - function return give it a div with class
16:49 - name and then say height full WID full
16:52 - Flex so this is Tailwind
16:54 - CSS justify Center item
16:57 - Center and then image
17:00 - and Source will be/ logos SVG so let's
17:03 - copy this uh logo SVG and we need to go
17:07 - to um public folder here and make a new
17:11 - file logo
17:12 - SVG so now let's get this go to logo
17:17 - ipsum
17:20 - docomo for development you cannot use
17:22 - them in production but maybe you can
17:24 - contact them if you want so I'm going to
17:26 - scroll down and let's just select this
17:28 - logo let's just click to copy and just
17:31 - paste here the
17:32 - SVG
17:34 - so uh when you say slash logo SVG this
17:38 - will look in your public folder for logo
17:40 - SVG file then alternative
17:43 - loading then width 120 height
17:47 - 120 and then uh class name to be animate
17:51 - pools duration 700 so this will just be
17:54 - pulsing like
17:56 - animation that should be it if I go
17:58 - ahead and I so we have a problem here
18:02 - yeah okay so this is the posing
18:03 - animation you see let me show you again
18:06 - that's how it works but I want the logo
18:08 - to be on the center so to to fix that
18:11 - let's press contrl P to search and look
18:13 - for globals global. CSS it's right here
18:18 - in the app folder Global CSS and let's
18:21 - make some space and say column
18:23 - root HTML body to be height
18:30 - 100% and save
18:33 - it so this will need to recompile a
18:35 - little bit and also uh you should always
18:39 - get add git clone so git add dot to add
18:42 - everything all of the
18:46 - changes git uh commit message will be
18:52 - out and
18:55 - database and git push dasu origin
19:00 - main so now everything is in our uh our
19:04 - GitHub
19:05 - folder and now let's see if our logo
19:08 - updated so if I refresh logo is in the
19:11 - center this is important because all of
19:13 - your stuff will not be centered if you
19:15 - don't have this nothing will be centered
19:16 - not just logo loading
19:18 - screen let's start coding our website so
19:22 - now in the app folder make a new folder
19:25 - seller and inside make a new folder in
19:28 - square brackets
19:30 - username like that so when you have um
19:33 - so this is going to be SL seller this
19:36 - route will be SL seller when you have
19:38 - seller folder and then uh when you have
19:41 - username in square brackets this can be
19:43 - anything so when you have square bracket
19:45 - so it can be slash slash seller and then
19:49 - slash any
19:51 - username and
19:53 - inside add a new folder manage sl- gigs
19:59 - and add a new folder inside
20:02 - create and add a new file page.
20:07 - TSX so the route here is going to be SL
20:10 - seller slash anything SL manage gigs SLC
20:13 - create and then when we go to this route
20:16 - SLC create this page DSX will be
20:18 - displayed it must be page DSX the same
20:20 - exact letter same exact capitalization
20:23 - so if I go here slash uh seller and I
20:27 - have all of this manage G SL
20:29 - create so this is where we are going to
20:32 - create gigs so uh and when we click
20:37 - switch to seller then we're going to
20:38 - switch to selling then we're going to go
20:40 - to this SL seller SL username Etc but
20:43 - when we say switch to buying then we're
20:45 - going to go to the not this route but
20:47 - homepage
20:49 - route so let's uh create some page DSX
20:53 - so you don't need to import this now you
20:55 - can import SB code create interface
20:57 - create gig props parameters that's going
21:01 - to be username so we want to actually
21:04 - receive uh this parameter username from
21:06 - the URL so when you have square brackets
21:09 - not only can this be anything in the URL
21:12 - but it also can be uh can you can take
21:15 - it as a par parameter you can get it as
21:17 - a parameter by doing this interface uh
21:21 - defining this interface and then saying
21:23 - params and then username so it must be
21:25 - the same string as this
21:27 - username and then let's export default
21:30 - create gig so let's create con
21:33 - gig and then let's extract these
21:36 - parameters from create gig props let's
21:39 - just extract it like this so we can use
21:41 - it then return div class name Flex
21:45 - justify Center and create form so this
21:49 - is a component that we will create we
21:50 - don't have this component yet and then
21:53 - um passing username as parameters par.
21:57 - username because we defined here that
21:59 - params has attribute username so params
22:01 - do username okay let's copy this
22:04 - component soore components slre form and
22:08 - here click to this page and next to it
22:10 - create a new file underscore components
22:13 - create new form. DSX so this will create
22:16 - a component folder a
22:19 - component this components folder and
22:22 - when you have underscore in the
22:24 - component that means this will not be a
22:25 - route and this will everything inside
22:28 - will not be R so if I make new more
22:30 - folders they will not be they will be
22:31 - ignored by URL this cannot be accessed
22:34 - through URL if it has this
22:36 - underscore now let's start coding this
22:38 - create form TSX so we're going to use
22:41 - client now don't import any of this
22:44 - right now we will import them later but
22:45 - we will first need to install this
22:48 - Zod and react hook form so let me go
22:51 - here and say npm install react hook form
22:56 - and Zod
22:59 - and um I'm also not sure why this form
23:01 - was not installed from uh shaten and
23:05 - this input so let's go to another
23:09 - terminal so type npx Shad cn- UI at
23:13 - latest ad input
23:17 - form so now uh we will also need to
23:20 - create this by the way but not now okay
23:22 - let's
23:25 - continue uh let's create interface
23:28 - create form props and it's going to be
23:31 - username string so as you remember we
23:32 - are passing in the
23:35 - username const create uh form schema z.
23:40 - object object so we need to Define like
23:42 - type the schema for the form so we can
23:43 - check if it's correct it has name of the
23:47 - gig and category when we are creating a
23:49 - gig so we need to select those title Z
23:54 - do string minimum
23:56 - 20 characters
23:59 - and then message title must be at least
24:00 - 20 characters so if this is not 20 then
24:03 - this will be the message that we will
24:05 - display uh and then Max 100 title must
24:09 - not be longer than 100 characters
24:11 - categories then Z string so this is
24:13 - going to be a category it's going to be
24:16 - string required error please select a
24:19 - category sub category ID Z string please
24:25 - select a subcategory so I think I
24:27 - accidentally named this I so this should
24:29 - just be like either sub so have
24:31 - consistent naming like either both ID or
24:33 - no have I don't neither have
24:37 - ID type create form values z. infer type
24:41 - of create form schema so we will uh this
24:45 - will be we will create a type for the
24:47 - form values infert from this schema so
24:52 - it will be like this kind of object with
24:54 - this field this field this field
24:56 - Etc default values partial create form
25:00 - values this is a
25:01 - type and then title is empty that's
25:03 - going to be our default
25:05 - value export con create
25:08 - form we're going to extract username
25:10 - from this interface that we are
25:14 - getting so create for
25:17 - props con categories use Query API
25:20 - categories get so we're going to have a
25:22 - list of categories and we will retrieve
25:24 - all of
25:25 - them then const subcategories set sub
25:28 - categories use State and then doc uh I
25:33 - will explain what this is Doc
25:36 - subcategories and give it array and give
25:39 - it execute it and set it to empty array
25:43 - so we're going to create a schema for
25:46 - our database this will be a table in our
25:48 - database subcategories so if we want to
25:50 - get it will have Fields like subcategory
25:53 - Name ID Etc so if we want to get that if
25:56 - you want to get that table and convert
25:59 - it to a type so for example this is
26:02 - going to have the type of the same type
26:05 - as this table so each
26:07 - field this is how we get those types and
26:10 - if you don't understand it will be more
26:12 - clear when we create
26:14 - this okay then we're going to say const
26:17 - and extract mutate and pending from use
26:20 - API mutation and then pass in API gig
26:23 - create so we did not create this yet so
26:26 - we will make it so it's this one that we
26:28 - don't
26:29 - have okay I will explain more and then
26:34 - con router is use
26:36 - router and then use form so we need to
26:39 - create a form create form
26:42 - values uh Zod
26:46 - resolver default value so we are
26:48 - initializing the Zod form and mode on
26:51 - change so why are we using for why are
26:53 - we not not just submitting data through
26:55 - an API like through axios or whatever
26:58 - because we need to check the validity of
27:00 - data so we want to check if this has 20
27:02 - to 100 characters if this is this is
27:04 - required Etc that's why we are using
27:07 - this like Zod
27:10 - form okay function handle category
27:13 - change and then we're going to get
27:15 - category name if categories is undefined
27:18 - return so if there is no categories in
27:22 - the database
27:25 - here and then uh selected category will
27:28 - be categories do find category where
27:32 - category name is equal to this category
27:34 - name so category will be like a big
27:37 - object with many attributes so that's
27:40 - how we're going to select this
27:44 - category if selected category set um sub
27:50 - categories sub select a category.
27:53 - subcategory so each category is going to
27:56 - have all of its subcategories so once we
27:58 - select a category for example uh
28:01 - computers we're going to have all of the
28:03 - subcategories we need to set the
28:05 - subcategory so user can choose from
28:08 - those
28:10 - subcategories okay function on submit
28:14 - data create form
28:16 - values so mutate this is the mutate that
28:20 - we are going to create so this mutate
28:22 - will create the gig this is the mutation
28:25 - gig create and then we pass in title the
28:28 - data. title for the gig description for
28:31 - the gig subcategory ID and that's it
28:36 - then when this mutates when this creates
28:38 - then we want to uh get this gig ID as
28:42 - parameter we will get it returned from
28:44 - this
28:45 - mutation and then toast info gig created
28:48 - successfully so toast is just alert
28:51 - notification you don't need this and
28:54 - then router push we want to go to that
28:56 - new created gig so we want to go to
28:59 - seller username manage gigs edit and
29:02 - then gig
29:04 - ID catch if there is an error in this
29:07 - mutation we want to toast error fail to
29:10 - create
29:11 - gig return okay now let's return the
29:14 - form so this is what's going to be
29:16 - displayed in the page so we want to
29:18 - spread out this
29:20 - form which is this so we're going to
29:23 - spread all of the
29:26 - attributes and then for form so this is
29:29 - how we Define form with Shi and it's a
29:31 - bit weird you need two of these okay so
29:34 - on submit you're going to say form.
29:37 - handlesubmit on and then pass it on
29:39 - submit so form. handle submit it's this
29:42 - form it has handle submit which is not
29:45 - shown here but it has this so use form
29:48 - has handle submit attribute and this is
29:50 - our onsubmit that we are passing in so
29:53 - we're passing in on
29:56 - submit okay form
29:59 - field control um form. control control
30:03 - name title render so this is how the
30:06 - form will be field will be displayed so
30:08 - we're going to extract field object it
30:10 - will be Arrow
30:11 - function form
30:14 - item for message so this is uh the
30:17 - message like this error message please
30:20 - select a category so this is the error
30:22 - message uh form label title form control
30:27 - input
30:28 - placeholder I will do something amazing
30:31 - and then spread this
30:32 - field so this has some attributes like
30:35 - title category
30:37 - subcategory so this will basically be I
30:40 - think yeah we're just spreading the
30:42 - attributes okay form description craft a
30:45 - keyword reach gig title to attract
30:46 - potential users below that another form
30:50 - field form. control category
30:55 - render form item
30:58 - uh error message category is the name
31:01 - the label select now we're going to use
31:03 - select from shot CN and we're going to
31:06 - select between all of the categories so
31:08 - on value change we're going to call say
31:10 - category name
31:12 - String and we're going to say field on
31:14 - change category
31:17 - name handle category name category
31:20 - change so this will call our function
31:22 - that we defined here handle category
31:24 - change if you select the category and
31:26 - load subcategories
31:29 - okay next default value will be field.
31:32 - value so we already I think defined
31:34 - default values or not somewhere here
31:37 - default values here but there is nothing
31:41 - so I think this will be just empty then
31:43 - okay form control select
31:48 - trigger select value placeholder select
31:51 - a category I will explain this select
31:53 - trigger so when you click this you will
31:55 - open the select body so or select
31:59 - content that is so if categories exist
32:02 - and then we want to show select
32:05 - content categories do map we want to map
32:08 - each category we will get
32:11 - category select item so we need to pass
32:14 - in key whatever just so react can
32:17 - distinguish between these all of the
32:19 - categories all of the components value
32:21 - will be category. name this will be a
32:24 - select dropdown
32:26 - menu and then
32:28 - uh you will just display category name
32:30 - as like text so user clicks it when user
32:32 - clicks it the value will be the category
32:35 - name and then SE close select
32:39 - content uh form
32:43 - description and also yeah so that's it I
32:46 - think this is this should be
32:48 - understandable so when you when you
32:50 - click this select trigger when you click
32:52 - inside this component select a category
32:55 - then this will open select content but
32:57 - but it will only open if categories is
32:59 - not it exists is not
33:02 - null and then when you click it the
33:05 - category will be
33:07 - set okay go below and say button submit
33:11 - type submit disabled pending so when gig
33:14 - is being created here on the top we have
33:17 - mutate and pending mutate is creating
33:19 - the gig so while this is being created
33:22 - we're going to have pending and I want
33:24 - to disable the button when this is
33:26 - pending gig is be
33:28 - created then we have for field uh this
33:31 - is for subcategories Name subcategory ID
33:34 - so must be the same name as this
33:38 - subcategory ID in our
33:40 - Zod render field form item for error
33:45 - message
33:47 - subcategory on value change field.on
33:51 - change default value field
33:53 - value form control select trigger
33:59 - uh select a
34:01 - subcategory and then select
34:04 - content and then we want to say
34:06 - subcategories map subcategory index we
34:09 - want to show all of them so select item
34:11 - will be key index value subcategory
34:16 - ID and then subcategory
34:20 - name yeah we need to name this
34:23 - subcategory ID because we are using ID
34:25 - in this case not the name I think that's
34:27 - how our database how we made our
34:29 - database okay and then form description
34:32 - subcategory we will have buyers pinpoint
34:34 - your service more
34:35 - narrowly so that's it this is the whole
34:38 - uh this is the whole thing we just need
34:41 - to like make some of these uh uh some of
34:44 - these
34:45 - dependencies let's first create this
34:48 - database uh like tables so let's go here
34:52 - in the convex folder create a new file
34:56 - schema
34:59 - TS okay first we will make some imports
35:04 - but you can import them as we go let's
35:06 - export default Define schema this will
35:08 - be our database table schema then uh
35:12 - Define table users so it's going to be
35:14 - defined table and pass in object full
35:17 - name is v string username is v string
35:22 - title this is just like like title of
35:25 - the user whatever like uh software
35:27 - engineer
35:29 - about uh portfolio URLs I'm actually not
35:33 - using this in the app but if you want
35:35 - you can add this but for now they don't
35:37 - do
35:39 - anything uh profile image
35:44 - URL favorite seller
35:47 - IDs so which seller has user favorit and
35:51 - saved token
35:53 - identifier this is the token identifier
35:55 - of the clerk so clerk authentication has
35:58 - this token identifier for each user that
36:00 - we will save in user's database for each
36:03 - user and this is how we will search the
36:05 - user with this in the database I will
36:07 - show you custom
36:10 - tag uh for
36:12 - user and then stripe account ID and
36:15 - stripe setup complete so what you can do
36:19 - is uh in your platform you can have all
36:22 - of the sellers and then you can give
36:24 - them a stripe account so stripe allows
36:26 - you to make sub accounts for each of
36:29 - your you
36:30 - sellers so you can pay them to their
36:32 - stripe account to their like sub account
36:35 - and then from their sub account they can
36:37 - transfer money from to their real
36:39 - account or to their bank account so you
36:42 - can create stripe sub accounts for each
36:46 - of that's what stripe allows you to
36:49 - do uh so we are going to we want to
36:53 - search by token identifier so if we have
36:55 - a token identifier we want to search all
36:58 - of the users to find this particular
36:59 - user that's with this token identifier
37:02 - and we're going to use that for the
37:03 - currently logged in users so the
37:05 - currently logged in user with clerk
37:07 - we're going to get uh that user from
37:09 - database as well so we make an index by
37:12 - token this is the name and the field
37:14 - that we will search users by is token
37:18 - identifier index buy username
37:23 - username um we can search by username as
37:26 - well okay let's make a new table
37:28 - reviews author ID that's going to be ID
37:31 - of
37:32 - users seller ID of the
37:36 - review gig ID so reviews will be
37:40 - attached to
37:41 - gigs comment just the text communication
37:45 - level is going to be number from uh 0 to
37:48 - five recommend to a friend number
37:51 - service as described all number 0 to
37:54 - five we want to search by seller ID so
37:57 - we want to get all reviews for a
37:59 - particular seller seller and displayed
38:01 - on his uh on this seller's profile and
38:05 - then by gig ID all reviews for this
38:08 - particular gig and displayed on gig
38:11 - page let's define table
38:14 - skills so that's going to be so this is
38:16 - user skills so for example PHP
38:18 - JavaScript whatever so v string and user
38:23 - ID this is one to many so if you have
38:26 - one to many relation it's best to where
38:29 - there is
38:31 - many you make skills skill and then you
38:36 - uh go back to the user so the many in
38:39 - many table you reference back to the one
38:42 - to the
38:43 - user because one user can have many
38:46 - skills okay so we want to search by user
38:48 - ID let's define languages for that user
38:52 - speaks so language is v string user ID
38:55 - again one user can speak multiple
38:57 - languages so we in the language we
38:58 - reference back to user ID search by user
39:02 - ID user
39:04 - Flags user
39:07 - ID uh marking type why did I call I
39:11 - forgot why I call this marking
39:14 - type and then description so user Flags
39:17 - I think that's like similar to tags like
39:21 - user
39:22 - tags I will see what what I use this for
39:25 - okay countries country name user ID so
39:30 - one this is one to one relation because
39:34 - one user can have one
39:37 - country index by user ID okay gigs title
39:42 - of the gig description of the gig seller
39:45 - ID so one user can have multiple gigs
39:48 - one
39:48 - seller okay subcategory ID and published
39:53 - is going to be Boolean true or false
39:57 - clicks just the number of clicks of
39:59 - views to the gig and then search index
40:02 - by seller ID by subcategory ID so we
40:05 - want to display all gigs from a certain
40:08 - subcategory by publish we want to find
40:10 - all publish gigs for
40:12 - example and then search Index this is
40:15 - this is like text search so title so if
40:18 - we want to search for all gigs that
40:20 - contain like I will give you a haircut
40:22 - in the title this is just text
40:25 - search offers
40:27 - okay so offers uh so each gig has three
40:30 - offers basic standard and
40:32 - premium so gig ID for this particular
40:35 - offer title of the offer like uh haircut
40:40 - for long hair that's going to be like a
40:42 - standard or premium
40:44 - haircut description of the offer and
40:48 - then tier so tier can be V Union of V
40:51 - literal basic standard and premium
40:53 - literal means this will be like the
40:55 - value the value of this will be basic so
40:57 - we so this tier can be either basic
41:00 - standard or
41:03 - premium price so the difference between
41:05 - tier and title title is just like um you
41:10 - you understand I think so price of the
41:12 - for this offer delivery days for example
41:15 - two days revisions so for example I
41:17 - offer two
41:19 - revisions stripe price ID so we will
41:22 - connect each offer to a stripe price ID
41:25 - we will create a price in stripe
41:28 - okay search by gig ID so we want to get
41:30 - all offers three offers for this gig by
41:34 - tier I think I'm not using this why why
41:36 - am I searching for tier I don't know by
41:38 - gig ID and
41:40 - tier uh maybe yeah maybe if I if user
41:43 - clicks on a particular then I need to
41:45 - search for get that from database uh
41:47 - we'll see orders so when you once you
41:52 - click offer you make an order it's going
41:54 - to go here so offer ID for this order
41:57 - gig ID buyer ID that's going to be
42:01 - users fulfillment
42:03 - status that can be fulfilled waiting
42:06 - pending whatever fulfillment time so um
42:10 - in how much time do you expect this to
42:13 - be
42:14 - fulfilled uh index by buyer
42:17 - ID and by gig ID so if you want to find
42:20 - all offers for a gig and display this
42:22 - gig has 20 offer 20 orders
42:27 - gig media is just a table because each
42:30 - gig can have multiple images videos
42:31 - whatever so I have a storage ID so so
42:35 - when you upload image it will be stored
42:37 - in our convex back end and the ID of
42:40 - that storage point where that image is
42:42 - stored the ID is we're going to save
42:44 - that ID
42:46 - here so then we will use that ID to get
42:48 - a to convert it to get a downloadable
42:51 - link so we can download the image from
42:53 - that link but for now we just store
42:55 - storage ID format is mp3 mp4 jpeg
42:59 - whatever gig ID okay so gig media gig
43:03 - ID uh index by gig ID search by gig ID
43:07 - and by storage
43:09 - ID okay categories name of the category
43:12 - and that's it
43:15 - subcategories category ID so one to many
43:19 - relation so when you where you have many
43:22 - you point back to the one so for each
43:24 - category you just subcategory you point
43:26 - back to the
43:27 - category and the name of the subcategory
43:30 - index search by category so get all for
43:34 - example get all subcategories of
43:38 - programming okay by name also search uh
43:42 - FAQ frequently ask
43:44 - questions question answer gig
43:49 - ID messages user
43:53 - ID uh
43:56 - text image URL if you want to send image
43:58 - it's optional
44:00 - optional scene I think I'm not using
44:03 - this but you can make it if you want
44:06 - conversation ID uh yeah so each message
44:09 - will be connected back to the
44:11 - conversation and user ID this should be
44:14 - called like sender ID or author ID of
44:16 - the
44:17 - message index search by conversation ID
44:20 - so we want to get all messages from this
44:23 - conversation for example and then list
44:25 - all of them and then
44:28 - conversations participant one
44:31 - participant 2 this is the easiest the
44:33 - fastest way to do this although you can
44:34 - do it in a different way but this is one
44:36 - that works for me the best it gets very
44:39 - complex if you don't do it like this
44:41 - okay and then we can search by
44:43 - participant one ID or search all the
44:46 - conversations of participant 2 ID
44:48 - participant 2 so we want to display all
44:51 - conversations of a certain person to the
44:53 - like to the
44:55 - sidebar okay then user favorites this is
44:58 - uh all of everything that user favorite
45:00 - let's see what I'm not sure I forgot so
45:02 - user ID gig ID yeah so all of the gigs
45:06 - that that user
45:07 - favorited and that's uh we must search
45:11 - by gig ID and by user gig so we want to
45:16 - check if for example user has favored
45:18 - this specific gig then we would use this
45:20 - by user
45:21 - gig and then by user as
45:24 - well this is our schema. PR now make
45:27 - sure you
45:32 - have uh your npx convex Dev running so
45:36 - npx convex Dev so once this starts
45:39 - running it will update all of this will
45:42 - um generate these tables but we have a
45:46 - problem and the problem is in our create
45:49 - form uh create form from create page we
45:53 - don't have this api. categories we don't
45:55 - have API gig create we don't have any of
45:58 - these database functions so let's create
46:01 - that
46:02 - first let's go to our convex folder next
46:06 - to schema TS and say gig.
46:09 - TS so first we're going to do some
46:12 - imports that you can import later not
46:14 - now so this is if you want to read more
46:16 - about internal mutations but you can
46:18 - also learn from me okay export con
46:21 - create there's going to be a mutation
46:23 - mutation is a database transaction so
46:26 - what it does it is uh updates database
46:28 - adds new rows or adds new rows to table
46:31 - removes a row whatever Etc okay ARS
46:36 - arguments that we pass to this mutation
46:38 - are going to be title which will be v
46:41 - string description v string and
46:44 - subcategory V uh v string as well
46:48 - subcategory ID and then we need to pass
46:50 - in Handler function so what's going to
46:52 - happen in this mutation asnc context
46:55 - arguments
46:57 - first we need to check if somebody's
46:59 - logged in into our app we need to have a
47:00 - logged in user so identity is equal to
47:03 - await context out get user identity so
47:07 - this is this context get user
47:10 - identity this is going to be um a the
47:14 - clerk ident a token identifier okay so
47:17 - this identity is from clerk I'm pretty
47:19 - sure so if there is no identity throw
47:22 - new error
47:24 - unauthorized okay so we're going to
47:26 - return ID once we create the
47:29 - gig but first we need to get the user
47:32 - with this identity from our database so
47:34 - this is the logged in user from clerk
47:36 - but we need to Now find this user in the
47:38 - database and get that user object yet
47:40 - that user
47:42 - row okay so then we're going to contact
47:45 - database query users table users and
47:48 - then with index so as you remember we
47:50 - defined index by token so that's going
47:52 - to let us query users by token ID token
47:55 - identifier so first is the name second
47:58 - is this Q Arrow function and then Q do
48:01 - equals token identifier the field token
48:04 - identifier of the user in the database
48:07 - is going to be equal to identity. token
48:10 - identifier so we are looking for the
48:13 - user in the database who has this token
48:15 - identifier of the currently logged in
48:18 - user and do unique will execute this um
48:22 - query and it if there is more than one
48:25 - user with token and identifier then this
48:28 - will throw an error because there
48:29 - shouldn't be more than one so that's why
48:32 - do unique okay now con gig ID we're
48:36 - going to create a gig ID with this user
48:39 - as author as Creator and when we create
48:42 - something in the in this like mutation
48:44 - in the database we are going to get gig
48:47 - id id of that create thing back so await
48:51 - context database do insert so when you
48:54 - use insert you get ID of the insert the
48:57 - thing back insert into the table
48:59 - database uh into table
49:01 - gigs and then pass in object these are
49:05 - parameters title is arguments. title so
49:09 - arguments are here that we pass
49:13 - description arguments description
49:15 - subcategory ID is argument subcategory
49:21 - ID but the okay I'm going show you the
49:24 - problem here is string is not assignable
49:26 - to ID subcategories so this is going to
49:29 - be a string because here it's string so
49:33 - one way we can deal with this is we can
49:36 - convert this or cast this as ID
49:42 - subcategories seller ID it's going to be
49:45 - user question
49:46 - mark ID exclamation mark so this is
49:51 - checking if user exists maybe user is
49:54 - null I think it's better to check it
49:57 - here but okay so if user exists it's
50:00 - going to be ID and exclamation mark
50:02 - means every user has ID so you don't
50:04 - need to worry about if maybe user
50:05 - doesn't have this ID
50:07 - field published false by default clicks
50:11 - or views zero let's save
50:15 - this and that should work I think
50:18 - instead of casting this from string to
50:20 - this you can just um remove
50:23 - this and keep it like this but now
50:27 - this should be here and then
50:31 - import was the
50:34 - problem okay so well I think we cannot
50:38 - do this so let's just go back and cast
50:40 - this into this ID
50:42 - subcategories and that's our create
50:45 - method we also in the create form we
50:48 - need to get this categories. getet so
50:50 - let's go and create in the convex folder
50:53 - next to Gig say categories
50:58 - categories.
51:00 - TS in the categories we will do some
51:03 - imports okay so export con get query so
51:07 - query is different from mutation because
51:09 - query is not changing the database data
51:12 - he just retrieving but one advantage
51:14 - with query is that once the data changes
51:18 - if for example I'm displaying something
51:20 - from database and that data changes the
51:22 - database some other user on the other
51:24 - part of the world changes it it will
51:26 - automatically update on my web browser
51:28 - so query will pull automatically in
51:31 - changes and update my web browser
51:34 - client Handler so uh we should have
51:38 - passed arguments here actually but okay
51:40 - let's for now just uh have a Handler
51:43 - function there is no
51:45 - arguments const categories await context
51:49 - databasequery
51:51 - categories collect all so we just want
51:54 - to collect all of the categories in the
51:55 - database
51:57 - categories with subcategories
51:59 - relations so why is it why is it
52:02 - relations you'll see you say categories
52:06 - dot
52:10 - map you want to sorry you want to map
52:13 - categories and for each category you
52:16 - want to run context
52:18 - databasequery subcategories so you want
52:21 - to for each category query
52:23 - subcategories with index by category
52:27 - and pass q
52:31 - q equals category ID is category ID so
52:35 - you want to query subcategories get all
52:38 - subcategories that point that are
52:40 - subcategories of this category and do
52:43 - that for each
52:44 - category and collect all of them so this
52:47 - will this is same as unique this will
52:49 - execute this uh and collect all of them
52:53 - then
52:55 - subcategories so when you get all the
52:57 - CATE subcategories you will return an
53:00 - object spread category and say
53:03 - subcategory
53:07 - subcategories and so right now if we
53:09 - take a look at this
53:11 - object all of this what all of this
53:13 - returns it's a promise and then object
53:19 - array of objects and it has
53:22 - subcategories array of subcategories and
53:24 - then ID of the category creation time
53:27 - and name category so this is what you do
53:29 - when you spread this you spread it into
53:33 - uh these three and then when you add
53:37 - subcategories then besides these three
53:40 - you also add array of
53:42 - subcategories okay but why is this
53:44 - relations because this is a bunch of
53:46 - promises you need to resolve these
53:49 - promises so go here and say categories
53:52 - with subcategories it's going to be
53:54 - await promise. all and inside pass this
53:59 - these
54:00 - relations and now this is not going to
54:02 - be promises this will just be resol
54:05 - promises like this actual array of
54:09 - objects and just return categories with
54:11 - subcategories so this is to get all of
54:14 - the
54:14 - categories now we made this we made the
54:18 - other one as well so let's go back and
54:21 - run npx run Dev
54:25 - again and the looks like it successfully
54:27 - added all of these tables indexes
54:29 - everything is working we only have uh
54:33 - one more
54:34 - issue but in our convex uh Dev we can
54:38 - check all of the tables that got created
54:41 - so for example users table everything is
54:43 - empty for now and in functions we can
54:45 - check our function that we just made so
54:47 - categories get and gig
54:50 - create this is the categories get is the
54:53 - SIM code and gig create
54:57 - and lastly we need to create these hooks
54:59 - use API mutation so let's go to outside
55:02 - file create a new file hooks API
55:05 - mutation.
55:08 - TSX first we will use client then we
55:11 - will import uh these Imports and then we
55:14 - will say export con use API mutation and
55:17 - we will get in mutation function it can
55:19 - be any I don't know how to do this
55:21 - without any so if you know please tell
55:24 - me const p pending set pending use State
55:28 - false so while the mutation is executing
55:31 - the database is being updated we will
55:33 - set pending to true so API mutation it
55:37 - will be this mutation function so use
55:39 - mutation from convex react mutation
55:42 - function so if you I don't know if you
55:44 - if we did this but if you have a
55:46 - mutation so let's say creating a gig you
55:50 - need to First initialize that mutation
55:53 - with this used mutation hook and then
55:56 - it's going to be this API mutation
55:58 - variable so whenever you call this like
56:00 - API mutation here for example like that
56:04 - it's going to call this mutation
56:06 - function whatever we
56:07 - passed
56:09 - so for example in this other
56:13 - case here we are passing uh API uh gig
56:18 - create into use API mutation so that's
56:22 - going to be this mutation function
56:24 - create and then you're going to pass it
56:26 - here here so this will initialize this
56:27 - mutation and then we can call it here so
56:31 - let's go next we're going to return
56:33 - mutate and pending we didn't Define this
56:36 - mutate yet so
56:37 - mutate let's define this mutate payload
56:41 - that's going to be
56:43 - arguments set pending to true and the in
56:46 - the beginning of the mutation then
56:49 - return API mutation is this one with
56:53 - payload and then finally when it when
56:55 - the IM mutation executes we will set
56:58 - pending to
57:00 - false uh and then uh after so finally is
57:04 - happening after then after then and
57:06 - after catch so finally is at the end but
57:09 - when the after the mutation executes
57:12 - we're going to have this then return
57:16 - result and we're also going to catch
57:18 - error throw
57:20 - error so this may be a little bit
57:23 - confusing so um the way the reason doing
57:26 - this here is so I have this pending
57:29 - State here's how it works let me just
57:31 - show you once again so we have this uh
57:35 - create mutation API gig create this is
57:37 - going to create a new gig so we need to
57:39 - pass this mutation function into our use
57:41 - API
57:43 - mutation that we did so this is the
57:47 - mutation function then we need to
57:50 - initialize uh mutation with this
57:52 - mutation function so we pass in mutation
57:54 - function into use mutation to initialize
57:57 - this mutation and now that mutation will
57:59 - be saved into this API
58:02 - mutation and now whenever we call this
58:04 - API mutation with these brackets it's
58:06 - going to like update the database it's
58:08 - going to execute this
58:10 - mutation and the payload so um the
58:14 - payload comes from calling this mutate
58:17 - so as soon as we call this mutate we
58:18 - will then execute this API mutation and
58:22 - this mutate we call that with payload we
58:24 - export it here so the way we call
58:27 - mutate is here if I go ahead and find it
58:30 - somewhere here we are calling the mutate
58:33 - we're passing in title description sub
58:35 - subcategory
58:37 - ID so we call this mutate with payload
58:40 - we set pending to true and then we use
58:43 - this API mutation with this payload that
58:46 - we passed in into
58:47 - mutate and then so I I'm going to set
58:50 - this finally like here so it makes more
58:53 - sense and remove this okay so after the
58:57 - mutation is executed you return result
59:00 - so that's going to be returned where you
59:01 - called mutate so here so if I say a
59:04 - variable const result equals mutate it
59:07 - would be saved there but I need to await
59:10 - I think also if there is an error throw
59:13 - error and at the end just set pending to
59:16 - false so if we go ahead to SL seller and
59:19 - then whatever the username it doesn't
59:22 - matter here at all manage gigs and then
59:24 - create we can see this
59:26 - now title let me just say whatever it's
59:30 - not important for now category we don't
59:32 - have any categories we don't have any
59:34 - subcategories if I click save these are
59:36 - obligatory so let's create these
59:39 - categories and subcategories into the
59:41 - database this is what it's going to look
59:43 - like once we add categories in the
59:45 - database let's first there are multiple
59:48 - ways to do this but let's create SE
59:50 - categories. TS in convex folder and then
59:54 - add some imports
59:56 - these are the categories that we will
59:57 - have so it's an array it must be name
59:59 - web development so you can copy this
60:01 - from my GitHub or you can generate it
60:03 - with jpt or write it
60:06 - yourself and then export con create
60:09 - mutation
60:12 - Handler identity check for user identity
60:15 - we already did this and then we will
60:17 - just return nothing and for each
60:19 - category so for each of these categories
60:22 - we're going to map and get category
60:26 - await context database insert into
60:30 - categories name will be category.
60:33 - name and that's it that's it so this is
60:36 - going to so as soon as we call this
60:38 - create it will insert all of these 10
60:41 - categories into the
60:43 - database so we can call this anywhere so
60:46 - let me just call this whenever I refresh
60:48 - this create page so let's go here to the
60:51 - the create page that we made and let me
60:55 - start with some
60:57 - imports uh import use effect from react
61:00 - and use
61:02 - client and then con insert categories is
61:06 - use mutation API seat categories. create
61:10 - so this is the mutation function that
61:12 - we're going to
61:13 - initialize and then if we call this so
61:15 - we're going to create use effect so as
61:17 - soon as the page loads we will call this
61:20 - insert categories and pass empty object
61:24 - as arguments because the the there isn't
61:26 - there aren't any so if I go ahead and
61:29 - delete all of the
61:34 - documents as soon as I go here and
61:36 - refresh this page it will automatically
61:39 - use use effect and it will add okay
61:41 - there is 20 I mean one uh way we can fix
61:46 - this is just delete the last 10 so from
61:48 - web development until web development
61:50 - just delete all of these or you could
61:52 - have inserted this manually or whatever
61:54 - but I I wanted to show you through a
61:56 - script so you could have just went here
61:57 - a document and
61:59 - then um like say name this so this is a
62:03 - way oh my God we could have just copied
62:05 - we don't need to write all of this even
62:07 - but I want to show you how to do it
62:08 - through this so we could have just
62:10 - copied all of
62:11 - this and like that and then save and
62:15 - it's going to insert all of
62:17 - them now to add
62:20 - subcategories let's create seed seed
62:22 - subcategories dots in convex folder
62:26 - start with some
62:27 - imports so you need to copy this from
62:29 - here or generate it from cat GPT what's
62:32 - important is the number of subcategories
62:36 - per category so for me it's seven so my
62:39 - code works with seven you can you can
62:41 - change this code
62:43 - okay um let's let's export con create
62:48 - mutation
62:50 - Handler return
62:52 - nothing check logged in user
62:57 - categories so we're going to query all
62:59 - categories collect all
63:01 - categories and then we want to check if
63:03 - we want to also collect all
63:06 - subcategories and if there are
63:08 - subcategories you want to return so we
63:10 - don't want this to add two three times
63:12 - same subcategory so this is just for
63:14 - checking if there are already
63:16 - subcategories after that we will say
63:19 - await promise. all categories. flat map
63:23 - the difference between flat map and map
63:25 - flat map will flatten arrays I think so
63:29 - if it's mul it's multi-dimensional it
63:31 - will flatten it into onedimensional
63:34 - okay uh and then const create
63:37 - subcategory uh category subcategories so
63:40 - for each category we want to
63:43 - map const category subcategories so we
63:46 - want to look at these subcategories and
63:48 - take First Seven and then second seven
63:52 - and then seven again so this is what
63:54 - code does it say subcategories do slice
63:58 - index time
64:01 - 7 from this to index + 1 * 7 so for
64:06 - example if index is two it's going to go
64:08 - from here to
64:11 - here from index 7 to
64:15 - this okay I think that's it and then we
64:18 - will
64:19 - return uh category subcategories that
64:22 - map category name
64:26 - we want to insert into subcategories we
64:28 - want to say category ID is category
64:32 - ID and name subcategory
64:35 - name I'm not actually sure why why uh
64:39 - Chad jpt used flat map here I think you
64:42 - can just use map so it doesn't matter
64:43 - because this is not getting returned
64:45 - anywhere it's just getting resol
64:47 - resolved so for each sub for each
64:50 - category we will we will add all
64:52 - subcategories so we don't need to like
64:53 - any any mapping arrays and with anything
64:57 - so now let's call this function so in
64:59 - our create page or wherever whichever
65:01 - page um I'm going to con uh change this
65:05 - to insert subcategories and then use
65:09 - mutation API seed subcategories create
65:12 - and then I'm just going to call this
65:14 - mutation in use effect so let me save
65:16 - this and as soon as I refresh this page
65:19 - it should uh 70 subcategory should
65:23 - appear and now we can go ahead and
65:26 - remove this and this all of this so we
65:28 - don't need this anymore that's just for
65:30 - like create inserting categories and sub
65:33 - categories and it will not change again
65:36 - so now if I select a category artificial
65:38 - intelligence it's going to offer
65:41 - cognitive Computing whatever so I can
65:43 - select it I will do something so I will
65:46 - teach you AI just like that and
65:50 - save and this should uh in
65:54 - the yeah when when I press save nothing
65:56 - happens and when I go here to logs from
65:59 - convex I can see that seller ID is not
66:02 - Prov provided so that's not going to
66:05 - work so go here into gig. DS and we need
66:07 - to remove this question mark So seller
66:09 - ID must be
66:11 - obligatory
66:13 - so I'm going to say I just added this if
66:17 - user is now
66:20 - return So currently user will be null
66:22 - because we don't have we don't have
66:24 - anywhere where we adding the user to
66:25 - database so let's go up here in the
66:30 - app I will make a new file and I'm going
66:33 - to say uh I'm going to say normal
66:36 - brackets
66:38 - dashboard and then slash page.
66:43 - TSX so when you have a route in these
66:46 - normal brackets that means that this
66:47 - page. DSX will be displayed in this app
66:51 - as as if it's in this app folder so at
66:54 - the route so this uh folder this route
66:57 - is ignored it's just for
66:59 - organization okay first we're going to
67:01 - use
67:01 - client some
67:04 - imports interface dashboard props search
67:09 - parameters search uh optional string
67:13 - favorites optional string and filter
67:16 - optional
67:17 - string so if we go back to the uh root
67:21 - route what these things are is it's
67:25 - going to be here like uh I forgot
67:28 - exactly the syntax but something like
67:29 - search equals uh whatever the search
67:33 - name uh haircut whatever but there will
67:35 - be like some I think question mark or
67:38 - something here so this is uh to have
67:42 - just these parameters so we can use this
67:44 - to search to display favorites or to
67:46 - filter or to filter
67:50 - somehow let's export default
67:54 - dashboard and then let's say cons
67:56 - dashboard is
67:57 - equal uh passing search parameters and
68:00 - give it the type dashboard props this
68:03 - type and then this will be Arrow
68:06 - function return gig list and passing
68:10 - query search parameters so for now I
68:13 - think we just want to uh comment this
68:16 - because we don't have this yet and we
68:17 - want to comment this maybe and let me
68:20 - just return like a normal div just High
68:23 - whatever and for this to work we need to
68:26 - delete because this page is now inside
68:28 - of the app but there is another page TSX
68:31 - inside of app so we need to delete this
68:33 - because they are parallel they are at
68:35 - the same
68:39 - route and now this is what we get uh
68:42 - displayed now what I want to do is I
68:45 - want to get use effect I want to save
68:48 - the user if he's not Sav in the
68:51 - database let's go in the convex folder
68:54 - and gig. T s I'm going to say
68:57 - user users.
69:01 - TS so we want to start with export con
69:03 - store so we want to store the user it
69:05 - will be
69:06 - mutation arguments Handler argument is
69:09 - empty check the identity we did
69:12 - this okay we want so uh if the user
69:16 - might be renaming also so we want to
69:20 - maybe have this functionality to rename
69:22 - change name a wait context database
69:25 - query users with
69:28 - index buy token actually this is not
69:30 - rename rename this is just looking for
69:32 - the user with index by token and then
69:35 - token identifier will be identity to
69:37 - token identifier and then get your
69:40 - Nique and this is for renaming if user
69:43 - is not
69:44 - null if user username is different from
69:49 - Identity
69:51 - nickname then we will await context
69:53 - database patch we will update so ID is
69:57 - user. ID that we want to
69:59 - patch and then I want to say passing
70:02 - object and say username is identity do
70:05 - name but why did I put name and not
70:07 - nickname I'm not sure I think I'm Not
70:09 - Who I'm not sure but we will fix this
70:11 - let me just continue so we will return
70:13 - user
70:14 - ID I will return to this so here we will
70:17 - also return user ID to be uh
70:21 - consistent so if user is null then we
70:24 - will add the user to the database so we
70:26 - will store user ID when you store
70:29 - something to the database it will return
70:31 - the ID of the new newly store stored
70:34 - entry await context database insert
70:37 - users pass in
70:40 - object full name identity.
70:43 - name token identifier identity token
70:47 - identifier title about username
70:51 - identity.
70:53 - nickname profile image URL is identity
70:56 - profile image
70:57 - URL so let's change this identity. name
71:00 - to identity.
71:02 - nickname like that and also we need to
71:05 - make sure these are uh actually like
71:08 - these exist because we are telling that
71:11 - they they exist but we need to enforce
71:13 - this in clerk so let's go to clerk.com
71:15 - and make these things
71:17 - obligatory so here in your Fiverr clone
71:21 - email phone username we will set
71:23 - username to required so it says required
71:27 - and we will also set name and then click
71:31 - here to make it required continue and
71:34 - save
71:35 - changes sorry guys I think my video was
71:38 - not 720p but now it is so let's go uh
71:42 - here into dashboard use effect and then
71:46 - make this Arrow
71:49 - function uh let's say just like
71:52 - store and that's it
71:56 - but above that we need to say
72:01 - const con um store it's going to be use
72:06 - mutation API user store and then we need
72:10 - to execute this in the use
72:12 - effect so let's just see if store
72:15 - changes this will also store again and
72:19 - then const store user is a sync
72:22 - function that has this body await store
72:25 - and pass in empty object so this is the
72:28 - mutation store and store user is the
72:30 - function so let's just call this
72:32 - function here because this is how we
72:33 - need to call ass sync functions in use
72:38 - effect just make sure to also import
72:40 - this mutation in the users. DS and now
72:45 - it should
72:47 - work if I go ahead and refresh
72:50 - this the logged in user should appear
72:53 - here but the problem is we don't have
72:56 - setup username when we logged in and
72:59 - when we created account so we need to
73:00 - delete this account and like register
73:03 - again so I want to go to users and
73:07 - just delete user delete
73:10 - user and now I want to refresh
73:14 - this continue with Google and now it
73:18 - will ask me for
73:19 - username let me just choose this
73:22 - continue
73:25 - and now it should yeah it should add me
73:27 - added me properly and now I exist in the
73:31 - database and now if I go to the whatever
73:34 - so this is
73:35 - sellers like just to this and then slash
73:41 - create I should be able to create a new
73:44 - gig let's check
73:46 - here so if I fill the data and press
73:49 - save we have a new gig let's go and it
73:53 - uh sent us to this gig page but it
73:55 - doesn't exist yet but this
73:57 - works next uh let's go inside of manage
74:01 - gigs and add a new file it should be
74:03 - edit slash gig
74:07 - ID in these square brackets and Page
74:11 - TSX this is for editing the
74:14 - gig okay so first thing we will use
74:17 - client there is a bunch of imports do
74:19 - not import them right now import them as
74:22 - Rec code but just I would suggest you
74:24 - import this used router from Nex SL
74:27 - navigation right now so you so you don't
74:29 - import it from Nex SL router
74:32 - accidentally later it must be from next
74:34 - SL
74:35 - navigation then interface edit page
74:38 - props
74:40 - parameters gig ID string so this will uh
74:43 - be in I will show you so this is link
74:46 - it's going to be this link manage gigs
74:48 - edit and then some gig ID so you need to
74:50 - get this from URL that's going to be the
74:52 - gig ID that you need
74:55 - then you want to make const edit and
74:58 - Export default edit so you need to
74:59 - export default when it's a page it's not
75:01 - a component but a page extract
75:04 - parameters and give it edit page
75:08 - props okay then we need to get gig by
75:11 - gig ID from database so use Query this
75:14 - is use
75:15 - Query um here from convex
75:18 - react and we need to send in uh the
75:21 - function that we will call it's going to
75:23 - be API G get which we don't have yet and
75:27 - then the parameters for this query are
75:30 - ID parameters. gig ID as gig ID as ID
75:34 - gigs because this is string so this gig
75:37 - ID this parameter that we are getting is
75:39 - a string and need to we need to cast it
75:42 - as uh this ID okay so this is our query
75:46 - that we will run we will make this soon
75:48 - to get the gig based on gig ID from
75:51 - database published use Query and then
75:55 - API gig is published and pass in the ID
75:59 - of the gig again so we want to check if
76:00 - this gig that we are editing is
76:04 - published const okay so we want to use
76:07 - our use API mutation that we defined
76:10 - that we made this file just earlier you
76:12 - can go back and rewatch what this file
76:14 - does so we get mutate and pending and we
76:18 - will rename mutate to remove and pending
76:21 - to remove pending because we will have
76:23 - multiple API mutations so we need to
76:25 - remove these uh rename these and then
76:28 - pass in the mutation is going to be API
76:31 - gig
76:33 - remove so we will create this as well we
76:35 - don't have this okay then another API
76:38 - mutation uh mutate will be published and
76:40 - pending will be publish pending and
76:42 - you're going to pass in API gig publish
76:44 - so this is another mutation that we will
76:47 - make and then another mutation mutate is
76:50 - unpublished and unpublished pending and
76:53 - API gig unpublished is the mutation that
76:56 - we will pass okay so router use router
76:59 - make sure it's from next SL
77:02 - navigation identity is use out this is
77:05 - from uh clerk
77:09 - nextjs generate upload URL a use
77:12 - mutation so when you want to upload an
77:14 - image and store it into uh here files
77:19 - you need to generate first an upload URL
77:22 - that's going to let you upload post
77:23 - image to that URL when uploading it to
77:26 - convex so generate upload URL will be a
77:29 - mutation we're gonna say API gig media
77:32 - generate upload URL that's going to
77:34 - return our upload
77:36 - URL after that we want to say image
77:40 - input is going to be use ref HTML input
77:42 - element null so I'm not sure why I use
77:46 - this but some I'm referencing this input
77:48 - image input element for some reason I
77:50 - forgot why we will see later okay uh so
77:54 - and then uh selected image and set
77:56 - selected image use State file array of
78:00 - files and set it to empty array as
78:03 - initial value so when we select images
78:05 - to upload there will be this will there
78:08 - will be an array of files before we
78:10 - upload them we just select them through
78:12 - the window you know the upload image
78:14 - selection window I will show
78:16 - you send images use mutation API gig
78:20 - media Send image I think this is upload
78:22 - image we'll see I think this is upload
78:24 - for uploading the
78:26 - image okay and then if there is no
78:29 - identity throw error
78:31 - unauthorized uh you must have these
78:35 - mutations before if because you cannot
78:38 - have these mutations these are hooks
78:40 - after if so they cannot render
78:43 - conditionally they must be before always
78:45 - the hooks must be before
78:47 - conditions undefined means it's still
78:50 - retrieving so if gig is undefined or
78:52 - publish is
78:52 - undefined then
78:55 - return null so we don't want to or you
78:56 - can return loading state or return
78:58 - loading whatever you want to show
79:01 - something if gig is null uh gig not
79:04 - found so we will just so if the gig ID
79:08 - here in the URL is wrong ID that there
79:11 - is no gig with this ID in this URL then
79:14 - we just want to say not found on the
79:17 - page okay handle Send image so this is
79:20 - like handle upload image it should be
79:22 - called okay asking function okay and the
79:25 - event form event so I think this is
79:27 - going to be a form submission so we're
79:30 - going to use this okay so prevent
79:32 - default we will prevent the page from
79:35 - reloading when we submit this
79:39 - form we will make the form later okay
79:41 - but now if gig is undefined return so if
79:44 - gig is still loading I think it will not
79:47 - be undefined though I think you don't
79:49 - need this at all all because this will
79:51 - return so it will not come to this if
79:53 - it's undefined
79:56 - uh non nullable gig let me see what this
79:58 - is gig as doc gigs okay so gig might be
80:03 - null but it's not going to be null I
80:06 - think I added this after I added this so
80:08 - that's why
80:09 - but so gig is not going to be now so gig
80:12 - will so I think you don't need any of
80:14 - these step one get a short lived upload
80:17 - Ur okay so post URL is await generate
80:21 - upload
80:22 - URL so
80:26 - generate upload URL where do we have
80:28 - this here um I said that when you call
80:33 - this say use mutation and pass in
80:35 - mutation this will this will be the
80:37 - generated URL but no it will not
80:39 - actually this will be a function a
80:41 - mutation uh that when you call it will
80:44 - generate upload URL so this is how you
80:47 - define so you say use mutation and pass
80:49 - in the database function and that's how
80:51 - you define this mutation and now when
80:54 - you call it it will now return the URL
80:57 - wherever you want to call
80:59 - it okay then await promise also we want
81:02 - to uh resolve all
81:05 - promises but we haven't defined those
81:07 - promises yet so we're going to go
81:10 - through all of the selected images and
81:12 - then for each image we're going to do
81:13 - some asynchronous function so we're
81:16 - going to say uh result is going to be
81:19 - equal to await
81:21 - fetch okay so post URL is our up upad
81:24 - URL that we upload that we send the
81:26 - image to and then we need to say method
81:30 - post headers content type image. type so
81:33 - that's going to be I think like PNG or
81:36 - JPEG and then body image so this is
81:39 - going to be a file
81:42 - type okay so we're going to send
81:45 - image this image to this URL upload URL
81:50 - and then cons Json is await res. Json
81:55 - so we just convert result we uh parse it
81:58 - into
82:00 - Json if result is not okay so not result
82:04 - okay throw error upload failed and then
82:08 - we just show the response wi failed and
82:11 - stuff okay um if it is okay then it will
82:16 - skip this if and it will we can extract
82:19 - from this Json we can extract storage ID
82:22 - you can read more about in about this in
82:24 - convex documentation about file
82:27 - uploading save the newly allocated
82:29 - storage ID to the database so when you
82:32 - upload a file to convex it will return
82:34 - storage ID of that file and you can save
82:37 - that into the database so you know
82:39 - so wa it's Send image so yeah so the
82:43 - reason I call this Send image is if I
82:45 - call this upload image that would be
82:47 - problematic because this is not
82:48 - uploading image this is just saving uh
82:51 - uploaded image storage ID into database
82:55 - so I need to pass in storage ID so
82:58 - storage ID is equal to storage ID this
83:00 - has the same uh name so I can like say
83:03 - like this storage ID but because this is
83:06 - the same name I you don't need to do
83:09 - this um format image gig ID is
83:12 - non-nullable gig.
83:16 - idid
83:18 - okay let me go next okay if there is an
83:22 - error in this uh Send image
83:25 - console log error and toast error
83:28 - minimum five files maximum five files
83:32 - reached so each gig can have only five
83:34 - files and we will Define how uh it's
83:38 - going to check number of files inside of
83:40 - this Send image mutation that we that we
83:43 - are going we didn't make this yet so
83:45 - inside of that
83:47 - mutation uh SE set selected images to
83:50 - empty array so we uploaded all images
83:53 - now selected images are going to be
83:54 - empty array image input current value is
83:58 - empty string okay so this is the image
84:01 - input we are referencing this input
84:03 - field this is where we are referencing
84:05 - the image input field and once we upload
84:07 - images we're going to set this variable
84:10 - like this and we're going to say uh
84:12 - current exists the value is empty
84:17 - string I think you can do this in a
84:19 - different way as well but you can I
84:20 - think you can maybe use this controlled
84:22 - input you don't need to reference it but
84:24 - okay uh okay so let's say on publish so
84:27 - when we click publish the gig this was
84:30 - images but now let's say publishing
84:33 - console log published or this going to
84:36 - be true or
84:37 - false if not published if so if this is
84:41 - false then this will be not false
84:43 - true then we want to publish and we want
84:46 - to send IDs parameters. gig ID as ID
84:50 - gigs I think it would also be possible
84:53 - to maybe in the interface say like this
84:57 - and then you don't need to cast it
84:58 - anywhere but let's just keep it like
85:00 - this for
85:01 - now okay so publish we send the gig ID
85:05 - of the ID we want to publish catch error
85:08 - console log error toast error so toast
85:12 - is your toaster is like notifications so
85:15 - let's actually um I forgot to add this
85:18 - toaster let me save this for a moment
85:21 - and let's go to
85:23 - app uh
85:25 - layout and here I think just above
85:29 - everything just add toaster from
85:34 - Sun like that I think this should work
85:36 - so now all this is uh going to show
85:39 - notifications if it doesn't maybe we
85:41 - need to add the other one from not from
85:43 - soner but from UI toter or something I'm
85:46 - not sure so uh we'll see okay so fail to
85:49 - publish please make sure there is at
85:50 - least one image three offers and a
85:52 - description
85:54 - else so if it so if this is not
85:57 - published we will publish but if it is
85:59 - published then we will
86:01 - unpublish ID of the gig we want to
86:03 - unpublish and that's it on delete when
86:06 - we want to delete this gig remove we
86:10 - call remove mutation and pass in Gig
86:14 - ID this is string so we need to cast it
86:16 - as this and then router back so just go
86:20 - to the previous as if you click the back
86:23 - button on the your
86:25 - browser okay now let's make some return
86:28 - statement uh we want to have these like
86:33 - fragments they don't add a new div
86:35 - element they just but you must return
86:37 - must everything must be uh inside of one
86:40 - element so that's why you need to have
86:42 - this outside element whatever it
86:45 - is um okay so space so we're creating a
86:49 - div uh this is a responsive responsive
86:52 - mobile responsive so on
86:54 - extra large extra large medium devices
86:59 - it will have these different
87:01 - paddings okay and then we want to flex
87:03 - justifi to the end padding right and
87:06 - space X2 let me see what this is so we
87:09 - have a button this is button from UI
87:12 - components at UI components okay so this
87:15 - button will be disabled if publish
87:17 - pending or un publish pending so I think
87:19 - this button is for
87:21 - publishing okay then variant is default
87:24 - on click on
87:26 - publish and so this button is going to
87:29 - show either uh unpublish or publish text
87:34 - so if it's published it's going to show
87:36 - unpublish otherwise it's going to show
87:38 - publish and so when I click this button
87:40 - it's going to say
87:42 - unpublish okay I
87:44 - think let's continue I think you
87:46 - understand and once you public okay so
87:49 - below this button or next to it because
87:51 - this is flex so next to this button
87:53 - there will be this
87:54 - link and you will be
87:57 - able to preview so if you click this
88:00 - link this button uh you will be pushed
88:04 - to this so this link so it's going to be
88:07 - slash gig seller username gig ID so this
88:10 - is just um it's going to push you to the
88:12 - page of this
88:14 - gig and then disabled if it's like
88:17 - remove pending you cannot be
88:19 - previewing yeah okay so varant secondary
88:23 - uh if you want to see see these variants
88:25 - you can search for but Buton TSX so here
88:30 - we have all of the variants and this
88:33 - this is um like just the Tailwind CSS
88:36 - styling so secondary is going to have
88:39 - these you can add your own variant below
88:41 - here like
88:43 - whatever let's go back and continue then
88:47 - we have another button and this will be
88:48 - delete button so disabled is when remove
88:52 - pending very secondary on click on
88:56 - delete I think it's
88:58 - clear uh title editor so we want to make
89:02 - it so that user can just click the title
89:04 - and change it it's going to be like an
89:06 - input
89:08 - field we need to pass in Gig ID and
89:12 - title so we will make this component
89:15 - soon okay below that we have withd 800
89:20 - pixels images so we want to show images
89:22 - for the gig so uh images will be gig.
89:25 - images this is also a component we will
89:28 - make Title Gig gig title allow delete
89:32 - true so in this case we will true
89:34 - because we want to allow delete if we
89:37 - are on editing page so allow delete true
89:40 - but if we are on the gig preview page
89:41 - the gig page then it's going to be
89:44 - false below images uh let's say handle
89:48 - Send image so this is the form for
89:50 - uploading the images so this will only
89:52 - be on this edit page
89:55 - so on submit handle Send image let me go
89:58 - here so this is our form
90:01 - submission we defined it
90:04 - here okay let's
90:06 - see and then we want to have label so
90:10 - this label is from UI components
90:12 - everything is from UI
90:13 - components that we install from shat CN
90:16 - font normal add up to five
90:18 - images div Flex space X2 input
90:24 - from sh from UI components at UI
90:26 - components okay so ID image I don't
90:29 - think you need ID type file accept image
90:33 - and then all kinds of images so jpeg PNG
90:38 - whatever reference is this image input
90:41 - that we that I explained
90:45 - here ref okay on change we have this
90:48 - event and we're going to say set
90:50 - selected images array do from
90:54 - event. target. files or empty
90:58 - array so if there are selected files you
91:02 - set this set selected images to array of
91:06 - those files or you send to empty array
91:09 - and you you are allow this input to
91:11 - select multiple
91:13 - files so I will show all you all of this
91:16 - uh so this so when you click the input
91:18 - it will pop up a search window and you
91:21 - will be able to select multiple files
91:24 - and then some class names so cursor
91:26 - pointer W fit with fit background Etc
91:31 - disabled if selected images. length is
91:35 - different from zero so if the user has
91:38 - selected images then we will offer the
91:40 - user to upload the images and not to
91:43 - select
91:45 - again then we have upload image
91:50 - button so we will um type submit
91:54 - disabled select selected images so if
91:58 - selected images is zero then upload
92:00 - images button is disable because we need
92:02 - to have some selected
92:05 - images below that Flex rounded border
92:09 - rounded medium border zinc so we have
92:12 - this kind of uh text so it's going to
92:15 - say Creator and then uh this should be
92:19 - seller ID I I hardcoded my name here but
92:23 - I think it should be seller ID so I'm
92:25 - going to change this uh so this should
92:27 - be like I think seller. ID or something
92:30 - but it's hardcoded right now but we
92:33 - don't get seller anywhere so I think we
92:35 - need to get like seller or gig let let
92:38 - me see
92:40 - here okay I'm going to continue but you
92:43 - can use Query this is your task if you
92:46 - want to learn more you can you can
92:48 - either remove this if you don't want to
92:49 - do it or you can uh use Query to get
92:53 - seller ID somehow I will see how Okay
92:57 - offers offers editors so offers will be
93:00 - like premium
93:01 - standard basic and then just gig
93:05 - ID and then about this gig it will be H2
93:09 - title and then description I want to set
93:12 - description outside of this
93:14 - div and initial content gig. description
93:18 - editable
93:20 - true class name and gig ID will be gig.
93:27 - ID okay so that's it this is the whole
93:29 - file the there was nothing here there
93:33 - was just some empty text like but this
93:36 - is a whole file that we need to now
93:37 - create all of these
93:40 - components so first of all it looks like
93:42 - we don't need a bunch of these edits so
93:43 - we're not using this offers we're not
93:46 - using this convex image we're not using
93:48 - this
93:50 - CN we're also not using this file upload
93:52 - it seems and we are not using this
93:56 - image let's start by making this
93:58 - database mutation so let's go to gig.
94:03 - TS down below at the bottom let's make a
94:06 - new export con get it's going to be a
94:09 - query and we're going to pass in this
94:11 - object so it's going to have arguments
94:14 - it's going to be ID uh v. ID gigs and
94:17 - Handler
94:19 - function first we're going to get the
94:21 - gig so await context database G get
94:23 - arguments.
94:25 - ID if gig is now gig not found although
94:28 - we are not checking for user identity
94:30 - which we maybe should but okay then we
94:33 - want to so we don't want to just return
94:35 - gig we want to also return like offer
94:37 - seller what a lot of other things
94:39 - besides this gig so we want to get
94:42 - seller await context database get seller
94:46 - a gig. seller ID as ID
94:49 - users then if there is no seller throw
94:52 - new error seller not found
94:55 - country await contacts query
94:58 - countries by user ID and then pass in
95:01 - the seller ID to carry the
95:05 - countries must be
95:08 - unique okay um if there is no country
95:10 - country not
95:12 - found languages of the
95:14 - user so because uh this G gig page it
95:18 - will show not only the gig but the user
95:21 - languages countries user offer source
95:23 - there's everything reviews I think
95:27 - also uh we want to query Languages by
95:30 - user ID so all of the languages of this
95:32 - user collect all of them seller with
95:36 - country and languages so we need to now
95:38 - put everything into an object so we
95:40 - spread the
95:42 - seller it's going to spread all of these
95:44 - fields country country language
95:47 - languages so if we take a look at this
95:49 - it's going to be country object
95:52 - languages object array of languages and
95:56 - then uh the seller will be
96:00 - spread okay gig with
96:04 - seller spread the gig seller seller with
96:08 - country and languages so now when we
96:11 - say gig with seller do seller.
96:16 - country but besides seller everything
96:18 - else will be the gig will be spread so
96:21 - we add the new attribute seller to the
96:23 - this gig that we
96:26 - spread get last fulfillment so last
96:29 - fulfillment are so query orders with
96:32 - index by gig ID so get orders from this
96:37 - gig uh order descending this is by I
96:40 - think by date
96:42 - created and then the first so this will
96:44 - be the last order the yeah the last
96:48 - order now I think I'm calling this
96:51 - fulfillment and order those are not the
96:53 - same thing so I think we should call
96:55 - this like the last
96:57 - order gig with seller and last
96:59 - fulfillment we want to spread gig with
97:02 - seller and we want to add attribute last
97:05 - fulfillment so I don't know if you know
97:07 - what spreading means but it just
97:10 - means it's taking all of these
97:13 - attributes of the gig and just copy them
97:16 - and pasting them
97:19 - here
97:21 - okay um images it's going to be query
97:24 - gig media so we need to get gig images
97:27 - with index by gig ID so get all images
97:31 - by this gig ID and
97:34 - collect images with URLs a wait promise
97:38 - so we need to resolve all promises
97:41 - because for each image we're going to
97:43 - map images so for each image we're going
97:46 - to uh we need to retrieve each image
97:49 - from Storage so right now these images
97:52 - are just storage IDs they are not actual
97:56 - like images and URLs so for each of
97:59 - those storage ID we need to generate
98:01 - image URL for that image so await
98:05 - context storage get URL and pass in
98:08 - storage ID so that's going to return
98:10 - image
98:12 - URL if there is no image URL image not
98:15 - found and then spread the image all of
98:20 - this and then at the bottom below format
98:23 - where we're going to add URL is equal to
98:25 - image
98:26 - URL so if I go here it will be as you
98:30 - can see all of the image is spread and
98:32 - then also URL is
98:36 - string gig with seller and last
98:39 - fulfillment and images spread gig with
98:42 - seller and last fulfillment and say
98:44 - images will be images with URL so images
98:48 - and then last fulfillment and then
98:50 - everything
98:52 - else and then return gig with seller and
98:55 - last fulfillment and images so so this
98:58 - is the whole object we have everything
99:00 - here so if I save this now we have API
99:04 - gig get now let's make API gig is
99:07 - published to check if it's actually a
99:09 - lot short shorter I think so below get
99:13 - let's say export cons is published
99:16 - query and we're going to get get
99:19 - arguments ID for this gig and Handler
99:22 - function
99:24 - con gig is await context database get
99:27 - arguments. ID so we want to get this gig
99:31 - and then gig so check if it's
99:35 - null uh dop published or false so if
99:39 - this is null or undefined or if it's not
99:42 - published then we're going to get false
99:43 - so not
99:45 - published below below that let's say
99:47 - make publish so this is the next one
99:49 - that we need to make publish and then
99:51 - publish this is short also so publish
99:54 - we'll have we receive ID of the gig
99:58 - Handler gig we're going to get this gig
100:01 - again there is no gig throw
100:04 - error uh media we need to get all of the
100:07 - gig
100:08 - media uh by this gig ID so we need to
100:11 - check if there is so we want to collect
100:13 - all of the
100:14 - media um with by gig ID and check if
100:18 - okay let's also collect all offers so
100:21 - that's going to be premium basic and a
100:23 - standard I
100:25 - think as so offers by gig ID collect I
100:29 - think you understand what this I mean
100:30 - explained it so if you don't understand
100:32 - just tell me
100:33 - below if media length zero or gig
100:37 - description is empty string or offers
100:40 - length is different from three throw new
100:42 - error gig needs at least one image to be
100:45 - published or and the three offers and
100:48 - the
100:49 - description so you can add that here
100:53 - okay I wa okay so if this is true then
100:56 - we can publish so patch arguments. ID so
100:59 - the gig ID and then published
101:03 - true and return Gig if you want but I I
101:06 - don't think we need to return
101:09 - gig below that export constant publish
101:12 - this is shorter I think so we get gig ID
101:16 - Handler get the
101:18 - gig if there is no gig throw error and
101:22 - then just patch
101:24 - published false and return
101:28 - gig there is just three more and those
101:30 - are shorter so gig remove gig media
101:33 - generate upload URL and gig media Send
101:35 - image or save image to
101:39 - database export cons remove so this is
101:41 - inside of gig TS that's going to be
101:45 - mutation we gig ID of the gig we want to
101:48 - remove
101:49 - Handler we check identity so if somebody
101:53 - is logged in or not we should have
101:54 - checked it probably here as well
101:56 - everywhere at every mute every
101:59 - function okay so user ID is identity do
102:03 - subject I don't know if this is wait
102:05 - this might be a mistake let's see uh
102:08 - existing favorite yeah so if we
102:12 - favorited the gig it's going to be saved
102:13 - into a different uh table so we need to
102:16 - also delete the
102:18 - favorites query user
102:20 - favorites with index by user gig
102:23 - and
102:24 - Q user ID is user ID gig ID is uh gig
102:29 - arguments gig
102:32 - unique I think this is I I don't write
102:34 - this I think this is a mistake so we
102:36 - will fix it let's see okay so if there
102:39 - is the favorite exists with this user
102:41 - and this gig ID then we need to delete
102:45 - that favorite so context database delete
102:48 - existing favorite.
102:50 - ID and then we can await context
102:53 - database delete arguments. ID so we want
102:56 - to delete this gig after deleting the
102:58 - favorites or favorite so I'm not sure if
103:02 - this identity I think this is not the
103:04 - same ID this is not the same ID that we
103:06 - have in our database so I'm going to do
103:11 - this so user is await context database s
103:15 - users with this token identifier and
103:18 - then get unique and then user ID I'm
103:22 - just going to comment this and I'm going
103:23 - to say user ID will be user. ID like
103:28 - that but I need to also check if
103:32 - user if user is null
103:35 - return and now we don't need this
103:37 - question mark so I'll see if this works
103:40 - if it doesn't we will fix it I think
103:42 - this will work if we go back we need to
103:45 - create this gig media. TS and generate
103:47 - upload URL and send image so let's go
103:50 - here to convex folder again
103:53 - next to Gig TS I'm going to say gig
103:55 - media.
103:57 - TS so let's start by few Imports export
104:02 - cons generate upload URL
104:05 - mutation and then ass in context so this
104:07 - is another way you can do this mutation
104:10 - without Handler functions so return
104:12 - await context storage generate upload
104:16 - URL
104:18 - okay and then we want to say Send image
104:20 - it will be a
104:22 - mutation arguments storage ID VI idore
104:27 - storage format v string and gig ID will
104:31 - be v. ID gigs
104:35 - Handler check how many images are
104:38 - already uploaded const gig media await
104:41 - context
104:43 - database query gig
104:45 - media with index by gig ID
104:49 - collect if gig media length more than
104:52 - five throw new error you can upload up
104:55 - to five files please delete a media
104:57 - before uploading a new
104:59 - one and then await database insert gig
105:03 - media storage ID argument storage ID
105:07 - format arguments format gig ID uh
105:11 - arguments gig ID and that's it this is
105:13 - how you up send this is how you save
105:15 - uploaded image to the
105:18 - database and there is no more errors
105:20 - from our database we just need to make a
105:24 - few of these components now so add
105:27 - components description add component
105:29 - images let's make those two first so
105:32 - let's go here to and under app we're
105:35 - going to say just in components
105:37 - desk
105:39 - rtion
105:41 - DSX and images.
105:46 - DSX so in images we want to say use
105:49 - client now I'm not sure if we are using
105:51 - all of these import so you don't even
105:53 - need to import them now but later um
105:56 - interface image props so images image
105:59 - with URL type this type we will Define
106:02 - so this is image uh that also has like
106:05 - URL so image type I I will show you will
106:07 - show you so title allow delete and class
106:11 - name
106:13 - optional okay below that we're going to
106:16 - say export con images extract all of
106:19 - these uh Fields image title allow delete
106:22 - class name from image
106:23 - props const is hovered set is hovered to
106:28 - use State false and then
106:32 - return okay so this is Carousel from UI
106:37 - Carousel class name select none on Mouse
106:41 - enter we're going to say set is hovered
106:43 - to true on Mouse leave it's going to be
106:48 - set is hovered to
106:49 - false so we have this set is hovered the
106:53 - state that we
106:56 - track then we sa Carousel content and
106:58 - we're going to pass in the class name
107:01 - these are like Tailwind CSS classes or
107:03 - empty string if this doesn't exist if
107:05 - it's
107:06 - undefined images. map so for each image
107:11 - we're going to return
107:12 - something Carousel item key because you
107:17 - are mapping so you need to use key prop
107:20 - here aspect ratio 169 this is from a UI
107:26 - components allow if allow delete then we
107:29 - will say actions so this is like a it's
107:33 - not a drop down menu it's a button so
107:35 - side bottom side offset 10 storage ID
107:39 - image storage ID so these are actions
107:42 - from this but we will make
107:46 - it and then um trash two so this is icon
107:49 - from just icon trash two
107:52 - okay below that let's show the image
107:56 - source is going to be image URL
107:59 - or I think this is just a placeholder
108:03 - image and then fill because this image
108:06 - tag that's from next Rea next um I'm not
108:10 - sure where it is is from next image it
108:12 - must have either width and height or fi
108:15 - and then class
108:17 - name so below this Carousel content we
108:20 - want to say Carousel previous so these
108:23 - are previous and next buttons for if you
108:25 - have multiple
108:26 - images class name this is just position
108:30 - of that button and the looks Carousel
108:33 - next class name the same so this is our
108:36 - image viewing like component that's
108:39 - going to get in a list of
108:40 - images and then we can view
108:43 - them so let's now go ahead and create
108:45 - this actions so we're going to copy this
108:47 - underscore components underscore actions
108:49 - and then we'll go to this file path so
108:52 - that's our edit file that we made in our
108:55 - app so here seller edit um we have gig
109:00 - ID and then inside of that we have
109:02 - components actions so let's make like
109:07 - this uh actions. TSX so underscore
109:10 - component actions
109:12 - TSX but before all of that let me um let
109:16 - let's go and see what this page looks
109:18 - like so here in the edit gig ID page
109:22 - manage ID I want to comment this I want
109:26 - to comment
109:28 - this and then I W to comment title
109:31 - editor because we don't have this made I
109:34 - just want to see what all of this looks
109:35 - like so I'm going to comment this and
109:37 - offer editor and now H there should be
109:41 - no errors we just need to now load the
109:44 - proper gig so this is not the proper gig
109:47 - ID so let me go here to
109:51 - data uh
109:54 - gigs and copy this gig
109:58 - ID and now we need to paste it here so
110:03 - it's a proper
110:05 - ID the first problem we have is country
110:08 - not found so let's go here to countries
110:12 - and let's actually go to users and copy
110:14 - this user ID and to
110:17 - countries and I want to add a document
110:21 - manually user ID
110:23 - uh country
110:24 - Hungary
110:26 - save okay if I go ahead and refresh this
110:31 - again this is what our page looks like
110:34 - and now I can say select choose files
110:37 - and show all files for example and let
110:40 - me go ahead and select I can select
110:43 - multiple
110:44 - files and then I can upload image let's
110:46 - see what
110:48 - happens element type is invalid
110:53 - okay we didn't finish this but I think
110:56 - you see how this works and I think it
110:57 - works
110:59 - well but now we're not really able to
111:01 - see this so let's go here to image with
111:05 - the so first of all I want to comment
111:07 - out this actions in this is images
111:09 - TSX and then I want to comment this
111:13 - actions out actually I want to comment
111:15 - all of this we don't need it and let's
111:18 - just quickly make this
111:20 - types so in in the outermost file click
111:26 - say types slash index.
111:29 - DSX or
111:32 - DS here let's say export Type image with
111:36 - URL type it's going to be Doc gig
111:40 - media and so we need to extend this type
111:43 - of gig media with an
111:46 - object URL string and now let me import
111:51 - this so save
111:55 - this now this is resolved another thing
111:58 - is if you want to uh display images from
112:01 - a URL in next SL image tag we need to
112:05 - add that to next we need to add that URL
112:07 - to next config JS so let's go to next
112:10 - config J MJS in my
112:12 - case inside of next config we want to
112:15 - make some space and say images and
112:19 - object domains and then array and then
112:23 - copy paste this domain that it tells you
112:26 - if you want to display images from other
112:28 - domains then you need to add them so
112:30 - these are some domains that I'm adding I
112:32 - think you whenever you are displaying
112:34 - image from these domains then you should
112:36 - be you should add them so this is for
112:39 - example for for my placeholder image
112:42 - it's from this
112:43 - domain now we need to refresh it's going
112:45 - to recompile everything and just wait a
112:49 - bit and the images are are shown yeah
112:53 - the images are shown and we can cycle
112:55 - through them these are bad images I
112:57 - uploaded but now you can see uh what how
113:01 - this looks
113:03 - like so if we go to our convex files you
113:06 - can see the three images that I uploaded
113:08 - I can delete them but make sure you also
113:10 - delete the gig media like storage IDs
113:12 - here if you delete an
113:15 - image yes this looks ugly a little bit
113:17 - but we will add Navar this will not be
113:19 - on the top so it will look better now
113:22 - let's go back to actions in our edit gig
113:25 - ID components actions and let's continue
113:27 - with this this will be this will let us
113:29 - delete and do other actions so use
113:31 - client a bunch of imports that you don't
113:34 - actually need to import now but
113:37 - later um interface so this will let us
113:39 - either
113:40 - rename uh and then we have a confirm
113:43 - model everything so interface action
113:45 - props children react node side uh drop
113:50 - down menu content props
113:53 - side so this will be top left right the
113:56 - side of the drop down menu side offset
114:01 - it's going to be value in fixed pixels
114:03 - and this is from radx
114:08 - UI okay and then storage ID is going to
114:12 - be
114:14 - string export con actions extract all of
114:18 - these and then that's going to give it
114:21 - action props type
114:23 - uh so const on open username model so
114:27 - we're going to create this we don't have
114:28 - this yet but we will extract on open
114:31 - mutate pending from use API mutation and
114:35 - we're going to say API gig media remove
114:37 - so this is to for removing this media
114:41 - when we click delete button on delete
114:44 - mutate storage ID so we will delete the
114:48 - with storage ID and then we will say uh
114:51 - toast success board or it should be gig
114:54 - deleted or no this should be image
114:56 - deleted or I think this is image deleted
115:00 - because it's storage
115:02 - ID um catch so fail to delete board fail
115:05 - to delete
115:07 - image return give it some
115:11 - div and then confirm model so we want to
115:15 - be able to confirm if we want to delete
115:16 - the image header delete image question
115:20 - mark this will delete the image and all
115:23 - of its contents just this will delete
115:25 - the image okay disable pending so while
115:28 - this is being deleted it's going to be
115:32 - disabled on confirm is UND delete so
115:36 - this confirm model we will also make it
115:38 - we don't have it
115:41 - yet okay so inside we say
115:44 - button this will be passed as children
115:46 - to the model and then varant destructive
115:49 - these are class names trash two icon and
115:53 - delete
115:55 - text so first let's go ahead and inside
115:57 - of gig media let's make this remove so
116:00 - let's go to uh contrl p and look for Gig
116:03 - media and Below we're going to say
116:07 - export const remove
116:08 - mutation and then argument storage ID
116:12 - and
116:13 - Handler okay now we need to say const
116:15 - media is a weit context database query
116:18 - so get query the gig media with index by
116:21 - storage ID
116:22 - and then execute it get
116:25 - unique if there is no media media not
116:28 - found and then we want to delete based
116:31 - on this media
116:32 - ID and then we want to delete this okay
116:35 - so there are two things you want to
116:37 - delete as I said we have a file that we
116:40 - want to delete and we want to then
116:41 - delete it from the gig media storage so
116:45 - in Gig
116:49 - media oh sorry here
116:53 - uh we want to delete it from this
116:54 - storage as
116:56 - well so first we will look for it in the
116:59 - storage then we will delete
117:01 - from delete from the database and delete
117:04 - from
117:04 - storage and sorry this is not looking in
117:07 - the storage this is looking in the
117:10 - table so uh let's now go to so we are
117:15 - actually not using rename on this on
117:18 - rename model um I'm not sure I I think I
117:21 - I will just just comment this out and
117:24 - this because we are not using the rename
117:26 - model I maybe show you later uh how to
117:30 - use it but let's now just say components
117:32 - and confirm
117:33 - model so let's go
117:36 - here let's go to
117:39 - components and then make a new file
117:41 - confirm model.
117:44 - TSX here we want to use client and then
117:47 - import all of this stuff but not now
117:49 - later interface confirm model props
117:53 - children so that's going to be the
117:55 - pattern button that we passed and
117:57 - everything when we encapsulate this
117:59 - component so let me show you so here
118:02 - this confirm
118:04 - model uh we have this confirm model and
118:06 - these are all the props but also this is
118:08 - inside of it is p as
118:14 - children so let me go to confirm model
118:17 - and continue here on confirm is going to
118:20 - be a function that returns void
118:23 - disabled buan header string description
118:28 - string okay export con confirm
118:33 - model children conf so extract all of
118:36 - this give it type confirm model props
118:38 - and make an arrow
118:40 - function uh handle confirm
118:44 - unconfirm so we just call this function
118:46 - whatever it was so return alert
118:50 - dialogue alert dialogue is a like a
118:53 - popup alert so alert dialogue trigger as
118:56 - child children so you need to say as
118:59 - child because this is a button and this
119:02 - children is also going to be a button
119:03 - because we are wrapping we are passing
119:05 - Button as children so you cannot have
119:07 - button inside of a button but you can if
119:09 - you say as
119:11 - child uh so when you click this the
119:14 - button then it this will open the
119:17 - content alert dialogue header alert
119:20 - dialogue title is header
119:22 - alert dialogue
119:24 - description alert dialogue footer cancel
119:28 - and
119:29 - confirm and confirm we'll have disabled
119:32 - disabled and onclick handle
119:35 - confirm so now let's go to images. TSX
119:39 - and here where I say allow delete
119:42 - actions I let's uncomment all of this
119:45 - again and then let's uncomment this
119:48 - import so if I save all of this
119:52 - now we have this delete button and I
119:55 - have it for each image and if I press
119:56 - delete here this is our confirmed
119:59 - dialogue
120:00 - confirm and now that image should be
120:03 - deleted so there is only one image and
120:05 - in files there is only two images here
120:07 - so I can cycle through two of them but
120:10 - there is no more than two and I can
120:11 - delete this one as well and now there is
120:14 - only one so now let's do the description
120:17 - so in the page TSX of gig ID edit we
120:20 - want to uh un comment this that was
120:23 - commented and we want to scroll down and
120:25 - uncomment this
120:27 - description so now let's go to our uh
120:31 - description so description
120:33 - TSX and here we want to start by saying
120:36 - use client
120:39 - also we want to go to blocknote j.org
120:45 - and click here docs quick start and copy
120:50 - this and npm installed this these two
120:53 - libraries then in the
120:56 - description uh these are all of the
120:58 - Imports that you can import as you go
121:00 - but you need to import this manually and
121:01 - this manually and for me this is like
121:04 - showing uh that cannot cannot find this
121:08 - module but I think this is a mistake
121:11 - like a bug because this module does
121:14 - exist then let's say interface
121:16 - description
121:18 - props ID is gig ID
121:22 - uh initial content string so maybe there
121:25 - is already some
121:27 - description that we will display
121:29 - editable
121:31 - Boolean and then class name so editable
121:33 - so depends on if we are on the edit page
121:35 - we will want the user to be able to edit
121:37 - the description but if not then we will
121:39 - just show the description class name is
121:41 - like tail wi CSS so export cons
121:45 - description ID initial everything
121:47 - extract that from this
121:50 - type con update use mutation API gig
121:54 - update
121:57 - description
121:59 - editor we will make this uh gig you
122:02 - don't have it it will be red underlined
122:03 - but we will make it so editor will be
122:06 - use uh create block
122:07 - note initial content it will be this
122:10 - initial content that we passed question
122:13 - mark So if it exists we will Json pars
122:16 - so if initial content exists then we
122:19 - will Json par and this initial cont
122:22 - content or it's going to be undefined so
122:25 - either this or undefined depending on if
122:27 - it
122:27 - exists handle change if editor document
122:32 - exists con um content length is Json
122:36 - stringify editor document.
122:39 - length if content length is more than
122:41 - 20,000 characters but also keep in mind
122:43 - this is not 20,000 characters of pure
122:46 - description this is also like the whole
122:48 - Json file with all the data metadata for
122:50 - the description so there is like maybe
122:53 - 5,000 characters of like just those Json
122:57 - other characters okay update so we want
123:00 - to update the description the API
123:02 - mutation
123:04 - here gig ID and description so
123:07 - description will be Json stringify
123:09 - editor document. n.2 I forgot what this
123:13 - does with N2 you can you can maybe ask
123:17 - GPT but so this is the
123:20 - description uh the description is going
123:22 - to be here in the description field you
123:24 - see this is this whole what it's going
123:25 - to look like so this is for example that
123:28 - the text is going to be I have
123:33 - it I don't have it here I think it's
123:35 - empty so we'll see okay next else so if
123:40 - content like is more than 20,000 content
123:43 - is too long not saved duration 200 so
123:46 - this is toast error like notification
123:48 - duration two seconds icon alert uh
123:52 - octagon and then we want to return so we
123:55 - want to display uh we want to display
123:57 - block note view so we want to display
123:59 - that editor is
124:01 - editor editable editable theme light or
124:04 - dark onchange handle change class name
124:08 - is class name and that's it so now let's
124:11 - scroll up and let's make this mutation
124:14 - so y so API gig and then update
124:17 - description so let's go here to Gig
124:23 - DS so in the gig we're going to say
124:25 - export con update description
124:28 - mutation arguments ID gig ID and
124:32 - description
124:33 - Handler const identity is a weight
124:36 - context Al generate user identity check
124:39 - if identity does not exist
124:42 - unauthorized cons description ARX
124:45 - description
124:49 - trim if no description
124:52 - throw new error description is
124:55 - required description length is more than
124:57 - 20,000 description is to
125:00 - Long await context database patch so we
125:03 - want to patch the gig this is the ID of
125:06 - the gig and say description arguments of
125:08 - description and return gig so that
125:11 - should work ignore this error so if I go
125:15 - here to description you should see this
125:17 - and I should be able to add description
125:22 - and if I just click anywhere else it
125:24 - should automatically be updated here uh
125:27 - and if I go into description this is the
125:30 - text I should be able to add
125:33 - description and if I hard refresh this
125:37 - page the description is still there and
125:40 - it's editable because we are on this
125:42 - like edit URL but I'm going to make this
125:45 - not editable when it's going to be in
125:48 - the like the gig page let's continue
125:51 - with title editor so uncomment title
125:54 - editor in the gig edit page and let's go
125:57 - below and uncomment this as well oh I
126:00 - commented it
126:03 - twice oh my God what's happening okay
126:06 - let me uncomment it
126:09 - manually so I'm not really sure what
126:11 - this import path is but let me actually
126:14 - uh say slash component /title editor and
126:17 - then let me copy this and I want to go
126:20 - to component
126:23 - and create title editor.
126:26 - TSX so first use client and some import
126:29 - that you can import later uh just I
126:31 - think we need to I don't know if we have
126:33 - this installed react text area Auto size
126:35 - maybe you need to install this or you
126:36 - have this installed I don't know okay
126:39 - title editor props ID is gig ID
126:42 - title and title is string title editor
126:46 - ID title extract that give it this type
126:50 - Arrow function
126:52 - const input ref is use ref element ref
126:57 - text area and then set default value to
127:00 - null so we need to reference the text
127:02 - area that's going to be like our title
127:05 - input it's not going to be input field
127:08 - okay then const is editing set is
127:10 - editing use State
127:13 - false value set value of the title use
127:16 - State title so it's going to be M or
127:18 - whatever the string is
127:21 - then update use mutation API gig update
127:25 - we need to create
127:27 - this enable input so depending on if
127:32 - it'sit editing or not then input will be
127:34 - enabled set is editing
127:37 - true set timeout zero
127:40 - so uh I think this is we are so we want
127:44 - to set value to title I will explain why
127:46 - this way set value title
127:52 - and set input uh element is input uh ref
127:57 - current and then we want to focus the
128:00 - current the input when we enable
128:05 - editing and then we want to set
128:07 - selection
128:10 - range so the reason I'm using set
128:13 - timeout is to make sure this execute
128:16 - after the current execution callback as
128:19 - explained here and so uh this will let
128:22 - browser update the UI and then it will
128:25 - execute this and what this part does
128:28 - after the focus is it's going to set
128:30 - your cursor at the end of the title so
128:34 - when you focus the input field the text
128:36 - area actually not the input it will set
128:37 - the cursor at the end so you can
128:39 - continue typing at the end of
128:42 - title so let's go after uh disable
128:46 - editing set editing is false on input
128:50 - value string set value value this is
128:54 - value of the title of the input text
128:56 - area field that is update ID title so we
129:00 - want to
129:01 - update on input we want to set the value
129:05 - and we also want to save it in the
129:07 - database if it's if there is no value
129:09 - then it's
129:11 - Untitled on key
129:13 - down um event so we want to if you press
129:17 - enter we want to do something so react
129:20 - keyboard event a html text area element
129:23 - Arrow function if key is enter prevent
129:27 - default so I think this will what is
129:29 - going to do disable editing okay so I
129:32 - think this will not make a new row like
129:35 - go to new row with enter but it will
129:37 - just disable editing so
129:39 - save return div is editing return
129:44 - something if it's editing so if we are
129:46 - editing return text area Auto size
129:49 - reference is input so you want to
129:50 - reference this text
129:53 - area on blur means like uh when you
129:56 - defocus when you click somewhere else
129:58 - disable anything on key down is on key
130:01 - down so check if enter is pressed value
130:05 - value on change on input and then pass
130:09 - in E Target value so this is the text
130:13 - the new text the whole text of this uh
130:15 - text area field and some custom
130:19 - CSS max length
130:22 - 60 and then we want to so if it's not
130:26 - editing it will show this div uh on
130:30 - click enable input so as soon as you
130:33 - click this we want to set enable
130:36 - editing class name title we just want to
130:40 - show title so if I save this we also
130:44 - need to make this update real quick so
130:46 - let's go to geek
130:48 - DS but even now you see the title is
130:51 - displayed it will just throw an error if
130:54 - I try to edit it yeah there is an error
130:56 - because gig update doesn't exist but you
131:00 - see how when I click it it turns into a
131:03 - text text area but right now it's a
131:06 - div so let's make this
131:08 - updating uh let's go to GTS and say
131:11 - const update
131:13 - mutation arguments is gig ID and title
131:18 - Handler check the identity now I
131:21 - identity
131:22 - unauthorized title is arguments title
131:25 - trim so you want to remove trailing whes
131:27 - space trailing new line everything if
131:30 - title doesn't exist title is
131:33 - required if title length more than 60
131:36 - which it cannot be because we already
131:37 - have another check in input field max
131:39 - length then title cannot not be longer
131:42 - than 60
131:44 - characters and then AWA context database
131:46 - patch so ID of the gig and then what
131:49 - we're going to patch is title
131:52 - and return gig although we don't need to
131:53 - return
131:54 - anything so that's it now if I go ahead
131:58 - wait for a moment I think we just need
132:00 - to wait for this to no for this to like
132:03 - finish okay now it's finished so if I
132:06 - say this if I refresh I
132:15 - think you see the title has this one two
132:18 - three in the database and it's saved
132:20 - here so if I do this it's going to if I
132:23 - as soon as I def Focus it's going to
132:26 - actually it's going to immediately as
132:27 - soon as I change it's going to update
132:29 - database so whatever I do it's going to
132:32 - update and now let's go back to the
132:35 - whole gig page and let's make offers
132:38 - editors so three offers so I save this
132:41 - it's in components offers editor let's
132:43 - copy this offers
132:45 - editor and let's go here and say like
132:49 - that so so we're going to put this next
132:53 - to this page so in this components not
132:55 - in general components but in these
132:57 - components because this will only be
132:59 - applied like used here offers editor.
133:03 - TSX let's delete this offers editor TSX
133:06 - it will not be a file like that it will
133:08 - be a
133:10 - folder offers editor/ index. PSX so now
133:16 - it's going to the import is going to
133:17 - look the same so if you have index DSX
133:20 - you can just you import as if it was
133:22 - just offers editor. TSX here so you can
133:25 - import a file index like that and this
133:28 - is my bed so it should be not a folder
133:30 - index TSX but file index TSX so if I go
133:34 - here and click file index.
133:39 - TSX index. TSX
133:43 - yeah here this is these are a bunch of
133:47 - imports interface offers editor props
133:50 - gig ID
133:52 - export con offers
133:54 - editor
133:56 - so we're going to extract this gig ID
133:59 - offers editor
134:00 - props con offers is use Query API offers
134:05 - get so we're going to create this so we
134:07 - want to get all of the offers for this
134:09 - uh gig by passing in the gig ID offers
134:13 - are basic standard premium offers and
134:15 - then D has title description
134:18 - everything if offers is undefined return
134:21 - loading
134:22 - offers okay so con so if if something is
134:26 - undefined like query is undefined it's
134:27 - still being loaded and if there is no
134:29 - offers this will be null not undefined
134:32 - so undefined means being loaded basic
134:35 - offer is offers. find
134:39 - offer and so for each offer you're going
134:42 - to check if offer. tier is basic and
134:45 - then it will be only
134:46 - one standard offer you do the same you
134:49 - find offer where offer tier is standard
134:52 - and same for
134:54 - premium then we want to return something
134:57 - so tabs default value basic so we will
134:59 - have three tabs and you can switch
135:01 - between those three tabs default value
135:03 - basic class name at 400 pixels wide tab
135:08 - list tabs list tabs trigger value basic
135:12 - you say basic so on the top on the
135:14 - header there will be basic standard
135:16 - premium so this one is basic has value
135:18 - basic standard value standard
135:21 - premium okay and then tabs content so
135:24 - value the first one is basic content
135:27 - editor so content editor this is a offer
135:30 - content editor so we will make this
135:33 - component gig ID is gig ID offer is
135:35 - basic offer tier is
135:39 - basic tabs content is so this one is
135:43 - standard same thing this is just going
135:45 - to show and edit standard uh tier and
135:48 - then premium same so we need to make
135:51 - this content editor and we need to make
135:52 - this offers so let's start with offers
135:56 - so uh let's go to a convex folder next
136:01 - to Gig TS say offers.
136:05 - TS so here export con get query we want
136:10 - to query all offers arguments gig ID we
136:14 - get gig
136:15 - ID uh and then Handler
136:18 - function offers a weight context so we
136:21 - want to query offers with index by gig
136:24 - ID and we pass in this gig
136:27 - ID and collect all of them and return
136:31 - offers let me import I press control
136:33 - space let me import this and let me
136:35 - import V so that's
136:40 - it now we need to go up and next to
136:43 - index DSX is in offers editor we need to
136:47 - say
136:48 - content. editor. TSX
136:52 - in content editor some imports that you
136:55 - can import later um content editor props
136:59 - offer question mark doc offers gig
137:03 - ID tier basic standard or
137:06 - premium okay let's just export all of it
137:10 - so let's say content editor export and
137:12 - then extract these props okay title use
137:16 - State string so offer question mark
137:19 - title or
137:21 - uh empty string because offer is not
137:24 - obligatory we can Al if it doesn't exist
137:27 - we can create it
137:29 - here description of the offer is offer
137:32 - description or empty
137:34 - string price offer price or
137:39 - $5
137:40 - revisions offer revisions or one is
137:43 - default delivery
137:45 - days so two is
137:48 - default add offer use action
137:51 - so this will not be mutation or query
137:53 - this will be
137:54 - action so API offers add we will make
137:58 - this soon handle save so this is saving
138:02 - the offer when we edit it try await add
138:05 - offer okay so this is I think just this
138:07 - is for both saving and adding a new so
138:10 - try await offer so add offer and passing
138:14 - gig ID title description tier price
138:17 - delivery days revisions I had to because
138:20 - this is not the same name so I had to do
138:22 - it like this delivery days toast offer s
138:25 - saved
138:26 - successfully error let me keep this here
138:30 - so people can see like where what we got
138:32 - to console log error toast fail to
138:36 - save return so this is going to be some
138:40 - div uh so another div label title and
138:44 - then input field for
138:46 - title uh ID title placeholder title
138:50 - value title
138:51 - on change set
138:54 - title and then another div uh this is
138:56 - price ID price placeholder type number
139:00 - value
139:01 - price on change set price but we need to
139:05 - par Sy from this because this is going
139:07 - to be still string even though this is
139:08 - number
139:10 - type div label description input
139:15 - description placeholder value
139:18 - description on change div uh number of
139:22 - days uh for delivery
139:26 - input uh and then placeholder delivery
139:29 - days type number value delivery days on
139:33 - change set delivery days Pars in par the
139:37 - value div label HTML for revisions
139:41 - number of revisions
139:43 - input ID revisions placeholder
139:46 - revisions type
139:48 - number value on change everything is the
139:52 - same and then button save onclick handle
139:57 - save okay this is not necessary so on
140:01 - click handle save it will
140:04 - just uh say add
140:08 - offer uh let me see what this I think
140:10 - this add offer is like not just add but
140:13 - also like update if it already exists so
140:16 - we're going to send the gig ID and
140:18 - everything so I think let let's make
140:20 - this let's see what this looks
140:22 - like so in offers DS let's say const Ad
140:26 - is going to be action arguments gig ID
140:30 - title description tier
140:33 - Union so it's going to be between basic
140:36 - standard and premium price delivery days
140:42 - revisions
140:44 - Handler uh check
140:46 - identity offer we want to run query it's
140:51 - a bit different so internal offers get
140:54 - offer and pass in Gig ID and tier so
140:58 - we're going to make this internal uh
141:01 - query after uh okay so if there is no
141:04 - offer so we want to get this offer by
141:07 - gig ID and tier so each gig will have
141:11 - three offers and each offer will be
141:15 - either standard premium or basic if
141:18 - there is no offer uh stripe price is
141:22 - return
141:23 - action intern okay wait wait I think we
141:27 - need to now if there is no offer create
141:29 - a new offer so we we're going
141:32 - to
141:34 - um add the run this adrenal action
141:36 - that's going to create price and we're
141:39 - going to pass in price tier
141:42 - title okay then run mutation internal
141:45 - offers insert so we want to insert this
141:47 - offer if it doesn't
141:48 - exist gig ID title description tier
141:52 - price delivery days revisions stripe
141:55 - price ID so we need for each offer we
141:58 - will create an ID price ID in
142:02 - stripe return success else so if the
142:06 - offer does exist we want to update it so
142:10 - internal offers
142:12 - update gig ID title description price
142:15 - delivery days revisions offer ID run Su
142:19 - return success
142:21 - okay now let's make this insert internal
142:23 - mutation so this is internal mutation um
142:27 - the difference between internal mutation
142:28 - and mutation is this uh can this must be
142:32 - called by internal not not API offers
142:34 - update but internal offers update and uh
142:38 - this internal can only be run inside of
142:41 - that convex
142:42 - folder and not in your
142:45 - app so we're going to say arguments Pig
142:50 - ID
142:51 - title description tier uh that can be
142:54 - basic standard premium price delivery
142:57 - days revisions stripe
143:00 - ID and then
143:02 - Handler offer
143:05 - ID insert
143:11 - offers gig
143:14 - ID
143:16 - title and then description tier price
143:20 - deliver days revisions stripe price
143:23 - ID return offer
143:26 - ID okay and then update internal
143:28 - mutation args gig ID so this is for
143:32 - updating the offer title description
143:35 - price delivery days revisions offer
143:39 - ID patch so we want to so we're going to
143:43 - update the offer by patching it ID title
143:47 - description price delivery days revision
143:57 - get
144:00 - offer internal query
144:05 - arguments uh so this is for getting the
144:07 - offer so it's going to get gig ID and
144:09 - tier that can be any of these three and
144:13 - then Handler offer will be query offers
144:17 - with index by gig and tier so gig
144:21 - tier so it must be unique obviously and
144:25 - then return offer so that's it now let
144:27 - me go ahead and import this internal but
144:31 - I think it's this is wrong so it must be
144:34 - generated server
144:38 - no just a second so internal mutation
144:40 - from generated
144:42 - server and let me import internal query
144:45 - from generated
144:46 - server and then um internal
144:53 - this is weird let me import action from
144:57 - generated
145:00 - server and then this internal this
145:03 - internal must be imported internal from
145:05 - generated API UND generated API so I had
145:10 - some error and in this uh edit gig ID
145:13 - page DSX where I'm importing this offers
145:16 - editor it said like you couldn't find so
145:19 - I just deleted this this import and then
145:21 - went here and imported it again and now
145:24 - it works so let me go here uh this is
145:28 - our offers editor here we have basic
145:30 - standard premium and if I say
145:34 - title uh but this is going to throw an
145:36 - error so this should work we just don't
145:39 - have the stripe ID
145:42 - creation so here internal stripe ad
145:44 - Price so let's quickly make that so next
145:48 - to offers DS let's say stripe the
145:51 - s here we will say import all of this
145:54 - and import Stripe from stripe and we
145:56 - need to go ahead and npm install
146:00 - stripe okay then we will um export con
146:04 - add price internal action arguments tier
146:08 - will be Union between these three L
146:11 - literals price is number title is
146:15 - string
146:17 - Handler okay so stripe is new stripe so
146:20 - process and next stripe secret key we
146:23 - need to make this we don't have it yet
146:26 - API version is this one uh price await
146:29 - stripe prices
146:31 - create currency USD unit amount arc.
146:35 - price times 100 because this is to
146:38 - convert it to
146:40 - Dollars uh to convert it to cents
146:43 - because this must be in cents unit
146:45 - amount must be in cents so product data
146:49 - name and and then we make these square
146:51 - brackets arguments tier so it's going to
146:54 - be standard premium whatever Plus
146:57 - arguments
146:58 - title and then return price and save it
147:02 - now we need this uh next stripe secret
147:06 - key go to strive.com and go make sure
147:10 - its test mode is enabled go to
147:12 - developers API keys so copy this
147:15 - publishable key and in your n. local you
147:19 - need to have this next next strip public
147:21 - key that's going to be this one next
147:23 - strip secret key that's going to be
147:25 - reveal test key and copy
147:28 - it and web hooks secret so go to web
147:31 - hooks actually uh let's leave it empty
147:34 - for now so let's copy these two we need
147:37 - to save this and go to convex so we need
147:39 - to also paste this into
147:44 - settings and environment variables and
147:47 - add paste these two so our functions
147:51 - will be executed on convex so it must
147:53 - have these
147:55 - variables and now if I go to my website
147:57 - I say title basic shaving price uh I
148:02 - don't know let's say 10 description
148:05 - basic I just want to distinguish it
148:08 - number of days one and
148:11 - save uh offer saved successfully so if I
148:14 - go to my here data offers
148:20 - here there is one offer price revisions
148:23 - everything so if I go here and I hard
148:25 - refresh this page it should pull all of
148:28 - this
148:29 - data so yeah it should stay the same so
148:32 - it stay the same and now standard and
148:34 - premium I can also do this if I want so
148:38 - I think let's just and okay so
148:43 - let's if we go to stripe here to more
148:46 - and product catalog we're going to see
148:49 - that we have this new product that's $10
148:51 - price basic shaving that I just
148:55 - created so this is the price ID it's
148:59 - right here price ID we're going to use
149:00 - this
149:02 - later now that we have all of this let's
149:05 - go to homepage and display all of the
149:08 - gigs that we
149:09 - created first we will go to a app
149:12 - dashboard and create a new file layout.
149:16 - TSX this is a reserved
149:18 - name first we will import navbar from
149:21 - underscore components navbar then
149:24 - interface dashboard layout props
149:27 - children uh because uh this page and
149:30 - everything inside of this route will be
149:32 - passed in as children to this
149:34 - layout as if you are wrapping uh the
149:38 - this page with this layout component
149:40 - same as context providers that we did in
149:42 - the
149:43 - beginning so children dashboard layout
149:46 - extract children from this type export
149:49 - default dashboard layout return main
149:52 - height full padding X zero but on two
149:56 - Xcel screens padding x
149:58 - 56 Navar and below that children so we
150:02 - want to have navbar on the top and below
150:04 - that the page so let's create this
150:07 - components navbar next to layout I'm
150:10 - going to add a new file say compon
150:12 - Anders or components navb bar.
150:16 - TSX so in the navbar we're going to say
150:19 - use client
150:20 - uh all of these Imports you can import
150:22 - later not now there is a bunch of them
150:23 - but later okay uh const
150:27 - navbar export default
150:30 - navbar categories use Query API
150:33 - categories
150:35 - get current
150:37 - user use Query API users get current
150:41 - user search parameters is use search
150:44 - parameters that must be imported from
150:46 - next SL navigation very important and
150:48 - use router from next navigation not next
150:50 - SL router so this search parameters is
150:54 - when you have a question mark
150:57 - search what so we have some parameters
150:59 - so for example if I if I'm filtering I'm
151:02 - going to have these parameters but we'll
151:04 - see later what what this is thej
151:07 - parameters in the URL so favorites
151:10 - search parameters get favorites so if it
151:12 - exists or not in the URL filter search
151:15 - parameters get filter and then use
151:18 - router from next / navigation
151:21 - categories is UN if categories is
151:24 - undefined return loading as I said
151:26 - undefined in use convex means it's still
151:29 - loading and these
151:31 - hooks cannot be after
151:34 - if okay on click inbox so there will be
151:37 - inbox so user will be pushed to SL inbox
151:41 - clear filters uh router push to so
151:46 - remove everything from the like whatever
151:48 - you have in the string in the
151:51 - URL then return a fragment two
151:56 - separators from UI
151:58 - components don't import them from radx
152:01 - UI import them from the UI components
152:03 - always these things never import
152:05 - anything from radic UI except there was
152:07 - only like one thing that I showed
152:10 - you
152:12 - okay Flex items so this is a one div
152:16 - second
152:17 - div search input so this is for search
152:21 - we're going to we're going to be able to
152:22 - search gigs then dialogue dialog trigger
152:26 - so this is filter uh toti provider text
152:30 - filter so when we click this dialog
152:32 - trigger it's going to open the dialogue
152:34 - content that I will show you later so
152:37 - filter icon from Lucid
152:40 - react and this is the dialog content so
152:43 - once we click this inside of this
152:45 - trigger it's going to open this content
152:47 - we're going to calculate the height
152:49 - maximum height to be full screen minus
152:53 - 200
152:54 - pixels I think
152:57 - um well I'm I forgot why okay below that
153:02 - we're just going to Mark scroll area but
153:05 - let's return here up Scroll area oh yeah
153:08 - this is just a comment so ignore this so
153:10 - dialog
153:12 - close we're going to have uh this
153:15 - because it must be one one like HTML
153:18 - element and then button so when I click
153:20 - this button it's going to uh it's going
153:23 - to clear
153:24 - filters have waran ghost class name text
153:28 - red 500 disabled not filter clear
153:33 - filters okay categories. map category
153:39 - index so for each category we want
153:45 - to uh select I think this filter is
153:49 - going to let us select a
153:51 - category so uh I'm putting it into
153:54 - dialog close because as soon as we
153:56 - select a category it should close this
153:58 - like dialogue and it should push us to
154:00 - the URL to display this category so
154:04 - categor map for each we're going to pass
154:06 - in key when you have
154:08 - mapping some class names title is
154:11 - category name and then another
154:14 - div category do subcategories map and
154:18 - then mapping all of them and then list
154:21 - item
154:23 - key title is subcategory name
154:26 - subcategory subcategory so we're going
154:28 - to make this list item so whenever we
154:31 - click this we will go to that like we
154:33 - will enable that filter for that
154:36 - subcategory below that below dialogue
154:38 - we're going to say if current user
154:41 - exists make a fragment tool tip provider
154:44 - favorites so this is to enable favorites
154:47 - so button the button is from UI
154:50 - components not from radic UI as child
154:54 - variant if favorites variant secondary
154:57 - or ghost if fait is enabled size large
155:02 - class name so
155:04 - link so is path name this is the path
155:08 - name but also query is favorites so if
155:12 - favorites is enabled then query is
155:13 - nothing but or favorite is
155:18 - true so if favorite is enabled we click
155:21 - favorites we want to disable favorites
155:24 - so we'll see how this goes into URL with
155:27 - favorites true and then class name heart
155:32 - icon and then let's say
155:34 - inbox so tool tip provider will just let
155:38 - us hover over this whatever is inside
155:40 - and it will show this like tool tip okay
155:44 - so
155:45 - button message Circle
155:49 - um yeah so on click it's on click inbox
155:53 - it's going to push us to SL inbox to
155:55 - inbox okay so this button has on
155:59 - click uh to manage gigs so it's going to
156:03 - be seller current user username manage
156:06 - gigs switch to
156:09 - selling and then user button so this is
156:11 - going to be our whole nav bar but below
156:14 - that we also have if there is no current
156:15 - user we're going to save button varant
156:19 - default as child sign up button so if
156:22 - user is not signed up mode
156:25 - model after sign up I think we don't
156:28 - need this we're going to remove we're
156:30 - going to remove this and then also sign
156:33 - in
156:35 - button and that's it but I let me remove
156:38 - this and this because I used this to add
156:41 - user to the database but we are adding
156:43 - the user in a different way so that's
156:46 - it we just need a few of these
156:50 - so we're going to need um users get
156:52 - current users so let's go to users
156:56 - TS at the bottom we're going to say get
156:59 - current user
157:02 - Handler const identity is get user
157:05 - identity if there is no identity return
157:08 - null we're going to return user and so
157:11 - we're going to uh you don't you you
157:14 - don't need to write this so const user
157:16 - is AWA context database query users
157:19 - which with index by
157:21 - token and then
157:23 - unique so that's it let me just import
157:27 - query and that's it so first let's
157:30 - create this search input so here in the
157:32 - files I'm going to create a new file
157:35 - search input.
157:38 - DSX use
157:41 - client and then bunch of imports but
157:43 - we're going to have to install this
157:51 - like this okay then let's continue
157:53 - search input con router is used
157:57 - router const value set value use State
158:00 - uh to be empty
158:02 - string handle change react change event
158:06 - HTML input
158:09 - element set value to e Target
158:14 - value um so this is when we type in into
158:19 - search and then handle submit URL is Qs
158:23 - so Qs is our query string do stringify
158:28 - url url is going to be this slash and
158:32 - then query will be search value so
158:35 - whatever we write will be this
158:38 - query and then skip empty string true
158:41 - and Skip null true so it won't put query
158:45 - if this value is uh null or empty string
158:48 - as I understand
158:50 - and then router push to URL so we will
158:53 - just push to this so we will uh have
158:56 - this search query in the so for example
158:59 - question mark search equals uh hair
159:02 - whatever I think something like
159:04 - that okay so this is if you want to use
159:06 - the bounce value but uh you don't need
159:09 - to use it at all it doesn't matter what
159:12 - it is if you don't know uh div okay so
159:15 - this is
159:17 - icon input
159:21 - uh class in class name placeholder gigs
159:25 - unchange unchange value and then button
159:29 - um unchange handle submit variant
159:32 - secondary class name search button okay
159:34 - that's it we also need to install this
159:39 - though so let me go here and
159:42 - npm
159:44 - install
159:45 - this but now I see that we are not using
159:48 - this because this is using the bounce
159:49 - value so we don't need this we don't
159:52 - need
159:53 - this okay search input is
159:56 - created uh let me I mean I want to
159:59 - comment both of these
160:02 - maybe actually no I need to I need to
160:04 - have toty provider so let's create
160:06 - tooltip provider and then we're going to
160:08 - see what this looks like so next to
160:11 - navbar just tool TI provider
160:14 - TSX we want to import tool tip and all
160:18 - of this but but toty provider as base
160:21 - toty provider because this will
160:22 - component will have the same name toty
160:25 - provider props children string text so
160:28 - as you can see here in where we use toti
160:31 - provider we pass in like some
160:34 - children so that's going to be
160:37 - children uh export cons toty provider
160:40 - children text toty provider
160:43 - props
160:45 - Return base toty provider
160:52 - tool
160:53 - tip tool tip
160:56 - trigger Flex item Center as
160:59 - child
161:02 - children um so this is going to be like
161:06 - when we hover over this then we're going
161:08 - to display this tool tip content so it's
161:10 - going to be this text so text can be for
161:12 - example let me see what I put here
161:15 - so I say like text filter and then this
161:19 - is children when you hover over children
161:21 - we will have this toty provider so I
161:24 - think we can now see that if I comment
161:26 - this and I
161:28 - comment let me comment like the
161:35 - whole this list items and let me just
161:39 - make it a
161:45 - div and give it a key because it must
161:48 - have a key
161:50 - so I had an error because I didn't save
161:52 - my layout TSX here in the app naar and
161:56 - stuff so now we can see how what it
161:58 - looks like and I can go ahead and put
162:01 - some search and if I say
162:04 - search it's going to say search equals
162:07 - to this whatever I set to this is how we
162:10 - can put it into uh link but there is
162:13 - just a little bug in my web browser
162:15 - doesn't show but it should work for you
162:18 - if I click filter
162:19 - it's going to let me select a
162:24 - category uh and favorites we'll put
162:27 - favorit to
162:29 - true and this will push me to the in
162:34 - inbox now let's continue with this list
162:36 - item so let me uh delete this and
162:40 - uncomment
162:43 - this go here next to the na bar I'm
162:45 - going to say list- item
162:50 - hsx let's start with some imports then
162:54 - interface list item props title and
162:59 - subcategory okay export con list item
163:02 - and then extract these props give it
163:04 - type list item props cons router is used
163:08 - router from next /
163:10 - navigation handle
163:13 - click so the these list items this is
163:16 - for selecting a subcategory so filtering
163:18 - by subcat category and the category URL
163:22 - query string string ify url url is slash
163:26 - query is going to be filter subcategory
163:30 - name and that's it just close it
163:32 - everything and then say skipped empty
163:34 - string true and Skip null
163:36 - true and then router push URL so you it
163:40 - will be um it will be like this this
163:44 - question mark filter equals and then
163:48 - whatever the It Whatever the category
163:52 - subcategories okay so return button so
163:56 - each of these are going to is going to
163:58 - be a button give it on
164:02 - click and then let's say um div show
164:08 - title and then close the div and that's
164:11 - it so let's save this but we don't have
164:15 - this low Dash so I need to copy that
164:18 - actually no this we are not using this
164:20 - so we can delete this we can delete CN
164:22 - we don't need navigation menu
164:24 - link and that's it now let's go back to
164:28 - this list item in your Navar and then
164:30 - import it like that and
164:33 - save now if I go here and I say filter I
164:37 - have all of these options so computer
164:39 - vision I say computer vision and then in
164:41 - my URL you're going to say filter equals
164:43 - computer vision and it's just that Opera
164:45 - browser is not showing the URL until you
164:47 - click but it should be fine and then
164:50 - clear filters that should clear filters
164:53 - so I can select any
164:55 - filter now we want to display a gigs on
164:58 - the homepage so let's go to
165:02 - components make a new file uh gig dcard
165:06 - SL index.
165:10 - TSX let's also
165:12 - add footer.
165:15 - TSX and overlay. TSX
165:20 - inside of index DSX let's say use
165:23 - client okay so a bunch of imports so
165:25 - we're going to need this date FNS so
165:27 - let's copy
165:29 - that and let's npm install date
165:32 - FNS okay uh I think I I'm not sure why
165:37 - this is wrong import I will fix this
165:39 - later and then this does doesn't exist
165:41 - and this doesn't exist so we will make
165:43 - all of that you don't need to worry
165:44 - about it now okay interface G hard props
165:48 - ID seller ID uh title description create
165:53 - that is favorite so we need all of this
165:56 - information to display the gig storage
165:59 - ID this is image storage ID it's
166:02 - optional okay offers offer yeah one
166:06 - offer uh real what is it reviews yeah we
166:09 - want to show R number of reviews this
166:11 - gig has so it's going to be a gig card
166:13 - that shows image title everything export
166:16 - con gig card extract all of this stuff
166:19 - all of these props give it this type and
166:23 - arrow
166:25 - function okay so you need to extract
166:27 - user ID from use out use out is from
166:30 - clerk
166:31 - nextjs seller is use
166:35 - Query API gig get
166:38 - seller ID is going to be seller ID as ID
166:44 - users we will make this
166:47 - function okay so you don't need
166:49 - this I forgot I forgot to delete it okay
166:52 - create a that label format distance to
166:55 - now create a that so it's going to be
166:57 - like two hours ago 3 hours ago two days
167:00 - ago add suix true I forgot what this
167:03 - suffix does we'll see const okay so we
167:07 - need mutation for favoriting and unfavor
167:10 - thing below so let's rename so we're
167:14 - going to extract mutate and pending from
167:16 - use API mutation we already did this a
167:18 - few times we need to pass in API gig
167:21 - favorite as mutation function and we
167:23 - need to rename mutate to favorite and
167:26 - pending to unfavorite for this mutation
167:28 - function and then do the same for
167:30 - unfavor thing so just pass in unfavorite
167:33 - and rename mutate to unfavorite and
167:35 - pending to unfavorite
167:40 - pending okay so then toggle favorite so
167:43 - when we click favorite or unfavorite
167:44 - okay so if is favorite we will
167:46 - unfavorite but if it's not favorite then
167:48 - we will favorite so unfavorite and pass
167:51 - in ID so ID is this ID of the
167:55 - gig so we're going to call this mutation
167:58 - if you don't understand how this works
168:00 - go back where we installed when we made
168:02 - this in the descriptions below use API
168:04 - mutation in the you have a time stamp
168:07 - okay and then else favorite and passing
168:10 - gig ID okay so if seller is undefined
168:14 - return gig car. skeleton so this will
168:17 - just be like a like a box skeleton box
168:20 - that we will create soon while this is
168:23 - being
168:24 - loaded uh okay so let's return
168:28 - link so this link when we click on this
168:31 - gig it's going to push us to the gig
168:33 - page so that's why it's link okay so is
168:37 - going to be SL seller question mark
168:40 - username so seller might be null that's
168:42 - the problem uh and then SL id id of the
168:47 - gig so username and then ID the gig okay
168:50 - so you don't need this I just forgot to
168:51 - delete
168:53 - it uh okay so the then div with all of
168:56 - these like this must be group border
168:58 - group is so when we hover something
169:01 - inside whatever has group we can attach
169:04 - like we can uh make attach some effect
169:08 - to to
169:09 - it and then another div overlay we're
169:13 - going to make this component convex
169:16 - image uh so this is going to show the
169:19 - image of the gig storage ID storage ID
169:21 - of the image and title below the
169:25 - image actions actually I think this
169:27 - title will just be like alt if the image
169:30 - is not shown okay so actions id id uh
169:34 - title title I think actions will be like
169:36 - delete or something I'm not sure we'll
169:39 - see okay so inside of actions you wrap
169:43 - uh button with actions and so this will
169:46 - be passed as
169:47 - children more horizontal is icon from
169:50 - Lucid
169:51 - react okay and then this is just class
169:54 - names below that footer So Below this
169:57 - div is favorite is his favorite title
170:01 - title owner label I hardcoded my name
170:04 - but um I think you can say seller. name
170:07 - or something like
170:10 - that create created at label created
170:13 - that
170:14 - label okay so yeah we want to display in
170:17 - the footer like create a two days ago
170:19 - created two days ago on click toggle
170:21 - favorite because this favorite will be
170:23 - inside of this footer the heart icon and
170:25 - then it's going to be either filled or
170:27 - not fill depending if the if this is
170:30 - favorite disabled favorite P pending or
170:34 - unfavorite bending so we're going to use
170:36 - this to disable the but the favorite
170:38 - button offer is
170:40 - offer reviews reviews seller
170:45 - seller okay and then let's define this
170:47 - gig card. skeleton is going to be a
170:49 - function it should be gig card
170:52 - skeleton
170:54 - return okay aspect
170:57 - ratio and then skeleton is from uh at UI
171:01 - components not from radx
171:04 - UI so that's it this is our gig card now
171:09 - let's uh go to Gig and create favorite
171:11 - and unfavorite functionality so let's go
171:13 - to gig.
171:15 - DS so first we will say favorite is
171:19 - equal to
171:21 - mutation pass in arguments that's going
171:24 - to be gigs
171:27 - Handler uh then check for the identity
171:30 - let me close this actually okay and then
171:32 - identity if not an authorized okay so
171:36 - get the gig by gig ID if there is no gig
171:39 - gig not found not board not found user
171:42 - ID is gig. seller
171:44 - ID existing favorite we need to check if
171:48 - this G is already favored by this
171:52 - user uh user favorites Square user
171:56 - favorites uh with index by user okay so
172:00 - we're going to have to change this but
172:03 - just let's finish this function first
172:06 - so uh buy gig you buy user gig and then
172:09 - say find a favorite so gig favorites is
172:13 - another function is another table and it
172:15 - has uh guy who favorited the gig and the
172:19 - gig ID so that's why we need to search
172:20 - that table and check if this user with
172:23 - this ID exists in that table so that
172:25 - means it's
172:26 - favorite okay and then unique it must be
172:30 - unique if existing favorite um gig
172:33 - already
172:35 - favored I saw this from uh this I saw
172:38 - this part from uh code with Antonio
172:40 - that's why when in his miror clone
172:42 - that's why I forgot to change a
172:44 - board so uh context database insert user
172:49 - okay so if it's favorited throw error
172:52 - but if it's not favorited then we insert
172:54 - a favorite so user ID and gig ID is gig.
172:57 - ID and return gig okay now let's do un
173:01 - favorite before we fix this because this
173:03 - is checking if the seller has faved but
173:05 - not if the currently logged in user is
173:06 - faved so that's my mistake we will fix
173:09 - it okay so let's do I'm fav is the same
173:12 - so I'm just going to go quickly because
173:13 - it's almost the same check
173:15 - identity uh get the gig check if the gig
173:19 - is not found and then user ID it's going
173:22 - to be different existing favorite query
173:26 - favorite so we need to find this
173:28 - existing favorite and then if there is
173:31 - no existing favorite favorite at gig not
173:33 - found or we can just say return you
173:36 - don't need to throw an
173:38 - error okay and then we just want to
173:40 - delete this entry into the of the the
173:43 - table where you have this user ID gig ID
173:46 - so if that entry is deleted then there
173:47 - is no favor
173:49 - and return gig so I think we can just
173:51 - say return we don't need to throw errors
173:54 - here or maybe you should just for
173:56 - debugging so I'm going to leave it here
173:59 - okay so let's go to the favorite
174:00 - function instead of this user ID seller
174:03 - ID let me delete this and let me paste
174:05 - all of this so user we need to check we
174:08 - need to get the currently logged in user
174:10 - from the database not the seller user so
174:14 - this is how we do it we did it a bunch
174:15 - of times and if user is now returned and
174:18 - we don't need this okay so user ID is
174:21 - user uh ID so
174:24 - let's so the currently logged in user is
174:26 - we're checking if this person has
174:28 - favorited the gig so let's go here
174:30 - delete this in un favorites and just get
174:33 - the current logged in user and check
174:35 - that's user
174:37 - ID if I save this we go back then you're
174:41 - not going to get the errors here and
174:42 - here anymore so I
174:45 - think we need to now go ahead and create
174:48 - this gig do get seller so in the gig. TS
174:54 - we're going to export con uh get seller
174:58 - and then we need ID of the seller so
175:00 - we're going to call this with the uh
175:03 - gig. seller ID and then we need to say
175:06 - Handler con seller is context database
175:10 - get arguments. ID so we're going to get
175:12 - the whole ID the whole user and then
175:15 - return the user so that's it this is get
175:19 - seller now let's go ahead and create
175:21 - this footer and overlay so footer is
175:24 - here so let's
175:25 - just before we start with footer let me
175:28 - actually go ahead and comment all of the
175:30 - other few because I want you to see what
175:33 - footer looks like so I'm going to go
175:36 - here comment convex image overlay and
175:38 - actions all of this and that's it so
175:43 - let's go to footer and let's start first
175:46 - some imports okay interface footer props
175:50 - is favorite Boolean title o owner label
175:53 - so the name of the owner created that
175:57 - label so 3 days ago on
176:00 - click uh we'll see what on click is I
176:02 - forgot disabled uh this is disabling
176:05 - favorite button offer reviews seller
176:09 - export con footer is favorite so just
176:12 - get all of these and then give it the
176:15 - this type and make Arrow function
176:18 - average review we need to calculate it
176:21 - type number so reviews length more than
176:25 - zero question mark So if it is more than
176:28 - zero then we're going to do this
176:29 - following reviews reduce I will show you
176:32 - what this does if you don't know so we
176:34 - need accumul accumulated value and
176:37 - review so every time we add up reviews
176:41 - numbers it's going to be saved into this
176:43 - so This is Gonna this is everything from
176:45 - the previous accumulation I will show
176:47 - you
176:48 - so we're going to say a a previous
176:52 - result plus review communication level
176:55 - so it's going it can be from 0 to five
176:58 - plus uh recommend to a friend plus
177:01 - Service as described or zero now sorry I
177:05 - think this is setting the initial value
177:07 - at
177:08 - zero so start from zero okay then divide
177:11 - all of this with review length times
177:15 - three or zero
177:18 - so if reviews length is more than zero
177:22 - do this if it's not if it's if there is
177:24 - no reviews then average review is going
177:27 - to be zero okay so what is this this is
177:30 - a uh reducer so you start
177:36 - from so you first add all of the reviews
177:39 - you add all of the numbers so you go
177:41 - ahead and first review you add
177:43 - communication level plus recommended to
177:45 - friend plus Service as described and
177:48 - then you go to the next review and you
177:49 - also to that result you also add the
177:52 - next review numbers and then you
177:54 - calculate you add everything and then
177:56 - you divide everything by reviews length
177:59 - times three because each review has
178:01 - three grades one two three grades so you
178:04 - need to divide to get an average
178:07 - review and you use reducer because it
178:09 - can uh have like this accumulated value
178:12 - from previous uh iterations
178:18 - then if average review percentage one is
178:21 - different from zero average
178:24 - review is parse float so basically if
178:29 - it's not a whole
178:31 - number then we need to parse float and
178:34 - give it like one decimal
178:37 - point okay so uh con handle click it's
178:41 - going to be
178:42 - event and we're doing this because we
178:46 - don't want to have like 15 decimal
178:48 - points I'm not sure how many decimal
178:49 - points this number if it's float is
178:51 - going to have okay so handle click uh
178:54 - react mouse event HTML button element
178:57 - mouse
178:59 - event and then stop propagation so
179:02 - because it's going to be a button inside
179:04 - of a button or inside of a link I think
179:07 - so we don't want to when we click
179:08 - favorite we don't want this to propagate
179:10 - to the outside link so it goes the link
179:12 - as well prevent default is going to
179:15 - prevent page reload I think or whatever
179:18 - the default behavior for that button is
179:22 - and then on click so we we got on click
179:26 - from this here so I think on click
179:30 - toggle favorite that's our on click
179:32 - function toggle
179:33 - favorite and then in the footer we can
179:36 - continue with return a new div and then
179:40 - uh we're going to show seller full name
179:42 - at the top and then we're going to
179:45 - calculate the width and show title below
179:48 - the seller
179:50 - name another
179:52 - div star this is for
179:56 - reviews and then show reviews length so
179:59 - this is the number of
180:01 - reviews and then average review so we're
180:05 - going to put it into brackets so if I
180:08 - save this I think it should work let me
180:11 - just see the
180:12 - error
180:15 - seller so I think uh we we will be able
180:18 - to see this I think just the problem is
180:20 - this can be null so let's go here and
180:22 - copy this if seller is undefined let's
180:24 - just say seller seller is null return um
180:28 - seller not found or something so let's
180:31 - let's say
180:33 - div seller not found and this must be in
180:37 - the same
180:38 - row so there should be no more errors
180:41 - and we should be able to see the gig
180:43 - here but first we need to we are not
180:46 - using this gig card anywhere so we need
180:48 - to go to dashboard and then page DSX and
180:50 - then remove this high and then comment
180:53 - this gig
180:54 - list uh uncomment this gig
180:59 - list
181:02 - and we don't have a gig list so let's
181:05 - return to finish our footer and then we
181:09 - will continue with the we will make a
181:11 - gig list list
181:13 - so next uh you don't need this I just
181:16 - forgot to delete it
181:18 - okay so then make this p and this is
181:22 - offer. price and this is going to be the
181:25 - lowest price the lowest offer so the
181:26 - basic offer from this amount of dollars
181:30 - and then another div or another p uh
181:33 - owner label created that label that's it
181:37 - okay button disable disabled so this is
181:39 - going to be favored button favoriting
181:41 - button on click handle
181:43 - click uh class name CN and import C n
181:49 - from Li
181:52 - utils and then give it this these
181:55 - classes so CN is going to let you
181:57 - dynamically show classes if a condition
182:00 - is satisfied so if disabled is true then
182:04 - you want to say cursor not allowed
182:06 - opacity 75 so these classes will always
182:09 - be on this button and but if disabled is
182:11 - true then also these classes will be
182:14 - added heart icon from Lucid react class
182:18 - name CN again uh withd height and is
182:23 - favorite
182:25 - and fill blue text blue so if is
182:28 - favorite if this is true then we also
182:31 - fill with blue and
182:33 - stuff so that's going to be our footer I
182:36 - think we need to just go back now and
182:38 - fix this uh this components gig list so
182:41 - let's copy
182:42 - this go to components make a new file
182:46 - gig list. DSX
182:49 - so in Gig list let's say use client some
182:53 - imports uh gig list props
182:57 - query it's going to be search favorit
183:00 - filter so this query I think we we will
183:03 - get this from URL I'm not sure I will
183:05 - see okay so gig
183:09 - list uh export this sare or extract
183:12 - query from this type and arrow function
183:16 - const gigs
183:18 - full gig type we will Define this we
183:20 - don't have this yet or
183:23 - undefined use
183:25 - Query API gigs get we don't have this
183:28 - file at all and then pass in some
183:31 - arguments search query search favorites
183:34 - query favorites and filter query filter
183:37 - so we will get gigs depending on these
183:39 - parameters from our URL so if we are
183:41 - searching for something then we will
183:43 - have this or if we are filtering for
183:46 - favorites or we are filtering for the uh
183:49 - what is it
183:51 - subcategories gigs with favorite gigs
183:54 - with set gigs with favorite use State
183:56 - full gig type array or undefined and set
184:01 - to
184:02 - undefined okay so uh filter for
184:06 - favorites if query favorites is true
184:08 - okay so use effect if query favorites is
184:11 - true so if we have if we are toggling
184:13 - favorites we have that in
184:15 - url const favorite gigs
184:18 - is gigs question mark
184:20 - filter okay so just for each gig get
184:23 - only gigs that are favorit because we
184:26 - are trying to show only only favorite
184:29 - gigs set gigs with favorite gigs with
184:33 - favorite
184:34 - gigs so we're just going to set the gigs
184:36 - so this is just I think this is just
184:38 - like whatever we need to set this based
184:41 - on filters and stuff so this is what we
184:42 - will
184:44 - display uh this is not just for favorite
184:47 - gigs but for like all gigs so I think I
184:49 - should have just say like gigs or
184:51 - something like
184:52 - that uh set gigs with favorite gigs yeah
184:56 - so if query favorite is true you only
185:00 - show favorite gigs but if it's not true
185:03 - then you show all gigs and so this
185:05 - should be like called U gigs to display
185:09 - or
185:10 - something okay so use effect we need we
185:12 - need to execute this every time query
185:15 - favorites changes or gigs changes
185:19 - if gigs is undefined is being loaded so
185:22 - return loading
185:25 - gigs okay so not gigs.
185:30 - length so if end query search this is a
185:35 - bit confusing so gigs. length so if gigs
185:39 - is not an empty
185:41 - array so if geks is oh wait wait wait
185:44 - wait wait so if gigs is empty this will
185:46 - be false but then this will be true
185:49 - because you
185:50 - invert so if geks is empty and qu query
185:53 - search return empty
185:56 - search so if there is nothing to
185:59 - show gigs is empty and favorites return
186:02 - empty favorites we will make
186:04 - these and here
186:07 - return at the by default you're going to
186:09 - return all of this and we have small
186:11 - screen medium screen large screen So
186:14 - based so on small screen we want to show
186:17 - just two columns of gigs on large screen
186:21 - four columns
186:22 - Etc gigs with favorit so this is this is
186:25 - display gigs not gigs with favorite so
186:26 - this is like whatever gigs we are
186:28 - displaying like whatever
186:30 - filter uh map we want to go gig card and
186:34 - then pass in all of everything we need
186:36 - in gig card so key ID seller ID title
186:40 - description all of this
186:41 - stuff and that's it this is it I
186:46 - think um let's just Define full gig type
186:50 - so we want to go to add
186:54 - types
186:57 - index okay so here we want to say export
187:00 - type full gig type that's going to be
187:02 - Doc gigs and so we want to
187:05 - extend with storage ID it's going to be
187:09 - optional ID storage or
187:12 - undefined favorited Boolean offer doc
187:15 - offers reviews
187:18 - review array and seller ID let me import
187:23 - this as well so it's like this now we
187:27 - can go back to the gig list so we need
187:29 - to make empty favorite okay so let's for
187:33 - now comment this out I want to show you
187:37 - what this looks like so let's instead of
187:41 - this let's return now whatever it's okay
187:45 - oh sorry no no no no no no I think like
187:48 - this and comment this and just return
187:51 - null and one last quick thing we need to
187:55 - do is this gigs gets so let's create in
187:59 - the convex folder let's go and find it
188:01 - real quick and make gigs.
188:05 - TS first we're going to do some imports
188:08 - then Con G query so here we need to get
188:11 - this G gig but also all of other like
188:14 - offer reviews and then attach it to that
188:16 - gig so so to get that full gig type that
188:19 - I described so arguments are going to be
188:21 - search optional so uh if we are
188:25 - searching for a particular gig then
188:27 - we're going to just get gigs that have
188:29 - that en title favorites so only then
188:32 - we're only only going to get gigs that
188:34 - user favorited or filter like
188:36 - subcategory so we're going to get just
188:38 - gigs in that
188:40 - subcategory but all of these are
188:42 - optional let's make a Handler function
188:45 - get identity title is argument search as
188:51 - string okay let gigs be empty
188:54 - array if title uh if there is a title
188:59 - so title is like we are just converting
189:02 - search so title is just search so we if
189:05 - there is a title there is a search then
189:07 - we're going to say gigs await context
189:10 - database query
189:12 - gigs with search index search title
189:17 - where
189:18 - title is equal to this where Field title
189:22 - uh it has this like title but this can
189:24 - this doesn't have to be full title it
189:26 - can be just a few letters and it's going
189:28 - to match all the gigs that have this in
189:31 - their title and then collect all of
189:34 - those gigs so this is searching
189:35 - searching by
189:37 - text okay else if there is no like
189:40 - searching then we want to get all
189:45 - gigs by uh and then with index by
189:48 - published
189:50 - H yeah we want to get all published gigs
189:52 - because we only want to display
189:53 - published gigs uh to the like buyer all
189:57 - of the publish gigs and then order the
189:59 - sending so I think this will put latest
190:03 - first and then collect all of them check
190:06 - if there is a filter so if there is a
190:09 - subcategory so somebody user selected
190:11 - subcategory then if filter is not
190:14 - undefined then filter is just arguments.
190:17 - filter so I'm not sure why I'm what am I
190:19 - even doing here yeah we are checking if
190:21 - it's if it's but we don't need to do
190:24 - this I think we can just use arguments.
190:26 - filter um cons subcategory we need to
190:31 - query
190:33 - subcategories by name so we need to find
190:36 - this
190:36 - subcategory that must be unique because
190:39 - each subcategory has a unique name
190:42 - filter gigs so gigs. filter and for each
190:45 - gig you're going to say gig do
190:47 - subcategory ID is equal to this
190:49 - subcategory ID so this will filter all
190:53 - gigs and only save gigs that have this
190:56 - subcategory ID so that are part of this
190:59 - subcategory and then gigs is equal
191:01 - filter gigs so you set gigs to be equal
191:03 - filter gigs so here we are checking if
191:06 - user used subcategory or user is
191:08 - searching by
191:10 - title and they can be both true at the
191:13 - same
191:13 - time okay gigs with favorite relation
191:17 - is equal to
191:19 - gigs we'll see what this is so if
191:22 - identity is different from null if
191:24 - somebody is logged in geks with favorite
191:26 - relation is equal to await promise all
191:30 - we want to resolve all promises that are
191:32 - going to happen inside of this body and
191:34 - those promises are going to be the
191:36 - following we want to map all
191:39 - gigs and then we want
191:41 - to for each gig we want to do
191:45 - something return something so we want to
191:48 - query user
191:50 - favorites with index so we want to check
191:52 - if there is if there is
191:56 - um entry in this table that has this
192:00 - user ID and this gig so that means that
192:03 - this user favorite this
192:06 - gig and then it must be
192:08 - unique and then we get this favorite so
192:12 - what is this favorite I'm not
192:15 - sure so it looks like you get this
192:18 - object when you call do then on unique
192:22 - or on this database so let's see what
192:25 - this does I'm just going to display
192:29 - favorite ah yeah yeah so when you when
192:31 - you have unique it's going to find this
192:33 - unique entry and then you can call then
192:35 - so this is that unique
192:37 - entry from database that object it has
192:41 - this so if you see the this uh object
192:44 - type gig user ID that's from schema okay
192:49 - and then in the favorite we want to
192:50 - return object so we want to spread
192:53 - gig so this will just spread the fields
192:57 - and then we're going to add some other
192:58 - fields favorit is equal to uh so so
193:02 - basically what this means is if this
193:05 - exists then this will be true because
193:07 - it's going to negate on to false so if
193:11 - this exists then so sorry if this exists
193:15 - then when you say question then you say
193:17 - this it's going to be false turn to
193:19 - false so then this will be false but if
193:21 - you say once more then this will be
193:22 - turned to true so if this exists this
193:25 - will be true if this doesn't exist you
193:27 - turn to true you turn to false so this
193:29 - will be false so if this is n this will
193:32 - be
193:34 - false okay below that uh we don't need
193:37 - this I just forgot to delete it so and
193:40 - all that promis is that we are resolving
193:42 - this I think returns a promise so that's
193:44 - why we are resolving a wait promise Sol
193:48 - I don't know if I should have put here a
193:50 - wait
193:52 - no yeah it's not a sync so we need to
193:54 - okay I think yeah this
193:57 - works uh gigs with images now we need to
194:00 - get images for each gig so a wait
194:02 - resolve all promises again and then gigs
194:04 - with favorites favorite relation
194:06 - although this should be gigs with
194:08 - favorite not gigs with favorite relation
194:10 - because this doesn't uh this returns
194:14 - promises and then promises get result so
194:17 - if promises get resolved then it's not a
194:19 - relation relation is just here where you
194:22 - return a bunch of promises so this
194:25 - should be better named gigs with
194:27 - favorites gigs with favorite okay so we
194:30 - want to map each gig con image we want
194:33 - to query gig media with this gig ID so
194:37 - we want to get all media with this gig
194:40 - ID and then get the first I think we
194:44 - want to only show the first image for
194:47 - Bridge gig when we are displaying it in
194:48 - on the homepage but when we enter the
194:50 - gig page then we want to collect all gig
194:53 - media seller we want to query user so we
194:57 - want to get the seller object as well so
194:59 - filter we want to filter we want to get
195:03 - I think I should have I could have done
195:05 - with index so with index where ID is ID
195:09 - is seller ID or I'm not sure if
195:12 - that's oh wait okay let's do it this way
195:16 - but
195:17 - I will show you a better way so you can
195:19 - just say uh get and then seller ID
195:23 - whatever it was the ID I'm I forgot how
195:26 - to like just gig. seller ID so you can
195:29 - say get gig. seller ID I
195:35 - think but there is an extra Clos bracket
195:37 - so you can do it this way or you can get
195:39 - all and then filter which is a slower
195:41 - way but let's do it I'm going to do it
195:43 - like this for now just to show you but
195:45 - this is a slower way
195:47 - and it must be
195:49 - unique okay there is no seller seller
195:51 - not
195:52 - found now get reviews so query reviews
195:56 - buy gig ID and collect all of them easy
196:00 - then find the offer because we need the
196:03 - price so query offers by gig ID and the
196:08 - first one the first one will be the
196:09 - basic the lowest
196:11 - one I think well you need to test this I
196:15 - I I forgot to test this but I think I
196:16 - think the first one will be the basic
196:18 - one okay now we need to return like all
196:20 - of this we need to put into a into an
196:22 - object so return the following we're
196:25 - going to spread the gig so all of the
196:27 - attributes will be spread then storage
196:29 - ID is image question mark storage ID so
196:31 - if image is exists so it's I think this
196:35 - will be uh storage ID or
196:38 - undefined and then seller reviews
196:41 - offer and return gigs with images so you
196:44 - see this what this object looks like if
196:46 - it has all of this like storage seller
196:49 - but the clicks this is a direct
196:51 - attribute of gig so these are gek
196:53 - attributes spread and then besides those
196:56 - spread gig attributes then you have
196:58 - other things that we added
197:00 - here so let me go ahead to my this link
197:04 - this page and just refresh and let me
197:05 - remove filter as well so now this should
197:09 - uh display the gig that we
197:12 - have so there ain't nothing displayed so
197:16 - I don't know why let's go ahead and
197:19 - check why we have some problem here gig
197:25 - list I think this must remain an error
197:30 - because I think I could I wasn't able to
197:32 - fix this but it
197:36 - worked so let's see this gig is not
197:39 - published that's why so we need to
197:41 - publish this gig so let's go manually to
197:45 - username create or man manage gigs and
197:48 - then we need to go to I think this gig
197:50 - ID so let's copy this gig ID oh no
197:53 - edit and then this gig
197:58 - ID so let me click on this publish
198:01 - button publish fail please make sure
198:03 - there are one image and three offers in
198:05 - the description so I think we have a
198:07 - description we have one two maybe we
198:09 - don't have enough offers so if I go here
198:11 - to offers only one exists so let's just
198:15 - whatever I don't even care right now
198:17 - just description it doesn't matter save
198:19 - so we should have two and then third
198:21 - premium just premium whatever price 25
198:24 - description whatever save and now we
198:27 - have three offers and now if I click
198:30 - publish O Okay so this is offer save
198:33 - successfully yeah so published it's
198:36 - published so I think now if I go back to
198:38 - Local
198:42 - Host and there we go guys this exists
198:45 - the only problem is you don't see the
198:47 - image so we're going to fix that but
198:49 - this gig is
198:51 - listed the reason we don't see the image
198:53 - is we didn't even make it so we we just
198:56 - commented it out we need to make it now
199:00 - so you're going to have this error here
199:02 - in Gig list this is going to be
199:04 - underlined I'm not sure how to fix this
199:06 - but it the thing worked for me so if you
199:10 - know how to fix this tell me below but
199:12 - it's going to work with with this error
199:14 - as well
199:17 - so now let's go to gig card index DSX
199:20 - and let's uh uncomment this convex image
199:25 - and this doesn't exist so let's copy
199:27 - this and create it but first let's
199:29 - uncomment it from here as well so I'm
199:32 - going
199:33 - to just move this down here and let me
199:36 - copy this again so let's go
199:39 - to outside of the app to components and
199:43 - say convex image. TSX
199:46 - so in convex image TSX let's start with
199:49 - some a few Imports then props storage ID
199:53 - question mark so it's optional and title
199:57 - string export const convex image storage
200:01 - ID
200:02 - title convex image
200:04 - props const com image URL is used query
200:09 - API gig media get image get media URL so
200:13 - we're going to make this and we need to
200:16 - pass in storage ID so storage ID is ID
200:19 - storage so this is going to convert
200:22 - storage ID and take storage ID and
200:25 - return URL of the
200:28 - image return div aspect video relative
200:32 - so this is 19 uh 69 and then image
200:38 - source so image URL or this image now
200:42 - you can go to my GitHub and copy this
200:45 - link or you can
200:47 - put whatever link or you don't need this
200:50 - maybe then alt will be title fill so uh
200:55 - this either has to have width or height
200:57 - if you are importing from next SL image
200:59 - or fill so it fills the outer
201:02 - container and object cover that that's
201:05 - important that must if remove this and
201:08 - see what
201:11 - happens now let's go to G media gig
201:14 - media and get media URL so let's go to
201:17 - Gig
201:19 - media export con get media URL that's
201:22 - going to be a query argument storage ID
201:25 - it's going to be V optional V ID
201:29 - storage Handler if there is no storage
201:33 - ID return
201:34 - null return await context storage get
201:38 - URL and then pass in storage ID and
201:40 - that's
201:41 - it so if I go and refresh as you can see
201:45 - we have this working now which showing
201:46 - the image that we have let's go so next
201:51 - in the gig card index Okay g card index
201:55 - DSX we we're going to uncommon this
201:59 - overlay and let me find it down
202:02 - below here I want to move this below
202:07 - overlay and I want to just go here into
202:10 - overlay we already have it and start
202:12 - coding this is the absolute shortest
202:15 - component so export con overlay return
202:20 - div one div itself
202:22 - closing class name opacity group hover
202:25 - opacity so let me save this and see what
202:29 - happens so if we hover group we're going
202:32 - to change some opacities and stuff so if
202:34 - I hover this actually nothing seems to
202:38 - happen so uh here where I have the
202:41 - overlay outside component has this group
202:44 - so when we hover this outside component
202:46 - onent because it has group then this
202:49 - will activate inside of overlay so group
202:52 - hover opacity 30 but that's how it's
202:55 - supposed to but I don't think so I don't
202:56 - I'm not sure why colors are not changing
202:58 - but I want to leave it like this so if
203:00 - you want to uh you know how this works
203:03 - now if you if you want to try test
203:05 - changing something you can try but I
203:08 - like it right as it is right now so
203:10 - let's continue with actions so let me go
203:13 - ahead here and I'm going to uncomment
203:17 - actions actions will let us copy the
203:20 - link rename or delete the gig
203:23 - so let me go ahead and import
203:28 - actions and we already have one actions
203:31 - but we're going to make this is
203:32 - different so this one goes to components
203:34 - actions so uh outside of app components
203:38 - actions.
203:40 - TSX in actions we're going to say use
203:43 - client a bunch of imports that you can
203:45 - import later dat res you program action
203:48 - props children side so let's me go back
203:53 - uh when we where we have this actions
203:54 - you see that we are passing in some
203:56 - children these are children because they
203:58 - are wrapped then we have ID title side
204:01 - whatever so side is going to be drop
204:03 - down menu content props
204:06 - side uh side
204:08 - offset ID
204:10 - title this is optional and this is
204:14 - optional so here we don't have side
204:16 - offset I think we just have side okay
204:20 - export const actions children side side
204:24 - offsite ID title give it the type and
204:27 - then narrow
204:28 - function okay const on open use rename
204:31 - model we don't have this yet we will
204:33 - name it but it will export this on open
204:36 - so this is the model for renaming it's
204:38 - like a dialogue that asks you are you
204:40 - sure you want to rename and
204:42 - stuff so we're going to use our API
204:44 - mutation and pass in a API gig remove
204:47 - I'm pretty sure we already have this if
204:50 - we if I didn't show this in video just
204:52 - go to my GitHub page and copy it but we
204:55 - I'm sure we did this already and then
204:58 - export mutate and pending and then use
205:01 - API mutation so this is for
205:04 - removing on copy link so we we will have
205:07 - an option to copy the link of the gig so
205:09 - Navigator clipboard
205:12 - clipboard I think this is the global
205:14 - object so you just have it
205:17 - or did I import it from somewhere I'm
205:18 - not sure I think not clipboard write
205:22 - text so we want to write the following
205:24 - text do so btics dollar sign window
205:27 - location
205:30 - origin SL gig SL ID so that's going to
205:33 - be the link to this
205:35 - gig oh sorry so I think this will be
205:38 - like Local Host like the full
205:41 - link we'll test it okay and then just to
205:44 - success link copy is a notification or
205:48 - if there is an error fail to copy link
205:51 - on delete mutate ID so mutate is our as
205:54 - you remember remove uh mutation ID is ID
205:59 - gig of the ID gig gig ID and then toast
206:03 - gig deleted this is from uh mirror clone
206:05 - from callit Antonio I saw this this file
206:10 - I learned this from him so fail to
206:12 - delete
206:13 - gig return drop down menu so we're going
206:16 - to Now display all of this in the drop
206:19 - down menu uh drop down menu trigger as
206:21 - child we're going to pass in children so
206:25 - here actions we have this button passing
206:27 - as children so more horizontal is
206:31 - um this is um icon from Lucid react so
206:36 - we pass in this
206:38 - children so when we click those children
206:40 - that button then we're going to open the
206:42 - drop down menu drop down menu content on
206:46 - click
206:47 - event any this should be like HTML
206:50 - button event something like that but I I
206:52 - didn't make I didn't figure it out for
206:54 - some reason but you should figure it out
206:56 - what was the event copy to CH GPT maybe
206:59 - okay so we want to stop propagation
207:01 - because we're going to have I think
207:04 - multiple like buttons inside of buttons
207:06 - so with when we click
207:09 - this content we don't want to like this
207:11 - to also activate the outer wrapping
207:14 - buttons side side side offset class
207:20 - name uh drop down menu item on click on
207:24 - copy link and then class name link icon
207:28 - from Lucid react copy board link or this
207:30 - should be copy copy copy
207:34 - giglink drop down menu item onclick onop
207:39 - and then class name pencil rename so
207:42 - this is for renaming so this onopen is
207:44 - to open rename model that we will
207:48 - create confirm
207:50 - model uh what is this delete ah okay
207:52 - yeah so this is for deleting so I think
207:55 - we don't have this okay so are you sure
207:58 - you want to delete disabled pending so
208:00 - while while deleting this will be disabl
208:02 - on confirm on delete and pass in the
208:05 - button the button will have variant
208:07 - ghost some class names and trash to icon
208:11 - from Lucid react and delete so this is
208:13 - for deleting now I think this is it
208:16 - let's see we don't have this store
208:18 - username model so let's copy both of
208:21 - this and do we have confirm model we do
208:24 - have it so I'm pretty sure we already
208:27 - made this but if we didn't just go to my
208:29 - GitHub but we did make it so now let's
208:32 - go uh outside of app like let's click
208:35 - somewhere on the outside and make a new
208:37 - file use uh rename model. PSX so it's
208:41 - going to be in store username
208:43 - model here we will see say import create
208:47 - from zo stand but we need to install
208:49 - this so npm install zo this is a like a
208:54 - memory internal memory management Global
208:56 - State
208:57 - Management okay con default values ID is
209:01 - empty title is
209:04 - empty interface I rename model so it
209:07 - just can be rename model
209:09 - props is open buan initial values type
209:15 - of default values so this is the type
209:19 - default values it's ID and ID string
209:22 - title strings so initial values will
209:23 - have the same type on open it's going to
209:27 - be a function ID string title string
209:30 - it's what it what it gets and returns
209:33 - void on close returns
209:38 - void we'll check this once
209:42 - more so in app let's go to dashboard
209:46 - components gig
209:50 - list no sorry to components and actions
209:53 - TSX so here uh username model we are
209:57 - using it here so on open we are
210:00 - extracting on open and then we are
210:03 - passing in ID and
210:05 - title
210:07 - so here we have on open and pass in ID
210:11 - and title so let's define this export
210:14 - const username model
210:17 - create so this is create from zand and
210:20 - we need to give it this interface and
210:23 - then we want to
210:24 - set and pass in this and then
210:28 - object is open false on open ID title
210:34 - set so when we call this we're going to
210:38 - pass in ID and title as I showed you
210:39 - what that we are passing this and then
210:41 - we want to set is open to True initial
210:44 - values ID en title on
210:48 - close we don't pass anything we set is
210:52 - open to false initial values default
210:55 - values so default values are empty
210:57 - strings and then we want to set initial
211:00 - values to default values
211:04 - so uh not not then there is no then so
211:07 - just set initial values to default
211:09 - values but on open uh we want to set
211:12 - initial values to ID and title that we
211:14 - pass in so this is a classic Zoo stand
211:18 - uh create object this is how you define
211:20 - like Global state that you can access
211:22 - from anywhere so if I now go
211:27 - back so if I hover and I don't I there
211:31 - should be an icon on the uh top right
211:33 - but if I click on the top right it's
211:34 - going to open this so copy board link if
211:37 - I copy it copied link I can paste it
211:40 - here it's the whole link okay and then I
211:43 - can go ahead and rename
211:47 - so nothing happens when I click rename
211:49 - it seems so we'll fix this and I don't
211:51 - want to delete this one but it's going
211:53 - to we're going to check it
211:55 - later but also favoriting works so if I
211:58 - click
212:00 - favorite it's favorite that I can click
212:02 - un favorite and if I toggle favorites
212:04 - nothing is shown but if I click favorite
212:07 - and toggle favorites this is shown and
212:10 - if I unfavorite it it won't be
212:13 - shown let me see if my search works so
212:17 - haircut but if I start searching for
212:19 - something else search nothing but
212:24 - haircut
212:25 - search it
212:27 - works so the problem here is there is
212:31 - this button but we don't see this icon
212:33 - more horizontal and that's because text
212:34 - we have text white if I say text black
212:37 - we have white on white background it's
212:39 - going to be black but also I think I
212:42 - want to make this not opacity zero but
212:45 - opacity 25 so I can see a little bit of
212:48 - this when it's not hovered maybe do as
212:51 - you please now let's make empty filters
212:54 - and the empty search so for example if I
212:56 - search something and there is nothing I
212:58 - want to display like some better UI here
213:02 - so go to Gig list inside of uh
213:06 - components
213:07 - dashboard and down below let's remove
213:10 - this null and say empty search and let's
213:14 - uncommon this and remove remove this
213:16 - null empty favorites save that and
213:19 - uncomment empty search and empty
213:23 - favorites so uh this is going to
213:26 - be so inside of components folder make
213:30 - empty favorites. TSX and empty search.
213:34 - TSX and then let's start with empty
213:36 - favorites so import image from next
213:39 - image and then empty favorites export
213:42 - con empty favorites and
213:44 - return uh make a
213:46 - leave image source slmt favorites SVG
213:51 - this is image that we will create so
213:54 - let's copy
213:56 - this and let's go to
214:01 - public now God knows where public is and
214:03 - then create empty image empty favorites
214:06 - SVG so that's it we can close this for
214:09 - now let's continue with height 340
214:13 - 340 and then title below low H2 no
214:17 - favorite favorite gigs and then uh
214:20 - paragraph try favoriting a
214:24 - gig so import image from next image
214:27 - export con empty
214:29 - search and this is a just a div and then
214:33 - image it's going to be the same we need
214:35 - empty search SVG let's copy that alt
214:37 - empty with height title no results found
214:43 - paragraph try searching for something
214:45 - else
214:46 - so that's it now let's just create these
214:48 - two files so in public folder let's
214:51 - create empty search SG and now let's go
214:54 - to my
214:55 - GitHub in the description below you're
214:58 - going to say you're going to click here
215:01 - public and you're going to click to
215:03 - empty empty favorites and you can
215:06 - just I think go somewhere
215:10 - here how do I copy SVG I think we need
215:13 - to show like edit this
215:19 - file okay let's just click download this
215:23 - and then empty
215:26 - inbox and then I'm going to download
215:28 - empty
215:29 - inbox and I'm going to also download
215:31 - empty
215:33 - search download all of them and just put
215:35 - them into favorites so I will go here
215:39 - I'm going to drag this into
215:42 - favorites
215:44 - replace then I'm going to go to the next
215:46 - one into into public and the next one
215:51 - I'm going to also
215:53 - replace so that should be
215:57 - it so if I refresh this we need to
216:00 - refresh the image is shown let's go so
216:04 - now I'm going to go here and delete this
216:07 - search from the
216:09 - URL and I'm going to go ahead and enable
216:12 - favorites and there is no favorites
216:16 - and one little mistake we made so if I
216:18 - turn on uh favorites and there is
216:19 - nothing favorite nothing is shown not
216:21 - our our empty stream screen is not shown
216:25 - that's because we are not checking for
216:27 - gigs. length because gigs do exist uh
216:31 - it's it's going to be like that one gig
216:33 - it's going to remain there but we are
216:34 - going to check for gigs with favorite so
216:37 - here we are checking if query favorite
216:39 - is true then we update like uh gigs with
216:43 - favorite so we need to check if gigs
216:45 - with favorite uh length exists so if
216:49 - this length exists and then or if it
216:52 - doesn't exist and then favorites is true
216:54 - then we want to display empty
216:58 - State now if you want you can also make
217:01 - an empty state for uh these like
217:04 - subcategories I didn't have time to do
217:06 - it but if you want you can do it
217:08 - yourself now when I click this gig I
217:11 - want to make it uh I want to make this
217:13 - page gig page so this page is username
217:17 - gig ID so let's go to our
217:20 - code and in the app I'm going to say
217:23 - username in square
217:25 - brackets slash gig ID but it also must
217:30 - be in square brackets gig ID like that
217:32 - and/ page.
217:37 - DSX let's start with use
217:40 - client a bunch of imports that you can
217:42 - import later uh page props
217:46 - parameters username string KY ID so
217:49 - these are URL parameters so if you go to
217:52 - the page this is going to be the first
217:53 - parameter this is the second and you
217:56 - will just get this you don't need to
217:57 - pass this anywhere you can you can just
218:00 - extract it here and you will get this
218:03 - from because it's in the
218:06 - URL okay so let's make uh export default
218:10 - gig
218:12 - page const gig use query API gig get and
218:18 - pass in the gig ID so this is going to
218:21 - be string I think we could have
218:24 - just done this but I think okay let's do
218:27 - it this way so we need to cast it so
218:30 - this one I forgot to delete so you don't
218:32 - need
218:32 - this uh category and subcategory okay
218:36 - let's get that API G get category and
218:41 - subcategory did we make ah we didn't
218:43 - make this okay and then passing gig ID
218:46 - just cast it as this
218:49 - type offers so API offers get gig ID
218:54 - reviews get reviews get by gig and gig
218:59 - ID and then reviews full I think this is
219:02 - full reviews type let's see what this is
219:05 - get full by gig so and passing gig ID so
219:09 - I think we will we'll see what this is
219:12 - when we make it okay so if gig is
219:14 - undefined or reviews is undefined or any
219:18 - of these reviews full category anything
219:20 - is undefined that means it's still being
219:22 - loaded so you're going to return loading
219:25 - you can maybe return even prettier
219:27 - screen but for now let's just type
219:29 - loading if any of this is now so gig
219:32 - doesn't exist categories doesn't exist
219:34 - offers don't exist not
219:37 - found if gig published is false this gig
219:41 - is not
219:42 - published const edit URL so so the owner
219:47 - of the gig uh it will have a button to
219:49 - edit the gig if the owner is viewing
219:52 - their own gig and when they click this
219:54 - button we're going to push them to/
219:56 - seller username manage gigs edit gig
220:01 - ID okay return
220:04 - div just uh some div for displaying the
220:08 - page okay so first thing this is we're
220:11 - going to show something inside of this
220:13 - gig that's going to be headed
220:17 - so we're going to spread category and
220:19 - subcategory in
220:21 - header and edit
220:24 - URL and owner ID gig seller. ID so I
220:29 - forgot oh yeah I think this is just like
220:32 - this is just going to show like category
220:34 - subcategory we'll see what this header
220:36 - shows okay then title of the
220:40 - gig then we want to make a seller box so
220:43 - we want to show like who the seller is
220:44 - so we're going to pass in seller reviews
220:47 - so we want to make a short small box
220:49 - like this guy is from this country
220:51 - speaks these languages about seller box
220:54 - small box then show images of the gig so
220:57 - we want to say images is gig images
221:00 - title and allow delete so allow delete
221:02 - is false in this case because this is
221:04 - not edit page we will only allow delete
221:08 - but I think we made these images I think
221:11 - we made it
221:12 - yeah okay this don't need this if you
221:17 - want about this gig if you want to say
221:19 - this but I decided not to go with it so
221:21 - this is the description we already have
221:23 - it editable initial content and gig ID I
221:26 - think we have description yeah we made
221:30 - it okay so below that we're going to
221:33 - make some divs and that's going to be
221:35 - info so what is info I forgot oh this is
221:38 - uh info is a icon from Lucid react and
221:42 - delivery preferences is the title and
221:44 - then please please communicate any
221:46 - preferences so this is just a box that
221:48 - shows this
221:51 - information then we're going to say
221:53 - seller details so this is similar to
221:55 - seller but this is uh on the top less
221:58 - details this is more details seller gig
222:02 - seller reviews we're going to pass last
222:06 - fulfillment
222:07 - time
222:08 - languages
222:10 - reviews reviews show reviews okay so add
222:13 - review gig ID seller ID
222:16 - then we want to show
222:17 - offers offers seller ID edit URL so this
222:22 - will be on the side so I think this has
222:26 - Flex Flex call so this will be on the
222:28 - side besides all of
222:30 - this now let's go to Gig and get
222:33 - category and subcategory so let's go to
222:36 - Gig
222:38 - TS export con get category and
222:42 - subcategory arguments gig ID
222:46 - uh let's say Handler so we're going to
222:49 - get the gig by gig ID if there is no gig
222:52 - gig not found subcategory will be await
222:57 - context database get gig subcategory
223:01 - ID so get the subcategory there is no
223:04 - subcategory subcategory not found
223:06 - category get the category by this ID
223:09 - from
223:10 - subcategory if category not found say
223:13 - not found return category category name
223:17 - subcategory subcategory
223:20 - name so that should be it just save it
223:24 - and go back
223:27 - to to the page TSX that we were so let's
223:31 - now make this reviews so let's go to
223:35 - convex
223:37 - folder and let's make reviews.
223:42 - TS so in reviews we're going to import
223:47 - these export cons get by
223:50 - gig
223:53 - arguments Handler okay cons reviews
223:56 - we're going to query reviews Within by
223:59 - gig ID and collect all of them return
224:04 - reviews okay so this is getting reviews
224:06 - by gig ID now let's get full by gig so I
224:11 - think those are going to be full reviews
224:13 - type we'll see
224:15 - argument gig ID Handler first get
224:19 - reviews query reviews by gig ID we
224:22 - already did the
224:23 - same reviews full type await promise all
224:28 - so we need to resolve all
224:32 - promises so then we will say reviews map
224:35 - a sync so for each review we're going to
224:37 - do the following let's make some
224:40 - space gig is going to be query gigs by
224:44 - gig ID although I'm not sure why I'm
224:46 - doing it like this I you can delete all
224:48 - of this and just say do get and gigid
224:53 - like this it's going to get the same but
224:55 - I'm filtering for some reason this is
224:57 - slower and
224:58 - worse okay so if there is no G gig not
225:02 - found image so query gig media by gig ID
225:07 - and first
225:09 - image if there is no image image not
225:11 - found so we want to display image of the
225:13 - gig at each review
225:16 - image URL is contact storage get URL and
225:20 - pass in storage
225:21 - ID then image Ur if your image URL not
225:26 - found next let's get offers so query
225:29 - offers by gig ID collect
225:32 - all if offer is not
225:35 - found image with
225:38 - URL so we're going to spread image and
225:41 - URL so this is image with URL let me see
225:44 - the type so you have all of the uh image
225:47 - attributes spread and then
225:50 - URL get author country so query
225:56 - users by ID unique so again just do this
226:03 - get
226:06 - this if author not
226:09 - found country is query countries by user
226:14 - ID
226:17 - unique country note
226:19 - found return review spread review gig
226:24 - image image with URL offers author
226:28 - author spread author country so
226:31 - basically what this does is you have it
226:34 - basically makes it same as author but
226:37 - just with another country
226:40 - field and we need to return uh reviews
226:44 - full time Ty so in the username gig page
226:47 - TSX we don't need these things that we
226:50 - are not using so let me delete this
226:52 - delete portfolio and now I'm going to
226:55 - make U another folder underscore
227:02 - components components like this and so
227:06 - I'm going to have to make header so
227:08 - header.
227:11 - TSX what else are we going to need
227:13 - offers and sellers so let's make seller
227:16 - first next to header seller.
227:19 - TSX but header is going to be a bit
227:22 - offers will be a bit different so we're
227:24 - going to make a folder offers and inside
227:26 - index TSX so let's say offers slash
227:31 - index. DSX so this will have the same
227:34 - import path as if this was just file
227:37 - offers. DSX but we want to be able to
227:40 - add some more files here inside of
227:42 - offers to organize it better so so what
227:45 - we need inside the offers folder is
227:47 - content.
227:49 - TSX and in the components we also need
227:52 - seller D details.
227:56 - DSX now let's start with header for
227:59 - example I'm going to start with a few
228:02 - Imports so interface header props
228:05 - category string subcategory string edit
228:08 - URL string owner ID string and then
228:11 - let's extract all of those give it the
228:13 - type
228:15 - Uh current user is use uh use Query API
228:19 - users get current user so we want to
228:21 - just get the current user currently
228:23 - logged in
228:24 - user uh and then router use router this
228:28 - is from next SL navigation very
228:29 - important not from next router handle
228:33 - subcategory
228:35 - click you so you want to then uh push
228:39 - wait let's see what we want to do so
228:40 - when we click subcategory we want to
228:43 - query string stringify URL to be slash
228:47 - query filter subcategory so we want to
228:50 - add this filter to the URL and we want
228:53 - to skip empty uh string true skip null
228:57 - true and router push URL so when we this
229:01 - is going to be so uh this this is gig
229:04 - page gig page will have category and
229:06 - subcategory of that gig on the top just
229:09 - to show it for information but if the
229:11 - user clicks that subcategory we want to
229:14 - load all G gigs you want to push them to
229:16 - the page that loads all gigs of that
229:19 - subcategory let's see what we return div
229:22 - with a bunch of class names
229:26 - link SL so this is for
229:29 - homepage then we want to put a
229:33 - slash then category name then another
229:36 - slash and then subcategory name but on
229:40 - click we're going to handle subcategory
229:42 - click and then subcategory name so
229:45 - handle subcategory
229:49 - click okay below that I don't know why
229:51 - this is R okay so if current
229:53 - user exists or actually if current user
229:57 - ID is equal to owner ID of this gig then
230:01 - you want to show the button to edit this
230:04 - gig so
230:06 - button link edit URL and just say edit
230:10 - gig so let me save this
230:15 - now let's go back uh I'm going to
230:18 - actually just comment out all of this so
230:22 - we can see what this looks like so we
230:24 - don't need seller we don't need um any
230:28 - of this
230:30 - stuff and we don't need
230:33 - offers so let's see
230:36 - now now this is what our gig page
230:39 - currently looks like it's a complete
230:41 - monstrosity for some reason I think we
230:43 - don't have layout the X so but here we
230:46 - can see that we can click homepage we
230:48 - can click or we if we click like this
230:51 - graphic design is going to load all gigs
230:53 - that have graphic design filter and then
230:56 - edit gig it will push us to and then we
230:59 - have title and everything so this is
231:02 - editing
231:04 - page now let's fix this layout so it not
231:07 - it's not like this so let's go here in
231:10 - username folder let's make uh a new file
231:17 - layout.
231:19 - TSX let me close this and we are going
231:22 - to import navbar from do do dashboard
231:25 - components
231:26 - navbar interface user gig layout
231:31 - props children react node so and then
231:35 - export default dashboard layout oh it
231:38 - should be well you can call it dashboard
231:40 - layout or user gig layout whatever okay
231:43 - so we're going to extract children from
231:45 - this these
231:47 - props return div navbar at the top and
231:52 - then Main and then padding zero small
231:54 - screens padding six medium large screens
231:56 - big padding and then just show children
231:59 - if I save this I go ahead and
232:03 - refresh as you can see the layout is a
232:05 - lot better now this image is ugly as
232:08 - hell but we can fix all of that this is
232:12 - a description that we are showing
232:13 - delivery preference es so it's starting
232:16 - to get shape there is also nav bar at
232:18 - the top now let's go to page TSX of uh
232:22 - gig page gig ID so let's do this seller
232:26 - now so let's uncomment that and let's
232:29 - uncomment
232:30 - seller so let's go here in components
232:34 - seller
232:36 - TSX so let's do some imports interface
232:40 - seller props seller
232:44 - reviews array okay and then export con
232:48 - seller seller reviews seller props const
232:53 - average review reviews reduce so we are
232:56 - calculating the average review the same
232:58 - way let me just uh reveal the full code
233:02 - and then I will explain so we're going
233:05 - to use reduce reduce allows us to go for
233:09 - each review not only do we add
233:13 - communication level score all these
233:16 - three scores but we can also add it to
233:19 - all previous scores so we can calculate
233:22 - like add up every score of every review
233:24 - of everything and then this so it starts
233:27 - from zero and then every time you get so
233:31 - you just add everything up and divide by
233:33 - reviews length now this is a bit
233:36 - suspicious because I think it should be
233:38 - reviews length by three because each
233:41 - review has three so we'll we'll see
233:43 - we'll see if it's get if it gets like a
233:46 - uh weird number then it's it's divide by
233:50 - reviews length times
233:53 - three okay so let's say some div this is
233:57 - link okay
234:00 - so when we click this is going to show
234:03 - user Avatar user profile image when we
234:06 - click it we want to go to seller user
234:10 - username this Avatar is from uh add
234:13 - components UI like UI components not the
234:16 - radx
234:18 - UI uh that's important so avatar from
234:22 - comp you components UI Avatar so I'm
234:24 - going to display profile image URL or
234:27 - this link GitHub
234:30 - com/ Shad CN PNG if this doesn't exist
234:35 - Avatar foldback uh seller username
234:37 - character at zero so the first character
234:39 - of the seller username if this image is
234:42 - not like able to
234:45 - display okay then let's make another div
234:48 - with 300 F
234:50 - pixels and then another div link seller
234:56 - username so we want to link when the
234:58 - user clicks here we want to link the
235:00 - same link seller username and that's
235:03 - going to be seller full name so when we
235:06 - click on full name we also want to link
235:08 - and then seller custom tag now custom
235:11 - tag is like top rated seller for example
235:15 - or new seller or something like that
235:16 - those are going to be custom
235:18 - tags okay below
235:21 - that let's uh
235:26 - do class name so to divs Star uh this is
235:31 - to show reviews so we're going to say
235:33 - reviews length so this is the number of
235:35 - reviews and then average review or zero
235:38 - so we're going to put that in
235:42 - Brackets so that's it it now it should
235:45 - but I think if we get a weird number
235:47 - like this average review should be
235:50 - divided maybe like this times three and
235:52 - then put it in Brackets because each
235:55 - review has three of these but let's
235:57 - let's do it like this for
236:00 - now okay so this is it guys let me close
236:04 - okay so basically if I close this um we
236:07 - see the user image this is the
236:09 - placeholder image because I don't have
236:13 - the profile URL
236:14 - image and then there is zero reviews so
236:18 - this is that
236:19 - part now if we go back and scroll
236:23 - down we
236:24 - will come across seller
236:28 - details so let me just now show seller
236:32 - details and we want to uncomment seller
236:35 - details here so this is going to be more
236:38 - details it's going to be similar but
236:39 - more details so let's go to seller
236:42 - details so let's continue some imports
236:45 - that you can import later so then we are
236:48 - going to const format oh my God why am I
236:50 - doing it like this you should just
236:52 - import format from dat FNS okay but this
236:55 - also works I
236:57 - think uh okay uh interface seller props
237:01 - seller user with count country type I
237:05 - think we're going to make this uh like
237:08 - type reviews docs doc reviews last
237:11 - fulfillment time number or undefined
237:13 - language doc languages this is we Define
237:16 - this in our
237:18 - schema export con seller details export
237:22 - extract all of these give it seller
237:25 - props const router is used router from
237:28 - next SL
237:32 - navigation okay and then average review
237:35 - the same way we calculated every time I
237:38 - so add all of the reviews of each review
237:42 - this is a reducer and the divide I don't
237:45 - want to explain this third time so I
237:47 - don't need to waste your time join date
237:51 - format new date seller creation okay so
237:54 - we need to find the date at which the
237:58 - user joined and we're going to display
238:00 - it as month month month so Feb 23 for
238:05 - example that's how we do it time ago
238:08 - undefined last if last fulfillment time
238:11 - is different from undefined then we will
238:13 - format distance to now and new date last
238:16 - time and so we're just going to this is
238:19 - going to be like 3 days ago two hours
238:23 - ago Okay add suix true I'm not sure what
238:25 - the suix is you can try deleting it uh
238:28 - languages string languages. map
238:31 - languages language.
238:34 - language so this is like language name
238:37 - so language. language name if you want
238:38 - to name this language name but this is
238:41 - correspond this corresponds to this okay
238:44 - join join languages with like comma join
238:48 - the whole
238:49 - array handle contact
238:51 - click uh and then you want to push to
238:54 - inbox and that seller username so you
238:57 - want to start a conversation with this
239:01 - seller okay and then uh we want
239:06 - to make a div div link seller username
239:11 - show Avatar so image of the user this is
239:14 - the same thing we just uh send to seller
239:19 - username okay below that link to seller
239:23 - full name it also links to the user
239:26 - profile then we want to say seller title
239:29 - okay it's like
239:32 - a PHP developer or something like that
239:36 - and then let's make some gigs star icon
239:39 - from Lucid
239:40 - react font semi bold
239:44 - uh reviews so length of reviews so for
239:47 - example three reviews and then we want
239:49 - to open brackets underline and you want
239:54 - to show average reviews or
239:57 - zero if this number is weird as it might
240:01 - be then you want to if it's incorrectly
240:05 - uh calculated I think you need to do
240:08 - this so divise divide all of this with
240:12 - three but let me remove this because we
240:16 - don't need
240:17 - it let's add this
240:19 - div and then below that let's say seller
240:23 - custom tag so for example this can be
240:25 - like new
240:27 - seller and then we want to add a
240:32 - button uh the
240:34 - variant
240:37 - outline on click handle contact click
240:40 - and contact me so this will push to uh
240:43 - inbox
240:44 - below that add a few divs so three divs
240:48 - one in each
240:49 - other
240:52 - form seller country oh from from the
240:57 - country okay another div below joined
241:01 - join date time ago if is different from
241:05 - undefined and then display display
241:07 - whatever we have here so we're going to
241:09 - have last delivery time ago
241:14 - and then languages length is if it's
241:15 - more than zero then display
241:18 - div languages languages
241:22 - string and then
241:26 - separator and then we want to display
241:28 - seller
241:30 - doab so that's going to be our seller
241:33 - page we are only missing this type so
241:36 - let's quickly go to
241:40 - types now let's finish this file because
241:42 - we don't want to return here every so
241:44 - often
241:45 - so messages message with user type this
241:48 - is the first type we will Define it's
241:51 - doc messages and user doc users then gig
241:57 - with image
241:58 - type doc gigs and image doc gig media
242:04 - array then user with country type doc
242:08 - users and Country doc
242:12 - countries and then review full type so
242:15 - Doc review reviews and author user with
242:20 - country Type image image with URL type
242:23 - so we are using these types and then
242:26 - offers doc offers array and then gig and
242:30 - that's it and then export categories
242:32 - full type so doc type got doc categories
242:37 - and then
242:39 - end
242:41 - subcategories so that's it those are all
242:43 - the types
242:44 - and now that we defined all of that we
242:47 - are able to see this from Hungary join
242:49 - 20 March uh
242:52 - 24th if I go ahead and say contact me
242:55 - it's going to push me to inbox but I
242:57 - don't have this I don't have this yet so
243:01 - let's now continue with this gig
243:04 - page let's do offers so go to username
243:07 - gig page TSX and uncomment this offers
243:12 - so let's go down down and do
243:16 - this and now we are going to go here uh
243:20 - offers index TSX that's the next
243:24 - one so we want to do some imports
243:27 - interface offers props
243:31 - offers uh seller ID edit
243:34 - URL and then off extract all of
243:38 - those
243:40 - return whatever this is some div offer
243:43 - if offers if offers exist then we want
243:46 - to show
243:47 - tabs default value is first offers so we
243:50 - want to just select the first like basic
243:52 - offer and show it as
243:54 - default class name with 400 on small
243:58 - devices uh sticky means as we scroll
244:02 - down this will stay on this position on
244:04 - the of the screen it won't be like
244:06 - scrolled
244:07 - over so it will stay on the top
244:11 - four you will see T
244:15 - list offers map so for each offer we're
244:18 - going to return tab tabs trigger so tab
244:22 - trigger will be the button for the offer
244:25 - so we need to pass in key because we are
244:27 - mapping value will be offer
244:31 - ID offer tier so basic standard premium
244:35 - and tabs trigger so what we have three
244:37 - buttons basic standard premium and when
244:39 - we click one of them it's going to show
244:41 - the content for that offer so below that
244:43 - let's map offers
244:45 - again and return tabs content passing
244:50 - key value offer ID so for each offer we
244:54 - are making tabs content close tabs
244:57 - content okay and then content this we
244:59 - need to make this we didn't make this
245:02 - yet we will just pass in offer seller ID
245:05 - edit URL and that's it now before we can
245:09 - show these offers we need to go ahead
245:11 - and edit this content file
245:14 - let's start with
245:16 - import offer props seller and edit
245:21 - URL extract all of those
245:24 - props okay so we have order now this is
245:28 - a button so we're going to say API
245:31 - stripe
245:32 - pay router from a use router from next /
245:36 - navigation current user is going to
245:40 - be um get current user
245:44 - seller will be API users get by ID so
245:49 - seller
245:51 - ID if any of these is undefined it means
245:53 - it's still
245:55 - loading then seller if a seller is null
245:58 - return not
246:01 - found um a handle order now so you're
246:05 - going to try const URL is await order
246:08 - now so this is a mutation that's going
246:10 - to take price side D offer strip price
246:16 - ID and title of the offer and seller ID
246:19 - and it's going to return URL so we're
246:22 - going to make
246:23 - this if there is no URL stripe session
246:27 - error and then router push
246:30 - URL catch error any I don't think we
246:35 - should put any but I I don't know how to
246:37 - do it without I haven't spent too much
246:40 - time so tell me in the comments if you
246:42 - know uh toast error error
246:46 - message handle send message router push
246:49 - inbox okay so this is just like a
246:52 - contact user send message whatever the
246:54 - button just push to inbox
246:57 - chat revision text offer revisions is
247:01 - equal to one so one revision or 0 to
247:04 - three uh
247:06 - revisions return div uh offer
247:10 - description and then below that offer
247:13 - title
247:14 - and offer price and dollar
247:17 - sign below description we're going to
247:20 - make clock icon from Lucid react and
247:23 - then days delivery so offer. days
247:26 - delivery days delivery three days
247:29 - delivary okay then div uh refresh CCV I
247:33 - think this is icon as well and then um
247:36 - offer revisions revision
247:39 - text so three
247:41 - revisions for example okay if current
247:45 - user ID is equal to seller ID then you
247:48 - want to have a
247:49 - button on click handle order now okay so
247:53 - ahuh so if the current user ID is
247:55 - different from seller ID then you want
247:58 - to be able to
248:00 - order order
248:02 - now and button send
248:05 - message so if it's not the seller
248:08 - reviewing their own
248:11 - gig so if it is seller reviewing their
248:14 - own gig then you want to show a button
248:17 - that says edit and points to this link
248:21 - edit URL and let's save this now because
248:26 - I want to show you what is look what
248:28 - this looks like let me comment this let
248:30 - me comment
248:32 - this now let's see what else we need to
248:36 - comment actually no I think it will be
248:38 - too much struggle so let's just create
248:40 - this so users get so let me go to
248:47 - users so here export con get
248:50 - query arguments ID VI ID
248:54 - users
248:56 - Handler uh user is going to be await
248:58 - context database get ARX ID and then
249:02 - user so just get the user by ID and
249:06 - let's just uh create this stripe pay so
249:10 - let's go ahead in the convex folder
249:13 - create create stripe.
249:16 - TS I think it already
249:19 - exists yeah so go here and we're going
249:22 - to make pay so here we're going to say
249:27 - pay action import this action from
249:31 - generated
249:32 - server args price ID title seller
249:37 - ID
249:39 - Handler const stripe is new stripe
249:43 - process and uh next stripe secret key we
249:46 - already have this so we're going to pass
249:49 - in API version so just to create this
249:52 - stripe client domain it's going to be
249:56 - process and uh next public hosting URL
249:59 - I'm not sure if we have this so let's go
250:01 - here next public hosting we don't have
250:04 - it so we're going to save this and
250:06 - that's going to be like that and let me
250:09 - copy my domain but it's just going to be
250:12 - here and we're also going to have to
250:15 - copy this into
250:18 - convex um
250:20 - variables in convex we will go to
250:25 - settings and envir environment variables
250:28 - are the new one like that
250:32 - save so we're going to change this
250:34 - you're going to change this when you
250:35 - deploy
250:38 - it then we're going to say price is a
250:41 - weit strip price PR is retrieve
250:44 - arguments price ID so we're going to
250:46 - retrieve this price price do unit amount
250:50 - is now if it's now ret stripe price
250:54 - doesn't have unit
250:56 - amount okay uh
250:58 - stripe account ID so this price is we
251:03 - def we when we create an offer we create
251:05 - this price if you remember in our stripe
251:07 - so we need to uh retrieve it okay so
251:11 - stripe account ID will be string or now
251:14 - await context run query internal users C
251:19 - stripe account ID from that
251:21 - user so we're going to use this uh using
251:26 - connected
251:27 - accounts so please go ahead and uh just
251:30 - look for stripe connect or stripe
251:32 - connected accounts and read this
251:34 - documentation because and read this
251:36 - because if you this will allow you to
251:38 - have your stripe account and then to
251:40 - create a Sub sub account for each of
251:42 - your sellers in on your platform but you
251:46 - should read this and know understand how
251:48 - it
251:49 - works especially if you want to change
251:51 - something maybe you going to have some
251:52 - other idea so please read
251:55 - this but looks like our stuff already
251:57 - works here so we have standard premium
252:00 - you see what it means for this to be
252:02 - sticky so as I scroll it's going to
252:04 - stick on top and this
252:08 - works so let's continue stripe account
252:11 - ID of that there is sub account ID of
252:13 - the connected
252:15 - account you're going to run this query
252:19 - to get account and pass in this these
252:22 - attributes props and then stripe account
252:26 - ID if it's null throw
252:30 - error con session stripe. response and
252:34 - then stripe checkout session that's the
252:37 - type await stripe check out session
252:41 - create okay and
252:43 - then say mode payment line items it's
252:49 - going to be
252:50 - this price
252:54 - data currency
252:57 - USD uh product data name arguments.
253:01 - title unit amount price. unit amount
253:05 - quantity one so I think we are creating
253:08 - like this this is how you create stripe
253:10 - like order
253:14 - payment in 10 data application fee
253:17 - amount price unit amount times 0.10 so
253:21 - if you want to take 10% which is
253:24 - actually maybe even too high if you want
253:26 - to take 10 or 5% of each purchase of gig
253:30 - in your uh on your page platform then
253:33 - you say it here so if you want to take
253:35 - 5% then it's time
253:38 - 0.05 okay so but for this you need to
253:41 - have like connected accounts working
253:43 - which I will show you how to set up but
253:46 - also like it's you need to understand
253:47 - how it works from documentation success
253:50 - URL after the order is successful you
253:53 - return to the domain for example and
253:56 - cancel URL also return to domain but you
253:58 - can say domain slash cancel and then
254:00 - show some message I don't know okay so
254:04 - after this in the creating we need to
254:07 - also say stripe account stripe account
254:11 - ID so this is is the ID of this
254:14 - connected stripe account and then return
254:17 - session URL so this session URL will be
254:20 - like a URL that we will push User it's
254:22 - going to be like that stripe checkout
254:25 - session like a stripe checkout page so
254:28 - let's go ahead and into
254:30 - users let's first import this internal
254:33 - it's from generated server API so users
254:37 - get stripe account ID so let's go to
254:39 - users users.
254:42 - TS so here we want to
254:45 - um say export con get stripe account
254:49 - internal query because we don't want
254:51 - this to be exposed to our client just
254:54 - inside of this convex folder with other
254:56 - like convex functions arguments is user
255:00 - ID
255:02 - Handler uh we want to say just get user
255:05 - by user ID if user is null user not
255:09 - found return user. stripe account ID so
255:14 - let's import this like that and that's
255:17 - it let's go back and save this as
255:20 - well so right now if I go ahead and Save
255:23 - St say standard but I'm editing so let's
255:27 - go to a different account where I can
255:30 - purchase so let me sign out so now I
255:33 - logged in register with a different
255:35 - account and I'm going to say order
255:38 - now okay I that's an error I think if I
255:43 - try changing this yeah we have some
255:46 - error stripe account not
255:50 - found yeah so in the convex database we
255:54 - don't have stripe account ID
255:58 - here so I logged back again into this
256:01 - account that's owner of this gig and
256:03 - what I have to do is uh I this account
256:07 - should have connected stripe account so
256:09 - we can do payments so I think we should
256:12 - make make it so that even like if this
256:14 - user doesn't have a connected stripe
256:16 - account he cannot publish gigs but let's
256:19 - first make connecting
256:21 - functionality let's go to nav
256:24 - navbar in dashboard underscore
256:26 - components and just add this after
256:29 - switch to selling add this uh connect
256:32 - stripe so then create connect D stripe
256:36 - TSX in the same components
256:39 - folder so we're going to start with use
256:42 - client
256:43 - and some imports in Connect stripe TSX
256:47 - and then connect stripe export default
256:49 - connect stripe router use router from
256:51 - next /
256:52 - navigation user ID set user ID to use
256:56 - state ID
256:58 - users create stripe that's going to be
257:01 - action use action so you want to use
257:03 - action instead of mutations or queries
257:05 - when you need to call it external apis
257:08 - but if you don't need to then don't use
257:09 - actions it's better to use queries and
257:11 - mutations
257:13 - API users create stripe we're going to
257:15 - make
257:16 - this user ID is undefined return null
257:21 - return div in the same row and then
257:26 - button on click it's going to be a syn
257:29 - synchronous const URL is await create
257:34 - stripe so we will call the backend API
257:37 - to create stripe this will return URL
257:40 - for us to register to stripe to connect
257:42 - our account to
257:43 - stripe and then router push URL so this
257:46 - will go to stripe.com SLC create account
257:50 - whatever and then close this button and
257:52 - say connect to connect stripe so let me
257:56 - save this and I'm going to go here and
257:58 - import
258:00 - this and now we need to go ahead and say
258:03 - users create stripe so let's go to users
258:07 - TS so here we're going to say create
258:10 - stripe it's going to be action
258:13 - arguments user ID Handler check
258:18 - identity if there is no identity called
258:21 - create stripe not store
258:23 - user and then con stripe is new stripe
258:26 - process and the next stripe key and
258:31 - API okay account ID is stripe or
258:36 - now so it's going to be string or null
258:39 - and await context run query internal
258:42 - users get stripe account
258:45 - ID we already have it here so we just
258:48 - need to import this at the
258:51 - end passing user
258:53 - ID okay if account ID doesn't exist
258:56 - const account stripe accounts create
259:00 - type
259:01 - standard read about this in the docu
259:03 - connect stripe connect
259:05 - documentation account ID account. ID and
259:09 - then context run mutation internal user
259:13 - set stripe account ID and pass in user
259:17 - ID stripe account ID is account
259:21 - ID account link await stripe account
259:25 - links
259:28 - create account ID refresh URL process
259:32 - and next public hosting URL return URL
259:36 - next public hosting URL SL stripe
259:39 - account setup complete
259:42 - we need to
259:44 - save the stripe account ID of this user
259:48 - that successfully created stripe
259:52 - account and then arguments user ID
259:56 - here type so we need to save this ID in
259:59 - the
260:00 - database okay account on onboarding and
260:03 - return account link URL so we're going
260:06 - to push the user to this URL let me
260:08 - import action let me import Stripe from
260:12 - stripe
260:13 - and let me import
260:16 - internal
260:19 - and next public hosting okay so this
260:22 - must be process and next public hosting
260:26 - URL and we need to create this
260:31 - one okay so below this in the user just
260:35 - say internal mutation set stripe account
260:39 - ID um that's going to be user ID stripe
260:43 - account ID
260:46 - Handler user is await database get so
260:50 - just get the user by user ID and then
260:53 - user not found context database patch
260:57 - arcs user ID stripe account ID is going
261:01 - to be ARS stripe account ID and that's
261:05 - it so let me import
261:08 - this and that should be it everything
261:11 - should work
261:14 - we need to make a few changes in Connect
261:16 - stripe so let's delete this we don't
261:19 - need user ID at
261:21 - all uh API create stripe and then here
261:26 - we will not pass anything as
261:29 - arguments now in users TS uh we need to
261:34 - make arguments empty object so create
261:36 - stripe make arguments empty object and
261:39 - what else I changed is we need to um
261:43 - here get user so run query API users get
261:49 - current user that's how and then copy
261:52 - this user and user ID will be
261:56 - user.
261:58 - ID and so also we want to say if uh not
262:02 - user if user is
262:06 - null just return for now so we don't
262:11 - need this now and and then copy this
262:13 - instead of arguments user ID we say this
262:17 - so that should be it let's say actually
262:19 - here as
262:21 - well okay that should be
262:25 - it and now it's telling me that this URL
262:28 - can be null so I'm going to say if a URL
262:34 - is null we just want to
262:39 - return so make sure in nav bar you have
262:43 - this connect stripe imported and if I go
262:46 - ahead and click connect stripe it's
262:48 - messed up we will fix styling let me see
262:50 - just if it
262:52 - works and I am successfully getting
262:56 - redirected and now you need to like
262:59 - create your account
263:01 - everything so you can log in with your
263:04 - existing stripe account but let me
263:07 - return back so now we need to create
263:10 - this URL stripe account setup complete
263:13 - and then uh ID of
263:16 - something let's copy this stripe account
263:19 - setup
263:20 - complete so inside of app let's make a
263:23 - new file stripe account setup complete
263:25 - slash in square brackets user
263:28 - id/ page.
263:31 - TSX here we are going to say use client
263:34 - and import and then we're going to say
263:37 - props params user ID that's from URL and
263:42 - then then stripe account set up complete
263:44 - extract params give it
263:46 - type uh and then start with update is
263:50 - use action API stripe set stripe account
263:54 - setup
263:55 - complete we're going to make this router
263:58 - use router from next SL
264:01 - navigation use
264:03 - effect uh set stripe I my God so that's
264:07 - going to be async and then Arrow
264:10 - function try a wait update and pass in
264:14 - user
264:16 - ID and then push back to after this is
264:20 - finished push back to homepage catch
264:23 - error and then toast
264:26 - error error saving your stripe payment
264:29 - processing and push
264:32 - back and then call this set stripe
264:35 - account setup
264:38 - complete and then this use effect will
264:40 - update when update changes param user ID
264:42 - or
264:43 - router return div stripe account setup
264:47 - complete this page will redirect shortly
264:50 - and
264:51 - loading so that's it we are going to
264:55 - just uh we're going to have to make
265:01 - this I'm just not sure what this even is
265:04 - so let me comment this out I think this
265:06 - is useless so let's go to
265:09 - stripe. DS
265:12 - so set stripe account setup complete
265:15 - it's going to be
265:16 - action arguments user ID
265:20 - Handler const stripe create a new stripe
265:23 - a object client API version const user
265:28 - await context R
265:29 - query API users get and then pass in
265:33 - user ID get the user so if there is no
265:37 - user user not
265:39 - found user stripe account ID so there is
265:42 - doesn't exist stripe account not
265:46 - found uh account is going to be equal to
265:49 - await stripe accounts retrieve user
265:52 - stripe account
265:55 - ID and then account uh charges
265:59 - enabled we're going to run mutation
266:02 - internal users update stripe setup and
266:05 - pass in user ID and stripe account setup
266:09 - complete so update stripe setup I have
266:12 - no no idea if we got this let's see now
266:15 - we don't have okay so we're going to
266:16 - make it and then else throw
266:19 - error so let's go ahead and import this
266:24 - API and then we need to go to users and
266:27 - update stripe
266:29 - setup in users DS we're going to say
266:32 - update stripe setup internal
266:34 - mutation and then stripe account setup
266:37 - complete bullan and ID those are
266:39 - arguments Handler function context
266:42 - database patch arguments ID stripe
266:46 - account setup complete argument stripe
266:48 - account setup
266:50 - complete now let's go here connect
266:57 - stripe let me go ahead and fill all of
266:59 - this
267:00 - information so I went through
267:03 - everything and
267:06 - now well let's see what happens so let
267:09 - me go here
267:12 - and looks like I have stripe account ID
267:15 - right here so that's it stripe account
267:18 - setup true so this should work now if I
267:22 - go and log in into the other account I
267:25 - should be able to
267:27 - purchase I just logged in into the
267:29 - different account and let
267:32 - me go ahead and order
267:37 - now and we are getting stripe checkout
267:43 - and I'm going to fill it with this test
267:45 - data so this is data if you are in test
267:47 - mode this is stripe test data so 424242
267:51 - 424 so whatever and then
267:56 - pay and that's it I paid the user now
267:59 - one important thing is I didn't really
268:01 - have time to do anything else with this
268:04 - so the way this works now is you it's
268:08 - based on trust between user and the
268:10 - seller so seller G gives something and
268:12 - then user pays them or orders in advance
268:16 - so right now I'm not tracking uh like
268:20 - the payments in my database because I
268:22 - don't have I didn't have time to do it
268:24 - but you can just go to my YouTube and
268:27 - set up and development video that I will
268:29 - show in the description below it will
268:31 - show you half of it is about stripe so
268:34 - it will show you how to set up like how
268:37 - to track payments with stripe web hooks
268:39 - so you need to make maybe some web hooks
268:41 - on stripe so track payments and then
268:44 - some apis in your website but also this
268:48 - works as well so you don't need to make
268:51 - it like until later because the website
268:54 - will
268:55 - work now let's fix this messed up
268:57 - styling so go to connect stripe button
269:00 - and just remove all of these uh classes
269:04 - and say button variant to be open this
269:09 - and secondary
269:12 - connect stripe we don't want to show
269:15 - this if the stripe is connected so here
269:18 - uh in navbar we want to say if not
269:21 - current user do stripe account setup
269:24 - complete and display this and then close
269:28 - it so if it's false this is so if it's
269:32 - setup this will not be
269:35 - displayed but on this account it's not
269:37 - set up so let me go to the other account
269:39 - where I set it up so here here there is
269:42 - no that button because my stripe is set
269:45 - up so now if I go to my gig and I click
269:49 - user we go to user
269:51 - profile but it's not found so let's go
269:54 - to our
269:55 - code and here where we have Dash no
270:00 - username and let's just click and say
270:03 - page.
270:05 - TSX so here we're going to start with
270:09 - some imports that you can import later
270:11 - interface seller page props parameters
270:14 - username gig ID now this is a bit weird
270:18 - because we don't have gig ID so what I
270:21 - was doing here I have no
270:24 - idea uh okay so params uh and then
270:28 - seller page props I I will fix this I
270:30 - think this is like not not necessary
270:33 - okay Arrow function export the page
270:37 - seller use Query get user by username
270:42 - and then pass in
270:44 - username skills query API skills get by
270:48 - user pass in the usern
270:50 - name gigs
270:53 - squarey API gigs get by seller
270:57 - name pass in seller
271:00 - name I just forgot to delete this so
271:03 - don't you don't need
271:05 - this and then we want to get reviews get
271:08 - by seller
271:10 - name and and then uh pass in seller
271:15 - username seller so if any of these is
271:17 - undefined we just want to return
271:20 - loading if any of these is null then not
271:26 - found although if you review is null it
271:29 - can the seller can still be found
271:33 - so um we'll fix
271:36 - this okay
271:38 - uh skills string so we want to get all
271:42 - the user skills and just map so we want
271:44 - to map each skill so this is skill name
271:47 - skill object and skill name we want to
271:51 - join them in all into string all the
271:56 - names so if seller is undefined or
271:58 - reviews is undefined then return
272:02 - loading if seller or reviews is null
272:05 - return not found this is
272:09 - weird Okay um we want to go make some
272:12 - divs this is uh for all screen
272:16 - sizes another
272:18 - div profile card seller pass in reviews
272:24 - and then div about me and then seller
272:27 - about div skills and then skills
272:33 - string my geks list seller
272:38 - username just passing seller username my
272:40 - so sellers
272:42 - gigs review stats so this is like a it's
272:47 - is shown like as stats like with bars
272:50 - and stuff so just passing reviews and
272:52 - then actual reviews so we want to
272:54 - display reviews as well besides reviews
272:56 - stats so passing reviews and that's
273:01 - it so I think what we should do is
273:04 - completely remove this reviews is equal
273:06 - to null and seller we we already
273:08 - checking if it's null so we don't need
273:10 - it here seller is undefined and reviews
273:13 - undefined we are checking this as well
273:16 - already here and then uh if reviews is
273:18 - null you should still exist I think if
273:22 - skills is now like there shouldn't be
273:25 - any
273:26 - problems okay and
273:30 - then so we want to check if skills
273:35 - exists or empty
273:39 - string like this
273:44 - so I think that's it now this is any
273:48 - type so we are going to solve this so if
273:54 - skill exist then show skills otherwi
273:57 - otherwise just display nothing and make
274:00 - sure you spell it as
274:04 - skills so let's create these things that
274:07 - we are importing so let's go to API
274:10 - users get user by user
274:12 - name in users TS export con get users by
274:16 - username
274:17 - query arguments username optional
274:21 - string Handler if arc's username is
274:25 - undefined return
274:26 - null if not arc's username return
274:32 - null uh so this is yeah if this is
274:35 - null but it can be only undefined so I
274:38 - think this is unnecessary also okay so
274:40 - user wait context database query users
274:44 - with index by
274:46 - username and then
274:48 - unique and then return user that's it
274:52 - now go to gigs. DS and then export con
274:56 - get seller get by seller name so get gig
275:00 - by seller name query so we need seller
275:03 - name
275:05 - Handler so get the user so query users
275:09 - by username
275:12 - then if user is uh not or null return
275:16 - null and then gigs is a weight context
275:19 - database query gig gigs by seller ID and
275:23 - you say user ID seller ID field is user
275:26 - ID and collect all gigs of this user and
275:31 - then return
275:33 - gigs okay let's go create this skills
275:36 - and say get by user so let's copy this
275:38 - skills and in the convex folder say
275:42 - skills.
275:44 - TS here do some imports uh get by user
275:49 - it's going to be query arguments is
275:51 - username Handler function identity and
275:56 - if not identity
275:58 - unauthorized user await context database
276:01 - so query
276:02 - users uh we want to query by username
276:05 - and get the first user although
276:12 - get skills by users so I think this
276:14 - should be unique not first but anyways
276:18 - uh just if there is no user user not
276:21 - found but unique and first both work
276:24 - it's just that unique will throw an
276:25 - error if there is more than one okay uh
276:30 - skills we're going to query for skills
276:33 - by user ID and then collect so this is
276:35 - the user ID and collect all of them and
276:38 - return skills that's it so in reviews TS
276:43 - uh export get by seller name and then we
276:46 - want to go ahead and say uh args seller
276:50 - name
276:51 - Handler we want to get seller by like
276:54 - query users by username so by user name
276:58 - username ARS seller name
277:01 - unique seller seller not found
277:05 - reviews now we want to get reviews so
277:08 - query reviews with index by seller ID
277:12 - and
277:14 - collect so you don't need this I just
277:16 - forgot to delete it reviews full type
277:20 - promise all so we want to resolve all
277:23 - promises now for each review you're
277:25 - we're going to map it and say gig is
277:28 - await context database query
277:32 - gigs we want to
277:35 - filter all of the uh so we want to
277:39 - filter
277:41 - all of the gigs by review. gig ID so I
277:44 - think we want to get all of the gigs
277:46 - that
277:49 - have oh this is confusing so ah it must
277:53 - be unique yeah so we're going to get a
277:55 - review that this user left on this
278:01 - gig so I'm not sure why I'm doing it
278:05 - like this so this is bad so I can just
278:08 - say review gig ID and I say get
278:11 - like this but I made this project two
278:13 - months ago when I was just learning this
278:15 - so that's
278:17 - why okay so I'm going to leave it this
278:19 - way for now but you can whatever you
278:22 - want so gig not found okay now we need
278:26 - to query images with by gig
278:29 - ID and then get the first image because
278:31 - we only need one image to show in the
278:33 - review and then if there is no image
278:36 - image not found yeah be yeah a wait so
278:41 - get U okay so get URL image storage ID
278:46 - so this image object it has format
278:48 - storage ID but doesn't have URL so we
278:51 - need to convert this storage ID into
278:54 - URL and then image not
278:58 - found um context database query offers
279:02 - now we need to collect offers by gig ID
279:05 - and collect so that's going to be
279:07 - premium standard basic whatever if there
279:10 - is no off off offer is not found image
279:14 - with URL that's going to be so we spread
279:18 - the image we spread all of these fields
279:21 - and then we add below the last field we
279:24 - add URL image
279:27 - URL get author country so query
279:32 - users author ID this is bad no you copy
279:36 - this and you say do get and then uh in
279:40 - Brackets
279:41 - do getet in Brackets review Author ID
279:45 - okay but you can do it this way as well
279:46 - to get this author by
279:48 - ID author not found if it doesn't exist
279:53 - country by user ID unique again you say
280:00 - so we're going to query countries ah
280:02 - with index okay okay that's it that's
280:03 - this is good this is
280:04 - good okay so no country country not
280:07 - found return spread review
280:10 - object then add gig image image with URL
280:15 - offers
280:17 - author author is going to be spreading
280:21 - author and
280:23 - Country and then return reviews full
280:26 - type so you see what reviews full type
280:28 - has it has all of
280:30 - this so the database functions are
280:33 - finished we just need to make a few
280:35 - components here so let's first copy this
280:37 - underscore components profile card go to
280:40 - the same level and then click that page
280:43 - and just say.
280:45 - DSX so profile card we're going to do
280:49 - some
280:50 - imports profile card props seller is Doc
280:55 - users reviews doc
280:58 - reviews export con profile card we're
281:01 - going to extract these props and then
281:05 - Arrow
281:06 - function languages so we want to get
281:09 - users get languages by username and
281:12 - username will be seller
281:15 - username I use Query it's going to be
281:18 - get country by username so we want to
281:21 - pass in the
281:23 - username languages undefined country
281:25 - undefined we return loading languages
281:29 - string so we want to just convert this
281:31 - uh array to a string so for each
281:35 - language we want to get language object
281:37 - dot this is name of the language and we
281:39 - want to convert like join all names
281:43 - into string average review we do this
281:47 - the same way we did it like four times
281:49 - already so I'm just not sure if I need
281:52 - to multiply this by three because so if
281:55 - this review is weird if it's higher than
281:57 - five or something then
282:00 - because I think I explained so let's not
282:03 - waste your time return div Avatar uh
282:08 - Avatar and everything is from components
282:10 - UI it's never from radx
282:14 - UI okay so show seller profile image and
282:18 - fullback is like first name of the
282:19 - seller we did this and then um
282:24 - div another div another div okay so we
282:26 - want to show seller
282:28 - username and seller at seller username
282:32 - oh seller full name and at seller
282:35 - username okay some div star this is uh
282:38 - for I think reviews
282:41 - reviews. length so number of reviews and
282:43 - then average
282:45 - review but the average review will get
282:48 - messed up because I think I need to
282:50 - multiply by three maybe okay so seller
282:53 - custom tag that's going to be um top
282:56 - rated seller or new seller or Rising
282:58 - seller whatever the custom tag in your
283:00 - database is seller
283:03 - title some div another div message
283:09 - Circle languages strings so what
283:12 - languages is seller
283:14 - speaking okay then do
283:17 - this map
283:19 - pin country country
283:22 - name and that's it that's it that's the
283:26 - whole
283:27 - page now in users let's say export con
283:31 - get Language by username arguments
283:33 - username
283:35 - Handler okay so now let's get user by
283:37 - username by username unique
283:41 - there is no user and then languages
283:44 - let's query Languages by user ID and
283:48 - collect all of them and return
283:51 - languages then get country by username
283:54 - so user this is the same so just get the
283:57 - user by username check if it if the user
284:00 - exists okay query countries by user ID
284:05 - and this must be unique and then if
284:08 - there is no countries country not found
284:11 - uh return country that's
284:14 - it so profile card is Now does not have
284:18 - any errors so let me actually comment
284:22 - all of these and now I'm going to
284:24 - comment all of these I want to just show
284:26 - you what profile card it looks
284:29 - like this is what it looks like I don't
284:32 - have no skills I don't have no country I
284:35 - don't have no languages there is no here
284:39 - as well the user tag
284:41 - but we'll we'll work on this now let's
284:46 - display all gigs of this user so in com
284:50 - Pro next to profile card my- gs- list.
284:56 - DSX let's start with use client and some
284:59 - imports my gigs list props user seller
285:03 - username is going to be
285:04 - string my gigs list seller username just
285:09 - extract this okay okay so gigs use
285:12 - Query get gigs with images and then pass
285:16 - in seller
285:17 - username if gig is undefined return
285:20 - loading return okay we need Carousel
285:24 - from um components youi
285:27 - Carousel so options align start Loop
285:32 - true Carousel of images will be Loop
285:35 - will Loop drag free
285:39 - false I'm not sure about these but this
285:41 - is like maybe you want to be able to
285:43 - drag or not drag by like images and then
285:47 - class name W full uh close the tag so we
285:52 - have next in previous image or is this
285:56 - now this is gig list so this is not
285:58 - image and then Carousel content gigs map
286:02 - so for each gig we're going to say
286:05 - Carousel item um 13 so I think this is
286:10 - display play ah I don't know okay so
286:14 - link when we click each uh gig it's
286:16 - going to go to that gigs link to that
286:18 - gig's page so CF uh seller username and
286:22 - gig
286:23 - ID
286:25 - images okay so yeah each gig is also
286:29 - display all of its images so you can
286:32 - scroll through images so we need to say
286:34 - images gig images Title Gig title allow
286:38 - delete fals
286:41 - that's it now we need to just make this
286:45 - in the database so go to
286:48 - gigs so in gigs DS we're going to say
286:51 - export cons const get gigs with images
286:55 - and then argument seller username
286:57 - Handler okay so get seller by username
287:00 - we already did this I'm going to skip
287:02 - through this quickly okay so now we're
287:04 - going to query gigs by seller ID this is
287:08 - oh yeah okay this is good by seller ID
287:10 - get all gigs from this seller then check
287:13 - if there is no gigs gigs with images we
287:16 - want to promise resolve all promises so
287:19 - for each gig we're going to map all
287:22 - gigs okay so image we query gig media by
287:26 - gig
287:27 - ID collect all of the images for this
287:30 - gig
287:31 - ID images with URLs so we want to
287:34 - resolve all promises again so for each
287:37 - image we want to convert this image
287:40 - storage ID into URL image URL because
287:45 - imagees object that is that has storage
287:49 - ID but not the URL so you need to
287:50 - convert this to URL and then image not
287:54 - found and spread the image and add URL
287:57 - so here if I go here we have we have
288:00 - spread image and then
288:03 - URL gigs with images now spread the gig
288:06 - and images image images with urls that's
288:11 - it return gigs with images so now gigs
288:13 - with
288:16 - images gigs with images although this
288:18 - should be gig with images not gigs with
288:22 - images okay and then here return gigs
288:25 - with
288:27 - images so my gig list is now like it
288:30 - works so let me go to um where here page
288:34 - TSX and uncomment this my gig
288:38 - list and let's go down and uncomment my
288:42 - gig so I'm GNA move this comment down
288:45 - like that so if I go here now I should
288:49 - see all of the
288:53 - gigs it's right here and I think I can
288:56 - scroll through images although I think
288:57 - this gig does not have any more images I
289:00 - clicked it and it went to the gig
289:03 - page so this is going to be a carel so
289:06 - one gig here one here one here and there
289:09 - is this Arrow
289:11 - so all of the gigs will be shown
289:13 - here and now let's go and show reviews
289:17 - so uh in the
289:20 - components we want to make a new file
289:23 - reviews SL reviews.
289:26 - DSX we also want to have review- box.
289:31 - DSX add- review. DSX and reviews D
289:38 - stats. TSX
289:41 - so in the reviews TSX make some uh do
289:45 - some
289:46 - imports uh reviews props full review
289:50 - review full type and then extract the
289:53 - props calculate average score for all
289:56 - reviews so array five feels zero
289:59 - initialize array for Star
290:02 - Distribution uh five levels we'll see
290:05 - what this is so we want to calculate the
290:07 - average review score that we did 10,000
290:09 - times okay uh ah this
290:14 - is wait wait wait wait wait wait wait
290:16 - wait wait wait wait const rounded
290:18 - average math round average start
290:21 - distribution I think
290:24 - this requires more work let's see let's
290:27 - see I need to first see like what is
290:29 - what this even is okay so we are getting
290:32 - average score that's reduce
290:40 - so we have total and then for each
290:43 - review we calculate the average for that
290:46 - review and then we round that average
290:49 - and then we
290:53 - say uh start distribution what is this
290:56 - even uh it's an array filled with
291:00 - zeros and then we count the number of
291:03 - reviews for each Star
291:07 - level return total plus average and then
291:10 - review divide by reviews length so this
291:13 - is to show the progress bar for so for
291:17 - example we will have recommend to a
291:19 - friend and then progress bar for only
291:23 - those like for all of the reviews we
291:25 - just take recommend to a friend and then
291:27 - make uh calculate average of all
291:30 - recommend to friend and then so that's
291:32 - why we are doing this but I forgot
291:35 - exactly like okay well we'll
291:38 - see calculate the maximum number of
291:40 - reviews for any Star level to set
291:43 - relative progress bar maximum Max
291:46 - reviews Star
291:49 - Distribution math Max Star
291:52 - Distribution okay rating
291:56 - breakdown uh seller communication level
291:59 - calculate average review Map review
292:03 - review calcul communication level okay
292:06 - so just calculate average
292:09 - for all of
292:13 - these
292:15 - so um so here in calculate average we
292:19 - are sending we are mapping reviews such
292:22 - that we only get reviews. recommend to a
292:25 - friend so here we are only sending a
292:28 - recommend to a array of recommend to a
292:30 - friend
292:32 - numbers and that's it so only a ray of
292:35 - numbers so recommend to a friend from
292:37 - each
292:38 - review okay now let's define this
292:40 - calculate average it's going to take
292:42 - array of numbers it's going to return a
292:45 - number if values length zero return zero
292:50 - some values reduce total value total
292:55 - plus value start from
292:57 - zero return sum divided by values.
293:00 - length this will calculate leverage so
293:02 - here for example average so here
293:04 - recommend to a friend as I said we send
293:08 - all of the recommend to friend values
293:10 - from each review in Array only recommend
293:13 - to friend values and then get the
293:15 - average of recommend to friend
293:17 - review return div reviews map
293:23 - return and then this uh fragment review
293:27 - box and key and review and separator at
293:31 - the
293:32 - bottom so that's it now let's just make
293:35 - this review box that's going to show our
293:39 - reviews so review box let's go here
293:41 - review box that we already
293:44 - made let's start with
293:47 - Imports uh props and then extract props
293:51 - the standard okay average score we did
293:54 - this already soeg so average score for
293:57 - this review and then distance to now so
294:00 - when the review was posted for format
294:02 - distance from now and review creation
294:06 - time add suffix true I forgot what this
294:08 - suffix is
294:10 - turn div Avatar so Avatar Source oh my
294:16 - God I just hardcoded it
294:18 - what graat I I don't wait maybe this
294:21 - should be like user do image or I don't
294:24 - I don't know what this even is okay so
294:26 - there is no fullback div uh review
294:30 - Author full name review Author country
294:33 - country name review
294:36 - comment and then div distance to now so
294:40 - 5 hours ago uh and then div display five
294:45 - stars so we're going to make a new or is
294:48 - it no what is this this is making a new
294:50 - array I think and then
294:52 - map and then display
294:56 - Stars size color star is icon this is
295:00 - icon okay and below that average score
295:04 - to fixed one let's see what this even
295:07 - does
295:08 - separator and then
295:12 - div
295:13 - ordered div another div aspect ratio 169
295:20 - image review image URL fill so you
295:25 - you're going to fill this must be fill
295:27 - and then review uh gig title and this
295:31 - and aspect ratio
295:34 - close and then below div outside of this
295:38 - div and then review gig title now let's
295:42 - go back to page TSX and uh we're going
295:49 - to uncomment this and we are going to
295:52 - uncomment
295:53 - reviews but I'm going to do that by
295:56 - moving this
295:58 - here so I think our gig has absolutely
296:02 - zero reviews so that's why it's not
296:04 - showing anything so we need to make a
296:06 - functionality to add reviews as well so
296:08 - let's do that now let's do this ad
296:11 - review so use client Imports ad review
296:15 - props gig ID seller ID form schema this
296:20 - this is going to be a form we're going
296:22 - to say Z object comment Z string minimum
296:28 - five characters message comment must be
296:30 - larger than five
296:32 - characters Service as described number
296:36 - minimum one Services typ must be at
296:39 - least one maximum five message recommend
296:44 - to a friend number the same thing uh
296:47 - minimum one maximum five and then
296:50 - communication level minimum one maximum
296:53 - five okay that's the form schema
296:58 - object okay export con review extract
297:02 - these con mutate pending from use API
297:07 - mutation API reviews add okay so form
297:11 - use
297:12 - form Z so type is z. infer from type of
297:17 - form schema so the type of form we're
297:19 - going to infer from this
297:23 - object uh resolver will be Zod resolver
297:27 - form schema default values will be
297:31 - comment nothing empty string
297:37 - five uh communication level default
297:40 - values okay then onsubmit values Z infer
297:45 - so the type is z infer type of form
297:49 - schema and then we can console log
297:51 - values so this is uh values is like on
297:55 - submit when we submit the
297:57 - form
297:59 - mutate gig ID seller ID so this is
298:02 - creating adding review comment service
298:05 - has described all of this
298:07 - stuff form reset at the end
298:11 - uh then and catch so if you want to do
298:13 - something when this mutate
298:17 - finishes
298:18 - return add review is title form we're
298:22 - going to spread this form I don't know
298:24 - where I defined it
298:26 - here form we need to make this because
298:29 - this is from shaten UI this is how the
298:32 - syntax goes form handle submit on submit
298:37 - and then
298:38 - space y
298:40 - eight okay so field comment comment
298:44 - field form field control form control we
298:49 - you just need to pass this name comment
298:51 - render so how the field will be rendered
298:54 - it's going to be form
298:56 - item label comment form control that's
299:00 - going to be input enter your comment and
299:02 - then spread the
299:05 - field form message this is the error
299:08 - message and form the description leave
299:11 - uh review comment then we're going to go
299:15 - ahead and
299:16 - say the same thing for so for control
299:20 - name Service as described field for item
299:24 - Service as described and then form
299:26 - control input number minimum one maximum
299:29 - five rate one to five placeholder and
299:32 - then spread the field and form
299:34 - description and I'm just going to go
299:36 - quickly because it's the exact you can
299:38 - just copy paste for service say describe
299:40 - communication level and
299:42 - everything okay and then button submit
299:46 - submit now let's go ahead and in reviews
299:50 - make this add function in reviews TS
299:54 - let's say export const ad mutation so
299:57 - all of the arguments gig ID seller ID
299:59 - comment service this this this numbers
300:03 - Handler check
300:05 - identity current user is going to be
300:07 - query
300:08 - users uh with index by token so we're
300:12 - going to get the current user by token
300:14 - identifier and then it must be unique
300:17 - check the user if it exists and then
300:19 - review we will just insert into reviews
300:23 - and object will be gig ID it's going to
300:26 - be gig ID seller ID will be seller ID
300:29 - author current user
300:31 - author I think we don't need this
300:33 - question mark and then comment service
300:36 - has described all of these and return
300:39 - review so I think we can delete question
300:41 - mark because we are checking here if it
300:44 - exists and that should be
300:49 - it so since I'm not exactly 100% sure
300:53 - where this is shown like this ad gig so
300:55 - I think it may be in uh reviews like
300:58 - like review start so let's uncomment
301:02 - this let's uncomment this but I'm not
301:04 - going to save it for now because I don't
301:06 - want my page to break so let me go here
301:10 - into a review
301:12 - stats so review stat is actually similar
301:15 - to reviews let's do some imports review
301:18 - startat
301:19 - props and then extract the props do the
301:22 - usual so this is the same we want to get
301:27 - average for each of the categories from
301:30 - all reviews so we want to get uh average
301:33 - score so we want to reduce total review
301:37 - average review communication level plus
301:39 - all of this stuff divided by three so
301:41 - this is average for the this
301:44 - review rounded average math round
301:48 - average start the script the
301:51 - distribution start distribution so we
301:53 - want to just go through this array and
301:55 - then do something with it okay so return
302:00 - total plus
302:03 - average and divide by review length so
302:05 - this should be um what is this it's a
302:09 - number that's average score for I think
302:13 - the whole reviews everything all of the
302:14 - reviews
302:18 - together and then we want to calculate
302:21 - the maximum number of reviews for any
302:23 - Star level to set relative progress okay
302:27 - so I think start
302:31 - distribution well this is calculating
302:33 - maximum of something I just forgot I'm
302:35 - sorry calculate rating breakdown values
302:38 - dynamically rating
302:41 - breakdown seller communication level
302:43 - calculate average we want to send all of
302:47 - the communication levels so we want to
302:49 - calculate average of all of the
302:51 - communication level from each interview
302:53 - same here same here and then calculate
302:57 - average defined function this is a array
302:59 - of numbers it's going to return a number
303:03 - if every if value length zero values
303:05 - length zero return
303:07 - zero some vales reduce so we want to
303:12 - get we want to add up all for example
303:16 - all of the array
303:18 - numbers starting from zero and then
303:21 - divide sum by values length that's going
303:24 - to calculate
303:26 - average return div div P font bold
303:32 - average review score average score to
303:35 - fixed two
303:37 - decimals Stars so three Stars I think or
303:41 - no 3.5
303:43 - stars for example uh star distribution.
303:47 - map I don't know what the Star
303:49 - Distribution is let me see so we want to
303:52 - map it so for count and index we want to
303:55 - say start level five minus
303:59 - index so start level 5 4 3 2
304:02 - 1 percentage Yeah we want to get the
304:05 - percentage so count maximum review so we
304:08 - want to get the percentage so for
304:10 - example if your review is 2.5 and the
304:14 - reviews are from 1 to 5 then percentage
304:16 - is 50% at 2.5 we want to show this in
304:20 - percentage so times 100 so calculate
304:24 - percentage for Progress bar we're going
304:26 - to have progress bar for each category
304:28 - so communication is going to be a
304:30 - progress bar from 0o to
304:33 - 100% return div key Star level class
304:39 - name
304:40 - button variant
304:44 - ghost star level Stars
304:48 - button okay so progress value percentage
304:51 - so this is a progress bar from UI uh
304:54 - component from shat and UI like
304:56 - components
304:57 - UI and then go down and say rating
305:01 - breakdown
305:04 - object entries rating breakdown map so
305:09 - map
305:10 - each of these rating break breakdown
305:12 - this is just an
305:16 - object okay uh label value and then
305:21 - index so this
305:24 - has so this has label and value I
305:29 - think so we're going to do uh key index
305:34 - and then class name label we want to
305:37 - show label and value to fixed one so I
305:41 - think this will just like this this will
305:43 - be next to the progress bar to show like
305:45 - the numerical value of this like average
305:49 - so that's it let's go to this page TSX
305:53 - and save it and now we finished it it's
305:56 - all
305:57 - saved the only problem we
306:02 - have cannot find progress primitive from
306:06 - radic UI react progress this is is in UI
306:10 - progress
306:12 - TSX this error is a little bit weird so
306:15 - I'm just going to go here to shat CN and
306:18 - progress and I'm going to click manual
306:21 - installation and just install uh copy
306:24 - this npm and install
306:27 - it and maybe this will resolve the issue
306:31 - and it's fixed now you can see what we
306:33 - made and rating breakdown so this will
306:37 - make more sense when you go and study
306:39 - you what the hell we
306:42 - made honestly my guys I have no idea
306:46 - where this ad review is in my code so
306:49 - let's just continue we're going to be
306:50 - able to add
306:51 - reviews okay guys I found it so go to
306:54 - app username gig ID and
306:57 - PSX and that's where we are going to
307:00 - uncomment first of
307:01 - all uh this add review so let me go
307:04 - ahead and uncomment this show so this
307:08 - should
307:12 - work okay so we need to fix the import
307:15 - so I'm just going to say here and import
307:17 - again like that and then this import oh
307:22 - yeah I am commented the wrong thing oh
307:24 - my God that's crazy okay let me save and
307:29 - now so if we go to the gig page now we
307:33 - see this ad review form so comment
307:37 - amazing gig bro
307:40 - uh I'm going to Service as
307:42 - described for communication doesn't
307:45 - really speak English to submit
307:49 - oh expected number received string
307:53 - that's
307:55 - crazy let me see again oh my God that's
308:00 - not good so in my research I found that
308:04 - in the ad reviews I have this I already
308:07 - commented set default values as numeric
308:10 - so it doesn't give weird expected number
308:12 - go string error but I already did it so
308:15 - why is it behaving like this so what I
308:17 - did is I just refresh the
308:20 - page and if I go ahead and just add
308:23 - whatever the comment and I press submit
308:26 - the review is saved yes so that works if
308:30 - I say three expected number received
308:33 - string that's
308:35 - crazy what if I do this
308:41 - and then comment is
308:45 - to okay I found the fix we're going to
308:49 - have to go into a so for field for
308:53 - service as described field and here
308:56 - after placeholder and field we're going
308:58 - to paste the
309:00 - following we're going to say on change
309:04 - curly brackets e and then field.
309:07 - unchange so we're going to trigger the
309:09 - same onchange function but par int e
309:14 - Target value so we're just going to
309:16 - trigger the same onchange function but
309:18 - we will convert text to int and we need
309:20 - to do this for each of the other fields
309:22 - so here after the field and here after
309:25 - the field and save it and let's go here
309:30 - and refresh this page let me scroll down
309:34 - and now if I go ahead and change
309:35 - whatever I need to add some comments so
309:37 - as you can see I'm not getting any
309:39 - issues I
309:41 - submit and we have an
309:45 - issue so it's Pars in I just misspelled
309:48 - so let's go back this is pars int so let
309:52 - me fix
309:55 - that okay and then we want to try again
309:59 - three oh my
310:00 - God guys just make sure I'm goingon to
310:03 - like do this again so let me delete this
310:06 - and I'm going to make sure to paste the
310:08 - correct version again so onchange e so
310:10 - this is the correct
310:14 - version okay let me try again so four
310:16 - three 4 two and then nice bro submit
310:21 - okay now it
310:24 - works so see how we have four reviews
310:27 - and the average review is 11 which is
310:29 - not possible because review can be from
310:31 - 1 to five so let's go to seller. TSX and
310:36 - here where we have um reviews length so
310:39 - we need to divide by reviews length time
310:42 - three and now it's going to
310:45 - be
310:47 - this but we also don't want to have so
310:49 - many decimal places so let's go here
310:52 - scroll down of the seller TSX where you
310:54 - have average review and say two
310:58 - fixed five oh no no no two two decimal
311:02 - places and then let's copy this and
311:04 - let's also go to
311:07 - um seller
311:10 - details this one and then average
311:15 - review
311:18 - average review let me get here and then
311:20 - to fix two and
311:23 - also uh we want to say reviews length
311:26 - and times three because each review has
311:31 - three one two three of
311:34 - these so now this will also be fixed
311:39 - and let me show you a bit of surprise if
311:41 - I go to my profile we see all of this
311:44 - all this is the list of gigs and we see
311:47 - how my progress bar
311:49 - works and I'm not sure if it works as it
311:53 - should be
311:55 - working and then uh so for each review
311:57 - and what the hell is this ah this is the
311:59 - hardcoded image that I program but you
312:02 - can just say like put uh you author
312:07 - image so for
312:10 - I showed which gig I did the review for
312:14 - and then I just showed the review the
312:16 - average review time and
312:19 - everything so I didn't have time to like
312:21 - completely fix this so if I have time I
312:24 - will show you but if I don't have time
312:26 - then sorry I cannot I I didn't have time
312:28 - to fix
312:29 - this app seller
312:32 - username so we are going to uh so in
312:35 - username we're going to say page TSX
312:40 - and uh layout so we are making something
312:45 - so the thing we are making is I don't
312:47 - know yet but let's
312:49 - see now I think we don't need this page
312:51 - TSX so let's actually remove it
312:54 - sorry so move to recycle bin so in
312:57 - layout TSX that I just made let's say
313:01 - import seller navbar from component
313:03 - seller Navar uh dashboard lay layout
313:06 - props we want to extract all of
313:09 - that return
313:13 - main seller
313:15 - navbar uh show the seller Nar and
313:19 - children and that's it this is the
313:22 - layout now let's copy this underscore
313:24 - component seller navbar and next to this
313:28 - layout let's make a new file just copy
313:30 - paste all of that and
313:33 - DSX so there will be a whole nav bar
313:36 - that we are going to be creating use
313:38 - class
313:40 - and then um all of the
313:43 - Imports and then const components it's
313:46 - going to have type title string C string
313:49 - description string and that's going to
313:51 - be
313:52 - array and then that's going to be array
313:54 - of objects and then these are the
313:58 - objects so title orders C now this um
314:03 - nav bar I'm showing to you how to do
314:05 - this but this will be incomplete so you
314:08 - are
314:09 - you don't need to like write these
314:11 - things because they won't lead to
314:14 - anywhere but I'm showing you how to make
314:16 - this Navar for your application just if
314:18 - you want to it's a more complex Navar
314:20 - but if you don't want to make this you
314:22 - can skip this so this is just for you to
314:25 - learn how to make a more complex navbar
314:27 - but for a more complex comp
314:30 - application so we have this description
314:33 - of the N of the this navbar element then
314:36 - we have title gigs
314:39 - and then C to where this leads this can
314:42 - be like the homepage like this without
314:46 - like this okay description and we want
314:49 - to make this whole object profile
314:51 - everything okay so then export const
314:53 - seller
314:54 - Navar API users get current user router
314:58 - from next SL
315:02 - navigation onclick inbox push to
315:05 - inbox uh return something so return this
315:09 - div
315:11 - div button on
315:13 - click we're going to say on click inbox
315:16 - so this is Inbox and message Circle so
315:18 - this will show
315:20 - inbox if current user so if the user is
315:24 - logged in variant ghost we want to say
315:29 - router okay so we have switched to
315:32 - buying so this was switch to selling now
315:34 - switch to
315:36 - buying and then user button
315:40 - then below that we want to say
315:42 - navigation menu this is from UI
315:45 - components so go to shat and read about
315:48 - this if you want navigation menu list
315:51 - navigation menu item link to SL dos we
315:55 - don't have this SL dos but I'm just
315:57 - showing you how to make this if you need
315:59 - so you can like just not write this if
316:01 - you don't want this Legacy I don't know
316:03 - what this is because uh I just copy
316:05 - pasted a lot of this from sh CN so they
316:08 - have everything in documentation but I'm
316:10 - just showing you how to make this
316:13 - navigation menu link class name
316:15 - navigation menu trigger style I don't
316:18 - know what this is dashboard so you'll
316:20 - see what this is when we finish this I
316:22 - will show you what it looks
316:24 - like Okay navigation menu item
316:27 - navigation menu trigger my business and
316:30 - then content that's going to be
316:32 - unordered
316:34 - list uh list item navigation menu link
316:39 - and then you have a
316:42 - a um you don't need this image but I'm
316:46 - going to make a div
316:48 - orders and then whatever the hell this
316:51 - is keep track of your orders so this is
316:53 - this is a bit more complex navbar that
316:56 - shows you like not only this with good
316:58 - styling but also descriptions and stuff
317:00 - so list item another one this is for
317:04 - managing gigs so let's just say title
317:06 - gigs and this we have so this is
317:08 - actually link that we have in the that
317:10 - we're going to have manage create or
317:12 - edit your gigs here and let me now speed
317:15 - up so list item this is seller current
317:17 - user profile I think we don't have this
317:19 - one because seller is just I think for
317:23 - us it's just like this this is the
317:25 - profile but okay let's leave it like
317:28 - this manage and edit your profile
317:31 - present yourself to the world navigation
317:33 - menu item below let me advertise it okay
317:37 - so there is a bunch of more
317:39 - like um what is this
317:44 - components this is
317:47 - components yeah so this is yeah these
317:49 - these components here so orders gigs
317:54 - profile uh components map so for each
317:56 - component we want to list items so key
318:00 - title component
318:02 - description let's let me just there's no
318:05 - point let me just quickly like go
318:06 - through all of this is the same and then
318:09 - I'm I want to show you what it looks
318:11 - like so list item yeah so this list item
318:15 - we are going to Define it here so what
318:16 - is it it's going to be react forward ref
318:20 - react element a so it's going to be a
318:25 - link and then we're going to say react
318:28 - component uh props without
318:32 - ref display
318:35 - name and we're going to pass in uh class
318:40 - name title children props so this is
318:43 - children
318:46 - title I think we also have a
318:49 - ref I'm honestly not sure like too well
318:52 - like what I'm doing here because I just
318:53 - copy pasted this from Shad CN so we're
318:56 - going to show some
319:01 - links H
319:03 - title and children okay
319:06 - well if I save this let let's see what
319:09 - all of it looks like so if I go to
319:12 - switch to
319:14 - selling guys it looks like I cannot even
319:16 - show you the navbar right now because uh
319:20 - we don't have this page so we need to
319:22 - make this manage gigs but this is one of
319:24 - the last if not the last thing we are
319:26 - doing in this tutorial so let's go so in
319:29 - manage gigs so username manage gigs
319:31 - we're going to next to layout we're
319:33 - going to say page.
319:36 - DSX so page. DS X use
319:40 - client we import link so we import all
319:44 - of the
319:46 - Imports manage gigs this is a managing
319:50 - page so this page is going to display
319:51 - all of the gigs we have and let us
319:53 - manage
319:55 - them current user get current user uh
319:59 - okay so get
320:00 - gig get gig with order amount and
320:04 - revenue okay if gig is undefined current
320:07 - user undefined it's loaded
320:09 - if gig is null or this is null not
320:12 - found and then um gig
320:18 - data so this this type what is this type
320:22 - even oh this is uh we'll see what this
320:25 - is okay so we are mapping each gig ID is
320:30 - gig ID so we are creating this object
320:32 - data and we are saying title is gig
320:35 - title and then image is image URL or
320:38 - this random image that I don't know even
320:41 - what is
320:42 - this it's a placeholder image so this
320:46 - data is what we will show in our like
320:48 - table about gigs clicks gigs clicks
320:53 - orders
320:55 - Revenue
320:58 - username okay then return make some divs
321:02 - div age1
321:05 - gigs uh P manage creator edit your gigs
321:09 - and offers
321:11 - button variant blue which we don't have
321:14 - but I will make
321:16 - it uh let's actually go and create this
321:19 - variant so let's go to button
321:21 - DSX and here where we have
321:25 - variants now we're going to add a new
321:28 - variant blue and give it these names
321:31 - we're going to say blue secondary give
321:34 - it these class names and white and these
321:38 - class names
321:40 - so let me um continue with this so this
321:44 - button will have will go to the manage
321:47 - gigs create so this is for creating a
321:50 - gig okay then we're going to have a
321:52 - separator just and then data table this
321:56 - is table we will show all of our data so
321:59 - let's now create this uh get gigs with
322:02 - order amount and revenue so in gigs. TS
322:06 - let's create that it's going to be a
322:08 - query
322:09 - let's speedrun through this it's easy
322:11 - check
322:12 - identity okay get user by by token
322:17 - identifier get currently logged in
322:19 - user check user is
322:22 - authenticated and then gigs query gigs
322:26 - by user ID so all of the gigs of this
322:29 - seller order the sending by creation
322:32 - time collect all of them because we want
322:34 - to display in the manage gigs
322:37 - tab uh G with order amount so we want to
322:39 - promise resolve all promises gig map so
322:43 - for each
322:44 - gig we're going to get
322:46 - orders by gig ID collect all of them
322:50 - order amount is orders length return
322:54 - spread the gig and add order amount and
322:57 - that's it okay gigs with order amount
323:00 - and revenue resolve all
323:02 - promises gigs with order amount so map
323:05 - all of these gigs const offers a wa so
323:09 - we want a query
323:11 - offers um so this is revenue so we want
323:14 - a query
323:16 - offers by gig
323:20 - ID and then total revenue is offers need
323:24 - to reduce so accumulate
323:28 - accumulation Plus offer
323:32 - price return gig total revenue guys I'm
323:37 - going be honest with you I think I made
323:39 - a mistake here so I'm calculating the
323:42 - prices of all offers but there are but I
323:45 - shouldn't I should be calculating prices
323:47 - of orders because offers are like just
323:49 - basic premium standard so but I don't
323:52 - have time to fix this that's the problem
323:55 - so I think um you need to like okay so
323:59 - you you can copy this orders and then
324:02 - like here and then say um
324:06 - orders and then order
324:09 - but then you you're going to have to
324:10 - like so for each order you need to get
324:13 - like um you have offer ID and then you
324:17 - can like res um get the offer and then
324:20 - calculate the price or you need to get
324:23 - the number of offers I'm not sure I'm
324:24 - not sure you need to get the offer price
324:26 - of this offer and then just add those so
324:29 - that's how you get Revenue but for now
324:31 - because I don't have time I have to
324:33 - leave it like
324:34 - this okay so um gigs with order amount
324:38 - and revenue map so we're going to make a
324:41 - sync function this is self-executing
324:43 - function just to do it in this in this
324:44 - way as well to show you how to do it uh
324:48 - so we're going to query gig media by gig
324:52 - ID first we want to get the first image
324:56 - and then uh if
324:58 - image we want
325:02 - to get so we want to convert this
325:05 - storage ID into URL and then return gig
325:08 - G spread gig and then image URL return
325:12 - gig image URL is
325:15 - null
325:18 - what ah so if image exists then you
325:21 - return image URL but if image doesn't
325:23 - exist then you return image URL as null
325:26 - okay back at our page TSX seller
325:29 - username we
325:32 - actually seller username page
325:35 - TSX first of all this page TS X should
325:38 - be inside of manage gigs so let me cut
325:42 - all of this and Mage make page. TSX
325:46 - inside of manage gigs and then paste it
325:48 - here because this this where it this is
325:50 - where it should be and then I can delete
325:53 - this page TSX because it's
325:56 - useless so inside of manage gigs we need
325:59 - to create a folder undor
326:03 - components so let's make inside another
326:06 - file gig dcard do um/ index.
326:13 - TSX this is quick and easy import doc uh
326:18 - G card props gig so and then extract
326:21 - props return div gig title that's
326:26 - it now we need um in components besides
326:31 - gig card inside of components g- list.
326:36 - DSX this one is also short so use client
326:39 - and imports G
326:41 - card uh then just extract so gigs is
326:44 - used query API gigs
326:47 - get that's going to get all gigs from
326:49 - currently logged in user and then return
326:53 - map
326:54 - gigs gig card key and gig gig that's it
327:01 - now next to Gig list we're going to add
327:04 - data-table dots oh. TSX at the
327:09 - end use client and
327:13 - imports uh we're going to install this I
327:16 - think
327:18 - npm install this okay then interface
327:24 - data table
327:25 - props T data and T value columns columns
327:31 - column
327:32 - def uh I think we are going to import
327:35 - this from somewhere yeah from this and
327:38 - then T data and T value so you can read
327:42 - more about this in Shad CN tables so
327:44 - just Google Shad CN tables and read more
327:46 - documentation I'm not really sure I just
327:48 - copy pasted a bunch of this this code
327:51 - for this table so we got data and data
327:53 - type and columns and columns
327:57 - type export function data table uh give
328:01 - it the types columns data data table
328:05 - props all of this good stuff
328:08 - table is use react
328:12 - table that's crazy I don't know where
328:15 - this comes from it's it's from
328:17 - this okay and then data so you need to
328:20 - pass in props data columns get core R
328:23 - I'm not sure what this is bro let's
328:25 - let's just do it
328:28 - div table so this file I just copy
328:31 - pasted I think and then table table
328:35 - header and then so this is going to show
328:38 - table header I guess header
328:42 - group table
328:43 - row key I don't know let's just go
328:47 - through this
328:49 - bro uh table head is header is a place I
328:54 - don't I have no idea what this
328:57 - is so you can come here to shat CN data
329:00 - table not table but data table and then
329:03 - just read about it if you are interested
329:06 - um I I think yeah I need to install this
329:11 - which I I'm already installing I think
329:13 - and then you can read how it works but I
329:17 - just made it work and now I don't
329:19 - remember how it works so that's that's
329:21 - the thing now let's go back and uh
329:25 - continue with this I'm just going to
329:26 - like you can copy paste and read all
329:29 - about
329:31 - this oh yeah yeah so this is the data
329:35 - table file it's just going to show uh
329:38 - this type of table at the
329:41 - top this type of
329:44 - table now we need to make columns TSX so
329:48 - let's go here uh in components columns.
329:52 - TSX so columns is actually like our data
329:56 - I think so let's do Imports uh you can
329:59 - read about this also in data table shot
330:02 - in because this is also from there and
330:05 - then uh gig data so you can use Zod
330:07 - schema okay we just Define type gig data
330:11 - that we exported and
330:13 - imported and then this is gig data type
330:16 - this is what we will show in our table
330:18 - all of this okay and then say
330:22 - columns uh we we're going to Define
330:24 - accessor key gig header gig cell
330:30 - row and then link it's going to go to
330:34 - sellers sellers image with height row
330:39 - original
330:41 - image uh what is this this is I think
330:44 - this will just like point to the
330:47 - gig okay we'll
330:49 - see and then we have clicks row we have
330:52 - orders we have or those are columns not
330:56 - rows columns
330:57 - revenue and then this will say Revenue
331:00 - in the head header and this will show
331:02 - the pars flow so we're going to say row
331:05 - get value Revenue amount and then for
331:08 - formatted we're going to format this
331:10 - into like this currency
331:12 - style and then format
331:15 - amount we're going to display
331:18 - formatted below that we have actions so
331:21 - that's like just like drop- down menu so
331:23 - we're going to have delete and stuff
331:25 - here gig action cell I think we are
331:29 - creating this yeah so we're going to
331:31 - make this cell we're going to pass in
331:33 - Gig ID and we're going to pass in
331:35 - username row original username so row
331:38 - original is how you access data I'm not
331:41 - sure from where but the data that you
331:44 - are
331:44 - displaying so that's it now let's create
331:48 - this actions so just next to columns I'm
331:51 - going to say actions.
331:54 - TSX so in actions we go with
331:58 - Imports uh props Define those props okay
332:02 - the standard con mutate remove REM so
332:05 - this is for removing the gig
332:08 - handle
332:09 - delete remove so yeah that's it you
332:13 - understand this I think I explained this
332:15 - so this will when we click a button we
332:16 - will handle delete which will trigger
332:18 - this remove
332:20 - mutation drop down menu and then as
332:23 - child because this will be have a button
332:25 - inside so if you have a button inside of
332:27 - a button because this is also a button
332:29 - you need to say as child or there will
332:31 - be an
332:32 - error um open menu this is the button
332:38 - yeah more horizontal yeah this is
332:40 - a what is this I don't
332:43 - know okay let's let's go drop down menu
332:46 - content align end drop down menu item
332:50 - link so that's going to be edit so if
332:53 - you click this it's going to push you to
332:54 - the editing then the other item is going
332:58 - to be uh copy text copy
333:03 - link that's going to be what preview
333:07 - okay
333:08 - so I think we don't need this at
333:12 - all okay and then the last one is going
333:15 - to be
333:16 - delete and I think we can safely remove
333:22 - this and that's it now actions should
333:26 - work and here this is what it looks like
333:29 - so we have gigs manage create and edit
333:32 - gigs and offers and this is the
333:35 - gig although I had an error that said
333:38 - like could not find file datat table. TS
333:43 - so I just went here into page TSX um
333:47 - like manage gigs page TSX and I deleted
333:50 - this import of data table and I imported
333:53 - it again and then everything worked so
333:57 - we have click zero order zero Revenue
334:02 - 40 so I think yeah so this uh project
334:05 - I'm sorry for uh a few things being
334:08 - unfinished so here you can see our
334:11 - nowbar as well this is the advanced
334:12 - nowbar that I was talking about you see
334:15 - how it has all of these
334:17 - animations uh I did I was not able to
334:20 - implement orders this is a huge project
334:22 - I did not know that it would take so
334:24 - much time but you see orders are free
334:26 - and there is no way for me to like track
334:28 - orders so when user purchases order you
334:31 - can track them here but this still works
334:33 - because well we can work on trust
334:36 - between user and seller so that they
334:37 - will pay and then when you have orders
334:40 - that's how you calculate Revenue right
334:42 - now we just adds revenue from all three
334:45 - offers that's not Revenue that's just
334:47 - like this not revenue and this is a edit
334:51 - preview delete so if I say preview it's
334:53 - going to push me to the
334:56 - link so this
335:00 - page and maybe you want to disable
335:02 - reviews for people who have not
335:04 - purchased it but I just didn't have time
335:07 - and then we have delete
335:10 - edit so this is the edit page I can
335:13 - easily I already showed
335:17 - this now just we need to make manage
335:20 - gigs layout a bit better so let's go
335:22 - here in manage gigs create a new file
335:25 - layout.
335:27 - TSX so I think we're not using this
335:30 - import anywhere just do this
335:33 - interface and then uh export default
335:35 - function uh manage gig layout the
335:38 - standard layout return and then give it
335:41 - block space y six padding and stuff and
335:45 - then children and that's it if I go
335:48 - back refresh
335:50 - maybe but I misspelled
335:53 - layout layout like that and now it has
335:57 - some better padding so create will push
336:00 - us to
336:01 - create this is the create page and let's
336:04 - quickly speedrun the
336:06 - inbox so so in the um app we're going to
336:10 - create
336:13 - inbox. page.
336:16 - DSX and next to that layout.
336:21 - TSX and then we're going to
336:23 - saycore components
336:26 - slidebar SL index.
336:29 - DSX we will have in the sidebar conver
336:33 - no con
336:35 - conversation d list.
336:38 - X
336:40 - conversation dbox
336:44 - DSX so in sidebar index we want to use
336:48 - client and do the
336:49 - Imports uh we want to use Font popins
336:52 - this is weight and stuff
336:55 - interface children and then we want to
336:57 - say sidebar return and aside and then
337:02 - give it like this so it's going to be
337:04 - fixed sidebar as we scroll it will stay
337:06 - sticky on the screen to be fixed uh with
337:10 - 300 pixels hidden on mobile and large
337:14 - screen it's shown okay so first we're
337:17 - going to have a link that's going to
337:18 - link be our logo that will link to
337:21 - homepage so div image logo SVG height
337:25 - WID span class name font semi Boldt and
337:31 - then font class name so I think it's
337:34 - like to use this font
337:37 - that's why we are doing this so use that
337:39 - so we use that font and then close the
337:41 - span and say Gian so I this is like the
337:44 - name of my
337:46 - application okay and then below link
337:48 - we're going to say children
337:50 - so we're going to display children for
337:53 - this sidebar so this will be the
337:57 - sidebar now let's list all of the
338:00 - conversations so we're going to import
338:02 - all of this and use
338:03 - client so all conversations will be
338:06 - listed in the sidebar
338:08 - uh conversation list and then con
338:12 - conversation list conversation use Query
338:15 - API conversations get by user and then
338:18 - API users get current user if
338:21 - conversations is undefined it's loading
338:23 - same for current user Uh current user
338:27 - null it's not found and then user
338:30 - conversations conversations filter
338:34 - conversations that have conversation uh
338:37 - part participant ID is current user ID
338:39 - or participant 2 ID so participant one
338:42 - ID or participant 2 ID is current user
338:44 - ID so we check all conversations where
338:47 - either participant one or participant
338:49 - two is the current user so then we get
338:51 - those
338:53 - conversations then we
338:55 - return uh all conversation just
338:58 - text and then um user conversations map
339:03 - so we want to map the conversations and
339:06 - put in conversation in show box or or
339:09 - conversation
339:11 - box key because we are mapping
339:14 - conversation conversation so that's a
339:17 - prop current user current user and
339:19 - that's it conversation box so we're
339:23 - going to use client so this is going to
339:26 - show each conversation in the
339:28 - sidebar so for each user when we click
339:31 - this conversation box it will go to the
339:33 - conversation with that user so
339:35 - conversation will be uh doc
339:37 - conversations current
339:40 - user then we're going to say
339:42 - conversation
339:43 - box conversation current
339:47 - user conversation box router use
339:52 - router from next
339:54 - navigation uh other user ID will be
339:58 - conversation participant why one ID is
340:01 - going to be current user ID or a
340:04 - conversation participant 2 ID so we want
340:07 - want to check if other user ID is equal
340:09 - to no no no we want to check if
340:13 - participant wi ID is equal to current
340:16 - user
340:17 - ID then it's participant to one ID
340:20 - that's other user
340:24 - ID or participant to ID is the other
340:28 - user or if this is not equal then
340:33 - participant one is the other
340:35 - user okay
340:37 - uh other user use Query and then API
340:41 - users get ID other user so we want to
340:44 - get the other user of the
340:46 - conversation parameters is use
340:48 - parameters I think we need to read this
340:52 - read URL and then other user check so
340:56 - I'll show you what this is for API users
340:59 - get user by username and then username
341:01 - is going to be params other user name
341:05 - other username as string so we will have
341:07 - this um we will have this like in the
341:11 - link so we are getting parameters so
341:15 - conversations will be will have will be
341:17 - on slash index uh Slash inbox slash
341:20 - other
341:21 - username so we need to check the other
341:25 - username of our partner we are messaging
341:28 - handle click use call back this will be
341:31 - deprecated soon okay but I I I think it
341:34 - forced me to use callback okay um router
341:38 - push inbox other user username yeah so
341:41 - when we click on this conversation box
341:43 - you want to
341:45 - push the router we want to load this
341:47 - conversation so because this is in
341:49 - sidebar all of the conversations in the
341:51 - sidebar so this is going to change when
341:54 - router changes other user username
341:58 - changes okay so div handle click we want
342:02 - to pass in this and then other user
342:05 - check and other user check ID is other
342:09 - user ID okay
342:11 - so if the currently log currently loaded
342:15 - um
342:18 - conversation is so so in the sidebar
342:20 - we're going to have Mark
342:23 - clar whatever V whatever we have like
342:26 - three conversations if they currently
342:28 - logged in user currently uh shown
342:31 - conversation is of this one of Clark
342:34 - then we want to make this a bit more
342:36 - like Gray in the sidebar so in the
342:38 - sidebar it's going to show which
342:39 - conversation is currently logged in
342:41 - currently loaded we're going to check
342:43 - that by getting parameters from the URL
342:46 - and checking the name of the like the
342:49 - other user so if the name of the other
342:51 - user the ID is same as like the one if
342:56 - we just going to find okay you
342:58 - understand maybe watch again if you
343:00 - didn't I think I
343:01 - explained okay I don't want to waste too
343:04 - much time so uh we're going to display
343:06 - Avatar of the other user and other user
343:10 - full name oh that's it okay so that's
343:14 - it let me just go to API so let's create
343:17 - these
343:18 - conversations so let's go ahead and go
343:21 - to convex folder now we want to be able
343:23 - to create a
343:27 - conversation so we want to go to
343:30 - convex conversations.
343:33 - TS so let's uh go ahead and do some
343:36 - imports
343:37 - and then get by user is a query Handler
343:41 - check
343:42 - identity get current
343:45 - user if current user doesn't exist
343:47 - couldn't authenticate user conversations
343:50 - we want a query conversations
343:53 - filter so we have q. or so we're going
343:56 - to have two conditions so Q equivalent Q
344:00 - field participant 1 iD is current user
344:03 - ID or participant 2 ID is current user
344:06 - ID
344:07 - if we go to our schema. TS we see that
344:12 - conversations basically it will just
344:14 - have participant one ID and participant
344:16 - 2 ID so we need to find all
344:19 - conversations of the currently logged in
344:21 - user it can be either this or this
344:25 - collect all of them return
344:27 - conversations okay now let's do page TSX
344:30 - and layout TX TSX of
344:33 - inbox so Imports and use client
344:37 - inbox
344:39 - page um user ID is use store user
344:45 - effect if user ID is null is storing
344:47 - user we I don't know about this one I
344:49 - think we're going to delete this okay
344:52 - return um so this is like storing the
344:55 - user if user is not in database but I
344:57 - don't think we we're going to use this
345:00 - okay so div image empty inbox so we're
345:03 - going to display empty inbox here with
345:06 - height
345:09 - um title welcome to inbox and paragraph
345:14 - select a conversation or start a new one
345:16 - I'm going to comment this first of all
345:20 - and I'm going to comment this and I'm
345:22 - going to comment this because we don't
345:25 - need any of that let's go to layout
345:28 - TSX so um use client and
345:33 - imports so we're going to say export
345:36 - default function conversation layout so
345:39 - children and then you define type
345:41 - children children react node so you can
345:45 - like this is a different way to do this
345:46 - without defining interface you can also
345:49 - like do it like this extract children
345:51 - from like this type but you need to
345:52 - Define
345:54 - type return
345:57 - fragment uh div fixed okay so that's
346:00 - going to be a nav bar we're going to
346:02 - make it fixed on the screen and then
346:05 - padding top 88 pixels
346:08 - because we're going to show Navar and
346:10 - then sidebar and then inside of sidebar
346:13 - we're going to say div height full I
346:15 - think this is useless we don't maybe you
346:17 - don't need this conversation list that
346:19 - we just made and close div and close
346:22 - sidebar so this is going to be passed as
346:26 - props as children to
346:29 - sidebar okay then go here and just
346:31 - display children so this is sidebar and
346:34 - this is like the rest of the page so if
346:36 - I go head and
346:38 - refresh so this is what it looks like
346:40 - welcome to inbox start a new
346:42 - conversation all
346:44 - conversations
346:47 - now
346:48 - let's uh finish this
346:51 - functionality so in order to start a
346:53 - conversation we need to uh make page for
346:57 - conversation so here in inbox you're
347:00 - going to say other
347:03 - user name slash page
347:09 - DSX okay so here we're going to say use
347:11 - client and
347:13 - imports U form props so this is the
347:16 - conversation page that we are
347:18 - making uh parameters that's going to be
347:21 - string that's going to be URL
347:23 - parameters okay conversation so we're
347:27 - going to use State any oh my God why am
347:29 - I using any I don't know okay I think
347:31 - this should be Doc conversation but
347:35 - we'll fix it get us
347:38 - mutation API conversations get or create
347:42 - conversation and then conversation is
347:44 - use Query API conversations get
347:47 - conversation and by usern name so this
347:51 - is get or create and what is the
347:53 - difference between this and this I don't
347:55 - know we'll see when we are making I
347:57 - forgot I made this two months ago okay
348:00 - user use
348:02 - effect a call mutation that's going to
348:05 - be try
348:07 - result a wait so get conversation pass
348:10 - in username set conversation
348:14 - result catch console log mutation failed
348:17 - error call
348:20 - mutation and when get changes parameters
348:24 - other username
348:26 - changes okay so if any of this is null
348:29 - return loading which should not be
348:32 - loading oh it should be loading because
348:34 - this is null and these are on the find
348:37 - conis
348:38 - now this this should be undefined here
348:41 - I'm going to change it when I finish
348:44 - okay so log
348:46 - conversation um div div body so we want
348:50 - to show messages in the body form is
348:53 - like submit message send message so user
348:56 - ID conversation current user ID
348:58 - conversation ID will be conversation
349:02 - ID and that's it so I think first of all
349:06 - this this should be Doc and then uh con
349:10 - and then like
349:13 - this and then
349:17 - converations and this going to be an
349:19 - array or conversation yeah okay and then
349:23 - here I think if this is
349:28 - undefined okay now let's make these two
349:33 - but this can be null so conversations so
349:35 - this is or
349:39 - now okay now let's go here and create
349:42 - these two so in
349:46 - conversations in conversations TS let's
349:49 - go ahead and say export con get
349:51 - conversation that's going to be a query
349:53 - arguments username Handler check
349:57 - identity get current user the same as
350:01 - always check current user and
350:04 - then other user get the user as well by
350:07 - ID and check if yeah that's it other
350:10 - user and then get conversation filter so
350:13 - filter all
350:14 - conversations okay so we have two
350:16 - options we have that first user is
350:20 - current user ID and participant two is
350:22 - other user
350:24 - ID or participant two participant one is
350:28 - other user ID and participant two is
350:30 - current user ID this depends on who
350:32 - clicked on who which profile to create a
350:35 - conversation so that's or so this is end
350:39 - and okay unique must be
350:42 - unique get messages from this
350:45 - conversation that's crazy why am I doing
350:48 - it like this this should be do get and
350:50 - then conversation ID but no there will
350:54 - be a lot of
350:56 - messages this should be not filter by
350:59 - with index with index but okay you can
351:02 - do it with Filter as well with index is
351:04 - better by conversation IDE
351:07 - index okay because this is going to
351:10 - return all messages and then process but
351:12 - if you do with index then it's going to
351:13 - just return those messages it's not
351:16 - going to return all messages with users
351:18 - relation so the reason this is relation
351:21 - is because this is going to be a bunch
351:22 - of promises that we need to
351:25 - resolve um messages map so for each
351:27 - message you want to get the user who
351:29 - send that message why am I doing it like
351:32 - this I made this when I was still
351:34 - learning forgive me so I need to
351:37 - I should be doing it like this so just
351:39 - get and then the ID but
351:42 - okay uh let's see return message spread
351:46 - message and
351:47 - user message with users promise all yeah
351:50 - we're going to so this is a bunch of
351:52 - promises now we're going to resolve all
351:54 - of those
351:55 - promises return current user other user
351:59 - conversation message with
352:03 - users okay so that's it
352:07 - now let's create the other one so this
352:10 - one is get or create conversation so
352:12 - this is very similar so let me just
352:13 - speedrun identity it's the same get
352:16 - current
352:17 - user same same everything same you can
352:20 - copy paste other user get other same get
352:23 - conversation so this is exactly the same
352:26 - okay so if there is no conversation we
352:28 - need to insert a
352:31 - conversation so participant one is
352:33 - current user participant two is other
352:35 - user
352:37 - and then uh our
352:41 - conversation you need to get the
352:43 - conversation after we insert it we want
352:44 - to get the full conversation
352:47 - object okay so now we want to get
352:49 - messages this is same don't filter use
352:52 - with index so use r index instead of
352:54 - filter okay um the relation so we want
352:57 - to get oh my God this is this is Doc
353:02 - messages not any okay um so we want to
353:08 - filter find
353:09 - all find a user who sent this message
353:13 - and then return it we want to resolve
353:15 - all promises and we want to return
353:17 - current user other user conversation
353:20 - message messages with users because me
353:23 - this will have message field and user
353:25 - field oh okay so that's it now we have
353:29 - get or create
353:32 - conversation let's see what we don't
353:34 - have
353:38 - we don't have this components body and
353:40 - components form so let's go here in
353:43 - other username let's just have a new
353:45 - file uncore components SL body.
353:50 - TSX but I
353:55 - misspelled it's TSX and then form.
353:59 - TSX and then a message dbox
354:05 - DSX so this is the conversation body
354:07 - this will show all messages the body TSX
354:10 - so we're going to do
354:11 - import interface export the body page
354:16 - this should not be export default this
354:18 - should be export cons but this will also
354:20 - work okay um then we're going to say
354:23 - bottom ref so we want to make a div at
354:25 - the bottom of this body so every time a
354:28 - new message comes we want to scroll down
354:30 - to the
354:31 - bottom maybe I'm talking too fast so let
354:34 - maybe talk a bit slower uh use effect so
354:38 - if bottom ref current so if this div
354:41 - exists we're going to scroll down to
354:44 - this div when when messages change so
354:48 - when there is a new
354:50 - message we want to make a div so for
354:53 - each message we want to map message and
354:56 - index and in message box we want to say
355:01 - is last although I don't think we are
355:03 - using this so you can ignore this maybe
355:06 - keep key and message and that's it and
355:08 - then this div that's for scrolling and
355:11 - save it now let's do message box Imports
355:16 - and stuff interface it's going to be
355:19 - message and is last Boolean that's
355:22 - optional um extract and then export
355:27 - default current user current user is
355:30 - undefined return loading okay so is own
355:34 - message. user ID is current user ID so
355:37 - if message is own then we will show them
355:40 - to the right if the user the message is
355:43 - not own then we will show the messages
355:44 - to the left and there will be some other
355:47 - styling differences so container of the
355:50 - message we're going to say this and if
355:53 - it's own we're going to justify at the
355:55 - end so we're going to show to the right
355:58 - Avatar is own order two what is order
356:02 - two I don't know okay Body Flex Flex
356:06 - scull Gap two is so body we're going to
356:10 - put items at the end if its own
356:12 - message message style so if it's own
356:16 - it's going to be a bit different colors
356:17 - and text yeah text white color
356:22 - different and then so this has false
356:25 - question mark R okay so this will never
356:28 - so this will never show this will always
356:30 - show because I was doing something I
356:32 - just left it here so you can it's okay
356:35 - you can change if you know how to if you
356:37 - don't know you don't need to change
356:40 - it uh div so we are now show this is
356:43 - container Avatar it has avatar from uh
356:47 - at C atui components
356:51 - image message user profile
356:53 - URL okay so call back this could be also
356:57 - be the first name user for full name
357:00 - character at
357:02 - zero okay so this class is body and we
357:06 - want to say class message style and we
357:08 - will display message text here and below
357:12 - that we want to say uh when the message
357:15 - is sent so format new
357:17 - date and then we want to say is last is
357:21 - own and message scene and then we want
357:23 - to display like scene status but I think
357:27 - I I just I didn't have time to implement
357:29 - this so this doesn't do
357:31 - anything let me see here current user is
357:36 - possibly null so I'm going to say if
357:38 - current user is null return
357:43 - null okay that's
357:46 - it form TSX so we're going to use client
357:51 - and
357:52 - imports form
357:54 - props user ID so this this form is for
357:57 - sending the message we need user ID and
357:59 - conversation ID to send a message who
358:01 - sent and conversation in which it's
358:04 - sent uh okay so const form and then
358:07 - export default although this should be
358:09 - export const but then you need to change
358:11 - the import as well so you can do it like
358:13 - this as well text set text of the
358:16 - message and mutate and pending from API
358:20 - messages
358:22 - send then handle
358:24 - submit if text is empty return we're not
358:27 - going to send empty message mutate text
358:31 - user oh you don't need to you can leave
358:33 - it like this because it's the same name
358:35 - as this prop so user scene fals
358:39 - conversation
358:40 - ID then set text of the message so of
358:44 - the input field to
358:46 - empty and console log any errors and
358:50 - then we want to display so we want to
358:52 - display input field so div again div
358:57 - again input placeholder enter
359:01 - message class name value text unchange
359:06 - is set
359:07 - text on key
359:10 - down if key is enter we want to prevent
359:13 - default so we don't want to I think go
359:15 - to new line or something I'm not sure
359:17 - but just handle submit so you can also
359:19 - send message if you press
359:22 - enter and Below or not below this is
359:25 - going to be next because this is a flex
359:28 - Flex box so we have type submit class
359:31 - name on click handle submit disabled
359:35 - pending
359:36 - we're going to close the button and
359:38 - we're going to say hi paper airplane
359:41 - this is a icon from Lucid react size 18
359:45 - class name and stuff so that's it we
359:49 - just need to go ahead and make like
359:51 - sending
359:52 - messages so let's this is I think the
359:55 - the absolute last thing we are doing
359:56 - maybe uh maybe so let's go here in conve
360:00 - and say messages.
360:03 - TS so here we're going to say all of
360:06 - this stuff send
360:08 - mutation arguments text V optional v
360:12 - string send ID image URL option okay so
360:17 - these are all of the arguments so image
360:19 - URL scene that we are sending everything
360:21 - ID conversations
360:23 - Handler and then we need to extract all
360:26 - of these from arguments if you want to
360:28 - you can also say arguments. text you
360:30 - don't need to extract them okay let's
360:33 - insert a new message into database and
360:35 - pass in
360:36 - everything and that's it that's it for
360:39 - inserting the sending the message then
360:42 - we go get the message return AWA context
360:46 - database query messages collect so this
360:48 - will return all
360:51 - messages why would I need this I don't
360:53 - even know if I'm using this honestly
360:55 - this is completely unfiltered okay get
360:59 - last I don't think I'm using this what
361:01 - do you mean get
361:03 - last okay I I if I'm using this we're
361:07 - going to we're going to return maybe
361:10 - here so in order to start a conversation
361:12 - I need to log out into the different
361:15 - account and go to this guy's gig and
361:18 - start a conversation from there so I
361:21 - logged in into different account and I'm
361:22 - going to go to this user's profile and
361:25 - I'm going to say send message wherever
361:29 - that's supposed to
361:32 - be no on the gig so go back to the gig
361:35 - and say send message
361:38 - here so this is a conversation that's
361:41 - created and if I say hi if I send
361:47 - it that's
361:51 - crazy it works

Cleaned transcript:

learn how to create a fiber clone with nextjs react convex typescript Tailwind CSS and Shad Cen this is a great project for improving your skills as a full stack developer V created this course he is an experienced full stack developer in this video we will create this Fiverr clone platform that lets users post gigs and lets other users buy gigs so here is a four G example gigs but there can be as many as you want so if I go ahead and click on this gig it will load the gig page here we have images H then we have uh all about the user and the gig we can leave reviews there is also uh basic standard and premium offers for example short here medium and long here if I'm the owner of the gig I'm going to have edit button but if I go ahead and change my account I go uh with Google on this other account I will be able to uh order order now or send message so if I click order now it will send me to the stripe checkout page and I can purchase here so if I want to start selling from this account then I'm going to click connect stripe and this will connect a platform's stripe to my stripe so I can start selling and the platform will take a 10% cut or 5% cut whatever you want to take I can also send message to this user if I have a question about his gig so this is the list of conversations that I have with all of the users and I can say hey tell me more about your gig and from this other account I can go to the Inbox and if I click this then we can see all of the messages I can respond with hey with this other account I can go back to homepage by clicking here so I can also uh search so if I search for haircut if I press search it will only show the haircut I can also favorite the gigs so if I go back I'm going to favorite this one I'm going to favorite this one as well and now I can only show favorited gigs so it's going to be these two but I can unfavorite them so it's going to disappear or I'm going to toggle off favorites I can also toggle by category so if I click switch to selling then it's going to display all of the gigs I'm selling and if I click to create I can create a new gig for example I can say I will develop your website and I can choose a category and subcategory ategory front development and if I click save it's going to be saved successfully and it's going to redirect me to this uh gig and now I can choose a choose a file to upload so I can upload this image uh click upload image and then I can give it like title so small website price $100 for example and whatever the description I can adjust all of this I need to save this I can save standard premium versions and then I can add a description as well and then I can publish before we start with the tutorial I invite you to join my school.com uh group where we teach web development so you have all of these courses and there is a community where you can answer questions I will be here for one or two hours every day and answering all questions and there will be live sessions and everything so um you can read more on in this description let's start by making a repository name and then MIT license and create it I want to go to code https and copy this go to folder where you want to download this and then run CMD git clone and then just paste that link we can exit this and go to next1 for fivr here in nextjs documentation I will copy this npx create next app next app at latest and you must have no JS 18.7 or late so here in this folder let's run a new CMD inside of it and just uh copy this and then add dot so we install this in the current folder the nextjs while this is installing let's go to clerk.com Let's also go to convex this will be our database and clerk will be our authentication so let's go to dashboard I will create a new application I will name it Fiverr clone Lo and enable Google and email create application so this is the documentation but we will go here to JWT token because we need to conve connect this to convex our back end so let's create a new template convex and just save changes now in convex let's log in if you want to learn more about this setup just go here uh look at this setup and de development guide it's 1 hour long everything is explained in deta I will just do this quickly now I will also go here and say clerk convex setup and I will click here convex clerk from convex docs this is the documation so we already created clerk created JWT token so this is what we will do next but after we install the proper package let's continue with nextjs installation so press okay to proceed it's going to install this package would you like typescript yes sink yes Tailwind CSS this yes no to Source directory yes to app router import we don't want to change this so if you want more explanation go to the video that I explained so all of the files are added right here we wait for this to install after nextjs installed let's look for Google setup so go here nextjs quick start not Google but conve setup and then uh let's this actually changed but let's skip this we're going to do this manual so npx create next app this is we already did this we created next app and then npm install convex so let's go here and install this after this we need to say npx convex Dev to activate convex so convex is our database so let's go and run that if this is your first time uh using convex then it will prompt you to log in in but okay so this is my page and I have four projects and I can have up to five projects so I'm going to create a new project the name I'm going to keep this recommended name and just let it run and we are going to just let this run because this will let us have realtime updates so whenever we change something in the code it's going to automatically reflect update in our database so right here with this we see that we got this new database and there are tables files everything is here so we will leave this running and we will start a new CMD for something else now let's look for shot CN xjs and the these are uh components to build a component Library so we're going to start from here npx shoty and UI latest in it so let's copy that these are like buttons and everything we need so let me paste this and you can go here and check like for example here button this is what it looks like and this code for this button will be copy pasted into your code so you have full full control this is not like material UI where you call apis and then but this is just this is copy paste and you have full control you can edit everything so which Styles would you like to use for shaty and default and then slate or neutral whatever color you want I'm going to choose slate uh this is yes and just wait for a moment let me start a new terminal and then say code dot to open this uh path into vs code code editor now let's go here to convex clerk setup so we were here already and then we're going to uh create a new folder out config DS in convex folder so go here to convex folder and create a new file out config TS and save and go back and copy this I'm going to copy this and then here we will just paste and save and now we need this issuer URL from our clerk so let's go back to clerk dashboard and here where we created this convex JWT token let's copy this ISS copy and this must name must be same convex as this here convex so let's paste this issuer URL I think you should keep this trailing slash and save now let's add all of the components we we will use from shoten so here in the button I'm going to go here and copy this um choose npm in my case but we will add some more these are all of the all of the ones that we need so it's going to be a core Dion alert dialogue what was it uh aspect ratio Avatar you can go and check what each of these does if you want right now or we we will also do it later car carel carosell and then we got dialogue drop checkbox dialog drop down menu so checkbox dialogue dropdownmenu I don't want to bore you so these are all of them just write them or you can write them from here and then I'm going to copy all of this and go here into Shard CN wherever and just paste it and run this is just a normal terminal it's not sh and just terminal at this directory so now you can check in your app folder this is all of your code and in components UI is where these components are getting added from Shaden right now let's return to convex clerk setup so we need to npm install clerk clerk react but it's actually we don't need to install that let's go and search for uh clerk nextjs setup and then this quick start so it's going to be different so it's going to be this cleric nextjs so so let's copy this and go to a terminal and just install that and then we're going to copy paste this API keys but not this ones because I think this ones the document documentation are wrong so let's go back to Clerk and here in API keys and I will just copy these two and let's go back to and look for env. local file and Below just paste it like that that's it so now let's run npm run Dev so that's going to run our application Local Host 3000 when it says ready you need to go and refresh because you must pull data for the first time you need to refresh so now it's compiling this route so this is our current APP uh let's first wrap this actually we need to add middleware so in the clerk nextjs setup uh scroll down and we're going to make this file middleware TS make it outside of everything so click on the outside file and paste it and then copy this and do that so this is the middleware that will not let us uh like so we can Define for example if I go here and I'm not logged in it should not let me uh visit this page so here it's prompting me to log in so let me say continue with Google and now that I'm logged in now it works but also we need to provide our database to this application we need to wrap our database uh in the application with the database so we're going to go on the outside and we're going to create a new folder call it uh providers and inside we're going to create a new file convex D clientprovider TSX so we will wrap our database with this not the database but our page with this database so first we will go ahead and say use client because this is going to execute on client so nextjs has server components that execute on server and client that execute in the browser so when you are using hooks you need to use clients so I will show you then all of these Imports you don't need to import them right now whenever I have these Imports you can import them as we program so it's going to recommend you Imports but you will not have this this is what we are going to make so you don't have this one okay next interface convex lion provider props uh and then children is going to be react. node so we are going to wrap I'm I will show you let's go to the app let me save this let me go to app um layout and here scroll down so you have this children we're going to wrap this with convex client provider and then close it like that but we cannot import this because we are not exporting this from anywhere yet so it's it's an error for now so this children this is like the page everything like the page the whole page is here so that's going to be passed into our interface so let's now say con convex URL we need to initialize the convex database the back end process and convex public uh next public convex URL and this you make this to make sure that this exists so if I delete this I think it's going to throw an error because it's not sure if this event exists but if I say exclamation mark then I'm telling it this 100% exists in myn dolal f file so if I go to n. loal here next public conx URL okay then const convex new convex react client this is one that I imported here and passing convex URL to initialize the new convex react client then export const convex client provider so this is what we will Import in the other file we need to export it here and then let's give it this interface react. FC and then convex client provider props the interface that we defined it and then let's extract this children so make an arrow function and then extract children from this type so now we have these children this is the page that's getting ped and we're going to display this children so let's make a return okay we wrap everything with clerk provider this is our authentication provider then convex provider with clerk we imported that as well then we need to pass use out as use out so use out is from clerk nextjs then client convex uh this is the convex that we initialized okay so if the user is not authenticated show children authenticated show children and out loading so if if it's checking while if it's authenticated then just show the loading component if we don't have it's like a loading screen spinning bar so that's it so this is this is what we want to do okay so this uh component out loading doesn't exist so let's copy out loading close this and let's first go back to our layout TSX and we need to import this so I press control space to import to get these recommendations and like this and also provider I'm missing an O here so now we gave um database we wrapped our application with the database so let's go to components and create this out loading so let's just go click components new file paste it out/ loading. TS xx and this uh when you say out/ loading it will create a folder out when you put slash in the loading component first import image from next image then we will export cons loading Arrow function return give it a div with class name and then say height full WID full Flex so this is Tailwind CSS justify Center item Center and then image and Source will be/ logos SVG so let's copy this uh logo SVG and we need to go to um public folder here and make a new file logo SVG so now let's get this go to logo ipsum docomo for development you cannot use them in production but maybe you can contact them if you want so I'm going to scroll down and let's just select this logo let's just click to copy and just paste here the SVG so uh when you say slash logo SVG this will look in your public folder for logo SVG file then alternative loading then width 120 height 120 and then uh class name to be animate pools duration 700 so this will just be pulsing like animation that should be it if I go ahead and I so we have a problem here yeah okay so this is the posing animation you see let me show you again that's how it works but I want the logo to be on the center so to to fix that let's press contrl P to search and look for globals global. CSS it's right here in the app folder Global CSS and let's make some space and say column root HTML body to be height 100% and save it so this will need to recompile a little bit and also uh you should always get add git clone so git add dot to add everything all of the changes git uh commit message will be out and database and git push dasu origin main so now everything is in our uh our GitHub folder and now let's see if our logo updated so if I refresh logo is in the center this is important because all of your stuff will not be centered if you don't have this nothing will be centered not just logo loading screen let's start coding our website so now in the app folder make a new folder seller and inside make a new folder in square brackets username like that so when you have um so this is going to be SL seller this route will be SL seller when you have seller folder and then uh when you have username in square brackets this can be anything so when you have square bracket so it can be slash slash seller and then slash any username and inside add a new folder manage sl gigs and add a new folder inside create and add a new file page. TSX so the route here is going to be SL seller slash anything SL manage gigs SLC create and then when we go to this route SLC create this page DSX will be displayed it must be page DSX the same exact letter same exact capitalization so if I go here slash uh seller and I have all of this manage G SL create so this is where we are going to create gigs so uh and when we click switch to seller then we're going to switch to selling then we're going to go to this SL seller SL username Etc but when we say switch to buying then we're going to go to the not this route but homepage route so let's uh create some page DSX so you don't need to import this now you can import SB code create interface create gig props parameters that's going to be username so we want to actually receive uh this parameter username from the URL so when you have square brackets not only can this be anything in the URL but it also can be uh can you can take it as a par parameter you can get it as a parameter by doing this interface uh defining this interface and then saying params and then username so it must be the same string as this username and then let's export default create gig so let's create con gig and then let's extract these parameters from create gig props let's just extract it like this so we can use it then return div class name Flex justify Center and create form so this is a component that we will create we don't have this component yet and then um passing username as parameters par. username because we defined here that params has attribute username so params do username okay let's copy this component soore components slre form and here click to this page and next to it create a new file underscore components create new form. DSX so this will create a component folder a component this components folder and when you have underscore in the component that means this will not be a route and this will everything inside will not be R so if I make new more folders they will not be they will be ignored by URL this cannot be accessed through URL if it has this underscore now let's start coding this create form TSX so we're going to use client now don't import any of this right now we will import them later but we will first need to install this Zod and react hook form so let me go here and say npm install react hook form and Zod and um I'm also not sure why this form was not installed from uh shaten and this input so let's go to another terminal so type npx Shad cn UI at latest ad input form so now uh we will also need to create this by the way but not now okay let's continue uh let's create interface create form props and it's going to be username string so as you remember we are passing in the username const create uh form schema z. object object so we need to Define like type the schema for the form so we can check if it's correct it has name of the gig and category when we are creating a gig so we need to select those title Z do string minimum 20 characters and then message title must be at least 20 characters so if this is not 20 then this will be the message that we will display uh and then Max 100 title must not be longer than 100 characters categories then Z string so this is going to be a category it's going to be string required error please select a category sub category ID Z string please select a subcategory so I think I accidentally named this I so this should just be like either sub so have consistent naming like either both ID or no have I don't neither have ID type create form values z. infer type of create form schema so we will uh this will be we will create a type for the form values infert from this schema so it will be like this kind of object with this field this field this field Etc default values partial create form values this is a type and then title is empty that's going to be our default value export con create form we're going to extract username from this interface that we are getting so create for props con categories use Query API categories get so we're going to have a list of categories and we will retrieve all of them then const subcategories set sub categories use State and then doc uh I will explain what this is Doc subcategories and give it array and give it execute it and set it to empty array so we're going to create a schema for our database this will be a table in our database subcategories so if we want to get it will have Fields like subcategory Name ID Etc so if we want to get that if you want to get that table and convert it to a type so for example this is going to have the type of the same type as this table so each field this is how we get those types and if you don't understand it will be more clear when we create this okay then we're going to say const and extract mutate and pending from use API mutation and then pass in API gig create so we did not create this yet so we will make it so it's this one that we don't have okay I will explain more and then con router is use router and then use form so we need to create a form create form values uh Zod resolver default value so we are initializing the Zod form and mode on change so why are we using for why are we not not just submitting data through an API like through axios or whatever because we need to check the validity of data so we want to check if this has 20 to 100 characters if this is this is required Etc that's why we are using this like Zod form okay function handle category change and then we're going to get category name if categories is undefined return so if there is no categories in the database here and then uh selected category will be categories do find category where category name is equal to this category name so category will be like a big object with many attributes so that's how we're going to select this category if selected category set um sub categories sub select a category. subcategory so each category is going to have all of its subcategories so once we select a category for example uh computers we're going to have all of the subcategories we need to set the subcategory so user can choose from those subcategories okay function on submit data create form values so mutate this is the mutate that we are going to create so this mutate will create the gig this is the mutation gig create and then we pass in title the data. title for the gig description for the gig subcategory ID and that's it then when this mutates when this creates then we want to uh get this gig ID as parameter we will get it returned from this mutation and then toast info gig created successfully so toast is just alert notification you don't need this and then router push we want to go to that new created gig so we want to go to seller username manage gigs edit and then gig ID catch if there is an error in this mutation we want to toast error fail to create gig return okay now let's return the form so this is what's going to be displayed in the page so we want to spread out this form which is this so we're going to spread all of the attributes and then for form so this is how we Define form with Shi and it's a bit weird you need two of these okay so on submit you're going to say form. handlesubmit on and then pass it on submit so form. handle submit it's this form it has handle submit which is not shown here but it has this so use form has handle submit attribute and this is our onsubmit that we are passing in so we're passing in on submit okay form field control um form. control control name title render so this is how the form will be field will be displayed so we're going to extract field object it will be Arrow function form item for message so this is uh the message like this error message please select a category so this is the error message uh form label title form control input placeholder I will do something amazing and then spread this field so this has some attributes like title category subcategory so this will basically be I think yeah we're just spreading the attributes okay form description craft a keyword reach gig title to attract potential users below that another form field form. control category render form item uh error message category is the name the label select now we're going to use select from shot CN and we're going to select between all of the categories so on value change we're going to call say category name String and we're going to say field on change category name handle category name category change so this will call our function that we defined here handle category change if you select the category and load subcategories okay next default value will be field. value so we already I think defined default values or not somewhere here default values here but there is nothing so I think this will be just empty then okay form control select trigger select value placeholder select a category I will explain this select trigger so when you click this you will open the select body so or select content that is so if categories exist and then we want to show select content categories do map we want to map each category we will get category select item so we need to pass in key whatever just so react can distinguish between these all of the categories all of the components value will be category. name this will be a select dropdown menu and then uh you will just display category name as like text so user clicks it when user clicks it the value will be the category name and then SE close select content uh form description and also yeah so that's it I think this is this should be understandable so when you when you click this select trigger when you click inside this component select a category then this will open select content but but it will only open if categories is not it exists is not null and then when you click it the category will be set okay go below and say button submit type submit disabled pending so when gig is being created here on the top we have mutate and pending mutate is creating the gig so while this is being created we're going to have pending and I want to disable the button when this is pending gig is be created then we have for field uh this is for subcategories Name subcategory ID so must be the same name as this subcategory ID in our Zod render field form item for error message subcategory on value change field.on change default value field value form control select trigger uh select a subcategory and then select content and then we want to say subcategories map subcategory index we want to show all of them so select item will be key index value subcategory ID and then subcategory name yeah we need to name this subcategory ID because we are using ID in this case not the name I think that's how our database how we made our database okay and then form description subcategory we will have buyers pinpoint your service more narrowly so that's it this is the whole uh this is the whole thing we just need to like make some of these uh uh some of these dependencies let's first create this database uh like tables so let's go here in the convex folder create a new file schema TS okay first we will make some imports but you can import them as we go let's export default Define schema this will be our database table schema then uh Define table users so it's going to be defined table and pass in object full name is v string username is v string title this is just like like title of the user whatever like uh software engineer about uh portfolio URLs I'm actually not using this in the app but if you want you can add this but for now they don't do anything uh profile image URL favorite seller IDs so which seller has user favorit and saved token identifier this is the token identifier of the clerk so clerk authentication has this token identifier for each user that we will save in user's database for each user and this is how we will search the user with this in the database I will show you custom tag uh for user and then stripe account ID and stripe setup complete so what you can do is uh in your platform you can have all of the sellers and then you can give them a stripe account so stripe allows you to make sub accounts for each of your you sellers so you can pay them to their stripe account to their like sub account and then from their sub account they can transfer money from to their real account or to their bank account so you can create stripe sub accounts for each of that's what stripe allows you to do uh so we are going to we want to search by token identifier so if we have a token identifier we want to search all of the users to find this particular user that's with this token identifier and we're going to use that for the currently logged in users so the currently logged in user with clerk we're going to get uh that user from database as well so we make an index by token this is the name and the field that we will search users by is token identifier index buy username username um we can search by username as well okay let's make a new table reviews author ID that's going to be ID of users seller ID of the review gig ID so reviews will be attached to gigs comment just the text communication level is going to be number from uh 0 to five recommend to a friend number service as described all number 0 to five we want to search by seller ID so we want to get all reviews for a particular seller seller and displayed on his uh on this seller's profile and then by gig ID all reviews for this particular gig and displayed on gig page let's define table skills so that's going to be so this is user skills so for example PHP JavaScript whatever so v string and user ID this is one to many so if you have one to many relation it's best to where there is many you make skills skill and then you uh go back to the user so the many in many table you reference back to the one to the user because one user can have many skills okay so we want to search by user ID let's define languages for that user speaks so language is v string user ID again one user can speak multiple languages so we in the language we reference back to user ID search by user ID user Flags user ID uh marking type why did I call I forgot why I call this marking type and then description so user Flags I think that's like similar to tags like user tags I will see what what I use this for okay countries country name user ID so one this is one to one relation because one user can have one country index by user ID okay gigs title of the gig description of the gig seller ID so one user can have multiple gigs one seller okay subcategory ID and published is going to be Boolean true or false clicks just the number of clicks of views to the gig and then search index by seller ID by subcategory ID so we want to display all gigs from a certain subcategory by publish we want to find all publish gigs for example and then search Index this is this is like text search so title so if we want to search for all gigs that contain like I will give you a haircut in the title this is just text search offers okay so offers uh so each gig has three offers basic standard and premium so gig ID for this particular offer title of the offer like uh haircut for long hair that's going to be like a standard or premium haircut description of the offer and then tier so tier can be V Union of V literal basic standard and premium literal means this will be like the value the value of this will be basic so we so this tier can be either basic standard or premium price so the difference between tier and title title is just like um you you understand I think so price of the for this offer delivery days for example two days revisions so for example I offer two revisions stripe price ID so we will connect each offer to a stripe price ID we will create a price in stripe okay search by gig ID so we want to get all offers three offers for this gig by tier I think I'm not using this why why am I searching for tier I don't know by gig ID and tier uh maybe yeah maybe if I if user clicks on a particular then I need to search for get that from database uh we'll see orders so when you once you click offer you make an order it's going to go here so offer ID for this order gig ID buyer ID that's going to be users fulfillment status that can be fulfilled waiting pending whatever fulfillment time so um in how much time do you expect this to be fulfilled uh index by buyer ID and by gig ID so if you want to find all offers for a gig and display this gig has 20 offer 20 orders gig media is just a table because each gig can have multiple images videos whatever so I have a storage ID so so when you upload image it will be stored in our convex back end and the ID of that storage point where that image is stored the ID is we're going to save that ID here so then we will use that ID to get a to convert it to get a downloadable link so we can download the image from that link but for now we just store storage ID format is mp3 mp4 jpeg whatever gig ID okay so gig media gig ID uh index by gig ID search by gig ID and by storage ID okay categories name of the category and that's it subcategories category ID so one to many relation so when you where you have many you point back to the one so for each category you just subcategory you point back to the category and the name of the subcategory index search by category so get all for example get all subcategories of programming okay by name also search uh FAQ frequently ask questions question answer gig ID messages user ID uh text image URL if you want to send image it's optional optional scene I think I'm not using this but you can make it if you want conversation ID uh yeah so each message will be connected back to the conversation and user ID this should be called like sender ID or author ID of the message index search by conversation ID so we want to get all messages from this conversation for example and then list all of them and then conversations participant one participant 2 this is the easiest the fastest way to do this although you can do it in a different way but this is one that works for me the best it gets very complex if you don't do it like this okay and then we can search by participant one ID or search all the conversations of participant 2 ID participant 2 so we want to display all conversations of a certain person to the like to the sidebar okay then user favorites this is uh all of everything that user favorite let's see what I'm not sure I forgot so user ID gig ID yeah so all of the gigs that that user favorited and that's uh we must search by gig ID and by user gig so we want to check if for example user has favored this specific gig then we would use this by user gig and then by user as well this is our schema. PR now make sure you have uh your npx convex Dev running so npx convex Dev so once this starts running it will update all of this will um generate these tables but we have a problem and the problem is in our create form uh create form from create page we don't have this api. categories we don't have API gig create we don't have any of these database functions so let's create that first let's go to our convex folder next to schema TS and say gig. TS so first we're going to do some imports that you can import later not now so this is if you want to read more about internal mutations but you can also learn from me okay export con create there's going to be a mutation mutation is a database transaction so what it does it is uh updates database adds new rows or adds new rows to table removes a row whatever Etc okay ARS arguments that we pass to this mutation are going to be title which will be v string description v string and subcategory V uh v string as well subcategory ID and then we need to pass in Handler function so what's going to happen in this mutation asnc context arguments first we need to check if somebody's logged in into our app we need to have a logged in user so identity is equal to await context out get user identity so this is this context get user identity this is going to be um a the clerk ident a token identifier okay so this identity is from clerk I'm pretty sure so if there is no identity throw new error unauthorized okay so we're going to return ID once we create the gig but first we need to get the user with this identity from our database so this is the logged in user from clerk but we need to Now find this user in the database and get that user object yet that user row okay so then we're going to contact database query users table users and then with index so as you remember we defined index by token so that's going to let us query users by token ID token identifier so first is the name second is this Q Arrow function and then Q do equals token identifier the field token identifier of the user in the database is going to be equal to identity. token identifier so we are looking for the user in the database who has this token identifier of the currently logged in user and do unique will execute this um query and it if there is more than one user with token and identifier then this will throw an error because there shouldn't be more than one so that's why do unique okay now con gig ID we're going to create a gig ID with this user as author as Creator and when we create something in the in this like mutation in the database we are going to get gig id id of that create thing back so await context database do insert so when you use insert you get ID of the insert the thing back insert into the table database uh into table gigs and then pass in object these are parameters title is arguments. title so arguments are here that we pass description arguments description subcategory ID is argument subcategory ID but the okay I'm going show you the problem here is string is not assignable to ID subcategories so this is going to be a string because here it's string so one way we can deal with this is we can convert this or cast this as ID subcategories seller ID it's going to be user question mark ID exclamation mark so this is checking if user exists maybe user is null I think it's better to check it here but okay so if user exists it's going to be ID and exclamation mark means every user has ID so you don't need to worry about if maybe user doesn't have this ID field published false by default clicks or views zero let's save this and that should work I think instead of casting this from string to this you can just um remove this and keep it like this but now this should be here and then import was the problem okay so well I think we cannot do this so let's just go back and cast this into this ID subcategories and that's our create method we also in the create form we need to get this categories. getet so let's go and create in the convex folder next to Gig say categories categories. TS in the categories we will do some imports okay so export con get query so query is different from mutation because query is not changing the database data he just retrieving but one advantage with query is that once the data changes if for example I'm displaying something from database and that data changes the database some other user on the other part of the world changes it it will automatically update on my web browser so query will pull automatically in changes and update my web browser client Handler so uh we should have passed arguments here actually but okay let's for now just uh have a Handler function there is no arguments const categories await context databasequery categories collect all so we just want to collect all of the categories in the database categories with subcategories relations so why is it why is it relations you'll see you say categories dot map you want to sorry you want to map categories and for each category you want to run context databasequery subcategories so you want to for each category query subcategories with index by category and pass q q equals category ID is category ID so you want to query subcategories get all subcategories that point that are subcategories of this category and do that for each category and collect all of them so this will this is same as unique this will execute this uh and collect all of them then subcategories so when you get all the CATE subcategories you will return an object spread category and say subcategory subcategories and so right now if we take a look at this object all of this what all of this returns it's a promise and then object array of objects and it has subcategories array of subcategories and then ID of the category creation time and name category so this is what you do when you spread this you spread it into uh these three and then when you add subcategories then besides these three you also add array of subcategories okay but why is this relations because this is a bunch of promises you need to resolve these promises so go here and say categories with subcategories it's going to be await promise. all and inside pass this these relations and now this is not going to be promises this will just be resol promises like this actual array of objects and just return categories with subcategories so this is to get all of the categories now we made this we made the other one as well so let's go back and run npx run Dev again and the looks like it successfully added all of these tables indexes everything is working we only have uh one more issue but in our convex uh Dev we can check all of the tables that got created so for example users table everything is empty for now and in functions we can check our function that we just made so categories get and gig create this is the categories get is the SIM code and gig create and lastly we need to create these hooks use API mutation so let's go to outside file create a new file hooks API mutation. TSX first we will use client then we will import uh these Imports and then we will say export con use API mutation and we will get in mutation function it can be any I don't know how to do this without any so if you know please tell me const p pending set pending use State false so while the mutation is executing the database is being updated we will set pending to true so API mutation it will be this mutation function so use mutation from convex react mutation function so if you I don't know if you if we did this but if you have a mutation so let's say creating a gig you need to First initialize that mutation with this used mutation hook and then it's going to be this API mutation variable so whenever you call this like API mutation here for example like that it's going to call this mutation function whatever we passed so for example in this other case here we are passing uh API uh gig create into use API mutation so that's going to be this mutation function create and then you're going to pass it here here so this will initialize this mutation and then we can call it here so let's go next we're going to return mutate and pending we didn't Define this mutate yet so mutate let's define this mutate payload that's going to be arguments set pending to true and the in the beginning of the mutation then return API mutation is this one with payload and then finally when it when the IM mutation executes we will set pending to false uh and then uh after so finally is happening after then after then and after catch so finally is at the end but when the after the mutation executes we're going to have this then return result and we're also going to catch error throw error so this may be a little bit confusing so um the way the reason doing this here is so I have this pending State here's how it works let me just show you once again so we have this uh create mutation API gig create this is going to create a new gig so we need to pass this mutation function into our use API mutation that we did so this is the mutation function then we need to initialize uh mutation with this mutation function so we pass in mutation function into use mutation to initialize this mutation and now that mutation will be saved into this API mutation and now whenever we call this API mutation with these brackets it's going to like update the database it's going to execute this mutation and the payload so um the payload comes from calling this mutate so as soon as we call this mutate we will then execute this API mutation and this mutate we call that with payload we export it here so the way we call mutate is here if I go ahead and find it somewhere here we are calling the mutate we're passing in title description sub subcategory ID so we call this mutate with payload we set pending to true and then we use this API mutation with this payload that we passed in into mutate and then so I I'm going to set this finally like here so it makes more sense and remove this okay so after the mutation is executed you return result so that's going to be returned where you called mutate so here so if I say a variable const result equals mutate it would be saved there but I need to await I think also if there is an error throw error and at the end just set pending to false so if we go ahead to SL seller and then whatever the username it doesn't matter here at all manage gigs and then create we can see this now title let me just say whatever it's not important for now category we don't have any categories we don't have any subcategories if I click save these are obligatory so let's create these categories and subcategories into the database this is what it's going to look like once we add categories in the database let's first there are multiple ways to do this but let's create SE categories. TS in convex folder and then add some imports these are the categories that we will have so it's an array it must be name web development so you can copy this from my GitHub or you can generate it with jpt or write it yourself and then export con create mutation Handler identity check for user identity we already did this and then we will just return nothing and for each category so for each of these categories we're going to map and get category await context database insert into categories name will be category. name and that's it that's it so this is going to so as soon as we call this create it will insert all of these 10 categories into the database so we can call this anywhere so let me just call this whenever I refresh this create page so let's go here to the the create page that we made and let me start with some imports uh import use effect from react and use client and then con insert categories is use mutation API seat categories. create so this is the mutation function that we're going to initialize and then if we call this so we're going to create use effect so as soon as the page loads we will call this insert categories and pass empty object as arguments because the the there isn't there aren't any so if I go ahead and delete all of the documents as soon as I go here and refresh this page it will automatically use use effect and it will add okay there is 20 I mean one uh way we can fix this is just delete the last 10 so from web development until web development just delete all of these or you could have inserted this manually or whatever but I I wanted to show you through a script so you could have just went here a document and then um like say name this so this is a way oh my God we could have just copied we don't need to write all of this even but I want to show you how to do it through this so we could have just copied all of this and like that and then save and it's going to insert all of them now to add subcategories let's create seed seed subcategories dots in convex folder start with some imports so you need to copy this from here or generate it from cat GPT what's important is the number of subcategories per category so for me it's seven so my code works with seven you can you can change this code okay um let's let's export con create mutation Handler return nothing check logged in user categories so we're going to query all categories collect all categories and then we want to check if we want to also collect all subcategories and if there are subcategories you want to return so we don't want this to add two three times same subcategory so this is just for checking if there are already subcategories after that we will say await promise. all categories. flat map the difference between flat map and map flat map will flatten arrays I think so if it's mul it's multidimensional it will flatten it into onedimensional okay uh and then const create subcategory uh category subcategories so for each category we want to map const category subcategories so we want to look at these subcategories and take First Seven and then second seven and then seven again so this is what code does it say subcategories do slice index time 7 from this to index + 1 * 7 so for example if index is two it's going to go from here to here from index 7 to this okay I think that's it and then we will return uh category subcategories that map category name we want to insert into subcategories we want to say category ID is category ID and name subcategory name I'm not actually sure why why uh Chad jpt used flat map here I think you can just use map so it doesn't matter because this is not getting returned anywhere it's just getting resol resolved so for each sub for each category we will we will add all subcategories so we don't need to like any any mapping arrays and with anything so now let's call this function so in our create page or wherever whichever page um I'm going to con uh change this to insert subcategories and then use mutation API seed subcategories create and then I'm just going to call this mutation in use effect so let me save this and as soon as I refresh this page it should uh 70 subcategory should appear and now we can go ahead and remove this and this all of this so we don't need this anymore that's just for like create inserting categories and sub categories and it will not change again so now if I select a category artificial intelligence it's going to offer cognitive Computing whatever so I can select it I will do something so I will teach you AI just like that and save and this should uh in the yeah when when I press save nothing happens and when I go here to logs from convex I can see that seller ID is not Prov provided so that's not going to work so go here into gig. DS and we need to remove this question mark So seller ID must be obligatory so I'm going to say I just added this if user is now return So currently user will be null because we don't have we don't have anywhere where we adding the user to database so let's go up here in the app I will make a new file and I'm going to say uh I'm going to say normal brackets dashboard and then slash page. TSX so when you have a route in these normal brackets that means that this page. DSX will be displayed in this app as as if it's in this app folder so at the route so this uh folder this route is ignored it's just for organization okay first we're going to use client some imports interface dashboard props search parameters search uh optional string favorites optional string and filter optional string so if we go back to the uh root route what these things are is it's going to be here like uh I forgot exactly the syntax but something like search equals uh whatever the search name uh haircut whatever but there will be like some I think question mark or something here so this is uh to have just these parameters so we can use this to search to display favorites or to filter or to filter somehow let's export default dashboard and then let's say cons dashboard is equal uh passing search parameters and give it the type dashboard props this type and then this will be Arrow function return gig list and passing query search parameters so for now I think we just want to uh comment this because we don't have this yet and we want to comment this maybe and let me just return like a normal div just High whatever and for this to work we need to delete because this page is now inside of the app but there is another page TSX inside of app so we need to delete this because they are parallel they are at the same route and now this is what we get uh displayed now what I want to do is I want to get use effect I want to save the user if he's not Sav in the database let's go in the convex folder and gig. T s I'm going to say user users. TS so we want to start with export con store so we want to store the user it will be mutation arguments Handler argument is empty check the identity we did this okay we want so uh if the user might be renaming also so we want to maybe have this functionality to rename change name a wait context database query users with index buy token actually this is not rename rename this is just looking for the user with index by token and then token identifier will be identity to token identifier and then get your Nique and this is for renaming if user is not null if user username is different from Identity nickname then we will await context database patch we will update so ID is user. ID that we want to patch and then I want to say passing object and say username is identity do name but why did I put name and not nickname I'm not sure I think I'm Not Who I'm not sure but we will fix this let me just continue so we will return user ID I will return to this so here we will also return user ID to be uh consistent so if user is null then we will add the user to the database so we will store user ID when you store something to the database it will return the ID of the new newly store stored entry await context database insert users pass in object full name identity. name token identifier identity token identifier title about username identity. nickname profile image URL is identity profile image URL so let's change this identity. name to identity. nickname like that and also we need to make sure these are uh actually like these exist because we are telling that they they exist but we need to enforce this in clerk so let's go to clerk.com and make these things obligatory so here in your Fiverr clone email phone username we will set username to required so it says required and we will also set name and then click here to make it required continue and save changes sorry guys I think my video was not 720p but now it is so let's go uh here into dashboard use effect and then make this Arrow function uh let's say just like store and that's it but above that we need to say const con um store it's going to be use mutation API user store and then we need to execute this in the use effect so let's just see if store changes this will also store again and then const store user is a sync function that has this body await store and pass in empty object so this is the mutation store and store user is the function so let's just call this function here because this is how we need to call ass sync functions in use effect just make sure to also import this mutation in the users. DS and now it should work if I go ahead and refresh this the logged in user should appear here but the problem is we don't have setup username when we logged in and when we created account so we need to delete this account and like register again so I want to go to users and just delete user delete user and now I want to refresh this continue with Google and now it will ask me for username let me just choose this continue and now it should yeah it should add me added me properly and now I exist in the database and now if I go to the whatever so this is sellers like just to this and then slash create I should be able to create a new gig let's check here so if I fill the data and press save we have a new gig let's go and it uh sent us to this gig page but it doesn't exist yet but this works next uh let's go inside of manage gigs and add a new file it should be edit slash gig ID in these square brackets and Page TSX this is for editing the gig okay so first thing we will use client there is a bunch of imports do not import them right now import them as Rec code but just I would suggest you import this used router from Nex SL navigation right now so you so you don't import it from Nex SL router accidentally later it must be from next SL navigation then interface edit page props parameters gig ID string so this will uh be in I will show you so this is link it's going to be this link manage gigs edit and then some gig ID so you need to get this from URL that's going to be the gig ID that you need then you want to make const edit and Export default edit so you need to export default when it's a page it's not a component but a page extract parameters and give it edit page props okay then we need to get gig by gig ID from database so use Query this is use Query um here from convex react and we need to send in uh the function that we will call it's going to be API G get which we don't have yet and then the parameters for this query are ID parameters. gig ID as gig ID as ID gigs because this is string so this gig ID this parameter that we are getting is a string and need to we need to cast it as uh this ID okay so this is our query that we will run we will make this soon to get the gig based on gig ID from database published use Query and then API gig is published and pass in the ID of the gig again so we want to check if this gig that we are editing is published const okay so we want to use our use API mutation that we defined that we made this file just earlier you can go back and rewatch what this file does so we get mutate and pending and we will rename mutate to remove and pending to remove pending because we will have multiple API mutations so we need to remove these uh rename these and then pass in the mutation is going to be API gig remove so we will create this as well we don't have this okay then another API mutation uh mutate will be published and pending will be publish pending and you're going to pass in API gig publish so this is another mutation that we will make and then another mutation mutate is unpublished and unpublished pending and API gig unpublished is the mutation that we will pass okay so router use router make sure it's from next SL navigation identity is use out this is from uh clerk nextjs generate upload URL a use mutation so when you want to upload an image and store it into uh here files you need to generate first an upload URL that's going to let you upload post image to that URL when uploading it to convex so generate upload URL will be a mutation we're gonna say API gig media generate upload URL that's going to return our upload URL after that we want to say image input is going to be use ref HTML input element null so I'm not sure why I use this but some I'm referencing this input image input element for some reason I forgot why we will see later okay uh so and then uh selected image and set selected image use State file array of files and set it to empty array as initial value so when we select images to upload there will be this will there will be an array of files before we upload them we just select them through the window you know the upload image selection window I will show you send images use mutation API gig media Send image I think this is upload image we'll see I think this is upload for uploading the image okay and then if there is no identity throw error unauthorized uh you must have these mutations before if because you cannot have these mutations these are hooks after if so they cannot render conditionally they must be before always the hooks must be before conditions undefined means it's still retrieving so if gig is undefined or publish is undefined then return null so we don't want to or you can return loading state or return loading whatever you want to show something if gig is null uh gig not found so we will just so if the gig ID here in the URL is wrong ID that there is no gig with this ID in this URL then we just want to say not found on the page okay handle Send image so this is like handle upload image it should be called okay asking function okay and the event form event so I think this is going to be a form submission so we're going to use this okay so prevent default we will prevent the page from reloading when we submit this form we will make the form later okay but now if gig is undefined return so if gig is still loading I think it will not be undefined though I think you don't need this at all all because this will return so it will not come to this if it's undefined uh non nullable gig let me see what this is gig as doc gigs okay so gig might be null but it's not going to be null I think I added this after I added this so that's why but so gig is not going to be now so gig will so I think you don't need any of these step one get a short lived upload Ur okay so post URL is await generate upload URL so generate upload URL where do we have this here um I said that when you call this say use mutation and pass in mutation this will this will be the generated URL but no it will not actually this will be a function a mutation uh that when you call it will generate upload URL so this is how you define so you say use mutation and pass in the database function and that's how you define this mutation and now when you call it it will now return the URL wherever you want to call it okay then await promise also we want to uh resolve all promises but we haven't defined those promises yet so we're going to go through all of the selected images and then for each image we're going to do some asynchronous function so we're going to say uh result is going to be equal to await fetch okay so post URL is our up upad URL that we upload that we send the image to and then we need to say method post headers content type image. type so that's going to be I think like PNG or JPEG and then body image so this is going to be a file type okay so we're going to send image this image to this URL upload URL and then cons Json is await res. Json so we just convert result we uh parse it into Json if result is not okay so not result okay throw error upload failed and then we just show the response wi failed and stuff okay um if it is okay then it will skip this if and it will we can extract from this Json we can extract storage ID you can read more about in about this in convex documentation about file uploading save the newly allocated storage ID to the database so when you upload a file to convex it will return storage ID of that file and you can save that into the database so you know so wa it's Send image so yeah so the reason I call this Send image is if I call this upload image that would be problematic because this is not uploading image this is just saving uh uploaded image storage ID into database so I need to pass in storage ID so storage ID is equal to storage ID this has the same uh name so I can like say like this storage ID but because this is the same name I you don't need to do this um format image gig ID is nonnullable gig. idid okay let me go next okay if there is an error in this uh Send image console log error and toast error minimum five files maximum five files reached so each gig can have only five files and we will Define how uh it's going to check number of files inside of this Send image mutation that we that we are going we didn't make this yet so inside of that mutation uh SE set selected images to empty array so we uploaded all images now selected images are going to be empty array image input current value is empty string okay so this is the image input we are referencing this input field this is where we are referencing the image input field and once we upload images we're going to set this variable like this and we're going to say uh current exists the value is empty string I think you can do this in a different way as well but you can I think you can maybe use this controlled input you don't need to reference it but okay uh okay so let's say on publish so when we click publish the gig this was images but now let's say publishing console log published or this going to be true or false if not published if so if this is false then this will be not false true then we want to publish and we want to send IDs parameters. gig ID as ID gigs I think it would also be possible to maybe in the interface say like this and then you don't need to cast it anywhere but let's just keep it like this for now okay so publish we send the gig ID of the ID we want to publish catch error console log error toast error so toast is your toaster is like notifications so let's actually um I forgot to add this toaster let me save this for a moment and let's go to app uh layout and here I think just above everything just add toaster from Sun like that I think this should work so now all this is uh going to show notifications if it doesn't maybe we need to add the other one from not from soner but from UI toter or something I'm not sure so uh we'll see okay so fail to publish please make sure there is at least one image three offers and a description else so if it so if this is not published we will publish but if it is published then we will unpublish ID of the gig we want to unpublish and that's it on delete when we want to delete this gig remove we call remove mutation and pass in Gig ID this is string so we need to cast it as this and then router back so just go to the previous as if you click the back button on the your browser okay now let's make some return statement uh we want to have these like fragments they don't add a new div element they just but you must return must everything must be uh inside of one element so that's why you need to have this outside element whatever it is um okay so space so we're creating a div uh this is a responsive responsive mobile responsive so on extra large extra large medium devices it will have these different paddings okay and then we want to flex justifi to the end padding right and space X2 let me see what this is so we have a button this is button from UI components at UI components okay so this button will be disabled if publish pending or un publish pending so I think this button is for publishing okay then variant is default on click on publish and so this button is going to show either uh unpublish or publish text so if it's published it's going to show unpublish otherwise it's going to show publish and so when I click this button it's going to say unpublish okay I think let's continue I think you understand and once you public okay so below this button or next to it because this is flex so next to this button there will be this link and you will be able to preview so if you click this link this button uh you will be pushed to this so this link so it's going to be slash gig seller username gig ID so this is just um it's going to push you to the page of this gig and then disabled if it's like remove pending you cannot be previewing yeah okay so varant secondary uh if you want to see see these variants you can search for but Buton TSX so here we have all of the variants and this this is um like just the Tailwind CSS styling so secondary is going to have these you can add your own variant below here like whatever let's go back and continue then we have another button and this will be delete button so disabled is when remove pending very secondary on click on delete I think it's clear uh title editor so we want to make it so that user can just click the title and change it it's going to be like an input field we need to pass in Gig ID and title so we will make this component soon okay below that we have withd 800 pixels images so we want to show images for the gig so uh images will be gig. images this is also a component we will make Title Gig gig title allow delete true so in this case we will true because we want to allow delete if we are on editing page so allow delete true but if we are on the gig preview page the gig page then it's going to be false below images uh let's say handle Send image so this is the form for uploading the images so this will only be on this edit page so on submit handle Send image let me go here so this is our form submission we defined it here okay let's see and then we want to have label so this label is from UI components everything is from UI components that we install from shat CN font normal add up to five images div Flex space X2 input from sh from UI components at UI components okay so ID image I don't think you need ID type file accept image and then all kinds of images so jpeg PNG whatever reference is this image input that we that I explained here ref okay on change we have this event and we're going to say set selected images array do from event. target. files or empty array so if there are selected files you set this set selected images to array of those files or you send to empty array and you you are allow this input to select multiple files so I will show all you all of this uh so this so when you click the input it will pop up a search window and you will be able to select multiple files and then some class names so cursor pointer W fit with fit background Etc disabled if selected images. length is different from zero so if the user has selected images then we will offer the user to upload the images and not to select again then we have upload image button so we will um type submit disabled select selected images so if selected images is zero then upload images button is disable because we need to have some selected images below that Flex rounded border rounded medium border zinc so we have this kind of uh text so it's going to say Creator and then uh this should be seller ID I I hardcoded my name here but I think it should be seller ID so I'm going to change this uh so this should be like I think seller. ID or something but it's hardcoded right now but we don't get seller anywhere so I think we need to get like seller or gig let let me see here okay I'm going to continue but you can use Query this is your task if you want to learn more you can you can either remove this if you don't want to do it or you can uh use Query to get seller ID somehow I will see how Okay offers offers editors so offers will be like premium standard basic and then just gig ID and then about this gig it will be H2 title and then description I want to set description outside of this div and initial content gig. description editable true class name and gig ID will be gig. ID okay so that's it this is the whole file the there was nothing here there was just some empty text like but this is a whole file that we need to now create all of these components so first of all it looks like we don't need a bunch of these edits so we're not using this offers we're not using this convex image we're not using this CN we're also not using this file upload it seems and we are not using this image let's start by making this database mutation so let's go to gig. TS down below at the bottom let's make a new export con get it's going to be a query and we're going to pass in this object so it's going to have arguments it's going to be ID uh v. ID gigs and Handler function first we're going to get the gig so await context database G get arguments. ID if gig is now gig not found although we are not checking for user identity which we maybe should but okay then we want to so we don't want to just return gig we want to also return like offer seller what a lot of other things besides this gig so we want to get seller await context database get seller a gig. seller ID as ID users then if there is no seller throw new error seller not found country await contacts query countries by user ID and then pass in the seller ID to carry the countries must be unique okay um if there is no country country not found languages of the user so because uh this G gig page it will show not only the gig but the user languages countries user offer source there's everything reviews I think also uh we want to query Languages by user ID so all of the languages of this user collect all of them seller with country and languages so we need to now put everything into an object so we spread the seller it's going to spread all of these fields country country language languages so if we take a look at this it's going to be country object languages object array of languages and then uh the seller will be spread okay gig with seller spread the gig seller seller with country and languages so now when we say gig with seller do seller. country but besides seller everything else will be the gig will be spread so we add the new attribute seller to the this gig that we spread get last fulfillment so last fulfillment are so query orders with index by gig ID so get orders from this gig uh order descending this is by I think by date created and then the first so this will be the last order the yeah the last order now I think I'm calling this fulfillment and order those are not the same thing so I think we should call this like the last order gig with seller and last fulfillment we want to spread gig with seller and we want to add attribute last fulfillment so I don't know if you know what spreading means but it just means it's taking all of these attributes of the gig and just copy them and pasting them here okay um images it's going to be query gig media so we need to get gig images with index by gig ID so get all images by this gig ID and collect images with URLs a wait promise so we need to resolve all promises because for each image we're going to map images so for each image we're going to uh we need to retrieve each image from Storage so right now these images are just storage IDs they are not actual like images and URLs so for each of those storage ID we need to generate image URL for that image so await context storage get URL and pass in storage ID so that's going to return image URL if there is no image URL image not found and then spread the image all of this and then at the bottom below format where we're going to add URL is equal to image URL so if I go here it will be as you can see all of the image is spread and then also URL is string gig with seller and last fulfillment and images spread gig with seller and last fulfillment and say images will be images with URL so images and then last fulfillment and then everything else and then return gig with seller and last fulfillment and images so so this is the whole object we have everything here so if I save this now we have API gig get now let's make API gig is published to check if it's actually a lot short shorter I think so below get let's say export cons is published query and we're going to get get arguments ID for this gig and Handler function con gig is await context database get arguments. ID so we want to get this gig and then gig so check if it's null uh dop published or false so if this is null or undefined or if it's not published then we're going to get false so not published below below that let's say make publish so this is the next one that we need to make publish and then publish this is short also so publish we'll have we receive ID of the gig Handler gig we're going to get this gig again there is no gig throw error uh media we need to get all of the gig media uh by this gig ID so we need to check if there is so we want to collect all of the media um with by gig ID and check if okay let's also collect all offers so that's going to be premium basic and a standard I think as so offers by gig ID collect I think you understand what this I mean explained it so if you don't understand just tell me below if media length zero or gig description is empty string or offers length is different from three throw new error gig needs at least one image to be published or and the three offers and the description so you can add that here okay I wa okay so if this is true then we can publish so patch arguments. ID so the gig ID and then published true and return Gig if you want but I I don't think we need to return gig below that export constant publish this is shorter I think so we get gig ID Handler get the gig if there is no gig throw error and then just patch published false and return gig there is just three more and those are shorter so gig remove gig media generate upload URL and gig media Send image or save image to database export cons remove so this is inside of gig TS that's going to be mutation we gig ID of the gig we want to remove Handler we check identity so if somebody is logged in or not we should have checked it probably here as well everywhere at every mute every function okay so user ID is identity do subject I don't know if this is wait this might be a mistake let's see uh existing favorite yeah so if we favorited the gig it's going to be saved into a different uh table so we need to also delete the favorites query user favorites with index by user gig and Q user ID is user ID gig ID is uh gig arguments gig unique I think this is I I don't write this I think this is a mistake so we will fix it let's see okay so if there is the favorite exists with this user and this gig ID then we need to delete that favorite so context database delete existing favorite. ID and then we can await context database delete arguments. ID so we want to delete this gig after deleting the favorites or favorite so I'm not sure if this identity I think this is not the same ID this is not the same ID that we have in our database so I'm going to do this so user is await context database s users with this token identifier and then get unique and then user ID I'm just going to comment this and I'm going to say user ID will be user. ID like that but I need to also check if user if user is null return and now we don't need this question mark so I'll see if this works if it doesn't we will fix it I think this will work if we go back we need to create this gig media. TS and generate upload URL and send image so let's go here to convex folder again next to Gig TS I'm going to say gig media. TS so let's start by few Imports export cons generate upload URL mutation and then ass in context so this is another way you can do this mutation without Handler functions so return await context storage generate upload URL okay and then we want to say Send image it will be a mutation arguments storage ID VI idore storage format v string and gig ID will be v. ID gigs Handler check how many images are already uploaded const gig media await context database query gig media with index by gig ID collect if gig media length more than five throw new error you can upload up to five files please delete a media before uploading a new one and then await database insert gig media storage ID argument storage ID format arguments format gig ID uh arguments gig ID and that's it this is how you up send this is how you save uploaded image to the database and there is no more errors from our database we just need to make a few of these components now so add components description add component images let's make those two first so let's go here to and under app we're going to say just in components desk rtion DSX and images. DSX so in images we want to say use client now I'm not sure if we are using all of these import so you don't even need to import them now but later um interface image props so images image with URL type this type we will Define so this is image uh that also has like URL so image type I I will show you will show you so title allow delete and class name optional okay below that we're going to say export con images extract all of these uh Fields image title allow delete class name from image props const is hovered set is hovered to use State false and then return okay so this is Carousel from UI Carousel class name select none on Mouse enter we're going to say set is hovered to true on Mouse leave it's going to be set is hovered to false so we have this set is hovered the state that we track then we sa Carousel content and we're going to pass in the class name these are like Tailwind CSS classes or empty string if this doesn't exist if it's undefined images. map so for each image we're going to return something Carousel item key because you are mapping so you need to use key prop here aspect ratio 169 this is from a UI components allow if allow delete then we will say actions so this is like a it's not a drop down menu it's a button so side bottom side offset 10 storage ID image storage ID so these are actions from this but we will make it and then um trash two so this is icon from just icon trash two okay below that let's show the image source is going to be image URL or I think this is just a placeholder image and then fill because this image tag that's from next Rea next um I'm not sure where it is is from next image it must have either width and height or fi and then class name so below this Carousel content we want to say Carousel previous so these are previous and next buttons for if you have multiple images class name this is just position of that button and the looks Carousel next class name the same so this is our image viewing like component that's going to get in a list of images and then we can view them so let's now go ahead and create this actions so we're going to copy this underscore components underscore actions and then we'll go to this file path so that's our edit file that we made in our app so here seller edit um we have gig ID and then inside of that we have components actions so let's make like this uh actions. TSX so underscore component actions TSX but before all of that let me um let let's go and see what this page looks like so here in the edit gig ID page manage ID I want to comment this I want to comment this and then I W to comment title editor because we don't have this made I just want to see what all of this looks like so I'm going to comment this and offer editor and now H there should be no errors we just need to now load the proper gig so this is not the proper gig ID so let me go here to data uh gigs and copy this gig ID and now we need to paste it here so it's a proper ID the first problem we have is country not found so let's go here to countries and let's actually go to users and copy this user ID and to countries and I want to add a document manually user ID uh country Hungary save okay if I go ahead and refresh this again this is what our page looks like and now I can say select choose files and show all files for example and let me go ahead and select I can select multiple files and then I can upload image let's see what happens element type is invalid okay we didn't finish this but I think you see how this works and I think it works well but now we're not really able to see this so let's go here to image with the so first of all I want to comment out this actions in this is images TSX and then I want to comment this actions out actually I want to comment all of this we don't need it and let's just quickly make this types so in in the outermost file click say types slash index. DSX or DS here let's say export Type image with URL type it's going to be Doc gig media and so we need to extend this type of gig media with an object URL string and now let me import this so save this now this is resolved another thing is if you want to uh display images from a URL in next SL image tag we need to add that to next we need to add that URL to next config JS so let's go to next config J MJS in my case inside of next config we want to make some space and say images and object domains and then array and then copy paste this domain that it tells you if you want to display images from other domains then you need to add them so these are some domains that I'm adding I think you whenever you are displaying image from these domains then you should be you should add them so this is for example for for my placeholder image it's from this domain now we need to refresh it's going to recompile everything and just wait a bit and the images are are shown yeah the images are shown and we can cycle through them these are bad images I uploaded but now you can see uh what how this looks like so if we go to our convex files you can see the three images that I uploaded I can delete them but make sure you also delete the gig media like storage IDs here if you delete an image yes this looks ugly a little bit but we will add Navar this will not be on the top so it will look better now let's go back to actions in our edit gig ID components actions and let's continue with this this will be this will let us delete and do other actions so use client a bunch of imports that you don't actually need to import now but later um interface so this will let us either rename uh and then we have a confirm model everything so interface action props children react node side uh drop down menu content props side so this will be top left right the side of the drop down menu side offset it's going to be value in fixed pixels and this is from radx UI okay and then storage ID is going to be string export con actions extract all of these and then that's going to give it action props type uh so const on open username model so we're going to create this we don't have this yet but we will extract on open mutate pending from use API mutation and we're going to say API gig media remove so this is to for removing this media when we click delete button on delete mutate storage ID so we will delete the with storage ID and then we will say uh toast success board or it should be gig deleted or no this should be image deleted or I think this is image deleted because it's storage ID um catch so fail to delete board fail to delete image return give it some div and then confirm model so we want to be able to confirm if we want to delete the image header delete image question mark this will delete the image and all of its contents just this will delete the image okay disable pending so while this is being deleted it's going to be disabled on confirm is UND delete so this confirm model we will also make it we don't have it yet okay so inside we say button this will be passed as children to the model and then varant destructive these are class names trash two icon and delete text so first let's go ahead and inside of gig media let's make this remove so let's go to uh contrl p and look for Gig media and Below we're going to say export const remove mutation and then argument storage ID and Handler okay now we need to say const media is a weit context database query so get query the gig media with index by storage ID and then execute it get unique if there is no media media not found and then we want to delete based on this media ID and then we want to delete this okay so there are two things you want to delete as I said we have a file that we want to delete and we want to then delete it from the gig media storage so in Gig media oh sorry here uh we want to delete it from this storage as well so first we will look for it in the storage then we will delete from delete from the database and delete from storage and sorry this is not looking in the storage this is looking in the table so uh let's now go to so we are actually not using rename on this on rename model um I'm not sure I I think I I will just just comment this out and this because we are not using the rename model I maybe show you later uh how to use it but let's now just say components and confirm model so let's go here let's go to components and then make a new file confirm model. TSX here we want to use client and then import all of this stuff but not now later interface confirm model props children so that's going to be the pattern button that we passed and everything when we encapsulate this component so let me show you so here this confirm model uh we have this confirm model and these are all the props but also this is inside of it is p as children so let me go to confirm model and continue here on confirm is going to be a function that returns void disabled buan header string description string okay export con confirm model children conf so extract all of this give it type confirm model props and make an arrow function uh handle confirm unconfirm so we just call this function whatever it was so return alert dialogue alert dialogue is a like a popup alert so alert dialogue trigger as child children so you need to say as child because this is a button and this children is also going to be a button because we are wrapping we are passing Button as children so you cannot have button inside of a button but you can if you say as child uh so when you click this the button then it this will open the content alert dialogue header alert dialogue title is header alert dialogue description alert dialogue footer cancel and confirm and confirm we'll have disabled disabled and onclick handle confirm so now let's go to images. TSX and here where I say allow delete actions I let's uncomment all of this again and then let's uncomment this import so if I save all of this now we have this delete button and I have it for each image and if I press delete here this is our confirmed dialogue confirm and now that image should be deleted so there is only one image and in files there is only two images here so I can cycle through two of them but there is no more than two and I can delete this one as well and now there is only one so now let's do the description so in the page TSX of gig ID edit we want to uh un comment this that was commented and we want to scroll down and uncomment this description so now let's go to our uh description so description TSX and here we want to start by saying use client also we want to go to blocknote j.org and click here docs quick start and copy this and npm installed this these two libraries then in the description uh these are all of the Imports that you can import as you go but you need to import this manually and this manually and for me this is like showing uh that cannot cannot find this module but I think this is a mistake like a bug because this module does exist then let's say interface description props ID is gig ID uh initial content string so maybe there is already some description that we will display editable Boolean and then class name so editable so depends on if we are on the edit page we will want the user to be able to edit the description but if not then we will just show the description class name is like tail wi CSS so export cons description ID initial everything extract that from this type con update use mutation API gig update description editor we will make this uh gig you don't have it it will be red underlined but we will make it so editor will be use uh create block note initial content it will be this initial content that we passed question mark So if it exists we will Json pars so if initial content exists then we will Json par and this initial cont content or it's going to be undefined so either this or undefined depending on if it exists handle change if editor document exists con um content length is Json stringify editor document. length if content length is more than 20,000 characters but also keep in mind this is not 20,000 characters of pure description this is also like the whole Json file with all the data metadata for the description so there is like maybe 5,000 characters of like just those Json other characters okay update so we want to update the description the API mutation here gig ID and description so description will be Json stringify editor document. n.2 I forgot what this does with N2 you can you can maybe ask GPT but so this is the description uh the description is going to be here in the description field you see this is this whole what it's going to look like so this is for example that the text is going to be I have it I don't have it here I think it's empty so we'll see okay next else so if content like is more than 20,000 content is too long not saved duration 200 so this is toast error like notification duration two seconds icon alert uh octagon and then we want to return so we want to display uh we want to display block note view so we want to display that editor is editor editable editable theme light or dark onchange handle change class name is class name and that's it so now let's scroll up and let's make this mutation so y so API gig and then update description so let's go here to Gig DS so in the gig we're going to say export con update description mutation arguments ID gig ID and description Handler const identity is a weight context Al generate user identity check if identity does not exist unauthorized cons description ARX description trim if no description throw new error description is required description length is more than 20,000 description is to Long await context database patch so we want to patch the gig this is the ID of the gig and say description arguments of description and return gig so that should work ignore this error so if I go here to description you should see this and I should be able to add description and if I just click anywhere else it should automatically be updated here uh and if I go into description this is the text I should be able to add description and if I hard refresh this page the description is still there and it's editable because we are on this like edit URL but I'm going to make this not editable when it's going to be in the like the gig page let's continue with title editor so uncomment title editor in the gig edit page and let's go below and uncomment this as well oh I commented it twice oh my God what's happening okay let me uncomment it manually so I'm not really sure what this import path is but let me actually uh say slash component /title editor and then let me copy this and I want to go to component and create title editor. TSX so first use client and some import that you can import later uh just I think we need to I don't know if we have this installed react text area Auto size maybe you need to install this or you have this installed I don't know okay title editor props ID is gig ID title and title is string title editor ID title extract that give it this type Arrow function const input ref is use ref element ref text area and then set default value to null so we need to reference the text area that's going to be like our title input it's not going to be input field okay then const is editing set is editing use State false value set value of the title use State title so it's going to be M or whatever the string is then update use mutation API gig update we need to create this enable input so depending on if it'sit editing or not then input will be enabled set is editing true set timeout zero so uh I think this is we are so we want to set value to title I will explain why this way set value title and set input uh element is input uh ref current and then we want to focus the current the input when we enable editing and then we want to set selection range so the reason I'm using set timeout is to make sure this execute after the current execution callback as explained here and so uh this will let browser update the UI and then it will execute this and what this part does after the focus is it's going to set your cursor at the end of the title so when you focus the input field the text area actually not the input it will set the cursor at the end so you can continue typing at the end of title so let's go after uh disable editing set editing is false on input value string set value value this is value of the title of the input text area field that is update ID title so we want to update on input we want to set the value and we also want to save it in the database if it's if there is no value then it's Untitled on key down um event so we want to if you press enter we want to do something so react keyboard event a html text area element Arrow function if key is enter prevent default so I think this will what is going to do disable editing okay so I think this will not make a new row like go to new row with enter but it will just disable editing so save return div is editing return something if it's editing so if we are editing return text area Auto size reference is input so you want to reference this text area on blur means like uh when you defocus when you click somewhere else disable anything on key down is on key down so check if enter is pressed value value on change on input and then pass in E Target value so this is the text the new text the whole text of this uh text area field and some custom CSS max length 60 and then we want to so if it's not editing it will show this div uh on click enable input so as soon as you click this we want to set enable editing class name title we just want to show title so if I save this we also need to make this update real quick so let's go to geek DS but even now you see the title is displayed it will just throw an error if I try to edit it yeah there is an error because gig update doesn't exist but you see how when I click it it turns into a text text area but right now it's a div so let's make this updating uh let's go to GTS and say const update mutation arguments is gig ID and title Handler check the identity now I identity unauthorized title is arguments title trim so you want to remove trailing whes space trailing new line everything if title doesn't exist title is required if title length more than 60 which it cannot be because we already have another check in input field max length then title cannot not be longer than 60 characters and then AWA context database patch so ID of the gig and then what we're going to patch is title and return gig although we don't need to return anything so that's it now if I go ahead wait for a moment I think we just need to wait for this to no for this to like finish okay now it's finished so if I say this if I refresh I think you see the title has this one two three in the database and it's saved here so if I do this it's going to if I as soon as I def Focus it's going to actually it's going to immediately as soon as I change it's going to update database so whatever I do it's going to update and now let's go back to the whole gig page and let's make offers editors so three offers so I save this it's in components offers editor let's copy this offers editor and let's go here and say like that so so we're going to put this next to this page so in this components not in general components but in these components because this will only be applied like used here offers editor. TSX let's delete this offers editor TSX it will not be a file like that it will be a folder offers editor/ index. PSX so now it's going to the import is going to look the same so if you have index DSX you can just you import as if it was just offers editor. TSX here so you can import a file index like that and this is my bed so it should be not a folder index TSX but file index TSX so if I go here and click file index. TSX index. TSX yeah here this is these are a bunch of imports interface offers editor props gig ID export con offers editor so we're going to extract this gig ID offers editor props con offers is use Query API offers get so we're going to create this so we want to get all of the offers for this uh gig by passing in the gig ID offers are basic standard premium offers and then D has title description everything if offers is undefined return loading offers okay so con so if if something is undefined like query is undefined it's still being loaded and if there is no offers this will be null not undefined so undefined means being loaded basic offer is offers. find offer and so for each offer you're going to check if offer. tier is basic and then it will be only one standard offer you do the same you find offer where offer tier is standard and same for premium then we want to return something so tabs default value basic so we will have three tabs and you can switch between those three tabs default value basic class name at 400 pixels wide tab list tabs list tabs trigger value basic you say basic so on the top on the header there will be basic standard premium so this one is basic has value basic standard value standard premium okay and then tabs content so value the first one is basic content editor so content editor this is a offer content editor so we will make this component gig ID is gig ID offer is basic offer tier is basic tabs content is so this one is standard same thing this is just going to show and edit standard uh tier and then premium same so we need to make this content editor and we need to make this offers so let's start with offers so uh let's go to a convex folder next to Gig TS say offers. TS so here export con get query we want to query all offers arguments gig ID we get gig ID uh and then Handler function offers a weight context so we want to query offers with index by gig ID and we pass in this gig ID and collect all of them and return offers let me import I press control space let me import this and let me import V so that's it now we need to go up and next to index DSX is in offers editor we need to say content. editor. TSX in content editor some imports that you can import later um content editor props offer question mark doc offers gig ID tier basic standard or premium okay let's just export all of it so let's say content editor export and then extract these props okay title use State string so offer question mark title or uh empty string because offer is not obligatory we can Al if it doesn't exist we can create it here description of the offer is offer description or empty string price offer price or $5 revisions offer revisions or one is default delivery days so two is default add offer use action so this will not be mutation or query this will be action so API offers add we will make this soon handle save so this is saving the offer when we edit it try await add offer okay so this is I think just this is for both saving and adding a new so try await offer so add offer and passing gig ID title description tier price delivery days revisions I had to because this is not the same name so I had to do it like this delivery days toast offer s saved successfully error let me keep this here so people can see like where what we got to console log error toast fail to save return so this is going to be some div uh so another div label title and then input field for title uh ID title placeholder title value title on change set title and then another div uh this is price ID price placeholder type number value price on change set price but we need to par Sy from this because this is going to be still string even though this is number type div label description input description placeholder value description on change div uh number of days uh for delivery input uh and then placeholder delivery days type number value delivery days on change set delivery days Pars in par the value div label HTML for revisions number of revisions input ID revisions placeholder revisions type number value on change everything is the same and then button save onclick handle save okay this is not necessary so on click handle save it will just uh say add offer uh let me see what this I think this add offer is like not just add but also like update if it already exists so we're going to send the gig ID and everything so I think let let's make this let's see what this looks like so in offers DS let's say const Ad is going to be action arguments gig ID title description tier Union so it's going to be between basic standard and premium price delivery days revisions Handler uh check identity offer we want to run query it's a bit different so internal offers get offer and pass in Gig ID and tier so we're going to make this internal uh query after uh okay so if there is no offer so we want to get this offer by gig ID and tier so each gig will have three offers and each offer will be either standard premium or basic if there is no offer uh stripe price is return action intern okay wait wait I think we need to now if there is no offer create a new offer so we we're going to um add the run this adrenal action that's going to create price and we're going to pass in price tier title okay then run mutation internal offers insert so we want to insert this offer if it doesn't exist gig ID title description tier price delivery days revisions stripe price ID so we need for each offer we will create an ID price ID in stripe return success else so if the offer does exist we want to update it so internal offers update gig ID title description price delivery days revisions offer ID run Su return success okay now let's make this insert internal mutation so this is internal mutation um the difference between internal mutation and mutation is this uh can this must be called by internal not not API offers update but internal offers update and uh this internal can only be run inside of that convex folder and not in your app so we're going to say arguments Pig ID title description tier uh that can be basic standard premium price delivery days revisions stripe ID and then Handler offer ID insert offers gig ID title and then description tier price deliver days revisions stripe price ID return offer ID okay and then update internal mutation args gig ID so this is for updating the offer title description price delivery days revisions offer ID patch so we want to so we're going to update the offer by patching it ID title description price delivery days revision get offer internal query arguments uh so this is for getting the offer so it's going to get gig ID and tier that can be any of these three and then Handler offer will be query offers with index by gig and tier so gig tier so it must be unique obviously and then return offer so that's it now let me go ahead and import this internal but I think it's this is wrong so it must be generated server no just a second so internal mutation from generated server and let me import internal query from generated server and then um internal this is weird let me import action from generated server and then this internal this internal must be imported internal from generated API UND generated API so I had some error and in this uh edit gig ID page DSX where I'm importing this offers editor it said like you couldn't find so I just deleted this this import and then went here and imported it again and now it works so let me go here uh this is our offers editor here we have basic standard premium and if I say title uh but this is going to throw an error so this should work we just don't have the stripe ID creation so here internal stripe ad Price so let's quickly make that so next to offers DS let's say stripe the s here we will say import all of this and import Stripe from stripe and we need to go ahead and npm install stripe okay then we will um export con add price internal action arguments tier will be Union between these three L literals price is number title is string Handler okay so stripe is new stripe so process and next stripe secret key we need to make this we don't have it yet API version is this one uh price await stripe prices create currency USD unit amount arc. price times 100 because this is to convert it to Dollars uh to convert it to cents because this must be in cents unit amount must be in cents so product data name and and then we make these square brackets arguments tier so it's going to be standard premium whatever Plus arguments title and then return price and save it now we need this uh next stripe secret key go to strive.com and go make sure its test mode is enabled go to developers API keys so copy this publishable key and in your n. local you need to have this next next strip public key that's going to be this one next strip secret key that's going to be reveal test key and copy it and web hooks secret so go to web hooks actually uh let's leave it empty for now so let's copy these two we need to save this and go to convex so we need to also paste this into settings and environment variables and add paste these two so our functions will be executed on convex so it must have these variables and now if I go to my website I say title basic shaving price uh I don't know let's say 10 description basic I just want to distinguish it number of days one and save uh offer saved successfully so if I go to my here data offers here there is one offer price revisions everything so if I go here and I hard refresh this page it should pull all of this data so yeah it should stay the same so it stay the same and now standard and premium I can also do this if I want so I think let's just and okay so let's if we go to stripe here to more and product catalog we're going to see that we have this new product that's $10 price basic shaving that I just created so this is the price ID it's right here price ID we're going to use this later now that we have all of this let's go to homepage and display all of the gigs that we created first we will go to a app dashboard and create a new file layout. TSX this is a reserved name first we will import navbar from underscore components navbar then interface dashboard layout props children uh because uh this page and everything inside of this route will be passed in as children to this layout as if you are wrapping uh the this page with this layout component same as context providers that we did in the beginning so children dashboard layout extract children from this type export default dashboard layout return main height full padding X zero but on two Xcel screens padding x 56 Navar and below that children so we want to have navbar on the top and below that the page so let's create this components navbar next to layout I'm going to add a new file say compon Anders or components navb bar. TSX so in the navbar we're going to say use client uh all of these Imports you can import later not now there is a bunch of them but later okay uh const navbar export default navbar categories use Query API categories get current user use Query API users get current user search parameters is use search parameters that must be imported from next SL navigation very important and use router from next navigation not next SL router so this search parameters is when you have a question mark search what so we have some parameters so for example if I if I'm filtering I'm going to have these parameters but we'll see later what what this is thej parameters in the URL so favorites search parameters get favorites so if it exists or not in the URL filter search parameters get filter and then use router from next / navigation categories is UN if categories is undefined return loading as I said undefined in use convex means it's still loading and these hooks cannot be after if okay on click inbox so there will be inbox so user will be pushed to SL inbox clear filters uh router push to so remove everything from the like whatever you have in the string in the URL then return a fragment two separators from UI components don't import them from radx UI import them from the UI components always these things never import anything from radic UI except there was only like one thing that I showed you okay Flex items so this is a one div second div search input so this is for search we're going to we're going to be able to search gigs then dialogue dialog trigger so this is filter uh toti provider text filter so when we click this dialog trigger it's going to open the dialogue content that I will show you later so filter icon from Lucid react and this is the dialog content so once we click this inside of this trigger it's going to open this content we're going to calculate the height maximum height to be full screen minus 200 pixels I think um well I'm I forgot why okay below that we're just going to Mark scroll area but let's return here up Scroll area oh yeah this is just a comment so ignore this so dialog close we're going to have uh this because it must be one one like HTML element and then button so when I click this button it's going to uh it's going to clear filters have waran ghost class name text red 500 disabled not filter clear filters okay categories. map category index so for each category we want to uh select I think this filter is going to let us select a category so uh I'm putting it into dialog close because as soon as we select a category it should close this like dialogue and it should push us to the URL to display this category so categor map for each we're going to pass in key when you have mapping some class names title is category name and then another div category do subcategories map and then mapping all of them and then list item key title is subcategory name subcategory subcategory so we're going to make this list item so whenever we click this we will go to that like we will enable that filter for that subcategory below that below dialogue we're going to say if current user exists make a fragment tool tip provider favorites so this is to enable favorites so button the button is from UI components not from radic UI as child variant if favorites variant secondary or ghost if fait is enabled size large class name so link so is path name this is the path name but also query is favorites so if favorites is enabled then query is nothing but or favorite is true so if favorite is enabled we click favorites we want to disable favorites so we'll see how this goes into URL with favorites true and then class name heart icon and then let's say inbox so tool tip provider will just let us hover over this whatever is inside and it will show this like tool tip okay so button message Circle um yeah so on click it's on click inbox it's going to push us to SL inbox to inbox okay so this button has on click uh to manage gigs so it's going to be seller current user username manage gigs switch to selling and then user button so this is going to be our whole nav bar but below that we also have if there is no current user we're going to save button varant default as child sign up button so if user is not signed up mode model after sign up I think we don't need this we're going to remove we're going to remove this and then also sign in button and that's it but I let me remove this and this because I used this to add user to the database but we are adding the user in a different way so that's it we just need a few of these so we're going to need um users get current users so let's go to users TS at the bottom we're going to say get current user Handler const identity is get user identity if there is no identity return null we're going to return user and so we're going to uh you don't you you don't need to write this so const user is AWA context database query users which with index by token and then unique so that's it let me just import query and that's it so first let's create this search input so here in the files I'm going to create a new file search input. DSX use client and then bunch of imports but we're going to have to install this like this okay then let's continue search input con router is used router const value set value use State uh to be empty string handle change react change event HTML input element set value to e Target value um so this is when we type in into search and then handle submit URL is Qs so Qs is our query string do stringify url url is going to be this slash and then query will be search value so whatever we write will be this query and then skip empty string true and Skip null true so it won't put query if this value is uh null or empty string as I understand and then router push to URL so we will just push to this so we will uh have this search query in the so for example question mark search equals uh hair whatever I think something like that okay so this is if you want to use the bounce value but uh you don't need to use it at all it doesn't matter what it is if you don't know uh div okay so this is icon input uh class in class name placeholder gigs unchange unchange value and then button um unchange handle submit variant secondary class name search button okay that's it we also need to install this though so let me go here and npm install this but now I see that we are not using this because this is using the bounce value so we don't need this we don't need this okay search input is created uh let me I mean I want to comment both of these maybe actually no I need to I need to have toty provider so let's create tooltip provider and then we're going to see what this looks like so next to navbar just tool TI provider TSX we want to import tool tip and all of this but but toty provider as base toty provider because this will component will have the same name toty provider props children string text so as you can see here in where we use toti provider we pass in like some children so that's going to be children uh export cons toty provider children text toty provider props Return base toty provider tool tip tool tip trigger Flex item Center as child children um so this is going to be like when we hover over this then we're going to display this tool tip content so it's going to be this text so text can be for example let me see what I put here so I say like text filter and then this is children when you hover over children we will have this toty provider so I think we can now see that if I comment this and I comment let me comment like the whole this list items and let me just make it a div and give it a key because it must have a key so I had an error because I didn't save my layout TSX here in the app naar and stuff so now we can see how what it looks like and I can go ahead and put some search and if I say search it's going to say search equals to this whatever I set to this is how we can put it into uh link but there is just a little bug in my web browser doesn't show but it should work for you if I click filter it's going to let me select a category uh and favorites we'll put favorit to true and this will push me to the in inbox now let's continue with this list item so let me uh delete this and uncomment this go here next to the na bar I'm going to say list item hsx let's start with some imports then interface list item props title and subcategory okay export con list item and then extract these props give it type list item props cons router is used router from next / navigation handle click so the these list items this is for selecting a subcategory so filtering by subcat category and the category URL query string string ify url url is slash query is going to be filter subcategory name and that's it just close it everything and then say skipped empty string true and Skip null true and then router push URL so you it will be um it will be like this this question mark filter equals and then whatever the It Whatever the category subcategories okay so return button so each of these are going to is going to be a button give it on click and then let's say um div show title and then close the div and that's it so let's save this but we don't have this low Dash so I need to copy that actually no this we are not using this so we can delete this we can delete CN we don't need navigation menu link and that's it now let's go back to this list item in your Navar and then import it like that and save now if I go here and I say filter I have all of these options so computer vision I say computer vision and then in my URL you're going to say filter equals computer vision and it's just that Opera browser is not showing the URL until you click but it should be fine and then clear filters that should clear filters so I can select any filter now we want to display a gigs on the homepage so let's go to components make a new file uh gig dcard SL index. TSX let's also add footer. TSX and overlay. TSX inside of index DSX let's say use client okay so a bunch of imports so we're going to need this date FNS so let's copy that and let's npm install date FNS okay uh I think I I'm not sure why this is wrong import I will fix this later and then this does doesn't exist and this doesn't exist so we will make all of that you don't need to worry about it now okay interface G hard props ID seller ID uh title description create that is favorite so we need all of this information to display the gig storage ID this is image storage ID it's optional okay offers offer yeah one offer uh real what is it reviews yeah we want to show R number of reviews this gig has so it's going to be a gig card that shows image title everything export con gig card extract all of this stuff all of these props give it this type and arrow function okay so you need to extract user ID from use out use out is from clerk nextjs seller is use Query API gig get seller ID is going to be seller ID as ID users we will make this function okay so you don't need this I forgot I forgot to delete it okay create a that label format distance to now create a that so it's going to be like two hours ago 3 hours ago two days ago add suix true I forgot what this suffix does we'll see const okay so we need mutation for favoriting and unfavor thing below so let's rename so we're going to extract mutate and pending from use API mutation we already did this a few times we need to pass in API gig favorite as mutation function and we need to rename mutate to favorite and pending to unfavorite for this mutation function and then do the same for unfavor thing so just pass in unfavorite and rename mutate to unfavorite and pending to unfavorite pending okay so then toggle favorite so when we click favorite or unfavorite okay so if is favorite we will unfavorite but if it's not favorite then we will favorite so unfavorite and pass in ID so ID is this ID of the gig so we're going to call this mutation if you don't understand how this works go back where we installed when we made this in the descriptions below use API mutation in the you have a time stamp okay and then else favorite and passing gig ID okay so if seller is undefined return gig car. skeleton so this will just be like a like a box skeleton box that we will create soon while this is being loaded uh okay so let's return link so this link when we click on this gig it's going to push us to the gig page so that's why it's link okay so is going to be SL seller question mark username so seller might be null that's the problem uh and then SL id id of the gig so username and then ID the gig okay so you don't need this I just forgot to delete it uh okay so the then div with all of these like this must be group border group is so when we hover something inside whatever has group we can attach like we can uh make attach some effect to to it and then another div overlay we're going to make this component convex image uh so this is going to show the image of the gig storage ID storage ID of the image and title below the image actions actually I think this title will just be like alt if the image is not shown okay so actions id id uh title title I think actions will be like delete or something I'm not sure we'll see okay so inside of actions you wrap uh button with actions and so this will be passed as children more horizontal is icon from Lucid react okay and then this is just class names below that footer So Below this div is favorite is his favorite title title owner label I hardcoded my name but um I think you can say seller. name or something like that create created at label created that label okay so yeah we want to display in the footer like create a two days ago created two days ago on click toggle favorite because this favorite will be inside of this footer the heart icon and then it's going to be either filled or not fill depending if the if this is favorite disabled favorite P pending or unfavorite bending so we're going to use this to disable the but the favorite button offer is offer reviews reviews seller seller okay and then let's define this gig card. skeleton is going to be a function it should be gig card skeleton return okay aspect ratio and then skeleton is from uh at UI components not from radx UI so that's it this is our gig card now let's uh go to Gig and create favorite and unfavorite functionality so let's go to gig. DS so first we will say favorite is equal to mutation pass in arguments that's going to be gigs Handler uh then check for the identity let me close this actually okay and then identity if not an authorized okay so get the gig by gig ID if there is no gig gig not found not board not found user ID is gig. seller ID existing favorite we need to check if this G is already favored by this user uh user favorites Square user favorites uh with index by user okay so we're going to have to change this but just let's finish this function first so uh buy gig you buy user gig and then say find a favorite so gig favorites is another function is another table and it has uh guy who favorited the gig and the gig ID so that's why we need to search that table and check if this user with this ID exists in that table so that means it's favorite okay and then unique it must be unique if existing favorite um gig already favored I saw this from uh this I saw this part from uh code with Antonio that's why when in his miror clone that's why I forgot to change a board so uh context database insert user okay so if it's favorited throw error but if it's not favorited then we insert a favorite so user ID and gig ID is gig. ID and return gig okay now let's do un favorite before we fix this because this is checking if the seller has faved but not if the currently logged in user is faved so that's my mistake we will fix it okay so let's do I'm fav is the same so I'm just going to go quickly because it's almost the same check identity uh get the gig check if the gig is not found and then user ID it's going to be different existing favorite query favorite so we need to find this existing favorite and then if there is no existing favorite favorite at gig not found or we can just say return you don't need to throw an error okay and then we just want to delete this entry into the of the the table where you have this user ID gig ID so if that entry is deleted then there is no favor and return gig so I think we can just say return we don't need to throw errors here or maybe you should just for debugging so I'm going to leave it here okay so let's go to the favorite function instead of this user ID seller ID let me delete this and let me paste all of this so user we need to check we need to get the currently logged in user from the database not the seller user so this is how we do it we did it a bunch of times and if user is now returned and we don't need this okay so user ID is user uh ID so let's so the currently logged in user is we're checking if this person has favorited the gig so let's go here delete this in un favorites and just get the current logged in user and check that's user ID if I save this we go back then you're not going to get the errors here and here anymore so I think we need to now go ahead and create this gig do get seller so in the gig. TS we're going to export con uh get seller and then we need ID of the seller so we're going to call this with the uh gig. seller ID and then we need to say Handler con seller is context database get arguments. ID so we're going to get the whole ID the whole user and then return the user so that's it this is get seller now let's go ahead and create this footer and overlay so footer is here so let's just before we start with footer let me actually go ahead and comment all of the other few because I want you to see what footer looks like so I'm going to go here comment convex image overlay and actions all of this and that's it so let's go to footer and let's start first some imports okay interface footer props is favorite Boolean title o owner label so the name of the owner created that label so 3 days ago on click uh we'll see what on click is I forgot disabled uh this is disabling favorite button offer reviews seller export con footer is favorite so just get all of these and then give it the this type and make Arrow function average review we need to calculate it type number so reviews length more than zero question mark So if it is more than zero then we're going to do this following reviews reduce I will show you what this does if you don't know so we need accumul accumulated value and review so every time we add up reviews numbers it's going to be saved into this so This is Gonna this is everything from the previous accumulation I will show you so we're going to say a a previous result plus review communication level so it's going it can be from 0 to five plus uh recommend to a friend plus Service as described or zero now sorry I think this is setting the initial value at zero so start from zero okay then divide all of this with review length times three or zero so if reviews length is more than zero do this if it's not if it's if there is no reviews then average review is going to be zero okay so what is this this is a uh reducer so you start from so you first add all of the reviews you add all of the numbers so you go ahead and first review you add communication level plus recommended to friend plus Service as described and then you go to the next review and you also to that result you also add the next review numbers and then you calculate you add everything and then you divide everything by reviews length times three because each review has three grades one two three grades so you need to divide to get an average review and you use reducer because it can uh have like this accumulated value from previous uh iterations then if average review percentage one is different from zero average review is parse float so basically if it's not a whole number then we need to parse float and give it like one decimal point okay so uh con handle click it's going to be event and we're doing this because we don't want to have like 15 decimal points I'm not sure how many decimal points this number if it's float is going to have okay so handle click uh react mouse event HTML button element mouse event and then stop propagation so because it's going to be a button inside of a button or inside of a link I think so we don't want to when we click favorite we don't want this to propagate to the outside link so it goes the link as well prevent default is going to prevent page reload I think or whatever the default behavior for that button is and then on click so we we got on click from this here so I think on click toggle favorite that's our on click function toggle favorite and then in the footer we can continue with return a new div and then uh we're going to show seller full name at the top and then we're going to calculate the width and show title below the seller name another div star this is for reviews and then show reviews length so this is the number of reviews and then average review so we're going to put it into brackets so if I save this I think it should work let me just see the error seller so I think uh we we will be able to see this I think just the problem is this can be null so let's go here and copy this if seller is undefined let's just say seller seller is null return um seller not found or something so let's let's say div seller not found and this must be in the same row so there should be no more errors and we should be able to see the gig here but first we need to we are not using this gig card anywhere so we need to go to dashboard and then page DSX and then remove this high and then comment this gig list uh uncomment this gig list and we don't have a gig list so let's return to finish our footer and then we will continue with the we will make a gig list list so next uh you don't need this I just forgot to delete it okay so then make this p and this is offer. price and this is going to be the lowest price the lowest offer so the basic offer from this amount of dollars and then another div or another p uh owner label created that label that's it okay button disable disabled so this is going to be favored button favoriting button on click handle click uh class name CN and import C n from Li utils and then give it this these classes so CN is going to let you dynamically show classes if a condition is satisfied so if disabled is true then you want to say cursor not allowed opacity 75 so these classes will always be on this button and but if disabled is true then also these classes will be added heart icon from Lucid react class name CN again uh withd height and is favorite and fill blue text blue so if is favorite if this is true then we also fill with blue and stuff so that's going to be our footer I think we need to just go back now and fix this uh this components gig list so let's copy this go to components make a new file gig list. DSX so in Gig list let's say use client some imports uh gig list props query it's going to be search favorit filter so this query I think we we will get this from URL I'm not sure I will see okay so gig list uh export this sare or extract query from this type and arrow function const gigs full gig type we will Define this we don't have this yet or undefined use Query API gigs get we don't have this file at all and then pass in some arguments search query search favorites query favorites and filter query filter so we will get gigs depending on these parameters from our URL so if we are searching for something then we will have this or if we are filtering for favorites or we are filtering for the uh what is it subcategories gigs with favorite gigs with set gigs with favorite use State full gig type array or undefined and set to undefined okay so uh filter for favorites if query favorites is true okay so use effect if query favorites is true so if we have if we are toggling favorites we have that in url const favorite gigs is gigs question mark filter okay so just for each gig get only gigs that are favorit because we are trying to show only only favorite gigs set gigs with favorite gigs with favorite gigs so we're just going to set the gigs so this is just I think this is just like whatever we need to set this based on filters and stuff so this is what we will display uh this is not just for favorite gigs but for like all gigs so I think I should have just say like gigs or something like that uh set gigs with favorite gigs yeah so if query favorite is true you only show favorite gigs but if it's not true then you show all gigs and so this should be like called U gigs to display or something okay so use effect we need we need to execute this every time query favorites changes or gigs changes if gigs is undefined is being loaded so return loading gigs okay so not gigs. length so if end query search this is a bit confusing so gigs. length so if gigs is not an empty array so if geks is oh wait wait wait wait wait so if gigs is empty this will be false but then this will be true because you invert so if geks is empty and qu query search return empty search so if there is nothing to show gigs is empty and favorites return empty favorites we will make these and here return at the by default you're going to return all of this and we have small screen medium screen large screen So based so on small screen we want to show just two columns of gigs on large screen four columns Etc gigs with favorit so this is this is display gigs not gigs with favorite so this is like whatever gigs we are displaying like whatever filter uh map we want to go gig card and then pass in all of everything we need in gig card so key ID seller ID title description all of this stuff and that's it this is it I think um let's just Define full gig type so we want to go to add types index okay so here we want to say export type full gig type that's going to be Doc gigs and so we want to extend with storage ID it's going to be optional ID storage or undefined favorited Boolean offer doc offers reviews review array and seller ID let me import this as well so it's like this now we can go back to the gig list so we need to make empty favorite okay so let's for now comment this out I want to show you what this looks like so let's instead of this let's return now whatever it's okay oh sorry no no no no no no I think like this and comment this and just return null and one last quick thing we need to do is this gigs gets so let's create in the convex folder let's go and find it real quick and make gigs. TS first we're going to do some imports then Con G query so here we need to get this G gig but also all of other like offer reviews and then attach it to that gig so so to get that full gig type that I described so arguments are going to be search optional so uh if we are searching for a particular gig then we're going to just get gigs that have that en title favorites so only then we're only only going to get gigs that user favorited or filter like subcategory so we're going to get just gigs in that subcategory but all of these are optional let's make a Handler function get identity title is argument search as string okay let gigs be empty array if title uh if there is a title so title is like we are just converting search so title is just search so we if there is a title there is a search then we're going to say gigs await context database query gigs with search index search title where title is equal to this where Field title uh it has this like title but this can this doesn't have to be full title it can be just a few letters and it's going to match all the gigs that have this in their title and then collect all of those gigs so this is searching searching by text okay else if there is no like searching then we want to get all gigs by uh and then with index by published H yeah we want to get all published gigs because we only want to display published gigs uh to the like buyer all of the publish gigs and then order the sending so I think this will put latest first and then collect all of them check if there is a filter so if there is a subcategory so somebody user selected subcategory then if filter is not undefined then filter is just arguments. filter so I'm not sure why I'm what am I even doing here yeah we are checking if it's if it's but we don't need to do this I think we can just use arguments. filter um cons subcategory we need to query subcategories by name so we need to find this subcategory that must be unique because each subcategory has a unique name filter gigs so gigs. filter and for each gig you're going to say gig do subcategory ID is equal to this subcategory ID so this will filter all gigs and only save gigs that have this subcategory ID so that are part of this subcategory and then gigs is equal filter gigs so you set gigs to be equal filter gigs so here we are checking if user used subcategory or user is searching by title and they can be both true at the same time okay gigs with favorite relation is equal to gigs we'll see what this is so if identity is different from null if somebody is logged in geks with favorite relation is equal to await promise all we want to resolve all promises that are going to happen inside of this body and those promises are going to be the following we want to map all gigs and then we want to for each gig we want to do something return something so we want to query user favorites with index so we want to check if there is if there is um entry in this table that has this user ID and this gig so that means that this user favorite this gig and then it must be unique and then we get this favorite so what is this favorite I'm not sure so it looks like you get this object when you call do then on unique or on this database so let's see what this does I'm just going to display favorite ah yeah yeah so when you when you have unique it's going to find this unique entry and then you can call then so this is that unique entry from database that object it has this so if you see the this uh object type gig user ID that's from schema okay and then in the favorite we want to return object so we want to spread gig so this will just spread the fields and then we're going to add some other fields favorit is equal to uh so so basically what this means is if this exists then this will be true because it's going to negate on to false so if this exists then so sorry if this exists then when you say question then you say this it's going to be false turn to false so then this will be false but if you say once more then this will be turned to true so if this exists this will be true if this doesn't exist you turn to true you turn to false so this will be false so if this is n this will be false okay below that uh we don't need this I just forgot to delete it so and all that promis is that we are resolving this I think returns a promise so that's why we are resolving a wait promise Sol I don't know if I should have put here a wait no yeah it's not a sync so we need to okay I think yeah this works uh gigs with images now we need to get images for each gig so a wait resolve all promises again and then gigs with favorites favorite relation although this should be gigs with favorite not gigs with favorite relation because this doesn't uh this returns promises and then promises get result so if promises get resolved then it's not a relation relation is just here where you return a bunch of promises so this should be better named gigs with favorites gigs with favorite okay so we want to map each gig con image we want to query gig media with this gig ID so we want to get all media with this gig ID and then get the first I think we want to only show the first image for Bridge gig when we are displaying it in on the homepage but when we enter the gig page then we want to collect all gig media seller we want to query user so we want to get the seller object as well so filter we want to filter we want to get I think I should have I could have done with index so with index where ID is ID is seller ID or I'm not sure if that's oh wait okay let's do it this way but I will show you a better way so you can just say uh get and then seller ID whatever it was the ID I'm I forgot how to like just gig. seller ID so you can say get gig. seller ID I think but there is an extra Clos bracket so you can do it this way or you can get all and then filter which is a slower way but let's do it I'm going to do it like this for now just to show you but this is a slower way and it must be unique okay there is no seller seller not found now get reviews so query reviews buy gig ID and collect all of them easy then find the offer because we need the price so query offers by gig ID and the first one the first one will be the basic the lowest one I think well you need to test this I I I forgot to test this but I think I think the first one will be the basic one okay now we need to return like all of this we need to put into a into an object so return the following we're going to spread the gig so all of the attributes will be spread then storage ID is image question mark storage ID so if image is exists so it's I think this will be uh storage ID or undefined and then seller reviews offer and return gigs with images so you see this what this object looks like if it has all of this like storage seller but the clicks this is a direct attribute of gig so these are gek attributes spread and then besides those spread gig attributes then you have other things that we added here so let me go ahead to my this link this page and just refresh and let me remove filter as well so now this should uh display the gig that we have so there ain't nothing displayed so I don't know why let's go ahead and check why we have some problem here gig list I think this must remain an error because I think I could I wasn't able to fix this but it worked so let's see this gig is not published that's why so we need to publish this gig so let's go manually to username create or man manage gigs and then we need to go to I think this gig ID so let's copy this gig ID oh no edit and then this gig ID so let me click on this publish button publish fail please make sure there are one image and three offers in the description so I think we have a description we have one two maybe we don't have enough offers so if I go here to offers only one exists so let's just whatever I don't even care right now just description it doesn't matter save so we should have two and then third premium just premium whatever price 25 description whatever save and now we have three offers and now if I click publish O Okay so this is offer save successfully yeah so published it's published so I think now if I go back to Local Host and there we go guys this exists the only problem is you don't see the image so we're going to fix that but this gig is listed the reason we don't see the image is we didn't even make it so we we just commented it out we need to make it now so you're going to have this error here in Gig list this is going to be underlined I'm not sure how to fix this but it the thing worked for me so if you know how to fix this tell me below but it's going to work with with this error as well so now let's go to gig card index DSX and let's uh uncomment this convex image and this doesn't exist so let's copy this and create it but first let's uncomment it from here as well so I'm going to just move this down here and let me copy this again so let's go to outside of the app to components and say convex image. TSX so in convex image TSX let's start with some a few Imports then props storage ID question mark so it's optional and title string export const convex image storage ID title convex image props const com image URL is used query API gig media get image get media URL so we're going to make this and we need to pass in storage ID so storage ID is ID storage so this is going to convert storage ID and take storage ID and return URL of the image return div aspect video relative so this is 19 uh 69 and then image source so image URL or this image now you can go to my GitHub and copy this link or you can put whatever link or you don't need this maybe then alt will be title fill so uh this either has to have width or height if you are importing from next SL image or fill so it fills the outer container and object cover that that's important that must if remove this and see what happens now let's go to G media gig media and get media URL so let's go to Gig media export con get media URL that's going to be a query argument storage ID it's going to be V optional V ID storage Handler if there is no storage ID return null return await context storage get URL and then pass in storage ID and that's it so if I go and refresh as you can see we have this working now which showing the image that we have let's go so next in the gig card index Okay g card index DSX we we're going to uncommon this overlay and let me find it down below here I want to move this below overlay and I want to just go here into overlay we already have it and start coding this is the absolute shortest component so export con overlay return div one div itself closing class name opacity group hover opacity so let me save this and see what happens so if we hover group we're going to change some opacities and stuff so if I hover this actually nothing seems to happen so uh here where I have the overlay outside component has this group so when we hover this outside component onent because it has group then this will activate inside of overlay so group hover opacity 30 but that's how it's supposed to but I don't think so I don't I'm not sure why colors are not changing but I want to leave it like this so if you want to uh you know how this works now if you if you want to try test changing something you can try but I like it right as it is right now so let's continue with actions so let me go ahead here and I'm going to uncomment actions actions will let us copy the link rename or delete the gig so let me go ahead and import actions and we already have one actions but we're going to make this is different so this one goes to components actions so uh outside of app components actions. TSX in actions we're going to say use client a bunch of imports that you can import later dat res you program action props children side so let's me go back uh when we where we have this actions you see that we are passing in some children these are children because they are wrapped then we have ID title side whatever so side is going to be drop down menu content props side uh side offset ID title this is optional and this is optional so here we don't have side offset I think we just have side okay export const actions children side side offsite ID title give it the type and then narrow function okay const on open use rename model we don't have this yet we will name it but it will export this on open so this is the model for renaming it's like a dialogue that asks you are you sure you want to rename and stuff so we're going to use our API mutation and pass in a API gig remove I'm pretty sure we already have this if we if I didn't show this in video just go to my GitHub page and copy it but we I'm sure we did this already and then export mutate and pending and then use API mutation so this is for removing on copy link so we we will have an option to copy the link of the gig so Navigator clipboard clipboard I think this is the global object so you just have it or did I import it from somewhere I'm not sure I think not clipboard write text so we want to write the following text do so btics dollar sign window location origin SL gig SL ID so that's going to be the link to this gig oh sorry so I think this will be like Local Host like the full link we'll test it okay and then just to success link copy is a notification or if there is an error fail to copy link on delete mutate ID so mutate is our as you remember remove uh mutation ID is ID gig of the ID gig gig ID and then toast gig deleted this is from uh mirror clone from callit Antonio I saw this this file I learned this from him so fail to delete gig return drop down menu so we're going to Now display all of this in the drop down menu uh drop down menu trigger as child we're going to pass in children so here actions we have this button passing as children so more horizontal is um this is um icon from Lucid react so we pass in this children so when we click those children that button then we're going to open the drop down menu drop down menu content on click event any this should be like HTML button event something like that but I I didn't make I didn't figure it out for some reason but you should figure it out what was the event copy to CH GPT maybe okay so we want to stop propagation because we're going to have I think multiple like buttons inside of buttons so with when we click this content we don't want to like this to also activate the outer wrapping buttons side side side offset class name uh drop down menu item on click on copy link and then class name link icon from Lucid react copy board link or this should be copy copy copy giglink drop down menu item onclick onop and then class name pencil rename so this is for renaming so this onopen is to open rename model that we will create confirm model uh what is this delete ah okay yeah so this is for deleting so I think we don't have this okay so are you sure you want to delete disabled pending so while while deleting this will be disabl on confirm on delete and pass in the button the button will have variant ghost some class names and trash to icon from Lucid react and delete so this is for deleting now I think this is it let's see we don't have this store username model so let's copy both of this and do we have confirm model we do have it so I'm pretty sure we already made this but if we didn't just go to my GitHub but we did make it so now let's go uh outside of app like let's click somewhere on the outside and make a new file use uh rename model. PSX so it's going to be in store username model here we will see say import create from zo stand but we need to install this so npm install zo this is a like a memory internal memory management Global State Management okay con default values ID is empty title is empty interface I rename model so it just can be rename model props is open buan initial values type of default values so this is the type default values it's ID and ID string title strings so initial values will have the same type on open it's going to be a function ID string title string it's what it what it gets and returns void on close returns void we'll check this once more so in app let's go to dashboard components gig list no sorry to components and actions TSX so here uh username model we are using it here so on open we are extracting on open and then we are passing in ID and title so here we have on open and pass in ID and title so let's define this export const username model create so this is create from zand and we need to give it this interface and then we want to set and pass in this and then object is open false on open ID title set so when we call this we're going to pass in ID and title as I showed you what that we are passing this and then we want to set is open to True initial values ID en title on close we don't pass anything we set is open to false initial values default values so default values are empty strings and then we want to set initial values to default values so uh not not then there is no then so just set initial values to default values but on open uh we want to set initial values to ID and title that we pass in so this is a classic Zoo stand uh create object this is how you define like Global state that you can access from anywhere so if I now go back so if I hover and I don't I there should be an icon on the uh top right but if I click on the top right it's going to open this so copy board link if I copy it copied link I can paste it here it's the whole link okay and then I can go ahead and rename so nothing happens when I click rename it seems so we'll fix this and I don't want to delete this one but it's going to we're going to check it later but also favoriting works so if I click favorite it's favorite that I can click un favorite and if I toggle favorites nothing is shown but if I click favorite and toggle favorites this is shown and if I unfavorite it it won't be shown let me see if my search works so haircut but if I start searching for something else search nothing but haircut search it works so the problem here is there is this button but we don't see this icon more horizontal and that's because text we have text white if I say text black we have white on white background it's going to be black but also I think I want to make this not opacity zero but opacity 25 so I can see a little bit of this when it's not hovered maybe do as you please now let's make empty filters and the empty search so for example if I search something and there is nothing I want to display like some better UI here so go to Gig list inside of uh components dashboard and down below let's remove this null and say empty search and let's uncommon this and remove remove this null empty favorites save that and uncomment empty search and empty favorites so uh this is going to be so inside of components folder make empty favorites. TSX and empty search. TSX and then let's start with empty favorites so import image from next image and then empty favorites export con empty favorites and return uh make a leave image source slmt favorites SVG this is image that we will create so let's copy this and let's go to public now God knows where public is and then create empty image empty favorites SVG so that's it we can close this for now let's continue with height 340 340 and then title below low H2 no favorite favorite gigs and then uh paragraph try favoriting a gig so import image from next image export con empty search and this is a just a div and then image it's going to be the same we need empty search SVG let's copy that alt empty with height title no results found paragraph try searching for something else so that's it now let's just create these two files so in public folder let's create empty search SG and now let's go to my GitHub in the description below you're going to say you're going to click here public and you're going to click to empty empty favorites and you can just I think go somewhere here how do I copy SVG I think we need to show like edit this file okay let's just click download this and then empty inbox and then I'm going to download empty inbox and I'm going to also download empty search download all of them and just put them into favorites so I will go here I'm going to drag this into favorites replace then I'm going to go to the next one into into public and the next one I'm going to also replace so that should be it so if I refresh this we need to refresh the image is shown let's go so now I'm going to go here and delete this search from the URL and I'm going to go ahead and enable favorites and there is no favorites and one little mistake we made so if I turn on uh favorites and there is nothing favorite nothing is shown not our our empty stream screen is not shown that's because we are not checking for gigs. length because gigs do exist uh it's it's going to be like that one gig it's going to remain there but we are going to check for gigs with favorite so here we are checking if query favorite is true then we update like uh gigs with favorite so we need to check if gigs with favorite uh length exists so if this length exists and then or if it doesn't exist and then favorites is true then we want to display empty State now if you want you can also make an empty state for uh these like subcategories I didn't have time to do it but if you want you can do it yourself now when I click this gig I want to make it uh I want to make this page gig page so this page is username gig ID so let's go to our code and in the app I'm going to say username in square brackets slash gig ID but it also must be in square brackets gig ID like that and/ page. DSX let's start with use client a bunch of imports that you can import later uh page props parameters username string KY ID so these are URL parameters so if you go to the page this is going to be the first parameter this is the second and you will just get this you don't need to pass this anywhere you can you can just extract it here and you will get this from because it's in the URL okay so let's make uh export default gig page const gig use query API gig get and pass in the gig ID so this is going to be string I think we could have just done this but I think okay let's do it this way so we need to cast it so this one I forgot to delete so you don't need this uh category and subcategory okay let's get that API G get category and subcategory did we make ah we didn't make this okay and then passing gig ID just cast it as this type offers so API offers get gig ID reviews get reviews get by gig and gig ID and then reviews full I think this is full reviews type let's see what this is get full by gig so and passing gig ID so I think we will we'll see what this is when we make it okay so if gig is undefined or reviews is undefined or any of these reviews full category anything is undefined that means it's still being loaded so you're going to return loading you can maybe return even prettier screen but for now let's just type loading if any of this is now so gig doesn't exist categories doesn't exist offers don't exist not found if gig published is false this gig is not published const edit URL so so the owner of the gig uh it will have a button to edit the gig if the owner is viewing their own gig and when they click this button we're going to push them to/ seller username manage gigs edit gig ID okay return div just uh some div for displaying the page okay so first thing this is we're going to show something inside of this gig that's going to be headed so we're going to spread category and subcategory in header and edit URL and owner ID gig seller. ID so I forgot oh yeah I think this is just like this is just going to show like category subcategory we'll see what this header shows okay then title of the gig then we want to make a seller box so we want to show like who the seller is so we're going to pass in seller reviews so we want to make a short small box like this guy is from this country speaks these languages about seller box small box then show images of the gig so we want to say images is gig images title and allow delete so allow delete is false in this case because this is not edit page we will only allow delete but I think we made these images I think we made it yeah okay this don't need this if you want about this gig if you want to say this but I decided not to go with it so this is the description we already have it editable initial content and gig ID I think we have description yeah we made it okay so below that we're going to make some divs and that's going to be info so what is info I forgot oh this is uh info is a icon from Lucid react and delivery preferences is the title and then please please communicate any preferences so this is just a box that shows this information then we're going to say seller details so this is similar to seller but this is uh on the top less details this is more details seller gig seller reviews we're going to pass last fulfillment time languages reviews reviews show reviews okay so add review gig ID seller ID then we want to show offers offers seller ID edit URL so this will be on the side so I think this has Flex Flex call so this will be on the side besides all of this now let's go to Gig and get category and subcategory so let's go to Gig TS export con get category and subcategory arguments gig ID uh let's say Handler so we're going to get the gig by gig ID if there is no gig gig not found subcategory will be await context database get gig subcategory ID so get the subcategory there is no subcategory subcategory not found category get the category by this ID from subcategory if category not found say not found return category category name subcategory subcategory name so that should be it just save it and go back to to the page TSX that we were so let's now make this reviews so let's go to convex folder and let's make reviews. TS so in reviews we're going to import these export cons get by gig arguments Handler okay cons reviews we're going to query reviews Within by gig ID and collect all of them return reviews okay so this is getting reviews by gig ID now let's get full by gig so I think those are going to be full reviews type we'll see argument gig ID Handler first get reviews query reviews by gig ID we already did the same reviews full type await promise all so we need to resolve all promises so then we will say reviews map a sync so for each review we're going to do the following let's make some space gig is going to be query gigs by gig ID although I'm not sure why I'm doing it like this I you can delete all of this and just say do get and gigid like this it's going to get the same but I'm filtering for some reason this is slower and worse okay so if there is no G gig not found image so query gig media by gig ID and first image if there is no image image not found so we want to display image of the gig at each review image URL is contact storage get URL and pass in storage ID then image Ur if your image URL not found next let's get offers so query offers by gig ID collect all if offer is not found image with URL so we're going to spread image and URL so this is image with URL let me see the type so you have all of the uh image attributes spread and then URL get author country so query users by ID unique so again just do this get this if author not found country is query countries by user ID unique country note found return review spread review gig image image with URL offers author author spread author country so basically what this does is you have it basically makes it same as author but just with another country field and we need to return uh reviews full time Ty so in the username gig page TSX we don't need these things that we are not using so let me delete this delete portfolio and now I'm going to make U another folder underscore components components like this and so I'm going to have to make header so header. TSX what else are we going to need offers and sellers so let's make seller first next to header seller. TSX but header is going to be a bit offers will be a bit different so we're going to make a folder offers and inside index TSX so let's say offers slash index. DSX so this will have the same import path as if this was just file offers. DSX but we want to be able to add some more files here inside of offers to organize it better so so what we need inside the offers folder is content. TSX and in the components we also need seller D details. DSX now let's start with header for example I'm going to start with a few Imports so interface header props category string subcategory string edit URL string owner ID string and then let's extract all of those give it the type Uh current user is use uh use Query API users get current user so we want to just get the current user currently logged in user uh and then router use router this is from next SL navigation very important not from next router handle subcategory click you so you want to then uh push wait let's see what we want to do so when we click subcategory we want to query string stringify URL to be slash query filter subcategory so we want to add this filter to the URL and we want to skip empty uh string true skip null true and router push URL so when we this is going to be so uh this this is gig page gig page will have category and subcategory of that gig on the top just to show it for information but if the user clicks that subcategory we want to load all G gigs you want to push them to the page that loads all gigs of that subcategory let's see what we return div with a bunch of class names link SL so this is for homepage then we want to put a slash then category name then another slash and then subcategory name but on click we're going to handle subcategory click and then subcategory name so handle subcategory click okay below that I don't know why this is R okay so if current user exists or actually if current user ID is equal to owner ID of this gig then you want to show the button to edit this gig so button link edit URL and just say edit gig so let me save this now let's go back uh I'm going to actually just comment out all of this so we can see what this looks like so we don't need seller we don't need um any of this stuff and we don't need offers so let's see now now this is what our gig page currently looks like it's a complete monstrosity for some reason I think we don't have layout the X so but here we can see that we can click homepage we can click or we if we click like this graphic design is going to load all gigs that have graphic design filter and then edit gig it will push us to and then we have title and everything so this is editing page now let's fix this layout so it not it's not like this so let's go here in username folder let's make uh a new file layout. TSX let me close this and we are going to import navbar from do do dashboard components navbar interface user gig layout props children react node so and then export default dashboard layout oh it should be well you can call it dashboard layout or user gig layout whatever okay so we're going to extract children from this these props return div navbar at the top and then Main and then padding zero small screens padding six medium large screens big padding and then just show children if I save this I go ahead and refresh as you can see the layout is a lot better now this image is ugly as hell but we can fix all of that this is a description that we are showing delivery preference es so it's starting to get shape there is also nav bar at the top now let's go to page TSX of uh gig page gig ID so let's do this seller now so let's uncomment that and let's uncomment seller so let's go here in components seller TSX so let's do some imports interface seller props seller reviews array okay and then export con seller seller reviews seller props const average review reviews reduce so we are calculating the average review the same way let me just uh reveal the full code and then I will explain so we're going to use reduce reduce allows us to go for each review not only do we add communication level score all these three scores but we can also add it to all previous scores so we can calculate like add up every score of every review of everything and then this so it starts from zero and then every time you get so you just add everything up and divide by reviews length now this is a bit suspicious because I think it should be reviews length by three because each review has three so we'll we'll see we'll see if it's get if it gets like a uh weird number then it's it's divide by reviews length times three okay so let's say some div this is link okay so when we click this is going to show user Avatar user profile image when we click it we want to go to seller user username this Avatar is from uh add components UI like UI components not the radx UI uh that's important so avatar from comp you components UI Avatar so I'm going to display profile image URL or this link GitHub com/ Shad CN PNG if this doesn't exist Avatar foldback uh seller username character at zero so the first character of the seller username if this image is not like able to display okay then let's make another div with 300 F pixels and then another div link seller username so we want to link when the user clicks here we want to link the same link seller username and that's going to be seller full name so when we click on full name we also want to link and then seller custom tag now custom tag is like top rated seller for example or new seller or something like that those are going to be custom tags okay below that let's uh do class name so to divs Star uh this is to show reviews so we're going to say reviews length so this is the number of reviews and then average review or zero so we're going to put that in Brackets so that's it it now it should but I think if we get a weird number like this average review should be divided maybe like this times three and then put it in Brackets because each review has three of these but let's let's do it like this for now okay so this is it guys let me close okay so basically if I close this um we see the user image this is the placeholder image because I don't have the profile URL image and then there is zero reviews so this is that part now if we go back and scroll down we will come across seller details so let me just now show seller details and we want to uncomment seller details here so this is going to be more details it's going to be similar but more details so let's go to seller details so let's continue some imports that you can import later so then we are going to const format oh my God why am I doing it like this you should just import format from dat FNS okay but this also works I think uh okay uh interface seller props seller user with count country type I think we're going to make this uh like type reviews docs doc reviews last fulfillment time number or undefined language doc languages this is we Define this in our schema export con seller details export extract all of these give it seller props const router is used router from next SL navigation okay and then average review the same way we calculated every time I so add all of the reviews of each review this is a reducer and the divide I don't want to explain this third time so I don't need to waste your time join date format new date seller creation okay so we need to find the date at which the user joined and we're going to display it as month month month so Feb 23 for example that's how we do it time ago undefined last if last fulfillment time is different from undefined then we will format distance to now and new date last time and so we're just going to this is going to be like 3 days ago two hours ago Okay add suix true I'm not sure what the suix is you can try deleting it uh languages string languages. map languages language. language so this is like language name so language. language name if you want to name this language name but this is correspond this corresponds to this okay join join languages with like comma join the whole array handle contact click uh and then you want to push to inbox and that seller username so you want to start a conversation with this seller okay and then uh we want to make a div div link seller username show Avatar so image of the user this is the same thing we just uh send to seller username okay below that link to seller full name it also links to the user profile then we want to say seller title okay it's like a PHP developer or something like that and then let's make some gigs star icon from Lucid react font semi bold uh reviews so length of reviews so for example three reviews and then we want to open brackets underline and you want to show average reviews or zero if this number is weird as it might be then you want to if it's incorrectly uh calculated I think you need to do this so divise divide all of this with three but let me remove this because we don't need it let's add this div and then below that let's say seller custom tag so for example this can be like new seller and then we want to add a button uh the variant outline on click handle contact click and contact me so this will push to uh inbox below that add a few divs so three divs one in each other form seller country oh from from the country okay another div below joined join date time ago if is different from undefined and then display display whatever we have here so we're going to have last delivery time ago and then languages length is if it's more than zero then display div languages languages string and then separator and then we want to display seller doab so that's going to be our seller page we are only missing this type so let's quickly go to types now let's finish this file because we don't want to return here every so often so messages message with user type this is the first type we will Define it's doc messages and user doc users then gig with image type doc gigs and image doc gig media array then user with country type doc users and Country doc countries and then review full type so Doc review reviews and author user with country Type image image with URL type so we are using these types and then offers doc offers array and then gig and that's it and then export categories full type so doc type got doc categories and then end subcategories so that's it those are all the types and now that we defined all of that we are able to see this from Hungary join 20 March uh 24th if I go ahead and say contact me it's going to push me to inbox but I don't have this I don't have this yet so let's now continue with this gig page let's do offers so go to username gig page TSX and uncomment this offers so let's go down down and do this and now we are going to go here uh offers index TSX that's the next one so we want to do some imports interface offers props offers uh seller ID edit URL and then off extract all of those return whatever this is some div offer if offers if offers exist then we want to show tabs default value is first offers so we want to just select the first like basic offer and show it as default class name with 400 on small devices uh sticky means as we scroll down this will stay on this position on the of the screen it won't be like scrolled over so it will stay on the top four you will see T list offers map so for each offer we're going to return tab tabs trigger so tab trigger will be the button for the offer so we need to pass in key because we are mapping value will be offer ID offer tier so basic standard premium and tabs trigger so what we have three buttons basic standard premium and when we click one of them it's going to show the content for that offer so below that let's map offers again and return tabs content passing key value offer ID so for each offer we are making tabs content close tabs content okay and then content this we need to make this we didn't make this yet we will just pass in offer seller ID edit URL and that's it now before we can show these offers we need to go ahead and edit this content file let's start with import offer props seller and edit URL extract all of those props okay so we have order now this is a button so we're going to say API stripe pay router from a use router from next / navigation current user is going to be um get current user seller will be API users get by ID so seller ID if any of these is undefined it means it's still loading then seller if a seller is null return not found um a handle order now so you're going to try const URL is await order now so this is a mutation that's going to take price side D offer strip price ID and title of the offer and seller ID and it's going to return URL so we're going to make this if there is no URL stripe session error and then router push URL catch error any I don't think we should put any but I I don't know how to do it without I haven't spent too much time so tell me in the comments if you know uh toast error error message handle send message router push inbox okay so this is just like a contact user send message whatever the button just push to inbox chat revision text offer revisions is equal to one so one revision or 0 to three uh revisions return div uh offer description and then below that offer title and offer price and dollar sign below description we're going to make clock icon from Lucid react and then days delivery so offer. days delivery days delivery three days delivary okay then div uh refresh CCV I think this is icon as well and then um offer revisions revision text so three revisions for example okay if current user ID is equal to seller ID then you want to have a button on click handle order now okay so ahuh so if the current user ID is different from seller ID then you want to be able to order order now and button send message so if it's not the seller reviewing their own gig so if it is seller reviewing their own gig then you want to show a button that says edit and points to this link edit URL and let's save this now because I want to show you what is look what this looks like let me comment this let me comment this now let's see what else we need to comment actually no I think it will be too much struggle so let's just create this so users get so let me go to users so here export con get query arguments ID VI ID users Handler uh user is going to be await context database get ARX ID and then user so just get the user by ID and let's just uh create this stripe pay so let's go ahead in the convex folder create create stripe. TS I think it already exists yeah so go here and we're going to make pay so here we're going to say pay action import this action from generated server args price ID title seller ID Handler const stripe is new stripe process and uh next stripe secret key we already have this so we're going to pass in API version so just to create this stripe client domain it's going to be process and uh next public hosting URL I'm not sure if we have this so let's go here next public hosting we don't have it so we're going to save this and that's going to be like that and let me copy my domain but it's just going to be here and we're also going to have to copy this into convex um variables in convex we will go to settings and envir environment variables are the new one like that save so we're going to change this you're going to change this when you deploy it then we're going to say price is a weit strip price PR is retrieve arguments price ID so we're going to retrieve this price price do unit amount is now if it's now ret stripe price doesn't have unit amount okay uh stripe account ID so this price is we def we when we create an offer we create this price if you remember in our stripe so we need to uh retrieve it okay so stripe account ID will be string or now await context run query internal users C stripe account ID from that user so we're going to use this uh using connected accounts so please go ahead and uh just look for stripe connect or stripe connected accounts and read this documentation because and read this because if you this will allow you to have your stripe account and then to create a Sub sub account for each of your sellers in on your platform but you should read this and know understand how it works especially if you want to change something maybe you going to have some other idea so please read this but looks like our stuff already works here so we have standard premium you see what it means for this to be sticky so as I scroll it's going to stick on top and this works so let's continue stripe account ID of that there is sub account ID of the connected account you're going to run this query to get account and pass in this these attributes props and then stripe account ID if it's null throw error con session stripe. response and then stripe checkout session that's the type await stripe check out session create okay and then say mode payment line items it's going to be this price data currency USD uh product data name arguments. title unit amount price. unit amount quantity one so I think we are creating like this this is how you create stripe like order payment in 10 data application fee amount price unit amount times 0.10 so if you want to take 10% which is actually maybe even too high if you want to take 10 or 5% of each purchase of gig in your uh on your page platform then you say it here so if you want to take 5% then it's time 0.05 okay so but for this you need to have like connected accounts working which I will show you how to set up but also like it's you need to understand how it works from documentation success URL after the order is successful you return to the domain for example and cancel URL also return to domain but you can say domain slash cancel and then show some message I don't know okay so after this in the creating we need to also say stripe account stripe account ID so this is is the ID of this connected stripe account and then return session URL so this session URL will be like a URL that we will push User it's going to be like that stripe checkout session like a stripe checkout page so let's go ahead and into users let's first import this internal it's from generated server API so users get stripe account ID so let's go to users users. TS so here we want to um say export con get stripe account internal query because we don't want this to be exposed to our client just inside of this convex folder with other like convex functions arguments is user ID Handler uh we want to say just get user by user ID if user is null user not found return user. stripe account ID so let's import this like that and that's it let's go back and save this as well so right now if I go ahead and Save St say standard but I'm editing so let's go to a different account where I can purchase so let me sign out so now I logged in register with a different account and I'm going to say order now okay I that's an error I think if I try changing this yeah we have some error stripe account not found yeah so in the convex database we don't have stripe account ID here so I logged back again into this account that's owner of this gig and what I have to do is uh I this account should have connected stripe account so we can do payments so I think we should make make it so that even like if this user doesn't have a connected stripe account he cannot publish gigs but let's first make connecting functionality let's go to nav navbar in dashboard underscore components and just add this after switch to selling add this uh connect stripe so then create connect D stripe TSX in the same components folder so we're going to start with use client and some imports in Connect stripe TSX and then connect stripe export default connect stripe router use router from next / navigation user ID set user ID to use state ID users create stripe that's going to be action use action so you want to use action instead of mutations or queries when you need to call it external apis but if you don't need to then don't use actions it's better to use queries and mutations API users create stripe we're going to make this user ID is undefined return null return div in the same row and then button on click it's going to be a syn synchronous const URL is await create stripe so we will call the backend API to create stripe this will return URL for us to register to stripe to connect our account to stripe and then router push URL so this will go to stripe.com SLC create account whatever and then close this button and say connect to connect stripe so let me save this and I'm going to go here and import this and now we need to go ahead and say users create stripe so let's go to users TS so here we're going to say create stripe it's going to be action arguments user ID Handler check identity if there is no identity called create stripe not store user and then con stripe is new stripe process and the next stripe key and API okay account ID is stripe or now so it's going to be string or null and await context run query internal users get stripe account ID we already have it here so we just need to import this at the end passing user ID okay if account ID doesn't exist const account stripe accounts create type standard read about this in the docu connect stripe connect documentation account ID account. ID and then context run mutation internal user set stripe account ID and pass in user ID stripe account ID is account ID account link await stripe account links create account ID refresh URL process and next public hosting URL return URL next public hosting URL SL stripe account setup complete we need to save the stripe account ID of this user that successfully created stripe account and then arguments user ID here type so we need to save this ID in the database okay account on onboarding and return account link URL so we're going to push the user to this URL let me import action let me import Stripe from stripe and let me import internal and next public hosting okay so this must be process and next public hosting URL and we need to create this one okay so below this in the user just say internal mutation set stripe account ID um that's going to be user ID stripe account ID Handler user is await database get so just get the user by user ID and then user not found context database patch arcs user ID stripe account ID is going to be ARS stripe account ID and that's it so let me import this and that should be it everything should work we need to make a few changes in Connect stripe so let's delete this we don't need user ID at all uh API create stripe and then here we will not pass anything as arguments now in users TS uh we need to make arguments empty object so create stripe make arguments empty object and what else I changed is we need to um here get user so run query API users get current user that's how and then copy this user and user ID will be user. ID and so also we want to say if uh not user if user is null just return for now so we don't need this now and and then copy this instead of arguments user ID we say this so that should be it let's say actually here as well okay that should be it and now it's telling me that this URL can be null so I'm going to say if a URL is null we just want to return so make sure in nav bar you have this connect stripe imported and if I go ahead and click connect stripe it's messed up we will fix styling let me see just if it works and I am successfully getting redirected and now you need to like create your account everything so you can log in with your existing stripe account but let me return back so now we need to create this URL stripe account setup complete and then uh ID of something let's copy this stripe account setup complete so inside of app let's make a new file stripe account setup complete slash in square brackets user id/ page. TSX here we are going to say use client and import and then we're going to say props params user ID that's from URL and then then stripe account set up complete extract params give it type uh and then start with update is use action API stripe set stripe account setup complete we're going to make this router use router from next SL navigation use effect uh set stripe I my God so that's going to be async and then Arrow function try a wait update and pass in user ID and then push back to after this is finished push back to homepage catch error and then toast error error saving your stripe payment processing and push back and then call this set stripe account setup complete and then this use effect will update when update changes param user ID or router return div stripe account setup complete this page will redirect shortly and loading so that's it we are going to just uh we're going to have to make this I'm just not sure what this even is so let me comment this out I think this is useless so let's go to stripe. DS so set stripe account setup complete it's going to be action arguments user ID Handler const stripe create a new stripe a object client API version const user await context R query API users get and then pass in user ID get the user so if there is no user user not found user stripe account ID so there is doesn't exist stripe account not found uh account is going to be equal to await stripe accounts retrieve user stripe account ID and then account uh charges enabled we're going to run mutation internal users update stripe setup and pass in user ID and stripe account setup complete so update stripe setup I have no no idea if we got this let's see now we don't have okay so we're going to make it and then else throw error so let's go ahead and import this API and then we need to go to users and update stripe setup in users DS we're going to say update stripe setup internal mutation and then stripe account setup complete bullan and ID those are arguments Handler function context database patch arguments ID stripe account setup complete argument stripe account setup complete now let's go here connect stripe let me go ahead and fill all of this information so I went through everything and now well let's see what happens so let me go here and looks like I have stripe account ID right here so that's it stripe account setup true so this should work now if I go and log in into the other account I should be able to purchase I just logged in into the different account and let me go ahead and order now and we are getting stripe checkout and I'm going to fill it with this test data so this is data if you are in test mode this is stripe test data so 424242 424 so whatever and then pay and that's it I paid the user now one important thing is I didn't really have time to do anything else with this so the way this works now is you it's based on trust between user and the seller so seller G gives something and then user pays them or orders in advance so right now I'm not tracking uh like the payments in my database because I don't have I didn't have time to do it but you can just go to my YouTube and set up and development video that I will show in the description below it will show you half of it is about stripe so it will show you how to set up like how to track payments with stripe web hooks so you need to make maybe some web hooks on stripe so track payments and then some apis in your website but also this works as well so you don't need to make it like until later because the website will work now let's fix this messed up styling so go to connect stripe button and just remove all of these uh classes and say button variant to be open this and secondary connect stripe we don't want to show this if the stripe is connected so here uh in navbar we want to say if not current user do stripe account setup complete and display this and then close it so if it's false this is so if it's setup this will not be displayed but on this account it's not set up so let me go to the other account where I set it up so here here there is no that button because my stripe is set up so now if I go to my gig and I click user we go to user profile but it's not found so let's go to our code and here where we have Dash no username and let's just click and say page. TSX so here we're going to start with some imports that you can import later interface seller page props parameters username gig ID now this is a bit weird because we don't have gig ID so what I was doing here I have no idea uh okay so params uh and then seller page props I I will fix this I think this is like not not necessary okay Arrow function export the page seller use Query get user by username and then pass in username skills query API skills get by user pass in the usern name gigs squarey API gigs get by seller name pass in seller name I just forgot to delete this so don't you don't need this and then we want to get reviews get by seller name and and then uh pass in seller username seller so if any of these is undefined we just want to return loading if any of these is null then not found although if you review is null it can the seller can still be found so um we'll fix this okay uh skills string so we want to get all the user skills and just map so we want to map each skill so this is skill name skill object and skill name we want to join them in all into string all the names so if seller is undefined or reviews is undefined then return loading if seller or reviews is null return not found this is weird Okay um we want to go make some divs this is uh for all screen sizes another div profile card seller pass in reviews and then div about me and then seller about div skills and then skills string my geks list seller username just passing seller username my so sellers gigs review stats so this is like a it's is shown like as stats like with bars and stuff so just passing reviews and then actual reviews so we want to display reviews as well besides reviews stats so passing reviews and that's it so I think what we should do is completely remove this reviews is equal to null and seller we we already checking if it's null so we don't need it here seller is undefined and reviews undefined we are checking this as well already here and then uh if reviews is null you should still exist I think if skills is now like there shouldn't be any problems okay and then so we want to check if skills exists or empty string like this so I think that's it now this is any type so we are going to solve this so if skill exist then show skills otherwi otherwise just display nothing and make sure you spell it as skills so let's create these things that we are importing so let's go to API users get user by user name in users TS export con get users by username query arguments username optional string Handler if arc's username is undefined return null if not arc's username return null uh so this is yeah if this is null but it can be only undefined so I think this is unnecessary also okay so user wait context database query users with index by username and then unique and then return user that's it now go to gigs. DS and then export con get seller get by seller name so get gig by seller name query so we need seller name Handler so get the user so query users by username then if user is uh not or null return null and then gigs is a weight context database query gig gigs by seller ID and you say user ID seller ID field is user ID and collect all gigs of this user and then return gigs okay let's go create this skills and say get by user so let's copy this skills and in the convex folder say skills. TS here do some imports uh get by user it's going to be query arguments is username Handler function identity and if not identity unauthorized user await context database so query users uh we want to query by username and get the first user although get skills by users so I think this should be unique not first but anyways uh just if there is no user user not found but unique and first both work it's just that unique will throw an error if there is more than one okay uh skills we're going to query for skills by user ID and then collect so this is the user ID and collect all of them and return skills that's it so in reviews TS uh export get by seller name and then we want to go ahead and say uh args seller name Handler we want to get seller by like query users by username so by user name username ARS seller name unique seller seller not found reviews now we want to get reviews so query reviews with index by seller ID and collect so you don't need this I just forgot to delete it reviews full type promise all so we want to resolve all promises now for each review you're we're going to map it and say gig is await context database query gigs we want to filter all of the uh so we want to filter all of the gigs by review. gig ID so I think we want to get all of the gigs that have oh this is confusing so ah it must be unique yeah so we're going to get a review that this user left on this gig so I'm not sure why I'm doing it like this so this is bad so I can just say review gig ID and I say get like this but I made this project two months ago when I was just learning this so that's why okay so I'm going to leave it this way for now but you can whatever you want so gig not found okay now we need to query images with by gig ID and then get the first image because we only need one image to show in the review and then if there is no image image not found yeah be yeah a wait so get U okay so get URL image storage ID so this image object it has format storage ID but doesn't have URL so we need to convert this storage ID into URL and then image not found um context database query offers now we need to collect offers by gig ID and collect so that's going to be premium standard basic whatever if there is no off off offer is not found image with URL that's going to be so we spread the image we spread all of these fields and then we add below the last field we add URL image URL get author country so query users author ID this is bad no you copy this and you say do get and then uh in Brackets do getet in Brackets review Author ID okay but you can do it this way as well to get this author by ID author not found if it doesn't exist country by user ID unique again you say so we're going to query countries ah with index okay okay that's it that's this is good this is good okay so no country country not found return spread review object then add gig image image with URL offers author author is going to be spreading author and Country and then return reviews full type so you see what reviews full type has it has all of this so the database functions are finished we just need to make a few components here so let's first copy this underscore components profile card go to the same level and then click that page and just say. DSX so profile card we're going to do some imports profile card props seller is Doc users reviews doc reviews export con profile card we're going to extract these props and then Arrow function languages so we want to get users get languages by username and username will be seller username I use Query it's going to be get country by username so we want to pass in the username languages undefined country undefined we return loading languages string so we want to just convert this uh array to a string so for each language we want to get language object dot this is name of the language and we want to convert like join all names into string average review we do this the same way we did it like four times already so I'm just not sure if I need to multiply this by three because so if this review is weird if it's higher than five or something then because I think I explained so let's not waste your time return div Avatar uh Avatar and everything is from components UI it's never from radx UI okay so show seller profile image and fullback is like first name of the seller we did this and then um div another div another div okay so we want to show seller username and seller at seller username oh seller full name and at seller username okay some div star this is uh for I think reviews reviews. length so number of reviews and then average review but the average review will get messed up because I think I need to multiply by three maybe okay so seller custom tag that's going to be um top rated seller or new seller or Rising seller whatever the custom tag in your database is seller title some div another div message Circle languages strings so what languages is seller speaking okay then do this map pin country country name and that's it that's it that's the whole page now in users let's say export con get Language by username arguments username Handler okay so now let's get user by username by username unique there is no user and then languages let's query Languages by user ID and collect all of them and return languages then get country by username so user this is the same so just get the user by username check if it if the user exists okay query countries by user ID and this must be unique and then if there is no countries country not found uh return country that's it so profile card is Now does not have any errors so let me actually comment all of these and now I'm going to comment all of these I want to just show you what profile card it looks like this is what it looks like I don't have no skills I don't have no country I don't have no languages there is no here as well the user tag but we'll we'll work on this now let's display all gigs of this user so in com Pro next to profile card my gs list. DSX let's start with use client and some imports my gigs list props user seller username is going to be string my gigs list seller username just extract this okay okay so gigs use Query get gigs with images and then pass in seller username if gig is undefined return loading return okay we need Carousel from um components youi Carousel so options align start Loop true Carousel of images will be Loop will Loop drag free false I'm not sure about these but this is like maybe you want to be able to drag or not drag by like images and then class name W full uh close the tag so we have next in previous image or is this now this is gig list so this is not image and then Carousel content gigs map so for each gig we're going to say Carousel item um 13 so I think this is display play ah I don't know okay so link when we click each uh gig it's going to go to that gigs link to that gig's page so CF uh seller username and gig ID images okay so yeah each gig is also display all of its images so you can scroll through images so we need to say images gig images Title Gig title allow delete fals that's it now we need to just make this in the database so go to gigs so in gigs DS we're going to say export cons const get gigs with images and then argument seller username Handler okay so get seller by username we already did this I'm going to skip through this quickly okay so now we're going to query gigs by seller ID this is oh yeah okay this is good by seller ID get all gigs from this seller then check if there is no gigs gigs with images we want to promise resolve all promises so for each gig we're going to map all gigs okay so image we query gig media by gig ID collect all of the images for this gig ID images with URLs so we want to resolve all promises again so for each image we want to convert this image storage ID into URL image URL because imagees object that is that has storage ID but not the URL so you need to convert this to URL and then image not found and spread the image and add URL so here if I go here we have we have spread image and then URL gigs with images now spread the gig and images image images with urls that's it return gigs with images so now gigs with images gigs with images although this should be gig with images not gigs with images okay and then here return gigs with images so my gig list is now like it works so let me go to um where here page TSX and uncomment this my gig list and let's go down and uncomment my gig so I'm GNA move this comment down like that so if I go here now I should see all of the gigs it's right here and I think I can scroll through images although I think this gig does not have any more images I clicked it and it went to the gig page so this is going to be a carel so one gig here one here one here and there is this Arrow so all of the gigs will be shown here and now let's go and show reviews so uh in the components we want to make a new file reviews SL reviews. DSX we also want to have review box. DSX add review. DSX and reviews D stats. TSX so in the reviews TSX make some uh do some imports uh reviews props full review review full type and then extract the props calculate average score for all reviews so array five feels zero initialize array for Star Distribution uh five levels we'll see what this is so we want to calculate the average review score that we did 10,000 times okay uh ah this is wait wait wait wait wait wait wait wait wait wait wait const rounded average math round average start distribution I think this requires more work let's see let's see I need to first see like what is what this even is okay so we are getting average score that's reduce so we have total and then for each review we calculate the average for that review and then we round that average and then we say uh start distribution what is this even uh it's an array filled with zeros and then we count the number of reviews for each Star level return total plus average and then review divide by reviews length so this is to show the progress bar for so for example we will have recommend to a friend and then progress bar for only those like for all of the reviews we just take recommend to a friend and then make uh calculate average of all recommend to friend and then so that's why we are doing this but I forgot exactly like okay well we'll see calculate the maximum number of reviews for any Star level to set relative progress bar maximum Max reviews Star Distribution math Max Star Distribution okay rating breakdown uh seller communication level calculate average review Map review review calcul communication level okay so just calculate average for all of these so um so here in calculate average we are sending we are mapping reviews such that we only get reviews. recommend to a friend so here we are only sending a recommend to a array of recommend to a friend numbers and that's it so only a ray of numbers so recommend to a friend from each review okay now let's define this calculate average it's going to take array of numbers it's going to return a number if values length zero return zero some values reduce total value total plus value start from zero return sum divided by values. length this will calculate leverage so here for example average so here recommend to a friend as I said we send all of the recommend to friend values from each review in Array only recommend to friend values and then get the average of recommend to friend review return div reviews map return and then this uh fragment review box and key and review and separator at the bottom so that's it now let's just make this review box that's going to show our reviews so review box let's go here review box that we already made let's start with Imports uh props and then extract props the standard okay average score we did this already soeg so average score for this review and then distance to now so when the review was posted for format distance from now and review creation time add suffix true I forgot what this suffix is turn div Avatar so Avatar Source oh my God I just hardcoded it what graat I I don't wait maybe this should be like user do image or I don't I don't know what this even is okay so there is no fullback div uh review Author full name review Author country country name review comment and then div distance to now so 5 hours ago uh and then div display five stars so we're going to make a new or is it no what is this this is making a new array I think and then map and then display Stars size color star is icon this is icon okay and below that average score to fixed one let's see what this even does separator and then div ordered div another div aspect ratio 169 image review image URL fill so you you're going to fill this must be fill and then review uh gig title and this and aspect ratio close and then below div outside of this div and then review gig title now let's go back to page TSX and uh we're going to uncomment this and we are going to uncomment reviews but I'm going to do that by moving this here so I think our gig has absolutely zero reviews so that's why it's not showing anything so we need to make a functionality to add reviews as well so let's do that now let's do this ad review so use client Imports ad review props gig ID seller ID form schema this this is going to be a form we're going to say Z object comment Z string minimum five characters message comment must be larger than five characters Service as described number minimum one Services typ must be at least one maximum five message recommend to a friend number the same thing uh minimum one maximum five and then communication level minimum one maximum five okay that's the form schema object okay export con review extract these con mutate pending from use API mutation API reviews add okay so form use form Z so type is z. infer from type of form schema so the type of form we're going to infer from this object uh resolver will be Zod resolver form schema default values will be comment nothing empty string five uh communication level default values okay then onsubmit values Z infer so the type is z infer type of form schema and then we can console log values so this is uh values is like on submit when we submit the form mutate gig ID seller ID so this is creating adding review comment service has described all of this stuff form reset at the end uh then and catch so if you want to do something when this mutate finishes return add review is title form we're going to spread this form I don't know where I defined it here form we need to make this because this is from shaten UI this is how the syntax goes form handle submit on submit and then space y eight okay so field comment comment field form field control form control we you just need to pass this name comment render so how the field will be rendered it's going to be form item label comment form control that's going to be input enter your comment and then spread the field form message this is the error message and form the description leave uh review comment then we're going to go ahead and say the same thing for so for control name Service as described field for item Service as described and then form control input number minimum one maximum five rate one to five placeholder and then spread the field and form description and I'm just going to go quickly because it's the exact you can just copy paste for service say describe communication level and everything okay and then button submit submit now let's go ahead and in reviews make this add function in reviews TS let's say export const ad mutation so all of the arguments gig ID seller ID comment service this this this numbers Handler check identity current user is going to be query users uh with index by token so we're going to get the current user by token identifier and then it must be unique check the user if it exists and then review we will just insert into reviews and object will be gig ID it's going to be gig ID seller ID will be seller ID author current user author I think we don't need this question mark and then comment service has described all of these and return review so I think we can delete question mark because we are checking here if it exists and that should be it so since I'm not exactly 100% sure where this is shown like this ad gig so I think it may be in uh reviews like like review start so let's uncomment this let's uncomment this but I'm not going to save it for now because I don't want my page to break so let me go here into a review stats so review stat is actually similar to reviews let's do some imports review startat props and then extract the props do the usual so this is the same we want to get average for each of the categories from all reviews so we want to get uh average score so we want to reduce total review average review communication level plus all of this stuff divided by three so this is average for the this review rounded average math round average start the script the distribution start distribution so we want to just go through this array and then do something with it okay so return total plus average and divide by review length so this should be um what is this it's a number that's average score for I think the whole reviews everything all of the reviews together and then we want to calculate the maximum number of reviews for any Star level to set relative progress okay so I think start distribution well this is calculating maximum of something I just forgot I'm sorry calculate rating breakdown values dynamically rating breakdown seller communication level calculate average we want to send all of the communication levels so we want to calculate average of all of the communication level from each interview same here same here and then calculate average defined function this is a array of numbers it's going to return a number if every if value length zero values length zero return zero some vales reduce so we want to get we want to add up all for example all of the array numbers starting from zero and then divide sum by values length that's going to calculate average return div div P font bold average review score average score to fixed two decimals Stars so three Stars I think or no 3.5 stars for example uh star distribution. map I don't know what the Star Distribution is let me see so we want to map it so for count and index we want to say start level five minus index so start level 5 4 3 2 1 percentage Yeah we want to get the percentage so count maximum review so we want to get the percentage so for example if your review is 2.5 and the reviews are from 1 to 5 then percentage is 50% at 2.5 we want to show this in percentage so times 100 so calculate percentage for Progress bar we're going to have progress bar for each category so communication is going to be a progress bar from 0o to 100% return div key Star level class name button variant ghost star level Stars button okay so progress value percentage so this is a progress bar from UI uh component from shat and UI like components UI and then go down and say rating breakdown object entries rating breakdown map so map each of these rating break breakdown this is just an object okay uh label value and then index so this has so this has label and value I think so we're going to do uh key index and then class name label we want to show label and value to fixed one so I think this will just like this this will be next to the progress bar to show like the numerical value of this like average so that's it let's go to this page TSX and save it and now we finished it it's all saved the only problem we have cannot find progress primitive from radic UI react progress this is is in UI progress TSX this error is a little bit weird so I'm just going to go here to shat CN and progress and I'm going to click manual installation and just install uh copy this npm and install it and maybe this will resolve the issue and it's fixed now you can see what we made and rating breakdown so this will make more sense when you go and study you what the hell we made honestly my guys I have no idea where this ad review is in my code so let's just continue we're going to be able to add reviews okay guys I found it so go to app username gig ID and PSX and that's where we are going to uncomment first of all uh this add review so let me go ahead and uncomment this show so this should work okay so we need to fix the import so I'm just going to say here and import again like that and then this import oh yeah I am commented the wrong thing oh my God that's crazy okay let me save and now so if we go to the gig page now we see this ad review form so comment amazing gig bro uh I'm going to Service as described for communication doesn't really speak English to submit oh expected number received string that's crazy let me see again oh my God that's not good so in my research I found that in the ad reviews I have this I already commented set default values as numeric so it doesn't give weird expected number go string error but I already did it so why is it behaving like this so what I did is I just refresh the page and if I go ahead and just add whatever the comment and I press submit the review is saved yes so that works if I say three expected number received string that's crazy what if I do this and then comment is to okay I found the fix we're going to have to go into a so for field for service as described field and here after placeholder and field we're going to paste the following we're going to say on change curly brackets e and then field. unchange so we're going to trigger the same onchange function but par int e Target value so we're just going to trigger the same onchange function but we will convert text to int and we need to do this for each of the other fields so here after the field and here after the field and save it and let's go here and refresh this page let me scroll down and now if I go ahead and change whatever I need to add some comments so as you can see I'm not getting any issues I submit and we have an issue so it's Pars in I just misspelled so let's go back this is pars int so let me fix that okay and then we want to try again three oh my God guys just make sure I'm goingon to like do this again so let me delete this and I'm going to make sure to paste the correct version again so onchange e so this is the correct version okay let me try again so four three 4 two and then nice bro submit okay now it works so see how we have four reviews and the average review is 11 which is not possible because review can be from 1 to five so let's go to seller. TSX and here where we have um reviews length so we need to divide by reviews length time three and now it's going to be this but we also don't want to have so many decimal places so let's go here scroll down of the seller TSX where you have average review and say two fixed five oh no no no two two decimal places and then let's copy this and let's also go to um seller details this one and then average review average review let me get here and then to fix two and also uh we want to say reviews length and times three because each review has three one two three of these so now this will also be fixed and let me show you a bit of surprise if I go to my profile we see all of this all this is the list of gigs and we see how my progress bar works and I'm not sure if it works as it should be working and then uh so for each review and what the hell is this ah this is the hardcoded image that I program but you can just say like put uh you author image so for I showed which gig I did the review for and then I just showed the review the average review time and everything so I didn't have time to like completely fix this so if I have time I will show you but if I don't have time then sorry I cannot I I didn't have time to fix this app seller username so we are going to uh so in username we're going to say page TSX and uh layout so we are making something so the thing we are making is I don't know yet but let's see now I think we don't need this page TSX so let's actually remove it sorry so move to recycle bin so in layout TSX that I just made let's say import seller navbar from component seller Navar uh dashboard lay layout props we want to extract all of that return main seller navbar uh show the seller Nar and children and that's it this is the layout now let's copy this underscore component seller navbar and next to this layout let's make a new file just copy paste all of that and DSX so there will be a whole nav bar that we are going to be creating use class and then um all of the Imports and then const components it's going to have type title string C string description string and that's going to be array and then that's going to be array of objects and then these are the objects so title orders C now this um nav bar I'm showing to you how to do this but this will be incomplete so you are you don't need to like write these things because they won't lead to anywhere but I'm showing you how to make this Navar for your application just if you want to it's a more complex Navar but if you don't want to make this you can skip this so this is just for you to learn how to make a more complex navbar but for a more complex comp application so we have this description of the N of the this navbar element then we have title gigs and then C to where this leads this can be like the homepage like this without like this okay description and we want to make this whole object profile everything okay so then export const seller Navar API users get current user router from next SL navigation onclick inbox push to inbox uh return something so return this div div button on click we're going to say on click inbox so this is Inbox and message Circle so this will show inbox if current user so if the user is logged in variant ghost we want to say router okay so we have switched to buying so this was switch to selling now switch to buying and then user button then below that we want to say navigation menu this is from UI components so go to shat and read about this if you want navigation menu list navigation menu item link to SL dos we don't have this SL dos but I'm just showing you how to make this if you need so you can like just not write this if you don't want this Legacy I don't know what this is because uh I just copy pasted a lot of this from sh CN so they have everything in documentation but I'm just showing you how to make this navigation menu link class name navigation menu trigger style I don't know what this is dashboard so you'll see what this is when we finish this I will show you what it looks like Okay navigation menu item navigation menu trigger my business and then content that's going to be unordered list uh list item navigation menu link and then you have a a um you don't need this image but I'm going to make a div orders and then whatever the hell this is keep track of your orders so this is this is a bit more complex navbar that shows you like not only this with good styling but also descriptions and stuff so list item another one this is for managing gigs so let's just say title gigs and this we have so this is actually link that we have in the that we're going to have manage create or edit your gigs here and let me now speed up so list item this is seller current user profile I think we don't have this one because seller is just I think for us it's just like this this is the profile but okay let's leave it like this manage and edit your profile present yourself to the world navigation menu item below let me advertise it okay so there is a bunch of more like um what is this components this is components yeah so this is yeah these these components here so orders gigs profile uh components map so for each component we want to list items so key title component description let's let me just there's no point let me just quickly like go through all of this is the same and then I'm I want to show you what it looks like so list item yeah so this list item we are going to Define it here so what is it it's going to be react forward ref react element a so it's going to be a link and then we're going to say react component uh props without ref display name and we're going to pass in uh class name title children props so this is children title I think we also have a ref I'm honestly not sure like too well like what I'm doing here because I just copy pasted this from Shad CN so we're going to show some links H title and children okay well if I save this let let's see what all of it looks like so if I go to switch to selling guys it looks like I cannot even show you the navbar right now because uh we don't have this page so we need to make this manage gigs but this is one of the last if not the last thing we are doing in this tutorial so let's go so in manage gigs so username manage gigs we're going to next to layout we're going to say page. DSX so page. DS X use client we import link so we import all of the Imports manage gigs this is a managing page so this page is going to display all of the gigs we have and let us manage them current user get current user uh okay so get gig get gig with order amount and revenue okay if gig is undefined current user undefined it's loaded if gig is null or this is null not found and then um gig data so this this type what is this type even oh this is uh we'll see what this is okay so we are mapping each gig ID is gig ID so we are creating this object data and we are saying title is gig title and then image is image URL or this random image that I don't know even what is this it's a placeholder image so this data is what we will show in our like table about gigs clicks gigs clicks orders Revenue username okay then return make some divs div age1 gigs uh P manage creator edit your gigs and offers button variant blue which we don't have but I will make it uh let's actually go and create this variant so let's go to button DSX and here where we have variants now we're going to add a new variant blue and give it these names we're going to say blue secondary give it these class names and white and these class names so let me um continue with this so this button will have will go to the manage gigs create so this is for creating a gig okay then we're going to have a separator just and then data table this is table we will show all of our data so let's now create this uh get gigs with order amount and revenue so in gigs. TS let's create that it's going to be a query let's speedrun through this it's easy check identity okay get user by by token identifier get currently logged in user check user is authenticated and then gigs query gigs by user ID so all of the gigs of this seller order the sending by creation time collect all of them because we want to display in the manage gigs tab uh G with order amount so we want to promise resolve all promises gig map so for each gig we're going to get orders by gig ID collect all of them order amount is orders length return spread the gig and add order amount and that's it okay gigs with order amount and revenue resolve all promises gigs with order amount so map all of these gigs const offers a wa so we want a query offers um so this is revenue so we want a query offers by gig ID and then total revenue is offers need to reduce so accumulate accumulation Plus offer price return gig total revenue guys I'm going be honest with you I think I made a mistake here so I'm calculating the prices of all offers but there are but I shouldn't I should be calculating prices of orders because offers are like just basic premium standard so but I don't have time to fix this that's the problem so I think um you need to like okay so you you can copy this orders and then like here and then say um orders and then order but then you you're going to have to like so for each order you need to get like um you have offer ID and then you can like res um get the offer and then calculate the price or you need to get the number of offers I'm not sure I'm not sure you need to get the offer price of this offer and then just add those so that's how you get Revenue but for now because I don't have time I have to leave it like this okay so um gigs with order amount and revenue map so we're going to make a sync function this is selfexecuting function just to do it in this in this way as well to show you how to do it uh so we're going to query gig media by gig ID first we want to get the first image and then uh if image we want to get so we want to convert this storage ID into URL and then return gig G spread gig and then image URL return gig image URL is null what ah so if image exists then you return image URL but if image doesn't exist then you return image URL as null okay back at our page TSX seller username we actually seller username page TSX first of all this page TS X should be inside of manage gigs so let me cut all of this and Mage make page. TSX inside of manage gigs and then paste it here because this this where it this is where it should be and then I can delete this page TSX because it's useless so inside of manage gigs we need to create a folder undor components so let's make inside another file gig dcard do um/ index. TSX this is quick and easy import doc uh G card props gig so and then extract props return div gig title that's it now we need um in components besides gig card inside of components g list. DSX this one is also short so use client and imports G card uh then just extract so gigs is used query API gigs get that's going to get all gigs from currently logged in user and then return map gigs gig card key and gig gig that's it now next to Gig list we're going to add datatable dots oh. TSX at the end use client and imports uh we're going to install this I think npm install this okay then interface data table props T data and T value columns columns column def uh I think we are going to import this from somewhere yeah from this and then T data and T value so you can read more about this in Shad CN tables so just Google Shad CN tables and read more documentation I'm not really sure I just copy pasted a bunch of this this code for this table so we got data and data type and columns and columns type export function data table uh give it the types columns data data table props all of this good stuff table is use react table that's crazy I don't know where this comes from it's it's from this okay and then data so you need to pass in props data columns get core R I'm not sure what this is bro let's let's just do it div table so this file I just copy pasted I think and then table table header and then so this is going to show table header I guess header group table row key I don't know let's just go through this bro uh table head is header is a place I don't I have no idea what this is so you can come here to shat CN data table not table but data table and then just read about it if you are interested um I I think yeah I need to install this which I I'm already installing I think and then you can read how it works but I just made it work and now I don't remember how it works so that's that's the thing now let's go back and uh continue with this I'm just going to like you can copy paste and read all about this oh yeah yeah so this is the data table file it's just going to show uh this type of table at the top this type of table now we need to make columns TSX so let's go here uh in components columns. TSX so columns is actually like our data I think so let's do Imports uh you can read about this also in data table shot in because this is also from there and then uh gig data so you can use Zod schema okay we just Define type gig data that we exported and imported and then this is gig data type this is what we will show in our table all of this okay and then say columns uh we we're going to Define accessor key gig header gig cell row and then link it's going to go to sellers sellers image with height row original image uh what is this this is I think this will just like point to the gig okay we'll see and then we have clicks row we have orders we have or those are columns not rows columns revenue and then this will say Revenue in the head header and this will show the pars flow so we're going to say row get value Revenue amount and then for formatted we're going to format this into like this currency style and then format amount we're going to display formatted below that we have actions so that's like just like drop down menu so we're going to have delete and stuff here gig action cell I think we are creating this yeah so we're going to make this cell we're going to pass in Gig ID and we're going to pass in username row original username so row original is how you access data I'm not sure from where but the data that you are displaying so that's it now let's create this actions so just next to columns I'm going to say actions. TSX so in actions we go with Imports uh props Define those props okay the standard con mutate remove REM so this is for removing the gig handle delete remove so yeah that's it you understand this I think I explained this so this will when we click a button we will handle delete which will trigger this remove mutation drop down menu and then as child because this will be have a button inside so if you have a button inside of a button because this is also a button you need to say as child or there will be an error um open menu this is the button yeah more horizontal yeah this is a what is this I don't know okay let's let's go drop down menu content align end drop down menu item link so that's going to be edit so if you click this it's going to push you to the editing then the other item is going to be uh copy text copy link that's going to be what preview okay so I think we don't need this at all okay and then the last one is going to be delete and I think we can safely remove this and that's it now actions should work and here this is what it looks like so we have gigs manage create and edit gigs and offers and this is the gig although I had an error that said like could not find file datat table. TS so I just went here into page TSX um like manage gigs page TSX and I deleted this import of data table and I imported it again and then everything worked so we have click zero order zero Revenue 40 so I think yeah so this uh project I'm sorry for uh a few things being unfinished so here you can see our nowbar as well this is the advanced nowbar that I was talking about you see how it has all of these animations uh I did I was not able to implement orders this is a huge project I did not know that it would take so much time but you see orders are free and there is no way for me to like track orders so when user purchases order you can track them here but this still works because well we can work on trust between user and seller so that they will pay and then when you have orders that's how you calculate Revenue right now we just adds revenue from all three offers that's not Revenue that's just like this not revenue and this is a edit preview delete so if I say preview it's going to push me to the link so this page and maybe you want to disable reviews for people who have not purchased it but I just didn't have time and then we have delete edit so this is the edit page I can easily I already showed this now just we need to make manage gigs layout a bit better so let's go here in manage gigs create a new file layout. TSX so I think we're not using this import anywhere just do this interface and then uh export default function uh manage gig layout the standard layout return and then give it block space y six padding and stuff and then children and that's it if I go back refresh maybe but I misspelled layout layout like that and now it has some better padding so create will push us to create this is the create page and let's quickly speedrun the inbox so so in the um app we're going to create inbox. page. DSX and next to that layout. TSX and then we're going to saycore components slidebar SL index. DSX we will have in the sidebar conver no con conversation d list. X conversation dbox DSX so in sidebar index we want to use client and do the Imports uh we want to use Font popins this is weight and stuff interface children and then we want to say sidebar return and aside and then give it like this so it's going to be fixed sidebar as we scroll it will stay sticky on the screen to be fixed uh with 300 pixels hidden on mobile and large screen it's shown okay so first we're going to have a link that's going to link be our logo that will link to homepage so div image logo SVG height WID span class name font semi Boldt and then font class name so I think it's like to use this font that's why we are doing this so use that so we use that font and then close the span and say Gian so I this is like the name of my application okay and then below link we're going to say children so we're going to display children for this sidebar so this will be the sidebar now let's list all of the conversations so we're going to import all of this and use client so all conversations will be listed in the sidebar uh conversation list and then con conversation list conversation use Query API conversations get by user and then API users get current user if conversations is undefined it's loading same for current user Uh current user null it's not found and then user conversations conversations filter conversations that have conversation uh part participant ID is current user ID or participant 2 ID so participant one ID or participant 2 ID is current user ID so we check all conversations where either participant one or participant two is the current user so then we get those conversations then we return uh all conversation just text and then um user conversations map so we want to map the conversations and put in conversation in show box or or conversation box key because we are mapping conversation conversation so that's a prop current user current user and that's it conversation box so we're going to use client so this is going to show each conversation in the sidebar so for each user when we click this conversation box it will go to the conversation with that user so conversation will be uh doc conversations current user then we're going to say conversation box conversation current user conversation box router use router from next navigation uh other user ID will be conversation participant why one ID is going to be current user ID or a conversation participant 2 ID so we want want to check if other user ID is equal to no no no we want to check if participant wi ID is equal to current user ID then it's participant to one ID that's other user ID or participant to ID is the other user or if this is not equal then participant one is the other user okay uh other user use Query and then API users get ID other user so we want to get the other user of the conversation parameters is use parameters I think we need to read this read URL and then other user check so I'll show you what this is for API users get user by username and then username is going to be params other user name other username as string so we will have this um we will have this like in the link so we are getting parameters so conversations will be will have will be on slash index uh Slash inbox slash other username so we need to check the other username of our partner we are messaging handle click use call back this will be deprecated soon okay but I I I think it forced me to use callback okay um router push inbox other user username yeah so when we click on this conversation box you want to push the router we want to load this conversation so because this is in sidebar all of the conversations in the sidebar so this is going to change when router changes other user username changes okay so div handle click we want to pass in this and then other user check and other user check ID is other user ID okay so if the currently log currently loaded um conversation is so so in the sidebar we're going to have Mark clar whatever V whatever we have like three conversations if they currently logged in user currently uh shown conversation is of this one of Clark then we want to make this a bit more like Gray in the sidebar so in the sidebar it's going to show which conversation is currently logged in currently loaded we're going to check that by getting parameters from the URL and checking the name of the like the other user so if the name of the other user the ID is same as like the one if we just going to find okay you understand maybe watch again if you didn't I think I explained okay I don't want to waste too much time so uh we're going to display Avatar of the other user and other user full name oh that's it okay so that's it let me just go to API so let's create these conversations so let's go ahead and go to convex folder now we want to be able to create a conversation so we want to go to convex conversations. TS so let's uh go ahead and do some imports and then get by user is a query Handler check identity get current user if current user doesn't exist couldn't authenticate user conversations we want a query conversations filter so we have q. or so we're going to have two conditions so Q equivalent Q field participant 1 iD is current user ID or participant 2 ID is current user ID if we go to our schema. TS we see that conversations basically it will just have participant one ID and participant 2 ID so we need to find all conversations of the currently logged in user it can be either this or this collect all of them return conversations okay now let's do page TSX and layout TX TSX of inbox so Imports and use client inbox page um user ID is use store user effect if user ID is null is storing user we I don't know about this one I think we're going to delete this okay return um so this is like storing the user if user is not in database but I don't think we we're going to use this okay so div image empty inbox so we're going to display empty inbox here with height um title welcome to inbox and paragraph select a conversation or start a new one I'm going to comment this first of all and I'm going to comment this and I'm going to comment this because we don't need any of that let's go to layout TSX so um use client and imports so we're going to say export default function conversation layout so children and then you define type children children react node so you can like this is a different way to do this without defining interface you can also like do it like this extract children from like this type but you need to Define type return fragment uh div fixed okay so that's going to be a nav bar we're going to make it fixed on the screen and then padding top 88 pixels because we're going to show Navar and then sidebar and then inside of sidebar we're going to say div height full I think this is useless we don't maybe you don't need this conversation list that we just made and close div and close sidebar so this is going to be passed as props as children to sidebar okay then go here and just display children so this is sidebar and this is like the rest of the page so if I go head and refresh so this is what it looks like welcome to inbox start a new conversation all conversations now let's uh finish this functionality so in order to start a conversation we need to uh make page for conversation so here in inbox you're going to say other user name slash page DSX okay so here we're going to say use client and imports U form props so this is the conversation page that we are making uh parameters that's going to be string that's going to be URL parameters okay conversation so we're going to use State any oh my God why am I using any I don't know okay I think this should be Doc conversation but we'll fix it get us mutation API conversations get or create conversation and then conversation is use Query API conversations get conversation and by usern name so this is get or create and what is the difference between this and this I don't know we'll see when we are making I forgot I made this two months ago okay user use effect a call mutation that's going to be try result a wait so get conversation pass in username set conversation result catch console log mutation failed error call mutation and when get changes parameters other username changes okay so if any of this is null return loading which should not be loading oh it should be loading because this is null and these are on the find conis now this this should be undefined here I'm going to change it when I finish okay so log conversation um div div body so we want to show messages in the body form is like submit message send message so user ID conversation current user ID conversation ID will be conversation ID and that's it so I think first of all this this should be Doc and then uh con and then like this and then converations and this going to be an array or conversation yeah okay and then here I think if this is undefined okay now let's make these two but this can be null so conversations so this is or now okay now let's go here and create these two so in conversations in conversations TS let's go ahead and say export con get conversation that's going to be a query arguments username Handler check identity get current user the same as always check current user and then other user get the user as well by ID and check if yeah that's it other user and then get conversation filter so filter all conversations okay so we have two options we have that first user is current user ID and participant two is other user ID or participant two participant one is other user ID and participant two is current user ID this depends on who clicked on who which profile to create a conversation so that's or so this is end and okay unique must be unique get messages from this conversation that's crazy why am I doing it like this this should be do get and then conversation ID but no there will be a lot of messages this should be not filter by with index with index but okay you can do it with Filter as well with index is better by conversation IDE index okay because this is going to return all messages and then process but if you do with index then it's going to just return those messages it's not going to return all messages with users relation so the reason this is relation is because this is going to be a bunch of promises that we need to resolve um messages map so for each message you want to get the user who send that message why am I doing it like this I made this when I was still learning forgive me so I need to I should be doing it like this so just get and then the ID but okay uh let's see return message spread message and user message with users promise all yeah we're going to so this is a bunch of promises now we're going to resolve all of those promises return current user other user conversation message with users okay so that's it now let's create the other one so this one is get or create conversation so this is very similar so let me just speedrun identity it's the same get current user same same everything same you can copy paste other user get other same get conversation so this is exactly the same okay so if there is no conversation we need to insert a conversation so participant one is current user participant two is other user and then uh our conversation you need to get the conversation after we insert it we want to get the full conversation object okay so now we want to get messages this is same don't filter use with index so use r index instead of filter okay um the relation so we want to get oh my God this is this is Doc messages not any okay um so we want to filter find all find a user who sent this message and then return it we want to resolve all promises and we want to return current user other user conversation message messages with users because me this will have message field and user field oh okay so that's it now we have get or create conversation let's see what we don't have we don't have this components body and components form so let's go here in other username let's just have a new file uncore components SL body. TSX but I misspelled it's TSX and then form. TSX and then a message dbox DSX so this is the conversation body this will show all messages the body TSX so we're going to do import interface export the body page this should not be export default this should be export cons but this will also work okay um then we're going to say bottom ref so we want to make a div at the bottom of this body so every time a new message comes we want to scroll down to the bottom maybe I'm talking too fast so let maybe talk a bit slower uh use effect so if bottom ref current so if this div exists we're going to scroll down to this div when when messages change so when there is a new message we want to make a div so for each message we want to map message and index and in message box we want to say is last although I don't think we are using this so you can ignore this maybe keep key and message and that's it and then this div that's for scrolling and save it now let's do message box Imports and stuff interface it's going to be message and is last Boolean that's optional um extract and then export default current user current user is undefined return loading okay so is own message. user ID is current user ID so if message is own then we will show them to the right if the user the message is not own then we will show the messages to the left and there will be some other styling differences so container of the message we're going to say this and if it's own we're going to justify at the end so we're going to show to the right Avatar is own order two what is order two I don't know okay Body Flex Flex scull Gap two is so body we're going to put items at the end if its own message message style so if it's own it's going to be a bit different colors and text yeah text white color different and then so this has false question mark R okay so this will never so this will never show this will always show because I was doing something I just left it here so you can it's okay you can change if you know how to if you don't know you don't need to change it uh div so we are now show this is container Avatar it has avatar from uh at C atui components image message user profile URL okay so call back this could be also be the first name user for full name character at zero okay so this class is body and we want to say class message style and we will display message text here and below that we want to say uh when the message is sent so format new date and then we want to say is last is own and message scene and then we want to display like scene status but I think I I just I didn't have time to implement this so this doesn't do anything let me see here current user is possibly null so I'm going to say if current user is null return null okay that's it form TSX so we're going to use client and imports form props user ID so this this form is for sending the message we need user ID and conversation ID to send a message who sent and conversation in which it's sent uh okay so const form and then export default although this should be export const but then you need to change the import as well so you can do it like this as well text set text of the message and mutate and pending from API messages send then handle submit if text is empty return we're not going to send empty message mutate text user oh you don't need to you can leave it like this because it's the same name as this prop so user scene fals conversation ID then set text of the message so of the input field to empty and console log any errors and then we want to display so we want to display input field so div again div again input placeholder enter message class name value text unchange is set text on key down if key is enter we want to prevent default so we don't want to I think go to new line or something I'm not sure but just handle submit so you can also send message if you press enter and Below or not below this is going to be next because this is a flex Flex box so we have type submit class name on click handle submit disabled pending we're going to close the button and we're going to say hi paper airplane this is a icon from Lucid react size 18 class name and stuff so that's it we just need to go ahead and make like sending messages so let's this is I think the the absolute last thing we are doing maybe uh maybe so let's go here in conve and say messages. TS so here we're going to say all of this stuff send mutation arguments text V optional v string send ID image URL option okay so these are all of the arguments so image URL scene that we are sending everything ID conversations Handler and then we need to extract all of these from arguments if you want to you can also say arguments. text you don't need to extract them okay let's insert a new message into database and pass in everything and that's it that's it for inserting the sending the message then we go get the message return AWA context database query messages collect so this will return all messages why would I need this I don't even know if I'm using this honestly this is completely unfiltered okay get last I don't think I'm using this what do you mean get last okay I I if I'm using this we're going to we're going to return maybe here so in order to start a conversation I need to log out into the different account and go to this guy's gig and start a conversation from there so I logged in into different account and I'm going to go to this user's profile and I'm going to say send message wherever that's supposed to be no on the gig so go back to the gig and say send message here so this is a conversation that's created and if I say hi if I send it that's crazy it works
