With timestamps:

00:00 - In this REACT course, you'll not only learn the nuances of REACT and its internal workings,
00:05 - but also immerse yourself in building a variety of projects to understand the practical applications
00:10 - of REACT features.
00:12 - This course uniquely balances a project-focused approach with comprehensive theoretical knowledge,
00:20 - ensuring a thorough understanding of each concept.
00:22 - Pitesh Choudhary created this course.
00:24 - He's a popular instructor with 850,000 subscribers on his YouTube channel.
00:29 - By the end of the course, you'll not only have a bunch of projects for your portfolio,
00:34 - but you'll also gain hands-on experience in creating a full-stack application using
00:39 - AppRite, integrating advanced tools like Redex Toolkit and Tailwind to craft production-grade
00:47 - applications.
00:48 - Hey there everyone, Hitesh here, back again with another video, and welcome to this brand
00:53 - new series.
00:54 - So I was trying to record a series on REACT on the other channel, that's when I realized,
00:59 - hey, why can't I record this on this main channel as well, the English channel.
01:03 - So welcome to this brand new series on REACT.
01:06 - This is a very focused series on focusing on absolute beginners who want to just get
01:11 - started with the REACT.
01:13 - And there are lots of tutorials on REACT, but all of them are little bit some things
01:18 - which carry the baggage of, you should know this, you should know that, not this one.
01:23 - This one is purely entirely beginner-friendly if somebody wants to get started to learn
01:27 - REACT in 2023.
01:29 - What are the options available?
01:30 - How to read the documentation?
01:32 - What is the process of getting started with the REACT along with projects?
01:36 - And what should be the approach?
01:37 - This is going to be whole about it, we're going to absolutely love the series, and let's
01:41 - get started.
01:42 - So we're going to get started this video with a roadmap.
01:46 - How one should be learning REACT?
01:47 - When should be learning the common questions that should be answered?
01:51 - What should be the prerequisites of learning that?
01:53 - So we'll be answering all of that in this very first video.
01:56 - I prepared a few notes for you, and we're going to get started with that.
02:00 - So first, let me go ahead and share my screen video.
02:03 - So this is my iPad where we'll be walking through with the REACT roadmap, and this is
02:07 - where we're going to get started.
02:09 - First and foremost, let's not jump directly into how should I learn REACT.
02:14 - Let's first answer a couple of questions.
02:15 - First, why to learn REACT?
02:18 - Most important question, if you really ask yourself that why am I learning REACT or why
02:23 - I need REACT on the first place, then you'll be a better engineer in designing REACT application
02:29 - just because you want to learn because there is a hype around it, there's a lot of jobs
02:33 - available for it, or it's in the trend, probably not right.
02:37 - Because most of the cases of the REACT can be handled by just the JavaScript or just
02:42 - the JavaScript DOM manipulation.
02:44 - Please don't learn REACT if you're just in the hype, or you just think that, hey, there
02:48 - is plenty of jobs and I can be a REACT developer.
02:50 - Yes, that case is somewhat true, but I think that's not a great reason to learn.
02:55 - It is trendy.
02:56 - Yes, a lot of people are talking all the time about REACT.
02:58 - And if you think I want to just build UI with the REACT, then of course you are not correct,
03:03 - my friend, because building UI is not something which is a core superpower of REACT.
03:08 - Those UIs were getting built in the PHP as well, in the era of jQuery as well.
03:12 - So there is nothing which is super important that is being offered by the REACT itself.
03:18 - You should be learning really REACT because it makes easy to manage and build complex
03:23 - frontends.
03:25 - There are applications in which you just click one button and things gets updated on five
03:29 - different places, 10 different places, or 20 different places.
03:33 - These places are really difficult to manipulate while your ordinary DOM, which you manipulate
03:39 - by the JavaScript.
03:40 - So if your application is pretty complex, like an e-commerce app or something like Facebook
03:44 - or something, at that places it really makes sense to have a REACT application.
03:50 - The better you become in understanding the REACT need, the better REACT engineer you
03:53 - will become.
03:54 - Then the second thing, when should I learn it?
03:57 - Because now that you know that, okay, I can build complex app, but when you should really
04:01 - learn REACT, I always say don't jump into the frameworks of JavaScript just because
04:07 - you enjoy them or you watch a lot of YouTube videos.
04:09 - No, that's not a good idea.
04:11 - Don't react only after mastering the JavaScript.
04:15 - JavaScript is something which is core to the REACT and there are a lot of problems in debugging
04:19 - issues which are actually JavaScript issues and not the REACT issues.
04:23 - If you understand JavaScript, if you understand how the single thread works, if you understand
04:27 - how the execution environment comes into the picture, how the global execution context,
04:32 - the function execution context work, how JavaScript is able to manipulate the DOM, then is the
04:37 - right time to jump into the REACT, otherwise, no, you are making it in a hurry, not a good
04:41 - idea, you should stick to the JavaScript still.
04:44 - Okay, assuming that you know your JavaScript, then also please understand that most of the
04:50 - projects don't need REACT.
04:51 - It seems like this is a video where I'm actually pushing you away from the REACT, but that's
04:55 - not the case.
04:56 - I'm just putting up an honest picture that do you really need REACT?
04:59 - Once you truly are satisfied that I really need REACT, then you'll be becoming a good
05:04 - engineer of the REACT.
05:05 - So most projects honestly don't need REACT in the initial phase.
05:08 - As the app gets complex, as the pages are increased, as there is more and more functionality
05:14 - which is on the front end part, then injecting the REACT or having an application totally
05:18 - on the REACT makes sense.
05:19 - If your application is just one page which is having a contact form and is just displaying
05:24 - some pictures, just one or two page, I think you'll do far better in just HTML, CSS and
05:30 - core JavaScript.
05:31 - So assume that, hey, there is a case.
05:34 - Now that you are convinced that, okay, no matter what, I really want to learn a REACT.
05:38 - So in that case, why REACT was created on its own in the first place, there is a great
05:43 - story behind it.
05:44 - I would love to share that.
05:45 - So this green box, yes, I tried to mimic Facebook with this one.
05:50 - So in this Facebook, if you remember the old time, there used to be a problem of the ghost
05:54 - message problem.
05:56 - In some of the internal documentation of Facebook and some of the conferences, you'll find this
06:00 - as a phantom problem.
06:02 - I called it as ghost for no reason, but there was a problem.
06:06 - So here was the chat icon.
06:07 - Here was a chat that was written like this.
06:10 - And there are a couple of ways.
06:11 - If you click on the notification itself, then it opens up a pop up box here at the bottom.
06:16 - If you click on the chat, it opens up the entire box here.
06:20 - But if you have opened this from the notification, sometimes what happened is not all the times,
06:24 - sometimes this icon here which says one or maybe that says three because there are three
06:29 - messages.
06:30 - This doesn't get go away.
06:31 - I have read the message here.
06:33 - So this should go away.
06:34 - There should not be any notification symbol here.
06:37 - If I've directly read it in the chat, sometimes it just appears here and it doesn't go away.
06:42 - That was the problem.
06:43 - There was no consistency in the UI.
06:44 - And this was a common problem which was getting a feedback, feedback again and again in the
06:48 - Facebook that why this message is being shown here.
06:51 - I have read the message.
06:52 - I'm aware of it.
06:53 - It's still not gone.
06:55 - So this is the common problem that Facebook was facing.
06:58 - And in order to solve that problem, a team was engaged, especially Dan, that I really
07:02 - want to solve this problem.
07:04 - And that is how the React was born.
07:06 - And the first time the React was not taken well by the community.
07:09 - But eventually, eventually people adopted React and even started to loving it instead
07:14 - of hating it.
07:15 - Now, the problem that we are facing here is actually a two coupled problem.
07:19 - The first is the state.
07:21 - By the term state, I mean all the variables in JavaScript.
07:25 - All these variables like should I show the notification or not or should the number should
07:29 - say one or the number should say five.
07:31 - All these things are actually maintained in the JavaScript world.
07:36 - And all the updation of the UI is actually handled by DOM.
07:40 - So UI is updated via the DOM while all of your variables are actually in the state in
07:44 - the JavaScript.
07:46 - So the problem that it was there was actually the problem of syncing.
07:50 - There was no sync between JavaScript and the DOM.
07:54 - So React came into the picture which actually gave a consistent way of updating your DOM
08:01 - and that is the only superpower of React.
08:04 - It gives you consistency in the UI.
08:06 - And that is why people loved React.
08:08 - When the React came in, the first early adopter outside of the Facebook was Khan Academy,
08:14 - a very well-known name.
08:15 - If you are in the education domain, it's a very well-known name.
08:18 - So they adopted it and a couple of talks were there.
08:22 - And in that Khan Academy tech team said that, hey, React is not an amazing library, which
08:27 - it was not at that time.
08:29 - But hey, it gives so much amazing consistency in building the application that we kind of
08:34 - love it.
08:35 - And that's when after this Unsplash picked it up, a couple of other big corporate giants
08:40 - picked up the library and says it's fun to actually work in the React.
08:43 - And of course, React was not perfect at that time.
08:46 - There was a lot of class-based component.
08:48 - Eventually it got updated.
08:49 - A lot of things happened, which we are going to see.
08:51 - But this is how it learned.
08:52 - Again, one more time, I would say do not learn React if you don't know how the JavaScript
08:57 - works, all those basics.
08:59 - And again, also don't learn it if you don't know how the DOM works or the document object
09:02 - model.
09:03 - By the way, I do have a video on my YouTube channel about how the browser inner working
09:07 - works.
09:08 - I do have a playlist of inner working, which will help you to understand how the browser
09:12 - actually works, how the DOM is being painted, HTML, CSS, JavaScript, and whatnot.
09:17 - At least watch that video.
09:18 - It will be very fruitful for you.
09:20 - So moving that, assuming now that you know about how to learn React and you're confident
09:24 - about it.
09:25 - There are a couple of ways of how you can learn the React.
09:27 - There are two processes of learning that, in fact, this pedagogy applies for almost
09:31 - everything that I teach.
09:32 - There are two ways you can go directly in depth or you can just start building the projects.
09:37 - You might be thinking, I need both.
09:39 - I want to go in depth.
09:40 - I want to see the project as well.
09:42 - Yes, you do both, but actually you need to start somewhere.
09:45 - And you can start either by directly going in depth or by directly making the projects.
09:50 - So when you go directly in depth, you come to the words like babble or you come to the
09:55 - words like React, fiber, virtual DOM, diffing algorithm, hydration, tree shaking, all these
10:01 - concepts.
10:02 - And you first understand the concept and then you try to make projects like to-dos and calculators
10:08 - and background changers and whatnot.
10:10 - And you apply these concepts.
10:11 - Another approach is let's just directly build the projects.
10:14 - Let's just say we build a background changer or a calculator.
10:17 - And via this, we learn each topic.
10:19 - For example, in to-do, we learned about the virtual DOM maybe or calculator, maybe the
10:23 - diffing algorithm.
10:25 - So each project teaches you one or the other concept and then the same thing happens.
10:30 - The project, the approach that I'm taking in this entire series is actually by making
10:34 - directly the project.
10:36 - First I'll make the project and then I'll take you into the behind the scene.
10:40 - Hey, what just happened?
10:41 - How we did that?
10:42 - How we didn't do that?
10:43 - How it worked?
10:44 - How it didn't work?
10:45 - And all of that.
10:46 - I think that's a much more fun project based approach, a much more fun approach, because
10:50 - it actually keeps you engaged and then says, yeah, that hey, we are building something
10:54 - and something is working on the screen.
10:55 - And now let's see that how it actually worked.
10:58 - So I'll be using this approach, but again, there is no right and wrong here.
11:01 - If you're learning somebody who's teaching you directly in depth, that's also good.
11:04 - No problem in there.
11:06 - One thing that you're going to commonly see is React as a library.
11:10 - So I do have a common words for them.
11:12 - You'll also hear that some things are frameworks, some things are library.
11:16 - I call framework as something which is military.
11:20 - And library as something like who is somebody, a cool dude.
11:25 - What do I mean by that?
11:27 - By the term framework and by the term military, it means the rules are very strict.
11:31 - In the framework, rules are very strict.
11:33 - The naming convention, the way how the file name should be, the way the file should be
11:37 - placed in a particular folder, the way how the data is going to coming in and going out.
11:42 - All of this are very, very strict in the framework.
11:45 - In the library, it's like cool dude.
11:48 - You wear the cap front side, it's good.
11:50 - You wear the cap behind the side.
11:53 - It's all good.
11:54 - So the cool dude.
11:55 - But again, it's not like they don't have any rules.
11:56 - Library also do have certain rules, but they're not that strict of a framework.
12:00 - So yes, React is a library, and that makes it really easy because it's not really that
12:04 - much difficult.
12:05 - It's not a big library.
12:06 - You can finish it up pretty quickly and easily once you understand the basic core concept.
12:11 - The topics that you're going to learn in the React first are core of React.
12:15 - You really want to understand how the React works, how the file structure works, the core
12:19 - concept behind it, how the state or the UI manipulation works in this.
12:24 - What is JSX in the first place?
12:26 - What does it mean by that?
12:28 - What does it do beneficial for us and all of these concepts?
12:31 - Once you've done this, then you jump into the component reusability concept.
12:35 - And again, it's not a proprietary concept of the React itself.
12:39 - Component reusability was there in the early days of PHP as well.
12:42 - It still is in other places as well.
12:45 - But React makes it easy.
12:46 - And once you understand the component reusability concept, you automatically are introduced
12:50 - to the props, which is a short for properties.
12:54 - The same JavaScript object, the same key value, those exactly same.
13:00 - So we understand about those props.
13:02 - Also we learn how the changes are propagated.
13:04 - So in the React, what we want to do is we don't want to use the classic JavaScript like
13:10 - get element by ID, query selector and whatnot.
13:13 - We just want to manipulate the variable automatically react will think on its own and will update
13:18 - my UI on the web page.
13:20 - For this, you learn about the hooks that how these hooks are responsible for updating my
13:25 - UI or my DOM on the web page, I'll just update the variables.
13:29 - I don't care about how the UI is being updated.
13:31 - That's where you are actually introduced to the hooks.
13:34 - That's the basics of it, at least.
13:36 - This is it.
13:37 - This is it.
13:38 - This is your react.
13:40 - But hey, we haven't talked about the URLs, we haven't talked about the routers, we haven't
13:46 - talked about the state management.
13:47 - The truth is you shouldn't be you shouldn't be all that we are covering that in the series,
13:51 - but you shouldn't be because till this part, this is only your react, nothing else.
13:57 - If you really want to have additional feature, then comes other libraries.
14:01 - For example, React has no built in router.
14:03 - But if you really want to use router, you have to use something known as react router
14:09 - DOM.
14:10 - So yes, we install another package, since you're learning about another package, that
14:16 - cannot be called as core react knowledge, you are going a little outside of your realm.
14:21 - And thus, I call it as additional add on to reacts very close to the react.
14:26 - But they are add ons.
14:27 - They're not react.
14:28 - Similarly, we do have a state management thing react didn't used to have any state management
14:33 - in the earlier days.
14:34 - Yes, it was introduced later on.
14:35 - But in the early days, we just had the Redux, Redux, again, separate package, separate
14:41 - library, Redux can be used with react, Redux can be used with view can be used with swelt.
14:47 - So it's a standalone library.
14:48 - But yes, we still focus and learn a lot about Redux.
14:51 - And these days, we learn about the another abstraction of the Redux, which is known as
14:55 - Redux toolkit, which is cool.
14:57 - So yes, we'll be going through with that.
14:59 - Another such similar state management library is a stand quite popular, I do have a series
15:03 - on my channel on the stand as well.
15:06 - So quite amazing.
15:07 - So you can learn that but eventually react realize, of course, they realized it before
15:11 - the stand actually, that hey, we need to do something about the state management, it's
15:15 - getting out of the hands.
15:16 - So they introduce something known as context API, which is again, kind of a hooks, when
15:20 - we learn about the hooks, you'll automatically get and understand that part.
15:24 - So you'll get to know that so only context API is something that is not additional, but
15:29 - it was introduced later.
15:30 - Again, some people also tends to learn about the class based approach, when the react was
15:34 - introduced in the very early days, everything was class based.
15:39 - They got inspired a lot by the swift, not swift, I would say purely by iOS development.
15:44 - So they used a lot of things like component did mount component unmount component about
15:49 - to mount component will mount, I don't think so there was about my component will mount,
15:53 - you get the idea.
15:54 - So a lot of things were there.
15:56 - And this is known as legacy code.
15:57 - So if some company is still using it, hey, why are you using class based component these
16:01 - days, it's been so gone, so long gone.
16:04 - But I'll still give you some brief idea about that.
16:07 - Not really that important.
16:08 - But if you wish you can spend some time in learning about that.
16:11 - These days, everything is functional and react.
16:13 - The documentation says that, hey, just drop the class based approach, use the functional
16:17 - approach.
16:18 - That's how we are going.
16:19 - And it's not like they started just a couple of years ago, it's long gone, it's long gone.
16:23 - And on top of that, one more additional part of it is bass apps.
16:27 - Like back end as a service, one prominent name, which I'm a big fan these days is actually
16:34 - app right.
16:35 - Are there a couple of others as well, but being app right being open source amazing,
16:40 - it provides you entire back end.
16:41 - So you can build your social media apps, ecommerce apps, Twitter, Twitter, clone threads, clone,
16:46 - whatever you wish in just react.
16:48 - But technically, it's not pure just react react to just handling the API calls and sending
16:52 - data receiving data.
16:54 - The majority of the heavy lifting is done by these bass back end as a service, you might
16:58 - have heard of those names as well.
16:59 - So let me know if you know some of these names.
17:01 - So again, once you're done with the react, then what about after react, see, if you think
17:06 - that hey, react is not for me, I'm not enjoying the front end part or the front end engineering,
17:11 - you could have directly jumped from the JavaScript to the back end part.
17:14 - But since you're already here, I assume that you might be interested in learning the react
17:18 - as well.
17:19 - So what should I learn after mastering the react, I have handled a good amount of APIs.
17:23 - And now I want to build some complex apps and whatnot.
17:26 - So in that case, you can also go ahead and try one of my open source project, which is
17:31 - known as free API dot app.
17:35 - It's a fantastic library, if you want to push yourself to handle some of the complex react
17:40 - changes, or complex react full blown application, what we did is we wrote the entire back end
17:45 - for these applications, complex ecommerce, complex social media, complex chat app handle
17:51 - just the react part of it just the front end part of it.
17:53 - So check out the free API dot app in there.
17:56 - But again, react has some of the drawbacks.
17:58 - That's why people actually switched from react as a library to a full blown framework.
18:03 - What are these problems?
18:05 - React don't have SEOs.
18:06 - I'll walk you through that why the SEOs are problematic and react.
18:09 - It also allows browser to do a lot of rendering browser does so much of lifting.
18:15 - React ships the entire JavaScript to your browser.
18:18 - Now it executes in the browser, then it paints the entire picture of HTML CSS.
18:22 - So there's a lot of work with the JavaScript and your browser does so obviously, in some
18:26 - cases, it's not really ideal.
18:28 - That's one of the drawbacks.
18:30 - What we want is some things which actually renders react on the server itself, and sends
18:35 - the browser only HTML CSS part of it.
18:38 - And that's what a lot of things even this is coming to the core react of it, the server
18:42 - side rendering, but we'll talk about it later on.
18:45 - Also there is no routing in the reactor.
18:46 - So we can either use react router DOM, or other option is use a full blown framework.
18:51 - There's no shortage of these framework.
18:53 - In fact, I would not hesitate to say a new framework in the JavaScript drops every week.
18:58 - Some people would say every day, but I'll still be saying every week.
19:03 - So there is Next.js.
19:04 - I do have a lot of content on my channel on free code camp on the Next.js.
19:09 - I created them.
19:10 - I loved it.
19:11 - But that's not like Next.js.
19:13 - There's other options like Gatsby, Remix.
19:15 - A lot of options are there.
19:16 - So this is basic.
19:17 - So this is your entire roadmap of how you should be learning React, or how you should
19:21 - be introduced to it.
19:22 - Or at least you now know the basics of, OK, am I ready for this react, or should I focus
19:27 - more on JavaScript, or can I go just back into this one.
19:31 - After this, we'll be directly jumping into the code part, and we'll be starting our React
19:34 - journey.
19:35 - So this is pretty amazing.
19:37 - And I think you'll be enjoying this series quite a lot.
19:39 - I'm definitely going to enjoy teaching this entire React to you.
19:43 - So get ready, buckle up.
19:44 - A lot of projects are about to come.
19:46 - We'll be going dive into the lot of React fun stuff.
19:49 - And hit that subscribe.
19:50 - And in case you are enjoying this series, please, please, please do share it on the
19:54 - LinkedIn.
19:55 - Tag me.
19:56 - That's one of the only motivation that I need right now.
19:58 - I would be really, really happy with that.
20:00 - So that's it for this video.
20:02 - Let's catch up in the next one.
20:06 - Hey there, everyone.
20:07 - Hitesh here, back again with another video.
20:09 - And welcome to this React series.
20:12 - This probably would be your second or maybe third video in the React itself.
20:16 - And this video is much more crucial than the last one.
20:19 - In the last one, we saw that how we can have a basic roadmap to understand and learn React.
20:24 - In this one, we'll be actually getting some hands down.
20:26 - Yes, I walked you through that.
20:28 - We'll be walking through with the project approach.
20:30 - But it's not going to be just the project approach.
20:33 - I'll be walking you through with time to time in depth how React works so that you can develop
20:38 - a mindset of how to work with the React ecosystem.
20:41 - That's really the crucial part of it.
20:43 - In this video, I will walk you through with all the tools that are required, how you can
20:46 - create a React project, how does a React project looks like.
20:50 - Because by default, a React project is a little bit clumsy.
20:52 - There is too many files involved in it.
20:54 - Once we understand that what files does basically what job, it will be much, much easier for
21:00 - us.
21:01 - So this is going to be your official first start journey and all the tools, all the sets
21:05 - that we require to work with the React.
21:07 - Don't worry.
21:08 - It's going to be a hands on journey.
21:10 - It's going to be a hand holding journey.
21:12 - You're going to be enjoying this for sure.
21:14 - That's my promise.
21:15 - So the first thing that we're going to do is share my screen.
21:18 - So let me go ahead and share my screen so that I can walk you through with the stuff.
21:22 - We'll come back onto the GitHub a little bit later.
21:25 - First of all, let's just explore all the things that we're going to require.
21:28 - The first one being Node.js.
21:30 - We are not going to move anywhere forward without the Node.js.
21:34 - It's a little surprising that even the front end doesn't move without the Node.js these
21:38 - days.
21:39 - If you have any version, version 18 or version 20, that's totally fine.
21:44 - It's not really a difficult process.
21:45 - Get it for Windows, Mac, Linux.
21:47 - Doesn't really matter.
21:48 - You just need to install it.
21:50 - The specific version also is not that much important.
21:53 - You can have the LTS version, long term support for the version 18, or you can have the latest
21:58 - and the bleeding edge version, which is 20.
22:00 - That is also fine.
22:01 - In my case, if I open up my console and I show you that I do have, once you actually
22:06 - install it, you'll be having a Node-V as an option to find out what version of Node
22:12 - is installed in your system.
22:13 - Mine happens to be in between of 18 and 20, but I'll update it very soon.
22:18 - As I told you, it really doesn't matter.
22:20 - As long as something above 18 is there, even 17 is above there, it's totally fine.
22:25 - It's not going to bother you.
22:26 - It's not a course on Node.js, but it is required to actually learn React.
22:30 - So that's the first piece of the puzzle.
22:32 - The second piece of the puzzle is any code editor.
22:36 - Everybody seems to be on the VS code, but if you happen to have any other choice of
22:41 - the code editor, that's also totally fine.
22:43 - Maybe you are a VIM fan.
22:44 - That's totally OK.
22:45 - Maybe still you are rocking the sublime text.
22:48 - That's also fine, but I'll be using the VS code.
22:51 - I use it with my own custom theme with the purchased font.
22:54 - You don't need to do all of this.
22:55 - That's just a fancy shenanigans.
22:57 - You don't need to worry about that.
22:59 - But this is something basic what we have.
23:01 - Another crucial thing that we need for this is actually React.dev.
23:06 - You don't need to download anything from it.
23:07 - It's just a reference point from where we'll be consulting the documentation to
23:11 - understand the parts of it.
23:13 - There is another portion of it.
23:15 - I'll walk you through with that.
23:16 - But first, let's set up the thing so that you can actually grab all the stuff and
23:19 - things like that.
23:20 - So what I'll be doing is let's first go on to this.
23:25 - So I do have a folder here.
23:27 - I'm actually going to create this one is for my English channel.
23:30 - So I'll be saying that, hey, this is going to be a React course for 2023.
23:36 - So I'll be saying React 2023.
23:39 - Basically, I'll probably React course.
23:42 - React course.
23:43 - Yeah, that's a React course.
23:45 - I'll be giving you the entire description where you can download on the code files
23:49 - and everything that you are having.
23:50 - So no worries on that part.
23:52 - And the next thing that we'll be having is just open this up into any code editor.
23:56 - So I happen to have a code editor with me, which is VS code.
24:00 - This is how it looks like when you install this.
24:02 - All you have to do is drag and drop this react up here.
24:05 - That's it.
24:06 - That's the step one.
24:07 - Once we have this, let's go ahead and keep it up there.
24:11 - We'll be creating a new folder into this one.
24:13 - Let's just call this one as readme.md.
24:16 - MD is a markdown syntax, which has a special way.
24:19 - If you just create a .txt file, that's totally OK as well.
24:23 - No need to worry at all in this case.
24:25 - Now, I'll be just putting up a simple hash.
24:28 - That means a heading.
24:29 - And I'll be saying simply start of React.js on main channel.
24:36 - I do have a couple of other channels.
24:37 - Not couple, but one other channel, which is in the local language.
24:40 - So I'll be just saving this.
24:41 - And I can just click on this button, which gives me a preview that this
24:45 - is how it looks like.
24:46 - So as I told you, it's nothing.
24:47 - It's just a text file.
24:49 - Nothing more than that.
24:50 - Why we are creating this is because I want to push all of the code
24:53 - onto the GitHub as well.
24:55 - So I'll be just going up here on the GitHub.
24:57 - In case you know GitHub, that's great.
24:58 - If you don't know, this is where you need to download all the code files
25:01 - that I'm creating along with you.
25:03 - You can download all of them and check out how the course progressed
25:06 - and everything from here.
25:08 - Just click on this.
25:09 - I want to create a new repository.
25:12 - And I'll be calling this one as React dash English.
25:17 - And it's really, really funny to see that we have a React and dash English
25:23 - after this because that's how it is.
25:27 - I have a couple of other channels.
25:28 - I'll be calling this as public.
25:30 - That's fine.
25:30 - And we'll be calling this one as a fun React series in future.
25:42 - Maybe I don't know why we kept it.
25:44 - I don't want to add any read me or something.
25:46 - Just keep it as public or you can keep it as private as well.
25:48 - I need to keep it public so that I can give it to you.
25:51 - Create the repository.
25:52 - And then the repository will allow you to actually a few set of commands
25:57 - that you can initialize the gate.
25:58 - You can add the read me.
26:00 - You can make a commit, change the branch.
26:02 - And basically, you have to add a remote origin and push it
26:05 - so that all the code can get onto the GitHub.
26:08 - And later on, anybody can see that.
26:10 - Let's run all these commands.
26:12 - So I can just open up my inbuilt terminal.
26:14 - By the way, I can just click on the terminal, new terminal,
26:16 - or I can just click on View.
26:18 - And somewhere here, the terminal is, I don't know where.
26:21 - Yeah, here it is, terminal.
26:22 - Or you can use the shortcut.
26:24 - Control, tilde, whatever is your shortcut.
26:26 - That's the one you can use.
26:29 - I'll just go ahead and say git init.
26:31 - That initializes a git repository.
26:33 - And then I'll just go ahead and say git add.
26:36 - I want to add everything.
26:37 - There's just one file.
26:38 - Or I can name the file as read me.
26:40 - I'll just add this one.
26:42 - After that, you can again consult to the documentation
26:45 - because all the commands are here.
26:47 - Then the next step is git commit.
26:49 - So I'll just commit with a message that
26:52 - says start of React series so that later on I
26:58 - can push all the code up there.
27:00 - Also, I would love to change the branch.
27:02 - Also, there is a mention.
27:03 - There is a big, big GitHub thread
27:05 - about why we should call it as main, not
27:07 - as a master and slave.
27:09 - But again, we are not going to go
27:10 - into that much of the story.
27:11 - But I'll just say git branch dash capital M.
27:17 - I'll call this one as main so the branch has changed.
27:19 - Then I don't remember this, so I'll just
27:21 - copy and paste this.
27:22 - This is basically a link to repository.
27:25 - Since my GitHub is already configured with my account
27:28 - and all the SSH keys that are required to talk to GitHub,
27:31 - that's why this command will run.
27:32 - Otherwise, this will not run for you.
27:34 - So the remote origin is being added.
27:37 - All I have to do is now push all of my code here.
27:39 - So as I'll be creating the content,
27:42 - I'll be pushing it on to this one.
27:44 - So now everything is gone up there.
27:46 - Now, if I come back and refresh onto this link, which
27:48 - I'll be giving you in the description,
27:50 - as you can see, all the code actually
27:52 - get pushed to the GitHub.
27:53 - That's really important for us so that I can share all
27:56 - the code files with you.
27:58 - Also, you can check out the commits as well
27:59 - so that you can find out, OK, this section of the code
28:02 - was added at that time.
28:04 - And this was first, this was second, just like that.
28:06 - OK, so this is basics.
28:08 - But now we need to go back and see
28:10 - that how we can actually create a React project.
28:12 - That's the crucial information.
28:14 - And all the crucial information comes from the documentation.
28:17 - I want to learn it, obviously.
28:19 - So there is a quick start and there is an installation guide.
28:22 - How can I quick start before installation?
28:24 - So I'll just click on the installation and see that.
28:26 - How can I start a new project?
28:28 - So as I go in to start a new project,
28:31 - it says if you want to build a new app or website fully
28:34 - with React, we recommend picking one of the React-powered
28:36 - frameworks powerful in the community.
28:39 - So these are updated documents.
28:42 - And the documentation says that, hey, React
28:44 - is a very bare-bone library, as I mentioned in the roadmap
28:47 - as well.
28:48 - It doesn't do offer too much of the things to you.
28:51 - It doesn't have routing.
28:52 - It doesn't have advantages like incremental builds.
28:55 - There are so many of these things.
28:56 - So React team recommend that if you really
28:58 - want to build a full-blown application,
29:00 - just use some of the frameworks like Gatsby, Next.js,
29:04 - or any framework's remix, whatever you like to choose.
29:07 - So they actually mention all of this, that, hey, we're
29:09 - not biased towards just React, which
29:11 - is a lot of people are making confusion on the YouTube.
29:14 - No, they say, hey, you can use Next.js.
29:16 - You can use remix.
29:17 - Or you can use Gatsby.
29:18 - Whatever you like, it's your choice.
29:21 - But they are saying that, hey, this is for a full-blown
29:23 - application in the production.
29:25 - But if you just want to understand what the React is,
29:27 - it's not going anywhere.
29:28 - It is still a rock-solid library.
29:31 - But the way they mention it is a little bit controversial,
29:33 - that why this was actually mentioned in the deep dive.
29:36 - If you really want to have a deep dive understanding
29:38 - of those frameworks, as well as of the React,
29:40 - you need to have React knowledge.
29:42 - And you can use it without a framework.
29:44 - You can check the details.
29:45 - There are a couple of ways how you can actually go ahead
29:47 - and take advantage of this.
29:48 - They mention that, hey, you can actually
29:51 - use React and React DOM directly.
29:53 - I'll walk you through how you can do that, as well.
29:56 - Not walk you through, but I'll give you
29:57 - a brief reference of it.
29:58 - And you can use some of the bundlers, as well.
30:01 - Now, what on the god's green earth are these bundlers?
30:04 - You can use Vite or Parcel.
30:06 - Let's try out and test out what is this Vite.
30:09 - So Vite actually allows you to have,
30:12 - you can click on the Get Started Guide.
30:13 - And it will allow you to have an application
30:16 - pre-configured with the React.
30:18 - And all you have to do is NPM create Vite at latest.
30:21 - That's all.
30:22 - Okay, this is not the perfect ideal guide
30:24 - of getting started.
30:25 - So I'll walk you through with both the guides
30:26 - so that you can be in the sync of it.
30:29 - Now, first and foremost, we'll come back here.
30:32 - As you have installed a node,
30:35 - couple of other packages are also installed in the system.
30:38 - One of them being NPM and another being NPX.
30:41 - NPM being a node package manager,
30:43 - it helps you to install all the libraries,
30:45 - which are JavaScript friendly library,
30:47 - a node package manager.
30:48 - Another is node package executor,
30:51 - which helps you to directly execute these packages.
30:54 - So we'll be using one of them, which is NPX,
30:56 - and we'll be saying create dash react dash app.
31:00 - What is this create react app?
31:02 - This is a utility, which was really famous.
31:05 - Nowadays, people look a little bit down onto this library
31:08 - because it's a little bulky,
31:09 - it takes a little bit more time to get downloaded.
31:12 - It literally takes more time
31:13 - because it's bundled up with more things
31:16 - which are required for any beginner to get started.
31:19 - For example, even the testing library ships in this package,
31:22 - which probably you don't need,
31:23 - it's too much configured for you.
31:25 - So we'll check out both the applications,
31:27 - both the ways that how a package is being created
31:30 - with the classic create react app.
31:32 - And we'll also analyze the application
31:34 - which is built by the VIT or same thing goes for parser
31:38 - or any other similar package or bundler that we have.
31:42 - So once we have this create react app,
31:44 - we'll be calling this one as 01
31:46 - and we'll call this one as basic react
31:50 - because that's what it is, basic react application.
31:52 - As I click on this, notice that it's going to go on
31:56 - to GitHub basically and actually, yeah,
32:00 - basically it's called a CRA create react app template.
32:03 - It's fetching all the things for me, not only fetching it,
32:06 - it's actually installing the things for me.
32:08 - If I open up this directory right now,
32:10 - the first step is to just get the package.json
32:13 - which has a lot of things.
32:14 - I'll come back onto this one right now.
32:15 - I don't want to touch it.
32:17 - So basically that's what happening.
32:18 - I'll come back onto this project
32:20 - because this actually takes painstakingly long time.
32:23 - That's why I just want to show you,
32:25 - this is the only time I'll show you that yes,
32:27 - this although I have a beast of a machine,
32:30 - I have a Mac studio maxed out
32:32 - and my internet connection is decent with a 300 Mbps
32:36 - and still it took this much of the time.
32:38 - Not very long for a beginner to get started
32:40 - and we can see that there is so much
32:42 - that comes into this one.
32:43 - There is so much source.
32:45 - I'll walk you through how you can read
32:47 - these kinds of applications, don't you worry.
32:49 - But now we have this application.
32:51 - Next thing that I want to do is not to dive into this one.
32:54 - I would love to learn how these applications
32:57 - are being processed and how can make it up and running
33:00 - but I want to explore another option that, okay,
33:03 - I can create my React application with CRA,
33:06 - create React app but I can do the same thing
33:08 - with the VIT as well.
33:09 - In fact, the documentation says that you can actually
33:12 - use another bundler which is parcel.
33:14 - So what are these bundlers?
33:15 - We will explore them later on but I can actually do that.
33:18 - All I have to do for this is just to copy this command
33:21 - which is NPM, not the NPX, create then the VIT at latest.
33:26 - At latest is optional but we'll still use
33:28 - the as it is command.
33:29 - I'll just paste this command
33:31 - and this is a little different of operation.
33:34 - In the create React app, I don't have to even think.
33:36 - It just brings everything, installs, that's it done.
33:39 - When I click on the create VIT app,
33:41 - VIT is a bundler which has more options.
33:43 - If you just get a scroll onto the top,
33:47 - it says I don't just support React,
33:49 - I support pre-react, I support swelth, I support vanilla,
33:53 - I support a lot of things.
33:54 - So you have to tell it explicitly that what do you really
33:57 - want to build with this VIT
33:59 - or what should I bundle together for you?
34:01 - So if I run this command, it says first thing,
34:03 - what should I name your project?
34:04 - I'll say 01 and I'll call this one as basic VIT.
34:10 - Yeah, that's basically it.
34:11 - So I've got this basic VIT application but it says,
34:14 - hey, how do you want to actually build this application?
34:17 - Select your framework, library,
34:18 - it's a loose term that we use here.
34:21 - Vanilla, view, React, pre-react, whatever.
34:24 - You can use arrow keys to just go up and down
34:27 - and I'll use React obviously.
34:29 - Inside the React, it also gives you two options
34:31 - that you want to use TypeScript, JavaScript, whatever.
34:34 - I'll keep this as accessible for more audience,
34:36 - although I do have a TypeScript course,
34:38 - both on the free code cam on my channel as well.
34:40 - But in this entire course,
34:42 - I'll choose the classic JavaScript,
34:43 - but no worries, we can talk on TypeScript some other day.
34:47 - I'll just click on this and that's it, it's done.
34:49 - As you can see how fast the VIT was
34:51 - compared to the Create React app,
34:53 - but there are a couple of things you should be aware of.
34:55 - VIT just brought in these files for me.
34:58 - It never installed things for me.
35:00 - So I have to go ahead and install this,
35:01 - while on the other hand, the Create React app
35:03 - not only brought in the files,
35:04 - but actually installed those files.
35:06 - I can see the node modules here.
35:08 - So in this one, I have to go inside this folder and install it.
35:12 - Now this brings a very interesting option.
35:13 - Any time you're going to see any React application,
35:16 - this is how the React applications are brought in.
35:18 - There is never a node module folder.
35:21 - So what you have to do is,
35:22 - go ahead CD into your 01 basic VIT app
35:27 - or whatever the app you're going in.
35:29 - And you have to say ls or dir if you're on Windows,
35:32 - and you should be able to see this package.json.
35:34 - This should be in your path directory.
35:37 - Once this is there, then based on this file,
35:40 - you can actually run the command npm install.
35:42 - Whatever the packages are mentioned
35:44 - inside this package.json will be installed.
35:47 - Once I do this, now you'll see a folder being created
35:50 - live in front of us, which is node modules.
35:53 - This is the file which will actually allow us
35:56 - to install all the packages and now we can run.
35:58 - Now we are onto the same packages level
36:01 - that I can run my VTAB or the React app.
36:03 - But before I go there, I should really learn
36:05 - to understand that how these files are actually structured
36:08 - that we'll do in the next video.
36:10 - But we should actually really see that how can I run
36:12 - this actually bare minimum projects
36:14 - and what all the things are there.
36:16 - So I'll just go ahead and delete my terminal itself
36:20 - so that we can go into the basic project route.
36:22 - One thing you'll notice that the full structure
36:25 - looks a little bit similar,
36:26 - but the way how you should read these application
36:28 - is always jump into package.json.
36:31 - This is a centralized index of the entire application
36:34 - that what all the files are, what all the dependencies are,
36:37 - what all the dependencies for development are,
36:39 - what do I support, what's my name and everything.
36:42 - You can see name, version, the dependency list,
36:45 - the scripts that I have, linting configuration,
36:47 - what browsers list do I support,
36:49 - everything is mentioned in the package.json.
36:52 - As you can see with the Create React app,
36:54 - it doesn't really just build a bit brought in React
36:56 - and React Dom, it actually brings this couple of things.
36:59 - But before we move there, I would like to break you back
37:02 - onto our, another eraser, yeah, eraser, eraser.
37:09 - Yeah, I can go there and just give me a second.
37:12 - I'll be going up there.
37:14 - I want to walk you through with a couple of interesting thing
37:16 - about the React JS, so we'll just go back there.
37:19 - It's just exactly a scally draw.
37:21 - So what you need to understand a couple of things
37:23 - about the React is that React is a main application
37:27 - or the main package which does all the magic,
37:29 - but React actually alone doesn't work.
37:31 - We need to tell it that where I want to run my application.
37:35 - So React has a couple of versions
37:36 - that you have to go through with this.
37:38 - So there is one known as React Dom,
37:40 - which is a version or the connector of the React
37:43 - which talks to my Dom in the browser.
37:45 - It's a web application.
37:46 - Similarly, we have just like this.
37:48 - I can talk to the web.
37:50 - I can go ahead and talk to mobile apps as well.
37:52 - There is a React Native for that.
37:54 - The core foundation will always remain React.
37:56 - So it will always be there,
37:58 - but it will also have the React Dom
37:59 - if I want to work with the mobile, the web.
38:02 - If I want to work with the mobile, it's React Native.
38:05 - Even there is a version of connector of the React
38:07 - with the 3D applications like a 3JS and all of that.
38:11 - So there's a lot of hooks that you can actually
38:14 - wire up the React with other application.
38:16 - So now you can see that the important libraries for us
38:19 - are just React and React Dom.
38:21 - But actually install React Script, some web vitals
38:24 - to check out how your web is doing, what's the performance.
38:27 - It actually installs some of the test libraries
38:29 - without even asking that whether I want to use
38:31 - the Jest as a library or maybe I want to use Cypress
38:34 - or Mocha or any other library, it just installed it.
38:36 - It's very opinionated in that case.
38:38 - So this is the first thing that we have learned.
38:40 - Now let's go back onto the VIT.
38:42 - Yes, I know this looks like very repetitive
38:44 - that why are you comparing the CRA and the VIT?
38:47 - It's very important for you right now to understand this
38:49 - because you'll be creating applications
38:51 - with a lot of bundlers.
38:52 - Right now, let's just nail it off here.
38:55 - In the basic VIT, if I go and nail down
38:57 - into package.json again, you'll say that
39:00 - this is not very opinionated.
39:02 - It just gave me dependency list of React and React Dom.
39:05 - You need some testing libraries, you install it.
39:07 - I don't care about this.
39:08 - This dev dependencies, you don't need to worry
39:10 - because this doesn't ship it.
39:11 - These are for helping the developers only.
39:14 - So as you can see, there is no even React scripts.
39:16 - So that means that's not an essential library
39:18 - that is given to us.
39:20 - So now this is the basic.
39:21 - The next thing that we'll be doing is just to learn
39:24 - and understand that how we can run these applications.
39:26 - That is it, that is it.
39:28 - Understanding the file structure,
39:29 - that's for the next video or the next section of the video
39:32 - if you're watching it all one girl, I don't mind that.
39:35 - Okay, so open up your terminal
39:38 - and how you run this application is actually again mentioned
39:41 - in the package.json.
39:42 - So if I go up, check out this,
39:43 - notice here there's a start script.
39:45 - So all you have to do is somehow you need to learn
39:48 - that how I can invoke the start script.
39:50 - Similarly, you can invoke the build script,
39:52 - test the script, whatever the script.
39:54 - If I go into the VIT application,
39:56 - same application, same procedure there,
39:59 - there are scripts like in this, there is no start script.
40:01 - So there is a dev script.
40:02 - So all I have to know is how can I invoke these keys
40:06 - so that I can run the application?
40:07 - That's all, that's all I have to do.
40:09 - So open up your terminal and let's go into one folder,
40:12 - which is 01 Basic React.
40:15 - Once I'm into this and I'm able to see my package.json file,
40:18 - then I can go ahead and simply just say npm run
40:22 - and then invoke the script, start script, dev script,
40:25 - build script, whatever that is, just invoke that.
40:28 - So I'll just say npm start.
40:30 - That's what is mentioned in the Create React app.
40:33 - So if I go ahead and run this,
40:34 - it will say that, hey, I'll open this up
40:36 - and it opens up a bare minimum, bare bone react application.
40:40 - Cool.
40:41 - Okay.
40:42 - I'll just close this one because hey, it's all done
40:45 - and then kill the terminal as well.
40:47 - Now I want to run the VTAB.
40:49 - So as we just saw that VTAB don't have a start script,
40:52 - but it actually gives me another script, which is the dev.
40:54 - So I'll just invoke the dev and how simple it is.
40:57 - Once I know the basics of it, npm run and the dev
41:01 - and can I run this here?
41:02 - Notice here the error.
41:04 - If I click on this one, it says,
41:06 - hey, there's too much of the error.
41:08 - Why the errors are there?
41:09 - It ran into that.
41:10 - So there's, is there a problem in the VTAB?
41:12 - No, you missed the step that I actually taught you
41:14 - that hey, if I do an LS,
41:15 - I should be able to see my package.json.
41:18 - I couldn't.
41:19 - So I'm pretty sure now you'll take care of the errors
41:22 - by this way.
41:23 - So I'll just go into basic VTAB and I do a LS
41:25 - and I'm able to see my package.json somewhere.
41:28 - Give me a time.
41:29 - Okay, package.json.
41:31 - Okay, once I have this package.json,
41:33 - now I can say npm run and the script name.
41:36 - It's a build, whatever the script name is.
41:37 - In my case, it's dev.
41:39 - So I'll just say dev.
41:40 - It doesn't automatically open this up.
41:42 - So I'll just go ahead and control click
41:44 - or if you have the Mac command click,
41:46 - it will ask you to navigate, navigate there.
41:48 - And this is your VTA application.
41:49 - This was my react application, VTA application.
41:52 - So yeah, very similar, very similar,
41:54 - but there are certain differences between each one of them.
41:57 - So I think that's the wrap up.
42:00 - I'll call this one as the wrap up of this video
42:02 - because it's already quite a decently long,
42:05 - but at least we have moved on to one point
42:07 - that we can actually create applications
42:09 - without even being dependent on next shares
42:11 - or remakes or anything.
42:13 - So we're going into the core foundation of React.
42:15 - Within just few minutes or seconds or in the next video,
42:18 - we'll be exploring the file structure
42:20 - so that you have absolute confidence about that.
42:23 - Hey, I can build any React app
42:24 - or I can inject React wherever you ask me to do so.
42:27 - So that's all.
42:28 - Let's go ahead and meet up in the next video
42:29 - and explore the file structure of the React application
42:33 - and the VTA application as well.
42:34 - Let's catch up in the next one.
42:38 - Hey there, everyone.
42:39 - Hittai Sheer back again with another video
42:41 - and welcome to the React series.
42:43 - Let's continue further down the road in our React series.
42:46 - So we have built a couple of applications.
42:48 - In fact, two precisely of the applications.
42:51 - One was built using the Create React app.
42:53 - Another was built using the VIT, which is another bundler
42:56 - and there are many other such bundlers.
42:58 - So it is very crucial for us now
43:00 - that we dissect each one of these applications.
43:03 - Yes, there is a way that we can directly jump
43:05 - into the application, can build some projects
43:07 - like Todos or maybe some password generator or something.
43:10 - We will surely do that.
43:12 - But it is utterly important here at this point
43:14 - that we dissect the application.
43:16 - Once you understand each of these
43:18 - because they are like a critical example
43:20 - of how the bundlers actually work
43:21 - and how the default React CRA works.
43:24 - Once you understand the working
43:25 - and the file structure of both of them,
43:27 - you will be able to understand React much better
43:29 - and you will be able to inject React
43:31 - in any pre-built applications as well.
43:33 - Of course, you'll be able to create them fresh as well.
43:35 - So this video is only and only focused
43:38 - on each and every bit that is going behind the scene
43:41 - and is running in the React applications.
43:43 - So let's go ahead and just dive into that one.
43:47 - So let me share the screen.
43:48 - So this is our application that we have
43:50 - and the first project that we have is 01 Basic.
43:53 - This is being built by the CRA.
43:55 - The second one is being built by the VTAB.
43:57 - We will of course do the comparison between the two,
44:00 - but first let's jump into the React application.
44:03 - We've already seen that in order to read
44:05 - any such application,
44:06 - the first point is to go into package.json.
44:10 - This is kind of a index or a directory for your application.
44:14 - It shows you the name, the version
44:16 - and most importantly, the dependencies
44:18 - and the scripts that are available.
44:20 - As we can see, the React application
44:22 - with the CRA, React React app,
44:24 - it's a little bit opinionated.
44:25 - It gives us some of the testing library.
44:28 - It never asked me that whether I want to use Jest or not.
44:31 - Maybe I'm a big fan of Cypress or maybe Mocha.
44:34 - These are also testing libraries.
44:35 - So it doesn't ask me,
44:37 - just directly give me these testing libraries.
44:39 - On top of that, React and React Dom, as I mentioned,
44:42 - these are the two vital things, which is React.
44:44 - React is coreact and in order to talk to the Dom,
44:47 - there's a separate package known as React Dom.
44:49 - Similarly to talk to mobile apps, we have React Native.
44:52 - So these kinds of things happen.
44:54 - Also on top of that,
44:55 - it actually includes some of the React scripts.
44:56 - I'll walk you through what it is doing
44:58 - behind the scene for you
44:59 - and some web vitals to check the performance of the application.
45:02 - So it never asked me that whether I want to use this package
45:04 - to track the performance or not.
45:06 - So a little bit opinionated of a library.
45:08 - Then on top of that, it actually runs on the script.
45:11 - So when I say NPM runs start,
45:13 - it actually runs a script which is known as React scripts
45:16 - and then it starts.
45:18 - So even starting of the application is dependent
45:20 - on these React scripts.
45:21 - So I cannot just go ahead and uninstall this.
45:23 - Similarly, we have some of the build scripts,
45:25 - test the script and eject the script.
45:27 - Maybe you want to eject the entire React application
45:29 - from the React configuration.
45:31 - Now the way how we start the React application
45:33 - is actually in the development mode.
45:35 - This is what you have been using.
45:36 - But once it actually goes on production,
45:38 - something known as Varsil, Netlify, Amazon,
45:41 - there are lots of options to deploy your application.
45:44 - You simply go ahead and run the build project of it.
45:46 - And once you actually do this,
45:48 - you run the script of build,
45:50 - it actually gives you the production version
45:52 - of how your application will be deployed.
45:54 - And there is no rocket science behind it.
45:56 - We can go ahead and just simply run this.
45:57 - So we will go into 01 basics,
46:01 - probably I am in basics.
46:03 - I'll close this one, delete this one actually,
46:05 - I'll start with the new one.
46:06 - 01 basics, my bad, 01 basic react, okay.
46:12 - Now we are in the correct folder.
46:14 - And I can run this script.
46:16 - And simple way to run it is NPM run
46:18 - and instead of start,
46:19 - which will run the basic development server,
46:22 - I can actually run the build servers
46:23 - which your Netlify and Varsil actually run
46:27 - to actually run your application.
46:28 - Because when you run it in the start mode,
46:30 - actually your browser doesn't understand
46:32 - that there needs to be just one JavaScript file.
46:34 - What it does is in the React building
46:36 - or the development phase,
46:37 - we build lots of React application.
46:39 - They need to be combined and come at to one place.
46:42 - And this is not an easy operation.
46:43 - That's why there is a separate build script for that.
46:46 - And each one of the packages gives you that.
46:48 - So we'll be running this NPM run build.
46:50 - As I done this, you can see there is a build folder
46:52 - which is available for me.
46:53 - And this build folder has the final JavaScript version
46:56 - of everything that's required to run this application.
46:59 - As you can see, HTML, CSS, JavaScript, that's it.
47:02 - And these are your many five versions
47:03 - and mapping of your JavaScript.
47:05 - So end of the day, it's just HTML, CSS and JavaScript.
47:08 - No rocket science there, all right.
47:10 - So this is how your build applications are being built.
47:12 - As we can see, React scripts are actually responsible
47:15 - for doing this.
47:16 - We'll come back and compare this exact thing
47:18 - with the VIT as well.
47:19 - But right now, just to summarize,
47:20 - yes, there are lots of dependencies.
47:22 - We have React scripts as well, and we have the start.
47:25 - Now let's compare the exact same thing of package.json
47:27 - with the VIT application and see and figure out
47:30 - that why people love VIT so much.
47:32 - Let's open the package.json of the VIT.
47:35 - And as we can see, name, private version, very basic.
47:38 - Nothing to be worried there.
47:40 - We have the dev script, we have the build script.
47:42 - Okay, I agree that part needs to be there.
47:45 - In the dependencies, we have just the React and React DOM.
47:47 - So no testing libraries, no React scripts,
47:51 - and how does it is working without the React scripts?
47:54 - That's an important question.
47:56 - But rest of the dev dependencies, I'm not much worried
47:58 - because they are only there for the development purpose.
48:01 - As you run the build command, dev dependencies
48:03 - never goes into your project or your files, all right.
48:07 - So that's the one thing.
48:07 - So that's why people love the VIT.
48:09 - No opinions about the testing framework
48:12 - or any React scripts, just the core minimum, bare minimum
48:15 - essentials to run the React app.
48:16 - That's pretty nice.
48:18 - Okay, further down the road, as we can see,
48:20 - this is much more easier and cleaner.
48:22 - And we already understand that dev
48:23 - is for development environment.
48:25 - When I run npm run build, this is how it's going
48:27 - to run the build command.
48:28 - So very basic and bare minimum.
48:30 - Again, closing this and this kind of a comparison
48:33 - and necessary for understanding the application.
48:35 - Now going into this one, we have this public folder
48:39 - where we have this HTML, index.html.
48:41 - Of course, this is where everything gets injected.
48:44 - I'll walk you through.
48:45 - And majority of the time you'll be spending
48:47 - inside the source folder.
48:48 - Rest of the things are pretty basic.
48:49 - We have node modules, which installs all your packages.
48:51 - We have gitignore to ignore some of the files
48:53 - which are not interested.
48:55 - There's a package.log folders as well,
48:57 - which has a specified version of all the packages
49:00 - that you are installing, pretty much the same,
49:01 - but it's a locked version of it.
49:03 - And we have the source.
49:05 - Now, how does your React application works?
49:07 - So for that, let's first go into public folder
49:10 - and open up index.html.
49:12 - Rest of your logo manifest.
49:13 - These are not much to be worried robots
49:15 - for your Google indexing,
49:17 - manifest for the mobile indexing.
49:19 - So all those mobile icons and stuff are very basic.
49:22 - But if I go into index.html,
49:25 - as you can see, there is a lot of things
49:27 - that is being written here.
49:28 - And you will be able to understand it more
49:30 - if I remove the comments.
49:31 - First of all, in the head part,
49:32 - we have some of the meta tags.
49:34 - So really not much worried about it.
49:36 - The linking of the icons, not much worried about it.
49:39 - And then it mentioned some things about the manifest
49:42 - that it's a metadata used for your app,
49:44 - even installed on the user mobile, not much worried.
49:46 - So I'll just clean this one.
49:48 - All right, similarly,
49:49 - I will also just clean up this public URL and basic
49:53 - that how we can link up the static assets.
49:55 - So not much worried.
49:57 - Now further down the road,
49:58 - I'll also go ahead and clean up these comments as well.
50:01 - So there we go, let's remove that.
50:03 - And if I go ahead and save it now and close the head tag
50:07 - where all the crucial information is there,
50:10 - in the body, there is nothing much going on.
50:12 - First a script that says that,
50:14 - hey, if you want to run this application,
50:15 - you need to be having JavaScript enabled
50:18 - because some browsers can optionally disable that.
50:21 - And there's just one thing which is known as div,
50:23 - which has an ID of root.
50:24 - And that's why we call the React app as the SPA,
50:27 - single page application,
50:29 - because there's not any other page, it's just a index.
50:32 - And what React does, it actually takes your web application.
50:35 - And in every web application or website,
50:38 - we have these DOM nodes of HTML.
50:40 - React basically does is remove the nodes
50:42 - and inject the nodes at their place
50:44 - so that we don't have a full page reload.
50:45 - That's what we call that as SPA, single page application.
50:49 - So if there is a div ID root,
50:51 - there might be someone who is grabbing this,
50:54 - if you understand the foundation of DOM,
50:57 - there needs to be a script in this page,
50:59 - which actually go ahead and say,
51:00 - hey, document.getElementByID or querySelector or something,
51:03 - because ultimately React is the foundational of,
51:06 - like JavaScript is the foundation of React.
51:08 - So this needs to be there.
51:10 - Without this, it's not going to be working.
51:12 - So right now I can see there is no script tag in my HTML.
51:18 - So from there, this is script tag might be coming up
51:20 - because otherwise how your HTML page loads your JavaScript,
51:23 - that's an important question here.
51:25 - So if I go ahead and try to run this application,
51:28 - let's see what happens.
51:30 - So let's run this into the,
51:31 - and you don't need to run it into build mode,
51:33 - NPM run start is all good.
51:34 - NPM run start and try to evaluate this.
51:38 - And there we go, our page runs nicely and fine.
51:42 - If I right click and click on inspect,
51:45 - let's go ahead and see.
51:46 - So as we can see,
51:48 - there's a lot of things which got injected in my application.
51:52 - So this is my ID root,
51:53 - and in this I can see app was injected,
51:56 - then the app header, all these things, not much where it,
51:58 - I'll understand that.
52:00 - But not only that, some things like style ID,
52:03 - this dashlane is mine,
52:04 - because that's my password manager,
52:05 - this always gets injected.
52:07 - But apart from this couple of other things
52:09 - also got injected into this one,
52:11 - which I'm not sure from where this actually comes up.
52:14 - And you also will see that couple of more things
52:16 - actually get injected onto this one.
52:18 - You can analyze it more by just clicking
52:21 - and view page source.
52:22 - And you might be noticing that previously
52:24 - there was just this app,
52:27 - but now if I go ahead and open and look onto this one,
52:30 - there is a script which says static JS bundle JS.
52:33 - So from where this script is getting injected
52:36 - in my application.
52:37 - Very interesting question if you just look at this.
52:40 - And in order to answer this question,
52:42 - there is inside the package.json,
52:45 - there is this something known as React Script.
52:48 - So this is doing behind the scene magic
52:51 - that while running the application
52:52 - or building the application,
52:54 - since the application is being run by React Script,
52:56 - it automatically finds your index.html
52:58 - and inject its JavaScript there
53:00 - before publishing it or pushing it onto the server
53:03 - or our local server.
53:04 - So this is the magic that's happening.
53:06 - But as we saw in the VIT application,
53:09 - this magic is not going on there.
53:11 - So what is making sure that our app is running
53:14 - because similar kind of a thing might be happening there.
53:16 - Let's go ahead and analyze that as well.
53:18 - This kind of comparison analysis,
53:20 - I'm pretty sure a lot of people are not going to like it,
53:22 - but this is very crucial to understand React.
53:24 - After this is just packages and just fun stuff.
53:27 - Okay, as I can see, there is no public folder,
53:30 - like there is a public folder,
53:32 - but my index.html is just outside.
53:35 - If I look at this,
53:35 - this is much more of a cleaner version of it.
53:38 - There is a head tag.
53:39 - Okay, I understand that part.
53:40 - There is a div ID root.
53:41 - So they're using the same analogy there,
53:44 - but I can see that the script tag is automatically there.
53:47 - So they are not using any React scripts
53:49 - to inject your script,
53:51 - but rather they are injecting it manually here.
53:53 - And that's it.
53:54 - That's what your React scripts are actually doing.
53:55 - So that's exactly where it is happening.
53:57 - Now, everything is coming up inside the source
54:00 - and inside this index.jsx,
54:03 - we'll talk about that one by one.
54:05 - But now that we understand how the working part of there
54:07 - and how the JavaScript of React
54:09 - is getting injected into the application.
54:11 - Now further down the road,
54:13 - if I open up the source
54:15 - and there's a lot of things in here,
54:17 - so we obviously need to remove that.
54:18 - Otherwise it would be really difficult to understand that.
54:21 - So set up test, I'm not interested in test.
54:23 - Go ahead and delete that, move to trash.
54:26 - Report web vitals, I'm not interested in you.
54:28 - I'll just go ahead and delete that.
54:30 - All right, a logo, not interested in this,
54:33 - vglogos, just delete that.
54:36 - Yep, index.js, yes, I'm interested.
54:38 - Index.css, I'm not gonna talk about CSS as of this moment,
54:42 - later on we surely will.
54:43 - App test, no testing this time.
54:46 - I'll just go ahead and remove this.
54:48 - And app.css, nope, not interested in this one.
54:50 - So I'll go ahead and delete this.
54:52 - So ultimately we have just two files here,
54:55 - index.js and app.js.
54:57 - As I can predict from here,
54:59 - that the first entry point of my JavaScript
55:01 - would be index.js, if you have guessed that,
55:03 - that's correct, I'll just go up here.
55:05 - And as you can see, there is again too many of the things,
55:08 - so I'll just go ahead and first remove all of this,
55:10 - so that's one.
55:11 - I don't have web vitals,
55:12 - so I'll just go ahead and remove this.
55:14 - I don't have index.css, remove that.
55:16 - React Dom and React, these are packages
55:18 - and app is my file there.
55:20 - So if I look at the index.js,
55:23 - there's not too much things going on.
55:25 - There is somebody who is actually referencing
55:27 - document.getElementId by a root,
55:29 - so it's referencing my index.html
55:32 - and is bringing up the root.
55:34 - And React, behind the scene, we have a React Dom,
55:37 - so there is a browser Dom and there is a React Dom,
55:39 - known as Virtual Dom.
55:41 - It tries to mimic the original Dom as well,
55:43 - and then whatever the updates you make
55:45 - actually first goes into your virtual Dom or React Dom.
55:48 - Calling it as a Dom right now, it's not a great idea
55:50 - because now it's not a virtual Dom, it's fiber,
55:52 - but we'll talk about that later.
55:54 - So we go ahead and just have our own virtual Dom,
55:56 - and that's what this React Dom is known as.
55:58 - This is actually the virtual Dom.
56:00 - And any update that happens here in the virtual Dom
56:03 - actually gets pushed into the original Dom,
56:05 - and only those pieces are pushed.
56:07 - So as we can see, it's just creating a root here,
56:10 - and then this root is actually rendering.
56:12 - I'll definitely talk in one of the video
56:13 - about these rendering process in much more detail.
56:15 - In fact, we'll be creating our own render method,
56:18 - just similar to this one.
56:20 - And as I can see, this is just a React strict mode and React.
56:22 - And by the way, I can just remove this strict mode as well
56:25 - in order to make sure that you understand it much better.
56:27 - This is also an optional code.
56:29 - So we have just an app, which is just running in here.
56:31 - All right, that seems good.
56:33 - If I go into app.js, it looks there is so much going on,
56:37 - but I can just go ahead and technically remove everything.
56:40 - And in fact, if I just close this header,
56:42 - I don't want this header entirely.
56:45 - I'll just go ahead and say, hey, there is a dev app.
56:47 - No, I'm not interested in that.
56:49 - I'll just go ahead and write in simple H1,
56:51 - which is like a HTML text.
56:53 - So I'll just go ahead and say H1 or H2,
56:55 - whatever feels good to you.
56:56 - And I'll say custom, not custom,
56:59 - it's a vanilla or classic React app.
57:05 - I'll save this.
57:05 - And if my application is running, which it is not,
57:09 - I'm in the basic React.
57:10 - So I can actually go ahead and run this NPM run start.
57:14 - And technically my application should still be running,
57:16 - but in the bare bone version.
57:18 - So now we can see that classic React app.
57:20 - So as we can see, a lot of things were coming in
57:22 - just from the CSS and stuff.
57:24 - And if you look at from the JavaScript perspective,
57:27 - what we're doing here in the app.js,
57:29 - we've just created a function that is an app, that's it.
57:33 - And we are returning some HTML from it.
57:35 - All right, we'll just go into the details
57:37 - in the upcoming videos.
57:39 - But as of now, just a function which returns the HTML.
57:43 - Further down the road, if I just go up into the index,
57:47 - we're importing this app from the file.
57:50 - And we are rendering this here.
57:51 - So how cool this is and how basic this is.
57:55 - Now further down the road, we have this app.
57:57 - So that is cool.
57:58 - And we are running this.
57:59 - And there's a special syntax of running this into this.
58:02 - This is known as JSX.
58:03 - We'll definitely go into much more depth.
58:05 - But if this is bothering you a little bit,
58:07 - since this is a method that you imported,
58:09 - it shouldn't be done.
58:10 - But since this is a method,
58:12 - you can actually run the method like this.
58:14 - And if I save this, yup.
58:15 - If I can go back onto my React app, yeah, this is exactly.
58:19 - It's a method.
58:20 - You can execute a method like this.
58:21 - But again, not a good practice.
58:23 - It's supposed to be JSX.
58:24 - We'll talk about that.
58:25 - But yeah, that's the basics of it.
58:27 - All right, so this was somehow the classic version
58:30 - of dissecting a React app, which was built.
58:32 - And now we understand that it's not that bad.
58:35 - It's just some rendering that is happening behind the scene.
58:37 - So React is doing some magic of optimizing the thing
58:40 - by just selecting an element from the root.
58:43 - Now I dissected it.
58:44 - I know that I can change any time root to Bitesh
58:46 - or maybe something else.
58:48 - I can do that.
58:49 - Totally do it.
58:50 - And app, it's not really that fancy.
58:52 - It looked fancy at the first go,
58:54 - but now it's just a method which returns an HTML.
58:56 - That's it.
58:57 - And now it's time that we dive and dissect the VTAP as well
59:01 - that, hey, what's happening at your side?
59:03 - Index, we know that you are injecting my root here
59:07 - and there's a script.
59:08 - Cool, I accept that.
59:09 - I understand that.
59:10 - In the source, again, we have a lot of things going on.
59:13 - So let's just go ahead and delete one by one.
59:16 - Main.jsX, I think that's equivalent of our index.js.
59:20 - So exactly same.
59:22 - Again, we can do the same magic here.
59:24 - We will do that,
59:24 - but first let's go ahead and remove index.css,
59:27 - not interested in the CSS part.
59:29 - So I'll just go ahead and delete, not rename.
59:31 - I'll delete that just to give you an idea
59:34 - of how the barebone version looks like.
59:36 - App.css, not interested in that either.
59:40 - Move to trash.
59:41 - Assets, not even tiny bit interested in that part.
59:44 - So I'll delete that.
59:45 - Now, if I go ahead, I have just app.jsX and main.jsX.
59:48 - And you might have noticed that it calls it at JSX
59:51 - and we call it as main.js.
59:53 - So here's the convention rule.
59:55 - If you're returning any HTML from your JavaScript,
59:57 - that's known as JSX because technically it is JSX,
60:01 - but it's just a rule.
60:02 - You can avoid that in some of the cases,
60:04 - but I recommend that you don't do that.
60:06 - Also another convention is if you're creating any component,
60:08 - yes, we call them as component in the React world.
60:11 - Otherwise it's just a basic function.
60:13 - We actually use a capitalized letter in the file name
60:15 - and the component name as well.
60:17 - I'll definitely walk you through with that as well.
60:19 - So in the main.jsX,
60:20 - now I can go ahead and do the same thing.
60:22 - I don't have CSS, let's remove that.
60:24 - App, yes, we have that and React, React DOM, that's cool.
60:28 - React strict mode, we don't need that right now.
60:30 - So we'll just go ahead and remove that.
60:31 - We have just the app being returned, save that.
60:34 - In the app.jsX, we don't have any CSS, remove that.
60:37 - We don't have VIT logo, remove that.
60:39 - React logo, not interested in that.
60:41 - Use state, in fact, we don't need that.
60:44 - I will just remove everything.
60:46 - Remove all of this, which you don't understand right now.
60:48 - And let's just go ahead and have this div.
60:51 - This needs to go away.
60:52 - And this whole thing needs to go away.
60:55 - And again, we'll be doing the same thing.
60:57 - Everything goes away.
60:58 - We just have an H1 tag and it says VIT React app.
61:04 - So that's it, that's the basic of how it goes.
61:06 - In the main.jsX, we are importing it and showing that up.
61:09 - That's it.
61:10 - Told you it's super, super easy.
61:12 - Let's stop that and run the VTAB to actually verify
61:15 - that we have a VTAB running with the bare minimum basics.
61:19 - So CD and this one is 01 Basic VIT.
61:24 - And this one is npm run dev.
61:29 - And this should also be running without any issues.
61:31 - So VTAB and we have a Create React app, so classic.
61:34 - So now that we understand each bit of it,
61:36 - that how it is happening, why it is happening,
61:38 - we can actually do a lot more.
61:40 - Since we are into the VTAB itself,
61:43 - if we actually understand the basics of it,
61:45 - that hey, it's just a file and I can just go ahead
61:48 - and create a function inside it,
61:50 - can I do it one more time?
61:52 - Yes, you can.
61:53 - Actually, let's just do that.
61:54 - So let's go ahead and remove all of this.
61:56 - Into my, the same folder VIT, inside the source,
62:00 - I'll create a new file and show you a couple of errors
62:02 - as well.
62:02 - So we'll just go ahead and call this one as youtube.js.
62:06 - And in here, we'll be just going with the classic.
62:09 - So we have a function whose name is YouTube.
62:11 - And that's how it looks like.
62:12 - And it goes ahead and says, I want to return.
62:15 - There's a parenthesis here.
62:17 - And I'll be returning an H1,
62:20 - H1, just like this.
62:24 - And an H1.
62:25 - And I'll say YouTube app,
62:28 - because I teach a lot on YouTube.
62:30 - Okay, we have to export as well.
62:32 - So we are going to say export default
62:34 - and we'll be saying YouTube.
62:36 - So now that I have exported this YouTube,
62:39 - can I use this YouTube inside the main or in the app?
62:43 - Yes, you can, you can.
62:45 - There is only one rule you have to follow.
62:46 - In the JSX, there is a rule
62:48 - that you can only return one element.
62:50 - So what if I have to return to H1 like this?
62:52 - No, it's not allowed.
62:53 - So there is a cool hack of it that, hey,
62:55 - just go ahead and wrap everything inside the div.
62:59 - And technically you're returning just one element,
63:02 - but the error is gone.
63:04 - This is so much of a common practice
63:06 - that eventually React guy realized that,
63:08 - hey, this is such a basic thing in the JSX.
63:11 - It's kind of a backdrop of a JSX that we don't want it.
63:15 - So eventually they removed it and they simply said,
63:18 - hey, now we can return empty parentheses,
63:20 - which doesn't create any extra div in the HTML
63:23 - and keep everything just awesome.
63:25 - In one of the mid version of the React,
63:27 - we were supposed to actually bring it
63:29 - as fragment from the React,
63:31 - but now we don't need to have this,
63:33 - even the import statement, it just works fine.
63:35 - So if I go back here, it's a VTA, VTA, there we go.
63:38 - Now similarly, if you understand
63:40 - that how in the main.jsx you have imported app
63:42 - from app.jsx, you can do same thing in the app as well.
63:46 - You can just go ahead and say,
63:47 - hey, I want to import YouTube and YouTube,
63:52 - and now you can use the same syntax of that,
63:54 - just like we have used in the app, just same syntax.
63:57 - Yep, you can go ahead and use this,
63:59 - but this will be throwing us some errors.
64:01 - Don't worry, we'll be removing that.
64:03 - So if I go back, it says,
64:04 - hey, fail to parse the source code of import analysis
64:07 - because the file contains invalid JS syntax.
64:11 - If you're using JSX, make sure the name of should be JSX.
64:14 - So this is one of the VIT, you can say rule,
64:18 - that hey, your file was actually JSX,
64:21 - but you actually call this as just a YouTube,
64:24 - you shouldn't be doing that.
64:25 - It's again a VIT specific issue.
64:27 - Maybe some butlers also do that,
64:28 - but now that you understand this,
64:30 - you can just go ahead and rename this,
64:32 - and you can call this as JSX
64:34 - because you're throwing out some of the JS,
64:36 - but this is also not gonna do it.
64:37 - If I save this, go back, it technically runs that,
64:41 - but where is my YouTube?
64:42 - Hey, there should be a YouTube
64:44 - because there's a text inside the YouTube,
64:46 - I'm returning a YouTube app.
64:47 - Why is this not going on?
64:49 - Right click, inspect, and just look at the console.
64:52 - Now some warning in the console.
64:54 - The tag YouTube is unrecognized in the browser.
64:57 - If you want to render React component,
64:59 - start its name with an uppercase letter.
65:00 - So yeah, again, one more error.
65:02 - So let's just go ahead and remove that.
65:04 - So I'll just go ahead and say,
65:05 - hey, this is a YouTube with a capital U,
65:08 - export that as a YouTube with a capital U.
65:11 - In the app, obviously have to export that as YouTube.
65:14 - And now I can just call this component as a YouTube.
65:17 - So that is much better version of it.
65:19 - And now we can see the YouTube app.
65:21 - Now there is no such hard requirement
65:23 - of naming the file as capital,
65:25 - but this is a convention and I don't want to break that.
65:27 - So I'll just go ahead and say that,
65:28 - hey, that's a YouTube.
65:30 - And the moment I do this,
65:31 - this needs to be updating with the import.
65:33 - Just the file name will be importing.
65:35 - And sometimes you'll see the errors like this.
65:37 - That's okay.
65:38 - Just go ahead and command shift P and reload.
65:42 - Reload the window and the errors will be gone.
65:44 - So yeah, really basic.
65:45 - I've been teaching this for years and years now
65:47 - in all of the boot camps.
65:49 - So yeah, this is a classic way of,
65:50 - now you have learned how you can create
65:52 - your own component basically,
65:54 - which is just a method.
65:55 - This is just a method.
65:56 - So that's basic part of it.
65:57 - Now let's try to do the same thing.
65:58 - I know this is boring,
66:00 - but it's very, very important for you to understand that why
66:02 - and how we are having the bundlers
66:04 - and how does they behave and all of that.
66:06 - We need to do all of this in the basic React app as well.
66:09 - I know, I'm sorry, but this is crucial information.
66:12 - We cannot avoid that.
66:14 - So let's go into the source.
66:15 - We know this index.js, we know app.js.
66:18 - Let's go ahead and create another one.
66:19 - And let's call this one as a YouTube.
66:23 - And we'll be following the convention this time
66:25 - because there's no point of learning them again and again.
66:27 - So we know that YouTube.
66:28 - In this, I can actually use .js.
66:30 - There is no hard and fast requirement to call it as JSX
66:33 - because the rules were actually coming up from the VIT,
66:35 - not the CRA.
66:36 - So every bundler has their own rules,
66:39 - but I actually like this JSX.
66:41 - It actually gives me that, hey,
66:42 - there is some JSX getting returned from it.
66:44 - So I like that.
66:45 - So I'll be following that.
66:46 - In the function, I'll be calling this one as YouTube.
66:49 - There we go, really basic.
66:51 - And in this one, we'll be just going ahead and saying return.
66:54 - And inside the return, we'll be returning a JSX,
66:57 - probably adjust an H1, which says YouTube React app.
67:02 - And end of the day, we'll be just saying export default
67:07 - YouTube, if I can write that, not like that, YouTube.
67:12 - So once we have actually created and exported that
67:15 - in the app.js, I can actually go ahead and import that.
67:18 - I can just go ahead and say import YouTube from YouTube.
67:22 - We know that this needs to be uppercase.
67:23 - If I go ahead and directly write this as a YouTube,
67:27 - and just like that, it will bother me.
67:29 - Now we know that the basics behind it that, hey,
67:31 - this needs to wrap inside this, which is a fragment.
67:35 - Very basic, not too much to be worried.
67:37 - I can save this, and now I can run this.
67:40 - So as you can see, once you understand the concept
67:42 - at one places, moving them into another place
67:44 - is now a big deal.
67:45 - We'll just go ahead and say npm run and start.
67:51 - I think that's the start script.
67:52 - No, that's not a start script,
67:53 - because I'm actually in the wrong folder.
67:55 - I need to go inside, 01 Basic React.
68:00 - And from here I can run npm run start.
68:04 - And yes, these errors are really, really important
68:07 - for you to see and actually walk through,
68:09 - and just make sure never be afraid of going into the console
68:12 - to see if there is any error or something like that.
68:14 - That's how we all debug the application.
68:16 - Now we have actually dissected the application
68:18 - in such a way that we just know every inch,
68:22 - every piece of how the React application is working,
68:24 - from where the Reacts are getting injected in the HTML,
68:27 - both in the VIT, how the build process works,
68:30 - both in the CRA, Create React app, and the VIT as well.
68:33 - That actually gives us a great foundation
68:35 - of how things actually are being done inside this.
68:38 - Again, some of this I understand was boring,
68:40 - was repetitive, but it is essential for you to understand
68:44 - how the dissecting is done, so that when we later on
68:46 - create the React apps, you just see them
68:49 - as just a JavaScript app, and that's my goal.
68:51 - Not to see React as some fancy library,
68:53 - but as something which is an addition
68:55 - in your JavaScript writing capabilities.
68:57 - That's what my goal is.
68:58 - I hope you are enjoying this.
68:59 - If you are enjoying this, do let me know
69:01 - in the comment section.
69:02 - That is very, very important for me to get a feedback,
69:05 - to get some appreciation.
69:06 - Everybody works for some motivation.
69:08 - This is my motivation.
69:09 - So that's it for this video.
69:10 - We'll surely catch up in the next one.
69:12 - Hey there, everyone.
69:17 - Hitesh here, back again with another video,
69:19 - and welcome to our React series.
69:21 - I hope you are constantly watching this series,
69:24 - and I'll also sharing this series,
69:25 - so that helps me a little bit to spread the word around
69:28 - that, hey, there is a remarkable series,
69:30 - and yes, one thing is sure, this series is going to compete
69:33 - with all of the paid courses that you have seen around
69:36 - on the internet.
69:36 - So with that, let's go ahead and get started.
69:39 - In this video, we are going to focus on one very basic
69:41 - concept of how can I create my own React?
69:44 - Now, this sounds very fancy, but it is not.
69:47 - A lot of people just believe that React is some kind
69:50 - of a magic that happens behind the scene, but it is not.
69:53 - It is just a ton of JavaScript, which
69:55 - has been written by somebody else,
69:57 - and a lot of algorithms, which makes the manipulation
70:00 - in the DOM much more easier and consistent.
70:03 - That is it, nothing more than that.
70:05 - Once you get the mindset that React is doing nothing,
70:08 - apart from helping me in manipulating the UI,
70:12 - you will become an amazing React engineer,
70:14 - or as a front-end engineer, that's debatable.
70:17 - So in this video, I'll walk you through that,
70:18 - how we can create a really basic HTML file
70:22 - and a JavaScript file, and can kind of mimic
70:25 - what React is trying to do in the backend.
70:26 - Of course, React uses tons of algorithms,
70:28 - we are not going to write that,
70:30 - but still, this video is very valuable
70:31 - and will give you a whole lot of idea about that.
70:33 - I hope that makes you excited.
70:35 - And in case you're watching it on my channel,
70:38 - then definitely we have a target setting practice,
70:40 - so go ahead and keep on learning the things
70:42 - and post in the comment section,
70:44 - we are targeting around, not higher,
70:46 - but just 100 comments on the channel.
70:49 - I hope you can help me in achieving that target.
70:51 - Let's go back, and I'll first share the screen,
70:54 - so there we go.
70:56 - So this is my VS code, by the way,
70:57 - you can find all the code files on my GitHub account,
71:01 - post a star there as well, I'm asking too much.
71:04 - That's really required.
71:05 - Okay, moving further, let's create a new folder,
71:08 - and we're going to call this one
71:10 - as simply just custom react.
71:11 - So let's go ahead and create a custom react.
71:13 - Where does that folder go?
71:15 - Oh, anywhere, custom react.
71:19 - Or we're gonna call this one as custom,
71:20 - I really like this color, but anyways, custom react.
71:24 - Custom react will get just the two files, very basic,
71:27 - just like how we do in the classic vanilla HTML.
71:31 - So index.html, what else?
71:33 - We're gonna get some JavaScript.
71:36 - So let's call this one as custom react,
71:38 - or whatever you like.
71:41 - Custom react.js, should I uppercase this?
71:46 - Yeah, I really think a lot about that.
71:48 - Okay, what goes into the index.html?
71:51 - Nothing much, we'll be using emit
71:53 - to generate the boilerplate code, hit that,
71:55 - two hits and after that two tabs,
71:57 - and after that you can just write custom react.
72:03 - Now the idea is, in the react,
72:05 - what you might have seen is,
72:07 - we have already explored that in the last video,
72:09 - that it has just a div which has an ID of root, that is it.
72:14 - If I go ahead and jog your memory again,
72:16 - either I go in the VIT or wherever you want me to go,
72:19 - I can just open this and this is exactly how it looks like.
72:22 - In the VIT, we saw that there is a custom script
72:25 - that is included, and in the react,
72:27 - we saw that there are some react scripts
72:29 - which helps me to inject this inside this.
72:32 - So if I go ahead and look into my public,
72:35 - index.html, nothing, and that is only and only one reason,
72:39 - because in my package.json, there are some react scripts
72:43 - which actually inject that.
72:44 - So we're gonna not gonna do that,
72:46 - we'll inject our script manually,
72:48 - and there are a couple of ways how we can inject this,
72:51 - we'll not talk much about it,
72:52 - but right now I'll just say script,
72:54 - and all I want is to have a source
72:56 - and the source is in the current directory, custom react.
72:59 - By the way, we can talk also about that
73:01 - how the type of the loading of the script
73:03 - can be common JS module, but not for this series,
73:07 - not going to be too much into the JavaScript,
73:08 - but wherever it is required, I'll discuss that.
73:11 - Okay, now coming up on to the react,
73:13 - how does react works and how does react is able
73:16 - to just generate everything inside this route,
73:18 - and how would I do this if I had to just
73:21 - do really basic of it?
73:23 - Now the first thing is that we need an element.
73:26 - So what is the element that you want to inject here?
73:28 - Now you might say that, hey, I want to inject,
73:30 - let's just say an h1 tag, simple,
73:33 - and inside the h1 tag, we'll have some lorem ipsum, great.
73:36 - But this is not how react looks at the picture,
73:39 - react looks at the picture that everything is an object,
73:42 - and inside this object, you'll give me that,
73:44 - what should I create?
73:46 - First, give me a tag name,
73:47 - then give me what should I insert into that,
73:49 - give me what attribute should I add to those HTML,
73:52 - that kind of a basic.
73:53 - So we can just try that, let's just go ahead and do that.
73:55 - First of all, let me say that, hey, this is a type,
73:58 - what the element type should be.
74:00 - It could be h1, it could be a tag, whatever you like,
74:03 - that is exactly the type.
74:05 - Now after that, what are the props
74:07 - that you want to insert into this?
74:09 - By the term props, you can just use attributes,
74:11 - no problem there, my video, I chose to props,
74:14 - your video, or your code,
74:16 - you can choose absolutely to have this.
74:18 - Now this props, since we know that the attributes
74:21 - can be many, so that's why I'll use a prop as an object,
74:24 - which can further be drilled down to multiple things.
74:27 - Like for example, I want an href,
74:30 - which goes to Google, so Google, if I can write that,
74:34 - that would be great,
74:36 - http colon slash slash, google.com.
74:39 - So that's the first thing that I have here.
74:42 - And apart from this, what else do I want?
74:44 - Maybe a target, okay.
74:47 - Target will be underscore, of course, in the string,
74:51 - underscore blank.
74:52 - Now right now it's giving us couple of errors,
74:54 - don't worry, we'll fix them up in a minute.
74:56 - But this is my basic, what else do you want to have?
74:59 - Now let's just say I want to have some text inside it,
75:03 - and I'm going to call these text as children.
75:05 - And I'm pretty sure you might be wondering
75:07 - how you are able to come up with the things
75:09 - that we are going to call this as props or children.
75:11 - No need, no need, no need to call it anything.
75:13 - Feel free to call it whatever you like.
75:15 - I'll just go ahead and say, and I'll say,
75:17 - click me to visit Google,
75:21 - and I know this is bothering you, so I'll just fix this.
75:24 - Okay, since this is an object,
75:26 - let's go ahead and store that into a variable.
75:28 - So we'll just call this one as react element.
75:32 - Feel free to call it whatever you like,
75:33 - there's just nothing more than naming.
75:35 - So now we have an element which we want to inject
75:39 - inside our DOM, or root, in this case, root.
75:43 - So I want to inject here.
75:44 - Okay, how can I do that?
75:46 - That's pretty easy.
75:47 - First and foremost, get me the reference of this root.
75:50 - That's easy.
75:51 - If you have studied your JavaScript, that's easy.
75:53 - All I have to do is say, document, hey document,
75:56 - I want to have a get element by ID will also work.
76:00 - We can have a query selector that will also work,
76:03 - whatever you like, it's your choice.
76:05 - So I'll just go ahead and say, give me a root.
76:08 - There we go.
76:09 - Now you might have noticed that if we go and check out
76:11 - the VIT especially, this is exactly what they are also doing.
76:15 - So in case you are looking forward for this one,
76:18 - if I go ahead and open up source, main.jsx,
76:21 - exactly like that, get element by ID, query selector,
76:24 - whatever that is, exactly same.
76:26 - Okay, since we have a reference of this,
76:28 - let's call this one as main container.
76:32 - There we go, feel free to name it, whatever you like.
76:34 - Now, once I had this reference,
76:36 - I am thinking that there should be a method
76:39 - just like React has its own method.
76:41 - If I have a custom render method,
76:43 - which takes two parameter that,
76:44 - where do you want to inject and what do you want to inject?
76:47 - That is it, that is it, I'm done with my job.
76:50 - So first thing is, I want to inject React element,
76:52 - where do you want to inject it?
76:54 - I want to inject it into container, main container, yeah,
76:59 - that's whatever name.
77:01 - Okay, so this is good.
77:02 - Now the whole magic lies that,
77:04 - how does the main container work?
77:06 - It's a function, that's for sure.
77:08 - So let's go ahead and create a function.
77:10 - Why to worry about that?
77:11 - And let's just call this one as main container
77:13 - and there we go, there we go.
77:15 - Magic function, that's it, tutorial done.
77:17 - No, not like that.
77:19 - Okay, main container takes a React element,
77:21 - let's call it as React element
77:23 - and whatever the container you want to inject.
77:25 - So in my case, it's main container,
77:27 - but we'll just differentiate it like this.
77:29 - Okay, step number one is create an element.
77:33 - So how do I create an element?
77:35 - It's pretty simple, document.create,
77:38 - no suggestions, create element, there we go,
77:40 - we have suggestion, create element.
77:42 - What element do you want to create?
77:43 - I want to create an element, which is an A tag, great.
77:47 - But I want to utilize the parameters which are passed to me.
77:51 - So I can use a React element parameter
77:54 - and I can say, hey, take the name of the parameter
77:57 - from react element.type.
77:59 - Okay, so that I can reuse this code
78:01 - and not only just with the A,
78:03 - I can actually inject H1 and H2 and whatnot,
78:06 - all these values.
78:07 - Let's store that into a variable.
78:09 - So let's just call this one as DOM element,
78:12 - whatever the name of the element, it's up to you.
78:15 - So we have a DOM element that can be injected,
78:18 - but right now it just created,
78:19 - it doesn't have anything inside it.
78:21 - So let's put something inside it.
78:24 - So this DOM element, we're gonna go ahead
78:27 - and set up inner HTML, inner HTML,
78:30 - that's always something which I mess up.
78:32 - And then we can use this React element
78:35 - and I can just go ahead and use the children.
78:38 - So inside the inner HTML, this children will be added
78:41 - and now we have an A tag
78:43 - and whose text is inside the inner HTML,
78:46 - or you can say inner text as well, that's changeable.
78:49 - And I have this access,
78:50 - but I have set no attributes inside it.
78:53 - So how do I set the attributes?
78:55 - That's also easy, I can just go ahead and say,
78:57 - hey, DOM element, I want to set an attribute,
79:00 - set at no suggestions, that's mean,
79:05 - at, oh, my bad, I'm writing wrong,
79:07 - at tree, still no suggestion, I don't like that.
79:11 - Okay, I'll say attribute, what attribute do you want to add?
79:15 - Now I want to add an attribute,
79:16 - which is going to be first href
79:20 - and where will I get the value of href?
79:22 - I'll get it from react element dot props dot href.
79:28 - So this is my first attribute that I'm setting.
79:31 - Now what is the next attribute you would love to set?
79:33 - I would love to set this target.
79:34 - So I'll just say, hey, now let's set the target
79:37 - and the target you will be getting from target, that's it.
79:41 - Okay, once this is done,
79:43 - then I need to utilize this container
79:45 - because this is where I'm going to append the things.
79:47 - So I'm going to go ahead and say, hey, container,
79:50 - let's go ahead and say append child
79:54 - and in the append child, let's inject the DOM element,
79:56 - that is it.
79:57 - Now, so far we haven't utilized anything react
80:00 - or reactors like that, we have just gone through
80:02 - with the basic JavaScript to jog your memory of JavaScript
80:04 - in the early days of react.
80:06 - Okay, this looks good and we were able to do all of this,
80:10 - but this code is not optimized, we can actually optimize it.
80:13 - So I'm going to go ahead and put some comments
80:15 - onto this one so that this is there for you.
80:18 - And by the way, I've been doing this
80:20 - for a really, really long time in lots of bootcamps.
80:23 - Okay, there we go, we keep this.
80:25 - Now let's try to do this again.
80:26 - It will be a good revision for you.
80:28 - A lot of people are not going to like it,
80:29 - but this revision is necessary.
80:31 - So let's do it one more time.
80:32 - This time we'll write a little bit faster.
80:34 - So we'll just go ahead and say document.createElement
80:39 - and we know what's going to happen inside this one.
80:41 - We'll take the reactElement.types, types or type.
80:46 - And we're going to hold that into a variable.
80:48 - Let's call this one again as DOM element.
80:50 - And there we go.
80:51 - Now we know that this part of the code is absolutely okay
80:54 - and DOM element will also get the inner HTML.
80:56 - So we'll just say inner HTML.
80:59 - And we have the inner HTML, which is going to come to me
81:03 - via reactElement.children.
81:04 - So far, exactly same code, no big deal.
81:07 - But what I want to do now is I want to loop
81:09 - through this prop so that no matter how many elements
81:12 - are coming in, I can just set them up.
81:14 - So let's just utilize a loop here to write a better code.
81:17 - And we're going to use a for in loop.
81:20 - That makes sense.
81:21 - And we're going to say for prop in,
81:24 - and again, we have to go inside this props to loop through.
81:29 - And I can just go ahead and say, hey, reactElement.props.
81:34 - There is an S there.
81:36 - So all of this element needs to go through with that.
81:38 - I'll just remove this if part.
81:39 - This is our classic basic code.
81:41 - Now, let's just say, first of all,
81:44 - this is also something which happens in the React as well.
81:47 - By the way, you can just go ahead and set these elements.
81:49 - So we can just go ahead and do something like this.
81:52 - Access this DOM element, and just keep on looping through
81:55 - and set the attribute.
81:59 - Attribute, and that attribute,
82:02 - the key of the attribute is obviously this thing,
82:05 - which is actually looping through in the prop.
82:07 - So I can just go ahead and say prop.
82:09 - And what should be the value?
82:10 - The value is going to be reactElement.
82:12 - And we also know that objects can also be accessed
82:15 - other ways than just the dot notation.
82:18 - There is a square bracket.
82:19 - In this case, that square bracket makes sense.
82:21 - So inside this, go into the props.
82:23 - Now we are inside this.
82:25 - What property do you want to access?
82:26 - Whatever there is in the prop, this same.
82:28 - So I'll just use a square bracket, and I'll say prop.
82:31 - That is it.
82:33 - Now, this is how, obviously it will work,
82:35 - but there are also cases that somebody might inject
82:38 - accidentally a children here, just like this,
82:42 - and might add a children here as well.
82:43 - If there is a children here,
82:44 - we are expecting that the children will come outside.
82:47 - Now, remember this, I am setting the rules.
82:50 - I am react, okay?
82:52 - But still, I want to avoid that case.
82:54 - So just taking care of the corner case,
82:55 - I can just go ahead and say,
82:57 - hey, if the prop is equals to a literal string of children,
83:04 - and if that is the case, I just want to return.
83:07 - So I'll just sneak it out.
83:10 - I'll just say continue.
83:12 - I cannot return here,
83:13 - otherwise this will close the entire thing.
83:15 - I just want to skip that one iteration.
83:16 - Again, if this is something too much for you,
83:18 - just go ahead and skip that.
83:20 - Now, I have improved the code,
83:22 - and I can just go ahead and say,
83:23 - hey, take the container and append, nope,
83:27 - no suggestions, hate that, append child.
83:30 - And in the append child, I can just use the DOM element.
83:32 - So it's a better approach,
83:33 - definitely 100% a lot better approach.
83:37 - But can we say that this was far better,
83:40 - and this is how exactly the React works?
83:42 - Absolutely 100%, this is how things works.
83:46 - Let's go ahead and open this up into a live server
83:48 - so that we can actually see that in action, okay?
83:52 - We got some of the stuff wrong,
83:54 - so let's just go ahead and fix that, okay?
83:57 - Object, and we have back limiting, okay?
84:01 - So some things are not loading up properly.
84:05 - Let me go ahead and quickly check that.
84:07 - All right, so after stirring the code a little bit,
84:09 - stirring the warnings a little bit,
84:11 - I found the bug, and it was pretty easy,
84:12 - and not really that big of a deal.
84:14 - So what we see here is that inside this,
84:17 - I accidentally named it as main container,
84:19 - shouldn't have done that.
84:21 - This should be named as custom render,
84:23 - probably bad suggestion there,
84:25 - you might have already noticed that.
84:26 - So once we do this, save this,
84:28 - and when we go back onto the code part,
84:30 - we see that click me, visit Google,
84:32 - although very, very painful for your eyes.
84:34 - But it's good, it's good.
84:35 - It's actually working,
84:37 - and I can just go ahead and fix it
84:39 - so that you can at least see that properly.
84:41 - So inside the body, I can just go ahead and add a style,
84:44 - and can say background color is going to be probably ash,
84:49 - and we're gonna go 414141, better.
84:54 - All right, so although the link and the text
84:56 - and everything is a little less visible,
84:58 - but we can see it is there, it is there.
84:59 - It is now much visible for you.
85:01 - I can zoom this for you,
85:03 - and we can see it is visible for me.
85:06 - There are a couple of things that we need to discuss now
85:08 - that how these all things are going on.
85:10 - It's not really that bad of a deal.
85:12 - So we have concluded so far that yes,
85:14 - we are perfectly capable of designing our own React,
85:17 - and this is what React actually does on the surface level.
85:20 - Where React shines is there are definitely
85:23 - the capability of creating things inside inside it.
85:27 - Like for example, there is right now just an A tag,
85:29 - but what about when there is a div tag,
85:31 - then there is a span tag, then there's a A tag.
85:33 - We obviously need to loop through values,
85:34 - and smartly design our components.
85:37 - So we can do that, no problem.
85:38 - Surely take some time,
85:40 - but with enough of the time, it can be done.
85:43 - Also React uses some of the algorithms behind the scene
85:46 - that makes this entire process easier.
85:48 - So now can we relate this, our custom design thing
85:50 - with the React itself so that it makes sense
85:53 - or start to make sense a little bit?
85:55 - Yes, turns out yes, we can actually go ahead and try that.
85:58 - So now let me go back onto the code part.
86:00 - This is the code that we have written.
86:02 - Now technically, if this is whole the theory,
86:05 - which is correct, I can actually bring whole of this
86:08 - into the VIT and should be able to run this.
86:11 - And that is where the challenge begins.
86:13 - So I'll just go into the source main.jsx,
86:16 - and I'll just say, hey, I have this React element
86:18 - and I just want to run this React element.
86:21 - Can you do this for me?
86:22 - I think yes, you can, because what we noticed,
86:26 - if I just close it and jog your memory again,
86:28 - in the app.jsx, this is just a function.
86:31 - That is it, you are exporting a function.
86:33 - If I come back and for a minute,
86:35 - if I just forget about my React element,
86:37 - I can just go ahead and declare my own function.
86:39 - And I just can call this one as my app.
86:43 - And that's my app.
86:44 - And literally, whatever exactly we are doing in the app,
86:47 - we can do here, we are just returning this.
86:49 - So let's just return this.
86:50 - So I can just go ahead and say, hey, I want to return.
86:53 - What do you want to return?
86:54 - A simple div which says custom app, maybe like this.
86:57 - So I'll just say, hey, this is my div.
87:01 - Not like that, didn't intention.
87:03 - So one more time, a div, yep, just like that.
87:06 - And we will have an h1.
87:08 - And this h1 will say custom React app.
87:13 - So we should be able to run this technically.
87:16 - And we will be, I can just go ahead
87:18 - and remove instead of the app.
87:19 - I can just go ahead and say, my app, just like this.
87:23 - And even I can do all the fancy stuff,
87:25 - since this is a function, I can do this literally.
87:28 - And let's try to run this.
87:30 - And I'll open this up.
87:31 - And let's just clean this up.
87:33 - And I'll go inside a 01 basic.
87:38 - And probably we are already in the basic React.
87:40 - So I'll kill the terminal, start it again.
87:42 - CD01 basic VIT.
87:45 - And the way to run it is npm run dev.
87:48 - We have already seen that.
87:50 - And are we not able to run it?
87:54 - Let's just do an ls, package.json.
87:57 - Probably we are missing, let me just check.
88:00 - Oh, I probably deleted the node modules folder.
88:03 - npm install, shouldn't take much time.
88:06 - npm run dev.
88:11 - And now, yep, we are able to see that.
88:13 - So now we can see custom React app.
88:15 - This is exactly what we intended to do.
88:18 - But this is not a correct way.
88:20 - This is not a recommended way in the React,
88:22 - although there is nothing which is stopping you to do so.
88:25 - But it might hinder some of the optimization.
88:27 - So rather better way is to load it as a component.
88:29 - Custom design element, HTML element,
88:33 - that would be a better name.
88:34 - So I just go back and say, hey, still it works.
88:36 - Custom React app, so hey, that is exactly.
88:39 - Now, if this is the exact process that is happening
88:42 - of looping through the elements,
88:45 - can we reach to the point where I can just
88:47 - loop through this element?
88:49 - Let's just try this.
88:50 - So how can I, if I can render this whole thing
88:53 - with a function, I should be able to render things
88:55 - if I directly pass it on as an element.
88:58 - So what about if I go ahead and say, hey,
89:00 - I want to give you a const,
89:02 - which is going to be named as another element,
89:05 - whatever you want to name it.
89:07 - And this another element is directly not a function.
89:10 - It just doesn't return, but it directly gives you an A tag,
89:14 - which actually goes to
89:18 - google.com and has a target of underscore blank.
89:23 - Underscore blank.
89:27 - And we can just go ahead and say, visit Google.
89:31 - Visit Google.
89:32 - This should also work because this is exactly
89:35 - what is happening.
89:35 - This is what is getting returned.
89:37 - If I can get it as a return,
89:39 - can I render my element directly like that?
89:42 - You can actually, if I can just go ahead and remove this,
89:45 - I can just say another element directly,
89:47 - and this should technically work in theory.
89:50 - So if I go ahead and move this, this is not working.
89:52 - I'll tell you the reason.
89:54 - If I go ahead and inspect and say console, it says,
89:56 - hey, warning, another element is using incorrect casing.
89:59 - That is the only problem with the Vtis
90:02 - because it wants me to actually make it capital.
90:04 - And this one also has capital and this is all happy.
90:07 - This is all happy.
90:09 - If I go ahead and redirect it, reload it.
90:11 - Now notice here, it says in the console that,
90:14 - hey, react.jsx is invalid expecting a string.
90:18 - You are expecting a string, but let's try the same thing
90:21 - because this is actually a warning
90:23 - or some of the issues that are given to me in the VIT itself.
90:27 - Can I go ahead and just change it like this?
90:30 - Yes, you can.
90:31 - And by the way, I'll just go ahead and show you
90:33 - how the things are actually being done in this exact way.
90:37 - Now the most important thing is that if this is an element,
90:41 - which is already generating an element,
90:43 - do I actually use this it like this?
90:46 - Or do I use it like this syntax?
90:50 - I know this is weird.
90:51 - Or this syntax, but this is not a function.
90:53 - This is just something.
90:55 - I don't know what this is even.
90:57 - I have never seen anybody returning like that.
90:59 - But one thing I can surely say that this whole thing
91:02 - is going to be looped through,
91:03 - just like here we have looped through.
91:05 - So I don't need to do any of this.
91:07 - And can I just go ahead and pass it like a variable?
91:10 - Will it accept it like this?
91:12 - If I go ahead and save it and go back onto my browser,
91:15 - oh, we can see that it accepted it like this.
91:18 - Oh, that's interesting.
91:19 - Never seen React like this.
91:21 - So if I go back, I have concluded a few things that,
91:24 - okay, it's totally possible to just declare a function
91:27 - and return an HTML from it, that is your JSX technically.
91:31 - And I can also go ahead and do some things like that,
91:33 - which is very, very weird, but it technically works.
91:37 - Now, if technically this whole thing works,
91:40 - can I just render React element like this?
91:42 - And you might be very, very curious to see it
91:44 - like working like this, but you go to the web and it doesn't.
91:48 - If I go back onto the Chrome and I go ahead and reload
91:51 - and you say that, hey, it doesn't work.
91:53 - Now, again, you are excited that probably
91:55 - this needs to work somehow.
91:57 - So I can use a syntax like this
91:59 - or maybe another Angular bracket syntax.
92:01 - No, it doesn't work sadly like that.
92:04 - And you might want me to answer this, why it doesn't work?
92:07 - The reason for that is,
92:09 - React doesn't know what is this type.
92:11 - React doesn't know these are props.
92:12 - React doesn't know these are children.
92:14 - This is something that is, I designed it,
92:16 - my custom React, I made it up.
92:19 - So whenever you made it up,
92:20 - how can I react actually understand your language?
92:23 - So there is no way react actually understands your language.
92:26 - If you want to create an element like this,
92:28 - you have to understand the React language
92:30 - and have to give it a React language.
92:32 - So what is this React element?
92:34 - So I'll just go ahead and say const
92:38 - and actual React element,
92:42 - or I can just say a React element.
92:45 - The reason for saying this is
92:46 - because we already have this React element as variable.
92:49 - So I'll just call this one as React element.
92:52 - In order to properly actually convert this thing,
92:55 - this whole a thing or whatever the div thing is,
92:58 - you have to actually convert this whole thing
93:00 - using the React language.
93:02 - And how do you understand the React language?
93:03 - By importing React, that is it.
93:05 - And use a method that says create element.
93:08 - This is exactly how it does,
93:09 - just like we created our render element.
93:11 - This is how react actually create element.
93:13 - So whatever you return back,
93:14 - this whole JSX actually goes through the React element,
93:18 - and then it is converted into an object.
93:21 - And how does it look like?
93:22 - We saw that we gave this type and everything.
93:24 - No, React don't use it.
93:26 - React actually directly gave it as a tag.
93:28 - This is how literally you convert that.
93:30 - After that, you go ahead and inject an object.
93:32 - This object, second thing is always and always an object.
93:35 - The order here is also important.
93:37 - And then it actually loop through and say
93:39 - that all the attributes that you want to go through,
93:41 - you go ahead and inject those attributes.
93:44 - For example, google.com.
93:46 - I should have used my own website, but anyways.
93:49 - Target, and we use the target in the strings,
93:53 - of course, underscore blank.
93:56 - That's the second thing.
93:57 - And finally, the last thing that comes up
94:00 - is whatever needs to inject as a children.
94:02 - And that is where you actually says,
94:04 - click to visit Google.
94:09 - And that is why I named them specifically as childrens
94:12 - and props and everything.
94:13 - This is exactly what happens.
94:15 - The first thing is your element.
94:16 - The second thing is all the attributes.
94:17 - And the third thing is all the children
94:19 - that you actually inject.
94:20 - This is how literally React actually break it down.
94:23 - Once you have this one as a React element,
94:26 - let's go ahead and place it up here.
94:28 - That, hey, I now have a React element.
94:30 - Let's go back.
94:31 - And we can see that now there is no problem
94:34 - in saying that, hey, this is not uppercase, lowercase,
94:36 - because we are not using those elements now.
94:39 - Nothing is getting extracted from another element.
94:43 - Another element, this is literal HTML.
94:45 - This is what the React expects while rendering,
94:48 - because it is the object version of it.
94:51 - Quite a lot of stuff, which is fun stuff.
94:53 - Now, another thing which you might have seen
94:56 - is actually fun stuff.
94:58 - So let me just go ahead and say, let's roll back to app.js.
95:02 - So we already have this one.
95:03 - So we'll just inject this.
95:05 - And I'll say, hey, let's render app with a self-closing tag.
95:09 - And there we go.
95:10 - We have number of times VTAB.
95:11 - You might have noticed that what happens into this one
95:15 - is sometimes you go ahead and inject those variables.
95:19 - That is also super, super important.
95:22 - The way how we render the variables
95:25 - is not really too different from how we render anything
95:28 - in the JavaScript.
95:29 - You want to render an element,
95:31 - this is how you go ahead, do that.
95:33 - Now, here I can just go ahead and say two plus two,
95:35 - go back, and it gives me four.
95:37 - So it is actually converting everything,
95:39 - whatever I have as like this.
95:41 - Now, not only this, I can declare my own variables.
95:44 - If I go back onto the code part,
95:46 - I can go up here and say, hey, I want to have a username.
95:50 - And that username is literally my name.
95:53 - I can instead of two plus two, or in another variable,
95:55 - I can just go ahead and say that, hey,
95:57 - now I have this username.
96:00 - So this is, oh, by the way, wrong place.
96:02 - This is where it should be going up.
96:05 - So inside the function, why is it bothering me?
96:09 - Okay, too many bothers.
96:11 - No corresponding closing tag, you have a closing tag.
96:15 - Okay, probably some place I messed it up,
96:18 - const username, closing it, return, just like that.
96:22 - Okay, I'll hit command Z couple of times.
96:26 - Oh, my bad, we actually messed it up here.
96:29 - And this should be all happy now.
96:31 - Now we can place it back.
96:32 - So this is how we get our username,
96:34 - whatever the variable is, funny.
96:37 - And I go back and see I have this variable.
96:39 - So how does that actually works?
96:41 - And a lot of people wonder that,
96:42 - why cannot I just go ahead and use something like this
96:46 - if username equal, equal, maybe one more equal.
96:53 - And I go ahead and say Hitesh,
96:55 - then can I use my other stuff like Trinity operators here,
97:00 - just like that, there is a string.
97:02 - And you can see it, it's not working out.
97:04 - And it says, no, this one says yes.
97:07 - So why does this doesn't work and this works?
97:11 - Because the reason behind that is whatever you write,
97:14 - React actually goes inside each of your element,
97:16 - each of your element, HTML element,
97:19 - and extract these curly braces out of it.
97:21 - And whatever it extracts these curly braces,
97:24 - it actually puts one more object property here.
97:27 - And whatever you place it there,
97:28 - it actually literally moves it there.
97:30 - So for example, when you go ahead and say two plus two,
97:33 - that two plus two goes here.
97:34 - And since this is evaluated as JavaScript,
97:37 - that two plus two gets converted into actual value,
97:40 - which is four.
97:42 - But if you go ahead and write it like this,
97:44 - if, let's just bring it so that we can see that
97:46 - why it doesn't make sense.
97:48 - I copy this and instead of two plus two,
97:50 - if I go ahead and use this, this cannot be evaluated.
97:54 - So the only thing which I recommend everybody to understand
97:58 - is whatever the expression you write is,
98:01 - this is evaluated expression.
98:03 - It could be, it should be evaluated to something.
98:06 - So this something here is two plus two four,
98:08 - so that can be evaluated.
98:09 - And that is literally being taken and is being placed
98:12 - so that JavaScript engine can just take it as it is.
98:15 - When JavaScript takes it,
98:16 - this is expression which needs to be evaluated.
98:19 - This is not already evaluated.
98:21 - And this is, I know this is too much,
98:24 - but this is literally how it plays it as another property.
98:27 - And that's why you are able to see your username here.
98:30 - So it just refers to that as a variable.
98:32 - I'm just good in referencing the variable
98:34 - or doing some JavaScript-ish calculation,
98:37 - not your whole logic should be written here
98:39 - because it doesn't make sense.
98:40 - Properties should not have logics like this.
98:43 - This is literally just a property, list of properties.
98:46 - And that is one thing you need to understand.
98:48 - So this whole thing doesn't work.
98:50 - So you should not be doing it like that.
98:52 - If you go ahead and place it as empty, that is also okay.
98:56 - Sometimes you will see there are empty lines and stuff.
98:59 - Like for example, if you want some spacing
99:01 - or something between them, or maybe at some places,
99:04 - you'll see people literally just use it like this
99:06 - and then put an empty string here,
99:08 - just like that with the spaces.
99:09 - Because this is literally being taken up here
99:11 - and this space actually is taken like this.
99:15 - So yes, this is valid and you'll see a lot of bugs
99:18 - and things being reduced.
99:20 - If you understand this part of JSX, that is it.
99:23 - You understand a lot of React.
99:25 - This is a lot, I know,
99:27 - and I can totally understand and relate to you.
99:29 - But this portion of the code is really important for you
99:32 - to understand that how the JSX is actually evaluated,
99:36 - how React sees the thing,
99:37 - and never, never fascinate React
99:40 - as something which is magical.
99:42 - We already tried to building something.
99:43 - Of course, we didn't spend that much amount of time
99:46 - with the algorithms and chaining of these elements.
99:49 - But hey, we did a fantastic job
99:51 - in actually doing a lot of stuff.
99:53 - So this is where actually your foundation
99:56 - begins of the React, that hey,
99:57 - now I understand JavaScript, now I understand JSX,
100:00 - now I understand React.
100:01 - It's nothing more than that.
100:03 - All these H1, H2 tags are converted into object,
100:05 - react.createElement helps me to do that.
100:08 - And later on, I'll walk you through
100:09 - with even the source code of the React
100:11 - on the Facebook GitHub page.
100:12 - Yes, we'll do that as well later on.
100:14 - But I think this video gave you a lot of insight
100:17 - of how the custom React is being designed.
100:19 - And I know whenever I teach this,
100:21 - even in the early days of the React,
100:23 - in any offline online bootcamp,
100:24 - people just go, oh man, this is too much,
100:27 - but we loved it.
100:28 - So if you have enjoyed this, please do support me.
100:30 - Hit that target in the comment section.
100:32 - I would be super, super happy
100:33 - to have this kind of support from you.
100:35 - And again, videos will be coming soon,
100:37 - as constantly as they have been coming
100:39 - for years and years now.
100:41 - Let's go ahead and catch up in another video.
100:46 - Hey there, everyone.
100:47 - Hathaish here, and welcome back to another video
100:49 - in the series of React.js.
100:51 - So we are taking our time absorbing the React
100:53 - as much as possible.
100:55 - And now let's start the fundamental foundation
100:57 - of React itself.
100:59 - One of the core foundation of the React is state.
101:02 - Not the state management,
101:03 - that's a separate topic, we'll cover that,
101:05 - but the state.
101:06 - What do you mean by state?
101:07 - And to be honest, you don't need state in the React.
101:10 - So state is the way we first need to understand
101:13 - that where does the state comes into the picture?
101:15 - Should I learn it?
101:16 - Should I, or can I skip that?
101:18 - And right now I would say, yes, you can skip that.
101:20 - But as you will see the need,
101:21 - automatically you'll understand that,
101:23 - oh, this is why I should learn the state in the React.
101:26 - So let's go ahead and try to build a project,
101:28 - very basic project, and let's do the stuff with that.
101:31 - And I think hands-on practice is always the good idea.
101:34 - By the way, if you're watching it on my YouTube channel,
101:36 - I am expecting just a hundred comments
101:38 - under the comment section itself,
101:41 - just to provide support and to set a target for you.
101:43 - If you complete that, that's awesome.
101:45 - If not, hey, I need some support.
101:47 - I need some encouragement from your side as well.
101:49 - It's really difficult to just talk to camera
101:51 - and sit here all day in the room itself.
101:53 - So I deserve that, hopefully.
101:55 - If I, okay, let's go ahead and start with that.
101:59 - So first of all, we are on to VS Code, just like always.
102:04 - And I'll just start, I'll just actually close this one.
102:07 - I'll start another terminal
102:08 - and we'll be creating a fresh new project.
102:10 - By the way, all the projects are available
102:12 - on my GitHub repository.
102:13 - You can just search for React English,
102:16 - somewhat repository, it will be in the description.
102:18 - So it will be available there.
102:19 - So let's go ahead and try to have this one at latest.
102:24 - And this is just how you create the VTAP.
102:26 - And by the way, we have discussed quite a lot.
102:27 - VTAP, React app, doesn't really matter,
102:29 - whatever like suits you, you like that,
102:32 - you just go ahead and get started with that.
102:34 - I'll name this one as, this is second project.
102:36 - So I'll just call this one as zero to counter
102:38 - to keep a track of how many projects we are building
102:41 - in this one, whether small or big,
102:42 - that doesn't really matter.
102:44 - So I'll just go ahead, work with React.
102:46 - I want to go with JavaScript.
102:47 - I know a lot of you want to go into TypeScript,
102:50 - especially after seeing my entire playlist
102:52 - on this channel or free code cam,
102:53 - wherever you have seen that,
102:54 - entire playlist on TypeScript.
102:56 - I want to keep this entire React series
102:58 - much more accessible to everyone.
103:01 - I don't want too much of the prerequisite
103:03 - because already there is too much prerequisite
103:04 - of JavaScript in the React series.
103:07 - So I would just say that, hey, we are not using TypeScript,
103:09 - at least in the initial level.
103:11 - I will keep couple of videos at the very last of the series
103:14 - to just give you an idea of how you can use TypeScript
103:16 - with React, but for majority of the part,
103:18 - my goal is to make you familiarize
103:21 - with the concept and foundation of React
103:23 - and not to just bog you down with the TypeScript.
103:25 - That's the idea.
103:27 - So let's go ahead into zero two
103:30 - and I can just go ahead and say npm install.
103:32 - That is all what we need.
103:34 - And then we'll simply fire npm run dev to start this.
103:38 - If my internet is decently fast, I hope so.
103:42 - There is not too much of dependencies.
103:43 - That's a good thing.
103:45 - Something, something has happened to my internet.
103:47 - It's usually not this slow.
103:49 - Anyways, let's go ahead and say npm run dev.
103:53 - And by the way, we have already seen that
103:55 - how we can actually see that which command runs all of that
103:58 - via the package.json.
103:59 - This is how it looks like, which is good, which is good.
104:02 - Going back into zero two counter
104:04 - and we'll see inside the source that we have app.jsx.
104:09 - This is the file where we are interested in mostly.
104:11 - And we'll try to build something of our own
104:14 - into this entire application.
104:16 - So let's just remove everything.
104:18 - We'll just keep the bare minimum basic.
104:20 - And let's see that can we build something of our own?
104:23 - So let's just go ahead and have a simple H1.
104:26 - It says React course with Hitesh and that's it.
104:34 - And probably there is another H1 here or probably H2
104:39 - and I'll say a counter value and then nothing.
104:43 - This is exactly what we want to do.
104:45 - And then I'll probably have a button
104:48 - and that button does nothing.
104:49 - It just says add value.
104:51 - And there is another button which just says remove value.
104:56 - And for some reason, I don't know,
104:58 - I want to inject some values in these buttons as well.
105:01 - And there is one more.
105:02 - I'll just go ahead and say, hey, there is a paragraph
105:04 - which says footer, which will also get some value.
105:08 - Can we first go ahead and just remove everything
105:11 - from this file just like we did in the last one
105:14 - that hey, I'm not interested in any one of that.
105:16 - I just want to see how my app looks like.
105:18 - So there we go.
105:20 - Right now we can add some more values to it
105:22 - or probably we can inject some of the spacing as well.
105:24 - By the way, here's a fun thing.
105:26 - I can just go ahead and add like this
105:28 - and notice here, it adds a space.
105:30 - If you know how the JSX are being converted,
105:32 - this shouldn't really bother you.
105:34 - But right now there are buttons.
105:36 - They do nothing, footer, nothing.
105:37 - And what I want to do is I want to have a variable
105:41 - and that variable should be shown all the places.
105:43 - No big deal.
105:44 - I can come here and I can declare a variable.
105:47 - Let's just say we will have a counter.
105:49 - Since this will change,
105:50 - I'll start with the value 15, 20, whatever you like.
105:53 - This is my counter.
105:55 - And I know already that I can just use these curly braces
105:58 - to have my counter.
106:00 - This is known as variable injection.
106:02 - No fancy thing.
106:04 - And I also want to inject it here.
106:06 - So I'll just go ahead and say counter.
106:09 - And I'll also come here in footer
106:12 - and I'll inject it here and I'll say counter.
106:14 - So this is a common thing, which I shared you
106:17 - in the story of React, how it actually got up.
106:20 - So I can see it's 15, it's 15, it's 15 everywhere.
106:23 - So first of all, notice and even appreciate
106:27 - that you don't have to say document.getElement by ID
106:30 - and then inject that, append that, add value,
106:33 - append HTML, nothing, nothing like that.
106:36 - I can just use literally variable.
106:37 - So I'm more focused on the programming side of it
106:39 - than just attaching things to the node list in my document.
106:44 - So that's one advantage here.
106:46 - Now, next thing is I want to have a method
106:49 - that when I click on the button, it adds the value.
106:52 - Cool, you can have that.
106:53 - Pretty simple, there is nothing Reactish in that.
106:56 - It's just simple JavaScript.
106:57 - So I can just go ahead and say, hey, I'll use an onClick.
107:00 - This onClick will say add a value.
107:02 - Since this is a method, this needs to be declared.
107:05 - So we can just go ahead, use classic function
107:07 - or arrow function, totally up to you,
107:09 - not going to crash your app.
107:11 - So I'll just say add value
107:13 - and add value will be an arrow function in my case.
107:16 - And what it does, it takes the counter
107:19 - and it adds the value to it.
107:20 - So I'll just go ahead and say plus one and that is all.
107:23 - Now on top of this,
107:25 - let's go ahead and try to do a console log of the counter
107:29 - whenever I add a value.
107:31 - I'll just go ahead and say, let's console log here itself.
107:36 - I'll say console log and I want to have the value of counter.
107:39 - That is it.
107:40 - So I'll save this, go back
107:42 - and I'll open up my inspect and console
107:45 - so that I can see what's happening there.
107:47 - So the value is 15 and I simply click on add value
107:50 - and it says 15.
107:51 - I again click on this and it says two time it's 15.
107:55 - Very interesting.
107:57 - So if I go back,
107:58 - I see that the counter plus one doesn't increase it.
108:01 - Why?
108:02 - Because I didn't save it anywhere.
108:03 - So it should be something like this.
108:05 - Counter is equals to counter plus one.
108:07 - So I'm updating the value of counter
108:09 - by adding one to the existing value.
108:11 - That's good.
108:12 - Let's go ahead and just facilitate it again.
108:15 - Refresh and remove everything.
108:17 - And I say add value.
108:18 - I get 16, add value 17, add value 18.
108:22 - Okay.
108:23 - So I'm able to do almost everything in so far,
108:26 - whatever is required in the JavaScript as well.
108:28 - I have my variable.
108:30 - I can add value to it.
108:32 - I can similarly remove the values,
108:33 - whatever everything that JavaScript is telling me,
108:35 - I can do that.
108:37 - Except from this, what's coming up next.
108:39 - Now the next target in front of us is that,
108:42 - hey, you have this, great, good.
108:43 - We appreciate that.
108:45 - But now we want this new value to be updated here as well.
108:48 - Now this brings something to your mind that,
108:50 - hey, how does this work?
108:53 - Because technically if we are updating this variable,
108:57 - this should be updated here as well.
108:59 - And here as well, and here as well.
109:02 - Why is it not working?
109:04 - Because I'm pretty sure on 100%
109:06 - that the value is getting updated.
109:07 - I'm seeing this and I can add the value 19,
109:10 - but this is not getting updated here.
109:13 - And this is my friends, where it comes to the React.
109:16 - React, this is exactly where React comes into the picture.
109:19 - React is a library which actually takes the control from you
109:22 - and gives you that, hey, this is now the mechanism
109:25 - of how you're going to update your UI.
109:27 - Remember that is why we call React as a UI library,
109:31 - majorly, because it controls how you're going to take care
109:34 - of the UI itself, not your JavaScript,
109:37 - not how you're going to take the data from the database,
109:40 - but how you're going to display the things on the website
109:42 - and how things are going to be getting updated.
109:45 - And this is exactly where React actually tells you
109:47 - that you know what, you cannot go ahead
109:50 - and just update things like that.
109:52 - I will provide you a mechanism.
109:54 - You're going to follow that mechanism.
109:56 - And by which you are going to update everything
109:58 - and anything that you want.
110:00 - And exactly we have to follow the things.
110:03 - React came up with the concept known as a state.
110:05 - And state is a unique thing in the React,
110:08 - which actually simply just is getting constantly monitored
110:12 - and any change in the state re-renders the UI on the web.
110:17 - And this is what the state is being designed for.
110:19 - Any change in the state will re-render the webpage.
110:22 - That's it, told you, it's really, really simple.
110:25 - So we cannot just go ahead and say, hey,
110:26 - let counter equals to 15.
110:27 - There is a way how you do it in the React.
110:30 - And once you understand this way once, and that's it,
110:32 - you will be able to do it every single time.
110:35 - We can already see that in the VIT,
110:37 - there is already an import statement of use a stat,
110:40 - use a state from the React.
110:41 - And this is exactly the state that comes up.
110:44 - Now, let's just go ahead and say const
110:46 - and we want to use this state.
110:48 - So the way how you say it is simply say,
110:50 - use state and the parenthesis.
110:52 - I'll tell you later on, these are known as hooks
110:55 - and how you can design your own custom hooks as well.
110:57 - Yes, we'll be designing a full fledged.
111:00 - But the whole idea is, this is a method.
111:02 - What does this method returns to you?
111:04 - And it's pretty simple to extract value from it.
111:06 - It returns you something in the format of array.
111:09 - The first thing is actually the variable,
111:12 - whatever you want to call it, it's up to you.
111:14 - And the second is a method.
111:15 - And there is no hard and fast rule
111:17 - that you always should call it as counter,
111:19 - then set counter number, then set number.
111:21 - It just is a convention.
111:23 - Feel free to call it as Superman,
111:24 - and this one has Spiderman.
111:25 - Nobody is going to stop you
111:26 - and your code is not going to go bonkers.
111:29 - Really basic.
111:30 - Now, just introducing this and saying it as counter,
111:34 - by the way, I could have called this one as count
111:36 - or I could have called this one as Hitesh.
111:38 - It would have still worked.
111:39 - Again, different Hitesh and set counter.
111:41 - They are also linked.
111:43 - Always remember the one thing,
111:44 - that the first value that you see here,
111:47 - it's actually a variable.
111:48 - And the second value that you see here is a function.
111:51 - Yes, you can call it method as well.
111:53 - I won't harm you for that.
111:56 - I won't be failing you in the interviews as well,
111:58 - but hey, remember this is a variable.
112:01 - This is a method.
112:03 - Okay, moving further.
112:05 - Just because the name is counter,
112:06 - I cannot just go ahead and say counter equals plus one.
112:09 - This is not going to work still.
112:11 - I can save this, show you that,
112:13 - hey, this is all good, refresh it,
112:15 - and all refresh, good.
112:17 - And I can just say add value.
112:18 - And now even this thing is gone.
112:20 - So what happened?
112:22 - What just happened?
112:23 - How can this value actually go away?
112:25 - Let's look at the code, see the error.
112:27 - So it says, hey, const variable and stuff.
112:29 - So what is happening?
112:30 - What is happening?
112:32 - Simply because this is a const,
112:34 - you might be thinking, hey, this is a constant.
112:35 - That's why it's not able to add the value.
112:37 - Okay, let's just go ahead and try this.
112:39 - If that works, let, and there we go.
112:42 - If I go back again and hit a refresh,
112:44 - I still don't see the numbers.
112:46 - It says, hey, that const error is gone.
112:48 - Now even we don't have any error.
112:50 - So the problem is not with the let or const.
112:52 - You can still keep it const,
112:53 - because every time you update the value,
112:55 - a new state is given to you.
112:56 - Okay, how do I update this whole thing?
112:59 - So this whole thing, updation is pretty simple.
113:02 - All you do in this one is just whatever you want to update,
113:05 - you update it via the method.
113:07 - So once you have the method, for example,
113:09 - I remove everything from here in the add value,
113:11 - you call this method set counter.
113:14 - The set counter method is responsible
113:16 - for updating its nearby,
113:18 - or I know nearby is not a good word,
113:20 - but in the array, there is only one nearby,
113:22 - which is a counter.
113:23 - So it's brother, the brother is a good word,
113:26 - it's brother here.
113:28 - And how do you do that?
113:29 - You just pass the updated value.
113:30 - So in this case, I can just go ahead and say,
113:32 - hey, I want to say counter,
113:33 - and I want to add one to it.
113:35 - Okay, you just do that.
113:36 - Now what happens when I do this?
113:38 - If I go back and hit a refresh,
113:40 - then notice here it says,
113:41 - react to the counter value is gone, nothing, nothing.
113:45 - If I go ahead and say add value, it says none.
113:47 - Why is that?
113:48 - Because there is one more portion of the thing
113:50 - which you need to learn.
113:51 - Notice here, the user state right now
113:53 - has these parentheses.
113:55 - These parentheses define what should be the initial value
113:58 - because it's available.
113:59 - You are defining a variable,
114:01 - something needs to go into it.
114:02 - So obviously when there is nothing,
114:04 - so it's undefined and undefined, you add one to it,
114:08 - you don't get the desired result.
114:10 - So you can start it with a zero,
114:12 - or in this case, we started our variable with 15,
114:14 - it's up to you, whatever you want to start,
114:15 - I'll start with 15.
114:17 - And now I see the 15 again here.
114:19 - Now again, by the way, in case just for the info,
114:22 - it doesn't need to be variable like numbers here.
114:24 - You can just go ahead and start with true.
114:26 - You can start with an empty array, a filled array, an object.
114:30 - You can even put methods into it, which is not a good idea,
114:33 - but you can, nobody's stopping you from that.
114:35 - I'll start with 15.
114:37 - Okay, now things are looking like a little bit better.
114:40 - I can see React course with a page 15, 15, 15 everywhere.
114:44 - And if I even add value to it, it gets updated here.
114:48 - So goal achieved.
114:49 - So we have learned here that there is a way,
114:52 - there is a mechanism, there is a flow of data
114:54 - that React is controlling.
114:55 - And what we can appreciate here is
114:57 - I can just click on one button and it updates the value
115:00 - all at all the three places, I don't have to worry at all.
115:03 - So that is what your state is.
115:05 - There is only a single source of truth.
115:07 - There is a single state and everybody is consulting
115:10 - and is looking forward to this state only.
115:12 - That's why everybody gets updated
115:14 - and hence React solved the problem
115:15 - of the ghost messages in the Facebook.
115:19 - That is it, this is the whole gist of it.
115:21 - But this actually, although the next portion
115:24 - of this section, I usually, first let's cover up.
115:27 - Let's cover up the decrease value part as well
115:29 - because there's a button here as well.
115:30 - So it would be fun to actually go ahead
115:33 - and work on with it.
115:35 - So I'll just say click and I'll say,
115:36 - hey, there will be a new method which will be remove a value
115:40 - and that needs to be a method as well.
115:42 - And by the way, you can use the classic functions as well.
115:45 - And this will be remove value,
115:48 - which will be in our case an arrow functions.
115:51 - So there we go.
115:51 - And we can use the same state.
115:53 - So same method because I cannot just go ahead
115:55 - and say counter plus one or minus one.
115:57 - This method will be responsible for having this.
116:00 - By the way, you can also do something like this.
116:02 - Hey, counter is going to be equal to counter minus one,
116:07 - oops, counter minus one inconsistency.
116:11 - And then I can go ahead and pass up
116:12 - the updated value of counter.
116:14 - You can name this one as a new counter as well
116:17 - and you can pass on that as well.
116:19 - No big deal, just style of writing the code.
116:21 - And we can just go ahead and say counter minus one.
116:24 - The reason for writing this is
116:25 - because there's something interesting I want to show you.
116:28 - I go back and I say remove value.
116:29 - It removes the value at all places, it adds the value.
116:32 - So there's this great.
116:33 - Now this next portion of the video,
116:35 - I usually go ahead and take this as kind of exercise
116:39 - for interviews and stuff, but I'll just throw it away.
116:41 - Okay, I go ahead and duplicate this line a couple of times.
116:45 - What do you think is the expected output here?
116:48 - This is a classic interview react question, which says,
116:50 - hey, now since it is getting started on 15,
116:53 - I'm running the function add value.
116:55 - So it should be after 15, it should be 16, 17, 18 and 19.
117:00 - But when you actually go ahead and see add value,
117:02 - it just adds 16 and 17 and 18.
117:05 - This is something which has to do
117:07 - with the concept of batching.
117:08 - React doesn't actually send the things immediately
117:11 - when you actually perform any action or state.
117:14 - It actually bundles everything together.
117:16 - We'll go through into the algorithm behind this,
117:19 - known as reconciliation, how that's being done.
117:21 - But these are fancy words,
117:22 - we'll throw them around a little bit later.
117:24 - So what React is doing,
117:25 - it's actually taking all this batch
117:28 - and it's saying that, hey,
117:29 - there's only one method you're firing up
117:30 - and it has just one operation to be done as counter,
117:33 - which is increasing.
117:34 - So this batching actually gives you a problem.
117:36 - If you want to avoid the batching that, hey,
117:38 - this is not the exactly same value I'm taking
117:41 - and I'm updating one because this is right now
117:42 - just the same value I'm taking it.
117:44 - There is a way how you can actually avoid that
117:47 - or actually maybe this is the situation you want to do that.
117:50 - I want to click it.
117:51 - I want to update just four to it,
117:53 - but instead of adding four to it,
117:54 - I want to do it iterationally.
117:56 - And there will be situations, not exactly like this,
117:58 - but there will be situation.
117:59 - In that case, what you can do is
118:01 - there is a callback given to you in this method.
118:04 - So since this is a method,
118:05 - this actually accepts a callback
118:07 - and this is how your callback looks like.
118:09 - And in this, you automatically get the access
118:12 - of the previous counter.
118:13 - So I'll just for the understanding purpose,
118:15 - I'll call this one as previous counter.
118:17 - And now either you can return it
118:19 - or if it's just one liner, you can just go ahead and say,
118:21 - hey, now my pref counter will add a value of one to it.
118:25 - Yeah, this is now a game changer
118:27 - because now since you're using a callback,
118:29 - that means there is a guarantee the callback needs to finish,
118:32 - your state will be returning the values
118:35 - and whatever you call it here,
118:36 - pref counter, counter doesn't really matter.
118:39 - It's just a callback.
118:40 - Here, you just get the access of the updated state value.
118:43 - That is it.
118:44 - So I can literally go ahead and copy this
118:48 - and I can just have a multiple cursors here.
118:50 - I can just go back here and paste it.
118:53 - Now you have just changed how things will be.
118:55 - Now these cannot be batched
118:57 - because they are dependent on the previous values.
118:59 - They have to extract the previous value.
119:01 - Now, if I go ahead and add the value,
119:03 - notice here now they are jumping up in the ratio,
119:06 - in the update steps of four.
119:07 - So this is really sometimes is given to you,
119:10 - sometimes in today's day, just create a counter for me.
119:13 - You do that quickly and he does something like this
119:15 - or something tricky, sneaky like that.
119:17 - And if you don't know the foundation of the React,
119:19 - you obviously will get into the trouble,
119:21 - but not after watching my video for sure.
119:23 - So go ahead and try to get the similar situation
119:26 - and scenario in this one.
119:28 - And I am pretty sure that now at this point of time,
119:31 - you truly, truly understand that why we have state,
119:34 - what advantage state gives us,
119:36 - and is there any real world use case
119:40 - for the state or not?
119:40 - Are we just learning it for the sake of fanciness?
119:43 - No, it's not.
119:44 - We are actually learning it because it's important for us.
119:47 - So now that you understand state,
119:48 - told you it's not really difficult when you're with me,
119:51 - React is just a breeze.
119:53 - Let's go ahead and move on to the next video
119:54 - where I'll walk you through with another project,
119:56 - another fun, another concept.
119:58 - So again, just go ahead,
120:00 - if you're watching it on my channel itself,
120:02 - go ahead and share this video and the comments.
120:05 - One just hurt or like motivates me a lot.
120:08 - So let's catch up in the next video.
120:13 - This is a theoretical video.
120:15 - And I know a lot of people don't like theoretical videos,
120:17 - but this is an essential part of understanding the React
120:20 - and to explore things on your own.
120:22 - So I am pretty sure those who really appreciate
120:24 - the under the hood working of the things
120:26 - and they want to really go in the engineering side
120:28 - of the thing, they will appreciate it.
120:30 - Those who just want to learn superficially,
120:32 - they will not appreciate.
120:34 - So the target for this video is just 200 comments.
120:36 - I'm pretty sure you will help me in achieving a confidence
120:39 - as well as engagement that yes,
120:42 - we are actually watching the videos.
120:43 - You are not just literally talking to camera in a old room.
120:47 - We are actually with you learning together.
120:49 - So if you have any issues, by the way,
120:51 - just look at a poster in the comment section.
120:53 - I'm pretty active there.
120:54 - All right, so in this video,
120:56 - I'll walk you through with a few concepts of virtual DOM,
120:59 - reconciliation, a bunch of fiber and all those stuffs.
121:03 - Before that, let me set the stage for you.
121:05 - So the idea behind the React is pretty simple
121:08 - that once you actually are in the JavaScript,
121:10 - you always have to go get element by ID and whatnot.
121:13 - And whenever there is any change,
121:15 - what your browser does,
121:16 - it actually re renders the entire page.
121:18 - So your painting of the page is entirely being repainted.
121:22 - Your DOM, CSSOM, everything is reconstructed.
121:25 - This is a painful process,
121:26 - especially for the large scale application.
121:29 - What React does behind the scene,
121:30 - it actually creates its own virtual mimic of the DOM.
121:35 - So however the DOM looks like,
121:36 - it actually tries to mimic it,
121:38 - all those nodes, everything.
121:39 - And whenever there's a slight change in the node,
121:42 - it actually then tries to compare with the original DOM.
121:45 - And only the thing which needs an update,
121:47 - it just gives an update of that.
121:49 - So it's really a great remarkable thing
121:53 - of how things are done in the React.
121:55 - But this mimicking of the virtual DOM, of the real DOM,
122:00 - this mimicking part is known as virtual DOM,
122:02 - but how good it is and how good it is right now,
122:05 - that can be understood by the latest version of the React.
122:08 - So a lot of things.
122:09 - Okay, by the way, before we get started,
122:11 - let me share the screen.
122:12 - So by the way, this is the Facebook GitHub repository,
122:16 - and this is where they have the React.
122:18 - So by the way, you can go into the Facebook.
122:19 - Of course, their pin repositories React,
122:22 - obviously what else it would be.
122:23 - You can go into the React,
122:25 - and then you can actually go into the packages
122:27 - and see everything which is there listed in the React.
122:30 - I'll just move it a little bit here,
122:32 - so that you can see it nicely.
122:34 - And I'll actually zoom this a tiny bit,
122:37 - so that you can see what's happening
122:38 - and where it is happening.
122:39 - So on the left hand side,
122:40 - you will see that there's so much that is given to you.
122:43 - Even your React DOM is here.
122:44 - And if you'll click on this,
122:46 - you'll be actually taken into the source.
122:48 - By the way, I'll just zoom out a little bit.
122:50 - Yeah, now it's better.
122:52 - So you can go into this one where we are.
122:55 - Here is the React DOM.
122:57 - And inside the source,
122:58 - I can check out that,
122:59 - let's just say I want to study the client side,
123:01 - how does the React behave.
123:02 - There is a DOM legacy, which we don't want to use.
123:05 - React root, how does it work?
123:07 - React DOM, how does it work?
123:08 - So you can just go ahead.
123:09 - Even if you don't understand much,
123:11 - you will get introduced to the new terminologies,
123:13 - like there is a container,
123:15 - there is something known as hydrate root options,
123:17 - there is a create root options.
123:19 - And maybe eventually, as you'll go through,
123:21 - you will understand a lot of this code.
123:23 - And this is how people contribute
123:24 - in the open source as well,
123:25 - which I am very active in the community.
123:27 - So hydrate root and all these things,
123:29 - or at least you can ask your GPT
123:30 - like what these are, I want to understand them.
123:33 - Okay, moving on, let me just get this a little bit.
123:37 - Don't want to go like this.
123:41 - Okay, let's go back onto the source.
123:43 - Okay, I want it not to be like this.
123:47 - Okay, not like that.
123:49 - I wanted the entire full view.
123:50 - Yeah, there we go.
123:52 - A little difficult,
123:53 - so I'll probably move my entire thing here.
123:55 - So that's actually better and visible.
123:57 - It's really small.
123:58 - But videos are in 4K, by the way, you can change it.
124:01 - Okay, one more package I would like to introduce you
124:03 - a little bit, not too much, is React Core Packer.
124:05 - So this is the React Core.
124:07 - You can expand this and see there's a source,
124:09 - expand this, and this is where you can find a lot of things.
124:12 - How does the React work?
124:14 - How does the cache work?
124:15 - Children's and whatnots.
124:16 - And even there are some other things like hooks and stuff
124:20 - that you can find, like React hooks, we talk about that.
124:22 - And here, you can actually see that how does a hook work?
124:25 - So whenever it says something like useState,
124:28 - you'll find that, you'll find that.
124:30 - I'll show you.
124:31 - There is a useContext here.
124:32 - And there will be a useContext.
124:37 - And then there is a useEffect hook here.
124:40 - There is a useRef here.
124:42 - Use insertionEffect, probably you have never heard about it.
124:45 - Use layoutEffect, callback, useMemo, we'll use some of them.
124:49 - So as you can see, there is almost every hook.
124:51 - We'll be also using useID once in the entire series.
124:54 - So you got the idea that there is everything written here.
124:58 - Probably right now, we don't understand it,
124:59 - but it's a good idea to at least see that,
125:01 - OK, things exist there.
125:02 - I'm not the only one who's just mimicking here,
125:05 - things stuff.
125:06 - Also, you can go into the JSX.
125:07 - The things which we studied in the JSX
125:09 - actually comes from here, this part here.
125:11 - In the JSX element, if you go into this one,
125:13 - you'll see that everything which I talked about
125:15 - actually comes from here.
125:17 - So if you scroll a little bit, you'll find that
125:19 - here are all the things.
125:21 - So let me zoom this.
125:24 - So when I say the React element to you,
125:26 - this element actually takes these parameters of type,
125:29 - key, ref, and props, all of these things.
125:31 - So I was not making up things in the thin air,
125:33 - they actually do exist.
125:35 - All right.
125:36 - So this is the first portion of the theory
125:38 - that I wanted to introduce you a little bit
125:40 - with the core React itself.
125:42 - How does that looks like?
125:44 - So I'll just go on to the 100% back again.
125:46 - But there is one more thing.
125:47 - If you'll search for the React fiber on the Google,
125:50 - this is usually for me is the first one here,
125:52 - because I don't think so I have actually recommended
125:55 - in any bootcamp anything more than this.
125:58 - So this is a big shout out to a Cadlite.
126:03 - I don't know how to spell it,
126:05 - but he wrote it so well that I don't even want
126:07 - to fork it or something.
126:08 - And this is so long, it's seven years ago.
126:10 - I'm still using this.
126:11 - This was constantly updated obviously, but here's something.
126:15 - So this is the portion where we dive into
126:17 - the React architecture.
126:18 - How does it work?
126:19 - So it's a React fiber previously, not previously,
126:22 - but yeah, the React core algorithm got changed
126:24 - and this is the whole study we'll be doing.
126:26 - Some of the things it's really important
126:28 - that you pay attention on to this one.
126:29 - So I'll just go through with that.
126:31 - I'll zoom it even a tiny bit more.
126:33 - Yeah, tiny bit more.
126:34 - Now it's much more understandable.
126:36 - Let's go up here.
126:37 - So all it says is the React fiber is an ongoing
126:40 - implementation of React's core algorithm.
126:42 - Spoiler alert, it's not an ongoing.
126:45 - It was already introduced in a couple of version ago,
126:48 - but you saw it first time.
126:49 - Again, the goal of the React fiber is to increase
126:53 - the suitability for area like animation.
126:54 - So what's the problem with animation?
126:56 - Animation happens back to back and we saw it just there
126:59 - in the user state that it's not possible for us
127:02 - to do back to back updates.
127:03 - React uses something known as batching
127:05 - and once the batch is gone, it's gone.
127:07 - I cannot do anything in the core algorithm.
127:09 - But now we can see its headline feature
127:12 - is incremental rendering.
127:14 - So animations, smooth animations.
127:16 - The ability to split the rendering work into chunks
127:18 - and spread it over multiple frames.
127:21 - So it's not like previously React used to just do things
127:24 - instantaneously, but now they actually wait
127:26 - for algorithm-ish time.
127:28 - By the term algorithm-ish time, I mean.
127:30 - They actually decided for ourselves that I'm not gonna
127:32 - do update right now, I'll send the batch eventually
127:35 - to do multiple updates at the same time.
127:37 - So it gives us the ability to pause, abort, and reuse
127:40 - the work as new updates come in or not to just give that.
127:43 - So it's a concurrency primitive, so this is best here.
127:48 - Okay, this is the first part.
127:49 - This is the introduction of why the core algorithm
127:52 - got changed.
127:53 - Now, Fiverr introduces several novel concept.
127:55 - We will talk about them, some of them.
127:57 - I'll give you a brief overview of that.
127:59 - But again, this is again, big shout out to this one.
128:02 - So for this, you need to have a basic understanding
128:05 - of the React, which you have now, you have seen the videos.
128:08 - So it says React core components element instances.
128:11 - We have seen that already.
128:12 - Reconciliation, this is something really nice,
128:15 - but they cover it in this documentation itself.
128:17 - So I'll walk you through with that.
128:18 - React basic theory concept and React design principle.
128:22 - So I'll walk you through with that.
128:23 - So first of all, what is reconciliation?
128:25 - Being asked in the interview quite a lot.
128:27 - The algorithm React uses to diff one tree with another.
128:31 - And by the term diff one tree with another means
128:34 - original DOM, my virtual DOM, are they same?
128:37 - And if this DOM gets updated,
128:38 - is this DOM is following the principle.
128:40 - So that's your diffing algorithm
128:42 - known as diff one tree with another.
128:43 - So we are comparing two trees of the node list.
128:47 - To determine which part needs to be changed.
128:50 - Yeah, literally what I just said.
128:52 - So update, a change in the data used to render a React app.
128:56 - Usually the result of set state,
128:58 - eventually results are in the re-render.
129:01 - So as it says, if you want to re-render the app,
129:04 - usually it's the set state, which governs the thing.
129:07 - So that's why we use use state,
129:09 - because ultimately the method which actually does all of this
129:12 - is use state, we just saw that.
129:13 - The central idea of the React API is to think of the updates
129:16 - as they cause to app re-render.
129:18 - So whole picture is all about re-rendering.
129:20 - So how can we get into from state of A to B,
129:23 - then B to C and C to A and so on.
129:25 - So how can we move into different transition
129:27 - of all of that?
129:28 - Okay, actually re-rendering the entire app on each change
129:33 - only works for the most trivial apps in real world apps.
129:36 - It's, so again, we can actually skip this part
129:39 - because it's all it's saying is
129:40 - we don't want to re-render the entire app.
129:43 - We want the performance, we want to cost to be coming up
129:45 - and that whole this process is known as reconciliation.
129:48 - So it's kind of a re-walkthrough of the reconciliation.
129:51 - I have gone through with this one probably 20, 30 times.
129:54 - So I know every inch of it.
129:56 - So sorry if I'm jumping something some places around.
130:00 - Okay, so by the way, this whole thing is again
130:01 - reconciliation and different things.
130:04 - Reconciliation versus rendering.
130:05 - So again, this is an interesting paragraph.
130:07 - The DOM is just one of the rendering environment
130:10 - React can render to.
130:11 - The other major target being a native iOS and Android,
130:14 - I told you in the earlier as well
130:16 - that React is one implementation on the web
130:18 - is known as React DOM, but more things exist
130:21 - like React Native and React for 3D renderings
130:23 - or stuff like that.
130:24 - The reason it can support so many target
130:26 - because React is designed so that reconciliation
130:29 - and re-renderings are separate phases.
130:32 - So yeah, that is why.
130:33 - I hope now if anybody's asked you,
130:35 - I think you have great information here.
130:38 - Okay, moving on.
130:39 - Now what we have is we don't want to go
130:41 - into the React design principles and key points.
130:43 - Here is where we want to study more.
130:45 - What is fiber?
130:47 - We are about to discuss
130:48 - the heart of React fibers architecture.
130:50 - Fibers are much lower level abstraction
130:53 - than application development.
130:54 - Typically think about it.
130:55 - If you find yourself frustrated
130:57 - in your attempts to understand it, don't feel discouraged.
131:00 - So if this best article on the internet says discouraged,
131:04 - you don't need to fail that.
131:05 - I also understood it after going repetition
131:07 - and repetition after it.
131:09 - Keep trying it eventually makes sense.
131:10 - Yeah, same happened with me.
131:12 - Okay, here we go.
131:13 - So here are the key points.
131:14 - I'll just give you a brief summary of it
131:16 - and then that's it.
131:17 - We'll call it a day.
131:18 - Pause work and come back later to it.
131:20 - So one of the advantage of this
131:21 - is sometimes you are back to back firing the updates.
131:26 - So sometimes let's just say you updated A to B
131:29 - and same variable to C,
131:31 - there was no point of updating it to B
131:33 - because eventually it is supposed to become the C.
131:35 - So if you pause your work, come back here
131:38 - without updating it, probably we can save some of our time
131:42 - and updating it to B.
131:43 - We can directly update it to C.
131:45 - So that's what it says.
131:45 - Pause your work and come back to it later.
131:47 - So yeah, literally.
131:49 - Assign priorities to different type of work.
131:51 - So we can just say that,
131:52 - hey, maybe this animation is going on,
131:56 - but this button also needs an update,
131:57 - but this button might take few micro milliseconds later on
132:01 - as well, but this animation needs
132:02 - to be constantly re-rendering.
132:04 - So that's why it says we can assign priorities
132:06 - to different works.
132:07 - Reuse the previously completed work.
132:09 - So we can actually take estates and stuff like that.
132:12 - Abort work if no longer needed.
132:14 - So again, example, if A gets converted to B
132:16 - and B finally gets converted to back into A
132:19 - within fractions of second,
132:21 - then there is no point of updating it to the user.
132:23 - User don't want to see that.
132:24 - User want to see the ultimate truth.
132:25 - So there is no point of showing him the state
132:28 - if you want to do so.
132:29 - So again, now it comes up as a structure of the fiber.
132:32 - Fiber always treat them like fiber,
132:34 - just like your muscles have fibers.
132:36 - Everything is attached to each other.
132:38 - That's like the fiber.
132:39 - Everything is getting controlled and stuff like that.
132:42 - It's almost like everything is in the fiber-ish term
132:44 - in the world of React.
132:46 - Okay, it further goes into the return statement,
132:49 - how it does and all of that.
132:50 - You don't want to go into that.
132:51 - Future section, you can just try that.
132:53 - But again, there is no need of it.
132:55 - If you want to watch,
132:56 - you can just watch this one 2016, pretty old.
132:59 - But again, this is whole thing which I wanted to share.
133:02 - I know this is a little bit probably boring part
133:05 - of the entire series,
133:06 - but these are some foundational algorithm
133:09 - which I wanted you to learn from the direct resources
133:11 - and repository of React.
133:12 - Not from me, not from anybody else.
133:14 - Just go dive into that.
133:16 - So at least you are not afraid of that one.
133:18 - Okay, a few things.
133:19 - We now know reconciliation.
133:20 - We now know a lot about the React virtual DOM.
133:23 - We also know a lot about the React fiber.
133:25 - And we also know a lot about the batching of the update
133:27 - and all these things.
133:28 - These will be foundational and very helpful
133:30 - when you'll be learning Next.js as well,
133:33 - on which I also have a course.
133:34 - Happened to be, I'm producing a lot of them.
133:37 - So I think now you have a core foundational understanding
133:39 - of it.
133:40 - And later on, we'll definitely talk more
133:42 - about these documentation,
133:43 - but I think that is enough.
133:45 - That is enough for you.
133:46 - In the next video, we'll jump into the code part
133:48 - and the course part itself,
133:49 - and you'll learn more on that.
133:51 - Okay, that's it for this video,
133:52 - and let's catch up in the next one.
133:56 - Hey there, folks.
133:57 - How are you doing?
133:58 - I'm pretty sure you're doing good.
134:00 - Hey there, everyone.
134:01 - My name is Hitesh, and let's go ahead and get started
134:03 - and continue with our React series.
134:05 - So we are done already with a couple of topics,
134:09 - and especially the response that you have given me
134:11 - on the videos like state, what is a state,
134:14 - how does we work it,
134:15 - and some topics that we discussed about like virtual DOM,
134:18 - reconciliation, fiber, pretty interesting topic.
134:21 - Little bit theoretical,
134:21 - but very important and interesting one.
134:24 - In this video, we'll take down another such topic,
134:27 - which I always begin with, why do you need it?
134:30 - You don't need it at the very first place
134:32 - until unless you understand the possible need
134:35 - of the subject, then only you should learn.
134:36 - So that's the props for us,
134:38 - and we'll go through and understand that.
134:40 - Apart from that, there is kind of industry trend these days
134:43 - to use something known as Tailwind CSS.
134:46 - This is not going to be a dedicated class
134:48 - about the Tailwind CSS,
134:50 - but still we need to learn to configure it with the React
134:53 - so that we can utilize it,
134:54 - and it's not really that heavy.
134:56 - It's quite understandable,
134:58 - and we will be doing that on the go as well.
135:00 - So without a further ado, let's go ahead and get started,
135:03 - and let's understand what is the need of the prop
135:05 - and why the props are there.
135:07 - By the way, we will also learn a little bit about components
135:10 - and building components in the React in this video.
135:12 - And let me just announce this first
135:15 - that components are no proprietary of the React itself.
135:18 - They used to exist in other programming languages
135:21 - like PHP long before when React came into the picture.
135:25 - So it's not something which is new to React
135:26 - or new to the industry.
135:27 - It's a very common thing.
135:29 - We used to divide the chunks of the web
135:32 - like headers and footers into separate file.
135:34 - A common practice being done in the PHP
135:36 - and other programming languages as well.
135:38 - Same, we are going to learn how we do that in the React.
135:40 - It will make your life a little bit easier
135:42 - as a web developer.
135:44 - Things are just at one place.
135:46 - You make a change at one place.
135:47 - It propagates to every single page.
135:49 - It's pretty easy.
135:50 - Life is easy with that.
135:52 - So let's go ahead and let me first share the screen
135:56 - and we'll go through with that.
135:57 - So this is our application.
135:59 - We have been working on this one.
136:02 - So we will be now creating our third-ish app,
136:05 - actually the third one itself.
136:07 - So we'll be just going through with the third.
136:09 - So let me just go ahead and open up the terminal
136:12 - and we'll be going with the same NPM.
136:14 - I know a lot of you want to go with the bun.
136:16 - We don't have bun as of now.
136:18 - I do have it on my system, but I won't be using them.
136:21 - So we'll be saying just simply create at the rate of wheat.
136:25 - Sorry, wheat at the rate latest.
136:28 - So this gives us a wheat project
136:31 - and we'll be naming our project as a zero three
136:34 - because it's a third prop project
136:36 - and we'll be calling it as tailwind
136:38 - and we also are going to be using props,
136:40 - tailwind props components.
136:42 - Yeah, I think that's a good name.
136:43 - We'll be using react for this.
136:45 - We'll be going with JavaScript.
136:47 - I know you want me to switch into TypeScript,
136:49 - but no, I want this videos, the entire series to be
136:52 - mass reachable, more and more people should be able
136:55 - to learn it without the hindrance of additional TypeScript.
136:58 - Yes, I do have a TypeScript series and playlist
137:00 - on my channel, but this time we are going
137:02 - just with a JavaScript probably at the end of the series,
137:05 - I'll introduce you briefly with the TypeScript as well.
137:07 - All right, so let's go into this one and it's zero three
137:11 - and let's go ahead and run NPM install.
137:15 - That's the basic of how you get started with this one.
137:18 - Okay, by the time we get started,
137:20 - the first thing that we are going to take down
137:22 - is how we can actually install and configure tailwind CSS.
137:26 - There is a process to it and we all need to learn that.
137:29 - So first of all, let's go ahead and work
137:31 - with tailwindcss.com.
137:33 - This is the official website and every single time
137:35 - I'll need to configure the tailwind CSS,
137:37 - I always go with the docs.
137:38 - You should also go with the docs.
137:40 - This is how we actually learn and install it.
137:42 - So in the docs, there is a section here in the installation.
137:45 - So there is a tailwind CSS, CLI, post CSS.
137:49 - We actually are going to be working with framework guides.
137:52 - Yes, you can say React is a library,
137:54 - but this is how it is being mentioned.
137:57 - We are working with the VIT.
137:59 - In case you are working with CRA, Create React app,
138:01 - there is a guidance for that
138:02 - and almost similar looking guidance.
138:04 - We'll be going with the VIT.
138:05 - We don't need to work with these first two steps
138:07 - because we are already done with that.
138:09 - We'll be going with the second step.
138:11 - So go ahead and copy this.
138:12 - These are the two commands that we need to work through.
138:15 - So let's just go ahead and clean this.
138:17 - Make sure you do an LS.
138:19 - The most important thing is you should be in the same folder
138:21 - where this package.json file is.
138:23 - So make sure you take care of that.
138:25 - I'm pretty sure you will.
138:27 - Go ahead and paste the commands.
138:29 - This command will install a couple of dev dependencies.
138:31 - The dash D is for development dependencies.
138:34 - They don't get shipped to the production itself.
138:37 - Most interestingly, it creates a file
138:39 - known as tailwindconfig.js.
138:42 - This is your tailwind configuration
138:44 - because tailwind is kind of a preprocessor, you can say,
138:48 - because whatever the tailwind you write,
138:49 - it actually generates that CSS on the go.
138:52 - Not everything is being shipped.
138:53 - Only the CSS that you need is generated.
138:56 - And for that generation, you need to actually define it
138:59 - that where should I find my content.
139:00 - So the next step is actually go ahead and define
139:03 - where my content is.
139:05 - So in the VIT, the content is actually index.html
139:08 - and you're some source folder.
139:09 - So everything, components, every file, app.js, everything
139:13 - will be inside the source.
139:15 - So this line actually is a regex, regular expression,
139:18 - to find all the files that's related to JavaScript
139:20 - or TypeScript, JSX or TSX.
139:23 - And also, we are also listing our index.html.
139:26 - So go ahead and copy this entire content thing.
139:28 - Go back up here and we want to replace it.
139:31 - Make sure you take care of the additional comma at the end.
139:34 - Usually, this is a common mistake
139:35 - which a lot of programmers in the initial days
139:38 - while learning the React, they do this.
139:40 - Things are not done yet.
139:41 - We also need to mention that, hey, in the index.css file,
139:44 - we'll be using this as directives.
139:47 - These directives are must to have
139:49 - without these things don't work.
139:50 - So go back inside the source.
139:52 - This is where my index.css file is there.
139:56 - Now, there are two options in front of you.
139:58 - You can just keep everything there
139:59 - and just paste it at the top,
140:01 - or you can remove everything and just keep it up here.
140:03 - But in case you have some additional CSS,
140:05 - which usually you will not have,
140:07 - you can go ahead and write them still.
140:09 - It is not going to bother you,
140:10 - but you still have all of this.
140:12 - So that's it.
140:13 - These are the two steps, three steps technically,
140:15 - this command, the tailwind config and this thing.
140:18 - And after that, it's all npm run dev.
140:20 - So that is all what we have.
140:22 - Now let's go ahead and try to run it first
140:24 - so that we can see are we good or not, npm run dev.
140:28 - And we just run it.
140:29 - Hopefully it looks good.
140:31 - And right now we have no idea is it working or not.
140:35 - So what we can do is let's go into app.jsx
140:39 - and minimize the things which we don't need.
140:42 - Let's just remove everything
140:44 - and go ahead and grab an h1,
140:46 - which says wheat with tailwind.
140:49 - Tailwind, there we go.
140:54 - In the h1, we'll be using a class name, which is a keyword.
140:57 - Since we are in the JavaScript world or JavaScript paradigm,
141:01 - we cannot use the word class itself.
141:03 - It's a reserved keyword for the JavaScript.
141:05 - So we use class name.
141:06 - Only handful of the thing in the HTML are changed.
141:09 - Like there is also an HTML4,
141:14 - HTML4, which is also changed.
141:17 - In the other input field especially,
141:19 - you'll find that.
141:20 - So if there is an input field,
141:22 - it's usually in the label actually.
141:24 - So in the label, you'll see the HTML4.
141:26 - So in the regular HTML, we just write it for,
141:29 - but again, for is a reserved keyword.
141:31 - So only a handful of places are there
141:32 - where you have these kinds of things, otherwise it's not.
141:35 - So let's just say we want to have it.
141:36 - So we can have the text dash three XL suggestions, three XL.
141:42 - By the way, these suggestions come from a plugin,
141:44 - which I have installed in my VS code,
141:46 - known as Tailwind IntelliSense.
141:49 - Yep.
141:50 - And we'll go with the BG green and we'll go with this one
141:55 - and we'll add a padding of three maybe just for fun.
141:58 - If I go back, all these things are here.
142:00 - That means, say, everything is looking good.
142:03 - By the way, there are some fun classes as well.
142:04 - Like I can go around at MD, it looks good.
142:07 - So this is our basic Tailwind configuration.
142:10 - So step one is done.
142:12 - Now we are almost a master of configuring the Tailwind
142:16 - in our application.
142:17 - That's the basic that we have.
142:19 - Next step, let's go ahead and understand the things
142:22 - about the props.
142:23 - Do we need a prop?
142:24 - Right now, we don't need any prop.
142:26 - Now, one thing to understand here is that this is a function.
142:30 - So if this is a function and this whole function is imported
142:33 - in the main.js, x main.jsx, can I write more such function?
142:40 - And in those function, can I return some JSX,
142:43 - which we have already studied quite a lot
142:44 - during our custom preparation of the React?
142:47 - Can I go ahead and do this kind of a thing?
142:49 - I don't know, let's try it.
142:51 - I'll create a new folder.
142:53 - You don't need to create a folder.
142:54 - I'm just organizing the things better.
142:56 - I'll just call this one as components.
142:59 - And inside the components, let's create a new file
143:02 - and call this one as a card.
143:06 - And of course, since this will be returning some JSX,
143:08 - I'll be calling it as obviously.jsx.
143:11 - Now there's a shortcut that you can use
143:12 - if you have installed the React or not React.
143:17 - There are some IntelliSense plugins available as well.
143:19 - So there is some, let me just show you.
143:21 - So there is some plugin known as React Snippets.
143:25 - Yeah, this is the one that I have.
143:27 - So you can actually go ahead and install this.
143:29 - This makes life a little bit easier.
143:30 - Once you have installed this one,
143:32 - what this will allow you to do is you can type things
143:35 - like rfce, which will give you a React functional component.
143:39 - You can go ahead and say react afce.
143:42 - For example, I can go ahead and say rafce,
143:45 - which gives me a React arrow function component.
143:48 - I can go ahead and say rfce,
143:50 - which gives me a React functional component.
143:52 - So whichever the one you like,
143:53 - you can go ahead and go with that.
143:55 - Now, what I'll do inside this,
143:58 - since I know there is a div here,
144:00 - I'll go ahead and say that,
144:01 - hey, what I want to know is,
144:04 - let's just say I'll import an image here,
144:07 - and I'll give you a source as well in a minute.
144:10 - I'll also give you an h1.
144:12 - In the h1, I'll just say this is going to have some class,
144:16 - text-2xl, and we'll be having a bg-green.
144:23 - This one, padding of three maybe, rounded.
144:30 - Rounded, and this will say a card for photos.
144:36 - I don't know.
144:37 - And we'll also have some paragraph
144:39 - with a lorem of 10 words.
144:40 - I don't know, this is my card that we have.
144:43 - Let's give it an image source as well.
144:45 - I'll obviously pick from some of my images
144:47 - that I donated to Pexels.
144:50 - I think this one looks good.
144:51 - I'll just right-click, copy image address,
144:54 - go back and just paste it up there.
144:56 - Now, I have this image, and this is looking good,
145:00 - but this is a function.
145:02 - There's nothing more to it.
145:03 - And again, don't ever overestimate React.
145:06 - It's just JavaScript.
145:07 - Always think it from the JavaScript perspective.
145:10 - Now we have this card.
145:11 - Can I import this card in app.jsx or main.jsx even?
145:15 - Yes, you can import it wherever you like.
145:17 - Let's go ahead and say that I want to import a card,
145:20 - and that card will come from ./component.
145:24 - So I'm going into one directory, and then I have this card.
145:27 - You don't need to write this like card.jsx.
145:30 - It's auto-imported, so you can just avoid that.
145:33 - How can we use it?
145:34 - Just like we used app.
145:36 - So it's going to be simply like card.
145:38 - And a self-closing one, just like that.
145:40 - That's it.
145:41 - Now let's see if it works.
145:43 - So we'll go up here, and we see that, OK, we have this.
145:46 - This is a pretty big card, but there is nothing
145:50 - which is stopping us.
145:51 - It's looking pretty nice, and we have this one.
145:53 - All right, so we have this card.
145:56 - Now let's go back onto the Tailwind
145:57 - and see if what they can offer us on the home page.
146:01 - So on the home page also, they are offering us
146:03 - some of this card.
146:04 - And let's go ahead and copy this entirety
146:08 - and see if we can actually somebody,
146:10 - what happens if somebody gives us the components like this.
146:13 - I'll just go ahead and replace my card with this card.
146:18 - And obviously, you can see there are a lot of places
146:20 - where things are going wrong and whatnot.
146:22 - So let's just figure out.
146:23 - So this is a common mistake or common error
146:26 - that you will also be facing.
146:27 - So let's not run away from them.
146:29 - Instead, let's deal with them.
146:31 - So first one, it says, hey, figure.
146:33 - So what is this problem?
146:34 - It says figure has no corresponding closing tag.
146:37 - Another JSX requirement that if something is getting started,
146:40 - it needs to close as well.
146:42 - So notice here, this is where the figure is ending.
146:44 - So what's the issue?
146:46 - You can see that at some of the places,
146:48 - this needs to close so that now it goes.
146:51 - Now you can see some of the errors are gone just with that.
146:55 - It's not always about, hey, figure was missing
146:56 - or something like that.
146:58 - But we can see things are going not that great in this case.
147:02 - So for example, we have some of the errors here as well.
147:04 - Why these errors are here?
147:06 - It should be all supported like this.
147:08 - Yes, the reason for them is let me go ahead and hit Command-Z
147:12 - a couple of times.
147:13 - We were supposed to enter this all here.
147:15 - But if I go ahead and copy this, you
147:17 - can see it's not properly being written
147:20 - or it's not properly being organized.
147:22 - So I need to actually grab it properly,
147:24 - light click, and copy this.
147:27 - But again, you will face some of the issues with this
147:30 - because things are not great.
147:32 - Things are not great at this moment.
147:33 - So let's just paste this.
147:35 - And probably this time they have come back
147:37 - in a better situation.
147:38 - But the issue is I have this a lot of errors.
147:42 - So I'll first indent this because this is bothering me
147:45 - a little bit.
147:45 - So OK.
147:48 - Now these things, these curly braces
147:51 - and these closing brackets, they are good.
147:53 - But the problem is that first of all,
147:56 - our image is having no ending tag.
147:58 - When the image is not having any ending tag,
148:00 - you can actually provide a self-closing tag.
148:03 - That will remove at least one of the error.
148:05 - Now let's see what's the other error.
148:06 - The other error is we have these quotes
148:09 - inside it, which is obviously giving us
148:11 - these commas and errors.
148:13 - IntelliSense is helping me to figure this out.
148:15 - And I'll have a lot of 10 words, maybe something like this.
148:18 - This will work better.
148:20 - And now we can see some of the errors are gone.
148:22 - OK, some of the errors are gone.
148:23 - But I'm pretty sure the image is not going to work.
148:26 - Why so?
148:27 - Because the source.
148:28 - The source of the image, I don't have it.
148:31 - Easiest way is to fix it.
148:33 - Just stay calm and fix the stuff.
148:34 - That's how the programming works.
148:36 - Let's say copy image address, go back,
148:38 - and we'll just replace this whole image with this.
148:42 - OK.
148:43 - Now that our designer has given us a better card
148:46 - by designing that, this is looking good.
148:48 - And since it's a tailwind, it should be optimized as well.
148:51 - Decently optimized, not the best.
148:53 - But OK.
148:55 - Now I understand that, yes, this is a common thing, which
148:58 - I can say that, hey, eventually I
149:00 - can keep all of my components separate like this.
149:03 - For example, header could be its own file.
149:06 - Navigation menu could be in its own file.
149:08 - Footer could be in its own file and can
149:10 - be rendered on every single page.
149:12 - And if I have to make any change,
149:14 - I can go ahead and make a change in one place, and that's it.
149:17 - It will serve at every single page.
149:20 - Now this is exactly known as component building.
149:22 - And there is a word for it.
149:23 - We call it as dumb component.
149:25 - Yeah, very rude.
149:27 - But we call it as dumb component.
149:28 - The reason being, this component doesn't take any parameter.
149:32 - It's not modifiable.
149:34 - It just works like this.
149:35 - So how can we make it a little bit more
149:37 - intelligent of a component?
149:39 - Now a couple of ways how you can do it.
149:41 - The first way is that, hey, I want to pass on some text.
149:46 - For example, in our card, as we can see,
149:49 - this is the name of a person and then the post, maybe
149:53 - software engineer, staff engineer.
149:55 - So these things, probably I want
149:58 - to assign that, hey, maybe multiple cards should be there.
150:02 - And I want to pass on this argument.
150:04 - Right now, there is nothing which
150:06 - is stopping me to actually display this card because I've
150:08 - imported that.
150:08 - I can display two times, three times, however I like.
150:12 - But the information is exactly same.
150:14 - So the first step actually is, whenever
150:17 - you may want to make a card to accept any parameter,
150:20 - is go up here and accept it.
150:23 - The way how we accept it, actually,
150:25 - with every single of these component,
150:27 - there is a React magic that goes on onto it,
150:30 - which is known as props.
150:32 - Now what does prop is doing right now?
150:35 - If I go ahead and hit a reload, there's nothing inside it.
150:38 - It even broke my application.
150:39 - So if I go ahead and check out the console, it says props
150:42 - is not defined.
150:44 - So if the prop is not defined, how the things
150:47 - are going to go ahead and work?
150:49 - Notice here, props is not defined everywhere.
150:52 - And you are saying that React actually gives me
150:54 - a prop like this?
150:55 - Yes, React actually gives you a prop like this.
150:58 - But why?
150:59 - I cannot even access this.
151:01 - You cannot access this because, first, you
151:03 - have to actually accept that there is a props.
151:06 - Once I go ahead and save it back,
151:07 - you can see at least our application is loading,
151:10 - if I go ahead and hit a reload.
151:12 - But I can see all empty.
151:14 - Yes, it should be empty.
151:15 - And by the way, there is a class error.
151:16 - Let me just fix that.
151:18 - The class should be.
151:21 - Let me just go ahead and do Command-D
151:23 - to find all the instances of this
151:26 - so that I can actually rename this.
151:31 - So this would be class name.
151:34 - Now it should be all happy.
151:36 - Yeah, hopefully.
151:38 - Let's hit a reload.
151:39 - There we go.
151:40 - At least that error is gone.
151:42 - So we can see that now there is nothing inside this.
151:45 - There is this square bracket, square bracket, prop prototype,
151:48 - which is, again, a hidden scope.
151:50 - We won't talk about this.
151:51 - This is not a JavaScript class.
151:53 - But I can see at least that, OK, so far we are correct
151:56 - that, at least in the card, there
151:59 - is something which is known as props.
152:01 - And I can console log this.
152:02 - OK, so far, good.
152:03 - But how can I use this props?
152:05 - We just saw that this is an object.
152:07 - So if it is an object, we can add value to it.
152:10 - All right, that's good.
152:11 - So how can I add value to it?
152:13 - Wherever you are calling this card,
152:15 - go ahead and pass on values.
152:16 - For example, I'll just call this one as a user name
152:19 - and the value of user name is here is going to be Hitesh.
152:23 - OK, now how can I utilize this?
152:26 - Everything that you pass here in this format,
152:28 - it's actually a key value thing, key and value.
152:31 - So you can actually have this props here.
152:33 - And now I can change the name here.
152:35 - I can inject my JavaScript just like this.
152:38 - And I can say props, since this was an object.
152:40 - And I can go ahead and say dot username.
152:42 - And this technically will render my name.
152:45 - So I can see that this is Hitesh now.
152:47 - Rest of all the things, they are gone
152:49 - because they never passed me anything.
152:51 - But this is an issue.
152:52 - What happens if the user doesn't pass on this props?
152:56 - Common case.
152:57 - So in this case, what we can do is
152:58 - we can actually just provide some default value
153:01 - if the value doesn't exist, use this value.
153:03 - One more thing, if I'm going to pass you
153:05 - these values like prop dot user name, prop dot your post,
153:10 - whatever that is, every time you have to say prop dot prop dot.
153:13 - So one common thing that you're going to see
153:15 - is just destructuring this object directly.
153:18 - And whatever the field you need, you just simply
153:20 - go ahead and say, hey, I want to extract username out of it,
153:23 - or whatever you want.
153:24 - In this case, you don't have to say props like this.
153:26 - And everything still works.
153:28 - Now, there is a good thing that if this value is not
153:32 - available, then there are a couple of ways, actually,
153:34 - you can go ahead and work on with this.
153:36 - For example, I can go ahead and say username.
153:40 - Or if username is not there, go ahead and print Hitesh.
153:44 - So it works.
153:45 - But there's a problem.
153:46 - Here's a problem with this case.
153:48 - This is not scalable.
153:50 - The reason why, how many times your other fellow coders
153:54 - are going to come and look into this much of the pieces
153:56 - of the code and will say, hey, this
153:58 - is where you have used the conditional.
154:00 - This works.
154:00 - A lot of people use that.
154:01 - I've seen that in the production code even,
154:03 - but not a good approach.
154:04 - So technically, it is correct, but it's not
154:07 - scalable solution.
154:08 - So the better approach could be that, hey, you should actually
154:12 - give some values here as well, like Hitesh.
154:15 - Or maybe Hitesh.
154:17 - Or I'll just use an H. Oops, Command-Z, a couple of times.
154:21 - I'll just go ahead and say, instead of this, Hc.
154:24 - Just like that.
154:25 - Save this.
154:27 - And now, if I go back, notice here it says Hc.
154:30 - So the logic is still same.
154:32 - So if you will give me the value, which you have given me
154:35 - here, I'll use that value.
154:37 - If you are not going to give me any value in any component
154:40 - call, I'll just use this default value.
154:42 - So this is a far more better approach,
154:43 - because at the very start of the function,
154:45 - you get all the usernames and what the values you
154:47 - want to extract, and you can work on with that.
154:49 - Similarly, we can just put a comma separated values.
154:52 - I can just say post.
154:54 - And I can just simply say equals.
154:56 - And then instead of staff engineer,
154:57 - we'll be using something else not assigned yet.
155:04 - So we can see that right now it says still,
155:06 - because we haven't used it.
155:08 - So in here, I can just go ahead and enable my JavaScript.
155:12 - And I can just go ahead and say, I don't have to say props.
155:16 - I can just directly say post.
155:18 - So there we go.
155:19 - Now it says not assigned yet, not assigned yet.
155:21 - So every single time you call any component or a piece of code,
155:25 - you can just go ahead and provide, hey,
155:27 - I want to make it more reusable.
155:28 - This time, it was attached.
155:29 - This time, it's going to be JSON.
155:32 - And then I want to also provide a post, which
155:35 - is an optional parameter, by the way.
155:36 - There's no comma here.
155:38 - Post, and the post value is going to be stuff, engineer.
155:46 - So just like that.
155:47 - And we can see that this changes a lot of stuff.
155:50 - So instead of making a dumb component,
155:52 - we can go ahead and make it much more smarter.
155:54 - Similarly, you can go ahead and provide a URL of the image
155:57 - here as well.
155:58 - And instead of getting this whole big thing,
156:01 - you can just go ahead and make it as an optional,
156:03 - that, hey, this is optional.
156:04 - And you can inject your JavaScript.
156:06 - Just same.
156:06 - Curly braces, add a string, and that is it.
156:09 - That's your assignment, by the way.
156:11 - Really easy one.
156:12 - Go ahead and make this component a little bit better
156:14 - so that you can make it more reusable.
156:17 - But one more thing, will I always
156:20 - be passing strings like that?
156:22 - Can't I just pass something more, something like, hey,
156:25 - in this first card, I want to provide an array.
156:27 - So I'll just go ahead and say my error.
156:29 - And that is going to be an array like this.
156:31 - And that's going to be 1, 2, 3, 4.
156:33 - We can see, obviously, that's an error.
156:35 - That's an error.
156:36 - The reason for this error is, if you
156:38 - have studied my JSX chapter in this entire series,
156:41 - this whole thing will be taken up as it is
156:43 - and will be placed in the JSX line by line parsing of it.
156:47 - So this is obviously not a great idea.
156:49 - Yes, you can pass arrays.
156:50 - You can pass on objects.
156:51 - But there is a way of doing that.
156:53 - And that is where you have to inject your JavaScript in here.
156:56 - And that's how you pass it.
156:58 - And while the better way, even, actually, to do this,
157:01 - if you really want to pass on something like this,
157:04 - the best way is to create an object first,
157:07 - create a variable first.
157:09 - And that would be a better name.
157:10 - So for example, you go ahead and pass on my object
157:13 - just like this.
157:14 - And in this, we will have a couple of values.
157:17 - Oh, that's too much of the values.
157:19 - I don't know how we came up with that address.
157:21 - I don't even live in this.
157:23 - I'll just live in the pink city, just for fun, just for fun.
157:30 - And I'll just say new array.
157:33 - And some values into that.
157:35 - So it's always a better idea if you
157:36 - want to pass on any values or like this.
157:38 - Go ahead and pass on this variable.
157:40 - That's usually a better approach.
157:41 - So I can just go ahead and say new array.
157:44 - And oops, my bad.
157:47 - My bad in syntax.
157:48 - There we go.
157:49 - Now I can go ahead and say new array.
157:51 - This is a far more better approach
157:53 - than just writing the thing.
157:54 - So if you want to pass on anything, your arrays,
157:57 - objects, strings, anything else, maybe you
158:00 - have called some values from the database.
158:02 - You want to pass it on as it is.
158:03 - You can go ahead and do that.
158:04 - Maybe you want to pass on each of these elements.
158:06 - You can spread these values and can pass on.
158:08 - But it's up to you that how you are accepting these values here
158:12 - as well.
158:13 - That is the most important thing.
158:14 - Here we are expecting that they will be an object, having
158:16 - a string into that, so optional string.
158:18 - If you expect that the values will be spreaded array,
158:21 - go ahead and handle and deal it with that way.
158:23 - That is the most important thing.
158:25 - And that is why you need props.
158:27 - So in this video, now we have learned.
158:29 - So let me just summarize this.
158:30 - First of all, we went through with the tailwind
158:35 - configuration, absolute basic, nothing to be worried about.
158:38 - We just went through with step-by-step instruction
158:42 - from the documentation.
158:44 - Then we studied a little bit about why props are necessary.
158:47 - By the way, this whole thing, this user name,
158:49 - it is, this is the prop.
158:51 - That is it.
158:52 - It's a short form for properties.
158:54 - And the reason why we call this one here as a props, that
158:57 - is, again, a short form for properties,
158:59 - we saw in the console log, there is an object.
159:02 - That object is called as property.
159:03 - And that's why, hence, the short name of props.
159:05 - So coming back, so we studied about how
159:08 - we can make dumb components.
159:09 - Component is like shortening the code
159:12 - and make it more modularized so that you
159:14 - can have individual control on each component, like cards.
159:18 - Eventually, we can loop through the cards,
159:19 - generate hundreds of cards, a navigation bar, footers,
159:22 - and all of this so that we can keep them separate.
159:24 - This is how the production code is being written.
159:27 - On top of that, we studied a little bit
159:29 - how we can actually grab the entire props
159:30 - or we can de-structure them at the very top.
159:33 - And if we are interested in de-structuring,
159:35 - then it's much better.
159:36 - We also studied the concept that if you don't pass on
159:39 - any default value, what are the consequences?
159:41 - We also studied there is a non-scalable approach
159:44 - that could be have taken, but you
159:46 - can improve your code with the scalable approach
159:48 - of providing the default value up here itself.
159:51 - That is always a great idea.
159:53 - This is all.
159:53 - This is all that you want to study
159:55 - in this particular video about props.
159:57 - Now you have a great idea about what are the states,
159:59 - why they are being used.
160:00 - You also have the idea about modularizing your code
160:03 - using the props.
160:04 - We created a card component.
160:05 - Go ahead and create another component,
160:07 - like header or footer or something, and try this out.
160:10 - This is all.
160:10 - This is all that we have for this particular video.
160:14 - If you're enjoying this video, it gives me an immense boost
160:18 - in confidence.
160:18 - If you leave a comment, drop down a comment.
160:20 - Any thank note, hurt, emoji, whatever that is.
160:23 - I'm expecting at least 100 comments on this video
160:26 - just to give me a model boost.
160:27 - That's it.
160:28 - Let's go ahead and catch up in the next video.
160:34 - Hey, dear everyone.
160:35 - Hithai Sheer back again with another video,
160:37 - and welcome to our React series.
160:39 - So we are on to our React journey going pretty good.
160:43 - And now is the time that we learned the things on the go
160:46 - while building the applications.
160:47 - And of course, we're going to start with absolute basics.
160:50 - And let me break this here.
160:52 - A lot of time when I bring this kind of application
160:54 - at the start of the things, people just say, hey, Tish,
160:56 - that's too basic.
160:57 - That's too basic.
160:58 - We really don't want to build this one.
161:00 - Show us something cool.
161:01 - Build an Amazon clone or a Spotify clone
161:03 - or a blog application.
161:05 - But the reality is that if you directly jump
161:08 - into these applications, especially at this level,
161:10 - because somebody who is learning React
161:12 - has just gone through with JavaScript,
161:13 - trying their hands on some frontend libraries,
161:16 - this is where you can make a lot of mistakes.
161:18 - So please don't do that.
161:19 - Building these kinds of smaller application
161:21 - will get confidence in you, as well as you'll
161:23 - understand a lot of workflow as we go through.
161:26 - So let me show you what we are about to build.
161:28 - And then I'll walk you through that how we are going
161:30 - to actually build it.
161:31 - We'll be using a lot of tailwind for this one.
161:33 - So this is how we are going to get started.
161:35 - So this is absolute basic.
161:36 - This is how we are going to get started.
161:38 - At the bottom, we will have a few buttons.
161:40 - Of course, we will not focus too much
161:41 - on the tailwind side of it,
161:43 - but still these are going to button.
161:45 - As you click on these buttons,
161:46 - they will actually change the color.
161:48 - So it will turn it into red, green and blue.
161:51 - And then if you hit the refresh,
161:53 - it again comes back to the olive.
161:55 - So this is all that we are going to build together.
161:58 - We will be using again, classic wheat for this.
162:00 - We'll be using tailwind for this
162:02 - and just the basic state management.
162:04 - This will give you a thorough confidence
162:06 - of how states are being used
162:07 - and how you can actually utilize them.
162:09 - What are the impacts of using the state?
162:11 - And eventually, gradually,
162:13 - we are going to level up the difficulties here.
162:16 - I hope you are all excited.
162:17 - We're going to get started absolutely from scratch.
162:19 - So let's go up there.
162:21 - So this is my application.
162:22 - Let's go back onto this one.
162:24 - So this is how we are going to get started.
162:26 - We'll be creating our very fourth app
162:28 - that we have right now.
162:30 - So let me go ahead and fire this up.
162:32 - There we go.
162:33 - We need to close this again, fire this up.
162:35 - And this will be our fourth app.
162:37 - So I'll be just saying NPM create wheat.
162:42 - And we'll be going with the latest.
162:44 - I think that's the best approach that we can have.
162:47 - And then it requires a name.
162:49 - This will be our fourth app technically.
162:51 - So we'll be saying 04 and this will be a BG changer.
162:55 - Feel free to name it something else
162:56 - if this doesn't suits to you.
162:58 - Works great with me.
162:59 - So I'll be just using this one.
163:00 - And package name is exactly same for me.
163:03 - I'll be using React for this one.
163:05 - I wish they could have asked me for a library of CSS as well,
163:08 - but sadly they don't do.
163:10 - Again, we'll be going with classic JavaScript
163:12 - so that we can have more people using this library.
163:14 - So let's go on to 04 and there we go.
163:17 - Now the first thing that I have to do is NPM install
163:19 - in case you are already on bun,
163:21 - you can go ahead and use bun install as well.
163:24 - No problem there.
163:25 - It's usually a comparatively fast install that we have,
163:28 - but by the time it does all of this,
163:30 - let's go back here and work on the Tailwind CSS.
163:33 - Again, classic go back to docs.
163:35 - It might look repetitive to you,
163:36 - but this reputation is necessary
163:38 - so that you feel absolutely comfortable
163:40 - in doing all these things.
163:41 - I want this to be a muscle memory in use.
163:43 - So let's go back and let's go ahead and clean this up
163:48 - and paste these two things
163:49 - so that we can have background changer
163:51 - and we get a new file, which file?
163:54 - Yep, a configuration file for Tailwind,
163:56 - exactly this one, a Tailwind config.
163:58 - In this, we have to change some configuration.
164:01 - So we are using wheat.
164:02 - So that's why we'll mention
164:03 - that our index file is actually outside.
164:05 - I'll just replace this
164:06 - and rest of the files will be inside the source.
164:09 - So this is exactly for that.
164:10 - After that, we have to get the decorators, directives.
164:14 - There are a lot of names for that.
164:16 - Different language,
164:17 - depends on what language you are coming up for.
164:20 - And I'll be just changing that into index.css,
164:23 - just replace everything.
164:24 - We don't need much of the CSS, just save this.
164:26 - And there we go, just save this.
164:28 - And now technically you should be able to run npm run dev,
164:32 - which hopefully we will be.
164:33 - So we'll be saying npm run dev
164:36 - and things should be up and running.
164:38 - Before we go there, let's go into app.jsx
164:41 - and actually just clean the things.
164:43 - So we'll be saying, hey, let's clean this.
164:45 - Let's clean this from here to here.
164:48 - We'll be just putting up a simple H1
164:51 - and what we're going to write.
164:54 - A bgchanger app with wheat, looks good.
164:59 - And we'll be having a simple class name.
165:02 - And that says we need a bg-green suggestions, please.
165:07 - I'll be using 500 variant of it.
165:09 - And we'll be saying text of three Excel.
165:11 - So we'll be saying three Excel.
165:16 - Why is it not suggesting me?
165:18 - Yeah, it is suggesting me.
165:19 - Okay, let's see if the application is working or not.
165:22 - Let's go up here.
165:23 - And there we go.
165:24 - Not really the nicest, coolest of the all,
165:26 - but it is what it is.
165:28 - It is decently good that we have.
165:30 - Okay, going back.
165:32 - Now how we're going to deal with this one, nothing too much.
165:35 - Let me just give you a brief overview
165:37 - of how we are going to take down this application.
165:39 - Main.js, we are not going to be taking it down
165:42 - because our app is being served inside it.
165:44 - So let's just close this totally.
165:47 - I'll close everything.
165:49 - Okay, then we'll go into app.jsx.
165:51 - This is the file which is serving entirety of my content.
165:55 - So in fact, all of my content is going to go inside this.
165:58 - For this, I need to go ahead
166:00 - and create a simple full page width.
166:03 - Inside that at the bottom, we'll be creating few buttons.
166:05 - It's not really compulsory that you keep the buttons
166:07 - at the bottom, top, left, right.
166:09 - It's totally up to you,
166:10 - but we need a full page of the screen itself.
166:13 - So let's go ahead and do this.
166:15 - What we're going to do is remove all of this.
166:17 - The easiest way of doing this is to have a simple dev.
166:20 - We'll be putting some content inside this,
166:22 - but first let me add a few classes.
166:24 - These classes comes from the Tailwind itself.
166:26 - First of all, I want the width to be full.
166:28 - So that's the shortcut for this one.
166:30 - Edge screen actually gives you a viewport height screen.
166:33 - If you hover your mouse onto this one,
166:34 - it says give me height of 100% viewport.
166:37 - Again, this is not a series about Tailwind,
166:39 - but still want to give you a brief overview
166:41 - of how things are actually going ahead
166:43 - and we'll do it.
166:44 - We'll also go ahead and add a duration of this
166:46 - so that whenever there's a change,
166:48 - it actually does it slowly.
166:50 - Now, next thing, we're going to just keep it as it is.
166:54 - This is how the basic looks like.
166:56 - Now, once we have this,
166:57 - I'll just not use these suggestions here.
167:00 - We'll be using a simple Flexbox class here
167:04 - so that we can have all these buttons and everything.
167:06 - So let's go ahead and have a dev.
167:07 - Inside this dev, let's have a class name.
167:09 - First of all, we want it to be fixed
167:11 - so that it's always fixed from the bottom.
167:13 - Fixed, there we go.
167:15 - And we'll be using a flex.
167:16 - We'll be using a flex wrap, flex dash wrap, there we go.
167:21 - And again, justify center
167:24 - and we will be fixing it up from bottom
167:27 - so we can use a bottom of how much you want to have it.
167:30 - 12, maybe 13, totally depends on you, no big deal.
167:35 - We'll be also using one of the other property
167:36 - which gives you inset as well.
167:38 - And by the way, you can provide an inset
167:40 - on X-axis and Y-axis.
167:41 - Again, not a class for CSS, but we'll be going with that.
167:44 - You can just copy and paste these ones.
167:46 - So this is what we have as a basic.
167:49 - And now once we have this,
167:51 - then we can just go ahead and simply have the suggestions.
167:54 - We can actually go ahead and take this one.
167:57 - This gives us nice suggestions for this.
168:00 - There we go.
168:01 - Now we'll not be using everything.
168:02 - We need flex.
168:03 - We definitely need a flex wrap, justify center.
168:06 - We'll be using some gap and some of the shadows as well.
168:10 - So let me just go ahead and give you the CSS directly
168:13 - again from my notes.
168:14 - We'll be not using a widthful and all of that.
168:17 - Again, it doesn't really matter
168:18 - what CSS and anything you're using.
168:21 - I'll be just using a simple button and let's just say test.
168:24 - Again, if this UI doesn't make sense,
168:26 - only UI that should make sense for you
168:28 - is the width should be full, the height should be screen
168:30 - and after that, just add button wherever you like.
168:32 - Let's go back and see how does it looks like.
168:35 - So we can see at the bottom, we have a button.
168:37 - In fact, what we can do temporarily,
168:39 - we can use a background color of let's just say a black
168:43 - so that you can properly see this.
168:45 - This is what the screen is right now.
168:47 - Again, we don't have a full width as of now
168:49 - because our application is loading only in this much.
168:52 - We'll see and figure out how we can actually manipulate that.
168:55 - Not a big deal, we can just change out the things.
168:57 - So we can see, this is what we have, test is one button.
169:00 - But if we add more buttons,
169:01 - we can just go ahead and do this
169:03 - and these are the buttons that we have.
169:05 - We'll be manipulating these button
169:07 - with a little bit more of these classes.
169:09 - So just don't worry,
169:10 - we'll be getting through them as well.
169:12 - All right, let me just remove this, okay.
169:15 - The first thing that we have is, oops,
169:17 - in the button is the class name.
169:20 - You can add more properties to this one,
169:21 - but I do have some button classes as well in my notes.
169:25 - So I'll be just directly giving it to you.
169:27 - All right, you can just go ahead
169:28 - and use them from the GitHub notes.
169:31 - We are using an outline none,
169:32 - we are giving some padding on the X axis,
169:34 - padding on Y axis, rounded fold, text is white
169:37 - and the shadow is large.
169:38 - So this makes the button looks like this.
169:40 - Obviously we don't have any text colors and all of that.
169:43 - So we'll be providing them as well.
169:45 - No worries, this is right now, text is white.
169:48 - By the way, this was just to show you
169:49 - that yeah, something BG was there.
169:52 - Okay, now we have a button like this,
169:54 - but our text is missing.
169:56 - So let's go ahead and add a text.
169:58 - What kind of text do you want to have?
169:59 - I'll be saying text as black.
170:02 - And there we go, a decent button that we have.
170:05 - Oops, text white, text black.
170:07 - No, we want to text black.
170:09 - That will make sense.
170:11 - Okay, looking good already.
170:13 - Now, similarly, we can have more buttons
170:15 - and we can call this one as test two, two, there we go.
170:21 - Okay, so the functionality is there.
170:23 - Now coming up onto how does this actually work?
170:26 - So we have already learned about the functionality.
170:29 - I hope you remember that the most important part
170:31 - of this application is the functionality.
170:34 - In the functionality, we have already seen
170:36 - that if you want to render any changes in the UI,
170:39 - those changes cannot be directly propagated.
170:41 - We need to use some kind of state management for this.
170:44 - And in the React, we have a hook for that known as use state.
170:48 - And this exact project is actually based on that.
170:51 - So we'll be using that one.
170:53 - Let me just walk you through with that.
170:54 - It's super, super easy.
170:56 - For using the state, just like we have a count here,
170:58 - let's go ahead and remove the count.
171:00 - We want to have some kind of a state management
171:01 - for the color.
171:03 - So I'll be using a const
171:04 - and let's just say we'll be using a color
171:06 - and that actually uses set color
171:08 - and we use some user state
171:10 - and what color you want to have.
171:11 - In this one, I'll be just writing olive as base one.
171:14 - Always remember, this first part in the array
171:17 - is your variable.
171:18 - The second part is a method which is responsible
171:22 - for changing this variable.
171:23 - No other thing cannot change this variable.
171:25 - This is the guy which is responsible
171:27 - for changing this color.
171:29 - Whatever you put inside the use states,
171:31 - that's the default value.
171:32 - Now, how can I use this default value?
171:34 - You can go up here and can actually add this as a property.
171:37 - For example, you can add your own styling,
171:39 - not the styling from the tailwind,
171:41 - but actually a style property just like this.
171:43 - And by the way, I need to go outside of this string.
171:46 - So there we go.
171:46 - We have this style property.
171:48 - Inside this, I can go ahead and say
171:49 - I want a background color
171:51 - and what should be the background color value?
171:53 - Just like this, you can go ahead and say,
171:55 - I want to have this olive color into this one
171:58 - and that color will obviously get propagated up here.
172:00 - So all the way up here.
172:02 - Why is it not going all the way left and right?
172:04 - I'll need to debug a little bit.
172:06 - We'll do that at the end of it.
172:07 - No big deal there.
172:08 - We can just have some manipulation there.
172:11 - Okay, apart from this, now since this is olive,
172:14 - how can I actually replace this string with some variable?
172:17 - It's pretty simple.
172:18 - You're already in the double curly braces.
172:20 - All you have to do is simply go ahead and say color.
172:23 - Now I'm using now a state variable
172:25 - and that's why we get an olive here.
172:26 - But if I go ahead and change it to red,
172:28 - since the default value of the state is red,
172:31 - I get the red, but I'm happy with the olive
172:33 - as a default starting color.
172:34 - Okay, that part is good.
172:36 - But now I need to work on some method
172:39 - by which I can change this.
172:41 - And again, remember, change can only be done
172:43 - when you change this color as a variable
172:45 - and this variable can only be manipulated
172:48 - and changed by this set color.
172:50 - Cool, you get this.
172:52 - Okay, so what can I do is on this button,
172:55 - if I know my JavaScript, I can just go ahead
172:57 - and add an event which is onClick.
172:59 - Now this onClick is pretty nice.
173:01 - It can take a reference of a variable.
173:03 - Maybe you are defining a method here,
173:05 - which is something like this, function and change color,
173:09 - something like this, and there we go.
173:11 - Let's just assume this change the color.
173:13 - You can go ahead and pass on the reference
173:14 - of this change color.
173:16 - Now, once you pass on this reference,
173:18 - this method alone cannot work.
173:19 - It needs some parameter to be passed on.
173:22 - For example, if you give it something like this,
173:24 - let's just say a parameter of color,
173:26 - whatever the color string you're passing me,
173:28 - inside in here, I can go ahead and use the set color,
173:31 - which is a method to change this color.
173:34 - This is my ideal way.
173:35 - But again, the problem is the change color
173:37 - needs to pass this color as a variable.
173:40 - Now, right now, I cannot just go ahead and do like this
173:43 - because it will immediately execute it.
173:45 - And if you remember your JavaScript,
173:47 - onClick doesn't change the value
173:49 - which is returned from a function.
173:51 - It needs a function itself.
173:53 - And this is not a React, this is JavaScript in itself.
173:56 - So there is no way you can do this
173:58 - because this will execute it
173:59 - and whatever the return value will go in onClick.
174:01 - OnClick doesn't accept that.
174:03 - You need to pass on a function into this.
174:05 - That's the only way how you do it.
174:07 - So another way of handling this situation,
174:09 - whenever you have to pass on some parameter,
174:11 - is just go like this, use a callback,
174:13 - and then you can actually use a change color
174:15 - because now onClick satisfies the condition that,
174:18 - hey, I'm passing you a callback, which is also a method.
174:21 - And on the way, I'm actually changing this color.
174:23 - So this will be going as a red.
174:25 - So if I go ahead and test this out,
174:27 - this actually changes that.
174:28 - So that's really nice that I can go ahead
174:30 - and work on with this one.
174:31 - By the way, I'll change this to red,
174:33 - this one to blue or green, whatever you like.
174:38 - Okay, but the problem is
174:39 - I need to actually do exactly same thing.
174:41 - So I can just go ahead and copy this
174:44 - and paste it up here.
174:46 - And there we go.
174:46 - Instead of this, let's go ahead and pass on this green.
174:49 - So technically, this actually solves my purpose
174:52 - that, hey, this is red, this is green,
174:53 - and I can go ahead and change these values.
174:55 - I can add more buttons.
174:57 - But there could be a better way of doing this.
174:59 - This is no problem at all.
175:01 - You can also have a different take on this one.
175:04 - In this entire series, I'll walk you through
175:06 - with a different perspective of the code
175:08 - so that you feel better where you'll see
175:10 - other people's code.
175:11 - I'll just comment this out.
175:12 - We don't want this one.
175:14 - What you can do is if I know that this change color
175:17 - is a method I need to call and pass on a value,
175:19 - I can actually do this with the set color as well.
175:22 - Can I do this directly?
175:23 - Yes, actually you can.
175:25 - You can just directly set the color into this color
175:28 - because this is responsible for that.
175:30 - So instead of using the change color,
175:32 - I can just go ahead and use the set color
175:34 - and pass on any parameter to this.
175:36 - Whatever you pass on parameter into this,
175:38 - whether that's numbers, string, whatever,
175:40 - that value is the new updated value in this variable.
175:43 - And that variable automatically is monitored by React
175:47 - to propagate the changes.
175:48 - That's cool.
175:49 - So I don't need to use this extra function that I've defined.
175:52 - I can just go ahead and use the set color of a method
175:55 - and this still works.
175:56 - So it saves me some time
175:58 - by not declaring extra functions here.
176:00 - A good approach, good approach.
176:02 - So now I can say red, green, it still works.
176:04 - There is still a bug in the application,
176:06 - which actually prevents me from going all the way up here.
176:10 - So really don't want that.
176:12 - So let me quickly go ahead and fix this
176:14 - that how it is not going.
176:15 - It's really minor CSS issue, not much bothered about it.
176:19 - All right, so found it, it was pretty easy.
176:21 - There was already a CSS, which was overwriting our CSS.
176:25 - It was in the app.css index.
176:26 - We have already cleared in the app.css.
176:28 - So just go ahead and remove everything.
176:30 - If you don't need anything at all,
176:31 - and this actually flushes out everything that we don't need.
176:34 - So really basic fix.
176:35 - And now we have a red button, we have a green button,
176:37 - it changes the things.
176:39 - So this is really nice that how we are actually
176:42 - able to do this in couple of ways.
176:44 - And again, saying that this is correct,
176:46 - or this is much more better, it's just an opinion.
176:49 - And I respect your opinion as well,
176:51 - in case you want to go with further,
176:53 - like, hey, no, this is my preference or something like that.
176:55 - Now, one last thing that we are going to go ahead
176:57 - and work on with this one is just let,
177:01 - let's add some of the colors onto this one,
177:03 - because I think that's also pretty good.
177:04 - So let's just go ahead and add a style to this one.
177:09 - And we'll be saying background color.
177:12 - And the background color that we'll be using
177:14 - is going to be red.
177:17 - Yeah, we can actually hard code this.
177:19 - And we can see this looks good, text could be changed.
177:23 - But again, not really bothered too much.
177:25 - And we'll be hard coding the value here as well
177:27 - on the green.
177:27 - Again, it's totally your choice, just visual aesthetic.
177:31 - The whole idea is to understand different perspective
177:33 - of how the things are being changed.
177:35 - So your role is really simple,
177:36 - just add a few more colors, maybe a red, green, blue,
177:40 - orange, red, pink, purple, violet, and put up a straight bar.
177:44 - All you have to do is copy paste the buttons.
177:46 - And again, remember, this is really important part
177:48 - of the 90, 10 or 80, 10 teaching,
177:51 - where initially I'll be giving you small assignments.
177:54 - If you will think that, hey, this is too easy,
177:55 - I won't be doing that,
177:56 - you will be lagging behind eventually
177:58 - for the bigger assignments.
177:59 - So do this assignment, tag me on Twitter, Instagram,
178:02 - LinkedIn, wherever you like.
178:03 - If you don't like that, it's okay too,
178:04 - but at least do the assignment.
178:05 - This will help you in improving your skills as well.
178:09 - So that is it, that is it, what we'll be doing.
178:11 - We'll be starting with absolute basic.
178:13 - This is the first project that we have done.
178:15 - Let's take down another project in the next video.
178:20 - All right, it's been a while.
178:22 - Yes, finally, I'm back on this channel as well.
178:25 - Hey there, everyone, Hitesh here,
178:26 - back again with another video.
178:28 - And in this video, we will continue our series
178:30 - on React.js, I'll walk you through,
178:32 - and we'll be building one project.
178:34 - Although at a first glance,
178:35 - this project might look absolute basic,
178:37 - there is nothing too much,
178:38 - but I'll walk you through with some scenarios,
178:41 - some of the experiences that I had,
178:42 - and together we'll be crafting this project
178:45 - like an expert will do.
178:46 - You will understand the good practices,
178:48 - bad practices of the React,
178:49 - and how even a smaller thing can change
178:51 - the entire overview of how the project should be built up.
178:55 - So welcome on board,
178:57 - and I expect just a minimum of 100 comments
179:00 - under this video so that I can get some moral boost.
179:04 - But hey, you are interested in this series,
179:05 - and I should focus more of my attention here.
179:08 - All right, so first let me share a simple my screen,
179:11 - and this is the project that we'll be building up.
179:13 - And you might be thinking,
179:14 - hey Hitesh, this is absolutely a simple beginner project,
179:17 - but trust me, there can be a lot of intricacies
179:20 - in this project, and together we can learn
179:22 - some of the good practices
179:23 - and how to approach this kind of project,
179:25 - what is the mental model required.
179:27 - So first, let's go through.
179:28 - So this project obviously is a simple password generator
179:31 - of a project, and in these kinds of password generator
179:34 - as a project, we can see we have some default length
179:37 - in our slider, we do have a slider here of course.
179:40 - And based on the slider, it generates a random password
179:44 - for me, which includes the upper and the lowercase letters.
179:47 - Now as I moved my, and first of all, if I refresh this,
179:50 - it actually gives me one initial password.
179:53 - So I need to learn that how can I actually run some code,
179:57 - which as soon as this component loads
179:59 - or this webpage loads up, it executes my code.
180:01 - That's the step one.
180:03 - When I touch any component and change its value,
180:05 - it actually reruns my code, the code that is responsible
180:08 - for generating the password and gets me that code.
180:11 - On top of that, when I have this number being clicked,
180:14 - it again reruns my code with all the previous values
180:17 - and the new values and generates me a password for that.
180:20 - If I include it again as a character,
180:22 - it actually generates all of this,
180:24 - again runs the code and gives me the password.
180:27 - On top of that, I can copy this,
180:30 - and it gives me that, hey, this was being copied.
180:32 - Now here comes some of the UX and UI elements.
180:35 - Now for copying anything,
180:36 - you don't need to highlight anything.
180:38 - That is the step one.
180:39 - But still, we gave the user a feel that yes,
180:42 - this entire thing was copied.
180:45 - This is kind of a user experience,
180:46 - and we need to learn about some of the hooks in React
180:48 - to give the user this experience.
180:50 - You can just click on the button and say,
180:52 - hey, this was copied.
180:52 - You might have seen in a lot of website,
180:54 - it just says copied at a tick mark.
180:56 - That could also have been done, but we went extra step,
180:59 - and we simply said when you click on copy,
181:01 - and we have copied it already,
181:03 - but on another line of code,
181:04 - we were able to highlight all of this piece that,
181:06 - hey, this piece was selected,
181:08 - automatically it came to your mind that,
181:10 - hey, I was able to do this.
181:11 - Now, the way how this project is going to be taken down,
181:15 - of course, we'll be using Tailwind CSS in that.
181:17 - We are not worried about the Tailwind.
181:18 - We will not talk about the CSS much.
181:20 - But if there would be a button here,
181:22 - which says generate password,
181:23 - then approach of taking down this project
181:26 - would be completely, completely different.
181:29 - Because when I have a manual button,
181:31 - which says generate a password,
181:32 - that means I am controlling the event,
181:35 - and the event will be controlled and executed
181:37 - only when I'm ready and only at one time.
181:39 - So in that case,
181:40 - my function is not going to be keep on running
181:43 - and keep on running.
181:44 - Here, the exact same function is keep on running,
181:46 - keep on running on just every single event.
181:49 - So there is a potential use case
181:50 - that we can optimize the things.
181:52 - And that's exactly what we're going to learn,
181:54 - how we can optimize when we have a similar kind of method
181:57 - executing again, again, with just minor changes.
182:00 - This is known as memoization concept,
182:02 - in which we can keep most of the execution
182:04 - of the methods in the memory,
182:06 - which saves us and ultimately our React app performs well.
182:10 - So this is quite a classy project
182:12 - that we'll be taking down.
182:13 - But if this would be a project where some UX guy says,
182:15 - hey, just add a button here,
182:16 - that would be better user experience,
182:19 - I have to actually rewrite the entire project
182:21 - with a different approach of optimizing it.
182:23 - If he says, no, we don't need a button,
182:25 - just remove the button and generate the password like this,
182:27 - then there would be a completely different approach.
182:29 - So when next time in your group meeting
182:32 - or your agile meeting something,
182:33 - somebody says, hey, this is a UX design,
182:36 - get this straight that it is going to take some time.
182:39 - All right, so this is the basic that we have.
182:42 - Let's go ahead and generate a new project
182:44 - and install CSS and whatnot onto this one.
182:47 - This is our technically fifth project.
182:48 - So we'll be just going forward with that.
182:50 - So let me just generate that.
182:53 - Pretty simple, we are going to say npm create wheat
182:56 - and we'll be going with the latest
182:59 - and we'll be saying this is our zero five project.
183:01 - So we'll be naming it as a zero five
183:03 - and we'll be calling it as password generator.
183:07 - Of course, React would love to,
183:10 - but not TypeScript this time.
183:12 - We'll be going with classic JavaScript.
183:14 - By the way, if you haven't checked out my TypeScript series,
183:16 - it's pretty awesome.
183:17 - Well-renowned, well-accepted by Twitter
183:19 - and free code camp and whatnot.
183:21 - So check it out, it's pretty nice.
183:22 - But in this case, we'll go with the JavaScript.
183:25 - Let's go into a zero five.
183:26 - Actually, what I can do here is a quick, neat little trick.
183:31 - I can just right click and open this
183:33 - as an integrated terminal so that by default,
183:35 - I'm always into this folder.
183:38 - And we can say npm install
183:41 - and this will install all the packages,
183:43 - hopefully pretty quickly.
183:45 - And we can just say npm run dev.
183:50 - Okay, till it's, okay, not taking much time.
183:52 - Okay, npm run dev, that's how we get there.
183:56 - And let's see how our project looks like default.
183:59 - Pretty classic.
184:00 - And we'll also go on to Tailwind CSS to get our Tailwind.
184:05 - We won't be discussing Tailwind too much,
184:07 - but at least we need Tailwind framework guides, wheat.
184:10 - I always go with the documentation
184:12 - and I highly, highly recommend to you also do the same
184:15 - because there might be some steps
184:16 - who might have changed eventually.
184:18 - We don't want to get into that one.
184:21 - So simply go ahead and, oh, we need to install it, my bad.
184:25 - Stop this one, paste it up here
184:27 - and this should generate a new file for us,
184:31 - which will be Tailwind config.
184:33 - That's exactly what we need.
184:35 - And let's go back.
184:36 - We need this exact set of instruction to be copied
184:40 - and let's go into this one.
184:42 - Let's copy and paste.
184:44 - So now my content is aware
184:46 - that I'll be writing my Tailwind CSS
184:48 - in either the index file or in the source.
184:51 - All the JSTS might include some of the TypeScript.
184:54 - Tailwind, not TypeScript.
184:56 - And we'll be copying this one.
184:58 - All right, so this needs to go into CSS, your core CSS.
185:01 - So open up this.
185:02 - We'll be opening up main index.css,
185:06 - remove everything else and paste it up here.
185:08 - That's all what we need.
185:09 - We won't be needing anything inside the app CSS as well.
185:13 - We can actually go ahead
185:14 - and probably can remove this one as well.
185:17 - This will give us a necessary paint later on.
185:19 - So we'll just remove this one.
185:21 - All right, now technically our CSS should be all okay.
185:25 - We should be able to run it.
185:27 - Let's go ahead and run the command.
185:29 - First NPM run dev.
185:32 - All right, so it says nothing as of now,
185:35 - but let's go ahead and try out
185:36 - if we can have some of the CSS
185:38 - and everything up and running.
185:40 - Let's go into index.html.
185:43 - And what I'll do is I'll add some of the class here as well.
185:46 - I'll say BG dash gray.
185:50 - Gray, okay, suggestion.
185:53 - Okay, this one gray.
185:54 - Let's go with 800, yep.
185:57 - Okay, so at least our CSS is up and running.
185:59 - So no problem there.
186:01 - At least one of the task is all done
186:02 - that we have this whole thing.
186:04 - The next thing what we're going to do is
186:06 - let's go into app.jsx and take down this project
186:09 - by first removing all the unnecessary stuff.
186:12 - It's necessary, but we'll remove that.
186:14 - Let's have a basic h1.
186:17 - Let's have a basic h1 that says setup ready.
186:21 - I don't like to skip any steps
186:22 - so that you can also follow along,
186:23 - pause me in the meantime
186:25 - and can just set up your steps as well.
186:26 - I don't like to bring in any code from the GitHub.
186:29 - I initially, at least that it feels like a magic
186:32 - is happening or it's not like that.
186:34 - So we'll go this time BG dash red,
186:37 - suggestions red 400 to just check it out.
186:41 - Yep, it's looking good.
186:42 - Things are all done and all good.
186:44 - Now, first of all, how we're going to take down this project.
186:47 - Now we will be needing a couple of states
186:49 - so that we can manipulate things
186:51 - based on whatever the values are getting changed.
186:54 - And it's pretty obvious to check out from the previous ones.
186:57 - It actually refreshed all of the pages,
186:58 - but we still have a picture and a photo
187:01 - that hey, this is what we're about to build.
187:03 - So the first thing that we're going to need is
187:05 - we need a length so that we can monitor
187:07 - how much the input box is being scratched.
187:10 - And you want 10 characters, 15 characters,
187:13 - how much you need.
187:14 - We need something as is numbers allowed.
187:16 - We also need is special characters allowed.
187:18 - And we need a state of password as well.
187:20 - Because if you notice in the input field,
187:22 - the password was being displayed.
187:23 - So we need a state for that also to maintain.
187:26 - So a couple of states, we need that.
187:27 - So let's go ahead and work on with this.
187:29 - So first of all, let's go ahead and have a simple length.
187:32 - So we'll just go ahead and say that hey, we need a length.
187:35 - This will help us to monitor the length.
187:37 - By default, we won't be going 20, that's too much.
187:39 - We'll be going just with the eight.
187:41 - Feel free to change it, no problem at all.
187:43 - This is my password length.
187:45 - Now I'll be needing is number allowed
187:47 - or is character allowed.
187:48 - That will be just a Boolean value to figure out
187:50 - whether are allowed or by default they are set or not.
187:53 - So we're going to say const
187:54 - and we're going to say number allowed, allowed.
188:00 - And suggestions, yep, numbers allowed.
188:02 - By default, no, not true, I'll be getting false.
188:04 - By default, they are not allowed.
188:06 - Similarly, we'll be having our symbols allowed.
188:08 - So we'll be calling as characters, special characters.
188:14 - It's totally up to you how you want to rename that.
188:16 - Set character allowed, we'll be getting a false.
188:20 - And these three are my states
188:22 - based on which things will be changing.
188:24 - But once the password is generated,
188:25 - I need an input box where I'll be setting all this one on.
188:28 - So I'll call this one as password,
188:29 - the actual password that we'll be generating.
188:31 - So I'll be saying password and that will be set password.
188:34 - Initially, that will be empty.
188:36 - All right, so now that I have all these,
188:38 - I'm not worried about error case and all of that.
188:41 - This is all good, what we have right now.
188:43 - Let's take care about how we are actually returning
188:46 - the value because there is a lot of CSS,
188:48 - I'll be copying and pasting them.
188:49 - This is not a CSS or a Tailwind class,
188:51 - so I'll be directly just putting things up
188:54 - and we'll be just directly enjoying the CSS
188:56 - that I have here.
188:58 - Okay, so let's remove all of this.
188:59 - We'll be having a simple div.
189:00 - In this div, I have some of the classes
189:03 - that I'll be directly grabbing and pasting from my notes.
189:07 - Again, reminding you that we are not here
189:08 - about the Tailwind.
189:09 - This is just a boilerplate for us.
189:12 - You can have your password generator
189:14 - with completely different look, completely different theme.
189:17 - We don't really care.
189:18 - After this, we will be having a simple H1
189:20 - which says password generator,
189:21 - but I do have my classes for this one as well
189:25 - to make it look almost similar to what we have.
189:27 - So we'll be just pasting this one.
189:29 - Now, once we have this password generator as here,
189:32 - we'll be having a div section,
189:34 - which will be responsible for holding our input box
189:38 - as well as the button, the copy button that we have.
189:41 - So let's have first this div up here.
189:43 - And obviously we'll be having some of the classes here.
189:46 - Let me grab the classes again.
189:47 - These are just the flex boxes classes that we have.
189:50 - Nothing too much fancy.
189:51 - So flex, shadow and all of that.
189:53 - So that button can be on the left side,
189:55 - input box can be on the left side,
189:56 - button could be on the right side.
189:58 - That's all what we have.
189:59 - Now what's interesting here is
190:01 - the first thing is going to be an input box.
190:03 - So let's go ahead and grab an input.
190:06 - It can be of type text, so no problem there.
190:08 - Let me just move it on to the next line.
190:11 - Now what next comes up is very interesting.
190:14 - We should really discuss that.
190:15 - First of all, value.
190:17 - The default value is going to be password.
190:18 - As of now, it's a default empty state.
190:20 - So we'll be keeping at that as it is, no problem.
190:23 - It will be having some of the classes as well.
190:25 - Nothing too much.
190:26 - We do have just a couple of ones.
190:27 - Outline is going to be none.
190:29 - No, not that much.
190:31 - Let me just grab the other ones as well from the notes.
190:35 - All right, that's it.
190:36 - Again, classes are not to be discussed.
190:38 - They are very basic CSS kind of stuff.
190:41 - Let's also place a placeholder which says password.
190:44 - Great.
190:45 - This will be a read-only field
190:46 - so that nobody can actually come into it
190:48 - and keep on writing.
190:50 - We'll be keeping it as read-only.
190:51 - We'll be filling it from the programmatical aspect only
190:54 - and we'll be keeping it that much added.
190:56 - Now one more thing I'll be passing it on here
190:58 - which will be used later on.
191:00 - This is known as ref.
191:01 - And this reference is going to be
191:03 - some kind of a password reference.
191:04 - That will be variable.
191:05 - We will be discussing about this later on.
191:07 - But just to keep an idea
191:08 - that what's coming up in the future,
191:10 - yes, we'll be talking about reference,
191:12 - but not right now.
191:13 - It is there in the process as well.
191:16 - Okay, after this, we'll be having a simple button.
191:18 - So let's go ahead and have a button.
191:20 - This button is going to just say copy.
191:23 - Now, of course, not just copy.
191:25 - We do have CSS for this one as well.
191:26 - So let's just go have some class name as well.
191:30 - And the class names.
191:32 - Copy that and paste it up there.
191:34 - Okay, so this is the button that we have.
191:36 - So you can see that yes,
191:37 - we are first generating all of this.
191:39 - Don't you worry, eventually,
191:40 - as we move on to the complex project,
191:42 - I'll be giving you these notes file
191:45 - so that you can directly copy and paste them
191:47 - and you don't have to worry painfully sit here,
191:50 - watch me just writing the CSS.
191:54 - We are here to enjoy React,
191:56 - not these button making designs and stuff.
191:59 - All right, so this is the first part of my dev.
192:03 - The second part or the second dev that I have
192:06 - also have some of the classes as well.
192:07 - So that to forget there and we'll be having class name.
192:15 - All right, let's add more of these classes in here as well.
192:18 - So first of all, let's go ahead and copy and paste this.
192:24 - Inside this also, we do have some more devs.
192:28 - Okay, what can I do?
192:29 - We have to go through with this at least once here.
192:32 - Let's add the class names and then we'll be having,
192:35 - this is how we designed it.
192:36 - What can I say?
192:37 - And then once I'm inside this,
192:39 - then comes the important part which we need to discuss,
192:41 - which is the input field.
192:42 - So this input field is going to be of type range
192:45 - because that's the first one we actually worked on with.
192:48 - So this range is very interesting.
192:50 - We can actually decide how much the range can go
192:52 - in all of these things.
192:53 - We can decide the name and IDs and whatnot.
192:56 - Let me just move them on to the next line
192:58 - so that we can have a discussion.
192:59 - Okay, so first of all, we have type.
193:01 - We can define the min and the maximum into this one.
193:04 - So minimum, let's just say we need six characters
193:06 - of the password to be generated.
193:08 - And the max that user can actually drag and drop,
193:11 - it's totally up to you.
193:12 - You want 20 characters, you want 100 characters,
193:14 - that's totally liberty on your own.
193:16 - This requires a value property as well.
193:18 - The value is going to be governed by the length itself
193:22 - so that anytime I can go ahead
193:24 - and grab the length of the value itself.
193:26 - Then obviously, we'll be having some class here as well.
193:29 - What can I say, classes are there.
193:32 - We'll be having cursor pointer.
193:34 - On top of this, we'll be having an on change
193:36 - because as soon as something change into this one,
193:39 - we need to fire up an event.
193:41 - The event is going to be simple,
193:42 - set length to the new values.
193:43 - So set length is a method which governs
193:47 - or which regulates how you can enter data into the length.
193:51 - So we are using that based on an event.
193:53 - And whatever the event.target.value is,
193:55 - we are actually setting that value into the length.
193:58 - Pretty clear explanation.
194:00 - Once we have this input, then after that,
194:02 - we just have a simple label, which actually says,
194:04 - hey, this is length or something like that.
194:06 - So we'll be having a label.
194:08 - And this one is for HTML for, for label, I guess, length.
194:14 - And we'll be putting up length.
194:16 - Not only that, we'll be actually parsing
194:18 - a value of length as well,
194:20 - so that user know that how much the value exactly is.
194:23 - So if I go ahead, save this up here,
194:25 - notice here so that the length actually is here
194:27 - and it changes that.
194:28 - So this thing is actually going into my state as well.
194:31 - That's the one thing which we are pretty interested about.
194:34 - Once we have this one,
194:37 - this entire thing as the labels and stuff,
194:40 - we'll be having one more of the div.
194:42 - Actually, we are actually copy pasting this div now.
194:45 - Copy and paste this div again.
194:49 - This time we don't have any input field like this.
194:53 - Okay, so this one looks good.
194:56 - And what we need is just an input box
194:58 - which is going to have a check box.
195:00 - So I can actually remove all of this.
195:03 - We don't need a label for this one or do we need?
195:05 - Well, check, we will be needing a label, yeah.
195:07 - Okay, so this one is input of type check box.
195:12 - And again, we don't need to worry about names and whatnot.
195:16 - Just give me a second, I'll just fix this quickly.
195:20 - All right.
195:21 - Okay, now this is the input box which is a check box.
195:25 - So what is the default value first of all?
195:27 - So the default checked is a parameter
195:29 - and we can just simply govern it by our state
195:32 - which is number allowed.
195:33 - Now on this, we can put up IDs and on whatnot.
195:36 - But most important part is
195:37 - what happens when something changes.
195:39 - So we need to actually have this on change.
195:42 - So we'll be having on change.
195:43 - This is a simple event that is triggering.
195:46 - And this is how it works.
195:49 - And we'll be firing up a callback onto this one.
195:52 - And then inside the callback, we'll be saying that,
195:54 - hey, I am going to take care of this one.
195:56 - This input box is going to be governing the number itself,
196:00 - the check box for the number.
196:02 - So I'll be using set number allowed through this.
196:05 - And here's the most important part.
196:08 - I'll be using a callback here.
196:09 - So in each of these state, you actually receive a callback.
196:12 - You can directly manipulate the value.
196:14 - But if you use a callback in here,
196:17 - that's a guarantee that you can actually use
196:19 - the previous value and all the changes properly propagate.
196:23 - We actually discussed that briefly
196:25 - in the last video as well.
196:26 - So we'll be using the same thing.
196:28 - We'll be using a callback here
196:29 - so that whatever the previous value is,
196:31 - we can call this one as prev,
196:32 - or you can call this value.
196:34 - Whatever you like to call this,
196:35 - this is just a placeholder.
196:36 - So previous value, whatever that is, true or false,
196:38 - we want to just reverse it.
196:39 - So we'll be just reversing it.
196:41 - Now we could have directly just send here true or false,
196:44 - but that doesn't serve our purpose.
196:45 - We want to pick up the previous value that is being there.
196:48 - And then we want to do this.
196:50 - Now these changes could be really quickly.
196:52 - A user can just keep on clicking there, click, click, click,
196:54 - and sometimes React might not react that fast.
196:57 - And it might think that, hey, that was the previous value.
196:59 - So in order to make sure that React actually React,
197:02 - we are using a callback here.
197:03 - So this is really good practice here
197:05 - and kind of a high level code that we have.
197:08 - We probably don't need name and all these IDs,
197:10 - but it doesn't really harm anything.
197:11 - So we'll be just skipping them.
197:13 - We'll be having a label.
197:14 - This one is for numbers.
197:15 - So we'll be just saying number.
197:18 - And this one will be a label for numbers.
197:23 - Okay, so we have numbers just like that.
197:25 - If I can write that better.
197:27 - Numbers, so there we go.
197:29 - Now you got this.
197:29 - You understand the proper use case and everything for this.
197:33 - Rest of these elements are just one.
197:35 - I'll be just copying and pasting this
197:37 - so that we don't have to talk about the things
197:39 - again and again.
197:40 - Exactly same thing.
197:42 - Probably we have got some.
197:46 - We need to actually write this manually
197:48 - because it might give us some of the issues.
197:52 - This one is character for input.
197:54 - And let's hit refresh.
197:57 - Okay, so looks like we need to hit a command Z
198:00 - couple of times.
198:02 - Probably this is having an issue with us.
198:04 - So let's just minimize this.
198:07 - Minimize this and actually just copy and paste this one
198:11 - so that copying and pasting sometimes gives you error.
198:15 - And okay, now it's back.
198:19 - Now it's back.
198:20 - But we have this numbers here.
198:22 - So we need to actually write the code ourself.
198:25 - Okay, checkbox.
198:26 - Your default value is going to be character allowed.
198:30 - On change, I'll be changing the set character allowed.
198:34 - And I'll be taking the previous value,
198:36 - reversing it, name ID, that's okay.
198:38 - HTML, this one is for character.
198:42 - Car input.
198:43 - And this one is for character.
198:47 - Now this should be okay.
198:50 - Okay, at least our UI part is all done
198:52 - and we are happy with this one.
198:54 - Hopefully, whatever happy we could be.
198:56 - Okay, so the UI part is all done.
198:59 - Now let's go ahead and see that how we can work
199:01 - on the logic part of this one.
199:03 - The logic part is actually fairly straightforward.
199:06 - There shouldn't be too much worried about this.
199:08 - Let's first assume that there is a button
199:11 - and on this click of a button,
199:13 - we will be generating a password.
199:15 - All right, so in that case,
199:17 - I'll be simply writing something like this,
199:19 - const generate password.
199:20 - This is my generate password method
199:22 - and I'll be generating a password.
199:24 - And in here, I'll write the logic for it.
199:27 - We'll discuss about the logic part as well.
199:29 - But what I really want to bring your attention in here
199:31 - is this same thing is actually being done
199:34 - again and again and again.
199:35 - And if some kind of, if similar kind of a situation
199:39 - is there in your project as well,
199:40 - then go ahead and do study this one hook
199:43 - which is used, known as use callback react.
199:47 - This is one great hook which you can utilize.
199:50 - And notice here, use callback is a react hook
199:52 - that lets you cache a function definition
199:54 - between re-renders.
199:55 - That's exactly what we are doing.
199:57 - We are re-rendering, but not only re-rendering,
200:00 - the majority portion of our function is exactly same.
200:03 - Yes, there are some values which are getting changed,
200:05 - true, false and all of that,
200:06 - but majority of the function is exactly that.
200:09 - So it uses under the hood some techniques
200:12 - known as memoization.
200:13 - That's a great technique.
200:14 - Almost all of the programmers knows about it.
200:17 - If you're not aware of it,
200:18 - then please go ahead, learn about it.
200:20 - It's a fun technique, especially helpful in DSA,
200:23 - data structures and algorithm.
200:25 - So we'll be using this one.
200:26 - Using this is exactly like this.
200:28 - You use a use callback just like this and that's it.
200:32 - You passed on your things as a callback just like that.
200:35 - So pretty easy to work on with this one.
200:37 - So let's go ahead and apart from use state,
200:39 - we'll be using use callback just like that.
200:42 - Now previously I was about to create a function
200:45 - which will generate password.
200:46 - This looks like a regular function.
200:48 - How can I convert this regular function
200:50 - into a use callback hook?
200:52 - You don't have to do anything there.
200:54 - And what I want to do is just simply use callback.
200:58 - And this use callback works just like this.
201:01 - This is your regular use callback.
201:03 - Now inside this, use a simple callback, that is it.
201:07 - That's it.
201:08 - All the rest of memoization and optimization
201:10 - is done by the React itself.
201:12 - Now you might be wondering that why we are actually
201:14 - holding the reference into a variable of this method.
201:18 - Yes, great question.
201:19 - Because only and only one reason,
201:22 - as soon as my page renders,
201:24 - I want something to generate my password.
201:26 - So as soon as the component loads or the page loads,
201:29 - I want another hook to execute this method.
201:32 - If I don't have a reference of this,
201:33 - how will I pass it and say that, hey, run this method?
201:36 - So that's exactly what we are doing here.
201:38 - All right, so let's go ahead and first take care of this one.
201:41 - So in here, what we're going to do is first,
201:43 - let's use a pass for password short,
201:45 - and we'll be taking it as an empty string.
201:47 - Later on, we will use this exact variable
201:49 - and push it into this password state,
201:51 - so that state updates.
201:52 - All right, let's also go ahead and say this is my string.
201:56 - And what does the string has?
201:58 - Nice suggestion there,
201:59 - but we'll be removing some of the elements into it.
202:02 - Our string is composed of only the numbers,
202:06 - alphabets technically, all uppercase and lowercase,
202:09 - that's our string.
202:10 - Now conditionally, we have to append this string
202:12 - whether to include numbers or not.
202:15 - So let's just do a quick check on this one.
202:17 - So we'll be checking if, whatever the state,
202:20 - if numbers allowed is true,
202:22 - then what we're going to do is we can just use a one-liner,
202:25 - we can just append this with all the numbers.
202:27 - Similarly, if characters are allowed,
202:30 - we can just append our string with all the characters
202:32 - that you think I want to include in my password.
202:35 - Very simple, based on if and else case,
202:38 - our string is getting updated.
202:39 - The string is consisting of all the uppercase
202:42 - and lowercase letters, that's the default.
202:45 - If somebody check marks the number allowed,
202:47 - we will be adding numbers to the string, appending it.
202:50 - If the characters are allowed,
202:52 - then we will be appending these characters,
202:54 - totally depends on us.
202:56 - Now the next thing is we have to loop through
202:58 - all of this string.
202:59 - Now assume that this all numbers
203:01 - and everything are inserted here.
203:03 - We just need a loop and this loop will be running
203:06 - as many times as the character length is being set.
203:09 - Based on this, based on those random numbers,
203:12 - I'll be picking up the characters from the string
203:14 - and will be inserting into the pass,
203:16 - this password that I've added.
203:18 - So pretty simple.
203:19 - Let's go ahead and use a simple for loop for that.
203:22 - Thank you so much, but I'll be writing that again
203:25 - because I think that will help a lot of us
203:27 - to understand what's going on in here.
203:30 - First of all, we just simply had a for loop
203:32 - which starts with i equals zero.
203:34 - We will not start with zero because I think
203:36 - I'll start with one as a character.
203:39 - The length will be exactly length.
203:41 - This length is actually coming up from our state,
203:43 - this length, so that's good, that's nice.
203:46 - And we are just increasing this.
203:48 - Now once I'm into this,
203:49 - I want to generate a random character.
203:51 - So I'll be just saying that, hey, I want to generate it.
203:53 - So math dot random generates this random string
203:57 - and the string that I want to generate
203:59 - is going to be string dot length.
204:00 - The character I want to generate
204:02 - is based on how much my string length is,
204:05 - string character length.
204:06 - Once I have this, obviously I want to add one to it
204:10 - because it might generate a random number
204:11 - between zero and to the number.
204:13 - I don't want zero, so I'll just shift it to one.
204:15 - So that is how we are working in.
204:17 - But this actually sometimes generate the number
204:20 - which is not in the round digits.
204:22 - So we want a natural number.
204:24 - We'll be wrapping this up and we'll be saying math dot floor.
204:28 - This is a classic technique of generating numbers
204:31 - between a range A, range X and Y.
204:34 - When you'll be building examples like dice rollers
204:37 - or something like that or gambling app maybe,
204:39 - then in all those cases, you will be using this quite a lot.
204:43 - Let's hold the reference.
204:45 - So we'll be saying const char.
204:48 - This is just a random number.
204:50 - So far we haven't done anything.
204:51 - We have just generated a random number
204:54 - and that number we are storing at a char variable.
204:56 - Simply you can call this one as index as well.
204:58 - No problem there.
204:59 - Now we'll be taking this pass
205:02 - and we will be appending that plus equals.
205:04 - And in that string, we have a method known as character at
205:08 - which gives me, I can find a character at a position.
205:11 - So this char here is acting as an index.
205:13 - So index, we are actually having that pretty good.
205:16 - Now we can actually pick, let's just say it comes to five.
205:18 - So we can start with zero and we can get a five here.
205:20 - So pretty simple, pretty easy.
205:22 - Now, once we are done with this,
205:23 - once we are out of the loop,
205:25 - make sure you are out of the loop.
205:27 - Then we can just use a method known as set password.
205:31 - And this is governing the password.
205:33 - So I can pass my password to this one.
205:36 - And this will be changing this state here.
205:39 - And now we have a fresh password here.
205:42 - That's great.
205:43 - That's so far fantastic.
205:44 - And now we are working everything.
205:46 - But there is one more thing attached to this one.
205:49 - If you study this use callback hook a little bit,
205:51 - you'll notice that this use callback has two parts of it.
205:54 - First is this callback, which we have studied.
205:56 - And this is a dependency array.
205:59 - These dependencies should not change too much,
206:03 - but based on if you want to rerun the methods or something,
206:06 - you can actually go ahead and just have this
206:09 - so that all the optimization are done in this one.
206:11 - So we'll be providing some of the dependencies array
206:13 - that based on this, make sure all the dependencies are there.
206:16 - So obviously if the length is changed,
206:18 - make sure the optimization is done with that.
206:20 - Numbers allowed, characters allowed.
206:22 - So based on all of this, almost kind of a similar,
206:24 - you can memoize that and work on with that.
206:27 - We don't really get into the nitty-gritties
206:29 - of this dependency array.
206:31 - We'll talk about again in this in a use effect hook.
206:34 - But again, remember, this is really simple.
206:37 - As long as these dependencies don't change too often,
206:40 - they can change once or twice,
206:41 - but they're always exactly same.
206:44 - So once you say number is there or number is not there,
206:46 - there are only two cases.
206:48 - If it keeps on changing the states like that crazily,
206:50 - then obviously your code will absolutely burst.
206:53 - I'll show you that case as well.
206:54 - But the whole idea is,
206:55 - as long as they don't change too frequently,
206:58 - that is the keyword here.
207:00 - Okay, notice here, there are a couple of that.
207:02 - Shipping will receive the same props
207:04 - and can skip re-rendering and all of that.
207:06 - So this is all what is happening.
207:07 - Okay, so now that our method is all done,
207:10 - that okay, things are great.
207:12 - Now what we want to do?
207:14 - Based on some of the factors, I want this method to run.
207:18 - Okay, what are those factors?
207:20 - First of all, if somebody go ahead and touch this length,
207:23 - I want to rerun the method.
207:25 - As soon as the page loads, I want to run this method.
207:28 - As soon as somebody touch this number,
207:29 - I want it to rerun.
207:30 - As soon as somebody clicks on the characters,
207:33 - I want it to rerun.
207:34 - In these cases, a hook that we can use here
207:38 - and React is all about hooks.
207:41 - Another hook that we have is useEffect.
207:43 - This is one of the most used hooks
207:46 - in the entire React project.
207:48 - And this allows you to actually run a piece of code
207:52 - based on variety of scenarios,
207:54 - like as soon as the component is loading,
207:56 - there's offloading as well,
207:57 - but right now we'll not go into that much.
207:59 - But as soon as you want something to happen,
208:00 - as soon as component is loading or mounting,
208:03 - then this useEffect hook is being used.
208:06 - Using the useEffect hook is pretty simple.
208:07 - You just simply go ahead and say useEffect.
208:09 - We have imported that.
208:10 - That is it.
208:11 - That is your useEffect.
208:13 - Now inside the useEffect, you get two thing again,
208:15 - a callback.
208:16 - So we get a callback like this.
208:17 - And the second part is the dependency array.
208:19 - This time, we don't want things.
208:21 - This is opposite of use callback.
208:23 - In use callback, we say, hey,
208:24 - as long as things don't change too frequently,
208:26 - we actually use that.
208:28 - But in the useEffect, you want to run the method
208:30 - intentionally as soon as something changes.
208:32 - So all the methods that you want to give,
208:34 - you should give that in the dependency array,
208:36 - that hey, if anything changes in these particular things,
208:39 - we would like to rerun our entire password generator.
208:43 - So what are those things?
208:44 - If the length changes, yes, please rerun this.
208:46 - If the numbers allowed changes, yes, I want to run this.
208:50 - If character allowed changes, yes, I want to run this.
208:53 - And as well as if there is any change
208:55 - in password generator code or something,
208:58 - you can rerun that.
208:59 - The good thing is, I don't have to say a single thing
209:02 - as soon as the page loads automatically 100%
209:05 - the useEffect runs.
209:06 - Even if you pass nothing inside that,
209:08 - at least one time, all the code that you're mentioning
209:10 - in the useEffect hook, it runs.
209:12 - That's why it is used.
209:13 - So we'll say password generator.
209:16 - Where is our password generator?
209:17 - Generate password.
209:18 - And we'll just execute that.
209:21 - So that is how you actually run this.
209:22 - Now let's go back.
209:23 - As soon as I run this, notice here on the reload,
209:25 - it actually generates the password for me.
209:27 - As soon as I change this and keep on changing,
209:29 - it runs the code.
209:31 - If I run this, it still reruns the code.
209:33 - And best part is this project is optimized.
209:36 - But the statement here, which says,
209:39 - as long as these dependencies don't change,
209:41 - what happens in that case?
209:43 - I know that there is one dependency
209:45 - which is going to change like crazy.
209:49 - For example, this password is changing.
209:52 - This is changing too frequently,
209:53 - and there is no way of your storing these state in this,
209:56 - because every time it's random.
209:58 - So if you somehow give this password here,
210:01 - because this is changing quite a lot,
210:02 - notice here, if you give this password,
210:05 - it will just get all crazy.
210:07 - And this is not a way how it should be done.
210:10 - So you should not be actually using this one
210:12 - as a password in parameter.
210:14 - That would not be a great thing.
210:16 - So that's why we actually don't use this password here.
210:18 - And that's why we omitted that.
210:20 - It is not going to help you
210:22 - to actually generate all these things.
210:23 - So yeah, not a good idea to add a password here,
210:25 - because that's always changing.
210:27 - And that's why we actually didn't gave it there.
210:30 - Okay, almost our job is done,
210:31 - but there is one more thing.
210:34 - This button is not yet working.
210:36 - This button is not working.
210:37 - So how we can make this button working?
210:39 - Pretty simple, just go to your button.
210:41 - If I can find that, give me a second.
210:44 - Yes, I'll find it.
210:46 - And yeah, here we go.
210:48 - Found it, found it.
210:50 - So on this, I want to have a simple on click event.
210:54 - And on this on click,
210:55 - I'll just say copy password to clipboard.
211:01 - Clipboard, there we go.
211:03 - Now in order to just copy the password,
211:05 - there is not too much of the code that I have to write.
211:08 - A simple copy password to clipboard, just like that we have.
211:12 - And in order to copy the password,
211:14 - all I have to do is window.navigator.clipboard.write text
211:22 - and password.
211:24 - So it's going to just grab the clipboard and write text
211:27 - and we'll be grabbing the password just like that.
211:29 - So as you can see,
211:31 - there is nothing too much going on with this one,
211:33 - but hey, what is this write text
211:36 - and how you can actually go ahead and find this?
211:39 - Yeah, that's an interesting question.
211:40 - So let me answer this one first.
211:43 - So technically what we are doing in this one is
211:46 - there is no access that we are taking
211:48 - from the UI or this browser itself.
211:50 - So if you go into the browser, if I refresh,
211:54 - okay, what happened there?
211:56 - And there should be some errors.
211:59 - Let me just quickly check that.
212:01 - Right click, inspect and console.
212:03 - Okay, copy password to clipboard is not defined.
212:06 - I defined it.
212:07 - Copy password to clipboard.
212:09 - Probably I'm making a mistake here.
212:12 - Let's go back and paste it, save it.
212:16 - Yeah, there we go.
212:17 - Hopefully everything is resolved and yep.
212:20 - Now we can maybe minor mistake, okay.
212:23 - So as I was saying, notice here in this particular method,
212:26 - what we're doing is we are not taking access
212:28 - to any of this element.
212:30 - We know that our final password
212:31 - is actually in our state password.
212:34 - So why don't just grab it from there?
212:36 - That makes more sense.
212:37 - So we're using a window object
212:39 - in which we always have a navigator
212:40 - and this is your clipboard.
212:42 - Through the browser, you are actually accessing
212:44 - what's there in your clipboard.
212:45 - This is exactly how you do copy and paste
212:47 - in all of the application.
212:48 - It has a couple of methods.
212:50 - If you go ahead and just check out this clipboard,
212:52 - it has a lot of methods to write and read and whatnot.
212:55 - There is even a read method as well.
212:58 - A read text, read, read only, there's a lot of methods.
213:04 - I don't want to go into too much detail of that.
213:07 - There's a read method.
213:07 - Yeah, there's a read, you can read the text as well.
213:10 - But what I want to do is I want to use the write text
213:13 - and inside when I use write text,
213:15 - I'm basically writing in your clipboard
213:17 - so that whenever you paste that, the text is available.
213:20 - So if I can just go ahead and use this
213:22 - and if I copy this and I change this again,
213:26 - let's just say a really long string,
213:27 - it has numbers as well and I copy this
213:30 - and I come onto this new tab and I paste this,
213:33 - hey, this copies.
213:34 - So that means my job is done.
213:35 - That means my job is done.
213:36 - But you will also find that majority of the time,
213:40 - some of the UI, UX guys comes to you that,
213:42 - hey, all that was copied, but user needs feedback.
213:45 - The feedback's totally dependent on you.
213:47 - Maybe once the copy is done,
213:49 - you might want to change the text.
213:51 - You might want to store the button text
213:53 - into some state itself and want to manipulate that
213:56 - based on whether the copy text was copied.
213:58 - And after some time you want to re-change it,
214:00 - there's a lot of ways how it is done.
214:02 - What we have decided in this case
214:04 - is we are going to actually select this whole thing
214:06 - so that user gets, okay, this was copied.
214:09 - Now it's not easy to do this.
214:10 - That's why we have chosen this.
214:12 - In order to do so, we actually need somehow a reference
214:17 - of this input field.
214:18 - And that's why I told you earlier
214:19 - that we'll be using something known as a reference.
214:22 - So for this, there is another hook
214:24 - that we are going to learn in this one, which is use ref.
214:27 - This use ref is a crazy powerful hook
214:30 - if you want to grab anything from the windows.
214:33 - Not only just this,
214:34 - I'll talk probably at the end of the series
214:37 - but how crazy this hook can be.
214:38 - And we'll go into this one.
214:40 - The usage is pretty easy.
214:42 - There are multiple users, by the way.
214:44 - You can do a lot of things.
214:45 - You can even find out how many times your page was loaded,
214:48 - reloaded, there's a lot of things that can be done.
214:51 - So what we're going to do is in this one,
214:53 - we'll be just passing on a simple password ref.
214:58 - You can name this anything and just use it like this.
215:00 - Now in this, you can pass on any variable, null zero one.
215:04 - In this case, we are not much worried about this
215:07 - because we have nothing to do
215:08 - with what is the value inside here.
215:10 - We just need a password reference here.
215:12 - Why so?
215:13 - Simply to just go into my HTML, which is generating
215:18 - and provide a ref tag known as password reference.
215:21 - Now, once I actually provide a ref here
215:23 - with the password reference,
215:24 - now in anywhere in my application,
215:26 - I can grab a reference of this input field.
215:29 - There are multiple input fields.
215:31 - I need to define which one I'm grabbing
215:32 - or which one I'm actually talking.
215:34 - I need to find the context of it.
215:36 - But now that I have this one,
215:38 - I can actually use this in my code.
215:40 - As soon as user has done the copied,
215:42 - let's do some of the fun stuff with him.
215:44 - So we'll just take this password reference
215:46 - and I can just go ahead and find out that,
215:47 - hey, what do we want to select?
215:49 - So I can just go ahead and say,
215:50 - hey, I want to have a current
215:52 - and not the focus in this case.
215:54 - But if I have the access to this reference,
215:57 - I can, by the way, directly go ahead and say,
215:59 - I want to select this.
216:01 - There we go, select.
216:03 - This is going to do majority of work.
216:05 - If I copy this, notice here it selects.
216:07 - But it is recommended that sometimes
216:09 - you might not have the reference properly.
216:11 - Hydration might have not done.
216:12 - And there are a couple of cases.
216:14 - So if you have the current value there,
216:16 - then optionally go ahead and select this.
216:18 - This is just a safety net.
216:19 - If you put this, great.
216:20 - If you don't put it, no worries there at all.
216:23 - Now, not only this, actually does our job.
216:25 - Our job is actually finished.
216:26 - But if you want to learn more about it,
216:28 - then you can just learn more about
216:29 - how to select the ranges and all of that.
216:31 - You can, by the way, work on something like this.
216:33 - I have a password reference
216:35 - and I can have a set selection range as well
216:38 - from zero to all the values.
216:39 - Or maybe you want to have a selection range of zero to four.
216:42 - For some reasons, I don't know why.
216:44 - But maybe that's your use case.
216:45 - So you copy that and only four of the values
216:48 - will be selected.
216:49 - No, not the set selection range.
216:51 - Zero to 99 and all of that.
216:54 - So it should be all done.
216:56 - Okay, so somehow it works like that.
216:59 - We are not interested in those selection,
217:01 - set selection range as of now.
217:03 - We want to select everything.
217:04 - So we'll be just going back
217:05 - and we'll be working on with this one.
217:07 - So this actually gets the job done.
217:09 - Majority of our work that we are working on.
217:12 - And now we can actually have any characters
217:14 - and stuff like that.
217:15 - I think 100 is too much.
217:17 - But we can just copy this.
217:18 - It not only copies, but gives the user a feedback.
217:21 - And the only guy which helped us to set this feedback
217:24 - is actually this password reference here.
217:27 - The use ref hook.
217:29 - So in this just one basic project which looked so much easy,
217:32 - we actually talked about the use callback.
217:35 - We talked about use effect.
217:36 - We talked about use ref.
217:38 - And probably we can talk about a couple of more
217:40 - of these elements as well.
217:42 - So yes, things can be really, really complex
217:46 - even when they look very basic.
217:48 - It's all about the mindset and the approach
217:50 - that you are taking to finalize or finish up a project.
217:53 - Within just what 40 minute ish,
217:56 - we were able to finish this entire project.
217:58 - But we learned so much.
217:59 - But your job doesn't finish just right here.
218:02 - You need to go on your own and study a little bit more
218:04 - about use ref hook, use a state hook, use effect hook,
218:09 - callback hook, there are too many use.
218:11 - But at least you got an introduction to this.
218:13 - So spend next two to three days
218:14 - in exploring more about these one.
218:16 - And definitely I'll be coming back in the next video
218:19 - with the next project
218:20 - and we'll be having so much more discussion.
218:22 - If you haven't hit that subscribe on my channel,
218:24 - go ahead, hit that subscribe.
218:26 - And I'll be bringing more content to this.
218:28 - Show some love in the comment section as well.
218:29 - That's right now, really, really, I'm in the need of that.
218:33 - That's it for this one.
218:34 - Let's catch up in the next video.
218:38 - It pretty much amazes me that how much we are going to learn
218:41 - within just one project that we're going to finish up
218:44 - in this video.
218:45 - This is going to be a longer one.
218:46 - Hey there, everyone.
218:47 - My name is Ateesh and let's get started
218:49 - and continue our React journey.
218:52 - We are into the world of React journey.
218:53 - We are trying to master React concepts,
218:56 - one at a time in each of the project.
218:58 - This helps us in building our portfolio projects
219:00 - so that this shows a constant learning journey that we have.
219:04 - We have ample amount of projects
219:06 - so that we can showcase them
219:07 - as well as can learn them in one go.
219:10 - When you build a kind of a big project,
219:12 - of course there is a learning there as well.
219:13 - But I believe that as a beginner getting started,
219:16 - building multiple smaller projects,
219:18 - which focuses on each concept one at a time
219:21 - is rather a better approach.
219:23 - So this is exactly what we'll be doing in this video.
219:26 - So let me first walk you through
219:27 - what we're going to build
219:28 - and this will help you to understand a customized hook.
219:31 - You will be able to build your own hooks
219:33 - just like we were able to use a state, use effect,
219:37 - use callback and whatnot.
219:38 - We will be able to design our own custom hooks.
219:41 - This will give you so much of confidence
219:42 - that hey hooks are not that much complex.
219:45 - I can design my own hooks for that.
219:47 - As a matter of fact,
219:48 - we will learn how we can make the API request
219:51 - and get some data from the APIs
219:54 - and can utilize this in our application.
219:55 - And we will also see that how a component is being designed,
219:59 - a reusable component.
220:00 - So far we haven't much focused on reusability
220:03 - of the component,
220:03 - which is one of the core principle
220:05 - and core strength of the React itself.
220:07 - So we'll be focusing on that part as well.
220:09 - So without a further ado,
220:11 - let me go ahead and give you an overview.
220:12 - Now that you have a list of what we are about to see,
220:15 - let's see that what we are going to learn in this project.
220:18 - So this is the project that we'll be building.
220:20 - Of course, it's on tailwind.
220:22 - So we will not be again much focused
220:23 - on how this corner radius works on.
220:25 - That's not our case.
220:27 - The goal is to understand the concept
220:29 - of the component reusability.
220:31 - The first thing that you can see here is
220:33 - that this component uses this top input component,
220:36 - which is exactly same.
220:38 - Only the data is getting changed,
220:39 - like from gets changed to to.
220:41 - The value here might change here as well.
220:44 - Then the currency type, this is exactly same.
220:46 - The dropdown list, this is exactly same here.
220:49 - And this is obviously same here as well.
220:50 - So no much big deal.
220:52 - If we design this component, it makes sense
220:54 - so that we can reutilize it later on as well.
220:57 - We won't be making any component
220:58 - for the button or the swap.
221:00 - This is exactly same.
221:01 - These are just used to change the to and fro values.
221:03 - So very simple basic swapping of the variables that we have.
221:07 - What's interesting about it is if you choose,
221:09 - like how much is the value for the 10 USD,
221:12 - and you convert it, it actually gets you the value.
221:15 - And the value that it is bringing up
221:17 - is actually coming up from a URL itself.
221:20 - And that is very, very interesting of a URL.
221:22 - Let me show you what URL we are actually using.
221:25 - So this is a URL.
221:26 - By the way, you can get this URL
221:28 - from the project description.
221:29 - So all the projects are available on my GitHub account.
221:31 - You can just get into that repository, that file,
221:35 - which I'll actually give you, and can grab this URL.
221:38 - The good thing about this URL
221:39 - is the end portion of this URL.
221:42 - At the end of it, you can write something like usd.json.
221:45 - And once you write usd.json,
221:47 - it gives you a key of usd
221:50 - and appropriate conversion of each values,
221:52 - like I am from India,
221:53 - so INR conversion of each of this is actually available.
221:57 - But not only that, I can make the conversion for,
221:59 - for example, INR.
222:00 - So all the currencies you can pass on in the URL itself,
222:04 - and it gives you like INR conversion,
222:06 - so how much one INR will be in each of these currency,
222:09 - that conversion automatically happens.
222:11 - Not a big deal.
222:12 - It actually converts a simple API,
222:14 - which does the multiplication.
222:16 - But this is a little bit complex of an API,
222:18 - then rather hitting the basic APIs.
222:20 - Like for example, there is this API.github,
222:23 - where you get the data.
222:24 - This data never changes.
222:25 - You get the data, arrange this data into some cards,
222:29 - some photos, or something like that,
222:31 - and you get happy with that.
222:33 - For example, we have another one,
222:35 - which is very famous project,
222:36 - which is random user, random user me.
222:41 - This is also exactly almost same.
222:43 - What you see on the data here,
222:45 - this is exactly the data.
222:46 - Only the data changes.
222:48 - The format never changes.
222:49 - No such thing.
222:50 - So this is exactly kind of a same API that we are handling.
222:52 - Here we are handling a tiny bit more than the previous one,
222:56 - because the INR changes here.
222:58 - We need to make a request here.
222:59 - We have to modify the URL,
223:01 - and then they get the appropriate things.
223:02 - And then the key value pairs,
223:03 - we need to actually get all the keys,
223:05 - so that we can show these keys all up here.
223:08 - So there's a little bit more involved in this one.
223:10 - So that will be taken care by the hooks itself.
223:13 - Very fun project.
223:14 - Initially you thought it would be very basic,
223:15 - but now you are realizing,
223:16 - oh, there's a lot of work that we need to do.
223:19 - And of course,
223:19 - Tailwind is going to be our friend for this one.
223:21 - So let's go ahead and get started with this one.
223:23 - So here's my source code.
223:24 - I'll just kill this one.
223:26 - So, okay, that's still running.
223:29 - I'll destroy this.
223:31 - And we have the fifth project being done.
223:33 - Now let's go ahead and take down
223:34 - the sixth project of this series.
223:37 - Again, same NPM create VIT,
223:40 - and we'll be using the latest.
223:42 - Just go for that.
223:43 - We'll be going with the very basics.
223:45 - So this is zero six, I guess.
223:47 - And this will be currency.
223:51 - All lowercase would be good.
223:53 - Converter.
223:54 - And we'll be, of course, React and JavaScript.
223:57 - And I love how easy it is
223:59 - to actually go ahead and work on with this one.
224:01 - Let's go ahead and open this up into integrated terminal.
224:04 - That's much more easier for me.
224:06 - NPM install.
224:07 - And we need to go ahead and install the Tailwind as well.
224:10 - So we can just come up here,
224:11 - the same guide of the Tailwind.
224:13 - I always come up here because anyways I have to do it.
224:15 - There is no point of doing it behind the scene
224:17 - and I don't really prefer that.
224:19 - So I'll just copy this, go back up here,
224:21 - wait for a few seconds till it loads all the things.
224:25 - Please don't mind me sipping some lemon water.
224:29 - Missing my tea today.
224:31 - But there's so much of these long videos
224:34 - that I need to grab something to drink.
224:37 - Okay, so the Tailwind is here
224:39 - and hopefully this will give us the Tailwind file.
224:41 - There we go.
224:42 - Tailwind config.
224:44 - And just like the previous one,
224:45 - we'll be just copying and pasting the content part
224:48 - since we are in the VIT content part is done.
224:51 - Next up is we need these directives.
224:56 - Okay, and this needs to go into source.
224:59 - Our main index.css.
225:01 - Remove everything, paste it up here.
225:03 - There we go.
225:05 - We also don't need anything from the app.css.
225:07 - So we'll be just selecting and removing all of this.
225:09 - We don't need it.
225:11 - Close all of this, close this.
225:13 - And save this and close this.
225:14 - Now, technically, in theory, we should have the Tailwind.
225:17 - But again, the only way to verify
225:19 - is via writing some of the custom CSS.
225:23 - Let's go ahead and remove this and simply have an H1.
225:27 - And we'll say test for Tailwind.
225:30 - All right, let's go up here and we'll be saying class name.
225:34 - BG dash red dash 200 should be good enough.
225:39 - And let's go back.
225:41 - We haven't run this.
225:43 - NPM run dev.
225:48 - And let's see.
225:49 - Okay, this is working.
225:52 - Let's go ahead and work on with this one.
225:55 - This is not really that much of a complex data
225:58 - or a complex project.
225:59 - We'll be working with this.
226:01 - So let's go ahead and work with this.
226:04 - Let's close this one.
226:05 - And the first thing that we'll be doing is
226:07 - let's just cut out all of this.
226:10 - We'll cut this one out, remove this one.
226:12 - Instead of this, we'll be having a basic dev.
226:15 - Let's have an H1.
226:17 - Now, inside this, we'll be having some of the classes.
226:20 - So again, the classes will come up from our code files
226:23 - that I already have when we build the project.
226:26 - So we'll not be talking about the code files at all.
226:28 - The only thing that we are going to worry about
226:30 - after this is actually one more thing.
226:33 - I want to add a style into this one.
226:35 - Now, after the style, we would love to have
226:38 - a simple background image just like this.
226:40 - But instead of the background image going like React logo
226:43 - or something, we will be actually getting
226:45 - the background image from.
226:46 - You can grab it from asset as well,
226:48 - but you can directly inject the URL.
226:50 - In my case, I'll be just directly pasting a URL.
226:53 - And let's go ahead and remove this.
226:57 - From where you can grab the URLs of the images,
227:00 - I'll show you resources as well.
227:01 - One of the resources that I prefer to use a lot is Pexels.
227:04 - Yes, I do contribute myself on Pexels quite a lot.
227:07 - These are all photos that I click.
227:09 - Feel free to choose any photo out of these,
227:11 - which makes sense to you.
227:14 - And we'll be searching for a photo
227:16 - that actually represents money or something like that.
227:21 - Okay, which one?
227:22 - This one looks good.
227:24 - I'll just copy the image address and paste it up here.
227:28 - And let's see how does that look.
227:31 - In the VIT project, there we go.
227:33 - So decent, not the perfect.
227:36 - We can definitely change the backgrounds
227:38 - and colors and whatnot,
227:38 - but I think this is good enough for us as of now.
227:42 - We'll be having a couple of more CSS and all these stuffs,
227:45 - but first let's talk about the functionality part.
227:47 - This is more than enough for us as of now.
227:50 - Okay, first of all, we need an input box.
227:52 - So the designing of input box is not really something
227:55 - which should bother us.
227:56 - This is how the input box looks like,
227:58 - but how to design the components which are reusable,
228:01 - what are the things we need to take care?
228:02 - That is what we are going to discuss.
228:04 - So inside the source,
228:05 - just right-click and create a new folder.
228:07 - We are going to call this one as component or components,
228:12 - however you like.
228:13 - And the only component that we have as of now is input box.
228:17 - So let's create a new file, input box.jsx, of course,
228:24 - and rfce, rafce, yeah, that actually makes sense.
228:30 - Or I'll go for the rfce.
228:32 - Okay, rfce, there we go.
228:36 - Finally, we have an input box and we are exporting this.
228:39 - Now with the input box,
228:40 - how many other things you want to accept?
228:43 - That's totally up to you.
228:44 - I want to accept this label.
228:46 - I will be accepting an amount as well
228:48 - because I'll be using it from different perspective.
228:51 - In some of them, user will give the amount.
228:53 - In some of them, I'll be adjusting the amount.
228:55 - So obviously I need an amount.
228:57 - What happens when the amount change?
228:58 - So I need a method which will be responsible
229:02 - for changing the amount and that method will be state.
229:05 - So how we'll be doing that,
229:06 - we'll actually keep this method as it is.
229:08 - But in our app.jsx, there we'll be designing
229:12 - some of these classes itself
229:13 - so that we can have all these basic amounts
229:16 - and how the amounts are being set,
229:17 - currency, converter and all of that.
229:19 - But in order to have that amount,
229:22 - we need to have something which can set the amount as well.
229:24 - So that's my number one goal.
229:26 - What happens when the currency is changed?
229:28 - So this is something we need to take care of that.
229:30 - What happens when the currency change?
229:32 - So there needs to be something
229:33 - which is keeping a track of all these states.
229:35 - At least there should be a method.
229:37 - All the currency options,
229:38 - I will obviously be taking this one.
229:39 - So this is a input box itself.
229:42 - It doesn't do anything on its own.
229:44 - The whole idea and the whole job
229:45 - is just take the values and display them.
229:47 - That is what we have.
229:49 - And there might be cases.
229:51 - In this case, this is an input box
229:53 - or the input value which is disabled.
229:55 - So which currency, like you will be obviously reusing this.
229:59 - So which one you can enter the data
230:01 - and which one you want the component to be disabled.
230:04 - So you have to check for that one is amount enabled
230:06 - or disabled into that one, currency disabled.
230:09 - Like here you can see the currency is disabled in this one.
230:12 - And of course, if any additional classes
230:14 - that you want to give me.
230:15 - So there's a lot of data
230:16 - that we are getting through this one.
230:18 - And you don't know this data entirely at the first go.
230:21 - Eventually, as you want to make your components
230:24 - more reusable, you add this one.
230:26 - So let's go ahead and work on with this one.
230:28 - So first of all, we have this label
230:30 - that we'll be taking as a prop into this one.
230:32 - We obviously needs to take amount.
230:34 - These are obvious one.
230:35 - Now next, what we need to take is on amount change.
230:38 - What happens when the amount change?
230:40 - So something state needs to be there.
230:42 - Some method needs to be there, which keeps a track of that.
230:45 - And what happens on the on currency change?
230:48 - So this on currency change is what happens
230:50 - when the user changed the currency.
230:52 - How to utilize them?
230:53 - I'll walk you through with that as well.
230:55 - But these are some of the basics.
230:57 - Then obviously you need a currency option.
231:01 - Currency options.
231:03 - And we'll be setting up some of the default values
231:05 - because it will be an array.
231:06 - We expect that how we get the array,
231:07 - that is not our concern as of now.
231:10 - I want to get all these currency as in the format of array
231:13 - so that I can just loop through them
231:14 - and provide the values there.
231:16 - Now, obviously by default, we need to show some currency.
231:19 - So that also needs to be taken care of that.
231:21 - So we'll be saying we need a selected currency.
231:25 - And by default, we'll be going with the USD.
231:29 - And no suggestion there.
231:32 - Okay, this is my by default currency.
231:34 - And do you want this amount to be enabled or disabled?
231:37 - That somebody needs to tell to us.
231:39 - So we'll be saying amount disabled.
231:42 - And by default, we'll be getting a false value
231:44 - because we don't want to disable it by default.
231:46 - If the user asks us, we will disable that.
231:49 - And we'll be also checking the currency disabled.
231:51 - So if the currency is enabled, disabled,
231:54 - if the user is allowed to change the currency or not,
231:56 - it's totally up to you.
231:58 - You want to have it, have it.
231:59 - If you don't want to have it, that's okay as well.
232:01 - So we'll be saying currency disabled.
232:04 - By default, that's false.
232:06 - We'll also take some of the class name as well.
232:09 - This is a very common pattern
232:10 - that you'll be taking a lot of class name.
232:12 - Of course, you will be designing our component,
232:13 - but you will also give the user a chance
232:16 - that hey, I'll be allowing you
232:18 - so that you can actually get all of these values.
232:21 - All right, so now let's go ahead
232:22 - and design this input box itself.
232:25 - First of all, we'll be having some of the classes as well.
232:28 - Classes I'll be copying and pasting from here itself.
232:30 - Now we won't be putting the classes just like the strings
232:33 - because we'll be taking some of the classes as the props.
232:36 - So we need to keep a safe area
232:38 - where I can inject the classes which are injected
232:41 - by somebody who's using our component.
232:43 - So we'll be just removing this one here.
232:45 - We'll be injecting our JavaScript here.
232:47 - Now in the JavaScript, of course, we can use the backticks.
232:50 - Now the advantage of this backtick is
232:52 - since I've taken the prop, I can just use my fillers here
232:56 - and can add the class name here.
232:58 - Now this is something which user is passing,
233:00 - but since this is just a string,
233:02 - I can just go ahead and copy my CSS classes that we have.
233:06 - So there we go, really basic, absolute, nice.
233:09 - Okay, let's go ahead and remove this.
233:11 - So this is our basic card that it was designed.
233:15 - Let's go ahead and design this class.
233:19 - This is also going to have some of the class names.
233:21 - Let me grab the class name.
233:23 - It's simple with, we want to be half of it.
233:26 - So we'll be saying one by two, very basic.
233:30 - Then we'll be having some of the labels and input.
233:32 - So let's first grab a label and label HTML for,
233:37 - we will be injecting some of the JavaScript here in a minute.
233:40 - Just wait for it right now.
233:41 - We don't want to have it
233:42 - or let's just remove the entire HTML for a minute.
233:46 - Then we'll talk about the usability
233:48 - and how we can actually make it more accessible.
233:52 - Okay, we have some classes here as well.
233:54 - So let's go ahead and add a class name.
233:56 - I'll be adding the class name from my notes, copy and paste.
234:01 - Classes, we won't be talking even a tiny bit.
234:03 - We'll be always getting it like this.
234:05 - And this will be adding as a label.
234:07 - Remember, we don't want to hard code it
234:09 - because user will be using it this label
234:11 - for multiple purpose, maybe from, maybe to.
234:14 - Okay, this part is all good.
234:16 - Now, once we have this label inside this,
234:18 - we want to have an input field.
234:20 - So we'll be having an input field just like this.
234:23 - And let me just break it onto the next line.
234:27 - There we go.
234:28 - Now this input field will have a type of number
234:31 - because that's what we want.
234:33 - Number, there we go.
234:36 - Now what else do you want to have into this one?
234:38 - There are multiple fields that you want to have.
234:40 - First of all, let's take down the obvious ones,
234:43 - which is the class names.
234:45 - And again, the class names goes as it is,
234:47 - whatever we have in notes.
234:48 - Don't really care about it.
234:49 - Don't want to even talk about it.
234:51 - Then we have the type.
234:52 - Then obviously let's grab a placeholder value.
234:55 - You can grab the placeholder value as whatever you like.
234:57 - We'll be just saying it as amount.
235:00 - Depends if you want to take this input as well
235:02 - from the user, you can take it.
235:05 - Right now, if I don't enter anything into this one,
235:07 - it is, this one is zero.
235:09 - This one actually doesn't do anything.
235:11 - So it's always zero, totally up to you.
235:12 - If you want to put this placeholder,
235:14 - any value or something like that.
235:16 - Okay, next up is, is the field disabled or not?
235:22 - That depends on amount disabled or not,
235:24 - whatever the value you have given by using this one.
235:27 - The value, the value is going to be amount.
235:30 - Whoever is using it is going to give me.
235:32 - But the most important thing is
235:34 - if you just keep it as it is,
235:35 - then obviously we'll be having some amount,
235:37 - but there is nothing which is helping you
235:40 - to change these values.
235:41 - So what you have to do is this method on amount change
235:45 - will be responsible for changing the amount.
235:48 - So obviously we have to listen for an event
235:49 - which is on change, on change.
235:54 - And we have to use this on amount change,
235:56 - but we cannot just use it like this.
235:58 - Otherwise we are never using the method.
235:59 - We have no idea about the functionality or anything of that.
236:02 - So just cut this out.
236:03 - Here we want to use a callback.
236:05 - Let's go with this.
236:07 - And obviously we'll be tracking an event.
236:09 - So let's just call this one as E for an event.
236:12 - And then we have to first make sure
236:13 - that we have the presence of this on amount change.
236:16 - This could actually make or break your application.
236:18 - So for the standard practices,
236:20 - such values are being checked first.
236:23 - So we'll be checking on amount change.
236:26 - If this on amount change exists,
236:27 - then we go ahead and say that use this on amount change
236:31 - and get an E.target.value.
236:34 - But again, there is a problem into this one.
236:36 - Whenever you grab the values like this,
236:38 - you will be grabbing a string and we don't want a string.
236:41 - We want actually a number out of it.
236:43 - So before we actually grab it,
236:45 - we'll cut this out and we'll be casting this one
236:48 - as a number and then E.target.value.
236:51 - These are just additional safety checks.
236:54 - Nothing to be worried too much.
236:56 - We are just trying to make sure that our code
236:58 - is as standard as possible.
237:00 - And these are only, only safety check.
237:02 - If you directly come up here and say E
237:04 - and then simply say on amount change E.target.value,
237:07 - maybe your application might work
237:09 - and eventually you might have to debug,
237:11 - but this is a good standard practice that we have.
237:14 - All right, so this is all good.
237:15 - And now we have to go ahead and work on with this one.
237:18 - So this is a part of only having this part,
237:21 - the currency, the numbers and everything.
237:22 - We have to work on this currency type as well.
237:25 - So this is the second portion where we'll be working on.
237:27 - So let's just go below this div.
237:30 - We need to have another div.
237:32 - This one obviously will have first the class names.
237:35 - And let me just grab all the classes.
237:37 - So this is the right portion that we are working on.
237:40 - Notice here, the currency type and USD.
237:42 - So this is why we have flex and all of that.
237:44 - So the next part is all about it.
237:46 - Let me go up here.
237:48 - First of all, a simple paragraph that says currency type.
237:51 - So nothing extraordinary currency type.
237:54 - It always is currency type.
237:55 - So we are, we are done with that.
237:57 - Now comes up the interesting part is how we are going
238:00 - to take care of this USD and all these input values.
238:03 - Now this is a select field.
238:05 - So let's go ahead and grab a first of all,
238:06 - a select field.
238:08 - There we go.
238:09 - Now in this select field, first and foremost,
238:11 - let me just grab on to the next lines.
238:14 - And here also you go away.
238:18 - Okay.
238:19 - First of all, class name,
238:20 - because there's a styling involved into this one.
238:22 - Not worried about styling, even in case,
238:24 - I highly recommend you.
238:25 - In fact, you change the styling.
238:26 - At least you will be contributing something in the project.
238:29 - Your hands will work onto the keyboard
238:30 - and that's always a good thing.
238:32 - Now what should be the value?
238:33 - The value should be based on the select currency
238:36 - that we have, a selected currency.
238:39 - Notice here, we have the selected currency.
238:41 - As of now, we are taking this as USD by default,
238:44 - but users should be able to allow it and change this one,
238:46 - but we are happy with this selected currency as of now.
238:49 - What happens with the on change?
238:53 - There we go.
238:54 - Now again, you might have noticed the exact same pattern
238:57 - that we are following.
238:58 - We will be following this one as well.
239:00 - Here we chose an event.
239:01 - We said that whether this on currency change method
239:04 - is available to us or not, and based on that will work.
239:07 - So very repeatable pattern.
239:08 - So yes, we'll be seeing very standardized code
239:11 - in this entire series.
239:13 - So we have this event.
239:14 - After that, we go ahead and check.
239:15 - Do we have this on currency change?
239:18 - If we have this, then we go ahead
239:19 - and use the second part of it,
239:22 - which is on currency change,
239:24 - and we simply go ahead and grab the e.target.value.
239:27 - Here, we don't need any number casting or anything
239:29 - because these are just strings, all right.
239:32 - Okay, next up, is this field enabled or disabled?
239:36 - That maybe you want to design an application
239:38 - which is disabled, having these field disabled,
239:41 - but in our case, disabled currency disabled is mostly false,
239:45 - but maybe you don't want user to change this type.
239:47 - It's always USD to INR or INR to USD.
239:50 - Maybe that's the case.
239:51 - So we are just taking care of that.
239:53 - Okay, select field alone doesn't work.
239:55 - So we need to have these options getting inside this one.
240:00 - For these options,
240:01 - we obviously have to loop through the values.
240:03 - So we'll be using our JavaScript here,
240:05 - and inside this, we'll be saying,
240:06 - hey, all the currency options that you are providing to us,
240:09 - remember currency options is an array in case you forget.
240:12 - This is the currency option, which is an array.
240:15 - I want to loop through this value.
240:16 - Looping is pretty simple.
240:18 - I just have to say .map, and there we go.
240:21 - This is my map.
240:21 - Inside the map, I'll get a callback.
240:23 - So let's go ahead and grab a callback.
240:25 - No problem at all.
240:27 - And in each of this, you will get a currency.
240:29 - So let's just call this one as currency.
240:33 - Now with each of the currency, what we'll be doing,
240:35 - instead of using curly braces,
240:37 - I'll be using parenthesis
240:38 - so that I don't have to return anything.
240:40 - I'll just go inside this,
240:41 - and we'll say that I'll get an option.
240:44 - So option and thank you.
240:46 - The key is going to be currency
240:48 - because we know that our API actually gives us these values.
240:52 - And each of these values are actually in itself unique.
240:55 - So we don't have to worry about it.
240:57 - All the options that we get into the array,
240:59 - we will be crafting and designing that in such a way
241:02 - that each of the currency is unique in itself.
241:04 - The value is going to be currency,
241:06 - and this one is also going to be currency, too many currency,
241:08 - but this is how exactly options and everything works.
241:11 - Remember, a lot of people did the mistake
241:13 - when I was teaching it earlier.
241:15 - A lot of people just use the curly braces here,
241:17 - so make sure you don't do the mistake.
241:20 - All right.
241:22 - So this seems like a very nice approach
241:25 - that we have taken of designing an input.
241:27 - One more feature I would like to discuss,
241:30 - not a feature but a standard practice
241:31 - that is used quite a lot,
241:34 - is once you have designed these components,
241:35 - you actually have these index file into these components,
241:39 - not necessarily, but usually you have.
241:42 - All you do in these files is actually you go ahead
241:44 - and import these input boxes like this,
241:47 - and just go ahead and export like this input box.
241:52 - The advantage of this is I don't have to actually go
241:54 - individually in each of the component.
241:56 - All I have to do is import the components, this index file,
241:59 - and I can bring in any component in this one.
242:02 - Maybe later on when we'll be designing,
242:04 - of course we'll be designing.
242:05 - There might be five, 10, 15 components in each one of them.
242:08 - Having all of them listed in index is actually a better thing.
242:11 - So that's what we'll be using.
242:13 - Nothing too much to be worried,
242:14 - but yeah, these kinds of things do exist.
242:16 - All right.
242:18 - Moving on, let's take care of the URL part.
242:21 - So we have this URL we'll be working on with this one,
242:23 - but the way how we are going to take care of this one
242:25 - is via designing our own custom hook.
242:28 - You can of course do all of this into your use effect hook,
242:31 - into the app.js as well,
242:34 - but there's so much of the things that we actually require
242:37 - from this that I don't want to do all of this mess
242:38 - into app.js, rather I prefer to do all of this
242:42 - into a separate customized hook.
242:44 - By using that hook, I will return the data,
242:47 - whatever is required.
242:48 - All right, so let's go ahead, right click,
242:50 - create a folder, and we'll be calling this one as hooks.
242:54 - It's totally up to you how and what you want
242:56 - to name this one.
242:57 - The only kind of a standard practice is to use,
243:01 - use before hooks, too many use.
243:04 - Use, use effect, use callback, whatever that is.
243:07 - In this case, we will be using use currency info.
243:12 - That is our hook, use currency info.js.
243:15 - And now what we have is we'll be, we just write simple,
243:18 - this hook is actually nothing more than a function.
243:21 - So use your classic react, use your classic JavaScript,
243:25 - fetch the API, get the data, and return the value.
243:28 - That is it, that is literally your hook.
243:31 - So we'll be needing some of the stuff.
243:32 - Obviously we'll be needing use effect
243:35 - and we'll be needing use a state, of course.
243:38 - All right, now let's just go ahead and simply say,
243:41 - hey, we'll be having a function.
243:43 - That function will be use currency info.
243:47 - Nice, all of this is provided to me,
243:50 - but I'll be writing that anyways.
243:52 - So use currency info is my hook.
243:54 - And after that, we'll be saying export default,
243:56 - use currency info.
243:57 - That is all good.
243:58 - Now, how we are going to go ahead and work on with this.
244:00 - First of all, whatever the data is I'm getting retrieving
244:03 - from the API call, I need to store that.
244:06 - So for that, I'll be saying that let's call this one
244:08 - as data, set data, and by default, this is not an array.
244:12 - That is a wrong suggestion here.
244:13 - If you notice, this is an object.
244:15 - Notice here, this whole thing is an object
244:17 - and I want to store this object up here.
244:19 - So we'll be working on with that.
244:21 - Okay, now how can I go ahead and fire this up?
244:24 - As soon as somebody uses this hook,
244:26 - so as soon as this hook will mount.
244:28 - So again, this hook is nothing more than just a function,
244:31 - just like your app.js is a component it mounts,
244:33 - this hook will also mount.
244:35 - So I can go ahead and use a use effect here.
244:38 - And we use a use effect snippets right now
244:40 - on which you are dependent.
244:42 - You are dependent on a couple of values,
244:44 - but oh, one more thing.
244:47 - Whenever whoever is using this use currency info,
244:50 - he needs to provide me the currency.
244:53 - Otherwise, how will I know that in what currency
244:55 - you are looking for data?
244:56 - Because my API looks for INR as well,
244:59 - it looks for the USD as well.
245:01 - So you need to provide me at least one data
245:03 - that based on this, I want to call the API.
245:05 - So once you have this currency,
245:08 - I'll first remove all of this part.
245:10 - It's not, it's a boilerplate code.
245:12 - And I'll also remove this third,
245:14 - which is boilerplate code.
245:15 - Now anytime, anything changes INR to let's just say USD,
245:19 - I obviously want to refetch the request.
245:22 - So the dependency of this use effect
245:24 - is obviously the currency.
245:25 - Any change in the currency, I want to refire this one.
245:28 - For here, I can use XCOs as well.
245:30 - I would prefer to use XCOs,
245:31 - but in this case, I'll be using just the fetch.
245:35 - So I'll be saying fetch just like this.
245:37 - You can await, use however you like.
245:39 - I'll be using backticks in this one.
245:41 - Now just go ahead and copy this data
245:44 - and I'll paste this one.
245:45 - The only thing that I have to do is just change this USD.
245:48 - That's exactly what I was changing in the URL as well.
245:51 - So let's just inject our variable just like this,
245:54 - absolute basic and just add a currency.
245:56 - Whoever is calling this hook
245:57 - as actually passing me this variable.
245:59 - So no problem at all.
246:01 - Now, once we have this, then obviously based on this,
246:03 - we'll be having a .then or .catch, whatever.
246:06 - So we'll be using a .then.
246:08 - Inside the .den, we will be having a callback.
246:11 - So just like this, there we go.
246:13 - And we will have a response.
246:15 - This response needs to be converted into JSON
246:17 - because sadly I'm not using an XCOs.
246:19 - I'll walk you through with the XCOs as well.
246:21 - That's much, much better.
246:23 - I don't have to do this JSON conversion and everything.
246:25 - After this chaining, we need to further chain on one more
246:28 - because that's where we actually get our data.
246:30 - So we can call it with any other name as well.
246:33 - I'll call this one again as a response.
246:35 - And once we have this response,
246:36 - we'll be fetching this entire response into the set data,
246:40 - the data, the state that we have designed.
246:42 - And inside this one, most importantly,
246:46 - I cannot just go ahead and say set data like this.
246:48 - Of course, this is a method, but what data?
246:50 - If you notice here,
246:52 - this is exactly I don't want to fetch it entirely
246:55 - because this also includes this date component.
246:57 - I want to insert only one key there, whose value is USD.
247:03 - So I want to insert the data from the key of USD
247:06 - and this whole thing I want to inject, not the date.
247:08 - So for this, I can actually go ahead and access.
247:11 - So all this response, this whole response is.
247:13 - So from this response, whatever that is,
247:16 - I want to just go ahead and provide this USD.
247:19 - So there we go, USD, but this USD changes based on INR.
247:22 - If we have INR, this changes.
247:24 - So this is exactly the currency.
247:26 - I can go ahead and paste this currency, cool.
247:29 - Okay, so this one is nice.
247:33 - All right.
247:34 - So all we have got this one.
247:36 - Now, now what we want to do is,
247:39 - whoever is using this hook,
247:41 - we actually need to return the data to him.
247:44 - And what we are returning back, if you notice it closely,
247:47 - we are returning all of this guy here.
247:49 - So this is again an object,
247:51 - but in this object we have key values.
247:53 - So 00, Lynch, whatever that currency is.
247:56 - I have been to most of these countries
247:58 - and trust me, I have traveled around 40 countries.
248:01 - A lot of them, I don't know.
248:03 - Okay, so this is what we have.
248:04 - So as you might have noticed,
248:06 - the designing the custom hook is not that much bad.
248:09 - It's actually pretty easy.
248:10 - This is just a basic function.
248:12 - We could have done this all into app.js as well,
248:15 - but this would have unnecessarily just complicated the stuff
248:18 - into the same file and segregating your logic
248:21 - is always a good idea.
248:23 - And by the way, in case you want to have this,
248:24 - there is absolutely no shame in just console logging the data.
248:29 - In fact, when you are learning the things,
248:31 - it's a good idea to logging every single thing,
248:33 - finding its data type, finding its value.
248:35 - I encourage that quite a lot.
248:38 - Okay, so, so far all good.
248:41 - Now let's go back into the app.jsx.
248:45 - Finally, we are in here.
248:46 - And now let's take care of a lot of things
248:48 - because all the things are actually dependent
248:51 - on a lot of the things that we are doing.
248:53 - For example, this input box,
248:54 - from where you're going to give me this label amount,
248:56 - all of that, some place you need to give it to me.
248:59 - And that place is basically your app.js.
249:02 - So this is where we'll be going through.
249:03 - Okay, let's design a lot of states.
249:05 - So we'll be getting an amount and set amount.
249:10 - Okay, we'll be getting a use state.
249:11 - Okay, cool.
249:13 - We also need to get a from.
249:15 - So we'll be saying from.
249:18 - And this one is going to be set from,
249:21 - by default it will be USD.
249:23 - We also need to have a to.
249:24 - So set to, set to is no, not Euro, not Euro.
249:27 - That's very expensive.
249:30 - Of course, I live in India, I'll go with the INR.
249:32 - Then we also need to give the converted amount as well.
249:36 - And this will be converted amount.
249:41 - And that will be set converted amount.
249:43 - By default, it will be Zuri, zero, not Zuri.
249:46 - Okay, so this is the converted amount.
249:48 - This is what we will be filling the data up here.
249:50 - Okay, and a couple of more things.
249:53 - Actually, I forgot one thing to actually discuss with you.
249:56 - I should have discussed that earlier,
249:57 - but let's go back onto the input box.
250:00 - Now this is something which is not really necessary,
250:02 - but still I'll discuss this.
250:04 - I'll talk a tiny bit about it.
250:06 - There is one more thing that we can do
250:08 - is make it a little bit more accessible.
250:10 - Although it is not required,
250:11 - but we can actually do a tiny bit more.
250:14 - Now we know that we have a lot of options
250:17 - that are going on into this one.
250:19 - And for all of these options,
250:21 - notice here we are having this label as well.
250:24 - So this label, if I click on the form,
250:26 - it highlights this input field.
250:28 - So how can I go ahead and take this one?
250:29 - Because right now that's not working in our case.
250:33 - In this case, we have a label,
250:34 - but it doesn't have an HTML4.
250:37 - And in this, we also don't have anything.
250:39 - Now there are a couple of ways how we can do it.
250:41 - First of all, we can just go ahead and say HTML4.
250:46 - Okay, no suggestions.
250:48 - And we can just go ahead and design a simple variable,
250:51 - or we can just give it a name itself.
250:52 - HTML4 is currency like this, of course, in double quotes.
251:00 - There we go.
251:02 - And similarly in the input also,
251:03 - we can give that, hey, what's the ID of this one?
251:06 - So HTML4 and this one is ID,
251:07 - because these are actually interrelated.
251:10 - We can give a currency.
251:11 - This will do most of our job.
251:13 - We don't need to actually worry too much about it.
251:16 - But you will notice in a lot of production grade code,
251:19 - especially the fan companies and big shots,
251:21 - they actually use something known as use ID.
251:25 - Yes, there is another hook.
251:27 - The whole idea behind use ID is to generate unique IDs.
251:30 - Yes, that is by default in now in React.
251:33 - And you'll see a lot of people use it in this format.
251:35 - So once I go back in before the return,
251:38 - I can just go ahead and say const ID as use ID.
251:40 - Now it generates unique ID for me.
251:43 - And all I have to do is just inject this ID here
251:45 - instead of currency.
251:46 - I could have done that with the currency as well,
251:47 - but hey, this is how a lot of people does.
251:51 - So I just want to show you that yes,
251:52 - this is also a good practice.
251:54 - How much value does it add?
251:56 - I don't know, you decided, but yes, this is a common thing.
251:58 - So I just wanted to have it.
252:00 - We have it in the notes to be discussed
252:02 - in this entire bootcamp, but yeah, pretty good, pretty good.
252:06 - Okay, moving back, coming on to this one.
252:08 - So we have a lot of converted and all of this.
252:11 - Now, coming back onto this use currency info,
252:15 - we have designed a hook for this one.
252:17 - This hook returns me a data.
252:19 - So how can I go ahead and use the value of it?
252:22 - Okay, let me show you.
252:24 - Almost all of the hooks that you have seen
252:26 - is just a function and it returns some values
252:29 - and we stored that value into some variables,
252:32 - arrays, objects, whatever that is.
252:34 - Exactly like this, we'll be having these things.
252:37 - So what we'll be saying is
252:39 - I want to have this use currency info by the way,
252:43 - please import this however you like, I like this one.
252:47 - So this is my use currency info.
252:49 - This hook requires a default value.
252:51 - So I can just go ahead and pass on a USD,
252:53 - but why to pass a USD like this
252:56 - when we have all of this being set in this from?
252:58 - So let's go ahead and remove this instead of hard coding.
253:00 - Let's go ahead and do from, no suggestions.
253:03 - Thank you, wrong suggestions.
253:05 - Now just hold the entire thing into a variable
253:08 - and we'll be calling this one as currency data
253:13 - or currency info would be good.
253:15 - That's it, we have designed a hook
253:17 - and you have stored all the information.
253:19 - Always remember what information is coming up to your data.
253:22 - See, most of the errors actually come up
253:24 - even in production grade still, it's been 12 years,
253:26 - still most of the errors that I do
253:28 - is wrongfully judging what type of data that is coming up.
253:31 - Here it looks like that use state is an object and stuff,
253:34 - but you need to be 100% sure that the data,
253:36 - this data when it comes to here
253:38 - and is being called as currency info, what is this?
253:40 - This is an object, this is an array, this is a number,
253:42 - whatever that is, be 100% sure about it.
253:45 - And that is why a lot of people prefer to use TypeScript
253:48 - just to be safe that what kind of data
253:50 - is coming into the picture.
253:52 - All right, enough of the site talks.
253:54 - These are experienced talks,
253:55 - I think these talks actually add value.
253:58 - Okay, now we need to grab options.
254:01 - Why options?
254:01 - Why are you grabbing options?
254:03 - Because if you remember, I have this USD as a long list
254:07 - and I need to extract this, just a second,
254:11 - I need to extract all these keys from it.
254:13 - So these keys are important for me
254:15 - and these keys are actually option in my input box.
254:19 - Yeah, that's why I'm pulling out all these options.
254:22 - And turns out pulling out this one is actually piece of cake
254:25 - if you have studied JavaScript.
254:26 - So object has a method of .keys and inside this keys,
254:30 - I can just go ahead and say,
254:31 - hey, I'll grab the keys from currency info.
254:34 - No need to add rates or anything like that.
254:36 - That is it, I have my keys.
254:39 - All right, pretty good.
254:40 - Now I have my options and all these values being designed,
254:43 - nicely added and all of that.
254:45 - Now, what happens when you actually go ahead
254:48 - and actually click on convert?
254:49 - Actually, to be honest, nothing happens.
254:52 - You already have all the information with you,
254:54 - you have your amount, you have your currency info as well
254:57 - and in whatever the currency you want to convert,
255:01 - you can just grab it.
255:02 - Now you have all the options available for you.
255:04 - So from this entire currency info,
255:07 - you want to find out INR,
255:08 - how you will find INR from here,
255:11 - just by searching for INR.
255:14 - So if I search for INR, that's available to me.
255:17 - Similarly, if I have to write a function for this,
255:20 - it's super, super easy.
255:21 - Let's just go ahead and call this one as convert.
255:24 - There we go.
255:25 - How do I do the conversion?
255:26 - It's super simple.
255:27 - Use first of all, set converted amount
255:29 - because that's what this is, converted amount.
255:32 - And all you have to do is take this amount,
255:34 - whatever the user has given to you
255:36 - and multiply it by the currency info,
255:39 - which holds all of these keys
255:41 - and multiply by it's whenever we say square brackets true.
255:45 - And by the way,
255:46 - you can access objects with the dot notation
255:49 - as well as with the square notation,
255:51 - just giving you too much of information.
255:53 - And in this, I'm just setting it to INR.
255:55 - So I'll just find this value and this number
255:57 - and I'll multiply it by that.
255:58 - So that is it.
255:59 - Told you, super, super simple.
256:02 - By the way, we have this also method.
256:04 - Let's design this, which is swap,
256:05 - which just swaps the value.
256:07 - And you might have already guessed that
256:08 - how that actually works.
256:10 - Super, super simple.
256:11 - We are just exchanging the value of from and to.
256:14 - That is it.
256:15 - That is it what we are doing.
256:17 - Let's go ahead and design this.
256:18 - We'll be having a swap
256:20 - and the swap is going to look like this.
256:22 - So notice here how we are swapping it
256:24 - set from to to and set to to from.
256:28 - But we also want to change one more thing
256:31 - once we actually go ahead and say,
256:34 - let's just say there is one here.
256:37 - When we swap these, these numbers also get exchanged.
256:40 - So notice here, the numbers also get exchanged.
256:43 - That is nothing.
256:44 - It's just the set converted amount
256:46 - getting changed with the set amount.
256:48 - That is it.
256:49 - If you want to do that, otherwise you just reset them.
256:52 - So we'll go ahead and say that,
256:53 - hey, I'll have the set converted amount
256:56 - to be changed as simply just the amount.
257:01 - Amount.
257:03 - Yeah, that amount.
257:04 - No, no suggestions.
257:05 - Thank you.
257:06 - And we'll also set amount
257:08 - is going to go ahead and change
257:11 - with the converted amount.
257:13 - There we go.
257:14 - That's it.
257:15 - Now all the functionality of the swap is all done.
257:18 - All right.
257:19 - Now that majority of our task is done,
257:22 - let's go ahead and add more of the values that we have.
257:24 - So we have this test for tailwind.
257:27 - We don't need this.
257:29 - Let me go ahead and add a couple of divs up here.
257:33 - Let's remove this again.
257:35 - This is the most boring part,
257:37 - but we have to go through with this one as well.
257:39 - In the later on projects and application,
257:41 - I'll give you the code file, which is helper file,
257:44 - which actually gets all these components.
257:46 - So they can just copy and paste.
257:47 - For rest of them, I have that.
257:49 - Don't worry.
257:50 - So width is going to be full.
257:52 - Okay.
257:53 - Once I have this inside this div,
257:55 - we will have another div.
257:56 - This div also have a class name.
257:58 - Let me grab all the classes that we have.
258:02 - Copy that, paste it up here.
258:04 - There we go.
258:05 - Looks decent after this.
258:07 - And finally, we'll be having a form
258:09 - because this form is actually a submit form.
258:12 - So that's what we are using.
258:13 - Let's grab a form.
258:15 - This form has no action,
258:17 - but it has some things known as on submit.
258:21 - And what does this on submit does?
258:23 - Of course, fires an event.
258:25 - That's what all form does.
258:26 - And we'll be taking this event and couple of things.
258:29 - First of all, stop prevent this form
258:32 - from submitting to some URLs.
258:33 - So that's pretty easy.
258:35 - Event dot prevent default.
258:36 - That's classic.
258:37 - And then run our simple convert method
258:39 - that does all of the magic for us.
258:41 - Now inside this form,
258:44 - we need to add the input box and all of these things.
258:46 - So first of all, we have a div here.
258:48 - That div also has some classes.
258:50 - Super boring.
258:52 - Not too much.
258:53 - Not too much.
258:54 - Like this.
258:55 - Okay.
258:56 - And once I'm inside this div,
258:58 - we have the first input box.
259:00 - So let's grab the input box.
259:02 - Let's bring this
259:03 - and let's see how it has brought the input box.
259:06 - So it has brought the input box from component input box.
259:09 - I would rather prefer it to actually grab it
259:12 - from index itself.
259:14 - Index dot JSX.
259:17 - Did I mention?
259:18 - No, it's JS.
259:20 - So I would prefer to get it JS.
259:23 - It's not like wrong to get it from input box,
259:25 - but it's better to actually grab it
259:27 - because eventually when we'll be having 5.10
259:29 - on all of this,
259:30 - it's better to actually grab it from here.
259:32 - And again, once we are grabbing it from here,
259:34 - the reason why we actually need to change this
259:37 - because we have exported it like this.
259:39 - This is not export default.
259:41 - So we need to actually grab this.
259:43 - That's it.
259:44 - And then if we have more,
259:45 - we can just set the comma and just have it.
259:48 - So very common,
259:49 - but just wanted to show you all the good practices
259:51 - out there incorporated into this application.
259:55 - Self-closing.
259:56 - Now it's time to provide the data to this one.
259:59 - So first of all, label.
260:00 - This label is just the from.
260:02 - So we don't need to do like this.
260:03 - We'll be just saying this is a from.
260:05 - Amount.
260:06 - Amount obviously will be taken care from the amount,
260:08 - the state that we have designed.
260:10 - Then we have to provide the currency options
260:12 - and currency options are in options.
260:14 - If you forgot, these are options.
260:17 - We derived from all the keys.
260:19 - So that's what we are passing.
260:20 - Then we have to provide the options of what happens
260:23 - on currency change, on amount change and all of that.
260:25 - So we'll be first changing on currency change.
260:29 - What happens when the currency is being changed?
260:31 - When the currency is being changed,
260:33 - obviously we are tracking the currency into this from.
260:38 - So this is a from.
260:38 - So we are tracking the currency from.
260:41 - So let's go ahead and fire an event
260:43 - and update the states based on that.
260:45 - So we'll be going like this.
260:47 - And first of all,
260:49 - this one is going to take on the currency change.
260:52 - It's having a default value of currency.
260:56 - Currency, why there is no suggestion.
260:59 - Currency, it should be having a currency.
261:01 - Let's call this one as currency, whatever the currency.
261:03 - Right now it's USD.
261:04 - So as soon as somebody changes the currency,
261:07 - we can come up here and we can actually remove this
261:10 - and can have the set,
261:13 - set amount change,
261:15 - set from, yep,
261:17 - set from and inside that currency will be changed.
261:19 - So automatically the new string value of the currency
261:22 - comes to us.
261:23 - So that's first part.
261:24 - Next up is on amount change.
261:26 - What happens on the amount change?
261:28 - We'll be taking the amount and we will be,
261:31 - let's just use this one better.
261:35 - On amount change, first of all, grab the amount.
261:37 - Okay, I grabbed the amount.
261:38 - Then after that, we can actually change the amount.
261:42 - So on amount change, we'll be setting up the amount.
261:45 - Oops, my bad.
261:48 - On amount change, yeah, there we go.
261:50 - We'll be setting the amount to the newer amount,
261:53 - whatever the amount is being changed.
261:54 - So on amount change handles that part.
261:57 - And we will also be needing a select currency,
261:59 - whatever the select currency is.
262:01 - So selected currency is we are going to grab it from.
262:05 - So there we go.
262:07 - All right, so this is what we have as of now.
262:09 - Let's see if our VIT application.
262:11 - So notice here we have this all from USD,
262:14 - all the values are being properly passed,
262:16 - but this is not enough.
262:18 - We need to have one more here.
262:21 - We'll be having a button here.
262:23 - So just outside of this div actually,
262:26 - we added another div, yeah, too many divs.
262:29 - And class name, very boring.
262:33 - And have this currency name, copy this, paste it.
262:38 - Inside this, there is a button which has a ton of classes.
262:42 - And this one is say swap.
262:46 - Okay, the easiest part I know, which is on click,
262:49 - and this will work as it is,
262:50 - if you just go ahead and do a swap, save this.
262:53 - And yeah, it works, but we don't want it to look like this.
262:56 - So we'll be just adding some classes.
262:59 - Okay, I could have done this entire project without the CSS,
263:02 - but again, a lot of people just appreciate the content
263:05 - if it looks good.
263:06 - That's why we spend extra time in working with this one.
263:10 - All right, so button is all good.
263:12 - Now we have this div.
263:13 - Let's go ahead and just grab all of this,
263:18 - copy this and paste it up here.
263:21 - So we have the same input box,
263:23 - but we need to change the values very carefully.
263:26 - In fact, so much carefully that when I actually did it
263:28 - on my other channel, yes, I do have other channel as well,
263:30 - I actually made a mistake on this.
263:32 - So this time I want to do it more cautiously
263:34 - so that I don't do the mistake.
263:35 - Okay, first of all, label.
263:37 - This time I know the label is going to be two.
263:41 - All right, what are the currency options?
263:43 - Easy peasy, I can give the options all to it.
263:46 - Then whatever the amount is,
263:47 - amount will be derived from the converted amount.
263:50 - This is a read only input field.
263:52 - So I will be giving it as amount disabled as true.
263:58 - I can give it like this,
263:59 - or if you just pass it on like this as well,
264:01 - that is also considered as true.
264:03 - All right, so that part is being taken care.
264:06 - Okay, now let's go up here.
264:08 - First of all, what I want to do here is on currency change.
264:11 - What happens when the currency changes?
264:13 - So when the currency changes,
264:15 - I need to first grab the currency,
264:17 - whatever the currency is.
264:18 - So I'll just grab it.
264:20 - Okay, and then I'll this time change the set to currency,
264:25 - and I'll change it to whatever the currency is.
264:27 - So set currency, set to and currency.
264:30 - I think that should be all.
264:32 - Now we also need to provide a selected currency,
264:34 - whatever the selected currency is.
264:37 - And in the selected currency,
264:38 - I can just go ahead and give an INR,
264:40 - but that would be bad because that's hard coded.
264:43 - So let's derive the value from the state itself.
264:45 - We're tracking this into a state known as two.
264:48 - And that's why we actually created this to,
264:51 - here it is, to and from.
264:52 - So this is what we have.
264:53 - Now, hopefully in the previous we did mistake,
264:57 - now this is working.
264:58 - Previously, if I change one state,
264:59 - it changes another state.
265:00 - Probably I did some mistake or something like that.
265:02 - Okay, anyways, let's go ahead and finally add
265:04 - the last button that we have.
265:06 - Very long video, but it's fun.
265:08 - It's fun, I hope.
265:09 - I hope it is.
265:09 - Just let me know in the comment section.
265:11 - I desperately read all the comment section
265:14 - and feedback from the students.
265:15 - That's my fun.
265:17 - Okay, we'll be saying convert
265:19 - and the button needs an on click.
265:21 - Obviously, we don't need on click actually.
265:23 - We need on, we don't need on.
265:26 - We need just the type of submit, that's submit.
265:28 - So it automatically submits.
265:30 - And obviously we don't want to convert to look like this.
265:32 - So you get that, we'll be adding the classes.
265:35 - Our classic classes.
265:38 - Copy that and paste it.
265:40 - Hopefully it looks good.
265:41 - There we go, looks good.
265:42 - And we can actually go ahead and try this.
265:44 - So let's just go ahead and USD.
265:46 - How much is five USD and we'll convert this.
265:51 - It's good amount, it's good amount in India.
265:53 - Okay, you can go ahead and remove this long string.
265:57 - So when the conversion is being done,
265:58 - you can actually use your JavaScript skills
266:01 - and stop this to just two numbers.
266:03 - I'll keep this one as up to you.
266:06 - But if you'll notice into our original app,
266:08 - we actually say it convert USD to INR.
266:10 - And when we change something to INV or something,
266:12 - it changes, so how we can do that.
266:14 - Super easy peasy, nothing.
266:15 - Just start your JavaScript and then just say that,
266:18 - hey, I want to use from and to
266:23 - and start your JavaScript and we'll be just saying to.
266:25 - And that's it.
266:27 - So if I go back here, it says USD to INR.
266:31 - Maybe you won't have to all uppercase.
266:33 - So it's also super easy because I know these are strings.
266:36 - I can go ahead and use to uppercase.
266:39 - It's a method.
266:41 - And similarly here to uppercase, this is also a method.
266:46 - And there we go.
266:47 - Easy peasy JavaScript, there is absolutely nothing.
266:50 - But if you look at this code base,
266:51 - let me give you a summary of this
266:53 - that all what we have done
266:54 - because there's so much into this video
266:56 - and I know this is a long video,
266:57 - how long almost are 40, 50 minutes.
267:01 - So we started by building our components.
267:04 - We studied the component and there is no way
267:06 - that you'll be designing a component this perfect
267:09 - when you'll be designing.
267:10 - Eventually you'll be keep on adding the data
267:11 - to the component.
267:12 - Maybe initially you start with label amount, that's it.
267:15 - Then eventually you add a currency options
267:17 - that I want to make my component more reusable.
267:20 - So it's not like on the day one, we designed it like that.
267:22 - Eventually we upgraded it.
267:23 - And that's a thing with the tutorial
267:25 - because you don't want me to sit here for six hours
267:28 - for building this kind of application.
267:29 - So obviously tutorials are more polished.
267:32 - So eventually you'll be building all these things.
267:34 - Don't worry, when you'll be designing the components,
267:36 - you'll be not designing this as perfect.
267:38 - Then we studied that how we can actually
267:40 - just simply take the values
267:41 - and ultimately what we did is just have an input field.
267:45 - And here we just had a select option field.
267:47 - So we just studied about how we can add
267:50 - an options field just like this.
267:51 - That's all what we did.
267:53 - Optionally we studied a little bit about the use ID hook,
267:56 - not very much used, not very highly implemented,
267:58 - but a lot of people use it.
268:00 - So I just thought to have a discussion over it.
268:02 - Then we studied a little bit about the index way
268:05 - of importing the component.
268:06 - Again, there is nothing, nothing wrong
268:08 - in importing the component from the component file itself.
268:11 - But eventually in the long run,
268:13 - this will make your code more scalable.
268:16 - That is always a good idea.
268:18 - And then we went into learning about the customized hook.
268:21 - This customized hook, as we learned,
268:22 - is nothing, absolutely ignore these X4X.
268:25 - These are coming up from one of my plugin that I have, sorry.
268:28 - This helps me to design the application faster.
268:31 - So we learned about the hooks as well.
268:34 - In the hooks, we saw that it's just a function,
268:36 - nothing else at all.
268:37 - This function requires a currency.
268:38 - And as soon as this function loads, whenever you call it,
268:41 - then it will fire a use effect.
268:43 - So at that point of time,
268:44 - a hook is automatically being called.
268:46 - This hook is fetching onto a URL.
268:48 - This URL you can grab from my GitHub account
268:50 - onto that React.
268:51 - I'm actually pushing this all the code on the GitHub as well.
268:54 - You can grab this URL.
268:55 - The only thing that we are changing is the currency.
268:58 - So we crafted the URL according to us.
269:00 - Then we simply taken the response into JSON
269:03 - and then we simply extracted some values out of it.
269:05 - We studied a little bit about properly looking at the URL
269:09 - and what the data we are receiving.
269:11 - So we studied that in this data, we don't want everything.
269:13 - We just need this INR and this whole thing.
269:16 - So we actually derived that value out of it.
269:19 - So we simply said, hey, I don't want all of this.
269:21 - I want just the currency part.
269:23 - So that currency part is obviously this whole thing.
269:26 - So this whole thing we extracted.
269:27 - Very basic data nitpicking.
269:29 - You'll be doing this quite a lot.
269:31 - And then we console log this
269:33 - and we actually returned the data.
269:35 - That's it.
269:36 - That's our hook.
269:37 - Now inside this app.jsx, we used the state
269:40 - to track all the values that were required for us.
269:43 - And in this portion, we use the hooks as well,
269:45 - our own custom design hook.
269:47 - This hook gives us the entire object.
269:49 - Out of this object, we extracted the keys
269:51 - because that is something we want to pass on.
269:54 - Classic JavaScript, nothing reactive about it.
269:57 - Then we studied how we can do the swap.
269:59 - Absolutely basic function.
270:01 - Converted was absolutely basic.
270:02 - This is just one liner code.
270:03 - And that's why a lot of people hate.
270:05 - I don't want to build a currency converter, just one liner.
270:08 - But ours is not.
270:09 - Ours is way more complex and way more scalable as well.
270:12 - Then we simply did all here.
270:14 - Here it was all boring, the input field.
270:16 - But hey, cautiously add your data
270:18 - because I did a mistake when I was teaching it
270:20 - on my other channel.
270:21 - But it's good.
270:22 - It's good.
270:22 - You learn from your mistake.
270:23 - It's no big deal.
270:25 - It takes just a couple of hours of debugging.
270:27 - Nothing more than that.
270:28 - So that is all what we have as of now.
270:31 - And I think this video has helped
270:33 - you a lot in understanding how the React works,
270:36 - how the big scalable projects are being taken up,
270:39 - and how we constantly move on further.
270:42 - Concepts are pretty easy when you're with me, of course.
270:44 - Leave down a comment.
270:45 - It really, really helps me.
270:47 - If you're watching the content, I
270:49 - know a lot of people are watching.
270:50 - And when they don't leave, just a thank note
270:52 - in the comment section.
270:54 - I'm always somebody who's looking in the comment section
270:56 - and finds it empty.
270:57 - It's disheartening.
270:58 - So please leave the comment.
270:59 - And I'll be thankful to you as well.
271:02 - That's it for this video.
271:03 - And let's go ahead and catch up in next, another such project.
271:09 - All right.
271:10 - Moving our journey further into the React ecosystem.
271:13 - Hey there, everyone.
271:14 - My name is Ateesh.
271:15 - And welcome back to another video.
271:17 - This one is also going to be a bit relaxed, chill out,
271:19 - enjoyable, slower guide on exploring another concept
271:24 - in the React world.
271:25 - Now, well, the concept in the React
271:27 - is single page application.
271:29 - That means there is no pages in these applications.
271:32 - It's just one page.
271:33 - And the whole idea of the React is
271:35 - I'll take the component, unmount it in place of this.
271:37 - I'll mount this one.
271:38 - So the whole idea is to manipulate the DOM
271:40 - as much as possible.
271:42 - When you actually say I want to go into register page,
271:44 - React never goes anywhere.
271:46 - It's a single page application.
271:48 - It removes some of the elements from your home page
271:51 - and injects some of the React register page on there.
271:54 - It removes the register page and injects the login component.
271:57 - And once you are successfully logged in,
271:59 - then it removes that and gives you a dashboard just right
272:02 - there.
272:02 - And your page never, ever refreshed.
272:05 - But this is not ideal for a regular user.
272:09 - A regular user doesn't really understand.
272:11 - And we cannot train the entire world population
272:14 - how to reuse the internet just because we have designed
272:16 - a new framework or a library.
272:18 - So the concept of moving users onto different URLs,
272:22 - like register page login, is so common
272:24 - that if you don't do this, people
272:25 - might think that it's very suspicious
272:27 - and it's not really a great thing for the URLs
272:30 - and the safety precautions.
272:32 - And that is why we need to figure out a way that how we
272:35 - can artificially inject the routing so that the URL looks
272:39 - great and user feels like they are moving
272:41 - onto a different page, although it's just
272:43 - react at the behind the scene.
272:44 - It's just a single page application.
272:48 - And yes, everything happens artificially.
272:50 - That is just a simulation being done
272:52 - that you are onto different URLs.
272:53 - Your page will never refresh, still the React concepts,
272:56 - bringing in the components, injecting the components,
272:58 - and all of that.
273:00 - So we'll be learning one such way of doing that.
273:02 - By the way, this is a core React course.
273:05 - That is why we are discussing about the routings.
273:07 - By the way, on my channel, you will
273:09 - find there is a Next.js playlist separately available.
273:11 - So in that we don't discuss too much of routing.
273:13 - That routing is different.
273:15 - And by the way, in case you are just interested,
273:17 - I do have a separate video on my channel
273:20 - in which I have showed you that how the Next.js routing can
273:22 - be designed customizably.
273:24 - Yep, your JavaScript, how the React router works.
273:27 - Anyways, let's move back.
273:28 - So in this video, first let me show you
273:30 - what we are going to build.
273:31 - And then I'll give you some of the concept
273:33 - of how to study the documentation
273:35 - and figure out things on your own with the React router DOM.
273:38 - That is the library which we'll be studying.
273:41 - So let me first take you onto the screen.
273:43 - There we go.
273:44 - Sorry we don't have any dark mode for this one.
273:46 - But this is the application that we'll be building.
273:49 - Luckily, you don't have to worry about CSS.
273:51 - I'll be giving you some of the files.
273:52 - I'll show you that as well.
273:54 - So this is our home page.
273:55 - And I recommend you to notice the URL.
273:58 - This is the home page.
273:59 - When I go onto about page, this is slash about.
274:01 - So this is simulating that you are moving on to the next page.
274:04 - But end of the day, this is just React.
274:06 - Our navigation bar never changes.
274:08 - Our footer also never changes.
274:09 - They stay exactly the same.
274:11 - So if I go back to the home, navigation bar
274:13 - remains exactly same.
274:14 - But our URL changes a little bit.
274:17 - So we have a home page, about page, and a contact page
274:20 - that we have.
274:21 - And similarly, we will be having a GitHub page.
274:23 - But the GitHub page additionally will do something different.
274:26 - The GitHub page will show my photo as well as my GitHub
274:29 - count.
274:30 - And we'll see that how we can optimize it
274:32 - through the React router DOM, which
274:34 - is the library we are using.
274:36 - And for every single time, we have these applications going
274:39 - on like this, GitHub and About.
274:40 - We'll also see how we can grab some of the URLs and whatnot.
274:44 - There's a lot more that we'll be studying than just being
274:47 - shown on the website itself.
274:49 - And the package that we'll be studying is React router DOM.
274:53 - It's available on reactrouter.com.
274:55 - It's by the Remix team made by Remix.
274:58 - And what we'll be doing is there are a lot of ways
275:01 - how router actually evolves, and especially the version 6,
275:03 - which we are at the time of the recording video.
275:05 - This is the newest one.
275:06 - We'll be using that one only.
275:08 - But I'll walk you through how you can actually
275:09 - explore the documentation.
275:10 - Otherwise, my channel is always available for you to help.
275:14 - But we'll be seeing that how we can use the 6 version.
275:16 - We won't be talking about the 5 at all.
275:18 - We'll be seeing that how we can pick up different variations
275:21 - of the router.
275:21 - We'll be using the Create Browser router.
275:24 - And the whole idea is to study this piece of code
275:27 - so that we can load things on our own
275:29 - and can design the routing for this application,
275:31 - this sample application, which will give us
275:34 - the entire idea of how the application is built
275:36 - or should be built and all of that.
275:38 - We'll see some of the optimization tasks and techniques
275:40 - and whatnot.
275:41 - So everything will be pretty nice up there.
275:43 - All right, enough of the talk.
275:46 - Let's go back on to this one.
275:48 - And by the way, one more thing.
275:50 - If you'll go on to this one, so I have a repo on my GitHub
275:54 - account, github.com slash at the chaudry.
275:56 - You can find a repo with the name of React English
275:59 - because these videos are in English.
276:01 - And you can see that there is a React router notes.md.
276:06 - The file is available for you.
276:08 - This is a markdown file which will help you to actually grab
276:10 - the components.
276:11 - Like, for example, for the header part or the navigation
276:14 - bar, this is all the code which has nothing
276:16 - to do with the React routing majorly.
276:19 - It's just a CSS.
276:20 - Similarly, in the footer, if you check out the footer,
276:22 - this is just a static footer.
276:23 - We just need it to understand a few concepts.
276:25 - It could be just one liner, but nobody gets
276:28 - impressed with the one liner text.
276:30 - That's why we are actually giving it to you.
276:32 - So you can find the footer component, just copy and paste
276:35 - it.
276:36 - And then similarly, we can have home component and contact us
276:41 - page.
276:42 - That's it.
276:42 - GitHub will be designing on our own.
276:44 - So that's the basic part of it.
276:49 - So let's go ahead and create a fresh new project and work
276:53 - with it.
276:54 - OK, let's grab and there we go.
276:59 - OK, so first of all, let's kill this.
277:01 - We don't need you.
277:03 - And let's go ahead and work on with this.
277:06 - Just give me a second.
277:07 - I'll align the things and remove this one.
277:12 - Let's start a fresh one.
277:14 - And we'll say npm create wheat, not react.
277:21 - And this one is going to be an introduction
277:24 - to just the routing.
277:25 - So we'll be calling this one, I guess, the seventh
277:28 - application that we have.
277:29 - So 07.
277:32 - And we'll be saying react router.
277:37 - Package name is same.
277:38 - We'll go with react and JavaScript.
277:42 - All right, so this seems good.
277:45 - Now we need to go inside the folder.
277:47 - But as you know, I prefer to actually right click and open
277:50 - the integrated terminal.
277:52 - That way, I'm always into the root.
277:54 - So I can just run npm i to install the application.
277:58 - And we can actually go ahead and move on to the browser
278:04 - itself.
278:04 - Let me go ahead and get into the browser.
278:08 - And how we can actually install this.
278:09 - So there are main concept, migrating, all of this.
278:13 - Let's go on to getting started.
278:17 - And there should be getting started guide tutorials.
278:25 - Yep, the project install.
278:27 - Just get me the npm install command, or I'll do it myself.
278:32 - OK, no examples.
278:35 - FAQ main concept.
278:36 - OK, I understand the main concept.
278:38 - Just give me that path.
278:41 - OK, probably it's not going to be.
278:43 - Nothing, it's a React router DOM.
278:44 - So I'll just install it.
278:45 - So npm install, it's React.
278:47 - Somewhere it is, I'm not able to find it.
278:49 - React router DOM, a very famous package.
278:52 - If you are any time working on the React,
278:54 - this is the package you will be dealing up with that.
278:57 - Now, in this package entirely, all you have to do
279:00 - is go with the main concept.
279:02 - This is really the essence of how
279:05 - to understand the React router DOM, what happens,
279:07 - how it happens, and a lot of essential things
279:10 - are mentioned in this one.
279:11 - So how you track the URL, how you track the location,
279:14 - forceful, although we'll be studying a lot of it,
279:17 - especially the router inside when
279:19 - we'll be building a mega project finally in this series.
279:22 - So all these things like client-side routing,
279:24 - the location state, and all of that will be taken care there.
279:27 - But if you have time, go ahead and go with the main concept.
279:30 - Some of them we'll be studying here, like the path patterns,
279:32 - what this is, how to grab the URL params, dynamic routing.
279:36 - We will be studying in this one.
279:38 - But definitely, this is a very rich guide.
279:42 - These kinds of concepts, these all
279:44 - will be taking care of this.
279:45 - But it is always a good idea to actually go
279:47 - with the main concept documentation.
279:49 - This is the part where you study and you read out the stuff.
279:53 - Moving back, so now everything is installed.
279:55 - Let's first go ahead.
279:57 - We'll be needing tailwind as well,
279:59 - because if you look out the classes and all of that,
280:01 - yes, there is a lot of tailwind.
280:03 - So let's go ahead and install the tailwind as well.
280:05 - One more time, in fact, a lot more time
280:09 - will be coming up in the future as well.
280:11 - OK, so this is what we have as a tailwind.
280:14 - And we need to actually copy the content.
280:16 - I'm pretty sure you might be just kind of memorizing this
280:19 - at this point of time.
280:21 - OK, the content will be replaced.
280:24 - Save that and go into main.jsx.
280:28 - No, index.css, remove everything,
280:31 - and we'll be grabbing these ones.
280:33 - Copy them and paste them up here.
280:35 - Save that.
280:37 - We don't need anything into the app.css as well.
280:39 - Just remove everything.
280:41 - We won't be using actually the app itself.
280:44 - OK, further, let's go ahead and run npm install, npm run dev,
280:53 - npm run dev.
280:56 - And that should be up and running on my system.
280:59 - There we go, basic.
281:01 - Since the app.jsx is anyways getting loaded,
281:04 - let's go ahead and at least grab some of the values out of it.
281:08 - So we'll be saying h1 of React Router, React Router DOM.
281:16 - And we'll be saying, let's add a class name.
281:19 - And we'll be saying bg dash what?
281:23 - Green.
281:25 - Suggestions, yes, bg green 300.
281:27 - Let's see, yeah, at least our tailwind is working.
281:31 - All right, we won't be touching this thing here.
281:33 - We'll be getting started with a couple of routes and folders
281:36 - and basically trying to get a feel of how the entire thing actually works.
281:41 - So first thing that we are going to do is there is always components
281:44 - or some people call it as pages.
281:46 - Totally depends on you how you want to call it.
281:48 - We'll start by calling this one as component.
281:51 - Eventually, as we go into the mega projects,
281:52 - we'll be designing components and pages as well.
281:54 - But these are just file names.
281:56 - Nothing really bothers us.
281:58 - So we'll be calling this one as components.
282:01 - And this is just a directory structure.
282:03 - Each instructor is going to give you their best
282:05 - or their practices, which is being used in their company.
282:09 - We'll be creating a couple of folders first,
282:11 - and then we'll be going through with that.
282:12 - First of all, let's go ahead and call this one as header.
282:15 - Inside the header, I will have a new file.
282:18 - And I'll call this one obviously as header.jsx.
282:22 - Now, nothing much in this file.
282:24 - I'll just say this is a div, which says header.
282:27 - That is it.
282:28 - Absolutely that.
282:29 - Nothing more than that.
282:31 - Now similarly, in the component, there will be a new folder
282:34 - and we'll be calling this one as footer.
282:36 - Inside the footer, we'll be having a new file,
282:39 - which we are going to call footer.jsx.
282:42 - There we go, rfce, we have just footer.
282:45 - This will help us to understand some of the main concepts
282:48 - of how things are actually being done
282:50 - or how things are being laid out.
282:52 - All right.
282:53 - Now, the next thing that we are going to do
282:55 - is once we have these headers and footers,
282:57 - we will be replacing them with the notes that we have,
283:00 - because if you remember,
283:01 - this is where actually our component comes up.
283:03 - This is where the header goes.
283:05 - This is where the footer component goes
283:06 - and we'll be talking about them as well.
283:08 - But right now, this is all what we have.
283:11 - Now, after this, what we're going to do is,
283:13 - this component will be closing it down.
283:15 - In our main directory, what we're going to do is,
283:17 - we won't be using this app.jsx,
283:20 - although you can, no big deal there.
283:22 - But I'll be creating one more file inside this,
283:25 - which will be directly known as layout.
283:28 - And this is a common practice.
283:30 - The reason for creating this file is,
283:32 - in our application, you will see that,
283:35 - especially in this one, that the header always remains same,
283:39 - the footer always remains same,
283:40 - only the inner content changes
283:42 - from home to about and all of that.
283:44 - So we need to figure out a way
283:46 - that we don't have to repeat ourselves that often.
283:48 - We just want to grab a header should always be there,
283:51 - footer should always be there,
283:52 - and we'll be just injecting the content in between.
283:54 - That is a common practice.
283:56 - You'll find this exactly same pattern
283:58 - being used in the Next.js and a lot more stuff.
284:01 - So we'll be using that practice exactly here.
284:03 - So again, rfce, React functional component,
284:06 - which gives me a layout, export it, that's it.
284:09 - But what additionally we can actually go ahead and use,
284:11 - the first concept about this, which you'll be using,
284:14 - is known as outlet.
284:16 - This outlet is a special thing,
284:18 - which is coming up from React Router DOM.
284:21 - Remember, so far we have been using just the React
284:23 - or the React DOM,
284:24 - but this actually comes from React Router DOM.
284:27 - The advantage of this is that I can go ahead
284:30 - and return some special things.
284:31 - First of all, let me import them.
284:33 - I'll go ahead and say I need a header.
284:35 - Let's just say header comes up like this.
284:38 - I also need footer, footer also comes up like this.
284:41 - By the way, we can export these components
284:43 - into index file as well.
284:44 - That's totally your call.
284:46 - You can go ahead and do this.
284:48 - Now here, what I'll do is I'll remove this.
284:50 - I'll inject just the fragments, just like this.
284:52 - And I'll say there should always be a header, all right.
284:56 - And there should always be a footer.
285:00 - So there we go.
285:01 - And now what I'll do is I'll inject a special element
285:04 - that is given to me by the React Router DOM
285:07 - and call this one as outlet.
285:09 - It needs to be always called as outlet.
285:11 - There is no other name for it.
285:12 - And this is something which actually gives us
285:15 - this capability that, hey,
285:16 - this will always be on all the pages.
285:18 - This one will be in all the pages.
285:20 - This is designing the layout of the application.
285:22 - Now what's inside the header?
285:23 - What's inside the footer?
285:24 - That's not our call, but they will always be there.
285:28 - And whatever the information that you are using,
285:30 - you can actually go ahead and use that.
285:32 - But the main question that we have is
285:34 - that how it will know that we are actually doing this.
285:37 - Because right now, if I just open the application
285:40 - and I run this, this is not going to work.
285:43 - So it's already running.
285:44 - We don't need to worry on that part.
285:46 - If I go ahead and open this up in the VIT,
285:50 - it doesn't take place.
285:51 - It doesn't actually does anything.
285:54 - The reason for that is in the main.jsx,
285:56 - or whatever your file is in your case,
285:58 - whatever you're using,
285:59 - you are actually still serving app.
286:00 - It doesn't have the configuration which is required
286:04 - to actually have this router.
286:06 - And this router has a couple of ways
286:08 - of how you can actually do the things.
286:09 - I'll show you both the ways
286:10 - which are actually mentioned in the documentation.
286:13 - So the first thing that we are going to do
286:15 - is keep this as it is.
286:16 - We don't want to touch it initially,
286:18 - but we want to create a router.
286:20 - And this is the router which I showed you initially
286:22 - that comes up from this create browser router.
286:25 - There are multiple types of router that you can use,
286:27 - but we'll be using this create browser router.
286:30 - And we'll try to create a path like this.
286:32 - I'll show you this syntax
286:33 - and there's another syntax as well.
286:34 - I'll show you the both.
286:36 - You can pick up whichever you like.
286:38 - So we can go ahead and create a router.
286:40 - So router and that router will be created
286:44 - by create browser router.
286:47 - So again, create browser router
286:48 - comes from the React router DOM.
286:50 - It's nothing, it's a function.
286:52 - But this is a function which doesn't work alone.
286:55 - If you look at the documentation,
286:57 - this function actually needs a route provider as well.
287:00 - But it's not just the route provider.
287:02 - You can see there are lots of ways
287:03 - of how you can actually have the route provider,
287:05 - static route provider, create a static handler.
287:09 - There are a lot of ways browser router.
287:11 - So this documentation is quite in depth
287:14 - and there are multiple use cases for each one of them.
287:17 - I'll show you the most easiest one
287:18 - that what accompanied you need to create this one.
287:22 - And what we'll be doing is simply we'll come here
287:26 - and we'll take this one as create browser router.
287:32 - Oops, create browser router is already there.
287:34 - And we need create route elements.
287:40 - Yeah, create route from elements, yep.
287:43 - It's a little bit difficult to remember this one
287:45 - but as you will do a couple of more projects,
287:48 - you will be familiar with that.
287:49 - So once we have this create browser router,
287:51 - then inside this, you can go ahead and use this
287:53 - which is create browser, create routes, my bad.
287:59 - Create routes from element.
288:01 - This is again a method.
288:02 - This is again a method, no big deal there.
288:04 - Now inside this, there's a syntax that you have to follow.
288:07 - So I'll come back here.
288:09 - You need a special element known as route.
288:13 - And this route is obviously going to come
288:16 - from the React router DOM.
288:17 - And this route actually works like component itself.
288:20 - So just like we saw that our empty components
288:24 - can have headers and footers.
288:25 - And we also saw that headers could wrap up
288:27 - inside footers and all these elements.
288:29 - So just like this route is nothing, it's just a component.
288:32 - So notice like this is how it works.
288:34 - So just a basic element, nothing more than that, a component.
288:38 - But this route actually takes a couple of parameters
288:41 - and based on this, how it works.
288:43 - It works on this kind of a sandwich model that we have.
288:46 - So we'll first of all say that, hey,
288:47 - everything will go inside the path of a slash.
288:50 - And what is the element that you want to load?
288:52 - Every single time you have to follow the same syntax,
288:54 - you have to tell it a path
288:55 - and what element to load in that path.
288:57 - Element simply means what components you want to load.
289:00 - In my case, I'll just say, hey, element that I want to load
289:03 - in this one, I'll give it like this.
289:05 - I want to load an element known as layout.
289:09 - And there we go, self-closing of course, there we go.
289:12 - Now, once I've done this,
289:13 - now things will actually take place
289:15 - and instead of having this app,
289:17 - we want to use this router inside one here.
289:19 - So there's again a syntax,
289:21 - a little bit syntax for this one as well.
289:24 - We now don't want to use this app,
289:25 - we want to use our layout
289:27 - and want to load everything inside it.
289:28 - In fact, if we have the app,
289:30 - we want to load this inside the layout itself
289:33 - so that the header and footer always remains.
289:35 - So we have to remove this here, this one goes away,
289:38 - this one doesn't load directly.
289:40 - In fact, we go ahead and use a router provider here.
289:43 - Again, router provider comes up from the React router.
289:47 - And the whole idea behind that,
289:48 - it's a self-closing element,
289:49 - you don't need to just have the ending one.
289:52 - And inside this, you provide just one param router,
289:55 - which is the router.
289:57 - A router is the property
289:58 - and is the router which we are creating.
290:00 - Make sure the router provider is getting operated
290:04 - and is being taken care.
290:06 - Once we have this, now what you'll notice is
290:08 - we have this header and footer.
290:10 - Since we haven't provided any outlet to this one,
290:13 - that's why only thing that's loading is header and footer.
290:16 - Now in this one, you can add as much as you like.
290:20 - Now let's take care of this one here a little bit
290:22 - since we have a couple of paths to work on with this one.
290:25 - So we have this route element and I told you,
290:27 - this is like an element, like a sandwich that we have.
290:30 - We saw the sandwich kind of a thing here as well
290:32 - and we can actually use that.
290:33 - You might have seen that this is an opening,
290:35 - this is a closing one,
290:36 - inside this you can add as many as you like.
290:39 - Similar to this, we have this one,
290:41 - but right now the path that we are serving is this one.
290:43 - So inside this, you can have as many routes
290:46 - as you wish for them.
290:47 - So these routes could be self-closing
290:50 - or could be the sandwiching one like this one,
290:53 - or you can have these ones as like this self-closing.
290:56 - Now here's the interesting path.
290:59 - First of all, what path do you want to load?
291:02 - In this case, I want to load a path.
291:04 - I'll tell you in a minute what path to load.
291:06 - Single codes, double codes, whatever,
291:08 - but I don't have an element in this one to load.
291:10 - So what I'll do is I'll quickly go ahead
291:12 - and create another component in this one.
291:15 - So right click and we'll be creating a new folder.
291:18 - Let's call this one as home.
291:20 - Doesn't really matter, we'll be using the boilerplate code
291:23 - and we'll be saying home.jsx.
291:26 - And again, rfce, that's it.
291:27 - All what we have is a home text being literally written.
291:31 - Now inside this, I don't say anything.
291:33 - I don't say a slash or anything further
291:35 - because everything now happening is after the slash.
291:37 - That's what the meaning of this first route
291:39 - at line number 10 is.
291:41 - Now what element do you want to load?
291:43 - I want to load an element which is home.
291:45 - So I'll just go ahead and say,
291:46 - hey, give me an element which is home and self-closing.
291:51 - Now when I go back, notice here,
291:53 - the home element gets loaded.
291:54 - So that is the advantage of this one.
291:57 - In the basic layout, notice here,
291:58 - I'm actually at the slash.
291:59 - So this is technically slash,
292:01 - which is where I'm home is loading.
292:03 - Now let's just say, for an example sake,
292:05 - you want to have a router which says about.
292:08 - So again, first create that component itself.
292:11 - So we'll create a new folder.
292:13 - We'll call this one as about
292:15 - and right click and create a new file.
292:17 - Let's call this one as about.jsx, of course,
292:23 - and rfce, nothing.
292:25 - It just says about literally nothing else.
292:27 - You guessed it right.
292:29 - Now after the slash on the home route, this works,
292:31 - but I want slash about to load that component.
292:34 - Again, go back here and simply say route.
292:37 - Again, this will be a component.
292:39 - So route, self-closing could be fine here.
292:42 - And then simply we will have a path
292:45 - which is going to be like this.
292:47 - This one is going to be saying at this time,
292:49 - we need to change it as about.
292:50 - Remember, we are saying about here,
292:52 - but this about is after the slash
292:54 - because it is sandwiching that one.
292:56 - So sandwiching concept comes up here.
292:58 - So on the homepage, we have given a layout,
293:02 - a layout, a route here.
293:04 - This is too much difficult to spell.
293:06 - Here, we are saying that on the same level,
293:09 - on the same hierarchies after the slash,
293:11 - if I write about, remember, I don't say slash about,
293:14 - otherwise it will be twice.
293:15 - I just say about, what element do you want to load?
293:18 - The element that I want to load is going to be like this.
293:22 - And this one is definitely going to be about.
293:25 - And there we go, self-closing.
293:26 - So now technically I can go on to slash
293:30 - and I can just go ahead and say about.
293:32 - Notice here header and footer remains same,
293:34 - but my about changes.
293:36 - So I can go back, this is home.
293:38 - So this is the whole idea, whole concept.
293:41 - If you want to go further into this that I want about,
293:43 - and then after that some slash or something like that,
293:46 - then obviously you can go ahead and say that,
293:48 - hey, this is my about and slash,
293:49 - this is where I'll be loading this one.
293:51 - So notice here, I can still go on to slash about
293:54 - and it still works.
293:56 - If you want to have it like this,
293:57 - again, use the sandwiching concepts.
293:59 - So in this case, I'll just go ahead and say a route.
294:03 - There we go.
294:04 - And we'll end this one.
294:06 - Oops, my bad.
294:07 - This one needs to go like this.
294:10 - And we don't need this one, my bad.
294:14 - There we go.
294:15 - So now we have a closing one, closing partner of this one.
294:18 - Now I can go back and again start writing the elements,
294:21 - whatever that element is.
294:23 - This could be about, and this could be company.
294:28 - And I can load any element, whatever I want.
294:30 - So just remember the concept of the sandwiching.
294:32 - So one things can be inside it.
294:34 - Whenever you need a further drill down path,
294:35 - you can do this.
294:36 - If you don't want to do this,
294:38 - just use a self-closing one, that's also the same.
294:40 - So you get the idea how the concept actually works.
294:43 - All right, so now we know the basic principle
294:46 - of how the things are there.
294:48 - There are a couple of more principle
294:49 - that we need to actually go ahead and work on with this.
294:52 - And we need to have a small discussion on this one.
294:54 - Let's go on to the home, not home header, header.
294:58 - This is where we'll be working on.
295:01 - So again, we need to copy paste some of the CSS
295:03 - for this one.
295:04 - So we'll be grabbing all the,
295:05 - we can just go ahead and grab directly all of this.
295:08 - We have the header at the very top, we'll be doing that.
295:10 - But there are some elements which actually requires
295:13 - your attention into this part.
295:15 - So let's go ahead and grab, remove this one.
295:18 - And we'll be having a simple header, just like this.
295:21 - It will have a class name,
295:23 - and I'll obviously copy and paste the class names.
295:26 - This is the part where it's a little boring,
295:28 - but don't worry, there are some interesting features here,
295:30 - which we want to discuss.
295:32 - Then we have a nav, which we are writing again, plus name.
295:36 - And again, the class name will remain same.
295:39 - So copy and paste that.
295:40 - So now that we have nav, inside the nav,
295:43 - we will be writing variety of links.
295:45 - Now your first intention would be just to use a tag.
295:48 - This is where things can go actually wrong.
295:51 - So I'll just have a div, another one here,
295:53 - because that's how we laid out while designing this.
295:55 - So I'll just have the class names, copy that,
295:59 - paste that up here.
296:00 - And inside this div, we have all the links.
296:02 - What you saw earlier on the webpage, like here,
296:06 - home about and all of that.
296:07 - So they are just obviously,
296:09 - they are just links all inside this one.
296:11 - So we'll be using that.
296:13 - Now the first intention is always go and use the A tag
296:17 - and just write this.
296:19 - Remember the A tag, the whole idea behind using the anchor
296:21 - tag is to move on to different resources.
296:24 - When you use A tag, the page actually reloads.
296:26 - It remounts because the control is given to the browser
296:29 - and the DOM, which is in the browser itself.
296:31 - We don't want that because page should not reload.
296:33 - It's a single page application.
296:35 - And that is why every single router,
296:37 - no matter it's in Next year's or React or wherever it is,
296:40 - it is giving you some ways of navigating things.
296:43 - Because remember, this is all a facade.
296:45 - This is not real.
296:46 - This is just a simulation of moving to slash about
296:50 - and wherever it actually never goes there.
296:53 - So that is why in every single time you'll find something
296:55 - known as link or somewhat similar to that,
296:58 - which is actually coming up from, as you noticed here,
297:01 - React router DOM.
297:02 - Remember it always comes from React router DOM
297:04 - or somewhat like that.
297:05 - And we work through that.
297:07 - So in this case, we'll be just saying that,
297:09 - hey, we'll be having a link.
297:12 - And again, this could be a self-closing one,
297:13 - or you can just go ahead and close it like this.
297:15 - So I can just go ahead and say slash link like this.
297:19 - Again, it could be self-closing.
297:20 - It could be like this, totally up to you.
297:22 - Now in this link, what do you want to have?
297:24 - We have just an image with the logo or something like this.
297:27 - So in the image part, we are not talking that much,
297:29 - but yeah, we just added an image or something like this.
297:32 - But notice here, this link is pretty interesting.
297:34 - This is not your A tag.
297:37 - It doesn't have an href.
297:38 - It has rather a tag of known as two,
297:40 - and this too will take you wherever you like to go.
297:43 - So this is the interesting part
297:44 - where you should pay attention.
297:45 - So if I go back up here,
297:47 - notice here, this logo comes up here.
297:49 - So simply go ahead and works on with that.
297:51 - We just found this random logo on the internet
297:53 - and we worked on with that.
297:55 - Now, similar to this, you can actually have more of this.
297:57 - In fact, now I can go ahead
297:59 - and bring all of this header component up here.
298:01 - So if I just go back here, copy this, exactly same thing.
298:06 - So I can just now replace and talk about it.
298:09 - Paste this, and we have exported default all of this.
298:12 - But the only thing that is still required
298:14 - is to import the links and all of that.
298:16 - Otherwise it will yell at you.
298:17 - So go ahead and import React.
298:20 - Do we need React?
298:21 - I don't think so, we need React,
298:23 - but still if it is saying, I'll just grab it.
298:25 - We need link definitely because we discussed about it.
298:29 - And the link is going to come from React Router DOM.
298:32 - And not only link, let me show you a couple of more stuff.
298:35 - So the link is actually one way of navigating
298:38 - from one place to another place.
298:40 - So notice here, mostly the link is used,
298:42 - but there is also a nav link being used.
298:44 - So nav link is also a part like that, so navigation link.
298:48 - Right now we are just using it as a basic,
298:50 - but nav link actually gives you a couple of more features
298:52 - like on what page you are
298:54 - and what values you can actually use.
298:55 - So we'll see some of the variations
298:57 - and versions of that as well.
298:59 - But right now we'll just import that and leave it.
299:01 - Remember, link is not the only way of navigating.
299:04 - We have the nav link as well.
299:05 - And we can read about the documentation of this one
299:08 - if they have any global search.
299:10 - I don't think so.
299:13 - Let's just say components.
299:14 - You can see the nav link here.
299:16 - And what you'll see in the nav link,
299:18 - you can find out pretty easily what class is active
299:20 - and what ends and all of that.
299:22 - So notice here, it says two messages.
299:25 - So the link and nav link almost same,
299:27 - the two section and everything is almost same.
299:30 - The only thing additional with the nav link is
299:32 - you actually get this is active
299:33 - and is pending and all of that.
299:35 - So why are using this is active,
299:37 - which whenever you use any class name
299:39 - or any arrow functions like this,
299:40 - it is available to you directly.
299:43 - And notice here, they also say this,
299:45 - a nav link is a special kind of link
299:46 - that knows whether it is active or not.
299:48 - So when you go up onto the applications like this,
299:51 - and when you say that, hey, this page is active
299:54 - or this page is active, just like that,
299:56 - that whole functionality can be done via the nav link.
299:59 - So that's why we have this nav link.
300:02 - All right, by the way, notice here,
300:04 - this is exactly what we are doing,
300:05 - whatever the values are active and all of that.
300:08 - We'll talk about that later on in the some sections
300:11 - where we'll be having.
300:12 - In fact, we can actually talk about this into about whatnot.
300:17 - So this is get started.
300:19 - Then we have couple of nav links on the home.
300:21 - Actually, we have just one on the home.
300:23 - We can design it right now itself.
300:25 - So let's just say on the home,
300:27 - what you can do is you can just add a couple
300:30 - of more practices and what the text you want.
300:33 - So for example, now we are in the nav link
300:35 - in the class name itself, since we are using a callback,
300:38 - this is the syntax exactly, they are also mentioning it.
300:40 - So we are not doing anything special.
300:42 - In the class name property,
300:43 - we have the access of this callback
300:45 - and then we can write all this.
300:46 - So this is exactly what we'll be also doing.
300:49 - So in this one, we have the access to this is active.
300:54 - Remember, this needs to be exactly as is active
300:57 - or is pending.
300:58 - So we don't decide the variable name in here.
301:01 - So we have this is active.
301:02 - And by the way, one more thing,
301:04 - which usually I also forget,
301:05 - this is active needs to be extracted
301:07 - as a property like this.
301:08 - So yeah, I also make sometimes this mistake.
301:12 - So let's go ahead and keep it up like this.
301:16 - And now you have access to is active.
301:18 - Now based on is active,
301:20 - we can decide whether the color is going to be gray
301:22 - or this one.
301:23 - So we'll just actually cut this out.
301:25 - We want to cut this one out.
301:27 - And once we are cutting this out,
301:29 - we can inject the JavaScript again.
301:32 - And by the way,
301:36 - dollar sign is missing.
301:38 - Yeah, now we are happy.
301:39 - Okay, now based on is active,
301:41 - we can do a question mark and a ternary operator here.
301:45 - If it is active, then we can go ahead and use a text of,
301:50 - not this one, text orange.
301:52 - So we'll just say text dash orange.
301:55 - We'll be probably using 700 version of it.
301:58 - That's what we used.
301:59 - And here we can use a text dash gray 700.
302:04 - Gray 700, no suggestions.
302:08 - There we go.
302:11 - No suggestions, strange.
302:13 - Anyways, we can just find it out later on
302:15 - if we are doing any mistake.
302:16 - And by the way, this needs to be wrapped inside the quotes
302:19 - because it's a class, not a variable.
302:22 - Class I mean to say tailwind class.
302:26 - So that is all what we have.
302:28 - And based on this, we can have a nav link
302:30 - which can provide you whether you are active
302:31 - or not onto this one.
302:33 - So nav link should be refined.
302:35 - So now we have our own home, but if I go on to about,
302:39 - so we have the home.
302:42 - And if I go on to slash about,
302:46 - this should be technically going away.
302:47 - We shouldn't be having this link as,
302:51 - if it is true, then it's 700.
302:53 - If it is false, it goes like this.
302:57 - But okay, we'll see that how this actually works
302:59 - and how we can actually have more links onto this one.
303:03 - This one is nav link.
303:05 - We haven't mentioned the two, we have to mention that.
303:08 - Otherwise how it will work.
303:10 - And we'll be saying that, hey, you will be on slash.
303:12 - So now it will keep a track of, there we go.
303:15 - Now, if I go back to home, it's orange.
303:17 - But if I go back to slash about, we are not active.
303:21 - There we go, told you, simple.
303:23 - Okay, now we can have multiple of these allies
303:25 - and can define a home about whatever you wish.
303:28 - So I'll just copy and paste from ally.
303:31 - I'll just duplicate this.
303:33 - And this one is going to be slash about.
303:38 - And there we go, now I forgot to change the text.
303:42 - About, save that.
303:44 - Now we can travel to home, we can travel to about.
303:46 - And similarly, we can have more of these.
303:49 - So if I remember, we have home about,
303:51 - and we will also have the contact.
303:52 - So I'll just duplicate this one.
303:55 - I hope you remember the shortcut for duplicating in VS code.
303:57 - If not, right now is a good time to find it out about.
304:00 - Okay, home, contact.
304:04 - Contact, this one is going to be contact.
304:10 - We also will have probably GitHub as well.
304:13 - We'll be having some fun with GitHub as well.
304:15 - All right, copy and paste that.
304:19 - This one will say, I'll go to GitHub component
304:22 - wherever that is.
304:25 - All right, so now we have home, we have about,
304:28 - although there is nothing inside the contact.
304:30 - So this route doesn't, is there.
304:33 - So we need to actually define our 404 route as well.
304:35 - We can work on with that.
304:36 - But at least our home and about component are there.
304:39 - And we now know about the nav link,
304:41 - which is a special kind of a link
304:42 - and we are aware of how things are there.
304:44 - Now with this, we can actually go ahead and move on
304:46 - and work with the footer, which is super easy.
304:48 - Now you can go onto my notes.
304:50 - And this is the footer,
304:51 - just scroll it all the way to the right.
304:53 - And you will find this copy button
304:55 - or you can manually copy and paste that.
304:57 - And all we have to do is paste this all here.
305:00 - Since we have link in this one,
305:02 - so just go ahead and fix the errors.
305:04 - Let's first import the React, import React,
305:09 - and then we'll be importing the link.
305:13 - And that link is from React Router DOM.
305:15 - Technically, we should be all good now.
305:17 - So we can see at least a home and about,
305:19 - but our footer is coming.
305:20 - So it's looking nice as well.
305:22 - Apart from this, there is no big deal
305:24 - and no facade about it.
305:27 - Similarly, we have a home component as well.
305:30 - We can go back and replace it with the home.
305:32 - So again, it will look just a little bit beautiful,
305:34 - nothing more than that.
305:36 - And home, select all, replace it.
305:41 - I don't think so.
305:42 - We have anything in this required.
305:44 - Let's just try this.
305:46 - Save this and go back.
305:49 - And do we have some links?
305:50 - Yep, we have some links in the home as well.
305:53 - So let's import that, no big deal.
305:55 - In fact, we can actually copy, paste footer here.
306:00 - And let's just copy and paste.
306:02 - All right, let's come here.
306:05 - And there we go.
306:06 - Should be all okay now.
306:08 - There we go.
306:09 - So we have home page.
306:10 - So we have learned how we can design that home about
306:12 - and whatnot.
306:13 - So I'm leaving this contact page to you
306:15 - as a simple exercise.
306:16 - All you have to do is go up here.
306:18 - We have the contact us page as well
306:20 - and go ahead and work on with the contact us page,
306:22 - about us page.
306:24 - About, I can do this for you.
306:26 - Okay, so about is here.
306:29 - We'll be replacing it with here
306:31 - and we'll be importing the link.
306:32 - If we have, I don't think so.
306:33 - We have link from React router down.
306:39 - Let's see.
306:40 - If we have about, yep, home is looking good.
306:42 - About is looking good.
306:43 - Contact is for your exercise.
306:45 - Maybe, maybe, I don't know.
306:47 - We'll try to have some of the work
306:48 - with the contact and user and whatnot.
306:50 - Okay, one more thing that we'll be doing
306:52 - is we'll be creating another component.
306:56 - Let's go back onto the code side of it
307:00 - and we'll be creating another component.
307:02 - Let's call this one as user
307:03 - because I want to show you some more ideas
307:06 - that you'll be using.
307:07 - Let's call this one as simple user
307:10 - and we'll be having a simple layout here, new file.
307:14 - That will be user.jsx
307:18 - and just the basic RFC.
307:21 - So we have a user.
307:22 - Now, in order to make sure that this component loads
307:25 - somewhere, we have too many files opened up.
307:27 - I would love to close that.
307:29 - In order to make sure that I have a really huge code base
307:32 - into the user, in order to load this,
307:33 - I need to go into main.jsx
307:35 - and how can I load a route which actually loads this one?
307:39 - So I can just go ahead and say that,
307:41 - hey, I want to have a route
307:44 - and this route will be on going to
307:46 - whatever the path you ask me to do so.
307:48 - I'll just say, hey, go on to user
307:51 - and the component or the element that I'll be loading here
307:54 - is going to be a user.
307:57 - User, it doesn't suggest me user.
308:02 - Okay, I'll write that again.
308:04 - I want suggestions.
308:06 - Okay, there we go.
308:07 - And here we'll be saying, hey, give me user.
308:10 - It doesn't give me user.
308:11 - Save that and probably this will give us issues.
308:16 - It surely will.
308:17 - I will just first remove this about
308:19 - because we don't want that.
308:21 - The element should be user.
308:24 - It should be auto importing that.
308:26 - And we'll be saying import user
308:28 - from component user user JSX.
308:31 - Okay, all happy.
308:32 - Now, can we have another link for the user itself?
308:36 - Probably yes.
308:37 - Let's go into the header.
308:40 - And can we have another LI for the user itself?
308:45 - Let's try this.
308:47 - Link, go ahead, copy and duplicate that.
308:51 - This will be going to a user
308:54 - and we'll be calling this one as user, how easy that was.
308:58 - Okay, now if I go back to the user, okay, I get the user.
309:02 - Now in this user, first of all,
309:03 - let's just central line some of the stuff.
309:06 - We don't want it like that.
309:07 - So we'll be adding some of the class name,
309:09 - we'll be adding some of the background,
309:11 - BG dash orange suggestions.
309:15 - We'll be using orange like this
309:18 - and we'll be saying text dash black
309:21 - and text dash three X, three XL,
309:26 - text dash three command suggestions,
309:29 - three X, no suggestions.
309:32 - Yeah, text three XL.
309:34 - And we'll be saying text center
309:35 - just to make sure things are all good
309:37 - and okay, at least they are visible.
309:39 - We can even add a padding on Y axis of five.
309:44 - Yeah, better.
309:45 - Okay, so far we are all good
309:46 - and we understand this part is there,
309:48 - but there will be cases in your situation
309:50 - where the user will be dynamic.
309:53 - So dynamic routing is a very common scenario.
309:55 - So for example, the user ID is,
309:58 - I cannot write it here,
310:00 - something like one, two, three,
310:01 - or maybe username with a username of Ateesh.
310:04 - So I want to grab this path and this URL.
310:08 - So that dynamic capturing is one of the core essence
310:10 - of how you will be using the route.
310:12 - The way how we use it is actually simply go ahead
310:14 - and simply write something here,
310:16 - which is slash and then the colon is important.
310:19 - This is how you capture anything out after the user slash,
310:23 - whatever comes next to it,
310:24 - you'll be able to capture that.
310:25 - And then carefully name this parameter.
310:29 - This is a placeholder user ID.
310:31 - This could be just ID, this could be product ID,
310:34 - whatever you want, this could be anything like that.
310:36 - But this is not job done because if you go back up here,
310:39 - user definitely that's all good.
310:42 - But if I go back, so notice here the user,
310:45 - now we are saying, hey, this is not happening
310:47 - because I don't know what to do with this.
310:50 - This obviously will give us error.
310:51 - Now we need to go into the user and figure out a way
310:54 - that we accept all these things.
310:56 - Now, in order to make sure that we have defined
310:57 - that this path is actually accepting the parameters
311:00 - and whatnot, we have to use the params.
311:03 - And yes, this is literally the name.
311:05 - And we call this one as use params, no suggestions.
311:11 - Use params, no suggestions.
311:14 - Yeah, that's bad.
311:16 - And that actually comes from react router DOM.
311:20 - Okay, and why are you having issues?
311:23 - Because I wrote const import, there we go.
311:27 - Now all you have to do in this case is this use param
311:30 - is actually a hook, we studied hook quite a lot.
311:33 - And this is a hook, that means it's a function,
311:35 - nothing more than that.
311:36 - But what this function gives us back,
311:37 - that is important for us.
311:38 - So it gives us a lot of things,
311:40 - we can extract some information out of it.
311:42 - What information to extract?
311:44 - Yes, exactly, user ID.
311:45 - Why user ID?
311:46 - Because we call this as a user ID in this place.
311:50 - And after the colon, the colon is a symbol
311:52 - that, hey, this will be going into use param
311:54 - and you'll be able to extract this
311:55 - with a key ID of user ID just right here.
311:58 - Now let's just go back what happens.
312:00 - If I go ahead and get back, it says,
312:02 - hey, prop and route, error boundary.
312:05 - Okay, looks like this one is okay,
312:07 - but my main.gsx is having some of the issues.
312:11 - Let's go back onto main.gsx.
312:14 - This one user path element is all okay,
312:19 - should be all okay.
312:21 - And let's also check the user,
312:23 - I'll be exporting that export default user,
312:27 - we are exporting that.
312:28 - Let me quickly check that why this is yelling at me.
312:32 - All right, so found the bug, a pretty easy one,
312:35 - probably because it's late night,
312:36 - sometimes these things happens.
312:38 - So again, we are actually good in this case already.
312:41 - The issue that we are facing is pretty easy actually.
312:44 - If I go ahead and refresh this, this page works,
312:47 - but if I go onto the slash user or this one,
312:50 - this doesn't work because we never defined the route
312:53 - that what happens when the slash user only comes.
312:56 - We are only defining and are talking about
312:58 - what happens when the user slash
312:59 - and some parameters comes into that picture.
313:02 - So the easy way to fix it is actually to remove this,
313:05 - let's cut this out.
313:06 - And let's not make this one a self-closing,
313:09 - use the sandwich of concept that we studied about.
313:12 - So we'll be saying that,
313:13 - hey, let's just go ahead and close this route.
313:15 - Now we can use the sandwiching concept.
313:17 - And then I can use the inside the sandwich route,
313:20 - which obviously will make it as slash,
313:22 - everything is inside slash, then we have user,
313:25 - on the user will load the element user.
313:27 - And after that, if there is a colon,
313:30 - which technically makes user slash colon user ID,
313:32 - we will load again the user element.
313:34 - So very basic, but again,
313:36 - sometimes these things do take some time to debugging.
313:40 - So there we go, we have this user.
313:41 - And additionally, what we did is inside the user one,
313:44 - since we extracted this user ID, I just placed it here.
313:47 - It just available.
313:48 - I'm displaying a variable in JavaScript.
313:50 - I'm not doing any magic here.
313:52 - So when I go back here, the advantage of this is now,
313:54 - anything that comes up here in the URL after this,
313:57 - whatever the dynamic route,
313:58 - I will be able to catch this dynamic route.
314:01 - For example, if I just have something like Hitesh here,
314:03 - I can grab this.
314:05 - Maybe this is something on the user page
314:07 - where you have some clickable elements.
314:09 - And while clickable elements,
314:10 - you are coming on to some GitHub user ID,
314:13 - some blog or anything.
314:15 - So I can grab elements from the URL itself,
314:18 - make a fetch request and get the data.
314:19 - So this is the whole idea of doing everything
314:23 - that we are doing up here.
314:24 - All right, so now let's go ahead and work on
314:27 - with some more stuff, which is also pretty interesting
314:30 - and a new concept into this one.
314:31 - Actually, Next.js also uses this same concept.
314:34 - So we'll be working on with this one.
314:35 - I hope the center element of this one,
314:38 - how the routers and the dynamic parameter comes up,
314:41 - this is all clear to you.
314:43 - And by the way, even if you don't put this one
314:45 - and directly put up this,
314:46 - then the user route will not work,
314:47 - but user slash whatever something will also work.
314:50 - Okay, going back, we need one more route
314:53 - to work on with this one.
314:54 - So we'll go out of the sandwiching.
314:56 - We are not interested in this one.
314:58 - First, let's create a new component.
315:00 - That component will be again, very basic,
315:02 - but very interesting one actually.
315:04 - Let's go ahead and call this one as GitHub.
315:06 - And inside this, we'll be creating a component
315:09 - known as GitHub.jsx of course, .jsx, again, RFCE, that is it.
315:17 - Now in this GitHub and all of this,
315:20 - what we want to do this here is just simply show some data
315:24 - into this one.
315:25 - First, let's go ahead and create this route
315:28 - that would be super beneficial for us.
315:30 - So we'll be having a route, route, and there we go.
315:36 - And we don't want this path a strict.
315:38 - This simply means when you have a strict,
315:39 - that means all the 404 found,
315:41 - just load this element up here.
315:43 - So now if we have this element,
315:45 - make sure this is at the very end of it
315:46 - because they are evaluated on case by case basis.
315:49 - Now, if we reach out to something like contact,
315:54 - which we don't have defined, it just says not found GitHub,
315:57 - which is not yet defined, so it says not found.
315:59 - So this is a classic example of if nothing cases.
316:03 - So have you studied switching cases?
316:05 - Yeah, this is almost like that.
316:07 - But before that, make sure it is always at the end.
316:09 - We also want to have this GitHub.
316:11 - So we'll be having a route path will be GitHub.
316:15 - And the element that we'll be loading is going to be GitHub.
316:18 - Yep, bring this one in here.
316:21 - And now we have this GitHub
316:22 - and let's modify this a little bit, not too much,
316:26 - but at least bearable.
316:28 - So we'll have some of the class name.
316:29 - Let's grab first of all, text to the center.
316:33 - We'll be having a margin of four on all the sides.
316:35 - Background will be gray.
316:37 - How much gray?
316:38 - 600 is good enough.
316:40 - Text can be white.
316:42 - And what else?
316:44 - Padding would be four on all the side
316:46 - and text would be large.
316:47 - So 3XL would be good.
316:50 - And there we go.
316:50 - And we have decent stuff coming up in here.
316:53 - Now we have this one.
316:54 - Now I want to fetch some data from the API itself.
316:58 - And if you remember, fetching the data is not that hard.
317:01 - And I can just visit this URL and grab some of the data.
317:04 - And it's an object that is being thrown at me.
317:07 - It's a public URL.
317:08 - You can also go ahead and make a fetch request there.
317:11 - So as soon as this component mounts,
317:13 - I want this request to be fetched up to me.
317:16 - And I want to use that.
317:17 - One easy way of doing that is have a simple data as my state.
317:24 - So set data.
317:25 - And we'll be using react.useState.
317:27 - By default, it will be an empty array object.
317:32 - Whatever you like to have, we'll just have an empty null.
317:36 - We'll have an array or maybe an object.
317:38 - We'll figure it out.
317:39 - Now I can use a useEffect hook.
317:42 - So useEffect in this.
317:45 - And there we go.
317:46 - We have a useEffect.
317:47 - It has no dependency array.
317:49 - So there we go.
317:51 - And now what will I do here?
317:52 - I'll fetch.
317:53 - So I'll say fetch.
317:57 - This is a nice boilerplate.
317:58 - But I'll write my own.
318:00 - I'll simply say we want to fetch this URL.
318:03 - If this URL gets a success, so we'll say dot then.
318:06 - It will give me a callback.
318:08 - I'll say let's call this one as response.
318:10 - But response is in the string format.
318:12 - I need to convert it into JSON.
318:15 - So let's have the response.json.
318:18 - Then chain on one more then, because that will actually
318:21 - extract the data.
318:22 - And we'll be having, again, a callback.
318:24 - Let's call this one as data.
318:26 - There we go, callback, just like this.
318:28 - And we can console log the data, as well as set the
318:30 - data into the data.
318:32 - So there we go.
318:33 - Now the data is being set into this one.
318:36 - And now we can extract some of the data out of this one.
318:41 - Let's first console log and see if this is all coming up when
318:44 - we hit this particular route.
318:46 - Right click, inspect, and console.
318:50 - OK, too much.
318:51 - And we will expand this a little bit.
318:57 - There we go.
318:57 - So if I go back to contact and load the GitHub, it gets
319:01 - nothing as of now, because we are not
319:04 - using it technically.
319:06 - OK, time to actually use this data itself.
319:10 - Interesting.
319:11 - How we can use this?
319:13 - Once the data is actually being set, as soon as the
319:15 - component mounts, save this, go back.
319:18 - And now I can see I have this object.
319:22 - Let's reload this one more time.
319:24 - Probably I didn't save that.
319:26 - OK, fill rule.
319:27 - Did you mean fill rule?
319:28 - No, all these.
319:30 - OK, these are just the CSS and DOM properties, not
319:33 - interested in them.
319:35 - Contact, GitHub, there we go.
319:36 - Now I have this object, which has a lot of data, and
319:40 - probably out of this data, because I'm console
319:42 - logging the data, and I'm console logging this.
319:45 - So let's extract some values out of it.
319:48 - So what values can I grab?
319:50 - First of all, the followers count maybe.
319:56 - Followers, there we go.
320:00 - And let's inject the variable since I have access to this
320:02 - data, and if you have studied this, you know that I've
320:06 - actually gone through many times.
320:07 - You can just extract what do you want.
320:08 - I want just the followers count here.
320:11 - That's why I just mentioned this, and there we go.
320:12 - I get the followers count.
320:14 - So notice here, we can grab the image as well.
320:17 - Should we?
320:17 - Yeah, let's grab the image.
320:20 - And I'll say I'll be needing an image.
320:22 - There we go.
320:23 - What is the source?
320:25 - Source will come up from data if the data has avatar
320:30 - underscore URL, and we'll also need to give a width of 300.
320:38 - All right, so we have this image as well as all the
320:40 - data.
320:41 - Now here comes the interesting part where things will get a
320:43 - little bit more interesting towards the router.
320:47 - I go into about.
320:48 - I go into contact.
320:49 - When I go into GitHub, that is where the
320:52 - request is being sent.
320:53 - We cannot simulate.
320:54 - This one has to come up after a few seconds.
320:57 - But what you'll notice is the use effect will only take
320:59 - place when this component particularly loads up on the
321:03 - page, so contact.
321:04 - When I go up here, so this will make a fetch request.
321:07 - Now what if we could have done this a little bit better?
321:10 - Can we optimize this?
321:11 - This is already very optimized.
321:13 - But what if there could be advance stage of this one?
321:17 - Like for example, I'm going into contact.
321:19 - Before clicking on this, I keep my mouse over for probably a
321:22 - fraction of second milliseconds, but then I click on it.
321:25 - The same thing can be used for the advantage.
321:27 - Next year's does exactly same.
321:29 - When you actually pull your mouse over over this one, it
321:32 - automatically sends a network request to load all the
321:35 - resources that you require.
321:36 - And then when you click on it, the things are
321:38 - already available for you.
321:40 - Now how can we do this in this scenario with the React
321:43 - Router DOM?
321:44 - In the next years, it happens automatically
321:45 - behind the scene.
321:46 - But how we can actually do this one up here?
321:49 - Now doing all of this thing is actually super, super easy.
321:53 - Let me show you how this is done.
321:54 - First of all, we don't need this data and all of that.
321:56 - This was just to show you that how regularly we do this.
321:59 - Again, a good example exercise.
322:01 - We'll just come in this one out.
322:03 - And we'll write this thing again.
322:05 - Usually there's a case where people write these kinds of
322:10 - methods in the component itself.
322:11 - But if you wish, you can separate that out as well.
322:13 - All you have to do is export a kind of a method.
322:17 - We'll call this one as GitHub info loader.
322:22 - And this one is going to be a simple callback just like
322:24 - this, but the only advantage we want to take care of here is
322:28 - we want to make this request as a sink.
322:30 - Previously, we were using the fetch in the .then syntax.
322:35 - You can use that as well.
322:36 - But I want a sink here as well.
322:38 - So what we'll do is we'll obviously await and we'll do
322:41 - the fetch because I don't want to continue if this is not
322:43 - there.
322:44 - And the fetch is going to fetch the same URL.
322:47 - No changes there.
322:49 - We know that this works.
322:51 - And let's hold the response into a variable.
322:53 - So let's call this one as response.
322:56 - So there we go.
322:58 - And now all we have to do is return this response.
323:05 - We don't need to await this here, response.json.
323:09 - OK, now notice here we are just returning this response.
323:13 - We are not having this data and whatever that is.
323:16 - The good thing is I can return this as it is.
323:19 - Now, once you are returning this, then the next step
323:22 - actually is almost in this file, but we don't do this
323:25 - here because this is not the data flow.
323:27 - Understanding the data flow is important.
323:29 - Once you are done with this, this method actually first
323:32 - gets loaded into main.jsx where you're actually
323:34 - having this routing.
323:35 - So this method needs to come up here.
323:37 - Let's go ahead.
323:38 - And since the method actually exists in the same component,
323:40 - that is why a lot of people prefer to have this here.
323:43 - We can just go ahead and say this one
323:45 - is going to be GitHub info loader, whatever the name is.
323:48 - And then once we are done with this,
323:51 - we don't actually load the GitHub just like this.
323:53 - We actually provide additional property.
323:55 - We don't need to use the sandwiching,
323:57 - but we need to provide additional.
323:58 - The path will be same, the element will be same,
324:01 - but there is one more element or prop,
324:04 - which is known as loader.
324:06 - This loader actually takes a method that whatever
324:08 - the information you need to fetch, calculate,
324:10 - whatever you need to do, just get me that method first
324:13 - so that if somebody is trying to load this route,
324:16 - I can do some of my advanced pre-processing on it.
324:19 - Once you are done with this, the next question
324:21 - in your mind would be, okay, we created a method
324:23 - in this file, we exported, gave this method to this guy,
324:26 - but how can I get the data from this whole method?
324:30 - I have returned the response, but I need this.
324:33 - This is a common mistake that a lot of people do this.
324:35 - Hey, since you have exported this here,
324:37 - let's use this method and grab the data.
324:38 - No, no, you don't do that.
324:39 - That's not a proper way of doing the things.
324:42 - In this case, when you want to have this,
324:44 - you actually use a hook which is given to you
324:46 - by React Router DOM.
324:48 - So let's go ahead and use this.
324:49 - And this one is going to come up from React Router DOM.
324:54 - The name of the hook is pretty simple.
324:56 - You can guess that, use loader data.
324:59 - Yeah, the property name there is loader.
325:03 - And here is the use loader data.
325:05 - Since this is a hook, you obviously know how to use the hook.
325:08 - So it's a simple use loader, just like this.
325:12 - It's a method, there we go.
325:13 - And you can extract data from it.
325:15 - So call this one as data.
325:17 - Since all the variables that we named them
325:19 - as a data.follower, so this will have that object
325:21 - and you can extract the information.
325:23 - So now technically it looks same
325:26 - that hey, we have contact about.
325:27 - Now if I go to GitHub, it technically looks same,
325:30 - but it's actually doing a lot of pre-processing for you.
325:34 - In the smaller application like this,
325:36 - it is a little bit difficult to find
325:38 - that it is adding some value for us, but trust me,
325:40 - it is adding a lot, lots of value.
325:43 - And this exact same pattern,
325:45 - you don't have to use that much of hooks and stuff
325:46 - is used in the next JS as well.
325:49 - They also do a lot of pre-loading
325:50 - and pre-processing of data.
325:53 - A lot of fun stuff is there.
325:54 - But by the way, this whole thing is actually available
325:57 - in case you want to use classic react
325:59 - in some of the applications,
326:00 - you can actually go ahead and use that.
326:02 - By the way, there's a lot of things
326:03 - you can go ahead and work on with this one.
326:05 - There's so much of routes available.
326:07 - A one that we studied is use params.
326:09 - So user ID, use params.
326:10 - This is exactly what we studied.
326:12 - We have so much more use submit, use route.
326:15 - There's so much of advancement.
326:16 - In fact, there could be a separate course
326:18 - on this in itself.
326:19 - I'll try probably in the future to create one search.
326:23 - If you really want this one to happen,
326:24 - let me know in the comment section.
326:26 - I would love to do this as a course in itself.
326:29 - So this is pretty good of one crash course
326:32 - on the React router.
326:34 - All the advanced things
326:35 - which you probably are going to need are covered up.
326:38 - Yes, there are still more.
326:39 - Something like forcefully pushing the user onto some page
326:42 - once we have logged in.
326:43 - And all of this will be covered up later on
326:45 - when we'll do some of the mega project.
326:47 - But I think that is enough.
326:48 - That is more than enough for you
326:49 - as a React router crash course.
326:52 - That's it for this one.
326:53 - Make sure to leave a comment in the comment section.
326:55 - I would be really, really appreciating that.
326:57 - That's it for this video
326:59 - and let's catch up in the next one.
327:02 - Hey there everyone, Hitesh here
327:04 - back again with another video
327:06 - and welcome to our ongoing React series.
327:09 - I hope you are enjoying this series
327:10 - because I'm enjoying it so much teaching this series.
327:13 - First of all, a very basic target for you
327:15 - to hit that comment section.
327:17 - We're expecting just a hundred comments if you can.
327:21 - That would be great.
327:22 - So just hit that comment section first.
327:24 - Just do the comment, some appreciation
327:26 - or maybe I'm just watching it on this date.
327:29 - And let's continue the journey of React.
327:31 - And now we'll take our journey.
327:32 - Now we are pretty much comfortable with the loops,
327:35 - with the hooks, pretty much looping the things,
327:38 - variable fetch, API fetching and all of these things.
327:42 - It's time that we explore a more advanced feature
327:45 - in the React.
327:46 - Now, one of that feature is how do we handle the data?
327:49 - Now, one of the primary job of the React
327:51 - is to handle the reactions
327:53 - and that's why we called it as a React.
327:55 - The reactions happens basically on two major factor.
327:57 - The first one is the props and the second one is the state.
328:00 - And you will be passing on this data
328:02 - into various of these components.
328:04 - Let me show you, we have already seen that
328:06 - by creating a card component
328:08 - that you provide some data to that card component,
328:10 - whether fetching it from an API or just generating the data.
328:13 - However you pass that data,
328:14 - that data passing is very common.
328:17 - And let me show you one such example
328:19 - that is pretty common.
328:20 - So let me share the screen first.
328:22 - So this is the diagram.
328:25 - Let's just say this is our dashboard, a main component.
328:28 - And inside this we have divided the pages,
328:30 - just like previously we have divided
328:32 - into navigation bar, footers and whatnot.
328:35 - This time, let's just say this is our home dashboard.
328:37 - Inside the dashboard, there is another second component.
328:41 - Then inside that there is one more component.
328:43 - And finally, this is the component
328:44 - which is showing some of the data
328:46 - like displaying how many people have watched your video.
328:50 - And if you look at the current perspective,
328:53 - this is very troublesome
328:54 - because this inner component is actually called
328:57 - inside this component and this component
328:59 - is getting called inside this component
329:01 - and this component gets called to this component.
329:03 - Right now we have no way, absolute zero way
329:07 - that we can actually pass on data
329:08 - from this outer component to this component.
329:11 - In order to do so that, hey, if I want to pass on this,
329:15 - I have to first from this element or from this component,
329:19 - I have to pass on data to this component.
329:22 - This component will further on pass on data
329:24 - to this component.
329:25 - And finally, this component will pass on data
329:27 - to this component.
329:28 - So you can see here that we are passing props
329:32 - into these component.
329:33 - And all of this is not really bad,
329:36 - but one thing that is bad here is
329:38 - this component is not using any data.
329:40 - Still, it has to just access the data just to pass it on.
329:44 - And for one level, it's okay.
329:47 - But if you can see here,
329:48 - the moment it goes on to second level or third level,
329:51 - you can see where the problem comes up.
329:53 - Some of the components which don't need this data
329:56 - also have to access this unnecessary data.
329:58 - And based on this have to evaluate
330:00 - whether should I render, re-render and whatnot,
330:03 - but they're not using this data.
330:04 - Ultimately, this inner component is using that data.
330:07 - So how can we resolve this problem?
330:09 - This problem can be resolved by just one simple solution,
330:12 - which is also termed known as state management.
330:16 - Now there are lots of state management libraries.
330:18 - Some are inbuilt into React, some only one.
330:22 - And there are other third party libraries,
330:24 - which you can study and we will study them.
330:27 - So one easiest of the solution is,
330:29 - let's just say we have this global variable,
330:33 - that would be a good name.
330:35 - And somehow we start a mechanism
330:37 - that if anybody wants to access the data
330:40 - all he has to do every single time is just go up
330:42 - and ask this guy that, hey, I want to access this data.
330:45 - If anybody else wants to access any data,
330:47 - let's just say this element,
330:48 - then he has to go and just go for this guy
330:51 - and ask data to this guy.
330:52 - There is no other way.
330:54 - If you want to update anything,
330:55 - if you want to access any information, you ask this guy.
330:59 - If this is the central source of truth,
331:02 - that's what it is happening here.
331:04 - And this global variable is known as a store
331:08 - in some languages or some frameworks,
331:10 - not languages in some frameworks.
331:13 - Every single framework will call it as a different one.
331:15 - The one that we are going to study is known as context API.
331:18 - So this global is known as context.
331:21 - I'll show you more of that.
331:22 - The idea is really simple.
331:23 - We will have a separate strategy.
331:26 - And the only thing is that all of these components
331:28 - are aware of this global state.
331:30 - That is all, that is all it is.
331:32 - Now this concept can be a little bit tricky to understand
331:35 - because of the code issues, not the concept issue,
331:38 - the concept is this much that we have a central place
331:41 - from where we can access the data whenever we want.
331:44 - We can update any data in that central repository
331:47 - from whatever the component we want.
331:49 - This is the centralized concept.
331:51 - But just because there are so many ways
331:53 - of writing this exact same code,
331:55 - there are multiple iterations of that,
331:57 - that makes people confused that, okay, what is the syntax?
332:00 - So understanding the data flow is easy,
332:02 - but writing the syntax is a little bit tricky.
332:04 - And that's why I'll walk you through
332:05 - with a couple of syntaxes so that you can know,
332:09 - okay, this one is exactly same, this one is exactly same,
332:11 - and this one is also exactly same.
332:12 - So we'll be working on with that.
332:14 - So I have a small flow diagram for you.
332:16 - So what we'll be doing is we'll start the project
332:19 - and we'll create a React app, YVIT or whatever,
332:22 - however we do that.
332:23 - Then we're going to create a context.
332:25 - The context, nothing, this is the context,
332:28 - this separate thing.
332:29 - Then we simply create a provide the context
332:31 - or also known as context provider.
332:34 - What do I mean by context provider?
332:35 - Making sure that all of my components that I have
332:38 - is aware of it.
332:40 - They are not gonna be aware of them automatically.
332:43 - There is a mechanism, there is a flow of the data that,
332:45 - hey, all the components now are aware
332:48 - that there is a global state so that I can access my data.
332:50 - So this next step is this one, provide the context.
332:53 - And the third step is consume it wherever you want,
332:56 - however you want, you just consume it.
332:58 - So this is exactly what we are going to do in this video.
333:01 - And in the next video itself,
333:02 - I'll walk you through one more iteration
333:04 - of this exact same process,
333:06 - but with a different minor tweaking in the code itself.
333:09 - So you get the multiple idea
333:10 - of how the code is being written.
333:12 - So we'll just close this one
333:13 - and we'll just get started with this one.
333:15 - This is absolutely easy, nothing to be worried.
333:17 - I'll just open up my, oh, there's something already running.
333:21 - All right, so we'll close this
333:23 - and let's go ahead and start this one.
333:25 - So this one will be our new project, probably eight.
333:28 - So we'll just call this one as create,
333:31 - no, not create, my bad, npm create wheat.
333:36 - And we'll be going with the latest, yep.
333:40 - And we will be starting project names.
333:42 - So this one is 08 and we are talking about mini context.
333:45 - So let's just call this one as mini context.
333:48 - Context API, that's exactly what we are studying.
333:50 - And the best part about the context API
333:53 - is you don't need to install anything else.
333:55 - That's the best part about it.
333:57 - Let me just dump this,
333:59 - open this up in integrated terminal
334:01 - and we'll just say npm install should be fairly faster.
334:06 - The best thing which I love about it
334:07 - is we don't need any third-party resources.
334:10 - The context API is directly cooked in inside the React.
334:14 - It was not there in the earlier version,
334:16 - but as the React evolved as a library, it got this one.
334:20 - And then we can say npm run dev, that should be easy.
334:24 - And this is how the basic looks like.
334:26 - We won't be even installing anything into it.
334:29 - No tailwind, nothing.
334:29 - We just want to go absolute basics.
334:32 - Now first, let's try to create a problem.
334:34 - That is the major thing
334:35 - that how we are going to create this a problem first.
334:38 - So let's just say inside the source,
334:40 - we'll right-click and we'll create a new folder first.
334:43 - Let's place everything inside the components.
334:46 - And this is a legit problem that we'll have.
334:49 - And new file.
334:51 - The first file is going to be simple login.
334:53 - We won't be doing too much into the login.
334:55 - So rfce react, oh, nothing.
334:59 - Oh, my bad.
334:59 - It should not be login.
335:01 - It should be login.jsx.
335:03 - Rename login.jsx.
335:06 - And now we can say rfce.
335:09 - Come on, rfce.
335:11 - There we go.
335:12 - We can close this down.
335:13 - So this one is not going to be too much of a problematic.
335:18 - I'll just be writing the basic boilerplate code.
335:21 - You can also write along with me.
335:22 - That would be really, really helpful.
335:24 - So first of all, what I'm trying to create,
335:26 - this is a basic login.
335:27 - So login has a username and a password.
335:29 - It doesn't connect with any database.
335:31 - It's absolute basic raw one here.
335:34 - So let's go ahead and say that I will have a username
335:37 - and that will be a set username.
335:39 - By default, it's empty.
335:40 - We'll also have a password field.
335:42 - Let's just say the password field.
335:43 - Nothing else.
335:44 - It's not doing anything.
335:46 - Now, once we have this,
335:48 - we'll need that something that needs to handle
335:50 - that we'll obviously have a login field,
335:53 - the password field and a button.
335:54 - So let's just go ahead and call this one as handle submit.
335:57 - That's okay for me.
335:59 - And inside this, we are not going to do anything.
336:01 - So we'll just write empty slashes,
336:03 - prevent the page from refreshing.
336:05 - Yeah, whatever that is.
336:06 - I'm not really bothered or much worried about this one.
336:09 - In this one, let's go ahead and add those fields.
336:12 - So first of all, we'll have a simple H2 which says login.
336:15 - This is my login component so that I know
336:17 - and aware about it.
336:18 - Then we are going to have an input with the type of text.
336:23 - Text, there we go.
336:25 - We don't need this name or ID.
336:27 - So I'll be just removing this.
336:30 - And there we go.
336:31 - Let's move it to the next line.
336:32 - We'll be adding couple of fields onto this one.
336:34 - Not too many.
336:35 - Just the basic, however, we do that all the time.
336:37 - So on change is going to be,
336:40 - first of all, we need the value one,
336:41 - but yeah, on change is also good
336:43 - that at the time of changing,
336:45 - this is the input field for username.
336:47 - So let's go ahead and add the value as well
336:49 - that you get the value from the username.
336:51 - Once you have all of this,
336:53 - let's also add a placeholder, the value of username
336:56 - and what else?
336:57 - I think that's it.
336:59 - Okay.
337:00 - Another input field that we are going to need
337:03 - is first I'll add some of the spaces.
337:05 - So line break there, space.
337:08 - And then we'll be having an input of type password.
337:12 - There we go.
337:13 - And there we go.
337:15 - My bad.
337:16 - What is happening there?
337:18 - Okay.
337:18 - This is input type password, this one.
337:23 - Okay.
337:24 - We don't need this ID or this stuff.
337:27 - Let's move it to the next line.
337:28 - This one is also going to move the next line.
337:31 - And again, really basic.
337:33 - First of all, the value,
337:35 - the value will be derived by password.
337:37 - Let me scroll this.
337:38 - And then we have on change.
337:41 - On change, the value is going to be governed
337:44 - by the set password that we have.
337:45 - Let's add a placeholder
337:47 - and that will say password.
337:49 - And after this, we will be having a button.
337:51 - Let's add a simple button as well.
337:55 - Button, there we go.
337:58 - This button is going to say simply submit.
338:01 - And we'll be having an on click event on this one
338:03 - since we didn't create it any form.
338:05 - So we're going to say on click.
338:08 - And on the on click, this is handled by the handle submit.
338:11 - So this kind of a component you have always built.
338:13 - Now we have a simple value.
338:15 - How it is handling, we'll talk about that.
338:17 - First, let's create what the problem, what we have.
338:20 - Now, similar to this component,
338:21 - you will also be dealing with this
338:22 - in the real world application as well,
338:24 - which is going to be profile.
338:27 - Profile, if I can write that.jsx.
338:31 - And let's go RFCE, very basic.
338:33 - And in the profile, all what I want to do is,
338:36 - let's put a space, is I want to display a username.
338:40 - Right now, I don't have a username,
338:42 - but somehow I want to display the username.
338:45 - So how can I do it?
338:46 - And I am pretty sure you are not understanding
338:48 - the gravity of the situation right now.
338:51 - This is so much of a big problem.
338:53 - And you might be saying, hey, what's the deal with that?
338:55 - Why is it so much of problematic?
338:57 - I can go simply into my app.jsx or main.jsx
339:01 - or any place at all.
339:03 - And I can just go ahead and load this up.
339:05 - Like for example, in the app.jsx,
339:07 - I can go and remove all of this content that I have.
339:11 - So let's just go ahead and remove all of this.
339:14 - And I can load these component here.
339:17 - For example, I'll just say H1 here
339:18 - and I'll say React course or React video would be good.
339:25 - React video for context API.
339:29 - And then here at this place,
339:31 - I can load the login component, just like this.
339:35 - And I can go ahead and load the user component,
339:38 - not user profile.
339:40 - Profile, here you go.
339:43 - And the profile component, is there any issue with that?
339:45 - If I reload this, there shouldn't be any issue.
339:48 - Let's go ahead and inspect this.
339:49 - This should be loading up.
339:51 - Use state is not defined.
339:54 - My bad.
339:55 - We're using state here.
339:56 - So this one is going to give us use state.
340:00 - I don't like to edit out these problems
340:02 - because these problems are something which teach you stuff.
340:04 - So as we can see, there is nothing wrong with this one.
340:06 - We are able to load this one.
340:08 - Now your first initial reaction would be
340:11 - that if I can load all of this,
340:13 - probably I can just pass on data of the login
340:16 - and all in the app.js and from here I can pass on this.
340:19 - But imagine the situation that from the profile,
340:22 - this data actually goes to other third component
340:25 - which are loaded inside the profile.
340:27 - Just like here, I can add more things.
340:29 - Just like I was able to load in my app.js,
340:32 - this profile thing, I can also go ahead and load more stuff.
340:36 - So I can just go ahead and literally say more component.
340:39 - So what's stopping you to have more component here?
340:42 - Maybe you are having a dashboard.
340:43 - If I can write that component,
340:45 - it's hard to type and talk at the same time.
340:48 - So imagine that this is a dashboard.
340:50 - On the dashboard, you have left pane and right pane.
340:52 - You want to display the data on the right pane,
340:54 - but right pane is not alone.
340:56 - For that, there is a top section and bottom section.
340:58 - So two more components.
341:00 - In the top section, you want to display this data,
341:02 - profile username, but the top section
341:04 - is also composed of smaller components.
341:06 - So how long you're going to be passing
341:08 - these components back and forth, you get the idea.
341:11 - Now you get the point that we need some better solution.
341:14 - And this is exactly why we have the solution up here,
341:17 - that we want to create a simple global state
341:20 - where we can add all of these things.
341:21 - And this is known as context in the context API
341:24 - and the context provider.
341:25 - But in the case of Redux, I have that video as well.
341:29 - We will be talking about that.
341:30 - You'll find that video in the playlist as well.
341:32 - So you can see that there we call it as store.
341:34 - So call it store, call it context.
341:36 - The concept is exactly same.
341:37 - We need a centralized repository,
341:40 - centralized store where we can have all of this data.
341:44 - This is exactly what we're doing.
341:45 - So now it's time that we understand
341:46 - that how we can actually implement the context.
341:49 - No extra library needed.
341:50 - The step one is to create a context
341:52 - and then to create a provider.
341:54 - So first of all, let's understand
341:55 - that how we create this context.
341:57 - It's a simple step.
341:58 - If you're taking the notes, you can take them as well.
342:00 - All right, so we'll come back onto these logins
342:02 - and profile in a minute.
342:03 - First of all, let's close this one.
342:06 - Inside this, let's create a new folder
342:08 - and let's call this one as context.
342:11 - Creation of the context has two parts.
342:13 - Some people do that.
342:14 - These two parts into separate files.
342:15 - Some people do that in one file.
342:17 - Doesn't really matter.
342:18 - I'll walk you through with both scenarios.
342:20 - First one here, the basic.
342:21 - The second one will be a little bit more advanced.
342:23 - Not advanced, but yeah, easier.
342:26 - So let's create a new file.
342:27 - And first we are going to call this one as user context.
342:30 - By the way, you can have multiple contexts.
342:32 - Since this is not going to return any JSX,
342:34 - I'll just call this one as just the JS.
342:36 - Now this context could be for multiple reasons
342:39 - or multiple resources.
342:41 - This one is for user context.
342:42 - Another thing could be for product context.
342:46 - Another thing could be tweets context.
342:48 - So just like everything needs a context.
342:51 - In the real world, this is exactly where it comes from.
342:53 - For example, fan.
342:54 - You don't understand anything with the fan.
342:56 - It could be a ceiling fan.
342:57 - It could be a table fan.
342:58 - It could be a fan in terms of a Bollywood fan,
343:00 - Hollywood fan, a YouTubers fan.
343:03 - It has a context.
343:04 - It needs a context.
343:05 - That's exactly what we have.
343:06 - So we're going to go ahead and say, hey, React,
343:08 - let's come React.
343:09 - And React directly gives you this context.
343:11 - So all we have to do is user context, react.create context.
343:15 - Just like you import use state and all of that,
343:18 - we have the create context as well.
343:19 - And after that, all you do is export user context.
343:22 - So your question might be, okay, we have that empty repo,
343:27 - the store which will be holding all of this related
343:30 - to the user, but where is the data?
343:32 - There is no data.
343:33 - You are absolutely correct.
343:34 - There is no data when you create the context.
343:37 - That's the step one.
343:38 - Now, once the context is created,
343:40 - the step two is actually to create a provider
343:43 - or the context provider,
343:44 - because right now it is not usable.
343:46 - So something needs to be a central man
343:49 - which can allow me to access the data
343:52 - as well as feed the data into that.
343:54 - So let's go ahead, right click and create a new file.
343:58 - And we'll be calling this one as user context provider.
344:04 - And this one is actually .jsx because this is a wrapper.
344:08 - As I told you, we need a wrapper.
344:11 - This whole thing, everybody should be aware of it.
344:14 - The way how we do it in React is we create a wrapper.
344:17 - Just like for example, in this case,
344:19 - if I go into main.jsx, you can see that this React strict
344:23 - mode is a wrapper for all of my component that I'm creating
344:26 - because the app further down the road,
344:29 - app actually loads these guys.
344:30 - So all these guys are actually also loading
344:33 - in the strict mode.
344:35 - Why?
344:36 - Just because of this one.
344:36 - This one is wrapping the entire application.
344:38 - So we need to create a context provider
344:40 - and we need to learn that how these sandwiching rule
344:43 - actually applies.
344:43 - So it's actually not really that bad.
344:45 - It's actually simple.
344:46 - So we'll be having first, let's just say React
344:49 - and we'll be using, are we going to use a use state?
344:54 - Probably not.
344:54 - Okay.
344:56 - But we'll see that in a minute.
344:57 - And we need to import the context.
344:59 - That is the most important part.
345:01 - So now you have access to the context
345:02 - which you just created.
345:04 - And now we'll be using that.
345:05 - So the first thing that we are going to do in this case
345:08 - is how to create this context.
345:10 - We have this and this.
345:12 - Now let's go ahead and create the user context provider.
345:17 - Yeah, that's a good name.
345:18 - User context provider.
345:19 - This is nothing just a simple method, just like that.
345:23 - A simple arrow method, just like that.
345:24 - Okay.
345:25 - So far it's good.
345:26 - Now this next step is to export this.
345:28 - So go ahead and export default user context provider.
345:31 - Now this is where the functionality goes.
345:33 - The first thing that you should know
345:35 - or you should be aware of this
345:36 - is that there will be more components
345:38 - which will be coming inside you.
345:40 - Just like we use the outlet.
345:42 - Yeah, exactly same concept, almost exactly.
345:44 - So first thing is, as a prop, what you'll be getting?
345:47 - You'll be getting children's.
345:49 - So just write children, if I can write that correct.
345:52 - You have to actually return that children back.
345:54 - But before that, we need to actually say that
345:57 - what is the data that you'll be using
345:58 - or something like that?
345:59 - So I'll be saying that, hey, I'm having a state.
346:02 - So I'll be just calling this one as user
346:05 - and then I'll be having a set user.
346:07 - This is right now an empty object.
346:09 - That is also good.
346:10 - But right now we don't have any users
346:12 - or rather having an empty object.
346:13 - I'll just say null.
346:14 - I have nothing as of now.
346:17 - After that, I'll just go ahead and use the return
346:19 - with the parenthesis.
346:20 - And what I'll do is I'll be using this user context dot provider.
346:27 - And yes, this is a syntax.
346:28 - We cannot do anything for that.
346:30 - Come on, user context dot provider.
346:35 - And this is how it looks like, user context provider.
346:38 - This is something which is given to you by default.
346:41 - The moment you use the user context,
346:43 - it automatically gives you the access to provider.
346:46 - The reason for that is React gives us this create context.
346:49 - The moment you have used this,
346:50 - this was given to you by the React itself.
346:52 - Now inside this, you actually do nothing
346:54 - and you just add a children.
346:56 - This is the syntax.
346:57 - But alone, this is not useful
346:59 - because now your entire application
347:02 - will be aware after one second.
347:04 - We will use it exactly just like we use this strict mode.
347:07 - We will be using it exactly almost that.
347:10 - But right now it is having the access of it.
347:14 - But the reason why we created this user state
347:16 - so that this data should be accessible to all the children.
347:20 - That's the goal.
347:21 - If you have more data, add more things here,
347:23 - add more calculation.
347:24 - Maybe you want to have a fetch request
347:26 - and whatever comes back from the fetch,
347:28 - you want to give the access of it to all the components,
347:31 - you do exactly like this.
347:33 - But right now I have a variable
347:36 - through which I can access the data.
347:38 - I have a method through which I can set any data
347:41 - into this user.
347:42 - So I have access to all of this.
347:43 - Now I want to pass on this.
347:45 - So the way how you do it is simply add a value
347:47 - and you simply say as an object
347:49 - that I want to give you access of this user,
347:51 - I also want to give you access of the set user
347:53 - so that you can read the data
347:55 - as well as write the data in this state.
347:58 - All right, so that's the next step
347:59 - or the step two of having all of this.
348:02 - But now I know that my entire app.jsx
348:06 - is actually loading all of this.
348:08 - So somehow whole of the things which are inside the app.js
348:12 - should be aware of this,
348:13 - how that's going to happen.
348:15 - Very, very simple.
348:16 - Instead of wrapping it into this fragments,
348:19 - I can just go ahead and say,
348:20 - hey user context provider
348:22 - and it actually imports it from the perfect place.
348:25 - I'm happy with this.
348:26 - A user context provider and we wrap this up
348:29 - just like that here and there we go.
348:31 - The moment you added this, that is it.
348:33 - Now all of these components which are wrapped inside it
348:36 - are aware of that data.
348:38 - Now you could have technically,
348:40 - you could have gone into app at this main.js
348:43 - and could have added here.
348:44 - That's okay.
348:45 - Now your app is aware of it inside any component of the app.
348:48 - He's also aware of it.
348:49 - He or she, whatever you want to term it as.
348:51 - So this is really nice.
348:53 - Now we have actually set up the boilerplate code.
348:56 - And this is exactly the same syntax that you'll be using.
348:58 - Your data might be tremendous amount in the smaller amount,
349:01 - doesn't really matter, but now you have set up the stage.
349:04 - So this is a boilerplate every single time you have to do.
349:07 - Now what's important is how do we actually send data
349:11 - into this state and retrieve the state data
349:13 - from back from it.
349:14 - So obviously we have already set up the stage for it.
349:16 - Login will be responsible for setting the data
349:19 - into this one.
349:20 - So how do we use it?
349:21 - That's where hooks comes up.
349:23 - And hooks obviously comes from this one,
349:26 - just like we have used a state,
349:27 - we have a hook known as use context.
349:29 - So far, all the hooks that we have used,
349:32 - they don't have this much of boilerplate work,
349:34 - but this one has.
349:35 - And it has its own advantage, you can say.
349:38 - Now we have this use context.
349:39 - So what can I do with the use context
349:41 - is you can actually extract values from it.
349:44 - Remember the values?
349:46 - Yeah, these values, these are props.
349:48 - You can extract this data.
349:49 - So in the login, I don't need a whole of data.
349:52 - I just need a selective data
349:53 - because I'll be just adding value to this state.
349:56 - So I'll be saying give me that set user,
349:59 - set user that you have thrown it
350:00 - and how you have thrown it just by saying use context.
350:04 - And inside this use context,
350:05 - you cannot just go ahead and use it.
350:07 - You have to provide a context
350:08 - that what context I'm talking about.
350:10 - I'm talking about the user context
350:12 - or the products context, I have to.
350:14 - For this, I have to bring in this.
350:15 - So I'll be just saying user context,
350:18 - bring it that in and provide that
350:20 - because you can have multiple contexts.
350:21 - Context for authentication, for user, for products,
350:24 - different contexts for different things.
350:27 - Once I have this one,
350:28 - then all I have to do here in the handle submit,
350:31 - once the submit button is click,
350:32 - I'll just update the user with that data.
350:35 - So first of all, just take this event and prevent default.
350:38 - Once you have done this, just use the set user.
350:41 - And inside this, the set user will be adding an object
350:45 - which will have the access to user name and password,
350:47 - whatever you are entering, it has that.
350:49 - Now inside the central store,
350:51 - I literally have the access to this.
350:52 - So this one is now finally having this value
350:55 - and we have the user name and the password access here.
350:59 - Once I have access of this variable
351:01 - and all these things in here,
351:02 - any of my component can go and ask for this data.
351:06 - How can it ask?
351:07 - Yeah, it's really exactly same process.
351:10 - If you have noticed here,
351:11 - the way how we extract the set user,
351:13 - which is a method responsible for setting the data,
351:16 - I can extract the other thing as well.
351:18 - So let's go ahead and do this.
351:19 - I'm pretty sure now you can do this as well.
351:21 - So const will be saying, hey, let's grab the user
351:25 - because don't want to access set user,
351:27 - I want to access the user
351:28 - and use context provide the use context.
351:30 - Again, this is not how you should write it
351:32 - because it didn't imported that.
351:34 - So I would love to grab it, there we go,
351:36 - and now write it use context, user context basically.
351:40 - Now, since I have access to this, I have to do nothing.
351:43 - I have to just say, hey, this is going to be a user,
351:45 - but there might be a case that there is no value
351:48 - into this one.
351:49 - So I can just do some kind of optional rendering as well,
351:53 - conditional rendering as well.
351:54 - So I can say if there is nothing inside the user,
351:58 - basically it's null,
352:00 - then go ahead and return a simple H1 that says not logged in.
352:05 - And why are you having this issue?
352:09 - Not logged in.
352:11 - Oh, my bad.
352:13 - Yeah, there we go.
352:14 - So if we have the user, there we go.
352:16 - So very basic, very basic code.
352:18 - So if we go back here and hit a reload,
352:22 - and it might be that I have missed some of the stuff.
352:26 - Okay, use context is not, okay.
352:29 - Here we are using use context, we don't have it.
352:32 - Really basic, we can go ahead and say use context.
352:34 - There we go, should be all happy, there we go.
352:37 - Just for the sake, let's reload.
352:39 - It says not logged in as soon as I do a Hitesh here,
352:42 - the password field is just a dummy field,
352:44 - doesn't really bother us much.
352:45 - So if I submit this, okay, we have some of the issues.
352:48 - Let's say where we are having this issue.
352:50 - It says objects are not valid react child,
352:53 - find object with the keys, username and password.
352:57 - Ah, yeah, my bad.
352:58 - This needs to be fixed, let me go ahead and fix this.
353:02 - So the error says not a valid react child,
353:05 - username, so I'm pretty sure I know where the error is.
353:08 - This is actually in the profile.
353:09 - This user is an object
353:11 - because that's what we actually added.
353:13 - If you remember in this one,
353:15 - we actually added an entire object
353:16 - and we cannot display the entire object just like this.
353:19 - Hey, dump all the object.
353:20 - We need to extract the properties out of it.
353:22 - So user.username, in this case, that should fix the error.
353:27 - Let's go back and I think it should, let's see, no worries.
353:31 - I just go ahead and say again, Hitesh, not logged in,
353:34 - submit, okay, it works,
353:38 - but the more component should be much smaller
353:40 - and the profile Hitesh should be bigger, okay, no big deal.
353:45 - We can actually just cut this out
353:48 - and just replace it here.
353:50 - That is better, yeah, there we go.
353:54 - So we have this one and by the way,
353:56 - if I go ahead and remove everything up here
353:59 - and there we go and submit it, it says profile
354:02 - because hey, we are still submitting the data.
354:04 - It's like empty strings are getting submitted.
354:06 - It's not null yet, but if I refresh this, it's not logged in.
354:09 - So again, we have to do much more check,
354:12 - but the idea is not about checking.
354:14 - We'll do that in the later on videos.
354:15 - The idea is that how any of the component was,
354:18 - right now the components were in the same page,
354:20 - doesn't really matter,
354:21 - but every single component can now access
354:24 - without actually doing a prop drilling,
354:26 - which is considered as a pretty bad practice in React.
354:29 - My login component is not aware of the profile.
354:32 - I don't really care about it.
354:33 - It just can set the data into this global store
354:36 - or the global context from wherever it likes.
354:40 - It just needs those methods to set the data.
354:42 - The profile on the other hand,
354:43 - it doesn't really care who's passing the data.
354:45 - We are literally passing nothing.
354:47 - It can extract the data from that global store directly.
354:50 - And all I have to do is set up those boilerplate codes.
354:53 - And after that, all I have to do is make sure
354:55 - all of my components are aware of it.
354:57 - Either you can do it in app.js if it makes sense.
354:59 - Otherwise you can take literally this exact same code,
355:02 - take it into the main.js and wrap your app with it.
355:06 - That's exactly all the components should be aware of it.
355:09 - That is the whole idea.
355:10 - So I told you it's really not that of a bad situation
355:14 - or a bad issue itself.
355:17 - It's just like, it takes a little bit time
355:19 - to adjust with these.
355:20 - Like I have to create a context,
355:22 - then the context needs a context provider and all of that.
355:24 - So basically the step is simple.
355:26 - Create context, create provider,
355:27 - make sure all of the people are aware of that
355:30 - there is a context so that I can take the data
355:32 - and send the data.
355:33 - That is it.
355:34 - That is your introduction to the context.
355:36 - I'm pretty sure I have dumped it down enough
355:38 - so that anybody and everybody can understand it.
355:41 - If you enjoy these videos,
355:42 - definitely do leave a subscribe to my channel
355:45 - or hit that like button.
355:47 - That really means a lot.
355:48 - If you drop a comment taking out of your valuable time,
355:51 - it really, really motivates me to make more such video.
355:54 - It really takes a lot of effort.
355:56 - All right, so that's it for this video.
355:58 - Let's go ahead and catch up in the next one.
356:02 - Hey there, everyone.
356:03 - Hithai Sheer.
356:04 - Welcome to another video in our React journey.
356:07 - I hope you are following this journey along.
356:08 - And if you're watching this in a long one-shot video,
356:11 - that's cool even.
356:12 - But don't forget to leave a comment in the comment section.
356:15 - It's my motivation driving factor.
356:18 - So hit that subscribe if you haven't already
356:20 - and it's a humble request, leave a comment.
356:22 - Just a hurt emoji, anything will do, just leave a comment.
356:26 - So let's continue our journey of the React
356:29 - in the same format, the context API.
356:32 - I'm pretty sure after watching the video
356:33 - probably more than once, you now have a particular idea
356:36 - of how the context API work.
356:38 - It's pretty simple.
356:39 - Create a context, create a provider, and that's it.
356:41 - And make sure all of your components are aware of it.
356:44 - We will take this journey
356:45 - into a little bit different perspective
356:47 - so that you get the idea,
356:48 - okay, this is how things are designed.
356:50 - And in this one, we will follow another way
356:52 - of writing the context, which is by using a custom hook.
356:55 - This custom hook is nothing,
356:56 - just like we were always using the thing,
356:59 - use context every single time at every single place.
357:03 - And we have to, every single time,
357:04 - provide that, okay, I'm talking about this context.
357:06 - I'm talking about this context.
357:09 - We'll just do everything all in one place.
357:11 - This is also another style of writing code.
357:13 - And since people use these different style of writing code,
357:16 - that is exactly the reason why the context API
357:18 - looks a little bit difficult.
357:20 - But now we have gone through the previous video,
357:21 - this one is going to make so much sense.
357:24 - Again, you don't have to worry about the CSS part.
357:26 - Yes, we have the tailwind.
357:27 - Yes, we have a couple of good, nice looking stuff,
357:29 - but you can just grab them from my GitHub repository,
357:32 - copy, paste, nothing to be worried there.
357:33 - We'll only talk about the code part itself.
357:36 - So this is what we'll be designing, a simple theme toggler.
357:39 - It looks simple,
357:40 - but it will be a good exercise to practice the stuff.
357:43 - So notice we have a theme toggler,
357:44 - which toggles the theme only for the card.
357:46 - That's what we are going to be designing,
357:47 - because this component will be aware
357:50 - of what the theme toggler value is.
357:52 - It is off or is it on.
357:54 - Based on this, we'll be changing this.
357:56 - Now we're not gonna be writing too much of the CSS.
357:58 - We are dependent on the tailwind,
357:59 - because tailwind allows us to have these dark mode classes
358:03 - directly cooked in from the CSS team itself.
358:06 - The way how they do it actually is,
358:07 - if you check out their playground,
358:09 - they actually mentioned this on their playground.
358:11 - There's a right button here, which says this toggle.
358:14 - If you right click and inspect this,
358:16 - the way how they do it is actually,
358:19 - if you toggle this one, this one is here.
358:22 - Let me just go back at the body.
358:24 - So this is here.
358:27 - So notice here in the, not in the HTML,
358:31 - actually this is a part of the header itself.
358:34 - So let me just search this.
358:36 - If I can search it here somewhere,
358:39 - search this and I'll just say dark, it should be dark.
358:45 - So there we go.
358:45 - So in the top here, in the HTML portion itself,
358:48 - we can see in the top HTML,
358:50 - they are actually naming this class itself.
358:53 - The moment I do a toggle, this dark actually goes away.
358:56 - It's actually light by default.
358:58 - And when I toggle this on,
359:00 - they actually manually inject this dark.
359:02 - Once I have this dark theme,
359:03 - now you can notice here that the dark classes
359:06 - are written and baked in.
359:07 - So if I go ahead and zoom into this one,
359:09 - notice here, this is the dark.
359:10 - So the dark class automatically takes in place
359:13 - when the HTML automatically marks you as a dark.
359:15 - So this is exactly what we'll be doing.
359:17 - This is our working functionality
359:19 - inspired by the tailwind itself.
359:21 - So let's go back and try to have a simple tailwind.
359:24 - We'll create a fresh new project.
359:25 - And with this project, we'll install the tailwind.
359:27 - So let's go back and close this one.
359:31 - Wheat is our way to go.
359:33 - So let's just copy this
359:35 - and we'll be installing the wheat into a fresh new project.
359:38 - So let's go ahead and first, let's just stop this.
359:43 - Okay, let's open this up.
359:46 - Control C, stop this, remove this,
359:49 - and we need one fresh one.
359:52 - And we'll be saying, first of all,
359:53 - let's remove all of this
359:54 - because we don't need all of this data context.
359:57 - I can right click and close to the right, yep.
360:01 - Now we just need to create a fresh new project.
360:03 - So for that NPM create wheat,
360:07 - and we'll be using the latest and yeah, that's it.
360:11 - Let's name this one as zero nine.
360:12 - And this one is a theme switcher project
360:16 - that we have this one.
360:17 - Totally depends on you, what do you want to call it?
360:19 - I'm going to call it as theme switcher.
360:23 - Theme switcher, and we'll be saying,
360:26 - we'll be using react for this one, again, JavaScript.
360:29 - And let's open this theme switcher into my terminal
360:33 - and remove the old one.
360:35 - We have to say NPM install.
360:38 - This is probably going to take some time.
360:41 - Depends on how much my internet is doing.
360:43 - And then we have to actually install the tailwind
360:47 - and let's install this.
360:49 - After this, we have to change the content just like this,
360:53 - copy and open this up.
360:56 - Inside the tailwind config, we'll change the content.
360:59 - There we go.
361:00 - The next step is to bring in the CSS.
361:03 - We can copy this, go back, source, index.css,
361:07 - remove everything, paste it up here, save that.
361:10 - And probably we don't need into app.jsx as well.
361:14 - App.css, my bad.
361:16 - App.css, we probably don't need anything inside this.
361:19 - Anyways, we are not much worried
361:20 - about how things are going on.
361:21 - We just want to have these things
361:22 - and practice our context API.
361:25 - NPM run dev should actually run the project.
361:27 - And there we go, very basic, nothing to be worried.
361:30 - All right, so let's close everything.
361:33 - And now let's talk about them one by one.
361:35 - The first step is to grab our basic boilerplate card
361:38 - and how does it look and all of that.
361:40 - So first of all, I'll just remove, I'll add a folder
361:43 - and I'll call this one as components.
361:49 - Components and the components will have basically
361:52 - two component in itself.
361:53 - The first one being a new file.
361:56 - This one is just basic card.
361:57 - So let's call this one as card.jsx.
362:01 - And all we have to do into this one,
362:03 - I'll just directly bring the card from my notes itself.
362:06 - Nothing, just the basic boilerplate card, as you can see,
362:09 - there is nothing reactish about it.
362:11 - Plain vanilla react, or not react even, just the tailwind.
362:17 - Too much of the classes, some images
362:19 - that we are borrowing from Pexels,
362:21 - some of the Apple Watch and stuff, so that is it.
362:23 - That is your card.
362:24 - Now let me go ahead and create another component
362:26 - which is the top part of it,
362:27 - in case you saw this, this top theme toggler.
362:30 - You can also have your own input button for this one.
362:32 - Nothing is going to bother you,
362:34 - but we are just making it a little bit stylish
362:36 - so that it looks good.
362:38 - Right click new file and we'll be calling this one
362:40 - as theme button.jsx.
362:45 - And again, our FCE, react functional component
362:48 - for theme button.
362:49 - And all I'm going to do is just replace this return
362:52 - with whatever the return I have in my notes.
362:55 - And let's replace this, there we go.
362:57 - As you can see, this is nothing more than input button
362:59 - which has some of these values, like value is nothing.
363:02 - On change, we need an on change button here as well.
363:04 - We don't have that, so let's go ahead and create that.
363:07 - That is all.
363:08 - Now theme mode and everything,
363:09 - we will work on to this one.
363:11 - First, let's have just the on change button
363:13 - so that it doesn't crash.
363:14 - And in fact, the theme mode,
363:15 - we'll be just removing this,
363:17 - this check dent entirely will be removing this
363:20 - so that we can later on work on this one.
363:22 - Right now, this is all good and okay.
363:24 - The only thing that's bothering is this on change button.
363:27 - So let's go ahead and have it.
363:29 - And we'll be saying on change button does nothing
363:33 - but we are having this one.
363:34 - Okay, so both of our components are ready.
363:37 - Now the idea is these components
363:39 - are not aware of each other.
363:40 - I want to create a centralized repo store or a context
363:45 - so that both can be aware of this.
363:46 - So for this, we already are aware of this
363:48 - that how we create the context.
363:50 - So in the last video,
363:51 - I showed you that we simply go ahead and create a new folder.
363:54 - You want to keep it in the folder or not,
363:55 - that's your choice.
363:57 - I'll just say context, context, yeah, that's good.
364:01 - Or context, there might be other context as well.
364:04 - Now what you'll notice is in the last video,
364:06 - we worked through with the context
364:07 - almost similar to this one.
364:08 - So we have this context.
364:10 - We have two files here.
364:11 - First one is user context,
364:12 - but technically we didn't do anything inside this.
364:15 - It was just creating a user context.
364:17 - The meet part of the information
364:18 - was this user provider where we created the provider.
364:22 - So we have this provider.
364:23 - Now this provider should be available to every single place.
364:25 - That's why we call this one here.
364:27 - But another thing we saw that,
364:29 - that every single time we have to do this
364:31 - inside the component, like for example, in the login,
364:34 - I have to do this kind of a stuff.
364:37 - Use context and then have to provide the context inside it.
364:40 - Here also in the profile, we have to repeat this.
364:42 - Use context and provide the context to it.
364:45 - So how about if we actually accumulate all of this stuff?
364:49 - Is that possible?
364:50 - Yes, it will save us a lot of time in later on.
364:53 - So we can actually improve our boilerplate code.
364:55 - And this is exactly what we'll be doing.
364:57 - So in this case, what we're going to do is
365:00 - we'll be just simply saying that, okay,
365:04 - we will be saying context, create a new file,
365:07 - and we'll be calling this one as theme.js.
365:12 - All right, so how we actually use this one,
365:14 - this is pretty interesting.
365:15 - First of all, let's go ahead and import two major things
365:18 - which we'll be using.
365:19 - The first one is create context that we use there as well,
365:21 - as well as we were all the time using this use context.
365:24 - Two things in the components,
365:26 - use context was getting used.
365:28 - The create context for creating the context.
365:29 - So these two things, now we are bringing them all together.
365:32 - The first step was to create a context
365:35 - where we were having all these things.
365:37 - So previously, if you remember,
365:38 - I'll just open this and compare it again and again
365:40 - so that you don't get confused with this.
365:43 - It's a good comparison here.
365:45 - So if I open up this context,
365:47 - so this part has nothing at all.
365:49 - This thing is having some of the interesting stuff.
365:53 - So if you remember, this was our state
365:55 - and technically what we were doing is
365:57 - we were providing this data inside this.
365:59 - There is another way of doing this
366:01 - much more easier than this
366:03 - because ultimately everything is going inside this.
366:05 - So when you're creating this context,
366:08 - while creating this, you can make it aware
366:10 - that what are the default option
366:12 - or what are the data which is available to you.
366:14 - So you'll see the syntax almost similar to this
366:16 - where somebody says, hey, theme context and create context.
366:20 - While creating the context,
366:22 - you can actually provide an object in here
366:25 - directly with the information.
366:27 - Previously, we were actually providing this
366:30 - into a later stage when we were creating the context
366:32 - and provider and all of that.
366:34 - But this create context is also perfectly capable
366:36 - of taking the data.
366:38 - Now we don't define the data here.
366:39 - We actually provide just a general information about it.
366:43 - What do you mean by general information?
366:45 - Let's just say we have this theme mode.
366:47 - So by default, this is just a variable whose value is light.
366:51 - But I also want this ability to toggle the theme as well.
366:55 - I can just go ahead and work on with this one toggle theme,
366:58 - but I'll show you what happens when there are multiple values
367:01 - like there is a dark theme, which is just a method.
367:05 - I don't know what this method does or how it function
367:07 - or how it works.
367:08 - It just is a method.
367:10 - Similarly, we have a light theme, which is also a method.
367:12 - How does it function work?
367:14 - I have no idea at all.
367:15 - Okay.
367:16 - Now we also saw that every single time we were using
367:20 - in the main.js, like theme provider is the context.
367:23 - So theme provider dot provider.
367:25 - So this was going a lot.
367:28 - And in the previous one, we saw in the app.jsx,
367:31 - we have to use this user context provider.
367:34 - And if you remember this one, yeah,
367:36 - we have to use this like this user context dot provider.
367:40 - How about we don't do it like this,
367:42 - we actually change the syntax.
367:43 - And again, this is the reason why people sometimes
367:46 - don't understand because there are different ways
367:48 - of writing a different version.
367:49 - If you're comfortable with that version, that's okay.
367:51 - If you're comfortable with this version, that's okay too.
367:54 - So in this one, we go ahead and say export const.
367:56 - And we simply go ahead and say, this is my theme provider.
368:02 - And instead of saying all these children and stuff,
368:04 - I'm just saying that, hey, this is theme context dot provider.
368:11 - So that I don't have to say literally,
368:13 - I'm actually literally exporting a variable
368:16 - whose ultimately value is theme provider dot provider.
368:20 - And that is it, that is all what we are doing.
368:22 - Okay, so anywhere, instead of using theme,
368:27 - like theme provider dot provider or theme dot provider,
368:30 - I can just simply say now theme provider.
368:31 - That is it, that's the meaning of it.
368:33 - Now we will also create a hook
368:35 - so that we can use it in all of that.
368:37 - So let me go ahead and work on with this export default.
368:42 - And in this one, we'll be creating a function
368:44 - and that will be used theme.
368:46 - And what we're doing in this is use context theme context.
368:50 - So theme context is already available to me.
368:52 - So I don't have to import or export it.
368:54 - I can just directly use this.
368:56 - Now anybody who uses this hook, which is used theme,
369:00 - he don't have to pass on this context.
369:02 - Like previously we were saying use context,
369:03 - then bring in the context and add value to it.
369:06 - And literally what that was doing is when we do this,
369:10 - this create context get all of that value.
369:12 - That is how the store is being created internally.
369:15 - So this is also alternative version.
369:17 - Let me summarize this
369:18 - because I know this can be a little bit confusing.
369:20 - Previously, we were creating a context
369:22 - that context was doing nothing, nothing at all.
369:25 - We were just having this user context, okay.
369:27 - Step two, we were using this user context.
369:30 - Now, if you remember from this,
369:32 - we were creating a provider, which was wrapping.
369:35 - And the reason why we were having this,
369:36 - so that wherever we use this user context provider,
369:41 - ultimately what the code runs is user context dot provider,
369:45 - which actually accepts the children.
369:46 - So all prop goes inside it.
369:48 - Now in the newer version, what we are doing is
369:50 - we are actually merging them together
369:52 - so that we don't have to create this context separately
369:55 - and have this one separately and provide the values.
369:57 - What we can do is just simply create the context
370:00 - and whatever the value functionality,
370:02 - whatever you want to incorporate,
370:04 - you just directly give it directly inside the create context.
370:08 - Definitely, we don't incorporate the functionality
370:10 - in this one because that needs to go separately.
370:13 - And what we do is theme provider directly gets available.
370:17 - We don't have to extract this every single time,
370:19 - just like we do it here, user context and children wrapping.
370:21 - No, we are aware of it.
370:23 - We simply directly use it like this.
370:25 - And again, one more hook,
370:26 - which actually helps us each of the component
370:29 - to not have the import statement and all of that,
370:32 - just use the hook directly, hook is aware of it.
370:34 - And I know which one I'm using.
370:35 - So one file consists of everything.
370:38 - Okay, yeah, little bit different,
370:40 - but how the usage of this works
370:42 - and most of the tutorials and everything
370:44 - that you're going to see, this is the way how they use it.
370:47 - The way how I showed you to you in the previous one
370:50 - is so that you understand, okay,
370:51 - these are the pieces that I need to do.
370:54 - In this one also, these are the exact pieces I'm doing,
370:56 - creating a context and making everyone aware
370:59 - that the context exists, that's all.
371:01 - And this portion is literally for everybody
371:04 - so that every component can directly use my store.
371:08 - So three parts, first, the second one and the third one.
371:12 - That's exactly still onto the same page, okay.
371:16 - Now we are actually onto this one,
371:18 - how we can actually use this one.
371:20 - Now we'll be using theme provider.
371:22 - Previously what we were using,
371:23 - previously we were using this user context provider.
371:26 - If you don't remember this,
371:27 - in the app.jsx user context provider.
371:31 - Ultimately it's a theme provider,
371:32 - so that's what we'll be using.
371:33 - Let's close all of this
371:35 - and enough of the previous discussion.
371:36 - Now let's go ahead and continue with the newer one.
371:39 - So now I'll go into app.jsx
371:41 - and this app.jsx has a couple of values and stuff
371:44 - that we have to actually work on with this one.
371:47 - Now what I can do here is inside this app.js,
371:50 - I can have couple of states
371:51 - and their modes and stuff like that,
371:53 - but first and foremost,
371:54 - what we have to do is remove everything from here.
371:58 - This is our app.jsx.
371:59 - Let's just go ahead and remove this.
372:01 - And I do have some of the values up here.
372:04 - So let me just go ahead and grab those values
372:07 - and we'll be just copying and pasting.
372:10 - So this is my div and what I'm doing is
372:13 - I'm bringing in the theme button and the card,
372:15 - which it didn't auto-import it.
372:16 - So let's go ahead and write this again.
372:19 - So theme button.
372:22 - Did we wrote that in the lower case?
372:25 - No, theme button should be there.
372:29 - Theme button.
372:32 - No, no suggestion.
372:34 - Okay, anyways, let's go ahead and bring them up manually
372:37 - in case it doesn't.
372:39 - Import card from component card
372:42 - and import theme button from components.
372:44 - There we go.
372:45 - We should have used the index file here.
372:46 - Let's see how does it look?
372:48 - And there we go, we can have this,
372:49 - but it has no effect or impact on this one
372:52 - because they are not linked together.
372:54 - Now comes up the advantage is we only need one file
372:57 - to be there, which is just the theme provider.
373:00 - Remember, theme provider is not an export default.
373:02 - So you can now just go ahead and say,
373:04 - we have to say in the curly braces.
373:06 - And then we have to say this one is theme provider.
373:11 - There we go.
373:12 - And it comes from the context theme.
373:15 - Now wrap this up.
373:16 - So every component is aware of it.
373:18 - You wrap this up in the app.js or wherever you like,
373:21 - you can just wrap this up.
373:22 - Okay, now everybody's aware of it, but not like this.
373:26 - Everybody's not aware of this.
373:29 - The way how we were extracting the value,
373:31 - this is exactly how you extract the value from it.
373:34 - So in this theme provider,
373:36 - previously we were saying just one word,
373:37 - now we have a parameter known as a value.
373:40 - And this can grab all the values
373:42 - that you have mentioned in your theme.
373:43 - The values like this, theme mode, dark theme, light theme,
373:47 - this is all.
373:47 - So I will actually bring this one here.
373:49 - So I'll just say, hey, give me the object of theme,
373:54 - theme mode actually.
373:56 - And then we have dark mode.
373:58 - I'll just copy this.
374:00 - Otherwise I'll make it, it's a dark theme.
374:02 - Copy that and paste it.
374:05 - And the first one is actually theme mode.
374:08 - Copy that, paste it, dark theme,
374:10 - and we do have a light theme.
374:13 - Okay, so all the functionalities here.
374:16 - Now right now they are empty.
374:18 - They have no idea how this functionality will work
374:20 - and all of that.
374:21 - But we'll actually work with the state here a little bit.
374:24 - So let me show you how the functionality,
374:25 - now we are writing the functionality part.
374:27 - So it's super easy and nothing to be worried on.
374:29 - First of all, let's go ahead and have a simple theme mode,
374:33 - set theme mode, and we'll be setting this
374:35 - as a light by default.
374:37 - Remember, this is exactly the theme mode.
374:39 - Now we have a value of it.
374:40 - So previously it was just empty.
374:42 - It could have been empty right now it's a default value,
374:44 - but it could be empty, it's a variable.
374:46 - These two are functions.
374:48 - So what this function actually does
374:51 - is these are functionalities.
374:52 - So what I can say is let's declare these functionalities.
374:55 - So these are functions, dark theme, just like this.
374:58 - And we'll be having an arrow function just like this.
375:01 - All it does is when you call it, it changes dark theme.
375:04 - We'll check the values to the dark.
375:06 - Similarly, we have a light theme,
375:08 - which go ahead and set the theme to light.
375:11 - That is it.
375:12 - All we are doing is changing the state value.
375:15 - But changing just the state value is not enough.
375:19 - First of all, you are just changing the state.
375:22 - This has no effect into your webpage.
375:25 - So how does it work?
375:26 - If you want any event in the webpage,
375:29 - then you have to either make it happen on some events
375:32 - like clicks or on change or all of that.
375:34 - If you want to happen it based on some state change,
375:37 - then you have to use use effect, a simple hook here.
375:42 - And the way how it works is really simple.
375:44 - You provide a dependency array to this one.
375:46 - And in this case, the dependency of the theme mode.
375:49 - The use effect hook simply says that if any value
375:52 - in the dependency array change,
375:54 - I will re-render this component.
375:56 - And when you re-render this component,
375:58 - I will actually want to change that.
375:59 - I want to run some piece of code.
376:01 - What that piece of code,
376:02 - this is where your classic JavaScript comes
376:04 - into the picture.
376:05 - I'll just go ahead and say, hey, I want the document.
376:08 - This document will be able to run a query selector.
376:11 - I want to find an element, which is known as HTML.
376:14 - And inside this, I do have the classes,
376:17 - a lot of class list.
376:18 - And first of all, I want to remove.
376:20 - So remove everything that's there.
376:22 - Not just the dark, even if you have light,
376:24 - just remove everything.
376:26 - And again, this needs to go into double quotes.
376:29 - Otherwise it will not able to find this or single quotes.
376:32 - It needs to be a string.
376:33 - Once that is being done,
376:34 - then I want to again run the same query.
376:37 - But this time I want to add a theme to it,
376:40 - which is theme mode.
376:41 - Whatever is the theme mode value, just add this.
376:44 - So based on this.
376:45 - So we have defined the functionality yet.
376:48 - So functionality resides in app.js.
376:51 - But since this functionality I was able to set inside this,
376:54 - remember theme mode is the value.
376:55 - So now my card actually can grab this theme mode value.
377:00 - And this theme mode value can be manipulated
377:03 - by the theme button.
377:04 - And the value can be grabbed by the card itself.
377:07 - So first of all,
377:08 - let's take down that the how the card
377:10 - is actually going to grab it.
377:12 - Do you really think card need to grab the value?
377:14 - No, not at all.
377:15 - Not at all.
377:16 - This was a trick question.
377:18 - Your card don't need to grab the value
377:19 - because in the app.js,
377:21 - the whole thing is actually being governed by the HTML.
377:25 - Tailwind feature, not to us.
377:27 - I hope you understand that.
377:29 - Okay.
377:30 - So the functionality part of grabbing the values
377:33 - also are taken care of for me by the tailwind.
377:36 - Does my theme button need some work?
377:39 - Yes, your theme button needs some work
377:40 - because this theme button,
377:42 - first of all need to grab some value from the context.
377:45 - And then based on this,
377:46 - it will be able to change that value.
377:48 - So first of all, what you have to do is grab the value.
377:51 - So how we can go ahead and do this,
377:53 - we can go ahead and have some values.
377:55 - And this time I'll be directly grabbing the value
377:58 - from use theme.
377:59 - Remember use theme is my custom hook that I've designed.
378:02 - What all the values you have inside it,
378:04 - you can just go ahead and grab those values.
378:07 - So for example, I have this theme mode,
378:09 - I have this light theme,
378:11 - and I have this dark theme,
378:12 - whatever the name of your function,
378:14 - I have all the access to this one.
378:16 - Now, the next step is that I have to just based
378:20 - on some on change button.
378:22 - So if there's a change in the button,
378:24 - I have to do all of this.
378:26 - So let's go ahead and work on with this.
378:30 - And I'll just go ahead and say if the value is checked,
378:32 - what should happen if the value is checked,
378:35 - then the theme mode means it's dark.
378:37 - So if it is checked, it means it is on the dark.
378:42 - Now, what happens when the on change button?
378:44 - So on change, you just toggle the value into it.
378:46 - So really couldn't be much more simpler than this.
378:49 - So, oh, we have already written the on change button.
378:52 - All we have to do is now just get the value.
378:54 - So if the theme mode is dark,
378:56 - it's change it to a light theme or dark theme
378:59 - or whatever it is.
379:01 - I think we can actually write a better code than this one,
379:04 - although this will also work, I hope so.
379:06 - First of all, let's grab the value.
379:07 - So we'll just go ahead and say dark mode status.
379:13 - I'll grab the status from E and we haven't got the E yet.
379:18 - So this will give us the event and the event from that,
379:22 - we can just go ahead and grab the current target dot checked.
379:28 - This is how you grab the value from the checked,
379:30 - whatever is your value.
379:31 - So right now the value is empty.
379:35 - Yes, there could be a chance the value could be empty,
379:38 - but we'll set the value.
379:39 - So we'll checked it.
379:42 - And we're going to go ahead and say now
379:44 - if the dark mode status, then run the dark theme
379:48 - else just run the light theme.
379:50 - So light theme methods will actually grab,
379:53 - we have grabbed these methods from here.
379:55 - And now what will happen?
379:57 - This dark theme will be going up here
380:01 - and we will be able to set the theme mode into the dark.
380:04 - And then that's it.
380:06 - And similarly here else,
380:08 - just go ahead and use the light theme.
380:09 - We brought the light theme.
380:10 - The functionality will come from here
380:12 - and then the value will be rerun by the use effect
380:16 - and we'll be able to change the value.
380:18 - So I think that is it.
380:19 - We need to just save the value and let's see.
380:21 - Now we have a toggle.
380:23 - It still doesn't work.
380:24 - Let me just check what happened and console.
380:28 - It says the value prop is required for the context provider.
380:31 - Did you miss a spell, forget to pass it?
380:33 - Okay, I didn't forget it.
380:36 - I actually pass the value.
380:39 - Yes, it looks like I have passed the value
380:42 - and should be all good.
380:44 - Theme provider value.
380:45 - Let's check our provider theme as well.
380:48 - So if we missed out some value into our theme as well.
380:52 - No, it looks like all good.
380:53 - Let me quickly check that where I'm missing that value.
380:56 - Oh, my bad.
380:57 - I actually forgot this in the previous teaching class as well.
381:01 - This is not an issue.
381:02 - I didn't forgot the value.
381:03 - I just needed to refresh it, but it doesn't work still.
381:06 - The reason for not working is actually not
381:08 - based on some of our mistake.
381:10 - It's actually a configuration we forgot to do.
381:12 - So go into the tailwind config.
381:14 - And the tailwind config, you have
381:15 - to actually mention that how the dark mode is actually
381:18 - getting used.
381:20 - So here the dark mode is actually
381:21 - based on the class itself.
381:24 - Yes, literally you have to say that.
381:26 - Once you actually do this, now your theme toggler will work.
381:29 - So there we go.
381:30 - So really great, great example.
381:32 - But again, I find it, first of all,
381:35 - when I studied about this, I found it a little bit
381:37 - difficult to grab my head that how this is all is working.
381:40 - Again, remember there are always three steps onto this one,
381:43 - no matter what or how the code is being written,
381:45 - because you'll be working with other programmers
381:47 - as well in your company.
381:48 - Some of them use this syntax.
381:50 - Some of use that syntax.
381:51 - But the process always remains same.
381:53 - First of all, you create the context.
381:55 - Then you make sure everybody's aware of the context.
381:57 - And then if any component want to consume the state,
382:00 - add values, get the values, whatever,
382:03 - that's where you use the use context.
382:05 - Now some people use the use context
382:07 - within the component itself.
382:08 - It's good for them.
382:09 - And they always, always have to provide the context to it.
382:12 - Some people prefer that all of the things,
382:14 - the logic should be written in one file.
382:16 - So this portion should be now very clear to you.
382:19 - That hey, we have the use context.
382:20 - Let's have it.
382:21 - Let's create a customized hook so that people can grab
382:23 - directly whatever the values are there.
382:26 - And the next step is, this one is pretty easy.
382:29 - You have this, don't have this, doesn't really bother you,
382:32 - because instead of writing theme context.provider here,
382:35 - you could have just written it into our app.jsx as well,
382:38 - the theme provider.provider.
382:40 - Doesn't really add any additional value,
382:42 - but you'll see this happening quite a lot.
382:44 - So I don't think so.
382:45 - This is bothering you.
382:46 - Write it here or write it into the awareness file
382:50 - I call it as app.js, totally okay.
382:52 - What bothers some people is this portion,
382:55 - that hey, how we are doing all of this,
382:58 - because this is the create context.
383:00 - Now, since we have the ability that create context
383:02 - can directly have the context,
383:04 - whatever the data and everything you want to pass it,
383:07 - some people find it much more easier
383:08 - that I don't have to bother about children's and whatnot.
383:11 - I just add my data here, that's it.
383:13 - It's purely a JS file, not the JSX file.
383:16 - That's why some people love it.
383:18 - Coming back onto the previous example,
383:20 - now you will be able to understand it much more better.
383:22 - In this example, this file is a pure JS,
383:24 - but it doesn't do anything.
383:25 - It doesn't take any context.
383:27 - It just is literally you are exporting the user context.
383:30 - That is it.
383:31 - And in this file, we create the separation of the JSX
383:35 - because literally you are passing some JSX.
383:37 - The thing which should be done
383:38 - like value of the user and stuff,
383:40 - which can also be done in the app.js or main.js,
383:44 - we are actually doing this here itself.
383:46 - That is the whole reason for the confusion.
383:48 - And again, previously we were exporting
383:51 - this user context provider.
383:52 - This user context.provider goes here.
383:54 - In that file, we are just exporting it directly.
383:57 - So again, it's up to the choice.
383:59 - If you ask me, what is my choice
384:01 - and what do I use professionally?
384:03 - I use this one where I have just one file
384:05 - because in this portion, I think clarity is much more.
384:09 - I don't have to worry too much.
384:10 - It's a pure JS file, not JSX.
384:13 - I can write all my data in that context as well.
384:16 - I can create a simple hook,
384:17 - which actually is aware of it.
384:19 - So one file for one context,
384:21 - much, much simpler.
384:22 - And as your application grows,
384:23 - you have much more of the context,
384:26 - then this approach is much, much better.
384:28 - And to be honest, in most of the complex project
384:31 - that I work, context doesn't make it up.
384:34 - I most of the time use Redux,
384:36 - these days Redux toolkit.
384:37 - So I have to use some kind of a bigger library
384:41 - for handling these kinds of state.
384:42 - But yes, for the interview perspective
384:45 - or the purposes of many projects,
384:47 - internal company projects,
384:48 - the awareness and the knowledge of context API
384:51 - is much, much needed.
384:53 - So I've shown you both of the ways
384:54 - and I'm pretty sure this will take a little bit time
384:56 - to digest.
384:57 - So don't be in a hurry, take your time,
384:59 - go through the videos, both of the sections again.
385:02 - And once you'll write the code manually,
385:05 - then it will make much more sense, much more clarity.
385:07 - I've tried my best to slow down the pace.
385:09 - Each line should make sense to you.
385:11 - Yes, it takes a lot of effort.
385:12 - That's why saying one comment in the comment section,
385:15 - just a heart would mean a lot.
385:17 - So that's it for this video.
385:18 - And let's catch up in the next one.
385:22 - Hey there, everyone.
385:23 - Hittai Sheer back again with another video.
385:25 - And yes, I was gone for a little while.
385:28 - I hope you missed me.
385:29 - If you're watching it one go, then it doesn't make sense.
385:31 - But anyways, finally, I'm back
385:33 - and I'm trying to put as much as content as I can possibly
385:37 - with a given free time apart from my job.
385:40 - In this video, I'll be continuing the journey
385:42 - of our React.
385:43 - We have been into the course of the React,
385:45 - which is a project-based course.
385:47 - We have built so many projects
385:49 - and now we are kind of brushing up our skills
385:51 - on the context API.
385:53 - The context API is pretty nice to have
385:55 - and it gives you a great foundation
385:57 - to even further understand other state management libraries
386:00 - like Redux, Zostan and whatnot.
386:02 - So I thought let's give one more shot of understanding it
386:05 - by building another cool project
386:07 - and then we can move on to our mega project
386:09 - which is building up a blog.
386:10 - I'll talk about that one in the next video
386:12 - or probably next video, whatever that video is.
386:15 - But in this one, we will be walking you
386:17 - through with the context API
386:18 - and how you can build a full-fledged project.
386:20 - Not only just context API, I'll also walk you through
386:23 - with how you can use the context API
386:25 - to store something into the local storage
386:28 - of your browser as well.
386:30 - Now, these context API or Redux, they're just state managers
386:33 - and they just allow you to perform certain actions
386:36 - or tasks in a certain way.
386:38 - It doesn't really care what you are performing
386:40 - or how you are performing.
386:41 - It just allows you to give a streamlined part
386:43 - that this is only how things should go and come back.
386:46 - It's a kind of a data streamline for us.
386:49 - It doesn't really care if you are putting things
386:51 - into the local storage or a database online
386:53 - or however you are dealing with the things.
386:55 - This is just pure functionality part.
386:57 - So without a further ado, let me walk you through
386:59 - that what we are about to build, let me share the screen.
387:01 - So this is where we are.
387:03 - So this is what we'll be building.
387:05 - So this is just a simple to do.
387:07 - It looks simple, but there is so much of intricacies in that
387:10 - and so much of the knowledge about how the code base
387:13 - or the code structure should look like,
387:14 - how a program flow works through
387:16 - and we'll be walking it through.
387:18 - So in this one, what we'll be doing is
387:22 - we'll be simply having this right to do
387:24 - which will be a component on its own itself
387:26 - and we'll be walking it through.
387:28 - Apart from this, we have this simple thing
387:30 - which can be toggled on and off.
387:32 - That's nice.
387:33 - And as we toggle on, now you cannot edit it
387:35 - because it's done.
387:36 - So what's the point of having it?
387:38 - And apart from this, you can actually click
387:40 - on this edit button.
387:41 - And as soon as you click on the edit button,
387:43 - this gets as editable.
387:45 - So this actually, this whole text thing,
387:48 - if I save this, this is a text thing.
387:49 - If I click on this one, it loads an input field.
387:52 - In the input field, we loads a value
387:54 - and then thus it makes it more of an editable
387:56 - on its own place itself.
387:58 - And thus after that, you can save that.
388:00 - Once it's in the edit mode, we give the save button.
388:02 - Otherwise we get the edit button, we can delete that.
388:05 - We can add more to-dos, obviously.
388:07 - The most interesting part is if I right click
388:09 - and inspect onto this one, I need to go into application
388:14 - and in the application, I can see the local storage.
388:16 - There's a lot of things here, session storage and whatnot.
388:19 - In the local storage, I can see all of my applications are,
388:22 - or whatever my to-dos are actually stored in this one.
388:25 - This whole applications looks simple,
388:27 - but it will give you a rock solid foundation
388:29 - of how applications are being built using the context API,
388:32 - what thought process goes into that
388:34 - and entire credit operation.
388:35 - This will be super helpful for you for later on
388:38 - as we build our mega project,
388:39 - this would be a good practice for you.
388:41 - So again, let's go ahead and get started
388:43 - and try to build this project.
388:45 - I think that would be a pretty,
388:47 - pretty cool exercise for all of us.
388:48 - We'll be using Tailwind.
388:49 - We are not worried about the CSS part.
388:51 - This is not a CSS tutorial.
388:53 - We'll be skipping that part.
388:54 - I'll be giving you the copy paste, class names,
388:56 - just add that.
388:57 - Otherwise, if you don't even give any class name,
388:59 - that's fine too.
389:00 - We are more focused on the functionality part.
389:03 - And for this, we'll be using the Tailwind CSS,
389:05 - our trusty old friend for always that.
389:07 - Let's go into the docs part of it.
389:09 - And we will be framework guides
389:11 - and we'll be going through the VIT guide.
389:14 - All right, so let's go ahead and create a fresh project.
389:16 - So let me go ahead and open up my VS code.
389:19 - This is where we'll be creating a fresh new project.
389:22 - Let me open this up
389:23 - and we'll be creating our new project.
389:25 - So NPM create VIT
389:29 - and we'll be going for the latest.
389:31 - So let's go with the latest.
389:33 - And what should be the name of this project?
389:36 - That's an interesting question.
389:37 - So we'll be going with the 10
389:38 - and then with the name of Todo.
389:41 - Todo context.
389:44 - Context and we are also using local.
389:45 - So I'll just say local for the local storage.
389:47 - So I'll just hit that package name is same.
389:50 - We'll be obviously using React
389:51 - and we'll be going with the JavaScript,
389:53 - not the TypeScript at least in this one.
389:54 - So let's go there.
389:56 - And there we go.
389:56 - We have this application up and running.
389:58 - Now what I'll do is I'll close this one.
390:01 - I'll open this up in my integrated terminal
390:03 - so that we are directly into the folder itself.
390:06 - And we'll be saying NPM install
390:07 - to install all the dependencies what we have,
390:10 - just like the boiler basics.
390:13 - All right.
390:14 - Now in the meantime, let's go into the Tailwind CSS
390:17 - and we need this whole thing.
390:18 - So let's just go ahead and copy this.
390:20 - And there we go.
390:22 - Your cache folder, previous version since addressed.
390:26 - Oh, there's so much of the bugs.
390:29 - Sys call.
390:30 - Oh, seems like there are some issues into this one.
390:33 - I didn't expected that,
390:34 - but let me just go ahead and remove this.
390:36 - Try it one more time.
390:37 - It shouldn't be happening in this phase at least,
390:41 - but let's just go NPM install.
390:45 - Let me first do a quick LS if I'm able to see that.
390:47 - Yes, package.json is here.
390:49 - NPM install.
390:52 - Oh, there's some issues.
390:54 - Your cache folder contains root.
390:55 - Oh, I need to fix this one.
390:57 - So just give me a second.
390:58 - I'll quickly go ahead and fix this one.
391:00 - Weird error, don't know why.
391:03 - All right, so fixed it.
391:04 - Usually these kinds of things happen
391:06 - when you update your system.
391:07 - And yes, I moved on to the latest Mac
391:09 - and that's why things happen.
391:11 - Nothing much of a big fix that I did.
391:13 - Actually, I just run this simple command,
391:14 - which was suggested to me here that hey,
391:16 - you need to change the permission of the NPM packages here.
391:19 - So I did exactly same, asked for my password,
391:21 - gave it the password, then I'd run the NPM install
391:23 - and it works fine.
391:24 - So that's basic.
391:26 - Nothing too much.
391:27 - Things happen all the time.
391:29 - Okay, now we have to run simply NPM, run dev at least.
391:33 - Let's see if we are able to run the things properly or not.
391:36 - Things looks good.
391:37 - Things looks good.
391:38 - Now we can just go ahead and copy this
391:40 - and let's stop this, paste this.
391:42 - I should be giving us a package file for Tailwind.
391:46 - Hopefully, config file for Tailwind.
391:49 - There we go.
391:50 - This is our config file.
391:51 - Let's go ahead and copy the context for the wheat.
391:55 - Let's get this one, copy that.
391:58 - This should be very common to you by now.
391:59 - We have been doing this for so long
392:02 - and we need to have directives.
392:04 - So copy this.
392:05 - And for the Tailwind CSS source
392:11 - and in the app.css, not app, index.css,
392:15 - we'll just remove everything, paste it up here,
392:17 - save that, that looks good.
392:18 - Also go into your app.css and go ahead and remove everything.
392:22 - That's exactly what we want.
392:23 - We don't want anything.
392:25 - Okay, rest is all good.
392:27 - We should be able to get a hello world
392:28 - with the class names and stuff.
392:30 - So let's go into app.jsx and let's run this.
392:36 - NPM run dev, let's close this.
392:39 - And inside this, let's go ahead
392:41 - and use the Tailwind CSS up here.
392:43 - So remove everything and paste the such one.
392:46 - Save that, let's see.
392:48 - And yep, it's a Tailwind, it's a Tailwind one.
392:51 - All right, so this looks good.
392:53 - Now let's see, let's prepare the plan of action
392:56 - that how we are going to take this one.
392:58 - The first good thing is that I don't have to worry too much
393:00 - because context API comes up as a default one.
393:03 - So I can just go with that.
393:04 - But first thing is always,
393:06 - if you're planning to use the context API
393:08 - or maybe Redux toolkit or something,
393:11 - just first go ahead and target that one.
393:14 - That's always and always a good idea.
393:15 - We'll come back onto app.jsx and all these functionality.
393:18 - But first is always a good idea
393:20 - that you simply go ahead and have a context for this one.
393:24 - So let's go ahead and work with that.
393:26 - So I'll go into my source and I'll create a new folder.
393:29 - I want to keep my context separate.
393:31 - So I'll just go ahead and hey,
393:33 - why are you not allowing me to write?
393:35 - Right click, new folder.
393:38 - Yep, now it's good.
393:40 - Context, again, we'll be calling it as context
393:43 - because you might have more than one context.
393:45 - A context for login,
393:46 - which does all the functionality for login.
393:48 - I'm having just one context, which is my to-do context.
393:51 - So I'll show you how it is being done professionally
393:53 - in such kind of application.
393:55 - I'll create a new file inside the context
393:57 - and I'll call this one as todo context.
394:00 - So I'll call this context.js.
394:04 - Not only that, usually you'll find
394:06 - that there is a new file known as index.js.
394:09 - This is nothing much more than you have multiple context
394:13 - and you pick all those contexts,
394:15 - bring them up in index so that you can import all of them
394:18 - via the index file.
394:19 - That is it, that is the goal.
394:21 - Okay, let's see how we can work with the context.
394:24 - Pretty easy if you have done this anytime
394:27 - and especially the to-dos are pretty easy
394:28 - to work on with that.
394:29 - So I'll just go ahead and say, first of all,
394:31 - let's import some stuff
394:33 - and we'll be importing them from React.
394:34 - So that's obvious.
394:36 - Let's go up here.
394:37 - What do we need?
394:38 - We need a create context and a use context.
394:40 - Create context to create the context
394:43 - and use context for using that created context.
394:46 - Too many context, but yeah, we need that.
394:48 - So we'll be having a create context
394:50 - and we'll be needing a use context,
394:52 - which is a hook itself.
394:53 - All right, now we have these two.
394:55 - The first thing is to create the context.
394:57 - So we're gonna go ahead and directly export this
394:59 - and let's call this one as to-do context.
395:02 - This to-do context will be created
395:05 - using the create context, that's it.
395:07 - It's nothing, it's just a function.
395:09 - This function takes an object
395:11 - and within the object you can pass on all the things
395:14 - which you want to have the context of.
395:16 - All the data, all the fields that you require,
395:18 - you can just directly pass on in here.
395:21 - We saw another method in which I showed you
395:22 - we can create them at separate places and all of that,
395:24 - but this is more of a professional approach.
395:26 - You'll find this again, again.
395:28 - That first approach I told you gives you more clarity,
395:31 - but in the real world application,
395:32 - you'll be using this much more.
395:34 - So in this one, my context, I'll call this one as to-dos,
395:37 - which is going to be an array
395:39 - and how does each of my to-dos looks like?
395:43 - So I'll just give it a sample here as an example
395:46 - so that we can understand it more as we write code,
395:48 - otherwise it's not required yet.
395:50 - This is just for an exercise
395:51 - so that we understand how each of my to-do looks like.
395:54 - So I'll say that ID will be one we can use later
395:57 - on the ID as a date, date.now,
396:00 - or we can use some kind of a nano ID
396:02 - to give a unique ID, totally up to us.
396:04 - And then we are going to give a to-do.
396:06 - This to-do is going to be a to-do message.
396:08 - So we'll be just saying to-do, message.
396:12 - And then finally, we'll be having a complete.
396:14 - This completed is nothing, it's just a Boolean value.
396:17 - So I'll just say false.
396:19 - So this is how my to-do looks like.
396:21 - Okay, not only that to-do, it's not gonna be just to-do.
396:24 - There needs to be a functionality as well.
396:26 - So first part is add to-do.
396:28 - So there needs to be a functionality which adds the to-do.
396:31 - I'll be just writing its vague definition,
396:34 - not the functionality or the working part in this one.
396:38 - Okay, so how does the add to-do works looks like?
396:40 - It is just a method like this, that is it.
396:44 - But add to-do doesn't work alone.
396:45 - It requires a to-do to be passed on.
396:47 - So just go ahead and give me that to-do.
396:49 - And we now know this as awareness
396:51 - that to-do will look like this.
396:52 - And that is why a lot of people like to use TypeScript
396:55 - because it gives you awareness
396:56 - about how your data looks like, types of the data.
396:59 - But again, this already makes sense.
397:01 - So there's nothing more to discuss with that.
397:04 - Okay, similarly, we have added the to-do.
397:05 - Now, obviously there will be a method to update the to-do.
397:08 - How does the update to-do looks like?
397:10 - Again, it's going to be a simple method just like this.
397:13 - But another essential thing to update an existing to-do
397:16 - is give me what to-do should I update.
397:19 - So that's going to be an ID.
397:20 - And what should I updated?
397:22 - The updated to-do give me that.
397:24 - So it needs to give that to-do.
397:25 - So that's all.
397:26 - How it will update, I'm not worried on that
397:28 - because how can change depends
397:30 - on how you're making the application.
397:32 - For us, this application is based on local storage.
397:35 - For you, this might be an application
397:37 - based on MongoDB or MySQL.
397:40 - So there could be a lot of use cases in that example.
397:45 - So we have added a to-do, updated a to-do.
397:49 - What next?
397:49 - We can have a delete to-do.
397:51 - What do I need to delete that?
397:53 - First of all, it's going to be a method.
397:54 - That's obvious.
397:55 - What do we need?
397:56 - Just an ID, give me that ID
397:58 - and I'll simply go ahead and delete that.
398:00 - So that's one thing.
398:01 - I also need to toggle the to-do to mark it as false, true,
398:05 - is it done, not done based on that.
398:07 - So I'll just go ahead and call this one as toggle,
398:10 - toggle, yeah, that sounds, toggle complete,
398:14 - toggle complete, not a good naming in this case,
398:18 - but I'll just go with that.
398:20 - Okay, what do I need for that?
398:21 - Just give me the ID and I'll work with that.
398:24 - So this is my vague functionality.
398:25 - It doesn't work and that's exactly your context
398:28 - that based on this, I can add the functionality.
398:31 - So I can not only add data into this array,
398:34 - but also I can actually define the functionality
398:36 - based on that.
398:37 - That is exactly your context.
398:39 - So now your context is all done,
398:41 - but every single time in the earlier videos,
398:44 - if you remember that,
398:45 - we saw that it's not like just defining the context easy.
398:48 - Somebody needs to use that.
398:50 - And whoever is using need to use this use context
398:53 - as well as all these things that,
398:55 - hey, I need to be aware of the context,
398:57 - to-do context, login context or something.
399:00 - This is such a common thing that we later on realize
399:03 - that doing this in the same file actually makes sense
399:05 - and actually saves us a lot of time.
399:07 - So will we simply go ahead and say,
399:09 - let's create our own custom hook.
399:11 - Let's call this one as used to do.
399:13 - Hook is nothing more than a function.
399:15 - So let's go ahead and define the function like this.
399:18 - And in this function,
399:18 - what we go ahead and do directly return another hook,
399:22 - which is a used context,
399:24 - which is aware of the context
399:25 - since this context is defined in the same file.
399:28 - So that's it.
399:29 - So this hook returns another hook.
399:32 - But the advantage is that I don't have to again
399:34 - and again call two files.
399:36 - Use context needs to be imported,
399:38 - but also this to-do context needs to be imported.
399:40 - Here, I don't need to import this.
399:41 - This is already available to me.
399:43 - That is why we define that into same file.
399:45 - Now also, we saw that we can export one more line.
399:49 - This is not really that meaningful,
399:51 - but makes our other files much more easy to read.
399:54 - So let's go ahead and go ahead and do that export const.
399:57 - And we simply go ahead and work on the to-do provider
400:02 - so that we can directly provide that.
400:04 - So to-do context, simply can go ahead
400:07 - and work on with provider.
400:10 - All right, so this is the basics that we have as of now.
400:15 - All right, so my to-do provider
400:17 - or the context for this application is almost ready.
400:21 - If I have more context,
400:23 - then obviously I'll do exactly same like this.
400:25 - Maybe if I have login,
400:26 - so what does the login information consist
400:28 - if I want to have any,
400:29 - what are all the methods I'm looking up for,
400:31 - like create account, login, logout, anything more.
400:34 - So I'll just do exactly almost similar kind of stuff there.
400:38 - Now, in addition to that, actually what I did
400:40 - is I should be writing all this in to-do context.
400:43 - I accidentally wrote it in the index.
400:44 - So I'll just go ahead and cut this out.
400:46 - This should all go into to-do context.
400:48 - So nothing much, that's not gonna bother us.
400:50 - So we'll just go ahead and copy paste it
400:52 - into the to-do context, which is a right place for it.
400:56 - Now, the reason why we created this index
400:58 - is because you might have multiple of these things
401:00 - and importing them from separate, separate files.
401:03 - It's really a nightmare kind of a thing.
401:05 - So the best practice is to go ahead
401:08 - and export it from here after importing it from here.
401:12 - So what we can do is we can directly export all of this.
401:16 - This is a nice, sneaky little syntax
401:18 - and we can import it from,
401:20 - let's just go ahead and to-do context,
401:21 - what all the things you want to export from it.
401:24 - The first thing, obviously, a to-do context,
401:26 - if we need it, most of the time we'll be using the use to-do,
401:29 - but maybe we want to get some data in that case,
401:32 - to-do context is required.
401:34 - We'll be also needing to-do provider
401:36 - and we'll be needing the hook, which is used to-do.
401:39 - So as you can see, this makes life so much easier.
401:41 - Similarly, we can export more of the things
401:43 - by importing from other files
401:45 - and that's actually something which streamlines the thing.
401:48 - So that's really nice.
401:50 - One thing is sorted that our context,
401:52 - all the work that we wanted to do is all being done.
401:55 - Okay, so step one is all done.
401:58 - Now, next up is to create these components.
402:01 - So if you remember, there was a top component,
402:03 - which was the form in which we were writing the to-dos
402:06 - and there was another thing, which was the bottom,
402:08 - which is a listing of all the to-dos.
402:10 - So that's one task that we have in our hand.
402:13 - So let me just close this.
402:14 - Another task is in the to-do context,
402:16 - we have not defined any of these methods.
402:19 - So another task in front of us
402:20 - is simply to define the functionality of all of this.
402:24 - So let's go ahead and whichever you want to take down,
402:26 - the first it's totally up to you.
402:28 - I think let's go ahead
402:29 - and take down the functionality part first
402:31 - and then we'll be building the components first.
402:34 - Okay, so the first thing that we have to do
402:36 - is simply go ahead and have a to-do provider in here.
402:40 - And the way how we are going to do is
402:42 - let's wrap this up at the top.
402:43 - So we'll be just going ahead and say to-do provider.
402:48 - No, no suggestion.
402:49 - So I need to bring this manually, probably save this.
402:51 - Let's go ahead and reload this, reload window.
402:54 - So probably now it will give me,
402:57 - let's go ahead and to-do provide, no suggestion.
403:01 - Okay, so we need to bring this to-do provider.
403:04 - So let's go at the very top
403:05 - and try to bring the to-do provider.
403:08 - All right, so we'll go ahead and say import to-do provider
403:14 - and that will be coming up from
403:17 - and we'll be saying context dot slash contexts.
403:23 - Okay, now that the to-do provider is accessible to me,
403:26 - I can go up in here and can add this to-do provider.
403:30 - The easiest thing to do is just go ahead
403:32 - and say to-do provider.
403:33 - Now once you have this,
403:34 - obviously you need to have the closing one as well.
403:37 - So let's go ahead and have it here and there we go.
403:41 - So this is happy.
403:41 - Now everything which is going to be inside this
403:44 - is going to be aware of the context.
403:47 - Some people you'll see that they also give it
403:49 - to the main itself.
403:50 - That's also fine, but I am pretty sure
403:53 - that there will be no component outside of this main
403:56 - which will be requiring this context.
403:58 - So I'll just go ahead and wrap it up here.
404:00 - So wherever you need,
404:00 - it needs to be the outermost layer of this thing.
404:04 - So that's the basic of it.
404:05 - So one part is done.
404:07 - But another thing that you are going to require
404:09 - in order to do this is to bring in all the methods
404:12 - and whatnot and all these things from this one here.
404:15 - So how we can actually bring the rest of the things?
404:17 - That is the question.
404:18 - That is the most important question.
404:20 - The easiest way to do is is come back here
404:22 - and just say, hey, there is a property being given
404:25 - to this to-do provider automatically
404:26 - by the context known as value.
404:28 - Via this value, you can actually go ahead
404:30 - and import the objects that are there.
404:32 - So for example, if I go ahead
404:34 - and do one more curly braces here,
404:35 - I can just go ahead and say, hey, I want to-dos.
404:38 - It will give me the to-dos, that same array.
404:40 - And you can also bring in all the methods there.
404:43 - So for example, we have this add to-do,
404:45 - we have update to-do, what else we have delete?
404:49 - Delete to-do and one more was toggle something,
404:52 - toggle complete.
404:53 - So I have brought in all the data
404:56 - as well as all the functionality here.
404:59 - So you might be wondering why we have brought in the data also
405:01 - because we will be passing on this data exactly
405:04 - to one component that will eventually build
405:08 - to loop through all the values inside it.
405:10 - So it's an array.
405:11 - So we will bring that and we'll loop through it.
405:13 - Currently, I'm not focused on this one
405:15 - exactly at this moment.
405:16 - I'm more focused on the add to-do, update to-do
405:18 - because I want to write functionality in them.
405:21 - So let's go ahead and work on with the functionality
405:23 - from the very top.
405:25 - First of all, we need a state for its management
405:28 - because to-dos will be added and removed and whatnot.
405:31 - There will be a lot of functionality going on.
405:33 - So we need to keep a track of all the to-dos
405:35 - inside a state itself to update our UI.
405:38 - Let's go ahead and call this one as to-do,
405:40 - to-dos, to-dos would be good.
405:42 - And this will be set to-dos.
405:45 - And that will be all done by our classic friendly use state.
405:49 - The default state will be an empty array
405:51 - so that that functionality is all done.
405:54 - Okay, right now, this is all good,
405:56 - but now let's add one by one the things
405:59 - that how this is going to be done.
406:00 - The first functionality we are going to take care is
406:03 - add to-do.
406:03 - So how this functionality will go and work on with,
406:06 - I can just directly go ahead and mark this as add to-do
406:09 - and then this is going to be a simple method,
406:12 - just like this.
406:13 - The great thing is that since I have this exact same data,
406:16 - that data will automatically map to the method
406:19 - because remember in the context, we created just a method,
406:22 - just the definition, not the definition,
406:25 - just the blueprint of it, but not the definition.
406:28 - Here's the point where we're going to go ahead
406:30 - and write the definition.
406:32 - It could have been done into a separate file,
406:33 - but all we need to do is wherever you are importing
406:35 - these values and these all things,
406:38 - it needs to be in the same file.
406:39 - So you can define it into other file,
406:41 - bring it in here and then can map it.
406:43 - That's also totally fine.
406:45 - Okay, how you're going to add?
406:46 - To add the to-do, you need the to-do.
406:48 - So let's go ahead and say that, okay, we need the to-do.
406:50 - What else we can do?
406:53 - It's really, really simple now.
406:53 - All you have to do here in this case
406:55 - is use this set to-dos.
406:57 - So how does set to-dos will work?
406:59 - Obviously it requires a callback here.
407:01 - So we'll need to have all the access to previous to-dos
407:04 - that it have, it might have.
407:06 - And then we will be working to adding the more of that.
407:09 - So where do you want to add that?
407:11 - I want to add the new to-do at the very top of my array
407:14 - and rest of them I'll spread this.
407:15 - So I'll just go ahead and say that this will be an array
407:19 - and inside this we'll be spreading this.
407:21 - So previous all values, we are spreading this out
407:24 - and my to-do will go at the very first of it.
407:27 - So this is the place where my to-do will go,
407:29 - just like that.
407:30 - It's an object, it requires three things.
407:33 - My ID, the actual to-do title of it
407:36 - and the completed, which is by default false.
407:38 - So I don't need to give it much.
407:40 - So I'll just go ahead and work with that.
407:42 - So ID, how can I get the unique ID?
407:43 - The easiest, cheapest trick in the JavaScript book
407:46 - is date.now, but totally up to you.
407:49 - Maybe you want to use nano ID or something else.
407:51 - That's totally on you.
407:52 - Okay, now that we have this one, we have added the IDs
407:57 - and what else we can do?
407:59 - We can just get this exact to-do.
408:00 - So what we'll do is we'll be spreading this to-do
408:04 - because the way how this to-do will work,
408:06 - the reason for spreading this one is
408:08 - because this to-do might have more of the functionalities
408:11 - or more, whatever it is,
408:12 - I just want to have it spread it out.
408:14 - That's why it is.
408:15 - In case you're working with just the string itself,
408:17 - then you don't need to spread it out.
408:18 - But since ours is an object,
408:20 - so we are actually updating one property of it
408:23 - and then we are working on it.
408:24 - So really simple, basic, classic JavaScript, that's it.
408:27 - Okay, so this part is all done.
408:29 - Now let's see how we can update the to-do.
408:31 - Again, classic way of updating is really simple.
408:34 - So we're going to go ahead and say I need to update this.
408:37 - Update to-do, update to-do.
408:41 - Okay, update to-do, again, a method, nothing more than that.
408:45 - And I'll say for updating, I need an ID
408:47 - as well as I need it to do.
408:50 - Okay, how can I update this?
408:51 - For updating, obviously the best part
408:53 - is to loop through all the arrays.
408:55 - Totally depends on you,
408:56 - how you want to loop through the values.
408:57 - I'll just use maybe a map for this one.
409:00 - So I'll just, first of all, bring in all the to-dos.
409:03 - We will be requiring all the previous values.
409:05 - So we'll call this one as prev.
409:07 - Okay, there we go.
409:10 - Now with this, I'll just take this,
409:12 - all the previous values inside my arrays.
409:14 - I'll loop through with probably a map.
409:16 - Inside this map, I get a callback.
409:18 - So I'll just go ahead and say that I need each of these.
409:21 - So prev to-do, I'll call this one each to-do as prev to-do.
409:24 - Once I have this one,
409:25 - then I'll simply go ahead and update.
409:27 - To update that, I need to find a particular to-do
409:30 - to work on with that.
409:32 - So what I'll do is I'll just wrap everything
409:34 - inside the parentheses again
409:36 - so that it doesn't give me any error.
409:37 - So I'll just go ahead and say prev to-do
409:40 - if it's ID because each to-do has an ID.
409:43 - If it matches equals to the ID of the to-do
409:48 - that is provided to me in the function.
409:51 - So to-do.id, okay.
409:53 - If that is the case, if that is working fine,
409:57 - then let's go ahead and do something in here.
410:00 - Otherwise, we'll do something in here.
410:02 - Okay, just boilerplate here.
410:04 - This helps me always to write things nicely.
410:07 - So in this case, if it matches,
410:09 - then I'll go ahead and say to-do.
410:10 - So I'll just update the entire object.
410:13 - If it doesn't match with that,
410:14 - then go ahead and keep it as it is.
410:16 - So prev to-do, whatever that to-do is,
410:18 - we'll keep it as it is.
410:19 - So we're looping through each of the value.
410:22 - Couldn't be much more simpler than that, the explanation.
410:25 - Line by line, I hope you have understood that.
410:27 - If not, rewind the video.
410:29 - Okay, next up, we'll just go with the delete.
410:30 - Delete is the easiest one.
410:32 - Const delete to-do and the delete works with,
410:36 - just give me the ID and I'll work with that.
410:39 - All right, how does the delete functionality works?
410:41 - Simple, set to-dos, let's grab that.
410:44 - We need all of the access of that.
410:46 - So we'll just go ahead and say prev
410:48 - and we'll work with that.
410:50 - Okay, how are we going to work that?
410:51 - First, let's go ahead and filter this out.
410:56 - Looping through in this doesn't make sense.
410:58 - We can have operation on filter
411:00 - so that we can create a new array
411:02 - based on the filtering operation.
411:04 - So we need to provide a condition.
411:05 - So we'll say, hey, prev,
411:07 - let's go ahead and use a filter method on that.
411:09 - By the way, I do have a YouTube videos
411:11 - on this filter map reduce,
411:12 - really nicely explained step-by-step, broken down.
411:15 - If you don't know about in depth of that,
411:17 - check out that one.
411:18 - Okay, how does that work?
411:21 - So the filter method requires a callback, okay.
411:24 - In each of the callback,
411:25 - you'll have the each individual to-do item,
411:27 - call it as prev to-do to-do,
411:29 - doesn't really matter, it just is a filler word.
411:31 - Once it is there, then we need to require
411:34 - to pass on a condition to that.
411:36 - So if the to-do, we are looping through that,
411:40 - each one of them, if it's ID matches with my ID,
411:44 - then we need to delete that.
411:47 - So we have to go through with the reverse logic of it.
411:50 - I want all the to-dos, which doesn't match the ID.
411:55 - So which doesn't match the ID.
412:00 - So now, because if you don't know this,
412:03 - filter always works for the true condition.
412:05 - So we need to somehow give the true condition,
412:07 - that's why the reverse logic always works here.
412:09 - So what I'm saying here is really simple,
412:11 - that go through with each one of them,
412:12 - and I want to create a new array
412:14 - based on some true conditions.
412:16 - That true condition is ID should not match.
412:19 - So whose ID is matching, we need to remove that.
412:22 - Whose IDs is not matching,
412:24 - we need to create a new array out of it.
412:25 - So that's what we are doing in this delete to-do.
412:28 - Okay, pretty cool.
412:29 - Now let's go ahead and work on with the toggle as well.
412:33 - Toggle is also fairly simple, nothing too much on that.
412:36 - A little bit, but not too much.
412:38 - Okay, let's call this one as toggle complete.
412:41 - Okay, how do you work?
412:43 - It requires an ID.
412:44 - And once it has the ID,
412:46 - obviously we need to go inside this one here.
412:48 - Okay, moving further, how does it work?
412:50 - First of all, let's grab all the to-dos.
412:52 - This is where we get it.
412:54 - And we need to go through with each one of them.
412:56 - So let's go ahead and have the prev just like this.
412:59 - Okay, now we have this one.
413:01 - I'll just go ahead and break it down into separate lines
413:03 - so it's much more easier for you to understand.
413:06 - Okay, now here what I'll do is,
413:07 - I'll loop through with each one of them.
413:09 - So prev.map, there we go.
413:11 - We are looping through the values.
413:12 - Inside the map, we need a callback.
413:14 - So we'll call this one as prev to-do.
413:16 - Call it to-do, prev to-do doesn't really matter.
413:19 - And inside this, we need a callback.
413:20 - So this is my callback.
413:22 - And what I'll do is, I'll again go into the new line
413:25 - so it's much more easier for you to understand.
413:27 - Now inside this, each one of this,
413:30 - I want to toggle this one.
413:32 - So I want to go inside the object,
413:36 - like we have an array.
413:38 - In these array, we have a lot of objects.
413:41 - I don't want to go every object.
413:42 - I want to go into an object whose ID matches.
413:45 - Once I go inside this, I want to update that entire object.
413:48 - Not all the properties, just one property,
413:51 - which is the complete part.
413:53 - Okay, so how we're going to do this are really simple.
413:56 - Let's have this prev to-do.
413:57 - And first of all, let's see that if the ID
414:00 - of this prev to-do matches with the ID
414:03 - that you have provided me, if that is the case,
414:06 - then we're gonna go ahead and do something.
414:10 - Otherwise, we'll do something.
414:11 - Okay, boilerplate code here.
414:14 - If it matches with the ID, then I want to update it.
414:17 - So I'll just go ahead and spread this out.
414:19 - So spread this prev to-do, first of all.
414:22 - Once I spread this, now I have access to all of this.
414:25 - Once I've spreaded this,
414:27 - then I have to update only one field, which is completed.
414:32 - And that completed, I need to toggle that.
414:34 - So I'll just change the previous values.
414:36 - So I'll just go ahead and say whatever,
414:39 - just use an exclamatory so that it reverse the true
414:41 - to false, false to true, so really basic.
414:44 - So I'll just say prev to-do, prev to-do.
414:48 - And you have a property known as .completed.
414:54 - Okay, we are flexing this, nice really.
414:56 - And on the else part, what we need to do,
414:59 - just keep it as it is.
415:00 - So just your prev to-do will remain as it is.
415:03 - So there we go.
415:04 - Okay, one thing you remember,
415:06 - a lot of people kind of get in confusion with this one,
415:09 - that hey, you're spreading this first and then updating.
415:12 - This is an object, it doesn't really matter.
415:14 - Once you spread this out, that is it.
415:17 - Then you can update the existing field.
415:19 - This is how the object spreading works.
415:21 - If you spread this out, either first or end,
415:24 - then if you update any field,
415:25 - that exactly that particular field will get updated.
415:28 - So really nice.
415:29 - Okay, so that's the functionality part,
415:32 - we have taken this down.
415:33 - Now, this is the functionality part.
415:35 - We haven't talked about how the things will actually go
415:39 - in the local storage.
415:40 - So we need to work on with the local storage as well.
415:43 - There are two ways how the things are going
415:45 - inside the local storage
415:47 - and coming out of the local storage.
415:49 - First thing, any changes in this to-dos
415:51 - or the set to-dos, if you are adding any field
415:53 - or updating, removing, whatever we are having,
415:55 - we need to update that into the local storage.
415:58 - And any given time when the page loads itself,
416:00 - we want to query the local storage
416:02 - that if you have any data, give me that data.
416:04 - Otherwise, what's the point of having local storage?
416:07 - So for this, whenever the component loads,
416:09 - one good thing that we can actually go ahead
416:11 - and use is use effect.
416:13 - This is a hook that we want to use, so use effect.
416:16 - And this is it, and it requires a callback.
416:19 - So let's go ahead and give it a callback just like this.
416:22 - The second property is your dependency array.
416:25 - We don't have any dependency array
416:26 - because this is the hook where we are talking about,
416:29 - as soon as the component loads,
416:31 - query the local storage, get me all the data,
416:34 - and let's push all the data into the state
416:37 - which is set to-dos.
416:38 - That's exactly what we'll be doing.
416:40 - So what we'll be doing is we need to query the local storage
416:45 - and we can just get the item just with this one.
416:48 - And we'll be calling this one as to-do.
416:50 - Right now, we haven't called them anything,
416:51 - so let's just call this one as to-dos, all over storage.
416:54 - Okay, we have got all of this.
416:56 - Now let's go ahead and kind of, this is a string.
417:00 - This string needs to convert it into JSON first.
417:03 - Local storage always works with a string, so there we go.
417:06 - And we have multiple ways of doing this.
417:08 - The easiest way is to JSON.parse.
417:10 - Once we have this, let's store that into a variable.
417:12 - Const to-dos, okay.
417:15 - We have brought in the local,
417:19 - we have brought in data from local storage.
417:21 - Now we need to do is,
417:23 - we need to push this data into the state.
417:25 - So that's really simple.
417:27 - But I want to, I can actually go ahead and directly do this,
417:29 - set to-dos and kind of use this one and to-dos.
417:32 - But what I'm thinking is,
417:34 - there might be no data into the to-dos.
417:36 - So that might be the case.
417:38 - So let's handle this as an optional,
417:40 - otherwise I don't want to do this.
417:41 - So if, let's test the condition,
417:43 - if there is to-dos first of all.
417:44 - If there is no to-dos,
417:45 - then there might be a potential of my application
417:48 - being crashed down, so let's not do that.
417:51 - And what we're gonna do is,
417:53 - let's go ahead and use another condition
417:55 - that to-dos is there, but there might be nothing inside it.
417:58 - So to-dos.length,
418:01 - since this is an array, I can use that,
418:04 - should be greater than zero, anything greater than zero.
418:06 - Then I'll go ahead and use the to-dos,
418:08 - and I'll just go ahead and to-dos.
418:10 - Again, this is a little bit optional, but good to have.
418:13 - So this is the place where I'm using the use effect hook,
418:17 - where there is no dependency array.
418:18 - As soon as the component will mount,
418:20 - this hook will be rendered,
418:22 - or this hook will be activated,
418:25 - and all this functionality will work.
418:27 - Now I want another case
418:30 - that if there is any update in the to-dos,
418:33 - then also this whole thing should update.
418:36 - So we should grab the data from it
418:38 - and use and work on with all of them.
418:40 - But this time, I don't want to actually grab the data.
418:44 - I don't want to get the item, I want to set the item.
418:46 - Newer value should be set at,
418:47 - so if you have added anything updated,
418:49 - newer whole value should be added.
418:52 - This whole thing, this new set to-dos,
418:54 - all the arrays should go into this one.
418:56 - But the problem is, you might be wondering that,
418:59 - hey, the easy solution could be
419:00 - just add a dependency arrays of to-dos,
419:02 - but that will be a problem.
419:04 - The problem is that if you add this one,
419:07 - this whole thing will run again.
419:08 - I don't want to run it.
419:09 - I want to run it once at the first start,
419:11 - but not after that.
419:13 - So this is the classic case where you use
419:15 - more than one hook.
419:16 - So use effect, let's use it one more time.
419:19 - And yes, you can have as many use effect hook
419:20 - in your application as you like.
419:22 - In this case, I'll just again have my callback,
419:25 - just like this, and I'll have a dependency array,
419:28 - but this time in my dependency array,
419:30 - it is dependent on to-dos.
419:32 - Anything that happens to-dos, run this piece of code.
419:35 - What piece of code?
419:36 - Again, we need to query the local storage.
419:38 - This time we'll set the item.
419:40 - So just update the value, keep on setting them,
419:43 - keep on setting them.
419:44 - Set item, what do you want to set them?
419:46 - This requires two part, the key and the value.
419:48 - The key is pretty simple.
419:50 - Just use the exact same keys that you are using
419:51 - to parse the values as well, so set to-dos.
419:54 - And then we can directly use to-dos,
419:57 - but local storage doesn't really accept
420:00 - arrays or anything, it just accepts strings.
420:02 - So easy way is to just use JSON.stringify.
420:06 - Yep, there we go.
420:07 - And just go ahead and take to-dos here.
420:10 - There we go.
420:11 - Really simple, fun functionality that we have added.
420:15 - So the functionality part is over.
420:16 - Now the next part that's in front of us
420:19 - is to create some components.
420:21 - Let's dive in and create some components,
420:23 - the top form as well as the bottom one here as well.
420:28 - All right, so the next thing that is in front of us
420:31 - is to build the components, that is it.
420:33 - We have worked on the functionality part,
420:35 - we have worked on a lot of logics and stuff.
420:37 - Now let's go ahead and talk about the components.
420:40 - We have two major components.
420:41 - The first one being the form itself,
420:44 - where I write the data, click on the button,
420:45 - it adds into the context.
420:47 - That's why the context is for,
420:48 - that's why the add method is for.
420:50 - That's one thing.
420:51 - The another component that we'll be creating
420:53 - is give it an array of to-dos.
420:55 - It will be looping through and displaying it.
420:57 - That's it.
420:58 - Not only displaying it,
420:59 - it will add some more functionality it is,
421:02 - but we won't be working on the functionality part
421:04 - because we've already done that in the app.js.
421:06 - We'll be just bringing that functionality
421:08 - and injecting at the right place.
421:10 - That is it.
421:11 - That is it all we have to do.
421:13 - Let's go ahead and work on with this one.
421:14 - So I'll just say that I need one more folder.
421:19 - Yep, so I'll just go into source, new folder,
421:22 - and we'll call this one as components.
421:25 - Looks good.
421:27 - So again, the components will have majorly three files.
421:30 - The first one will be obvious, the index.js,
421:32 - so that we can just get all the components at one place
421:35 - and can import and export that.
421:37 - So that's majorly it's being done in almost all places.
421:40 - If you want to do it, that's okay.
421:41 - If you don't want to do it, that's okay too.
421:43 - I'm not going to force you anything on that.
421:45 - Okay, so first one that we will be working on
421:48 - is going to be simply to-do form.
421:51 - To-do form.jsx, of course,
421:53 - because this is an x component, gsx component,
421:57 - and will be to-do items as well.
421:59 - So let's go ahead and say components, new file.
422:03 - This one will be to-do item.jsx.
422:08 - Okay, let's take down the easiest one,
422:10 - which is the to-do form first.
422:12 - That is the easiest one.
422:13 - I'll close all the other files as well.
422:14 - We don't need them as of now.
422:17 - Okay, how does the to-do form looks like?
422:19 - Basic react functional components.
422:21 - So rfce, react functional component.
422:27 - What we can do is, let's hit enter.
422:31 - Okay, looks good, looks good.
422:33 - React function to-do does this nicely.
422:35 - Okay, one by one.
422:37 - First of all, what do we need for this to-do?
422:39 - First of all, we need to track
422:40 - what the user is writing in the form.
422:42 - So I need a state for that.
422:44 - So let's go ahead and do that.
422:45 - This will be a single to-do.
422:47 - So I'll just call this one to-do,
422:48 - set to-do, and that will be bringing up from use state.
422:53 - So bring me the user state,
422:55 - and we'll just say initially you are empty.
422:58 - Okay, apart from this, do you need anything else?
423:01 - Yes, you need to add this to-do.
423:03 - The add functionality is in my context,
423:06 - and the method, if you remember it,
423:08 - we actually worked on the functionality in app.js,
423:10 - but the beauty is,
423:12 - it doesn't really matter where you worked on it.
423:13 - I can just bring in that functionality,
423:15 - and if somebody has done that functionality,
423:17 - I can just bring it here.
423:19 - So the best thing to do here is just use the hook use to-do.
423:23 - Oh no, it doesn't.
423:24 - Why is it not suggesting me anything?
423:26 - I really don't like it.
423:28 - Okay, we need to work on with use to-do,
423:31 - and how we're going to grab it,
423:33 - we'll be grabbing it from,
423:34 - we need to go one directory back inside the context,
423:38 - and from this one, we need to grab the to-do context.
423:42 - So we'll just grab this hook use to-do from there,
423:44 - or can I bring it directly from the index?
423:48 - Probably, but anyways, you get the idea.
423:51 - Use to-do, now we have this use to-do directly a hook,
423:54 - which internally, if you remember,
423:55 - is giving us an access of the hook use context,
423:59 - which is already having the to-do context.
424:01 - Pretty nice.
424:02 - Okay, and we can bring in functionality from this one,
424:05 - so I can just go ahead and say,
424:06 - hey, give me something, whatever you like.
424:07 - So in this case, I just need add to-do.
424:09 - I don't need to have access of all the to-dos,
424:11 - I don't need to have access of add, delete,
424:14 - no need at all, I can just work with that.
424:17 - Okay, this is good.
424:19 - Now, we need to have a functionality
424:21 - when the form is going to get submitted,
424:24 - or the add button is going to click,
424:26 - we need to add it into this one.
424:28 - So we'll just, first of all, we'll say,
424:31 - okay, let me just show you one by one.
424:32 - So we'll call this method as simply add, not the add to-do.
424:35 - So what this will do is,
424:36 - there will be an event that will be fired.
424:39 - First of all, prevent that default.
424:40 - So E.prevent default,
424:45 - so that it doesn't submit it anywhere.
424:47 - Okay, that's the step one.
424:48 - Now, if there is no to-do, like it is empty,
424:51 - then we'll just don't do anything.
424:53 - So we'll just go ahead and say,
424:54 - if there is no to-do, then just go ahead and return.
424:59 - So we'll just remove this, remove this,
425:01 - it could be a one-liner, so return.
425:03 - If it is not the case, there is something inside the to-do,
425:06 - is there is a string or something inside the to-do,
425:09 - then we can simply go ahead
425:10 - and call this one as add to-do, okay.
425:13 - First of all, let's push this one here.
425:15 - So add to-do, and what this add to-do method will do,
425:19 - it requires it to do to be passed on to this one.
425:22 - So this is to-do is an object,
425:25 - and we'll just give you this to-do, this is a string,
425:28 - and we can optionally give it completed as one as,
425:31 - although there is a default value there,
425:33 - but any case, we'll just give it a false.
425:37 - We don't need to give it an ID
425:38 - because if you remember correctly,
425:41 - in the app.jsx, when we were working on this add to-do,
425:46 - whatever the to-do you pass me on,
425:47 - which is an object, obviously, I am adding the date here.
425:50 - If you want to remove it completely,
425:52 - you can just save yourself some step.
425:54 - You can spread this or not even spread this.
425:57 - You can just have a to-do here,
425:58 - which is an object and spread this previous here.
426:00 - So it's totally up to you that what kind of data flow
426:05 - or what kind of application flow you are going.
426:07 - In my case, I'm passing the text of the to-do
426:11 - as well as completed here and the data I'm adding there,
426:13 - but you can do everything here,
426:15 - you can do not everything there, you cannot do that.
426:18 - Okay, so this is the basic,
426:20 - and one as side note that I'll be doing is,
426:23 - once everything is all done,
426:24 - this is all what we need to do as a functionality.
426:26 - I want to reset the to-do as well
426:28 - so that the state actually the to-do just gets off,
426:31 - so I'll just empty it out.
426:33 - So I'll just go ahead and say set to-do,
426:35 - and I'll just empty it out, that's it.
426:37 - A little bit basics, so there we go.
426:39 - So this is all it takes to have your to-do form.
426:42 - Now comes to the visual part.
426:44 - For the visual part, what we'll be having is a simple form.
426:46 - So let's go ahead and remove this and just have a form.
426:51 - So there we go, we'll be having a form.
426:53 - There will be no action required on this.
426:55 - We'll be having just one method, which is on submit.
426:59 - And in this, we'll be calling this add method,
427:01 - and we'll be having some class name onto this one as well.
427:05 - So we'll be having class name of flex.
427:07 - This is just a visual aesthetic aspect,
427:10 - not bothered much on that.
427:11 - We are having this input, which is a type of text.
427:16 - Okay, we don't need this.
427:20 - Okay, let's go there.
427:21 - And first of all, we'll be having a placeholder.
427:23 - Placeholder we are saying right to do with couple of dots.
427:30 - And after that, we have some class names
427:32 - that I'll be bringing in from my notes file.
427:35 - I do have a lot of notes.
427:37 - Okay, so I'll be just bringing them up
427:39 - so that it looks decent.
427:40 - So there we go.
427:41 - Okay, this is copy paste stuff, Tailwind CSS.
427:44 - Okay, now interesting part.
427:45 - How does the value in this one governs?
427:48 - The value is going to be governed by the to-do,
427:50 - so that's managed by state.
427:51 - What happens when something changes?
427:53 - So anytime you change something, so on change,
427:57 - what happens is there will be an event
427:58 - that will be firing up, so callback.
428:01 - And we'll be calling the set to do.
428:04 - And inside the set to do,
428:05 - we'll be saying e.target.value.
428:08 - So we'll be adding the targeted value in here.
428:11 - Okay, that's my first part of it.
428:14 - And the next part is the button.
428:15 - So that's not really bad.
428:17 - So button, which will be of type submit, there we go.
428:21 - And we'll be calling this one as add.
428:24 - And obviously without any doubt,
428:26 - we do have some classes here as well.
428:28 - Class name, and I do have it in my notes as well.
428:30 - By the way, you'll be grabbing all these classes
428:32 - from my GitHub itself.
428:34 - If you want to add it on your own, give it on your own look,
428:36 - that's also fine, no big deal there.
428:39 - Okay, so this part is all done.
428:40 - We have exported the to-do form as well.
428:42 - So all looks great.
428:44 - Now moving on, let's go ahead and work on
428:46 - with the to-do item.
428:47 - Again, rfce looks great.
428:49 - So we have react functional component, everything.
428:52 - The looping part and all of this
428:53 - will be working through all of that
428:55 - and all these things in a minute.
428:57 - I'll just directly give you majority of the part as well.
429:00 - But first let's work on the functionality part
429:02 - because here also you need some kind of state management.
429:06 - Why?
429:06 - Because in our application,
429:08 - we are having some of the state controllers.
429:10 - And as somebody checks on that,
429:11 - so is it editable or not?
429:13 - We are governing that.
429:15 - If it is marked as complete,
429:16 - then we are not allowing that to be editable.
429:19 - So that's one thing.
429:20 - And then obviously we need to have all these
429:22 - to-do messages as well.
429:23 - We'll be using the state as well.
429:25 - And apart from this,
429:26 - we also have the update functionality as well.
429:28 - So first of all, in this to-do item,
429:30 - somebody will give us a prop which will be a to-do.
429:33 - And this to-do is having all the to-dos.
429:37 - It's a major gigantic array
429:39 - which has all the functionality in it.
429:41 - Let's go ahead and import one by one
429:42 - the functionalities that we need.
429:44 - First of all, we need to check is to do editable.
429:49 - Okay.
429:50 - And we'll be needing set is to do editable.
429:55 - And that will be governed by use state.
429:59 - And by default, everything will be false.
430:04 - Okay.
430:05 - And what else we need?
430:07 - We need the to-do messages as well.
430:08 - So we'll be saying const.
430:10 - And we'll call this one as to-do message.
430:14 - Set to-do message.
430:19 - And we'll be saying that you will be governed by use state.
430:23 - But in the use state,
430:25 - we will be not passing on directly to-do
430:26 - because that will be bad.
430:27 - We'll be just passing it all the to-dos here.
430:30 - Okay.
430:31 - So that's my one message of the to-do.
430:32 - Okay.
430:33 - And updation as well.
430:35 - We'll be governing the updation part as well.
430:36 - So we'll just say update to-do.
430:39 - Update to-do.
430:40 - And we don't need updation for the state management.
430:44 - We don't need this one.
430:45 - Okay.
430:46 - Another thing that we need
430:47 - since we are controlling couple of functionalities here
430:49 - for example, update, the delete as well, the toggle as well
430:52 - we need to bring these functionality
430:54 - and how we can bring that simply with the hook itself,
430:57 - the use to-do.
430:58 - The use context hook actually gives us that access.
431:01 - But we are not using use context.
431:03 - We have actually crafted our own hook
431:04 - that gives us access to all the functionality.
431:07 - So let's go ahead at the very top and bring this one here.
431:10 - I'll say first of all, let's give me use to-do
431:14 - and I'll just bring it from auto-import.
431:18 - That's nice.
431:19 - Okay.
431:20 - So use to-do.
431:23 - There we go.
431:24 - And this hook gives you access
431:26 - to all the features that you need.
431:29 - What all do you need?
431:30 - In this one, I'll need update to-do.
431:32 - I need delete to-do and I also need toggle complete.
431:39 - There we go.
431:40 - Okay.
431:41 - So all the to-dos and everything are with me.
431:44 - Now we need to define some of the functionality as well.
431:48 - Functionality wise,
431:49 - we have already taken care of most of the things
431:50 - but we need to take care of some things
431:52 - in the visual aspect as well.
431:54 - Especially what happens when we do the edit
431:57 - because notice here, if it is editable
431:59 - then we are enabling some fields.
432:01 - For example, if you remember when I clicked on the edit
432:04 - there was a input field that came in
432:06 - and that input field was conditionally rendered.
432:09 - If input field, like if it was edit was editable
432:14 - then the input field came in, the value got into it
432:16 - and now you're allowed to edit into that.
432:18 - So based on this, this is the whole thing.
432:20 - This true or false functionality is allowing us
432:23 - to conditionally render that.
432:24 - That is why we need to write some piece of code
432:26 - to conditionally do that.
432:27 - So I'll just call this one as edit to-do
432:30 - and what does this edit to-do does?
432:32 - It's a simple function like this
432:35 - and all it does is it allows us to update that
432:37 - because once somebody clicks on edit,
432:39 - we need to run the functionality of update.
432:41 - Whether he has edited or not, that's up to him
432:44 - but we'll just go with that.
432:45 - In order to update anything, we need to pass on two things.
432:48 - The first one is the ID.
432:49 - So we'll just grab the to-do and its ID from there
432:52 - and we need to pass on the entire to-do
432:54 - that needs to be updated.
432:55 - So we'll just give it an object, we'll spread the to-do
433:00 - and what we'll be doing is the only thing
433:02 - that's usually we are allowing to update
433:05 - while this method is just the string part.
433:07 - So let's go ahead and spread this out
433:09 - and the only thing, only property that's getting updated
433:11 - is the to-do which is now getting updated
433:13 - with the to-do message.
433:15 - There we go.
433:16 - Now it's making much more sense to you.
433:18 - Once this is all done, then obviously we need to say that,
433:21 - hey, this edit is all done.
433:23 - So this operation is being performed.
433:25 - Now let's set editable again back to false.
433:28 - So set to do editable will be going it as false.
433:33 - Okay.
433:34 - Right now you might be wondering,
433:35 - hey, nobody has made it update.
433:36 - That will be done.
433:37 - Editable, nobody is making it as true.
433:39 - Yes, we'll do that.
433:41 - But that will be toggled by another click, not this.
433:44 - This is a pure functionality part.
433:46 - Okay.
433:47 - Now another thing that we'll be going through is this one.
433:52 - Let's create another method.
433:53 - We'll be using that in a second.
433:55 - This will be a simple toggle complete.
433:58 - So in the toggle complete,
433:59 - what we are doing is this toggle complete.
434:03 - Let's go ahead and do it like this.
434:05 - There we go.
434:07 - Okay.
434:09 - Toggle completed.
434:10 - Actually, this is not the toggle complete.
434:15 - Toggle complete is something that we are bringing
434:16 - from the context.
434:18 - Toggle completed is something that we'll be using
434:21 - for visual aspect only, just for the strikethrough line.
434:23 - That is it.
434:24 - So how we're going to do that,
434:26 - simply just have this one as toggle complete.
434:32 - Inside this, we'll be calling this one
434:33 - and passing on the todo.id.
434:36 - Okay.
434:37 - So we're not directly using this method.
434:39 - We are actually created our own method inside this.
434:42 - And this method technically will be running this method.
434:44 - So that's it.
434:45 - Okay.
434:46 - So the functionality part is almost all done,
434:48 - whatever the code we wanted to write.
434:50 - Now what's remaining is how we actually render that.
434:53 - We have used a lot of fancy things inside this.
434:55 - So we'll just do it things one by one.
434:57 - So first of all, what we're going to do is this is my div.
435:02 - This is for each of the todo itself.
435:04 - The first thing that I'll do is add some class names here.
435:07 - So let me walk you through how we are doing it.
435:09 - So remember this, this is not all the todos.
435:11 - This is one todo itself.
435:13 - Okay.
435:15 - So in the app.js, we will be looping through the values.
435:17 - This is just one.
435:18 - Okay.
435:19 - So the first thing that we have is the class name
435:21 - and we'll be removing the class name like this.
435:23 - We'll be starting our JavaScript, use the back ticks here.
435:26 - The reason for using the back tick is because
435:29 - I have some of the CSS classes, which looks as a default.
435:32 - So this is just a string, but I want to add more
435:35 - based on, I want to do some conditional rendering.
435:38 - So if the todo is completed,
435:40 - I want to just add another color based on that.
435:42 - So I'll just do that.
435:44 - Okay. So what I'll do is first of all,
435:45 - let's add the JavaScript functionality
435:48 - and then ask if the todo is completed.
435:52 - Todo is, it has a functionality.
435:55 - I know that this is an object.
435:56 - I added this property into this one, which is a completed.
436:01 - If that is the case, we'll do something.
436:03 - Otherwise we'll do something.
436:04 - So based on this, we'll be rendering the color.
436:07 - And by the way, I do have these colors.
436:08 - So I'll just copy and paste this one.
436:10 - So this color, if it is completed, we'll use that.
436:14 - And if it is not completed, we'll be using this color.
436:17 - So I do have different colors based on that.
436:20 - Okay. So this is easy part.
436:22 - We have gone through with this one.
436:24 - Now let's go ahead and remove this todo item
436:26 - and go up here.
436:27 - Now we have a couple of things
436:28 - that are conditionally rendering.
436:30 - First of all, the checkbox is always there.
436:32 - So let's go ahead and have this one.
436:34 - So input, this is a type of checkbox.
436:37 - We don't need this name and ID.
436:43 - Okay. So this checkbox,
436:46 - we have a class name for this one, really easy,
436:48 - which is cursor, no suggestion, cursor pointer.
436:53 - Okay. And is it checked or not?
436:56 - This checked or not is going to be based on todo.
436:59 - So todo will tell me literally completed or not.
437:02 - And what happens when something changes?
437:04 - So on change, we'll run on that.
437:06 - And in this, we will be running the todo completed,
437:10 - the method that we created todo.
437:12 - I'll just copy and paste this one.
437:14 - Otherwise it will confuse me a lot.
437:17 - Okay. This one, toggle completed.
437:21 - Copy that and paste it here.
437:23 - So this is the reason why I didn't use it directly
437:27 - because if I use it directly toggle complete,
437:29 - I have to pass an ID.
437:31 - So I have to run a callback here.
437:33 - If you don't want to do that, just use it like this.
437:35 - Exactly same thing.
437:36 - So exactly same thing, nothing too much to be discussed.
437:39 - Okay. Next part is my input field
437:42 - and based the input field is editable or not,
437:45 - that will decide based on this one is todo editable.
437:50 - Okay. Let's move on to the next part.
437:52 - Next part is again, this one is the input type of text.
437:55 - So we'll be saying input text.
437:57 - There we go.
437:58 - We don't need any of this.
437:59 - Remove this, remove this.
438:01 - Okay. First of all, the class,
438:03 - again, the class name will go like this, this.
438:06 - This is a common practice.
438:08 - You'll see quite a lot of things being done just like this.
438:11 - So these are our basic classes,
438:13 - but rest of the classes will be conditionally rendered.
438:16 - So again, fire up your JavaScript fillers up here
438:19 - and is todo editable based on this condition,
438:24 - either do something or do something else.
438:28 - I do have again, these things.
438:30 - So if it is editable, we are showing the borders.
438:32 - Otherwise we are not showing the borders and that is it.
438:35 - I know very, very sneaky, but this is how it's being done.
438:39 - Okay. So command Z.
438:45 - So we are showing the borders.
438:46 - Let me just copy this.
438:48 - So we are showing the border.
438:49 - If it is editable, if it is not editable,
438:52 - then we are making the border as transparent.
438:54 - That is it.
438:55 - So it gives the feeling that it's not an input field.
438:57 - That is it very sneaky.
438:59 - I know, but this is all what we have.
439:00 - So in the class name,
439:02 - now the rest of the thing in this is pretty easy to add in.
439:04 - So we need to add the value.
439:06 - What value?
439:06 - Pretty simple value is a todo message.
439:09 - Todo message, we got the value, we are displaying it.
439:12 - Is it readable or not?
439:13 - So let's go ahead and,
439:15 - so this is a read only field based on some field.
439:18 - So we'll be using exclamatory and the thing is,
439:22 - is todo editable.
439:27 - So if the todo are really basic logic,
439:29 - we have already discussed that as too much,
439:31 - we are giving it as a false.
439:33 - So is it readable only or user can edit it
439:36 - based on the edit functionality?
439:37 - We are giving that, so really basic.
439:39 - Don't want to explain it too much explanation of that.
439:41 - And one more field is on change.
439:43 - What happens on change?
439:44 - So again, we have an event that is going to callback
439:47 - and that's going to make it is,
439:49 - is set todo message as e.target.value.
439:54 - Set todo message as e.target.value.
440:00 - There we go.
440:02 - All right, so this is done.
440:03 - And again, very, very sneakingly,
440:05 - we are adding these input fields and all of that.
440:08 - Last but not the least, now we have buttons
440:10 - and actually we have couple of them.
440:12 - There's a save button,
440:13 - which actually conditionally render to save or edit.
440:17 - We have a delete button as well.
440:19 - So let's go ahead and do that as well.
440:21 - Okay, one by one.
440:22 - First of all, this is a button.
440:23 - So this button is just a classic button,
440:26 - nothing too much onto this one.
440:28 - What goes into the button is actually dependent
440:32 - on the value itself.
440:34 - So I'll just go ahead and start my JavaScript again
440:38 - and depend on is todo editable.
440:41 - So for that, we'll be giving it something.
440:45 - Otherwise, we'll be giving it something.
440:47 - So you can go ahead and say if todo is editable,
440:49 - go ahead and give it a save.
440:51 - If it is not, give it a edit message,
440:54 - but we do have the icons for it.
440:56 - So I've actually copied the icons.
440:58 - So we'll be using the icons,
440:59 - but again, you can use the text if you wish.
441:01 - And I do have a pencil icon for that as well
441:04 - in the case of edit.
441:05 - So we'll be using that fancy, but yeah, I like that.
441:08 - Okay, so again, we'll be adding some of the classes
441:12 - and all these things.
441:13 - So let's go up here.
441:15 - First of all, let's add a class name,
441:17 - lots of classes in this one.
441:20 - Okay, copy that and paste it, no worries that part.
441:23 - Okay, classes is all done, but what happens on click?
441:26 - That is the important part, on click.
441:30 - So on click, we'll be firing up a callback
441:32 - because we need to check some conditionary rendering here
441:34 - or conditionally.
441:36 - So we'll be checking if, based on some conditions,
441:39 - if todo is completed.
441:43 - If todo is completed,
441:44 - then we don't want to do anything at all.
441:46 - We don't want to give any functionality.
441:48 - On click should do nothing at all.
441:49 - If it's already completed,
441:51 - why do you want to save or edit it?
441:52 - So we'll just go ahead and say return.
441:54 - Okay, that's one check, but if todo is editable,
441:57 - let's go ahead and do some more stuff.
442:00 - So we'll check again.
442:02 - If is todo editable, in that case,
442:07 - we'll just go ahead and say edit todo.
442:10 - And in this one, we'll just run this method.
442:13 - And in the else part, if todo is not editable,
442:16 - then we'll just keep it as it is.
442:18 - So we'll just say set is todo editable,
442:23 - and we'll take the previous value
442:25 - and we'll say as it is, just flip that.
442:29 - Prep, okay.
442:31 - So I hope you remember is todo editable.
442:33 - This is just a Boolean value.
442:35 - So this is just true and false.
442:37 - And if todo is editable,
442:39 - then we perform the edit operation.
442:41 - If it is not, then just go ahead and keep it as it is.
442:44 - We don't want to do anything in that case.
442:46 - Okay, so this is the first part.
442:48 - And also what we can do is in this case,
442:52 - we can actually check for, you want to give that button.
442:55 - So you can actually optionally,
442:56 - we can make it as disabled button or not.
442:59 - Again, disabled will be based on
443:00 - if todo is completed or not.
443:01 - So todo.is, not todo, completed.
443:07 - There we go.
443:08 - Okay, that's my first button that I have.
443:11 - I do have another button, which is a delete button.
443:13 - So let's go ahead and have a button.
443:15 - And this one is delete,
443:16 - but just like always, we do have some icon for it.
443:20 - So I'll copy and paste this one.
443:21 - So yes, we have this icon.
443:24 - And again, apart from this,
443:25 - we'll be having a class name.
443:27 - In this class name, lots of classes.
443:29 - Yes, literally, lots of classes goes into this one.
443:33 - Doesn't really bother.
443:35 - The most important thing in here is
443:36 - what happens when somebody clicks on this button.
443:38 - So if somebody clicks on this button,
443:40 - then obviously we'll run on click.
443:42 - And on this, fire this callback.
443:45 - And just simply run the delete todo.
443:47 - And for this, we need to pass on ID.
443:49 - So we'll say todo.id.
443:52 - There we go.
443:53 - Okay, quite a lot of stuff,
443:56 - but I think it's all understandable.
443:57 - Probably it's going to take one more iteration
443:59 - to understand this.
444:00 - It looks a lot,
444:01 - but because we are doing some sneaky stuff,
444:04 - like removing the borders of input field and all not,
444:07 - if you don't want to do all of this,
444:08 - you can just always go with the classic simple,
444:10 - add todo is remove, delete, that's it.
444:12 - We don't want to,
444:13 - if somebody wants to edit it,
444:14 - there are lots of ways of editing that.
444:16 - Okay, now next thing is,
444:17 - let's go ahead and import all of this
444:19 - and export them via the index file.
444:21 - That's always a good idea.
444:22 - So we'll just go ahead and say,
444:24 - I want to import the todo form
444:26 - and I want to import this todo item
444:31 - and end of the day, we'll be exporting them.
444:33 - So export all of them.
444:34 - Remember, we are not exporting them as a default.
444:37 - So be careful of that.
444:39 - And todo item, there we go.
444:41 - Exported all of that.
444:42 - Now it's time that we go into app.js
444:45 - and actually work on with this one.
444:46 - So app.jsx.
444:49 - Now this is the part where we work on with this one.
444:52 - Okay, now as you can see,
444:54 - we need a little bit more of the CSS part and whatnot,
444:57 - but I'll walk you through directly that.
445:00 - All we have to do is,
445:01 - I'll be adding the CSS, we'll be giving you directly,
445:03 - but in this one,
445:04 - I can just go ahead and remove this H1 first
445:07 - and can import my form directly here.
445:09 - So I'll just go ahead and say todo form
445:11 - and that will do the job.
445:13 - It will not look the best of the one,
445:14 - which I'll give you that, but it will do the job.
445:17 - In the case where I want to loop through the values,
445:20 - then also it was super, super easy.
445:22 - I'll give you the copy paste version of it,
445:24 - but first let me walk you through
445:25 - with the functionality part.
445:27 - In here, when you want to loop through the values,
445:28 - you have to fire up your JavaScript, just like this.
445:32 - Now I can use the todos.
445:34 - Remember, this todos, yes,
445:35 - this is all the time getting updated
445:37 - in the context and everything
445:38 - from the local storage, everything.
445:39 - You can use it directly.
445:41 - So in the todos, just go ahead and first loop through it.
445:44 - So we'll just go ahead and say map.
445:47 - Once I'm looping through this,
445:48 - obviously I have access to this callback, just like this.
445:51 - I have access to each of the todo, just like this, todo.
445:55 - And in here, what I'll do is I'll directly fire up parenthesis
445:58 - so that I don't have to use the return keyword in here.
446:01 - And I can just go ahead and add a simple div,
446:03 - just like this.
446:04 - The reason for using the div is
446:06 - so that I can pass on my key.
446:08 - Keys are really important
446:09 - when you're iterating through the values.
446:11 - And I can say that todo.id is,
446:13 - I'm pretty sure that's a unique one, so I can use that.
446:16 - And in here, I can just go ahead and call my components.
446:19 - So that is my todo item.
446:21 - There we go.
446:22 - This requires just one thing to be passed on,
446:24 - which is a prop known as todo.
446:26 - And I can directly pass on this todo.
446:28 - Now this is all, this is all the functionality parts.
446:30 - So now I'll just go ahead
446:32 - and actually bring the nicer version of it,
446:35 - which includes the classes and whatnot.
446:36 - So I'll just go ahead and bring that in.
446:38 - So from my notes, but this is it.
446:41 - The functionality part is it.
446:42 - Rest of it is just the classes and all of that.
446:44 - So I'll paste this one.
446:46 - And if you remember, this is nothing.
446:47 - We have the todo provider exactly same.
446:49 - We're calling this todo form,
446:50 - but a little bit nicer in the div with some classes
446:53 - and some flex box going around.
446:55 - And this is exactly the same thing that we just discussed.
446:59 - The only thing which is different
447:00 - is the widthful and all of that.
447:02 - So as I save this,
447:03 - and hopefully things are working or probably not,
447:07 - I'll just kill it and start it again.
447:09 - Now, if I go back, there we go.
447:11 - We have this test and all of that.
447:13 - So probably it's working.
447:15 - Let's go back and see in the context first,
447:18 - in the context, todo context, and this is todo message.
447:22 - And this is, so what this is doing is,
447:26 - actually this is bringing all of this
447:28 - from the local store.
447:29 - So I'll just right click inspect
447:32 - and go to my application.
447:36 - And we need to go into this one
447:38 - and we'll just clear this one.
447:40 - Okay, now let's try to reload this.
447:42 - Now we have everything gone, okay.
447:45 - Let's go ahead and add this one as test and add this.
447:49 - So there we go.
447:49 - We see the test is there.
447:51 - Let's also see if it is able to grab this from
447:55 - or inject it inside my local storage application
447:59 - and local storage.
448:00 - There we go.
448:01 - We saw that test is here with the ID, nice, nice and easy.
448:05 - And apart from this, we are having the edit functionality.
448:07 - So the border comes around
448:09 - and I'm able to add the test one.
448:11 - Save functionality, working nicely.
448:13 - Can I remove this?
448:14 - Yes, this is also working.
448:16 - So let me just summarize this one more time
448:18 - because I think this can be too much
448:19 - of overwhelming situation for a lot of you.
448:21 - Let me go ahead and walk through with this one.
448:23 - Although I tried my best to explain you line by line
448:26 - and I'm pretty sure you'll leave a comment for that
448:28 - that, hey, we enjoyed this lecture.
448:31 - The first thing that we understood about this kind
448:33 - of application is that we need to attack the context first
448:36 - because that's where majority of the things goes.
448:38 - So in the context of to do, it was pretty simple.
448:40 - We have the create context and use context.
448:42 - Create context for creating the context.
448:44 - Use context is the hook for using that context.
448:48 - And use context doesn't work alone.
448:49 - It requires the context which you created by create context.
448:53 - So we use the create context to do context.
448:56 - If we added our data will go here,
448:58 - functionality will go here.
448:59 - We don't write to the functionality,
449:00 - but the boilerplate blueprint of the functionality.
449:03 - Then we simply use the use context hook
449:05 - and provide the to do context.
449:06 - Don't need to import anything
449:07 - since it's available directly.
449:09 - We created our own hook known as used to do
449:11 - to actually go ahead and do all of this.
449:13 - Pass on as a hook.
449:14 - Once that is all being done,
449:15 - and now there are two cases in front of me
449:17 - work either on the components
449:19 - or the functionality part first.
449:20 - I chose to work on the functionality first.
449:23 - I always go with that.
449:24 - So we went into app.jsx,
449:26 - wrapped everything into the to do provider.
449:30 - That's the easiest thing.
449:31 - And by the way, if you remember,
449:32 - we are having this to do provider also being exported.
449:34 - So we need this one.
449:35 - Otherwise we have to say to do context.provider,
449:37 - don't want to do that.
449:39 - So I went into app.jsx and work on with this,
449:42 - wrapped everything we did to do provider,
449:44 - either do it here or do it in the main.jsx,
449:48 - totally up to you.
449:49 - Wherever we are importing these values and things,
449:52 - we have to import these functionality as well.
449:53 - So we know that to dos don't need anything,
449:55 - but add to do, update to do, delete to do and toggle,
449:58 - we'd need to write the functionality somewhere.
450:00 - So we chose app.jsx for that one.
450:02 - Add to do, pretty simple.
450:04 - We just added to dos from the set to dos, very basic.
450:07 - Update is very basic.
450:09 - We discussed on that, delete and toggle as well.
450:12 - The important part was the use effect.
450:14 - We used to use effect in this one.
450:16 - This use effect will run as soon as the component will mount.
450:19 - Since there is no dependency array inside this one,
450:21 - this will never run again.
450:23 - If to dos has a dependency array,
450:25 - then it always run again
450:27 - if there's a change in that dependency array
450:30 - or any value inside the dependency array.
450:32 - So this one use effect,
450:33 - we want that I want to add or inject the to dos
450:36 - as soon as there's a change in this state,
450:39 - which is a to dos.
450:40 - So that's why use to use effect, common thing.
450:42 - You'll see this quite a lot.
450:44 - After that, we started to build our components.
450:46 - And the first we take down is a to do form, very easy.
450:49 - All we had to do is work on just one functionality,
450:52 - which is add to do, pretty simple.
450:53 - We brought it in from the context.
450:55 - And we simply say is,
450:56 - when the add method is being called,
450:58 - somebody clicks on that,
450:59 - just run this add it to do,
451:00 - which is context and pass on the data, that's it.
451:03 - Then we worked on the to do item,
451:05 - which is a singular item.
451:06 - We spend a lot of time in understanding
451:08 - the contextual part of it,
451:10 - the conditional rendering of the elements.
451:12 - This one was basic because we want to control that
451:14 - whether the to do is editable or not,
451:16 - what's the to do message
451:17 - and what happens with the functionality as well.
451:20 - So functionality we brought in from use to do.
451:22 - The rest of the things is just managing the visual aspect
451:24 - and the UI aspect of it.
451:26 - So we worked on the edit to do functionality
451:28 - and toggle complete, nothing much.
451:29 - You could have done the toggle complete
451:31 - inside there as well, but I chose to do it here.
451:33 - Again, a random choice.
451:35 - And in here we worked on simple things.
451:38 - For example, should everything be will be striked off
451:41 - or not based on conditional rendering of the CSS.
451:45 - Input box.
451:46 - So this input box is checked.
451:47 - Should it be checked or not?
451:49 - To do will tell me.
451:50 - I'll just ask to to do.
451:51 - To do dot completed, are you completed or not?
451:53 - Based on that, we'll get that.
451:55 - Then we have this nice thing,
451:57 - which is having a lot of conditional rendering.
451:59 - Majorly the outline around it.
452:01 - So if there is no outline,
452:02 - the input field looks like a text itself.
452:04 - So we actually use that.
452:06 - Value will get from the state.
452:07 - On change will be governed by the set to do message.
452:10 - And is it read only or not?
452:12 - That's awesome.
452:13 - After that, we have a couple of buttons.
452:14 - The button will be a save button
452:16 - or the edit button depends on is it to do editable or not.
452:20 - And then the delete button.
452:22 - So that is it.
452:22 - A lot of functionality.
452:23 - Don't worry about the CSS part of it.
452:25 - If yours doesn't look exactly mine,
452:27 - just look at the GitHub repository.
452:28 - I'll be pushing that.
452:29 - In fact, that would be a good thing to do.
452:31 - I'll just go ahead and add everything in here.
452:35 - And we'll say added another,
452:40 - add another app with context and local storage.
452:53 - Okay.
452:54 - And this is app time.
452:55 - So I'll just mention that app time.
452:57 - Oh, too much.
452:59 - I'll just remove this.
453:00 - Okay.
453:01 - So let's just go ahead and commit this
453:03 - so you can find everything on my GitHub repository.
453:06 - Okay.
453:07 - Pushed it.
453:07 - So there we go.
453:08 - So now I hope that you are pretty much more aware
453:11 - of the flow of the application
453:12 - as well as how the context part
453:14 - of the application works through that.
453:16 - I hope that has given you great, great insight
453:18 - of the React application,
453:19 - some inner working of the React,
453:21 - especially the use effect hook and whatnot.
453:23 - In the next video, from the next video itself,
453:25 - we'll be starting our mega project,
453:27 - which will give you a lot of ton of insight
453:29 - of how to build a full stack application.
453:31 - We'll be using obviously the app right for it.
453:33 - So let me walk you through about that in the next video.
453:40 - All right.
453:41 - Hey there, everyone.
453:42 - Hitesh here back again with another video
453:44 - and welcome to the continuation of our React series.
453:48 - So far, we have studied quite a lot about the React,
453:50 - quite an in-depth series about how we can build applications
453:54 - with the React, how the React internal works
453:56 - and pretty much a lot of things.
453:58 - Now from this video onwards,
453:59 - we are moving into a journey where we actually utilize
454:02 - all the things that we have grabbed so far
454:04 - and put this into a use of building a software,
454:07 - building or using the development skills.
454:10 - This is exactly what a lot of people miss
454:11 - that how to actually transform your learnings
454:14 - and knowledge into the development skills.
454:16 - And this is known as development.
454:18 - In this video, I'll walk you through
454:19 - what we are about to build
454:21 - and what all skills you are going to be learning
454:23 - throughout this one.
454:24 - By the way, we are building a full stack application
454:26 - using React and for the backend,
454:28 - we are using everybody's favorite and open source app, right?
454:32 - So I'll walk you through what the idea
454:33 - behind this application and I will be focusing more
454:37 - on the generalized knowledge.
454:38 - This means after watching this entire few videos
454:42 - and the entire project,
454:43 - you will be able to build any kind of social media app.
454:46 - You don't need to watch any other videos after this,
454:48 - you will have full knowledge.
454:51 - By the way, just imagine what is Facebook?
454:53 - Just some text and images, that's basically it.
454:56 - What is a Twitter?
454:57 - Just some text and images.
454:59 - So it doesn't really matter how the website looks like,
455:02 - end of the day, it's just a social media
455:04 - which is empowering you with some kind of text
455:07 - and some images.
455:08 - The same goes for the blog article.
455:10 - So if you know the ins and outs
455:12 - of how to build a blog application
455:14 - with some text and some images,
455:16 - you pretty much can build any kind of social media app
455:19 - as well.
455:20 - Definitely on top of that,
455:21 - there could be so much more that you can do,
455:23 - but at least a basic building block could be ready.
455:25 - And that's exactly what we'll be learning in this video.
455:28 - So let me first show you what we are going to do.
455:30 - So let me share my screen.
455:31 - So this is where we'll be building.
455:33 - By the way, in case you haven't noticed,
455:35 - we are already on the 10th app.
455:37 - So we have done with that.
455:38 - This one is going to be technically our 11th app,
455:41 - but I want to show you something more.
455:43 - First thing, although you have completed the series,
455:45 - I expect that you have completed the series
455:47 - in all the playlist manner that I have uploaded.
455:50 - So quite a lot of long playlist
455:51 - that we have gone through with the long videos,
455:53 - 26 minutes to 40 minutes,
455:55 - there's a lot of range in that.
455:58 - Only recommendation is,
455:59 - if you're watching it in the continuation,
456:01 - I'm not sure that whether you have seen this video
456:03 - at the very end or at the very last,
456:05 - wherever you're watching it,
456:07 - after finishing up your context API,
456:09 - go and watch my Redux toolkit in one hour.
456:11 - This is a crash course on Redux
456:13 - where I've talked quite an in depth
456:15 - about how Redux toolkit works
456:16 - and the setup of it,
456:17 - different ways of handling the situation.
456:20 - This is going to be a little bit requirements.
456:22 - So in case you haven't yet watched it,
456:23 - go ahead, watch it in the playlist.
456:25 - If you're watching this entire video in just one go,
456:27 - go ahead and watch this one as well.
456:29 - And then you can move on to this video,
456:31 - which is obviously the next in the playlist.
456:33 - So what we'll be building up?
456:35 - We'll be building up this small application.
456:37 - And again, our focus is not on the UI part,
456:40 - but rather more on the functionality part.
456:42 - In your UI, there might be two cards in one row.
456:44 - In our UI, it might be four cards.
456:47 - Doesn't really matter.
456:47 - This is exactly the functionality we are looking up for.
456:50 - This is our homepage where there will be a display
456:52 - of the card which displays the title
456:54 - as well as a preview of the images,
456:55 - not the actual images.
456:57 - This is something which is given to you by App Right
456:59 - as kind of an easier way to handle images
457:02 - so that not the entire image is being transferred to you,
457:05 - but a preview version of it,
457:06 - which is a little bit of a lesser quality.
457:08 - Once you click on this, any of this AI or anything,
457:11 - wherever you want to visit this,
457:13 - this gives you a full blown image,
457:14 - which is larger.
457:15 - And that's why the bigger one,
457:16 - because I wanted to show this exaggerately
457:19 - that this is a larger one.
457:20 - And you can see this is where we have our text data.
457:24 - Our text data is very, very small.
457:25 - I just wanted to show you that you can actually store
457:28 - the way how this is being bowled out.
457:29 - So yes, this is also done.
457:31 - Not only that, this project has some of the issues
457:34 - which are intentionally left in this one
457:35 - so that you can actually work on them and work on that.
457:38 - So that you saw that briefly login to read post.
457:41 - So there's an intentional error being shown there.
457:44 - And by the way, I will give you the entire list
457:46 - of where the bugs are and how you can fix them.
457:49 - Entire walkthrough will be given to you.
457:50 - But these are the things that you have to walk through
457:52 - and you have to learn through.
457:53 - I've seen that when I recorded this entire series
457:56 - in different language and people actually appreciated
457:58 - that, okay, now we have some work to do.
458:00 - And they got excited.
458:02 - And if I click on this latest one,
458:03 - you can see this is uploaded by me.
458:05 - So obviously I get the edit and delete control over that,
458:07 - not for the other people.
458:09 - So that's a great idea of how things are done.
458:11 - Here we can see we are storing more information
458:13 - like there is a color control, there's all of that.
458:15 - So we have a full fledged editor
458:17 - that we are going to be using along with the React.
458:19 - Of course, we have the logout and sign up functionality
458:22 - and sign in functionality powered by app, right?
458:24 - I'll walk you through with that as well.
458:26 - When I click on the add post,
458:27 - we can see that we have this add post that we have.
458:30 - We have the full control of WYSIWYG editor,
458:31 - what you see, what you get kind of editor.
458:34 - We can store that.
458:35 - We have a slug which works automatically.
458:37 - We can have a nice slug
458:39 - which automatically converts whatever the URL
458:42 - or our title is into a URL format with the dashes.
458:46 - So there is a little bit of logic writing
458:48 - that you will be learning in this one.
458:49 - So quite a lot of intriguing details are there.
458:53 - For this entire one, we are using app right end to end.
458:55 - This entire things are stored in the database like this.
458:58 - I'll walk you through how the database are being created,
459:00 - how you can use them, authentication features.
459:03 - End to end, the full backend is powered by the app right.
459:06 - It's free and we will be using that.
459:08 - So if I click on this,
459:10 - this is where we have entire authentication details.
459:13 - We are having all these four, five random names
459:15 - of the users, but if we wish,
459:17 - we can go ahead and use other services for this.
459:19 - For example, in the settings, we have a lot more options.
459:22 - Just have to click and enable small pieces of code
459:25 - that I have to inject and that's it.
459:26 - It supports so many crazy how much it supports.
459:30 - And we will be using authentication.
459:31 - We'll be using database services.
459:33 - We'll be using the storage services as well.
459:36 - So this will give you enough of idea
459:37 - that how to use storage, how to use authentication
459:40 - and how to use databases.
459:42 - Rest of them, I don't think so.
459:43 - There is too much of tutorial required.
459:44 - Once you know how to do A, B and C in one format,
459:48 - you can figure out how to do the D one.
459:50 - So that's the goal of this series.
459:52 - So again, I'm super, super excited
459:54 - that we are going to get started
459:55 - and we are going to build this one.
459:57 - Again, my recommendation is we will be focusing more
460:00 - on the functionality part, the UI part.
460:03 - It's purely, purely based on the tailwind.
460:05 - I highly recommend you to give it a different look
460:08 - that what I've given you.
460:09 - A lot of other students have done that
460:10 - and they have found that it's a great result.
460:13 - They have learned so much more just by modifying the UI.
460:16 - It gives them so much of confidence.
460:18 - Of course, I'll be giving you assignments as well,
460:20 - but I'm super excited to get started with this one.
460:23 - So in the next video,
460:23 - we'll set up a simple boilerplate react template.
460:27 - We'll connect our app right with that.
460:29 - We'll start everything from the scratch and the fresh.
460:32 - And I'm pretty excited
460:33 - that you are also following this up so far
460:35 - and I'm pretty sure you'll be following
460:36 - in the next one as well.
460:38 - In case you are enjoying these series,
460:39 - please share them on LinkedIn
460:40 - and also do hit me in the comment section as well.
460:43 - Just a model support a heart would be really nice.
460:45 - So that's it for this video.
460:47 - Let's catch up in the next one.
460:51 - Hey there, everyone.
460:52 - They share back again with another video
460:54 - and welcome to the continuation of our react series.
460:58 - So in this video, we'll just create a fresh app.
461:00 - We'll peek into a little bit
461:02 - of the documentation of app, right?
461:04 - And it's actually surprisingly good
461:06 - that their documentation was already good,
461:08 - but they have still rewritten the entire one
461:11 - and I'm loving the new one.
461:12 - So we'll go through with that
461:14 - and the entire documentation study that we are going to do
461:16 - and with the code that we'll be writing
461:18 - is going to be 100% reusable.
461:21 - So whether you are building any app in Flutter
461:23 - or maybe in React Native
461:25 - or anything else that you're going through,
461:26 - the concepts will remain same.
461:28 - If the programming language changes,
461:29 - then obviously you can find the things equivalent
461:31 - in your language as well.
461:33 - But in most of the case,
461:34 - anything related to JavaScript, TypeScript,
461:36 - they are going to be very, very same.
461:38 - So let's go with that and let me share the screen
461:41 - and walk you through with that.
461:43 - So first, let's go ahead and create a new app.
461:45 - So obviously we are using Vite.
461:47 - So NPM create Vite at latest.
461:49 - That is what we have been using
461:51 - and that's exactly what you're using.
461:53 - By the way, with this one,
461:54 - I'm targeting the people who probably
461:56 - might have not watched my previous videos.
461:59 - That's also fine.
462:00 - If you're just starting from here, that's also fine.
462:02 - There will be a few concepts which I'll point towards,
462:04 - say this was covered in previous video or something,
462:06 - you can watch it at that time.
462:07 - Otherwise it would be a fantastic experience
462:09 - in working together and building a full fledged application,
462:12 - a full stack application.
462:14 - So let's call this one as 11th app.
462:17 - That's basically our 11th app,
462:18 - but hey, let's go ahead and start my terminal here.
462:23 - We have a lot of one here.
462:24 - We'll be just going with the create Vite latest.
462:27 - I think that's good one.
462:29 - And let's call this one as 11th blog app.
462:33 - Blog app, yeah, fine, good name.
462:37 - We'll be using of course React and yes, no,
462:40 - we are not going to be TypeScript in this one.
462:42 - Yes, I know, I do have a series
462:44 - on TypeScript on this channel.
462:45 - It got really popular on the free code camp as well,
462:47 - but we'll be going with JavaScript in this one.
462:50 - And what I want to do is I just want to kill this terminal
462:53 - and I want to open this up,
462:54 - right click and open an integrated terminal.
462:56 - That way I don't have to do CD and all those stuff.
463:00 - And I'm into this, I can just do an LS
463:02 - and I can just say NPM install.
463:03 - This is going to obviously install everything for us.
463:07 - And we need Tailwind for this one as well.
463:10 - So let's go into Tailwind CSS,
463:14 - quickly go into the docs.
463:15 - That's how I always recommend everybody
463:17 - to just go look into the docs,
463:19 - figure out how things works.
463:20 - In this one, we have already done this kind of a thing.
463:22 - So we'll be going with this command now.
463:25 - So let's go ahead and copy this
463:26 - so that we have the Tailwind setup being done.
463:30 - So this is the part one of Tailwind setup.
463:32 - The part two is to have the configuration file
463:35 - and set up so that it knows where probably
463:38 - you will be writing your Tailwind files
463:40 - or Tailwind commands, utilities, wherever you see that.
463:44 - All right.
463:45 - So in this one, I have the Tailwind config.
463:47 - Go ahead and change the content part.
463:49 - Don't forget the trailing comma.
463:50 - This is pretty important.
463:51 - So go ahead and do that.
463:53 - Once you're done with this, then in the index.css,
463:55 - we need these directives being placed.
463:58 - Yes, with the add the rate, they are called as directives.
464:00 - So we'll go into the main file where all of my CSS is there.
464:04 - In my case, it's inside the source
464:06 - and I do have index.css.
464:08 - We'll replace everything
464:09 - and place our directives there, save that.
464:12 - And that's it.
464:13 - Now I'm technically allowed to run npm run dev
464:15 - to have my application up and running.
464:17 - We'll be doing that, but that's the basic configuration.
464:21 - The next step is to have app right being installed.
464:24 - Now installing app right is pretty straightforward.
464:26 - There is nothing too much to discuss on that.
464:28 - It just says npm install app right.
464:31 - And that's it.
464:32 - That is the easiest part.
464:34 - Now you might be wondering that we are into React,
464:36 - which is pure front end.
464:38 - So what does this app right is going to do?
464:40 - This app right package in itself will allow you to talk
464:43 - to the backend part, backend as a service, which is app right.
464:46 - This is a very common thing
464:47 - in case you have used any backend as a service
464:49 - in which we focus majorly on the front end part,
464:52 - not on the backend side.
464:54 - So backend part is handled by the app right.
464:56 - But in order to talk to that, we need the app right.
464:59 - So that's what we have.
465:00 - Let's quickly check our package.json
465:02 - so that we can verify things are doing good
465:05 - and we are okay with that.
465:07 - All right, so in the dependencies we have app right.
465:09 - That's exactly what we want.
465:11 - And in the dev dependencies we have tailwind and all.
465:13 - All of that, we are happy with that.
465:15 - So app right is the only thing that we require right now.
465:18 - Now we'll be needing a couple of things here.
465:20 - So inside the blog, I'll be just creating
465:22 - a couple of new files.
465:23 - Let me go ahead and first create that.
465:25 - First is going to be .env.
465:27 - That's my environment variable.
465:29 - I'll walk you through that,
465:30 - how you can deploy this application on WordCell
465:32 - or Netlify, whichever works for you.
465:35 - I'll show with the WordCell.
465:36 - So these environment variables are very important
465:39 - at that point of time.
465:40 - So that sensitive information or data is not exposed
465:43 - in the GitHub and all of that.
465:44 - I will also create another new file
465:46 - because I want to give all this data to you.
465:48 - So I'll be saying that .env
465:51 - and I'll be creating a .sample.
465:53 - So this is a sample file which is meant to be given to you
465:58 - so that you actually work with that.
466:00 - And what I'll do is I'll just actually go up into this one
466:05 - and this environment variable,
466:06 - I can just right click and add this to gitignore
466:09 - so that that file never goes out to any GitHub repository
466:13 - because this includes some of the sensitive data
466:15 - that I'm about to add in here, okay.
466:18 - What kind of sensitive data you will be requiring
466:20 - that will come from the AppRite itself.
466:23 - So go ahead, create an account on AppRite
466:25 - if you haven't yet, it's cloud.apprite.io,
466:28 - pretty straightforward, pretty basic.
466:30 - And if you just scroll at the bottom,
466:32 - you'll find the docs one here.
466:34 - By the way, you can just get through the docs
466:36 - simply by apprite.io slash docs, however you want.
466:39 - And let me walk you through how to study these docs,
466:41 - that's an important aspect.
466:42 - So on the left hand side,
466:43 - you'll see that what products they offer
466:45 - and they have authentication, database, functions
466:47 - and storage, these are four major services.
466:50 - There's a lot under these categories,
466:51 - but these are major four categories that they work on.
466:54 - In this project, we'll work on auth,
466:56 - we'll work on database and we'll work on storage
466:58 - so that at least three of them
467:00 - are completely understandable by you
467:02 - and you can explore further things more.
467:05 - In the database, I'm not just talking
467:07 - about touching the database,
467:08 - I'll also walk you through how you can make queries
467:10 - in the database so that whatever the application
467:11 - you are building, you have the knowledge
467:14 - so that you can explore things on your own.
467:16 - So we'll be going through with that.
467:17 - Now, if you go on any of these products,
467:20 - for example, if I go into the auth,
467:23 - now we can see that there are journeys
467:25 - and there are references.
467:26 - Now, journeys is something that what do you want
467:28 - to implement in your application
467:29 - and the APIs are what all the things I can do in that.
467:32 - For example, in the email and login,
467:35 - if I just click on this, it gives me the entire that,
467:37 - hey, what do you going to need?
467:39 - The entire project is itself there,
467:41 - so entire source code is there and you can just see that.
467:44 - So here we can see that what we get is a promise,
467:47 - but what we are using is an account
467:49 - which gets to us by this account from the app right,
467:51 - just like this.
467:53 - And further this, we can actually provide a user ID
467:56 - if we don't, app right will give us one
467:59 - and we can provide an email and password
468:01 - to create an account of the user.
468:03 - So this is all it requires.
468:05 - And further, if you want to do the login,
468:07 - the same kind of a guide is provided to you.
468:09 - But if you want to do more with this account API,
468:12 - you can just click on the account API
468:14 - and can see that I can get an account,
468:16 - I can create an account, update an email,
468:18 - I can create a JWT token, update a username,
468:21 - pretty much whatever I want to do,
468:22 - delete the sessions, list the sessions.
468:25 - There is an endpoint given to me
468:26 - so that I don't have to worry too much.
468:27 - For example, if I just want to see that
468:30 - how to delete sessions, all the sessions,
468:32 - I can click on this and this gives me the method that,
468:35 - okay, you can use simply deleteSessionsS with the end
468:39 - so that it deletes everything.
468:40 - And that's it, that is going to delete.
468:42 - So it saves me so much of the time
468:45 - and if I know how to navigate properly,
468:46 - it doesn't really matter if you're using a React Native,
468:49 - React, or you're using something else,
468:51 - it just is the same.
468:53 - So that's a brief overview of how to actually study
468:56 - the newer documentation and I find myself,
468:58 - I can find exactly what I need in a much quicker time
469:02 - with this pretty much fantastic documentation here.
469:05 - Okay, once now that we know that how the documentation
469:08 - and how we can traverse through them,
469:10 - I can go into organization, which it gives to everyone,
469:14 - the first time you create the account,
469:15 - this is what they call account as an organization.
469:18 - I am supposed to create a new project.
469:20 - So let's go ahead and create an empty project.
469:22 - I can import a project as well, but that's experimental.
469:25 - They are always very fast in doing the things.
469:27 - They always keep on doing some stuff.
469:29 - I'll create an empty project and let's call this one
469:31 - as YouTube blog, I think that's a pretty good name.
469:36 - It also gives you a project ID.
469:38 - We need this project ID, but I don't want to edit it,
469:40 - although you can, if you wish,
469:42 - you can add your own custom IDs.
469:44 - I don't want to do that.
469:45 - I'll just simply click on create,
469:47 - and this is going to create a project for me.
469:51 - And in a few seconds, hopefully my internet is,
469:54 - oh, some of the things are actually getting uploaded.
469:59 - So I'll just copy that, stop that for a minute.
470:02 - And this is what I need.
470:03 - So I can just click on the copy
470:05 - and this is something that I'll be needing.
470:07 - Okay, where do I need this?
470:09 - All of these things, go ahead and follow along with me.
470:11 - These are some required stuff from your site.
470:13 - So, okay, Postman, no, I don't want to do any of that.
470:19 - Okay, in the environment variable,
470:21 - we need some variables to be put on.
470:23 - So I'll be just adding a React underscore app,
470:26 - and then I'll say underscore app right,
470:30 - if I wrote that correctly, app right underscore URL.
470:33 - And that's going to be my first variable name.
470:36 - And similarly, we will be having a couple of others,
470:38 - like app right project ID as well,
470:41 - project underscore ID, and this is my project ID.
470:45 - So what we get as a project,
470:47 - that's exactly my project ID that I have.
470:50 - Now, once I have the project ID,
470:51 - the next thing is we have not worked on one thing,
470:54 - which is the project URL.
470:57 - Now the project URL is actually constant
470:59 - for all the app right,
471:01 - because the app right is hosted up here in the cloud.
471:03 - By the way, in case you want to do
471:05 - and find it out properly, then click on the web.
471:08 - This is where you add your project.
471:10 - You can add multiple of your project.
471:11 - So my project name is, we called it what?
471:16 - We called it as, let me just go into package.json.
471:20 - We called it as 11 blog app.
471:22 - Let's use the same, otherwise it's not really compulsory.
471:25 - This is really important.
471:27 - Right now we want to use a local host here,
471:30 - but as you upload this exact project on vorsl,
471:33 - Netlify, wherever, I use something similar to this.
471:36 - So any subdomain which is coming up from vorsl,
471:39 - any subdomain that's come from Netlify,
471:41 - if you're not going to put this properly,
471:43 - then there are 100% chances that you will find yourself
471:46 - messing up with the course error.
471:48 - So this is something which resolves it 100% necessary.
471:52 - Please pay special attention to this one.
471:55 - For the local host, it doesn't require any port or something.
471:57 - You just need to get local host.
471:58 - Notice here, it actually gives you a suggestion.
472:01 - I hope it's visible in the screen recording.
472:03 - Yeah, it is, it is.
472:04 - So just add a local host.
472:06 - So just go ahead and add a local host.
472:07 - That's all that is required.
472:09 - Once you are done with this,
472:10 - now any request coming from local host
472:12 - will be accepted in the server and it takes time.
472:15 - Not too much, but I have noticed it takes
472:17 - two to three minutes to propagate these changes.
472:19 - Sometimes when I'm back to back recording,
472:21 - it sometimes takes time.
472:22 - So two to three minutes is usually the things
472:24 - to propagate these changes.
472:26 - Let's click on the next.
472:27 - Now, npm install app, right?
472:28 - We have already done that.
472:30 - This importing of the client in the web SDKs and stuff,
472:33 - we will do that, but not right now.
472:35 - Let's go ahead and click on the next.
472:38 - This is the endpoints and set project.
472:40 - So notice here, project is 736.
472:42 - This is exactly the same ID that we have got in this one.
472:46 - So 763, that's the same ID we have already got.
472:50 - And there is an endpoint being mentioned here as well.
472:53 - That is exactly your app right URL.
472:54 - You might want to copy this.
472:56 - And by the way, this is exactly same for all the projects.
472:58 - Yes, I worked with a lot of projects of app right.
473:01 - And this is exactly what you needed here.
473:03 - Okay, once we have this,
473:05 - now we can click on the next.
473:06 - And it says, hey, go to your dashboard and stuff.
473:08 - Yes, I'll go ahead and do that.
473:10 - This is one of the most important thing.
473:12 - Please do not skip that.
473:13 - Otherwise I've seen people struggling into the course error.
473:16 - So these are the two things that you need
473:18 - and your project.
473:19 - Now you have a unique ID, you can talk to that.
473:22 - And that's where the app right SDK comes into the picture.
473:25 - But there are a couple of more things
473:26 - that we are going to require.
473:28 - So project ID is great.
473:29 - I'll just remove this one.
473:31 - But apart from the project ID,
473:32 - we need the database ID as well.
473:36 - Database underscore ID,
473:37 - we'll work with the database as well.
473:39 - Once you're into the database,
473:41 - that's a generalized database.
473:42 - In each database, you'll find a lot of collections as well.
473:46 - So I'll just go ahead and have a collection ID as well.
473:50 - And by the way, from where to get,
473:51 - I'll walk you through with that as well, don't worry.
473:54 - And we need the bucket ID as well.
473:55 - So I'll just go ahead and add a bucket.
473:57 - What do you mean by bucket?
473:59 - Bucket simply means the storage that we'll be using.
474:03 - So let me walk you through how we can grab that.
474:06 - So I'll simply go ahead and have this one.
474:09 - So what I'll do is simply go into the database.
474:14 - So our app is completely up here.
474:17 - Now here we have the databases.
474:19 - Just go ahead and create a new database
474:22 - and enter the database name.
474:24 - Let's call this one as YouTube,
474:26 - whatever you want to call,
474:27 - you can go ahead and call that.
474:29 - I won't be giving any ID.
474:30 - It will be given to me automatically.
474:32 - So I'll just go ahead and click on create.
474:35 - So that's what this is.
474:36 - So this is your database ID.
474:38 - So go ahead and copy that.
474:39 - That's exactly what we need.
474:40 - So this is our database ID, that's it.
474:43 - And once we are into the database ID,
474:45 - then obviously we need to create a collection.
474:47 - So that's the next step.
474:48 - I'll create a collection.
474:49 - Let's call this one as blogs, articles, whatever you like.
474:55 - I'll just go ahead and click on create.
474:57 - And this is my collection ID.
474:59 - So blogs, notice here how easy it is
475:01 - to just go ahead and go with the flow
475:03 - and copy the collection ID.
475:04 - So that's all what we need.
475:06 - Now in here, we are going to need
475:08 - to add some of the attributes.
475:09 - What kind of data is going to come up in the collection?
475:12 - Since we are here already,
475:13 - let's go ahead and add those attributes.
475:16 - So let's go ahead and click on attributes
475:18 - and click on create attributes.
475:20 - And you can create attributes of type string, integer,
475:22 - flow, Boolean, there's a lot of types.
475:25 - I'll be most of the time will be using the strings.
475:27 - Once I click on the string,
475:29 - what is the key that you want to use?
475:30 - I want to go with title.
475:33 - If I can write that properly, there we go.
475:36 - What is the size?
475:37 - Totally up to you.
475:38 - I'll go with 255.
475:39 - Go ahead and use whatever the type
475:41 - that you want to go with that.
475:42 - So I'll just go ahead and add 255.
475:45 - So use that or use the scroll ones.
475:47 - You can add a default string value if you wish.
475:49 - I'll be requiring this.
475:50 - So I'll just say, hey, this is a required string.
475:53 - I'll just go ahead and click on create, that's it.
475:57 - So you need to provide a structure of your data
475:58 - that how this data is going to come up in the collection
476:01 - so that anything which is required can be treated like that.
476:05 - Let's go ahead and add a few more
476:07 - which are going to be useful for us.
476:08 - So we'll be saying content.
476:11 - This is how my content will come up.
476:14 - I'll go with the string again, 255.
476:16 - If you wish more, then obviously add more numbers here.
476:19 - These are character sizes.
476:20 - So go ahead and use more.
476:21 - I'll say the content is also required for me.
476:24 - I'll just go ahead and click on create for this one.
476:28 - All right, so we have content title.
476:30 - Let's go ahead and create one more.
476:32 - And that is going to be my featured image.
476:35 - Featured image.
476:36 - Now this featured image is going to be a string size.
476:39 - I think 255 is good enough.
476:41 - I'm not storing the actual image into this one.
476:43 - Rather I'm keeping the long string URL
476:46 - that I'll be uploading in the date
476:47 - in the storage service of app, right?
476:50 - Once I store an image in that,
476:51 - it returns me back as a promise of a long string URL.
476:55 - That is what I'll be keeping here.
476:57 - And I'll say this is also required.
476:59 - So give me this image.
477:00 - This is pretty important for our application.
477:02 - Let's go ahead and create that.
477:03 - Now I hope it gives you an idea
477:05 - that how these things can be done.
477:07 - You can work with that.
477:09 - So I'll just go ahead and create more attributes.
477:13 - One more string.
477:14 - So I'll just say, hey, I need one more, which is status.
477:17 - Now it's up to you.
477:18 - You can keep this as a string
477:20 - or you can keep this as a Boolean value.
477:21 - I'll not keep this one as required
477:22 - because that's the status of my blog,
477:24 - whether it is active or inactive.
477:26 - I can just do that on the go.
477:27 - But if you wish to have it as an enum Boolean,
477:31 - it's totally up to you.
477:32 - I'll have one more, which I'll talk in a minute,
477:35 - but this one is actually user ID.
477:37 - So I'll be adding a couple of, not couple,
477:40 - just one user ID for each of the blog that we have.
477:42 - So this is exactly for that.
477:44 - 255 is good enough that we saw
477:46 - while building the demo of this application.
477:49 - But this is required field
477:50 - when we create a collection of this one.
477:52 - Let's go ahead and create this one.
477:54 - Okay, so there we go.
477:56 - We have now the basics being done.
477:59 - Pretty good.
478:00 - Now what we'll do is we will learn
478:04 - how we can make some queries with the databases as well.
478:07 - In order to make some queries,
478:08 - we need to have some queries
478:10 - other than these basic fields like title or something.
478:13 - What you'll study is when you have an index
478:16 - is being placed on any collection,
478:18 - it's much more optimized for the searching purpose.
478:20 - I'll probably talk about more
478:22 - of the database optimization stuff
478:24 - probably in some other video.
478:25 - Right now, let's go ahead and learn
478:26 - how we can create an index.
478:28 - So all you have to do is create an index,
478:30 - is provide a key for that one.
478:31 - So I'll just go ahead and say that,
478:33 - hey, the key we are going to call this one as status,
478:35 - that's my key.
478:37 - The key type is you can have multiple keys.
478:39 - I'll just go with the keys.
478:41 - What is the data attribute
478:42 - which will be responsible for this one?
478:44 - I'll just go ahead and use the status for this one.
478:46 - And that's it.
478:47 - I'll just create this.
478:48 - That is how simple it is to have a key being assigned.
478:51 - So there we go.
478:52 - Now we'll be able to make queries.
478:54 - By the way, we can make queries
478:55 - just based on attributes as well,
478:57 - but it gives us a little bit more advantage.
478:59 - We'll study about them and I'll walk you through,
479:01 - give you some resources more on that.
479:03 - So there we go.
479:04 - We have now all the values being added up here.
479:06 - Since we were already here, we set this up.
479:09 - Now, coming more onto this one.
479:11 - So we have the auth service,
479:12 - we have the database service, we studied about them.
479:14 - We have one more thing, which is the bucket ID.
479:16 - Now, in the documents,
479:20 - if we'll just come up onto the documents
479:22 - and we were in the attributes section,
479:24 - go into the settings section.
479:26 - This is where you can see that who can actually have
479:28 - the permission to add these documents.
479:30 - This is the most important thing.
479:32 - Not if anybody can come up and write
479:34 - into your documentation,
479:36 - you need to give a role to that,
479:37 - that who is allowed to that.
479:38 - Anyone is allowed, all the guests are allowed,
479:40 - all the users are allowed,
479:42 - any guest, anybody who will like to that.
479:45 - I'll say that any user is allowed.
479:47 - Any user is somebody who is already using my application,
479:51 - already logged in or something.
479:52 - So all the users are allowed of this application.
479:55 - So it will automatically wire these things up
479:57 - with your links.
479:58 - I'll say that all of my users have the ability
480:00 - to create, read, update, and delete my application.
480:04 - Whatever the role you want to give,
480:05 - you can have the role-based access
480:07 - within this database as a service.
480:10 - I'll just go ahead and update this.
480:12 - So there we go, our permissions are updated.
480:14 - This is the most crucial one.
480:15 - I've seen people struggling with this quite a lot.
480:18 - So make sure you are worried about your settings
480:20 - and who can access the application.
480:22 - Now we'll not talk about the functions in this video,
480:24 - probably some other video.
480:25 - Let's go into the storage.
480:27 - So this is where you set up your buckets
480:29 - and everybody calls this storage as buckets.
480:31 - Let's go ahead and click on the create button.
480:34 - And what do you want to call this bucket?
480:36 - I'll call this one as images.
480:38 - Doesn't really matter.
480:39 - We never actually,
480:41 - we never reach it out to using the name.
480:43 - We always reach it out using the ID.
480:45 - So that's what we need.
480:46 - So let's go ahead and create this.
480:48 - And we'll see the bucket ID,
480:49 - go ahead and copy this and that's what.
480:51 - So there we go.
480:52 - Our setting is all done.
480:54 - Now I want to copy this
480:55 - and I want to give this you into environment variable as well.
480:59 - Obviously these things will be changed
481:01 - by the time you'll be watching the videos.
481:02 - So I'll be obviously rewriting them.
481:04 - It's important for me to rewrite.
481:06 - I'll be giving you all of that,
481:07 - but you know what values and what variables to look up for.
481:11 - So that's the step one of how to grab
481:13 - all the environment variables
481:14 - and what the settings we need from this one.
481:17 - Now let's go ahead and set up
481:19 - a little bit of our application as well
481:21 - and show you some of the best practices
481:22 - that probably will help you to optimize these applications.
481:26 - So first thing that we're going to do is inside the source,
481:29 - I'll create a new folder
481:30 - and we're going to call this one as conf.
481:34 - This is for configuration
481:35 - and we'll be creating one more file into this one
481:37 - known as conf.js.
481:41 - Conf.js.
481:42 - Now what we are going to do in this configuration,
481:45 - what we're going to do majorly
481:46 - and you'll see this as a common production grade setting
481:50 - and practices being used
481:52 - is you simply go ahead and create a conf
481:56 - or conf just like this.
481:58 - And this is usually an object
481:59 - and you simply go ahead and export that.
482:03 - Export default conf.
482:04 - Now why we are doing this?
482:06 - This is being done because sometimes what you'll notice
482:08 - is accessing the environment variable
482:10 - could actually potentially throw up an error
482:13 - or sometimes there is no guarantee
482:14 - that what data type is getting returned.
482:16 - This is not the case when obviously
482:18 - are using TypeScript or something,
482:20 - but this is a common practice being used.
482:21 - For example, I can just go ahead and say that,
482:23 - hey, I'll export an app write URL just like this
482:28 - and the value of this will be wrapped up in the string
482:31 - so that I'm 100% sure the value that's coming up
482:33 - is actually the string.
482:35 - And I'll just go ahead and say,
482:36 - I'm accessing that by process.env
482:39 - that's by default in the React.
482:40 - And then I'll just name this one as whatever I use there.
482:43 - So in the environment variable,
482:45 - if I go ahead and say app write URL,
482:47 - copy this and I go ahead and paste this up here.
482:51 - So a common practice that you'll see quite a lot
482:53 - and similarly, we have the project IDs and whatnot.
482:55 - So let's go ahead and finish this one up.
482:58 - App write project ID just like this
483:04 - and again, same string and yes, this one takes time.
483:07 - Process.env.
483:09 - And we need to grab the project ID.
483:12 - So copy that, paste that.
483:15 - That's the project ID.
483:16 - We need the database ID now.
483:20 - App write database ID and our gain string.
483:27 - This is just to make sure that we don't fall
483:30 - into the case or the data type issues.
483:34 - Again, nothing much.
483:35 - Process.env.
483:39 - And we need to grab the database ID.
483:44 - This simple export will help you
483:45 - to save so much of the problem.
483:47 - Trust me, I've been into that phase.
483:50 - App write collection ID
483:54 - and again, that's going to be a string
483:56 - and again, process.env.
483:59 - This looks so much work right now
484:02 - but it saves so much of the troubles.
484:04 - Good practice again.
484:05 - We have the collection ID, one more, bucket ID, almost done.
484:10 - App write and bucket ID.
484:16 - There we go.
484:17 - Again, last one string and we'll be saying
484:22 - process.env.
484:24 - And last one, bucket ID.
484:29 - All right, so there we go.
484:30 - So now that we are exporting this conf,
484:32 - now we can import this at any place
484:34 - and wherever we import this,
484:36 - we have conf.app write URL, app write project ID
484:39 - in case you wish you can directly go ahead and import this.
484:42 - But the idea is that if we face any error
484:44 - or the environment variables are not being able to load,
484:47 - we see all of that at one place.
484:48 - So this makes life a little bit easier.
484:50 - It was not compulsory to do
484:51 - but in the good major scale projects
484:54 - and high scale, high scale companies,
484:56 - you'll find that this is a common practice.
484:58 - So just wanted to introduce you that,
484:59 - that yes, things like that happens
485:01 - and things that like works.
485:03 - All right, so this is our basics,
485:04 - the setups and everything are done.
485:06 - Now let's close all of this.
485:07 - You have the idea how this is being done.
485:09 - Now let's set up the things for the next video
485:12 - that we are about to work.
485:14 - So for this one, we'll create a new folder inside the source
485:17 - and this is the most important thing in here.
485:20 - Let's go ahead and name this one as app write.
485:24 - And inside the app write, we'll start with just one file
485:27 - and then eventually you'll see that why the other file
485:29 - or how the other file will work.
485:30 - We're going to call this one as auth.js
485:33 - and I'll walk you through what is our plan
485:35 - with this auth.js.
485:37 - So right now we have just got the idea
485:39 - that how things are going to work.
485:40 - We have studied the app write a little bit.
485:42 - I highly recommend you to go ahead and explore
485:44 - a little bit more of the documentation of app write.
485:47 - The idea behind that is I want to create these services.
485:51 - Why services?
485:52 - What's the service as a page?
485:54 - Whenever you work with these kinds of applications,
485:56 - especially backend as a service,
485:58 - you want to create a service file
486:00 - which actually kind of encapsulates all the hard details
486:04 - like how the registration work.
486:06 - Somebody who's using our application
486:08 - should not worry about that.
486:09 - He should see this as just a method
486:10 - that I provide you an email and password
486:12 - or probably a photo and you register me as a user.
486:16 - What you do in the internal detail
486:17 - should be hidden from me, should be abstracted for me.
486:21 - And another advantage of doing this same approach
486:24 - is maybe you are working with React Native
486:26 - or maybe you're working some other application as well.
486:29 - You can reuse this exact same code.
486:32 - Yes, literally you can copy and paste this exact code
486:35 - and it makes it so much highly reusable of a code.
486:38 - So that's a good practice
486:39 - that we are learning how to write the reusable code.
486:41 - So that's one of the advantage we are going to learn.
486:43 - And once you see and understand
486:45 - that how we can use authentication service
486:47 - and the database service as well as the storage service,
486:50 - that's it, you are mastered about the three services
486:52 - in app write and you can explore things on the go.
486:55 - We'll be learning everything from the documentation itself
486:57 - so that it gives you more confidence
486:59 - that yes, you can do the things on your own as well.
487:01 - All right, so that's it all.
487:03 - We'll be doing keeping it short.
487:04 - And in the next video, I'll be changing some of my IDs
487:07 - because I've exposed this to all of you.
487:09 - So I'll be changing them
487:10 - and then we'll be working on the next file together.
487:13 - All right, so that's it for this video.
487:15 - Let's catch up into the next one.
487:19 - Hey there everyone, Hitesh here,
487:20 - back again with another video
487:22 - and let's continue our journey with the React.
487:24 - Just to give you a brief context,
487:26 - in the last video we saw that
487:27 - how we can build a full stack application
487:29 - using React and app write.
487:31 - I walked you through with the setup of app write
487:33 - and integrate it with the React.
487:35 - Just a quick sidebar or as an interesting note,
487:39 - make sure that you're in your app write app,
487:42 - your app is properly configured,
487:43 - you have added the web app
487:44 - and there is a local host string being added.
487:47 - If I'm not going to add this,
487:48 - this might lead up into a lot of course error
487:51 - which are nasty in itself,
487:53 - but the easy fix is watch out
487:55 - if you have added the web app inside the app write.
487:58 - That's it.
487:59 - In this video, I will walk you through everything
488:01 - that you need to know about
488:02 - how to read the app write documentation
488:04 - and integrate the auth section of it
488:06 - and taking one section at a time
488:08 - and we'll walk you through
488:09 - how you can make your code robust
488:11 - as well as highly reusable,
488:13 - whether you're using app write in Next.js,
488:15 - React, React Native, Flutter, whatever you're using,
488:18 - you will be creating exactly same file.
488:20 - In fact, you can actually copy paste
488:22 - this exact same file in all of your project.
488:24 - And not only that, I'll walk you through
488:27 - what is the best way to read the documentation
488:29 - and all that you need.
488:30 - Quite interesting, isn't it?
488:32 - So this is all that you need to know
488:33 - about handling the auth in the app write.
488:35 - Let's go ahead and get started.
488:37 - Let me share my screen first
488:38 - and then we'll walk you through.
488:40 - So this is our app write documentation
488:42 - and this is our React app
488:44 - that we have been going through for a while.
488:46 - And in this, I showed you
488:48 - that we have installed the app write.
488:49 - So if I just open up my package.json,
488:52 - we can see in the dependency we have app write.
488:54 - Pretty cool so far.
488:56 - Now, after that, with the basic configuration
488:58 - and having all of our environment variables,
489:00 - which we discussed in the last video,
489:02 - I asked you that create an app write folder
489:04 - and create an auth.js file into this one.
489:07 - In this video, I'll walk you through that
489:08 - how we are going to use this file,
489:10 - but first let's read the documentation.
489:12 - So when you go to the appwrite.io slash docs,
489:16 - this is where you see all the docs.
489:17 - And the organization of the doc, the hierarchy of it,
489:21 - the structure is pretty nice
489:22 - to go ahead and work on with this one.
489:25 - So in this video, I'll walk you through with this
489:26 - that how you can actually use this one.
489:28 - So just give me a second, I'll arrange these things.
489:32 - Some of my elements are moving on the screens
489:35 - just like that, okay.
489:37 - So as you can see, the products that they're offering
489:39 - is auth, database, function and storage.
489:42 - In this video, I'll cover the auth.
489:44 - In the next video, I'll cover the database
489:46 - as well as the storage part of it.
489:48 - So that's pretty nice.
489:50 - Let's go into the auth section of it.
489:52 - Inside this auth section, you'll see that
489:55 - on the left-hand side, we have some of the concepts,
489:57 - the journey and the references.
489:59 - Most probably the way how you're going to handle
490:01 - is first a look at the journey.
490:03 - For example, in this one, we want to see how we can
490:05 - add a user based on email and password.
490:07 - Maybe you want to go with auth logins or magic URL,
490:10 - the same strategies are followed there as well.
490:13 - I click on this, and this is the first step
490:15 - that how I can sign up a user.
490:17 - Similarly, I can just read the docs for login
490:19 - and something more.
490:21 - But what if I need a little bit more?
490:23 - So here, first of all, just go ahead and read one thing,
490:26 - which is if you go onto this auth section,
490:28 - if you go onto the auth homepage,
490:30 - there is nothing too much to explore into this one.
490:33 - Just go onto this one, this is my journey.
490:35 - And after this journey, let me just move this
490:37 - a little bit here so that you can see it all.
490:40 - Now, what we're going to do majorly is this account API.
490:44 - User API is, you have a user and you want to modify
490:48 - some things about user, maybe it's name,
490:49 - email, and it's record, but this is the account API.
490:52 - There is a difference between them.
490:53 - So if I click on the account API,
490:55 - you'll see there are two dots here.
490:57 - Just go ahead and click on this.
490:58 - And this is where you see all the methods,
491:00 - how to create an account, how to update an email.
491:03 - So all these things are mentioned here.
491:04 - For example, if I want to delete a sessions
491:07 - or list all the sessions, I can just click on this.
491:10 - And this gives me the source code.
491:12 - This is a little bit shrinked up.
491:14 - So this gives me the entire source code
491:16 - that hey, you have to use a method
491:18 - which is known as a list sessions
491:20 - and I'll give you a response.
491:21 - And in the response, I'll give you a promise
491:23 - and you can extract data from this promise
491:25 - and you'll get all the sessions.
491:27 - Exactly like that, if I want to work on the delete session,
491:30 - I can just use the method which is delete sessions.
491:33 - Similarly, if I want to create an email verification
491:36 - or I want to have something else,
491:39 - whatever, I want to get the account preferences
491:42 - or I want to update the name,
491:44 - create a JWT token, whatever I wish,
491:46 - I can go ahead and do that.
491:48 - Apart from this, I would like to bring you back
491:51 - on to the account, not here, into the auth section.
491:55 - So in the auth section, the very first thing
491:57 - if I go into the journey of email and password login,
492:01 - notice here this source code, just walk through with this.
492:04 - Every single time, I have to import client, account and ID.
492:07 - ID for creating the unique IDs, there is no big deal.
492:10 - Then I have two options here, client and account.
492:13 - Now with this, you'll see a similar pattern
492:15 - that is getting repeated again and again.
492:17 - For example, you create a new object out of this client.
492:21 - Okay, I understand this point, I understand this part.
492:25 - Now I have to set an endpoint and set a project.
492:27 - The endpoint almost always remains same
492:30 - until unless if you have added your own custom domains
492:32 - or something like that, but in most cases,
492:34 - it will remain same.
492:35 - And you have to give a project ID.
492:37 - This project ID we have already seen in the last video
492:39 - that you can just go ahead and copy this project ID.
492:42 - This is very repeatable code, okay?
492:45 - After this, I have to create an account
492:47 - and I get this variable account after using the account
492:50 - that was given to me by app write
492:52 - and injecting this client variable to it.
492:54 - So this is almost like giving a context to the account
492:58 - that here is your context and now give me this object account
493:01 - and this account is you can say a facade.
493:04 - It has so many things inside it into it.
493:06 - For example, you can use a method like create.
493:09 - This create method is actually associated with this account.
493:12 - That's why I'm able to call it account.create.
493:15 - Similarly, now if you go into the login,
493:17 - you'll see exact same portion being repeated.
493:20 - Okay, there's a client, there's account,
493:22 - there's an endpoint, blah, blah, stuff again repeatable.
493:25 - But what I see is account.create email session.
493:28 - What parameters I pass on, I can study it here,
493:31 - but I can see this whole top point is very, very repeatable.
493:35 - Now with this, I would like to bring your attention
493:37 - that if these all things are very repeatable,
493:41 - can I write a code in such a way
493:43 - that I don't need to repeat it again?
493:45 - And one such example is create a class
493:48 - because in the class I can create a constructor
493:51 - which can do all of this code repeatably for me.
493:53 - And when I extract an object out of this class,
493:56 - maybe all things are already done.
493:58 - And this is exactly the approach that is used
494:00 - for creating the services.
494:02 - Yes, this is what we call in the programmatically
494:04 - jargon word as services.
494:06 - So what I'll do is I'll create a service
494:09 - and I'll use almost exactly same kind of a stuff like this.
494:12 - So I'll just go ahead and copy this much
494:15 - from wherever you want to borrow it.
494:16 - This is exactly same code signup login.
494:18 - It doesn't really matter.
494:19 - Borrow this code and what we'll do
494:21 - is we'll just paste this code here.
494:23 - Doesn't really matter.
494:24 - These are for my references only.
494:26 - Now, first of all, I obviously need these project ID
494:30 - and stuff.
494:31 - So I know that I have actually added them up
494:32 - inside my config.
494:33 - So I'll just go ahead and say import conf
494:37 - and that conf will come up from,
494:40 - we need to go one directory back inside the conf
494:43 - and there we have got conf.js, I guess.
494:47 - Yep, that's exactly the file I'm looking up for.
494:50 - Now I have this conf data.
494:52 - And with this conf data, I can actually go ahead
494:54 - and use this app write URL, project ID,
494:57 - all these things are being exported.
494:59 - So just with the dot access, I can have this.
495:00 - So this problem is solved.
495:03 - All right, what is the next problem?
495:05 - This thing is very, very repeatable.
495:07 - So it's better that if I go ahead and just use this.
495:10 - So I'll just go ahead and move this line above
495:13 - because I'm going to use this one.
495:14 - Let's create a simple class and export that as well.
495:17 - So I'll go ahead and say, hey, export class
495:19 - and let's name this one as auth service.
495:22 - We will export the class, maybe we want to use it
495:25 - but my goal is to create an object out of this class
495:28 - and export that object so that you can just import it
495:30 - and start using it if you want to use it anywhere else.
495:34 - So I'll go ahead and use service if I can write that correctly
495:36 - that would be great service.
495:39 - All right, so there we go.
495:40 - This is our classic class in the JavaScript world, okay.
495:45 - The next thing is we need couple of these things.
495:47 - So we need these client and we need this account as well.
495:51 - So these are my goal to create.
495:53 - So let's go ahead and do that.
495:54 - So client is pretty obvious.
495:56 - I can go ahead and say, hey, client,
495:58 - you will be coming up from new and client just like that.
496:01 - Okay, happy with this one, but account not so happy
496:05 - because I cannot create the account directly right now.
496:08 - Account can only be created
496:10 - by passing the context of the client.
496:13 - And in order to create a proper client context,
496:15 - I need to run these methods dot set endpoint dot set project
496:21 - and I cannot just do that right now
496:23 - because otherwise just by creating the class I'm running.
496:25 - I want to run these methods
496:27 - as soon as somebody creates an object out of this class
496:30 - and that's a great way to bring up the concept
496:32 - of constructors.
496:33 - So this is my constructor
496:35 - and as soon as this constructor is being called,
496:37 - that means as soon as somebody creates an object
496:39 - out of this class, I'll say that this dot client,
496:43 - now we'll use the two method.
496:44 - The first one is set endpoint.
496:46 - I'll pass you the variables in a minute
496:48 - and I'll also go ahead and use the set project.
496:51 - Yep, that's the one.
496:53 - Set project and these are the ones.
496:55 - I'll pass you the variables in a minute.
496:57 - But once this is done, now I can create an object,
497:00 - not object, the account.
497:02 - This is exactly what we studied.
497:03 - Create an account by passing the context.
497:05 - So I'll just go ahead and say this dot account.
497:08 - Now you can have the value.
497:09 - So what value you get?
497:10 - You'll get obviously a new keyword
497:12 - and we'll get an account, we'll pass on the context,
497:15 - which in this case is this dot client.
497:17 - There we go.
497:18 - So no more repeatable code in every single time
497:21 - I have to do this.
497:22 - This is the best thing that you can do.
497:24 - Now let's go ahead and pass on the variables into this one.
497:27 - So this one will come up from conf dot app right URL.
497:32 - Yep, that's what we used.
497:34 - And into this one, we'll say conf dot app right project ID.
497:39 - There we go, problem solved.
497:41 - And this is highly, highly repeatable code.
497:44 - Now, what we're gonna do is,
497:47 - we're going to create a couple of methods.
497:49 - And again, these are app right methods.
497:51 - So your request is going to the app right,
497:53 - coming back onto this one, this might take some time.
497:55 - So obviously async await is your best friend in this case.
497:59 - Maybe you don't like them,
498:00 - but these are your best friends.
498:02 - So what we're going to do is,
498:03 - we are going to create a sync method.
498:04 - And let's just call this one as create account.
498:07 - And this method has no idea how it works.
498:09 - It just works.
498:10 - So this is my first method, create an account.
498:13 - How to work with that, we'll walk through with that,
498:15 - but I'll create a couple of methods like this.
498:17 - So this is my create account.
498:19 - This is my login method.
498:21 - What else do you need?
498:22 - So anything that you want to use.
498:24 - So two things we already studied, sign up and login.
498:27 - Maybe more things you are going to require.
498:29 - Maybe you are going to require,
498:30 - give me the current logged in user
498:32 - or whoever has the current session.
498:34 - So we can just use that.
498:35 - So I'll just use this one, get current user, just like this.
498:40 - And after that, log out will be one.
498:42 - So obviously we need to delete all the sessions.
498:45 - We just saw the code for that.
498:46 - So that will be log out.
498:48 - So if you have anything more,
498:49 - you can go ahead and use more such things.
498:51 - Now it's time that we write logics for that.
498:53 - So for that, let's refer the documentation.
498:55 - For the signup, we have gone through with this much part.
498:58 - So I'm not worried on this part now.
499:01 - All I'm worried about is dot create method
499:03 - that I have to go through.
499:04 - I'll be giving the user ID.
499:06 - So I can give my own unique ID or I can use the ID
499:09 - which I borrowed from the app right just here.
499:12 - And I have to pass on email
499:13 - and whatever else field you have,
499:15 - you just pass on them and it will create an account.
499:17 - All right, let's see how we can do that.
499:19 - So anybody who will be using this method
499:21 - will be passing me what?
499:23 - Email and we'll be getting password
499:27 - and we'll be grabbing the name as well.
499:28 - Maybe you have more field,
499:29 - go ahead and grab more field, nothing to be worried.
499:32 - Now in this one, obviously this might fail.
499:34 - So your try catch is again a good friend.
499:37 - Feel free to use try catch or promises, that's up to you.
499:39 - I'll leave that as a simple exercise for you,
499:41 - but I'll go with that classic try catch
499:43 - because I think that's easy.
499:44 - And in this case, I'll just go ahead and say throw error.
499:47 - That's it, should have handled better,
499:49 - but in this case, just want to walk you through with that.
499:52 - Okay, now we have seen that we have to use this method
499:57 - dot account dot create.
499:58 - Okay, I can use that.
499:59 - This is going to be awaited
500:01 - because this is a promise that we are getting.
500:03 - So if we are not using promise,
500:04 - then obviously we have to await.
500:06 - So in this one, I have to access this account.
500:08 - I have to call this dot account.
500:10 - They don't because they are directly using it.
500:12 - I have created an object.
500:14 - I have created a constructor.
500:16 - So that's why I'm using this.
500:17 - So this dot account and it has a method dot create.
500:21 - That's it.
500:22 - And all the values need to be passed on.
500:24 - The first method is the user ID.
500:26 - So the first method I can grab with the ID
500:29 - that I borrowed, notice here, this ID exactly same.
500:33 - If you'll study the documentation of this,
500:35 - this has couple of methods.
500:36 - And as soon as you put up a dot,
500:38 - you can see that there is a thing known as unique.
500:42 - No suggestions, bad luck.
500:44 - So you can just provide a unique
500:46 - and it gives you a string,
500:47 - which you can store as a unique ID.
500:49 - But there are a lot of other ways to generate unique IDs.
500:52 - Maybe you want to use nano ID or something,
500:54 - totally up to you.
500:55 - I'll go ahead and give email and I'll give a password
500:59 - and I'll also give a name.
501:00 - If you have more parameters, go ahead and pass on this.
501:03 - Now this is going to create an account.
501:06 - So let's store that into a variable
501:07 - and call this one as user account.
501:09 - There we go.
501:11 - Now we have the user account.
501:12 - Now I can check it,
501:13 - whether the user account was successfully created or not.
501:16 - So I can just run a simple if else condition
501:18 - and I'll check if the user account exists or not.
501:21 - So if user account exists, do something.
501:23 - If it doesn't exist, then return whatever the value is.
501:29 - Maybe there's a null inside it or whatever that is.
501:31 - It's up to you how you handle that.
501:33 - Maybe you want to return a proper error object
501:35 - that hey, throw this error, whatever you want to do,
501:37 - it's up to you.
501:39 - But if the account was created, I want to log in the user.
501:42 - Probably that's my workflow.
501:44 - Probably that's the flow I want to go with the application.
501:46 - So I can just go ahead and say return
501:48 - and I can call another method login
501:51 - and I can just log in the user using this method.
501:54 - Obviously this login is not going to work directly.
501:57 - This requires some parameter.
501:58 - I can log in with email and password.
502:01 - Now I can just simply go ahead and say return
502:04 - whatever is coming up back from this.login,
502:07 - calling another method from the same class, how easy it is.
502:10 - And for this one, let's pass on email and password.
502:14 - That's it.
502:15 - Now, whatever is your flow, totally go with that.
502:18 - But I just wanted to show you how life is going to become
502:20 - easier in the future with just this class that we have.
502:24 - Now, similarly with the login, we know that.
502:26 - We just studied it.
502:27 - To log in, we know we want to just work
502:29 - with this create email session.
502:31 - I'll copy this so that I don't make a mistake
502:33 - and I can just use it.
502:34 - So let's go ahead and try the exact same methods.
502:36 - So again, try catch, catch, not going to do too much
502:40 - apart from throw the error.
502:42 - And in the try part, let's go ahead and return a wait.
502:46 - Obviously we have to wait.
502:48 - This.account, and we have to use the method
502:51 - of create email session, pass on the email and password
502:55 - that you have grabbed.
502:57 - And that's it.
502:58 - So easy to work on with.
503:00 - And this is why I like so much.
503:04 - This file is so much reusable.
503:05 - This file is not opinionated.
503:07 - You can use this in React Native.
503:09 - You can use this in React.
503:10 - I have used this in my lots of other tutorials as well.
503:13 - And that's why I love to create this.
503:15 - Maybe right now, this create account as well as this login
503:20 - is not good enough feature for you.
503:21 - Maybe you want to add more.
503:23 - Just go ahead and add more methods into class.
503:25 - That's great.
503:26 - Now let me show you how you can get the current user.
503:28 - This is a little bit hidden in the docs,
503:30 - but super easy again.
503:31 - There's just one line here.
503:33 - So I'll just go ahead and try catch.
503:35 - And if the catch is there, you are not able to grab the user.
503:38 - Then I want to do a little bit of the more console log,
503:40 - but anyways, I'll just go ahead and say return.
503:43 - The way it is must have this dot account
503:46 - and the method to get the current user is dot get.
503:50 - Yeah, super simple.
503:52 - That's all I have to do.
503:54 - No variables, nothing is required.
503:55 - It just, since this account has an access
503:59 - to the endpoints and all of this.
504:00 - So that's how I can grab it.
504:02 - Super, super easy.
504:03 - But if I'm not able to do this,
504:05 - then obviously I'll want to do a console log in this case,
504:08 - because sometimes this has happened to me
504:11 - that while working with this application,
504:13 - things might have gone a little bit wrong.
504:14 - So I'll just copy paste a little bit of the error.
504:17 - So I'll just say app write service.
504:22 - There is an error in the service, two colons.
504:24 - And then the problem is in get current, oops,
504:28 - get current user.
504:30 - This is the method which is creating me the problem,
504:32 - two colons, and then I'll just go ahead
504:34 - and would like to stack the entire error,
504:37 - which is coming to me.
504:38 - Again, it's up to you how you handle the error.
504:40 - It's totally up to you.
504:42 - But if I'm not able to run any of the try catch
504:44 - and all of that,
504:45 - I would love to gracefully end this method
504:47 - by returning a simple null.
504:49 - So I'll check whether what I'm getting,
504:50 - if I'm getting null,
504:51 - I can handle the situation based on that.
504:53 - Now, another one is how to do the logout.
504:56 - The logout is super easy.
504:57 - If you want to do anything, just go hit account API,
505:00 - look for what all that you want to do.
505:02 - You have to study this obviously.
505:03 - List the identities, delete the identities,
505:06 - update the phone numbers, list the sessions,
505:08 - delete the sessions, yes.
505:09 - This is exactly how you delete all the currently logged
505:13 - in sessions or known as logged out.
505:15 - You can get the sessions as well, just like this.
505:17 - You can go ahead and get all these sessions.
505:21 - And there's a lot more here.
505:22 - Some things you require a little bit more of the studies
505:25 - and discussion, the Discord forum is also,
505:28 - Discord section entirely is pretty great.
505:30 - Anyways, so let's go ahead and work with,
505:32 - I want to delete the sessions.
505:34 - So all I have to do is use this delete sessions,
505:36 - copy this and we'll come back onto the logout.
505:39 - We don't need anything.
505:41 - As a parameter, we'll just go with the try catch.
505:44 - In the catch, we'll just do a same kind of a thing.
505:48 - So let's go ahead and copy this, paste this.
505:53 - And this time the error is inside the logout.
505:57 - There we go.
505:58 - In the try, what do you want to do?
506:00 - I want to await this dot account dot delete sessions.
506:06 - Make sure there's an S at the end of it
506:08 - because it deletes every session that you have.
506:10 - So there we go.
506:11 - This is the way how we actually were able
506:14 - to just simply create some of the methods
506:16 - that helped us to do all of this.
506:18 - But this is not all.
506:19 - Because right now this is a great class
506:21 - that we have built up.
506:22 - And let me just minimize this.
506:24 - This is going to work nicely.
506:25 - And I'll not forget to remove all of this.
506:27 - This was just to show you,
506:29 - usually every programmer does that.
506:30 - Bring some things, keep them in the file,
506:33 - eventually remove that.
506:34 - This class is great, but this class needs an object
506:37 - so that this constructor is invoked
506:39 - at the time of creation of the object, obviously.
506:43 - So what we can do is we can simply go ahead and say const.
506:46 - And let's just call this one as auth service.
506:50 - Service.
506:52 - And that service will be created, obviously,
506:54 - new auth service, just like this.
506:56 - So we have created an object.
506:57 - Now we are going to go ahead
506:59 - and export default this auth service,
507:03 - this object auth service.
507:04 - So this lower one is an object.
507:07 - This upper class is the class itself.
507:09 - So now the advantage of exporting this object
507:12 - is that at any point of time, the constructor is invoked.
507:15 - So my endpoints are properly created.
507:17 - And since it's an object, it can access all those methods.
507:21 - So life is much more easier this way.
507:23 - So this is all that you need to know about these services.
507:26 - And in case you want to add more methods,
507:28 - maybe in your application, it makes sense
507:31 - to update the status as well.
507:33 - So you can update the status as well
507:35 - that whatever, however you want to do,
507:36 - does it make sense or not status of anything?
507:39 - So you can make more things.
507:41 - Maybe you want to create a JWT.
507:42 - So you can go ahead and request create JWT.
507:44 - It will give you a JWT.
507:46 - So just go ahead and add more of these methods
507:49 - in your class, highly reusable code.
507:51 - And I'll obviously go ahead and push all of this code.
507:53 - You can find them all in the GitHub section
507:55 - in the description section.
507:57 - So this is really nice.
507:58 - I enjoy this quite a lot.
508:00 - This is really a high quality code
508:02 - that you have written, highly reusable in any application.
508:04 - And it's fun as well.
508:06 - So in the next video, we'll go through with the same process.
508:09 - But this time, we have already done with the Auth section.
508:11 - Next time in our application, it makes sense
508:14 - to have an interaction with database as well as storage.
508:17 - You can keep them in separate files as well.
508:18 - We don't have that much of the application
508:20 - or the methods being called.
508:22 - So we'll keep them in just one file.
508:23 - And it's your choice, your decision totally.
508:26 - So in the next video, I'll walk you through
508:27 - how we can interact with the database
508:29 - as well as the storage section
508:30 - and the storage APIs of the app, right?
508:33 - I hope you're excited.
508:33 - If you are, do let me know in the comment section.
508:36 - I would be super, super pumped up
508:37 - to get some of your support,
508:39 - maybe on tweet, on LinkedIn or wherever.
508:41 - If these videos are making a little bit help,
508:44 - some motivation is required for me.
508:45 - I really, really need that.
508:47 - That's it for this video.
508:48 - Thank you so much.
508:49 - I'll catch you up in the next one.
508:54 - Hey there, everyone.
508:55 - It is here back again with another video
508:57 - and welcome to another episode
508:58 - where we are trying to learn React
509:00 - and we are trying to finish up our mega project.
509:03 - In this video, you will learn everything
509:05 - that you probably will need to learn
509:07 - about AppRite's database,
509:09 - how to make queries with the database,
509:11 - as well as how the storage facility of the AppRite works.
509:14 - The code that we are going to write in this video
509:16 - is of course highly, highly reusable.
509:19 - You can use it with the React application,
509:21 - Next.js application,
509:23 - probably with the mobile application as well,
509:24 - like React Native Letter, whatever you're using.
509:27 - We'll just keep it absolutely independent
509:29 - of whatever the platform you're using.
509:31 - That's the goal and we are going with that.
509:33 - And of course, it's a little winter time.
509:35 - So probably one of my first video in the winter wear.
509:40 - So that's what we are going for.
509:41 - Okay, so let me share the screen.
509:43 - And first, let me just remind a little bit jog
509:45 - of the memory of what we are about to do in this one.
509:48 - So in case you remember, in the last video,
509:51 - we worked through with the Auth.js
509:53 - and I gave you a simple walkthrough
509:55 - of how these things actually work.
509:57 - And we created a simple Auth service,
509:59 - which is having all the constructors and methods.
510:02 - And we are using the client account.
510:04 - We created methods like create account login,
510:06 - current user logout, and probably you can add more.
510:09 - We also went up with the documentation.
510:11 - So we studied the bit and pieces of the documentation
510:14 - of how the account API works,
510:16 - how you can add and learn about more methods
510:18 - in the documentation like creating JWTs
510:21 - or maybe creating password recovery, whatever you want.
510:23 - That is exactly the same thing
510:25 - that we are going to work through it.
510:27 - I'll just crawl this a little bit
510:28 - so that we can see it nicely.
510:31 - All right, looks good, decent.
510:36 - Yeah, I think, yeah, that's okay.
510:39 - Now the next thing that we are going to do
510:40 - is almost similar kind of approach that we are going to use,
510:43 - but this time we'll be taking care of the different
510:46 - of the APIs that are available.
510:48 - So let's go here.
510:48 - And this time we are first curious about database
510:51 - and then we obviously are curious about storage as well.
510:53 - Let's explore the database.
510:55 - So when you look on the database here,
510:57 - what do we actually go with that?
511:00 - First of all, you can see there are concept of database,
511:02 - collection, document, relationship, all these.
511:05 - And then there are journeys about the queries
511:07 - that you can make.
511:08 - Of course, you can do order pagination
511:09 - that's also available.
511:11 - But first of all, let's understand the concept of databases
511:14 - and then we'll also learn about how the queries
511:16 - are being done and used.
511:17 - If I click on the databases,
511:19 - this is how you create an SDKs and servers
511:22 - and whatnot.
511:23 - The most important thing with the database as well
511:24 - is that you need some of the constant fields
511:28 - that are required.
511:29 - Now this one is actually a node app, right?
511:32 - We are not interested in that
511:34 - because that's something you want to interact
511:36 - if you're making a backend as application
511:38 - and which is interacting with that.
511:40 - We are more over worried about creating
511:42 - and getting through with the collections
511:43 - and buckets and all that.
511:45 - But one common thing you will notice here,
511:46 - this is here, it says SDK database.
511:48 - But if I go ahead and look for a legacy database APIs,
511:53 - notice here the exact same thing.
511:55 - We get the app right from the,
511:57 - and we extract client and database out of it.
512:00 - Let me zoom this a little bit.
512:02 - And we exactly create a client.
512:04 - Just like in the auth service,
512:05 - we created auth from this.
512:08 - This time exactly we'll be using databases,
512:10 - we'll be passing on a reference of the client.
512:12 - And the endpoints are exactly same.
512:14 - The endpoints is first of all, the URL
512:17 - and then we need a project one.
512:19 - Now out of this,
512:19 - just like you were able to extract auth database,
512:23 - I think this gives us enough idea that exactly same way,
512:26 - we can actually extract the services for storage as well.
512:29 - And that's exactly what we'll be doing in this one.
512:31 - So let me go ahead and copy this piece of code
512:34 - so that we can work on it together.
512:36 - And we'll be using exactly same approach
512:38 - that we used in the auth that let's create a class
512:40 - and set up all these things.
512:43 - And we'll be exporting this class as well.
512:45 - Now it's up to you, what do you name this class?
512:47 - Since there is not too much of the things
512:49 - that we are doing,
512:50 - usually I would love to keep my storage into separate class
512:54 - and my database related all stuff in a separate class
512:57 - or a file at least,
512:58 - but in this case, this is not too much going on.
513:00 - So I'll just wrap them up in same file here.
513:04 - I'm gonna call this one as config,
513:05 - not too confused with the conf.
513:07 - Conf is for app rights URL only
513:10 - and config is for all the configuration,
513:13 - remaining all the configuration that I require.
513:15 - Let's go ahead and work on with that.
513:16 - First of all, I'll paste whatever I copied.
513:19 - So this is the stuff that is required for myself.
513:22 - Now let's go ahead and move it at the bottom
513:24 - and just go ahead and explore them one by one.
513:28 - So first of all, the most important thing
513:30 - is to grab all the conf, which is the URLs.
513:35 - So let's go ahead and grab the URLs.
513:39 - URL, I mean to say all the end points
513:42 - like the environment variables, basically.
513:45 - So I'll just go ahead and say, give me a conf
513:48 - and that will be coming up from,
513:50 - let's go one directory back inside the conf
513:53 - and we have conf.js or conf, that's the first thing.
513:58 - After that, we obviously are going to need
514:00 - the client and database.
514:01 - And I'm pretty sure by this point,
514:03 - you have learned that you can also extract
514:06 - all the services that you require,
514:07 - maybe all the other things.
514:08 - In this case, I need storage
514:10 - and we'll also discuss a little bit about the queries,
514:12 - how to make queries.
514:13 - This is the most important part of learning the app right.
514:16 - All right, so most of the things are done
514:18 - and we'll be using exact same approach.
514:19 - So let me also open up our auth
514:21 - so that we can refer it back.
514:23 - We created a class known as auth service
514:25 - and we created client and account out of it.
514:27 - Great approach, we'll be using exactly same.
514:29 - So let's go ahead and simply go ahead
514:31 - and say export class service.
514:34 - In this one, we'll be exporting the class as well,
514:35 - but the most important part is we'll be creating an object
514:38 - and we'll be exporting that.
514:40 - So that object at the time of creation of an object,
514:43 - we create or we use the constructor
514:45 - that's already spin-off
514:46 - and also all the methods are directly available.
514:49 - So that's the goal.
514:50 - Let's call this one as service directly.
514:52 - And in this one, first of all, we need a client.
514:54 - So let's go ahead and create a client
514:56 - and we'll be creating a client just like that.
514:58 - So we have a client.
514:59 - Apart from this, we will be needing databases.
515:02 - So let's call this one as databases
515:05 - and we'll be needing a bucket as well.
515:07 - Now bucket might be a little bit unfamiliar to you,
515:10 - but if you've watched the previous video,
515:11 - you know that the folders in the app right
515:13 - are called as bucket.
515:13 - The same terminology is being used by AWS
515:16 - and all the other folks as well.
515:18 - So we got the client and we got the database,
515:20 - but in order to actually properly create a database,
515:24 - we need a couple of more things to be done.
515:26 - So let's go ahead and do that.
515:28 - First of all, let's check on the documentation.
515:32 - So database can be created by new database,
515:35 - but the issue is it needs a client to be passed on.
515:38 - So we need to actually do that.
515:39 - And client also needs these endpoints
515:42 - and all these things to be created.
515:43 - So that's also interesting.
515:45 - Let me show you how that needs to be done.
515:48 - First of all, let's go ahead and create a constructor.
515:51 - In the constructor, as soon as somebody creates an object,
515:53 - we'll spin off this constructor.
515:55 - So this dot client will set an endpoint.
515:59 - So let's go ahead and set an endpoint.
516:01 - In this, we'll be grabbing the endpoint from conf.
516:04 - So conf.api app-write URL, that's the one we need.
516:11 - All right, once this is done,
516:13 - then we obviously need to set a project.
516:15 - So set project, that's the step one.
516:18 - So we need to provide the project ID in this one.
516:21 - Let's go ahead and say conf.app-write project ID,
516:26 - that's the one we need.
516:27 - And once this is done, that means properly a client
516:30 - has all the variables and points
516:32 - that are required for us to pass on.
516:34 - So these two things are done.
516:35 - And now based on this, I can take a utilization
516:38 - and can actually create the database and the bucket.
516:40 - So it's super, super easy.
516:42 - All you have to do is pass on the reference
516:44 - of this client and use it.
516:45 - So this dot database, databases will be created by new,
516:50 - oops, not like that, new database and inside databases
516:57 - and we'll be passing on this dot client.
516:59 - So I hope you can see the pattern
517:01 - and the consistency in the documentation of app-write
517:04 - that is pretty useful.
517:05 - Exactly like this, we'll be simply creating this dot
517:09 - and this time let's create a bucket
517:12 - and bucket will be created from storage service.
517:14 - So we have the storage just like that
517:16 - and we'll be passing on this dot client.
517:19 - All right, so this means now I have two variables with me,
517:22 - database and bucket, which has access to pretty much anything
517:25 - that you want to work with.
517:26 - For example, if you want to just list all the documents,
517:29 - now databases is capable of doing so.
517:32 - So now we can use the methods like list documents
517:35 - and pass on the document ID, collection ID
517:37 - and whatever you want to ask for it.
517:39 - This is exactly the point where you first time learn
517:41 - that what all you can do with the database.
517:44 - So in our case, we want to ask database
517:46 - and grab some of the values out of it.
517:49 - Okay, so let me show you.
517:52 - First of all, let's create a couple of methods
517:54 - and see what they will be able to do.
517:56 - Obviously these methods will be async
517:58 - and the very first method is get post.
518:01 - So I want to grab a single post out of it.
518:03 - Now, obviously when you're grabbing a single post,
518:06 - you need to provide that based on what you want
518:08 - to actually grab this.
518:10 - So if I go back into app right cloud, which is here.
518:13 - So this is my blog, which is previous one.
518:16 - I'm not using it.
518:17 - I have removed all the API's keys out of it.
518:19 - This is my new one, but exactly same copy.
518:22 - So if I go ahead and check it out
518:24 - and let's take a look onto the databases here
518:27 - and inside this one, we do have a database.
518:32 - We were having the database.
518:34 - So just to give you a brief idea
518:36 - that how this actually works
518:38 - or let me just walk you through directly.
518:40 - Okay, so how can I grab a post out of it?
518:44 - Okay, let's study a little bit of the documentation.
518:47 - Okay, get the document.
518:49 - So this is the one that I'm looking up for.
518:50 - Again, by the way, all the CRUD operations are listed here,
518:53 - create, get, update and delete.
518:54 - So this is my get document.
518:56 - In order to get a document, notice here,
518:58 - I need to pass on the database ID.
519:01 - Obviously I have that.
519:02 - I need to pass on collection ID.
519:03 - Obviously that makes hierarchy.
519:05 - And then I have to provide a document ID.
519:07 - And in case you remember,
519:09 - we created each document ID as a slug.
519:12 - Obviously you can pass on the auto generated IDs,
519:15 - but we actually replaced it with the slug.
519:17 - If you remember in the earlier videos, we actually did that.
519:20 - So now somebody will be passing me on this slug
519:23 - of the blog post.
519:25 - So that's a unique one for me.
519:26 - And I need to grab the ID from it.
519:28 - Okay, now how do we do it?
519:30 - Of course, it's a database operation.
519:32 - So it needs to be wrapped up in the try catch.
519:34 - First of all, let's do that.
519:36 - And let's do a console log as an error.
519:38 - So in the error part, we'll do exactly same.
519:41 - We'll refer it as app, oops, not like that.
519:47 - App right service.
519:48 - And we'll just mark it where the problem actually comes.
519:51 - And we'll say problem is in the get post.
519:54 - So that we can again come back and look at
519:56 - what is the exact point where I'm facing the issues.
519:59 - Once this is done, then I'll obviously go ahead
520:01 - and print the error as well.
520:04 - I think that's good enough.
520:05 - And we are going to return a false
520:07 - so that in the front end part, we can handle that.
520:10 - Now what's inside the try part?
520:11 - Now you'll be surprised to know that how easy it is
520:14 - to actually grab from the app right database.
520:17 - Notice here, this dot databases,
520:18 - this is our service that we use.
520:20 - And all I have to use is a method.
520:22 - I hope you can see that already get a document.
520:24 - Yes.
520:25 - The list document is to grab all the documents.
520:28 - Get document is where you pass on that.
520:29 - This is exactly what I need.
520:30 - You need to pass on an ID here.
520:33 - So again, the step one is to pass on the database ID.
520:36 - So let's go ahead and say this is my app right database ID.
520:40 - That's the step one.
520:41 - The next step is to provide the collection ID.
520:44 - So I'll grab that from conf.app right collection ID.
520:49 - That's the next step.
520:50 - And once after that, I have to provide this slug,
520:52 - which whoever is using will use this method
520:55 - will pass me up here and will give me that.
520:58 - Once this is there,
520:58 - obviously this operation will take some time.
521:00 - So let's go ahead and wrap it or prefix it with the await.
521:04 - And let's directly return that.
521:06 - So whatever the value is coming in,
521:08 - coming out of this query,
521:09 - we'll directly just send it to the user.
521:11 - So I hope you can see it's not really that difficult.
521:14 - Whatever the unique value is, in our case,
521:15 - slug is there, we will be just using it.
521:18 - And when we'll be taking actual usage of the service,
521:21 - you'll understand that how you actually grab that slug.
521:23 - That's really easy from the URL, we can grab it.
521:26 - From the title, we can grab it.
521:27 - There are so many places, but this is it, this is it.
521:30 - Now the next step is that, okay,
521:33 - I know how to actually use this one.
521:35 - Like I can update the document, get the document.
521:37 - We'll create those methods as well.
521:39 - But let's just say now I want to query the database
521:43 - and only want to find out all the values,
521:47 - which are status as active.
521:50 - So there is some query in my case.
521:52 - I'll just show you that.
521:53 - I think that will help all of us in this one,
521:56 - instead of worrying about the IDs and all of that.
521:58 - So let's go into the databases.
522:01 - And in the databases, we can see this is our collection.
522:03 - And inside this, we have a blog.
522:05 - So all the attributes, when I check this,
522:07 - I have this user ID.
522:08 - So user ID is there, there is a title here as well.
522:12 - And we do have a slug here as well.
522:15 - So inside the user ID,
522:16 - we'll be passing on the slugs and all these,
522:18 - not in the user ID, but the title.
522:20 - Anyways, I'll just see this one.
522:22 - Now, my goal is that I want to find out all the status,
522:26 - which are marked as active.
522:29 - So there is a query status need to be active.
522:32 - So this time, find me all the documents in this database ID,
522:38 - in this collection ID,
522:40 - but not just I'll pass on one thing and give me all of that
522:42 - or that one particular value,
522:44 - give me all the values based on my query.
522:47 - So this is the point where we need to study that,
522:49 - hey, there is a key and the value is that,
522:52 - only give me those documents.
522:54 - So I'll come back here.
522:55 - And if you'll notice that in the database,
522:58 - I need to expand this a little bit, probably not.
523:02 - And let's go into this one, the references.
523:07 - And this time, we'll be going into database
523:10 - and I want to learn about the queries.
523:13 - So how do I make the queries?
523:14 - That's interesting.
523:16 - So notice here, it's super easy.
523:17 - All you have to do is query dot select or dot equal,
523:21 - whichever you want to use.
523:23 - This one says select which attribute should be returned
523:25 - from a document, a return document,
523:27 - if attribute is equal to any value provided in the array.
523:30 - So this is one that looks okay to me in this case,
523:33 - because I'll be providing you status
523:35 - and a value of the status.
523:37 - And you give me all the documents
523:39 - that actually matches that.
523:41 - So I'll provide you a title.
523:42 - In this case, it says Ironman,
523:44 - but I'll give you a query dot equal,
523:47 - which is status and the status should be active.
523:50 - So I'll just give you, by the way, in the array,
523:52 - you can pass on all the parameter as a string
523:54 - if you have multiple, but I do have just one.
523:56 - So I'll just pass on the one.
523:57 - So let's go ahead and do that.
523:59 - Okay, now let's go ahead and write a method for this one
524:02 - that I have, let's go with this.
524:05 - Again, async, we go with that, get posts,
524:09 - because multiple will be coming up.
524:11 - And then I have to make a queries.
524:15 - This is the parameter somebody will be giving me.
524:17 - If nobody gives me that, then by default, I'll use that.
524:20 - The way how you actually grab the queries
524:23 - is you write exactly as you are being told.
524:26 - So remember, everything was inside the square bracket,
524:29 - you need to pass on an array.
524:30 - So this is the first step.
524:32 - So you want all the title to be whatever is mentioned
524:34 - into this one, or you can pass on the key value pair as well,
524:37 - the title, Ironman, and all of that.
524:39 - So we'll be using the second one.
524:41 - I need the title to be this one.
524:44 - Similar to this one.
524:45 - So this is my query.
524:48 - Query.equal.
524:52 - There we go.
524:53 - And this is the parenthesis, a method being used.
524:56 - Notice here, string and the value query types,
524:59 - whatever that is.
525:00 - Basically it's saying is give me, I want the status.
525:03 - This is my key that I want to find out
525:05 - what is the value that you're looking up for.
525:06 - If you have multiple values, you can provide an array,
525:08 - but here the type that I'm looking up for is active.
525:12 - All right, there we go.
525:13 - Not that difficult.
525:15 - So now I need to learn that how can I use it?
525:18 - Usage is another simplest thing that you can do.
525:21 - This is building queries.
525:23 - So if you look up for it, notice here,
525:26 - I have to say is database ID.
525:29 - Then I have to go with the collection ID.
525:31 - Then in the array, I can pass on as many query as I wish.
525:34 - I just have one.
525:35 - That's why I directly call this one in an array.
525:38 - But if you wish, you can just convert it like this.
525:41 - I have already converted that here, notice here.
525:44 - I've already wrapped this up inside the square brackets.
525:47 - That is an array.
525:48 - But if you don't want to,
525:49 - you can just make it one by one.
525:51 - I actually did a little bit help to myself
525:53 - of wrapping this up.
525:55 - Now as a third parameter, I can directly pass on.
525:57 - That's the advantage.
525:59 - Great, nicely done.
526:00 - Okay, let's go ahead and try this.
526:02 - Again, same, we'll be using try catch.
526:04 - The error part will remain same.
526:06 - So I'll just copy and paste this one.
526:09 - Copy this, paste this.
526:11 - And this time the problem, if it might occur,
526:13 - is in get posts.
526:16 - So multiple one.
526:18 - Okay, next up is how can I try this up?
526:21 - Really simple.
526:22 - This dot databases.
526:26 - And this databases will list all the documents based on what?
526:30 - First of all, give me the database ID.
526:33 - So let's say conf dot project ID.
526:37 - I've given not the project ID, my bad.
526:40 - Database ID, we are interacting with the database.
526:42 - App right database ID.
526:44 - Second is collection ID.
526:47 - So this one will be conf dot collection ID,
526:51 - app right collection ID.
526:52 - And third part is directly my queries.
526:55 - This is the only part where you need to be careful.
526:57 - I have wrapped this, remember,
526:58 - I have wrapped this queries directly in the square bracket.
527:01 - If you are not doing that,
527:03 - then make sure you're passing it like this.
527:04 - Just the syntax issue.
527:06 - All right, so obviously this is a database operation.
527:09 - It needs to be a wait.
527:10 - So let's go ahead and do that.
527:12 - Once this is done, let's go ahead and return that directly.
527:14 - So I hope now you understand,
527:16 - it's not really that difficult to work on with this.
527:19 - So we have worked on two database operations.
527:21 - One is get post, one is get post based on queries.
527:24 - It's very repeatable, very understandable
527:27 - and very consistent code in the app, right?
527:29 - So let's move and shrink this up.
527:31 - And let's also shrink this up.
527:34 - And let's talk about other operations
527:35 - which is creating the post.
527:36 - Creating the post is super, super easy.
527:39 - If I go back into the documents,
527:44 - database,
527:46 - documents,
527:48 - list documents, create documents.
527:49 - Let's see how do we create a document?
527:52 - And this is how you create the document.
527:54 - You simply say create document.
527:56 - You provide the database ID, collection ID,
527:58 - something that is unique
527:59 - and all the things that you want to store
528:00 - that is already available in the attributes
528:03 - that you are having.
528:04 - All right, so let's go ahead and do that.
528:07 - That will also help you to understand
528:08 - that since this is unique,
528:10 - that's why we were able to go up here
528:13 - and mention that, hey, the slug is unique.
528:15 - So give me all the values based on the slug.
528:17 - Hope this helps.
528:19 - Now let's go ahead and move on to another one.
528:21 - Again, this one will be async
528:23 - and we'll be saying create a post.
528:27 - And this should be super easy.
528:29 - What do we expect that how do we create a post?
528:31 - While creating the post,
528:32 - I expect that you pass me on a title,
528:35 - you pass me a slug value.
528:37 - Slug is nothing, just a title,
528:39 - but we remove all the spaces,
528:40 - move them into dashes, just we saw in the demo.
528:43 - And then we also expect that you will provide me a content.
528:46 - You will also provide me a featured image.
528:50 - You provide me a status, whatever the status value is.
528:54 - And we'll also grab a user ID.
528:57 - Okay, all the values are here.
528:59 - Once these values are here, again,
529:01 - same try catch operation, very repeatable code.
529:05 - And that's the good thing.
529:06 - Once we have a repeatable code,
529:08 - that means it's something good.
529:11 - Okay, this one will be create post.
529:15 - Errors and everything are good.
529:16 - Let's go ahead and do the same thing.
529:18 - Now we know that let's go ahead and return this.
529:21 - This will be await.
529:23 - This dot databases,
529:25 - this is going to work with the method,
529:27 - create document, provide all these things.
529:30 - The first one is conf.appwrite database ID.
529:36 - The second one will be conf.appwrite collection ID.
529:41 - And the third one is what is the unique ID?
529:44 - In our case, the unique ID is not the ID,
529:46 - but the slug that we want uniquely.
529:48 - We want all the posts to be unique.
529:50 - So that's the slug.
529:51 - And the third parameter is provide me all the objects.
529:54 - Yeah, there we go.
529:55 - So let's go ahead and provide all these objects.
529:57 - So we'll go ahead and say title.
530:00 - Then we have content.
530:02 - We have featured image.
530:05 - We haven't uploaded the image yet,
530:06 - but we'll work on that.
530:08 - Status and we have user ID.
530:11 - There we go.
530:12 - So all the value that is being passed on to me as a method,
530:15 - I'll just use them to create a post.
530:17 - Now, going back, this is for creating the post.
530:21 - Okay, how am I going to do and update the post?
530:25 - That's interesting.
530:27 - Let's go ahead and say collection.
530:30 - Databases, let's go into directly database APIs.
530:33 - That's always easier.
530:35 - And this time I want to update the document.
530:37 - Okay, so for updating the document,
530:39 - you have to use update document.
530:41 - Notice here, update document.
530:43 - Database ID, okay, collection ID, no big deal.
530:46 - What else do you need?
530:49 - And this is not proper.
530:52 - This should be a little bit more
530:53 - because you need something to find out the update document.
530:58 - Unique IDs.
531:00 - So I think the collection ID,
531:02 - this is not scrolling properly.
531:04 - We definitely have more.
531:06 - We definitely have more.
531:07 - Update the document.
531:09 - Here we can read about it.
531:10 - Collection ID, document ID, data to be updated
531:14 - and the permissions.
531:16 - Anyways, I'll walk you through with that, no worries.
531:18 - Okay, so this is my create post.
531:20 - Let's go ahead and create another method
531:22 - which will be update.
531:24 - I'll sync, update post.
531:28 - And while updating the post,
531:33 - update document,
531:35 - you need to provide that what is the unique value
531:38 - I am looking for for updating that.
531:42 - And update document, database ID,
531:45 - this is not proper.
531:47 - I've worked with that.
531:48 - I've worked with this.
531:49 - This is newly updated document, probably that's the reason.
531:51 - So while updating the post, you will need a slug
531:53 - which is uniquely identify your document
531:56 - that needs to be updated, that needs to be passed on.
531:58 - Otherwise the method of update document doesn't work.
532:01 - Probably there's a mistake
532:02 - or I'll send a pull request to them.
532:03 - I worked with these documents in the past.
532:05 - So probably that's the one issue.
532:07 - And then one we can do is provide me the title,
532:11 - the new updated title or the same, whatever that is.
532:13 - You pass me content, you pass me featured image
532:17 - and you pass me status.
532:18 - These are the field which we are allowing to change.
532:21 - And once this is done, same stuff, try catch.
532:25 - Let's open this up.
532:29 - We'll copy this.
532:30 - We'll paste it up.
532:32 - And this time if the problem appears,
532:34 - it might be an update document tracking all of this.
532:38 - And of course we will be returning the await
532:43 - and this time this dot databases and update document.
532:48 - Now the way how update document works is,
532:51 - first of all, you provide the database ID
532:53 - in the collection ID in which, or in what one,
532:55 - what exactly the collection we are looking up for.
532:58 - So conf dot app right database ID.
533:01 - The second step is collection ID.
533:04 - So collection ID.
533:06 - The third step is to provide me the unique ID.
533:08 - If you're working with the unique IDs,
533:10 - provide the unique IDs.
533:11 - If not, just provide anything
533:13 - that's making your document unique.
533:14 - In my case, that slug.
533:16 - And then pass on all the objects that you have.
533:18 - So exactly same.
533:20 - Oops, not like that.
533:22 - We do have, I think I can copy paste.
533:25 - Yep, this is all the data that we have.
533:28 - So I'll just copy and paste this one.
533:31 - So we have title, content, featured image, status.
533:35 - We are not passing on user ID
533:36 - because we are not allowing to change that.
533:38 - And we are also not accepting that.
533:40 - So there we go.
533:41 - All the data is done.
533:42 - And that's it.
533:43 - That's our update post.
533:44 - Obviously we need to write the delete one as well.
533:47 - And to delete a document, what else do we have?
533:50 - Database ID, collection ID.
533:52 - There is something, something that is missing
533:54 - because we need a unique identifier.
533:55 - Otherwise what document you are actually deleting.
533:58 - There is no way of finding that out.
534:01 - Okay, there is something probably a bug or issue.
534:03 - Anyways, this is, you get the point how this is being done.
534:07 - So now the best way is actually to actually copy
534:09 - and paste this entire stuff
534:11 - because that is much, much easier now,
534:12 - now that you understand the concept.
534:14 - This one is delete document or delete post.
534:19 - We will be taking the slug,
534:20 - but we don't need these objects
534:22 - because it doesn't really matter what's inside.
534:24 - We just want to delete it.
534:25 - No need of comma as well.
534:26 - Just give me the slug and I'll try to delete it.
534:28 - And let's update this one.
534:30 - This is if the error occurs,
534:31 - it might be delete document.
534:34 - Good.
534:35 - Now we also don't need this.
534:36 - So that's great.
534:38 - And obviously the method gets updated.
534:40 - Instead of update, we want to use delete document,
534:44 - two times document, delete document.
534:48 - Hopefully I have copy pasted it correctly
534:50 - and we provide the database ID,
534:51 - we provide the collection ID
534:53 - and we provide the slug.
534:53 - Something that uniquely identifies this one.
534:57 - The only new thing is you cannot just go ahead
534:59 - and return it because it doesn't return anything.
535:01 - The return type data type is a little bit questionable here.
535:05 - So we prefer to manually return something here.
535:07 - So we are going to go ahead and say return true
535:10 - that yes, it was properly returned.
535:13 - Return true.
535:14 - Oops, my bad.
535:14 - This should go up here.
535:16 - Okay, looks good.
535:18 - Let's indent that properly.
535:20 - There we go.
535:21 - So this is nice.
535:21 - In the update one, you don't need to return that.
535:23 - Updated one actually returns you the updated document.
535:26 - That's good.
535:27 - But the delete actually,
535:28 - if you'll see, they should actually go
535:30 - what the response is going to be.
535:32 - It just says, hey, two or four application, Jason.
535:34 - So we don't have.
535:35 - In the update document,
535:36 - if you'll check out what is the response,
535:39 - you can see it gives you the document.
535:40 - That's the good one.
535:41 - But if you check the delete document,
535:44 - there is no document that is returned.
535:45 - There is no true false value that is returned.
535:47 - So yes, nothing magically is coming out of the box.
535:50 - I'm trying to teach you how to study the docs
535:52 - and all of these.
535:53 - Okay, so delete post is done.
535:56 - Now let's work on one more thing.
535:58 - We can actually remove them.
535:59 - We don't need you.
536:01 - Just like that, we have created all these methods
536:04 - about update post, delete post, create post, get post,
536:09 - and pretty much anything.
536:09 - All the queries that you want to handle,
536:11 - non-queries you want to handle,
536:13 - we have worked through with almost every possible case
536:16 - that can happen in the database.
536:17 - If there are more,
536:18 - you can obviously modify these existing methods
536:20 - or can add more by reading the docs.
536:22 - Next one is buckets.
536:24 - So how do we handle the bucket part?
536:25 - Let's go ahead and study the docs.
536:27 - So this time we want to use a storage service.
536:30 - Now this is the storage service
536:32 - and it has all the methods,
536:33 - how you can list all the files, create the files,
536:35 - get files, update files, delete file.
536:38 - First for me is the create file.
536:40 - I want to upload a file.
536:42 - So it simply is a method which says create file.
536:44 - In my case, notice here,
536:46 - it gives you bucket ID, which we have already.
536:48 - Then you have to provide a unique ID for the file.
536:51 - And then you can simply say document.getElementByID
536:54 - or however the way you want to grab it.
536:57 - Probably there is something definitely wrong
536:59 - with the scrolling because I can see
537:00 - there is more content here, but it's not visible.
537:03 - Is it my browser just?
537:06 - Yeah, we can see that the scrolling,
537:08 - probably my browser is going that.
537:10 - With this, this reminds me,
537:11 - let's go back into databases
537:13 - and let's see how the update document looks for
537:16 - and collection ID and the document ID.
537:19 - Notice here, now it says and mentioned this,
537:21 - there is a unique document ID which is required
537:23 - and that's exactly what we used.
537:25 - Probably there is something in,
537:27 - when you scroll this, now it's scrolling.
537:31 - But if I open this, it doesn't scroll.
537:33 - Probably I can report a bug to them.
537:36 - Anyways, we got the concept.
537:38 - So coming back onto the point, which I was saying,
537:41 - that let's go and talk about storage.
537:43 - We want to create a file.
537:44 - The rest of the stuff we have already taken care of.
537:46 - Now we need to just run through the method of create file.
537:49 - Whoever is going to use this method will pass me a file.
537:53 - Just like here, they are passing the file, just like that.
537:56 - Let's go ahead and now in the same file,
537:58 - I'll just write it for it.
537:59 - Maybe you want to use it.
538:00 - This is where we are using the storage service.
538:05 - Okay, so again, async and we'll be calling this one
538:08 - as upload file files.
538:10 - Now we are just dealing with one.
538:12 - Upload file and there we go.
538:14 - Now how we are going to deal with this one?
538:16 - Exactly same.
538:17 - Go with the try catch, borrow the catch method, copy that,
538:23 - paste it up here and this time if the problem occurs,
538:26 - it is coming up from upload file.
538:31 - What do you want to do in the try part?
538:33 - We obviously want to return after awaiting
538:35 - and sending this to bucket.
538:37 - Same concepts, this.bucket.create file.
538:41 - It takes couple of parameter.
538:43 - First one, the bucket ID, which we can grab
538:45 - from conf.bucket app, right?
538:49 - Bucket ID, there we go.
538:50 - We need a unique ID.
538:51 - So obviously we don't have a unique ID,
538:53 - but if I remember in the auth,
538:56 - we actually, no, we didn't actually worked on this one,
538:59 - but in case you don't know this,
539:01 - we should have dealt with us, probably anyway.
539:04 - You can see that there is a way
539:06 - how you can grab the unique ID.
539:08 - So notice here there is a file ID,
539:09 - but app right also gives you something
539:12 - very interesting known as ID.
539:14 - So here, inside the conf,
539:18 - just like we were able to grab this,
539:19 - let's grab the ID and you'll be able
539:22 - to provide unique IDs with that.
539:24 - Although you can use nano IDs or something,
539:26 - in case you wish to, I don't wish to,
539:28 - I just want to use app right services.
539:30 - If they're directly available to me, why to be bothered?
539:32 - Anyways, so once we have this ID,
539:35 - now I have to give a unique name to the file.
539:37 - So I'll just say ID.unique, and that's a method.
539:40 - So there we go.
539:41 - And then provide the file, that's it.
539:44 - App right will take care of the rest of the things
539:46 - that hey, I'll upload the files,
539:47 - we'll provide a unique ID and we'll return you
539:49 - all the path that you require for this file.
539:53 - So public path will be given to you
539:54 - so that you can display them.
539:56 - So this is basic of how you upload a file.
539:59 - Can you assume how you're going to delete the file?
540:01 - Let me go ahead and copy this
540:03 - and we'll go up and paste this.
540:06 - Let's move a method for delete file.
540:11 - So delete file.
540:12 - Obviously, this time you don't need a file,
540:15 - you need just an ID of the file.
540:17 - So just provide me the ID of the file
540:20 - and I'll just delete it.
540:22 - Okay, how can we modify this?
540:23 - Let's see how to delete a file.
540:25 - Obviously, give me the unique ID.
540:27 - So bucket ID you need to give me,
540:29 - file ID you need to give me, that's it.
540:30 - Two methods and it can do the job.
540:33 - So bucket ID I've already provided you
540:35 - but the method is delete file.
540:37 - So let's go ahead and use that.
540:39 - Delete file, I'm giving you the bucket ID
540:41 - but I cannot give you this file ID unique.
540:44 - It generates unique ID every single time, obviously.
540:48 - And here I cannot give you file
540:49 - but rather I have to give you file ID.
540:53 - So whoever is using this method need to provide me this.
540:56 - And this time if the error comes up,
540:59 - it comes up from delete file.
541:02 - All right, so you have learned how you can upload images.
541:05 - By the way, this exact method works
541:06 - if you're uploading PDFs,
541:08 - anything else that you probably want to deal with.
541:11 - So delete file.
541:12 - Now one more last thing I would like to discuss
541:14 - before we sum up this entire lecture.
541:16 - You can see that AppWrite has so many things,
541:18 - list files, create files, get files, update file,
541:20 - delete file but what's interesting is,
541:23 - is you can also get file for the preview.
541:24 - What's interesting about this file preview is,
541:27 - file preview, this method supports preview of these images.
541:31 - So entire image doesn't get onto your network bandwidth
541:36 - but rather it's a cutting
541:37 - and the resizing of your preview image.
541:39 - So for example, preview supported only for the image
541:42 - for size smaller 10 MB.
541:44 - So let's just say you uploaded a file of eight MB.
541:46 - It's not eight MB in the preview, it's just few KBs.
541:49 - So it saves.
541:50 - So in our application, we also want to give this feature
541:52 - that somebody who wants, don't want the entire file,
541:55 - probably just want a preview of it, lower quality file.
541:57 - We can actually give that.
541:59 - So let's call this one method as well.
542:01 - And the good thing about this one is,
542:04 - since there is nothing too much of operation going on,
542:07 - you don't need to make it async await.
542:09 - Although if you do, that's great
542:11 - but there is nothing being async await in this one.
542:15 - I'll show you why this is because if you notice the method,
542:17 - it's just storage.get file preview
542:20 - and it's ridiculously fast.
542:21 - Again, anyways, it might take some time.
542:23 - So we'll see that.
542:24 - Let's call this one as get file preview.
542:29 - And provide me the file ID.
542:32 - And what we're going to do is this is like that.
542:36 - And we can go ahead and simply say return this.bucket.
542:41 - And we can just work with the method, get file preview
542:44 - and provide you the detail.
542:46 - The first one is conf.bucket ID, app.writebucket ID.
542:50 - And the second one is a file ref, file ID.
542:55 - And once this is there,
542:59 - you don't want to return it like this
543:00 - because if you notice it carefully, it's not mentioned here.
543:06 - Let's see what's the return type that we have response.
543:09 - So response is actually a big object file for view.
543:13 - And you need to actually do a console log of this.
543:15 - And once you do the console log of this,
543:17 - you will find out that this whole thing
543:20 - actually needs to be worked a little bit different.
543:22 - So I'll just come up here.
543:25 - And once this is all done,
543:26 - then I go ahead and say .href, this is the one.
543:30 - You can get host name and all these things.
543:32 - Yeah, a little bit sneaky, but yeah, this works nicely.
543:35 - If this doesn't work, we'll come back here.
543:37 - We'll make it a sync.
543:38 - We'll just insert a wait keyword here.
543:40 - But I have noticed while working a previous version
543:43 - of this application that this works directly fine.
543:45 - So if there is no need of it, I could just add it.
543:48 - Okay, so this is all the method we have studied in depth
543:52 - about how to upload the files, delete the files,
543:54 - get the previews.
543:55 - If you really want to work with more methods,
543:57 - you can definitely work with that.
543:59 - Now you have the idea.
544:01 - Last thing, just like we did,
544:03 - we'll just go ahead and call this one as service.
544:05 - And this will be a new service.
544:09 - We create an object out of this class
544:10 - and we export this one.
544:11 - So export default and let's export service.
544:17 - There we go.
544:18 - This will make our life so much easier.
544:19 - Of course, there might be chances
544:21 - that this might have some bugs, some issues.
544:23 - We need to fix them up.
544:24 - These can be tested while we actually work on the project
544:27 - in the front-end side of it.
544:29 - But at least our backend part is all done.
544:31 - And this really, I'm super happy that now we are actually
544:34 - able to write JavaScript using App Write.
544:36 - We're building full stack applications.
544:38 - So this is my backend that I have all written here.
544:41 - Great work there in the backend part.
544:43 - Let me go ahead and I'll just commit this one as well.
544:46 - Let me just go ahead and add this one.
544:49 - Add service.
544:51 - Service for database and storage.
545:01 - All right, let's go ahead and do a quick commit
545:04 - and I'll push this.
545:04 - Yeah, some people really say that.
545:06 - Hey, you should do it from command line.
545:08 - No, I feel here, it's nice and easy.
545:10 - All right, so this is all the knowledge
545:12 - that you really need to have to interact
545:14 - with App Write databases and storage.
545:16 - Now you're completely equipped with handling
545:18 - any kind of thing, all the queries,
545:20 - anything that you want to do.
545:21 - This, I hope that this video has given you enough
545:24 - of the knowledge to work things on your own now.
545:26 - That's it for this video.
545:27 - From the next video onwards, we'll start working
545:29 - on the front-end side of the application.
545:30 - We'll walk you through all the caveats,
545:32 - how to build a full stack application,
545:34 - which is authenticated, some pages are protected
545:36 - and all these things.
545:38 - All right, so that's it for this one.
545:39 - If you find this video interesting,
545:40 - do leave a comment section.
545:41 - I really, really need some of your help and support.
545:44 - Your comment, just a like, just a heart.
545:46 - It gives me so much of motivation.
545:48 - I really need it to continue to do all of these videos.
545:51 - Thank you so much.
545:52 - Let's catch up in the next video.
545:56 - Hey there, everyone.
545:57 - Hittai Sheer back again with another video
545:59 - and it's been quite wild.
546:00 - In fact, few good weeks.
546:02 - And if you're watching this video in just one go,
546:04 - then obviously we are meeting back-to-back.
546:06 - But if you're watching it on my main channel
546:08 - as the series is progressing,
546:10 - yes, I was gone for a couple of weeks.
546:12 - A lot of health issues, but thank goodness I'm back.
546:15 - It's winter here.
546:17 - And the best part is I do write my strategies
546:19 - to record these videos.
546:20 - Otherwise it would be so much difficult.
546:22 - Probably I would have to re-record the entire,
546:25 - this segment, but thank goodness I write my strategies
546:28 - to teach these topics.
546:30 - And that makes life a little bit easier.
546:32 - So in this video, we're going to continue
546:34 - from where we have left in the last videos,
546:36 - which was just handling the app right.
546:38 - So far we have handled the app right.
546:40 - Now we are going to see that how we can make
546:42 - those web requests and if we have any issues,
546:44 - how we can debug them and how the application
546:47 - and our flow will work.
546:48 - I don't expect anybody to simply go ahead
546:51 - and just build these kinds of application in just one go,
546:54 - because simply that's not possible.
546:55 - So I'll walk you through what is going to be the strategy,
546:58 - how we are going to deal with that.
546:59 - First of all, I want to introduce the React Redux here,
547:03 - especially the Redux toolkit,
547:05 - so that we can manage the state of the application.
547:08 - On top of that, we'll be needing a couple of pages.
547:10 - What goes inside those pages, we'll worry about that later,
547:12 - but we'll be needing a few pages.
547:14 - The reason for introducing these pages
547:16 - is because we obviously will have the routing
547:18 - in our application.
547:20 - So some page are going to be protected
547:22 - that they cannot be visited if you're not logged in,
547:25 - but some pages are available to everyone.
547:27 - For example, if you are not logged in,
547:29 - the signup page is available,
547:30 - but if you're logged in,
547:31 - the signup page is not available for you.
547:33 - So there are certain pages
547:34 - which are available to non logged in users,
547:36 - certain pages are available
547:37 - which are for the logged in user.
547:39 - So we need to figure out a way and mechanism,
547:42 - a logic to do so, it's very simple logic.
547:44 - I'll walk you through with the two ways
547:46 - of understanding the code
547:47 - so that you can probably understand it
547:49 - at a very better pace.
547:51 - All right, so quite a lot of stuff that we have to do.
547:54 - Let's go back and try to share my screen.
547:57 - So this is my screen that we have.
548:00 - First, let's open up the Redux part.
548:02 - So I'll just go ahead and work with that.
548:05 - So I'll just go on to Google
548:06 - and we'll go into Redux toolkit.
548:10 - That's the one we are looking up for.
548:12 - The getting started part,
548:14 - it should be fairly easy with that.
548:16 - And we just need two things.
548:18 - The first one is Redux toolkit
548:19 - and we of course need React Redux
548:21 - so that it can act as a binding agent
548:23 - between the Redux and the React.
548:25 - Redux is an independent library in itself.
548:29 - You can use it with the Vue.js,
548:31 - probably anything else that wherever you want
548:33 - to maintain the state, you can use that.
548:34 - I'll copy that and obviously we'll install this.
548:38 - So quite a while.
548:39 - And now let's go ahead and install the toolkit first.
548:43 - It doesn't really matter which one you install first.
548:45 - But since it was mentioned in the documentation,
548:47 - I'll just install that.
548:49 - We also need the router as well.
548:51 - So let's go ahead and since we are already here,
548:53 - let's install that.
548:55 - So I'll just go ahead and say React router DOM.
548:59 - That's exactly what we need.
549:01 - And that's how we always install them.
549:03 - We simply go ahead and say example tutorial.
549:06 - I just want to install this.
549:08 - What's new?
549:09 - Probably not.
549:10 - Tutorial, I think that's a better place to install it.
549:14 - Can you give me a point where I can install it?
549:18 - Probably not.
549:20 - Okay, give me a step to install it.
549:23 - Otherwise I have to do NPM install React router DOM.
549:26 - I'll probably do that.
549:27 - Okay, so I'll just go ahead and say NPM install
549:31 - React router DOM, router dash DOM.
549:38 - That's the easiest way to install this.
549:41 - Oh, React, oh, my bad.
549:43 - I mistyped it.
549:44 - React router DOM.
549:49 - Okay, that should be all.
549:51 - So we have couple of libraries being installed
549:53 - in our system now.
549:54 - We have Redux toolkit.
549:55 - We have React router DOM.
549:57 - This is the basic React DOM.
549:59 - We are not interested in that.
550:00 - We are interested in the React router DOM.
550:02 - And we have the React Redux, the binding library for that.
550:07 - Yes, we will be needing couple of more,
550:08 - but right now let's handle what we have in it right now.
550:12 - Okay, one common thing that we are going to do
550:14 - is in this application, in fact, any application
550:17 - that you'll be working through,
550:18 - you will have a lots of pages in them.
550:21 - Our application also has a few good pages.
550:24 - What goes inside that pages,
550:25 - we'll worry about that later on in the component part.
550:27 - But right now, I think it's a good idea
550:29 - that we just create those pages and try to figure out
550:32 - that how we can inject our state management
550:34 - as well as how we can protect some of these pages.
550:37 - So let's go ahead and practice that.
550:39 - That's a good idea.
550:40 - So I'll just do a quick LS
550:41 - and I can see all of my files and everything are here.
550:44 - I will go inside the source.
550:47 - So let's go into the source.
550:49 - And if I do a quick LS,
550:50 - I can see app write and all these files and folders appear.
550:54 - I think let's create a new directory in here.
550:56 - I want to do this via the command line
550:58 - because it's much more easier and faster this way.
551:01 - Feel free to use your mouse.
551:02 - I think this is faster approach and better approach for me.
551:05 - So I'll just go ahead and say this is pages.
551:07 - Now we have pages.
551:08 - I can go into the pages as well.
551:11 - And I'll just open up these pages
551:13 - so that I can show you what all the pages
551:15 - that I want to create.
551:16 - So obviously, this is all the pages that we have.
551:20 - So we'll have add post.jsx.
551:24 - And by the way, touch is utility
551:27 - which helps you to create the files.
551:29 - And since they are so many files,
551:30 - I don't want to just right click new file, new file.
551:33 - I just want to create them for here.
551:34 - And we'll be having one for all posts.jsx.
551:38 - So add post is going to be where I'll be giving a form
551:41 - where user can add a new post.
551:43 - And all post is where all the posts
551:45 - are going to be listed in the card format.
551:47 - And then we'll be having an edit post.jsx.
551:51 - This is where if you are owner of the post,
551:54 - you can hit the edit button and we'll give you a form.
551:56 - Again, the same form will be utilized of the add post
551:59 - but we'll be just pre-filling the data into that.
552:01 - That's how it is all done.
552:03 - And we'll be having one home.jsx.
552:06 - This is just a homepage for you, for users.
552:10 - And then we'll be having one login.jsx,
552:14 - of course for login.
552:15 - We'll be having one post page as well
552:18 - if you want to read an individual post, so JSX.
552:21 - And one last one, which is sign up.
552:23 - So we'll be having sign up.jsx.
552:28 - Now, if I go ahead and do this,
552:29 - this creates all these posts and everything for me.
552:32 - That's what I love about it.
552:34 - You could have done that right click as well,
552:36 - but that's okay.
552:37 - As of now, I'll just use a utility, rfce,
552:40 - which is by the way a add on of a VS code
552:44 - that you can simply have.
552:45 - So I'll just have an React functional component
552:47 - just like this.
552:48 - So it automatically detects the file name
552:50 - and we'll be just having this one.
552:51 - Right now, no logic is there.
552:53 - We'll be just putting these basic templates here
552:56 - so that we can import and export them.
552:58 - rfce, all post, same goes for edit post.
553:02 - rfce, there we go.
553:03 - I'm not doing anything at all,
553:05 - just providing these values.
553:07 - What goes inside them?
553:07 - We'll definitely have a detailed talk on them.
553:10 - If we need any more pages, we'll obviously create them.
553:14 - rfce, save that, and one more.
553:17 - rfce, there we go.
553:18 - So now we have all the pages.
553:20 - So one task is done.
553:21 - Let's go ahead and close that.
553:22 - I can actually close others just like that.
553:25 - There we go.
553:26 - So all the pages are there.
553:27 - Right now, all these pages are available.
553:30 - In fact, if I just go ahead
553:31 - and set up the router and everything,
553:33 - almost everything should be immediately available to me.
553:37 - Now, one more thing that we are going to do here
553:39 - is inside the source, let's create one more folder
553:43 - where we are going to handle a couple of things.
553:45 - I'll show you how to do that,
553:47 - but first let's create a new folder
553:48 - and call this one as component or components.
553:52 - That would be better.
553:54 - Now inside the components,
553:56 - we'll just create only one file as of now,
553:59 - which will be simply the auth layout,
554:02 - how the authenticated layouts will be there.
554:04 - Right now, there is no logic into them,
554:06 - but we'll obviously will creating them.
554:09 - Right click and a new file inside the components.
554:12 - Let's call this one as simply auth layout.jsx.
554:18 - Okay, simply rfce, nothing there.
554:21 - Instead of auth layout,
554:22 - let's go ahead and call this one as protected.
554:25 - Again, it's up to you.
554:26 - If you want to call them something else,
554:28 - totally up to you.
554:30 - I'm calling it as protected as,
554:31 - because if I want to protect any of the page or anything,
554:35 - I'll just wrap all these things around this component.
554:38 - So this will be serving just single purpose
554:41 - that anything inside this layout
554:44 - is going to be something which is authenticated.
554:45 - If you are authenticated, I'll serve you.
554:48 - This will act as a wrapper or by the wrapper means
554:51 - I'll simply accept some of the children here.
554:55 - And all I'll do is render these children.
554:58 - That's the whole idea.
555:00 - So instead of returning this kind of a thing,
555:02 - I'll just say that, hey, just return the children up here.
555:05 - So I'll just go ahead and use it like this
555:08 - and we'll go children.
555:10 - Definitely, I'll go ahead and modify this a little bit,
555:13 - but right now this is the goal.
555:15 - You accept some parameter, you render them.
555:17 - But right now this of the component doesn't know
555:19 - that which one to render, which one to doesn't render.
555:22 - And in order to actually have this,
555:24 - we will accept a simple authentication as a parameter.
555:29 - Authentication and that authentication
555:31 - by default will be true.
555:33 - If the authentication is true,
555:35 - that means render this page,
555:36 - otherwise don't render this page.
555:38 - But right now we have no idea from where this authentication
555:40 - is going to come to us and how this will work.
555:43 - So obviously this is a little bit confusing point
555:45 - at this point, but these are very common scenario
555:48 - when you work with any React application.
555:50 - You have some kind of protected page or an auth layout,
555:53 - which helps you to render conditionally
555:55 - whether this component should be rendered,
555:57 - this page should be rendered or should not be rendered.
556:00 - So we'll work on that.
556:01 - We will also work on,
556:02 - this will be responsible for navigating the people.
556:04 - If you're not authenticated,
556:06 - let's redirect you on the login page.
556:08 - If you're trying to access any resource,
556:09 - which you shouldn't be,
556:11 - then let's redirect you to login page.
556:12 - If you're already login page,
556:14 - we will make sure that you don't access the login page
556:17 - or sign up page.
556:17 - So that logic will go in here.
556:19 - But again, this is just the basic right now
556:21 - just to help you to understand what is going on
556:23 - with the flow of this application.
556:25 - All right, this is all done.
556:28 - We'll come back on to this one.
556:29 - Right now, let's go into another part,
556:31 - which is the Redux part of it.
556:33 - A lot of people are afraid of Redux.
556:35 - You shouldn't be.
556:35 - We have played enough in this entire series.
556:38 - And I'll walk you through how the Redux will work.
556:40 - And we'll just manage one thing
556:41 - and I'll give you assignment to manage more things.
556:43 - That's how you learn when you painfully,
556:46 - you take some pain and you try to work
556:47 - with these assignments.
556:49 - So right click on the source and create a new folder
556:52 - and we're gonna call this one as simply store.
556:54 - The name of this folder is not important at all.
556:57 - You can call this one as Redux.
556:59 - You can call it as a Superman Redux,
557:01 - doesn't really matter.
557:02 - We'll create two files into this one.
557:04 - The next file is going to be store.
557:06 - Again, some people like to have this store
557:08 - in the root of the application, nothing wrong in that.
557:11 - But I'll just keep it all separated up here.
557:13 - I'll also create a slice in the Redux toolkit.
557:16 - There is a concept of creating slices.
557:18 - We discussed that in the previous video as well,
557:21 - where I showed you the crash course on the Redux toolkit.
557:23 - So please watch that in case you feel
557:25 - a little bit uncomfortable here.
557:27 - And we'll be having this auth slice.js of course.
557:32 - Okay, first of all, let's manage the store part
557:35 - because that's the easiest of all.
557:37 - In this one, all we need to do is configure the store.
557:40 - So we're going to simply say, hey, I want to confi,
557:43 - confi, gur, store, no suggestion, configure store.
557:49 - And that will come from Redux toolkit.
557:54 - Bothering me a little bit, yeah, there we go.
557:57 - Once I have this one, then I have to create a store
557:59 - from this configure store.
558:00 - So I'll just say that, hey, I created a store
558:03 - from configure store.
558:04 - This is a method which takes object as parameter.
558:07 - Now what goes inside this one?
558:09 - This takes slices, or you can say reducers as well,
558:12 - but we don't actually make these reducers appear.
558:15 - That's exactly this auth slice is being made for.
558:17 - You create all of your reducers here.
558:19 - The way how we create reducers in this one here
558:22 - is pretty simple.
558:23 - We simply go ahead and first say
558:25 - that I want to create a slice.
558:27 - So create slice, there we go.
558:31 - And this one comes from the Redux toolkit.
558:33 - Then every single slice needs to have an initial state
558:36 - so that it knows when I get started,
558:38 - what should I do or how I should behave.
558:41 - So for this one, we'll just go ahead and say,
558:43 - initial state.
558:47 - Feel free to name it anything, doesn't really matter.
558:49 - Initial states, the status is going to be false.
558:52 - We are using it to keep a track of authentication
558:54 - of the user.
558:55 - So if the status is false,
558:56 - we'll assume that the user is not authenticated
558:59 - and we'll also have the user data.
559:01 - So if the user data is there,
559:03 - then obviously it will be filled up.
559:04 - Otherwise, by default, it will be null.
559:06 - There is nothing inside the user data.
559:08 - User data is something which App Right will give us back.
559:11 - For example, what's the username, what's the email,
559:14 - what's the ID or any information you can just add up here.
559:17 - Now this is the initial state,
559:18 - but the next point is to create the slice.
559:21 - Just like we created the store, it's exactly same.
559:23 - So we go ahead and say auth slice
559:26 - and that auth slice is being created by create slice.
559:28 - Of course, lower create slice.
559:30 - It's a method which takes an object as a parameter.
559:33 - So that's what it does.
559:34 - Now this takes couple of parameters,
559:36 - not just one the initial state, couple of parameters.
559:38 - First of all, you have to give it a name
559:40 - so that although this is auth slice, it will be very unique,
559:43 - but it is a good idea to give all of your slices a name
559:45 - so that you can refer them back with this name.
559:48 - Then passed up the initial state
559:49 - of what the initial state of the slice is going to be.
559:52 - And then you create your reducers.
559:54 - So this is your reducers.
559:56 - Now reducer is an object and inside this object,
559:59 - you create all the methods or whatever you are tracking.
560:03 - Now good thing is you don't have to worry about,
560:06 - you might have heard the thing in the reducers
560:08 - and especially the redux that,
560:10 - hey, don't mutate your state or something.
560:12 - You don't have to worry.
560:13 - Redux has taken care of that behind the scene.
560:15 - You just go all crazy now,
560:17 - redux take care of that behind the scene.
560:19 - That's a good thing.
560:20 - So inside this reducers,
560:22 - the first reducer or the method that I have is login.
560:26 - As soon as somebody creates a login,
560:28 - we'll give him an access of state and action.
560:31 - So as soon as you create any method inside the reducer,
560:34 - you have already an access to the state and the action.
560:37 - State is that current state of what this store
560:41 - is actually depicting right now.
560:42 - So that's what it is.
560:43 - Action is something,
560:45 - when somebody wants to access the reducers,
560:48 - they use actions to reach you out
560:50 - so that they can provide you the payload,
560:53 - they can invoke these actions and all these things.
560:55 - So pretty easy.
560:56 - This is a method.
560:57 - Now just go ahead and somebody will pass us
561:00 - in the state, the status.
561:02 - So if he's logged in,
561:03 - then obviously we need to change the status to true.
561:05 - And they will also provide me a payload.
561:07 - The payload is accessible in the action.
561:09 - So I'll just go ahead and say state.action.
561:14 - Actually, not the action like that, state.userData.
561:17 - Somebody will be providing me this user data inside this.
561:21 - And I'll just go ahead and say,
561:22 - I'll access it via the action.payload.userData.
561:28 - All right, so that is it.
561:30 - So now something really nice to remember.
561:33 - This is something that we are doing.
561:35 - If somebody is calling this login
561:37 - and is providing me the status,
561:38 - that means, yes, after logging in,
561:40 - once you hit that API, get the data back,
561:43 - you are 100% sure that, okay, you are logged in.
561:46 - Then you reach out, hit this reducer,
561:48 - so I'll make the status as login.
561:50 - And via the payload, you'll give me the user data
561:53 - that I'll fulfill into this one.
561:55 - This will now reach to the store
561:58 - inside this configure store.
562:00 - And it will be available to anybody from any component,
562:03 - you could directly reach out to store
562:04 - and can access that data.
562:06 - That's why these are super helpful.
562:08 - Similarly, we'll be having a logout reducer as well.
562:10 - So we'll just go ahead and say,
562:11 - hey, let's have a logout.
562:13 - Same, exactly same, repetitive stuff.
562:15 - We'll have the state.
562:17 - You can optionally have the action as well,
562:19 - but in this case, we don't require
562:20 - because once somebody hits a logout,
562:22 - we'll just flush out everything.
562:24 - But still, there is nothing which is stopping you
562:26 - to have an access to the action here and the payload here.
562:29 - You can do that.
562:31 - I'll just go like this,
562:32 - and I'll just refresh the state.
562:33 - So the status will go to false
562:36 - and we'll just remove everything from the data as well.
562:39 - So state.userData.
562:41 - By the way, you can add more in the initial state
562:43 - and have more data if you wish,
562:45 - but right now we'll just keep it that much.
562:47 - Simplistic stuff.
562:49 - Okay, now once you are done with that,
562:51 - the job is not done because you have created a auth slice,
562:54 - but there is a little bit more to it, by the way,
562:56 - in case you missed this, take a screenshot, pause it here.
562:59 - This is not enough.
563:00 - We need to export this as well.
563:02 - The most important thing is what people are looking up for
563:06 - is definitely these methods, login and logout,
563:08 - so that they can access that,
563:09 - but also some of the folks are looking
563:12 - for this entire reducer.
563:14 - Who are those some of the folks?
563:15 - Your store, yes.
563:16 - So we need to export not only these methods,
563:18 - but also the reducer.
563:20 - So let's go ahead and do that.
563:21 - First of all, let's export the reducer.
563:23 - That's my default.
563:24 - Export default auth slice,
563:27 - and just go ahead and export this reducer.
563:30 - Reducer, reducers.
563:34 - When did I named it as reducers?
563:39 - Let me just quickly check this.
563:40 - This is seems like a small bug.
563:44 - All right, welcome back.
563:45 - Yes, I had to look into the documentation,
563:47 - and that's how the real world developer works.
563:49 - We don't remember everything.
563:50 - We always consult the docs,
563:52 - maybe stack overflow these days,
563:54 - which add GPT to figure it out.
563:56 - And yes, this is how it works.
563:57 - So we can see we are following almost exactly like that.
564:00 - So notice here, here we are saying reducers,
564:04 - but at the time of export,
564:05 - we are actually saying counter slice dot reducer,
564:07 - which does it.
564:08 - So Redux in itself is kind of,
564:11 - it's wrong to say library,
564:12 - it's more of a framework in itself,
564:14 - which has its own way of dealing with the things.
564:17 - So we just export exactly like this,
564:19 - like actions, reducers.
564:20 - So yes, it might be a little bit confusing that,
564:23 - hey, here it is reducers,
564:25 - and there it is reducer only singular.
564:27 - But yeah, this is how the documentation works.
564:29 - So we'll just follow that, okay.
564:31 - That reduce removes my confusion as well.
564:34 - Yes, this is, but it's a good one, a good one.
564:38 - I'll try to investigate it more to study more about it,
564:40 - that why this is the case or how this is the case.
564:43 - Okay, so the step one is done
564:44 - that we have exported the reducer.
564:46 - But as we know, we have to export these singular methods
564:48 - so that any file can actually use these methods as well.
564:52 - Pretty easy.
564:53 - We're gonna go ahead and say export const
564:55 - and then all the methods that you want to export,
564:57 - like login, log out.
565:00 - And we simply go ahead and say this one
565:02 - is going to be auth slice dot actions.
565:08 - There we go, bothering me a little bit.
565:10 - We need to have a space around, there we go.
565:13 - So this is what we have as of now.
565:15 - So both the things are done.
565:16 - Now step one is to get onto the store
565:19 - and first of all,
565:20 - import these reducers into the store
565:22 - and make sure your store is aware of that.
565:26 - Not really, but aware of that.
565:28 - So we'll just go ahead and say auth slice from auth slice.
565:30 - Now go into the configure store.
565:32 - This store need to have the reducer, just like this.
565:36 - And all the reducers that you have,
565:38 - you have to actually mention it here.
565:40 - So my reducer name is auth, that is my auth slice.
565:43 - If you have more, you can just put a comma and have it.
565:45 - Like for example, you're tracking a blog here.
565:48 - So your blog slice, blog slice goes like that,
565:52 - of course, with a space.
565:54 - So you can just go ahead and work on with that.
565:55 - I don't have it, I have just one.
565:57 - So I'll just save it one.
565:59 - I need to export that so that I can use it wherever I like.
566:02 - I'll just go ahead and say export, export default and store.
566:12 - Not like that, there we go.
566:14 - So the two things, the major things are done
566:16 - and we have this auth slice, we have store.
566:19 - So at least the preparation part of our redux is all done.
566:23 - Let's go ahead and work on with how we can actually
566:26 - use these stores and work with that.
566:28 - Now for this, we'll go into our,
566:32 - where is our main.jsx?
566:34 - This is where it is.
566:35 - So inside the main.jsx, we can work with that.
566:38 - If you are working on something like index.jsx,
566:41 - that's also fine.
566:42 - But what we are looking for is the main
566:43 - where our application is loading.
566:45 - This is where I have to work on.
566:46 - Now, I'll first and foremost,
566:49 - I don't want to wrap it like this.
566:51 - I'll just create a router for this one
566:53 - and then we'll work on with this one.
566:55 - So first of all, let's go ahead and create a router.
567:00 - So I'll just come here.
567:02 - Okay, this is fine.
567:03 - Okay, first of all, let's go ahead and create a router.
567:09 - Router and router will be created by create browser router,
567:14 - and this is a method which takes an array.
567:18 - And we need to import this.
567:21 - Right now there is nothing which is importing it.
567:23 - So import create browser router,
567:29 - and that will be coming from react router DOM.
567:35 - So this is the first one.
567:37 - So this is the first one.
567:39 - React router DOM.
567:42 - So this is the first part.
567:45 - We haven't worked on how this will be taking care
567:47 - of the pages yet, but we have a create browser router
567:50 - and we have a router provider as well.
567:53 - Router provider, okay.
567:56 - So assuming that the router is all done,
567:58 - of course it is not, but assuming that this is all done,
568:01 - let's create this one first.
568:03 - So the way how it works is now instead of just directly
568:08 - rendering the app, we don't do this.
568:10 - We actually remove this part.
568:12 - This app will go inside the browser router
568:14 - at the homepage that, hey, this is how we load the app.
568:16 - But for a minute, just remove this one part.
568:19 - And all we're going to do is have this router provider
568:24 - self close it.
568:26 - And now we'll say that, hey, router will be this router
568:29 - that we have just created.
568:31 - Right now there is nothing, but don't worry,
568:32 - I'll walk you through that how this is being done.
568:34 - So this is the step one, how you configure all of your router.
568:37 - We'll go inside this array, provide the paths
568:39 - that home is governed by app
568:40 - and what all components basically we are loading
568:43 - or we can say the pages that we are loading.
568:44 - So that's the basic of it.
568:46 - But we also want that we should have access to the store
568:49 - as well, that's the most important part for us.
568:51 - So how we can have the governing
568:54 - that all of my components know that there is a store.
568:58 - So for this, the major role is that everything
569:01 - like all this router provider at every single time
569:05 - there should be wrapped by the store.
569:06 - That is the problem statement.
569:09 - So let's go ahead and first import that.
569:11 - So I'll just go ahead and say I need a provider
569:14 - and that provider is not from the React,
569:16 - we need from React Redux, there we go.
569:20 - Now, the next step is really simple, absolutely simple.
569:23 - This browser router, this whole thing needs to be wrapped
569:27 - with this provider, provider, there we go, close it.
569:33 - And this needs to go inside this.
569:37 - There we go.
569:38 - But just putting this doesn't means that it is already
569:40 - automatically aware of the store,
569:42 - we need to import the store as well.
569:44 - So we'll just first say that, hey, let's bring up the store.
569:47 - We can probably get it here, import store from
569:53 - and the store is going to come up from,
569:55 - we'll go inside the store
569:57 - and there will be having store.js.
570:00 - And now this provider can say that what is your store?
570:03 - Just name the store.
570:04 - So simply go ahead and say the store is going to be store.
570:10 - There we go.
570:11 - Now this is all done, properly configured that, hey,
570:14 - the store, since this is my store,
570:17 - this is my state of the application,
570:19 - every page is going to be governed by the state.
570:21 - That is why I'm wrapping provider first
570:25 - and then everything is going to be governed by this.
570:27 - So I'm just governing it.
570:28 - So I'll just move it a tab so that it's easier.
570:30 - Okay, this is the first part
570:32 - of how this is going to be done.
570:33 - And by the way, this browser router that you're creating,
570:36 - that can be done by multiple ways.
570:38 - There are kind of a sandwich method as well
570:42 - in which you just create components inside the components
570:45 - or you can also provide an object into this one.
570:47 - So we'll go with the object one.
570:49 - So here is our object that goes like this.
570:51 - And then I'll just go ahead and say, hey, path,
570:54 - what is the path?
570:55 - I want to have a path of slash,
570:56 - who should be the element which should be rendered
570:59 - when somebody visits this path?
571:01 - So obviously in this case, now we say the element
571:03 - which will be rendered is going to be the app.
571:07 - There we go, self-closing, there we go.
571:09 - Now the next step is, do we have sub paths
571:13 - after this application, after this slash,
571:15 - do we have slash sign up?
571:16 - Do we have slash login?
571:17 - Do we have slash post?
571:19 - Yes, we do have.
571:20 - That all goes into the children.
571:22 - So as you can see children right now it says object,
571:24 - but no, it is not an object.
571:26 - First of all, this is the proper syntax
571:29 - and this is further down again an array.
571:33 - What all the children do you have?
571:35 - Okay, so inside this, I'll have multiple of these children.
571:38 - All these are objects just like this.
571:40 - First of all, what is the path that you want to grab?
571:43 - So the path of the children is going to be,
571:46 - first of all, the slash and wherever that slash is,
571:49 - by the way, we need an access to the pages.
571:51 - Yes, we have homepage.
571:52 - On the slash we'll load the homepage.
571:55 - We'll just say element,
571:57 - who is the element you want to render here?
571:59 - We want to render home, which is not yet imported.
572:03 - Home is not yet imported.
572:06 - So now we need a lot of list of these imports.
572:10 - So import home and we'll be importing.
572:13 - Now you guess the idea why I created the pages.
572:16 - So inside these pages, we have home.jsx.
572:20 - There we go.
572:21 - You get this point that how this is all being done.
572:24 - So this is my slash where the home component will be logged
572:27 - in and all these things.
572:28 - So that's fun.
572:29 - That's basic.
572:31 - But what about the elements like slash login?
572:35 - We need to provide some kind of mechanism to find out
572:38 - that should you be able to access the login or not?
572:41 - Because if you're logged in,
572:43 - you should not access the homepage, the login page.
572:46 - But similarly, you get the point.
572:49 - You get the point.
572:49 - So I'll just go ahead and walk you through
572:51 - that how this is being done.
572:52 - This is another of my sub route.
572:55 - Let's just say the path is going to be a slash login.
572:59 - We know what component we want to mount onto this one.
573:02 - So the element is going to be,
573:04 - you might be wondering, hey, just go ahead and say,
573:06 - you want to go ahead and have login into this one.
573:11 - Just like this, but no,
573:13 - this is where you are a little bit wrong, not wrong.
573:16 - We haven't discussed these kinds of approach.
573:18 - So we'll just first go ahead and say, hey, login.
573:21 - Nope, this is not login.
573:22 - I want it to be from pages slash login.
573:28 - Okay, there's nothing wrong in this approach,
573:30 - but what do we want to do in this one is,
573:32 - instead of rendering this login directly,
573:35 - which doesn't gives me control
573:37 - whether should I show it to you or not,
573:39 - I'll just go ahead and bring in one more component,
573:42 - which I created.
573:42 - So if you remember, we created this component auth layout.
573:45 - It was doing nothing, but time to bring it now.
573:48 - Let's go ahead and say import.
573:53 - And this one is auth layout, I guess, yep.
573:58 - Auth layout, and that will be coming from dot slash components
574:04 - and we have just one auth layout.jsx.
574:06 - Okay, what's so unique that you are going to do
574:08 - with this one auth layout.
574:10 - Now, instead of rendering this,
574:12 - I'll just go ahead and say, first of all,
574:14 - I'll wrap this up with parenthesis
574:15 - so that it's easier for me to write.
574:17 - And I'll say, hey, load this element,
574:20 - which is auth layout, just like this.
574:23 - And inside this auth layout,
574:24 - now let's go ahead and use this login.
574:28 - It could be self-closing.
574:30 - But what's the point?
574:30 - What's the point of having this?
574:32 - Now inside this auth layout, I can provide a prop
574:35 - and I can define whether this page
574:37 - requires an authentication or not.
574:39 - So I can just go ahead and say false, just like this.
574:44 - I can say that this component
574:46 - doesn't require an authentication
574:48 - and I can, based on this logic,
574:49 - I can work on with my auth layout.
574:52 - So you get the idea.
574:54 - Similarly, like login page, exactly same.
574:57 - Similarly, sign up page.
574:58 - Yes, exact copy of this one.
575:00 - So let's go ahead and have a copy of this one.
575:02 - Let's put up a comma.
575:04 - We need to import this first.
575:09 - Sign up from pages, dot slash pages,
575:15 - and we have sign up.
575:17 - And we'll say, no, sign up also, this route sign up,
575:23 - also don't require any authentication
575:26 - and you can load this one, sign up, there we go.
575:29 - Right now, what we're going to do with those authentication
575:32 - is not really important, but let me just show you.
575:35 - And now let's also define one more
575:37 - and you will understand the logic behind it.
575:39 - Let's get one more, copy that.
575:42 - And now the route that we want to go for is all post,
575:47 - posts, maybe yes.
575:49 - Now the element that I want to render for this
575:51 - obviously is all posts.
575:52 - So first let's bring this.
575:55 - Import, and we're going to call this one as all posts,
575:59 - and that will be coming up from pages and all posts,
576:05 - dot JSX, okay.
576:07 - Now for this one, I want that anybody who visits
576:10 - the all posts should be accessible by all posts.
576:14 - But this time the authentication is going to be true
576:17 - because only who are logged in should be able to read
576:20 - all of my posts, that's the logic I'm going for.
576:23 - Now this is having a shortcut.
576:25 - So you can just remove this one
576:26 - if you pass on authentication just like this.
576:28 - This also converts as a true.
576:30 - So that's a shorthand, a lot of people use that.
576:33 - But now I have two situations here.
576:35 - People who will be coming up whose authentication is false
576:37 - like login and sign up, and people who will also be coming up
576:41 - whose the authentication is true.
576:43 - So how can I handle this situation?
576:46 - So there are a couple of ways.
576:47 - Now we'll work on the functionality part
576:49 - of how you're going to do that.
576:51 - So notice carefully how we're going to do this one.
576:54 - So a couple of things are there.
576:56 - First of all, the page is having a requirement
576:59 - that should you be authenticated or not.
577:01 - There is also one more thing, one more variable
577:03 - in the picture which is saying,
577:05 - are you truly logged in or not?
577:06 - Page requires a login is a different thing,
577:08 - but are you logged in or not?
577:10 - We can verify that you are logged in or not
577:12 - by just making a query to the store.
577:14 - That's where the two variables actually come up.
577:17 - And we have to match the two conditions here.
577:19 - All right, so what we're going to do is
577:22 - let's go ahead and one by one.
577:24 - So this authentication part is all good.
577:26 - We are not going to touch that.
577:28 - And just below up here, we'll make couple of queries
577:33 - with the selectors here.
577:35 - So first of all, let's bring up the important part.
577:40 - In case you have not seen the Redux crash course,
577:43 - please go ahead and watch that.
577:45 - We'll be using use selector from the React Redux.
577:48 - We need the navigation as well
577:50 - because we will be redirecting the people use navigation
577:55 - or navigate, yeah, navigate is good, React router DOM.
577:57 - So these are the two ones.
577:59 - Now let's make a query.
578:00 - So we'll say auth status.
578:03 - And we can just query the auth status
578:05 - by using the use selector.
578:08 - And from the use selector, we'll say that,
578:10 - hey, there is a callback here, just like this.
578:14 - And we can say, you give me access to state.
578:17 - And inside this, I can say state dot auth dot status.
578:24 - That's how we worked on it.
578:26 - So this will give me a true and false value.
578:28 - What is your auth status?
578:29 - Is it true?
578:31 - Is it false?
578:31 - Whatever that is.
578:32 - We'll also go and create a simple navigate.
578:37 - Navigate, oops, navigate.
578:41 - And we'll create a navigate from use navigate,
578:45 - just like that.
578:46 - Now we have access.
578:48 - Now I hope you can see we have couple of variables
578:50 - to check for.
578:51 - The first one is authentication,
578:53 - which is also a Boolean value.
578:55 - We also have auth status, which is also a Boolean value.
578:59 - So based on this, you have to figure out
579:00 - that what do you want to do and how do you want to do.
579:03 - Now, since this is a couple of queries
579:04 - are going back and forth,
579:05 - I would like to create a state for myself,
579:07 - which is probably a loader state.
579:09 - So let's go work with that.
579:10 - So I'll just go ahead and say, I'll use loader.
579:15 - And I'll say set loader.
579:19 - And that will be coming up from use state, use state.
579:25 - And by default, it will be true.
579:27 - So your loader is going on.
579:28 - By the way, yes, we have used state.
579:30 - Okay, now comes the logic part,
579:32 - how you are going to deal with that.
579:34 - So as soon as this component loads,
579:36 - you have to make some queries.
579:37 - You have to run these auth status
579:39 - and you have to figure out how this is all going on.
579:41 - So that based on this,
579:42 - you can render some other things.
579:44 - Because right now this is not,
579:46 - this is a simple children render right now.
579:48 - But this is going to be changed
579:49 - that whether the things are good
579:51 - or what's the value of this.
579:53 - Okay, let me show you how this is being done.
579:55 - First of all, let's fire up a simple use state here.
580:00 - Use effect, sorry, use effect.
580:05 - Use effect, there we go.
580:07 - No suggestions, no problem.
580:10 - Okay, first of all, the callback.
580:12 - And then we obviously know
580:13 - there is a dependency area on that.
580:15 - So based on what this is depending.
580:17 - So first of all, it is dependent on auth status.
580:19 - This is dependent on authentication as well.
580:22 - And this is also dependent on the navigate as well.
580:25 - So there we go.
580:26 - These are our dependency array, okay.
580:28 - Coming back onto this one,
580:29 - how do you want to work with that?
580:31 - We want to run a simple if and else condition in here
580:34 - based on I will be navigating you to login
580:37 - or I'll be navigating you to the slash page.
580:40 - Okay, let's see.
580:41 - Simple, if authentication is required
580:48 - and your auth status is not equals to authentication.
580:57 - Okay, very carefully, look at this.
581:00 - If I require a page which is authenticated,
581:04 - maybe you are visiting all post.
581:07 - So I'm saying that, hey,
581:08 - you are required an authentication there.
581:10 - But your authentication status is not as true
581:14 - because required means this will be converting as true.
581:17 - Okay, listen to this very carefully.
581:19 - When I say you are required,
581:20 - that means I'm passing a true in here.
581:23 - But what I'm also checking another side is
581:25 - the auth status that you are providing me
581:27 - is not equals to authentication or in terms,
581:30 - in short, your authentication is not true.
581:33 - In that case, where should I redirect you?
581:35 - Simple question, you are supposed to be logged in
581:40 - when you want to see all post, but you're not logged in.
581:43 - So obviously I should redirect you to the login page.
581:45 - Really simple.
581:46 - So I'll just go ahead and say,
581:48 - I use the navigate and redirect you to slash login.
581:53 - This will take care.
581:55 - The another condition that I'm checking
581:56 - is not a simple else condition.
581:58 - This is also another checker.
582:00 - Okay, so I'll just go ahead and check this one.
582:03 - If I don't require an authentication,
582:05 - so this is my authentication,
582:08 - I don't require authentication.
582:11 - You can just visit these pages,
582:13 - but you simply go ahead and say your auth status
582:20 - is not equals to the authentication.
582:28 - There we go.
582:29 - What should I do in this case?
582:31 - This is the second case where I'm saying,
582:33 - hey, you are not supposed to be authenticated
582:36 - to see these pages.
582:37 - That means the login page, the signup page.
582:40 - But what I'm also checking, hey, you are logged in.
582:43 - Authentication is auth status is not equals to false.
582:47 - So you are truly logged in.
582:49 - And there are some pages which don't require authentication.
582:52 - Who are those pages?
582:53 - The login and signup.
582:54 - So if you want to visit the login and signup page
582:59 - and you're already logged in,
583:00 - you're not supposed to see those pages.
583:02 - So in that case, I'll just redirect you
583:03 - to the simple navigate.
583:06 - So navigate and you'll be redirected to the slash.
583:11 - This is the basic logic that we have created.
583:13 - Now based on this, we can actually render onto this one.
583:16 - Once this is all done,
583:17 - let's go ahead and do one more thing.
583:18 - If we are done all these if and else cases,
583:21 - let's go ahead and use a set loader and turn it into false.
583:24 - So all the drama that we wanted to check and all of these,
583:27 - this is all done.
583:28 - Now here I'm changing the state of this loader.
583:31 - Based on this, I can do a simple ternary operation
583:34 - into this one.
583:34 - I'll just remove this part
583:36 - and I'll say first check my loader.
583:39 - If loader is true, then we're going to show
583:42 - maybe a loading, maybe a null.
583:44 - I'll keep this as a simple exercise for you
583:46 - to create a simple loading component,
583:48 - maybe a spinner widget, just add it up here, simple.
583:50 - I'll just use a null, not a good practice,
583:52 - but I'll just keep it here.
583:54 - And if the loader is false,
583:57 - then go ahead and load the component,
583:59 - which in my case is just the children.
584:02 - Children, there we go, not like that, not like that.
584:06 - Children, there we go.
584:07 - So really simple, but this is a good mental exercise
584:10 - to actually figure out that how things are going on.
584:13 - By the way, it has couple of more ways
584:15 - of how you can write that.
584:16 - Let me walk you through.
584:17 - Probably it will take a couple of more minutes,
584:20 - but it will help you to understand how this is being done.
584:22 - So for example, if you are checking something like this
584:24 - and just rewriting the code to make it more understandable.
584:27 - So let's just say there is an authentication.
584:30 - If authentication is true,
584:32 - then I go ahead and I'm checking another one,
584:34 - if statement, something like this.
584:36 - So in this, I'm checking if your auth status
584:40 - is not equals to authentication.
584:47 - So something like this.
584:47 - So if you are having a problem in understanding
584:50 - two condition at the same time using this,
584:53 - you can also apply this one.
584:54 - So in this case, notice here, let's understand this.
584:57 - Authentication is required.
584:59 - Where does the authentication is required?
585:01 - Oh, this kind of pages means all posts.
585:03 - Authentication is required in this one.
585:05 - So it is true.
585:06 - So this will be converted into as true.
585:10 - Just for explanation purpose.
585:12 - And the auth status, what is your auth status?
585:14 - It is not equals to authentication.
585:16 - That means authentication was required,
585:18 - but you are not authenticated.
585:21 - So where should I redirect you?
585:23 - If you are not authenticated,
585:24 - but the page requires authentication.
585:26 - Simply you understood this part.
585:27 - Now we should navigate you to which page?
585:29 - Slash login.
585:31 - And this is exactly what I have done in this one here.
585:35 - So hope this helps you to understand the part.
585:37 - I can understand.
585:38 - This could be a little bit more
585:40 - for the beginners and fresher,
585:41 - but this is exactly what I did.
585:42 - I'll just keep it here to make sure that
585:45 - you know that how I explained this to you.
585:47 - But I think now this gives you a much more clarity
585:49 - of how things are done and how things are done.
585:52 - Okay, so moving back.
585:55 - You understand this part that all posts are being there,
585:58 - but we have more elements.
586:00 - So for example, I'll just go ahead
586:02 - and copy and paste this one.
586:04 - So the page is like add post.
586:06 - Let's go ahead and have that one as well.
586:11 - Import add post.
586:14 - No suggestion.
586:16 - Nah.
586:17 - Pages and we have add post.jsx.
586:21 - This also requires authentication.
586:23 - So it's almost similar to that.
586:24 - This one will be add post.
586:28 - Add post, just like that.
586:31 - Requires authentication, yes.
586:33 - And we'll just simply say you are add post.
586:35 - There we go.
586:36 - So that's the one.
586:37 - We also need the edit part as well.
586:39 - Edit also needs a slug to be passed on.
586:43 - Let's do that.
586:44 - So we have edit post and we have a post individual as well.
586:48 - Let's import them too much.
586:51 - Import and this one will be edit post.
586:56 - That will be coming up from pages
587:00 - and inside the pages we have edit post.
587:03 - We do have one more which is just the post.
587:05 - Let me check that.
587:07 - We have just the post.
587:08 - Let's also import that.
587:10 - We have post.
587:12 - Come on.
587:13 - Post and that will be importing from pages
587:16 - and we do have post.jsx.
587:21 - Both of them requires authentication.
587:24 - So let's go ahead and work on with this.
587:27 - Copy and paste it.
587:30 - Put up a comma.
587:31 - The path is going to be edit post,
587:33 - but you cannot just go ahead and edit post just like this.
587:36 - You need a slug value.
587:37 - So slash colon and slug.
587:40 - This will give us which post you want to go.
587:43 - And this requires authentication.
587:44 - Yes, this requires and this will be edit post.
587:49 - All right.
587:50 - What else?
587:51 - We just need to work with one singular post as well.
587:55 - This one also requires a simple post.
587:59 - So we'll just remove the edit part from here.
588:01 - We'll just say this is a post and you'll provide me a slug.
588:04 - We're saying that you also require authentication.
588:06 - It's just personal approach.
588:07 - I don't want anybody to see my,
588:09 - I'm kind of a medium, kind of a fan
588:11 - where if you're not logged in,
588:12 - you cannot read much of them.
588:13 - Anyways, it's up to you.
588:15 - And I'll just simply say,
588:16 - hey, this one is going to be post.
588:18 - That's it.
588:19 - So at least our routing and pages are done.
588:21 - You have understood the concept.
588:23 - Of course, we might need to debug a little bit,
588:25 - but the concepts are now perfectly fine with you
588:28 - that how the auth layout and all these things works.
588:31 - We now know how to protect our pages
588:33 - with the help of this auth layout.
588:34 - This is doing all the magic, making the queries.
588:36 - Nothing is happening automatically or magically,
588:38 - but pretty good start and pretty good stuff
588:41 - that we have done.
588:42 - So in the pages, all the pages are done,
588:43 - but our components are not ready
588:45 - that in what pages we'll be rendering, login, sign up.
588:48 - We'll do that.
588:49 - Nothing much deal.
588:50 - Again, I'll be providing you all the details of that
588:53 - and we'll not be writing any of the CSS for that.
588:56 - I'll provide you the CSS directly.
588:58 - You can just copy and paste them from my GitHub as well.
589:00 - This is not a tailwind class.
589:01 - We'll focus more on the React part.
589:03 - That's it for this video
589:04 - and let's catch up in the next one.
589:09 - Hey there, everyone.
589:09 - It is here back again with another video.
589:11 - And in this video,
589:12 - I just want to do the testing of what we did
589:14 - in the last video.
589:15 - It was a pretty big video.
589:16 - So I thought, let's sip some water and come back here.
589:20 - I don't want to do the testing behind the scene.
589:22 - I want to do all the testing that if it is working,
589:24 - if it is not working,
589:26 - we'll probably pause the video, we'll debug together.
589:28 - However it goes, we just want to do it all together.
589:31 - So let me just share the screen and see this.
589:34 - Okay, so now the goal is,
589:35 - if I just go ahead and I simply run this application,
589:38 - so I've just run the command, that's very basic.
589:41 - So it's npm run dev and I go onto the page.
589:43 - This is the page what I see.
589:46 - Good enough, but in order to do the proper testing,
589:48 - if you've watched the previous video
589:49 - where we said the router and all these stuff,
589:52 - you know that first we need to go into app.jsx.
589:54 - And the step one is to just remove all this gibberish.
589:58 - Not a big fan of this.
590:00 - We'll just go ahead and remove this.
590:03 - There's a small error.
590:05 - We'll just go say dev.
590:07 - Oh, just like this.
590:08 - And there should be a paragraph here
590:11 - or let's just go ahead and call this one
590:12 - as inside the main.
590:14 - We need an outlet into this one.
590:15 - So otherwise, if we don't have an outlet
590:17 - from React router DOM,
590:19 - rest of the components will not be able
590:21 - to render inside this.
590:22 - So we need the outlets.
590:23 - So make sure it's from the React router DOM.
590:25 - And now technically we should be able to see the home here.
590:29 - That's good.
590:30 - And if I go ahead and see the login,
590:33 - we see the login.
590:34 - If I go ahead and see all posts,
590:38 - it still goes for the login.
590:39 - One more thing which I noticed is
590:41 - there's a small inconsistency here.
590:44 - Inside the auth layout, we actually called it as protected,
590:47 - but here in the main.jsx,
590:49 - we are calling it as auth layout.
590:50 - Not a good idea.
590:51 - I'll just go ahead and say this one should be protected.
590:54 - That's a better one.
590:55 - I'm pretty sure you might have already noticed it,
590:57 - but I just noticed it.
590:59 - Not a good idea.
591:01 - Okay, auth layout.
591:02 - Let's hit, let's select all the instances of auth layout.
591:06 - By the way, these are just VS code shortcuts,
591:08 - which I love.
591:10 - And one more.
591:11 - Okay, multi cursor.
591:13 - Remove this, have the protected one.
591:16 - It's not going to bother you anything,
591:17 - but I think that's good one.
591:19 - So now I think the testing is all good.
591:22 - We are logging and rendering a login.
591:25 - Too much white, I know.
591:26 - Too much light mode.
591:27 - I don't worry, I'll get rid of this one.
591:29 - Sign up is good, but if I go ahead and see,
591:31 - let's just say edit posts.
591:34 - Oh, edit posts doesn't exist.
591:36 - Edit posts exist.
591:38 - And it says edit post.
591:40 - Oh, we need to give some ID as well, slug.
591:43 - Let's give it a test text.
591:45 - It says login.
591:46 - So we are not allowed to do so.
591:47 - So there we go.
591:48 - As of now, our testing goes good
591:50 - that we have all these applications,
591:52 - routing states, everything is working fine.
591:55 - We have no errors.
591:56 - Good testing in between.
591:58 - While recording the videos,
591:59 - it gives us rarely an occasion
592:00 - that we can test in between.
592:02 - But wherever I do get a chance to test along with you,
592:05 - I try my best.
592:06 - From the next video onwards,
592:07 - we'll work on the components
592:09 - so that I can show you what all the components
592:11 - will be needing, how they'll be working.
592:12 - Some of them are really boring, like footer.
592:14 - There is absolutely nothing inside that.
592:16 - There's copy paste of the tailwind classes.
592:19 - A header could be a little bit interesting
592:21 - because we are conditionally rendering some of the elements
592:23 - like the logout button, the signup button and all of that.
592:26 - So they can be a little bit interesting,
592:27 - but footer's not really something.
592:30 - All right, so that's it for this one.
592:31 - I hope you have enjoyed this one.
592:34 - Really short video, but really something
592:36 - that helps us to understand the features of it.
592:39 - Let's catch up in the next video
592:40 - and work on the components part of it.
592:44 - Hey there, everyone.
592:45 - I'll always share back again with another video.
592:47 - And from this video onwards,
592:49 - we are going to have a journey
592:50 - about building the components.
592:51 - Now, some of these components are really great
592:54 - because you understand a lot of logics behind it,
592:56 - for example, how and why do we use forward reference
592:59 - as a special hook in the React?
593:01 - And some of them like conditional rendering,
593:03 - but some of them are really truly boring.
593:06 - They doesn't teach you anything from the React perspective.
593:09 - They are just, you can say the logo component,
593:11 - it just displays the logo.
593:13 - That's it, it does nothing more than that.
593:16 - The container, it's just a wrapper.
593:17 - It just displays the element.
593:18 - Nothing much more than that.
593:19 - The footer component, lots of tailwind classes,
593:22 - good for tailwind practice, nothing else,
593:25 - nothing else at all.
593:26 - But what we can do, we have to work with both of them.
593:28 - So we'll start with some of the basic ones,
593:31 - which doesn't do much.
593:32 - And as we move forward,
593:33 - we'll progressively work on some of the components,
593:35 - which are really good and interesting
593:37 - and helps you to understand the React part of it.
593:40 - Let's go ahead and do that.
593:41 - So we'll just go into the screen sharing first.
593:45 - All right, once we're in the screen sharing mode,
593:49 - then let's go ahead and go into components.
593:53 - The first is, let's create a new folder
593:55 - and keep it inside this.
593:56 - So this one is going to be container.
593:59 - And inside the container,
594:01 - we'll have this simple container.jsx.
594:05 - New file, container, and it should be all caps.
594:10 - container.jsx.
594:14 - Okay, what do we have in this container.jsx?
594:17 - To be honest, there is absolutely nothing.
594:19 - It's just as it is.
594:21 - You can probably can do something like export default
594:25 - just right here in case you wish, if you want to.
594:28 - But that one is also fine.
594:30 - So what do we have in this container?
594:31 - We simply return a div,
594:33 - which is going to render the children.
594:36 - So let's go ahead and accept all the children.
594:40 - And we are going to display these children just up here.
594:44 - Why we are doing this?
594:46 - What's the point of?
594:47 - Because we want to add some additional classes.
594:49 - That is the whole goal.
594:50 - Nothing more than this.
594:52 - We want to simply have a width of full
594:55 - so that we can have a, we'll also have a max width.
594:58 - So we'll just say max width of seven XL.
595:00 - By the way, you can hover this one.
595:02 - I didn't come up with them automatically.
595:04 - I also worked tweaked a little bit
595:07 - while we were designing this application.
595:08 - So it's not some magic number that I came up with.
595:12 - We'll just say max auto, simple,
595:14 - and we'll just say px-4.
595:17 - So these are the classes we came up
595:18 - while displaying a container.
595:20 - That's it, nothing more, nothing less onto this one.
595:24 - Okay, we'll keep this one in a folder
595:26 - so that it's a little bit separated out.
595:28 - Now let's go ahead and move into,
595:30 - let's close this one first.
595:33 - And we'll go into container first source
595:36 - and then container components.
595:40 - Components, and let's create a couple of files first.
595:43 - So I'll just try to create the files from here.
595:45 - It's much more easier.
595:46 - Otherwise, right click it.
595:48 - Sometimes create files in the wrong place
595:50 - where I don't want it to be.
595:51 - So I'll just go with the logo.jsx.
595:55 - And there we go, logo.
595:57 - What do we have in this logo?
595:59 - Honestly, nothing.
596:01 - I'll just go with that of CE.
596:03 - The logo is logo.
596:04 - I don't even have a logo.
596:05 - Otherwise, usually it's just the image.
596:09 - But let's just say if we can have some logo.
596:11 - Can we have some of the logo?
596:13 - In the public, we have VTSVG.
596:15 - We can probably use that.
596:17 - Or can we have?
596:18 - I'll just keep it as it is.
596:20 - But we need to have some of the classes on this one.
596:23 - Otherwise, it is going to give us
596:26 - some of the issues with this one.
596:28 - We'll figure out later one.
596:30 - Right now, let's just display it inside this one.
596:33 - And instead of a div itself, let's use an image.
596:36 - I think that one would be good.
596:39 - I'll just add an image in the later on videos.
596:42 - Don't worry.
596:43 - I'll just say I want to have an image just like this.
596:46 - And this one is going to be an src.
596:49 - Right now, there is nothing.
596:50 - So I'll just keep it empty.
596:52 - And inside this, if somebody doesn't pass me any parameter,
596:56 - I'll make it a little bit more robust
596:59 - so that people can pass me some values.
597:02 - I'll just say 100%.
597:03 - And whatever the width you give me,
597:05 - I'll just use it as a style.
597:07 - I'll make it a little bit fancy.
597:09 - I'll just say give me a width.
597:11 - If somebody gives me 80%, we'll use 80% width.
597:13 - Otherwise, that's it.
597:14 - Let's use at least an ELT
597:16 - so that we know this is a place for a logo placeholder.
597:21 - If I forget, later on, we can just work with that.
597:23 - That's it.
597:24 - That's your logo.
597:25 - Next up is a little bit interesting.
597:27 - Not too much, but a little bit interesting.
597:29 - We'll have a simple button as well.
597:31 - So we'll have a button.jsx.
597:33 - Why do we have a button?
597:35 - No such big need of having a button,
597:38 - but I realize that if you have a button,
597:40 - you can customize it a little bit easier.
597:42 - In case you are familiar with something like shad cn
597:44 - or something, that is fantastic.
597:46 - Almost same kind of approach we are using.
597:48 - I'll just have an rfce.
597:50 - We have a button.
597:51 - The button is going to take some of the parameters.
597:54 - Oops.
597:56 - There we go.
597:58 - What all parameter?
597:59 - First of all, you'll be taking children
598:01 - so that you can render them.
598:03 - You'll also have a type.
598:05 - The type is going to be button and bgcolor.
598:12 - bg, bgcolor.
598:16 - That is going to be, by default,
598:18 - this one is going to be background is going to be blue.
598:22 - 700, 600, whatever you wish.
598:25 - Plain old tailwind colors, nothing more than that.
598:28 - We'll also give it a text color
598:30 - and the text color is going to be white.
598:34 - So we'll say text-white
598:36 - and we'll also have some of the class names.
598:39 - Class name and that by default is going to be empty,
598:43 - but you can pass me on more
598:44 - and you can also pass me more props.
598:46 - So we'll spread them around if we have props
598:50 - and one comma is required.
598:52 - Now the advantage of taking these props
598:54 - is if you wish to have or to do something more,
598:56 - you can just go ahead and do this.
598:58 - I'll just remove this one
599:00 - and I'll say I'll return you a button just like this.
599:06 - Button is going to render the children.
599:11 - You can also rename this actually to the button title
599:13 - if you wish, but I think I'm happy with this one.
599:16 - Okay, what else do you want inside this button?
599:18 - Let's have the class name.
599:21 - Class name.
599:22 - We'll actually change this class name
599:23 - into first of all backticks.
599:27 - Actually first of all curly braces then a backtick
599:29 - so that if we give PX dash four
599:32 - padding on X axis to be four,
599:34 - padding on Y axis to be two
599:35 - so that it looks like buttonish
599:37 - and we'll also go for rounded dash LG for rounded,
599:40 - but if you have more properties,
599:41 - you can just use the dollar and variables to have this one.
599:44 - For example, the BG color, if you want to change it,
599:47 - now you can easily change it.
599:49 - More variables, text color,
599:51 - maybe you want to change the text color,
599:52 - go ahead and change it now.
599:54 - And also some additional classes if you want to pass on,
599:57 - I'll just respect that as well.
599:59 - Okay, so right now we have basic default button.
600:01 - Another advantage that we can have in this one is
600:04 - if we have more props to be passed on,
600:06 - maybe active, deactive, whatever you want to say,
600:08 - I can just actually respect that as well.
600:11 - I'll de-structure these props as well here.
600:14 - So all these props actually goes directly here,
600:17 - makes life a little bit easier.
600:19 - Again, a good way of how we can have the button,
600:22 - very generic button, but could be reused like anything.
600:25 - Now let's close this one.
600:26 - Let's study a little bit which is more interesting
600:29 - and you'll repeat this quite often,
600:31 - which is input.jsx.
600:34 - Inputs are a little bit different and interesting
600:38 - compared to the button because button doesn't have too much.
600:42 - It just registered one event which is on click,
600:45 - nothing much more than that,
600:46 - but inputs have great number of deals with that
600:50 - because if you think it carefully,
600:52 - input is going to be used in some other component.
600:55 - That component will have state.
600:58 - So you have to somehow manage
601:00 - that somebody's writing inside this component,
601:02 - but that value goes outside of that
601:04 - into upper level component.
601:07 - I hope you are understanding this.
601:08 - This is complex, but the solution is not that complex,
601:11 - but imagine this.
601:12 - The component, let's just say this is your form.
601:15 - One level down is input.
601:17 - Now this input needs to give information to its parent.
601:21 - That is where the magic comes
601:23 - and that's why I found input to be really amazing.
601:26 - Now inputs, just like this,
601:27 - I'll just actually rewrite this entirely.
601:30 - So how do we actually manage this
601:32 - that we can pass on some information to our parent itself?
601:34 - Passing into child its prop,
601:36 - but how can we pass on to the parent?
601:38 - That is interesting.
601:39 - That's why I found this one interesting while teaching.
601:41 - So we have input just like this.
601:43 - In order to do so, you have to use one hook from this React,
601:47 - which is forward ref.
601:49 - Yep, that's it.
601:50 - That's it.
601:52 - Forward ref, if you have this one, that's it.
601:53 - It just pass everything to the parent component.
601:56 - And now you can go ahead and say export default input.
602:01 - There we go.
602:02 - Now, how do we use this forward ref?
602:04 - Now using forward ref again is fairly straightforward.
602:07 - You just wrap up your component inside this.
602:10 - And we also know the component is nothing.
602:11 - It's just a function.
602:14 - We call this one as input.
602:16 - And this is how we work with it.
602:18 - If you have anything to access,
602:20 - you can just go ahead and say,
602:22 - I will access a label for this one.
602:24 - I'll also accept the type of this one.
602:27 - Type is going to be text by default.
602:30 - Otherwise you pass me on this one.
602:32 - We'll have the class name, just like this.
602:35 - And by default, it's going to be empty.
602:37 - So that same concept of the buttons
602:40 - will also have the props.
602:41 - So let's just say props.
602:43 - If you have more props, you can just give me.
602:45 - Also, you have to give me a ref.
602:48 - Otherwise I'll just pass on this ref.
602:51 - Okay, let's go ahead and move it on to the next line
602:55 - so that it's easier to read for everyone.
602:58 - There we go.
603:00 - Moving up, just like this.
603:03 - You also go like this.
603:04 - You also go like this.
603:06 - Just arranging them.
603:07 - Sometimes these things bother me a little bit.
603:09 - Okay, there we go.
603:12 - Now hopefully it makes sense.
603:14 - Okay, much easier to read in this way.
603:17 - Now in this one, all we have to do is return,
603:19 - just like we return in the components.
603:21 - So this one is going to be returning, just like this.
603:24 - And I'll be returning a simple div, just like that.
603:28 - This div will have a class name.
603:31 - We are going to get width of full,
603:33 - whatever is available to us.
603:35 - And then we simply go ahead and use these labels
603:39 - in all these inputs.
603:40 - So let's start our JavaScript in here
603:42 - and we'll say label, label, label.
603:46 - There we go.
603:47 - If label is there, then we are going to display the labels.
603:49 - So use ampersand sign and another component just like this.
603:53 - And in here, we are going to start a label component.
603:57 - Label tag would be better name.
603:59 - Label tag, just like this.
604:01 - Inside the label tag, we'll display this label.
604:03 - If the label is not there,
604:04 - what's the point of displaying the label?
604:06 - And we can have some of the HTML ID for it.
604:10 - So HTML for, and we can actually give it an ID
604:13 - and we can borrow the ID by the way from the React itself.
604:16 - So I can just provide an ID just like this.
604:18 - Right now I don't have an ID.
604:19 - So I can just go ahead and create this ID by use ID,
604:24 - which is given to me by React itself.
604:26 - And I can actually go ahead and before I had returned,
604:30 - I can just say const ID is going to be equal to use ID.
604:34 - There we go.
604:35 - Now you get from where this ID is coming up from.
604:38 - All right, not bad.
604:40 - We'll also add some of the class names.
604:41 - Don't really like them, but we have to.
604:44 - This one is going to be in line block.
604:50 - And we'll have a margin bottom of one.
604:52 - We'll have a margin, sorry, padding left of one.
604:56 - Okay, if you wish to design it a little bit more,
604:59 - you can just go ahead and do that.
605:00 - Really doesn't bother us much.
605:02 - So this whole thing is the label portion of our input.
605:06 - We also need to give it an input
605:08 - because that's what this is input, not the label.
605:11 - Let's go ahead and provide an input.
605:13 - It could be a self-closing one just like this.
605:15 - Now we need to set up all the parameters here.
605:18 - Like for example, we are taking type from the user.
605:20 - Let's respect that and provide a type just like that.
605:23 - We also need to provide a ref
605:25 - because when any form will be using it,
605:28 - they will be providing us this ref or references.
605:32 - There we go.
605:32 - And we'll say just add the ref here.
605:35 - Let's restructure all the props and add them here as well.
605:40 - There we go.
605:41 - And also let's provide the ID.
605:43 - So same ID can go up here.
605:46 - Same variables, same unique ID will go here.
605:49 - Then after that, we'll add some of the classes.
605:51 - So the classes concept is exactly same.
605:53 - There is nothing new that you are learning.
605:56 - We'll have the classes,
605:56 - but we'll wrap them in the curly braces and in the back text
606:00 - so that if any variable comes up,
606:01 - we can actually respect that.
606:03 - So this is a new concept that you learn into this input,
606:06 - which is how to pass on some data
606:08 - from a lower component to upper component
606:10 - or from a child component to a parent component.
606:13 - That's interesting.
606:15 - Similarly, like the input one, we'll create one more,
606:17 - which is exact same replication, select form or select input.
606:22 - Select.jsx, we'll go with this, so select.
606:27 - Exactly same concept.
606:28 - I think this will be a good reputation for us.
606:31 - So let's go ahead and create a function
606:34 - and this will be our function just like this.
606:36 - And this function is going to be named as select.
606:41 - There we go.
606:42 - And we'll also grab the React.
606:44 - Import, React, we know that we'll be using use ID.
606:50 - Use ID and that will be coming from React.
606:55 - Okay, the function is all done.
606:57 - Now we just need to export that.
606:59 - Again, it's up to you how you create a function
607:01 - within inside that just like we created,
607:03 - or you can do something like this.
607:04 - Export default React.forwardref.
607:10 - And here we can just say select this one.
607:16 - Okay, both are same, exactly same.
607:18 - It's just the way of writing the code here.
607:21 - We're doing everything in line, whichever you prefer.
607:23 - There is no right or wrong.
607:24 - There is no optimization in this one.
607:26 - You can actually just wrap this up and pass it on directly.
607:29 - Here I created the function first
607:31 - and then I'm passing it at the export time
607:34 - in the forward ref.
607:35 - The reason for showing you two ways
607:37 - is so that you can understand
607:38 - that some people write code this way.
607:40 - Understanding the code is also really important.
607:42 - So this is what we have as of now.
607:44 - All right, moving further,
607:47 - we'll take some of the parameters.
607:48 - What all of the parameter?
607:50 - We obviously need, this is a select.
607:51 - So if we need options, we need the label.
607:54 - Exactly same thing will happen to the label
607:56 - just like we did a class name, just like this.
608:01 - And we'll also have props.
608:03 - We'll restructure them.
608:05 - And once we are done with this,
608:08 - these are all the first like objects
608:10 - that you'll be passing me,
608:10 - but you also have to give me the ref.
608:13 - Okay, once we are here,
608:15 - then obviously we need to first handle the ID part.
608:18 - We know that, that's easy.
608:20 - Use ID, there we go, unique ID generated return.
608:24 - And there we go.
608:27 - And inside this will just return a simple div.
608:29 - Okay, first of all, class name, simple class,
608:32 - we'll save it, get the fill width.
608:34 - There we go, no big deal.
608:36 - In here, the label thing will be exactly same.
608:39 - So why don't we just copy and paste that,
608:41 - save us some times, because it is exactly same.
608:43 - There is nothing new we are learning here.
608:46 - So we start our JavaScript.
608:48 - We simply say, if you have labeled
608:49 - and we'll display the label,
608:51 - we'll use the HTML ID or HTML 4 for this one,
608:54 - we'll have the label.
608:57 - But right now here, this label is good.
609:00 - But now the input form is different.
609:03 - So this is okay.
609:04 - Now let's start the select field.
609:06 - This is where things gets a little bit interesting.
609:08 - So this is my select field.
609:10 - I'll keep it as, no, not self-closing.
609:15 - Okay, now one by one, what goes inside this?
609:19 - First of all, inside the select field,
609:21 - first of all, let's display all the props that you have.
609:25 - So let's get rid of this.
609:28 - Oh, my bad, dot, dot, dot, props.
609:33 - Okay, one part is done.
609:34 - Scroll this a little bit.
609:36 - Okay, we need ID, okay, easy part.
609:39 - ID will be going like this, so ID, easy part.
609:42 - We also have ref, easy part.
609:45 - We also grab it like this, ref, okay.
609:47 - This is easy part.
609:49 - Now, the thing is, which is most important about this is
609:53 - a lot of options will be given to you.
609:55 - This is how the select field works.
609:57 - In case, by the way, you forgot it
609:59 - or maybe you want to jog the memory,
610:01 - we can go select HTML,
610:04 - and I'm pretty sure W3 schools
610:05 - can help us to memorize, jog the value.
610:08 - If I try this, this is how it looks like.
610:10 - This is the select field.
610:11 - A lot of options are being passed on,
610:13 - and as soon as you select the option,
610:15 - that option is being selected.
610:16 - That's exactly what we want to get.
610:19 - These options will obviously be an array.
610:21 - Somebody who is using my component
610:22 - should be already aware of this,
610:24 - and now all I have to do is start a JavaScript here,
610:27 - and I have to say, hey, options, I want to look through you.
610:30 - So maybe you can use for each, maybe you can use map,
610:33 - whatever is your favorite, you can use that.
610:35 - In each one of them, you will get a callback just like this.
610:38 - So we'll get an option, options, option, remember that,
610:42 - and then we can simply use a callback just like this.
610:45 - I'll start a parenthesis, not the curly braces,
610:48 - so that I don't have to explicitly return,
610:51 - and then inside this one,
610:52 - I'll say I will start options here, not options, option,
610:59 - and I'll close this one as well.
611:02 - There we go.
611:03 - Inside this one, I'll display each of these options, okay?
611:07 - Half part is done because if you remember
611:09 - the code part here, this is the option.
611:11 - So this part is done,
611:12 - but we need to also have the value being added.
611:15 - Otherwise, it's just displaying here.
611:17 - So we need to take care of the value part.
611:19 - So we'll go up here and we'll say value,
611:25 - and the value is going to be whatever the option is, simple.
611:29 - We also need to do one more thing,
611:31 - which is not required from the HTML perspective,
611:34 - but from the React perspective, it's required.
611:36 - Since the value is looping through, by default,
611:39 - React Fiber has no way to knowing that
611:42 - if it is repeating different values or the same values.
611:45 - So we need to provide a key for it.
611:47 - This is performance optimization,
611:49 - and I know that each options are different,
611:51 - so I can provide an option like this.
611:53 - Really interesting, but this is all what we have.
611:56 - Now, apart from this, there is just one more final thing,
611:58 - which is just a class, so I'll just copy and paste this.
612:01 - Doesn't really bother us much.
612:03 - So there we go.
612:04 - We have our select options being added.
612:06 - This is something really interesting.
612:07 - I hope it gave you some knowledge of forward ref.
612:10 - If it does, do let me know in the comment section.
612:12 - This is really important.
612:13 - Okay, this is all done.
612:16 - Input part is all done.
612:17 - Now let's also do one more thing.
612:20 - Actually, two more things we have to do in this video,
612:22 - but this one is going to be a little bit interesting.
612:25 - So what we're going to do is, let's open this up.
612:29 - It's much easier to actually create components from here.
612:32 - I want one more component, which is postcard.
612:35 - Not really the postcard, like postcard,
612:37 - but card for each of the posts that we have.
612:41 - This is interesting because a lot of information
612:43 - we need to grab and how we can actually grab this one.
612:45 - So let's go ahead and an RFCE, react functional component.
612:48 - We have postcard, just like this.
612:50 - Now this postcard takes a couple of information.
612:53 - Let me show you.
612:54 - It takes a dollar ID.
612:56 - If you're using MongoDB, you might have underscore ID
612:59 - in the case of app write, it's dollar ID.
613:01 - You also give me a title.
613:02 - You also give me a featured image.
613:05 - Featured image, okay.
613:08 - Featured image, these all things are given to me.
613:10 - Now, my responsibility is to simply have a card
613:14 - on the homepage to take the user on the longer post
613:19 - for that particular post, okay.
613:21 - How we can do that?
613:23 - First of all, let's remove this
613:25 - because we want this entire card to be clickable.
613:27 - So we need to grab the link just like this.
613:31 - So we'll grab it like this.
613:32 - But this link obviously doesn't come directly.
613:35 - We need to have it from the React router.
613:37 - Import, give me a link, no suggestions, no.
613:44 - From React router DOM.
613:47 - Okay, now anything inside this will take us to this.
613:49 - But again, we have to provide where do you want to take me?
613:52 - For this, we have to use the to keyword.
613:54 - I'll use back text.
613:57 - We'll go wherever we are, obviously on the homepage.
613:59 - So we'll go on to slash post and slash the slug ID,
614:03 - which in this case is dollar, just like this.
614:07 - And we'll provide dollar ID.
614:10 - ID, yeah, that one.
614:12 - Okay, now we know the link part is sorted.
614:14 - Now all we have to do is grab a simple div,
614:16 - which is going to display the information.
614:18 - So inside this div, obviously some of the class names
614:21 - will go, I'll just copy paste these classes,
614:23 - doesn't really bother us much.
614:25 - And we'll use class names just like this.
614:29 - So let me just copy and paste these classes.
614:30 - You can also copy and paste them from, okay,
614:35 - from the GitHub itself.
614:36 - So there we go.
614:37 - And inside this, we'll have another div.
614:39 - Yeah, that's how we designed it.
614:41 - Okay, this div also has an image.
614:44 - So this is the image.
614:46 - Now, where the interesting part lies
614:48 - is how you're going to grab the source
614:50 - because you have this featured image only.
614:53 - Now let me jog a little bit of your memory.
614:54 - If I go on to the config part,
614:58 - notice here we created a simple method where it is.
615:04 - Yeah, get preview.
615:05 - So this featured image is nothing.
615:07 - It's a file ID that you will pass me.
615:09 - So here in the postcard,
615:10 - you will provide me this featured image.
615:12 - This is nothing.
615:13 - This is the file ID.
615:14 - So I can actually use this get file preview method
615:17 - and pass it on file ID.
615:19 - And what it gives you is directly a link of the image.
615:22 - Notice here we send href.
615:24 - So this is a link of the image.
615:25 - So I can actually utilize these features.
615:27 - And that's why I say these services actually helps you
615:30 - to lot of work that is already, that can be reduced down.
615:34 - So all I have to do is import.
615:36 - Let's call this one as app right service.
615:42 - App right service.
615:43 - And that will be coming up from.slash app.
615:47 - Nope, dot.slash.
615:49 - Yeah, there we go.
615:50 - App right slash config.js.
615:54 - Probably don't need a JS, but anyways.
615:57 - So we have the app right.
615:59 - Okay, now in this source, I can just use it directly.
616:02 - So I'll just remove this one.
616:05 - Inject it like this and I'll say app right service.
616:09 - I'll want to use a method which is get file preview.
616:13 - And in order to run this method,
616:14 - I have to provide you the featured image.
616:16 - That's it.
616:17 - Automatically it will call this
616:19 - and do everything that I want to do.
616:21 - All right.
616:22 - In this one image itself,
616:23 - I will inject the title optionally,
616:26 - but if you wish, you can just go ahead and do that.
616:28 - Now time to add some classes.
616:30 - And this one is going to be rounded dash xl.
616:35 - And we do have some of the classes onto this div as well.
616:39 - We'll have the class name just like this.
616:42 - And again, these classes are nothing too much
616:44 - to be worried about.
616:47 - Basic tailwind classes.
616:49 - Okay, next part is how we are going to display the title.
616:53 - Totally up to you.
616:54 - And what I want to do is just below this div,
616:57 - we'll have an simple H2 and inside the H12 displayed.
617:03 - Title.
617:04 - There we go.
617:05 - We do have some classes for this one as well.
617:08 - So we'll have a class name and we'll have a text dash xl.
617:12 - We also have font bold.
617:16 - All right.
617:17 - So I hope you understand a lot of things
617:19 - that are learned from the React perspective,
617:21 - as well as good software engineering perspective
617:23 - that creating a service, it helps us a lot.
617:25 - We don't need to do things 1000 times.
617:27 - It just works out of the box.
617:29 - Okay, now one more thing.
617:31 - Final thing that we are going to do for this video
617:34 - is we'll create a new folder, which will be a footer.
617:39 - Again, nothing much.
617:40 - This is really the most boring file.
617:44 - It has nothing.
617:45 - It will be simple footer.jsx.
617:50 - Okay, simple rfce, React functional component.
617:53 - And all we're going to do is just copy paste
617:55 - some of the HTML code.
617:57 - Remember, this is not an HTML tutorial.
617:59 - There is nothing much we are doing.
618:01 - Just a lot of CSS classes, logos and whatnot.
618:05 - Only thing we have to do is import a link
618:08 - because all these are wrapped around the link.
618:11 - Link and that link come from React router DOM
618:13 - that you already know.
618:15 - And that's it.
618:17 - That's it.
618:18 - Your footer is ready.
618:19 - Now all you have to do is go into an app,
618:22 - display the footer, see how it looks like and all of that.
618:25 - Whatever the things we wanted to study in this one,
618:27 - we have studied most of it.
618:29 - Still, there are few more left,
618:32 - but we're going to do that in the next video.
618:33 - Already the video is half over long.
618:35 - So let's go ahead, move on to the next video
618:37 - and see that how we can work on the rest of the components.
618:40 - They're pretty interesting.
618:41 - Let's catch up in the next video.
618:45 - Hey there, everyone.
618:45 - Hitesh here, back again with another video
618:47 - and welcome to continuing our journey
618:50 - for building a full stack application,
618:53 - which is our blog app.
618:54 - In this video, we're going to take down two approaches
618:57 - and in fact, two pathways at the same time.
618:59 - The first, we're going to take the tiny MCE,
619:02 - which is a VisiVig editor, what you see, what you get.
619:05 - So you will get the ability to simply have
619:09 - the bold applications, italics, underlines,
619:12 - all that you see in a fancy editor.
619:13 - You're going to see all of that.
619:15 - And in the second part,
619:16 - we're going to take a lead into understanding
619:20 - the React forms.
619:21 - Now, React forms can be directly handled.
619:24 - There is nothing wrong in that,
619:26 - but there is a industry standard way of handling the things.
619:29 - So I'll show you what is being used
619:30 - in majority of the production grade application.
619:33 - At first, it might look a little bit too much,
619:35 - but as you move into the production grade application
619:38 - or when you will be working in the job,
619:39 - you'll notice that most of the people
619:41 - actually prefer these kinds of form
619:43 - instead of just handling every state manually.
619:45 - Again, there is nothing wrong
619:46 - in handling the state manually,
619:48 - but this is the industry standard.
619:49 - So I thought that let's introduce that.
619:52 - It might be a little bit challenging at first,
619:54 - but this is the good way and good approach to get started.
619:56 - So that's what we'll be doing.
619:58 - So let me just walk you through.
619:59 - Let me first share the screen.
620:02 - So this is the editor that we'll be using.
620:03 - This is TinyMCE.
620:04 - This comes up in both free plans and the plate plans.
620:07 - Of course, we'll be using the free ones,
620:09 - and that's what we'll be going through.
620:11 - And then we'll be also going through
620:12 - with the controllers as well.
620:14 - So we'll be going through with that.
620:15 - So let me walk you through.
620:16 - So this is the TinyMCE, which is an editor.
620:20 - It, of course, can take a parameter of API key,
620:22 - which will not be giving it to one.
620:25 - We'll be using the free version.
620:26 - A couple of parameters that are important to pass on
620:29 - are like what's init value, initialized value.
620:32 - Then we can provide what should be the init.
620:34 - Then we have to provide the plugin
620:36 - that what all do you want to support in your editor,
620:39 - like auto links, list, visual blocks, code, full screen,
620:43 - what mode you want to give,
620:44 - and in the toolbar, what options you want to give.
620:47 - Undo, redo, all of these.
620:48 - So these are the things.
620:49 - And in the content body, we'll be actually using as it is.
620:52 - So what are all options available?
620:55 - So this is the editor, which we'll be using
620:57 - by installing after this TinyMCE as an editor.
621:00 - That's the first step.
621:01 - And after that, we'll also have a look onto this one,
621:04 - which is a React hook form.
621:07 - Pretty interesting library to work on with this one.
621:09 - All the things are available in their docs,
621:12 - that what all things you're available,
621:13 - set errors, controllers, forms.
621:16 - In this couple of months, we are going to use,
621:18 - and I'll walk you through how to read the docs
621:19 - and how to work with them.
621:21 - This could be a little bit challenging,
621:23 - and I think this requires a standalone crash course
621:26 - or a video in itself, which I'll try to upload
621:28 - on my channel.
621:29 - If you haven't yet subscribed,
621:30 - go ahead and hit that subscribe.
621:31 - I'll, if I'll get enough requests,
621:33 - I'll definitely do a proper crash course
621:35 - on the React hook forms as well.
621:37 - Pretty interesting subject, and I love this quite a lot.
621:39 - So we'll be using that.
621:41 - All right, so now let's go one by one
621:43 - and try to install them first.
621:46 - So installation is pretty straightforward.
621:48 - There is nothing too much going on with that.
621:50 - Let me just go onto VS Code.
621:53 - First, let's go into TinyMCE.
621:56 - So installation, React, let's go there.
622:01 - And the installation that we need is this one,
622:03 - which is at the rate TinyMC, TinyMC React.
622:07 - Let's go back up here and have the installation
622:11 - for this one.
622:12 - So npm install, and this one is for the editor part.
622:17 - All right, and we also need the React form as well.
622:22 - So let's go back and let's go get started.
622:27 - And here is a React hook form.
622:30 - So let's copy this and install this one as well.
622:34 - So I think these are the two
622:36 - which we are going to need as of now.
622:38 - I think that's enough.
622:39 - Let's go ahead and get one by one
622:41 - up and running with this one.
622:43 - All right, so first, let's go ahead and create,
622:47 - we'll create one by one.
622:48 - Let's start with the simple nav bar,
622:50 - which we are going to have.
622:51 - So we'll be having a logout button and a navigation bar.
622:54 - Then we'll work on the real time editor.
622:56 - And then we'll be working on the post format as well,
622:58 - which is going to utilize all the hooks and all of that.
623:01 - So let's go ahead and start one by one.
623:03 - So first of all, let's create a new folder
623:07 - inside the component.
623:08 - We are going to call this one as simply nav bar
623:10 - or let's call this one as header.
623:12 - So inside the header, we'll be having two files.
623:17 - The first one is going to be header.jsx, header.jsx.
623:22 - And another one is going to be a standalone component itself
623:26 - which is going to be logout.
623:30 - Logout or logout button.jsx.
623:34 - The reason for creating a logout button itself
623:36 - because it is going to make a query
623:39 - and we'll be using some services
623:40 - from Auth service and all of that.
623:41 - That's why we are just keeping it separate one here.
623:44 - All right, so what do we need?
623:46 - We need dispatch.
623:47 - So we're going to say, I need use dispatch.
623:54 - No, no suggestions.
623:56 - All right.
623:58 - I use dispatch.
623:59 - The dispatch is going to come up from React Redux.
624:03 - There we go.
624:03 - After that, we need the Auth service as well.
624:07 - Auth service.
624:10 - And that's going to come up from couple directories back
624:14 - inside the app, right?
624:16 - Inside this auth.js.
624:20 - Yep, that's the one.
624:21 - And we're going to need a couple of services
624:23 - from store as well.
624:24 - So we need to import log, logout.
624:31 - And this logout will come up from,
624:34 - we need to go one directory back
624:36 - and inside the store.
624:38 - And from that, we are going to need auth slice.js.
624:43 - All right, so now we have the logout.
624:46 - The reason why we are having this logout functionality
624:49 - in itself alone, so that we can make a request
624:52 - using the slice and that request can just clear
624:55 - out everything.
624:56 - That's what we designed it.
624:57 - So in case you forgot that, let me jog the memory again.
625:00 - So this is what we have imported after exporting this one.
625:05 - So once we actually hit this one,
625:06 - it will create the status as false
625:08 - and we can have a simply user data as null.
625:11 - That's what the goal is.
625:13 - Okay.
625:14 - First of all, let's create a dispatch.
625:16 - Otherwise we won't be able to access it.
625:18 - We won't be able to send a message
625:20 - that we are using this method.
625:22 - So const dispatch and that will be designed
625:27 - or created using use dispatch hook.
625:30 - There we go.
625:31 - Now we have access to this one.
625:32 - Let's create a logout handler.
625:34 - Anybody who clicks on this button,
625:36 - we will be handling it with this one.
625:39 - Logout handler, handler.
625:42 - And using this, a simple method, let's fire this up.
625:46 - And we'll be saying, hey auth service,
625:48 - give us a method which is a logout.
625:52 - And once we are having this logout method being called,
625:55 - which is in our service, let's use a promise
625:57 - and we'll simply get a then.
626:00 - If then happens, then we are going
626:01 - to successfully cater that one.
626:04 - And we're going to then dispatch an event
626:07 - which is going to be a logout event.
626:10 - There we go.
626:11 - And since this is a method, let's run this and that's it.
626:15 - In case you wish, you can handle the catch part as well,
626:17 - but I don't think it's required in this case,
626:20 - but that's it.
626:21 - That's how we are going to logout.
626:22 - Notice here, if I'm able to successfully handle the logout,
626:25 - then only I'm dispatching an event of logout.
626:27 - And that's what we have designed in our store as well
626:30 - that as soon as this is being called up,
626:32 - are we going to set the status as null
626:34 - and the user data to set status as to false
626:37 - and user data as to null.
626:39 - Okay.
626:40 - Time to design a button.
626:41 - There is nothing much that we are doing is,
626:44 - let's go ahead and return a button.
626:48 - There we go.
626:49 - Inside the button, we just say logout.
626:54 - And rest of the stuff is pretty obvious.
626:56 - Only one thing is important that is on click.
626:59 - On click and inside this one,
627:01 - we just simply say logout handler.
627:03 - Please don't say it like this.
627:05 - We don't want to execute it.
627:06 - We just want to pass a reference.
627:08 - And then our basic class names.
627:10 - Again, I'll be just giving you these class names.
627:13 - If you want to design your button your own way,
627:15 - be my guest, please do that.
627:18 - All right.
627:19 - So now you understand the logic behind it,
627:20 - that how the logout button is being designed.
627:23 - Let's go into the header.jsx because that is the file
627:26 - which will be having the entire navigation items.
627:30 - Most of them are just tailwinds and loops, nothing much,
627:33 - but there are some reactive part of it.
627:36 - So I'll just say RFCE.
627:37 - So we have a header.
627:39 - We'll be requiring a couple of import statements
627:41 - in this one as well.
627:43 - First of all, let's import container.
627:47 - In fact, what we can do is,
627:50 - since we need a couple of more things
627:52 - from this component itself,
627:53 - we can design an index file
627:55 - and have an import and export statement from there as well.
627:58 - But in this case, let's go ahead
628:00 - and do container separately.
628:05 - And we'll be bringing them from .slash.
628:10 - Oh, we need to go inside one directory.
628:12 - Yeah, .slash container.
628:19 - Oh, we need to go one directory back, my bad.
628:22 - One directory back, container.
628:24 - And inside that we have this container.jsx.
628:28 - We don't need that.
628:29 - And we also need a logo
628:33 - and we don't have anything inside logo,
628:35 - but still we'll get this one.
628:36 - So this one is from one directory back
628:39 - and we'll just say logo.
628:41 - Okay, two of the components that are required
628:43 - for navigation bar are here.
628:45 - Since we'll be redirecting a lot of stuff,
628:47 - link is required.
628:48 - Of course, that comes from React Router DOM.
628:52 - And what else?
628:53 - We need a logout button.
628:54 - That's why we designed it.
628:57 - Logout button and that comes from a logout button
629:01 - and we'll be forcing people to use navigate here and there.
629:04 - So let's go ahead and do use that as well.
629:07 - Use navigate, that comes from a React Router DOM.
629:11 - Okay, how do we design this header?
629:14 - That's the important part.
629:15 - Again, this is going to be based on something.
629:18 - First of all, we need auth status,
629:20 - whether user is logged in or not,
629:22 - because based on that,
629:23 - we are going to display the sign in or the logout button.
629:27 - So why not we create a simple const which says auth status.
629:31 - And this status is going to come from the use selector.
629:35 - Do we have use selectors?
629:36 - Have we imported that?
629:40 - So we need use selector.
629:43 - Import, use selector, there we go.
629:48 - And once we have this,
629:49 - now I can use the use selector and can make a query.
629:53 - Give me the state.
629:55 - And I'll just ask you that state has this auth
629:59 - and has got a status.
630:01 - Status.
630:03 - This will fulfill a value of true and false.
630:06 - And also in the meanwhile,
630:07 - let's also use the use navigate as well, nothing much.
630:11 - Navigate, and that will be coming from use navigate hook.
630:18 - There we go.
630:19 - Okay, now we need to design a simple constant
630:23 - of navigation items.
630:25 - That is better way.
630:26 - Once we have these navigation items as an array,
630:28 - we can loop through them
630:29 - and can simply generate our HTML from that.
630:32 - Let's call this one as nav items.
630:35 - That's going to be a basic array
630:37 - and we will have multiple objects into them.
630:39 - If you wish more, you can have more.
630:41 - I'll have something like this.
630:43 - Name is going to be home.
630:45 - Not only that, I'll also provide a slug for that.
630:50 - And that slug is going to be where you are.
630:52 - So slash for that.
630:53 - And we'll also provide an active status for that.
630:59 - And active is going to be true in this case.
631:03 - Okay, this active status right now looks true,
631:07 - but it's going to be based on the auth status.
631:11 - So what's the auth status and all of that?
631:12 - So let me show you what do I mean by that.
631:15 - This will be getting clear here.
631:17 - So let's just say we have a name
631:18 - and this time we have a login.
631:22 - Login, the slug is going to be,
631:26 - I can actually copy this.
631:29 - I can copy the slug, which could be slash login.
631:34 - Come on, there we go.
631:36 - Now, interesting part, is it active or not?
631:39 - That is going to be based on not auth status.
631:44 - So what do I mean by not auth status?
631:46 - So not auth status simply means,
631:48 - if your login, your authentication status is true,
631:52 - that is you're logged in,
631:53 - so the active status will automatically become false.
631:55 - So in that case, I don't want to display this login to you.
631:59 - That's the whole idea.
632:00 - That's the whole game of this situation.
632:03 - Similarly, we'll be having a signup exactly same.
632:05 - So let's go ahead, copy and paste, put up a comma.
632:10 - We simply want to say this one as signup.
632:14 - Signup, we'll copy and paste this.
632:18 - So smaller signup, same.
632:21 - Auth status will be not.
632:22 - That means if your authentication is true,
632:25 - I don't want to display this.
632:26 - So that means active will automatically become false.
632:30 - Similar to this, we have a couple of more pages for that.
632:34 - Let's put up a comma and we'll have all posts.
632:42 - The slug is going to be all dash posts.
632:46 - A routing will take care of that,
632:47 - but this time I want this auth status to be true.
632:50 - If your auth status is true, that means you are logged in,
632:53 - then only I want to show you this all post.
632:59 - So otherwise you'll just see the login and log out.
633:01 - So that's it.
633:02 - Add post is similar one such thing.
633:04 - So you are able to see all post
633:06 - and you are able to see add post.
633:07 - That's how we are designing our navigation bar.
633:10 - This one is going to be simply add post.
633:15 - This one is going to be add post, auth status is true.
633:18 - Okay, so now I hope you understand that why
633:21 - and how we are designing this nav items.
633:23 - All we have to do in this one is now simply have couple
633:26 - of design items just like there.
633:28 - And then we can simply loop through the values.
633:30 - The looping part is important.
633:31 - The rest of this is fancy design, nothing more than that.
633:34 - Let's go ahead and have a header.
633:35 - This header will have a class name, a simple classes,
633:38 - padding on y-axis is three.
633:41 - Or when we designed it, we simply had a shadow.
633:44 - A shadow will just be like that.
633:46 - And we have a background of gray, 500 is good enough.
633:52 - Okay, inside this header,
633:53 - we have this container as a component.
633:56 - So this wraps up automatically and gives you the space.
634:00 - And then we have a couple of nav items.
634:02 - So let's just have a nav.
634:04 - And this nav is going to have class again,
634:08 - couple of classes we have, we'll be getting a flex.
634:11 - The first item inside the nav is going to be a simple div
634:14 - which will be for logo, nothing more.
634:17 - And for this, we will be having a class name,
634:20 - margin on right side will be four.
634:23 - While designing this, this is what we found it to be best.
634:26 - Let's wrap the logo inside the link.
634:28 - So we'll be having a link just like this.
634:32 - Where does it go to nowhere?
634:35 - So we'll be saying it like that slash.
634:38 - And inside the link, let's place the logo.
634:40 - Right now we don't have any image for the logo,
634:42 - but whenever we'll be having, we'll be happy with that.
634:45 - Okay, once we have this div item,
634:47 - that means the logo is all done.
634:49 - And then we'll be having a UL after this one,
634:53 - so unordered lists.
634:55 - And it will have a couple of class names.
634:58 - And we'll be having a flex and margin left of auto,
635:03 - so that everything is pushed onto the very right side.
635:06 - Okay, this is where the things get interesting.
635:08 - And now we need to start our JavaScript
635:11 - because we want to loop through the values.
635:13 - So looping is not that much difficult in this case.
635:16 - I have these nav items, I can use any loop.
635:19 - My favorite one is map.
635:21 - And I'll go like this.
635:22 - Then again, we need a couple of values into this one.
635:25 - We have items.
635:26 - So each object inside the array,
635:29 - we are calling it as an item.
635:31 - And based on this item, we'll be looping through.
635:33 - Okay, let's go ahead and work on with this one.
635:36 - So now we can directly go ahead and start this,
635:40 - but I don't want to directly start this.
635:42 - I want to display the element
635:44 - only if it's property active is there.
635:47 - So what can I do?
635:48 - I can evaluate this.
635:49 - If item is active, there will be two cases.
635:54 - Item will be active or might not be active.
635:56 - If the item is active, let's do something.
636:00 - Otherwise we'll do something.
636:02 - Okay, that's interesting.
636:04 - So again, this might give you a little bit
636:06 - of the ternary operation.
636:08 - Yeah, that is this.
636:09 - And in the other case,
636:10 - we are simply going to refer it as null.
636:12 - We don't want to do anything.
636:13 - You can just generate an empty component as well.
636:15 - That's fine too.
636:17 - In this place, we'll just remove this
636:20 - and display a component.
636:21 - So let's place a curly braces here.
636:23 - Now, in this curly brace,
636:25 - how do we want to display the item?
636:27 - Obviously we want to, in an unordered list,
636:29 - I want to display a list item.
636:30 - So I'll just go ahead and grab a li list item.
636:33 - Since the list item is the one that is getting repeated,
636:35 - it's good that we pass on the key here.
636:38 - Item.name is the unique value that we will be having.
636:42 - Okay, inside this list item,
636:44 - we will be having a button
636:46 - which can actually get these clicks.
636:48 - So we'll be having a button just like this.
636:51 - And in each of the button,
636:52 - we'll be having an on click
636:54 - which is going to just navigate the value.
636:57 - So I'll just say on click.
637:00 - There we go.
637:01 - What do I want to happen when the click is there?
637:03 - First of all, a callback
637:05 - because I want to pass a value just like this.
637:08 - And then I will use the navigate.
637:11 - So navigate, where do we want to navigate?
637:13 - We have already taken care of that
637:15 - by having the slug value.
637:16 - So navigate the user to a place
637:20 - where it is item.slug.
637:25 - Item.slug.
637:26 - So this is the place where you will be navigating.
637:28 - And after that is just a class name
637:30 - to make it look decently beautiful.
637:32 - I have these class names with me.
637:34 - So I'll just copy and paste this one.
637:36 - I hope now you understand.
637:37 - It's not really difficult.
637:39 - It looks difficult, but it is not.
637:41 - The button doesn't have any name right now.
637:43 - So let's go ahead and give it really simple item.name.
637:46 - That's it.
637:48 - So now that entire thing is there
637:49 - and we are happy with that.
637:51 - But you might have noticed
637:52 - that we are not actually giving any logout.
637:55 - We have designed the logout button,
637:56 - but we are not giving this logout to the user.
637:58 - We have only worked with this unordered list, which is nice.
638:02 - Now what I want to do is after this,
638:05 - all the allies and everything is being generated.
638:08 - Now I want to have this one here.
638:11 - I think this is where I start my JavaScript.
638:14 - I want to have another ally,
638:16 - but this ally is going to be conditionally rendered.
638:19 - Only show the logout button to the people who are logged in.
638:22 - So that means I can get the access of that
638:25 - by a simple variable that I've designed auth status.
638:28 - If the auth status is true, then only do it.
638:30 - So I can use ternary operator.
638:32 - If it is true, do something.
638:34 - Otherwise go ahead and do show null.
638:36 - That is also a good approach.
638:37 - Or I can use another approach with the M% sign.
638:40 - If it is true, then only we are going to render this
638:43 - just like this.
638:44 - And we can say, let's grab an ally.
638:49 - Yeah, there we go.
638:50 - And inside this ally, let's load a simple logout component,
638:56 - just like that.
638:57 - So I hope you can see it was a little bit lengthy,
639:01 - but it's not really difficult.
639:02 - That's how we simply have our headers and navigation bar.
639:05 - Don't worry, we will be assembling that in the app.js.
639:08 - So if you see this app.jsx, just about the outlet,
639:11 - we will have the headers and we'll have the footers as well.
639:15 - But right now this is good enough.
639:16 - It has to understand that how things are going.
639:18 - Already it's too much, but that's it.
639:20 - So that's our part one, the phase one,
639:22 - where we have handled the authentication part
639:25 - and the logins and whatnot.
639:26 - Now let's move on to something which is TinyMCE.
639:30 - This could be a little bit difficult at first,
639:33 - but it's not, it's really, really easy.
639:35 - The first thing is that the TinyMCE is a component
639:38 - which is not the usual form, it's a third party form.
639:42 - And we're already using a third party form,
639:44 - which is the React hook form.
639:46 - So React hook form also knows that,
639:48 - hey, these kinds of things are really, really common.
639:50 - And if you look at their docs,
639:52 - you'll see that there is a hook that they give you,
639:54 - which is use controller.
639:56 - If you look at this, it says,
639:58 - React hook form embrace uncontrolled components
640:00 - and native input.
640:01 - However, it is hard to avoid
640:03 - working with external controlled component.
640:05 - And we are into this exact same situation.
640:08 - React select is one of the selection library
640:11 - which helps you to get selection based components.
640:13 - And D, very, very popular.
640:15 - So we are into one such situation.
640:17 - In that case, we can actually wrap everything
640:19 - using this component controller.
640:21 - And this controller gives back the control
640:24 - of these third party forms to the React hook form.
640:27 - That's exactly what we want.
640:29 - So let's go ahead and see
640:30 - that how we are going to handle that.
640:32 - So let's close the header.
640:35 - And let's create a new file into this one.
640:38 - And this time we'll call this one as realtime editor.
640:41 - So RTE dot JSX.
640:45 - Okay, let's go ahead and do it one by one.
640:49 - React functional component export just like that.
640:52 - Okay, this is basic.
640:54 - Okay, now we need just the two things.
640:57 - First is our controller.
641:00 - Controller.
641:02 - And this controller will come up from React hook form.
641:06 - And another one is we need to import editor.
641:10 - This is interesting.
641:12 - Editor.
641:14 - And that editor is going to come up from
641:16 - the tiny library that we have installed.
641:18 - So tiny mce react.
641:21 - Okay, so how does this one work?
641:25 - Component we know that we can wrap it around.
641:27 - But what's interesting is this tiny MC.
641:29 - So what you'll notice is
641:31 - there is nothing too much to be worried about this.
641:34 - All you have to do is worry about
641:35 - where you're going to load your editor
641:37 - and pass on these initial values.
641:40 - That's all it takes.
641:40 - So let me walk you through.
641:41 - And once you see this happening up here,
641:44 - you'll be pretty much comfortable.
641:45 - So whenever anybody is using an RTE,
641:47 - he'll be providing couple of values.
641:49 - So what is the name of this one?
641:51 - Name is good enough.
641:53 - We'll also get some of the control from the user.
641:55 - If it doesn't provide, we can also pass on default ones.
641:58 - It actually uses default one.
642:00 - And then we'll also say the label.
642:02 - Oops, label just like that.
642:05 - And we'll also have the default values.
642:10 - Default value.
642:13 - I'll show you what these default values and everything are.
642:16 - Okay, now time to get into this one.
642:18 - So what we're going to do is,
642:19 - first of all, our label logic will remain as it is.
642:22 - Exactly same, just like we have used in the past as well.
642:24 - So let's create a div and have couple of class name.
642:28 - And this one is going to be widthful.
642:29 - That's it.
642:31 - Now let's first display the label.
642:32 - Again, start your JavaScript like this.
642:35 - If the label is given by the user, that's great.
642:37 - Then only we are going to display it.
642:40 - And if the label is present,
642:43 - then we can just simply go ahead
642:45 - and use a label just like that.
642:47 - Okay, this label will have couple of classes,
642:50 - mainly inline block.
642:56 - There we go.
642:58 - And margin bottom of one
643:00 - and padding on the left side of one.
643:02 - That's it.
643:03 - Okay, what is the value that we want to add into this one?
643:05 - Simply label.
643:08 - There we go.
643:10 - So label part is done.
643:11 - We know that part.
643:12 - We have done that, handled this one.
643:14 - Now comes up is the wrapper.
643:16 - First of all, the wrapper.
643:17 - So controller, there we go.
643:20 - We can make it self-closing.
643:21 - No bad, nothing bad.
643:23 - Nothing bad into this one.
643:25 - Since it doesn't take any values or something,
643:26 - we can just go ahead and make it a self-closing.
643:29 - Now this controller takes couple of values.
643:31 - If you wish to read more about it, you can read in the docs.
643:34 - That's why we passed it up.
643:36 - Name, the unique name of your input.
643:38 - That's why we said it name.
643:39 - It also gives you the control here.
643:41 - The control object is from the invoking user use form.
643:44 - So again, the exact same thing I mentioned
643:46 - that control is to make sure
643:49 - that if parent is invoking any child form,
643:52 - that child can again pass on some data back to it.
643:56 - Then we have the render,
643:57 - which is what is that you want to render into this one?
644:01 - These values and default values.
644:03 - You want to study more.
644:05 - You can just go ahead and do this.
644:06 - These are the required ones.
644:08 - Nothing else you have to worry.
644:09 - Okay, let's do them one by one.
644:12 - So we'll say the name, the first prop.
644:14 - Now I will inject a JavaScript here
644:16 - that I'll just keep it as name.
644:18 - If the name is there, otherwise we'll just say content.
644:23 - Okay, if somebody passes me this name
644:25 - to make it this form reusable, that's great.
644:28 - Otherwise we'll call it as content.
644:30 - So control, this is something that you have to pass on
644:33 - when you actually design a form like that.
644:35 - Notice here, this control is something
644:37 - that is a control object from the invoking use form.
644:40 - Right now there is nothing which is using the hook use form,
644:42 - but if there is one, this is where it,
644:45 - or this is how it takes the control of it.
644:48 - Then next one is the render, render.
644:52 - This render is interesting one
644:54 - because it's actually a callback.
644:56 - So just goes like this.
644:59 - And I don't want to use the return keyword.
645:00 - So I'll just go like this.
645:02 - Inside this render itself,
645:04 - you need to provide what fields
645:05 - you are interested in working with.
645:07 - So first of all, I'll say field just like that.
645:11 - And the field that we are interested in working is on change.
645:18 - Okay, a little bit weird as of now, but don't worry.
645:21 - It will be all good in just a second.
645:23 - Now this is the field that what do you want to control
645:27 - like on change because we'll be having a state
645:29 - in the state we'll be staring.
645:30 - So this all will come from who,
645:32 - somebody who will invoke the use hook form.
645:35 - Right now it's not there.
645:36 - So where we'll be designing the major form,
645:38 - that's where this will come in, okay?
645:40 - Now coming back in here,
645:42 - here I want to render the editor.
645:44 - That's the one.
645:45 - And it can be self-closing as well.
645:47 - That's it.
645:48 - Now the editor right now, it looks like just one element,
645:51 - but it requires more fields and more properties.
645:53 - That's what we are going to provide to it.
645:55 - Otherwise, this is the only code.
645:57 - So notice here we are controlling the third party forms
646:00 - just using the controller with a couple of fields only.
646:03 - That's it.
646:04 - You'll understand the importance of it as we create
646:06 - and we'll be using this use forms and all of that.
646:08 - So we will be very soon using them as well.
646:11 - Rest is all good.
646:12 - So this part is all done.
646:13 - Now we can go back to the tiny MCE
646:15 - and provide all these values.
646:17 - So all these values, like you have some initial values,
646:20 - provide that.
646:21 - If you have init, just provide that.
646:25 - If you have plugins, provide that.
646:28 - Toolbar, provide that.
646:29 - Content style, provide that.
646:30 - Most of them is exactly copy paste
646:32 - from the documentation itself.
646:33 - That's exactly what I'll be doing,
646:35 - but let me show you that.
646:36 - First of all, the prop initial value.
646:39 - Initial value, I don't have anything.
646:41 - So I'll just pass on the default value.
646:42 - Whoever is using, just pass on that as it is.
646:45 - Then we have this init.
646:47 - This init, we need to provide the object
646:49 - that what do you want all to have?
646:51 - Like for example, you have option of branding as false.
646:53 - I don't want to show the branding,
646:55 - but it still shows it because it's in the free version.
646:58 - Otherwise, if you pay to them,
647:00 - then it's just like that.
647:02 - And then you can also provide a couple of more parameters,
647:05 - like height and the menu bar, just like that.
647:09 - Then comes up is the plugin.
647:11 - So go ahead and grab as it is,
647:12 - whatever the plugin values are.
647:14 - Again, it's up to you how you grab them.
647:16 - Do you want to use all of them?
647:18 - Do you want to not use all of them?
647:20 - Totally up to you, no force there.
647:22 - I'm just gonna be using all as it is.
647:24 - So in the plugin, I'm saying,
647:26 - give me image plugin, list plugin, everything.
647:28 - So that's how you do that.
647:30 - Next up is simply the toolbar.
647:31 - So just go ahead and grab everything
647:35 - that's there in the toolbar.
647:36 - And in fact, grab everything
647:38 - that's inside the content body as well.
647:40 - Totally up to you, totally up to you
647:42 - that how you want to have it.
647:43 - I just want to have everything of it.
647:45 - So I'll just grab this one
647:47 - and let's grab everything from here.
647:50 - And we'll just paste this.
647:52 - And this all thing,
647:56 - can actually, oops,
648:00 - why is it not moving?
648:03 - Okay, so toolbar looks good.
648:05 - Probably there's something inside the copy paste
648:08 - that I've missed.
648:09 - Let me try that one more time.
648:14 - Usually it's not that bad.
648:17 - Oh, it's bad.
648:18 - Anyways.
648:22 - Yep, toolbar.
648:24 - Now the value is too big, it's just a one long string.
648:28 - I don't know how they do it.
648:29 - Anyways, and then after that,
648:31 - we have ending trailing comma and we have this one.
648:36 - Come on, there's my cursor.
648:39 - Ooh, difficult.
648:43 - Okay, let's move this one.
648:45 - Okay, decently adjustable.
648:48 - I need to change the setting of my VS code a little bit
648:50 - to accomplish that.
648:52 - Okay, but anyways, it's good enough.
648:54 - And the last thing that you want to do is
648:57 - once you are outside of this one,
648:58 - then we'll be having an on editor change.
649:02 - And this is where we just say
649:03 - that I will pass on an on change
649:06 - so that anybody can control this.
649:09 - Okay, this is good.
649:11 - And I think that is all what we want.
649:14 - So a little bit difficult in the first run
649:16 - that hey, why are we doing this, all of this,
649:18 - why is it all of that?
649:20 - But remember, this is a bit of an advanced part
649:22 - of the tutorial.
649:23 - I think it helps you understand a lot here.
649:26 - Okay, now the preparation is done.
649:28 - Now we'll be building one of the most important form
649:31 - in itself, which is the post form.
649:34 - So right click and create a new folder.
649:36 - And we'll be calling this one as post dash form.
649:41 - This is our most important form
649:43 - because it uses almost everything
649:44 - that we have built so far.
649:47 - Post form dot JSX.
649:52 - All right.
649:53 - A lot of logic is also involved in this one,
649:56 - but it's good, it's good.
649:57 - You'll learn a lot of things in this one,
649:58 - have patience, take a break if you wish,
650:01 - but I'll continue here.
650:02 - So first of all, we'll be needing react
650:05 - and we'll also need some of the,
650:07 - you can actually use callback
650:10 - to make it a little bit more optimized.
650:12 - We'll be needing now the hook
650:14 - that we have been waiting to use,
650:17 - which is use form.
650:20 - No suggestion?
650:21 - Okay, no worries.
650:24 - And that will come up from react hook form.
650:26 - This is the most invocation part and important part.
650:29 - We need all the things that we have designed so far.
650:31 - So we'll be needing a button
650:34 - and the button that we have designed,
650:37 - one directory back and it's actually button.
650:42 - We need to go one directory back.
650:43 - Oh my goodness.
650:45 - I actually accidentally made this form
650:48 - outside of the component.
650:50 - It should be inside in here.
650:51 - Let's drag and drop into the components.
650:55 - Yes, please move that.
650:57 - Post form, post form, just like that.
650:59 - Hopefully now it should be good.
651:01 - One directory back.
651:02 - Yep, that's my button.
651:05 - Okay, what else?
651:06 - Input.
651:08 - Import.
651:11 - Input.
651:14 - From.
651:16 - Input.
651:18 - And we need RTE as well.
651:22 - And that's going to come up from RTE.
651:28 - And select also.
651:32 - And that's going to also come from,
651:34 - oh my bad, one directory back and RTE.
651:38 - This one also, oh sorry, select.
651:40 - My bad.
651:42 - Select.
651:44 - This one also, one directory back, RTE.
651:52 - One directory back, input.
651:55 - And this one is okay.
651:57 - Okay, so these are our components that we'll be using.
651:59 - We also need the service because this one is a form.
652:02 - It will be submitting some data.
652:04 - So we need the app right service here as well.
652:06 - Let's use app right.
652:09 - Service.
652:12 - And that service is going to come from
652:14 - a lot of back directories.
652:17 - Yeah, app right.
652:19 - And inside that we need a config.
652:21 - I think that will do the job.
652:22 - We'll be navigating and selecting some of the information.
652:25 - Like we need, we need Redux.
652:28 - So for that we'll be saying use selector.
652:33 - And the selector is going to come up from
652:37 - the React Redux.
652:39 - And we need navigation as well.
652:42 - Import.
652:43 - Why navigation?
652:44 - You might be thinking.
652:45 - Once the form is actually submitted,
652:47 - we want to redirect user back on the homepage.
652:49 - That is why we need that.
652:51 - Use navigate.
652:53 - And that's going to come up from React Router DOM.
652:59 - All right.
653:00 - Quite a lot of import that we have done here.
653:02 - But I think that's good.
653:04 - We didn't actually start it with the template.
653:06 - We should have done that.
653:07 - But anyways, I'll just write that export default.
653:12 - And let's call this one as function post form.
653:17 - And there we go.
653:20 - Should be good.
653:21 - Now, interesting part, as soon as we have form,
653:23 - we might receive a post in that.
653:26 - So we are actually reusing the form in this case.
653:28 - So if somebody gives us the post,
653:31 - we'll use the same form in which we want to edit
653:34 - our post.
653:35 - And if somebody doesn't give me this post,
653:37 - that's okay, we'll handle it accordingly
653:39 - and we'll use it as for creating a new post.
653:42 - That's how we are going to use.
653:44 - Now, most important thing, first of all,
653:46 - we need to register that what all values
653:48 - and everything that you are going to use in the use form.
653:50 - We have this use form now.
653:52 - This is a very, very powerful hook.
653:54 - Instead of managing each of your input
653:56 - into its own individual state, it could be nightmare.
653:59 - Maybe you have 20 input forms
654:02 - and you want to maintain each one in the state.
654:04 - This could be challenging in this one.
654:06 - So that's why we use something like this.
654:09 - Give all of your values and then simply go ahead
654:11 - and use a hook, which is use form.
654:13 - This use form can have all the values.
654:16 - So in here, we can provide all these values
654:18 - like what are my default values.
654:19 - So let's go ahead and have,
654:21 - let's provide these default values as an object.
654:24 - Let's just say we have a default value for the title.
654:27 - Oops, not like that.
654:29 - I'll show you where the title is.
654:31 - So I have a default value for title.
654:33 - If you give me post,
654:34 - then optionally we'll extract it from the post title.
654:38 - If it is not there, then we'll just say it's empty.
654:41 - Similar to this, we'll just go like this.
654:45 - Similarly, we have a slug.
654:47 - We'll say this one and you'll be very fascinated
654:50 - about how the slug's values are being handled in this one.
654:53 - We'll say optionally extract the slug from it.
654:56 - If it is not there, then just go ahead
654:57 - and provide an empty one.
655:00 - Similar to this, we'll be having a content.
655:03 - If the content is there, let's optionally extract that.
655:08 - Forgot a dot.
655:11 - Otherwise, let's go ahead and keep it empty as well.
655:14 - And we have also have a status as well.
655:16 - So status, if post is provided,
655:21 - then optionally unwrap that as a status.
655:25 - If it is not there, then just use active
655:29 - because that's the default state of this one.
655:31 - Okay, so we have provided the default form,
655:33 - but what all the input fields that you are creating
655:36 - are going to be managed up here.
655:37 - So first of all, we'll have a register.
655:40 - I'll walk you through what these registers
655:42 - and everything's are.
655:43 - Another one is handle a submit.
655:47 - Sub submit.
655:49 - This will obviously be submit handler.
655:52 - We'll be writing our code for this one.
655:53 - There's interesting one which is watch.
655:55 - I'll walk you through.
655:56 - This is the most important thing
655:57 - and very interesting thing in the use forms as well.
656:00 - We'll be also having a set value
656:03 - and we'll also have a control.
656:05 - I'll walk you through all of this, don't worry.
656:07 - And we'll have get values.
656:10 - Okay, quite a lot of stuff that we have.
656:12 - Now let's learn and understand them one by one
656:15 - how these things are being managed or being done.
656:17 - Okay, so this is use hook form.
656:23 - Okay, this is where it ends.
656:25 - All right, let's go one by one
656:27 - how things are going to unwrap.
656:29 - First, let's focus on writing the logic part
656:31 - and then one by one we'll be focusing on building
656:34 - the UI part of the app as well.
656:37 - Okay, so first of all, let's grab navigate
656:42 - from the hook, use navigate, just like that.
656:45 - Right now it does nothing, but we have an option.
656:48 - And then we have user data.
656:50 - How we are going to grab the user data,
656:51 - that's exactly why we have use selector.
656:54 - Selector will give me a state just like that.
656:57 - And we can just extract the data by saying
656:59 - state dot auth dot user data.
657:05 - All right, so my user data is now in the user data field.
657:09 - There are a couple of things I need.
657:10 - For example, I need to have a submit action as well.
657:15 - So people will be submitting the form.
657:17 - We'll create an async form for that.
657:21 - And it will give us the data.
657:23 - Right now we are not doing anything in that.
657:25 - We will come back onto this one and figure it out.
657:27 - The most important part is the slug.
657:30 - So the way in case you saw the application
657:33 - when I was showing you the demo,
657:34 - the slug is a very interesting thing.
657:36 - We actually are transforming the title into the slug.
657:40 - So everything in the title is being converted
657:42 - into the lowercase, we are trimming the spaces
657:45 - and spaces are being converted into dashes,
657:48 - rest everything are ignored.
657:49 - So the way how I did it is, let me show you that.
657:53 - It's actually just a method slug transform.
657:57 - And we'll be using a use callback to optimize it.
658:00 - Otherwise it will be keep on wasting the resource.
658:03 - Either if in case you don't want to use the use callback,
658:06 - that's totally fine, by the way.
658:08 - Okay, so I did a, took a help of a little bit of the chat
658:12 - GPT, I'll show you where I took that.
658:14 - First of all, the way how we actually use that,
658:16 - you cannot directly actually go ahead and monitor
658:20 - or get any values from it.
658:21 - So we have to actually grab a value out of it.
658:25 - So notice here, I'll be controlling these set values
658:29 - and get values.
658:30 - I'll walk you through that as well in just a minute.
658:33 - We'll be holding that part.
658:37 - All right, so we're designing this slug transform.
658:40 - And what's this doing is anybody can call this method.
658:44 - The only thing is you have to pass me a value.
658:45 - What is this value?
658:47 - It's nothing, it's just the value in the current form
658:50 - that you're using, just pass me on that
658:52 - and I'll extract the value.
658:53 - So I'll walk you through, don't worry, in a minute,
658:56 - you'll understand everything of it.
658:58 - I'll say if the value is there
659:00 - and the type of value we need is a specific one,
659:02 - if the type of value is string, then only we can proceed.
659:08 - If that is the case, if we are having that,
659:11 - then we can simply go ahead and return a value out of it.
659:14 - So I'll just move it to the next line
659:16 - and then I'll come back and put it into this one later on.
659:19 - So what we can do is we can return a value
659:22 - and we can provide a couple of methods on this one.
659:25 - So this value can have a method of .trim.
659:29 - First of all, let's do that.
659:31 - Once we are done with that,
659:31 - let's convert everything to lowercase.
659:33 - So we'll use to lowercase, all right.
659:38 - And then we'll be using a simple regex
659:40 - to replace some of the stuff.
659:41 - And this is the regex part
659:42 - where I took a help of a little bit of chat GPT.
659:45 - Otherwise I used to use a website regexr,
659:47 - but this time I took a help from a chat GPT.
659:50 - So we'll say replace, there we go.
659:54 - And in this replace, I'll provide what value
659:57 - I'm looking up for, that's the regex value.
660:00 - And the second parameter is what to replace with.
660:03 - And I'll just use the dash.
660:06 - So what to replace with, this is something
660:08 - that I grabbed actually directly for chat GPT.
660:11 - Put up a prompt that I want a value
660:13 - that converts everything, spaces and everything
660:17 - that selects everything.
660:17 - So I'm just saying that, hey, this is a negate by the way.
660:21 - Don't select lowercase, uppercase, any digits,
660:25 - or any spaces, rest everything are converted into this one.
660:29 - And then optionally what you can do in case,
660:32 - although it does the job,
660:33 - but I found in some of the edge cases
660:35 - it was still bothering me.
660:36 - So I didn't found out any particular solution as of now.
660:40 - So I just went into replace.
660:42 - And I wrote another simple query,
660:44 - which is a basic regex by the way.
660:46 - It simply goes ahead and say,
660:52 - a little bit itchy throat.
660:54 - So it simply goes ahead and say that, hey,
660:56 - I want to select all the spaces.
660:58 - So slash S is for the spaces.
661:00 - And I want to look at for the globally.
661:03 - And then just want to just double short B, it converted.
661:08 - Although in most cases I've found
661:09 - that this alone works nicely,
661:11 - but in some cases this was problematic.
661:14 - So I just wanted to make sure that at the final end,
661:18 - I'm just replacing all the spaces with the dash
661:21 - and I'm ignoring all these digits
661:24 - and lowercase A to Z, uppercase A to Z and slashes.
661:28 - I'm not really that great or good into these regex.
661:32 - I accept that, but hey, this works fine.
661:34 - So there we go.
661:36 - So we are returning the value and that's it.
661:38 - That's your slug transform.
661:39 - That is all it takes.
661:40 - Now we also need to pass on a dependency array
661:42 - onto this one.
661:43 - We don't have any dependency,
661:44 - but optimize this as much as possible.
661:47 - Okay, so this is my slug transform that we have.
661:50 - Okay, now you might be wondering that,
661:53 - hey, that's great, we have slug transform,
661:56 - but we want it to run as soon as somebody types something
661:59 - into the title form.
662:01 - How can I do that?
662:02 - That's an interesting one actually.
662:04 - You cannot do that directly
662:05 - if you are using any of the React
662:06 - or you have to monitor a lot of things.
662:08 - But if you look at this one,
662:10 - there is a component being given to you that is watch.
662:14 - And what it says is this method will watch specified inputs
662:17 - and return their values.
662:19 - So not only it can watch my input in the name field,
662:22 - it can also return me that value.
662:24 - So I can use this.
662:25 - And where can I use this or how can I use this?
662:28 - Really, really simple.
662:29 - Let me walk you through with that as well.
662:31 - I can use actually it inside the use effect hook.
662:34 - Oh, that's interesting.
662:36 - So I'll just say react dot use effect.
662:40 - There we go.
662:41 - And this is our callback.
662:44 - And looks like just use a callback like this
662:49 - and we need a dependency array.
662:51 - Okay, first of all, let's worry about the dependency array.
662:53 - On what fields this should be dependent.
662:55 - First of all, we'll obviously use watch, that's the one.
662:59 - Also keep on watching onto the slug transform.
663:01 - If it changes a little bit,
663:02 - also I want to render, re-render the things.
663:05 - And also the set value.
663:06 - Now you might be wondering, what are these set values?
663:09 - Can you explain that a little bit?
663:10 - Because you're using this set values, get values
663:13 - and quite a number of things.
663:15 - These are actually coming up from the use form itself.
663:17 - When we're using use form,
663:19 - you don't need to create the states.
663:22 - That is the one advantage.
663:23 - I'll show you how these are useful
663:24 - when we'll be designing the input field itself,
663:27 - then it will get much more clear.
663:29 - But the whole idea is you don't want to create
663:31 - thousand different states or variables.
663:33 - We can just use it directly like that.
663:35 - I'll show you that, don't you worry?
663:37 - Okay, so the dependency array part is done.
663:39 - Now let's go into the use effect, this one.
663:43 - Now here's the interesting thing.
663:44 - How do we use this watch?
663:46 - Really simple.
663:47 - You just simply go ahead and use a watch just like this.
663:49 - This watch gives you a callback and you can provide the value.
663:54 - By the way, these value are all the values
663:58 - that you can have in the form itself.
664:00 - These are the values.
664:01 - And out of that, I'm looking up for one value,
664:03 - which is name.
664:04 - So watch out, out of all these values,
664:07 - the fields that you have, watch out the name for me.
664:10 - And once you're here, let's go ahead and have a callback.
664:14 - Just like this.
664:15 - And there we go.
664:17 - Now, what do you want to do?
664:20 - So if the name is title,
664:25 - I haven't created this yet, but I'll do that very soon.
664:28 - If the name of the object, because as you can see,
664:31 - the values are having so many properties,
664:33 - title, slug, and all of these ones.
664:36 - If the value is name, that means the name of the post itself
664:40 - is the title, then only we want to run it.
664:43 - So what do you want to do?
664:44 - In that case, I want to use a set value.
664:46 - So again, set value can be used not just for setting
664:49 - one value, but in any field itself.
664:51 - So set value is here.
664:53 - Now in the set value, what do I want to use?
664:55 - Set value in what field?
664:56 - You have provided me number of fields here.
664:59 - I haven't given them yet, but there will be many.
665:02 - As you can just have input fields,
665:03 - all of them are governed by the use form.
665:06 - I just want to set one field, which is my slug.
665:08 - So I'll provide you slug like this.
665:10 - There we go.
665:11 - How do you want to set it?
665:12 - I want to set it by using the slug transform method.
665:16 - I'll provide you the value dot title.
665:20 - Okay, once I give you the title,
665:21 - that means that will act as a value for you.
665:23 - And you can just use that value,
665:26 - then run all of this operation.
665:28 - And since you returned me that,
665:30 - I'll just use that to set the value.
665:32 - A couple of more fields and parameters
665:34 - you want to provide in here is should validate
665:37 - because there are ways to provide a validation
665:40 - inside the use form using the joey and other libraries.
665:44 - We are not doing that as of now.
665:45 - It's already too much.
665:47 - We'll just use should validate as true.
665:50 - So all our basic validations will kick in.
665:52 - We don't want to go too much in depth of that.
665:55 - All right, why is it bothering?
665:57 - Title may not exist.
665:58 - Yeah, it doesn't exist as of now,
666:00 - but it will vary soon in the future.
666:03 - Quite a lot of intense work that we have done.
666:05 - And by the way, we haven't worked on submit yet.
666:08 - We'll do that.
666:09 - But first, I think now it's time to get more clarity
666:12 - because these things will keep on adding to the confusion.
666:15 - So let me just go ahead and render,
666:17 - provide a render here so that you can understand that.
666:20 - All right, so we'll just say, okay, let's minimize this.
666:26 - Post form, looks good.
666:28 - Here we should be returning the render element.
666:31 - Return, what do you want to return?
666:33 - I want to simply return a form.
666:36 - Okay, this form is not going to have any action,
666:40 - but rather on submit.
666:42 - What do you want to do?
666:44 - I want to use handle submit in that case.
666:47 - Okay, handle submit should not be used directly like this,
666:52 - because if you're using a use form,
666:55 - the handle submit should be used from the use form.
666:58 - This is the handle submit,
667:00 - but actually it doesn't magically knows
667:02 - what to do with the data.
667:03 - So this is going to be the method
667:04 - which is actually going to submit the data.
667:06 - The way how you do it is a little bit weird,
667:09 - but this is a method,
667:10 - and in this you pass on another method.
667:11 - So yeah, higher order functions, JavaScript at its peak.
667:15 - Yeah, this is how the React hook form,
667:17 - but don't worry if you'll watch these videos couple of times,
667:20 - you will be used to with the React hook forms.
667:23 - Very powerful, very useful.
667:25 - Okay, let's go back and use some of the class names
667:29 - to make it beautiful.
667:30 - Flex, and this one is going to be flex wrap.
667:35 - All right.
667:37 - Okay, next up is the most interesting part
667:39 - after the div of course.
667:41 - So we'll have a div, we'll have a class name,
667:44 - nothing much, we want to use the width of two by three,
667:48 - and we'll be using padding on x-axis of two, that's it.
667:52 - Okay, now comes the interesting part
667:53 - is we'll be designing our first input.
667:56 - Notice here, I'm using the input field
667:58 - that I designed earlier, that's it.
668:01 - But how we are controlling this input field,
668:03 - that is the most important part.
668:05 - First of all, let's pass on a label
668:06 - which we designed as a prop into this input.
668:10 - We'll be calling this one as simple title.
668:14 - All right.
668:16 - Placeholder, why are no suggestions coming in?
668:22 - Oh, these are props, my bad.
668:25 - Placeholder, oh, suggestions are not coming
668:27 - because this is not a regular HTML form,
668:29 - this is my custom component,
668:31 - that's why suggestions are not coming in.
668:33 - And we'll say title, we will be having a class name
668:37 - of margin bottom of four, there we go.
668:43 - Okay, now comes up the part
668:47 - where we actually use the use forms.
668:50 - Let me show you that, let me take you onto the website.
668:54 - So this is the register and the register and whatnot,
668:56 - use form, let's go ahead and use that.
668:58 - So if there is any example of the forms
669:03 - that would help us to understand this so much better.
669:06 - Okay, get started, and here it is.
669:10 - Okay, so how, oh, this is the one that I wanted to show you.
669:15 - So whenever you're using any input,
669:17 - this is the one which we discussed,
669:18 - handle, submit, and on submit, exactly like that.
669:22 - But when you're actually using any input field,
669:24 - this is the way how you actually monitor or govern that.
669:28 - Notice here, register your input into hooks,
669:30 - so we have to explicitly register these,
669:33 - each input inside the hooks
669:34 - so that they are available as values
669:37 - by invoking the register function.
669:39 - So we have to actually use this JavaScript,
669:41 - then have to extract or we can say de-structure the register
669:46 - and then provide that,
669:47 - hey, this is the example that I'm using.
669:49 - So yeah, this is the one.
669:51 - Let me go back onto the code part.
669:53 - So this is where we start our JavaScript.
669:55 - We simply say register, there we go.
669:59 - This register is a method, that's how we register it.
670:02 - We are gonna call this one as title.
670:04 - Now it is registered as a title
670:06 - and we can provide more fields like required.
670:09 - There's a lot more that you can do,
670:10 - but we'll just go with the required as true.
670:12 - This is the part.
670:13 - Now notice here, now this input field is registered as title.
670:17 - So I'll go back and notice here when I say value
670:20 - and the name is title because every input field has a name
670:24 - and I gave it a name of title.
670:26 - Now, this will be monitored here.
670:27 - So wherever you pass on the value inside this
670:31 - into this use effect, it will keep on watching the values.
670:34 - If the name is a title, which it is,
670:37 - then only the set value will here.
670:39 - And again, watch will be responsible
670:40 - for continuously watching or monitoring this input field.
670:45 - Very interesting.
670:46 - So much difficult to do with the core,
670:48 - but this is much, much easier.
670:50 - Okay, now let's have another input field,
670:53 - which is slug, interesting one.
670:55 - Input, self-closing, just like that.
670:58 - Okay, let's do one by one.
670:59 - First of all, label.
671:01 - That label is going to be slug
671:06 - and the space colon, something like that.
671:09 - And then we'll be having placeholder.
671:11 - Placeholder is going to be slug as well.
671:15 - And then we have class names, nothing much.
671:18 - Margin bottom of four, good enough.
671:20 - Okay, now let's come up onto the part
671:22 - where we registered it into the use form.
671:24 - How do we do that?
671:26 - We first of all, start our JavaScript, register,
671:29 - just like that, inside the register,
671:31 - we name it as slug, okay?
671:33 - And what should happen?
671:34 - How this slug should actually work?
671:36 - That automatically is being taken care by the watch itself.
671:39 - So I just go ahead and say this is required as true.
671:46 - All right, so this should be there.
671:48 - Okay, one more thing that we can do here is
671:50 - that we can actually have this input
671:54 - as slug transform as well.
671:55 - So let me just go ahead and work with that.
671:58 - So on input, what do we want to do?
672:03 - That's interesting one.
672:04 - Okay, let's start our JavaScript first.
672:07 - We will capture an event onto this one.
672:10 - And then we'll just go like this, curly braces,
672:13 - just like that.
672:14 - So I'll just go ahead and use set values
672:16 - because just because you have used the slug,
672:19 - remember, this slug is just returning the value.
672:23 - It's not doing anything, it just says set values.
672:25 - It's just returning everything to set values.
672:28 - But there is nothing we have said
672:29 - that what should be the value inside it?
672:31 - This is registering, giving the values,
672:34 - but we haven't said how to take the values back
672:36 - into this form and fill it up.
672:37 - That's what we are taking care of right now.
672:39 - So set value.
672:41 - Now we'll say that, hey, I'll set the value
672:43 - and my field name is slug, okay?
672:46 - And how do I get these values?
672:48 - So use the slug transform here.
672:51 - And then we'll be, in order to use the slug transform,
672:54 - we have to provide a value, okay?
672:58 - What we'll do is we'll say e.current target.value.
673:08 - And that's it.
673:11 - And we'll simply say should validate,
673:17 - and we'll be saying true.
673:19 - Let me walk you through one more time.
673:21 - Okay, notice here, right now we are not actually
673:25 - exporting the values.
673:26 - This is where we have done already this part.
673:28 - But now this input field is going to set some values into it
673:34 - and the setting of the value is going to happen
673:37 - via this on input only.
673:39 - That's the case.
673:40 - In the on input, we are saying that, hey,
673:42 - as soon as some inputs are being put into this input field,
673:46 - use the set value, which is given to us as a hook
673:49 - inside this hook, just a second.
673:56 - And here it is.
673:57 - So this was given to us.
673:58 - So notice here, we are not using thousands of set values
674:01 - or set field, set input field, set slug, get slug.
674:04 - No, we just use one thing, which is set value,
674:07 - and we use get values.
674:08 - To get any values out of any field,
674:11 - we just provide the name of that.
674:13 - To set any value in any of these fields,
674:16 - we just use one hook, which is set value.
674:18 - That is the advantage.
674:19 - Just two of these methods, set values, get values.
674:23 - And you can actually set and get values
674:25 - from pretty much any field at all.
674:28 - That is what makes me like, wow, this is too much
674:31 - how we are actually using this.
674:33 - All right.
674:34 - So now we have the set values.
674:37 - We actually use the set values here as well to provide that.
674:40 - But here we are actually using the set values
674:42 - on this particular input field.
674:44 - All right, quite an interesting one.
674:46 - Now let's use another one, which is our RTE.
674:49 - So that is easy one.
674:51 - We have already worked onto this one.
674:53 - So RTE could be self-closing, just like that.
674:57 - Interesting.
675:00 - Oh, we need to get out of it.
675:03 - RTE, self-closing, just like that.
675:06 - Pass on a couple of values.
675:08 - First of all, label.
675:09 - The label is going to be content, colon, just like that.
675:14 - We need to provide a name to this one.
675:17 - And the name is going to be just like that.
675:20 - And we'll say content.
675:22 - And then we have to provide a control.
675:25 - And we'll say control, just like that.
675:27 - Control, again, is given to us from here.
675:30 - Notice here, we got the control.
675:32 - This is exactly specifically designed
675:35 - to take control of the input fields, which
675:37 - are outside or third party inputs.
675:40 - And then we simply have some of the default values.
675:43 - If you have, give them.
675:45 - But right now, the default value is only for one thing,
675:47 - which is get values.
675:50 - Remember, I told you, get values.
675:53 - So if you want to get values from any field, just like that,
675:56 - let's call this one as content.
676:01 - Now imagine, if you have to deal up with these many forms,
676:04 - how many states you would be designing?
676:06 - So easy.
676:07 - OK, this value is all done.
676:09 - So now we'll close this div, which
676:12 - is the first portion of it.
676:14 - Now we need to go in the one third part of this one.
676:18 - And we'll go with the class name on the right part of it.
676:21 - So we'll just say 1 by 3.
676:23 - And we'll say, fix dash 2.
676:29 - All right.
676:31 - And in here, we are having two fields.
676:33 - One is the input field for the images.
676:36 - And another one is simply the field,
676:39 - which is just saying, is it active?
676:42 - Is it inactive?
676:43 - Something like that.
676:43 - So that's basic.
676:45 - OK, let's start with the input.
676:48 - And inside the input, it could be self-closing.
676:52 - OK, label, featured image.
677:00 - And the type is going to be changed to file, file selector.
677:06 - And the class name is going to be margin bottom dash 4.
677:13 - Class name margin bottom dash 4.
677:16 - All right, what do you want to accept?
677:19 - That's the idea.
677:20 - We can pass on as many props as we want.
677:23 - So what do we want to accept?
677:24 - We want to accept image, which is PNG.
677:29 - We also want to image, which is JPGR.
677:34 - We also want to accept image, which is JPG.
677:38 - If you have more, you can just provide
677:40 - more of these acceptance fields.
677:41 - Basic HTML, nothing more in there.
677:44 - Then we have to register this field as well.
677:46 - So let's go ahead and do that, dot dot dot register.
677:50 - And this field will be known as image in the registration
677:54 - field.
677:55 - Again, basic required is true.
678:00 - Required, that's going to be true.
678:04 - I hope you notice the difference in here as well.
678:06 - All the fields are easily being registered in here.
678:09 - So this is just register.
678:11 - This is also just register.
678:12 - Only difference is when we don't have a control on that.
678:16 - Then we pass on the control to get the values from it
678:19 - automatically.
678:19 - Otherwise, the rest of the fields
678:20 - are just very straightforward.
678:21 - Register, register, just like that.
678:23 - OK, we can actually have it as required as true.
678:27 - But we can just simply say, if the post is there,
678:31 - then we don't want it.
678:32 - So if post is no post, just like that.
678:35 - OK, once we are done with this, then
678:38 - depends on the post, whether we are going to actually get
678:42 - a file preview or not, just like that.
678:44 - So let's also try that.
678:46 - So we'll say, if the post is there, then only we'll
678:49 - get a file preview.
678:51 - So we'll just go like that.
678:53 - And we'll say, inside this div, we'll have a class name.
679:01 - We'll say width is going to be full inside in here.
679:04 - And margin bottom is going to be 4.
679:06 - And inside this div, we'll be having an image.
679:10 - The source of the image, that is where things get interesting.
679:13 - We'll be using app write service, get file preview.
679:18 - And pass on this post dot featured image.
679:24 - Let's pass on that.
679:25 - If that will come up, if post is there,
679:27 - we will obviously get the featured image.
679:30 - And in the alt, let's use the title.
679:34 - Post dot title.
679:37 - We should be, technically, we don't
679:39 - need to use a question mark here because we're already
679:41 - checking it up here.
679:42 - So that is good enough.
679:44 - I think that's good.
679:45 - Let's add a class name here.
679:53 - Let's use a class name.
679:54 - And that should be rounded.
679:56 - Dash l g.
679:59 - There we go.
680:01 - All right.
680:02 - So this is the case when the post and featured image is
680:04 - there.
680:04 - Now we need to have to work with one more thing.
680:08 - We need to select the options for the user as well.
680:11 - Quite a lot.
680:13 - But this is what happens when you design complex applications.
680:15 - We have a select field.
680:16 - We can use it as self-closing.
680:18 - All right.
680:19 - Move it up here.
680:21 - Let's provide the options.
680:22 - That's the first parameter we have to pass on.
680:24 - The options is going to be an array.
680:27 - So let's pass on an array.
680:29 - The first value is active.
680:31 - The second value is inactive.
680:35 - That's it.
680:36 - That's your option.
680:38 - The label is going to be status.
680:42 - And the class name.
680:45 - We just need some margin from bottom in all of these cases.
680:49 - And last but not the least is register it
680:52 - into the React form, React hook form, dot dot dot, register.
680:57 - And we want to register it with the status.
681:01 - Register it.
681:02 - And now let's provide.
681:04 - This is very optional.
681:05 - Required is going to be true.
681:09 - There we go.
681:10 - That's it.
681:10 - So select form is required.
681:12 - Now let's go ahead and use a button to submit it.
681:15 - OK.
681:17 - So inside the div, let's keep it inside the div itself,
681:21 - we'll be using a button.
681:23 - We'll be using our own button.
681:25 - So there we go.
681:29 - OK.
681:29 - This is the button that we have.
681:31 - And inside this button, we can have childrens.
681:34 - That's how we designed it.
681:35 - So if the post is there, then we'll
681:38 - call this button as update.
681:40 - If the post is not there, then we'll
681:42 - call it one as create or submit, whatever you like.
681:47 - All right.
681:47 - So this is the button.
681:49 - And inside the button, we can pass on more values.
681:52 - Like type of the button is going to be submit.
681:56 - And what else?
681:57 - Background color.
681:59 - BG color.
682:01 - These are the properties which we have given.
682:03 - So let's also use JavaScript here.
682:05 - If the post is there, then we'll be using BG green.
682:10 - So we'll say BG dash green suggestions, please.
682:16 - No suggestions.
682:17 - BG dash green dash 500.
682:21 - Otherwise, we'll just say undefined.
682:26 - All right.
682:27 - We can use another color as well, by the way.
682:30 - And one more thing we can just provide in here
682:32 - is class name with dash full.
682:38 - All right.
682:38 - So this is the form that we have.
682:40 - Again, we have studied a lot into this one.
682:42 - I totally, totally understand that piece, that part.
682:46 - But there is one more thing still remaining,
682:48 - which is the easy one, by the way.
682:50 - We haven't yet submitted anything.
682:52 - The submission part is definitely easiest
682:54 - among the all.
682:55 - But definitely, this is something
682:58 - you need to understand one by one how things are going up.
683:00 - Now, if the post is there, then obviously based on this,
683:03 - we'll be getting the value.
683:04 - So first of all, we have all the data.
683:06 - And by the way, all the data now we have,
683:08 - as soon as you submit the form, the values are being called
683:11 - and we have the data.
683:13 - We need to extract the data from a couple of resources.
683:16 - Let me show you that.
683:17 - It's easier to actually write the code than to explain that.
683:20 - So if the post is there, OK.
683:24 - If post is there, then we have to do something.
683:26 - Otherwise, we have to do something else.
683:28 - OK.
683:29 - So post was there already.
683:30 - OK.
683:30 - So first, let's extract the file.
683:32 - Let's get the file.
683:34 - File will be coming up from the data.
683:35 - Everything is stored inside the data.
683:38 - And we'll be having an image.
683:40 - And we'll be extracting this.
683:42 - OK.
683:44 - Now, what we're going to do is we
683:47 - are going to do something if we find the file.
683:49 - Otherwise, we'll be just putting a null inside this one.
683:54 - Rest of the checking automatically
683:55 - can be done by the app write itself.
683:57 - If it is there, then we want to use an app write service
684:00 - to upload the file.
684:01 - So let's go ahead and await this because this service takes
684:04 - time.
684:05 - And we're going to use app write service.
684:07 - We are going to use upload file.
684:11 - And in the upload file, we just pass on this data.image.
684:16 - And obviously, the path, which is in the first field.
684:20 - OK.
684:20 - So that's the part one.
684:21 - And this is the part.
684:24 - Now, again, we need to continue further if the file is there.
684:28 - If the file is there, then let's go ahead and delete this.
684:33 - If the file is there, then we are
684:39 - going to use app write service.delete file
684:44 - because we want to delete the previous file.
684:46 - Previous file is inside still in the post.
684:49 - So we'll say post.featured image.
684:53 - If file is there, go ahead and delete that.
684:55 - You can also go ahead and use an await here as well,
684:58 - if you wish.
684:58 - But I think it's good enough.
685:00 - It can do its job behind the scene as well.
685:02 - Depends on when we do more thorough checking,
685:05 - we can actually go ahead and work on with this.
685:08 - Now, let's call this one as DB post.
685:13 - And what we want to do is await app write service.
685:18 - And this one is going to be responsible for updating
685:20 - the post.
685:21 - For updating the post, provide me the ID first.
685:23 - So that can be extracted from post.dollarID.
685:27 - There we go.
685:28 - And then provide me all the data that you have.
685:31 - OK, what data do you have?
685:32 - I can just extract everything from the data itself.
685:36 - And one thing that you have to give me
685:37 - is the featured image to overwrite that featured image
685:40 - because we just uploaded that.
685:41 - That will be coming up from file if we have that.
685:44 - If we have the file, then give it file.dollarID.
685:53 - Otherwise, if you don't have it, just give me undefined
685:55 - so that if it is compulsory, app write can throw me an error.
686:00 - Now, continuing further, in this case,
686:03 - if the post was updated successfully,
686:05 - then let's redirect the user.
686:06 - So let's go ahead and work with that.
686:08 - If we have the DB post, if that's the case,
686:13 - we have the DB post, then let's use the navigate,
686:16 - which we created from use navigate.
686:19 - And we'll say go to slash post slash the slug of it, which
686:25 - we can get from like this.
686:28 - And we'll be having not the post, DB post, the newer one,
686:32 - DB post.
686:34 - And we'll get a dot dollar ID.
686:36 - There we go.
686:37 - Nice and easy.
686:38 - Keep on talking, keep on writing the code.
686:40 - That makes life so much easier.
686:42 - OK, this is the part where we have the post.
686:45 - What about when we don't have the post?
686:48 - In that case, we'll go with the else part.
686:50 - That means we are creating a fresh post.
686:52 - So let's upload the file first.
686:55 - Go like this.
686:56 - File, await, no, question.
686:59 - Like this, await, and then app write service.
687:03 - Please help me to upload a file.
687:06 - OK, how do we upload a file?
687:08 - By extracting it from data dot data dot image.
687:13 - And out of that image, the first value, which is the path,
687:16 - once you have uploaded that, then what should I do next?
687:19 - If I have the file, let's get that field properly set.
687:25 - Let's use this.
687:26 - If I have file, then what I want to do
687:29 - is I want to create a field ID, a file ID, sorry, field ID,
687:34 - file ID as file dot dollar ID.
687:42 - And then inside this data that I have access,
687:45 - I will create a new field, which is featured image, which
687:49 - will have this one, file ID.
687:52 - Could have done that in one line as well,
687:54 - but I'm more comfortable with this one.
687:56 - Now that you have all the data, you
687:58 - have also the access to featured image, which
688:01 - you uploaded first.
688:02 - Let's create a new post.
688:04 - So obviously, I'll say await app write service dot create post.
688:11 - Provide me all the data that you have.
688:13 - So first of all, let's give it all the data
688:15 - by destructuring it, and then also give it a user ID.
688:20 - A user ID can be given to you by simply user data.
688:23 - Remember, we have access to it in every component.
688:26 - And we can actually have a user data dot dollar ID.
688:32 - That's how you grab the ID.
688:34 - OK, now once you have done that, let's
688:35 - store that into a variable.
688:37 - Let's call this one as DB post.
688:40 - OK, once this is done, that means DB post is created.
688:44 - Now inside this, I want to check for another condition.
688:48 - If by this time the DB post is being created, let's navigate.
688:55 - Navigate, where do you want to navigate to?
688:57 - We want to navigate to slash post to the newer.
689:01 - There's only one post ID that we have, which is DB DB post.
689:06 - We need to use variables.
689:09 - We need to have DB post.
689:11 - And we'll extract the ID out of it.
689:14 - All right, so this is not too much,
689:17 - but you need to be very careful with what you are doing.
689:20 - That's why I always say don't code with the mouth shut.
689:24 - Always code by thinking of it.
689:28 - You can do one by one step by step all these process.
689:30 - This is almost kind of a standard practice.
689:32 - We always upload the files first.
689:34 - We usually create helpers for them, upload the file,
689:37 - get back the URL of the file, set your object properly,
689:40 - and then use helper files to upload the file,
689:42 - create the files, create the post, whatever you want to do.
689:46 - Quite an intensive video in itself, I would say that.
689:49 - And definitely took us a little bit while, well over one hour
689:52 - onto this video, but I think it's good enough.
689:55 - And that's majorly it, what we wanted to do.
689:58 - Now it's time that we actually assemble
690:00 - all of our components and start debugging them one by one.
690:03 - Obviously there are mistakes in it,
690:04 - but we'll figure them out.
690:06 - Let's catch up in the next video.
690:10 - Hey there everyone, Hithai Sheer,
690:12 - back again with another video.
690:13 - And in this video, we're going to continue our journey.
690:16 - We'll create two more components,
690:18 - which is sign up and the login.
690:20 - Now this could be done either in the pages
690:22 - or in the component, both are absolutely correct.
690:24 - I prefer to do it in the component,
690:26 - so that in the page, I just have to load one component
690:29 - and that's it, it brings all the functionality,
690:31 - but it's totally your choice.
690:32 - Maybe you want to just keep the components
690:34 - as purely just the UI part.
690:35 - I want to keep it as both the logic and the UI part,
690:38 - totally your decision.
690:40 - Now, once we are done with the login and sign up,
690:42 - then we'll be working on the posts
690:44 - because there are many posts,
690:46 - which will be available in the post page.
690:48 - So basically we'll be making a query,
690:50 - we'll get the data and we'll be just passing on
690:52 - to another component so that it can loop through it.
690:55 - Let me just share the screen, it will be much more easier.
690:57 - Hope you recovered well from the last video,
690:59 - it was quite intense.
691:01 - And that video requires you to spend at least one or two day
691:04 - with the documentation of React hook form,
691:07 - understand it better or probably repeat that,
691:10 - that always helps to understand code more.
691:12 - The more you see the code,
691:13 - the more you read the documentation,
691:14 - it gets much more clear with that.
691:16 - Over the time, things requires reputations,
691:18 - so that's why I highly, highly recommend
691:20 - that once you are done with this series,
691:24 - go it again for one more time, that will surely help you.
691:28 - Let me share the screen and let me walk you through
691:30 - that how and where we are going to work through.
691:32 - So this is the docs, I still read it to this day
691:35 - and there's always something more interesting
691:37 - going on in here.
691:39 - Now, one thing that we are not going to focus
691:41 - in this video is this part.
691:42 - We have already seen that how we can register
691:44 - any input field with the React hook form
691:47 - by this method and then everything is available in the data
691:50 - and that's why we have this data available.
691:52 - So register form states and watch and handle submit
691:56 - and whatnot, this is the data.
691:58 - So this is what we are having.
692:00 - All right, so we'll not worry on that part,
692:02 - rest of the part we will walk through again.
692:05 - Okay, so first of all, let's go into components,
692:08 - right click and new and this will be our first,
692:11 - let's start with the signup.
692:14 - Come on, write that, signup.jsx.
692:21 - Okay, so what goes into the signup?
692:24 - First of all, let's do rfce to get
692:26 - a React functional component.
692:28 - Now in this one, since this is a signup,
692:30 - we definitely 100% requires the auth service.
692:34 - So let's go ahead and grab the auth service.
692:38 - Auth service and that obviously is going to come
692:41 - from one directory back inside the app right
692:44 - and inside the auth.
692:46 - So that's our app service.
692:47 - We'll also be using some of the links in this one,
692:50 - we'll navigate the user forcefully once this is done,
692:53 - signup will either redirect him into the application
692:56 - or to login page, but that is going to be required.
692:59 - Let's go ahead and grab link and navigate,
693:02 - rather use navigate, use navigate.
693:08 - Come on, navigate.
693:10 - And these are going to come from React Router Dom.
693:14 - All right, we also will be using React, that is obvious.
693:18 - We will be managing some of the states as well.
693:21 - I'll walk you through not too much states
693:23 - because we'll be dependent majorly on the React hook form,
693:26 - but still there is a place we'll be using it.
693:28 - I'll walk you through with that.
693:29 - All right, so this is the all and obviously we'll be needing
693:32 - some of the buttons and all these basic components.
693:35 - So let's go ahead and grab a button
693:37 - and that button is going to come up from,
693:41 - we need to go in the same and the button.jsx.
693:44 - We need input and logo as well.
693:47 - So import, input, come on.
693:53 - Input from the same current directory that we are.
693:57 - Just grab input and the logo as well.
694:00 - Although there's nothing in our logo,
694:02 - but still we'll just import this.
694:05 - Logo from dot slash logo.
694:09 - All right, so components are there
694:11 - and obviously we'll be requesting some of the features.
694:15 - We'll be using use form.
694:16 - So let's bring them as well.
694:18 - First one, use form because I'll be using
694:20 - this left and right, use form.
694:24 - And that is going to come up from React hook form.
694:30 - And a little bit Redux also is required.
694:32 - Mainly use dispatch because I'll be dispatching
694:35 - some of the actions.
694:37 - Dispatch and that dispatch is from React Redux.
694:45 - All right, quite a lot of stuff that we have imported,
694:48 - but that's good, we got this one.
694:50 - Now let's see how we're going to do that.
694:51 - First of all, the easiest part is to use the use navigate.
694:55 - So I think let's do that.
694:56 - Easy part, I always love to do first, navigate.
695:01 - And that simply says, use navigate.
695:05 - There we go, that's it, easy part done.
695:08 - Let's create a state for the errors.
695:10 - And that's the reason why we are using use a state.
695:13 - Because right now the form, all the form
695:15 - has the capability to handle the errors as well.
695:18 - There are validations and whatnot
695:20 - and all of that, like there is a specific dedicated
695:22 - how to handle the errors as well.
695:24 - But I think I'll handle them better in the state.
695:27 - So I'll just use the state in this one.
695:30 - Error and that will be set, error.
695:33 - And for this, we'll be using use state.
695:37 - And by default, there will be nothing, no errors at all.
695:40 - We'll be also using the dispatch.
695:42 - So easy part, just like navigate,
695:44 - let's go ahead and use dispatch.
695:46 - And that will be coming up from use dispatch.
695:49 - So that whenever we want, we can just now use it.
695:52 - All right, now the next thing is
695:54 - that we obviously will be registering the user.
695:57 - So for registering the user, we need to use the use form.
696:00 - So I'll just go ahead and say const
696:02 - and we'll be saying register.
696:05 - And then there is handle submit.
696:11 - And this will be use form.
696:15 - All right, I hope now by this point,
696:17 - you understand the part that register is something
696:20 - which is what we use for dot dot dot register.
696:23 - I guess that one.
696:24 - And handle submit is the method by which we actually pass up.
696:27 - So anytime you use something like this handle submit,
696:31 - anytime you use the form, the React hook form,
696:34 - you cannot just directly pass on on submit.
696:37 - You have to have to go through with the handle submit,
696:40 - which further takes a function of on submit.
696:42 - And that's how basically it controls the entire form.
696:46 - So keep that in mind.
696:47 - Really sometimes when you create this,
696:49 - it's easy to actually forget that.
696:51 - Okay, so this is the basic.
696:54 - Now how we're going to create the user
696:56 - because handle submit requires a method to be passed on.
696:58 - We'll call this one as create.
697:00 - You can call this one as create user,
697:02 - create user on app, right?
697:03 - Totally your choice how you do it.
697:05 - I'm gonna call this one as simply create, create.
697:09 - And this one will be a sync operation.
697:11 - And this one is going to take data.
697:14 - Data obviously will come from the React hook forms.
697:16 - There we go.
697:17 - Now, first and foremost that what we're going to do,
697:19 - as soon as somebody clicks that,
697:21 - we are going to use set error to set the error
697:24 - or to reset the error basically to onto the initial state.
697:27 - Now let's go ahead and use a try catch.
697:30 - The catch part is easy.
697:31 - The catch part, we can just go ahead and say set error.
697:33 - We can use the state and we can say, hey, error,
697:37 - give me your message.
697:40 - That's it, super easy to handle in the try part.
697:44 - In the try part, we'll await obviously
697:46 - because that takes time.
697:47 - And we are going to use a service from the app, right?
697:49 - So let's call this one as auth service.
697:51 - That's what we called it.
697:53 - And from this, we are going to use the create account
697:56 - and we'll be passing on the data.
697:58 - That's it.
697:59 - Now let's hold this into a variable.
698:01 - Let's call this one as const user data.
698:07 - Once this is completed, then if we have the user data,
698:12 - then we can actually invoke a dispatch
698:15 - to save all of this data in our Redux.
698:18 - Otherwise, the error is there.
698:19 - So let's validate this.
698:21 - If we have user data, then we can simply go ahead and say,
698:27 - let's go ahead and get the current user.
698:30 - How can we get the current user?
698:31 - It's pretty simple actually.
698:32 - You can use auth service again.
698:35 - And from this, you can run the method of get current user
698:39 - just like this.
698:41 - And you will be having the access
698:42 - to whoever is the current user.
698:43 - This operation might take some time.
698:45 - So let's go ahead and use an await.
698:47 - In fact, I missed a couple of places await.
698:50 - And if you find them,
698:51 - just go ahead and add await for that.
698:53 - All of the upright operations should be awaited.
698:56 - Okay, let's go ahead and say further down.
698:59 - We can call this one as user data, no problem.
699:01 - We are inside the if block.
699:03 - Okay, now if we have user data,
699:06 - if we have user data at this point,
699:11 - which is our current user,
699:13 - we'll go ahead and fire up a dispatch.
699:14 - I don't think we need this one.
699:17 - We'll just do it a single line.
699:20 - We'll say dispatch, what event do you want to dispatch?
699:23 - I want to dispatch a login event.
699:25 - And the login event is going to be coming up with the data.
699:30 - So I'll just go ahead and say user data.
699:33 - So that's it.
699:34 - Fixing it up all in the user data.
699:37 - Did we brought in the login?
699:41 - I think we didn't brought the login.
699:46 - Doesn't look like, let's bring the login.
699:49 - Import, and we want to bring in the login.
699:54 - Come on, write that.
699:58 - Oh, looks like this is freezing.
700:01 - Nope.
700:04 - Oh, now it's working.
700:06 - Keyboards.
700:08 - And we will bring this up from,
700:11 - let's go one directory back inside the store,
700:14 - inside the auth slice.
700:16 - This is where we want to bring the login.
700:18 - And this is exactly the login that we are using in here.
700:20 - Once this is all done,
700:22 - let's force the user to navigate on the homepage.
700:25 - Maybe if you want to navigate to some other place,
700:26 - that's up to you.
700:28 - I'll use navigate.
700:30 - Where do you want to navigate?
700:31 - I'll just go ahead and say navigate to slash.
700:34 - All right, not a big deal.
700:35 - That's all what we wanted to do for this part.
700:38 - Now for this return part,
700:40 - I'll just copy and paste and give you the entire code
700:42 - because there is nothing more we are learning in this one.
700:45 - So I'll just go ahead and copy paste.
700:47 - All we are doing in this one is some flex box
700:49 - and classes and all of that.
700:51 - The important part we have already discussed
700:52 - that whenever we want to have these input fields,
700:55 - how to actually link them up.
700:57 - So notice here, this is how we are linking them up.
700:59 - We are saying dot dot dot register
701:01 - and then the name field is being registered.
701:04 - The email field is getting registered.
701:07 - The password field is getting registered
701:09 - and then a simple button which just says create account.
701:12 - And once we have this one,
701:14 - this form actually has, so notice here,
701:18 - we have the errors being handled here at this point.
701:21 - And notice here, the form is,
701:22 - as soon as the form is being submitted,
701:24 - we are using handle submit,
701:25 - which comes from the React hook form
701:27 - and we use the method create here.
701:29 - And that's how we designed it.
701:32 - The login is exactly same, almost exactly same.
701:35 - So that would be a good exercise for you to repeat.
701:37 - In case if you wish, you can pause the video right here
701:40 - and try this out.
701:41 - Again, it's not about all the time writing the live code.
701:44 - It's also about how you understand the code
701:47 - which is already written.
701:48 - That's also a good practice.
701:49 - So we just did that.
701:52 - All right, so signup is ready almost as component.
701:54 - Now we can go ahead and work on with another one,
701:56 - which is the login.
701:57 - Exactly same, nothing much to be differentiated there.
702:01 - And let's call this one as login.jsx.
702:05 - Okay, so rfce.
702:07 - And again, this return part will be copying and pasting,
702:10 - so nothing much more than that.
702:12 - Let's go ahead and borrow some stuff
702:14 - from the signup as well.
702:16 - Okay, let's in fact borrow everything
702:18 - because it's almost exactly same.
702:21 - And let's go ahead and work on with this one.
702:23 - Okay, instead of the login,
702:26 - this one is actually login,
702:28 - so we're using the login same.
702:30 - Dispatch, we are going to require,
702:32 - we are going to require auth service as well.
702:34 - Button inputs, pretty much all of them
702:37 - are going to be using just like this.
702:39 - And we're going to use login here,
702:42 - but this login might create some of the issues here.
702:45 - So let's just rename this one as auth login.
702:50 - Okay, makes the life a little bit easier, not much.
702:53 - But I think the rest of them are pretty good
702:56 - and pretty okay.
702:59 - All right, let's see how we're going to deal with that.
703:02 - First, the easy parts, let's go ahead and do that.
703:05 - Const, navigate.
703:09 - Navigate, that's going to become a from use.
703:12 - Navigate, there we go, this is ready.
703:15 - We need dispatch as well.
703:17 - So we're going to say dispatch,
703:20 - and that's going to come up from use.
703:22 - Dispatch, just like that, easy part.
703:24 - Then we need use form, so we'll be needing register,
703:27 - of course, that always goes.
703:30 - And we need to have handle, submit.
703:34 - And that's going to come up from use form.
703:38 - We have done that many times now.
703:40 - Okay, what else?
703:41 - We will be managing the errors,
703:42 - so let's go ahead and use a state for that.
703:45 - Error, set, error.
703:48 - And that's going to come up from use state,
703:50 - just like that.
703:51 - By default, the errors are going to be empty.
703:54 - Now we need to work on a method which says login.
703:56 - How do we handle the login part?
703:58 - Exactly same, nothing much different or difficult.
704:03 - Let's go ahead and say const login.
704:05 - We can say to login,
704:06 - because now we have renamed this one as auth login.
704:09 - In case you wish to call something else,
704:11 - that's totally on you.
704:13 - We'll say async, and this is going to say,
704:15 - hey, give me all the data.
704:18 - Call back just like this.
704:20 - And first step is to set the error.
704:22 - Very repetitive, very repetitive.
704:24 - Let's go ahead and fire up a try catch.
704:27 - The catch part is easy, as you all know.
704:29 - We can just simply go ahead and set error,
704:31 - and we'll say error.message.
704:34 - And you might be thinking a pattern here, repetitive.
704:36 - That's exactly what I want in the course itself,
704:39 - that, hey, things are repeated and you can try them.
704:42 - And once you build enough application,
704:43 - you will figure out, I can build anything.
704:45 - These are exactly the same thing.
704:47 - It's just the way how we handle the data
704:48 - and how we get that.
704:50 - So what we're going to call this one and this one,
704:53 - first of all, let's go ahead and use await.
704:57 - And the await is going to utilize an auth service.
705:01 - There we go, from the auth service,
705:02 - we are going to use a method of login,
705:06 - and we'll be providing all the data that you have.
705:09 - Let's call this one as session.
705:13 - Session, there we go.
705:14 - Feel free to call it anything.
705:15 - It doesn't really mean that you have to call it session.
705:17 - I'm just saying that, hey, this is session.
705:19 - Now, if we have the session or any data session,
705:24 - if we have the session,
705:26 - now, can I get a current user from the auth service?
705:30 - Because if there is a session, the login was successful.
705:33 - Technically, there should be a current user
705:35 - that I'm able to grab.
705:37 - So let's go ahead and say await auth service,
705:41 - come on, not that, auth service dot get current user.
705:46 - There we go.
705:47 - If I get that and I hold that into a variable,
705:49 - call this one as user data,
705:50 - feel free to call it whatever you like.
705:52 - If I have user data, then I can dispatch a login action.
705:56 - So I can just go ahead and say,
705:58 - if I have user data, then we can dispatch
706:04 - and I can do that in one line.
706:07 - I can go ahead and say dispatch.
706:09 - What do you want to dispatch?
706:11 - You might be thinking we'll be dispatched login,
706:13 - but remember, we actually login
706:15 - is now being known as auth login.
706:18 - So just go ahead and call this one as auth login.
706:21 - And auth login is a method
706:23 - which we are going to pass on user data.
706:27 - That's it.
706:28 - And user data is being passed on, so that's all good.
706:31 - Now let's redirect the user as well, navigate.
706:35 - Where do you want to navigate?
706:36 - Probably on slash, that's it.
706:39 - So there we go, told you it's not really difficult.
706:41 - At first, it looks difficult, but it is not very much.
706:43 - And in the login page,
706:45 - since we are using some of the tailwinds and other features,
706:47 - that's why I'm just copy-pasting.
706:49 - Otherwise, if you see that,
706:50 - there is nothing big that we are doing in here.
706:53 - So this whole thing at this point is nothing.
706:56 - It's just hard-coded values, just HTML and CSS.
706:59 - Even this portion till here, till this portion,
707:03 - everything is just hard-coded CSS, nothing more.
707:06 - Here we are handling the error.
707:07 - If the error is present,
707:09 - we are displaying the error in some red squiggly lines,
707:12 - just like that.
707:13 - And this is the form, this is the important part,
707:15 - which we discussed in the last video quite a lot.
707:18 - And we saw that how input could be registered
707:20 - or could be binded with the use form
707:22 - using this piece of code, which is nothing,
707:26 - dot, dot, dot, register.
707:27 - And we named this field as email required as true.
707:30 - That is it, that is it.
707:32 - This one is password field required, that's it.
707:35 - And as soon as the form is submitted,
707:37 - we have this form here.
707:39 - We use handle submit, which comes from the React hook form.
707:42 - We provide that method who is handling it actually.
707:45 - And that's it, that's it.
707:48 - Our component and everything is all done.
707:50 - Now, one more thing that we are going to do in this video
707:53 - is now moving on to the pages part,
707:55 - because now almost all the components,
707:57 - we have discussed that what we wanted to build.
708:00 - Now let's work with the pages one by one.
708:02 - And again, for the login and the signup page,
708:05 - there is nothing, we'll be just importing the values,
708:07 - but there is one page, which is post.
708:09 - This is something interesting.
708:12 - In the post, what we're going to do is,
708:14 - we're going to grab some data,
708:16 - and then we are going to simply kind of iterate
708:20 - over the values, and there's a lot of stuff
708:22 - that needs to go into this post as a page.
708:25 - Let me show you one by one how we are dealing with this
708:28 - and how we are working with this.
708:32 - All right, so the reason why this one post page
708:35 - that you see up there, yeah, there, is important,
708:39 - because this requires a little bit more of knowledge
708:42 - of how we are building this application.
708:44 - The way how we are building our application
708:46 - is we upload an image, no problem at all.
708:48 - Then we use an editor, which we brought from TinyMCE.
708:52 - That editor allows us to have an ordered list,
708:54 - ordered list, and bold, italics, colors, all these things,
708:58 - and save them in the database.
709:00 - Now how it saves in the database?
709:02 - It actually writes simple HTML with some inline elements
709:07 - and inline style sheets, and just store that as a text
709:10 - inside your database, that's how it works.
709:12 - In fact, every single element that you see around,
709:15 - which provides you VisiVic,
709:16 - that's how they work and they save.
709:18 - But the problem is that if you bring in just the pure HTML,
709:22 - you cannot display the pure HTML in any React component.
709:26 - So we need some more work to be done,
709:27 - and in fact, we need a little bit of help from this.
709:30 - So this is the package that is going to help,
709:32 - which is a HTML React parser.
709:36 - It's published three days ago, but it's pretty popular.
709:39 - You can see the weekly downloads, it's pretty crazy.
709:42 - What it does is now you can actually use a method parse
709:45 - once you actually import that and install that.
709:47 - And this is going to allow you to have HTML code,
709:51 - and in fact, inline CSS as well.
709:53 - And it works like this, react.createElement,
709:56 - in case you saw the previous videos
709:58 - where we discussed how React works internally,
710:00 - how JSX works internally.
710:02 - So this actually breaks down everything
710:03 - and helps you to just work with that.
710:06 - I found it really, really useful,
710:07 - so that's why we are going to install this.
710:09 - Let's go ahead and copy this and work with this.
710:11 - And this will be super helpful for us in the post as well.
710:15 - Let me go back.
710:17 - And first, let's go ahead and install this.
710:21 - Probably I'm not in the proper folder.
710:23 - Let's go ahead and open up.
710:27 - Okay.
710:28 - Let's verify this one more time
710:30 - that are we having installation properly or not?
710:34 - So we have React, HTML React parser.
710:37 - That's exactly what we want.
710:39 - Now coming back onto the post page,
710:41 - because rest of the things are pretty comparatively easy.
710:44 - The singular page, how we display the singular page,
710:47 - and the concept that only if you're author of the page,
710:50 - then you have the ability to edit it
710:53 - or to simply have a delete functionality.
710:56 - That is also a little tricky, not too much,
710:58 - but little bit something that we should explore together.
711:02 - So we'll be needing React.
711:04 - Obviously we'll be using useEffect.
711:06 - Come on, write it.
711:08 - UseEffect and we'll be using useState.
711:15 - All right.
711:16 - We'll be needing some of the elements
711:18 - from React Router as well.
711:20 - So we'll be needing them from React Router DOM.
711:26 - Okay.
711:27 - What do we need?
711:28 - We need link, we need useNavigate,
711:33 - and we need useParams.
711:35 - That is the most important.
711:36 - What is this useParams?
711:38 - It's really simple.
711:40 - Anything that you see in the URL,
711:42 - you can actually grab the value of it
711:44 - by using the useParams.
711:46 - It's super simple, super easy to work on with this one.
711:49 - We'll be needing app write service.
711:53 - App write service.
711:55 - Come on.
711:57 - App write service.
712:00 - If I can write that service, there we go.
712:03 - And this one is going to come up from one directory back.
712:06 - We'll go into app write and we'll go into config.
712:10 - Okay, what else?
712:11 - We need couple of components as well,
712:13 - specifically the button and the container.
712:16 - Import button from one directory back
712:24 - component and the button.
712:25 - We'll be needing container as well.
712:28 - Container and that container will come
712:31 - from one directory back inside the components,
712:34 - inside the container, inside that we have this container.
712:38 - Pretty long name, but we have that.
712:40 - Most importantly, let's have parts
712:43 - that is going to come up from the newly installed
712:46 - HTML React parser, and let's also have the use selector.
712:55 - I usually like to have all of them as I go as I need.
712:58 - I just work with them, but I know these things
713:00 - are going to come handy within a minute.
713:01 - So I just know let's have them.
713:04 - So React Redux, all right.
713:06 - If we need anything else, we can just work with that.
713:08 - Now how the post actually work,
713:10 - this post especially in the page.
713:13 - Now, if you are in the page, first of all,
713:15 - let's create a state to handle the post.
713:19 - So let's go ahead and say this is my post.
713:21 - This one is going to be set post.
713:24 - And that is going to come up from use state.
713:29 - By default, let's call it as null.
713:30 - There is nothing inside it.
713:32 - Then what we need is we need to extract the slug.
713:36 - So we say the slug, and the slug is going to come up
713:39 - from use params, that's it.
713:43 - One more thing you need to understand,
713:45 - the reason why we are calling this one as slug,
713:47 - that is something really important and useful
713:49 - for interview perspectives as well.
713:51 - If you go into main.jsx, notice here,
713:54 - we are calling this one up here as colon slug.
713:57 - This colon slug is the reason why I'm able to grab
714:02 - a slug from the use params.
714:04 - So keep that in mind, super important to know.
714:07 - Let's also grab the navigate.
714:09 - Const, navigate, navigate.
714:14 - And that's going to come from use, navigate,
714:17 - just like that, super easy.
714:19 - Okay, now how can I grab the user data?
714:22 - Okay, because why do we need user data?
714:24 - Because if you are a user and you are author,
714:29 - then we'll see that do you,
714:31 - should you get the delete and the edit button?
714:33 - First of all, let's grab the user data.
714:36 - User data, and that can come to me
714:40 - by using the use selector, simple react redux,
714:43 - and we'll simply say state.
714:46 - State.auth.userdata.
714:52 - User data.
714:54 - Okay, now I have the access to user data.
714:56 - Now, how can I verify that this post is written
715:00 - by you or not?
715:01 - Because post is also storing a user ID,
715:05 - and we can extract the user ID from the user data as well,
715:08 - so we can match both of them.
715:10 - So let's just say if we have the post,
715:12 - because post might be null.
715:14 - If the post is there, let's,
715:17 - and we have the user data as well, user data,
715:21 - then we can do something, otherwise we'll do something.
715:26 - Okay, we want to check if you have post,
715:31 - if you have user data, then we want to match it,
715:34 - that will be a true part,
715:35 - and otherwise it will be a false part.
715:37 - So we'll say this as a false.
715:40 - All right, how can we verify the true part?
715:43 - The true part can be verified by simply comparing them.
715:46 - So let's say post is going to have a field known as user ID.
715:53 - Is it equals to the user data?
715:57 - Which also has a field of ID, so dot dollar ID.
716:02 - So if both of them match,
716:03 - we'll be getting a result of true, otherwise false.
716:05 - Let's store that into a variable.
716:07 - So let's call this one as is author, and there we go.
716:12 - Now we are checking for the condition,
716:14 - if post is present, if user data is present,
716:16 - then if they matches, that's great, that's true,
716:20 - otherwise it's just a false.
716:22 - So now we have an access of the field
716:24 - that hey, this is how it works, and all of that.
716:27 - Okay, now we want to do something
716:30 - a little bit more onto that.
716:31 - We want to work with how the delete post will work,
716:34 - because deleting is interesting, okay.
716:37 - Let's write a simple method for that.
716:41 - Delete post, it's actually super simple,
716:45 - that's why we are handling it first.
716:47 - So how does a post gets deleted?
716:49 - Really simple, you just query to app write.
716:51 - So app write service has a method of delete file,
716:56 - not delete file, delete post, yep.
716:59 - You just have to provide the post ID to it,
717:01 - and I can extract this from the post dot dollar ID.
717:05 - So once I actually pass it on, I can use an await here,
717:08 - or if you wish, I can use a dot then, just like this.
717:12 - And if I receive a status,
717:15 - then I can go ahead and delete the file as well,
717:17 - because remember, we are not keeping the file
717:19 - at the same time.
717:20 - If the post is deleted, then let's go ahead and delete this.
717:23 - So I'll fire a callback.
717:27 - So in this case, if I receive that,
717:30 - hey, the status is there, it gives me a status,
717:34 - by the way, if you'll read the docs,
717:35 - once anything is deleted, it gives you back a status.
717:38 - So let's check in here, if the status is there,
717:46 - if status is present, then I'll go ahead and delete that.
717:49 - So we'll use app right service,
717:51 - and we'll say delete file,
717:54 - and still you have access to this post dot,
717:57 - and this time extract featured image,
718:02 - and now this image will be deleted.
718:04 - If you wish, you can put an await on this one,
718:07 - but if it does it in the behind the scene,
718:09 - I'm really okay with that, and I can just navigate.
718:14 - Totally up to you how you're designing your application.
718:16 - If this is really important step,
718:18 - you don't want to move it before this,
718:20 - you can put an await onto this one, that's also fine.
718:23 - Totally up to you that how you want
718:24 - to design your application.
718:26 - Okay, so far it's good, but there's one more thing.
718:30 - We got this slug, but we are not using this slug,
718:32 - because this is a post page.
718:34 - Individual post should be loaded as soon as the page,
718:38 - or somebody comes to this page,
718:39 - or this page loads, or this component loads.
718:42 - So yes, you guessed it right,
718:44 - we'll be using something known as use effect
718:46 - to actually do the exact same job.
718:48 - Use effect, and there we go,
718:50 - we'll be having our callback,
718:53 - and we need a dependency array as well.
718:55 - So this will be dependent on either the slug,
718:57 - there's any change, or if somebody navigates here,
718:59 - so we'll be running it on the both side.
719:02 - Now, how do we grab a slug?
719:04 - So if the slug is present, if we have slug,
719:08 - then go ahead and just query the app write.
719:11 - Hey app write, give me a post, so get post,
719:14 - not posts, only one,
719:16 - and for that you have to provide me a slug.
719:19 - Let's use promises.then.
719:21 - So if you get the post, let's go ahead and use a callback,
719:24 - if you get a post, what do you want to do?
719:28 - So if I get the post, I'll set the post,
719:31 - if post is there, then I'll go ahead and say set post,
719:41 - and in the post we'll be posting a post, too many posts.
719:45 - What in the else case?
719:47 - If we don't get this one, so in the else part,
719:49 - we can just go ahead and say, let's navigate.
719:53 - Let's navigate back onto the home
719:55 - because I was not able to grab that,
719:57 - so there is no point of loading anything.
719:59 - So that's it, pretty easy, now we were able to grab it.
720:02 - So delete post is pretty nice, nothing much we have to do.
720:06 - Okay, now let's go ahead and work on with this one.
720:08 - So return, I don't want to return anything just like this.
720:14 - I want to return only in the case of post.
720:16 - If the post is there,
720:18 - then let's go ahead and do something,
720:20 - otherwise you can go ahead and do something else.
720:23 - What something else do you want to do?
720:25 - You can put a message, couldn't find the post or something,
720:28 - but I'll just go ahead and do a null
720:30 - because rest of the things will be taken care
720:32 - by my use effect, but totally up to you.
720:35 - The reason why I'm actually explaining this so much
720:38 - is so that you understand the flow of the application,
720:40 - not just these memorized thing,
720:41 - that we have to always do this.
720:43 - It's your application, how you want to design it,
720:45 - how you want to handle the edge cases,
720:47 - this is how things are designed.
720:49 - So that's why I'm actually mentioning all this
720:51 - in such a detail.
720:52 - Okay, let's go up here.
720:54 - What do you want to do in this case?
720:56 - I'll first have a simple div,
720:57 - which will be having a class of py-8.
721:01 - Okay, now inside this, let's open up a container.
721:06 - Container, there we go.
721:09 - Now inside this container,
721:10 - we'll be having a simple div with just post an image.
721:13 - So I'll just have a div
721:15 - and we'll be having some of the class names onto this one.
721:18 - Not really much interested in the classes
721:20 - or writing in front of you.
721:21 - I'll just copy and paste my classes, you get that.
721:24 - Now, once you're into this div,
721:27 - the first thing that we want to do is display an image.
721:30 - Now, how do we display an image?
721:31 - That's the question.
721:33 - Again, we can use our JavaScript
721:35 - and use app write for getting the image.
721:38 - So we can use an app write service
721:40 - and we can get a file preview.
721:43 - To get a file preview, we can use the post,
721:46 - which I already have for this particular page.
721:49 - And from this, I can use the featured image.
721:52 - There we go, we got our image.
721:54 - Now in the alt, let's use post title, maybe.
721:59 - We can simply say post.title, there we go.
722:04 - And it looks good.
722:05 - We have some of the class names as well into this one.
722:09 - And the class name is just rounded XL.
722:11 - Rounded dash XL.
722:13 - All right, so the image part is all done
722:15 - and this div looks great.
722:17 - Now, we also need to display the content.
722:20 - So just below this div, I'll open another div,
722:24 - which also has a class of W dash full
722:28 - and one more class of margin bottom dash six.
722:32 - All right, so this is my second div.
722:35 - And in this, I'll just do two things.
722:36 - I'll display the title as well as the content.
722:39 - Title is easy part.
722:40 - There is nothing big deal on to this.
722:42 - Again, one more.
722:44 - Div, let's use an H1 directly.
722:47 - I'll not get a div.
722:49 - H1 dot text dash to XL.
722:54 - Anything else?
722:54 - Font bold.
722:58 - Font bold.
722:59 - Now, how can I display this?
723:00 - Text, super easy.
723:01 - Use your JavaScript and simply say post dot title.
723:05 - Okay, no big deal.
723:06 - But how can I display the content?
723:08 - Because content is something where we have used editor
723:12 - and editor is storing all of this.
723:14 - So what we're going to do is in this case,
723:17 - what we're going to do is let's use a div,
723:20 - which will be having a class of browser dash CSS.
723:24 - These are custom classes.
723:25 - You can write them as well.
723:27 - But the most important thing is user JavaScript,
723:29 - but not ordinarily.
723:31 - You have to use a parse,
723:32 - which comes from the HTML react parser.
723:35 - And in this, I have to say post dot content.
723:40 - There we go.
723:41 - Told you it's super easy.
723:42 - Everything that we are storing,
723:44 - this is all thanks to this parse,
723:46 - which allows me to display the HTML content
723:49 - and everything that's inside there.
723:50 - So all of your formatting, like bold, italic, your colors,
723:53 - everything is being parsed properly.
723:56 - Now, one more thing that we have to do is,
723:58 - okay, this part you understand nicely,
724:00 - but there's one more thing.
724:02 - Now, on top of this image,
724:04 - I want to show the user that,
724:06 - can you actually delete this post,
724:10 - or can you just have an edit button, something like this,
724:14 - delete post or edit post, something like this.
724:16 - So for this, we'll optionally render something.
724:18 - So here is my JavaScript,
724:20 - and is author will give us a true or false.
724:23 - And based on this, we will display this.
724:26 - So let's use this one, just goes like this.
724:29 - We'll simply have a div, which has absolute dash right
724:39 - dash six.
724:41 - And these are classes to keep it at the very right top.
724:43 - That's it.
724:45 - Top dash six.
724:46 - So we have this div.
724:48 - Now inside this div, we'll have a simple link.
724:50 - The first one is going to allow the user to update this post.
724:54 - How can I update that?
724:56 - Super easy, nothing too much.
724:58 - I'll have the link.
725:00 - Okay.
725:01 - The most important part in this link is too,
725:03 - because this is something which does all the magic.
725:05 - So I'll use a back text where I want to go.
725:08 - I want to go to slash edit dash post.
725:13 - And to edit any post,
725:15 - I have to provide the slug after that, that's it.
725:17 - So I'll just use a slash and we'll provide an ID
725:20 - just like that.
725:21 - Suppose to dot dollar ID, that's it.
725:24 - Now you'll be redirected to slash edit post
725:27 - and edit post we haven't yet handled,
725:29 - but this will be handled here in the post.
725:31 - So that's it.
725:32 - All we have to do is just load all the things in the data.
725:34 - That's it.
725:35 - So this is the post that we have grabbed.
725:37 - Okay.
725:38 - The next thing is let's name this button as something.
725:41 - So let's call this one as inside this,
725:45 - let's give it a button.
725:48 - The button component that we have designed
725:50 - and let's call this one as edit.
725:52 - We have some classes for this one as well.
725:55 - All right.
725:58 - Actually not the classes.
726:00 - We have some of the properties onto this one.
726:02 - So I'll just paste this.
726:04 - So we have the background color green
726:05 - and the class name just like this.
726:07 - So one part is done that how this is being actually done
726:09 - in design.
726:11 - Similar to this, we also have a button.
726:13 - This time not the link, but we need just a button.
726:16 - So I'll just copy this, move outside of the link
726:19 - and we'll also keep this one.
726:22 - This one is going to be a delete button.
726:25 - And this button will have a simple on click.
726:29 - This one is going to be red.
726:31 - That's fine.
726:33 - Margin right.
726:34 - We don't need this into this one margin right.
726:37 - We just need one thing here.
726:40 - On click.
726:42 - Suggestions, no suggestions.
726:46 - Anyways, on click just like this
726:48 - and simply run delete post.
726:50 - That's it.
726:51 - Delete post already is handling things up here.
726:54 - So I think that is good enough.
726:55 - So this is something that is worth discussing
726:58 - of how things are being done,
726:59 - how you are able to parse these things.
727:01 - I hope that gives you a little bit of extra knowledge
727:04 - of how these professional applications are designed.
727:06 - And once you understand this,
727:08 - you can now build anything that you want basically.
727:10 - Something that's storing the code part or anything.
727:12 - You can just store them in using the editors
727:15 - and using the parts you can just display them.
727:17 - So that is it.
727:19 - Quite a long journey about this one.
727:21 - Still almost like half an hour.
727:23 - But I hope this has helped you to understand a lot
727:25 - about how applications are designed,
727:27 - how the workflow of the application works
727:29 - and you are building it along with me.
727:31 - I highly recommend that once you watch these videos,
727:33 - try to build them on your own.
727:35 - If you need help, take help from my GitHub.
727:38 - Not directly from the video,
727:39 - but if you feel uncomfortable even after that,
727:41 - then only take help from the videos itself.
727:43 - That's it for this one.
727:44 - Let's catch up in the next one.
727:48 - Hey there everyone.
727:49 - Hittai Sheer back again with another video.
727:52 - And in this video, we'll try to finish our app.
727:54 - It's almost done.
727:56 - We don't have anything major that we want to explain
727:59 - or we want to go through along with this.
728:01 - Rest of them is just importing the component,
728:03 - display them, that's pretty much it.
728:05 - Only couple of things are remaining,
728:06 - which I'll walk you through in this video.
728:08 - So let's go ahead and do that.
728:09 - And probably after that,
728:11 - we might need some kind of debugging,
728:12 - maybe some CSS is here and there, just minus stuff.
728:15 - Nothing much to be worried about.
728:18 - So one final thing to walk you through
728:20 - with the flow of the code is something.
728:22 - So let me share the screen and walk you through with that.
728:25 - So this is our screen.
728:26 - So in case you did notice that we have this post
728:31 - and inside this in the last video,
728:32 - we created this button which says edit,
728:35 - which takes you to slash edit slash slug.
728:38 - So in case you want to know,
728:39 - you forgot about how that works.
728:42 - We have this edit post slash slug
728:44 - in which the edit post is going to be the page
728:48 - that will be loaded.
728:49 - So if I just go ahead and click on this,
728:51 - this is something that we are importing from here.
728:54 - So page is edit post.
728:55 - So let's go into the edit post
728:58 - and see how we can actually manage that.
729:00 - So as you reach to the edit post,
729:02 - the first thing that should come to your mind
729:04 - is that I'm getting a slug
729:06 - and I can extract that slug using use params
729:09 - and I can use use effect to query the app right
729:13 - to bring that post.
729:14 - And that's exactly what you should be doing.
729:16 - So let's go ahead and grab it.
729:18 - I'll walk you through with the,
729:19 - usually what I do is I just go up here and start writing.
729:22 - So I need a post obviously.
729:23 - So let's go ahead and work with the post
729:26 - and that will be set post.
729:28 - And usually I rely too much on the auto import statements,
729:33 - just like this.
729:34 - In some cases, it doesn't work automatically.
729:36 - So I hate that part.
729:38 - All right.
729:39 - Next thing is we need to extract the slug.
729:41 - So let's go ahead and grab our slug
729:44 - and that slug is going to come up from use params.
729:49 - It doesn't give me.
729:51 - I hate it why it's not giving me suggestions.
729:53 - In most cases it does,
729:54 - but today it's not really happy with me.
729:56 - Okay, so we need a use params.
729:59 - So how we're going to get the use params,
730:01 - that's the question.
730:02 - I think that's from React Router DOM.
730:04 - So use params, no suggestions.
730:10 - Import from React Router DOM.
730:15 - Did I made a mistake?
730:17 - Yes.
730:18 - Use params.
730:20 - Yep, now it makes sense.
730:22 - Since we are here, let's also grab use navigate.
730:26 - Use navigate and let's also grab it.
730:29 - So navigate.
730:33 - And that's going to come up from use navigate,
730:37 - just like that.
730:38 - Okay.
730:39 - So these are the things that I have.
730:40 - Now the first thing that I would love to do now
730:42 - is to use the slug
730:45 - and get something from app right services.
730:48 - So we need to get app right services first.
730:51 - All right.
730:52 - Import app right service.
730:56 - And that's going to come up from one directory back
730:59 - inside the app right, inside the config.
731:02 - Let's now use use effect.
731:06 - And the use effect goes like this.
731:08 - It gives me a callback, just like that.
731:11 - And we have a dependency array.
731:13 - All right, so what's the dependency?
731:15 - Maybe if you change anything into the slug
731:17 - or if you navigate from here and there,
731:19 - these are my two dependency.
731:21 - Now coming up onto the part where we can go with that.
731:25 - Okay, so if I have a slug, then make a request.
731:28 - So let's check this.
731:29 - If you have a slug, then only make that request.
731:33 - So app right.
731:35 - And we are going to say get post one only, not the posts.
731:40 - And post can be taken up by the slug.
731:43 - We can use await here
731:44 - or you can use .then for the promise part.
731:47 - And then we'll say inside this, if you get a post,
731:50 - just like this, let's go here.
731:52 - Now, if we have post, let's set that post into my state.
731:57 - So if I have a post,
732:01 - let's go ahead and set this into set post.
732:05 - Post, there we go.
732:07 - If I don't have any post, so in that case,
732:10 - I'll just go ahead and say navigate.
732:13 - Where do you want to navigate?
732:14 - Totally up to you.
732:15 - I'm happy with the slash.
732:17 - All right, so this is the part where it's easily.
732:20 - Now this part here is even much more easy.
732:23 - The reason for that is I can just bring in container
732:27 - and the post form,
732:28 - which I've already created as a component.
732:30 - So that makes my life much more easier.
732:32 - Let's bring them.
732:33 - So import container and that's going to come up
732:38 - from one directory back inside the component.
732:41 - We have container and we have container.
732:45 - And we also need the post form.
732:48 - So import post form and that's going to come
732:51 - from one directory back inside the components.
732:55 - And we do have post form and inside that we have post form.
733:02 - Post form, there we go.
733:04 - And all I have to do is I can keep this stiff as it is,
733:07 - if you wish, and I'll say the padding on y-axis,
733:11 - let's be at six.
733:13 - We don't need this and we can say wrap everything
733:17 - inside the container, just like that.
733:20 - And inside this we'll be having a post form
733:25 - and it could be self-closing and we need to pass
733:27 - on one param, which is post, which is post.
733:31 - All right, so post is coming up from my state.
733:33 - So that's it, told you.
733:35 - After this point, almost everything is super, super easy.
733:40 - Let me tell you one more thing.
733:41 - What happens when you simply go ahead and do add post?
733:44 - Now, I don't have to do too much of the things.
733:47 - I can just go ahead and say I want to import container
733:50 - and that container is going to come from one directory back
733:54 - inside the components.
733:56 - Container should have done an index.js there.
733:59 - I'll probably leave that as an exercise for you.
734:02 - There should be just one index file inside the components
734:05 - and I could have bring everything here,
734:06 - make my life much, much easier.
734:09 - But anyways, and we do have a post form
734:14 - and that's going to come from one directory back
734:16 - inside the component slash post form slash post form.
734:24 - And in here, I can just go and remove this.
734:28 - Again, same class name padding y6.
734:32 - And in here, wrap everything inside the container,
734:35 - just like always.
734:36 - And in here, you can just go ahead and say,
734:38 - hey, I'll have a post form.
734:42 - Post form, why did it brought it again?
734:48 - No idea, but anyways, we'll remove this one.
734:52 - Okay, so I told you it's super easy now
734:54 - because the post form component that we created
734:57 - in case you forgot that, it's okay.
734:59 - It's totally normal to understand that you forgot that.
735:02 - Remember everything is being done in here.
735:03 - So submit everything is there.
735:05 - We're just loading this component inside this one.
735:08 - So super, super easy.
735:10 - Now what happens when you actually work with the all post?
735:14 - Okay, in the all post,
735:16 - we'll just grab all the posts that are possible
735:19 - and we'll be working with that like.
735:21 - So let's first import app right service, service.
735:29 - And that's going to come from one directory back
735:32 - inside the app right, we need a config.
735:35 - And what else do we need?
735:37 - Probably that's it.
735:38 - I want to have all the posts, so const posts set posts.
735:46 - That's going to be use state.
735:50 - And by default, it's going to be an empty array.
735:53 - We want it to be tradable
735:55 - because there are many posts inside that.
735:57 - First thing is use effect.
735:59 - Use effect, just like that, have a callback.
736:05 - And there is probably nothing as a dependency array.
736:09 - When you put nothing inside the dependency array,
736:11 - that's also a good thing.
736:12 - That means it will run only and only once
736:14 - when the component mounts and that's it.
736:16 - So let's go up here and as soon as the component mounts,
736:19 - we'll use app right service.
736:22 - We'll say get posts this time S
736:25 - because we want to grab all of it.
736:27 - And we'll say that, hey, we'll get all the posts.
736:30 - We'll just take it in the array.
736:33 - And dot them.
736:35 - And if everything goes right, we'll be having the posts.
736:39 - And all we have to do that, if we have posts,
736:42 - if we have posts, just go ahead and use set posts
736:48 - just like that.
736:49 - And we'll say posts dot document.
736:52 - That's a little bit part on the app right side
736:56 - because the post in itself has an object or document.
737:00 - It has a couple of more things.
737:01 - By the way, if you wish to see more of it,
737:03 - just do a console log of the post.
737:05 - And then once you have the dot documents,
737:08 - that actually gives you an array.
737:09 - And again, by the way, I didn't vent it up
737:12 - on the very first go, I had to do a console log
737:14 - to understand what kind of document
737:16 - is something that I'm receiving back.
737:18 - And then I worked on this one.
737:20 - By the way, app right does a fantastic job
737:22 - in showing you what is something that you are receiving back
737:25 - when you're making a query or something like that.
737:28 - So fantastic job there.
737:29 - But yes, I needed to do a little bit of console log there.
737:33 - Now, the interesting part is
737:34 - we would be needing a postcard.
737:36 - So if you remember, we created this postcard
737:39 - in which you pass on the ID title and featured image
737:42 - and it displays that.
737:43 - So we'll be using this.
737:44 - So let's go ahead and bring that.
737:46 - I will bring container to container.
737:49 - Oh, nice suggestions.
737:51 - Finally, you are awake.
737:53 - And we'll be needing a postcard.
737:56 - Postcard, no suggestions.
738:01 - Ah, it's just understanding the things
738:04 - which are already being designed.
738:05 - Hate this.
738:06 - Should have been done auto, anyways,
738:08 - not complaining too much.
738:10 - Components and then we have postcard, okay.
738:15 - Moving back, this is going to require a couple of classes.
738:19 - We are gonna set the width of full and padding on Y8.
738:25 - Okay, so now moving ahead, let's clean this.
738:28 - First of all, let's wrap everything inside the container,
738:31 - just like that.
738:32 - Inside the container, we'll have a simple div.
738:34 - And in fact, this div can have a class of flex and flex dash wrap
738:40 - so that everything becomes a card
738:42 - and we can just easily shrink them up.
738:45 - Okay, now what we have to do, start your JavaScript
738:47 - because now we want to loop through the posts.
738:49 - Remember this?
738:51 - The posts, which is an array.
738:54 - So we'll be rendering this but conditionally.
738:57 - So we'll be saying that, hey, what we can do is
739:01 - posts.map and inside this, each post,
739:06 - we are going to call post.
739:08 - This is individual one, just goes like this.
739:11 - And I'm not gonna use curly braces,
739:12 - otherwise I have to explicitly return.
739:14 - So I'll use parenthesis for that.
739:16 - And I'll say, I'll be returning you a div
739:19 - with a class of padding dash two.
739:23 - And a width of one by four, dot width of one by four.
739:28 - I don't think so.
739:29 - It automatically takes it as emit abbreviation.
739:33 - Ah, it takes it.
739:34 - That's nice.
739:35 - By the way, it's dash.
739:38 - And since this is the one which is iterating over,
739:40 - so we will put a key onto this one
739:42 - and key is super easy post dot dollar IT.
739:46 - And once I'm in this, the component that I want to loop through
739:49 - is my post card, self-closing, of course.
739:54 - It takes one prop.
739:55 - So what we're gonna do is, if you notice it carefully,
739:59 - I could have given it like this.
740:01 - So I can just go ahead and say, hey, post is equals to post,
740:04 - but it's not accepting these kinds of parameter
740:07 - in this way.
740:08 - So remember, the way how you design these components
740:11 - and what they expect the data,
740:13 - make sure you're careful about that.
740:14 - In our case, the post is expecting an object
740:18 - which has all these information.
740:19 - So don't pass it on directly in case you want to do so.
740:23 - So you have to pass on just an object
740:25 - and we are gonna de-structure it.
740:27 - That's the important part.
740:29 - And that's it.
740:30 - It's gonna do the job.
740:31 - So I told you, it's very minute details now.
740:35 - We are all happy with this.
740:36 - Edit post we have worked on and home,
740:39 - there is nothing inside the home.
740:41 - What we can do is, home can also have the card.
740:46 - This is my all post, same.
740:49 - And on the home also, let's grab all the cards
740:51 - and do the same stuff.
740:53 - Okay, so let's go ahead and say all post.
740:57 - And we'll copy all of this.
741:00 - Home will also display the same stuff.
741:02 - So we'll paste it, all post.
741:05 - What do we need?
741:06 - The same stuff.
741:08 - Copy this.
741:09 - And in here, we'll just paste it.
741:11 - So we have post and all these stuff.
741:14 - Get post, blah, blah, stuff, looks okay.
741:18 - Now in this one, what we can do is,
741:23 - there are a couple of more things that we should have done.
741:26 - Okay, on the home page, if you have,
741:31 - like we haven't taken care of the cases in the all post
741:34 - when the array is zero.
741:36 - We can actually do that in the home
741:38 - and I can give that as a sample exercise for you.
741:41 - Okay, so this part is all okay.
741:44 - But what do you want to return when the array is zero?
741:47 - So let me just handle that case.
741:49 - If the post.length is actually zero,
741:55 - that means there is nothing inside the array,
741:58 - then you can simply go ahead and return
742:01 - that there is nothing to read.
742:03 - Otherwise, we can just wrap up the container,
742:05 - something like that.
742:06 - So let's go ahead and remove this part.
742:10 - Return, what do you want to return?
742:14 - No post to display,
742:15 - but let's actually do that in a better way.
742:18 - Let's grab everything from the all post.
742:21 - I'll grab this, copy this and I'll paste it.
742:26 - Okay, so container and we don't have this one
742:30 - to actually load.
742:31 - So we'll just remove this
742:32 - and we probably will have a simple H1,
742:36 - which says login to read posts.
742:40 - So probably there is nothing inside it
742:43 - or we can say there is no post to read,
742:45 - better message is login to read.
742:47 - So this is all the case when the if statement is working.
742:50 - If the statement doesn't get invoked,
742:53 - that means there is something inside the length.
742:56 - So in that case, we can actually use the same all post,
742:59 - copy that and we can just paste it up here
743:02 - that hey, the container is there
743:04 - and we are iterating through.
743:07 - So post.map, everything, postcard, it's exactly same.
743:11 - So now that you know how to handle the situation
743:13 - when the post is zero,
743:14 - you can do exactly same in the all post as well.
743:16 - Just write a simple if statement at line number 19.
743:19 - I can just mark it as to do for you.
743:23 - To do add case for array length zero.
743:32 - Yeah, not really the best sentence,
743:35 - but I think you can do the job.
743:36 - Okay, so the home part is done.
743:39 - What about the login part?
743:40 - This is the most easy part,
743:41 - but I think you will find a couple of bugs in this one.
743:45 - Let me show you why.
743:47 - The reason for that is we did everything inside this login.
743:50 - So we just need to import this component,
743:52 - but you will find it a little bit difficult
743:55 - if you don't know one simple thing,
743:56 - which is how to import this.
743:58 - So you probably might think that I'll just go ahead
744:01 - and say I'll import login
744:03 - and that will come up as one directory back
744:07 - inside the component, we do have login.
744:10 - The problem is our page is also called as login.
744:13 - This is really bad.
744:14 - So which one to use,
744:15 - which one not to use something like this.
744:18 - The easiest fixes, just use an aliasing.
744:21 - And let's call this one as login component.
744:24 - And notice here, this is what is giving you a problem
744:28 - that hey, import login, this is not how it works.
744:30 - So we need to actually change this a little bit.
744:33 - And I think this is the reason why I always say
744:35 - that it's always a good idea that these kinds of situations
744:38 - might happen with your component.
744:40 - So it's always a good idea to actually grab things
744:43 - like this.
744:44 - So let me show you an easy fix of that
744:45 - because that's a common scalability problem.
744:49 - Let me just show you that.
744:50 - We will just create a simple index file
744:53 - inside the component, new file,
744:56 - and call this one as index.js.
745:00 - And one by one, we'll be just importing everything
745:02 - and we'll be exporting that.
745:03 - That's all what we'll be doing in this one.
745:05 - This is much better of an approach.
745:07 - So if I go ahead and say login,
745:09 - and that login is going to come from ./login.
745:13 - Now I can go ahead and say export.
745:16 - And I can export all of this is like that.
745:19 - And I can export login.
745:20 - Now, once you do this kind of a thing,
745:22 - it's much easier.
745:24 - And you will notice that this import statement
745:27 - is not going to work because it's not export default.
745:31 - So you can actually just wrap this up
745:33 - inside the parentheses.
745:34 - And every time you bring that,
745:36 - it comes up like this.
745:37 - And this gives you the ability to call it as login.
745:40 - So you can rename the structures like this,
745:43 - or rename the page as login page, something like that.
745:46 - So that's also workable.
745:47 - But I think you get the idea
745:48 - that how to avoid these kinds of problems,
745:51 - good stuff to discuss.
745:53 - We'll have a simple class name
745:55 - and we'll say padding by eight.
745:58 - And now in here, I can just hit and enter
746:01 - and can say I'll have a login component.
746:05 - Self-closing of course.
746:06 - So there we go.
746:07 - Much easier, much easier fix.
746:10 - Post page, we have already worked with that.
746:13 - Sign up exactly same.
746:14 - So for this sign up also, we'll import the sign up.
746:18 - Import sign up from pages.
746:21 - Nope, not from pages.
746:23 - Sign up from current directory and sign up.
746:28 - All we have to do is comma and say sign up.
746:31 - Now the advantage is I can actually bring the sign up
746:34 - and can rename them.
746:36 - So I can just go ahead and say import sign up
746:41 - from components, that's nice.
746:43 - And I can just say, get it as sign up component.
746:49 - And in here, we can just have a class name,
746:52 - which says padding by eight.
746:56 - And this one can hit and enter.
747:02 - And we can say sign up component.
747:05 - Self-closing of course.
747:07 - So all right, a lot of stuff.
747:08 - And actually the better way of handling this entire thing
747:12 - in the component would be to grab everything
747:15 - that's there in the component and export in this way
747:17 - so that there is a consistency.
747:18 - And I don't have to name this because if you notice it,
747:21 - when we were building something like in the edit post,
747:24 - when we were bringing these things like post form,
747:27 - container, this is coming up from different.
747:30 - So there is a missing piece of consistency here.
747:32 - So at least one thing would be consistent is
747:34 - everything will come from dot slash components, that's it.
747:38 - So good stuff, but I think you get the perspective
747:41 - of how things are being done.
747:42 - And I'm happy that I was able to share all these details,
747:45 - production grades, scalability issues with you.
747:48 - The only thing remaining is to test the application
747:50 - and we're gonna do that in the next video.
747:52 - Let's catch up there.
747:55 - Hey there, everyone.
747:56 - Hithai Sheer back again with another video
747:58 - and welcome to the final video where I'll walk you through
748:01 - how I debug this application.
748:03 - Expecting that your application will work
748:05 - on the very first go is absolutely a wrong notion.
748:08 - And especially when somebody is teaching you,
748:10 - he's more focused on the teaching part and the flow part.
748:13 - So some mistakes are meant to be there.
748:16 - They are obviously going to be there.
748:17 - And yes, it took me really a lot of time to debug this.
748:22 - By a lot of time, I mean one hour,
748:23 - a little bit more than one hour.
748:25 - So in this video, I'll walk you through what all I did,
748:28 - how I debug the process, how I read the errors.
748:31 - This will help you to understand the entire flow
748:34 - of when you're done with the application
748:35 - or in between if you want to check it out,
748:37 - what all the processes you need to go through.
748:39 - So let's go ahead one by one and I'll walk you through.
748:42 - Currently the application is in the working form
748:44 - and I'll just give you the entire source code as well.
748:47 - But the most important part is to understand
748:49 - the psychology behind solving these bugs.
748:53 - And most important is read those damn errors.
748:57 - That's the secret ingredient.
748:59 - Okay, let me share the screen first.
749:01 - And one by one, let's go there.
749:03 - So what I did is I tried to run the application.
749:06 - So the first conflict that I saw immediately
749:09 - was in my app.jsx.
749:11 - So this is the first part.
749:13 - So in the app.jsx, there was nothing, absolutely.
749:16 - We didn't have anything.
749:17 - So we have to load some stuff.
749:18 - So in the return statement, as you can see,
749:20 - I brought in my headers and I brought in my footer
749:23 - so that in the header I can load up the navigation bar
749:26 - along with the logout button and the outlet as well.
749:29 - Now, not only that, I also wanted to figure out
749:32 - that whether the user is logged in or not.
749:34 - So how can I do it as soon as this component loads?
749:37 - Yes, you guessed it right, it was use effect.
749:38 - So I used the use effect hook
749:40 - along with the app.write services,
749:42 - just a simple method, get current user.
749:44 - If the current user is there, then that's great.
749:47 - Otherwise, let's allow the user to move on here and there.
749:51 - So what I did is I created a state loading
749:54 - and we used the dispatch just like that.
749:56 - And after that, we used a simple use effect
749:58 - and we simply went up with the auth service,
750:00 - get current user.
750:02 - If we get the user, that's great.
750:03 - Let's dispatch a login action that user is logged in.
750:06 - Otherwise, let's dispatch the loading as false.
750:09 - So based on that, we're just loading.
750:12 - If the loading is false,
750:14 - otherwise we don't load anything.
750:15 - That's pretty much it, I did.
750:17 - Once I did it and I moved on to the Chrome browser,
750:20 - so let me just walk you through with this one.
750:22 - So this Chrome browser.
750:25 - So what we saw in this one is we simply went up
750:29 - onto this one and tried to login in
750:31 - and we saw a whole lot of errors.
750:33 - And I tried to inspect this into the console
750:36 - and it gave me so many of the error.
750:38 - I looked into this one and the most first one,
750:41 - the error that I found is that it was not able
750:44 - to load the environment variable.
750:45 - So when I was teaching you in the React,
750:48 - I actually accidentally used all the React variable,
750:50 - not the VIT variable, but we actually use the VIT.
750:53 - So here's the simple solution.
750:55 - All you have to do is you have to say import meta.env.vit
751:00 - and then whatever you want to say and that's how it works.
751:04 - So I looked up into this one, found a solution for this one
751:07 - and went into my environment variable first
751:10 - and changed everything to VIT underscore VIT underscore
751:13 - just like this.
751:14 - So I'll just copy all of this
751:16 - and I'll also paste this into the sample
751:18 - so that in case you are going through with the VIT
751:21 - or React, whatever you are going for,
751:22 - you can just go with that.
751:24 - I'll obviously remove these ones
751:25 - because I don't want to push it.
751:27 - And of course, by the time you'll be watching the video,
751:29 - I would have removed these ones as well.
751:31 - So I'll just go ahead and paste it up
751:35 - and let's go ahead and comment this.
751:37 - In fact, in the sample, we can keep it, no problem at all.
751:41 - All right, so I'll just keep it in the sample.
751:43 - Once I did it in the sample,
751:44 - the next step was to change that into the conf.js as well.
751:48 - So this also got changed to VIT.app, right?
751:51 - The errors were pretty clear.
751:52 - Once you check the console log, it simply said,
751:54 - hey, I don't know what this process.env.vit,
751:58 - so I had to change this one, import.meta.env.
752:01 - So pretty first error that we caught up
752:04 - after managing our app.js.
752:07 - So this was the first problem that I saw.
752:09 - Then after that, I realized that in a lot of places,
752:13 - I have a couple of issues, like into this input file,
752:16 - I somehow missed these parentheses.
752:18 - So they were a little bit difficult to find at first.
752:22 - It just gave me an error on the signup screen
752:23 - that ID was missing.
752:25 - And I'm pretty sure that I gave you the ID.
752:27 - I checked up first of all about my auth.js,
752:31 - saying that, hey, I'm providing you the ID.
752:33 - It's ID.unique.
752:35 - Turns out, in the signup component itself,
752:38 - I was missing, in the input component,
752:40 - I was missing the ID just like this.
752:42 - I tried, it again gave me, hey, ID is missing.
752:45 - Come on, I'm giving you the ID.
752:47 - Why are you doing this to me?
752:49 - Then turns out, I realized that in this one,
752:51 - I actually forgot to import the ID from the app, right?
752:54 - Yeah, can't believe I did that, but yeah,
752:57 - these are the errors, these are the bugs.
752:59 - Once I have this ID in here,
753:01 - then obviously ID.unique works,
753:04 - and it started to do the signup for me.
753:06 - So that's one thing.
753:07 - And in the login also, if we are using,
753:10 - in the login, we don't use ID.
753:11 - So there's nothing much more onto this part.
753:13 - So this is a couple of things.
753:15 - Not only that, a couple of more things needed to be fixed.
753:18 - For example, in the footer,
753:20 - I actually forgot to import the logo
753:22 - that was giving me a bug, so I did that.
753:24 - After that, in the header.jsx,
753:27 - I actually imported these logo in a different format.
753:31 - So I used this one, which is a wrong.
753:33 - If you're doing an export default,
753:35 - this is not how we do it, but somehow accidentally I did it.
753:38 - So I looked a little bit on what all the things are missing.
753:41 - It was pretty straightforward errors.
753:43 - So I started with that.
753:45 - Once this is all done, I went up back into this,
753:48 - that hey, what all these things,
753:49 - couple of other components also were having some issues
753:52 - that hey, this was not imported properly or something.
753:55 - I work with that.
753:56 - Another error that I saw was here,
753:59 - that it says add post, but in the URL slug,
754:02 - it says add posts, so that is wrong.
754:04 - Obviously we didn't take, took care of this URL.
754:07 - So I went up and changed this to post.
754:09 - That is what we are handling in the,
754:13 - in the app dot, not in the app, main.jsx.
754:15 - So this is the one that we are handling,
754:17 - which is edit post and slug, not posts, there is no S.
754:21 - So a couple of things,
754:22 - just look out for the flow of your application
754:25 - that always works with how things are going on
754:27 - and how things are doing for you.
754:28 - So don't panic, read the errors one by one, step by step,
754:31 - try to figure it out, because what I've noticed is
754:35 - that errors sometimes are not in the place
754:38 - where you're looking up for or are expecting them.
754:40 - For example, in my case,
754:42 - I was expecting the ID might be something wrong
754:45 - in the auth.js and obviously it was
754:47 - that ID was missing here,
754:48 - but this was also pretty much unseen
754:52 - or I didn't expect it that I might have missed
754:54 - this parenthesis here, send the ID.
754:56 - So input file, I didn't expect it that it would be there,
754:59 - but it was there, so this is what we did.
755:02 - And apart from this,
755:03 - I've also added a couple of more CSS as well.
755:06 - It's not really required, but I have added the CSS up here.
755:10 - These are browser CSS, so when the browser CSS,
755:12 - if you see something like output or summary
755:14 - or details, iframes and all of that,
755:17 - by the way, they are available online
755:19 - on the website of framer,
755:21 - the parser of the package that we used,
755:24 - which one, I'll show you that, HTML React parser.
755:28 - So the CSS is available on a lot of resources there.
755:31 - So this is a couple of ways of how I fixed the application.
755:33 - Rest of the things worked nicely,
755:35 - but expecting their application
755:37 - will work immediately is a bad idea.
755:39 - One more thing which I noticed that gave me an error
755:42 - is this one.
755:43 - So when I try to upload an image,
755:45 - at the very first it gave me an error
755:46 - that hey, you don't have permission to upload.
755:49 - Turns out I have the permission for the guest
755:52 - that we did together,
755:53 - but we also need to give all the users
755:56 - the permission to do CRUD in the images.
755:58 - So you can just click on add roles
756:00 - and select individual users.
756:02 - If you want to give some users only the permission,
756:04 - but I wanted to give it to all users.
756:06 - So I just selected that
756:07 - and it just gave the permission to all of them.
756:09 - So this was one of the issues.
756:11 - So make sure you are aware of that.
756:13 - And now in the auth, you can see the user
756:15 - is being registered.
756:16 - You can work more on it
756:18 - if you want to build this application
756:20 - a little bit more complex,
756:21 - which I highly, highly recommend.
756:23 - We tried with that.
756:24 - Then in the database,
756:25 - we can just check out this is one post.
756:27 - I tried to have that.
756:28 - This is the post.
756:29 - So if I click on this YouTube and the blog,
756:33 - this is my first post.
756:35 - This is my first post title, content.
756:37 - I told you that the content is being stored in the HTML.
756:40 - So all your CSS, colors, everything is stored like this.
756:43 - That's why we used the React parser.
756:46 - A featured image, only the ID is getting us.
756:49 - Status is active and the user ID that we are storing.
756:51 - So pretty basics, how things are being done.
756:54 - Make sure you are aware of it.
756:55 - Make sure you try more of it.
756:57 - In the settings, I'll also mention that,
756:59 - hey, I actually said that all the users
757:02 - can actually do the CRUD operation with this document.
757:04 - So make sure this permission is also enabled.
757:06 - So in this entire application,
757:08 - we have seen that how the authentication works,
757:10 - how the database works, how the storage works.
757:13 - I'll try my best to actually have more on functions as well.
757:17 - But in case you didn't notice that on the App Right channel,
757:21 - one of my friend Dennis,
757:23 - he's creating a couple of videos
757:24 - on the official App Right channel
757:26 - about using functions in the App Right that are pretty cool.
757:28 - So go ahead and check them out in case you have some time.
757:31 - But this was all the application that I had.
757:34 - By the way, I will push the entire source code
757:37 - of this application so that you can match it,
757:39 - you can try it on my GitHub as well.
757:41 - Feel free to check out my GitHub,
757:43 - the entire code for the entire React course,
757:45 - plus this mega project is available for all of you.
757:48 - If you still find any issue,
757:50 - reach me out on my Discord or Twitter or Instagram,
757:53 - wherever you feel active,
757:54 - I'm pretty active on all social media.
757:56 - Reach me out, I'll try my best to create more videos
757:59 - if you find something that this was not clear,
758:01 - just reach me out,
758:02 - I will help you to understand it much, much easier way.
758:06 - I hope this video has,
758:07 - this entire project has given you some insight
758:10 - about how complex a real world application can be.
758:13 - A couple of things which are still missing
758:15 - in this application,
758:16 - which I think you can work on with this,
758:18 - is if I go ahead and say,
758:21 - all post ad posts are working fine,
758:23 - in case when I click on add post,
758:26 - there is a little bit CSS issue.
758:28 - So this featured image active was supposed to go here,
758:30 - I'll try to fix this up, that's one thing.
758:34 - And apart from that, if I go ahead and see all post,
758:38 - in this all post, these edit and delete button
758:40 - supposed to go over the image,
758:42 - probably I missed something.
758:44 - A rest of them are pretty easy and okay,
758:46 - so we can see that it's working nice.
758:49 - Let's try to log it out.
758:49 - Once I click on the log out button,
758:51 - it redirects me onto the login page,
758:53 - but it's up to you.
758:54 - We don't have still any logo,
758:56 - I would highly recommend you to try this out.
758:58 - The reason that I am actually leaving this application
759:02 - in a position where you can actually work a little bit more,
759:05 - because no matter how much you see me coding
759:08 - or you follow along with me,
759:10 - there will be bugs, there will be error.
759:11 - And if you add a couple of more features from your side,
759:14 - that actually makes you a good programmer.
759:17 - So try to add a little bit more
759:18 - or try to convert this application into a social media,
759:22 - because it's also same.
759:23 - Images are there, posts are there,
759:25 - so try to do build something like that.
759:27 - And this will give you a lot of confidence.
759:28 - If you face any trouble, reach me out on Twitter
759:31 - or on Discord, I would be super happy to help you out.
759:34 - Watch out for more of my videos and courses.
759:37 - I'm constantly making more courses, more videos
759:39 - on cutting edge, bleeding edge tech,
759:40 - as well as rock solid text as well,
759:42 - like Python's and JavaScript as well.
759:45 - And if you have some suggestions, do reach me out.
759:47 - I would love to have your feedback.
759:49 - That's it for this video.
759:51 - Hope you have enjoyed.
759:52 - It was a great, fantastic journey with all of you.
759:54 - I hope you will share the entire series
759:56 - so that I get more eyes.
759:59 - It would be really, really great
760:00 - if you can share on LinkedIn,
760:02 - but if you don't want to, that's okay, that's fine too.
760:05 - Anyways, that's it for this video.
760:06 - Let's catch up in the next one.

Cleaned transcript:

In this REACT course, you'll not only learn the nuances of REACT and its internal workings, but also immerse yourself in building a variety of projects to understand the practical applications of REACT features. This course uniquely balances a projectfocused approach with comprehensive theoretical knowledge, ensuring a thorough understanding of each concept. Pitesh Choudhary created this course. He's a popular instructor with 850,000 subscribers on his YouTube channel. By the end of the course, you'll not only have a bunch of projects for your portfolio, but you'll also gain handson experience in creating a fullstack application using AppRite, integrating advanced tools like Redex Toolkit and Tailwind to craft productiongrade applications. Hey there everyone, Hitesh here, back again with another video, and welcome to this brand new series. So I was trying to record a series on REACT on the other channel, that's when I realized, hey, why can't I record this on this main channel as well, the English channel. So welcome to this brand new series on REACT. This is a very focused series on focusing on absolute beginners who want to just get started with the REACT. And there are lots of tutorials on REACT, but all of them are little bit some things which carry the baggage of, you should know this, you should know that, not this one. This one is purely entirely beginnerfriendly if somebody wants to get started to learn REACT in 2023. What are the options available? How to read the documentation? What is the process of getting started with the REACT along with projects? And what should be the approach? This is going to be whole about it, we're going to absolutely love the series, and let's get started. So we're going to get started this video with a roadmap. How one should be learning REACT? When should be learning the common questions that should be answered? What should be the prerequisites of learning that? So we'll be answering all of that in this very first video. I prepared a few notes for you, and we're going to get started with that. So first, let me go ahead and share my screen video. So this is my iPad where we'll be walking through with the REACT roadmap, and this is where we're going to get started. First and foremost, let's not jump directly into how should I learn REACT. Let's first answer a couple of questions. First, why to learn REACT? Most important question, if you really ask yourself that why am I learning REACT or why I need REACT on the first place, then you'll be a better engineer in designing REACT application just because you want to learn because there is a hype around it, there's a lot of jobs available for it, or it's in the trend, probably not right. Because most of the cases of the REACT can be handled by just the JavaScript or just the JavaScript DOM manipulation. Please don't learn REACT if you're just in the hype, or you just think that, hey, there is plenty of jobs and I can be a REACT developer. Yes, that case is somewhat true, but I think that's not a great reason to learn. It is trendy. Yes, a lot of people are talking all the time about REACT. And if you think I want to just build UI with the REACT, then of course you are not correct, my friend, because building UI is not something which is a core superpower of REACT. Those UIs were getting built in the PHP as well, in the era of jQuery as well. So there is nothing which is super important that is being offered by the REACT itself. You should be learning really REACT because it makes easy to manage and build complex frontends. There are applications in which you just click one button and things gets updated on five different places, 10 different places, or 20 different places. These places are really difficult to manipulate while your ordinary DOM, which you manipulate by the JavaScript. So if your application is pretty complex, like an ecommerce app or something like Facebook or something, at that places it really makes sense to have a REACT application. The better you become in understanding the REACT need, the better REACT engineer you will become. Then the second thing, when should I learn it? Because now that you know that, okay, I can build complex app, but when you should really learn REACT, I always say don't jump into the frameworks of JavaScript just because you enjoy them or you watch a lot of YouTube videos. No, that's not a good idea. Don't react only after mastering the JavaScript. JavaScript is something which is core to the REACT and there are a lot of problems in debugging issues which are actually JavaScript issues and not the REACT issues. If you understand JavaScript, if you understand how the single thread works, if you understand how the execution environment comes into the picture, how the global execution context, the function execution context work, how JavaScript is able to manipulate the DOM, then is the right time to jump into the REACT, otherwise, no, you are making it in a hurry, not a good idea, you should stick to the JavaScript still. Okay, assuming that you know your JavaScript, then also please understand that most of the projects don't need REACT. It seems like this is a video where I'm actually pushing you away from the REACT, but that's not the case. I'm just putting up an honest picture that do you really need REACT? Once you truly are satisfied that I really need REACT, then you'll be becoming a good engineer of the REACT. So most projects honestly don't need REACT in the initial phase. As the app gets complex, as the pages are increased, as there is more and more functionality which is on the front end part, then injecting the REACT or having an application totally on the REACT makes sense. If your application is just one page which is having a contact form and is just displaying some pictures, just one or two page, I think you'll do far better in just HTML, CSS and core JavaScript. So assume that, hey, there is a case. Now that you are convinced that, okay, no matter what, I really want to learn a REACT. So in that case, why REACT was created on its own in the first place, there is a great story behind it. I would love to share that. So this green box, yes, I tried to mimic Facebook with this one. So in this Facebook, if you remember the old time, there used to be a problem of the ghost message problem. In some of the internal documentation of Facebook and some of the conferences, you'll find this as a phantom problem. I called it as ghost for no reason, but there was a problem. So here was the chat icon. Here was a chat that was written like this. And there are a couple of ways. If you click on the notification itself, then it opens up a pop up box here at the bottom. If you click on the chat, it opens up the entire box here. But if you have opened this from the notification, sometimes what happened is not all the times, sometimes this icon here which says one or maybe that says three because there are three messages. This doesn't get go away. I have read the message here. So this should go away. There should not be any notification symbol here. If I've directly read it in the chat, sometimes it just appears here and it doesn't go away. That was the problem. There was no consistency in the UI. And this was a common problem which was getting a feedback, feedback again and again in the Facebook that why this message is being shown here. I have read the message. I'm aware of it. It's still not gone. So this is the common problem that Facebook was facing. And in order to solve that problem, a team was engaged, especially Dan, that I really want to solve this problem. And that is how the React was born. And the first time the React was not taken well by the community. But eventually, eventually people adopted React and even started to loving it instead of hating it. Now, the problem that we are facing here is actually a two coupled problem. The first is the state. By the term state, I mean all the variables in JavaScript. All these variables like should I show the notification or not or should the number should say one or the number should say five. All these things are actually maintained in the JavaScript world. And all the updation of the UI is actually handled by DOM. So UI is updated via the DOM while all of your variables are actually in the state in the JavaScript. So the problem that it was there was actually the problem of syncing. There was no sync between JavaScript and the DOM. So React came into the picture which actually gave a consistent way of updating your DOM and that is the only superpower of React. It gives you consistency in the UI. And that is why people loved React. When the React came in, the first early adopter outside of the Facebook was Khan Academy, a very wellknown name. If you are in the education domain, it's a very wellknown name. So they adopted it and a couple of talks were there. And in that Khan Academy tech team said that, hey, React is not an amazing library, which it was not at that time. But hey, it gives so much amazing consistency in building the application that we kind of love it. And that's when after this Unsplash picked it up, a couple of other big corporate giants picked up the library and says it's fun to actually work in the React. And of course, React was not perfect at that time. There was a lot of classbased component. Eventually it got updated. A lot of things happened, which we are going to see. But this is how it learned. Again, one more time, I would say do not learn React if you don't know how the JavaScript works, all those basics. And again, also don't learn it if you don't know how the DOM works or the document object model. By the way, I do have a video on my YouTube channel about how the browser inner working works. I do have a playlist of inner working, which will help you to understand how the browser actually works, how the DOM is being painted, HTML, CSS, JavaScript, and whatnot. At least watch that video. It will be very fruitful for you. So moving that, assuming now that you know about how to learn React and you're confident about it. There are a couple of ways of how you can learn the React. There are two processes of learning that, in fact, this pedagogy applies for almost everything that I teach. There are two ways you can go directly in depth or you can just start building the projects. You might be thinking, I need both. I want to go in depth. I want to see the project as well. Yes, you do both, but actually you need to start somewhere. And you can start either by directly going in depth or by directly making the projects. So when you go directly in depth, you come to the words like babble or you come to the words like React, fiber, virtual DOM, diffing algorithm, hydration, tree shaking, all these concepts. And you first understand the concept and then you try to make projects like todos and calculators and background changers and whatnot. And you apply these concepts. Another approach is let's just directly build the projects. Let's just say we build a background changer or a calculator. And via this, we learn each topic. For example, in todo, we learned about the virtual DOM maybe or calculator, maybe the diffing algorithm. So each project teaches you one or the other concept and then the same thing happens. The project, the approach that I'm taking in this entire series is actually by making directly the project. First I'll make the project and then I'll take you into the behind the scene. Hey, what just happened? How we did that? How we didn't do that? How it worked? How it didn't work? And all of that. I think that's a much more fun project based approach, a much more fun approach, because it actually keeps you engaged and then says, yeah, that hey, we are building something and something is working on the screen. And now let's see that how it actually worked. So I'll be using this approach, but again, there is no right and wrong here. If you're learning somebody who's teaching you directly in depth, that's also good. No problem in there. One thing that you're going to commonly see is React as a library. So I do have a common words for them. You'll also hear that some things are frameworks, some things are library. I call framework as something which is military. And library as something like who is somebody, a cool dude. What do I mean by that? By the term framework and by the term military, it means the rules are very strict. In the framework, rules are very strict. The naming convention, the way how the file name should be, the way the file should be placed in a particular folder, the way how the data is going to coming in and going out. All of this are very, very strict in the framework. In the library, it's like cool dude. You wear the cap front side, it's good. You wear the cap behind the side. It's all good. So the cool dude. But again, it's not like they don't have any rules. Library also do have certain rules, but they're not that strict of a framework. So yes, React is a library, and that makes it really easy because it's not really that much difficult. It's not a big library. You can finish it up pretty quickly and easily once you understand the basic core concept. The topics that you're going to learn in the React first are core of React. You really want to understand how the React works, how the file structure works, the core concept behind it, how the state or the UI manipulation works in this. What is JSX in the first place? What does it mean by that? What does it do beneficial for us and all of these concepts? Once you've done this, then you jump into the component reusability concept. And again, it's not a proprietary concept of the React itself. Component reusability was there in the early days of PHP as well. It still is in other places as well. But React makes it easy. And once you understand the component reusability concept, you automatically are introduced to the props, which is a short for properties. The same JavaScript object, the same key value, those exactly same. So we understand about those props. Also we learn how the changes are propagated. So in the React, what we want to do is we don't want to use the classic JavaScript like get element by ID, query selector and whatnot. We just want to manipulate the variable automatically react will think on its own and will update my UI on the web page. For this, you learn about the hooks that how these hooks are responsible for updating my UI or my DOM on the web page, I'll just update the variables. I don't care about how the UI is being updated. That's where you are actually introduced to the hooks. That's the basics of it, at least. This is it. This is it. This is your react. But hey, we haven't talked about the URLs, we haven't talked about the routers, we haven't talked about the state management. The truth is you shouldn't be you shouldn't be all that we are covering that in the series, but you shouldn't be because till this part, this is only your react, nothing else. If you really want to have additional feature, then comes other libraries. For example, React has no built in router. But if you really want to use router, you have to use something known as react router DOM. So yes, we install another package, since you're learning about another package, that cannot be called as core react knowledge, you are going a little outside of your realm. And thus, I call it as additional add on to reacts very close to the react. But they are add ons. They're not react. Similarly, we do have a state management thing react didn't used to have any state management in the earlier days. Yes, it was introduced later on. But in the early days, we just had the Redux, Redux, again, separate package, separate library, Redux can be used with react, Redux can be used with view can be used with swelt. So it's a standalone library. But yes, we still focus and learn a lot about Redux. And these days, we learn about the another abstraction of the Redux, which is known as Redux toolkit, which is cool. So yes, we'll be going through with that. Another such similar state management library is a stand quite popular, I do have a series on my channel on the stand as well. So quite amazing. So you can learn that but eventually react realize, of course, they realized it before the stand actually, that hey, we need to do something about the state management, it's getting out of the hands. So they introduce something known as context API, which is again, kind of a hooks, when we learn about the hooks, you'll automatically get and understand that part. So you'll get to know that so only context API is something that is not additional, but it was introduced later. Again, some people also tends to learn about the class based approach, when the react was introduced in the very early days, everything was class based. They got inspired a lot by the swift, not swift, I would say purely by iOS development. So they used a lot of things like component did mount component unmount component about to mount component will mount, I don't think so there was about my component will mount, you get the idea. So a lot of things were there. And this is known as legacy code. So if some company is still using it, hey, why are you using class based component these days, it's been so gone, so long gone. But I'll still give you some brief idea about that. Not really that important. But if you wish you can spend some time in learning about that. These days, everything is functional and react. The documentation says that, hey, just drop the class based approach, use the functional approach. That's how we are going. And it's not like they started just a couple of years ago, it's long gone, it's long gone. And on top of that, one more additional part of it is bass apps. Like back end as a service, one prominent name, which I'm a big fan these days is actually app right. Are there a couple of others as well, but being app right being open source amazing, it provides you entire back end. So you can build your social media apps, ecommerce apps, Twitter, Twitter, clone threads, clone, whatever you wish in just react. But technically, it's not pure just react react to just handling the API calls and sending data receiving data. The majority of the heavy lifting is done by these bass back end as a service, you might have heard of those names as well. So let me know if you know some of these names. So again, once you're done with the react, then what about after react, see, if you think that hey, react is not for me, I'm not enjoying the front end part or the front end engineering, you could have directly jumped from the JavaScript to the back end part. But since you're already here, I assume that you might be interested in learning the react as well. So what should I learn after mastering the react, I have handled a good amount of APIs. And now I want to build some complex apps and whatnot. So in that case, you can also go ahead and try one of my open source project, which is known as free API dot app. It's a fantastic library, if you want to push yourself to handle some of the complex react changes, or complex react full blown application, what we did is we wrote the entire back end for these applications, complex ecommerce, complex social media, complex chat app handle just the react part of it just the front end part of it. So check out the free API dot app in there. But again, react has some of the drawbacks. That's why people actually switched from react as a library to a full blown framework. What are these problems? React don't have SEOs. I'll walk you through that why the SEOs are problematic and react. It also allows browser to do a lot of rendering browser does so much of lifting. React ships the entire JavaScript to your browser. Now it executes in the browser, then it paints the entire picture of HTML CSS. So there's a lot of work with the JavaScript and your browser does so obviously, in some cases, it's not really ideal. That's one of the drawbacks. What we want is some things which actually renders react on the server itself, and sends the browser only HTML CSS part of it. And that's what a lot of things even this is coming to the core react of it, the server side rendering, but we'll talk about it later on. Also there is no routing in the reactor. So we can either use react router DOM, or other option is use a full blown framework. There's no shortage of these framework. In fact, I would not hesitate to say a new framework in the JavaScript drops every week. Some people would say every day, but I'll still be saying every week. So there is Next.js. I do have a lot of content on my channel on free code camp on the Next.js. I created them. I loved it. But that's not like Next.js. There's other options like Gatsby, Remix. A lot of options are there. So this is basic. So this is your entire roadmap of how you should be learning React, or how you should be introduced to it. Or at least you now know the basics of, OK, am I ready for this react, or should I focus more on JavaScript, or can I go just back into this one. After this, we'll be directly jumping into the code part, and we'll be starting our React journey. So this is pretty amazing. And I think you'll be enjoying this series quite a lot. I'm definitely going to enjoy teaching this entire React to you. So get ready, buckle up. A lot of projects are about to come. We'll be going dive into the lot of React fun stuff. And hit that subscribe. And in case you are enjoying this series, please, please, please do share it on the LinkedIn. Tag me. That's one of the only motivation that I need right now. I would be really, really happy with that. So that's it for this video. Let's catch up in the next one. Hey there, everyone. Hitesh here, back again with another video. And welcome to this React series. This probably would be your second or maybe third video in the React itself. And this video is much more crucial than the last one. In the last one, we saw that how we can have a basic roadmap to understand and learn React. In this one, we'll be actually getting some hands down. Yes, I walked you through that. We'll be walking through with the project approach. But it's not going to be just the project approach. I'll be walking you through with time to time in depth how React works so that you can develop a mindset of how to work with the React ecosystem. That's really the crucial part of it. In this video, I will walk you through with all the tools that are required, how you can create a React project, how does a React project looks like. Because by default, a React project is a little bit clumsy. There is too many files involved in it. Once we understand that what files does basically what job, it will be much, much easier for us. So this is going to be your official first start journey and all the tools, all the sets that we require to work with the React. Don't worry. It's going to be a hands on journey. It's going to be a hand holding journey. You're going to be enjoying this for sure. That's my promise. So the first thing that we're going to do is share my screen. So let me go ahead and share my screen so that I can walk you through with the stuff. We'll come back onto the GitHub a little bit later. First of all, let's just explore all the things that we're going to require. The first one being Node.js. We are not going to move anywhere forward without the Node.js. It's a little surprising that even the front end doesn't move without the Node.js these days. If you have any version, version 18 or version 20, that's totally fine. It's not really a difficult process. Get it for Windows, Mac, Linux. Doesn't really matter. You just need to install it. The specific version also is not that much important. You can have the LTS version, long term support for the version 18, or you can have the latest and the bleeding edge version, which is 20. That is also fine. In my case, if I open up my console and I show you that I do have, once you actually install it, you'll be having a NodeV as an option to find out what version of Node is installed in your system. Mine happens to be in between of 18 and 20, but I'll update it very soon. As I told you, it really doesn't matter. As long as something above 18 is there, even 17 is above there, it's totally fine. It's not going to bother you. It's not a course on Node.js, but it is required to actually learn React. So that's the first piece of the puzzle. The second piece of the puzzle is any code editor. Everybody seems to be on the VS code, but if you happen to have any other choice of the code editor, that's also totally fine. Maybe you are a VIM fan. That's totally OK. Maybe still you are rocking the sublime text. That's also fine, but I'll be using the VS code. I use it with my own custom theme with the purchased font. You don't need to do all of this. That's just a fancy shenanigans. You don't need to worry about that. But this is something basic what we have. Another crucial thing that we need for this is actually React.dev. You don't need to download anything from it. It's just a reference point from where we'll be consulting the documentation to understand the parts of it. There is another portion of it. I'll walk you through with that. But first, let's set up the thing so that you can actually grab all the stuff and things like that. So what I'll be doing is let's first go on to this. So I do have a folder here. I'm actually going to create this one is for my English channel. So I'll be saying that, hey, this is going to be a React course for 2023. So I'll be saying React 2023. Basically, I'll probably React course. React course. Yeah, that's a React course. I'll be giving you the entire description where you can download on the code files and everything that you are having. So no worries on that part. And the next thing that we'll be having is just open this up into any code editor. So I happen to have a code editor with me, which is VS code. This is how it looks like when you install this. All you have to do is drag and drop this react up here. That's it. That's the step one. Once we have this, let's go ahead and keep it up there. We'll be creating a new folder into this one. Let's just call this one as readme.md. MD is a markdown syntax, which has a special way. If you just create a .txt file, that's totally OK as well. No need to worry at all in this case. Now, I'll be just putting up a simple hash. That means a heading. And I'll be saying simply start of React.js on main channel. I do have a couple of other channels. Not couple, but one other channel, which is in the local language. So I'll be just saving this. And I can just click on this button, which gives me a preview that this is how it looks like. So as I told you, it's nothing. It's just a text file. Nothing more than that. Why we are creating this is because I want to push all of the code onto the GitHub as well. So I'll be just going up here on the GitHub. In case you know GitHub, that's great. If you don't know, this is where you need to download all the code files that I'm creating along with you. You can download all of them and check out how the course progressed and everything from here. Just click on this. I want to create a new repository. And I'll be calling this one as React dash English. And it's really, really funny to see that we have a React and dash English after this because that's how it is. I have a couple of other channels. I'll be calling this as public. That's fine. And we'll be calling this one as a fun React series in future. Maybe I don't know why we kept it. I don't want to add any read me or something. Just keep it as public or you can keep it as private as well. I need to keep it public so that I can give it to you. Create the repository. And then the repository will allow you to actually a few set of commands that you can initialize the gate. You can add the read me. You can make a commit, change the branch. And basically, you have to add a remote origin and push it so that all the code can get onto the GitHub. And later on, anybody can see that. Let's run all these commands. So I can just open up my inbuilt terminal. By the way, I can just click on the terminal, new terminal, or I can just click on View. And somewhere here, the terminal is, I don't know where. Yeah, here it is, terminal. Or you can use the shortcut. Control, tilde, whatever is your shortcut. That's the one you can use. I'll just go ahead and say git init. That initializes a git repository. And then I'll just go ahead and say git add. I want to add everything. There's just one file. Or I can name the file as read me. I'll just add this one. After that, you can again consult to the documentation because all the commands are here. Then the next step is git commit. So I'll just commit with a message that says start of React series so that later on I can push all the code up there. Also, I would love to change the branch. Also, there is a mention. There is a big, big GitHub thread about why we should call it as main, not as a master and slave. But again, we are not going to go into that much of the story. But I'll just say git branch dash capital M. I'll call this one as main so the branch has changed. Then I don't remember this, so I'll just copy and paste this. This is basically a link to repository. Since my GitHub is already configured with my account and all the SSH keys that are required to talk to GitHub, that's why this command will run. Otherwise, this will not run for you. So the remote origin is being added. All I have to do is now push all of my code here. So as I'll be creating the content, I'll be pushing it on to this one. So now everything is gone up there. Now, if I come back and refresh onto this link, which I'll be giving you in the description, as you can see, all the code actually get pushed to the GitHub. That's really important for us so that I can share all the code files with you. Also, you can check out the commits as well so that you can find out, OK, this section of the code was added at that time. And this was first, this was second, just like that. OK, so this is basics. But now we need to go back and see that how we can actually create a React project. That's the crucial information. And all the crucial information comes from the documentation. I want to learn it, obviously. So there is a quick start and there is an installation guide. How can I quick start before installation? So I'll just click on the installation and see that. How can I start a new project? So as I go in to start a new project, it says if you want to build a new app or website fully with React, we recommend picking one of the Reactpowered frameworks powerful in the community. So these are updated documents. And the documentation says that, hey, React is a very barebone library, as I mentioned in the roadmap as well. It doesn't do offer too much of the things to you. It doesn't have routing. It doesn't have advantages like incremental builds. There are so many of these things. So React team recommend that if you really want to build a fullblown application, just use some of the frameworks like Gatsby, Next.js, or any framework's remix, whatever you like to choose. So they actually mention all of this, that, hey, we're not biased towards just React, which is a lot of people are making confusion on the YouTube. No, they say, hey, you can use Next.js. You can use remix. Or you can use Gatsby. Whatever you like, it's your choice. But they are saying that, hey, this is for a fullblown application in the production. But if you just want to understand what the React is, it's not going anywhere. It is still a rocksolid library. But the way they mention it is a little bit controversial, that why this was actually mentioned in the deep dive. If you really want to have a deep dive understanding of those frameworks, as well as of the React, you need to have React knowledge. And you can use it without a framework. You can check the details. There are a couple of ways how you can actually go ahead and take advantage of this. They mention that, hey, you can actually use React and React DOM directly. I'll walk you through how you can do that, as well. Not walk you through, but I'll give you a brief reference of it. And you can use some of the bundlers, as well. Now, what on the god's green earth are these bundlers? You can use Vite or Parcel. Let's try out and test out what is this Vite. So Vite actually allows you to have, you can click on the Get Started Guide. And it will allow you to have an application preconfigured with the React. And all you have to do is NPM create Vite at latest. That's all. Okay, this is not the perfect ideal guide of getting started. So I'll walk you through with both the guides so that you can be in the sync of it. Now, first and foremost, we'll come back here. As you have installed a node, couple of other packages are also installed in the system. One of them being NPM and another being NPX. NPM being a node package manager, it helps you to install all the libraries, which are JavaScript friendly library, a node package manager. Another is node package executor, which helps you to directly execute these packages. So we'll be using one of them, which is NPX, and we'll be saying create dash react dash app. What is this create react app? This is a utility, which was really famous. Nowadays, people look a little bit down onto this library because it's a little bulky, it takes a little bit more time to get downloaded. It literally takes more time because it's bundled up with more things which are required for any beginner to get started. For example, even the testing library ships in this package, which probably you don't need, it's too much configured for you. So we'll check out both the applications, both the ways that how a package is being created with the classic create react app. And we'll also analyze the application which is built by the VIT or same thing goes for parser or any other similar package or bundler that we have. So once we have this create react app, we'll be calling this one as 01 and we'll call this one as basic react because that's what it is, basic react application. As I click on this, notice that it's going to go on to GitHub basically and actually, yeah, basically it's called a CRA create react app template. It's fetching all the things for me, not only fetching it, it's actually installing the things for me. If I open up this directory right now, the first step is to just get the package.json which has a lot of things. I'll come back onto this one right now. I don't want to touch it. So basically that's what happening. I'll come back onto this project because this actually takes painstakingly long time. That's why I just want to show you, this is the only time I'll show you that yes, this although I have a beast of a machine, I have a Mac studio maxed out and my internet connection is decent with a 300 Mbps and still it took this much of the time. Not very long for a beginner to get started and we can see that there is so much that comes into this one. There is so much source. I'll walk you through how you can read these kinds of applications, don't you worry. But now we have this application. Next thing that I want to do is not to dive into this one. I would love to learn how these applications are being processed and how can make it up and running but I want to explore another option that, okay, I can create my React application with CRA, create React app but I can do the same thing with the VIT as well. In fact, the documentation says that you can actually use another bundler which is parcel. So what are these bundlers? We will explore them later on but I can actually do that. All I have to do for this is just to copy this command which is NPM, not the NPX, create then the VIT at latest. At latest is optional but we'll still use the as it is command. I'll just paste this command and this is a little different of operation. In the create React app, I don't have to even think. It just brings everything, installs, that's it done. When I click on the create VIT app, VIT is a bundler which has more options. If you just get a scroll onto the top, it says I don't just support React, I support prereact, I support swelth, I support vanilla, I support a lot of things. So you have to tell it explicitly that what do you really want to build with this VIT or what should I bundle together for you? So if I run this command, it says first thing, what should I name your project? I'll say 01 and I'll call this one as basic VIT. Yeah, that's basically it. So I've got this basic VIT application but it says, hey, how do you want to actually build this application? Select your framework, library, it's a loose term that we use here. Vanilla, view, React, prereact, whatever. You can use arrow keys to just go up and down and I'll use React obviously. Inside the React, it also gives you two options that you want to use TypeScript, JavaScript, whatever. I'll keep this as accessible for more audience, although I do have a TypeScript course, both on the free code cam on my channel as well. But in this entire course, I'll choose the classic JavaScript, but no worries, we can talk on TypeScript some other day. I'll just click on this and that's it, it's done. As you can see how fast the VIT was compared to the Create React app, but there are a couple of things you should be aware of. VIT just brought in these files for me. It never installed things for me. So I have to go ahead and install this, while on the other hand, the Create React app not only brought in the files, but actually installed those files. I can see the node modules here. So in this one, I have to go inside this folder and install it. Now this brings a very interesting option. Any time you're going to see any React application, this is how the React applications are brought in. There is never a node module folder. So what you have to do is, go ahead CD into your 01 basic VIT app or whatever the app you're going in. And you have to say ls or dir if you're on Windows, and you should be able to see this package.json. This should be in your path directory. Once this is there, then based on this file, you can actually run the command npm install. Whatever the packages are mentioned inside this package.json will be installed. Once I do this, now you'll see a folder being created live in front of us, which is node modules. This is the file which will actually allow us to install all the packages and now we can run. Now we are onto the same packages level that I can run my VTAB or the React app. But before I go there, I should really learn to understand that how these files are actually structured that we'll do in the next video. But we should actually really see that how can I run this actually bare minimum projects and what all the things are there. So I'll just go ahead and delete my terminal itself so that we can go into the basic project route. One thing you'll notice that the full structure looks a little bit similar, but the way how you should read these application is always jump into package.json. This is a centralized index of the entire application that what all the files are, what all the dependencies are, what all the dependencies for development are, what do I support, what's my name and everything. You can see name, version, the dependency list, the scripts that I have, linting configuration, what browsers list do I support, everything is mentioned in the package.json. As you can see with the Create React app, it doesn't really just build a bit brought in React and React Dom, it actually brings this couple of things. But before we move there, I would like to break you back onto our, another eraser, yeah, eraser, eraser. Yeah, I can go there and just give me a second. I'll be going up there. I want to walk you through with a couple of interesting thing about the React JS, so we'll just go back there. It's just exactly a scally draw. So what you need to understand a couple of things about the React is that React is a main application or the main package which does all the magic, but React actually alone doesn't work. We need to tell it that where I want to run my application. So React has a couple of versions that you have to go through with this. So there is one known as React Dom, which is a version or the connector of the React which talks to my Dom in the browser. It's a web application. Similarly, we have just like this. I can talk to the web. I can go ahead and talk to mobile apps as well. There is a React Native for that. The core foundation will always remain React. So it will always be there, but it will also have the React Dom if I want to work with the mobile, the web. If I want to work with the mobile, it's React Native. Even there is a version of connector of the React with the 3D applications like a 3JS and all of that. So there's a lot of hooks that you can actually wire up the React with other application. So now you can see that the important libraries for us are just React and React Dom. But actually install React Script, some web vitals to check out how your web is doing, what's the performance. It actually installs some of the test libraries without even asking that whether I want to use the Jest as a library or maybe I want to use Cypress or Mocha or any other library, it just installed it. It's very opinionated in that case. So this is the first thing that we have learned. Now let's go back onto the VIT. Yes, I know this looks like very repetitive that why are you comparing the CRA and the VIT? It's very important for you right now to understand this because you'll be creating applications with a lot of bundlers. Right now, let's just nail it off here. In the basic VIT, if I go and nail down into package.json again, you'll say that this is not very opinionated. It just gave me dependency list of React and React Dom. You need some testing libraries, you install it. I don't care about this. This dev dependencies, you don't need to worry because this doesn't ship it. These are for helping the developers only. So as you can see, there is no even React scripts. So that means that's not an essential library that is given to us. So now this is the basic. The next thing that we'll be doing is just to learn and understand that how we can run these applications. That is it, that is it. Understanding the file structure, that's for the next video or the next section of the video if you're watching it all one girl, I don't mind that. Okay, so open up your terminal and how you run this application is actually again mentioned in the package.json. So if I go up, check out this, notice here there's a start script. So all you have to do is somehow you need to learn that how I can invoke the start script. Similarly, you can invoke the build script, test the script, whatever the script. If I go into the VIT application, same application, same procedure there, there are scripts like in this, there is no start script. So there is a dev script. So all I have to know is how can I invoke these keys so that I can run the application? That's all, that's all I have to do. So open up your terminal and let's go into one folder, which is 01 Basic React. Once I'm into this and I'm able to see my package.json file, then I can go ahead and simply just say npm run and then invoke the script, start script, dev script, build script, whatever that is, just invoke that. So I'll just say npm start. That's what is mentioned in the Create React app. So if I go ahead and run this, it will say that, hey, I'll open this up and it opens up a bare minimum, bare bone react application. Cool. Okay. I'll just close this one because hey, it's all done and then kill the terminal as well. Now I want to run the VTAB. So as we just saw that VTAB don't have a start script, but it actually gives me another script, which is the dev. So I'll just invoke the dev and how simple it is. Once I know the basics of it, npm run and the dev and can I run this here? Notice here the error. If I click on this one, it says, hey, there's too much of the error. Why the errors are there? It ran into that. So there's, is there a problem in the VTAB? No, you missed the step that I actually taught you that hey, if I do an LS, I should be able to see my package.json. I couldn't. So I'm pretty sure now you'll take care of the errors by this way. So I'll just go into basic VTAB and I do a LS and I'm able to see my package.json somewhere. Give me a time. Okay, package.json. Okay, once I have this package.json, now I can say npm run and the script name. It's a build, whatever the script name is. In my case, it's dev. So I'll just say dev. It doesn't automatically open this up. So I'll just go ahead and control click or if you have the Mac command click, it will ask you to navigate, navigate there. And this is your VTA application. This was my react application, VTA application. So yeah, very similar, very similar, but there are certain differences between each one of them. So I think that's the wrap up. I'll call this one as the wrap up of this video because it's already quite a decently long, but at least we have moved on to one point that we can actually create applications without even being dependent on next shares or remakes or anything. So we're going into the core foundation of React. Within just few minutes or seconds or in the next video, we'll be exploring the file structure so that you have absolute confidence about that. Hey, I can build any React app or I can inject React wherever you ask me to do so. So that's all. Let's go ahead and meet up in the next video and explore the file structure of the React application and the VTA application as well. Let's catch up in the next one. Hey there, everyone. Hittai Sheer back again with another video and welcome to the React series. Let's continue further down the road in our React series. So we have built a couple of applications. In fact, two precisely of the applications. One was built using the Create React app. Another was built using the VIT, which is another bundler and there are many other such bundlers. So it is very crucial for us now that we dissect each one of these applications. Yes, there is a way that we can directly jump into the application, can build some projects like Todos or maybe some password generator or something. We will surely do that. But it is utterly important here at this point that we dissect the application. Once you understand each of these because they are like a critical example of how the bundlers actually work and how the default React CRA works. Once you understand the working and the file structure of both of them, you will be able to understand React much better and you will be able to inject React in any prebuilt applications as well. Of course, you'll be able to create them fresh as well. So this video is only and only focused on each and every bit that is going behind the scene and is running in the React applications. So let's go ahead and just dive into that one. So let me share the screen. So this is our application that we have and the first project that we have is 01 Basic. This is being built by the CRA. The second one is being built by the VTAB. We will of course do the comparison between the two, but first let's jump into the React application. We've already seen that in order to read any such application, the first point is to go into package.json. This is kind of a index or a directory for your application. It shows you the name, the version and most importantly, the dependencies and the scripts that are available. As we can see, the React application with the CRA, React React app, it's a little bit opinionated. It gives us some of the testing library. It never asked me that whether I want to use Jest or not. Maybe I'm a big fan of Cypress or maybe Mocha. These are also testing libraries. So it doesn't ask me, just directly give me these testing libraries. On top of that, React and React Dom, as I mentioned, these are the two vital things, which is React. React is coreact and in order to talk to the Dom, there's a separate package known as React Dom. Similarly to talk to mobile apps, we have React Native. So these kinds of things happen. Also on top of that, it actually includes some of the React scripts. I'll walk you through what it is doing behind the scene for you and some web vitals to check the performance of the application. So it never asked me that whether I want to use this package to track the performance or not. So a little bit opinionated of a library. Then on top of that, it actually runs on the script. So when I say NPM runs start, it actually runs a script which is known as React scripts and then it starts. So even starting of the application is dependent on these React scripts. So I cannot just go ahead and uninstall this. Similarly, we have some of the build scripts, test the script and eject the script. Maybe you want to eject the entire React application from the React configuration. Now the way how we start the React application is actually in the development mode. This is what you have been using. But once it actually goes on production, something known as Varsil, Netlify, Amazon, there are lots of options to deploy your application. You simply go ahead and run the build project of it. And once you actually do this, you run the script of build, it actually gives you the production version of how your application will be deployed. And there is no rocket science behind it. We can go ahead and just simply run this. So we will go into 01 basics, probably I am in basics. I'll close this one, delete this one actually, I'll start with the new one. 01 basics, my bad, 01 basic react, okay. Now we are in the correct folder. And I can run this script. And simple way to run it is NPM run and instead of start, which will run the basic development server, I can actually run the build servers which your Netlify and Varsil actually run to actually run your application. Because when you run it in the start mode, actually your browser doesn't understand that there needs to be just one JavaScript file. What it does is in the React building or the development phase, we build lots of React application. They need to be combined and come at to one place. And this is not an easy operation. That's why there is a separate build script for that. And each one of the packages gives you that. So we'll be running this NPM run build. As I done this, you can see there is a build folder which is available for me. And this build folder has the final JavaScript version of everything that's required to run this application. As you can see, HTML, CSS, JavaScript, that's it. And these are your many five versions and mapping of your JavaScript. So end of the day, it's just HTML, CSS and JavaScript. No rocket science there, all right. So this is how your build applications are being built. As we can see, React scripts are actually responsible for doing this. We'll come back and compare this exact thing with the VIT as well. But right now, just to summarize, yes, there are lots of dependencies. We have React scripts as well, and we have the start. Now let's compare the exact same thing of package.json with the VIT application and see and figure out that why people love VIT so much. Let's open the package.json of the VIT. And as we can see, name, private version, very basic. Nothing to be worried there. We have the dev script, we have the build script. Okay, I agree that part needs to be there. In the dependencies, we have just the React and React DOM. So no testing libraries, no React scripts, and how does it is working without the React scripts? That's an important question. But rest of the dev dependencies, I'm not much worried because they are only there for the development purpose. As you run the build command, dev dependencies never goes into your project or your files, all right. So that's the one thing. So that's why people love the VIT. No opinions about the testing framework or any React scripts, just the core minimum, bare minimum essentials to run the React app. That's pretty nice. Okay, further down the road, as we can see, this is much more easier and cleaner. And we already understand that dev is for development environment. When I run npm run build, this is how it's going to run the build command. So very basic and bare minimum. Again, closing this and this kind of a comparison and necessary for understanding the application. Now going into this one, we have this public folder where we have this HTML, index.html. Of course, this is where everything gets injected. I'll walk you through. And majority of the time you'll be spending inside the source folder. Rest of the things are pretty basic. We have node modules, which installs all your packages. We have gitignore to ignore some of the files which are not interested. There's a package.log folders as well, which has a specified version of all the packages that you are installing, pretty much the same, but it's a locked version of it. And we have the source. Now, how does your React application works? So for that, let's first go into public folder and open up index.html. Rest of your logo manifest. These are not much to be worried robots for your Google indexing, manifest for the mobile indexing. So all those mobile icons and stuff are very basic. But if I go into index.html, as you can see, there is a lot of things that is being written here. And you will be able to understand it more if I remove the comments. First of all, in the head part, we have some of the meta tags. So really not much worried about it. The linking of the icons, not much worried about it. And then it mentioned some things about the manifest that it's a metadata used for your app, even installed on the user mobile, not much worried. So I'll just clean this one. All right, similarly, I will also just clean up this public URL and basic that how we can link up the static assets. So not much worried. Now further down the road, I'll also go ahead and clean up these comments as well. So there we go, let's remove that. And if I go ahead and save it now and close the head tag where all the crucial information is there, in the body, there is nothing much going on. First a script that says that, hey, if you want to run this application, you need to be having JavaScript enabled because some browsers can optionally disable that. And there's just one thing which is known as div, which has an ID of root. And that's why we call the React app as the SPA, single page application, because there's not any other page, it's just a index. And what React does, it actually takes your web application. And in every web application or website, we have these DOM nodes of HTML. React basically does is remove the nodes and inject the nodes at their place so that we don't have a full page reload. That's what we call that as SPA, single page application. So if there is a div ID root, there might be someone who is grabbing this, if you understand the foundation of DOM, there needs to be a script in this page, which actually go ahead and say, hey, document.getElementByID or querySelector or something, because ultimately React is the foundational of, like JavaScript is the foundation of React. So this needs to be there. Without this, it's not going to be working. So right now I can see there is no script tag in my HTML. So from there, this is script tag might be coming up because otherwise how your HTML page loads your JavaScript, that's an important question here. So if I go ahead and try to run this application, let's see what happens. So let's run this into the, and you don't need to run it into build mode, NPM run start is all good. NPM run start and try to evaluate this. And there we go, our page runs nicely and fine. If I right click and click on inspect, let's go ahead and see. So as we can see, there's a lot of things which got injected in my application. So this is my ID root, and in this I can see app was injected, then the app header, all these things, not much where it, I'll understand that. But not only that, some things like style ID, this dashlane is mine, because that's my password manager, this always gets injected. But apart from this couple of other things also got injected into this one, which I'm not sure from where this actually comes up. And you also will see that couple of more things actually get injected onto this one. You can analyze it more by just clicking and view page source. And you might be noticing that previously there was just this app, but now if I go ahead and open and look onto this one, there is a script which says static JS bundle JS. So from where this script is getting injected in my application. Very interesting question if you just look at this. And in order to answer this question, there is inside the package.json, there is this something known as React Script. So this is doing behind the scene magic that while running the application or building the application, since the application is being run by React Script, it automatically finds your index.html and inject its JavaScript there before publishing it or pushing it onto the server or our local server. So this is the magic that's happening. But as we saw in the VIT application, this magic is not going on there. So what is making sure that our app is running because similar kind of a thing might be happening there. Let's go ahead and analyze that as well. This kind of comparison analysis, I'm pretty sure a lot of people are not going to like it, but this is very crucial to understand React. After this is just packages and just fun stuff. Okay, as I can see, there is no public folder, like there is a public folder, but my index.html is just outside. If I look at this, this is much more of a cleaner version of it. There is a head tag. Okay, I understand that part. There is a div ID root. So they're using the same analogy there, but I can see that the script tag is automatically there. So they are not using any React scripts to inject your script, but rather they are injecting it manually here. And that's it. That's what your React scripts are actually doing. So that's exactly where it is happening. Now, everything is coming up inside the source and inside this index.jsx, we'll talk about that one by one. But now that we understand how the working part of there and how the JavaScript of React is getting injected into the application. Now further down the road, if I open up the source and there's a lot of things in here, so we obviously need to remove that. Otherwise it would be really difficult to understand that. So set up test, I'm not interested in test. Go ahead and delete that, move to trash. Report web vitals, I'm not interested in you. I'll just go ahead and delete that. All right, a logo, not interested in this, vglogos, just delete that. Yep, index.js, yes, I'm interested. Index.css, I'm not gonna talk about CSS as of this moment, later on we surely will. App test, no testing this time. I'll just go ahead and remove this. And app.css, nope, not interested in this one. So I'll go ahead and delete this. So ultimately we have just two files here, index.js and app.js. As I can predict from here, that the first entry point of my JavaScript would be index.js, if you have guessed that, that's correct, I'll just go up here. And as you can see, there is again too many of the things, so I'll just go ahead and first remove all of this, so that's one. I don't have web vitals, so I'll just go ahead and remove this. I don't have index.css, remove that. React Dom and React, these are packages and app is my file there. So if I look at the index.js, there's not too much things going on. There is somebody who is actually referencing document.getElementId by a root, so it's referencing my index.html and is bringing up the root. And React, behind the scene, we have a React Dom, so there is a browser Dom and there is a React Dom, known as Virtual Dom. It tries to mimic the original Dom as well, and then whatever the updates you make actually first goes into your virtual Dom or React Dom. Calling it as a Dom right now, it's not a great idea because now it's not a virtual Dom, it's fiber, but we'll talk about that later. So we go ahead and just have our own virtual Dom, and that's what this React Dom is known as. This is actually the virtual Dom. And any update that happens here in the virtual Dom actually gets pushed into the original Dom, and only those pieces are pushed. So as we can see, it's just creating a root here, and then this root is actually rendering. I'll definitely talk in one of the video about these rendering process in much more detail. In fact, we'll be creating our own render method, just similar to this one. And as I can see, this is just a React strict mode and React. And by the way, I can just remove this strict mode as well in order to make sure that you understand it much better. This is also an optional code. So we have just an app, which is just running in here. All right, that seems good. If I go into app.js, it looks there is so much going on, but I can just go ahead and technically remove everything. And in fact, if I just close this header, I don't want this header entirely. I'll just go ahead and say, hey, there is a dev app. No, I'm not interested in that. I'll just go ahead and write in simple H1, which is like a HTML text. So I'll just go ahead and say H1 or H2, whatever feels good to you. And I'll say custom, not custom, it's a vanilla or classic React app. I'll save this. And if my application is running, which it is not, I'm in the basic React. So I can actually go ahead and run this NPM run start. And technically my application should still be running, but in the bare bone version. So now we can see that classic React app. So as we can see, a lot of things were coming in just from the CSS and stuff. And if you look at from the JavaScript perspective, what we're doing here in the app.js, we've just created a function that is an app, that's it. And we are returning some HTML from it. All right, we'll just go into the details in the upcoming videos. But as of now, just a function which returns the HTML. Further down the road, if I just go up into the index, we're importing this app from the file. And we are rendering this here. So how cool this is and how basic this is. Now further down the road, we have this app. So that is cool. And we are running this. And there's a special syntax of running this into this. This is known as JSX. We'll definitely go into much more depth. But if this is bothering you a little bit, since this is a method that you imported, it shouldn't be done. But since this is a method, you can actually run the method like this. And if I save this, yup. If I can go back onto my React app, yeah, this is exactly. It's a method. You can execute a method like this. But again, not a good practice. It's supposed to be JSX. We'll talk about that. But yeah, that's the basics of it. All right, so this was somehow the classic version of dissecting a React app, which was built. And now we understand that it's not that bad. It's just some rendering that is happening behind the scene. So React is doing some magic of optimizing the thing by just selecting an element from the root. Now I dissected it. I know that I can change any time root to Bitesh or maybe something else. I can do that. Totally do it. And app, it's not really that fancy. It looked fancy at the first go, but now it's just a method which returns an HTML. That's it. And now it's time that we dive and dissect the VTAP as well that, hey, what's happening at your side? Index, we know that you are injecting my root here and there's a script. Cool, I accept that. I understand that. In the source, again, we have a lot of things going on. So let's just go ahead and delete one by one. Main.jsX, I think that's equivalent of our index.js. So exactly same. Again, we can do the same magic here. We will do that, but first let's go ahead and remove index.css, not interested in the CSS part. So I'll just go ahead and delete, not rename. I'll delete that just to give you an idea of how the barebone version looks like. App.css, not interested in that either. Move to trash. Assets, not even tiny bit interested in that part. So I'll delete that. Now, if I go ahead, I have just app.jsX and main.jsX. And you might have noticed that it calls it at JSX and we call it as main.js. So here's the convention rule. If you're returning any HTML from your JavaScript, that's known as JSX because technically it is JSX, but it's just a rule. You can avoid that in some of the cases, but I recommend that you don't do that. Also another convention is if you're creating any component, yes, we call them as component in the React world. Otherwise it's just a basic function. We actually use a capitalized letter in the file name and the component name as well. I'll definitely walk you through with that as well. So in the main.jsX, now I can go ahead and do the same thing. I don't have CSS, let's remove that. App, yes, we have that and React, React DOM, that's cool. React strict mode, we don't need that right now. So we'll just go ahead and remove that. We have just the app being returned, save that. In the app.jsX, we don't have any CSS, remove that. We don't have VIT logo, remove that. React logo, not interested in that. Use state, in fact, we don't need that. I will just remove everything. Remove all of this, which you don't understand right now. And let's just go ahead and have this div. This needs to go away. And this whole thing needs to go away. And again, we'll be doing the same thing. Everything goes away. We just have an H1 tag and it says VIT React app. So that's it, that's the basic of how it goes. In the main.jsX, we are importing it and showing that up. That's it. Told you it's super, super easy. Let's stop that and run the VTAB to actually verify that we have a VTAB running with the bare minimum basics. So CD and this one is 01 Basic VIT. And this one is npm run dev. And this should also be running without any issues. So VTAB and we have a Create React app, so classic. So now that we understand each bit of it, that how it is happening, why it is happening, we can actually do a lot more. Since we are into the VTAB itself, if we actually understand the basics of it, that hey, it's just a file and I can just go ahead and create a function inside it, can I do it one more time? Yes, you can. Actually, let's just do that. So let's go ahead and remove all of this. Into my, the same folder VIT, inside the source, I'll create a new file and show you a couple of errors as well. So we'll just go ahead and call this one as youtube.js. And in here, we'll be just going with the classic. So we have a function whose name is YouTube. And that's how it looks like. And it goes ahead and says, I want to return. There's a parenthesis here. And I'll be returning an H1, H1, just like this. And an H1. And I'll say YouTube app, because I teach a lot on YouTube. Okay, we have to export as well. So we are going to say export default and we'll be saying YouTube. So now that I have exported this YouTube, can I use this YouTube inside the main or in the app? Yes, you can, you can. There is only one rule you have to follow. In the JSX, there is a rule that you can only return one element. So what if I have to return to H1 like this? No, it's not allowed. So there is a cool hack of it that, hey, just go ahead and wrap everything inside the div. And technically you're returning just one element, but the error is gone. This is so much of a common practice that eventually React guy realized that, hey, this is such a basic thing in the JSX. It's kind of a backdrop of a JSX that we don't want it. So eventually they removed it and they simply said, hey, now we can return empty parentheses, which doesn't create any extra div in the HTML and keep everything just awesome. In one of the mid version of the React, we were supposed to actually bring it as fragment from the React, but now we don't need to have this, even the import statement, it just works fine. So if I go back here, it's a VTA, VTA, there we go. Now similarly, if you understand that how in the main.jsx you have imported app from app.jsx, you can do same thing in the app as well. You can just go ahead and say, hey, I want to import YouTube and YouTube, and now you can use the same syntax of that, just like we have used in the app, just same syntax. Yep, you can go ahead and use this, but this will be throwing us some errors. Don't worry, we'll be removing that. So if I go back, it says, hey, fail to parse the source code of import analysis because the file contains invalid JS syntax. If you're using JSX, make sure the name of should be JSX. So this is one of the VIT, you can say rule, that hey, your file was actually JSX, but you actually call this as just a YouTube, you shouldn't be doing that. It's again a VIT specific issue. Maybe some butlers also do that, but now that you understand this, you can just go ahead and rename this, and you can call this as JSX because you're throwing out some of the JS, but this is also not gonna do it. If I save this, go back, it technically runs that, but where is my YouTube? Hey, there should be a YouTube because there's a text inside the YouTube, I'm returning a YouTube app. Why is this not going on? Right click, inspect, and just look at the console. Now some warning in the console. The tag YouTube is unrecognized in the browser. If you want to render React component, start its name with an uppercase letter. So yeah, again, one more error. So let's just go ahead and remove that. So I'll just go ahead and say, hey, this is a YouTube with a capital U, export that as a YouTube with a capital U. In the app, obviously have to export that as YouTube. And now I can just call this component as a YouTube. So that is much better version of it. And now we can see the YouTube app. Now there is no such hard requirement of naming the file as capital, but this is a convention and I don't want to break that. So I'll just go ahead and say that, hey, that's a YouTube. And the moment I do this, this needs to be updating with the import. Just the file name will be importing. And sometimes you'll see the errors like this. That's okay. Just go ahead and command shift P and reload. Reload the window and the errors will be gone. So yeah, really basic. I've been teaching this for years and years now in all of the boot camps. So yeah, this is a classic way of, now you have learned how you can create your own component basically, which is just a method. This is just a method. So that's basic part of it. Now let's try to do the same thing. I know this is boring, but it's very, very important for you to understand that why and how we are having the bundlers and how does they behave and all of that. We need to do all of this in the basic React app as well. I know, I'm sorry, but this is crucial information. We cannot avoid that. So let's go into the source. We know this index.js, we know app.js. Let's go ahead and create another one. And let's call this one as a YouTube. And we'll be following the convention this time because there's no point of learning them again and again. So we know that YouTube. In this, I can actually use .js. There is no hard and fast requirement to call it as JSX because the rules were actually coming up from the VIT, not the CRA. So every bundler has their own rules, but I actually like this JSX. It actually gives me that, hey, there is some JSX getting returned from it. So I like that. So I'll be following that. In the function, I'll be calling this one as YouTube. There we go, really basic. And in this one, we'll be just going ahead and saying return. And inside the return, we'll be returning a JSX, probably adjust an H1, which says YouTube React app. And end of the day, we'll be just saying export default YouTube, if I can write that, not like that, YouTube. So once we have actually created and exported that in the app.js, I can actually go ahead and import that. I can just go ahead and say import YouTube from YouTube. We know that this needs to be uppercase. If I go ahead and directly write this as a YouTube, and just like that, it will bother me. Now we know that the basics behind it that, hey, this needs to wrap inside this, which is a fragment. Very basic, not too much to be worried. I can save this, and now I can run this. So as you can see, once you understand the concept at one places, moving them into another place is now a big deal. We'll just go ahead and say npm run and start. I think that's the start script. No, that's not a start script, because I'm actually in the wrong folder. I need to go inside, 01 Basic React. And from here I can run npm run start. And yes, these errors are really, really important for you to see and actually walk through, and just make sure never be afraid of going into the console to see if there is any error or something like that. That's how we all debug the application. Now we have actually dissected the application in such a way that we just know every inch, every piece of how the React application is working, from where the Reacts are getting injected in the HTML, both in the VIT, how the build process works, both in the CRA, Create React app, and the VIT as well. That actually gives us a great foundation of how things actually are being done inside this. Again, some of this I understand was boring, was repetitive, but it is essential for you to understand how the dissecting is done, so that when we later on create the React apps, you just see them as just a JavaScript app, and that's my goal. Not to see React as some fancy library, but as something which is an addition in your JavaScript writing capabilities. That's what my goal is. I hope you are enjoying this. If you are enjoying this, do let me know in the comment section. That is very, very important for me to get a feedback, to get some appreciation. Everybody works for some motivation. This is my motivation. So that's it for this video. We'll surely catch up in the next one. Hey there, everyone. Hitesh here, back again with another video, and welcome to our React series. I hope you are constantly watching this series, and I'll also sharing this series, so that helps me a little bit to spread the word around that, hey, there is a remarkable series, and yes, one thing is sure, this series is going to compete with all of the paid courses that you have seen around on the internet. So with that, let's go ahead and get started. In this video, we are going to focus on one very basic concept of how can I create my own React? Now, this sounds very fancy, but it is not. A lot of people just believe that React is some kind of a magic that happens behind the scene, but it is not. It is just a ton of JavaScript, which has been written by somebody else, and a lot of algorithms, which makes the manipulation in the DOM much more easier and consistent. That is it, nothing more than that. Once you get the mindset that React is doing nothing, apart from helping me in manipulating the UI, you will become an amazing React engineer, or as a frontend engineer, that's debatable. So in this video, I'll walk you through that, how we can create a really basic HTML file and a JavaScript file, and can kind of mimic what React is trying to do in the backend. Of course, React uses tons of algorithms, we are not going to write that, but still, this video is very valuable and will give you a whole lot of idea about that. I hope that makes you excited. And in case you're watching it on my channel, then definitely we have a target setting practice, so go ahead and keep on learning the things and post in the comment section, we are targeting around, not higher, but just 100 comments on the channel. I hope you can help me in achieving that target. Let's go back, and I'll first share the screen, so there we go. So this is my VS code, by the way, you can find all the code files on my GitHub account, post a star there as well, I'm asking too much. That's really required. Okay, moving further, let's create a new folder, and we're going to call this one as simply just custom react. So let's go ahead and create a custom react. Where does that folder go? Oh, anywhere, custom react. Or we're gonna call this one as custom, I really like this color, but anyways, custom react. Custom react will get just the two files, very basic, just like how we do in the classic vanilla HTML. So index.html, what else? We're gonna get some JavaScript. So let's call this one as custom react, or whatever you like. Custom react.js, should I uppercase this? Yeah, I really think a lot about that. Okay, what goes into the index.html? Nothing much, we'll be using emit to generate the boilerplate code, hit that, two hits and after that two tabs, and after that you can just write custom react. Now the idea is, in the react, what you might have seen is, we have already explored that in the last video, that it has just a div which has an ID of root, that is it. If I go ahead and jog your memory again, either I go in the VIT or wherever you want me to go, I can just open this and this is exactly how it looks like. In the VIT, we saw that there is a custom script that is included, and in the react, we saw that there are some react scripts which helps me to inject this inside this. So if I go ahead and look into my public, index.html, nothing, and that is only and only one reason, because in my package.json, there are some react scripts which actually inject that. So we're gonna not gonna do that, we'll inject our script manually, and there are a couple of ways how we can inject this, we'll not talk much about it, but right now I'll just say script, and all I want is to have a source and the source is in the current directory, custom react. By the way, we can talk also about that how the type of the loading of the script can be common JS module, but not for this series, not going to be too much into the JavaScript, but wherever it is required, I'll discuss that. Okay, now coming up on to the react, how does react works and how does react is able to just generate everything inside this route, and how would I do this if I had to just do really basic of it? Now the first thing is that we need an element. So what is the element that you want to inject here? Now you might say that, hey, I want to inject, let's just say an h1 tag, simple, and inside the h1 tag, we'll have some lorem ipsum, great. But this is not how react looks at the picture, react looks at the picture that everything is an object, and inside this object, you'll give me that, what should I create? First, give me a tag name, then give me what should I insert into that, give me what attribute should I add to those HTML, that kind of a basic. So we can just try that, let's just go ahead and do that. First of all, let me say that, hey, this is a type, what the element type should be. It could be h1, it could be a tag, whatever you like, that is exactly the type. Now after that, what are the props that you want to insert into this? By the term props, you can just use attributes, no problem there, my video, I chose to props, your video, or your code, you can choose absolutely to have this. Now this props, since we know that the attributes can be many, so that's why I'll use a prop as an object, which can further be drilled down to multiple things. Like for example, I want an href, which goes to Google, so Google, if I can write that, that would be great, http colon slash slash, google.com. So that's the first thing that I have here. And apart from this, what else do I want? Maybe a target, okay. Target will be underscore, of course, in the string, underscore blank. Now right now it's giving us couple of errors, don't worry, we'll fix them up in a minute. But this is my basic, what else do you want to have? Now let's just say I want to have some text inside it, and I'm going to call these text as children. And I'm pretty sure you might be wondering how you are able to come up with the things that we are going to call this as props or children. No need, no need, no need to call it anything. Feel free to call it whatever you like. I'll just go ahead and say, and I'll say, click me to visit Google, and I know this is bothering you, so I'll just fix this. Okay, since this is an object, let's go ahead and store that into a variable. So we'll just call this one as react element. Feel free to call it whatever you like, there's just nothing more than naming. So now we have an element which we want to inject inside our DOM, or root, in this case, root. So I want to inject here. Okay, how can I do that? That's pretty easy. First and foremost, get me the reference of this root. That's easy. If you have studied your JavaScript, that's easy. All I have to do is say, document, hey document, I want to have a get element by ID will also work. We can have a query selector that will also work, whatever you like, it's your choice. So I'll just go ahead and say, give me a root. There we go. Now you might have noticed that if we go and check out the VIT especially, this is exactly what they are also doing. So in case you are looking forward for this one, if I go ahead and open up source, main.jsx, exactly like that, get element by ID, query selector, whatever that is, exactly same. Okay, since we have a reference of this, let's call this one as main container. There we go, feel free to name it, whatever you like. Now, once I had this reference, I am thinking that there should be a method just like React has its own method. If I have a custom render method, which takes two parameter that, where do you want to inject and what do you want to inject? That is it, that is it, I'm done with my job. So first thing is, I want to inject React element, where do you want to inject it? I want to inject it into container, main container, yeah, that's whatever name. Okay, so this is good. Now the whole magic lies that, how does the main container work? It's a function, that's for sure. So let's go ahead and create a function. Why to worry about that? And let's just call this one as main container and there we go, there we go. Magic function, that's it, tutorial done. No, not like that. Okay, main container takes a React element, let's call it as React element and whatever the container you want to inject. So in my case, it's main container, but we'll just differentiate it like this. Okay, step number one is create an element. So how do I create an element? It's pretty simple, document.create, no suggestions, create element, there we go, we have suggestion, create element. What element do you want to create? I want to create an element, which is an A tag, great. But I want to utilize the parameters which are passed to me. So I can use a React element parameter and I can say, hey, take the name of the parameter from react element.type. Okay, so that I can reuse this code and not only just with the A, I can actually inject H1 and H2 and whatnot, all these values. Let's store that into a variable. So let's just call this one as DOM element, whatever the name of the element, it's up to you. So we have a DOM element that can be injected, but right now it just created, it doesn't have anything inside it. So let's put something inside it. So this DOM element, we're gonna go ahead and set up inner HTML, inner HTML, that's always something which I mess up. And then we can use this React element and I can just go ahead and use the children. So inside the inner HTML, this children will be added and now we have an A tag and whose text is inside the inner HTML, or you can say inner text as well, that's changeable. And I have this access, but I have set no attributes inside it. So how do I set the attributes? That's also easy, I can just go ahead and say, hey, DOM element, I want to set an attribute, set at no suggestions, that's mean, at, oh, my bad, I'm writing wrong, at tree, still no suggestion, I don't like that. Okay, I'll say attribute, what attribute do you want to add? Now I want to add an attribute, which is going to be first href and where will I get the value of href? I'll get it from react element dot props dot href. So this is my first attribute that I'm setting. Now what is the next attribute you would love to set? I would love to set this target. So I'll just say, hey, now let's set the target and the target you will be getting from target, that's it. Okay, once this is done, then I need to utilize this container because this is where I'm going to append the things. So I'm going to go ahead and say, hey, container, let's go ahead and say append child and in the append child, let's inject the DOM element, that is it. Now, so far we haven't utilized anything react or reactors like that, we have just gone through with the basic JavaScript to jog your memory of JavaScript in the early days of react. Okay, this looks good and we were able to do all of this, but this code is not optimized, we can actually optimize it. So I'm going to go ahead and put some comments onto this one so that this is there for you. And by the way, I've been doing this for a really, really long time in lots of bootcamps. Okay, there we go, we keep this. Now let's try to do this again. It will be a good revision for you. A lot of people are not going to like it, but this revision is necessary. So let's do it one more time. This time we'll write a little bit faster. So we'll just go ahead and say document.createElement and we know what's going to happen inside this one. We'll take the reactElement.types, types or type. And we're going to hold that into a variable. Let's call this one again as DOM element. And there we go. Now we know that this part of the code is absolutely okay and DOM element will also get the inner HTML. So we'll just say inner HTML. And we have the inner HTML, which is going to come to me via reactElement.children. So far, exactly same code, no big deal. But what I want to do now is I want to loop through this prop so that no matter how many elements are coming in, I can just set them up. So let's just utilize a loop here to write a better code. And we're going to use a for in loop. That makes sense. And we're going to say for prop in, and again, we have to go inside this props to loop through. And I can just go ahead and say, hey, reactElement.props. There is an S there. So all of this element needs to go through with that. I'll just remove this if part. This is our classic basic code. Now, let's just say, first of all, this is also something which happens in the React as well. By the way, you can just go ahead and set these elements. So we can just go ahead and do something like this. Access this DOM element, and just keep on looping through and set the attribute. Attribute, and that attribute, the key of the attribute is obviously this thing, which is actually looping through in the prop. So I can just go ahead and say prop. And what should be the value? The value is going to be reactElement. And we also know that objects can also be accessed other ways than just the dot notation. There is a square bracket. In this case, that square bracket makes sense. So inside this, go into the props. Now we are inside this. What property do you want to access? Whatever there is in the prop, this same. So I'll just use a square bracket, and I'll say prop. That is it. Now, this is how, obviously it will work, but there are also cases that somebody might inject accidentally a children here, just like this, and might add a children here as well. If there is a children here, we are expecting that the children will come outside. Now, remember this, I am setting the rules. I am react, okay? But still, I want to avoid that case. So just taking care of the corner case, I can just go ahead and say, hey, if the prop is equals to a literal string of children, and if that is the case, I just want to return. So I'll just sneak it out. I'll just say continue. I cannot return here, otherwise this will close the entire thing. I just want to skip that one iteration. Again, if this is something too much for you, just go ahead and skip that. Now, I have improved the code, and I can just go ahead and say, hey, take the container and append, nope, no suggestions, hate that, append child. And in the append child, I can just use the DOM element. So it's a better approach, definitely 100% a lot better approach. But can we say that this was far better, and this is how exactly the React works? Absolutely 100%, this is how things works. Let's go ahead and open this up into a live server so that we can actually see that in action, okay? We got some of the stuff wrong, so let's just go ahead and fix that, okay? Object, and we have back limiting, okay? So some things are not loading up properly. Let me go ahead and quickly check that. All right, so after stirring the code a little bit, stirring the warnings a little bit, I found the bug, and it was pretty easy, and not really that big of a deal. So what we see here is that inside this, I accidentally named it as main container, shouldn't have done that. This should be named as custom render, probably bad suggestion there, you might have already noticed that. So once we do this, save this, and when we go back onto the code part, we see that click me, visit Google, although very, very painful for your eyes. But it's good, it's good. It's actually working, and I can just go ahead and fix it so that you can at least see that properly. So inside the body, I can just go ahead and add a style, and can say background color is going to be probably ash, and we're gonna go 414141, better. All right, so although the link and the text and everything is a little less visible, but we can see it is there, it is there. It is now much visible for you. I can zoom this for you, and we can see it is visible for me. There are a couple of things that we need to discuss now that how these all things are going on. It's not really that bad of a deal. So we have concluded so far that yes, we are perfectly capable of designing our own React, and this is what React actually does on the surface level. Where React shines is there are definitely the capability of creating things inside inside it. Like for example, there is right now just an A tag, but what about when there is a div tag, then there is a span tag, then there's a A tag. We obviously need to loop through values, and smartly design our components. So we can do that, no problem. Surely take some time, but with enough of the time, it can be done. Also React uses some of the algorithms behind the scene that makes this entire process easier. So now can we relate this, our custom design thing with the React itself so that it makes sense or start to make sense a little bit? Yes, turns out yes, we can actually go ahead and try that. So now let me go back onto the code part. This is the code that we have written. Now technically, if this is whole the theory, which is correct, I can actually bring whole of this into the VIT and should be able to run this. And that is where the challenge begins. So I'll just go into the source main.jsx, and I'll just say, hey, I have this React element and I just want to run this React element. Can you do this for me? I think yes, you can, because what we noticed, if I just close it and jog your memory again, in the app.jsx, this is just a function. That is it, you are exporting a function. If I come back and for a minute, if I just forget about my React element, I can just go ahead and declare my own function. And I just can call this one as my app. And that's my app. And literally, whatever exactly we are doing in the app, we can do here, we are just returning this. So let's just return this. So I can just go ahead and say, hey, I want to return. What do you want to return? A simple div which says custom app, maybe like this. So I'll just say, hey, this is my div. Not like that, didn't intention. So one more time, a div, yep, just like that. And we will have an h1. And this h1 will say custom React app. So we should be able to run this technically. And we will be, I can just go ahead and remove instead of the app. I can just go ahead and say, my app, just like this. And even I can do all the fancy stuff, since this is a function, I can do this literally. And let's try to run this. And I'll open this up. And let's just clean this up. And I'll go inside a 01 basic. And probably we are already in the basic React. So I'll kill the terminal, start it again. CD01 basic VIT. And the way to run it is npm run dev. We have already seen that. And are we not able to run it? Let's just do an ls, package.json. Probably we are missing, let me just check. Oh, I probably deleted the node modules folder. npm install, shouldn't take much time. npm run dev. And now, yep, we are able to see that. So now we can see custom React app. This is exactly what we intended to do. But this is not a correct way. This is not a recommended way in the React, although there is nothing which is stopping you to do so. But it might hinder some of the optimization. So rather better way is to load it as a component. Custom design element, HTML element, that would be a better name. So I just go back and say, hey, still it works. Custom React app, so hey, that is exactly. Now, if this is the exact process that is happening of looping through the elements, can we reach to the point where I can just loop through this element? Let's just try this. So how can I, if I can render this whole thing with a function, I should be able to render things if I directly pass it on as an element. So what about if I go ahead and say, hey, I want to give you a const, which is going to be named as another element, whatever you want to name it. And this another element is directly not a function. It just doesn't return, but it directly gives you an A tag, which actually goes to google.com and has a target of underscore blank. Underscore blank. And we can just go ahead and say, visit Google. Visit Google. This should also work because this is exactly what is happening. This is what is getting returned. If I can get it as a return, can I render my element directly like that? You can actually, if I can just go ahead and remove this, I can just say another element directly, and this should technically work in theory. So if I go ahead and move this, this is not working. I'll tell you the reason. If I go ahead and inspect and say console, it says, hey, warning, another element is using incorrect casing. That is the only problem with the Vtis because it wants me to actually make it capital. And this one also has capital and this is all happy. This is all happy. If I go ahead and redirect it, reload it. Now notice here, it says in the console that, hey, react.jsx is invalid expecting a string. You are expecting a string, but let's try the same thing because this is actually a warning or some of the issues that are given to me in the VIT itself. Can I go ahead and just change it like this? Yes, you can. And by the way, I'll just go ahead and show you how the things are actually being done in this exact way. Now the most important thing is that if this is an element, which is already generating an element, do I actually use this it like this? Or do I use it like this syntax? I know this is weird. Or this syntax, but this is not a function. This is just something. I don't know what this is even. I have never seen anybody returning like that. But one thing I can surely say that this whole thing is going to be looped through, just like here we have looped through. So I don't need to do any of this. And can I just go ahead and pass it like a variable? Will it accept it like this? If I go ahead and save it and go back onto my browser, oh, we can see that it accepted it like this. Oh, that's interesting. Never seen React like this. So if I go back, I have concluded a few things that, okay, it's totally possible to just declare a function and return an HTML from it, that is your JSX technically. And I can also go ahead and do some things like that, which is very, very weird, but it technically works. Now, if technically this whole thing works, can I just render React element like this? And you might be very, very curious to see it like working like this, but you go to the web and it doesn't. If I go back onto the Chrome and I go ahead and reload and you say that, hey, it doesn't work. Now, again, you are excited that probably this needs to work somehow. So I can use a syntax like this or maybe another Angular bracket syntax. No, it doesn't work sadly like that. And you might want me to answer this, why it doesn't work? The reason for that is, React doesn't know what is this type. React doesn't know these are props. React doesn't know these are children. This is something that is, I designed it, my custom React, I made it up. So whenever you made it up, how can I react actually understand your language? So there is no way react actually understands your language. If you want to create an element like this, you have to understand the React language and have to give it a React language. So what is this React element? So I'll just go ahead and say const and actual React element, or I can just say a React element. The reason for saying this is because we already have this React element as variable. So I'll just call this one as React element. In order to properly actually convert this thing, this whole a thing or whatever the div thing is, you have to actually convert this whole thing using the React language. And how do you understand the React language? By importing React, that is it. And use a method that says create element. This is exactly how it does, just like we created our render element. This is how react actually create element. So whatever you return back, this whole JSX actually goes through the React element, and then it is converted into an object. And how does it look like? We saw that we gave this type and everything. No, React don't use it. React actually directly gave it as a tag. This is how literally you convert that. After that, you go ahead and inject an object. This object, second thing is always and always an object. The order here is also important. And then it actually loop through and say that all the attributes that you want to go through, you go ahead and inject those attributes. For example, google.com. I should have used my own website, but anyways. Target, and we use the target in the strings, of course, underscore blank. That's the second thing. And finally, the last thing that comes up is whatever needs to inject as a children. And that is where you actually says, click to visit Google. And that is why I named them specifically as childrens and props and everything. This is exactly what happens. The first thing is your element. The second thing is all the attributes. And the third thing is all the children that you actually inject. This is how literally React actually break it down. Once you have this one as a React element, let's go ahead and place it up here. That, hey, I now have a React element. Let's go back. And we can see that now there is no problem in saying that, hey, this is not uppercase, lowercase, because we are not using those elements now. Nothing is getting extracted from another element. Another element, this is literal HTML. This is what the React expects while rendering, because it is the object version of it. Quite a lot of stuff, which is fun stuff. Now, another thing which you might have seen is actually fun stuff. So let me just go ahead and say, let's roll back to app.js. So we already have this one. So we'll just inject this. And I'll say, hey, let's render app with a selfclosing tag. And there we go. We have number of times VTAB. You might have noticed that what happens into this one is sometimes you go ahead and inject those variables. That is also super, super important. The way how we render the variables is not really too different from how we render anything in the JavaScript. You want to render an element, this is how you go ahead, do that. Now, here I can just go ahead and say two plus two, go back, and it gives me four. So it is actually converting everything, whatever I have as like this. Now, not only this, I can declare my own variables. If I go back onto the code part, I can go up here and say, hey, I want to have a username. And that username is literally my name. I can instead of two plus two, or in another variable, I can just go ahead and say that, hey, now I have this username. So this is, oh, by the way, wrong place. This is where it should be going up. So inside the function, why is it bothering me? Okay, too many bothers. No corresponding closing tag, you have a closing tag. Okay, probably some place I messed it up, const username, closing it, return, just like that. Okay, I'll hit command Z couple of times. Oh, my bad, we actually messed it up here. And this should be all happy now. Now we can place it back. So this is how we get our username, whatever the variable is, funny. And I go back and see I have this variable. So how does that actually works? And a lot of people wonder that, why cannot I just go ahead and use something like this if username equal, equal, maybe one more equal. And I go ahead and say Hitesh, then can I use my other stuff like Trinity operators here, just like that, there is a string. And you can see it, it's not working out. And it says, no, this one says yes. So why does this doesn't work and this works? Because the reason behind that is whatever you write, React actually goes inside each of your element, each of your element, HTML element, and extract these curly braces out of it. And whatever it extracts these curly braces, it actually puts one more object property here. And whatever you place it there, it actually literally moves it there. So for example, when you go ahead and say two plus two, that two plus two goes here. And since this is evaluated as JavaScript, that two plus two gets converted into actual value, which is four. But if you go ahead and write it like this, if, let's just bring it so that we can see that why it doesn't make sense. I copy this and instead of two plus two, if I go ahead and use this, this cannot be evaluated. So the only thing which I recommend everybody to understand is whatever the expression you write is, this is evaluated expression. It could be, it should be evaluated to something. So this something here is two plus two four, so that can be evaluated. And that is literally being taken and is being placed so that JavaScript engine can just take it as it is. When JavaScript takes it, this is expression which needs to be evaluated. This is not already evaluated. And this is, I know this is too much, but this is literally how it plays it as another property. And that's why you are able to see your username here. So it just refers to that as a variable. I'm just good in referencing the variable or doing some JavaScriptish calculation, not your whole logic should be written here because it doesn't make sense. Properties should not have logics like this. This is literally just a property, list of properties. And that is one thing you need to understand. So this whole thing doesn't work. So you should not be doing it like that. If you go ahead and place it as empty, that is also okay. Sometimes you will see there are empty lines and stuff. Like for example, if you want some spacing or something between them, or maybe at some places, you'll see people literally just use it like this and then put an empty string here, just like that with the spaces. Because this is literally being taken up here and this space actually is taken like this. So yes, this is valid and you'll see a lot of bugs and things being reduced. If you understand this part of JSX, that is it. You understand a lot of React. This is a lot, I know, and I can totally understand and relate to you. But this portion of the code is really important for you to understand that how the JSX is actually evaluated, how React sees the thing, and never, never fascinate React as something which is magical. We already tried to building something. Of course, we didn't spend that much amount of time with the algorithms and chaining of these elements. But hey, we did a fantastic job in actually doing a lot of stuff. So this is where actually your foundation begins of the React, that hey, now I understand JavaScript, now I understand JSX, now I understand React. It's nothing more than that. All these H1, H2 tags are converted into object, react.createElement helps me to do that. And later on, I'll walk you through with even the source code of the React on the Facebook GitHub page. Yes, we'll do that as well later on. But I think this video gave you a lot of insight of how the custom React is being designed. And I know whenever I teach this, even in the early days of the React, in any offline online bootcamp, people just go, oh man, this is too much, but we loved it. So if you have enjoyed this, please do support me. Hit that target in the comment section. I would be super, super happy to have this kind of support from you. And again, videos will be coming soon, as constantly as they have been coming for years and years now. Let's go ahead and catch up in another video. Hey there, everyone. Hathaish here, and welcome back to another video in the series of React.js. So we are taking our time absorbing the React as much as possible. And now let's start the fundamental foundation of React itself. One of the core foundation of the React is state. Not the state management, that's a separate topic, we'll cover that, but the state. What do you mean by state? And to be honest, you don't need state in the React. So state is the way we first need to understand that where does the state comes into the picture? Should I learn it? Should I, or can I skip that? And right now I would say, yes, you can skip that. But as you will see the need, automatically you'll understand that, oh, this is why I should learn the state in the React. So let's go ahead and try to build a project, very basic project, and let's do the stuff with that. And I think handson practice is always the good idea. By the way, if you're watching it on my YouTube channel, I am expecting just a hundred comments under the comment section itself, just to provide support and to set a target for you. If you complete that, that's awesome. If not, hey, I need some support. I need some encouragement from your side as well. It's really difficult to just talk to camera and sit here all day in the room itself. So I deserve that, hopefully. If I, okay, let's go ahead and start with that. So first of all, we are on to VS Code, just like always. And I'll just start, I'll just actually close this one. I'll start another terminal and we'll be creating a fresh new project. By the way, all the projects are available on my GitHub repository. You can just search for React English, somewhat repository, it will be in the description. So it will be available there. So let's go ahead and try to have this one at latest. And this is just how you create the VTAP. And by the way, we have discussed quite a lot. VTAP, React app, doesn't really matter, whatever like suits you, you like that, you just go ahead and get started with that. I'll name this one as, this is second project. So I'll just call this one as zero to counter to keep a track of how many projects we are building in this one, whether small or big, that doesn't really matter. So I'll just go ahead, work with React. I want to go with JavaScript. I know a lot of you want to go into TypeScript, especially after seeing my entire playlist on this channel or free code cam, wherever you have seen that, entire playlist on TypeScript. I want to keep this entire React series much more accessible to everyone. I don't want too much of the prerequisite because already there is too much prerequisite of JavaScript in the React series. So I would just say that, hey, we are not using TypeScript, at least in the initial level. I will keep couple of videos at the very last of the series to just give you an idea of how you can use TypeScript with React, but for majority of the part, my goal is to make you familiarize with the concept and foundation of React and not to just bog you down with the TypeScript. That's the idea. So let's go ahead into zero two and I can just go ahead and say npm install. That is all what we need. And then we'll simply fire npm run dev to start this. If my internet is decently fast, I hope so. There is not too much of dependencies. That's a good thing. Something, something has happened to my internet. It's usually not this slow. Anyways, let's go ahead and say npm run dev. And by the way, we have already seen that how we can actually see that which command runs all of that via the package.json. This is how it looks like, which is good, which is good. Going back into zero two counter and we'll see inside the source that we have app.jsx. This is the file where we are interested in mostly. And we'll try to build something of our own into this entire application. So let's just remove everything. We'll just keep the bare minimum basic. And let's see that can we build something of our own? So let's just go ahead and have a simple H1. It says React course with Hitesh and that's it. And probably there is another H1 here or probably H2 and I'll say a counter value and then nothing. This is exactly what we want to do. And then I'll probably have a button and that button does nothing. It just says add value. And there is another button which just says remove value. And for some reason, I don't know, I want to inject some values in these buttons as well. And there is one more. I'll just go ahead and say, hey, there is a paragraph which says footer, which will also get some value. Can we first go ahead and just remove everything from this file just like we did in the last one that hey, I'm not interested in any one of that. I just want to see how my app looks like. So there we go. Right now we can add some more values to it or probably we can inject some of the spacing as well. By the way, here's a fun thing. I can just go ahead and add like this and notice here, it adds a space. If you know how the JSX are being converted, this shouldn't really bother you. But right now there are buttons. They do nothing, footer, nothing. And what I want to do is I want to have a variable and that variable should be shown all the places. No big deal. I can come here and I can declare a variable. Let's just say we will have a counter. Since this will change, I'll start with the value 15, 20, whatever you like. This is my counter. And I know already that I can just use these curly braces to have my counter. This is known as variable injection. No fancy thing. And I also want to inject it here. So I'll just go ahead and say counter. And I'll also come here in footer and I'll inject it here and I'll say counter. So this is a common thing, which I shared you in the story of React, how it actually got up. So I can see it's 15, it's 15, it's 15 everywhere. So first of all, notice and even appreciate that you don't have to say document.getElement by ID and then inject that, append that, add value, append HTML, nothing, nothing like that. I can just use literally variable. So I'm more focused on the programming side of it than just attaching things to the node list in my document. So that's one advantage here. Now, next thing is I want to have a method that when I click on the button, it adds the value. Cool, you can have that. Pretty simple, there is nothing Reactish in that. It's just simple JavaScript. So I can just go ahead and say, hey, I'll use an onClick. This onClick will say add a value. Since this is a method, this needs to be declared. So we can just go ahead, use classic function or arrow function, totally up to you, not going to crash your app. So I'll just say add value and add value will be an arrow function in my case. And what it does, it takes the counter and it adds the value to it. So I'll just go ahead and say plus one and that is all. Now on top of this, let's go ahead and try to do a console log of the counter whenever I add a value. I'll just go ahead and say, let's console log here itself. I'll say console log and I want to have the value of counter. That is it. So I'll save this, go back and I'll open up my inspect and console so that I can see what's happening there. So the value is 15 and I simply click on add value and it says 15. I again click on this and it says two time it's 15. Very interesting. So if I go back, I see that the counter plus one doesn't increase it. Why? Because I didn't save it anywhere. So it should be something like this. Counter is equals to counter plus one. So I'm updating the value of counter by adding one to the existing value. That's good. Let's go ahead and just facilitate it again. Refresh and remove everything. And I say add value. I get 16, add value 17, add value 18. Okay. So I'm able to do almost everything in so far, whatever is required in the JavaScript as well. I have my variable. I can add value to it. I can similarly remove the values, whatever everything that JavaScript is telling me, I can do that. Except from this, what's coming up next. Now the next target in front of us is that, hey, you have this, great, good. We appreciate that. But now we want this new value to be updated here as well. Now this brings something to your mind that, hey, how does this work? Because technically if we are updating this variable, this should be updated here as well. And here as well, and here as well. Why is it not working? Because I'm pretty sure on 100% that the value is getting updated. I'm seeing this and I can add the value 19, but this is not getting updated here. And this is my friends, where it comes to the React. React, this is exactly where React comes into the picture. React is a library which actually takes the control from you and gives you that, hey, this is now the mechanism of how you're going to update your UI. Remember that is why we call React as a UI library, majorly, because it controls how you're going to take care of the UI itself, not your JavaScript, not how you're going to take the data from the database, but how you're going to display the things on the website and how things are going to be getting updated. And this is exactly where React actually tells you that you know what, you cannot go ahead and just update things like that. I will provide you a mechanism. You're going to follow that mechanism. And by which you are going to update everything and anything that you want. And exactly we have to follow the things. React came up with the concept known as a state. And state is a unique thing in the React, which actually simply just is getting constantly monitored and any change in the state rerenders the UI on the web. And this is what the state is being designed for. Any change in the state will rerender the webpage. That's it, told you, it's really, really simple. So we cannot just go ahead and say, hey, let counter equals to 15. There is a way how you do it in the React. And once you understand this way once, and that's it, you will be able to do it every single time. We can already see that in the VIT, there is already an import statement of use a stat, use a state from the React. And this is exactly the state that comes up. Now, let's just go ahead and say const and we want to use this state. So the way how you say it is simply say, use state and the parenthesis. I'll tell you later on, these are known as hooks and how you can design your own custom hooks as well. Yes, we'll be designing a full fledged. But the whole idea is, this is a method. What does this method returns to you? And it's pretty simple to extract value from it. It returns you something in the format of array. The first thing is actually the variable, whatever you want to call it, it's up to you. And the second is a method. And there is no hard and fast rule that you always should call it as counter, then set counter number, then set number. It just is a convention. Feel free to call it as Superman, and this one has Spiderman. Nobody is going to stop you and your code is not going to go bonkers. Really basic. Now, just introducing this and saying it as counter, by the way, I could have called this one as count or I could have called this one as Hitesh. It would have still worked. Again, different Hitesh and set counter. They are also linked. Always remember the one thing, that the first value that you see here, it's actually a variable. And the second value that you see here is a function. Yes, you can call it method as well. I won't harm you for that. I won't be failing you in the interviews as well, but hey, remember this is a variable. This is a method. Okay, moving further. Just because the name is counter, I cannot just go ahead and say counter equals plus one. This is not going to work still. I can save this, show you that, hey, this is all good, refresh it, and all refresh, good. And I can just say add value. And now even this thing is gone. So what happened? What just happened? How can this value actually go away? Let's look at the code, see the error. So it says, hey, const variable and stuff. So what is happening? What is happening? Simply because this is a const, you might be thinking, hey, this is a constant. That's why it's not able to add the value. Okay, let's just go ahead and try this. If that works, let, and there we go. If I go back again and hit a refresh, I still don't see the numbers. It says, hey, that const error is gone. Now even we don't have any error. So the problem is not with the let or const. You can still keep it const, because every time you update the value, a new state is given to you. Okay, how do I update this whole thing? So this whole thing, updation is pretty simple. All you do in this one is just whatever you want to update, you update it via the method. So once you have the method, for example, I remove everything from here in the add value, you call this method set counter. The set counter method is responsible for updating its nearby, or I know nearby is not a good word, but in the array, there is only one nearby, which is a counter. So it's brother, the brother is a good word, it's brother here. And how do you do that? You just pass the updated value. So in this case, I can just go ahead and say, hey, I want to say counter, and I want to add one to it. Okay, you just do that. Now what happens when I do this? If I go back and hit a refresh, then notice here it says, react to the counter value is gone, nothing, nothing. If I go ahead and say add value, it says none. Why is that? Because there is one more portion of the thing which you need to learn. Notice here, the user state right now has these parentheses. These parentheses define what should be the initial value because it's available. You are defining a variable, something needs to go into it. So obviously when there is nothing, so it's undefined and undefined, you add one to it, you don't get the desired result. So you can start it with a zero, or in this case, we started our variable with 15, it's up to you, whatever you want to start, I'll start with 15. And now I see the 15 again here. Now again, by the way, in case just for the info, it doesn't need to be variable like numbers here. You can just go ahead and start with true. You can start with an empty array, a filled array, an object. You can even put methods into it, which is not a good idea, but you can, nobody's stopping you from that. I'll start with 15. Okay, now things are looking like a little bit better. I can see React course with a page 15, 15, 15 everywhere. And if I even add value to it, it gets updated here. So goal achieved. So we have learned here that there is a way, there is a mechanism, there is a flow of data that React is controlling. And what we can appreciate here is I can just click on one button and it updates the value all at all the three places, I don't have to worry at all. So that is what your state is. There is only a single source of truth. There is a single state and everybody is consulting and is looking forward to this state only. That's why everybody gets updated and hence React solved the problem of the ghost messages in the Facebook. That is it, this is the whole gist of it. But this actually, although the next portion of this section, I usually, first let's cover up. Let's cover up the decrease value part as well because there's a button here as well. So it would be fun to actually go ahead and work on with it. So I'll just say click and I'll say, hey, there will be a new method which will be remove a value and that needs to be a method as well. And by the way, you can use the classic functions as well. And this will be remove value, which will be in our case an arrow functions. So there we go. And we can use the same state. So same method because I cannot just go ahead and say counter plus one or minus one. This method will be responsible for having this. By the way, you can also do something like this. Hey, counter is going to be equal to counter minus one, oops, counter minus one inconsistency. And then I can go ahead and pass up the updated value of counter. You can name this one as a new counter as well and you can pass on that as well. No big deal, just style of writing the code. And we can just go ahead and say counter minus one. The reason for writing this is because there's something interesting I want to show you. I go back and I say remove value. It removes the value at all places, it adds the value. So there's this great. Now this next portion of the video, I usually go ahead and take this as kind of exercise for interviews and stuff, but I'll just throw it away. Okay, I go ahead and duplicate this line a couple of times. What do you think is the expected output here? This is a classic interview react question, which says, hey, now since it is getting started on 15, I'm running the function add value. So it should be after 15, it should be 16, 17, 18 and 19. But when you actually go ahead and see add value, it just adds 16 and 17 and 18. This is something which has to do with the concept of batching. React doesn't actually send the things immediately when you actually perform any action or state. It actually bundles everything together. We'll go through into the algorithm behind this, known as reconciliation, how that's being done. But these are fancy words, we'll throw them around a little bit later. So what React is doing, it's actually taking all this batch and it's saying that, hey, there's only one method you're firing up and it has just one operation to be done as counter, which is increasing. So this batching actually gives you a problem. If you want to avoid the batching that, hey, this is not the exactly same value I'm taking and I'm updating one because this is right now just the same value I'm taking it. There is a way how you can actually avoid that or actually maybe this is the situation you want to do that. I want to click it. I want to update just four to it, but instead of adding four to it, I want to do it iterationally. And there will be situations, not exactly like this, but there will be situation. In that case, what you can do is there is a callback given to you in this method. So since this is a method, this actually accepts a callback and this is how your callback looks like. And in this, you automatically get the access of the previous counter. So I'll just for the understanding purpose, I'll call this one as previous counter. And now either you can return it or if it's just one liner, you can just go ahead and say, hey, now my pref counter will add a value of one to it. Yeah, this is now a game changer because now since you're using a callback, that means there is a guarantee the callback needs to finish, your state will be returning the values and whatever you call it here, pref counter, counter doesn't really matter. It's just a callback. Here, you just get the access of the updated state value. That is it. So I can literally go ahead and copy this and I can just have a multiple cursors here. I can just go back here and paste it. Now you have just changed how things will be. Now these cannot be batched because they are dependent on the previous values. They have to extract the previous value. Now, if I go ahead and add the value, notice here now they are jumping up in the ratio, in the update steps of four. So this is really sometimes is given to you, sometimes in today's day, just create a counter for me. You do that quickly and he does something like this or something tricky, sneaky like that. And if you don't know the foundation of the React, you obviously will get into the trouble, but not after watching my video for sure. So go ahead and try to get the similar situation and scenario in this one. And I am pretty sure that now at this point of time, you truly, truly understand that why we have state, what advantage state gives us, and is there any real world use case for the state or not? Are we just learning it for the sake of fanciness? No, it's not. We are actually learning it because it's important for us. So now that you understand state, told you it's not really difficult when you're with me, React is just a breeze. Let's go ahead and move on to the next video where I'll walk you through with another project, another fun, another concept. So again, just go ahead, if you're watching it on my channel itself, go ahead and share this video and the comments. One just hurt or like motivates me a lot. So let's catch up in the next video. This is a theoretical video. And I know a lot of people don't like theoretical videos, but this is an essential part of understanding the React and to explore things on your own. So I am pretty sure those who really appreciate the under the hood working of the things and they want to really go in the engineering side of the thing, they will appreciate it. Those who just want to learn superficially, they will not appreciate. So the target for this video is just 200 comments. I'm pretty sure you will help me in achieving a confidence as well as engagement that yes, we are actually watching the videos. You are not just literally talking to camera in a old room. We are actually with you learning together. So if you have any issues, by the way, just look at a poster in the comment section. I'm pretty active there. All right, so in this video, I'll walk you through with a few concepts of virtual DOM, reconciliation, a bunch of fiber and all those stuffs. Before that, let me set the stage for you. So the idea behind the React is pretty simple that once you actually are in the JavaScript, you always have to go get element by ID and whatnot. And whenever there is any change, what your browser does, it actually re renders the entire page. So your painting of the page is entirely being repainted. Your DOM, CSSOM, everything is reconstructed. This is a painful process, especially for the large scale application. What React does behind the scene, it actually creates its own virtual mimic of the DOM. So however the DOM looks like, it actually tries to mimic it, all those nodes, everything. And whenever there's a slight change in the node, it actually then tries to compare with the original DOM. And only the thing which needs an update, it just gives an update of that. So it's really a great remarkable thing of how things are done in the React. But this mimicking of the virtual DOM, of the real DOM, this mimicking part is known as virtual DOM, but how good it is and how good it is right now, that can be understood by the latest version of the React. So a lot of things. Okay, by the way, before we get started, let me share the screen. So by the way, this is the Facebook GitHub repository, and this is where they have the React. So by the way, you can go into the Facebook. Of course, their pin repositories React, obviously what else it would be. You can go into the React, and then you can actually go into the packages and see everything which is there listed in the React. I'll just move it a little bit here, so that you can see it nicely. And I'll actually zoom this a tiny bit, so that you can see what's happening and where it is happening. So on the left hand side, you will see that there's so much that is given to you. Even your React DOM is here. And if you'll click on this, you'll be actually taken into the source. By the way, I'll just zoom out a little bit. Yeah, now it's better. So you can go into this one where we are. Here is the React DOM. And inside the source, I can check out that, let's just say I want to study the client side, how does the React behave. There is a DOM legacy, which we don't want to use. React root, how does it work? React DOM, how does it work? So you can just go ahead. Even if you don't understand much, you will get introduced to the new terminologies, like there is a container, there is something known as hydrate root options, there is a create root options. And maybe eventually, as you'll go through, you will understand a lot of this code. And this is how people contribute in the open source as well, which I am very active in the community. So hydrate root and all these things, or at least you can ask your GPT like what these are, I want to understand them. Okay, moving on, let me just get this a little bit. Don't want to go like this. Okay, let's go back onto the source. Okay, I want it not to be like this. Okay, not like that. I wanted the entire full view. Yeah, there we go. A little difficult, so I'll probably move my entire thing here. So that's actually better and visible. It's really small. But videos are in 4K, by the way, you can change it. Okay, one more package I would like to introduce you a little bit, not too much, is React Core Packer. So this is the React Core. You can expand this and see there's a source, expand this, and this is where you can find a lot of things. How does the React work? How does the cache work? Children's and whatnots. And even there are some other things like hooks and stuff that you can find, like React hooks, we talk about that. And here, you can actually see that how does a hook work? So whenever it says something like useState, you'll find that, you'll find that. I'll show you. There is a useContext here. And there will be a useContext. And then there is a useEffect hook here. There is a useRef here. Use insertionEffect, probably you have never heard about it. Use layoutEffect, callback, useMemo, we'll use some of them. So as you can see, there is almost every hook. We'll be also using useID once in the entire series. So you got the idea that there is everything written here. Probably right now, we don't understand it, but it's a good idea to at least see that, OK, things exist there. I'm not the only one who's just mimicking here, things stuff. Also, you can go into the JSX. The things which we studied in the JSX actually comes from here, this part here. In the JSX element, if you go into this one, you'll see that everything which I talked about actually comes from here. So if you scroll a little bit, you'll find that here are all the things. So let me zoom this. So when I say the React element to you, this element actually takes these parameters of type, key, ref, and props, all of these things. So I was not making up things in the thin air, they actually do exist. All right. So this is the first portion of the theory that I wanted to introduce you a little bit with the core React itself. How does that looks like? So I'll just go on to the 100% back again. But there is one more thing. If you'll search for the React fiber on the Google, this is usually for me is the first one here, because I don't think so I have actually recommended in any bootcamp anything more than this. So this is a big shout out to a Cadlite. I don't know how to spell it, but he wrote it so well that I don't even want to fork it or something. And this is so long, it's seven years ago. I'm still using this. This was constantly updated obviously, but here's something. So this is the portion where we dive into the React architecture. How does it work? So it's a React fiber previously, not previously, but yeah, the React core algorithm got changed and this is the whole study we'll be doing. Some of the things it's really important that you pay attention on to this one. So I'll just go through with that. I'll zoom it even a tiny bit more. Yeah, tiny bit more. Now it's much more understandable. Let's go up here. So all it says is the React fiber is an ongoing implementation of React's core algorithm. Spoiler alert, it's not an ongoing. It was already introduced in a couple of version ago, but you saw it first time. Again, the goal of the React fiber is to increase the suitability for area like animation. So what's the problem with animation? Animation happens back to back and we saw it just there in the user state that it's not possible for us to do back to back updates. React uses something known as batching and once the batch is gone, it's gone. I cannot do anything in the core algorithm. But now we can see its headline feature is incremental rendering. So animations, smooth animations. The ability to split the rendering work into chunks and spread it over multiple frames. So it's not like previously React used to just do things instantaneously, but now they actually wait for algorithmish time. By the term algorithmish time, I mean. They actually decided for ourselves that I'm not gonna do update right now, I'll send the batch eventually to do multiple updates at the same time. So it gives us the ability to pause, abort, and reuse the work as new updates come in or not to just give that. So it's a concurrency primitive, so this is best here. Okay, this is the first part. This is the introduction of why the core algorithm got changed. Now, Fiverr introduces several novel concept. We will talk about them, some of them. I'll give you a brief overview of that. But again, this is again, big shout out to this one. So for this, you need to have a basic understanding of the React, which you have now, you have seen the videos. So it says React core components element instances. We have seen that already. Reconciliation, this is something really nice, but they cover it in this documentation itself. So I'll walk you through with that. React basic theory concept and React design principle. So I'll walk you through with that. So first of all, what is reconciliation? Being asked in the interview quite a lot. The algorithm React uses to diff one tree with another. And by the term diff one tree with another means original DOM, my virtual DOM, are they same? And if this DOM gets updated, is this DOM is following the principle. So that's your diffing algorithm known as diff one tree with another. So we are comparing two trees of the node list. To determine which part needs to be changed. Yeah, literally what I just said. So update, a change in the data used to render a React app. Usually the result of set state, eventually results are in the rerender. So as it says, if you want to rerender the app, usually it's the set state, which governs the thing. So that's why we use use state, because ultimately the method which actually does all of this is use state, we just saw that. The central idea of the React API is to think of the updates as they cause to app rerender. So whole picture is all about rerendering. So how can we get into from state of A to B, then B to C and C to A and so on. So how can we move into different transition of all of that? Okay, actually rerendering the entire app on each change only works for the most trivial apps in real world apps. It's, so again, we can actually skip this part because it's all it's saying is we don't want to rerender the entire app. We want the performance, we want to cost to be coming up and that whole this process is known as reconciliation. So it's kind of a rewalkthrough of the reconciliation. I have gone through with this one probably 20, 30 times. So I know every inch of it. So sorry if I'm jumping something some places around. Okay, so by the way, this whole thing is again reconciliation and different things. Reconciliation versus rendering. So again, this is an interesting paragraph. The DOM is just one of the rendering environment React can render to. The other major target being a native iOS and Android, I told you in the earlier as well that React is one implementation on the web is known as React DOM, but more things exist like React Native and React for 3D renderings or stuff like that. The reason it can support so many target because React is designed so that reconciliation and rerenderings are separate phases. So yeah, that is why. I hope now if anybody's asked you, I think you have great information here. Okay, moving on. Now what we have is we don't want to go into the React design principles and key points. Here is where we want to study more. What is fiber? We are about to discuss the heart of React fibers architecture. Fibers are much lower level abstraction than application development. Typically think about it. If you find yourself frustrated in your attempts to understand it, don't feel discouraged. So if this best article on the internet says discouraged, you don't need to fail that. I also understood it after going repetition and repetition after it. Keep trying it eventually makes sense. Yeah, same happened with me. Okay, here we go. So here are the key points. I'll just give you a brief summary of it and then that's it. We'll call it a day. Pause work and come back later to it. So one of the advantage of this is sometimes you are back to back firing the updates. So sometimes let's just say you updated A to B and same variable to C, there was no point of updating it to B because eventually it is supposed to become the C. So if you pause your work, come back here without updating it, probably we can save some of our time and updating it to B. We can directly update it to C. So that's what it says. Pause your work and come back to it later. So yeah, literally. Assign priorities to different type of work. So we can just say that, hey, maybe this animation is going on, but this button also needs an update, but this button might take few micro milliseconds later on as well, but this animation needs to be constantly rerendering. So that's why it says we can assign priorities to different works. Reuse the previously completed work. So we can actually take estates and stuff like that. Abort work if no longer needed. So again, example, if A gets converted to B and B finally gets converted to back into A within fractions of second, then there is no point of updating it to the user. User don't want to see that. User want to see the ultimate truth. So there is no point of showing him the state if you want to do so. So again, now it comes up as a structure of the fiber. Fiber always treat them like fiber, just like your muscles have fibers. Everything is attached to each other. That's like the fiber. Everything is getting controlled and stuff like that. It's almost like everything is in the fiberish term in the world of React. Okay, it further goes into the return statement, how it does and all of that. You don't want to go into that. Future section, you can just try that. But again, there is no need of it. If you want to watch, you can just watch this one 2016, pretty old. But again, this is whole thing which I wanted to share. I know this is a little bit probably boring part of the entire series, but these are some foundational algorithm which I wanted you to learn from the direct resources and repository of React. Not from me, not from anybody else. Just go dive into that. So at least you are not afraid of that one. Okay, a few things. We now know reconciliation. We now know a lot about the React virtual DOM. We also know a lot about the React fiber. And we also know a lot about the batching of the update and all these things. These will be foundational and very helpful when you'll be learning Next.js as well, on which I also have a course. Happened to be, I'm producing a lot of them. So I think now you have a core foundational understanding of it. And later on, we'll definitely talk more about these documentation, but I think that is enough. That is enough for you. In the next video, we'll jump into the code part and the course part itself, and you'll learn more on that. Okay, that's it for this video, and let's catch up in the next one. Hey there, folks. How are you doing? I'm pretty sure you're doing good. Hey there, everyone. My name is Hitesh, and let's go ahead and get started and continue with our React series. So we are done already with a couple of topics, and especially the response that you have given me on the videos like state, what is a state, how does we work it, and some topics that we discussed about like virtual DOM, reconciliation, fiber, pretty interesting topic. Little bit theoretical, but very important and interesting one. In this video, we'll take down another such topic, which I always begin with, why do you need it? You don't need it at the very first place until unless you understand the possible need of the subject, then only you should learn. So that's the props for us, and we'll go through and understand that. Apart from that, there is kind of industry trend these days to use something known as Tailwind CSS. This is not going to be a dedicated class about the Tailwind CSS, but still we need to learn to configure it with the React so that we can utilize it, and it's not really that heavy. It's quite understandable, and we will be doing that on the go as well. So without a further ado, let's go ahead and get started, and let's understand what is the need of the prop and why the props are there. By the way, we will also learn a little bit about components and building components in the React in this video. And let me just announce this first that components are no proprietary of the React itself. They used to exist in other programming languages like PHP long before when React came into the picture. So it's not something which is new to React or new to the industry. It's a very common thing. We used to divide the chunks of the web like headers and footers into separate file. A common practice being done in the PHP and other programming languages as well. Same, we are going to learn how we do that in the React. It will make your life a little bit easier as a web developer. Things are just at one place. You make a change at one place. It propagates to every single page. It's pretty easy. Life is easy with that. So let's go ahead and let me first share the screen and we'll go through with that. So this is our application. We have been working on this one. So we will be now creating our thirdish app, actually the third one itself. So we'll be just going through with the third. So let me just go ahead and open up the terminal and we'll be going with the same NPM. I know a lot of you want to go with the bun. We don't have bun as of now. I do have it on my system, but I won't be using them. So we'll be saying just simply create at the rate of wheat. Sorry, wheat at the rate latest. So this gives us a wheat project and we'll be naming our project as a zero three because it's a third prop project and we'll be calling it as tailwind and we also are going to be using props, tailwind props components. Yeah, I think that's a good name. We'll be using react for this. We'll be going with JavaScript. I know you want me to switch into TypeScript, but no, I want this videos, the entire series to be mass reachable, more and more people should be able to learn it without the hindrance of additional TypeScript. Yes, I do have a TypeScript series and playlist on my channel, but this time we are going just with a JavaScript probably at the end of the series, I'll introduce you briefly with the TypeScript as well. All right, so let's go into this one and it's zero three and let's go ahead and run NPM install. That's the basic of how you get started with this one. Okay, by the time we get started, the first thing that we are going to take down is how we can actually install and configure tailwind CSS. There is a process to it and we all need to learn that. So first of all, let's go ahead and work with tailwindcss.com. This is the official website and every single time I'll need to configure the tailwind CSS, I always go with the docs. You should also go with the docs. This is how we actually learn and install it. So in the docs, there is a section here in the installation. So there is a tailwind CSS, CLI, post CSS. We actually are going to be working with framework guides. Yes, you can say React is a library, but this is how it is being mentioned. We are working with the VIT. In case you are working with CRA, Create React app, there is a guidance for that and almost similar looking guidance. We'll be going with the VIT. We don't need to work with these first two steps because we are already done with that. We'll be going with the second step. So go ahead and copy this. These are the two commands that we need to work through. So let's just go ahead and clean this. Make sure you do an LS. The most important thing is you should be in the same folder where this package.json file is. So make sure you take care of that. I'm pretty sure you will. Go ahead and paste the commands. This command will install a couple of dev dependencies. The dash D is for development dependencies. They don't get shipped to the production itself. Most interestingly, it creates a file known as tailwindconfig.js. This is your tailwind configuration because tailwind is kind of a preprocessor, you can say, because whatever the tailwind you write, it actually generates that CSS on the go. Not everything is being shipped. Only the CSS that you need is generated. And for that generation, you need to actually define it that where should I find my content. So the next step is actually go ahead and define where my content is. So in the VIT, the content is actually index.html and you're some source folder. So everything, components, every file, app.js, everything will be inside the source. So this line actually is a regex, regular expression, to find all the files that's related to JavaScript or TypeScript, JSX or TSX. And also, we are also listing our index.html. So go ahead and copy this entire content thing. Go back up here and we want to replace it. Make sure you take care of the additional comma at the end. Usually, this is a common mistake which a lot of programmers in the initial days while learning the React, they do this. Things are not done yet. We also need to mention that, hey, in the index.css file, we'll be using this as directives. These directives are must to have without these things don't work. So go back inside the source. This is where my index.css file is there. Now, there are two options in front of you. You can just keep everything there and just paste it at the top, or you can remove everything and just keep it up here. But in case you have some additional CSS, which usually you will not have, you can go ahead and write them still. It is not going to bother you, but you still have all of this. So that's it. These are the two steps, three steps technically, this command, the tailwind config and this thing. And after that, it's all npm run dev. So that is all what we have. Now let's go ahead and try to run it first so that we can see are we good or not, npm run dev. And we just run it. Hopefully it looks good. And right now we have no idea is it working or not. So what we can do is let's go into app.jsx and minimize the things which we don't need. Let's just remove everything and go ahead and grab an h1, which says wheat with tailwind. Tailwind, there we go. In the h1, we'll be using a class name, which is a keyword. Since we are in the JavaScript world or JavaScript paradigm, we cannot use the word class itself. It's a reserved keyword for the JavaScript. So we use class name. Only handful of the thing in the HTML are changed. Like there is also an HTML4, HTML4, which is also changed. In the other input field especially, you'll find that. So if there is an input field, it's usually in the label actually. So in the label, you'll see the HTML4. So in the regular HTML, we just write it for, but again, for is a reserved keyword. So only a handful of places are there where you have these kinds of things, otherwise it's not. So let's just say we want to have it. So we can have the text dash three XL suggestions, three XL. By the way, these suggestions come from a plugin, which I have installed in my VS code, known as Tailwind IntelliSense. Yep. And we'll go with the BG green and we'll go with this one and we'll add a padding of three maybe just for fun. If I go back, all these things are here. That means, say, everything is looking good. By the way, there are some fun classes as well. Like I can go around at MD, it looks good. So this is our basic Tailwind configuration. So step one is done. Now we are almost a master of configuring the Tailwind in our application. That's the basic that we have. Next step, let's go ahead and understand the things about the props. Do we need a prop? Right now, we don't need any prop. Now, one thing to understand here is that this is a function. So if this is a function and this whole function is imported in the main.js, x main.jsx, can I write more such function? And in those function, can I return some JSX, which we have already studied quite a lot during our custom preparation of the React? Can I go ahead and do this kind of a thing? I don't know, let's try it. I'll create a new folder. You don't need to create a folder. I'm just organizing the things better. I'll just call this one as components. And inside the components, let's create a new file and call this one as a card. And of course, since this will be returning some JSX, I'll be calling it as obviously.jsx. Now there's a shortcut that you can use if you have installed the React or not React. There are some IntelliSense plugins available as well. So there is some, let me just show you. So there is some plugin known as React Snippets. Yeah, this is the one that I have. So you can actually go ahead and install this. This makes life a little bit easier. Once you have installed this one, what this will allow you to do is you can type things like rfce, which will give you a React functional component. You can go ahead and say react afce. For example, I can go ahead and say rafce, which gives me a React arrow function component. I can go ahead and say rfce, which gives me a React functional component. So whichever the one you like, you can go ahead and go with that. Now, what I'll do inside this, since I know there is a div here, I'll go ahead and say that, hey, what I want to know is, let's just say I'll import an image here, and I'll give you a source as well in a minute. I'll also give you an h1. In the h1, I'll just say this is going to have some class, text2xl, and we'll be having a bggreen. This one, padding of three maybe, rounded. Rounded, and this will say a card for photos. I don't know. And we'll also have some paragraph with a lorem of 10 words. I don't know, this is my card that we have. Let's give it an image source as well. I'll obviously pick from some of my images that I donated to Pexels. I think this one looks good. I'll just rightclick, copy image address, go back and just paste it up there. Now, I have this image, and this is looking good, but this is a function. There's nothing more to it. And again, don't ever overestimate React. It's just JavaScript. Always think it from the JavaScript perspective. Now we have this card. Can I import this card in app.jsx or main.jsx even? Yes, you can import it wherever you like. Let's go ahead and say that I want to import a card, and that card will come from ./component. So I'm going into one directory, and then I have this card. You don't need to write this like card.jsx. It's autoimported, so you can just avoid that. How can we use it? Just like we used app. So it's going to be simply like card. And a selfclosing one, just like that. That's it. Now let's see if it works. So we'll go up here, and we see that, OK, we have this. This is a pretty big card, but there is nothing which is stopping us. It's looking pretty nice, and we have this one. All right, so we have this card. Now let's go back onto the Tailwind and see if what they can offer us on the home page. So on the home page also, they are offering us some of this card. And let's go ahead and copy this entirety and see if we can actually somebody, what happens if somebody gives us the components like this. I'll just go ahead and replace my card with this card. And obviously, you can see there are a lot of places where things are going wrong and whatnot. So let's just figure out. So this is a common mistake or common error that you will also be facing. So let's not run away from them. Instead, let's deal with them. So first one, it says, hey, figure. So what is this problem? It says figure has no corresponding closing tag. Another JSX requirement that if something is getting started, it needs to close as well. So notice here, this is where the figure is ending. So what's the issue? You can see that at some of the places, this needs to close so that now it goes. Now you can see some of the errors are gone just with that. It's not always about, hey, figure was missing or something like that. But we can see things are going not that great in this case. So for example, we have some of the errors here as well. Why these errors are here? It should be all supported like this. Yes, the reason for them is let me go ahead and hit CommandZ a couple of times. We were supposed to enter this all here. But if I go ahead and copy this, you can see it's not properly being written or it's not properly being organized. So I need to actually grab it properly, light click, and copy this. But again, you will face some of the issues with this because things are not great. Things are not great at this moment. So let's just paste this. And probably this time they have come back in a better situation. But the issue is I have this a lot of errors. So I'll first indent this because this is bothering me a little bit. So OK. Now these things, these curly braces and these closing brackets, they are good. But the problem is that first of all, our image is having no ending tag. When the image is not having any ending tag, you can actually provide a selfclosing tag. That will remove at least one of the error. Now let's see what's the other error. The other error is we have these quotes inside it, which is obviously giving us these commas and errors. IntelliSense is helping me to figure this out. And I'll have a lot of 10 words, maybe something like this. This will work better. And now we can see some of the errors are gone. OK, some of the errors are gone. But I'm pretty sure the image is not going to work. Why so? Because the source. The source of the image, I don't have it. Easiest way is to fix it. Just stay calm and fix the stuff. That's how the programming works. Let's say copy image address, go back, and we'll just replace this whole image with this. OK. Now that our designer has given us a better card by designing that, this is looking good. And since it's a tailwind, it should be optimized as well. Decently optimized, not the best. But OK. Now I understand that, yes, this is a common thing, which I can say that, hey, eventually I can keep all of my components separate like this. For example, header could be its own file. Navigation menu could be in its own file. Footer could be in its own file and can be rendered on every single page. And if I have to make any change, I can go ahead and make a change in one place, and that's it. It will serve at every single page. Now this is exactly known as component building. And there is a word for it. We call it as dumb component. Yeah, very rude. But we call it as dumb component. The reason being, this component doesn't take any parameter. It's not modifiable. It just works like this. So how can we make it a little bit more intelligent of a component? Now a couple of ways how you can do it. The first way is that, hey, I want to pass on some text. For example, in our card, as we can see, this is the name of a person and then the post, maybe software engineer, staff engineer. So these things, probably I want to assign that, hey, maybe multiple cards should be there. And I want to pass on this argument. Right now, there is nothing which is stopping me to actually display this card because I've imported that. I can display two times, three times, however I like. But the information is exactly same. So the first step actually is, whenever you may want to make a card to accept any parameter, is go up here and accept it. The way how we accept it, actually, with every single of these component, there is a React magic that goes on onto it, which is known as props. Now what does prop is doing right now? If I go ahead and hit a reload, there's nothing inside it. It even broke my application. So if I go ahead and check out the console, it says props is not defined. So if the prop is not defined, how the things are going to go ahead and work? Notice here, props is not defined everywhere. And you are saying that React actually gives me a prop like this? Yes, React actually gives you a prop like this. But why? I cannot even access this. You cannot access this because, first, you have to actually accept that there is a props. Once I go ahead and save it back, you can see at least our application is loading, if I go ahead and hit a reload. But I can see all empty. Yes, it should be empty. And by the way, there is a class error. Let me just fix that. The class should be. Let me just go ahead and do CommandD to find all the instances of this so that I can actually rename this. So this would be class name. Now it should be all happy. Yeah, hopefully. Let's hit a reload. There we go. At least that error is gone. So we can see that now there is nothing inside this. There is this square bracket, square bracket, prop prototype, which is, again, a hidden scope. We won't talk about this. This is not a JavaScript class. But I can see at least that, OK, so far we are correct that, at least in the card, there is something which is known as props. And I can console log this. OK, so far, good. But how can I use this props? We just saw that this is an object. So if it is an object, we can add value to it. All right, that's good. So how can I add value to it? Wherever you are calling this card, go ahead and pass on values. For example, I'll just call this one as a user name and the value of user name is here is going to be Hitesh. OK, now how can I utilize this? Everything that you pass here in this format, it's actually a key value thing, key and value. So you can actually have this props here. And now I can change the name here. I can inject my JavaScript just like this. And I can say props, since this was an object. And I can go ahead and say dot username. And this technically will render my name. So I can see that this is Hitesh now. Rest of all the things, they are gone because they never passed me anything. But this is an issue. What happens if the user doesn't pass on this props? Common case. So in this case, what we can do is we can actually just provide some default value if the value doesn't exist, use this value. One more thing, if I'm going to pass you these values like prop dot user name, prop dot your post, whatever that is, every time you have to say prop dot prop dot. So one common thing that you're going to see is just destructuring this object directly. And whatever the field you need, you just simply go ahead and say, hey, I want to extract username out of it, or whatever you want. In this case, you don't have to say props like this. And everything still works. Now, there is a good thing that if this value is not available, then there are a couple of ways, actually, you can go ahead and work on with this. For example, I can go ahead and say username. Or if username is not there, go ahead and print Hitesh. So it works. But there's a problem. Here's a problem with this case. This is not scalable. The reason why, how many times your other fellow coders are going to come and look into this much of the pieces of the code and will say, hey, this is where you have used the conditional. This works. A lot of people use that. I've seen that in the production code even, but not a good approach. So technically, it is correct, but it's not scalable solution. So the better approach could be that, hey, you should actually give some values here as well, like Hitesh. Or maybe Hitesh. Or I'll just use an H. Oops, CommandZ, a couple of times. I'll just go ahead and say, instead of this, Hc. Just like that. Save this. And now, if I go back, notice here it says Hc. So the logic is still same. So if you will give me the value, which you have given me here, I'll use that value. If you are not going to give me any value in any component call, I'll just use this default value. So this is a far more better approach, because at the very start of the function, you get all the usernames and what the values you want to extract, and you can work on with that. Similarly, we can just put a comma separated values. I can just say post. And I can just simply say equals. And then instead of staff engineer, we'll be using something else not assigned yet. So we can see that right now it says still, because we haven't used it. So in here, I can just go ahead and enable my JavaScript. And I can just go ahead and say, I don't have to say props. I can just directly say post. So there we go. Now it says not assigned yet, not assigned yet. So every single time you call any component or a piece of code, you can just go ahead and provide, hey, I want to make it more reusable. This time, it was attached. This time, it's going to be JSON. And then I want to also provide a post, which is an optional parameter, by the way. There's no comma here. Post, and the post value is going to be stuff, engineer. So just like that. And we can see that this changes a lot of stuff. So instead of making a dumb component, we can go ahead and make it much more smarter. Similarly, you can go ahead and provide a URL of the image here as well. And instead of getting this whole big thing, you can just go ahead and make it as an optional, that, hey, this is optional. And you can inject your JavaScript. Just same. Curly braces, add a string, and that is it. That's your assignment, by the way. Really easy one. Go ahead and make this component a little bit better so that you can make it more reusable. But one more thing, will I always be passing strings like that? Can't I just pass something more, something like, hey, in this first card, I want to provide an array. So I'll just go ahead and say my error. And that is going to be an array like this. And that's going to be 1, 2, 3, 4. We can see, obviously, that's an error. That's an error. The reason for this error is, if you have studied my JSX chapter in this entire series, this whole thing will be taken up as it is and will be placed in the JSX line by line parsing of it. So this is obviously not a great idea. Yes, you can pass arrays. You can pass on objects. But there is a way of doing that. And that is where you have to inject your JavaScript in here. And that's how you pass it. And while the better way, even, actually, to do this, if you really want to pass on something like this, the best way is to create an object first, create a variable first. And that would be a better name. So for example, you go ahead and pass on my object just like this. And in this, we will have a couple of values. Oh, that's too much of the values. I don't know how we came up with that address. I don't even live in this. I'll just live in the pink city, just for fun, just for fun. And I'll just say new array. And some values into that. So it's always a better idea if you want to pass on any values or like this. Go ahead and pass on this variable. That's usually a better approach. So I can just go ahead and say new array. And oops, my bad. My bad in syntax. There we go. Now I can go ahead and say new array. This is a far more better approach than just writing the thing. So if you want to pass on anything, your arrays, objects, strings, anything else, maybe you have called some values from the database. You want to pass it on as it is. You can go ahead and do that. Maybe you want to pass on each of these elements. You can spread these values and can pass on. But it's up to you that how you are accepting these values here as well. That is the most important thing. Here we are expecting that they will be an object, having a string into that, so optional string. If you expect that the values will be spreaded array, go ahead and handle and deal it with that way. That is the most important thing. And that is why you need props. So in this video, now we have learned. So let me just summarize this. First of all, we went through with the tailwind configuration, absolute basic, nothing to be worried about. We just went through with stepbystep instruction from the documentation. Then we studied a little bit about why props are necessary. By the way, this whole thing, this user name, it is, this is the prop. That is it. It's a short form for properties. And the reason why we call this one here as a props, that is, again, a short form for properties, we saw in the console log, there is an object. That object is called as property. And that's why, hence, the short name of props. So coming back, so we studied about how we can make dumb components. Component is like shortening the code and make it more modularized so that you can have individual control on each component, like cards. Eventually, we can loop through the cards, generate hundreds of cards, a navigation bar, footers, and all of this so that we can keep them separate. This is how the production code is being written. On top of that, we studied a little bit how we can actually grab the entire props or we can destructure them at the very top. And if we are interested in destructuring, then it's much better. We also studied the concept that if you don't pass on any default value, what are the consequences? We also studied there is a nonscalable approach that could be have taken, but you can improve your code with the scalable approach of providing the default value up here itself. That is always a great idea. This is all. This is all that you want to study in this particular video about props. Now you have a great idea about what are the states, why they are being used. You also have the idea about modularizing your code using the props. We created a card component. Go ahead and create another component, like header or footer or something, and try this out. This is all. This is all that we have for this particular video. If you're enjoying this video, it gives me an immense boost in confidence. If you leave a comment, drop down a comment. Any thank note, hurt, emoji, whatever that is. I'm expecting at least 100 comments on this video just to give me a model boost. That's it. Let's go ahead and catch up in the next video. Hey, dear everyone. Hithai Sheer back again with another video, and welcome to our React series. So we are on to our React journey going pretty good. And now is the time that we learned the things on the go while building the applications. And of course, we're going to start with absolute basics. And let me break this here. A lot of time when I bring this kind of application at the start of the things, people just say, hey, Tish, that's too basic. That's too basic. We really don't want to build this one. Show us something cool. Build an Amazon clone or a Spotify clone or a blog application. But the reality is that if you directly jump into these applications, especially at this level, because somebody who is learning React has just gone through with JavaScript, trying their hands on some frontend libraries, this is where you can make a lot of mistakes. So please don't do that. Building these kinds of smaller application will get confidence in you, as well as you'll understand a lot of workflow as we go through. So let me show you what we are about to build. And then I'll walk you through that how we are going to actually build it. We'll be using a lot of tailwind for this one. So this is how we are going to get started. So this is absolute basic. This is how we are going to get started. At the bottom, we will have a few buttons. Of course, we will not focus too much on the tailwind side of it, but still these are going to button. As you click on these buttons, they will actually change the color. So it will turn it into red, green and blue. And then if you hit the refresh, it again comes back to the olive. So this is all that we are going to build together. We will be using again, classic wheat for this. We'll be using tailwind for this and just the basic state management. This will give you a thorough confidence of how states are being used and how you can actually utilize them. What are the impacts of using the state? And eventually, gradually, we are going to level up the difficulties here. I hope you are all excited. We're going to get started absolutely from scratch. So let's go up there. So this is my application. Let's go back onto this one. So this is how we are going to get started. We'll be creating our very fourth app that we have right now. So let me go ahead and fire this up. There we go. We need to close this again, fire this up. And this will be our fourth app. So I'll be just saying NPM create wheat. And we'll be going with the latest. I think that's the best approach that we can have. And then it requires a name. This will be our fourth app technically. So we'll be saying 04 and this will be a BG changer. Feel free to name it something else if this doesn't suits to you. Works great with me. So I'll be just using this one. And package name is exactly same for me. I'll be using React for this one. I wish they could have asked me for a library of CSS as well, but sadly they don't do. Again, we'll be going with classic JavaScript so that we can have more people using this library. So let's go on to 04 and there we go. Now the first thing that I have to do is NPM install in case you are already on bun, you can go ahead and use bun install as well. No problem there. It's usually a comparatively fast install that we have, but by the time it does all of this, let's go back here and work on the Tailwind CSS. Again, classic go back to docs. It might look repetitive to you, but this reputation is necessary so that you feel absolutely comfortable in doing all these things. I want this to be a muscle memory in use. So let's go back and let's go ahead and clean this up and paste these two things so that we can have background changer and we get a new file, which file? Yep, a configuration file for Tailwind, exactly this one, a Tailwind config. In this, we have to change some configuration. So we are using wheat. So that's why we'll mention that our index file is actually outside. I'll just replace this and rest of the files will be inside the source. So this is exactly for that. After that, we have to get the decorators, directives. There are a lot of names for that. Different language, depends on what language you are coming up for. And I'll be just changing that into index.css, just replace everything. We don't need much of the CSS, just save this. And there we go, just save this. And now technically you should be able to run npm run dev, which hopefully we will be. So we'll be saying npm run dev and things should be up and running. Before we go there, let's go into app.jsx and actually just clean the things. So we'll be saying, hey, let's clean this. Let's clean this from here to here. We'll be just putting up a simple H1 and what we're going to write. A bgchanger app with wheat, looks good. And we'll be having a simple class name. And that says we need a bggreen suggestions, please. I'll be using 500 variant of it. And we'll be saying text of three Excel. So we'll be saying three Excel. Why is it not suggesting me? Yeah, it is suggesting me. Okay, let's see if the application is working or not. Let's go up here. And there we go. Not really the nicest, coolest of the all, but it is what it is. It is decently good that we have. Okay, going back. Now how we're going to deal with this one, nothing too much. Let me just give you a brief overview of how we are going to take down this application. Main.js, we are not going to be taking it down because our app is being served inside it. So let's just close this totally. I'll close everything. Okay, then we'll go into app.jsx. This is the file which is serving entirety of my content. So in fact, all of my content is going to go inside this. For this, I need to go ahead and create a simple full page width. Inside that at the bottom, we'll be creating few buttons. It's not really compulsory that you keep the buttons at the bottom, top, left, right. It's totally up to you, but we need a full page of the screen itself. So let's go ahead and do this. What we're going to do is remove all of this. The easiest way of doing this is to have a simple dev. We'll be putting some content inside this, but first let me add a few classes. These classes comes from the Tailwind itself. First of all, I want the width to be full. So that's the shortcut for this one. Edge screen actually gives you a viewport height screen. If you hover your mouse onto this one, it says give me height of 100% viewport. Again, this is not a series about Tailwind, but still want to give you a brief overview of how things are actually going ahead and we'll do it. We'll also go ahead and add a duration of this so that whenever there's a change, it actually does it slowly. Now, next thing, we're going to just keep it as it is. This is how the basic looks like. Now, once we have this, I'll just not use these suggestions here. We'll be using a simple Flexbox class here so that we can have all these buttons and everything. So let's go ahead and have a dev. Inside this dev, let's have a class name. First of all, we want it to be fixed so that it's always fixed from the bottom. Fixed, there we go. And we'll be using a flex. We'll be using a flex wrap, flex dash wrap, there we go. And again, justify center and we will be fixing it up from bottom so we can use a bottom of how much you want to have it. 12, maybe 13, totally depends on you, no big deal. We'll be also using one of the other property which gives you inset as well. And by the way, you can provide an inset on Xaxis and Yaxis. Again, not a class for CSS, but we'll be going with that. You can just copy and paste these ones. So this is what we have as a basic. And now once we have this, then we can just go ahead and simply have the suggestions. We can actually go ahead and take this one. This gives us nice suggestions for this. There we go. Now we'll not be using everything. We need flex. We definitely need a flex wrap, justify center. We'll be using some gap and some of the shadows as well. So let me just go ahead and give you the CSS directly again from my notes. We'll be not using a widthful and all of that. Again, it doesn't really matter what CSS and anything you're using. I'll be just using a simple button and let's just say test. Again, if this UI doesn't make sense, only UI that should make sense for you is the width should be full, the height should be screen and after that, just add button wherever you like. Let's go back and see how does it looks like. So we can see at the bottom, we have a button. In fact, what we can do temporarily, we can use a background color of let's just say a black so that you can properly see this. This is what the screen is right now. Again, we don't have a full width as of now because our application is loading only in this much. We'll see and figure out how we can actually manipulate that. Not a big deal, we can just change out the things. So we can see, this is what we have, test is one button. But if we add more buttons, we can just go ahead and do this and these are the buttons that we have. We'll be manipulating these button with a little bit more of these classes. So just don't worry, we'll be getting through them as well. All right, let me just remove this, okay. The first thing that we have is, oops, in the button is the class name. You can add more properties to this one, but I do have some button classes as well in my notes. So I'll be just directly giving it to you. All right, you can just go ahead and use them from the GitHub notes. We are using an outline none, we are giving some padding on the X axis, padding on Y axis, rounded fold, text is white and the shadow is large. So this makes the button looks like this. Obviously we don't have any text colors and all of that. So we'll be providing them as well. No worries, this is right now, text is white. By the way, this was just to show you that yeah, something BG was there. Okay, now we have a button like this, but our text is missing. So let's go ahead and add a text. What kind of text do you want to have? I'll be saying text as black. And there we go, a decent button that we have. Oops, text white, text black. No, we want to text black. That will make sense. Okay, looking good already. Now, similarly, we can have more buttons and we can call this one as test two, two, there we go. Okay, so the functionality is there. Now coming up onto how does this actually work? So we have already learned about the functionality. I hope you remember that the most important part of this application is the functionality. In the functionality, we have already seen that if you want to render any changes in the UI, those changes cannot be directly propagated. We need to use some kind of state management for this. And in the React, we have a hook for that known as use state. And this exact project is actually based on that. So we'll be using that one. Let me just walk you through with that. It's super, super easy. For using the state, just like we have a count here, let's go ahead and remove the count. We want to have some kind of a state management for the color. So I'll be using a const and let's just say we'll be using a color and that actually uses set color and we use some user state and what color you want to have. In this one, I'll be just writing olive as base one. Always remember, this first part in the array is your variable. The second part is a method which is responsible for changing this variable. No other thing cannot change this variable. This is the guy which is responsible for changing this color. Whatever you put inside the use states, that's the default value. Now, how can I use this default value? You can go up here and can actually add this as a property. For example, you can add your own styling, not the styling from the tailwind, but actually a style property just like this. And by the way, I need to go outside of this string. So there we go. We have this style property. Inside this, I can go ahead and say I want a background color and what should be the background color value? Just like this, you can go ahead and say, I want to have this olive color into this one and that color will obviously get propagated up here. So all the way up here. Why is it not going all the way left and right? I'll need to debug a little bit. We'll do that at the end of it. No big deal there. We can just have some manipulation there. Okay, apart from this, now since this is olive, how can I actually replace this string with some variable? It's pretty simple. You're already in the double curly braces. All you have to do is simply go ahead and say color. Now I'm using now a state variable and that's why we get an olive here. But if I go ahead and change it to red, since the default value of the state is red, I get the red, but I'm happy with the olive as a default starting color. Okay, that part is good. But now I need to work on some method by which I can change this. And again, remember, change can only be done when you change this color as a variable and this variable can only be manipulated and changed by this set color. Cool, you get this. Okay, so what can I do is on this button, if I know my JavaScript, I can just go ahead and add an event which is onClick. Now this onClick is pretty nice. It can take a reference of a variable. Maybe you are defining a method here, which is something like this, function and change color, something like this, and there we go. Let's just assume this change the color. You can go ahead and pass on the reference of this change color. Now, once you pass on this reference, this method alone cannot work. It needs some parameter to be passed on. For example, if you give it something like this, let's just say a parameter of color, whatever the color string you're passing me, inside in here, I can go ahead and use the set color, which is a method to change this color. This is my ideal way. But again, the problem is the change color needs to pass this color as a variable. Now, right now, I cannot just go ahead and do like this because it will immediately execute it. And if you remember your JavaScript, onClick doesn't change the value which is returned from a function. It needs a function itself. And this is not a React, this is JavaScript in itself. So there is no way you can do this because this will execute it and whatever the return value will go in onClick. OnClick doesn't accept that. You need to pass on a function into this. That's the only way how you do it. So another way of handling this situation, whenever you have to pass on some parameter, is just go like this, use a callback, and then you can actually use a change color because now onClick satisfies the condition that, hey, I'm passing you a callback, which is also a method. And on the way, I'm actually changing this color. So this will be going as a red. So if I go ahead and test this out, this actually changes that. So that's really nice that I can go ahead and work on with this one. By the way, I'll change this to red, this one to blue or green, whatever you like. Okay, but the problem is I need to actually do exactly same thing. So I can just go ahead and copy this and paste it up here. And there we go. Instead of this, let's go ahead and pass on this green. So technically, this actually solves my purpose that, hey, this is red, this is green, and I can go ahead and change these values. I can add more buttons. But there could be a better way of doing this. This is no problem at all. You can also have a different take on this one. In this entire series, I'll walk you through with a different perspective of the code so that you feel better where you'll see other people's code. I'll just comment this out. We don't want this one. What you can do is if I know that this change color is a method I need to call and pass on a value, I can actually do this with the set color as well. Can I do this directly? Yes, actually you can. You can just directly set the color into this color because this is responsible for that. So instead of using the change color, I can just go ahead and use the set color and pass on any parameter to this. Whatever you pass on parameter into this, whether that's numbers, string, whatever, that value is the new updated value in this variable. And that variable automatically is monitored by React to propagate the changes. That's cool. So I don't need to use this extra function that I've defined. I can just go ahead and use the set color of a method and this still works. So it saves me some time by not declaring extra functions here. A good approach, good approach. So now I can say red, green, it still works. There is still a bug in the application, which actually prevents me from going all the way up here. So really don't want that. So let me quickly go ahead and fix this that how it is not going. It's really minor CSS issue, not much bothered about it. All right, so found it, it was pretty easy. There was already a CSS, which was overwriting our CSS. It was in the app.css index. We have already cleared in the app.css. So just go ahead and remove everything. If you don't need anything at all, and this actually flushes out everything that we don't need. So really basic fix. And now we have a red button, we have a green button, it changes the things. So this is really nice that how we are actually able to do this in couple of ways. And again, saying that this is correct, or this is much more better, it's just an opinion. And I respect your opinion as well, in case you want to go with further, like, hey, no, this is my preference or something like that. Now, one last thing that we are going to go ahead and work on with this one is just let, let's add some of the colors onto this one, because I think that's also pretty good. So let's just go ahead and add a style to this one. And we'll be saying background color. And the background color that we'll be using is going to be red. Yeah, we can actually hard code this. And we can see this looks good, text could be changed. But again, not really bothered too much. And we'll be hard coding the value here as well on the green. Again, it's totally your choice, just visual aesthetic. The whole idea is to understand different perspective of how the things are being changed. So your role is really simple, just add a few more colors, maybe a red, green, blue, orange, red, pink, purple, violet, and put up a straight bar. All you have to do is copy paste the buttons. And again, remember, this is really important part of the 90, 10 or 80, 10 teaching, where initially I'll be giving you small assignments. If you will think that, hey, this is too easy, I won't be doing that, you will be lagging behind eventually for the bigger assignments. So do this assignment, tag me on Twitter, Instagram, LinkedIn, wherever you like. If you don't like that, it's okay too, but at least do the assignment. This will help you in improving your skills as well. So that is it, that is it, what we'll be doing. We'll be starting with absolute basic. This is the first project that we have done. Let's take down another project in the next video. All right, it's been a while. Yes, finally, I'm back on this channel as well. Hey there, everyone, Hitesh here, back again with another video. And in this video, we will continue our series on React.js, I'll walk you through, and we'll be building one project. Although at a first glance, this project might look absolute basic, there is nothing too much, but I'll walk you through with some scenarios, some of the experiences that I had, and together we'll be crafting this project like an expert will do. You will understand the good practices, bad practices of the React, and how even a smaller thing can change the entire overview of how the project should be built up. So welcome on board, and I expect just a minimum of 100 comments under this video so that I can get some moral boost. But hey, you are interested in this series, and I should focus more of my attention here. All right, so first let me share a simple my screen, and this is the project that we'll be building up. And you might be thinking, hey Hitesh, this is absolutely a simple beginner project, but trust me, there can be a lot of intricacies in this project, and together we can learn some of the good practices and how to approach this kind of project, what is the mental model required. So first, let's go through. So this project obviously is a simple password generator of a project, and in these kinds of password generator as a project, we can see we have some default length in our slider, we do have a slider here of course. And based on the slider, it generates a random password for me, which includes the upper and the lowercase letters. Now as I moved my, and first of all, if I refresh this, it actually gives me one initial password. So I need to learn that how can I actually run some code, which as soon as this component loads or this webpage loads up, it executes my code. That's the step one. When I touch any component and change its value, it actually reruns my code, the code that is responsible for generating the password and gets me that code. On top of that, when I have this number being clicked, it again reruns my code with all the previous values and the new values and generates me a password for that. If I include it again as a character, it actually generates all of this, again runs the code and gives me the password. On top of that, I can copy this, and it gives me that, hey, this was being copied. Now here comes some of the UX and UI elements. Now for copying anything, you don't need to highlight anything. That is the step one. But still, we gave the user a feel that yes, this entire thing was copied. This is kind of a user experience, and we need to learn about some of the hooks in React to give the user this experience. You can just click on the button and say, hey, this was copied. You might have seen in a lot of website, it just says copied at a tick mark. That could also have been done, but we went extra step, and we simply said when you click on copy, and we have copied it already, but on another line of code, we were able to highlight all of this piece that, hey, this piece was selected, automatically it came to your mind that, hey, I was able to do this. Now, the way how this project is going to be taken down, of course, we'll be using Tailwind CSS in that. We are not worried about the Tailwind. We will not talk about the CSS much. But if there would be a button here, which says generate password, then approach of taking down this project would be completely, completely different. Because when I have a manual button, which says generate a password, that means I am controlling the event, and the event will be controlled and executed only when I'm ready and only at one time. So in that case, my function is not going to be keep on running and keep on running. Here, the exact same function is keep on running, keep on running on just every single event. So there is a potential use case that we can optimize the things. And that's exactly what we're going to learn, how we can optimize when we have a similar kind of method executing again, again, with just minor changes. This is known as memoization concept, in which we can keep most of the execution of the methods in the memory, which saves us and ultimately our React app performs well. So this is quite a classy project that we'll be taking down. But if this would be a project where some UX guy says, hey, just add a button here, that would be better user experience, I have to actually rewrite the entire project with a different approach of optimizing it. If he says, no, we don't need a button, just remove the button and generate the password like this, then there would be a completely different approach. So when next time in your group meeting or your agile meeting something, somebody says, hey, this is a UX design, get this straight that it is going to take some time. All right, so this is the basic that we have. Let's go ahead and generate a new project and install CSS and whatnot onto this one. This is our technically fifth project. So we'll be just going forward with that. So let me just generate that. Pretty simple, we are going to say npm create wheat and we'll be going with the latest and we'll be saying this is our zero five project. So we'll be naming it as a zero five and we'll be calling it as password generator. Of course, React would love to, but not TypeScript this time. We'll be going with classic JavaScript. By the way, if you haven't checked out my TypeScript series, it's pretty awesome. Wellrenowned, wellaccepted by Twitter and free code camp and whatnot. So check it out, it's pretty nice. But in this case, we'll go with the JavaScript. Let's go into a zero five. Actually, what I can do here is a quick, neat little trick. I can just right click and open this as an integrated terminal so that by default, I'm always into this folder. And we can say npm install and this will install all the packages, hopefully pretty quickly. And we can just say npm run dev. Okay, till it's, okay, not taking much time. Okay, npm run dev, that's how we get there. And let's see how our project looks like default. Pretty classic. And we'll also go on to Tailwind CSS to get our Tailwind. We won't be discussing Tailwind too much, but at least we need Tailwind framework guides, wheat. I always go with the documentation and I highly, highly recommend to you also do the same because there might be some steps who might have changed eventually. We don't want to get into that one. So simply go ahead and, oh, we need to install it, my bad. Stop this one, paste it up here and this should generate a new file for us, which will be Tailwind config. That's exactly what we need. And let's go back. We need this exact set of instruction to be copied and let's go into this one. Let's copy and paste. So now my content is aware that I'll be writing my Tailwind CSS in either the index file or in the source. All the JSTS might include some of the TypeScript. Tailwind, not TypeScript. And we'll be copying this one. All right, so this needs to go into CSS, your core CSS. So open up this. We'll be opening up main index.css, remove everything else and paste it up here. That's all what we need. We won't be needing anything inside the app CSS as well. We can actually go ahead and probably can remove this one as well. This will give us a necessary paint later on. So we'll just remove this one. All right, now technically our CSS should be all okay. We should be able to run it. Let's go ahead and run the command. First NPM run dev. All right, so it says nothing as of now, but let's go ahead and try out if we can have some of the CSS and everything up and running. Let's go into index.html. And what I'll do is I'll add some of the class here as well. I'll say BG dash gray. Gray, okay, suggestion. Okay, this one gray. Let's go with 800, yep. Okay, so at least our CSS is up and running. So no problem there. At least one of the task is all done that we have this whole thing. The next thing what we're going to do is let's go into app.jsx and take down this project by first removing all the unnecessary stuff. It's necessary, but we'll remove that. Let's have a basic h1. Let's have a basic h1 that says setup ready. I don't like to skip any steps so that you can also follow along, pause me in the meantime and can just set up your steps as well. I don't like to bring in any code from the GitHub. I initially, at least that it feels like a magic is happening or it's not like that. So we'll go this time BG dash red, suggestions red 400 to just check it out. Yep, it's looking good. Things are all done and all good. Now, first of all, how we're going to take down this project. Now we will be needing a couple of states so that we can manipulate things based on whatever the values are getting changed. And it's pretty obvious to check out from the previous ones. It actually refreshed all of the pages, but we still have a picture and a photo that hey, this is what we're about to build. So the first thing that we're going to need is we need a length so that we can monitor how much the input box is being scratched. And you want 10 characters, 15 characters, how much you need. We need something as is numbers allowed. We also need is special characters allowed. And we need a state of password as well. Because if you notice in the input field, the password was being displayed. So we need a state for that also to maintain. So a couple of states, we need that. So let's go ahead and work on with this. So first of all, let's go ahead and have a simple length. So we'll just go ahead and say that hey, we need a length. This will help us to monitor the length. By default, we won't be going 20, that's too much. We'll be going just with the eight. Feel free to change it, no problem at all. This is my password length. Now I'll be needing is number allowed or is character allowed. That will be just a Boolean value to figure out whether are allowed or by default they are set or not. So we're going to say const and we're going to say number allowed, allowed. And suggestions, yep, numbers allowed. By default, no, not true, I'll be getting false. By default, they are not allowed. Similarly, we'll be having our symbols allowed. So we'll be calling as characters, special characters. It's totally up to you how you want to rename that. Set character allowed, we'll be getting a false. And these three are my states based on which things will be changing. But once the password is generated, I need an input box where I'll be setting all this one on. So I'll call this one as password, the actual password that we'll be generating. So I'll be saying password and that will be set password. Initially, that will be empty. All right, so now that I have all these, I'm not worried about error case and all of that. This is all good, what we have right now. Let's take care about how we are actually returning the value because there is a lot of CSS, I'll be copying and pasting them. This is not a CSS or a Tailwind class, so I'll be directly just putting things up and we'll be just directly enjoying the CSS that I have here. Okay, so let's remove all of this. We'll be having a simple div. In this div, I have some of the classes that I'll be directly grabbing and pasting from my notes. Again, reminding you that we are not here about the Tailwind. This is just a boilerplate for us. You can have your password generator with completely different look, completely different theme. We don't really care. After this, we will be having a simple H1 which says password generator, but I do have my classes for this one as well to make it look almost similar to what we have. So we'll be just pasting this one. Now, once we have this password generator as here, we'll be having a div section, which will be responsible for holding our input box as well as the button, the copy button that we have. So let's have first this div up here. And obviously we'll be having some of the classes here. Let me grab the classes again. These are just the flex boxes classes that we have. Nothing too much fancy. So flex, shadow and all of that. So that button can be on the left side, input box can be on the left side, button could be on the right side. That's all what we have. Now what's interesting here is the first thing is going to be an input box. So let's go ahead and grab an input. It can be of type text, so no problem there. Let me just move it on to the next line. Now what next comes up is very interesting. We should really discuss that. First of all, value. The default value is going to be password. As of now, it's a default empty state. So we'll be keeping at that as it is, no problem. It will be having some of the classes as well. Nothing too much. We do have just a couple of ones. Outline is going to be none. No, not that much. Let me just grab the other ones as well from the notes. All right, that's it. Again, classes are not to be discussed. They are very basic CSS kind of stuff. Let's also place a placeholder which says password. Great. This will be a readonly field so that nobody can actually come into it and keep on writing. We'll be keeping it as readonly. We'll be filling it from the programmatical aspect only and we'll be keeping it that much added. Now one more thing I'll be passing it on here which will be used later on. This is known as ref. And this reference is going to be some kind of a password reference. That will be variable. We will be discussing about this later on. But just to keep an idea that what's coming up in the future, yes, we'll be talking about reference, but not right now. It is there in the process as well. Okay, after this, we'll be having a simple button. So let's go ahead and have a button. This button is going to just say copy. Now, of course, not just copy. We do have CSS for this one as well. So let's just go have some class name as well. And the class names. Copy that and paste it up there. Okay, so this is the button that we have. So you can see that yes, we are first generating all of this. Don't you worry, eventually, as we move on to the complex project, I'll be giving you these notes file so that you can directly copy and paste them and you don't have to worry painfully sit here, watch me just writing the CSS. We are here to enjoy React, not these button making designs and stuff. All right, so this is the first part of my dev. The second part or the second dev that I have also have some of the classes as well. So that to forget there and we'll be having class name. All right, let's add more of these classes in here as well. So first of all, let's go ahead and copy and paste this. Inside this also, we do have some more devs. Okay, what can I do? We have to go through with this at least once here. Let's add the class names and then we'll be having, this is how we designed it. What can I say? And then once I'm inside this, then comes the important part which we need to discuss, which is the input field. So this input field is going to be of type range because that's the first one we actually worked on with. So this range is very interesting. We can actually decide how much the range can go in all of these things. We can decide the name and IDs and whatnot. Let me just move them on to the next line so that we can have a discussion. Okay, so first of all, we have type. We can define the min and the maximum into this one. So minimum, let's just say we need six characters of the password to be generated. And the max that user can actually drag and drop, it's totally up to you. You want 20 characters, you want 100 characters, that's totally liberty on your own. This requires a value property as well. The value is going to be governed by the length itself so that anytime I can go ahead and grab the length of the value itself. Then obviously, we'll be having some class here as well. What can I say, classes are there. We'll be having cursor pointer. On top of this, we'll be having an on change because as soon as something change into this one, we need to fire up an event. The event is going to be simple, set length to the new values. So set length is a method which governs or which regulates how you can enter data into the length. So we are using that based on an event. And whatever the event.target.value is, we are actually setting that value into the length. Pretty clear explanation. Once we have this input, then after that, we just have a simple label, which actually says, hey, this is length or something like that. So we'll be having a label. And this one is for HTML for, for label, I guess, length. And we'll be putting up length. Not only that, we'll be actually parsing a value of length as well, so that user know that how much the value exactly is. So if I go ahead, save this up here, notice here so that the length actually is here and it changes that. So this thing is actually going into my state as well. That's the one thing which we are pretty interested about. Once we have this one, this entire thing as the labels and stuff, we'll be having one more of the div. Actually, we are actually copy pasting this div now. Copy and paste this div again. This time we don't have any input field like this. Okay, so this one looks good. And what we need is just an input box which is going to have a check box. So I can actually remove all of this. We don't need a label for this one or do we need? Well, check, we will be needing a label, yeah. Okay, so this one is input of type check box. And again, we don't need to worry about names and whatnot. Just give me a second, I'll just fix this quickly. All right. Okay, now this is the input box which is a check box. So what is the default value first of all? So the default checked is a parameter and we can just simply govern it by our state which is number allowed. Now on this, we can put up IDs and on whatnot. But most important part is what happens when something changes. So we need to actually have this on change. So we'll be having on change. This is a simple event that is triggering. And this is how it works. And we'll be firing up a callback onto this one. And then inside the callback, we'll be saying that, hey, I am going to take care of this one. This input box is going to be governing the number itself, the check box for the number. So I'll be using set number allowed through this. And here's the most important part. I'll be using a callback here. So in each of these state, you actually receive a callback. You can directly manipulate the value. But if you use a callback in here, that's a guarantee that you can actually use the previous value and all the changes properly propagate. We actually discussed that briefly in the last video as well. So we'll be using the same thing. We'll be using a callback here so that whatever the previous value is, we can call this one as prev, or you can call this value. Whatever you like to call this, this is just a placeholder. So previous value, whatever that is, true or false, we want to just reverse it. So we'll be just reversing it. Now we could have directly just send here true or false, but that doesn't serve our purpose. We want to pick up the previous value that is being there. And then we want to do this. Now these changes could be really quickly. A user can just keep on clicking there, click, click, click, and sometimes React might not react that fast. And it might think that, hey, that was the previous value. So in order to make sure that React actually React, we are using a callback here. So this is really good practice here and kind of a high level code that we have. We probably don't need name and all these IDs, but it doesn't really harm anything. So we'll be just skipping them. We'll be having a label. This one is for numbers. So we'll be just saying number. And this one will be a label for numbers. Okay, so we have numbers just like that. If I can write that better. Numbers, so there we go. Now you got this. You understand the proper use case and everything for this. Rest of these elements are just one. I'll be just copying and pasting this so that we don't have to talk about the things again and again. Exactly same thing. Probably we have got some. We need to actually write this manually because it might give us some of the issues. This one is character for input. And let's hit refresh. Okay, so looks like we need to hit a command Z couple of times. Probably this is having an issue with us. So let's just minimize this. Minimize this and actually just copy and paste this one so that copying and pasting sometimes gives you error. And okay, now it's back. Now it's back. But we have this numbers here. So we need to actually write the code ourself. Okay, checkbox. Your default value is going to be character allowed. On change, I'll be changing the set character allowed. And I'll be taking the previous value, reversing it, name ID, that's okay. HTML, this one is for character. Car input. And this one is for character. Now this should be okay. Okay, at least our UI part is all done and we are happy with this one. Hopefully, whatever happy we could be. Okay, so the UI part is all done. Now let's go ahead and see that how we can work on the logic part of this one. The logic part is actually fairly straightforward. There shouldn't be too much worried about this. Let's first assume that there is a button and on this click of a button, we will be generating a password. All right, so in that case, I'll be simply writing something like this, const generate password. This is my generate password method and I'll be generating a password. And in here, I'll write the logic for it. We'll discuss about the logic part as well. But what I really want to bring your attention in here is this same thing is actually being done again and again and again. And if some kind of, if similar kind of a situation is there in your project as well, then go ahead and do study this one hook which is used, known as use callback react. This is one great hook which you can utilize. And notice here, use callback is a react hook that lets you cache a function definition between rerenders. That's exactly what we are doing. We are rerendering, but not only rerendering, the majority portion of our function is exactly same. Yes, there are some values which are getting changed, true, false and all of that, but majority of the function is exactly that. So it uses under the hood some techniques known as memoization. That's a great technique. Almost all of the programmers knows about it. If you're not aware of it, then please go ahead, learn about it. It's a fun technique, especially helpful in DSA, data structures and algorithm. So we'll be using this one. Using this is exactly like this. You use a use callback just like this and that's it. You passed on your things as a callback just like that. So pretty easy to work on with this one. So let's go ahead and apart from use state, we'll be using use callback just like that. Now previously I was about to create a function which will generate password. This looks like a regular function. How can I convert this regular function into a use callback hook? You don't have to do anything there. And what I want to do is just simply use callback. And this use callback works just like this. This is your regular use callback. Now inside this, use a simple callback, that is it. That's it. All the rest of memoization and optimization is done by the React itself. Now you might be wondering that why we are actually holding the reference into a variable of this method. Yes, great question. Because only and only one reason, as soon as my page renders, I want something to generate my password. So as soon as the component loads or the page loads, I want another hook to execute this method. If I don't have a reference of this, how will I pass it and say that, hey, run this method? So that's exactly what we are doing here. All right, so let's go ahead and first take care of this one. So in here, what we're going to do is first, let's use a pass for password short, and we'll be taking it as an empty string. Later on, we will use this exact variable and push it into this password state, so that state updates. All right, let's also go ahead and say this is my string. And what does the string has? Nice suggestion there, but we'll be removing some of the elements into it. Our string is composed of only the numbers, alphabets technically, all uppercase and lowercase, that's our string. Now conditionally, we have to append this string whether to include numbers or not. So let's just do a quick check on this one. So we'll be checking if, whatever the state, if numbers allowed is true, then what we're going to do is we can just use a oneliner, we can just append this with all the numbers. Similarly, if characters are allowed, we can just append our string with all the characters that you think I want to include in my password. Very simple, based on if and else case, our string is getting updated. The string is consisting of all the uppercase and lowercase letters, that's the default. If somebody check marks the number allowed, we will be adding numbers to the string, appending it. If the characters are allowed, then we will be appending these characters, totally depends on us. Now the next thing is we have to loop through all of this string. Now assume that this all numbers and everything are inserted here. We just need a loop and this loop will be running as many times as the character length is being set. Based on this, based on those random numbers, I'll be picking up the characters from the string and will be inserting into the pass, this password that I've added. So pretty simple. Let's go ahead and use a simple for loop for that. Thank you so much, but I'll be writing that again because I think that will help a lot of us to understand what's going on in here. First of all, we just simply had a for loop which starts with i equals zero. We will not start with zero because I think I'll start with one as a character. The length will be exactly length. This length is actually coming up from our state, this length, so that's good, that's nice. And we are just increasing this. Now once I'm into this, I want to generate a random character. So I'll be just saying that, hey, I want to generate it. So math dot random generates this random string and the string that I want to generate is going to be string dot length. The character I want to generate is based on how much my string length is, string character length. Once I have this, obviously I want to add one to it because it might generate a random number between zero and to the number. I don't want zero, so I'll just shift it to one. So that is how we are working in. But this actually sometimes generate the number which is not in the round digits. So we want a natural number. We'll be wrapping this up and we'll be saying math dot floor. This is a classic technique of generating numbers between a range A, range X and Y. When you'll be building examples like dice rollers or something like that or gambling app maybe, then in all those cases, you will be using this quite a lot. Let's hold the reference. So we'll be saying const char. This is just a random number. So far we haven't done anything. We have just generated a random number and that number we are storing at a char variable. Simply you can call this one as index as well. No problem there. Now we'll be taking this pass and we will be appending that plus equals. And in that string, we have a method known as character at which gives me, I can find a character at a position. So this char here is acting as an index. So index, we are actually having that pretty good. Now we can actually pick, let's just say it comes to five. So we can start with zero and we can get a five here. So pretty simple, pretty easy. Now, once we are done with this, once we are out of the loop, make sure you are out of the loop. Then we can just use a method known as set password. And this is governing the password. So I can pass my password to this one. And this will be changing this state here. And now we have a fresh password here. That's great. That's so far fantastic. And now we are working everything. But there is one more thing attached to this one. If you study this use callback hook a little bit, you'll notice that this use callback has two parts of it. First is this callback, which we have studied. And this is a dependency array. These dependencies should not change too much, but based on if you want to rerun the methods or something, you can actually go ahead and just have this so that all the optimization are done in this one. So we'll be providing some of the dependencies array that based on this, make sure all the dependencies are there. So obviously if the length is changed, make sure the optimization is done with that. Numbers allowed, characters allowed. So based on all of this, almost kind of a similar, you can memoize that and work on with that. We don't really get into the nittygritties of this dependency array. We'll talk about again in this in a use effect hook. But again, remember, this is really simple. As long as these dependencies don't change too often, they can change once or twice, but they're always exactly same. So once you say number is there or number is not there, there are only two cases. If it keeps on changing the states like that crazily, then obviously your code will absolutely burst. I'll show you that case as well. But the whole idea is, as long as they don't change too frequently, that is the keyword here. Okay, notice here, there are a couple of that. Shipping will receive the same props and can skip rerendering and all of that. So this is all what is happening. Okay, so now that our method is all done, that okay, things are great. Now what we want to do? Based on some of the factors, I want this method to run. Okay, what are those factors? First of all, if somebody go ahead and touch this length, I want to rerun the method. As soon as the page loads, I want to run this method. As soon as somebody touch this number, I want it to rerun. As soon as somebody clicks on the characters, I want it to rerun. In these cases, a hook that we can use here and React is all about hooks. Another hook that we have is useEffect. This is one of the most used hooks in the entire React project. And this allows you to actually run a piece of code based on variety of scenarios, like as soon as the component is loading, there's offloading as well, but right now we'll not go into that much. But as soon as you want something to happen, as soon as component is loading or mounting, then this useEffect hook is being used. Using the useEffect hook is pretty simple. You just simply go ahead and say useEffect. We have imported that. That is it. That is your useEffect. Now inside the useEffect, you get two thing again, a callback. So we get a callback like this. And the second part is the dependency array. This time, we don't want things. This is opposite of use callback. In use callback, we say, hey, as long as things don't change too frequently, we actually use that. But in the useEffect, you want to run the method intentionally as soon as something changes. So all the methods that you want to give, you should give that in the dependency array, that hey, if anything changes in these particular things, we would like to rerun our entire password generator. So what are those things? If the length changes, yes, please rerun this. If the numbers allowed changes, yes, I want to run this. If character allowed changes, yes, I want to run this. And as well as if there is any change in password generator code or something, you can rerun that. The good thing is, I don't have to say a single thing as soon as the page loads automatically 100% the useEffect runs. Even if you pass nothing inside that, at least one time, all the code that you're mentioning in the useEffect hook, it runs. That's why it is used. So we'll say password generator. Where is our password generator? Generate password. And we'll just execute that. So that is how you actually run this. Now let's go back. As soon as I run this, notice here on the reload, it actually generates the password for me. As soon as I change this and keep on changing, it runs the code. If I run this, it still reruns the code. And best part is this project is optimized. But the statement here, which says, as long as these dependencies don't change, what happens in that case? I know that there is one dependency which is going to change like crazy. For example, this password is changing. This is changing too frequently, and there is no way of your storing these state in this, because every time it's random. So if you somehow give this password here, because this is changing quite a lot, notice here, if you give this password, it will just get all crazy. And this is not a way how it should be done. So you should not be actually using this one as a password in parameter. That would not be a great thing. So that's why we actually don't use this password here. And that's why we omitted that. It is not going to help you to actually generate all these things. So yeah, not a good idea to add a password here, because that's always changing. And that's why we actually didn't gave it there. Okay, almost our job is done, but there is one more thing. This button is not yet working. This button is not working. So how we can make this button working? Pretty simple, just go to your button. If I can find that, give me a second. Yes, I'll find it. And yeah, here we go. Found it, found it. So on this, I want to have a simple on click event. And on this on click, I'll just say copy password to clipboard. Clipboard, there we go. Now in order to just copy the password, there is not too much of the code that I have to write. A simple copy password to clipboard, just like that we have. And in order to copy the password, all I have to do is window.navigator.clipboard.write text and password. So it's going to just grab the clipboard and write text and we'll be grabbing the password just like that. So as you can see, there is nothing too much going on with this one, but hey, what is this write text and how you can actually go ahead and find this? Yeah, that's an interesting question. So let me answer this one first. So technically what we are doing in this one is there is no access that we are taking from the UI or this browser itself. So if you go into the browser, if I refresh, okay, what happened there? And there should be some errors. Let me just quickly check that. Right click, inspect and console. Okay, copy password to clipboard is not defined. I defined it. Copy password to clipboard. Probably I'm making a mistake here. Let's go back and paste it, save it. Yeah, there we go. Hopefully everything is resolved and yep. Now we can maybe minor mistake, okay. So as I was saying, notice here in this particular method, what we're doing is we are not taking access to any of this element. We know that our final password is actually in our state password. So why don't just grab it from there? That makes more sense. So we're using a window object in which we always have a navigator and this is your clipboard. Through the browser, you are actually accessing what's there in your clipboard. This is exactly how you do copy and paste in all of the application. It has a couple of methods. If you go ahead and just check out this clipboard, it has a lot of methods to write and read and whatnot. There is even a read method as well. A read text, read, read only, there's a lot of methods. I don't want to go into too much detail of that. There's a read method. Yeah, there's a read, you can read the text as well. But what I want to do is I want to use the write text and inside when I use write text, I'm basically writing in your clipboard so that whenever you paste that, the text is available. So if I can just go ahead and use this and if I copy this and I change this again, let's just say a really long string, it has numbers as well and I copy this and I come onto this new tab and I paste this, hey, this copies. So that means my job is done. That means my job is done. But you will also find that majority of the time, some of the UI, UX guys comes to you that, hey, all that was copied, but user needs feedback. The feedback's totally dependent on you. Maybe once the copy is done, you might want to change the text. You might want to store the button text into some state itself and want to manipulate that based on whether the copy text was copied. And after some time you want to rechange it, there's a lot of ways how it is done. What we have decided in this case is we are going to actually select this whole thing so that user gets, okay, this was copied. Now it's not easy to do this. That's why we have chosen this. In order to do so, we actually need somehow a reference of this input field. And that's why I told you earlier that we'll be using something known as a reference. So for this, there is another hook that we are going to learn in this one, which is use ref. This use ref is a crazy powerful hook if you want to grab anything from the windows. Not only just this, I'll talk probably at the end of the series but how crazy this hook can be. And we'll go into this one. The usage is pretty easy. There are multiple users, by the way. You can do a lot of things. You can even find out how many times your page was loaded, reloaded, there's a lot of things that can be done. So what we're going to do is in this one, we'll be just passing on a simple password ref. You can name this anything and just use it like this. Now in this, you can pass on any variable, null zero one. In this case, we are not much worried about this because we have nothing to do with what is the value inside here. We just need a password reference here. Why so? Simply to just go into my HTML, which is generating and provide a ref tag known as password reference. Now, once I actually provide a ref here with the password reference, now in anywhere in my application, I can grab a reference of this input field. There are multiple input fields. I need to define which one I'm grabbing or which one I'm actually talking. I need to find the context of it. But now that I have this one, I can actually use this in my code. As soon as user has done the copied, let's do some of the fun stuff with him. So we'll just take this password reference and I can just go ahead and find out that, hey, what do we want to select? So I can just go ahead and say, hey, I want to have a current and not the focus in this case. But if I have the access to this reference, I can, by the way, directly go ahead and say, I want to select this. There we go, select. This is going to do majority of work. If I copy this, notice here it selects. But it is recommended that sometimes you might not have the reference properly. Hydration might have not done. And there are a couple of cases. So if you have the current value there, then optionally go ahead and select this. This is just a safety net. If you put this, great. If you don't put it, no worries there at all. Now, not only this, actually does our job. Our job is actually finished. But if you want to learn more about it, then you can just learn more about how to select the ranges and all of that. You can, by the way, work on something like this. I have a password reference and I can have a set selection range as well from zero to all the values. Or maybe you want to have a selection range of zero to four. For some reasons, I don't know why. But maybe that's your use case. So you copy that and only four of the values will be selected. No, not the set selection range. Zero to 99 and all of that. So it should be all done. Okay, so somehow it works like that. We are not interested in those selection, set selection range as of now. We want to select everything. So we'll be just going back and we'll be working on with this one. So this actually gets the job done. Majority of our work that we are working on. And now we can actually have any characters and stuff like that. I think 100 is too much. But we can just copy this. It not only copies, but gives the user a feedback. And the only guy which helped us to set this feedback is actually this password reference here. The use ref hook. So in this just one basic project which looked so much easy, we actually talked about the use callback. We talked about use effect. We talked about use ref. And probably we can talk about a couple of more of these elements as well. So yes, things can be really, really complex even when they look very basic. It's all about the mindset and the approach that you are taking to finalize or finish up a project. Within just what 40 minute ish, we were able to finish this entire project. But we learned so much. But your job doesn't finish just right here. You need to go on your own and study a little bit more about use ref hook, use a state hook, use effect hook, callback hook, there are too many use. But at least you got an introduction to this. So spend next two to three days in exploring more about these one. And definitely I'll be coming back in the next video with the next project and we'll be having so much more discussion. If you haven't hit that subscribe on my channel, go ahead, hit that subscribe. And I'll be bringing more content to this. Show some love in the comment section as well. That's right now, really, really, I'm in the need of that. That's it for this one. Let's catch up in the next video. It pretty much amazes me that how much we are going to learn within just one project that we're going to finish up in this video. This is going to be a longer one. Hey there, everyone. My name is Ateesh and let's get started and continue our React journey. We are into the world of React journey. We are trying to master React concepts, one at a time in each of the project. This helps us in building our portfolio projects so that this shows a constant learning journey that we have. We have ample amount of projects so that we can showcase them as well as can learn them in one go. When you build a kind of a big project, of course there is a learning there as well. But I believe that as a beginner getting started, building multiple smaller projects, which focuses on each concept one at a time is rather a better approach. So this is exactly what we'll be doing in this video. So let me first walk you through what we're going to build and this will help you to understand a customized hook. You will be able to build your own hooks just like we were able to use a state, use effect, use callback and whatnot. We will be able to design our own custom hooks. This will give you so much of confidence that hey hooks are not that much complex. I can design my own hooks for that. As a matter of fact, we will learn how we can make the API request and get some data from the APIs and can utilize this in our application. And we will also see that how a component is being designed, a reusable component. So far we haven't much focused on reusability of the component, which is one of the core principle and core strength of the React itself. So we'll be focusing on that part as well. So without a further ado, let me go ahead and give you an overview. Now that you have a list of what we are about to see, let's see that what we are going to learn in this project. So this is the project that we'll be building. Of course, it's on tailwind. So we will not be again much focused on how this corner radius works on. That's not our case. The goal is to understand the concept of the component reusability. The first thing that you can see here is that this component uses this top input component, which is exactly same. Only the data is getting changed, like from gets changed to to. The value here might change here as well. Then the currency type, this is exactly same. The dropdown list, this is exactly same here. And this is obviously same here as well. So no much big deal. If we design this component, it makes sense so that we can reutilize it later on as well. We won't be making any component for the button or the swap. This is exactly same. These are just used to change the to and fro values. So very simple basic swapping of the variables that we have. What's interesting about it is if you choose, like how much is the value for the 10 USD, and you convert it, it actually gets you the value. And the value that it is bringing up is actually coming up from a URL itself. And that is very, very interesting of a URL. Let me show you what URL we are actually using. So this is a URL. By the way, you can get this URL from the project description. So all the projects are available on my GitHub account. You can just get into that repository, that file, which I'll actually give you, and can grab this URL. The good thing about this URL is the end portion of this URL. At the end of it, you can write something like usd.json. And once you write usd.json, it gives you a key of usd and appropriate conversion of each values, like I am from India, so INR conversion of each of this is actually available. But not only that, I can make the conversion for, for example, INR. So all the currencies you can pass on in the URL itself, and it gives you like INR conversion, so how much one INR will be in each of these currency, that conversion automatically happens. Not a big deal. It actually converts a simple API, which does the multiplication. But this is a little bit complex of an API, then rather hitting the basic APIs. Like for example, there is this API.github, where you get the data. This data never changes. You get the data, arrange this data into some cards, some photos, or something like that, and you get happy with that. For example, we have another one, which is very famous project, which is random user, random user me. This is also exactly almost same. What you see on the data here, this is exactly the data. Only the data changes. The format never changes. No such thing. So this is exactly kind of a same API that we are handling. Here we are handling a tiny bit more than the previous one, because the INR changes here. We need to make a request here. We have to modify the URL, and then they get the appropriate things. And then the key value pairs, we need to actually get all the keys, so that we can show these keys all up here. So there's a little bit more involved in this one. So that will be taken care by the hooks itself. Very fun project. Initially you thought it would be very basic, but now you are realizing, oh, there's a lot of work that we need to do. And of course, Tailwind is going to be our friend for this one. So let's go ahead and get started with this one. So here's my source code. I'll just kill this one. So, okay, that's still running. I'll destroy this. And we have the fifth project being done. Now let's go ahead and take down the sixth project of this series. Again, same NPM create VIT, and we'll be using the latest. Just go for that. We'll be going with the very basics. So this is zero six, I guess. And this will be currency. All lowercase would be good. Converter. And we'll be, of course, React and JavaScript. And I love how easy it is to actually go ahead and work on with this one. Let's go ahead and open this up into integrated terminal. That's much more easier for me. NPM install. And we need to go ahead and install the Tailwind as well. So we can just come up here, the same guide of the Tailwind. I always come up here because anyways I have to do it. There is no point of doing it behind the scene and I don't really prefer that. So I'll just copy this, go back up here, wait for a few seconds till it loads all the things. Please don't mind me sipping some lemon water. Missing my tea today. But there's so much of these long videos that I need to grab something to drink. Okay, so the Tailwind is here and hopefully this will give us the Tailwind file. There we go. Tailwind config. And just like the previous one, we'll be just copying and pasting the content part since we are in the VIT content part is done. Next up is we need these directives. Okay, and this needs to go into source. Our main index.css. Remove everything, paste it up here. There we go. We also don't need anything from the app.css. So we'll be just selecting and removing all of this. We don't need it. Close all of this, close this. And save this and close this. Now, technically, in theory, we should have the Tailwind. But again, the only way to verify is via writing some of the custom CSS. Let's go ahead and remove this and simply have an H1. And we'll say test for Tailwind. All right, let's go up here and we'll be saying class name. BG dash red dash 200 should be good enough. And let's go back. We haven't run this. NPM run dev. And let's see. Okay, this is working. Let's go ahead and work on with this one. This is not really that much of a complex data or a complex project. We'll be working with this. So let's go ahead and work with this. Let's close this one. And the first thing that we'll be doing is let's just cut out all of this. We'll cut this one out, remove this one. Instead of this, we'll be having a basic dev. Let's have an H1. Now, inside this, we'll be having some of the classes. So again, the classes will come up from our code files that I already have when we build the project. So we'll not be talking about the code files at all. The only thing that we are going to worry about after this is actually one more thing. I want to add a style into this one. Now, after the style, we would love to have a simple background image just like this. But instead of the background image going like React logo or something, we will be actually getting the background image from. You can grab it from asset as well, but you can directly inject the URL. In my case, I'll be just directly pasting a URL. And let's go ahead and remove this. From where you can grab the URLs of the images, I'll show you resources as well. One of the resources that I prefer to use a lot is Pexels. Yes, I do contribute myself on Pexels quite a lot. These are all photos that I click. Feel free to choose any photo out of these, which makes sense to you. And we'll be searching for a photo that actually represents money or something like that. Okay, which one? This one looks good. I'll just copy the image address and paste it up here. And let's see how does that look. In the VIT project, there we go. So decent, not the perfect. We can definitely change the backgrounds and colors and whatnot, but I think this is good enough for us as of now. We'll be having a couple of more CSS and all these stuffs, but first let's talk about the functionality part. This is more than enough for us as of now. Okay, first of all, we need an input box. So the designing of input box is not really something which should bother us. This is how the input box looks like, but how to design the components which are reusable, what are the things we need to take care? That is what we are going to discuss. So inside the source, just rightclick and create a new folder. We are going to call this one as component or components, however you like. And the only component that we have as of now is input box. So let's create a new file, input box.jsx, of course, and rfce, rafce, yeah, that actually makes sense. Or I'll go for the rfce. Okay, rfce, there we go. Finally, we have an input box and we are exporting this. Now with the input box, how many other things you want to accept? That's totally up to you. I want to accept this label. I will be accepting an amount as well because I'll be using it from different perspective. In some of them, user will give the amount. In some of them, I'll be adjusting the amount. So obviously I need an amount. What happens when the amount change? So I need a method which will be responsible for changing the amount and that method will be state. So how we'll be doing that, we'll actually keep this method as it is. But in our app.jsx, there we'll be designing some of these classes itself so that we can have all these basic amounts and how the amounts are being set, currency, converter and all of that. But in order to have that amount, we need to have something which can set the amount as well. So that's my number one goal. What happens when the currency is changed? So this is something we need to take care of that. What happens when the currency change? So there needs to be something which is keeping a track of all these states. At least there should be a method. All the currency options, I will obviously be taking this one. So this is a input box itself. It doesn't do anything on its own. The whole idea and the whole job is just take the values and display them. That is what we have. And there might be cases. In this case, this is an input box or the input value which is disabled. So which currency, like you will be obviously reusing this. So which one you can enter the data and which one you want the component to be disabled. So you have to check for that one is amount enabled or disabled into that one, currency disabled. Like here you can see the currency is disabled in this one. And of course, if any additional classes that you want to give me. So there's a lot of data that we are getting through this one. And you don't know this data entirely at the first go. Eventually, as you want to make your components more reusable, you add this one. So let's go ahead and work on with this one. So first of all, we have this label that we'll be taking as a prop into this one. We obviously needs to take amount. These are obvious one. Now next, what we need to take is on amount change. What happens when the amount change? So something state needs to be there. Some method needs to be there, which keeps a track of that. And what happens on the on currency change? So this on currency change is what happens when the user changed the currency. How to utilize them? I'll walk you through with that as well. But these are some of the basics. Then obviously you need a currency option. Currency options. And we'll be setting up some of the default values because it will be an array. We expect that how we get the array, that is not our concern as of now. I want to get all these currency as in the format of array so that I can just loop through them and provide the values there. Now, obviously by default, we need to show some currency. So that also needs to be taken care of that. So we'll be saying we need a selected currency. And by default, we'll be going with the USD. And no suggestion there. Okay, this is my by default currency. And do you want this amount to be enabled or disabled? That somebody needs to tell to us. So we'll be saying amount disabled. And by default, we'll be getting a false value because we don't want to disable it by default. If the user asks us, we will disable that. And we'll be also checking the currency disabled. So if the currency is enabled, disabled, if the user is allowed to change the currency or not, it's totally up to you. You want to have it, have it. If you don't want to have it, that's okay as well. So we'll be saying currency disabled. By default, that's false. We'll also take some of the class name as well. This is a very common pattern that you'll be taking a lot of class name. Of course, you will be designing our component, but you will also give the user a chance that hey, I'll be allowing you so that you can actually get all of these values. All right, so now let's go ahead and design this input box itself. First of all, we'll be having some of the classes as well. Classes I'll be copying and pasting from here itself. Now we won't be putting the classes just like the strings because we'll be taking some of the classes as the props. So we need to keep a safe area where I can inject the classes which are injected by somebody who's using our component. So we'll be just removing this one here. We'll be injecting our JavaScript here. Now in the JavaScript, of course, we can use the backticks. Now the advantage of this backtick is since I've taken the prop, I can just use my fillers here and can add the class name here. Now this is something which user is passing, but since this is just a string, I can just go ahead and copy my CSS classes that we have. So there we go, really basic, absolute, nice. Okay, let's go ahead and remove this. So this is our basic card that it was designed. Let's go ahead and design this class. This is also going to have some of the class names. Let me grab the class name. It's simple with, we want to be half of it. So we'll be saying one by two, very basic. Then we'll be having some of the labels and input. So let's first grab a label and label HTML for, we will be injecting some of the JavaScript here in a minute. Just wait for it right now. We don't want to have it or let's just remove the entire HTML for a minute. Then we'll talk about the usability and how we can actually make it more accessible. Okay, we have some classes here as well. So let's go ahead and add a class name. I'll be adding the class name from my notes, copy and paste. Classes, we won't be talking even a tiny bit. We'll be always getting it like this. And this will be adding as a label. Remember, we don't want to hard code it because user will be using it this label for multiple purpose, maybe from, maybe to. Okay, this part is all good. Now, once we have this label inside this, we want to have an input field. So we'll be having an input field just like this. And let me just break it onto the next line. There we go. Now this input field will have a type of number because that's what we want. Number, there we go. Now what else do you want to have into this one? There are multiple fields that you want to have. First of all, let's take down the obvious ones, which is the class names. And again, the class names goes as it is, whatever we have in notes. Don't really care about it. Don't want to even talk about it. Then we have the type. Then obviously let's grab a placeholder value. You can grab the placeholder value as whatever you like. We'll be just saying it as amount. Depends if you want to take this input as well from the user, you can take it. Right now, if I don't enter anything into this one, it is, this one is zero. This one actually doesn't do anything. So it's always zero, totally up to you. If you want to put this placeholder, any value or something like that. Okay, next up is, is the field disabled or not? That depends on amount disabled or not, whatever the value you have given by using this one. The value, the value is going to be amount. Whoever is using it is going to give me. But the most important thing is if you just keep it as it is, then obviously we'll be having some amount, but there is nothing which is helping you to change these values. So what you have to do is this method on amount change will be responsible for changing the amount. So obviously we have to listen for an event which is on change, on change. And we have to use this on amount change, but we cannot just use it like this. Otherwise we are never using the method. We have no idea about the functionality or anything of that. So just cut this out. Here we want to use a callback. Let's go with this. And obviously we'll be tracking an event. So let's just call this one as E for an event. And then we have to first make sure that we have the presence of this on amount change. This could actually make or break your application. So for the standard practices, such values are being checked first. So we'll be checking on amount change. If this on amount change exists, then we go ahead and say that use this on amount change and get an E.target.value. But again, there is a problem into this one. Whenever you grab the values like this, you will be grabbing a string and we don't want a string. We want actually a number out of it. So before we actually grab it, we'll cut this out and we'll be casting this one as a number and then E.target.value. These are just additional safety checks. Nothing to be worried too much. We are just trying to make sure that our code is as standard as possible. And these are only, only safety check. If you directly come up here and say E and then simply say on amount change E.target.value, maybe your application might work and eventually you might have to debug, but this is a good standard practice that we have. All right, so this is all good. And now we have to go ahead and work on with this one. So this is a part of only having this part, the currency, the numbers and everything. We have to work on this currency type as well. So this is the second portion where we'll be working on. So let's just go below this div. We need to have another div. This one obviously will have first the class names. And let me just grab all the classes. So this is the right portion that we are working on. Notice here, the currency type and USD. So this is why we have flex and all of that. So the next part is all about it. Let me go up here. First of all, a simple paragraph that says currency type. So nothing extraordinary currency type. It always is currency type. So we are, we are done with that. Now comes up the interesting part is how we are going to take care of this USD and all these input values. Now this is a select field. So let's go ahead and grab a first of all, a select field. There we go. Now in this select field, first and foremost, let me just grab on to the next lines. And here also you go away. Okay. First of all, class name, because there's a styling involved into this one. Not worried about styling, even in case, I highly recommend you. In fact, you change the styling. At least you will be contributing something in the project. Your hands will work onto the keyboard and that's always a good thing. Now what should be the value? The value should be based on the select currency that we have, a selected currency. Notice here, we have the selected currency. As of now, we are taking this as USD by default, but users should be able to allow it and change this one, but we are happy with this selected currency as of now. What happens with the on change? There we go. Now again, you might have noticed the exact same pattern that we are following. We will be following this one as well. Here we chose an event. We said that whether this on currency change method is available to us or not, and based on that will work. So very repeatable pattern. So yes, we'll be seeing very standardized code in this entire series. So we have this event. After that, we go ahead and check. Do we have this on currency change? If we have this, then we go ahead and use the second part of it, which is on currency change, and we simply go ahead and grab the e.target.value. Here, we don't need any number casting or anything because these are just strings, all right. Okay, next up, is this field enabled or disabled? That maybe you want to design an application which is disabled, having these field disabled, but in our case, disabled currency disabled is mostly false, but maybe you don't want user to change this type. It's always USD to INR or INR to USD. Maybe that's the case. So we are just taking care of that. Okay, select field alone doesn't work. So we need to have these options getting inside this one. For these options, we obviously have to loop through the values. So we'll be using our JavaScript here, and inside this, we'll be saying, hey, all the currency options that you are providing to us, remember currency options is an array in case you forget. This is the currency option, which is an array. I want to loop through this value. Looping is pretty simple. I just have to say .map, and there we go. This is my map. Inside the map, I'll get a callback. So let's go ahead and grab a callback. No problem at all. And in each of this, you will get a currency. So let's just call this one as currency. Now with each of the currency, what we'll be doing, instead of using curly braces, I'll be using parenthesis so that I don't have to return anything. I'll just go inside this, and we'll say that I'll get an option. So option and thank you. The key is going to be currency because we know that our API actually gives us these values. And each of these values are actually in itself unique. So we don't have to worry about it. All the options that we get into the array, we will be crafting and designing that in such a way that each of the currency is unique in itself. The value is going to be currency, and this one is also going to be currency, too many currency, but this is how exactly options and everything works. Remember, a lot of people did the mistake when I was teaching it earlier. A lot of people just use the curly braces here, so make sure you don't do the mistake. All right. So this seems like a very nice approach that we have taken of designing an input. One more feature I would like to discuss, not a feature but a standard practice that is used quite a lot, is once you have designed these components, you actually have these index file into these components, not necessarily, but usually you have. All you do in these files is actually you go ahead and import these input boxes like this, and just go ahead and export like this input box. The advantage of this is I don't have to actually go individually in each of the component. All I have to do is import the components, this index file, and I can bring in any component in this one. Maybe later on when we'll be designing, of course we'll be designing. There might be five, 10, 15 components in each one of them. Having all of them listed in index is actually a better thing. So that's what we'll be using. Nothing too much to be worried, but yeah, these kinds of things do exist. All right. Moving on, let's take care of the URL part. So we have this URL we'll be working on with this one, but the way how we are going to take care of this one is via designing our own custom hook. You can of course do all of this into your use effect hook, into the app.js as well, but there's so much of the things that we actually require from this that I don't want to do all of this mess into app.js, rather I prefer to do all of this into a separate customized hook. By using that hook, I will return the data, whatever is required. All right, so let's go ahead, right click, create a folder, and we'll be calling this one as hooks. It's totally up to you how and what you want to name this one. The only kind of a standard practice is to use, use before hooks, too many use. Use, use effect, use callback, whatever that is. In this case, we will be using use currency info. That is our hook, use currency info.js. And now what we have is we'll be, we just write simple, this hook is actually nothing more than a function. So use your classic react, use your classic JavaScript, fetch the API, get the data, and return the value. That is it, that is literally your hook. So we'll be needing some of the stuff. Obviously we'll be needing use effect and we'll be needing use a state, of course. All right, now let's just go ahead and simply say, hey, we'll be having a function. That function will be use currency info. Nice, all of this is provided to me, but I'll be writing that anyways. So use currency info is my hook. And after that, we'll be saying export default, use currency info. That is all good. Now, how we are going to go ahead and work on with this. First of all, whatever the data is I'm getting retrieving from the API call, I need to store that. So for that, I'll be saying that let's call this one as data, set data, and by default, this is not an array. That is a wrong suggestion here. If you notice, this is an object. Notice here, this whole thing is an object and I want to store this object up here. So we'll be working on with that. Okay, now how can I go ahead and fire this up? As soon as somebody uses this hook, so as soon as this hook will mount. So again, this hook is nothing more than just a function, just like your app.js is a component it mounts, this hook will also mount. So I can go ahead and use a use effect here. And we use a use effect snippets right now on which you are dependent. You are dependent on a couple of values, but oh, one more thing. Whenever whoever is using this use currency info, he needs to provide me the currency. Otherwise, how will I know that in what currency you are looking for data? Because my API looks for INR as well, it looks for the USD as well. So you need to provide me at least one data that based on this, I want to call the API. So once you have this currency, I'll first remove all of this part. It's not, it's a boilerplate code. And I'll also remove this third, which is boilerplate code. Now anytime, anything changes INR to let's just say USD, I obviously want to refetch the request. So the dependency of this use effect is obviously the currency. Any change in the currency, I want to refire this one. For here, I can use XCOs as well. I would prefer to use XCOs, but in this case, I'll be using just the fetch. So I'll be saying fetch just like this. You can await, use however you like. I'll be using backticks in this one. Now just go ahead and copy this data and I'll paste this one. The only thing that I have to do is just change this USD. That's exactly what I was changing in the URL as well. So let's just inject our variable just like this, absolute basic and just add a currency. Whoever is calling this hook as actually passing me this variable. So no problem at all. Now, once we have this, then obviously based on this, we'll be having a .then or .catch, whatever. So we'll be using a .then. Inside the .den, we will be having a callback. So just like this, there we go. And we will have a response. This response needs to be converted into JSON because sadly I'm not using an XCOs. I'll walk you through with the XCOs as well. That's much, much better. I don't have to do this JSON conversion and everything. After this chaining, we need to further chain on one more because that's where we actually get our data. So we can call it with any other name as well. I'll call this one again as a response. And once we have this response, we'll be fetching this entire response into the set data, the data, the state that we have designed. And inside this one, most importantly, I cannot just go ahead and say set data like this. Of course, this is a method, but what data? If you notice here, this is exactly I don't want to fetch it entirely because this also includes this date component. I want to insert only one key there, whose value is USD. So I want to insert the data from the key of USD and this whole thing I want to inject, not the date. So for this, I can actually go ahead and access. So all this response, this whole response is. So from this response, whatever that is, I want to just go ahead and provide this USD. So there we go, USD, but this USD changes based on INR. If we have INR, this changes. So this is exactly the currency. I can go ahead and paste this currency, cool. Okay, so this one is nice. All right. So all we have got this one. Now, now what we want to do is, whoever is using this hook, we actually need to return the data to him. And what we are returning back, if you notice it closely, we are returning all of this guy here. So this is again an object, but in this object we have key values. So 00, Lynch, whatever that currency is. I have been to most of these countries and trust me, I have traveled around 40 countries. A lot of them, I don't know. Okay, so this is what we have. So as you might have noticed, the designing the custom hook is not that much bad. It's actually pretty easy. This is just a basic function. We could have done this all into app.js as well, but this would have unnecessarily just complicated the stuff into the same file and segregating your logic is always a good idea. And by the way, in case you want to have this, there is absolutely no shame in just console logging the data. In fact, when you are learning the things, it's a good idea to logging every single thing, finding its data type, finding its value. I encourage that quite a lot. Okay, so, so far all good. Now let's go back into the app.jsx. Finally, we are in here. And now let's take care of a lot of things because all the things are actually dependent on a lot of the things that we are doing. For example, this input box, from where you're going to give me this label amount, all of that, some place you need to give it to me. And that place is basically your app.js. So this is where we'll be going through. Okay, let's design a lot of states. So we'll be getting an amount and set amount. Okay, we'll be getting a use state. Okay, cool. We also need to get a from. So we'll be saying from. And this one is going to be set from, by default it will be USD. We also need to have a to. So set to, set to is no, not Euro, not Euro. That's very expensive. Of course, I live in India, I'll go with the INR. Then we also need to give the converted amount as well. And this will be converted amount. And that will be set converted amount. By default, it will be Zuri, zero, not Zuri. Okay, so this is the converted amount. This is what we will be filling the data up here. Okay, and a couple of more things. Actually, I forgot one thing to actually discuss with you. I should have discussed that earlier, but let's go back onto the input box. Now this is something which is not really necessary, but still I'll discuss this. I'll talk a tiny bit about it. There is one more thing that we can do is make it a little bit more accessible. Although it is not required, but we can actually do a tiny bit more. Now we know that we have a lot of options that are going on into this one. And for all of these options, notice here we are having this label as well. So this label, if I click on the form, it highlights this input field. So how can I go ahead and take this one? Because right now that's not working in our case. In this case, we have a label, but it doesn't have an HTML4. And in this, we also don't have anything. Now there are a couple of ways how we can do it. First of all, we can just go ahead and say HTML4. Okay, no suggestions. And we can just go ahead and design a simple variable, or we can just give it a name itself. HTML4 is currency like this, of course, in double quotes. There we go. And similarly in the input also, we can give that, hey, what's the ID of this one? So HTML4 and this one is ID, because these are actually interrelated. We can give a currency. This will do most of our job. We don't need to actually worry too much about it. But you will notice in a lot of production grade code, especially the fan companies and big shots, they actually use something known as use ID. Yes, there is another hook. The whole idea behind use ID is to generate unique IDs. Yes, that is by default in now in React. And you'll see a lot of people use it in this format. So once I go back in before the return, I can just go ahead and say const ID as use ID. Now it generates unique ID for me. And all I have to do is just inject this ID here instead of currency. I could have done that with the currency as well, but hey, this is how a lot of people does. So I just want to show you that yes, this is also a good practice. How much value does it add? I don't know, you decided, but yes, this is a common thing. So I just wanted to have it. We have it in the notes to be discussed in this entire bootcamp, but yeah, pretty good, pretty good. Okay, moving back, coming on to this one. So we have a lot of converted and all of this. Now, coming back onto this use currency info, we have designed a hook for this one. This hook returns me a data. So how can I go ahead and use the value of it? Okay, let me show you. Almost all of the hooks that you have seen is just a function and it returns some values and we stored that value into some variables, arrays, objects, whatever that is. Exactly like this, we'll be having these things. So what we'll be saying is I want to have this use currency info by the way, please import this however you like, I like this one. So this is my use currency info. This hook requires a default value. So I can just go ahead and pass on a USD, but why to pass a USD like this when we have all of this being set in this from? So let's go ahead and remove this instead of hard coding. Let's go ahead and do from, no suggestions. Thank you, wrong suggestions. Now just hold the entire thing into a variable and we'll be calling this one as currency data or currency info would be good. That's it, we have designed a hook and you have stored all the information. Always remember what information is coming up to your data. See, most of the errors actually come up even in production grade still, it's been 12 years, still most of the errors that I do is wrongfully judging what type of data that is coming up. Here it looks like that use state is an object and stuff, but you need to be 100% sure that the data, this data when it comes to here and is being called as currency info, what is this? This is an object, this is an array, this is a number, whatever that is, be 100% sure about it. And that is why a lot of people prefer to use TypeScript just to be safe that what kind of data is coming into the picture. All right, enough of the site talks. These are experienced talks, I think these talks actually add value. Okay, now we need to grab options. Why options? Why are you grabbing options? Because if you remember, I have this USD as a long list and I need to extract this, just a second, I need to extract all these keys from it. So these keys are important for me and these keys are actually option in my input box. Yeah, that's why I'm pulling out all these options. And turns out pulling out this one is actually piece of cake if you have studied JavaScript. So object has a method of .keys and inside this keys, I can just go ahead and say, hey, I'll grab the keys from currency info. No need to add rates or anything like that. That is it, I have my keys. All right, pretty good. Now I have my options and all these values being designed, nicely added and all of that. Now, what happens when you actually go ahead and actually click on convert? Actually, to be honest, nothing happens. You already have all the information with you, you have your amount, you have your currency info as well and in whatever the currency you want to convert, you can just grab it. Now you have all the options available for you. So from this entire currency info, you want to find out INR, how you will find INR from here, just by searching for INR. So if I search for INR, that's available to me. Similarly, if I have to write a function for this, it's super, super easy. Let's just go ahead and call this one as convert. There we go. How do I do the conversion? It's super simple. Use first of all, set converted amount because that's what this is, converted amount. And all you have to do is take this amount, whatever the user has given to you and multiply it by the currency info, which holds all of these keys and multiply by it's whenever we say square brackets true. And by the way, you can access objects with the dot notation as well as with the square notation, just giving you too much of information. And in this, I'm just setting it to INR. So I'll just find this value and this number and I'll multiply it by that. So that is it. Told you, super, super simple. By the way, we have this also method. Let's design this, which is swap, which just swaps the value. And you might have already guessed that how that actually works. Super, super simple. We are just exchanging the value of from and to. That is it. That is it what we are doing. Let's go ahead and design this. We'll be having a swap and the swap is going to look like this. So notice here how we are swapping it set from to to and set to to from. But we also want to change one more thing once we actually go ahead and say, let's just say there is one here. When we swap these, these numbers also get exchanged. So notice here, the numbers also get exchanged. That is nothing. It's just the set converted amount getting changed with the set amount. That is it. If you want to do that, otherwise you just reset them. So we'll go ahead and say that, hey, I'll have the set converted amount to be changed as simply just the amount. Amount. Yeah, that amount. No, no suggestions. Thank you. And we'll also set amount is going to go ahead and change with the converted amount. There we go. That's it. Now all the functionality of the swap is all done. All right. Now that majority of our task is done, let's go ahead and add more of the values that we have. So we have this test for tailwind. We don't need this. Let me go ahead and add a couple of divs up here. Let's remove this again. This is the most boring part, but we have to go through with this one as well. In the later on projects and application, I'll give you the code file, which is helper file, which actually gets all these components. So they can just copy and paste. For rest of them, I have that. Don't worry. So width is going to be full. Okay. Once I have this inside this div, we will have another div. This div also have a class name. Let me grab all the classes that we have. Copy that, paste it up here. There we go. Looks decent after this. And finally, we'll be having a form because this form is actually a submit form. So that's what we are using. Let's grab a form. This form has no action, but it has some things known as on submit. And what does this on submit does? Of course, fires an event. That's what all form does. And we'll be taking this event and couple of things. First of all, stop prevent this form from submitting to some URLs. So that's pretty easy. Event dot prevent default. That's classic. And then run our simple convert method that does all of the magic for us. Now inside this form, we need to add the input box and all of these things. So first of all, we have a div here. That div also has some classes. Super boring. Not too much. Not too much. Like this. Okay. And once I'm inside this div, we have the first input box. So let's grab the input box. Let's bring this and let's see how it has brought the input box. So it has brought the input box from component input box. I would rather prefer it to actually grab it from index itself. Index dot JSX. Did I mention? No, it's JS. So I would prefer to get it JS. It's not like wrong to get it from input box, but it's better to actually grab it because eventually when we'll be having 5.10 on all of this, it's better to actually grab it from here. And again, once we are grabbing it from here, the reason why we actually need to change this because we have exported it like this. This is not export default. So we need to actually grab this. That's it. And then if we have more, we can just set the comma and just have it. So very common, but just wanted to show you all the good practices out there incorporated into this application. Selfclosing. Now it's time to provide the data to this one. So first of all, label. This label is just the from. So we don't need to do like this. We'll be just saying this is a from. Amount. Amount obviously will be taken care from the amount, the state that we have designed. Then we have to provide the currency options and currency options are in options. If you forgot, these are options. We derived from all the keys. So that's what we are passing. Then we have to provide the options of what happens on currency change, on amount change and all of that. So we'll be first changing on currency change. What happens when the currency is being changed? When the currency is being changed, obviously we are tracking the currency into this from. So this is a from. So we are tracking the currency from. So let's go ahead and fire an event and update the states based on that. So we'll be going like this. And first of all, this one is going to take on the currency change. It's having a default value of currency. Currency, why there is no suggestion. Currency, it should be having a currency. Let's call this one as currency, whatever the currency. Right now it's USD. So as soon as somebody changes the currency, we can come up here and we can actually remove this and can have the set, set amount change, set from, yep, set from and inside that currency will be changed. So automatically the new string value of the currency comes to us. So that's first part. Next up is on amount change. What happens on the amount change? We'll be taking the amount and we will be, let's just use this one better. On amount change, first of all, grab the amount. Okay, I grabbed the amount. Then after that, we can actually change the amount. So on amount change, we'll be setting up the amount. Oops, my bad. On amount change, yeah, there we go. We'll be setting the amount to the newer amount, whatever the amount is being changed. So on amount change handles that part. And we will also be needing a select currency, whatever the select currency is. So selected currency is we are going to grab it from. So there we go. All right, so this is what we have as of now. Let's see if our VIT application. So notice here we have this all from USD, all the values are being properly passed, but this is not enough. We need to have one more here. We'll be having a button here. So just outside of this div actually, we added another div, yeah, too many divs. And class name, very boring. And have this currency name, copy this, paste it. Inside this, there is a button which has a ton of classes. And this one is say swap. Okay, the easiest part I know, which is on click, and this will work as it is, if you just go ahead and do a swap, save this. And yeah, it works, but we don't want it to look like this. So we'll be just adding some classes. Okay, I could have done this entire project without the CSS, but again, a lot of people just appreciate the content if it looks good. That's why we spend extra time in working with this one. All right, so button is all good. Now we have this div. Let's go ahead and just grab all of this, copy this and paste it up here. So we have the same input box, but we need to change the values very carefully. In fact, so much carefully that when I actually did it on my other channel, yes, I do have other channel as well, I actually made a mistake on this. So this time I want to do it more cautiously so that I don't do the mistake. Okay, first of all, label. This time I know the label is going to be two. All right, what are the currency options? Easy peasy, I can give the options all to it. Then whatever the amount is, amount will be derived from the converted amount. This is a read only input field. So I will be giving it as amount disabled as true. I can give it like this, or if you just pass it on like this as well, that is also considered as true. All right, so that part is being taken care. Okay, now let's go up here. First of all, what I want to do here is on currency change. What happens when the currency changes? So when the currency changes, I need to first grab the currency, whatever the currency is. So I'll just grab it. Okay, and then I'll this time change the set to currency, and I'll change it to whatever the currency is. So set currency, set to and currency. I think that should be all. Now we also need to provide a selected currency, whatever the selected currency is. And in the selected currency, I can just go ahead and give an INR, but that would be bad because that's hard coded. So let's derive the value from the state itself. We're tracking this into a state known as two. And that's why we actually created this to, here it is, to and from. So this is what we have. Now, hopefully in the previous we did mistake, now this is working. Previously, if I change one state, it changes another state. Probably I did some mistake or something like that. Okay, anyways, let's go ahead and finally add the last button that we have. Very long video, but it's fun. It's fun, I hope. I hope it is. Just let me know in the comment section. I desperately read all the comment section and feedback from the students. That's my fun. Okay, we'll be saying convert and the button needs an on click. Obviously, we don't need on click actually. We need on, we don't need on. We need just the type of submit, that's submit. So it automatically submits. And obviously we don't want to convert to look like this. So you get that, we'll be adding the classes. Our classic classes. Copy that and paste it. Hopefully it looks good. There we go, looks good. And we can actually go ahead and try this. So let's just go ahead and USD. How much is five USD and we'll convert this. It's good amount, it's good amount in India. Okay, you can go ahead and remove this long string. So when the conversion is being done, you can actually use your JavaScript skills and stop this to just two numbers. I'll keep this one as up to you. But if you'll notice into our original app, we actually say it convert USD to INR. And when we change something to INV or something, it changes, so how we can do that. Super easy peasy, nothing. Just start your JavaScript and then just say that, hey, I want to use from and to and start your JavaScript and we'll be just saying to. And that's it. So if I go back here, it says USD to INR. Maybe you won't have to all uppercase. So it's also super easy because I know these are strings. I can go ahead and use to uppercase. It's a method. And similarly here to uppercase, this is also a method. And there we go. Easy peasy JavaScript, there is absolutely nothing. But if you look at this code base, let me give you a summary of this that all what we have done because there's so much into this video and I know this is a long video, how long almost are 40, 50 minutes. So we started by building our components. We studied the component and there is no way that you'll be designing a component this perfect when you'll be designing. Eventually you'll be keep on adding the data to the component. Maybe initially you start with label amount, that's it. Then eventually you add a currency options that I want to make my component more reusable. So it's not like on the day one, we designed it like that. Eventually we upgraded it. And that's a thing with the tutorial because you don't want me to sit here for six hours for building this kind of application. So obviously tutorials are more polished. So eventually you'll be building all these things. Don't worry, when you'll be designing the components, you'll be not designing this as perfect. Then we studied that how we can actually just simply take the values and ultimately what we did is just have an input field. And here we just had a select option field. So we just studied about how we can add an options field just like this. That's all what we did. Optionally we studied a little bit about the use ID hook, not very much used, not very highly implemented, but a lot of people use it. So I just thought to have a discussion over it. Then we studied a little bit about the index way of importing the component. Again, there is nothing, nothing wrong in importing the component from the component file itself. But eventually in the long run, this will make your code more scalable. That is always a good idea. And then we went into learning about the customized hook. This customized hook, as we learned, is nothing, absolutely ignore these X4X. These are coming up from one of my plugin that I have, sorry. This helps me to design the application faster. So we learned about the hooks as well. In the hooks, we saw that it's just a function, nothing else at all. This function requires a currency. And as soon as this function loads, whenever you call it, then it will fire a use effect. So at that point of time, a hook is automatically being called. This hook is fetching onto a URL. This URL you can grab from my GitHub account onto that React. I'm actually pushing this all the code on the GitHub as well. You can grab this URL. The only thing that we are changing is the currency. So we crafted the URL according to us. Then we simply taken the response into JSON and then we simply extracted some values out of it. We studied a little bit about properly looking at the URL and what the data we are receiving. So we studied that in this data, we don't want everything. We just need this INR and this whole thing. So we actually derived that value out of it. So we simply said, hey, I don't want all of this. I want just the currency part. So that currency part is obviously this whole thing. So this whole thing we extracted. Very basic data nitpicking. You'll be doing this quite a lot. And then we console log this and we actually returned the data. That's it. That's our hook. Now inside this app.jsx, we used the state to track all the values that were required for us. And in this portion, we use the hooks as well, our own custom design hook. This hook gives us the entire object. Out of this object, we extracted the keys because that is something we want to pass on. Classic JavaScript, nothing reactive about it. Then we studied how we can do the swap. Absolutely basic function. Converted was absolutely basic. This is just one liner code. And that's why a lot of people hate. I don't want to build a currency converter, just one liner. But ours is not. Ours is way more complex and way more scalable as well. Then we simply did all here. Here it was all boring, the input field. But hey, cautiously add your data because I did a mistake when I was teaching it on my other channel. But it's good. It's good. You learn from your mistake. It's no big deal. It takes just a couple of hours of debugging. Nothing more than that. So that is all what we have as of now. And I think this video has helped you a lot in understanding how the React works, how the big scalable projects are being taken up, and how we constantly move on further. Concepts are pretty easy when you're with me, of course. Leave down a comment. It really, really helps me. If you're watching the content, I know a lot of people are watching. And when they don't leave, just a thank note in the comment section. I'm always somebody who's looking in the comment section and finds it empty. It's disheartening. So please leave the comment. And I'll be thankful to you as well. That's it for this video. And let's go ahead and catch up in next, another such project. All right. Moving our journey further into the React ecosystem. Hey there, everyone. My name is Ateesh. And welcome back to another video. This one is also going to be a bit relaxed, chill out, enjoyable, slower guide on exploring another concept in the React world. Now, well, the concept in the React is single page application. That means there is no pages in these applications. It's just one page. And the whole idea of the React is I'll take the component, unmount it in place of this. I'll mount this one. So the whole idea is to manipulate the DOM as much as possible. When you actually say I want to go into register page, React never goes anywhere. It's a single page application. It removes some of the elements from your home page and injects some of the React register page on there. It removes the register page and injects the login component. And once you are successfully logged in, then it removes that and gives you a dashboard just right there. And your page never, ever refreshed. But this is not ideal for a regular user. A regular user doesn't really understand. And we cannot train the entire world population how to reuse the internet just because we have designed a new framework or a library. So the concept of moving users onto different URLs, like register page login, is so common that if you don't do this, people might think that it's very suspicious and it's not really a great thing for the URLs and the safety precautions. And that is why we need to figure out a way that how we can artificially inject the routing so that the URL looks great and user feels like they are moving onto a different page, although it's just react at the behind the scene. It's just a single page application. And yes, everything happens artificially. That is just a simulation being done that you are onto different URLs. Your page will never refresh, still the React concepts, bringing in the components, injecting the components, and all of that. So we'll be learning one such way of doing that. By the way, this is a core React course. That is why we are discussing about the routings. By the way, on my channel, you will find there is a Next.js playlist separately available. So in that we don't discuss too much of routing. That routing is different. And by the way, in case you are just interested, I do have a separate video on my channel in which I have showed you that how the Next.js routing can be designed customizably. Yep, your JavaScript, how the React router works. Anyways, let's move back. So in this video, first let me show you what we are going to build. And then I'll give you some of the concept of how to study the documentation and figure out things on your own with the React router DOM. That is the library which we'll be studying. So let me first take you onto the screen. There we go. Sorry we don't have any dark mode for this one. But this is the application that we'll be building. Luckily, you don't have to worry about CSS. I'll be giving you some of the files. I'll show you that as well. So this is our home page. And I recommend you to notice the URL. This is the home page. When I go onto about page, this is slash about. So this is simulating that you are moving on to the next page. But end of the day, this is just React. Our navigation bar never changes. Our footer also never changes. They stay exactly the same. So if I go back to the home, navigation bar remains exactly same. But our URL changes a little bit. So we have a home page, about page, and a contact page that we have. And similarly, we will be having a GitHub page. But the GitHub page additionally will do something different. The GitHub page will show my photo as well as my GitHub count. And we'll see that how we can optimize it through the React router DOM, which is the library we are using. And for every single time, we have these applications going on like this, GitHub and About. We'll also see how we can grab some of the URLs and whatnot. There's a lot more that we'll be studying than just being shown on the website itself. And the package that we'll be studying is React router DOM. It's available on reactrouter.com. It's by the Remix team made by Remix. And what we'll be doing is there are a lot of ways how router actually evolves, and especially the version 6, which we are at the time of the recording video. This is the newest one. We'll be using that one only. But I'll walk you through how you can actually explore the documentation. Otherwise, my channel is always available for you to help. But we'll be seeing that how we can use the 6 version. We won't be talking about the 5 at all. We'll be seeing that how we can pick up different variations of the router. We'll be using the Create Browser router. And the whole idea is to study this piece of code so that we can load things on our own and can design the routing for this application, this sample application, which will give us the entire idea of how the application is built or should be built and all of that. We'll see some of the optimization tasks and techniques and whatnot. So everything will be pretty nice up there. All right, enough of the talk. Let's go back on to this one. And by the way, one more thing. If you'll go on to this one, so I have a repo on my GitHub account, github.com slash at the chaudry. You can find a repo with the name of React English because these videos are in English. And you can see that there is a React router notes.md. The file is available for you. This is a markdown file which will help you to actually grab the components. Like, for example, for the header part or the navigation bar, this is all the code which has nothing to do with the React routing majorly. It's just a CSS. Similarly, in the footer, if you check out the footer, this is just a static footer. We just need it to understand a few concepts. It could be just one liner, but nobody gets impressed with the one liner text. That's why we are actually giving it to you. So you can find the footer component, just copy and paste it. And then similarly, we can have home component and contact us page. That's it. GitHub will be designing on our own. So that's the basic part of it. So let's go ahead and create a fresh new project and work with it. OK, let's grab and there we go. OK, so first of all, let's kill this. We don't need you. And let's go ahead and work on with this. Just give me a second. I'll align the things and remove this one. Let's start a fresh one. And we'll say npm create wheat, not react. And this one is going to be an introduction to just the routing. So we'll be calling this one, I guess, the seventh application that we have. So 07. And we'll be saying react router. Package name is same. We'll go with react and JavaScript. All right, so this seems good. Now we need to go inside the folder. But as you know, I prefer to actually right click and open the integrated terminal. That way, I'm always into the root. So I can just run npm i to install the application. And we can actually go ahead and move on to the browser itself. Let me go ahead and get into the browser. And how we can actually install this. So there are main concept, migrating, all of this. Let's go on to getting started. And there should be getting started guide tutorials. Yep, the project install. Just get me the npm install command, or I'll do it myself. OK, no examples. FAQ main concept. OK, I understand the main concept. Just give me that path. OK, probably it's not going to be. Nothing, it's a React router DOM. So I'll just install it. So npm install, it's React. Somewhere it is, I'm not able to find it. React router DOM, a very famous package. If you are any time working on the React, this is the package you will be dealing up with that. Now, in this package entirely, all you have to do is go with the main concept. This is really the essence of how to understand the React router DOM, what happens, how it happens, and a lot of essential things are mentioned in this one. So how you track the URL, how you track the location, forceful, although we'll be studying a lot of it, especially the router inside when we'll be building a mega project finally in this series. So all these things like clientside routing, the location state, and all of that will be taken care there. But if you have time, go ahead and go with the main concept. Some of them we'll be studying here, like the path patterns, what this is, how to grab the URL params, dynamic routing. We will be studying in this one. But definitely, this is a very rich guide. These kinds of concepts, these all will be taking care of this. But it is always a good idea to actually go with the main concept documentation. This is the part where you study and you read out the stuff. Moving back, so now everything is installed. Let's first go ahead. We'll be needing tailwind as well, because if you look out the classes and all of that, yes, there is a lot of tailwind. So let's go ahead and install the tailwind as well. One more time, in fact, a lot more time will be coming up in the future as well. OK, so this is what we have as a tailwind. And we need to actually copy the content. I'm pretty sure you might be just kind of memorizing this at this point of time. OK, the content will be replaced. Save that and go into main.jsx. No, index.css, remove everything, and we'll be grabbing these ones. Copy them and paste them up here. Save that. We don't need anything into the app.css as well. Just remove everything. We won't be using actually the app itself. OK, further, let's go ahead and run npm install, npm run dev, npm run dev. And that should be up and running on my system. There we go, basic. Since the app.jsx is anyways getting loaded, let's go ahead and at least grab some of the values out of it. So we'll be saying h1 of React Router, React Router DOM. And we'll be saying, let's add a class name. And we'll be saying bg dash what? Green. Suggestions, yes, bg green 300. Let's see, yeah, at least our tailwind is working. All right, we won't be touching this thing here. We'll be getting started with a couple of routes and folders and basically trying to get a feel of how the entire thing actually works. So first thing that we are going to do is there is always components or some people call it as pages. Totally depends on you how you want to call it. We'll start by calling this one as component. Eventually, as we go into the mega projects, we'll be designing components and pages as well. But these are just file names. Nothing really bothers us. So we'll be calling this one as components. And this is just a directory structure. Each instructor is going to give you their best or their practices, which is being used in their company. We'll be creating a couple of folders first, and then we'll be going through with that. First of all, let's go ahead and call this one as header. Inside the header, I will have a new file. And I'll call this one obviously as header.jsx. Now, nothing much in this file. I'll just say this is a div, which says header. That is it. Absolutely that. Nothing more than that. Now similarly, in the component, there will be a new folder and we'll be calling this one as footer. Inside the footer, we'll be having a new file, which we are going to call footer.jsx. There we go, rfce, we have just footer. This will help us to understand some of the main concepts of how things are actually being done or how things are being laid out. All right. Now, the next thing that we are going to do is once we have these headers and footers, we will be replacing them with the notes that we have, because if you remember, this is where actually our component comes up. This is where the header goes. This is where the footer component goes and we'll be talking about them as well. But right now, this is all what we have. Now, after this, what we're going to do is, this component will be closing it down. In our main directory, what we're going to do is, we won't be using this app.jsx, although you can, no big deal there. But I'll be creating one more file inside this, which will be directly known as layout. And this is a common practice. The reason for creating this file is, in our application, you will see that, especially in this one, that the header always remains same, the footer always remains same, only the inner content changes from home to about and all of that. So we need to figure out a way that we don't have to repeat ourselves that often. We just want to grab a header should always be there, footer should always be there, and we'll be just injecting the content in between. That is a common practice. You'll find this exactly same pattern being used in the Next.js and a lot more stuff. So we'll be using that practice exactly here. So again, rfce, React functional component, which gives me a layout, export it, that's it. But what additionally we can actually go ahead and use, the first concept about this, which you'll be using, is known as outlet. This outlet is a special thing, which is coming up from React Router DOM. Remember, so far we have been using just the React or the React DOM, but this actually comes from React Router DOM. The advantage of this is that I can go ahead and return some special things. First of all, let me import them. I'll go ahead and say I need a header. Let's just say header comes up like this. I also need footer, footer also comes up like this. By the way, we can export these components into index file as well. That's totally your call. You can go ahead and do this. Now here, what I'll do is I'll remove this. I'll inject just the fragments, just like this. And I'll say there should always be a header, all right. And there should always be a footer. So there we go. And now what I'll do is I'll inject a special element that is given to me by the React Router DOM and call this one as outlet. It needs to be always called as outlet. There is no other name for it. And this is something which actually gives us this capability that, hey, this will always be on all the pages. This one will be in all the pages. This is designing the layout of the application. Now what's inside the header? What's inside the footer? That's not our call, but they will always be there. And whatever the information that you are using, you can actually go ahead and use that. But the main question that we have is that how it will know that we are actually doing this. Because right now, if I just open the application and I run this, this is not going to work. So it's already running. We don't need to worry on that part. If I go ahead and open this up in the VIT, it doesn't take place. It doesn't actually does anything. The reason for that is in the main.jsx, or whatever your file is in your case, whatever you're using, you are actually still serving app. It doesn't have the configuration which is required to actually have this router. And this router has a couple of ways of how you can actually do the things. I'll show you both the ways which are actually mentioned in the documentation. So the first thing that we are going to do is keep this as it is. We don't want to touch it initially, but we want to create a router. And this is the router which I showed you initially that comes up from this create browser router. There are multiple types of router that you can use, but we'll be using this create browser router. And we'll try to create a path like this. I'll show you this syntax and there's another syntax as well. I'll show you the both. You can pick up whichever you like. So we can go ahead and create a router. So router and that router will be created by create browser router. So again, create browser router comes from the React router DOM. It's nothing, it's a function. But this is a function which doesn't work alone. If you look at the documentation, this function actually needs a route provider as well. But it's not just the route provider. You can see there are lots of ways of how you can actually have the route provider, static route provider, create a static handler. There are a lot of ways browser router. So this documentation is quite in depth and there are multiple use cases for each one of them. I'll show you the most easiest one that what accompanied you need to create this one. And what we'll be doing is simply we'll come here and we'll take this one as create browser router. Oops, create browser router is already there. And we need create route elements. Yeah, create route from elements, yep. It's a little bit difficult to remember this one but as you will do a couple of more projects, you will be familiar with that. So once we have this create browser router, then inside this, you can go ahead and use this which is create browser, create routes, my bad. Create routes from element. This is again a method. This is again a method, no big deal there. Now inside this, there's a syntax that you have to follow. So I'll come back here. You need a special element known as route. And this route is obviously going to come from the React router DOM. And this route actually works like component itself. So just like we saw that our empty components can have headers and footers. And we also saw that headers could wrap up inside footers and all these elements. So just like this route is nothing, it's just a component. So notice like this is how it works. So just a basic element, nothing more than that, a component. But this route actually takes a couple of parameters and based on this, how it works. It works on this kind of a sandwich model that we have. So we'll first of all say that, hey, everything will go inside the path of a slash. And what is the element that you want to load? Every single time you have to follow the same syntax, you have to tell it a path and what element to load in that path. Element simply means what components you want to load. In my case, I'll just say, hey, element that I want to load in this one, I'll give it like this. I want to load an element known as layout. And there we go, selfclosing of course, there we go. Now, once I've done this, now things will actually take place and instead of having this app, we want to use this router inside one here. So there's again a syntax, a little bit syntax for this one as well. We now don't want to use this app, we want to use our layout and want to load everything inside it. In fact, if we have the app, we want to load this inside the layout itself so that the header and footer always remains. So we have to remove this here, this one goes away, this one doesn't load directly. In fact, we go ahead and use a router provider here. Again, router provider comes up from the React router. And the whole idea behind that, it's a selfclosing element, you don't need to just have the ending one. And inside this, you provide just one param router, which is the router. A router is the property and is the router which we are creating. Make sure the router provider is getting operated and is being taken care. Once we have this, now what you'll notice is we have this header and footer. Since we haven't provided any outlet to this one, that's why only thing that's loading is header and footer. Now in this one, you can add as much as you like. Now let's take care of this one here a little bit since we have a couple of paths to work on with this one. So we have this route element and I told you, this is like an element, like a sandwich that we have. We saw the sandwich kind of a thing here as well and we can actually use that. You might have seen that this is an opening, this is a closing one, inside this you can add as many as you like. Similar to this, we have this one, but right now the path that we are serving is this one. So inside this, you can have as many routes as you wish for them. So these routes could be selfclosing or could be the sandwiching one like this one, or you can have these ones as like this selfclosing. Now here's the interesting path. First of all, what path do you want to load? In this case, I want to load a path. I'll tell you in a minute what path to load. Single codes, double codes, whatever, but I don't have an element in this one to load. So what I'll do is I'll quickly go ahead and create another component in this one. So right click and we'll be creating a new folder. Let's call this one as home. Doesn't really matter, we'll be using the boilerplate code and we'll be saying home.jsx. And again, rfce, that's it. All what we have is a home text being literally written. Now inside this, I don't say anything. I don't say a slash or anything further because everything now happening is after the slash. That's what the meaning of this first route at line number 10 is. Now what element do you want to load? I want to load an element which is home. So I'll just go ahead and say, hey, give me an element which is home and selfclosing. Now when I go back, notice here, the home element gets loaded. So that is the advantage of this one. In the basic layout, notice here, I'm actually at the slash. So this is technically slash, which is where I'm home is loading. Now let's just say, for an example sake, you want to have a router which says about. So again, first create that component itself. So we'll create a new folder. We'll call this one as about and right click and create a new file. Let's call this one as about.jsx, of course, and rfce, nothing. It just says about literally nothing else. You guessed it right. Now after the slash on the home route, this works, but I want slash about to load that component. Again, go back here and simply say route. Again, this will be a component. So route, selfclosing could be fine here. And then simply we will have a path which is going to be like this. This one is going to be saying at this time, we need to change it as about. Remember, we are saying about here, but this about is after the slash because it is sandwiching that one. So sandwiching concept comes up here. So on the homepage, we have given a layout, a layout, a route here. This is too much difficult to spell. Here, we are saying that on the same level, on the same hierarchies after the slash, if I write about, remember, I don't say slash about, otherwise it will be twice. I just say about, what element do you want to load? The element that I want to load is going to be like this. And this one is definitely going to be about. And there we go, selfclosing. So now technically I can go on to slash and I can just go ahead and say about. Notice here header and footer remains same, but my about changes. So I can go back, this is home. So this is the whole idea, whole concept. If you want to go further into this that I want about, and then after that some slash or something like that, then obviously you can go ahead and say that, hey, this is my about and slash, this is where I'll be loading this one. So notice here, I can still go on to slash about and it still works. If you want to have it like this, again, use the sandwiching concepts. So in this case, I'll just go ahead and say a route. There we go. And we'll end this one. Oops, my bad. This one needs to go like this. And we don't need this one, my bad. There we go. So now we have a closing one, closing partner of this one. Now I can go back and again start writing the elements, whatever that element is. This could be about, and this could be company. And I can load any element, whatever I want. So just remember the concept of the sandwiching. So one things can be inside it. Whenever you need a further drill down path, you can do this. If you don't want to do this, just use a selfclosing one, that's also the same. So you get the idea how the concept actually works. All right, so now we know the basic principle of how the things are there. There are a couple of more principle that we need to actually go ahead and work on with this. And we need to have a small discussion on this one. Let's go on to the home, not home header, header. This is where we'll be working on. So again, we need to copy paste some of the CSS for this one. So we'll be grabbing all the, we can just go ahead and grab directly all of this. We have the header at the very top, we'll be doing that. But there are some elements which actually requires your attention into this part. So let's go ahead and grab, remove this one. And we'll be having a simple header, just like this. It will have a class name, and I'll obviously copy and paste the class names. This is the part where it's a little boring, but don't worry, there are some interesting features here, which we want to discuss. Then we have a nav, which we are writing again, plus name. And again, the class name will remain same. So copy and paste that. So now that we have nav, inside the nav, we will be writing variety of links. Now your first intention would be just to use a tag. This is where things can go actually wrong. So I'll just have a div, another one here, because that's how we laid out while designing this. So I'll just have the class names, copy that, paste that up here. And inside this div, we have all the links. What you saw earlier on the webpage, like here, home about and all of that. So they are just obviously, they are just links all inside this one. So we'll be using that. Now the first intention is always go and use the A tag and just write this. Remember the A tag, the whole idea behind using the anchor tag is to move on to different resources. When you use A tag, the page actually reloads. It remounts because the control is given to the browser and the DOM, which is in the browser itself. We don't want that because page should not reload. It's a single page application. And that is why every single router, no matter it's in Next year's or React or wherever it is, it is giving you some ways of navigating things. Because remember, this is all a facade. This is not real. This is just a simulation of moving to slash about and wherever it actually never goes there. So that is why in every single time you'll find something known as link or somewhat similar to that, which is actually coming up from, as you noticed here, React router DOM. Remember it always comes from React router DOM or somewhat like that. And we work through that. So in this case, we'll be just saying that, hey, we'll be having a link. And again, this could be a selfclosing one, or you can just go ahead and close it like this. So I can just go ahead and say slash link like this. Again, it could be selfclosing. It could be like this, totally up to you. Now in this link, what do you want to have? We have just an image with the logo or something like this. So in the image part, we are not talking that much, but yeah, we just added an image or something like this. But notice here, this link is pretty interesting. This is not your A tag. It doesn't have an href. It has rather a tag of known as two, and this too will take you wherever you like to go. So this is the interesting part where you should pay attention. So if I go back up here, notice here, this logo comes up here. So simply go ahead and works on with that. We just found this random logo on the internet and we worked on with that. Now, similar to this, you can actually have more of this. In fact, now I can go ahead and bring all of this header component up here. So if I just go back here, copy this, exactly same thing. So I can just now replace and talk about it. Paste this, and we have exported default all of this. But the only thing that is still required is to import the links and all of that. Otherwise it will yell at you. So go ahead and import React. Do we need React? I don't think so, we need React, but still if it is saying, I'll just grab it. We need link definitely because we discussed about it. And the link is going to come from React Router DOM. And not only link, let me show you a couple of more stuff. So the link is actually one way of navigating from one place to another place. So notice here, mostly the link is used, but there is also a nav link being used. So nav link is also a part like that, so navigation link. Right now we are just using it as a basic, but nav link actually gives you a couple of more features like on what page you are and what values you can actually use. So we'll see some of the variations and versions of that as well. But right now we'll just import that and leave it. Remember, link is not the only way of navigating. We have the nav link as well. And we can read about the documentation of this one if they have any global search. I don't think so. Let's just say components. You can see the nav link here. And what you'll see in the nav link, you can find out pretty easily what class is active and what ends and all of that. So notice here, it says two messages. So the link and nav link almost same, the two section and everything is almost same. The only thing additional with the nav link is you actually get this is active and is pending and all of that. So why are using this is active, which whenever you use any class name or any arrow functions like this, it is available to you directly. And notice here, they also say this, a nav link is a special kind of link that knows whether it is active or not. So when you go up onto the applications like this, and when you say that, hey, this page is active or this page is active, just like that, that whole functionality can be done via the nav link. So that's why we have this nav link. All right, by the way, notice here, this is exactly what we are doing, whatever the values are active and all of that. We'll talk about that later on in the some sections where we'll be having. In fact, we can actually talk about this into about whatnot. So this is get started. Then we have couple of nav links on the home. Actually, we have just one on the home. We can design it right now itself. So let's just say on the home, what you can do is you can just add a couple of more practices and what the text you want. So for example, now we are in the nav link in the class name itself, since we are using a callback, this is the syntax exactly, they are also mentioning it. So we are not doing anything special. In the class name property, we have the access of this callback and then we can write all this. So this is exactly what we'll be also doing. So in this one, we have the access to this is active. Remember, this needs to be exactly as is active or is pending. So we don't decide the variable name in here. So we have this is active. And by the way, one more thing, which usually I also forget, this is active needs to be extracted as a property like this. So yeah, I also make sometimes this mistake. So let's go ahead and keep it up like this. And now you have access to is active. Now based on is active, we can decide whether the color is going to be gray or this one. So we'll just actually cut this out. We want to cut this one out. And once we are cutting this out, we can inject the JavaScript again. And by the way, dollar sign is missing. Yeah, now we are happy. Okay, now based on is active, we can do a question mark and a ternary operator here. If it is active, then we can go ahead and use a text of, not this one, text orange. So we'll just say text dash orange. We'll be probably using 700 version of it. That's what we used. And here we can use a text dash gray 700. Gray 700, no suggestions. There we go. No suggestions, strange. Anyways, we can just find it out later on if we are doing any mistake. And by the way, this needs to be wrapped inside the quotes because it's a class, not a variable. Class I mean to say tailwind class. So that is all what we have. And based on this, we can have a nav link which can provide you whether you are active or not onto this one. So nav link should be refined. So now we have our own home, but if I go on to about, so we have the home. And if I go on to slash about, this should be technically going away. We shouldn't be having this link as, if it is true, then it's 700. If it is false, it goes like this. But okay, we'll see that how this actually works and how we can actually have more links onto this one. This one is nav link. We haven't mentioned the two, we have to mention that. Otherwise how it will work. And we'll be saying that, hey, you will be on slash. So now it will keep a track of, there we go. Now, if I go back to home, it's orange. But if I go back to slash about, we are not active. There we go, told you, simple. Okay, now we can have multiple of these allies and can define a home about whatever you wish. So I'll just copy and paste from ally. I'll just duplicate this. And this one is going to be slash about. And there we go, now I forgot to change the text. About, save that. Now we can travel to home, we can travel to about. And similarly, we can have more of these. So if I remember, we have home about, and we will also have the contact. So I'll just duplicate this one. I hope you remember the shortcut for duplicating in VS code. If not, right now is a good time to find it out about. Okay, home, contact. Contact, this one is going to be contact. We also will have probably GitHub as well. We'll be having some fun with GitHub as well. All right, copy and paste that. This one will say, I'll go to GitHub component wherever that is. All right, so now we have home, we have about, although there is nothing inside the contact. So this route doesn't, is there. So we need to actually define our 404 route as well. We can work on with that. But at least our home and about component are there. And we now know about the nav link, which is a special kind of a link and we are aware of how things are there. Now with this, we can actually go ahead and move on and work with the footer, which is super easy. Now you can go onto my notes. And this is the footer, just scroll it all the way to the right. And you will find this copy button or you can manually copy and paste that. And all we have to do is paste this all here. Since we have link in this one, so just go ahead and fix the errors. Let's first import the React, import React, and then we'll be importing the link. And that link is from React Router DOM. Technically, we should be all good now. So we can see at least a home and about, but our footer is coming. So it's looking nice as well. Apart from this, there is no big deal and no facade about it. Similarly, we have a home component as well. We can go back and replace it with the home. So again, it will look just a little bit beautiful, nothing more than that. And home, select all, replace it. I don't think so. We have anything in this required. Let's just try this. Save this and go back. And do we have some links? Yep, we have some links in the home as well. So let's import that, no big deal. In fact, we can actually copy, paste footer here. And let's just copy and paste. All right, let's come here. And there we go. Should be all okay now. There we go. So we have home page. So we have learned how we can design that home about and whatnot. So I'm leaving this contact page to you as a simple exercise. All you have to do is go up here. We have the contact us page as well and go ahead and work on with the contact us page, about us page. About, I can do this for you. Okay, so about is here. We'll be replacing it with here and we'll be importing the link. If we have, I don't think so. We have link from React router down. Let's see. If we have about, yep, home is looking good. About is looking good. Contact is for your exercise. Maybe, maybe, I don't know. We'll try to have some of the work with the contact and user and whatnot. Okay, one more thing that we'll be doing is we'll be creating another component. Let's go back onto the code side of it and we'll be creating another component. Let's call this one as user because I want to show you some more ideas that you'll be using. Let's call this one as simple user and we'll be having a simple layout here, new file. That will be user.jsx and just the basic RFC. So we have a user. Now, in order to make sure that this component loads somewhere, we have too many files opened up. I would love to close that. In order to make sure that I have a really huge code base into the user, in order to load this, I need to go into main.jsx and how can I load a route which actually loads this one? So I can just go ahead and say that, hey, I want to have a route and this route will be on going to whatever the path you ask me to do so. I'll just say, hey, go on to user and the component or the element that I'll be loading here is going to be a user. User, it doesn't suggest me user. Okay, I'll write that again. I want suggestions. Okay, there we go. And here we'll be saying, hey, give me user. It doesn't give me user. Save that and probably this will give us issues. It surely will. I will just first remove this about because we don't want that. The element should be user. It should be auto importing that. And we'll be saying import user from component user user JSX. Okay, all happy. Now, can we have another link for the user itself? Probably yes. Let's go into the header. And can we have another LI for the user itself? Let's try this. Link, go ahead, copy and duplicate that. This will be going to a user and we'll be calling this one as user, how easy that was. Okay, now if I go back to the user, okay, I get the user. Now in this user, first of all, let's just central line some of the stuff. We don't want it like that. So we'll be adding some of the class name, we'll be adding some of the background, BG dash orange suggestions. We'll be using orange like this and we'll be saying text dash black and text dash three X, three XL, text dash three command suggestions, three X, no suggestions. Yeah, text three XL. And we'll be saying text center just to make sure things are all good and okay, at least they are visible. We can even add a padding on Y axis of five. Yeah, better. Okay, so far we are all good and we understand this part is there, but there will be cases in your situation where the user will be dynamic. So dynamic routing is a very common scenario. So for example, the user ID is, I cannot write it here, something like one, two, three, or maybe username with a username of Ateesh. So I want to grab this path and this URL. So that dynamic capturing is one of the core essence of how you will be using the route. The way how we use it is actually simply go ahead and simply write something here, which is slash and then the colon is important. This is how you capture anything out after the user slash, whatever comes next to it, you'll be able to capture that. And then carefully name this parameter. This is a placeholder user ID. This could be just ID, this could be product ID, whatever you want, this could be anything like that. But this is not job done because if you go back up here, user definitely that's all good. But if I go back, so notice here the user, now we are saying, hey, this is not happening because I don't know what to do with this. This obviously will give us error. Now we need to go into the user and figure out a way that we accept all these things. Now, in order to make sure that we have defined that this path is actually accepting the parameters and whatnot, we have to use the params. And yes, this is literally the name. And we call this one as use params, no suggestions. Use params, no suggestions. Yeah, that's bad. And that actually comes from react router DOM. Okay, and why are you having issues? Because I wrote const import, there we go. Now all you have to do in this case is this use param is actually a hook, we studied hook quite a lot. And this is a hook, that means it's a function, nothing more than that. But what this function gives us back, that is important for us. So it gives us a lot of things, we can extract some information out of it. What information to extract? Yes, exactly, user ID. Why user ID? Because we call this as a user ID in this place. And after the colon, the colon is a symbol that, hey, this will be going into use param and you'll be able to extract this with a key ID of user ID just right here. Now let's just go back what happens. If I go ahead and get back, it says, hey, prop and route, error boundary. Okay, looks like this one is okay, but my main.gsx is having some of the issues. Let's go back onto main.gsx. This one user path element is all okay, should be all okay. And let's also check the user, I'll be exporting that export default user, we are exporting that. Let me quickly check that why this is yelling at me. All right, so found the bug, a pretty easy one, probably because it's late night, sometimes these things happens. So again, we are actually good in this case already. The issue that we are facing is pretty easy actually. If I go ahead and refresh this, this page works, but if I go onto the slash user or this one, this doesn't work because we never defined the route that what happens when the slash user only comes. We are only defining and are talking about what happens when the user slash and some parameters comes into that picture. So the easy way to fix it is actually to remove this, let's cut this out. And let's not make this one a selfclosing, use the sandwich of concept that we studied about. So we'll be saying that, hey, let's just go ahead and close this route. Now we can use the sandwiching concept. And then I can use the inside the sandwich route, which obviously will make it as slash, everything is inside slash, then we have user, on the user will load the element user. And after that, if there is a colon, which technically makes user slash colon user ID, we will load again the user element. So very basic, but again, sometimes these things do take some time to debugging. So there we go, we have this user. And additionally, what we did is inside the user one, since we extracted this user ID, I just placed it here. It just available. I'm displaying a variable in JavaScript. I'm not doing any magic here. So when I go back here, the advantage of this is now, anything that comes up here in the URL after this, whatever the dynamic route, I will be able to catch this dynamic route. For example, if I just have something like Hitesh here, I can grab this. Maybe this is something on the user page where you have some clickable elements. And while clickable elements, you are coming on to some GitHub user ID, some blog or anything. So I can grab elements from the URL itself, make a fetch request and get the data. So this is the whole idea of doing everything that we are doing up here. All right, so now let's go ahead and work on with some more stuff, which is also pretty interesting and a new concept into this one. Actually, Next.js also uses this same concept. So we'll be working on with this one. I hope the center element of this one, how the routers and the dynamic parameter comes up, this is all clear to you. And by the way, even if you don't put this one and directly put up this, then the user route will not work, but user slash whatever something will also work. Okay, going back, we need one more route to work on with this one. So we'll go out of the sandwiching. We are not interested in this one. First, let's create a new component. That component will be again, very basic, but very interesting one actually. Let's go ahead and call this one as GitHub. And inside this, we'll be creating a component known as GitHub.jsx of course, .jsx, again, RFCE, that is it. Now in this GitHub and all of this, what we want to do this here is just simply show some data into this one. First, let's go ahead and create this route that would be super beneficial for us. So we'll be having a route, route, and there we go. And we don't want this path a strict. This simply means when you have a strict, that means all the 404 found, just load this element up here. So now if we have this element, make sure this is at the very end of it because they are evaluated on case by case basis. Now, if we reach out to something like contact, which we don't have defined, it just says not found GitHub, which is not yet defined, so it says not found. So this is a classic example of if nothing cases. So have you studied switching cases? Yeah, this is almost like that. But before that, make sure it is always at the end. We also want to have this GitHub. So we'll be having a route path will be GitHub. And the element that we'll be loading is going to be GitHub. Yep, bring this one in here. And now we have this GitHub and let's modify this a little bit, not too much, but at least bearable. So we'll have some of the class name. Let's grab first of all, text to the center. We'll be having a margin of four on all the sides. Background will be gray. How much gray? 600 is good enough. Text can be white. And what else? Padding would be four on all the side and text would be large. So 3XL would be good. And there we go. And we have decent stuff coming up in here. Now we have this one. Now I want to fetch some data from the API itself. And if you remember, fetching the data is not that hard. And I can just visit this URL and grab some of the data. And it's an object that is being thrown at me. It's a public URL. You can also go ahead and make a fetch request there. So as soon as this component mounts, I want this request to be fetched up to me. And I want to use that. One easy way of doing that is have a simple data as my state. So set data. And we'll be using react.useState. By default, it will be an empty array object. Whatever you like to have, we'll just have an empty null. We'll have an array or maybe an object. We'll figure it out. Now I can use a useEffect hook. So useEffect in this. And there we go. We have a useEffect. It has no dependency array. So there we go. And now what will I do here? I'll fetch. So I'll say fetch. This is a nice boilerplate. But I'll write my own. I'll simply say we want to fetch this URL. If this URL gets a success, so we'll say dot then. It will give me a callback. I'll say let's call this one as response. But response is in the string format. I need to convert it into JSON. So let's have the response.json. Then chain on one more then, because that will actually extract the data. And we'll be having, again, a callback. Let's call this one as data. There we go, callback, just like this. And we can console log the data, as well as set the data into the data. So there we go. Now the data is being set into this one. And now we can extract some of the data out of this one. Let's first console log and see if this is all coming up when we hit this particular route. Right click, inspect, and console. OK, too much. And we will expand this a little bit. There we go. So if I go back to contact and load the GitHub, it gets nothing as of now, because we are not using it technically. OK, time to actually use this data itself. Interesting. How we can use this? Once the data is actually being set, as soon as the component mounts, save this, go back. And now I can see I have this object. Let's reload this one more time. Probably I didn't save that. OK, fill rule. Did you mean fill rule? No, all these. OK, these are just the CSS and DOM properties, not interested in them. Contact, GitHub, there we go. Now I have this object, which has a lot of data, and probably out of this data, because I'm console logging the data, and I'm console logging this. So let's extract some values out of it. So what values can I grab? First of all, the followers count maybe. Followers, there we go. And let's inject the variable since I have access to this data, and if you have studied this, you know that I've actually gone through many times. You can just extract what do you want. I want just the followers count here. That's why I just mentioned this, and there we go. I get the followers count. So notice here, we can grab the image as well. Should we? Yeah, let's grab the image. And I'll say I'll be needing an image. There we go. What is the source? Source will come up from data if the data has avatar underscore URL, and we'll also need to give a width of 300. All right, so we have this image as well as all the data. Now here comes the interesting part where things will get a little bit more interesting towards the router. I go into about. I go into contact. When I go into GitHub, that is where the request is being sent. We cannot simulate. This one has to come up after a few seconds. But what you'll notice is the use effect will only take place when this component particularly loads up on the page, so contact. When I go up here, so this will make a fetch request. Now what if we could have done this a little bit better? Can we optimize this? This is already very optimized. But what if there could be advance stage of this one? Like for example, I'm going into contact. Before clicking on this, I keep my mouse over for probably a fraction of second milliseconds, but then I click on it. The same thing can be used for the advantage. Next year's does exactly same. When you actually pull your mouse over over this one, it automatically sends a network request to load all the resources that you require. And then when you click on it, the things are already available for you. Now how can we do this in this scenario with the React Router DOM? In the next years, it happens automatically behind the scene. But how we can actually do this one up here? Now doing all of this thing is actually super, super easy. Let me show you how this is done. First of all, we don't need this data and all of that. This was just to show you that how regularly we do this. Again, a good example exercise. We'll just come in this one out. And we'll write this thing again. Usually there's a case where people write these kinds of methods in the component itself. But if you wish, you can separate that out as well. All you have to do is export a kind of a method. We'll call this one as GitHub info loader. And this one is going to be a simple callback just like this, but the only advantage we want to take care of here is we want to make this request as a sink. Previously, we were using the fetch in the .then syntax. You can use that as well. But I want a sink here as well. So what we'll do is we'll obviously await and we'll do the fetch because I don't want to continue if this is not there. And the fetch is going to fetch the same URL. No changes there. We know that this works. And let's hold the response into a variable. So let's call this one as response. So there we go. And now all we have to do is return this response. We don't need to await this here, response.json. OK, now notice here we are just returning this response. We are not having this data and whatever that is. The good thing is I can return this as it is. Now, once you are returning this, then the next step actually is almost in this file, but we don't do this here because this is not the data flow. Understanding the data flow is important. Once you are done with this, this method actually first gets loaded into main.jsx where you're actually having this routing. So this method needs to come up here. Let's go ahead. And since the method actually exists in the same component, that is why a lot of people prefer to have this here. We can just go ahead and say this one is going to be GitHub info loader, whatever the name is. And then once we are done with this, we don't actually load the GitHub just like this. We actually provide additional property. We don't need to use the sandwiching, but we need to provide additional. The path will be same, the element will be same, but there is one more element or prop, which is known as loader. This loader actually takes a method that whatever the information you need to fetch, calculate, whatever you need to do, just get me that method first so that if somebody is trying to load this route, I can do some of my advanced preprocessing on it. Once you are done with this, the next question in your mind would be, okay, we created a method in this file, we exported, gave this method to this guy, but how can I get the data from this whole method? I have returned the response, but I need this. This is a common mistake that a lot of people do this. Hey, since you have exported this here, let's use this method and grab the data. No, no, you don't do that. That's not a proper way of doing the things. In this case, when you want to have this, you actually use a hook which is given to you by React Router DOM. So let's go ahead and use this. And this one is going to come up from React Router DOM. The name of the hook is pretty simple. You can guess that, use loader data. Yeah, the property name there is loader. And here is the use loader data. Since this is a hook, you obviously know how to use the hook. So it's a simple use loader, just like this. It's a method, there we go. And you can extract data from it. So call this one as data. Since all the variables that we named them as a data.follower, so this will have that object and you can extract the information. So now technically it looks same that hey, we have contact about. Now if I go to GitHub, it technically looks same, but it's actually doing a lot of preprocessing for you. In the smaller application like this, it is a little bit difficult to find that it is adding some value for us, but trust me, it is adding a lot, lots of value. And this exact same pattern, you don't have to use that much of hooks and stuff is used in the next JS as well. They also do a lot of preloading and preprocessing of data. A lot of fun stuff is there. But by the way, this whole thing is actually available in case you want to use classic react in some of the applications, you can actually go ahead and use that. By the way, there's a lot of things you can go ahead and work on with this one. There's so much of routes available. A one that we studied is use params. So user ID, use params. This is exactly what we studied. We have so much more use submit, use route. There's so much of advancement. In fact, there could be a separate course on this in itself. I'll try probably in the future to create one search. If you really want this one to happen, let me know in the comment section. I would love to do this as a course in itself. So this is pretty good of one crash course on the React router. All the advanced things which you probably are going to need are covered up. Yes, there are still more. Something like forcefully pushing the user onto some page once we have logged in. And all of this will be covered up later on when we'll do some of the mega project. But I think that is enough. That is more than enough for you as a React router crash course. That's it for this one. Make sure to leave a comment in the comment section. I would be really, really appreciating that. That's it for this video and let's catch up in the next one. Hey there everyone, Hitesh here back again with another video and welcome to our ongoing React series. I hope you are enjoying this series because I'm enjoying it so much teaching this series. First of all, a very basic target for you to hit that comment section. We're expecting just a hundred comments if you can. That would be great. So just hit that comment section first. Just do the comment, some appreciation or maybe I'm just watching it on this date. And let's continue the journey of React. And now we'll take our journey. Now we are pretty much comfortable with the loops, with the hooks, pretty much looping the things, variable fetch, API fetching and all of these things. It's time that we explore a more advanced feature in the React. Now, one of that feature is how do we handle the data? Now, one of the primary job of the React is to handle the reactions and that's why we called it as a React. The reactions happens basically on two major factor. The first one is the props and the second one is the state. And you will be passing on this data into various of these components. Let me show you, we have already seen that by creating a card component that you provide some data to that card component, whether fetching it from an API or just generating the data. However you pass that data, that data passing is very common. And let me show you one such example that is pretty common. So let me share the screen first. So this is the diagram. Let's just say this is our dashboard, a main component. And inside this we have divided the pages, just like previously we have divided into navigation bar, footers and whatnot. This time, let's just say this is our home dashboard. Inside the dashboard, there is another second component. Then inside that there is one more component. And finally, this is the component which is showing some of the data like displaying how many people have watched your video. And if you look at the current perspective, this is very troublesome because this inner component is actually called inside this component and this component is getting called inside this component and this component gets called to this component. Right now we have no way, absolute zero way that we can actually pass on data from this outer component to this component. In order to do so that, hey, if I want to pass on this, I have to first from this element or from this component, I have to pass on data to this component. This component will further on pass on data to this component. And finally, this component will pass on data to this component. So you can see here that we are passing props into these component. And all of this is not really bad, but one thing that is bad here is this component is not using any data. Still, it has to just access the data just to pass it on. And for one level, it's okay. But if you can see here, the moment it goes on to second level or third level, you can see where the problem comes up. Some of the components which don't need this data also have to access this unnecessary data. And based on this have to evaluate whether should I render, rerender and whatnot, but they're not using this data. Ultimately, this inner component is using that data. So how can we resolve this problem? This problem can be resolved by just one simple solution, which is also termed known as state management. Now there are lots of state management libraries. Some are inbuilt into React, some only one. And there are other third party libraries, which you can study and we will study them. So one easiest of the solution is, let's just say we have this global variable, that would be a good name. And somehow we start a mechanism that if anybody wants to access the data all he has to do every single time is just go up and ask this guy that, hey, I want to access this data. If anybody else wants to access any data, let's just say this element, then he has to go and just go for this guy and ask data to this guy. There is no other way. If you want to update anything, if you want to access any information, you ask this guy. If this is the central source of truth, that's what it is happening here. And this global variable is known as a store in some languages or some frameworks, not languages in some frameworks. Every single framework will call it as a different one. The one that we are going to study is known as context API. So this global is known as context. I'll show you more of that. The idea is really simple. We will have a separate strategy. And the only thing is that all of these components are aware of this global state. That is all, that is all it is. Now this concept can be a little bit tricky to understand because of the code issues, not the concept issue, the concept is this much that we have a central place from where we can access the data whenever we want. We can update any data in that central repository from whatever the component we want. This is the centralized concept. But just because there are so many ways of writing this exact same code, there are multiple iterations of that, that makes people confused that, okay, what is the syntax? So understanding the data flow is easy, but writing the syntax is a little bit tricky. And that's why I'll walk you through with a couple of syntaxes so that you can know, okay, this one is exactly same, this one is exactly same, and this one is also exactly same. So we'll be working on with that. So I have a small flow diagram for you. So what we'll be doing is we'll start the project and we'll create a React app, YVIT or whatever, however we do that. Then we're going to create a context. The context, nothing, this is the context, this separate thing. Then we simply create a provide the context or also known as context provider. What do I mean by context provider? Making sure that all of my components that I have is aware of it. They are not gonna be aware of them automatically. There is a mechanism, there is a flow of the data that, hey, all the components now are aware that there is a global state so that I can access my data. So this next step is this one, provide the context. And the third step is consume it wherever you want, however you want, you just consume it. So this is exactly what we are going to do in this video. And in the next video itself, I'll walk you through one more iteration of this exact same process, but with a different minor tweaking in the code itself. So you get the multiple idea of how the code is being written. So we'll just close this one and we'll just get started with this one. This is absolutely easy, nothing to be worried. I'll just open up my, oh, there's something already running. All right, so we'll close this and let's go ahead and start this one. So this one will be our new project, probably eight. So we'll just call this one as create, no, not create, my bad, npm create wheat. And we'll be going with the latest, yep. And we will be starting project names. So this one is 08 and we are talking about mini context. So let's just call this one as mini context. Context API, that's exactly what we are studying. And the best part about the context API is you don't need to install anything else. That's the best part about it. Let me just dump this, open this up in integrated terminal and we'll just say npm install should be fairly faster. The best thing which I love about it is we don't need any thirdparty resources. The context API is directly cooked in inside the React. It was not there in the earlier version, but as the React evolved as a library, it got this one. And then we can say npm run dev, that should be easy. And this is how the basic looks like. We won't be even installing anything into it. No tailwind, nothing. We just want to go absolute basics. Now first, let's try to create a problem. That is the major thing that how we are going to create this a problem first. So let's just say inside the source, we'll rightclick and we'll create a new folder first. Let's place everything inside the components. And this is a legit problem that we'll have. And new file. The first file is going to be simple login. We won't be doing too much into the login. So rfce react, oh, nothing. Oh, my bad. It should not be login. It should be login.jsx. Rename login.jsx. And now we can say rfce. Come on, rfce. There we go. We can close this down. So this one is not going to be too much of a problematic. I'll just be writing the basic boilerplate code. You can also write along with me. That would be really, really helpful. So first of all, what I'm trying to create, this is a basic login. So login has a username and a password. It doesn't connect with any database. It's absolute basic raw one here. So let's go ahead and say that I will have a username and that will be a set username. By default, it's empty. We'll also have a password field. Let's just say the password field. Nothing else. It's not doing anything. Now, once we have this, we'll need that something that needs to handle that we'll obviously have a login field, the password field and a button. So let's just go ahead and call this one as handle submit. That's okay for me. And inside this, we are not going to do anything. So we'll just write empty slashes, prevent the page from refreshing. Yeah, whatever that is. I'm not really bothered or much worried about this one. In this one, let's go ahead and add those fields. So first of all, we'll have a simple H2 which says login. This is my login component so that I know and aware about it. Then we are going to have an input with the type of text. Text, there we go. We don't need this name or ID. So I'll be just removing this. And there we go. Let's move it to the next line. We'll be adding couple of fields onto this one. Not too many. Just the basic, however, we do that all the time. So on change is going to be, first of all, we need the value one, but yeah, on change is also good that at the time of changing, this is the input field for username. So let's go ahead and add the value as well that you get the value from the username. Once you have all of this, let's also add a placeholder, the value of username and what else? I think that's it. Okay. Another input field that we are going to need is first I'll add some of the spaces. So line break there, space. And then we'll be having an input of type password. There we go. And there we go. My bad. What is happening there? Okay. This is input type password, this one. Okay. We don't need this ID or this stuff. Let's move it to the next line. This one is also going to move the next line. And again, really basic. First of all, the value, the value will be derived by password. Let me scroll this. And then we have on change. On change, the value is going to be governed by the set password that we have. Let's add a placeholder and that will say password. And after this, we will be having a button. Let's add a simple button as well. Button, there we go. This button is going to say simply submit. And we'll be having an on click event on this one since we didn't create it any form. So we're going to say on click. And on the on click, this is handled by the handle submit. So this kind of a component you have always built. Now we have a simple value. How it is handling, we'll talk about that. First, let's create what the problem, what we have. Now, similar to this component, you will also be dealing with this in the real world application as well, which is going to be profile. Profile, if I can write that.jsx. And let's go RFCE, very basic. And in the profile, all what I want to do is, let's put a space, is I want to display a username. Right now, I don't have a username, but somehow I want to display the username. So how can I do it? And I am pretty sure you are not understanding the gravity of the situation right now. This is so much of a big problem. And you might be saying, hey, what's the deal with that? Why is it so much of problematic? I can go simply into my app.jsx or main.jsx or any place at all. And I can just go ahead and load this up. Like for example, in the app.jsx, I can go and remove all of this content that I have. So let's just go ahead and remove all of this. And I can load these component here. For example, I'll just say H1 here and I'll say React course or React video would be good. React video for context API. And then here at this place, I can load the login component, just like this. And I can go ahead and load the user component, not user profile. Profile, here you go. And the profile component, is there any issue with that? If I reload this, there shouldn't be any issue. Let's go ahead and inspect this. This should be loading up. Use state is not defined. My bad. We're using state here. So this one is going to give us use state. I don't like to edit out these problems because these problems are something which teach you stuff. So as we can see, there is nothing wrong with this one. We are able to load this one. Now your first initial reaction would be that if I can load all of this, probably I can just pass on data of the login and all in the app.js and from here I can pass on this. But imagine the situation that from the profile, this data actually goes to other third component which are loaded inside the profile. Just like here, I can add more things. Just like I was able to load in my app.js, this profile thing, I can also go ahead and load more stuff. So I can just go ahead and literally say more component. So what's stopping you to have more component here? Maybe you are having a dashboard. If I can write that component, it's hard to type and talk at the same time. So imagine that this is a dashboard. On the dashboard, you have left pane and right pane. You want to display the data on the right pane, but right pane is not alone. For that, there is a top section and bottom section. So two more components. In the top section, you want to display this data, profile username, but the top section is also composed of smaller components. So how long you're going to be passing these components back and forth, you get the idea. Now you get the point that we need some better solution. And this is exactly why we have the solution up here, that we want to create a simple global state where we can add all of these things. And this is known as context in the context API and the context provider. But in the case of Redux, I have that video as well. We will be talking about that. You'll find that video in the playlist as well. So you can see that there we call it as store. So call it store, call it context. The concept is exactly same. We need a centralized repository, centralized store where we can have all of this data. This is exactly what we're doing. So now it's time that we understand that how we can actually implement the context. No extra library needed. The step one is to create a context and then to create a provider. So first of all, let's understand that how we create this context. It's a simple step. If you're taking the notes, you can take them as well. All right, so we'll come back onto these logins and profile in a minute. First of all, let's close this one. Inside this, let's create a new folder and let's call this one as context. Creation of the context has two parts. Some people do that. These two parts into separate files. Some people do that in one file. Doesn't really matter. I'll walk you through with both scenarios. First one here, the basic. The second one will be a little bit more advanced. Not advanced, but yeah, easier. So let's create a new file. And first we are going to call this one as user context. By the way, you can have multiple contexts. Since this is not going to return any JSX, I'll just call this one as just the JS. Now this context could be for multiple reasons or multiple resources. This one is for user context. Another thing could be for product context. Another thing could be tweets context. So just like everything needs a context. In the real world, this is exactly where it comes from. For example, fan. You don't understand anything with the fan. It could be a ceiling fan. It could be a table fan. It could be a fan in terms of a Bollywood fan, Hollywood fan, a YouTubers fan. It has a context. It needs a context. That's exactly what we have. So we're going to go ahead and say, hey, React, let's come React. And React directly gives you this context. So all we have to do is user context, react.create context. Just like you import use state and all of that, we have the create context as well. And after that, all you do is export user context. So your question might be, okay, we have that empty repo, the store which will be holding all of this related to the user, but where is the data? There is no data. You are absolutely correct. There is no data when you create the context. That's the step one. Now, once the context is created, the step two is actually to create a provider or the context provider, because right now it is not usable. So something needs to be a central man which can allow me to access the data as well as feed the data into that. So let's go ahead, right click and create a new file. And we'll be calling this one as user context provider. And this one is actually .jsx because this is a wrapper. As I told you, we need a wrapper. This whole thing, everybody should be aware of it. The way how we do it in React is we create a wrapper. Just like for example, in this case, if I go into main.jsx, you can see that this React strict mode is a wrapper for all of my component that I'm creating because the app further down the road, app actually loads these guys. So all these guys are actually also loading in the strict mode. Why? Just because of this one. This one is wrapping the entire application. So we need to create a context provider and we need to learn that how these sandwiching rule actually applies. So it's actually not really that bad. It's actually simple. So we'll be having first, let's just say React and we'll be using, are we going to use a use state? Probably not. Okay. But we'll see that in a minute. And we need to import the context. That is the most important part. So now you have access to the context which you just created. And now we'll be using that. So the first thing that we are going to do in this case is how to create this context. We have this and this. Now let's go ahead and create the user context provider. Yeah, that's a good name. User context provider. This is nothing just a simple method, just like that. A simple arrow method, just like that. Okay. So far it's good. Now this next step is to export this. So go ahead and export default user context provider. Now this is where the functionality goes. The first thing that you should know or you should be aware of this is that there will be more components which will be coming inside you. Just like we use the outlet. Yeah, exactly same concept, almost exactly. So first thing is, as a prop, what you'll be getting? You'll be getting children's. So just write children, if I can write that correct. You have to actually return that children back. But before that, we need to actually say that what is the data that you'll be using or something like that? So I'll be saying that, hey, I'm having a state. So I'll be just calling this one as user and then I'll be having a set user. This is right now an empty object. That is also good. But right now we don't have any users or rather having an empty object. I'll just say null. I have nothing as of now. After that, I'll just go ahead and use the return with the parenthesis. And what I'll do is I'll be using this user context dot provider. And yes, this is a syntax. We cannot do anything for that. Come on, user context dot provider. And this is how it looks like, user context provider. This is something which is given to you by default. The moment you use the user context, it automatically gives you the access to provider. The reason for that is React gives us this create context. The moment you have used this, this was given to you by the React itself. Now inside this, you actually do nothing and you just add a children. This is the syntax. But alone, this is not useful because now your entire application will be aware after one second. We will use it exactly just like we use this strict mode. We will be using it exactly almost that. But right now it is having the access of it. But the reason why we created this user state so that this data should be accessible to all the children. That's the goal. If you have more data, add more things here, add more calculation. Maybe you want to have a fetch request and whatever comes back from the fetch, you want to give the access of it to all the components, you do exactly like this. But right now I have a variable through which I can access the data. I have a method through which I can set any data into this user. So I have access to all of this. Now I want to pass on this. So the way how you do it is simply add a value and you simply say as an object that I want to give you access of this user, I also want to give you access of the set user so that you can read the data as well as write the data in this state. All right, so that's the next step or the step two of having all of this. But now I know that my entire app.jsx is actually loading all of this. So somehow whole of the things which are inside the app.js should be aware of this, how that's going to happen. Very, very simple. Instead of wrapping it into this fragments, I can just go ahead and say, hey user context provider and it actually imports it from the perfect place. I'm happy with this. A user context provider and we wrap this up just like that here and there we go. The moment you added this, that is it. Now all of these components which are wrapped inside it are aware of that data. Now you could have technically, you could have gone into app at this main.js and could have added here. That's okay. Now your app is aware of it inside any component of the app. He's also aware of it. He or she, whatever you want to term it as. So this is really nice. Now we have actually set up the boilerplate code. And this is exactly the same syntax that you'll be using. Your data might be tremendous amount in the smaller amount, doesn't really matter, but now you have set up the stage. So this is a boilerplate every single time you have to do. Now what's important is how do we actually send data into this state and retrieve the state data from back from it. So obviously we have already set up the stage for it. Login will be responsible for setting the data into this one. So how do we use it? That's where hooks comes up. And hooks obviously comes from this one, just like we have used a state, we have a hook known as use context. So far, all the hooks that we have used, they don't have this much of boilerplate work, but this one has. And it has its own advantage, you can say. Now we have this use context. So what can I do with the use context is you can actually extract values from it. Remember the values? Yeah, these values, these are props. You can extract this data. So in the login, I don't need a whole of data. I just need a selective data because I'll be just adding value to this state. So I'll be saying give me that set user, set user that you have thrown it and how you have thrown it just by saying use context. And inside this use context, you cannot just go ahead and use it. You have to provide a context that what context I'm talking about. I'm talking about the user context or the products context, I have to. For this, I have to bring in this. So I'll be just saying user context, bring it that in and provide that because you can have multiple contexts. Context for authentication, for user, for products, different contexts for different things. Once I have this one, then all I have to do here in the handle submit, once the submit button is click, I'll just update the user with that data. So first of all, just take this event and prevent default. Once you have done this, just use the set user. And inside this, the set user will be adding an object which will have the access to user name and password, whatever you are entering, it has that. Now inside the central store, I literally have the access to this. So this one is now finally having this value and we have the user name and the password access here. Once I have access of this variable and all these things in here, any of my component can go and ask for this data. How can it ask? Yeah, it's really exactly same process. If you have noticed here, the way how we extract the set user, which is a method responsible for setting the data, I can extract the other thing as well. So let's go ahead and do this. I'm pretty sure now you can do this as well. So const will be saying, hey, let's grab the user because don't want to access set user, I want to access the user and use context provide the use context. Again, this is not how you should write it because it didn't imported that. So I would love to grab it, there we go, and now write it use context, user context basically. Now, since I have access to this, I have to do nothing. I have to just say, hey, this is going to be a user, but there might be a case that there is no value into this one. So I can just do some kind of optional rendering as well, conditional rendering as well. So I can say if there is nothing inside the user, basically it's null, then go ahead and return a simple H1 that says not logged in. And why are you having this issue? Not logged in. Oh, my bad. Yeah, there we go. So if we have the user, there we go. So very basic, very basic code. So if we go back here and hit a reload, and it might be that I have missed some of the stuff. Okay, use context is not, okay. Here we are using use context, we don't have it. Really basic, we can go ahead and say use context. There we go, should be all happy, there we go. Just for the sake, let's reload. It says not logged in as soon as I do a Hitesh here, the password field is just a dummy field, doesn't really bother us much. So if I submit this, okay, we have some of the issues. Let's say where we are having this issue. It says objects are not valid react child, find object with the keys, username and password. Ah, yeah, my bad. This needs to be fixed, let me go ahead and fix this. So the error says not a valid react child, username, so I'm pretty sure I know where the error is. This is actually in the profile. This user is an object because that's what we actually added. If you remember in this one, we actually added an entire object and we cannot display the entire object just like this. Hey, dump all the object. We need to extract the properties out of it. So user.username, in this case, that should fix the error. Let's go back and I think it should, let's see, no worries. I just go ahead and say again, Hitesh, not logged in, submit, okay, it works, but the more component should be much smaller and the profile Hitesh should be bigger, okay, no big deal. We can actually just cut this out and just replace it here. That is better, yeah, there we go. So we have this one and by the way, if I go ahead and remove everything up here and there we go and submit it, it says profile because hey, we are still submitting the data. It's like empty strings are getting submitted. It's not null yet, but if I refresh this, it's not logged in. So again, we have to do much more check, but the idea is not about checking. We'll do that in the later on videos. The idea is that how any of the component was, right now the components were in the same page, doesn't really matter, but every single component can now access without actually doing a prop drilling, which is considered as a pretty bad practice in React. My login component is not aware of the profile. I don't really care about it. It just can set the data into this global store or the global context from wherever it likes. It just needs those methods to set the data. The profile on the other hand, it doesn't really care who's passing the data. We are literally passing nothing. It can extract the data from that global store directly. And all I have to do is set up those boilerplate codes. And after that, all I have to do is make sure all of my components are aware of it. Either you can do it in app.js if it makes sense. Otherwise you can take literally this exact same code, take it into the main.js and wrap your app with it. That's exactly all the components should be aware of it. That is the whole idea. So I told you it's really not that of a bad situation or a bad issue itself. It's just like, it takes a little bit time to adjust with these. Like I have to create a context, then the context needs a context provider and all of that. So basically the step is simple. Create context, create provider, make sure all of the people are aware of that there is a context so that I can take the data and send the data. That is it. That is your introduction to the context. I'm pretty sure I have dumped it down enough so that anybody and everybody can understand it. If you enjoy these videos, definitely do leave a subscribe to my channel or hit that like button. That really means a lot. If you drop a comment taking out of your valuable time, it really, really motivates me to make more such video. It really takes a lot of effort. All right, so that's it for this video. Let's go ahead and catch up in the next one. Hey there, everyone. Hithai Sheer. Welcome to another video in our React journey. I hope you are following this journey along. And if you're watching this in a long oneshot video, that's cool even. But don't forget to leave a comment in the comment section. It's my motivation driving factor. So hit that subscribe if you haven't already and it's a humble request, leave a comment. Just a hurt emoji, anything will do, just leave a comment. So let's continue our journey of the React in the same format, the context API. I'm pretty sure after watching the video probably more than once, you now have a particular idea of how the context API work. It's pretty simple. Create a context, create a provider, and that's it. And make sure all of your components are aware of it. We will take this journey into a little bit different perspective so that you get the idea, okay, this is how things are designed. And in this one, we will follow another way of writing the context, which is by using a custom hook. This custom hook is nothing, just like we were always using the thing, use context every single time at every single place. And we have to, every single time, provide that, okay, I'm talking about this context. I'm talking about this context. We'll just do everything all in one place. This is also another style of writing code. And since people use these different style of writing code, that is exactly the reason why the context API looks a little bit difficult. But now we have gone through the previous video, this one is going to make so much sense. Again, you don't have to worry about the CSS part. Yes, we have the tailwind. Yes, we have a couple of good, nice looking stuff, but you can just grab them from my GitHub repository, copy, paste, nothing to be worried there. We'll only talk about the code part itself. So this is what we'll be designing, a simple theme toggler. It looks simple, but it will be a good exercise to practice the stuff. So notice we have a theme toggler, which toggles the theme only for the card. That's what we are going to be designing, because this component will be aware of what the theme toggler value is. It is off or is it on. Based on this, we'll be changing this. Now we're not gonna be writing too much of the CSS. We are dependent on the tailwind, because tailwind allows us to have these dark mode classes directly cooked in from the CSS team itself. The way how they do it actually is, if you check out their playground, they actually mentioned this on their playground. There's a right button here, which says this toggle. If you right click and inspect this, the way how they do it is actually, if you toggle this one, this one is here. Let me just go back at the body. So this is here. So notice here in the, not in the HTML, actually this is a part of the header itself. So let me just search this. If I can search it here somewhere, search this and I'll just say dark, it should be dark. So there we go. So in the top here, in the HTML portion itself, we can see in the top HTML, they are actually naming this class itself. The moment I do a toggle, this dark actually goes away. It's actually light by default. And when I toggle this on, they actually manually inject this dark. Once I have this dark theme, now you can notice here that the dark classes are written and baked in. So if I go ahead and zoom into this one, notice here, this is the dark. So the dark class automatically takes in place when the HTML automatically marks you as a dark. So this is exactly what we'll be doing. This is our working functionality inspired by the tailwind itself. So let's go back and try to have a simple tailwind. We'll create a fresh new project. And with this project, we'll install the tailwind. So let's go back and close this one. Wheat is our way to go. So let's just copy this and we'll be installing the wheat into a fresh new project. So let's go ahead and first, let's just stop this. Okay, let's open this up. Control C, stop this, remove this, and we need one fresh one. And we'll be saying, first of all, let's remove all of this because we don't need all of this data context. I can right click and close to the right, yep. Now we just need to create a fresh new project. So for that NPM create wheat, and we'll be using the latest and yeah, that's it. Let's name this one as zero nine. And this one is a theme switcher project that we have this one. Totally depends on you, what do you want to call it? I'm going to call it as theme switcher. Theme switcher, and we'll be saying, we'll be using react for this one, again, JavaScript. And let's open this theme switcher into my terminal and remove the old one. We have to say NPM install. This is probably going to take some time. Depends on how much my internet is doing. And then we have to actually install the tailwind and let's install this. After this, we have to change the content just like this, copy and open this up. Inside the tailwind config, we'll change the content. There we go. The next step is to bring in the CSS. We can copy this, go back, source, index.css, remove everything, paste it up here, save that. And probably we don't need into app.jsx as well. App.css, my bad. App.css, we probably don't need anything inside this. Anyways, we are not much worried about how things are going on. We just want to have these things and practice our context API. NPM run dev should actually run the project. And there we go, very basic, nothing to be worried. All right, so let's close everything. And now let's talk about them one by one. The first step is to grab our basic boilerplate card and how does it look and all of that. So first of all, I'll just remove, I'll add a folder and I'll call this one as components. Components and the components will have basically two component in itself. The first one being a new file. This one is just basic card. So let's call this one as card.jsx. And all we have to do into this one, I'll just directly bring the card from my notes itself. Nothing, just the basic boilerplate card, as you can see, there is nothing reactish about it. Plain vanilla react, or not react even, just the tailwind. Too much of the classes, some images that we are borrowing from Pexels, some of the Apple Watch and stuff, so that is it. That is your card. Now let me go ahead and create another component which is the top part of it, in case you saw this, this top theme toggler. You can also have your own input button for this one. Nothing is going to bother you, but we are just making it a little bit stylish so that it looks good. Right click new file and we'll be calling this one as theme button.jsx. And again, our FCE, react functional component for theme button. And all I'm going to do is just replace this return with whatever the return I have in my notes. And let's replace this, there we go. As you can see, this is nothing more than input button which has some of these values, like value is nothing. On change, we need an on change button here as well. We don't have that, so let's go ahead and create that. That is all. Now theme mode and everything, we will work on to this one. First, let's have just the on change button so that it doesn't crash. And in fact, the theme mode, we'll be just removing this, this check dent entirely will be removing this so that we can later on work on this one. Right now, this is all good and okay. The only thing that's bothering is this on change button. So let's go ahead and have it. And we'll be saying on change button does nothing but we are having this one. Okay, so both of our components are ready. Now the idea is these components are not aware of each other. I want to create a centralized repo store or a context so that both can be aware of this. So for this, we already are aware of this that how we create the context. So in the last video, I showed you that we simply go ahead and create a new folder. You want to keep it in the folder or not, that's your choice. I'll just say context, context, yeah, that's good. Or context, there might be other context as well. Now what you'll notice is in the last video, we worked through with the context almost similar to this one. So we have this context. We have two files here. First one is user context, but technically we didn't do anything inside this. It was just creating a user context. The meet part of the information was this user provider where we created the provider. So we have this provider. Now this provider should be available to every single place. That's why we call this one here. But another thing we saw that, that every single time we have to do this inside the component, like for example, in the login, I have to do this kind of a stuff. Use context and then have to provide the context inside it. Here also in the profile, we have to repeat this. Use context and provide the context to it. So how about if we actually accumulate all of this stuff? Is that possible? Yes, it will save us a lot of time in later on. So we can actually improve our boilerplate code. And this is exactly what we'll be doing. So in this case, what we're going to do is we'll be just simply saying that, okay, we will be saying context, create a new file, and we'll be calling this one as theme.js. All right, so how we actually use this one, this is pretty interesting. First of all, let's go ahead and import two major things which we'll be using. The first one is create context that we use there as well, as well as we were all the time using this use context. Two things in the components, use context was getting used. The create context for creating the context. So these two things, now we are bringing them all together. The first step was to create a context where we were having all these things. So previously, if you remember, I'll just open this and compare it again and again so that you don't get confused with this. It's a good comparison here. So if I open up this context, so this part has nothing at all. This thing is having some of the interesting stuff. So if you remember, this was our state and technically what we were doing is we were providing this data inside this. There is another way of doing this much more easier than this because ultimately everything is going inside this. So when you're creating this context, while creating this, you can make it aware that what are the default option or what are the data which is available to you. So you'll see the syntax almost similar to this where somebody says, hey, theme context and create context. While creating the context, you can actually provide an object in here directly with the information. Previously, we were actually providing this into a later stage when we were creating the context and provider and all of that. But this create context is also perfectly capable of taking the data. Now we don't define the data here. We actually provide just a general information about it. What do you mean by general information? Let's just say we have this theme mode. So by default, this is just a variable whose value is light. But I also want this ability to toggle the theme as well. I can just go ahead and work on with this one toggle theme, but I'll show you what happens when there are multiple values like there is a dark theme, which is just a method. I don't know what this method does or how it function or how it works. It just is a method. Similarly, we have a light theme, which is also a method. How does it function work? I have no idea at all. Okay. Now we also saw that every single time we were using in the main.js, like theme provider is the context. So theme provider dot provider. So this was going a lot. And in the previous one, we saw in the app.jsx, we have to use this user context provider. And if you remember this one, yeah, we have to use this like this user context dot provider. How about we don't do it like this, we actually change the syntax. And again, this is the reason why people sometimes don't understand because there are different ways of writing a different version. If you're comfortable with that version, that's okay. If you're comfortable with this version, that's okay too. So in this one, we go ahead and say export const. And we simply go ahead and say, this is my theme provider. And instead of saying all these children and stuff, I'm just saying that, hey, this is theme context dot provider. So that I don't have to say literally, I'm actually literally exporting a variable whose ultimately value is theme provider dot provider. And that is it, that is all what we are doing. Okay, so anywhere, instead of using theme, like theme provider dot provider or theme dot provider, I can just simply say now theme provider. That is it, that's the meaning of it. Now we will also create a hook so that we can use it in all of that. So let me go ahead and work on with this export default. And in this one, we'll be creating a function and that will be used theme. And what we're doing in this is use context theme context. So theme context is already available to me. So I don't have to import or export it. I can just directly use this. Now anybody who uses this hook, which is used theme, he don't have to pass on this context. Like previously we were saying use context, then bring in the context and add value to it. And literally what that was doing is when we do this, this create context get all of that value. That is how the store is being created internally. So this is also alternative version. Let me summarize this because I know this can be a little bit confusing. Previously, we were creating a context that context was doing nothing, nothing at all. We were just having this user context, okay. Step two, we were using this user context. Now, if you remember from this, we were creating a provider, which was wrapping. And the reason why we were having this, so that wherever we use this user context provider, ultimately what the code runs is user context dot provider, which actually accepts the children. So all prop goes inside it. Now in the newer version, what we are doing is we are actually merging them together so that we don't have to create this context separately and have this one separately and provide the values. What we can do is just simply create the context and whatever the value functionality, whatever you want to incorporate, you just directly give it directly inside the create context. Definitely, we don't incorporate the functionality in this one because that needs to go separately. And what we do is theme provider directly gets available. We don't have to extract this every single time, just like we do it here, user context and children wrapping. No, we are aware of it. We simply directly use it like this. And again, one more hook, which actually helps us each of the component to not have the import statement and all of that, just use the hook directly, hook is aware of it. And I know which one I'm using. So one file consists of everything. Okay, yeah, little bit different, but how the usage of this works and most of the tutorials and everything that you're going to see, this is the way how they use it. The way how I showed you to you in the previous one is so that you understand, okay, these are the pieces that I need to do. In this one also, these are the exact pieces I'm doing, creating a context and making everyone aware that the context exists, that's all. And this portion is literally for everybody so that every component can directly use my store. So three parts, first, the second one and the third one. That's exactly still onto the same page, okay. Now we are actually onto this one, how we can actually use this one. Now we'll be using theme provider. Previously what we were using, previously we were using this user context provider. If you don't remember this, in the app.jsx user context provider. Ultimately it's a theme provider, so that's what we'll be using. Let's close all of this and enough of the previous discussion. Now let's go ahead and continue with the newer one. So now I'll go into app.jsx and this app.jsx has a couple of values and stuff that we have to actually work on with this one. Now what I can do here is inside this app.js, I can have couple of states and their modes and stuff like that, but first and foremost, what we have to do is remove everything from here. This is our app.jsx. Let's just go ahead and remove this. And I do have some of the values up here. So let me just go ahead and grab those values and we'll be just copying and pasting. So this is my div and what I'm doing is I'm bringing in the theme button and the card, which it didn't autoimport it. So let's go ahead and write this again. So theme button. Did we wrote that in the lower case? No, theme button should be there. Theme button. No, no suggestion. Okay, anyways, let's go ahead and bring them up manually in case it doesn't. Import card from component card and import theme button from components. There we go. We should have used the index file here. Let's see how does it look? And there we go, we can have this, but it has no effect or impact on this one because they are not linked together. Now comes up the advantage is we only need one file to be there, which is just the theme provider. Remember, theme provider is not an export default. So you can now just go ahead and say, we have to say in the curly braces. And then we have to say this one is theme provider. There we go. And it comes from the context theme. Now wrap this up. So every component is aware of it. You wrap this up in the app.js or wherever you like, you can just wrap this up. Okay, now everybody's aware of it, but not like this. Everybody's not aware of this. The way how we were extracting the value, this is exactly how you extract the value from it. So in this theme provider, previously we were saying just one word, now we have a parameter known as a value. And this can grab all the values that you have mentioned in your theme. The values like this, theme mode, dark theme, light theme, this is all. So I will actually bring this one here. So I'll just say, hey, give me the object of theme, theme mode actually. And then we have dark mode. I'll just copy this. Otherwise I'll make it, it's a dark theme. Copy that and paste it. And the first one is actually theme mode. Copy that, paste it, dark theme, and we do have a light theme. Okay, so all the functionalities here. Now right now they are empty. They have no idea how this functionality will work and all of that. But we'll actually work with the state here a little bit. So let me show you how the functionality, now we are writing the functionality part. So it's super easy and nothing to be worried on. First of all, let's go ahead and have a simple theme mode, set theme mode, and we'll be setting this as a light by default. Remember, this is exactly the theme mode. Now we have a value of it. So previously it was just empty. It could have been empty right now it's a default value, but it could be empty, it's a variable. These two are functions. So what this function actually does is these are functionalities. So what I can say is let's declare these functionalities. So these are functions, dark theme, just like this. And we'll be having an arrow function just like this. All it does is when you call it, it changes dark theme. We'll check the values to the dark. Similarly, we have a light theme, which go ahead and set the theme to light. That is it. All we are doing is changing the state value. But changing just the state value is not enough. First of all, you are just changing the state. This has no effect into your webpage. So how does it work? If you want any event in the webpage, then you have to either make it happen on some events like clicks or on change or all of that. If you want to happen it based on some state change, then you have to use use effect, a simple hook here. And the way how it works is really simple. You provide a dependency array to this one. And in this case, the dependency of the theme mode. The use effect hook simply says that if any value in the dependency array change, I will rerender this component. And when you rerender this component, I will actually want to change that. I want to run some piece of code. What that piece of code, this is where your classic JavaScript comes into the picture. I'll just go ahead and say, hey, I want the document. This document will be able to run a query selector. I want to find an element, which is known as HTML. And inside this, I do have the classes, a lot of class list. And first of all, I want to remove. So remove everything that's there. Not just the dark, even if you have light, just remove everything. And again, this needs to go into double quotes. Otherwise it will not able to find this or single quotes. It needs to be a string. Once that is being done, then I want to again run the same query. But this time I want to add a theme to it, which is theme mode. Whatever is the theme mode value, just add this. So based on this. So we have defined the functionality yet. So functionality resides in app.js. But since this functionality I was able to set inside this, remember theme mode is the value. So now my card actually can grab this theme mode value. And this theme mode value can be manipulated by the theme button. And the value can be grabbed by the card itself. So first of all, let's take down that the how the card is actually going to grab it. Do you really think card need to grab the value? No, not at all. Not at all. This was a trick question. Your card don't need to grab the value because in the app.js, the whole thing is actually being governed by the HTML. Tailwind feature, not to us. I hope you understand that. Okay. So the functionality part of grabbing the values also are taken care of for me by the tailwind. Does my theme button need some work? Yes, your theme button needs some work because this theme button, first of all need to grab some value from the context. And then based on this, it will be able to change that value. So first of all, what you have to do is grab the value. So how we can go ahead and do this, we can go ahead and have some values. And this time I'll be directly grabbing the value from use theme. Remember use theme is my custom hook that I've designed. What all the values you have inside it, you can just go ahead and grab those values. So for example, I have this theme mode, I have this light theme, and I have this dark theme, whatever the name of your function, I have all the access to this one. Now, the next step is that I have to just based on some on change button. So if there's a change in the button, I have to do all of this. So let's go ahead and work on with this. And I'll just go ahead and say if the value is checked, what should happen if the value is checked, then the theme mode means it's dark. So if it is checked, it means it is on the dark. Now, what happens when the on change button? So on change, you just toggle the value into it. So really couldn't be much more simpler than this. So, oh, we have already written the on change button. All we have to do is now just get the value. So if the theme mode is dark, it's change it to a light theme or dark theme or whatever it is. I think we can actually write a better code than this one, although this will also work, I hope so. First of all, let's grab the value. So we'll just go ahead and say dark mode status. I'll grab the status from E and we haven't got the E yet. So this will give us the event and the event from that, we can just go ahead and grab the current target dot checked. This is how you grab the value from the checked, whatever is your value. So right now the value is empty. Yes, there could be a chance the value could be empty, but we'll set the value. So we'll checked it. And we're going to go ahead and say now if the dark mode status, then run the dark theme else just run the light theme. So light theme methods will actually grab, we have grabbed these methods from here. And now what will happen? This dark theme will be going up here and we will be able to set the theme mode into the dark. And then that's it. And similarly here else, just go ahead and use the light theme. We brought the light theme. The functionality will come from here and then the value will be rerun by the use effect and we'll be able to change the value. So I think that is it. We need to just save the value and let's see. Now we have a toggle. It still doesn't work. Let me just check what happened and console. It says the value prop is required for the context provider. Did you miss a spell, forget to pass it? Okay, I didn't forget it. I actually pass the value. Yes, it looks like I have passed the value and should be all good. Theme provider value. Let's check our provider theme as well. So if we missed out some value into our theme as well. No, it looks like all good. Let me quickly check that where I'm missing that value. Oh, my bad. I actually forgot this in the previous teaching class as well. This is not an issue. I didn't forgot the value. I just needed to refresh it, but it doesn't work still. The reason for not working is actually not based on some of our mistake. It's actually a configuration we forgot to do. So go into the tailwind config. And the tailwind config, you have to actually mention that how the dark mode is actually getting used. So here the dark mode is actually based on the class itself. Yes, literally you have to say that. Once you actually do this, now your theme toggler will work. So there we go. So really great, great example. But again, I find it, first of all, when I studied about this, I found it a little bit difficult to grab my head that how this is all is working. Again, remember there are always three steps onto this one, no matter what or how the code is being written, because you'll be working with other programmers as well in your company. Some of them use this syntax. Some of use that syntax. But the process always remains same. First of all, you create the context. Then you make sure everybody's aware of the context. And then if any component want to consume the state, add values, get the values, whatever, that's where you use the use context. Now some people use the use context within the component itself. It's good for them. And they always, always have to provide the context to it. Some people prefer that all of the things, the logic should be written in one file. So this portion should be now very clear to you. That hey, we have the use context. Let's have it. Let's create a customized hook so that people can grab directly whatever the values are there. And the next step is, this one is pretty easy. You have this, don't have this, doesn't really bother you, because instead of writing theme context.provider here, you could have just written it into our app.jsx as well, the theme provider.provider. Doesn't really add any additional value, but you'll see this happening quite a lot. So I don't think so. This is bothering you. Write it here or write it into the awareness file I call it as app.js, totally okay. What bothers some people is this portion, that hey, how we are doing all of this, because this is the create context. Now, since we have the ability that create context can directly have the context, whatever the data and everything you want to pass it, some people find it much more easier that I don't have to bother about children's and whatnot. I just add my data here, that's it. It's purely a JS file, not the JSX file. That's why some people love it. Coming back onto the previous example, now you will be able to understand it much more better. In this example, this file is a pure JS, but it doesn't do anything. It doesn't take any context. It just is literally you are exporting the user context. That is it. And in this file, we create the separation of the JSX because literally you are passing some JSX. The thing which should be done like value of the user and stuff, which can also be done in the app.js or main.js, we are actually doing this here itself. That is the whole reason for the confusion. And again, previously we were exporting this user context provider. This user context.provider goes here. In that file, we are just exporting it directly. So again, it's up to the choice. If you ask me, what is my choice and what do I use professionally? I use this one where I have just one file because in this portion, I think clarity is much more. I don't have to worry too much. It's a pure JS file, not JSX. I can write all my data in that context as well. I can create a simple hook, which actually is aware of it. So one file for one context, much, much simpler. And as your application grows, you have much more of the context, then this approach is much, much better. And to be honest, in most of the complex project that I work, context doesn't make it up. I most of the time use Redux, these days Redux toolkit. So I have to use some kind of a bigger library for handling these kinds of state. But yes, for the interview perspective or the purposes of many projects, internal company projects, the awareness and the knowledge of context API is much, much needed. So I've shown you both of the ways and I'm pretty sure this will take a little bit time to digest. So don't be in a hurry, take your time, go through the videos, both of the sections again. And once you'll write the code manually, then it will make much more sense, much more clarity. I've tried my best to slow down the pace. Each line should make sense to you. Yes, it takes a lot of effort. That's why saying one comment in the comment section, just a heart would mean a lot. So that's it for this video. And let's catch up in the next one. Hey there, everyone. Hittai Sheer back again with another video. And yes, I was gone for a little while. I hope you missed me. If you're watching it one go, then it doesn't make sense. But anyways, finally, I'm back and I'm trying to put as much as content as I can possibly with a given free time apart from my job. In this video, I'll be continuing the journey of our React. We have been into the course of the React, which is a projectbased course. We have built so many projects and now we are kind of brushing up our skills on the context API. The context API is pretty nice to have and it gives you a great foundation to even further understand other state management libraries like Redux, Zostan and whatnot. So I thought let's give one more shot of understanding it by building another cool project and then we can move on to our mega project which is building up a blog. I'll talk about that one in the next video or probably next video, whatever that video is. But in this one, we will be walking you through with the context API and how you can build a fullfledged project. Not only just context API, I'll also walk you through with how you can use the context API to store something into the local storage of your browser as well. Now, these context API or Redux, they're just state managers and they just allow you to perform certain actions or tasks in a certain way. It doesn't really care what you are performing or how you are performing. It just allows you to give a streamlined part that this is only how things should go and come back. It's a kind of a data streamline for us. It doesn't really care if you are putting things into the local storage or a database online or however you are dealing with the things. This is just pure functionality part. So without a further ado, let me walk you through that what we are about to build, let me share the screen. So this is where we are. So this is what we'll be building. So this is just a simple to do. It looks simple, but there is so much of intricacies in that and so much of the knowledge about how the code base or the code structure should look like, how a program flow works through and we'll be walking it through. So in this one, what we'll be doing is we'll be simply having this right to do which will be a component on its own itself and we'll be walking it through. Apart from this, we have this simple thing which can be toggled on and off. That's nice. And as we toggle on, now you cannot edit it because it's done. So what's the point of having it? And apart from this, you can actually click on this edit button. And as soon as you click on the edit button, this gets as editable. So this actually, this whole text thing, if I save this, this is a text thing. If I click on this one, it loads an input field. In the input field, we loads a value and then thus it makes it more of an editable on its own place itself. And thus after that, you can save that. Once it's in the edit mode, we give the save button. Otherwise we get the edit button, we can delete that. We can add more todos, obviously. The most interesting part is if I right click and inspect onto this one, I need to go into application and in the application, I can see the local storage. There's a lot of things here, session storage and whatnot. In the local storage, I can see all of my applications are, or whatever my todos are actually stored in this one. This whole applications looks simple, but it will give you a rock solid foundation of how applications are being built using the context API, what thought process goes into that and entire credit operation. This will be super helpful for you for later on as we build our mega project, this would be a good practice for you. So again, let's go ahead and get started and try to build this project. I think that would be a pretty, pretty cool exercise for all of us. We'll be using Tailwind. We are not worried about the CSS part. This is not a CSS tutorial. We'll be skipping that part. I'll be giving you the copy paste, class names, just add that. Otherwise, if you don't even give any class name, that's fine too. We are more focused on the functionality part. And for this, we'll be using the Tailwind CSS, our trusty old friend for always that. Let's go into the docs part of it. And we will be framework guides and we'll be going through the VIT guide. All right, so let's go ahead and create a fresh project. So let me go ahead and open up my VS code. This is where we'll be creating a fresh new project. Let me open this up and we'll be creating our new project. So NPM create VIT and we'll be going for the latest. So let's go with the latest. And what should be the name of this project? That's an interesting question. So we'll be going with the 10 and then with the name of Todo. Todo context. Context and we are also using local. So I'll just say local for the local storage. So I'll just hit that package name is same. We'll be obviously using React and we'll be going with the JavaScript, not the TypeScript at least in this one. So let's go there. And there we go. We have this application up and running. Now what I'll do is I'll close this one. I'll open this up in my integrated terminal so that we are directly into the folder itself. And we'll be saying NPM install to install all the dependencies what we have, just like the boiler basics. All right. Now in the meantime, let's go into the Tailwind CSS and we need this whole thing. So let's just go ahead and copy this. And there we go. Your cache folder, previous version since addressed. Oh, there's so much of the bugs. Sys call. Oh, seems like there are some issues into this one. I didn't expected that, but let me just go ahead and remove this. Try it one more time. It shouldn't be happening in this phase at least, but let's just go NPM install. Let me first do a quick LS if I'm able to see that. Yes, package.json is here. NPM install. Oh, there's some issues. Your cache folder contains root. Oh, I need to fix this one. So just give me a second. I'll quickly go ahead and fix this one. Weird error, don't know why. All right, so fixed it. Usually these kinds of things happen when you update your system. And yes, I moved on to the latest Mac and that's why things happen. Nothing much of a big fix that I did. Actually, I just run this simple command, which was suggested to me here that hey, you need to change the permission of the NPM packages here. So I did exactly same, asked for my password, gave it the password, then I'd run the NPM install and it works fine. So that's basic. Nothing too much. Things happen all the time. Okay, now we have to run simply NPM, run dev at least. Let's see if we are able to run the things properly or not. Things looks good. Things looks good. Now we can just go ahead and copy this and let's stop this, paste this. I should be giving us a package file for Tailwind. Hopefully, config file for Tailwind. There we go. This is our config file. Let's go ahead and copy the context for the wheat. Let's get this one, copy that. This should be very common to you by now. We have been doing this for so long and we need to have directives. So copy this. And for the Tailwind CSS source and in the app.css, not app, index.css, we'll just remove everything, paste it up here, save that, that looks good. Also go into your app.css and go ahead and remove everything. That's exactly what we want. We don't want anything. Okay, rest is all good. We should be able to get a hello world with the class names and stuff. So let's go into app.jsx and let's run this. NPM run dev, let's close this. And inside this, let's go ahead and use the Tailwind CSS up here. So remove everything and paste the such one. Save that, let's see. And yep, it's a Tailwind, it's a Tailwind one. All right, so this looks good. Now let's see, let's prepare the plan of action that how we are going to take this one. The first good thing is that I don't have to worry too much because context API comes up as a default one. So I can just go with that. But first thing is always, if you're planning to use the context API or maybe Redux toolkit or something, just first go ahead and target that one. That's always and always a good idea. We'll come back onto app.jsx and all these functionality. But first is always a good idea that you simply go ahead and have a context for this one. So let's go ahead and work with that. So I'll go into my source and I'll create a new folder. I want to keep my context separate. So I'll just go ahead and hey, why are you not allowing me to write? Right click, new folder. Yep, now it's good. Context, again, we'll be calling it as context because you might have more than one context. A context for login, which does all the functionality for login. I'm having just one context, which is my todo context. So I'll show you how it is being done professionally in such kind of application. I'll create a new file inside the context and I'll call this one as todo context. So I'll call this context.js. Not only that, usually you'll find that there is a new file known as index.js. This is nothing much more than you have multiple context and you pick all those contexts, bring them up in index so that you can import all of them via the index file. That is it, that is the goal. Okay, let's see how we can work with the context. Pretty easy if you have done this anytime and especially the todos are pretty easy to work on with that. So I'll just go ahead and say, first of all, let's import some stuff and we'll be importing them from React. So that's obvious. Let's go up here. What do we need? We need a create context and a use context. Create context to create the context and use context for using that created context. Too many context, but yeah, we need that. So we'll be having a create context and we'll be needing a use context, which is a hook itself. All right, now we have these two. The first thing is to create the context. So we're gonna go ahead and directly export this and let's call this one as todo context. This todo context will be created using the create context, that's it. It's nothing, it's just a function. This function takes an object and within the object you can pass on all the things which you want to have the context of. All the data, all the fields that you require, you can just directly pass on in here. We saw another method in which I showed you we can create them at separate places and all of that, but this is more of a professional approach. You'll find this again, again. That first approach I told you gives you more clarity, but in the real world application, you'll be using this much more. So in this one, my context, I'll call this one as todos, which is going to be an array and how does each of my todos looks like? So I'll just give it a sample here as an example so that we can understand it more as we write code, otherwise it's not required yet. This is just for an exercise so that we understand how each of my todo looks like. So I'll say that ID will be one we can use later on the ID as a date, date.now, or we can use some kind of a nano ID to give a unique ID, totally up to us. And then we are going to give a todo. This todo is going to be a todo message. So we'll be just saying todo, message. And then finally, we'll be having a complete. This completed is nothing, it's just a Boolean value. So I'll just say false. So this is how my todo looks like. Okay, not only that todo, it's not gonna be just todo. There needs to be a functionality as well. So first part is add todo. So there needs to be a functionality which adds the todo. I'll be just writing its vague definition, not the functionality or the working part in this one. Okay, so how does the add todo works looks like? It is just a method like this, that is it. But add todo doesn't work alone. It requires a todo to be passed on. So just go ahead and give me that todo. And we now know this as awareness that todo will look like this. And that is why a lot of people like to use TypeScript because it gives you awareness about how your data looks like, types of the data. But again, this already makes sense. So there's nothing more to discuss with that. Okay, similarly, we have added the todo. Now, obviously there will be a method to update the todo. How does the update todo looks like? Again, it's going to be a simple method just like this. But another essential thing to update an existing todo is give me what todo should I update. So that's going to be an ID. And what should I updated? The updated todo give me that. So it needs to give that todo. So that's all. How it will update, I'm not worried on that because how can change depends on how you're making the application. For us, this application is based on local storage. For you, this might be an application based on MongoDB or MySQL. So there could be a lot of use cases in that example. So we have added a todo, updated a todo. What next? We can have a delete todo. What do I need to delete that? First of all, it's going to be a method. That's obvious. What do we need? Just an ID, give me that ID and I'll simply go ahead and delete that. So that's one thing. I also need to toggle the todo to mark it as false, true, is it done, not done based on that. So I'll just go ahead and call this one as toggle, toggle, yeah, that sounds, toggle complete, toggle complete, not a good naming in this case, but I'll just go with that. Okay, what do I need for that? Just give me the ID and I'll work with that. So this is my vague functionality. It doesn't work and that's exactly your context that based on this, I can add the functionality. So I can not only add data into this array, but also I can actually define the functionality based on that. That is exactly your context. So now your context is all done, but every single time in the earlier videos, if you remember that, we saw that it's not like just defining the context easy. Somebody needs to use that. And whoever is using need to use this use context as well as all these things that, hey, I need to be aware of the context, todo context, login context or something. This is such a common thing that we later on realize that doing this in the same file actually makes sense and actually saves us a lot of time. So will we simply go ahead and say, let's create our own custom hook. Let's call this one as used to do. Hook is nothing more than a function. So let's go ahead and define the function like this. And in this function, what we go ahead and do directly return another hook, which is a used context, which is aware of the context since this context is defined in the same file. So that's it. So this hook returns another hook. But the advantage is that I don't have to again and again call two files. Use context needs to be imported, but also this todo context needs to be imported. Here, I don't need to import this. This is already available to me. That is why we define that into same file. Now also, we saw that we can export one more line. This is not really that meaningful, but makes our other files much more easy to read. So let's go ahead and go ahead and do that export const. And we simply go ahead and work on the todo provider so that we can directly provide that. So todo context, simply can go ahead and work on with provider. All right, so this is the basics that we have as of now. All right, so my todo provider or the context for this application is almost ready. If I have more context, then obviously I'll do exactly same like this. Maybe if I have login, so what does the login information consist if I want to have any, what are all the methods I'm looking up for, like create account, login, logout, anything more. So I'll just do exactly almost similar kind of stuff there. Now, in addition to that, actually what I did is I should be writing all this in todo context. I accidentally wrote it in the index. So I'll just go ahead and cut this out. This should all go into todo context. So nothing much, that's not gonna bother us. So we'll just go ahead and copy paste it into the todo context, which is a right place for it. Now, the reason why we created this index is because you might have multiple of these things and importing them from separate, separate files. It's really a nightmare kind of a thing. So the best practice is to go ahead and export it from here after importing it from here. So what we can do is we can directly export all of this. This is a nice, sneaky little syntax and we can import it from, let's just go ahead and todo context, what all the things you want to export from it. The first thing, obviously, a todo context, if we need it, most of the time we'll be using the use todo, but maybe we want to get some data in that case, todo context is required. We'll be also needing todo provider and we'll be needing the hook, which is used todo. So as you can see, this makes life so much easier. Similarly, we can export more of the things by importing from other files and that's actually something which streamlines the thing. So that's really nice. One thing is sorted that our context, all the work that we wanted to do is all being done. Okay, so step one is all done. Now, next up is to create these components. So if you remember, there was a top component, which was the form in which we were writing the todos and there was another thing, which was the bottom, which is a listing of all the todos. So that's one task that we have in our hand. So let me just close this. Another task is in the todo context, we have not defined any of these methods. So another task in front of us is simply to define the functionality of all of this. So let's go ahead and whichever you want to take down, the first it's totally up to you. I think let's go ahead and take down the functionality part first and then we'll be building the components first. Okay, so the first thing that we have to do is simply go ahead and have a todo provider in here. And the way how we are going to do is let's wrap this up at the top. So we'll be just going ahead and say todo provider. No, no suggestion. So I need to bring this manually, probably save this. Let's go ahead and reload this, reload window. So probably now it will give me, let's go ahead and todo provide, no suggestion. Okay, so we need to bring this todo provider. So let's go at the very top and try to bring the todo provider. All right, so we'll go ahead and say import todo provider and that will be coming up from and we'll be saying context dot slash contexts. Okay, now that the todo provider is accessible to me, I can go up in here and can add this todo provider. The easiest thing to do is just go ahead and say todo provider. Now once you have this, obviously you need to have the closing one as well. So let's go ahead and have it here and there we go. So this is happy. Now everything which is going to be inside this is going to be aware of the context. Some people you'll see that they also give it to the main itself. That's also fine, but I am pretty sure that there will be no component outside of this main which will be requiring this context. So I'll just go ahead and wrap it up here. So wherever you need, it needs to be the outermost layer of this thing. So that's the basic of it. So one part is done. But another thing that you are going to require in order to do this is to bring in all the methods and whatnot and all these things from this one here. So how we can actually bring the rest of the things? That is the question. That is the most important question. The easiest way to do is is come back here and just say, hey, there is a property being given to this todo provider automatically by the context known as value. Via this value, you can actually go ahead and import the objects that are there. So for example, if I go ahead and do one more curly braces here, I can just go ahead and say, hey, I want todos. It will give me the todos, that same array. And you can also bring in all the methods there. So for example, we have this add todo, we have update todo, what else we have delete? Delete todo and one more was toggle something, toggle complete. So I have brought in all the data as well as all the functionality here. So you might be wondering why we have brought in the data also because we will be passing on this data exactly to one component that will eventually build to loop through all the values inside it. So it's an array. So we will bring that and we'll loop through it. Currently, I'm not focused on this one exactly at this moment. I'm more focused on the add todo, update todo because I want to write functionality in them. So let's go ahead and work on with the functionality from the very top. First of all, we need a state for its management because todos will be added and removed and whatnot. There will be a lot of functionality going on. So we need to keep a track of all the todos inside a state itself to update our UI. Let's go ahead and call this one as todo, todos, todos would be good. And this will be set todos. And that will be all done by our classic friendly use state. The default state will be an empty array so that that functionality is all done. Okay, right now, this is all good, but now let's add one by one the things that how this is going to be done. The first functionality we are going to take care is add todo. So how this functionality will go and work on with, I can just directly go ahead and mark this as add todo and then this is going to be a simple method, just like this. The great thing is that since I have this exact same data, that data will automatically map to the method because remember in the context, we created just a method, just the definition, not the definition, just the blueprint of it, but not the definition. Here's the point where we're going to go ahead and write the definition. It could have been done into a separate file, but all we need to do is wherever you are importing these values and these all things, it needs to be in the same file. So you can define it into other file, bring it in here and then can map it. That's also totally fine. Okay, how you're going to add? To add the todo, you need the todo. So let's go ahead and say that, okay, we need the todo. What else we can do? It's really, really simple now. All you have to do here in this case is use this set todos. So how does set todos will work? Obviously it requires a callback here. So we'll need to have all the access to previous todos that it have, it might have. And then we will be working to adding the more of that. So where do you want to add that? I want to add the new todo at the very top of my array and rest of them I'll spread this. So I'll just go ahead and say that this will be an array and inside this we'll be spreading this. So previous all values, we are spreading this out and my todo will go at the very first of it. So this is the place where my todo will go, just like that. It's an object, it requires three things. My ID, the actual todo title of it and the completed, which is by default false. So I don't need to give it much. So I'll just go ahead and work with that. So ID, how can I get the unique ID? The easiest, cheapest trick in the JavaScript book is date.now, but totally up to you. Maybe you want to use nano ID or something else. That's totally on you. Okay, now that we have this one, we have added the IDs and what else we can do? We can just get this exact todo. So what we'll do is we'll be spreading this todo because the way how this todo will work, the reason for spreading this one is because this todo might have more of the functionalities or more, whatever it is, I just want to have it spread it out. That's why it is. In case you're working with just the string itself, then you don't need to spread it out. But since ours is an object, so we are actually updating one property of it and then we are working on it. So really simple, basic, classic JavaScript, that's it. Okay, so this part is all done. Now let's see how we can update the todo. Again, classic way of updating is really simple. So we're going to go ahead and say I need to update this. Update todo, update todo. Okay, update todo, again, a method, nothing more than that. And I'll say for updating, I need an ID as well as I need it to do. Okay, how can I update this? For updating, obviously the best part is to loop through all the arrays. Totally depends on you, how you want to loop through the values. I'll just use maybe a map for this one. So I'll just, first of all, bring in all the todos. We will be requiring all the previous values. So we'll call this one as prev. Okay, there we go. Now with this, I'll just take this, all the previous values inside my arrays. I'll loop through with probably a map. Inside this map, I get a callback. So I'll just go ahead and say that I need each of these. So prev todo, I'll call this one each todo as prev todo. Once I have this one, then I'll simply go ahead and update. To update that, I need to find a particular todo to work on with that. So what I'll do is I'll just wrap everything inside the parentheses again so that it doesn't give me any error. So I'll just go ahead and say prev todo if it's ID because each todo has an ID. If it matches equals to the ID of the todo that is provided to me in the function. So todo.id, okay. If that is the case, if that is working fine, then let's go ahead and do something in here. Otherwise, we'll do something in here. Okay, just boilerplate here. This helps me always to write things nicely. So in this case, if it matches, then I'll go ahead and say todo. So I'll just update the entire object. If it doesn't match with that, then go ahead and keep it as it is. So prev todo, whatever that todo is, we'll keep it as it is. So we're looping through each of the value. Couldn't be much more simpler than that, the explanation. Line by line, I hope you have understood that. If not, rewind the video. Okay, next up, we'll just go with the delete. Delete is the easiest one. Const delete todo and the delete works with, just give me the ID and I'll work with that. All right, how does the delete functionality works? Simple, set todos, let's grab that. We need all of the access of that. So we'll just go ahead and say prev and we'll work with that. Okay, how are we going to work that? First, let's go ahead and filter this out. Looping through in this doesn't make sense. We can have operation on filter so that we can create a new array based on the filtering operation. So we need to provide a condition. So we'll say, hey, prev, let's go ahead and use a filter method on that. By the way, I do have a YouTube videos on this filter map reduce, really nicely explained stepbystep, broken down. If you don't know about in depth of that, check out that one. Okay, how does that work? So the filter method requires a callback, okay. In each of the callback, you'll have the each individual todo item, call it as prev todo todo, doesn't really matter, it just is a filler word. Once it is there, then we need to require to pass on a condition to that. So if the todo, we are looping through that, each one of them, if it's ID matches with my ID, then we need to delete that. So we have to go through with the reverse logic of it. I want all the todos, which doesn't match the ID. So which doesn't match the ID. So now, because if you don't know this, filter always works for the true condition. So we need to somehow give the true condition, that's why the reverse logic always works here. So what I'm saying here is really simple, that go through with each one of them, and I want to create a new array based on some true conditions. That true condition is ID should not match. So whose ID is matching, we need to remove that. Whose IDs is not matching, we need to create a new array out of it. So that's what we are doing in this delete todo. Okay, pretty cool. Now let's go ahead and work on with the toggle as well. Toggle is also fairly simple, nothing too much on that. A little bit, but not too much. Okay, let's call this one as toggle complete. Okay, how do you work? It requires an ID. And once it has the ID, obviously we need to go inside this one here. Okay, moving further, how does it work? First of all, let's grab all the todos. This is where we get it. And we need to go through with each one of them. So let's go ahead and have the prev just like this. Okay, now we have this one. I'll just go ahead and break it down into separate lines so it's much more easier for you to understand. Okay, now here what I'll do is, I'll loop through with each one of them. So prev.map, there we go. We are looping through the values. Inside the map, we need a callback. So we'll call this one as prev todo. Call it todo, prev todo doesn't really matter. And inside this, we need a callback. So this is my callback. And what I'll do is, I'll again go into the new line so it's much more easier for you to understand. Now inside this, each one of this, I want to toggle this one. So I want to go inside the object, like we have an array. In these array, we have a lot of objects. I don't want to go every object. I want to go into an object whose ID matches. Once I go inside this, I want to update that entire object. Not all the properties, just one property, which is the complete part. Okay, so how we're going to do this are really simple. Let's have this prev todo. And first of all, let's see that if the ID of this prev todo matches with the ID that you have provided me, if that is the case, then we're gonna go ahead and do something. Otherwise, we'll do something. Okay, boilerplate code here. If it matches with the ID, then I want to update it. So I'll just go ahead and spread this out. So spread this prev todo, first of all. Once I spread this, now I have access to all of this. Once I've spreaded this, then I have to update only one field, which is completed. And that completed, I need to toggle that. So I'll just change the previous values. So I'll just go ahead and say whatever, just use an exclamatory so that it reverse the true to false, false to true, so really basic. So I'll just say prev todo, prev todo. And you have a property known as .completed. Okay, we are flexing this, nice really. And on the else part, what we need to do, just keep it as it is. So just your prev todo will remain as it is. So there we go. Okay, one thing you remember, a lot of people kind of get in confusion with this one, that hey, you're spreading this first and then updating. This is an object, it doesn't really matter. Once you spread this out, that is it. Then you can update the existing field. This is how the object spreading works. If you spread this out, either first or end, then if you update any field, that exactly that particular field will get updated. So really nice. Okay, so that's the functionality part, we have taken this down. Now, this is the functionality part. We haven't talked about how the things will actually go in the local storage. So we need to work on with the local storage as well. There are two ways how the things are going inside the local storage and coming out of the local storage. First thing, any changes in this todos or the set todos, if you are adding any field or updating, removing, whatever we are having, we need to update that into the local storage. And any given time when the page loads itself, we want to query the local storage that if you have any data, give me that data. Otherwise, what's the point of having local storage? So for this, whenever the component loads, one good thing that we can actually go ahead and use is use effect. This is a hook that we want to use, so use effect. And this is it, and it requires a callback. So let's go ahead and give it a callback just like this. The second property is your dependency array. We don't have any dependency array because this is the hook where we are talking about, as soon as the component loads, query the local storage, get me all the data, and let's push all the data into the state which is set todos. That's exactly what we'll be doing. So what we'll be doing is we need to query the local storage and we can just get the item just with this one. And we'll be calling this one as todo. Right now, we haven't called them anything, so let's just call this one as todos, all over storage. Okay, we have got all of this. Now let's go ahead and kind of, this is a string. This string needs to convert it into JSON first. Local storage always works with a string, so there we go. And we have multiple ways of doing this. The easiest way is to JSON.parse. Once we have this, let's store that into a variable. Const todos, okay. We have brought in the local, we have brought in data from local storage. Now we need to do is, we need to push this data into the state. So that's really simple. But I want to, I can actually go ahead and directly do this, set todos and kind of use this one and todos. But what I'm thinking is, there might be no data into the todos. So that might be the case. So let's handle this as an optional, otherwise I don't want to do this. So if, let's test the condition, if there is todos first of all. If there is no todos, then there might be a potential of my application being crashed down, so let's not do that. And what we're gonna do is, let's go ahead and use another condition that todos is there, but there might be nothing inside it. So todos.length, since this is an array, I can use that, should be greater than zero, anything greater than zero. Then I'll go ahead and use the todos, and I'll just go ahead and todos. Again, this is a little bit optional, but good to have. So this is the place where I'm using the use effect hook, where there is no dependency array. As soon as the component will mount, this hook will be rendered, or this hook will be activated, and all this functionality will work. Now I want another case that if there is any update in the todos, then also this whole thing should update. So we should grab the data from it and use and work on with all of them. But this time, I don't want to actually grab the data. I don't want to get the item, I want to set the item. Newer value should be set at, so if you have added anything updated, newer whole value should be added. This whole thing, this new set todos, all the arrays should go into this one. But the problem is, you might be wondering that, hey, the easy solution could be just add a dependency arrays of todos, but that will be a problem. The problem is that if you add this one, this whole thing will run again. I don't want to run it. I want to run it once at the first start, but not after that. So this is the classic case where you use more than one hook. So use effect, let's use it one more time. And yes, you can have as many use effect hook in your application as you like. In this case, I'll just again have my callback, just like this, and I'll have a dependency array, but this time in my dependency array, it is dependent on todos. Anything that happens todos, run this piece of code. What piece of code? Again, we need to query the local storage. This time we'll set the item. So just update the value, keep on setting them, keep on setting them. Set item, what do you want to set them? This requires two part, the key and the value. The key is pretty simple. Just use the exact same keys that you are using to parse the values as well, so set todos. And then we can directly use todos, but local storage doesn't really accept arrays or anything, it just accepts strings. So easy way is to just use JSON.stringify. Yep, there we go. And just go ahead and take todos here. There we go. Really simple, fun functionality that we have added. So the functionality part is over. Now the next part that's in front of us is to create some components. Let's dive in and create some components, the top form as well as the bottom one here as well. All right, so the next thing that is in front of us is to build the components, that is it. We have worked on the functionality part, we have worked on a lot of logics and stuff. Now let's go ahead and talk about the components. We have two major components. The first one being the form itself, where I write the data, click on the button, it adds into the context. That's why the context is for, that's why the add method is for. That's one thing. The another component that we'll be creating is give it an array of todos. It will be looping through and displaying it. That's it. Not only displaying it, it will add some more functionality it is, but we won't be working on the functionality part because we've already done that in the app.js. We'll be just bringing that functionality and injecting at the right place. That is it. That is it all we have to do. Let's go ahead and work on with this one. So I'll just say that I need one more folder. Yep, so I'll just go into source, new folder, and we'll call this one as components. Looks good. So again, the components will have majorly three files. The first one will be obvious, the index.js, so that we can just get all the components at one place and can import and export that. So that's majorly it's being done in almost all places. If you want to do it, that's okay. If you don't want to do it, that's okay too. I'm not going to force you anything on that. Okay, so first one that we will be working on is going to be simply todo form. Todo form.jsx, of course, because this is an x component, gsx component, and will be todo items as well. So let's go ahead and say components, new file. This one will be todo item.jsx. Okay, let's take down the easiest one, which is the todo form first. That is the easiest one. I'll close all the other files as well. We don't need them as of now. Okay, how does the todo form looks like? Basic react functional components. So rfce, react functional component. What we can do is, let's hit enter. Okay, looks good, looks good. React function todo does this nicely. Okay, one by one. First of all, what do we need for this todo? First of all, we need to track what the user is writing in the form. So I need a state for that. So let's go ahead and do that. This will be a single todo. So I'll just call this one todo, set todo, and that will be bringing up from use state. So bring me the user state, and we'll just say initially you are empty. Okay, apart from this, do you need anything else? Yes, you need to add this todo. The add functionality is in my context, and the method, if you remember it, we actually worked on the functionality in app.js, but the beauty is, it doesn't really matter where you worked on it. I can just bring in that functionality, and if somebody has done that functionality, I can just bring it here. So the best thing to do here is just use the hook use todo. Oh no, it doesn't. Why is it not suggesting me anything? I really don't like it. Okay, we need to work on with use todo, and how we're going to grab it, we'll be grabbing it from, we need to go one directory back inside the context, and from this one, we need to grab the todo context. So we'll just grab this hook use todo from there, or can I bring it directly from the index? Probably, but anyways, you get the idea. Use todo, now we have this use todo directly a hook, which internally, if you remember, is giving us an access of the hook use context, which is already having the todo context. Pretty nice. Okay, and we can bring in functionality from this one, so I can just go ahead and say, hey, give me something, whatever you like. So in this case, I just need add todo. I don't need to have access of all the todos, I don't need to have access of add, delete, no need at all, I can just work with that. Okay, this is good. Now, we need to have a functionality when the form is going to get submitted, or the add button is going to click, we need to add it into this one. So we'll just, first of all, we'll say, okay, let me just show you one by one. So we'll call this method as simply add, not the add todo. So what this will do is, there will be an event that will be fired. First of all, prevent that default. So E.prevent default, so that it doesn't submit it anywhere. Okay, that's the step one. Now, if there is no todo, like it is empty, then we'll just don't do anything. So we'll just go ahead and say, if there is no todo, then just go ahead and return. So we'll just remove this, remove this, it could be a oneliner, so return. If it is not the case, there is something inside the todo, is there is a string or something inside the todo, then we can simply go ahead and call this one as add todo, okay. First of all, let's push this one here. So add todo, and what this add todo method will do, it requires it to do to be passed on to this one. So this is todo is an object, and we'll just give you this todo, this is a string, and we can optionally give it completed as one as, although there is a default value there, but any case, we'll just give it a false. We don't need to give it an ID because if you remember correctly, in the app.jsx, when we were working on this add todo, whatever the todo you pass me on, which is an object, obviously, I am adding the date here. If you want to remove it completely, you can just save yourself some step. You can spread this or not even spread this. You can just have a todo here, which is an object and spread this previous here. So it's totally up to you that what kind of data flow or what kind of application flow you are going. In my case, I'm passing the text of the todo as well as completed here and the data I'm adding there, but you can do everything here, you can do not everything there, you cannot do that. Okay, so this is the basic, and one as side note that I'll be doing is, once everything is all done, this is all what we need to do as a functionality. I want to reset the todo as well so that the state actually the todo just gets off, so I'll just empty it out. So I'll just go ahead and say set todo, and I'll just empty it out, that's it. A little bit basics, so there we go. So this is all it takes to have your todo form. Now comes to the visual part. For the visual part, what we'll be having is a simple form. So let's go ahead and remove this and just have a form. So there we go, we'll be having a form. There will be no action required on this. We'll be having just one method, which is on submit. And in this, we'll be calling this add method, and we'll be having some class name onto this one as well. So we'll be having class name of flex. This is just a visual aesthetic aspect, not bothered much on that. We are having this input, which is a type of text. Okay, we don't need this. Okay, let's go there. And first of all, we'll be having a placeholder. Placeholder we are saying right to do with couple of dots. And after that, we have some class names that I'll be bringing in from my notes file. I do have a lot of notes. Okay, so I'll be just bringing them up so that it looks decent. So there we go. Okay, this is copy paste stuff, Tailwind CSS. Okay, now interesting part. How does the value in this one governs? The value is going to be governed by the todo, so that's managed by state. What happens when something changes? So anytime you change something, so on change, what happens is there will be an event that will be firing up, so callback. And we'll be calling the set to do. And inside the set to do, we'll be saying e.target.value. So we'll be adding the targeted value in here. Okay, that's my first part of it. And the next part is the button. So that's not really bad. So button, which will be of type submit, there we go. And we'll be calling this one as add. And obviously without any doubt, we do have some classes here as well. Class name, and I do have it in my notes as well. By the way, you'll be grabbing all these classes from my GitHub itself. If you want to add it on your own, give it on your own look, that's also fine, no big deal there. Okay, so this part is all done. We have exported the todo form as well. So all looks great. Now moving on, let's go ahead and work on with the todo item. Again, rfce looks great. So we have react functional component, everything. The looping part and all of this will be working through all of that and all these things in a minute. I'll just directly give you majority of the part as well. But first let's work on the functionality part because here also you need some kind of state management. Why? Because in our application, we are having some of the state controllers. And as somebody checks on that, so is it editable or not? We are governing that. If it is marked as complete, then we are not allowing that to be editable. So that's one thing. And then obviously we need to have all these todo messages as well. We'll be using the state as well. And apart from this, we also have the update functionality as well. So first of all, in this todo item, somebody will give us a prop which will be a todo. And this todo is having all the todos. It's a major gigantic array which has all the functionality in it. Let's go ahead and import one by one the functionalities that we need. First of all, we need to check is to do editable. Okay. And we'll be needing set is to do editable. And that will be governed by use state. And by default, everything will be false. Okay. And what else we need? We need the todo messages as well. So we'll be saying const. And we'll call this one as todo message. Set todo message. And we'll be saying that you will be governed by use state. But in the use state, we will be not passing on directly todo because that will be bad. We'll be just passing it all the todos here. Okay. So that's my one message of the todo. Okay. And updation as well. We'll be governing the updation part as well. So we'll just say update todo. Update todo. And we don't need updation for the state management. We don't need this one. Okay. Another thing that we need since we are controlling couple of functionalities here for example, update, the delete as well, the toggle as well we need to bring these functionality and how we can bring that simply with the hook itself, the use todo. The use context hook actually gives us that access. But we are not using use context. We have actually crafted our own hook that gives us access to all the functionality. So let's go ahead at the very top and bring this one here. I'll say first of all, let's give me use todo and I'll just bring it from autoimport. That's nice. Okay. So use todo. There we go. And this hook gives you access to all the features that you need. What all do you need? In this one, I'll need update todo. I need delete todo and I also need toggle complete. There we go. Okay. So all the todos and everything are with me. Now we need to define some of the functionality as well. Functionality wise, we have already taken care of most of the things but we need to take care of some things in the visual aspect as well. Especially what happens when we do the edit because notice here, if it is editable then we are enabling some fields. For example, if you remember when I clicked on the edit there was a input field that came in and that input field was conditionally rendered. If input field, like if it was edit was editable then the input field came in, the value got into it and now you're allowed to edit into that. So based on this, this is the whole thing. This true or false functionality is allowing us to conditionally render that. That is why we need to write some piece of code to conditionally do that. So I'll just call this one as edit todo and what does this edit todo does? It's a simple function like this and all it does is it allows us to update that because once somebody clicks on edit, we need to run the functionality of update. Whether he has edited or not, that's up to him but we'll just go with that. In order to update anything, we need to pass on two things. The first one is the ID. So we'll just grab the todo and its ID from there and we need to pass on the entire todo that needs to be updated. So we'll just give it an object, we'll spread the todo and what we'll be doing is the only thing that's usually we are allowing to update while this method is just the string part. So let's go ahead and spread this out and the only thing, only property that's getting updated is the todo which is now getting updated with the todo message. There we go. Now it's making much more sense to you. Once this is all done, then obviously we need to say that, hey, this edit is all done. So this operation is being performed. Now let's set editable again back to false. So set to do editable will be going it as false. Okay. Right now you might be wondering, hey, nobody has made it update. That will be done. Editable, nobody is making it as true. Yes, we'll do that. But that will be toggled by another click, not this. This is a pure functionality part. Okay. Now another thing that we'll be going through is this one. Let's create another method. We'll be using that in a second. This will be a simple toggle complete. So in the toggle complete, what we are doing is this toggle complete. Let's go ahead and do it like this. There we go. Okay. Toggle completed. Actually, this is not the toggle complete. Toggle complete is something that we are bringing from the context. Toggle completed is something that we'll be using for visual aspect only, just for the strikethrough line. That is it. So how we're going to do that, simply just have this one as toggle complete. Inside this, we'll be calling this one and passing on the todo.id. Okay. So we're not directly using this method. We are actually created our own method inside this. And this method technically will be running this method. So that's it. Okay. So the functionality part is almost all done, whatever the code we wanted to write. Now what's remaining is how we actually render that. We have used a lot of fancy things inside this. So we'll just do it things one by one. So first of all, what we're going to do is this is my div. This is for each of the todo itself. The first thing that I'll do is add some class names here. So let me walk you through how we are doing it. So remember this, this is not all the todos. This is one todo itself. Okay. So in the app.js, we will be looping through the values. This is just one. Okay. So the first thing that we have is the class name and we'll be removing the class name like this. We'll be starting our JavaScript, use the back ticks here. The reason for using the back tick is because I have some of the CSS classes, which looks as a default. So this is just a string, but I want to add more based on, I want to do some conditional rendering. So if the todo is completed, I want to just add another color based on that. So I'll just do that. Okay. So what I'll do is first of all, let's add the JavaScript functionality and then ask if the todo is completed. Todo is, it has a functionality. I know that this is an object. I added this property into this one, which is a completed. If that is the case, we'll do something. Otherwise we'll do something. So based on this, we'll be rendering the color. And by the way, I do have these colors. So I'll just copy and paste this one. So this color, if it is completed, we'll use that. And if it is not completed, we'll be using this color. So I do have different colors based on that. Okay. So this is easy part. We have gone through with this one. Now let's go ahead and remove this todo item and go up here. Now we have a couple of things that are conditionally rendering. First of all, the checkbox is always there. So let's go ahead and have this one. So input, this is a type of checkbox. We don't need this name and ID. Okay. So this checkbox, we have a class name for this one, really easy, which is cursor, no suggestion, cursor pointer. Okay. And is it checked or not? This checked or not is going to be based on todo. So todo will tell me literally completed or not. And what happens when something changes? So on change, we'll run on that. And in this, we will be running the todo completed, the method that we created todo. I'll just copy and paste this one. Otherwise it will confuse me a lot. Okay. This one, toggle completed. Copy that and paste it here. So this is the reason why I didn't use it directly because if I use it directly toggle complete, I have to pass an ID. So I have to run a callback here. If you don't want to do that, just use it like this. Exactly same thing. So exactly same thing, nothing too much to be discussed. Okay. Next part is my input field and based the input field is editable or not, that will decide based on this one is todo editable. Okay. Let's move on to the next part. Next part is again, this one is the input type of text. So we'll be saying input text. There we go. We don't need any of this. Remove this, remove this. Okay. First of all, the class, again, the class name will go like this, this. This is a common practice. You'll see quite a lot of things being done just like this. So these are our basic classes, but rest of the classes will be conditionally rendered. So again, fire up your JavaScript fillers up here and is todo editable based on this condition, either do something or do something else. I do have again, these things. So if it is editable, we are showing the borders. Otherwise we are not showing the borders and that is it. I know very, very sneaky, but this is how it's being done. Okay. So command Z. So we are showing the borders. Let me just copy this. So we are showing the border. If it is editable, if it is not editable, then we are making the border as transparent. That is it. So it gives the feeling that it's not an input field. That is it very sneaky. I know, but this is all what we have. So in the class name, now the rest of the thing in this is pretty easy to add in. So we need to add the value. What value? Pretty simple value is a todo message. Todo message, we got the value, we are displaying it. Is it readable or not? So let's go ahead and, so this is a read only field based on some field. So we'll be using exclamatory and the thing is, is todo editable. So if the todo are really basic logic, we have already discussed that as too much, we are giving it as a false. So is it readable only or user can edit it based on the edit functionality? We are giving that, so really basic. Don't want to explain it too much explanation of that. And one more field is on change. What happens on change? So again, we have an event that is going to callback and that's going to make it is, is set todo message as e.target.value. Set todo message as e.target.value. There we go. All right, so this is done. And again, very, very sneakingly, we are adding these input fields and all of that. Last but not the least, now we have buttons and actually we have couple of them. There's a save button, which actually conditionally render to save or edit. We have a delete button as well. So let's go ahead and do that as well. Okay, one by one. First of all, this is a button. So this button is just a classic button, nothing too much onto this one. What goes into the button is actually dependent on the value itself. So I'll just go ahead and start my JavaScript again and depend on is todo editable. So for that, we'll be giving it something. Otherwise, we'll be giving it something. So you can go ahead and say if todo is editable, go ahead and give it a save. If it is not, give it a edit message, but we do have the icons for it. So I've actually copied the icons. So we'll be using the icons, but again, you can use the text if you wish. And I do have a pencil icon for that as well in the case of edit. So we'll be using that fancy, but yeah, I like that. Okay, so again, we'll be adding some of the classes and all these things. So let's go up here. First of all, let's add a class name, lots of classes in this one. Okay, copy that and paste it, no worries that part. Okay, classes is all done, but what happens on click? That is the important part, on click. So on click, we'll be firing up a callback because we need to check some conditionary rendering here or conditionally. So we'll be checking if, based on some conditions, if todo is completed. If todo is completed, then we don't want to do anything at all. We don't want to give any functionality. On click should do nothing at all. If it's already completed, why do you want to save or edit it? So we'll just go ahead and say return. Okay, that's one check, but if todo is editable, let's go ahead and do some more stuff. So we'll check again. If is todo editable, in that case, we'll just go ahead and say edit todo. And in this one, we'll just run this method. And in the else part, if todo is not editable, then we'll just keep it as it is. So we'll just say set is todo editable, and we'll take the previous value and we'll say as it is, just flip that. Prep, okay. So I hope you remember is todo editable. This is just a Boolean value. So this is just true and false. And if todo is editable, then we perform the edit operation. If it is not, then just go ahead and keep it as it is. We don't want to do anything in that case. Okay, so this is the first part. And also what we can do is in this case, we can actually check for, you want to give that button. So you can actually optionally, we can make it as disabled button or not. Again, disabled will be based on if todo is completed or not. So todo.is, not todo, completed. There we go. Okay, that's my first button that I have. I do have another button, which is a delete button. So let's go ahead and have a button. And this one is delete, but just like always, we do have some icon for it. So I'll copy and paste this one. So yes, we have this icon. And again, apart from this, we'll be having a class name. In this class name, lots of classes. Yes, literally, lots of classes goes into this one. Doesn't really bother. The most important thing in here is what happens when somebody clicks on this button. So if somebody clicks on this button, then obviously we'll run on click. And on this, fire this callback. And just simply run the delete todo. And for this, we need to pass on ID. So we'll say todo.id. There we go. Okay, quite a lot of stuff, but I think it's all understandable. Probably it's going to take one more iteration to understand this. It looks a lot, but because we are doing some sneaky stuff, like removing the borders of input field and all not, if you don't want to do all of this, you can just always go with the classic simple, add todo is remove, delete, that's it. We don't want to, if somebody wants to edit it, there are lots of ways of editing that. Okay, now next thing is, let's go ahead and import all of this and export them via the index file. That's always a good idea. So we'll just go ahead and say, I want to import the todo form and I want to import this todo item and end of the day, we'll be exporting them. So export all of them. Remember, we are not exporting them as a default. So be careful of that. And todo item, there we go. Exported all of that. Now it's time that we go into app.js and actually work on with this one. So app.jsx. Now this is the part where we work on with this one. Okay, now as you can see, we need a little bit more of the CSS part and whatnot, but I'll walk you through directly that. All we have to do is, I'll be adding the CSS, we'll be giving you directly, but in this one, I can just go ahead and remove this H1 first and can import my form directly here. So I'll just go ahead and say todo form and that will do the job. It will not look the best of the one, which I'll give you that, but it will do the job. In the case where I want to loop through the values, then also it was super, super easy. I'll give you the copy paste version of it, but first let me walk you through with the functionality part. In here, when you want to loop through the values, you have to fire up your JavaScript, just like this. Now I can use the todos. Remember, this todos, yes, this is all the time getting updated in the context and everything from the local storage, everything. You can use it directly. So in the todos, just go ahead and first loop through it. So we'll just go ahead and say map. Once I'm looping through this, obviously I have access to this callback, just like this. I have access to each of the todo, just like this, todo. And in here, what I'll do is I'll directly fire up parenthesis so that I don't have to use the return keyword in here. And I can just go ahead and add a simple div, just like this. The reason for using the div is so that I can pass on my key. Keys are really important when you're iterating through the values. And I can say that todo.id is, I'm pretty sure that's a unique one, so I can use that. And in here, I can just go ahead and call my components. So that is my todo item. There we go. This requires just one thing to be passed on, which is a prop known as todo. And I can directly pass on this todo. Now this is all, this is all the functionality parts. So now I'll just go ahead and actually bring the nicer version of it, which includes the classes and whatnot. So I'll just go ahead and bring that in. So from my notes, but this is it. The functionality part is it. Rest of it is just the classes and all of that. So I'll paste this one. And if you remember, this is nothing. We have the todo provider exactly same. We're calling this todo form, but a little bit nicer in the div with some classes and some flex box going around. And this is exactly the same thing that we just discussed. The only thing which is different is the widthful and all of that. So as I save this, and hopefully things are working or probably not, I'll just kill it and start it again. Now, if I go back, there we go. We have this test and all of that. So probably it's working. Let's go back and see in the context first, in the context, todo context, and this is todo message. And this is, so what this is doing is, actually this is bringing all of this from the local store. So I'll just right click inspect and go to my application. And we need to go into this one and we'll just clear this one. Okay, now let's try to reload this. Now we have everything gone, okay. Let's go ahead and add this one as test and add this. So there we go. We see the test is there. Let's also see if it is able to grab this from or inject it inside my local storage application and local storage. There we go. We saw that test is here with the ID, nice, nice and easy. And apart from this, we are having the edit functionality. So the border comes around and I'm able to add the test one. Save functionality, working nicely. Can I remove this? Yes, this is also working. So let me just summarize this one more time because I think this can be too much of overwhelming situation for a lot of you. Let me go ahead and walk through with this one. Although I tried my best to explain you line by line and I'm pretty sure you'll leave a comment for that that, hey, we enjoyed this lecture. The first thing that we understood about this kind of application is that we need to attack the context first because that's where majority of the things goes. So in the context of to do, it was pretty simple. We have the create context and use context. Create context for creating the context. Use context is the hook for using that context. And use context doesn't work alone. It requires the context which you created by create context. So we use the create context to do context. If we added our data will go here, functionality will go here. We don't write to the functionality, but the boilerplate blueprint of the functionality. Then we simply use the use context hook and provide the to do context. Don't need to import anything since it's available directly. We created our own hook known as used to do to actually go ahead and do all of this. Pass on as a hook. Once that is all being done, and now there are two cases in front of me work either on the components or the functionality part first. I chose to work on the functionality first. I always go with that. So we went into app.jsx, wrapped everything into the to do provider. That's the easiest thing. And by the way, if you remember, we are having this to do provider also being exported. So we need this one. Otherwise we have to say to do context.provider, don't want to do that. So I went into app.jsx and work on with this, wrapped everything we did to do provider, either do it here or do it in the main.jsx, totally up to you. Wherever we are importing these values and things, we have to import these functionality as well. So we know that to dos don't need anything, but add to do, update to do, delete to do and toggle, we'd need to write the functionality somewhere. So we chose app.jsx for that one. Add to do, pretty simple. We just added to dos from the set to dos, very basic. Update is very basic. We discussed on that, delete and toggle as well. The important part was the use effect. We used to use effect in this one. This use effect will run as soon as the component will mount. Since there is no dependency array inside this one, this will never run again. If to dos has a dependency array, then it always run again if there's a change in that dependency array or any value inside the dependency array. So this one use effect, we want that I want to add or inject the to dos as soon as there's a change in this state, which is a to dos. So that's why use to use effect, common thing. You'll see this quite a lot. After that, we started to build our components. And the first we take down is a to do form, very easy. All we had to do is work on just one functionality, which is add to do, pretty simple. We brought it in from the context. And we simply say is, when the add method is being called, somebody clicks on that, just run this add it to do, which is context and pass on the data, that's it. Then we worked on the to do item, which is a singular item. We spend a lot of time in understanding the contextual part of it, the conditional rendering of the elements. This one was basic because we want to control that whether the to do is editable or not, what's the to do message and what happens with the functionality as well. So functionality we brought in from use to do. The rest of the things is just managing the visual aspect and the UI aspect of it. So we worked on the edit to do functionality and toggle complete, nothing much. You could have done the toggle complete inside there as well, but I chose to do it here. Again, a random choice. And in here we worked on simple things. For example, should everything be will be striked off or not based on conditional rendering of the CSS. Input box. So this input box is checked. Should it be checked or not? To do will tell me. I'll just ask to to do. To do dot completed, are you completed or not? Based on that, we'll get that. Then we have this nice thing, which is having a lot of conditional rendering. Majorly the outline around it. So if there is no outline, the input field looks like a text itself. So we actually use that. Value will get from the state. On change will be governed by the set to do message. And is it read only or not? That's awesome. After that, we have a couple of buttons. The button will be a save button or the edit button depends on is it to do editable or not. And then the delete button. So that is it. A lot of functionality. Don't worry about the CSS part of it. If yours doesn't look exactly mine, just look at the GitHub repository. I'll be pushing that. In fact, that would be a good thing to do. I'll just go ahead and add everything in here. And we'll say added another, add another app with context and local storage. Okay. And this is app time. So I'll just mention that app time. Oh, too much. I'll just remove this. Okay. So let's just go ahead and commit this so you can find everything on my GitHub repository. Okay. Pushed it. So there we go. So now I hope that you are pretty much more aware of the flow of the application as well as how the context part of the application works through that. I hope that has given you great, great insight of the React application, some inner working of the React, especially the use effect hook and whatnot. In the next video, from the next video itself, we'll be starting our mega project, which will give you a lot of ton of insight of how to build a full stack application. We'll be using obviously the app right for it. So let me walk you through about that in the next video. All right. Hey there, everyone. Hitesh here back again with another video and welcome to the continuation of our React series. So far, we have studied quite a lot about the React, quite an indepth series about how we can build applications with the React, how the React internal works and pretty much a lot of things. Now from this video onwards, we are moving into a journey where we actually utilize all the things that we have grabbed so far and put this into a use of building a software, building or using the development skills. This is exactly what a lot of people miss that how to actually transform your learnings and knowledge into the development skills. And this is known as development. In this video, I'll walk you through what we are about to build and what all skills you are going to be learning throughout this one. By the way, we are building a full stack application using React and for the backend, we are using everybody's favorite and open source app, right? So I'll walk you through what the idea behind this application and I will be focusing more on the generalized knowledge. This means after watching this entire few videos and the entire project, you will be able to build any kind of social media app. You don't need to watch any other videos after this, you will have full knowledge. By the way, just imagine what is Facebook? Just some text and images, that's basically it. What is a Twitter? Just some text and images. So it doesn't really matter how the website looks like, end of the day, it's just a social media which is empowering you with some kind of text and some images. The same goes for the blog article. So if you know the ins and outs of how to build a blog application with some text and some images, you pretty much can build any kind of social media app as well. Definitely on top of that, there could be so much more that you can do, but at least a basic building block could be ready. And that's exactly what we'll be learning in this video. So let me first show you what we are going to do. So let me share my screen. So this is where we'll be building. By the way, in case you haven't noticed, we are already on the 10th app. So we have done with that. This one is going to be technically our 11th app, but I want to show you something more. First thing, although you have completed the series, I expect that you have completed the series in all the playlist manner that I have uploaded. So quite a lot of long playlist that we have gone through with the long videos, 26 minutes to 40 minutes, there's a lot of range in that. Only recommendation is, if you're watching it in the continuation, I'm not sure that whether you have seen this video at the very end or at the very last, wherever you're watching it, after finishing up your context API, go and watch my Redux toolkit in one hour. This is a crash course on Redux where I've talked quite an in depth about how Redux toolkit works and the setup of it, different ways of handling the situation. This is going to be a little bit requirements. So in case you haven't yet watched it, go ahead, watch it in the playlist. If you're watching this entire video in just one go, go ahead and watch this one as well. And then you can move on to this video, which is obviously the next in the playlist. So what we'll be building up? We'll be building up this small application. And again, our focus is not on the UI part, but rather more on the functionality part. In your UI, there might be two cards in one row. In our UI, it might be four cards. Doesn't really matter. This is exactly the functionality we are looking up for. This is our homepage where there will be a display of the card which displays the title as well as a preview of the images, not the actual images. This is something which is given to you by App Right as kind of an easier way to handle images so that not the entire image is being transferred to you, but a preview version of it, which is a little bit of a lesser quality. Once you click on this, any of this AI or anything, wherever you want to visit this, this gives you a full blown image, which is larger. And that's why the bigger one, because I wanted to show this exaggerately that this is a larger one. And you can see this is where we have our text data. Our text data is very, very small. I just wanted to show you that you can actually store the way how this is being bowled out. So yes, this is also done. Not only that, this project has some of the issues which are intentionally left in this one so that you can actually work on them and work on that. So that you saw that briefly login to read post. So there's an intentional error being shown there. And by the way, I will give you the entire list of where the bugs are and how you can fix them. Entire walkthrough will be given to you. But these are the things that you have to walk through and you have to learn through. I've seen that when I recorded this entire series in different language and people actually appreciated that, okay, now we have some work to do. And they got excited. And if I click on this latest one, you can see this is uploaded by me. So obviously I get the edit and delete control over that, not for the other people. So that's a great idea of how things are done. Here we can see we are storing more information like there is a color control, there's all of that. So we have a full fledged editor that we are going to be using along with the React. Of course, we have the logout and sign up functionality and sign in functionality powered by app, right? I'll walk you through with that as well. When I click on the add post, we can see that we have this add post that we have. We have the full control of WYSIWYG editor, what you see, what you get kind of editor. We can store that. We have a slug which works automatically. We can have a nice slug which automatically converts whatever the URL or our title is into a URL format with the dashes. So there is a little bit of logic writing that you will be learning in this one. So quite a lot of intriguing details are there. For this entire one, we are using app right end to end. This entire things are stored in the database like this. I'll walk you through how the database are being created, how you can use them, authentication features. End to end, the full backend is powered by the app right. It's free and we will be using that. So if I click on this, this is where we have entire authentication details. We are having all these four, five random names of the users, but if we wish, we can go ahead and use other services for this. For example, in the settings, we have a lot more options. Just have to click and enable small pieces of code that I have to inject and that's it. It supports so many crazy how much it supports. And we will be using authentication. We'll be using database services. We'll be using the storage services as well. So this will give you enough of idea that how to use storage, how to use authentication and how to use databases. Rest of them, I don't think so. There is too much of tutorial required. Once you know how to do A, B and C in one format, you can figure out how to do the D one. So that's the goal of this series. So again, I'm super, super excited that we are going to get started and we are going to build this one. Again, my recommendation is we will be focusing more on the functionality part, the UI part. It's purely, purely based on the tailwind. I highly recommend you to give it a different look that what I've given you. A lot of other students have done that and they have found that it's a great result. They have learned so much more just by modifying the UI. It gives them so much of confidence. Of course, I'll be giving you assignments as well, but I'm super excited to get started with this one. So in the next video, we'll set up a simple boilerplate react template. We'll connect our app right with that. We'll start everything from the scratch and the fresh. And I'm pretty excited that you are also following this up so far and I'm pretty sure you'll be following in the next one as well. In case you are enjoying these series, please share them on LinkedIn and also do hit me in the comment section as well. Just a model support a heart would be really nice. So that's it for this video. Let's catch up in the next one. Hey there, everyone. They share back again with another video and welcome to the continuation of our react series. So in this video, we'll just create a fresh app. We'll peek into a little bit of the documentation of app, right? And it's actually surprisingly good that their documentation was already good, but they have still rewritten the entire one and I'm loving the new one. So we'll go through with that and the entire documentation study that we are going to do and with the code that we'll be writing is going to be 100% reusable. So whether you are building any app in Flutter or maybe in React Native or anything else that you're going through, the concepts will remain same. If the programming language changes, then obviously you can find the things equivalent in your language as well. But in most of the case, anything related to JavaScript, TypeScript, they are going to be very, very same. So let's go with that and let me share the screen and walk you through with that. So first, let's go ahead and create a new app. So obviously we are using Vite. So NPM create Vite at latest. That is what we have been using and that's exactly what you're using. By the way, with this one, I'm targeting the people who probably might have not watched my previous videos. That's also fine. If you're just starting from here, that's also fine. There will be a few concepts which I'll point towards, say this was covered in previous video or something, you can watch it at that time. Otherwise it would be a fantastic experience in working together and building a full fledged application, a full stack application. So let's call this one as 11th app. That's basically our 11th app, but hey, let's go ahead and start my terminal here. We have a lot of one here. We'll be just going with the create Vite latest. I think that's good one. And let's call this one as 11th blog app. Blog app, yeah, fine, good name. We'll be using of course React and yes, no, we are not going to be TypeScript in this one. Yes, I know, I do have a series on TypeScript on this channel. It got really popular on the free code camp as well, but we'll be going with JavaScript in this one. And what I want to do is I just want to kill this terminal and I want to open this up, right click and open an integrated terminal. That way I don't have to do CD and all those stuff. And I'm into this, I can just do an LS and I can just say NPM install. This is going to obviously install everything for us. And we need Tailwind for this one as well. So let's go into Tailwind CSS, quickly go into the docs. That's how I always recommend everybody to just go look into the docs, figure out how things works. In this one, we have already done this kind of a thing. So we'll be going with this command now. So let's go ahead and copy this so that we have the Tailwind setup being done. So this is the part one of Tailwind setup. The part two is to have the configuration file and set up so that it knows where probably you will be writing your Tailwind files or Tailwind commands, utilities, wherever you see that. All right. So in this one, I have the Tailwind config. Go ahead and change the content part. Don't forget the trailing comma. This is pretty important. So go ahead and do that. Once you're done with this, then in the index.css, we need these directives being placed. Yes, with the add the rate, they are called as directives. So we'll go into the main file where all of my CSS is there. In my case, it's inside the source and I do have index.css. We'll replace everything and place our directives there, save that. And that's it. Now I'm technically allowed to run npm run dev to have my application up and running. We'll be doing that, but that's the basic configuration. The next step is to have app right being installed. Now installing app right is pretty straightforward. There is nothing too much to discuss on that. It just says npm install app right. And that's it. That is the easiest part. Now you might be wondering that we are into React, which is pure front end. So what does this app right is going to do? This app right package in itself will allow you to talk to the backend part, backend as a service, which is app right. This is a very common thing in case you have used any backend as a service in which we focus majorly on the front end part, not on the backend side. So backend part is handled by the app right. But in order to talk to that, we need the app right. So that's what we have. Let's quickly check our package.json so that we can verify things are doing good and we are okay with that. All right, so in the dependencies we have app right. That's exactly what we want. And in the dev dependencies we have tailwind and all. All of that, we are happy with that. So app right is the only thing that we require right now. Now we'll be needing a couple of things here. So inside the blog, I'll be just creating a couple of new files. Let me go ahead and first create that. First is going to be .env. That's my environment variable. I'll walk you through that, how you can deploy this application on WordCell or Netlify, whichever works for you. I'll show with the WordCell. So these environment variables are very important at that point of time. So that sensitive information or data is not exposed in the GitHub and all of that. I will also create another new file because I want to give all this data to you. So I'll be saying that .env and I'll be creating a .sample. So this is a sample file which is meant to be given to you so that you actually work with that. And what I'll do is I'll just actually go up into this one and this environment variable, I can just right click and add this to gitignore so that that file never goes out to any GitHub repository because this includes some of the sensitive data that I'm about to add in here, okay. What kind of sensitive data you will be requiring that will come from the AppRite itself. So go ahead, create an account on AppRite if you haven't yet, it's cloud.apprite.io, pretty straightforward, pretty basic. And if you just scroll at the bottom, you'll find the docs one here. By the way, you can just get through the docs simply by apprite.io slash docs, however you want. And let me walk you through how to study these docs, that's an important aspect. So on the left hand side, you'll see that what products they offer and they have authentication, database, functions and storage, these are four major services. There's a lot under these categories, but these are major four categories that they work on. In this project, we'll work on auth, we'll work on database and we'll work on storage so that at least three of them are completely understandable by you and you can explore further things more. In the database, I'm not just talking about touching the database, I'll also walk you through how you can make queries in the database so that whatever the application you are building, you have the knowledge so that you can explore things on your own. So we'll be going through with that. Now, if you go on any of these products, for example, if I go into the auth, now we can see that there are journeys and there are references. Now, journeys is something that what do you want to implement in your application and the APIs are what all the things I can do in that. For example, in the email and login, if I just click on this, it gives me the entire that, hey, what do you going to need? The entire project is itself there, so entire source code is there and you can just see that. So here we can see that what we get is a promise, but what we are using is an account which gets to us by this account from the app right, just like this. And further this, we can actually provide a user ID if we don't, app right will give us one and we can provide an email and password to create an account of the user. So this is all it requires. And further, if you want to do the login, the same kind of a guide is provided to you. But if you want to do more with this account API, you can just click on the account API and can see that I can get an account, I can create an account, update an email, I can create a JWT token, update a username, pretty much whatever I want to do, delete the sessions, list the sessions. There is an endpoint given to me so that I don't have to worry too much. For example, if I just want to see that how to delete sessions, all the sessions, I can click on this and this gives me the method that, okay, you can use simply deleteSessionsS with the end so that it deletes everything. And that's it, that is going to delete. So it saves me so much of the time and if I know how to navigate properly, it doesn't really matter if you're using a React Native, React, or you're using something else, it just is the same. So that's a brief overview of how to actually study the newer documentation and I find myself, I can find exactly what I need in a much quicker time with this pretty much fantastic documentation here. Okay, once now that we know that how the documentation and how we can traverse through them, I can go into organization, which it gives to everyone, the first time you create the account, this is what they call account as an organization. I am supposed to create a new project. So let's go ahead and create an empty project. I can import a project as well, but that's experimental. They are always very fast in doing the things. They always keep on doing some stuff. I'll create an empty project and let's call this one as YouTube blog, I think that's a pretty good name. It also gives you a project ID. We need this project ID, but I don't want to edit it, although you can, if you wish, you can add your own custom IDs. I don't want to do that. I'll just simply click on create, and this is going to create a project for me. And in a few seconds, hopefully my internet is, oh, some of the things are actually getting uploaded. So I'll just copy that, stop that for a minute. And this is what I need. So I can just click on the copy and this is something that I'll be needing. Okay, where do I need this? All of these things, go ahead and follow along with me. These are some required stuff from your site. So, okay, Postman, no, I don't want to do any of that. Okay, in the environment variable, we need some variables to be put on. So I'll be just adding a React underscore app, and then I'll say underscore app right, if I wrote that correctly, app right underscore URL. And that's going to be my first variable name. And similarly, we will be having a couple of others, like app right project ID as well, project underscore ID, and this is my project ID. So what we get as a project, that's exactly my project ID that I have. Now, once I have the project ID, the next thing is we have not worked on one thing, which is the project URL. Now the project URL is actually constant for all the app right, because the app right is hosted up here in the cloud. By the way, in case you want to do and find it out properly, then click on the web. This is where you add your project. You can add multiple of your project. So my project name is, we called it what? We called it as, let me just go into package.json. We called it as 11 blog app. Let's use the same, otherwise it's not really compulsory. This is really important. Right now we want to use a local host here, but as you upload this exact project on vorsl, Netlify, wherever, I use something similar to this. So any subdomain which is coming up from vorsl, any subdomain that's come from Netlify, if you're not going to put this properly, then there are 100% chances that you will find yourself messing up with the course error. So this is something which resolves it 100% necessary. Please pay special attention to this one. For the local host, it doesn't require any port or something. You just need to get local host. Notice here, it actually gives you a suggestion. I hope it's visible in the screen recording. Yeah, it is, it is. So just add a local host. So just go ahead and add a local host. That's all that is required. Once you are done with this, now any request coming from local host will be accepted in the server and it takes time. Not too much, but I have noticed it takes two to three minutes to propagate these changes. Sometimes when I'm back to back recording, it sometimes takes time. So two to three minutes is usually the things to propagate these changes. Let's click on the next. Now, npm install app, right? We have already done that. This importing of the client in the web SDKs and stuff, we will do that, but not right now. Let's go ahead and click on the next. This is the endpoints and set project. So notice here, project is 736. This is exactly the same ID that we have got in this one. So 763, that's the same ID we have already got. And there is an endpoint being mentioned here as well. That is exactly your app right URL. You might want to copy this. And by the way, this is exactly same for all the projects. Yes, I worked with a lot of projects of app right. And this is exactly what you needed here. Okay, once we have this, now we can click on the next. And it says, hey, go to your dashboard and stuff. Yes, I'll go ahead and do that. This is one of the most important thing. Please do not skip that. Otherwise I've seen people struggling into the course error. So these are the two things that you need and your project. Now you have a unique ID, you can talk to that. And that's where the app right SDK comes into the picture. But there are a couple of more things that we are going to require. So project ID is great. I'll just remove this one. But apart from the project ID, we need the database ID as well. Database underscore ID, we'll work with the database as well. Once you're into the database, that's a generalized database. In each database, you'll find a lot of collections as well. So I'll just go ahead and have a collection ID as well. And by the way, from where to get, I'll walk you through with that as well, don't worry. And we need the bucket ID as well. So I'll just go ahead and add a bucket. What do you mean by bucket? Bucket simply means the storage that we'll be using. So let me walk you through how we can grab that. So I'll simply go ahead and have this one. So what I'll do is simply go into the database. So our app is completely up here. Now here we have the databases. Just go ahead and create a new database and enter the database name. Let's call this one as YouTube, whatever you want to call, you can go ahead and call that. I won't be giving any ID. It will be given to me automatically. So I'll just go ahead and click on create. So that's what this is. So this is your database ID. So go ahead and copy that. That's exactly what we need. So this is our database ID, that's it. And once we are into the database ID, then obviously we need to create a collection. So that's the next step. I'll create a collection. Let's call this one as blogs, articles, whatever you like. I'll just go ahead and click on create. And this is my collection ID. So blogs, notice here how easy it is to just go ahead and go with the flow and copy the collection ID. So that's all what we need. Now in here, we are going to need to add some of the attributes. What kind of data is going to come up in the collection? Since we are here already, let's go ahead and add those attributes. So let's go ahead and click on attributes and click on create attributes. And you can create attributes of type string, integer, flow, Boolean, there's a lot of types. I'll be most of the time will be using the strings. Once I click on the string, what is the key that you want to use? I want to go with title. If I can write that properly, there we go. What is the size? Totally up to you. I'll go with 255. Go ahead and use whatever the type that you want to go with that. So I'll just go ahead and add 255. So use that or use the scroll ones. You can add a default string value if you wish. I'll be requiring this. So I'll just say, hey, this is a required string. I'll just go ahead and click on create, that's it. So you need to provide a structure of your data that how this data is going to come up in the collection so that anything which is required can be treated like that. Let's go ahead and add a few more which are going to be useful for us. So we'll be saying content. This is how my content will come up. I'll go with the string again, 255. If you wish more, then obviously add more numbers here. These are character sizes. So go ahead and use more. I'll say the content is also required for me. I'll just go ahead and click on create for this one. All right, so we have content title. Let's go ahead and create one more. And that is going to be my featured image. Featured image. Now this featured image is going to be a string size. I think 255 is good enough. I'm not storing the actual image into this one. Rather I'm keeping the long string URL that I'll be uploading in the date in the storage service of app, right? Once I store an image in that, it returns me back as a promise of a long string URL. That is what I'll be keeping here. And I'll say this is also required. So give me this image. This is pretty important for our application. Let's go ahead and create that. Now I hope it gives you an idea that how these things can be done. You can work with that. So I'll just go ahead and create more attributes. One more string. So I'll just say, hey, I need one more, which is status. Now it's up to you. You can keep this as a string or you can keep this as a Boolean value. I'll not keep this one as required because that's the status of my blog, whether it is active or inactive. I can just do that on the go. But if you wish to have it as an enum Boolean, it's totally up to you. I'll have one more, which I'll talk in a minute, but this one is actually user ID. So I'll be adding a couple of, not couple, just one user ID for each of the blog that we have. So this is exactly for that. 255 is good enough that we saw while building the demo of this application. But this is required field when we create a collection of this one. Let's go ahead and create this one. Okay, so there we go. We have now the basics being done. Pretty good. Now what we'll do is we will learn how we can make some queries with the databases as well. In order to make some queries, we need to have some queries other than these basic fields like title or something. What you'll study is when you have an index is being placed on any collection, it's much more optimized for the searching purpose. I'll probably talk about more of the database optimization stuff probably in some other video. Right now, let's go ahead and learn how we can create an index. So all you have to do is create an index, is provide a key for that one. So I'll just go ahead and say that, hey, the key we are going to call this one as status, that's my key. The key type is you can have multiple keys. I'll just go with the keys. What is the data attribute which will be responsible for this one? I'll just go ahead and use the status for this one. And that's it. I'll just create this. That is how simple it is to have a key being assigned. So there we go. Now we'll be able to make queries. By the way, we can make queries just based on attributes as well, but it gives us a little bit more advantage. We'll study about them and I'll walk you through, give you some resources more on that. So there we go. We have now all the values being added up here. Since we were already here, we set this up. Now, coming more onto this one. So we have the auth service, we have the database service, we studied about them. We have one more thing, which is the bucket ID. Now, in the documents, if we'll just come up onto the documents and we were in the attributes section, go into the settings section. This is where you can see that who can actually have the permission to add these documents. This is the most important thing. Not if anybody can come up and write into your documentation, you need to give a role to that, that who is allowed to that. Anyone is allowed, all the guests are allowed, all the users are allowed, any guest, anybody who will like to that. I'll say that any user is allowed. Any user is somebody who is already using my application, already logged in or something. So all the users are allowed of this application. So it will automatically wire these things up with your links. I'll say that all of my users have the ability to create, read, update, and delete my application. Whatever the role you want to give, you can have the rolebased access within this database as a service. I'll just go ahead and update this. So there we go, our permissions are updated. This is the most crucial one. I've seen people struggling with this quite a lot. So make sure you are worried about your settings and who can access the application. Now we'll not talk about the functions in this video, probably some other video. Let's go into the storage. So this is where you set up your buckets and everybody calls this storage as buckets. Let's go ahead and click on the create button. And what do you want to call this bucket? I'll call this one as images. Doesn't really matter. We never actually, we never reach it out to using the name. We always reach it out using the ID. So that's what we need. So let's go ahead and create this. And we'll see the bucket ID, go ahead and copy this and that's what. So there we go. Our setting is all done. Now I want to copy this and I want to give this you into environment variable as well. Obviously these things will be changed by the time you'll be watching the videos. So I'll be obviously rewriting them. It's important for me to rewrite. I'll be giving you all of that, but you know what values and what variables to look up for. So that's the step one of how to grab all the environment variables and what the settings we need from this one. Now let's go ahead and set up a little bit of our application as well and show you some of the best practices that probably will help you to optimize these applications. So first thing that we're going to do is inside the source, I'll create a new folder and we're going to call this one as conf. This is for configuration and we'll be creating one more file into this one known as conf.js. Conf.js. Now what we are going to do in this configuration, what we're going to do majorly and you'll see this as a common production grade setting and practices being used is you simply go ahead and create a conf or conf just like this. And this is usually an object and you simply go ahead and export that. Export default conf. Now why we are doing this? This is being done because sometimes what you'll notice is accessing the environment variable could actually potentially throw up an error or sometimes there is no guarantee that what data type is getting returned. This is not the case when obviously are using TypeScript or something, but this is a common practice being used. For example, I can just go ahead and say that, hey, I'll export an app write URL just like this and the value of this will be wrapped up in the string so that I'm 100% sure the value that's coming up is actually the string. And I'll just go ahead and say, I'm accessing that by process.env that's by default in the React. And then I'll just name this one as whatever I use there. So in the environment variable, if I go ahead and say app write URL, copy this and I go ahead and paste this up here. So a common practice that you'll see quite a lot and similarly, we have the project IDs and whatnot. So let's go ahead and finish this one up. App write project ID just like this and again, same string and yes, this one takes time. Process.env. And we need to grab the project ID. So copy that, paste that. That's the project ID. We need the database ID now. App write database ID and our gain string. This is just to make sure that we don't fall into the case or the data type issues. Again, nothing much. Process.env. And we need to grab the database ID. This simple export will help you to save so much of the problem. Trust me, I've been into that phase. App write collection ID and again, that's going to be a string and again, process.env. This looks so much work right now but it saves so much of the troubles. Good practice again. We have the collection ID, one more, bucket ID, almost done. App write and bucket ID. There we go. Again, last one string and we'll be saying process.env. And last one, bucket ID. All right, so there we go. So now that we are exporting this conf, now we can import this at any place and wherever we import this, we have conf.app write URL, app write project ID in case you wish you can directly go ahead and import this. But the idea is that if we face any error or the environment variables are not being able to load, we see all of that at one place. So this makes life a little bit easier. It was not compulsory to do but in the good major scale projects and high scale, high scale companies, you'll find that this is a common practice. So just wanted to introduce you that, that yes, things like that happens and things that like works. All right, so this is our basics, the setups and everything are done. Now let's close all of this. You have the idea how this is being done. Now let's set up the things for the next video that we are about to work. So for this one, we'll create a new folder inside the source and this is the most important thing in here. Let's go ahead and name this one as app write. And inside the app write, we'll start with just one file and then eventually you'll see that why the other file or how the other file will work. We're going to call this one as auth.js and I'll walk you through what is our plan with this auth.js. So right now we have just got the idea that how things are going to work. We have studied the app write a little bit. I highly recommend you to go ahead and explore a little bit more of the documentation of app write. The idea behind that is I want to create these services. Why services? What's the service as a page? Whenever you work with these kinds of applications, especially backend as a service, you want to create a service file which actually kind of encapsulates all the hard details like how the registration work. Somebody who's using our application should not worry about that. He should see this as just a method that I provide you an email and password or probably a photo and you register me as a user. What you do in the internal detail should be hidden from me, should be abstracted for me. And another advantage of doing this same approach is maybe you are working with React Native or maybe you're working some other application as well. You can reuse this exact same code. Yes, literally you can copy and paste this exact code and it makes it so much highly reusable of a code. So that's a good practice that we are learning how to write the reusable code. So that's one of the advantage we are going to learn. And once you see and understand that how we can use authentication service and the database service as well as the storage service, that's it, you are mastered about the three services in app write and you can explore things on the go. We'll be learning everything from the documentation itself so that it gives you more confidence that yes, you can do the things on your own as well. All right, so that's it all. We'll be doing keeping it short. And in the next video, I'll be changing some of my IDs because I've exposed this to all of you. So I'll be changing them and then we'll be working on the next file together. All right, so that's it for this video. Let's catch up into the next one. Hey there everyone, Hitesh here, back again with another video and let's continue our journey with the React. Just to give you a brief context, in the last video we saw that how we can build a full stack application using React and app write. I walked you through with the setup of app write and integrate it with the React. Just a quick sidebar or as an interesting note, make sure that you're in your app write app, your app is properly configured, you have added the web app and there is a local host string being added. If I'm not going to add this, this might lead up into a lot of course error which are nasty in itself, but the easy fix is watch out if you have added the web app inside the app write. That's it. In this video, I will walk you through everything that you need to know about how to read the app write documentation and integrate the auth section of it and taking one section at a time and we'll walk you through how you can make your code robust as well as highly reusable, whether you're using app write in Next.js, React, React Native, Flutter, whatever you're using, you will be creating exactly same file. In fact, you can actually copy paste this exact same file in all of your project. And not only that, I'll walk you through what is the best way to read the documentation and all that you need. Quite interesting, isn't it? So this is all that you need to know about handling the auth in the app write. Let's go ahead and get started. Let me share my screen first and then we'll walk you through. So this is our app write documentation and this is our React app that we have been going through for a while. And in this, I showed you that we have installed the app write. So if I just open up my package.json, we can see in the dependency we have app write. Pretty cool so far. Now, after that, with the basic configuration and having all of our environment variables, which we discussed in the last video, I asked you that create an app write folder and create an auth.js file into this one. In this video, I'll walk you through that how we are going to use this file, but first let's read the documentation. So when you go to the appwrite.io slash docs, this is where you see all the docs. And the organization of the doc, the hierarchy of it, the structure is pretty nice to go ahead and work on with this one. So in this video, I'll walk you through with this that how you can actually use this one. So just give me a second, I'll arrange these things. Some of my elements are moving on the screens just like that, okay. So as you can see, the products that they're offering is auth, database, function and storage. In this video, I'll cover the auth. In the next video, I'll cover the database as well as the storage part of it. So that's pretty nice. Let's go into the auth section of it. Inside this auth section, you'll see that on the lefthand side, we have some of the concepts, the journey and the references. Most probably the way how you're going to handle is first a look at the journey. For example, in this one, we want to see how we can add a user based on email and password. Maybe you want to go with auth logins or magic URL, the same strategies are followed there as well. I click on this, and this is the first step that how I can sign up a user. Similarly, I can just read the docs for login and something more. But what if I need a little bit more? So here, first of all, just go ahead and read one thing, which is if you go onto this auth section, if you go onto the auth homepage, there is nothing too much to explore into this one. Just go onto this one, this is my journey. And after this journey, let me just move this a little bit here so that you can see it all. Now, what we're going to do majorly is this account API. User API is, you have a user and you want to modify some things about user, maybe it's name, email, and it's record, but this is the account API. There is a difference between them. So if I click on the account API, you'll see there are two dots here. Just go ahead and click on this. And this is where you see all the methods, how to create an account, how to update an email. So all these things are mentioned here. For example, if I want to delete a sessions or list all the sessions, I can just click on this. And this gives me the source code. This is a little bit shrinked up. So this gives me the entire source code that hey, you have to use a method which is known as a list sessions and I'll give you a response. And in the response, I'll give you a promise and you can extract data from this promise and you'll get all the sessions. Exactly like that, if I want to work on the delete session, I can just use the method which is delete sessions. Similarly, if I want to create an email verification or I want to have something else, whatever, I want to get the account preferences or I want to update the name, create a JWT token, whatever I wish, I can go ahead and do that. Apart from this, I would like to bring you back on to the account, not here, into the auth section. So in the auth section, the very first thing if I go into the journey of email and password login, notice here this source code, just walk through with this. Every single time, I have to import client, account and ID. ID for creating the unique IDs, there is no big deal. Then I have two options here, client and account. Now with this, you'll see a similar pattern that is getting repeated again and again. For example, you create a new object out of this client. Okay, I understand this point, I understand this part. Now I have to set an endpoint and set a project. The endpoint almost always remains same until unless if you have added your own custom domains or something like that, but in most cases, it will remain same. And you have to give a project ID. This project ID we have already seen in the last video that you can just go ahead and copy this project ID. This is very repeatable code, okay? After this, I have to create an account and I get this variable account after using the account that was given to me by app write and injecting this client variable to it. So this is almost like giving a context to the account that here is your context and now give me this object account and this account is you can say a facade. It has so many things inside it into it. For example, you can use a method like create. This create method is actually associated with this account. That's why I'm able to call it account.create. Similarly, now if you go into the login, you'll see exact same portion being repeated. Okay, there's a client, there's account, there's an endpoint, blah, blah, stuff again repeatable. But what I see is account.create email session. What parameters I pass on, I can study it here, but I can see this whole top point is very, very repeatable. Now with this, I would like to bring your attention that if these all things are very repeatable, can I write a code in such a way that I don't need to repeat it again? And one such example is create a class because in the class I can create a constructor which can do all of this code repeatably for me. And when I extract an object out of this class, maybe all things are already done. And this is exactly the approach that is used for creating the services. Yes, this is what we call in the programmatically jargon word as services. So what I'll do is I'll create a service and I'll use almost exactly same kind of a stuff like this. So I'll just go ahead and copy this much from wherever you want to borrow it. This is exactly same code signup login. It doesn't really matter. Borrow this code and what we'll do is we'll just paste this code here. Doesn't really matter. These are for my references only. Now, first of all, I obviously need these project ID and stuff. So I know that I have actually added them up inside my config. So I'll just go ahead and say import conf and that conf will come up from, we need to go one directory back inside the conf and there we have got conf.js, I guess. Yep, that's exactly the file I'm looking up for. Now I have this conf data. And with this conf data, I can actually go ahead and use this app write URL, project ID, all these things are being exported. So just with the dot access, I can have this. So this problem is solved. All right, what is the next problem? This thing is very, very repeatable. So it's better that if I go ahead and just use this. So I'll just go ahead and move this line above because I'm going to use this one. Let's create a simple class and export that as well. So I'll go ahead and say, hey, export class and let's name this one as auth service. We will export the class, maybe we want to use it but my goal is to create an object out of this class and export that object so that you can just import it and start using it if you want to use it anywhere else. So I'll go ahead and use service if I can write that correctly that would be great service. All right, so there we go. This is our classic class in the JavaScript world, okay. The next thing is we need couple of these things. So we need these client and we need this account as well. So these are my goal to create. So let's go ahead and do that. So client is pretty obvious. I can go ahead and say, hey, client, you will be coming up from new and client just like that. Okay, happy with this one, but account not so happy because I cannot create the account directly right now. Account can only be created by passing the context of the client. And in order to create a proper client context, I need to run these methods dot set endpoint dot set project and I cannot just do that right now because otherwise just by creating the class I'm running. I want to run these methods as soon as somebody creates an object out of this class and that's a great way to bring up the concept of constructors. So this is my constructor and as soon as this constructor is being called, that means as soon as somebody creates an object out of this class, I'll say that this dot client, now we'll use the two method. The first one is set endpoint. I'll pass you the variables in a minute and I'll also go ahead and use the set project. Yep, that's the one. Set project and these are the ones. I'll pass you the variables in a minute. But once this is done, now I can create an object, not object, the account. This is exactly what we studied. Create an account by passing the context. So I'll just go ahead and say this dot account. Now you can have the value. So what value you get? You'll get obviously a new keyword and we'll get an account, we'll pass on the context, which in this case is this dot client. There we go. So no more repeatable code in every single time I have to do this. This is the best thing that you can do. Now let's go ahead and pass on the variables into this one. So this one will come up from conf dot app right URL. Yep, that's what we used. And into this one, we'll say conf dot app right project ID. There we go, problem solved. And this is highly, highly repeatable code. Now, what we're gonna do is, we're going to create a couple of methods. And again, these are app right methods. So your request is going to the app right, coming back onto this one, this might take some time. So obviously async await is your best friend in this case. Maybe you don't like them, but these are your best friends. So what we're going to do is, we are going to create a sync method. And let's just call this one as create account. And this method has no idea how it works. It just works. So this is my first method, create an account. How to work with that, we'll walk through with that, but I'll create a couple of methods like this. So this is my create account. This is my login method. What else do you need? So anything that you want to use. So two things we already studied, sign up and login. Maybe more things you are going to require. Maybe you are going to require, give me the current logged in user or whoever has the current session. So we can just use that. So I'll just use this one, get current user, just like this. And after that, log out will be one. So obviously we need to delete all the sessions. We just saw the code for that. So that will be log out. So if you have anything more, you can go ahead and use more such things. Now it's time that we write logics for that. So for that, let's refer the documentation. For the signup, we have gone through with this much part. So I'm not worried on this part now. All I'm worried about is dot create method that I have to go through. I'll be giving the user ID. So I can give my own unique ID or I can use the ID which I borrowed from the app right just here. And I have to pass on email and whatever else field you have, you just pass on them and it will create an account. All right, let's see how we can do that. So anybody who will be using this method will be passing me what? Email and we'll be getting password and we'll be grabbing the name as well. Maybe you have more field, go ahead and grab more field, nothing to be worried. Now in this one, obviously this might fail. So your try catch is again a good friend. Feel free to use try catch or promises, that's up to you. I'll leave that as a simple exercise for you, but I'll go with that classic try catch because I think that's easy. And in this case, I'll just go ahead and say throw error. That's it, should have handled better, but in this case, just want to walk you through with that. Okay, now we have seen that we have to use this method dot account dot create. Okay, I can use that. This is going to be awaited because this is a promise that we are getting. So if we are not using promise, then obviously we have to await. So in this one, I have to access this account. I have to call this dot account. They don't because they are directly using it. I have created an object. I have created a constructor. So that's why I'm using this. So this dot account and it has a method dot create. That's it. And all the values need to be passed on. The first method is the user ID. So the first method I can grab with the ID that I borrowed, notice here, this ID exactly same. If you'll study the documentation of this, this has couple of methods. And as soon as you put up a dot, you can see that there is a thing known as unique. No suggestions, bad luck. So you can just provide a unique and it gives you a string, which you can store as a unique ID. But there are a lot of other ways to generate unique IDs. Maybe you want to use nano ID or something, totally up to you. I'll go ahead and give email and I'll give a password and I'll also give a name. If you have more parameters, go ahead and pass on this. Now this is going to create an account. So let's store that into a variable and call this one as user account. There we go. Now we have the user account. Now I can check it, whether the user account was successfully created or not. So I can just run a simple if else condition and I'll check if the user account exists or not. So if user account exists, do something. If it doesn't exist, then return whatever the value is. Maybe there's a null inside it or whatever that is. It's up to you how you handle that. Maybe you want to return a proper error object that hey, throw this error, whatever you want to do, it's up to you. But if the account was created, I want to log in the user. Probably that's my workflow. Probably that's the flow I want to go with the application. So I can just go ahead and say return and I can call another method login and I can just log in the user using this method. Obviously this login is not going to work directly. This requires some parameter. I can log in with email and password. Now I can just simply go ahead and say return whatever is coming up back from this.login, calling another method from the same class, how easy it is. And for this one, let's pass on email and password. That's it. Now, whatever is your flow, totally go with that. But I just wanted to show you how life is going to become easier in the future with just this class that we have. Now, similarly with the login, we know that. We just studied it. To log in, we know we want to just work with this create email session. I'll copy this so that I don't make a mistake and I can just use it. So let's go ahead and try the exact same methods. So again, try catch, catch, not going to do too much apart from throw the error. And in the try part, let's go ahead and return a wait. Obviously we have to wait. This.account, and we have to use the method of create email session, pass on the email and password that you have grabbed. And that's it. So easy to work on with. And this is why I like so much. This file is so much reusable. This file is not opinionated. You can use this in React Native. You can use this in React. I have used this in my lots of other tutorials as well. And that's why I love to create this. Maybe right now, this create account as well as this login is not good enough feature for you. Maybe you want to add more. Just go ahead and add more methods into class. That's great. Now let me show you how you can get the current user. This is a little bit hidden in the docs, but super easy again. There's just one line here. So I'll just go ahead and try catch. And if the catch is there, you are not able to grab the user. Then I want to do a little bit of the more console log, but anyways, I'll just go ahead and say return. The way it is must have this dot account and the method to get the current user is dot get. Yeah, super simple. That's all I have to do. No variables, nothing is required. It just, since this account has an access to the endpoints and all of this. So that's how I can grab it. Super, super easy. But if I'm not able to do this, then obviously I'll want to do a console log in this case, because sometimes this has happened to me that while working with this application, things might have gone a little bit wrong. So I'll just copy paste a little bit of the error. So I'll just say app write service. There is an error in the service, two colons. And then the problem is in get current, oops, get current user. This is the method which is creating me the problem, two colons, and then I'll just go ahead and would like to stack the entire error, which is coming to me. Again, it's up to you how you handle the error. It's totally up to you. But if I'm not able to run any of the try catch and all of that, I would love to gracefully end this method by returning a simple null. So I'll check whether what I'm getting, if I'm getting null, I can handle the situation based on that. Now, another one is how to do the logout. The logout is super easy. If you want to do anything, just go hit account API, look for what all that you want to do. You have to study this obviously. List the identities, delete the identities, update the phone numbers, list the sessions, delete the sessions, yes. This is exactly how you delete all the currently logged in sessions or known as logged out. You can get the sessions as well, just like this. You can go ahead and get all these sessions. And there's a lot more here. Some things you require a little bit more of the studies and discussion, the Discord forum is also, Discord section entirely is pretty great. Anyways, so let's go ahead and work with, I want to delete the sessions. So all I have to do is use this delete sessions, copy this and we'll come back onto the logout. We don't need anything. As a parameter, we'll just go with the try catch. In the catch, we'll just do a same kind of a thing. So let's go ahead and copy this, paste this. And this time the error is inside the logout. There we go. In the try, what do you want to do? I want to await this dot account dot delete sessions. Make sure there's an S at the end of it because it deletes every session that you have. So there we go. This is the way how we actually were able to just simply create some of the methods that helped us to do all of this. But this is not all. Because right now this is a great class that we have built up. And let me just minimize this. This is going to work nicely. And I'll not forget to remove all of this. This was just to show you, usually every programmer does that. Bring some things, keep them in the file, eventually remove that. This class is great, but this class needs an object so that this constructor is invoked at the time of creation of the object, obviously. So what we can do is we can simply go ahead and say const. And let's just call this one as auth service. Service. And that service will be created, obviously, new auth service, just like this. So we have created an object. Now we are going to go ahead and export default this auth service, this object auth service. So this lower one is an object. This upper class is the class itself. So now the advantage of exporting this object is that at any point of time, the constructor is invoked. So my endpoints are properly created. And since it's an object, it can access all those methods. So life is much more easier this way. So this is all that you need to know about these services. And in case you want to add more methods, maybe in your application, it makes sense to update the status as well. So you can update the status as well that whatever, however you want to do, does it make sense or not status of anything? So you can make more things. Maybe you want to create a JWT. So you can go ahead and request create JWT. It will give you a JWT. So just go ahead and add more of these methods in your class, highly reusable code. And I'll obviously go ahead and push all of this code. You can find them all in the GitHub section in the description section. So this is really nice. I enjoy this quite a lot. This is really a high quality code that you have written, highly reusable in any application. And it's fun as well. So in the next video, we'll go through with the same process. But this time, we have already done with the Auth section. Next time in our application, it makes sense to have an interaction with database as well as storage. You can keep them in separate files as well. We don't have that much of the application or the methods being called. So we'll keep them in just one file. And it's your choice, your decision totally. So in the next video, I'll walk you through how we can interact with the database as well as the storage section and the storage APIs of the app, right? I hope you're excited. If you are, do let me know in the comment section. I would be super, super pumped up to get some of your support, maybe on tweet, on LinkedIn or wherever. If these videos are making a little bit help, some motivation is required for me. I really, really need that. That's it for this video. Thank you so much. I'll catch you up in the next one. Hey there, everyone. It is here back again with another video and welcome to another episode where we are trying to learn React and we are trying to finish up our mega project. In this video, you will learn everything that you probably will need to learn about AppRite's database, how to make queries with the database, as well as how the storage facility of the AppRite works. The code that we are going to write in this video is of course highly, highly reusable. You can use it with the React application, Next.js application, probably with the mobile application as well, like React Native Letter, whatever you're using. We'll just keep it absolutely independent of whatever the platform you're using. That's the goal and we are going with that. And of course, it's a little winter time. So probably one of my first video in the winter wear. So that's what we are going for. Okay, so let me share the screen. And first, let me just remind a little bit jog of the memory of what we are about to do in this one. So in case you remember, in the last video, we worked through with the Auth.js and I gave you a simple walkthrough of how these things actually work. And we created a simple Auth service, which is having all the constructors and methods. And we are using the client account. We created methods like create account login, current user logout, and probably you can add more. We also went up with the documentation. So we studied the bit and pieces of the documentation of how the account API works, how you can add and learn about more methods in the documentation like creating JWTs or maybe creating password recovery, whatever you want. That is exactly the same thing that we are going to work through it. I'll just crawl this a little bit so that we can see it nicely. All right, looks good, decent. Yeah, I think, yeah, that's okay. Now the next thing that we are going to do is almost similar kind of approach that we are going to use, but this time we'll be taking care of the different of the APIs that are available. So let's go here. And this time we are first curious about database and then we obviously are curious about storage as well. Let's explore the database. So when you look on the database here, what do we actually go with that? First of all, you can see there are concept of database, collection, document, relationship, all these. And then there are journeys about the queries that you can make. Of course, you can do order pagination that's also available. But first of all, let's understand the concept of databases and then we'll also learn about how the queries are being done and used. If I click on the databases, this is how you create an SDKs and servers and whatnot. The most important thing with the database as well is that you need some of the constant fields that are required. Now this one is actually a node app, right? We are not interested in that because that's something you want to interact if you're making a backend as application and which is interacting with that. We are more over worried about creating and getting through with the collections and buckets and all that. But one common thing you will notice here, this is here, it says SDK database. But if I go ahead and look for a legacy database APIs, notice here the exact same thing. We get the app right from the, and we extract client and database out of it. Let me zoom this a little bit. And we exactly create a client. Just like in the auth service, we created auth from this. This time exactly we'll be using databases, we'll be passing on a reference of the client. And the endpoints are exactly same. The endpoints is first of all, the URL and then we need a project one. Now out of this, just like you were able to extract auth database, I think this gives us enough idea that exactly same way, we can actually extract the services for storage as well. And that's exactly what we'll be doing in this one. So let me go ahead and copy this piece of code so that we can work on it together. And we'll be using exactly same approach that we used in the auth that let's create a class and set up all these things. And we'll be exporting this class as well. Now it's up to you, what do you name this class? Since there is not too much of the things that we are doing, usually I would love to keep my storage into separate class and my database related all stuff in a separate class or a file at least, but in this case, this is not too much going on. So I'll just wrap them up in same file here. I'm gonna call this one as config, not too confused with the conf. Conf is for app rights URL only and config is for all the configuration, remaining all the configuration that I require. Let's go ahead and work on with that. First of all, I'll paste whatever I copied. So this is the stuff that is required for myself. Now let's go ahead and move it at the bottom and just go ahead and explore them one by one. So first of all, the most important thing is to grab all the conf, which is the URLs. So let's go ahead and grab the URLs. URL, I mean to say all the end points like the environment variables, basically. So I'll just go ahead and say, give me a conf and that will be coming up from, let's go one directory back inside the conf and we have conf.js or conf, that's the first thing. After that, we obviously are going to need the client and database. And I'm pretty sure by this point, you have learned that you can also extract all the services that you require, maybe all the other things. In this case, I need storage and we'll also discuss a little bit about the queries, how to make queries. This is the most important part of learning the app right. All right, so most of the things are done and we'll be using exact same approach. So let me also open up our auth so that we can refer it back. We created a class known as auth service and we created client and account out of it. Great approach, we'll be using exactly same. So let's go ahead and simply go ahead and say export class service. In this one, we'll be exporting the class as well, but the most important part is we'll be creating an object and we'll be exporting that. So that object at the time of creation of an object, we create or we use the constructor that's already spinoff and also all the methods are directly available. So that's the goal. Let's call this one as service directly. And in this one, first of all, we need a client. So let's go ahead and create a client and we'll be creating a client just like that. So we have a client. Apart from this, we will be needing databases. So let's call this one as databases and we'll be needing a bucket as well. Now bucket might be a little bit unfamiliar to you, but if you've watched the previous video, you know that the folders in the app right are called as bucket. The same terminology is being used by AWS and all the other folks as well. So we got the client and we got the database, but in order to actually properly create a database, we need a couple of more things to be done. So let's go ahead and do that. First of all, let's check on the documentation. So database can be created by new database, but the issue is it needs a client to be passed on. So we need to actually do that. And client also needs these endpoints and all these things to be created. So that's also interesting. Let me show you how that needs to be done. First of all, let's go ahead and create a constructor. In the constructor, as soon as somebody creates an object, we'll spin off this constructor. So this dot client will set an endpoint. So let's go ahead and set an endpoint. In this, we'll be grabbing the endpoint from conf. So conf.api appwrite URL, that's the one we need. All right, once this is done, then we obviously need to set a project. So set project, that's the step one. So we need to provide the project ID in this one. Let's go ahead and say conf.appwrite project ID, that's the one we need. And once this is done, that means properly a client has all the variables and points that are required for us to pass on. So these two things are done. And now based on this, I can take a utilization and can actually create the database and the bucket. So it's super, super easy. All you have to do is pass on the reference of this client and use it. So this dot database, databases will be created by new, oops, not like that, new database and inside databases and we'll be passing on this dot client. So I hope you can see the pattern and the consistency in the documentation of appwrite that is pretty useful. Exactly like this, we'll be simply creating this dot and this time let's create a bucket and bucket will be created from storage service. So we have the storage just like that and we'll be passing on this dot client. All right, so this means now I have two variables with me, database and bucket, which has access to pretty much anything that you want to work with. For example, if you want to just list all the documents, now databases is capable of doing so. So now we can use the methods like list documents and pass on the document ID, collection ID and whatever you want to ask for it. This is exactly the point where you first time learn that what all you can do with the database. So in our case, we want to ask database and grab some of the values out of it. Okay, so let me show you. First of all, let's create a couple of methods and see what they will be able to do. Obviously these methods will be async and the very first method is get post. So I want to grab a single post out of it. Now, obviously when you're grabbing a single post, you need to provide that based on what you want to actually grab this. So if I go back into app right cloud, which is here. So this is my blog, which is previous one. I'm not using it. I have removed all the API's keys out of it. This is my new one, but exactly same copy. So if I go ahead and check it out and let's take a look onto the databases here and inside this one, we do have a database. We were having the database. So just to give you a brief idea that how this actually works or let me just walk you through directly. Okay, so how can I grab a post out of it? Okay, let's study a little bit of the documentation. Okay, get the document. So this is the one that I'm looking up for. Again, by the way, all the CRUD operations are listed here, create, get, update and delete. So this is my get document. In order to get a document, notice here, I need to pass on the database ID. Obviously I have that. I need to pass on collection ID. Obviously that makes hierarchy. And then I have to provide a document ID. And in case you remember, we created each document ID as a slug. Obviously you can pass on the auto generated IDs, but we actually replaced it with the slug. If you remember in the earlier videos, we actually did that. So now somebody will be passing me on this slug of the blog post. So that's a unique one for me. And I need to grab the ID from it. Okay, now how do we do it? Of course, it's a database operation. So it needs to be wrapped up in the try catch. First of all, let's do that. And let's do a console log as an error. So in the error part, we'll do exactly same. We'll refer it as app, oops, not like that. App right service. And we'll just mark it where the problem actually comes. And we'll say problem is in the get post. So that we can again come back and look at what is the exact point where I'm facing the issues. Once this is done, then I'll obviously go ahead and print the error as well. I think that's good enough. And we are going to return a false so that in the front end part, we can handle that. Now what's inside the try part? Now you'll be surprised to know that how easy it is to actually grab from the app right database. Notice here, this dot databases, this is our service that we use. And all I have to use is a method. I hope you can see that already get a document. Yes. The list document is to grab all the documents. Get document is where you pass on that. This is exactly what I need. You need to pass on an ID here. So again, the step one is to pass on the database ID. So let's go ahead and say this is my app right database ID. That's the step one. The next step is to provide the collection ID. So I'll grab that from conf.app right collection ID. That's the next step. And once after that, I have to provide this slug, which whoever is using will use this method will pass me up here and will give me that. Once this is there, obviously this operation will take some time. So let's go ahead and wrap it or prefix it with the await. And let's directly return that. So whatever the value is coming in, coming out of this query, we'll directly just send it to the user. So I hope you can see it's not really that difficult. Whatever the unique value is, in our case, slug is there, we will be just using it. And when we'll be taking actual usage of the service, you'll understand that how you actually grab that slug. That's really easy from the URL, we can grab it. From the title, we can grab it. There are so many places, but this is it, this is it. Now the next step is that, okay, I know how to actually use this one. Like I can update the document, get the document. We'll create those methods as well. But let's just say now I want to query the database and only want to find out all the values, which are status as active. So there is some query in my case. I'll just show you that. I think that will help all of us in this one, instead of worrying about the IDs and all of that. So let's go into the databases. And in the databases, we can see this is our collection. And inside this, we have a blog. So all the attributes, when I check this, I have this user ID. So user ID is there, there is a title here as well. And we do have a slug here as well. So inside the user ID, we'll be passing on the slugs and all these, not in the user ID, but the title. Anyways, I'll just see this one. Now, my goal is that I want to find out all the status, which are marked as active. So there is a query status need to be active. So this time, find me all the documents in this database ID, in this collection ID, but not just I'll pass on one thing and give me all of that or that one particular value, give me all the values based on my query. So this is the point where we need to study that, hey, there is a key and the value is that, only give me those documents. So I'll come back here. And if you'll notice that in the database, I need to expand this a little bit, probably not. And let's go into this one, the references. And this time, we'll be going into database and I want to learn about the queries. So how do I make the queries? That's interesting. So notice here, it's super easy. All you have to do is query dot select or dot equal, whichever you want to use. This one says select which attribute should be returned from a document, a return document, if attribute is equal to any value provided in the array. So this is one that looks okay to me in this case, because I'll be providing you status and a value of the status. And you give me all the documents that actually matches that. So I'll provide you a title. In this case, it says Ironman, but I'll give you a query dot equal, which is status and the status should be active. So I'll just give you, by the way, in the array, you can pass on all the parameter as a string if you have multiple, but I do have just one. So I'll just pass on the one. So let's go ahead and do that. Okay, now let's go ahead and write a method for this one that I have, let's go with this. Again, async, we go with that, get posts, because multiple will be coming up. And then I have to make a queries. This is the parameter somebody will be giving me. If nobody gives me that, then by default, I'll use that. The way how you actually grab the queries is you write exactly as you are being told. So remember, everything was inside the square bracket, you need to pass on an array. So this is the first step. So you want all the title to be whatever is mentioned into this one, or you can pass on the key value pair as well, the title, Ironman, and all of that. So we'll be using the second one. I need the title to be this one. Similar to this one. So this is my query. Query.equal. There we go. And this is the parenthesis, a method being used. Notice here, string and the value query types, whatever that is. Basically it's saying is give me, I want the status. This is my key that I want to find out what is the value that you're looking up for. If you have multiple values, you can provide an array, but here the type that I'm looking up for is active. All right, there we go. Not that difficult. So now I need to learn that how can I use it? Usage is another simplest thing that you can do. This is building queries. So if you look up for it, notice here, I have to say is database ID. Then I have to go with the collection ID. Then in the array, I can pass on as many query as I wish. I just have one. That's why I directly call this one in an array. But if you wish, you can just convert it like this. I have already converted that here, notice here. I've already wrapped this up inside the square brackets. That is an array. But if you don't want to, you can just make it one by one. I actually did a little bit help to myself of wrapping this up. Now as a third parameter, I can directly pass on. That's the advantage. Great, nicely done. Okay, let's go ahead and try this. Again, same, we'll be using try catch. The error part will remain same. So I'll just copy and paste this one. Copy this, paste this. And this time the problem, if it might occur, is in get posts. So multiple one. Okay, next up is how can I try this up? Really simple. This dot databases. And this databases will list all the documents based on what? First of all, give me the database ID. So let's say conf dot project ID. I've given not the project ID, my bad. Database ID, we are interacting with the database. App right database ID. Second is collection ID. So this one will be conf dot collection ID, app right collection ID. And third part is directly my queries. This is the only part where you need to be careful. I have wrapped this, remember, I have wrapped this queries directly in the square bracket. If you are not doing that, then make sure you're passing it like this. Just the syntax issue. All right, so obviously this is a database operation. It needs to be a wait. So let's go ahead and do that. Once this is done, let's go ahead and return that directly. So I hope now you understand, it's not really that difficult to work on with this. So we have worked on two database operations. One is get post, one is get post based on queries. It's very repeatable, very understandable and very consistent code in the app, right? So let's move and shrink this up. And let's also shrink this up. And let's talk about other operations which is creating the post. Creating the post is super, super easy. If I go back into the documents, database, documents, list documents, create documents. Let's see how do we create a document? And this is how you create the document. You simply say create document. You provide the database ID, collection ID, something that is unique and all the things that you want to store that is already available in the attributes that you are having. All right, so let's go ahead and do that. That will also help you to understand that since this is unique, that's why we were able to go up here and mention that, hey, the slug is unique. So give me all the values based on the slug. Hope this helps. Now let's go ahead and move on to another one. Again, this one will be async and we'll be saying create a post. And this should be super easy. What do we expect that how do we create a post? While creating the post, I expect that you pass me on a title, you pass me a slug value. Slug is nothing, just a title, but we remove all the spaces, move them into dashes, just we saw in the demo. And then we also expect that you will provide me a content. You will also provide me a featured image. You provide me a status, whatever the status value is. And we'll also grab a user ID. Okay, all the values are here. Once these values are here, again, same try catch operation, very repeatable code. And that's the good thing. Once we have a repeatable code, that means it's something good. Okay, this one will be create post. Errors and everything are good. Let's go ahead and do the same thing. Now we know that let's go ahead and return this. This will be await. This dot databases, this is going to work with the method, create document, provide all these things. The first one is conf.appwrite database ID. The second one will be conf.appwrite collection ID. And the third one is what is the unique ID? In our case, the unique ID is not the ID, but the slug that we want uniquely. We want all the posts to be unique. So that's the slug. And the third parameter is provide me all the objects. Yeah, there we go. So let's go ahead and provide all these objects. So we'll go ahead and say title. Then we have content. We have featured image. We haven't uploaded the image yet, but we'll work on that. Status and we have user ID. There we go. So all the value that is being passed on to me as a method, I'll just use them to create a post. Now, going back, this is for creating the post. Okay, how am I going to do and update the post? That's interesting. Let's go ahead and say collection. Databases, let's go into directly database APIs. That's always easier. And this time I want to update the document. Okay, so for updating the document, you have to use update document. Notice here, update document. Database ID, okay, collection ID, no big deal. What else do you need? And this is not proper. This should be a little bit more because you need something to find out the update document. Unique IDs. So I think the collection ID, this is not scrolling properly. We definitely have more. We definitely have more. Update the document. Here we can read about it. Collection ID, document ID, data to be updated and the permissions. Anyways, I'll walk you through with that, no worries. Okay, so this is my create post. Let's go ahead and create another method which will be update. I'll sync, update post. And while updating the post, update document, you need to provide that what is the unique value I am looking for for updating that. And update document, database ID, this is not proper. I've worked with that. I've worked with this. This is newly updated document, probably that's the reason. So while updating the post, you will need a slug which is uniquely identify your document that needs to be updated, that needs to be passed on. Otherwise the method of update document doesn't work. Probably there's a mistake or I'll send a pull request to them. I worked with these documents in the past. So probably that's the one issue. And then one we can do is provide me the title, the new updated title or the same, whatever that is. You pass me content, you pass me featured image and you pass me status. These are the field which we are allowing to change. And once this is done, same stuff, try catch. Let's open this up. We'll copy this. We'll paste it up. And this time if the problem appears, it might be an update document tracking all of this. And of course we will be returning the await and this time this dot databases and update document. Now the way how update document works is, first of all, you provide the database ID in the collection ID in which, or in what one, what exactly the collection we are looking up for. So conf dot app right database ID. The second step is collection ID. So collection ID. The third step is to provide me the unique ID. If you're working with the unique IDs, provide the unique IDs. If not, just provide anything that's making your document unique. In my case, that slug. And then pass on all the objects that you have. So exactly same. Oops, not like that. We do have, I think I can copy paste. Yep, this is all the data that we have. So I'll just copy and paste this one. So we have title, content, featured image, status. We are not passing on user ID because we are not allowing to change that. And we are also not accepting that. So there we go. All the data is done. And that's it. That's our update post. Obviously we need to write the delete one as well. And to delete a document, what else do we have? Database ID, collection ID. There is something, something that is missing because we need a unique identifier. Otherwise what document you are actually deleting. There is no way of finding that out. Okay, there is something probably a bug or issue. Anyways, this is, you get the point how this is being done. So now the best way is actually to actually copy and paste this entire stuff because that is much, much easier now, now that you understand the concept. This one is delete document or delete post. We will be taking the slug, but we don't need these objects because it doesn't really matter what's inside. We just want to delete it. No need of comma as well. Just give me the slug and I'll try to delete it. And let's update this one. This is if the error occurs, it might be delete document. Good. Now we also don't need this. So that's great. And obviously the method gets updated. Instead of update, we want to use delete document, two times document, delete document. Hopefully I have copy pasted it correctly and we provide the database ID, we provide the collection ID and we provide the slug. Something that uniquely identifies this one. The only new thing is you cannot just go ahead and return it because it doesn't return anything. The return type data type is a little bit questionable here. So we prefer to manually return something here. So we are going to go ahead and say return true that yes, it was properly returned. Return true. Oops, my bad. This should go up here. Okay, looks good. Let's indent that properly. There we go. So this is nice. In the update one, you don't need to return that. Updated one actually returns you the updated document. That's good. But the delete actually, if you'll see, they should actually go what the response is going to be. It just says, hey, two or four application, Jason. So we don't have. In the update document, if you'll check out what is the response, you can see it gives you the document. That's the good one. But if you check the delete document, there is no document that is returned. There is no true false value that is returned. So yes, nothing magically is coming out of the box. I'm trying to teach you how to study the docs and all of these. Okay, so delete post is done. Now let's work on one more thing. We can actually remove them. We don't need you. Just like that, we have created all these methods about update post, delete post, create post, get post, and pretty much anything. All the queries that you want to handle, nonqueries you want to handle, we have worked through with almost every possible case that can happen in the database. If there are more, you can obviously modify these existing methods or can add more by reading the docs. Next one is buckets. So how do we handle the bucket part? Let's go ahead and study the docs. So this time we want to use a storage service. Now this is the storage service and it has all the methods, how you can list all the files, create the files, get files, update files, delete file. First for me is the create file. I want to upload a file. So it simply is a method which says create file. In my case, notice here, it gives you bucket ID, which we have already. Then you have to provide a unique ID for the file. And then you can simply say document.getElementByID or however the way you want to grab it. Probably there is something definitely wrong with the scrolling because I can see there is more content here, but it's not visible. Is it my browser just? Yeah, we can see that the scrolling, probably my browser is going that. With this, this reminds me, let's go back into databases and let's see how the update document looks for and collection ID and the document ID. Notice here, now it says and mentioned this, there is a unique document ID which is required and that's exactly what we used. Probably there is something in, when you scroll this, now it's scrolling. But if I open this, it doesn't scroll. Probably I can report a bug to them. Anyways, we got the concept. So coming back onto the point, which I was saying, that let's go and talk about storage. We want to create a file. The rest of the stuff we have already taken care of. Now we need to just run through the method of create file. Whoever is going to use this method will pass me a file. Just like here, they are passing the file, just like that. Let's go ahead and now in the same file, I'll just write it for it. Maybe you want to use it. This is where we are using the storage service. Okay, so again, async and we'll be calling this one as upload file files. Now we are just dealing with one. Upload file and there we go. Now how we are going to deal with this one? Exactly same. Go with the try catch, borrow the catch method, copy that, paste it up here and this time if the problem occurs, it is coming up from upload file. What do you want to do in the try part? We obviously want to return after awaiting and sending this to bucket. Same concepts, this.bucket.create file. It takes couple of parameter. First one, the bucket ID, which we can grab from conf.bucket app, right? Bucket ID, there we go. We need a unique ID. So obviously we don't have a unique ID, but if I remember in the auth, we actually, no, we didn't actually worked on this one, but in case you don't know this, we should have dealt with us, probably anyway. You can see that there is a way how you can grab the unique ID. So notice here there is a file ID, but app right also gives you something very interesting known as ID. So here, inside the conf, just like we were able to grab this, let's grab the ID and you'll be able to provide unique IDs with that. Although you can use nano IDs or something, in case you wish to, I don't wish to, I just want to use app right services. If they're directly available to me, why to be bothered? Anyways, so once we have this ID, now I have to give a unique name to the file. So I'll just say ID.unique, and that's a method. So there we go. And then provide the file, that's it. App right will take care of the rest of the things that hey, I'll upload the files, we'll provide a unique ID and we'll return you all the path that you require for this file. So public path will be given to you so that you can display them. So this is basic of how you upload a file. Can you assume how you're going to delete the file? Let me go ahead and copy this and we'll go up and paste this. Let's move a method for delete file. So delete file. Obviously, this time you don't need a file, you need just an ID of the file. So just provide me the ID of the file and I'll just delete it. Okay, how can we modify this? Let's see how to delete a file. Obviously, give me the unique ID. So bucket ID you need to give me, file ID you need to give me, that's it. Two methods and it can do the job. So bucket ID I've already provided you but the method is delete file. So let's go ahead and use that. Delete file, I'm giving you the bucket ID but I cannot give you this file ID unique. It generates unique ID every single time, obviously. And here I cannot give you file but rather I have to give you file ID. So whoever is using this method need to provide me this. And this time if the error comes up, it comes up from delete file. All right, so you have learned how you can upload images. By the way, this exact method works if you're uploading PDFs, anything else that you probably want to deal with. So delete file. Now one more last thing I would like to discuss before we sum up this entire lecture. You can see that AppWrite has so many things, list files, create files, get files, update file, delete file but what's interesting is, is you can also get file for the preview. What's interesting about this file preview is, file preview, this method supports preview of these images. So entire image doesn't get onto your network bandwidth but rather it's a cutting and the resizing of your preview image. So for example, preview supported only for the image for size smaller 10 MB. So let's just say you uploaded a file of eight MB. It's not eight MB in the preview, it's just few KBs. So it saves. So in our application, we also want to give this feature that somebody who wants, don't want the entire file, probably just want a preview of it, lower quality file. We can actually give that. So let's call this one method as well. And the good thing about this one is, since there is nothing too much of operation going on, you don't need to make it async await. Although if you do, that's great but there is nothing being async await in this one. I'll show you why this is because if you notice the method, it's just storage.get file preview and it's ridiculously fast. Again, anyways, it might take some time. So we'll see that. Let's call this one as get file preview. And provide me the file ID. And what we're going to do is this is like that. And we can go ahead and simply say return this.bucket. And we can just work with the method, get file preview and provide you the detail. The first one is conf.bucket ID, app.writebucket ID. And the second one is a file ref, file ID. And once this is there, you don't want to return it like this because if you notice it carefully, it's not mentioned here. Let's see what's the return type that we have response. So response is actually a big object file for view. And you need to actually do a console log of this. And once you do the console log of this, you will find out that this whole thing actually needs to be worked a little bit different. So I'll just come up here. And once this is all done, then I go ahead and say .href, this is the one. You can get host name and all these things. Yeah, a little bit sneaky, but yeah, this works nicely. If this doesn't work, we'll come back here. We'll make it a sync. We'll just insert a wait keyword here. But I have noticed while working a previous version of this application that this works directly fine. So if there is no need of it, I could just add it. Okay, so this is all the method we have studied in depth about how to upload the files, delete the files, get the previews. If you really want to work with more methods, you can definitely work with that. Now you have the idea. Last thing, just like we did, we'll just go ahead and call this one as service. And this will be a new service. We create an object out of this class and we export this one. So export default and let's export service. There we go. This will make our life so much easier. Of course, there might be chances that this might have some bugs, some issues. We need to fix them up. These can be tested while we actually work on the project in the frontend side of it. But at least our backend part is all done. And this really, I'm super happy that now we are actually able to write JavaScript using App Write. We're building full stack applications. So this is my backend that I have all written here. Great work there in the backend part. Let me go ahead and I'll just commit this one as well. Let me just go ahead and add this one. Add service. Service for database and storage. All right, let's go ahead and do a quick commit and I'll push this. Yeah, some people really say that. Hey, you should do it from command line. No, I feel here, it's nice and easy. All right, so this is all the knowledge that you really need to have to interact with App Write databases and storage. Now you're completely equipped with handling any kind of thing, all the queries, anything that you want to do. This, I hope that this video has given you enough of the knowledge to work things on your own now. That's it for this video. From the next video onwards, we'll start working on the frontend side of the application. We'll walk you through all the caveats, how to build a full stack application, which is authenticated, some pages are protected and all these things. All right, so that's it for this one. If you find this video interesting, do leave a comment section. I really, really need some of your help and support. Your comment, just a like, just a heart. It gives me so much of motivation. I really need it to continue to do all of these videos. Thank you so much. Let's catch up in the next video. Hey there, everyone. Hittai Sheer back again with another video and it's been quite wild. In fact, few good weeks. And if you're watching this video in just one go, then obviously we are meeting backtoback. But if you're watching it on my main channel as the series is progressing, yes, I was gone for a couple of weeks. A lot of health issues, but thank goodness I'm back. It's winter here. And the best part is I do write my strategies to record these videos. Otherwise it would be so much difficult. Probably I would have to rerecord the entire, this segment, but thank goodness I write my strategies to teach these topics. And that makes life a little bit easier. So in this video, we're going to continue from where we have left in the last videos, which was just handling the app right. So far we have handled the app right. Now we are going to see that how we can make those web requests and if we have any issues, how we can debug them and how the application and our flow will work. I don't expect anybody to simply go ahead and just build these kinds of application in just one go, because simply that's not possible. So I'll walk you through what is going to be the strategy, how we are going to deal with that. First of all, I want to introduce the React Redux here, especially the Redux toolkit, so that we can manage the state of the application. On top of that, we'll be needing a couple of pages. What goes inside those pages, we'll worry about that later, but we'll be needing a few pages. The reason for introducing these pages is because we obviously will have the routing in our application. So some page are going to be protected that they cannot be visited if you're not logged in, but some pages are available to everyone. For example, if you are not logged in, the signup page is available, but if you're logged in, the signup page is not available for you. So there are certain pages which are available to non logged in users, certain pages are available which are for the logged in user. So we need to figure out a way and mechanism, a logic to do so, it's very simple logic. I'll walk you through with the two ways of understanding the code so that you can probably understand it at a very better pace. All right, so quite a lot of stuff that we have to do. Let's go back and try to share my screen. So this is my screen that we have. First, let's open up the Redux part. So I'll just go ahead and work with that. So I'll just go on to Google and we'll go into Redux toolkit. That's the one we are looking up for. The getting started part, it should be fairly easy with that. And we just need two things. The first one is Redux toolkit and we of course need React Redux so that it can act as a binding agent between the Redux and the React. Redux is an independent library in itself. You can use it with the Vue.js, probably anything else that wherever you want to maintain the state, you can use that. I'll copy that and obviously we'll install this. So quite a while. And now let's go ahead and install the toolkit first. It doesn't really matter which one you install first. But since it was mentioned in the documentation, I'll just install that. We also need the router as well. So let's go ahead and since we are already here, let's install that. So I'll just go ahead and say React router DOM. That's exactly what we need. And that's how we always install them. We simply go ahead and say example tutorial. I just want to install this. What's new? Probably not. Tutorial, I think that's a better place to install it. Can you give me a point where I can install it? Probably not. Okay, give me a step to install it. Otherwise I have to do NPM install React router DOM. I'll probably do that. Okay, so I'll just go ahead and say NPM install React router DOM, router dash DOM. That's the easiest way to install this. Oh, React, oh, my bad. I mistyped it. React router DOM. Okay, that should be all. So we have couple of libraries being installed in our system now. We have Redux toolkit. We have React router DOM. This is the basic React DOM. We are not interested in that. We are interested in the React router DOM. And we have the React Redux, the binding library for that. Yes, we will be needing couple of more, but right now let's handle what we have in it right now. Okay, one common thing that we are going to do is in this application, in fact, any application that you'll be working through, you will have a lots of pages in them. Our application also has a few good pages. What goes inside that pages, we'll worry about that later on in the component part. But right now, I think it's a good idea that we just create those pages and try to figure out that how we can inject our state management as well as how we can protect some of these pages. So let's go ahead and practice that. That's a good idea. So I'll just do a quick LS and I can see all of my files and everything are here. I will go inside the source. So let's go into the source. And if I do a quick LS, I can see app write and all these files and folders appear. I think let's create a new directory in here. I want to do this via the command line because it's much more easier and faster this way. Feel free to use your mouse. I think this is faster approach and better approach for me. So I'll just go ahead and say this is pages. Now we have pages. I can go into the pages as well. And I'll just open up these pages so that I can show you what all the pages that I want to create. So obviously, this is all the pages that we have. So we'll have add post.jsx. And by the way, touch is utility which helps you to create the files. And since they are so many files, I don't want to just right click new file, new file. I just want to create them for here. And we'll be having one for all posts.jsx. So add post is going to be where I'll be giving a form where user can add a new post. And all post is where all the posts are going to be listed in the card format. And then we'll be having an edit post.jsx. This is where if you are owner of the post, you can hit the edit button and we'll give you a form. Again, the same form will be utilized of the add post but we'll be just prefilling the data into that. That's how it is all done. And we'll be having one home.jsx. This is just a homepage for you, for users. And then we'll be having one login.jsx, of course for login. We'll be having one post page as well if you want to read an individual post, so JSX. And one last one, which is sign up. So we'll be having sign up.jsx. Now, if I go ahead and do this, this creates all these posts and everything for me. That's what I love about it. You could have done that right click as well, but that's okay. As of now, I'll just use a utility, rfce, which is by the way a add on of a VS code that you can simply have. So I'll just have an React functional component just like this. So it automatically detects the file name and we'll be just having this one. Right now, no logic is there. We'll be just putting these basic templates here so that we can import and export them. rfce, all post, same goes for edit post. rfce, there we go. I'm not doing anything at all, just providing these values. What goes inside them? We'll definitely have a detailed talk on them. If we need any more pages, we'll obviously create them. rfce, save that, and one more. rfce, there we go. So now we have all the pages. So one task is done. Let's go ahead and close that. I can actually close others just like that. There we go. So all the pages are there. Right now, all these pages are available. In fact, if I just go ahead and set up the router and everything, almost everything should be immediately available to me. Now, one more thing that we are going to do here is inside the source, let's create one more folder where we are going to handle a couple of things. I'll show you how to do that, but first let's create a new folder and call this one as component or components. That would be better. Now inside the components, we'll just create only one file as of now, which will be simply the auth layout, how the authenticated layouts will be there. Right now, there is no logic into them, but we'll obviously will creating them. Right click and a new file inside the components. Let's call this one as simply auth layout.jsx. Okay, simply rfce, nothing there. Instead of auth layout, let's go ahead and call this one as protected. Again, it's up to you. If you want to call them something else, totally up to you. I'm calling it as protected as, because if I want to protect any of the page or anything, I'll just wrap all these things around this component. So this will be serving just single purpose that anything inside this layout is going to be something which is authenticated. If you are authenticated, I'll serve you. This will act as a wrapper or by the wrapper means I'll simply accept some of the children here. And all I'll do is render these children. That's the whole idea. So instead of returning this kind of a thing, I'll just say that, hey, just return the children up here. So I'll just go ahead and use it like this and we'll go children. Definitely, I'll go ahead and modify this a little bit, but right now this is the goal. You accept some parameter, you render them. But right now this of the component doesn't know that which one to render, which one to doesn't render. And in order to actually have this, we will accept a simple authentication as a parameter. Authentication and that authentication by default will be true. If the authentication is true, that means render this page, otherwise don't render this page. But right now we have no idea from where this authentication is going to come to us and how this will work. So obviously this is a little bit confusing point at this point, but these are very common scenario when you work with any React application. You have some kind of protected page or an auth layout, which helps you to render conditionally whether this component should be rendered, this page should be rendered or should not be rendered. So we'll work on that. We will also work on, this will be responsible for navigating the people. If you're not authenticated, let's redirect you on the login page. If you're trying to access any resource, which you shouldn't be, then let's redirect you to login page. If you're already login page, we will make sure that you don't access the login page or sign up page. So that logic will go in here. But again, this is just the basic right now just to help you to understand what is going on with the flow of this application. All right, this is all done. We'll come back on to this one. Right now, let's go into another part, which is the Redux part of it. A lot of people are afraid of Redux. You shouldn't be. We have played enough in this entire series. And I'll walk you through how the Redux will work. And we'll just manage one thing and I'll give you assignment to manage more things. That's how you learn when you painfully, you take some pain and you try to work with these assignments. So right click on the source and create a new folder and we're gonna call this one as simply store. The name of this folder is not important at all. You can call this one as Redux. You can call it as a Superman Redux, doesn't really matter. We'll create two files into this one. The next file is going to be store. Again, some people like to have this store in the root of the application, nothing wrong in that. But I'll just keep it all separated up here. I'll also create a slice in the Redux toolkit. There is a concept of creating slices. We discussed that in the previous video as well, where I showed you the crash course on the Redux toolkit. So please watch that in case you feel a little bit uncomfortable here. And we'll be having this auth slice.js of course. Okay, first of all, let's manage the store part because that's the easiest of all. In this one, all we need to do is configure the store. So we're going to simply say, hey, I want to confi, confi, gur, store, no suggestion, configure store. And that will come from Redux toolkit. Bothering me a little bit, yeah, there we go. Once I have this one, then I have to create a store from this configure store. So I'll just say that, hey, I created a store from configure store. This is a method which takes object as parameter. Now what goes inside this one? This takes slices, or you can say reducers as well, but we don't actually make these reducers appear. That's exactly this auth slice is being made for. You create all of your reducers here. The way how we create reducers in this one here is pretty simple. We simply go ahead and first say that I want to create a slice. So create slice, there we go. And this one comes from the Redux toolkit. Then every single slice needs to have an initial state so that it knows when I get started, what should I do or how I should behave. So for this one, we'll just go ahead and say, initial state. Feel free to name it anything, doesn't really matter. Initial states, the status is going to be false. We are using it to keep a track of authentication of the user. So if the status is false, we'll assume that the user is not authenticated and we'll also have the user data. So if the user data is there, then obviously it will be filled up. Otherwise, by default, it will be null. There is nothing inside the user data. User data is something which App Right will give us back. For example, what's the username, what's the email, what's the ID or any information you can just add up here. Now this is the initial state, but the next point is to create the slice. Just like we created the store, it's exactly same. So we go ahead and say auth slice and that auth slice is being created by create slice. Of course, lower create slice. It's a method which takes an object as a parameter. So that's what it does. Now this takes couple of parameters, not just one the initial state, couple of parameters. First of all, you have to give it a name so that although this is auth slice, it will be very unique, but it is a good idea to give all of your slices a name so that you can refer them back with this name. Then passed up the initial state of what the initial state of the slice is going to be. And then you create your reducers. So this is your reducers. Now reducer is an object and inside this object, you create all the methods or whatever you are tracking. Now good thing is you don't have to worry about, you might have heard the thing in the reducers and especially the redux that, hey, don't mutate your state or something. You don't have to worry. Redux has taken care of that behind the scene. You just go all crazy now, redux take care of that behind the scene. That's a good thing. So inside this reducers, the first reducer or the method that I have is login. As soon as somebody creates a login, we'll give him an access of state and action. So as soon as you create any method inside the reducer, you have already an access to the state and the action. State is that current state of what this store is actually depicting right now. So that's what it is. Action is something, when somebody wants to access the reducers, they use actions to reach you out so that they can provide you the payload, they can invoke these actions and all these things. So pretty easy. This is a method. Now just go ahead and somebody will pass us in the state, the status. So if he's logged in, then obviously we need to change the status to true. And they will also provide me a payload. The payload is accessible in the action. So I'll just go ahead and say state.action. Actually, not the action like that, state.userData. Somebody will be providing me this user data inside this. And I'll just go ahead and say, I'll access it via the action.payload.userData. All right, so that is it. So now something really nice to remember. This is something that we are doing. If somebody is calling this login and is providing me the status, that means, yes, after logging in, once you hit that API, get the data back, you are 100% sure that, okay, you are logged in. Then you reach out, hit this reducer, so I'll make the status as login. And via the payload, you'll give me the user data that I'll fulfill into this one. This will now reach to the store inside this configure store. And it will be available to anybody from any component, you could directly reach out to store and can access that data. That's why these are super helpful. Similarly, we'll be having a logout reducer as well. So we'll just go ahead and say, hey, let's have a logout. Same, exactly same, repetitive stuff. We'll have the state. You can optionally have the action as well, but in this case, we don't require because once somebody hits a logout, we'll just flush out everything. But still, there is nothing which is stopping you to have an access to the action here and the payload here. You can do that. I'll just go like this, and I'll just refresh the state. So the status will go to false and we'll just remove everything from the data as well. So state.userData. By the way, you can add more in the initial state and have more data if you wish, but right now we'll just keep it that much. Simplistic stuff. Okay, now once you are done with that, the job is not done because you have created a auth slice, but there is a little bit more to it, by the way, in case you missed this, take a screenshot, pause it here. This is not enough. We need to export this as well. The most important thing is what people are looking up for is definitely these methods, login and logout, so that they can access that, but also some of the folks are looking for this entire reducer. Who are those some of the folks? Your store, yes. So we need to export not only these methods, but also the reducer. So let's go ahead and do that. First of all, let's export the reducer. That's my default. Export default auth slice, and just go ahead and export this reducer. Reducer, reducers. When did I named it as reducers? Let me just quickly check this. This is seems like a small bug. All right, welcome back. Yes, I had to look into the documentation, and that's how the real world developer works. We don't remember everything. We always consult the docs, maybe stack overflow these days, which add GPT to figure it out. And yes, this is how it works. So we can see we are following almost exactly like that. So notice here, here we are saying reducers, but at the time of export, we are actually saying counter slice dot reducer, which does it. So Redux in itself is kind of, it's wrong to say library, it's more of a framework in itself, which has its own way of dealing with the things. So we just export exactly like this, like actions, reducers. So yes, it might be a little bit confusing that, hey, here it is reducers, and there it is reducer only singular. But yeah, this is how the documentation works. So we'll just follow that, okay. That reduce removes my confusion as well. Yes, this is, but it's a good one, a good one. I'll try to investigate it more to study more about it, that why this is the case or how this is the case. Okay, so the step one is done that we have exported the reducer. But as we know, we have to export these singular methods so that any file can actually use these methods as well. Pretty easy. We're gonna go ahead and say export const and then all the methods that you want to export, like login, log out. And we simply go ahead and say this one is going to be auth slice dot actions. There we go, bothering me a little bit. We need to have a space around, there we go. So this is what we have as of now. So both the things are done. Now step one is to get onto the store and first of all, import these reducers into the store and make sure your store is aware of that. Not really, but aware of that. So we'll just go ahead and say auth slice from auth slice. Now go into the configure store. This store need to have the reducer, just like this. And all the reducers that you have, you have to actually mention it here. So my reducer name is auth, that is my auth slice. If you have more, you can just put a comma and have it. Like for example, you're tracking a blog here. So your blog slice, blog slice goes like that, of course, with a space. So you can just go ahead and work on with that. I don't have it, I have just one. So I'll just save it one. I need to export that so that I can use it wherever I like. I'll just go ahead and say export, export default and store. Not like that, there we go. So the two things, the major things are done and we have this auth slice, we have store. So at least the preparation part of our redux is all done. Let's go ahead and work on with how we can actually use these stores and work with that. Now for this, we'll go into our, where is our main.jsx? This is where it is. So inside the main.jsx, we can work with that. If you are working on something like index.jsx, that's also fine. But what we are looking for is the main where our application is loading. This is where I have to work on. Now, I'll first and foremost, I don't want to wrap it like this. I'll just create a router for this one and then we'll work on with this one. So first of all, let's go ahead and create a router. So I'll just come here. Okay, this is fine. Okay, first of all, let's go ahead and create a router. Router and router will be created by create browser router, and this is a method which takes an array. And we need to import this. Right now there is nothing which is importing it. So import create browser router, and that will be coming from react router DOM. So this is the first one. So this is the first one. React router DOM. So this is the first part. We haven't worked on how this will be taking care of the pages yet, but we have a create browser router and we have a router provider as well. Router provider, okay. So assuming that the router is all done, of course it is not, but assuming that this is all done, let's create this one first. So the way how it works is now instead of just directly rendering the app, we don't do this. We actually remove this part. This app will go inside the browser router at the homepage that, hey, this is how we load the app. But for a minute, just remove this one part. And all we're going to do is have this router provider self close it. And now we'll say that, hey, router will be this router that we have just created. Right now there is nothing, but don't worry, I'll walk you through that how this is being done. So this is the step one, how you configure all of your router. We'll go inside this array, provide the paths that home is governed by app and what all components basically we are loading or we can say the pages that we are loading. So that's the basic of it. But we also want that we should have access to the store as well, that's the most important part for us. So how we can have the governing that all of my components know that there is a store. So for this, the major role is that everything like all this router provider at every single time there should be wrapped by the store. That is the problem statement. So let's go ahead and first import that. So I'll just go ahead and say I need a provider and that provider is not from the React, we need from React Redux, there we go. Now, the next step is really simple, absolutely simple. This browser router, this whole thing needs to be wrapped with this provider, provider, there we go, close it. And this needs to go inside this. There we go. But just putting this doesn't means that it is already automatically aware of the store, we need to import the store as well. So we'll just first say that, hey, let's bring up the store. We can probably get it here, import store from and the store is going to come up from, we'll go inside the store and there will be having store.js. And now this provider can say that what is your store? Just name the store. So simply go ahead and say the store is going to be store. There we go. Now this is all done, properly configured that, hey, the store, since this is my store, this is my state of the application, every page is going to be governed by the state. That is why I'm wrapping provider first and then everything is going to be governed by this. So I'm just governing it. So I'll just move it a tab so that it's easier. Okay, this is the first part of how this is going to be done. And by the way, this browser router that you're creating, that can be done by multiple ways. There are kind of a sandwich method as well in which you just create components inside the components or you can also provide an object into this one. So we'll go with the object one. So here is our object that goes like this. And then I'll just go ahead and say, hey, path, what is the path? I want to have a path of slash, who should be the element which should be rendered when somebody visits this path? So obviously in this case, now we say the element which will be rendered is going to be the app. There we go, selfclosing, there we go. Now the next step is, do we have sub paths after this application, after this slash, do we have slash sign up? Do we have slash login? Do we have slash post? Yes, we do have. That all goes into the children. So as you can see children right now it says object, but no, it is not an object. First of all, this is the proper syntax and this is further down again an array. What all the children do you have? Okay, so inside this, I'll have multiple of these children. All these are objects just like this. First of all, what is the path that you want to grab? So the path of the children is going to be, first of all, the slash and wherever that slash is, by the way, we need an access to the pages. Yes, we have homepage. On the slash we'll load the homepage. We'll just say element, who is the element you want to render here? We want to render home, which is not yet imported. Home is not yet imported. So now we need a lot of list of these imports. So import home and we'll be importing. Now you guess the idea why I created the pages. So inside these pages, we have home.jsx. There we go. You get this point that how this is all being done. So this is my slash where the home component will be logged in and all these things. So that's fun. That's basic. But what about the elements like slash login? We need to provide some kind of mechanism to find out that should you be able to access the login or not? Because if you're logged in, you should not access the homepage, the login page. But similarly, you get the point. You get the point. So I'll just go ahead and walk you through that how this is being done. This is another of my sub route. Let's just say the path is going to be a slash login. We know what component we want to mount onto this one. So the element is going to be, you might be wondering, hey, just go ahead and say, you want to go ahead and have login into this one. Just like this, but no, this is where you are a little bit wrong, not wrong. We haven't discussed these kinds of approach. So we'll just first go ahead and say, hey, login. Nope, this is not login. I want it to be from pages slash login. Okay, there's nothing wrong in this approach, but what do we want to do in this one is, instead of rendering this login directly, which doesn't gives me control whether should I show it to you or not, I'll just go ahead and bring in one more component, which I created. So if you remember, we created this component auth layout. It was doing nothing, but time to bring it now. Let's go ahead and say import. And this one is auth layout, I guess, yep. Auth layout, and that will be coming from dot slash components and we have just one auth layout.jsx. Okay, what's so unique that you are going to do with this one auth layout. Now, instead of rendering this, I'll just go ahead and say, first of all, I'll wrap this up with parenthesis so that it's easier for me to write. And I'll say, hey, load this element, which is auth layout, just like this. And inside this auth layout, now let's go ahead and use this login. It could be selfclosing. But what's the point? What's the point of having this? Now inside this auth layout, I can provide a prop and I can define whether this page requires an authentication or not. So I can just go ahead and say false, just like this. I can say that this component doesn't require an authentication and I can, based on this logic, I can work on with my auth layout. So you get the idea. Similarly, like login page, exactly same. Similarly, sign up page. Yes, exact copy of this one. So let's go ahead and have a copy of this one. Let's put up a comma. We need to import this first. Sign up from pages, dot slash pages, and we have sign up. And we'll say, no, sign up also, this route sign up, also don't require any authentication and you can load this one, sign up, there we go. Right now, what we're going to do with those authentication is not really important, but let me just show you. And now let's also define one more and you will understand the logic behind it. Let's get one more, copy that. And now the route that we want to go for is all post, posts, maybe yes. Now the element that I want to render for this obviously is all posts. So first let's bring this. Import, and we're going to call this one as all posts, and that will be coming up from pages and all posts, dot JSX, okay. Now for this one, I want that anybody who visits the all posts should be accessible by all posts. But this time the authentication is going to be true because only who are logged in should be able to read all of my posts, that's the logic I'm going for. Now this is having a shortcut. So you can just remove this one if you pass on authentication just like this. This also converts as a true. So that's a shorthand, a lot of people use that. But now I have two situations here. People who will be coming up whose authentication is false like login and sign up, and people who will also be coming up whose the authentication is true. So how can I handle this situation? So there are a couple of ways. Now we'll work on the functionality part of how you're going to do that. So notice carefully how we're going to do this one. So a couple of things are there. First of all, the page is having a requirement that should you be authenticated or not. There is also one more thing, one more variable in the picture which is saying, are you truly logged in or not? Page requires a login is a different thing, but are you logged in or not? We can verify that you are logged in or not by just making a query to the store. That's where the two variables actually come up. And we have to match the two conditions here. All right, so what we're going to do is let's go ahead and one by one. So this authentication part is all good. We are not going to touch that. And just below up here, we'll make couple of queries with the selectors here. So first of all, let's bring up the important part. In case you have not seen the Redux crash course, please go ahead and watch that. We'll be using use selector from the React Redux. We need the navigation as well because we will be redirecting the people use navigation or navigate, yeah, navigate is good, React router DOM. So these are the two ones. Now let's make a query. So we'll say auth status. And we can just query the auth status by using the use selector. And from the use selector, we'll say that, hey, there is a callback here, just like this. And we can say, you give me access to state. And inside this, I can say state dot auth dot status. That's how we worked on it. So this will give me a true and false value. What is your auth status? Is it true? Is it false? Whatever that is. We'll also go and create a simple navigate. Navigate, oops, navigate. And we'll create a navigate from use navigate, just like that. Now we have access. Now I hope you can see we have couple of variables to check for. The first one is authentication, which is also a Boolean value. We also have auth status, which is also a Boolean value. So based on this, you have to figure out that what do you want to do and how do you want to do. Now, since this is a couple of queries are going back and forth, I would like to create a state for myself, which is probably a loader state. So let's go work with that. So I'll just go ahead and say, I'll use loader. And I'll say set loader. And that will be coming up from use state, use state. And by default, it will be true. So your loader is going on. By the way, yes, we have used state. Okay, now comes the logic part, how you are going to deal with that. So as soon as this component loads, you have to make some queries. You have to run these auth status and you have to figure out how this is all going on. So that based on this, you can render some other things. Because right now this is not, this is a simple children render right now. But this is going to be changed that whether the things are good or what's the value of this. Okay, let me show you how this is being done. First of all, let's fire up a simple use state here. Use effect, sorry, use effect. Use effect, there we go. No suggestions, no problem. Okay, first of all, the callback. And then we obviously know there is a dependency area on that. So based on what this is depending. So first of all, it is dependent on auth status. This is dependent on authentication as well. And this is also dependent on the navigate as well. So there we go. These are our dependency array, okay. Coming back onto this one, how do you want to work with that? We want to run a simple if and else condition in here based on I will be navigating you to login or I'll be navigating you to the slash page. Okay, let's see. Simple, if authentication is required and your auth status is not equals to authentication. Okay, very carefully, look at this. If I require a page which is authenticated, maybe you are visiting all post. So I'm saying that, hey, you are required an authentication there. But your authentication status is not as true because required means this will be converting as true. Okay, listen to this very carefully. When I say you are required, that means I'm passing a true in here. But what I'm also checking another side is the auth status that you are providing me is not equals to authentication or in terms, in short, your authentication is not true. In that case, where should I redirect you? Simple question, you are supposed to be logged in when you want to see all post, but you're not logged in. So obviously I should redirect you to the login page. Really simple. So I'll just go ahead and say, I use the navigate and redirect you to slash login. This will take care. The another condition that I'm checking is not a simple else condition. This is also another checker. Okay, so I'll just go ahead and check this one. If I don't require an authentication, so this is my authentication, I don't require authentication. You can just visit these pages, but you simply go ahead and say your auth status is not equals to the authentication. There we go. What should I do in this case? This is the second case where I'm saying, hey, you are not supposed to be authenticated to see these pages. That means the login page, the signup page. But what I'm also checking, hey, you are logged in. Authentication is auth status is not equals to false. So you are truly logged in. And there are some pages which don't require authentication. Who are those pages? The login and signup. So if you want to visit the login and signup page and you're already logged in, you're not supposed to see those pages. So in that case, I'll just redirect you to the simple navigate. So navigate and you'll be redirected to the slash. This is the basic logic that we have created. Now based on this, we can actually render onto this one. Once this is all done, let's go ahead and do one more thing. If we are done all these if and else cases, let's go ahead and use a set loader and turn it into false. So all the drama that we wanted to check and all of these, this is all done. Now here I'm changing the state of this loader. Based on this, I can do a simple ternary operation into this one. I'll just remove this part and I'll say first check my loader. If loader is true, then we're going to show maybe a loading, maybe a null. I'll keep this as a simple exercise for you to create a simple loading component, maybe a spinner widget, just add it up here, simple. I'll just use a null, not a good practice, but I'll just keep it here. And if the loader is false, then go ahead and load the component, which in my case is just the children. Children, there we go, not like that, not like that. Children, there we go. So really simple, but this is a good mental exercise to actually figure out that how things are going on. By the way, it has couple of more ways of how you can write that. Let me walk you through. Probably it will take a couple of more minutes, but it will help you to understand how this is being done. So for example, if you are checking something like this and just rewriting the code to make it more understandable. So let's just say there is an authentication. If authentication is true, then I go ahead and I'm checking another one, if statement, something like this. So in this, I'm checking if your auth status is not equals to authentication. So something like this. So if you are having a problem in understanding two condition at the same time using this, you can also apply this one. So in this case, notice here, let's understand this. Authentication is required. Where does the authentication is required? Oh, this kind of pages means all posts. Authentication is required in this one. So it is true. So this will be converted into as true. Just for explanation purpose. And the auth status, what is your auth status? It is not equals to authentication. That means authentication was required, but you are not authenticated. So where should I redirect you? If you are not authenticated, but the page requires authentication. Simply you understood this part. Now we should navigate you to which page? Slash login. And this is exactly what I have done in this one here. So hope this helps you to understand the part. I can understand. This could be a little bit more for the beginners and fresher, but this is exactly what I did. I'll just keep it here to make sure that you know that how I explained this to you. But I think now this gives you a much more clarity of how things are done and how things are done. Okay, so moving back. You understand this part that all posts are being there, but we have more elements. So for example, I'll just go ahead and copy and paste this one. So the page is like add post. Let's go ahead and have that one as well. Import add post. No suggestion. Nah. Pages and we have add post.jsx. This also requires authentication. So it's almost similar to that. This one will be add post. Add post, just like that. Requires authentication, yes. And we'll just simply say you are add post. There we go. So that's the one. We also need the edit part as well. Edit also needs a slug to be passed on. Let's do that. So we have edit post and we have a post individual as well. Let's import them too much. Import and this one will be edit post. That will be coming up from pages and inside the pages we have edit post. We do have one more which is just the post. Let me check that. We have just the post. Let's also import that. We have post. Come on. Post and that will be importing from pages and we do have post.jsx. Both of them requires authentication. So let's go ahead and work on with this. Copy and paste it. Put up a comma. The path is going to be edit post, but you cannot just go ahead and edit post just like this. You need a slug value. So slash colon and slug. This will give us which post you want to go. And this requires authentication. Yes, this requires and this will be edit post. All right. What else? We just need to work with one singular post as well. This one also requires a simple post. So we'll just remove the edit part from here. We'll just say this is a post and you'll provide me a slug. We're saying that you also require authentication. It's just personal approach. I don't want anybody to see my, I'm kind of a medium, kind of a fan where if you're not logged in, you cannot read much of them. Anyways, it's up to you. And I'll just simply say, hey, this one is going to be post. That's it. So at least our routing and pages are done. You have understood the concept. Of course, we might need to debug a little bit, but the concepts are now perfectly fine with you that how the auth layout and all these things works. We now know how to protect our pages with the help of this auth layout. This is doing all the magic, making the queries. Nothing is happening automatically or magically, but pretty good start and pretty good stuff that we have done. So in the pages, all the pages are done, but our components are not ready that in what pages we'll be rendering, login, sign up. We'll do that. Nothing much deal. Again, I'll be providing you all the details of that and we'll not be writing any of the CSS for that. I'll provide you the CSS directly. You can just copy and paste them from my GitHub as well. This is not a tailwind class. We'll focus more on the React part. That's it for this video and let's catch up in the next one. Hey there, everyone. It is here back again with another video. And in this video, I just want to do the testing of what we did in the last video. It was a pretty big video. So I thought, let's sip some water and come back here. I don't want to do the testing behind the scene. I want to do all the testing that if it is working, if it is not working, we'll probably pause the video, we'll debug together. However it goes, we just want to do it all together. So let me just share the screen and see this. Okay, so now the goal is, if I just go ahead and I simply run this application, so I've just run the command, that's very basic. So it's npm run dev and I go onto the page. This is the page what I see. Good enough, but in order to do the proper testing, if you've watched the previous video where we said the router and all these stuff, you know that first we need to go into app.jsx. And the step one is to just remove all this gibberish. Not a big fan of this. We'll just go ahead and remove this. There's a small error. We'll just go say dev. Oh, just like this. And there should be a paragraph here or let's just go ahead and call this one as inside the main. We need an outlet into this one. So otherwise, if we don't have an outlet from React router DOM, rest of the components will not be able to render inside this. So we need the outlets. So make sure it's from the React router DOM. And now technically we should be able to see the home here. That's good. And if I go ahead and see the login, we see the login. If I go ahead and see all posts, it still goes for the login. One more thing which I noticed is there's a small inconsistency here. Inside the auth layout, we actually called it as protected, but here in the main.jsx, we are calling it as auth layout. Not a good idea. I'll just go ahead and say this one should be protected. That's a better one. I'm pretty sure you might have already noticed it, but I just noticed it. Not a good idea. Okay, auth layout. Let's hit, let's select all the instances of auth layout. By the way, these are just VS code shortcuts, which I love. And one more. Okay, multi cursor. Remove this, have the protected one. It's not going to bother you anything, but I think that's good one. So now I think the testing is all good. We are logging and rendering a login. Too much white, I know. Too much light mode. I don't worry, I'll get rid of this one. Sign up is good, but if I go ahead and see, let's just say edit posts. Oh, edit posts doesn't exist. Edit posts exist. And it says edit post. Oh, we need to give some ID as well, slug. Let's give it a test text. It says login. So we are not allowed to do so. So there we go. As of now, our testing goes good that we have all these applications, routing states, everything is working fine. We have no errors. Good testing in between. While recording the videos, it gives us rarely an occasion that we can test in between. But wherever I do get a chance to test along with you, I try my best. From the next video onwards, we'll work on the components so that I can show you what all the components will be needing, how they'll be working. Some of them are really boring, like footer. There is absolutely nothing inside that. There's copy paste of the tailwind classes. A header could be a little bit interesting because we are conditionally rendering some of the elements like the logout button, the signup button and all of that. So they can be a little bit interesting, but footer's not really something. All right, so that's it for this one. I hope you have enjoyed this one. Really short video, but really something that helps us to understand the features of it. Let's catch up in the next video and work on the components part of it. Hey there, everyone. I'll always share back again with another video. And from this video onwards, we are going to have a journey about building the components. Now, some of these components are really great because you understand a lot of logics behind it, for example, how and why do we use forward reference as a special hook in the React? And some of them like conditional rendering, but some of them are really truly boring. They doesn't teach you anything from the React perspective. They are just, you can say the logo component, it just displays the logo. That's it, it does nothing more than that. The container, it's just a wrapper. It just displays the element. Nothing much more than that. The footer component, lots of tailwind classes, good for tailwind practice, nothing else, nothing else at all. But what we can do, we have to work with both of them. So we'll start with some of the basic ones, which doesn't do much. And as we move forward, we'll progressively work on some of the components, which are really good and interesting and helps you to understand the React part of it. Let's go ahead and do that. So we'll just go into the screen sharing first. All right, once we're in the screen sharing mode, then let's go ahead and go into components. The first is, let's create a new folder and keep it inside this. So this one is going to be container. And inside the container, we'll have this simple container.jsx. New file, container, and it should be all caps. container.jsx. Okay, what do we have in this container.jsx? To be honest, there is absolutely nothing. It's just as it is. You can probably can do something like export default just right here in case you wish, if you want to. But that one is also fine. So what do we have in this container? We simply return a div, which is going to render the children. So let's go ahead and accept all the children. And we are going to display these children just up here. Why we are doing this? What's the point of? Because we want to add some additional classes. That is the whole goal. Nothing more than this. We want to simply have a width of full so that we can have a, we'll also have a max width. So we'll just say max width of seven XL. By the way, you can hover this one. I didn't come up with them automatically. I also worked tweaked a little bit while we were designing this application. So it's not some magic number that I came up with. We'll just say max auto, simple, and we'll just say px4. So these are the classes we came up while displaying a container. That's it, nothing more, nothing less onto this one. Okay, we'll keep this one in a folder so that it's a little bit separated out. Now let's go ahead and move into, let's close this one first. And we'll go into container first source and then container components. Components, and let's create a couple of files first. So I'll just try to create the files from here. It's much more easier. Otherwise, right click it. Sometimes create files in the wrong place where I don't want it to be. So I'll just go with the logo.jsx. And there we go, logo. What do we have in this logo? Honestly, nothing. I'll just go with that of CE. The logo is logo. I don't even have a logo. Otherwise, usually it's just the image. But let's just say if we can have some logo. Can we have some of the logo? In the public, we have VTSVG. We can probably use that. Or can we have? I'll just keep it as it is. But we need to have some of the classes on this one. Otherwise, it is going to give us some of the issues with this one. We'll figure out later one. Right now, let's just display it inside this one. And instead of a div itself, let's use an image. I think that one would be good. I'll just add an image in the later on videos. Don't worry. I'll just say I want to have an image just like this. And this one is going to be an src. Right now, there is nothing. So I'll just keep it empty. And inside this, if somebody doesn't pass me any parameter, I'll make it a little bit more robust so that people can pass me some values. I'll just say 100%. And whatever the width you give me, I'll just use it as a style. I'll make it a little bit fancy. I'll just say give me a width. If somebody gives me 80%, we'll use 80% width. Otherwise, that's it. Let's use at least an ELT so that we know this is a place for a logo placeholder. If I forget, later on, we can just work with that. That's it. That's your logo. Next up is a little bit interesting. Not too much, but a little bit interesting. We'll have a simple button as well. So we'll have a button.jsx. Why do we have a button? No such big need of having a button, but I realize that if you have a button, you can customize it a little bit easier. In case you are familiar with something like shad cn or something, that is fantastic. Almost same kind of approach we are using. I'll just have an rfce. We have a button. The button is going to take some of the parameters. Oops. There we go. What all parameter? First of all, you'll be taking children so that you can render them. You'll also have a type. The type is going to be button and bgcolor. bg, bgcolor. That is going to be, by default, this one is going to be background is going to be blue. 700, 600, whatever you wish. Plain old tailwind colors, nothing more than that. We'll also give it a text color and the text color is going to be white. So we'll say textwhite and we'll also have some of the class names. Class name and that by default is going to be empty, but you can pass me on more and you can also pass me more props. So we'll spread them around if we have props and one comma is required. Now the advantage of taking these props is if you wish to have or to do something more, you can just go ahead and do this. I'll just remove this one and I'll say I'll return you a button just like this. Button is going to render the children. You can also rename this actually to the button title if you wish, but I think I'm happy with this one. Okay, what else do you want inside this button? Let's have the class name. Class name. We'll actually change this class name into first of all backticks. Actually first of all curly braces then a backtick so that if we give PX dash four padding on X axis to be four, padding on Y axis to be two so that it looks like buttonish and we'll also go for rounded dash LG for rounded, but if you have more properties, you can just use the dollar and variables to have this one. For example, the BG color, if you want to change it, now you can easily change it. More variables, text color, maybe you want to change the text color, go ahead and change it now. And also some additional classes if you want to pass on, I'll just respect that as well. Okay, so right now we have basic default button. Another advantage that we can have in this one is if we have more props to be passed on, maybe active, deactive, whatever you want to say, I can just actually respect that as well. I'll destructure these props as well here. So all these props actually goes directly here, makes life a little bit easier. Again, a good way of how we can have the button, very generic button, but could be reused like anything. Now let's close this one. Let's study a little bit which is more interesting and you'll repeat this quite often, which is input.jsx. Inputs are a little bit different and interesting compared to the button because button doesn't have too much. It just registered one event which is on click, nothing much more than that, but inputs have great number of deals with that because if you think it carefully, input is going to be used in some other component. That component will have state. So you have to somehow manage that somebody's writing inside this component, but that value goes outside of that into upper level component. I hope you are understanding this. This is complex, but the solution is not that complex, but imagine this. The component, let's just say this is your form. One level down is input. Now this input needs to give information to its parent. That is where the magic comes and that's why I found input to be really amazing. Now inputs, just like this, I'll just actually rewrite this entirely. So how do we actually manage this that we can pass on some information to our parent itself? Passing into child its prop, but how can we pass on to the parent? That is interesting. That's why I found this one interesting while teaching. So we have input just like this. In order to do so, you have to use one hook from this React, which is forward ref. Yep, that's it. That's it. Forward ref, if you have this one, that's it. It just pass everything to the parent component. And now you can go ahead and say export default input. There we go. Now, how do we use this forward ref? Now using forward ref again is fairly straightforward. You just wrap up your component inside this. And we also know the component is nothing. It's just a function. We call this one as input. And this is how we work with it. If you have anything to access, you can just go ahead and say, I will access a label for this one. I'll also accept the type of this one. Type is going to be text by default. Otherwise you pass me on this one. We'll have the class name, just like this. And by default, it's going to be empty. So that same concept of the buttons will also have the props. So let's just say props. If you have more props, you can just give me. Also, you have to give me a ref. Otherwise I'll just pass on this ref. Okay, let's go ahead and move it on to the next line so that it's easier to read for everyone. There we go. Moving up, just like this. You also go like this. You also go like this. Just arranging them. Sometimes these things bother me a little bit. Okay, there we go. Now hopefully it makes sense. Okay, much easier to read in this way. Now in this one, all we have to do is return, just like we return in the components. So this one is going to be returning, just like this. And I'll be returning a simple div, just like that. This div will have a class name. We are going to get width of full, whatever is available to us. And then we simply go ahead and use these labels in all these inputs. So let's start our JavaScript in here and we'll say label, label, label. There we go. If label is there, then we are going to display the labels. So use ampersand sign and another component just like this. And in here, we are going to start a label component. Label tag would be better name. Label tag, just like this. Inside the label tag, we'll display this label. If the label is not there, what's the point of displaying the label? And we can have some of the HTML ID for it. So HTML for, and we can actually give it an ID and we can borrow the ID by the way from the React itself. So I can just provide an ID just like this. Right now I don't have an ID. So I can just go ahead and create this ID by use ID, which is given to me by React itself. And I can actually go ahead and before I had returned, I can just say const ID is going to be equal to use ID. There we go. Now you get from where this ID is coming up from. All right, not bad. We'll also add some of the class names. Don't really like them, but we have to. This one is going to be in line block. And we'll have a margin bottom of one. We'll have a margin, sorry, padding left of one. Okay, if you wish to design it a little bit more, you can just go ahead and do that. Really doesn't bother us much. So this whole thing is the label portion of our input. We also need to give it an input because that's what this is input, not the label. Let's go ahead and provide an input. It could be a selfclosing one just like this. Now we need to set up all the parameters here. Like for example, we are taking type from the user. Let's respect that and provide a type just like that. We also need to provide a ref because when any form will be using it, they will be providing us this ref or references. There we go. And we'll say just add the ref here. Let's restructure all the props and add them here as well. There we go. And also let's provide the ID. So same ID can go up here. Same variables, same unique ID will go here. Then after that, we'll add some of the classes. So the classes concept is exactly same. There is nothing new that you are learning. We'll have the classes, but we'll wrap them in the curly braces and in the back text so that if any variable comes up, we can actually respect that. So this is a new concept that you learn into this input, which is how to pass on some data from a lower component to upper component or from a child component to a parent component. That's interesting. Similarly, like the input one, we'll create one more, which is exact same replication, select form or select input. Select.jsx, we'll go with this, so select. Exactly same concept. I think this will be a good reputation for us. So let's go ahead and create a function and this will be our function just like this. And this function is going to be named as select. There we go. And we'll also grab the React. Import, React, we know that we'll be using use ID. Use ID and that will be coming from React. Okay, the function is all done. Now we just need to export that. Again, it's up to you how you create a function within inside that just like we created, or you can do something like this. Export default React.forwardref. And here we can just say select this one. Okay, both are same, exactly same. It's just the way of writing the code here. We're doing everything in line, whichever you prefer. There is no right or wrong. There is no optimization in this one. You can actually just wrap this up and pass it on directly. Here I created the function first and then I'm passing it at the export time in the forward ref. The reason for showing you two ways is so that you can understand that some people write code this way. Understanding the code is also really important. So this is what we have as of now. All right, moving further, we'll take some of the parameters. What all of the parameter? We obviously need, this is a select. So if we need options, we need the label. Exactly same thing will happen to the label just like we did a class name, just like this. And we'll also have props. We'll restructure them. And once we are done with this, these are all the first like objects that you'll be passing me, but you also have to give me the ref. Okay, once we are here, then obviously we need to first handle the ID part. We know that, that's easy. Use ID, there we go, unique ID generated return. And there we go. And inside this will just return a simple div. Okay, first of all, class name, simple class, we'll save it, get the fill width. There we go, no big deal. In here, the label thing will be exactly same. So why don't we just copy and paste that, save us some times, because it is exactly same. There is nothing new we are learning here. So we start our JavaScript. We simply say, if you have labeled and we'll display the label, we'll use the HTML ID or HTML 4 for this one, we'll have the label. But right now here, this label is good. But now the input form is different. So this is okay. Now let's start the select field. This is where things gets a little bit interesting. So this is my select field. I'll keep it as, no, not selfclosing. Okay, now one by one, what goes inside this? First of all, inside the select field, first of all, let's display all the props that you have. So let's get rid of this. Oh, my bad, dot, dot, dot, props. Okay, one part is done. Scroll this a little bit. Okay, we need ID, okay, easy part. ID will be going like this, so ID, easy part. We also have ref, easy part. We also grab it like this, ref, okay. This is easy part. Now, the thing is, which is most important about this is a lot of options will be given to you. This is how the select field works. In case, by the way, you forgot it or maybe you want to jog the memory, we can go select HTML, and I'm pretty sure W3 schools can help us to memorize, jog the value. If I try this, this is how it looks like. This is the select field. A lot of options are being passed on, and as soon as you select the option, that option is being selected. That's exactly what we want to get. These options will obviously be an array. Somebody who is using my component should be already aware of this, and now all I have to do is start a JavaScript here, and I have to say, hey, options, I want to look through you. So maybe you can use for each, maybe you can use map, whatever is your favorite, you can use that. In each one of them, you will get a callback just like this. So we'll get an option, options, option, remember that, and then we can simply use a callback just like this. I'll start a parenthesis, not the curly braces, so that I don't have to explicitly return, and then inside this one, I'll say I will start options here, not options, option, and I'll close this one as well. There we go. Inside this one, I'll display each of these options, okay? Half part is done because if you remember the code part here, this is the option. So this part is done, but we need to also have the value being added. Otherwise, it's just displaying here. So we need to take care of the value part. So we'll go up here and we'll say value, and the value is going to be whatever the option is, simple. We also need to do one more thing, which is not required from the HTML perspective, but from the React perspective, it's required. Since the value is looping through, by default, React Fiber has no way to knowing that if it is repeating different values or the same values. So we need to provide a key for it. This is performance optimization, and I know that each options are different, so I can provide an option like this. Really interesting, but this is all what we have. Now, apart from this, there is just one more final thing, which is just a class, so I'll just copy and paste this. Doesn't really bother us much. So there we go. We have our select options being added. This is something really interesting. I hope it gave you some knowledge of forward ref. If it does, do let me know in the comment section. This is really important. Okay, this is all done. Input part is all done. Now let's also do one more thing. Actually, two more things we have to do in this video, but this one is going to be a little bit interesting. So what we're going to do is, let's open this up. It's much easier to actually create components from here. I want one more component, which is postcard. Not really the postcard, like postcard, but card for each of the posts that we have. This is interesting because a lot of information we need to grab and how we can actually grab this one. So let's go ahead and an RFCE, react functional component. We have postcard, just like this. Now this postcard takes a couple of information. Let me show you. It takes a dollar ID. If you're using MongoDB, you might have underscore ID in the case of app write, it's dollar ID. You also give me a title. You also give me a featured image. Featured image, okay. Featured image, these all things are given to me. Now, my responsibility is to simply have a card on the homepage to take the user on the longer post for that particular post, okay. How we can do that? First of all, let's remove this because we want this entire card to be clickable. So we need to grab the link just like this. So we'll grab it like this. But this link obviously doesn't come directly. We need to have it from the React router. Import, give me a link, no suggestions, no. From React router DOM. Okay, now anything inside this will take us to this. But again, we have to provide where do you want to take me? For this, we have to use the to keyword. I'll use back text. We'll go wherever we are, obviously on the homepage. So we'll go on to slash post and slash the slug ID, which in this case is dollar, just like this. And we'll provide dollar ID. ID, yeah, that one. Okay, now we know the link part is sorted. Now all we have to do is grab a simple div, which is going to display the information. So inside this div, obviously some of the class names will go, I'll just copy paste these classes, doesn't really bother us much. And we'll use class names just like this. So let me just copy and paste these classes. You can also copy and paste them from, okay, from the GitHub itself. So there we go. And inside this, we'll have another div. Yeah, that's how we designed it. Okay, this div also has an image. So this is the image. Now, where the interesting part lies is how you're going to grab the source because you have this featured image only. Now let me jog a little bit of your memory. If I go on to the config part, notice here we created a simple method where it is. Yeah, get preview. So this featured image is nothing. It's a file ID that you will pass me. So here in the postcard, you will provide me this featured image. This is nothing. This is the file ID. So I can actually use this get file preview method and pass it on file ID. And what it gives you is directly a link of the image. Notice here we send href. So this is a link of the image. So I can actually utilize these features. And that's why I say these services actually helps you to lot of work that is already, that can be reduced down. So all I have to do is import. Let's call this one as app right service. App right service. And that will be coming up from.slash app. Nope, dot.slash. Yeah, there we go. App right slash config.js. Probably don't need a JS, but anyways. So we have the app right. Okay, now in this source, I can just use it directly. So I'll just remove this one. Inject it like this and I'll say app right service. I'll want to use a method which is get file preview. And in order to run this method, I have to provide you the featured image. That's it. Automatically it will call this and do everything that I want to do. All right. In this one image itself, I will inject the title optionally, but if you wish, you can just go ahead and do that. Now time to add some classes. And this one is going to be rounded dash xl. And we do have some of the classes onto this div as well. We'll have the class name just like this. And again, these classes are nothing too much to be worried about. Basic tailwind classes. Okay, next part is how we are going to display the title. Totally up to you. And what I want to do is just below this div, we'll have an simple H2 and inside the H12 displayed. Title. There we go. We do have some classes for this one as well. So we'll have a class name and we'll have a text dash xl. We also have font bold. All right. So I hope you understand a lot of things that are learned from the React perspective, as well as good software engineering perspective that creating a service, it helps us a lot. We don't need to do things 1000 times. It just works out of the box. Okay, now one more thing. Final thing that we are going to do for this video is we'll create a new folder, which will be a footer. Again, nothing much. This is really the most boring file. It has nothing. It will be simple footer.jsx. Okay, simple rfce, React functional component. And all we're going to do is just copy paste some of the HTML code. Remember, this is not an HTML tutorial. There is nothing much we are doing. Just a lot of CSS classes, logos and whatnot. Only thing we have to do is import a link because all these are wrapped around the link. Link and that link come from React router DOM that you already know. And that's it. That's it. Your footer is ready. Now all you have to do is go into an app, display the footer, see how it looks like and all of that. Whatever the things we wanted to study in this one, we have studied most of it. Still, there are few more left, but we're going to do that in the next video. Already the video is half over long. So let's go ahead, move on to the next video and see that how we can work on the rest of the components. They're pretty interesting. Let's catch up in the next video. Hey there, everyone. Hitesh here, back again with another video and welcome to continuing our journey for building a full stack application, which is our blog app. In this video, we're going to take down two approaches and in fact, two pathways at the same time. The first, we're going to take the tiny MCE, which is a VisiVig editor, what you see, what you get. So you will get the ability to simply have the bold applications, italics, underlines, all that you see in a fancy editor. You're going to see all of that. And in the second part, we're going to take a lead into understanding the React forms. Now, React forms can be directly handled. There is nothing wrong in that, but there is a industry standard way of handling the things. So I'll show you what is being used in majority of the production grade application. At first, it might look a little bit too much, but as you move into the production grade application or when you will be working in the job, you'll notice that most of the people actually prefer these kinds of form instead of just handling every state manually. Again, there is nothing wrong in handling the state manually, but this is the industry standard. So I thought that let's introduce that. It might be a little bit challenging at first, but this is the good way and good approach to get started. So that's what we'll be doing. So let me just walk you through. Let me first share the screen. So this is the editor that we'll be using. This is TinyMCE. This comes up in both free plans and the plate plans. Of course, we'll be using the free ones, and that's what we'll be going through. And then we'll be also going through with the controllers as well. So we'll be going through with that. So let me walk you through. So this is the TinyMCE, which is an editor. It, of course, can take a parameter of API key, which will not be giving it to one. We'll be using the free version. A couple of parameters that are important to pass on are like what's init value, initialized value. Then we can provide what should be the init. Then we have to provide the plugin that what all do you want to support in your editor, like auto links, list, visual blocks, code, full screen, what mode you want to give, and in the toolbar, what options you want to give. Undo, redo, all of these. So these are the things. And in the content body, we'll be actually using as it is. So what are all options available? So this is the editor, which we'll be using by installing after this TinyMCE as an editor. That's the first step. And after that, we'll also have a look onto this one, which is a React hook form. Pretty interesting library to work on with this one. All the things are available in their docs, that what all things you're available, set errors, controllers, forms. In this couple of months, we are going to use, and I'll walk you through how to read the docs and how to work with them. This could be a little bit challenging, and I think this requires a standalone crash course or a video in itself, which I'll try to upload on my channel. If you haven't yet subscribed, go ahead and hit that subscribe. I'll, if I'll get enough requests, I'll definitely do a proper crash course on the React hook forms as well. Pretty interesting subject, and I love this quite a lot. So we'll be using that. All right, so now let's go one by one and try to install them first. So installation is pretty straightforward. There is nothing too much going on with that. Let me just go onto VS Code. First, let's go into TinyMCE. So installation, React, let's go there. And the installation that we need is this one, which is at the rate TinyMC, TinyMC React. Let's go back up here and have the installation for this one. So npm install, and this one is for the editor part. All right, and we also need the React form as well. So let's go back and let's go get started. And here is a React hook form. So let's copy this and install this one as well. So I think these are the two which we are going to need as of now. I think that's enough. Let's go ahead and get one by one up and running with this one. All right, so first, let's go ahead and create, we'll create one by one. Let's start with the simple nav bar, which we are going to have. So we'll be having a logout button and a navigation bar. Then we'll work on the real time editor. And then we'll be working on the post format as well, which is going to utilize all the hooks and all of that. So let's go ahead and start one by one. So first of all, let's create a new folder inside the component. We are going to call this one as simply nav bar or let's call this one as header. So inside the header, we'll be having two files. The first one is going to be header.jsx, header.jsx. And another one is going to be a standalone component itself which is going to be logout. Logout or logout button.jsx. The reason for creating a logout button itself because it is going to make a query and we'll be using some services from Auth service and all of that. That's why we are just keeping it separate one here. All right, so what do we need? We need dispatch. So we're going to say, I need use dispatch. No, no suggestions. All right. I use dispatch. The dispatch is going to come up from React Redux. There we go. After that, we need the Auth service as well. Auth service. And that's going to come up from couple directories back inside the app, right? Inside this auth.js. Yep, that's the one. And we're going to need a couple of services from store as well. So we need to import log, logout. And this logout will come up from, we need to go one directory back and inside the store. And from that, we are going to need auth slice.js. All right, so now we have the logout. The reason why we are having this logout functionality in itself alone, so that we can make a request using the slice and that request can just clear out everything. That's what we designed it. So in case you forgot that, let me jog the memory again. So this is what we have imported after exporting this one. So once we actually hit this one, it will create the status as false and we can have a simply user data as null. That's what the goal is. Okay. First of all, let's create a dispatch. Otherwise we won't be able to access it. We won't be able to send a message that we are using this method. So const dispatch and that will be designed or created using use dispatch hook. There we go. Now we have access to this one. Let's create a logout handler. Anybody who clicks on this button, we will be handling it with this one. Logout handler, handler. And using this, a simple method, let's fire this up. And we'll be saying, hey auth service, give us a method which is a logout. And once we are having this logout method being called, which is in our service, let's use a promise and we'll simply get a then. If then happens, then we are going to successfully cater that one. And we're going to then dispatch an event which is going to be a logout event. There we go. And since this is a method, let's run this and that's it. In case you wish, you can handle the catch part as well, but I don't think it's required in this case, but that's it. That's how we are going to logout. Notice here, if I'm able to successfully handle the logout, then only I'm dispatching an event of logout. And that's what we have designed in our store as well that as soon as this is being called up, are we going to set the status as null and the user data to set status as to false and user data as to null. Okay. Time to design a button. There is nothing much that we are doing is, let's go ahead and return a button. There we go. Inside the button, we just say logout. And rest of the stuff is pretty obvious. Only one thing is important that is on click. On click and inside this one, we just simply say logout handler. Please don't say it like this. We don't want to execute it. We just want to pass a reference. And then our basic class names. Again, I'll be just giving you these class names. If you want to design your button your own way, be my guest, please do that. All right. So now you understand the logic behind it, that how the logout button is being designed. Let's go into the header.jsx because that is the file which will be having the entire navigation items. Most of them are just tailwinds and loops, nothing much, but there are some reactive part of it. So I'll just say RFCE. So we have a header. We'll be requiring a couple of import statements in this one as well. First of all, let's import container. In fact, what we can do is, since we need a couple of more things from this component itself, we can design an index file and have an import and export statement from there as well. But in this case, let's go ahead and do container separately. And we'll be bringing them from .slash. Oh, we need to go inside one directory. Yeah, .slash container. Oh, we need to go one directory back, my bad. One directory back, container. And inside that we have this container.jsx. We don't need that. And we also need a logo and we don't have anything inside logo, but still we'll get this one. So this one is from one directory back and we'll just say logo. Okay, two of the components that are required for navigation bar are here. Since we'll be redirecting a lot of stuff, link is required. Of course, that comes from React Router DOM. And what else? We need a logout button. That's why we designed it. Logout button and that comes from a logout button and we'll be forcing people to use navigate here and there. So let's go ahead and do use that as well. Use navigate, that comes from a React Router DOM. Okay, how do we design this header? That's the important part. Again, this is going to be based on something. First of all, we need auth status, whether user is logged in or not, because based on that, we are going to display the sign in or the logout button. So why not we create a simple const which says auth status. And this status is going to come from the use selector. Do we have use selectors? Have we imported that? So we need use selector. Import, use selector, there we go. And once we have this, now I can use the use selector and can make a query. Give me the state. And I'll just ask you that state has this auth and has got a status. Status. This will fulfill a value of true and false. And also in the meanwhile, let's also use the use navigate as well, nothing much. Navigate, and that will be coming from use navigate hook. There we go. Okay, now we need to design a simple constant of navigation items. That is better way. Once we have these navigation items as an array, we can loop through them and can simply generate our HTML from that. Let's call this one as nav items. That's going to be a basic array and we will have multiple objects into them. If you wish more, you can have more. I'll have something like this. Name is going to be home. Not only that, I'll also provide a slug for that. And that slug is going to be where you are. So slash for that. And we'll also provide an active status for that. And active is going to be true in this case. Okay, this active status right now looks true, but it's going to be based on the auth status. So what's the auth status and all of that? So let me show you what do I mean by that. This will be getting clear here. So let's just say we have a name and this time we have a login. Login, the slug is going to be, I can actually copy this. I can copy the slug, which could be slash login. Come on, there we go. Now, interesting part, is it active or not? That is going to be based on not auth status. So what do I mean by not auth status? So not auth status simply means, if your login, your authentication status is true, that is you're logged in, so the active status will automatically become false. So in that case, I don't want to display this login to you. That's the whole idea. That's the whole game of this situation. Similarly, we'll be having a signup exactly same. So let's go ahead, copy and paste, put up a comma. We simply want to say this one as signup. Signup, we'll copy and paste this. So smaller signup, same. Auth status will be not. That means if your authentication is true, I don't want to display this. So that means active will automatically become false. Similar to this, we have a couple of more pages for that. Let's put up a comma and we'll have all posts. The slug is going to be all dash posts. A routing will take care of that, but this time I want this auth status to be true. If your auth status is true, that means you are logged in, then only I want to show you this all post. So otherwise you'll just see the login and log out. So that's it. Add post is similar one such thing. So you are able to see all post and you are able to see add post. That's how we are designing our navigation bar. This one is going to be simply add post. This one is going to be add post, auth status is true. Okay, so now I hope you understand that why and how we are designing this nav items. All we have to do in this one is now simply have couple of design items just like there. And then we can simply loop through the values. The looping part is important. The rest of this is fancy design, nothing more than that. Let's go ahead and have a header. This header will have a class name, a simple classes, padding on yaxis is three. Or when we designed it, we simply had a shadow. A shadow will just be like that. And we have a background of gray, 500 is good enough. Okay, inside this header, we have this container as a component. So this wraps up automatically and gives you the space. And then we have a couple of nav items. So let's just have a nav. And this nav is going to have class again, couple of classes we have, we'll be getting a flex. The first item inside the nav is going to be a simple div which will be for logo, nothing more. And for this, we will be having a class name, margin on right side will be four. While designing this, this is what we found it to be best. Let's wrap the logo inside the link. So we'll be having a link just like this. Where does it go to nowhere? So we'll be saying it like that slash. And inside the link, let's place the logo. Right now we don't have any image for the logo, but whenever we'll be having, we'll be happy with that. Okay, once we have this div item, that means the logo is all done. And then we'll be having a UL after this one, so unordered lists. And it will have a couple of class names. And we'll be having a flex and margin left of auto, so that everything is pushed onto the very right side. Okay, this is where the things get interesting. And now we need to start our JavaScript because we want to loop through the values. So looping is not that much difficult in this case. I have these nav items, I can use any loop. My favorite one is map. And I'll go like this. Then again, we need a couple of values into this one. We have items. So each object inside the array, we are calling it as an item. And based on this item, we'll be looping through. Okay, let's go ahead and work on with this one. So now we can directly go ahead and start this, but I don't want to directly start this. I want to display the element only if it's property active is there. So what can I do? I can evaluate this. If item is active, there will be two cases. Item will be active or might not be active. If the item is active, let's do something. Otherwise we'll do something. Okay, that's interesting. So again, this might give you a little bit of the ternary operation. Yeah, that is this. And in the other case, we are simply going to refer it as null. We don't want to do anything. You can just generate an empty component as well. That's fine too. In this place, we'll just remove this and display a component. So let's place a curly braces here. Now, in this curly brace, how do we want to display the item? Obviously we want to, in an unordered list, I want to display a list item. So I'll just go ahead and grab a li list item. Since the list item is the one that is getting repeated, it's good that we pass on the key here. Item.name is the unique value that we will be having. Okay, inside this list item, we will be having a button which can actually get these clicks. So we'll be having a button just like this. And in each of the button, we'll be having an on click which is going to just navigate the value. So I'll just say on click. There we go. What do I want to happen when the click is there? First of all, a callback because I want to pass a value just like this. And then I will use the navigate. So navigate, where do we want to navigate? We have already taken care of that by having the slug value. So navigate the user to a place where it is item.slug. Item.slug. So this is the place where you will be navigating. And after that is just a class name to make it look decently beautiful. I have these class names with me. So I'll just copy and paste this one. I hope now you understand. It's not really difficult. It looks difficult, but it is not. The button doesn't have any name right now. So let's go ahead and give it really simple item.name. That's it. So now that entire thing is there and we are happy with that. But you might have noticed that we are not actually giving any logout. We have designed the logout button, but we are not giving this logout to the user. We have only worked with this unordered list, which is nice. Now what I want to do is after this, all the allies and everything is being generated. Now I want to have this one here. I think this is where I start my JavaScript. I want to have another ally, but this ally is going to be conditionally rendered. Only show the logout button to the people who are logged in. So that means I can get the access of that by a simple variable that I've designed auth status. If the auth status is true, then only do it. So I can use ternary operator. If it is true, do something. Otherwise go ahead and do show null. That is also a good approach. Or I can use another approach with the M% sign. If it is true, then only we are going to render this just like this. And we can say, let's grab an ally. Yeah, there we go. And inside this ally, let's load a simple logout component, just like that. So I hope you can see it was a little bit lengthy, but it's not really difficult. That's how we simply have our headers and navigation bar. Don't worry, we will be assembling that in the app.js. So if you see this app.jsx, just about the outlet, we will have the headers and we'll have the footers as well. But right now this is good enough. It has to understand that how things are going. Already it's too much, but that's it. So that's our part one, the phase one, where we have handled the authentication part and the logins and whatnot. Now let's move on to something which is TinyMCE. This could be a little bit difficult at first, but it's not, it's really, really easy. The first thing is that the TinyMCE is a component which is not the usual form, it's a third party form. And we're already using a third party form, which is the React hook form. So React hook form also knows that, hey, these kinds of things are really, really common. And if you look at their docs, you'll see that there is a hook that they give you, which is use controller. If you look at this, it says, React hook form embrace uncontrolled components and native input. However, it is hard to avoid working with external controlled component. And we are into this exact same situation. React select is one of the selection library which helps you to get selection based components. And D, very, very popular. So we are into one such situation. In that case, we can actually wrap everything using this component controller. And this controller gives back the control of these third party forms to the React hook form. That's exactly what we want. So let's go ahead and see that how we are going to handle that. So let's close the header. And let's create a new file into this one. And this time we'll call this one as realtime editor. So RTE dot JSX. Okay, let's go ahead and do it one by one. React functional component export just like that. Okay, this is basic. Okay, now we need just the two things. First is our controller. Controller. And this controller will come up from React hook form. And another one is we need to import editor. This is interesting. Editor. And that editor is going to come up from the tiny library that we have installed. So tiny mce react. Okay, so how does this one work? Component we know that we can wrap it around. But what's interesting is this tiny MC. So what you'll notice is there is nothing too much to be worried about this. All you have to do is worry about where you're going to load your editor and pass on these initial values. That's all it takes. So let me walk you through. And once you see this happening up here, you'll be pretty much comfortable. So whenever anybody is using an RTE, he'll be providing couple of values. So what is the name of this one? Name is good enough. We'll also get some of the control from the user. If it doesn't provide, we can also pass on default ones. It actually uses default one. And then we'll also say the label. Oops, label just like that. And we'll also have the default values. Default value. I'll show you what these default values and everything are. Okay, now time to get into this one. So what we're going to do is, first of all, our label logic will remain as it is. Exactly same, just like we have used in the past as well. So let's create a div and have couple of class name. And this one is going to be widthful. That's it. Now let's first display the label. Again, start your JavaScript like this. If the label is given by the user, that's great. Then only we are going to display it. And if the label is present, then we can just simply go ahead and use a label just like that. Okay, this label will have couple of classes, mainly inline block. There we go. And margin bottom of one and padding on the left side of one. That's it. Okay, what is the value that we want to add into this one? Simply label. There we go. So label part is done. We know that part. We have done that, handled this one. Now comes up is the wrapper. First of all, the wrapper. So controller, there we go. We can make it selfclosing. No bad, nothing bad. Nothing bad into this one. Since it doesn't take any values or something, we can just go ahead and make it a selfclosing. Now this controller takes couple of values. If you wish to read more about it, you can read in the docs. That's why we passed it up. Name, the unique name of your input. That's why we said it name. It also gives you the control here. The control object is from the invoking user use form. So again, the exact same thing I mentioned that control is to make sure that if parent is invoking any child form, that child can again pass on some data back to it. Then we have the render, which is what is that you want to render into this one? These values and default values. You want to study more. You can just go ahead and do this. These are the required ones. Nothing else you have to worry. Okay, let's do them one by one. So we'll say the name, the first prop. Now I will inject a JavaScript here that I'll just keep it as name. If the name is there, otherwise we'll just say content. Okay, if somebody passes me this name to make it this form reusable, that's great. Otherwise we'll call it as content. So control, this is something that you have to pass on when you actually design a form like that. Notice here, this control is something that is a control object from the invoking use form. Right now there is nothing which is using the hook use form, but if there is one, this is where it, or this is how it takes the control of it. Then next one is the render, render. This render is interesting one because it's actually a callback. So just goes like this. And I don't want to use the return keyword. So I'll just go like this. Inside this render itself, you need to provide what fields you are interested in working with. So first of all, I'll say field just like that. And the field that we are interested in working is on change. Okay, a little bit weird as of now, but don't worry. It will be all good in just a second. Now this is the field that what do you want to control like on change because we'll be having a state in the state we'll be staring. So this all will come from who, somebody who will invoke the use hook form. Right now it's not there. So where we'll be designing the major form, that's where this will come in, okay? Now coming back in here, here I want to render the editor. That's the one. And it can be selfclosing as well. That's it. Now the editor right now, it looks like just one element, but it requires more fields and more properties. That's what we are going to provide to it. Otherwise, this is the only code. So notice here we are controlling the third party forms just using the controller with a couple of fields only. That's it. You'll understand the importance of it as we create and we'll be using this use forms and all of that. So we will be very soon using them as well. Rest is all good. So this part is all done. Now we can go back to the tiny MCE and provide all these values. So all these values, like you have some initial values, provide that. If you have init, just provide that. If you have plugins, provide that. Toolbar, provide that. Content style, provide that. Most of them is exactly copy paste from the documentation itself. That's exactly what I'll be doing, but let me show you that. First of all, the prop initial value. Initial value, I don't have anything. So I'll just pass on the default value. Whoever is using, just pass on that as it is. Then we have this init. This init, we need to provide the object that what do you want all to have? Like for example, you have option of branding as false. I don't want to show the branding, but it still shows it because it's in the free version. Otherwise, if you pay to them, then it's just like that. And then you can also provide a couple of more parameters, like height and the menu bar, just like that. Then comes up is the plugin. So go ahead and grab as it is, whatever the plugin values are. Again, it's up to you how you grab them. Do you want to use all of them? Do you want to not use all of them? Totally up to you, no force there. I'm just gonna be using all as it is. So in the plugin, I'm saying, give me image plugin, list plugin, everything. So that's how you do that. Next up is simply the toolbar. So just go ahead and grab everything that's there in the toolbar. And in fact, grab everything that's inside the content body as well. Totally up to you, totally up to you that how you want to have it. I just want to have everything of it. So I'll just grab this one and let's grab everything from here. And we'll just paste this. And this all thing, can actually, oops, why is it not moving? Okay, so toolbar looks good. Probably there's something inside the copy paste that I've missed. Let me try that one more time. Usually it's not that bad. Oh, it's bad. Anyways. Yep, toolbar. Now the value is too big, it's just a one long string. I don't know how they do it. Anyways, and then after that, we have ending trailing comma and we have this one. Come on, there's my cursor. Ooh, difficult. Okay, let's move this one. Okay, decently adjustable. I need to change the setting of my VS code a little bit to accomplish that. Okay, but anyways, it's good enough. And the last thing that you want to do is once you are outside of this one, then we'll be having an on editor change. And this is where we just say that I will pass on an on change so that anybody can control this. Okay, this is good. And I think that is all what we want. So a little bit difficult in the first run that hey, why are we doing this, all of this, why is it all of that? But remember, this is a bit of an advanced part of the tutorial. I think it helps you understand a lot here. Okay, now the preparation is done. Now we'll be building one of the most important form in itself, which is the post form. So right click and create a new folder. And we'll be calling this one as post dash form. This is our most important form because it uses almost everything that we have built so far. Post form dot JSX. All right. A lot of logic is also involved in this one, but it's good, it's good. You'll learn a lot of things in this one, have patience, take a break if you wish, but I'll continue here. So first of all, we'll be needing react and we'll also need some of the, you can actually use callback to make it a little bit more optimized. We'll be needing now the hook that we have been waiting to use, which is use form. No suggestion? Okay, no worries. And that will come up from react hook form. This is the most invocation part and important part. We need all the things that we have designed so far. So we'll be needing a button and the button that we have designed, one directory back and it's actually button. We need to go one directory back. Oh my goodness. I actually accidentally made this form outside of the component. It should be inside in here. Let's drag and drop into the components. Yes, please move that. Post form, post form, just like that. Hopefully now it should be good. One directory back. Yep, that's my button. Okay, what else? Input. Import. Input. From. Input. And we need RTE as well. And that's going to come up from RTE. And select also. And that's going to also come from, oh my bad, one directory back and RTE. This one also, oh sorry, select. My bad. Select. This one also, one directory back, RTE. One directory back, input. And this one is okay. Okay, so these are our components that we'll be using. We also need the service because this one is a form. It will be submitting some data. So we need the app right service here as well. Let's use app right. Service. And that service is going to come from a lot of back directories. Yeah, app right. And inside that we need a config. I think that will do the job. We'll be navigating and selecting some of the information. Like we need, we need Redux. So for that we'll be saying use selector. And the selector is going to come up from the React Redux. And we need navigation as well. Import. Why navigation? You might be thinking. Once the form is actually submitted, we want to redirect user back on the homepage. That is why we need that. Use navigate. And that's going to come up from React Router DOM. All right. Quite a lot of import that we have done here. But I think that's good. We didn't actually start it with the template. We should have done that. But anyways, I'll just write that export default. And let's call this one as function post form. And there we go. Should be good. Now, interesting part, as soon as we have form, we might receive a post in that. So we are actually reusing the form in this case. So if somebody gives us the post, we'll use the same form in which we want to edit our post. And if somebody doesn't give me this post, that's okay, we'll handle it accordingly and we'll use it as for creating a new post. That's how we are going to use. Now, most important thing, first of all, we need to register that what all values and everything that you are going to use in the use form. We have this use form now. This is a very, very powerful hook. Instead of managing each of your input into its own individual state, it could be nightmare. Maybe you have 20 input forms and you want to maintain each one in the state. This could be challenging in this one. So that's why we use something like this. Give all of your values and then simply go ahead and use a hook, which is use form. This use form can have all the values. So in here, we can provide all these values like what are my default values. So let's go ahead and have, let's provide these default values as an object. Let's just say we have a default value for the title. Oops, not like that. I'll show you where the title is. So I have a default value for title. If you give me post, then optionally we'll extract it from the post title. If it is not there, then we'll just say it's empty. Similar to this, we'll just go like this. Similarly, we have a slug. We'll say this one and you'll be very fascinated about how the slug's values are being handled in this one. We'll say optionally extract the slug from it. If it is not there, then just go ahead and provide an empty one. Similar to this, we'll be having a content. If the content is there, let's optionally extract that. Forgot a dot. Otherwise, let's go ahead and keep it empty as well. And we have also have a status as well. So status, if post is provided, then optionally unwrap that as a status. If it is not there, then just use active because that's the default state of this one. Okay, so we have provided the default form, but what all the input fields that you are creating are going to be managed up here. So first of all, we'll have a register. I'll walk you through what these registers and everything's are. Another one is handle a submit. Sub submit. This will obviously be submit handler. We'll be writing our code for this one. There's interesting one which is watch. I'll walk you through. This is the most important thing and very interesting thing in the use forms as well. We'll be also having a set value and we'll also have a control. I'll walk you through all of this, don't worry. And we'll have get values. Okay, quite a lot of stuff that we have. Now let's learn and understand them one by one how these things are being managed or being done. Okay, so this is use hook form. Okay, this is where it ends. All right, let's go one by one how things are going to unwrap. First, let's focus on writing the logic part and then one by one we'll be focusing on building the UI part of the app as well. Okay, so first of all, let's grab navigate from the hook, use navigate, just like that. Right now it does nothing, but we have an option. And then we have user data. How we are going to grab the user data, that's exactly why we have use selector. Selector will give me a state just like that. And we can just extract the data by saying state dot auth dot user data. All right, so my user data is now in the user data field. There are a couple of things I need. For example, I need to have a submit action as well. So people will be submitting the form. We'll create an async form for that. And it will give us the data. Right now we are not doing anything in that. We will come back onto this one and figure it out. The most important part is the slug. So the way in case you saw the application when I was showing you the demo, the slug is a very interesting thing. We actually are transforming the title into the slug. So everything in the title is being converted into the lowercase, we are trimming the spaces and spaces are being converted into dashes, rest everything are ignored. So the way how I did it is, let me show you that. It's actually just a method slug transform. And we'll be using a use callback to optimize it. Otherwise it will be keep on wasting the resource. Either if in case you don't want to use the use callback, that's totally fine, by the way. Okay, so I did a, took a help of a little bit of the chat GPT, I'll show you where I took that. First of all, the way how we actually use that, you cannot directly actually go ahead and monitor or get any values from it. So we have to actually grab a value out of it. So notice here, I'll be controlling these set values and get values. I'll walk you through that as well in just a minute. We'll be holding that part. All right, so we're designing this slug transform. And what's this doing is anybody can call this method. The only thing is you have to pass me a value. What is this value? It's nothing, it's just the value in the current form that you're using, just pass me on that and I'll extract the value. So I'll walk you through, don't worry, in a minute, you'll understand everything of it. I'll say if the value is there and the type of value we need is a specific one, if the type of value is string, then only we can proceed. If that is the case, if we are having that, then we can simply go ahead and return a value out of it. So I'll just move it to the next line and then I'll come back and put it into this one later on. So what we can do is we can return a value and we can provide a couple of methods on this one. So this value can have a method of .trim. First of all, let's do that. Once we are done with that, let's convert everything to lowercase. So we'll use to lowercase, all right. And then we'll be using a simple regex to replace some of the stuff. And this is the regex part where I took a help of a little bit of chat GPT. Otherwise I used to use a website regexr, but this time I took a help from a chat GPT. So we'll say replace, there we go. And in this replace, I'll provide what value I'm looking up for, that's the regex value. And the second parameter is what to replace with. And I'll just use the dash. So what to replace with, this is something that I grabbed actually directly for chat GPT. Put up a prompt that I want a value that converts everything, spaces and everything that selects everything. So I'm just saying that, hey, this is a negate by the way. Don't select lowercase, uppercase, any digits, or any spaces, rest everything are converted into this one. And then optionally what you can do in case, although it does the job, but I found in some of the edge cases it was still bothering me. So I didn't found out any particular solution as of now. So I just went into replace. And I wrote another simple query, which is a basic regex by the way. It simply goes ahead and say, a little bit itchy throat. So it simply goes ahead and say that, hey, I want to select all the spaces. So slash S is for the spaces. And I want to look at for the globally. And then just want to just double short B, it converted. Although in most cases I've found that this alone works nicely, but in some cases this was problematic. So I just wanted to make sure that at the final end, I'm just replacing all the spaces with the dash and I'm ignoring all these digits and lowercase A to Z, uppercase A to Z and slashes. I'm not really that great or good into these regex. I accept that, but hey, this works fine. So there we go. So we are returning the value and that's it. That's your slug transform. That is all it takes. Now we also need to pass on a dependency array onto this one. We don't have any dependency, but optimize this as much as possible. Okay, so this is my slug transform that we have. Okay, now you might be wondering that, hey, that's great, we have slug transform, but we want it to run as soon as somebody types something into the title form. How can I do that? That's an interesting one actually. You cannot do that directly if you are using any of the React or you have to monitor a lot of things. But if you look at this one, there is a component being given to you that is watch. And what it says is this method will watch specified inputs and return their values. So not only it can watch my input in the name field, it can also return me that value. So I can use this. And where can I use this or how can I use this? Really, really simple. Let me walk you through with that as well. I can use actually it inside the use effect hook. Oh, that's interesting. So I'll just say react dot use effect. There we go. And this is our callback. And looks like just use a callback like this and we need a dependency array. Okay, first of all, let's worry about the dependency array. On what fields this should be dependent. First of all, we'll obviously use watch, that's the one. Also keep on watching onto the slug transform. If it changes a little bit, also I want to render, rerender the things. And also the set value. Now you might be wondering, what are these set values? Can you explain that a little bit? Because you're using this set values, get values and quite a number of things. These are actually coming up from the use form itself. When we're using use form, you don't need to create the states. That is the one advantage. I'll show you how these are useful when we'll be designing the input field itself, then it will get much more clear. But the whole idea is you don't want to create thousand different states or variables. We can just use it directly like that. I'll show you that, don't you worry? Okay, so the dependency array part is done. Now let's go into the use effect, this one. Now here's the interesting thing. How do we use this watch? Really simple. You just simply go ahead and use a watch just like this. This watch gives you a callback and you can provide the value. By the way, these value are all the values that you can have in the form itself. These are the values. And out of that, I'm looking up for one value, which is name. So watch out, out of all these values, the fields that you have, watch out the name for me. And once you're here, let's go ahead and have a callback. Just like this. And there we go. Now, what do you want to do? So if the name is title, I haven't created this yet, but I'll do that very soon. If the name of the object, because as you can see, the values are having so many properties, title, slug, and all of these ones. If the value is name, that means the name of the post itself is the title, then only we want to run it. So what do you want to do? In that case, I want to use a set value. So again, set value can be used not just for setting one value, but in any field itself. So set value is here. Now in the set value, what do I want to use? Set value in what field? You have provided me number of fields here. I haven't given them yet, but there will be many. As you can just have input fields, all of them are governed by the use form. I just want to set one field, which is my slug. So I'll provide you slug like this. There we go. How do you want to set it? I want to set it by using the slug transform method. I'll provide you the value dot title. Okay, once I give you the title, that means that will act as a value for you. And you can just use that value, then run all of this operation. And since you returned me that, I'll just use that to set the value. A couple of more fields and parameters you want to provide in here is should validate because there are ways to provide a validation inside the use form using the joey and other libraries. We are not doing that as of now. It's already too much. We'll just use should validate as true. So all our basic validations will kick in. We don't want to go too much in depth of that. All right, why is it bothering? Title may not exist. Yeah, it doesn't exist as of now, but it will vary soon in the future. Quite a lot of intense work that we have done. And by the way, we haven't worked on submit yet. We'll do that. But first, I think now it's time to get more clarity because these things will keep on adding to the confusion. So let me just go ahead and render, provide a render here so that you can understand that. All right, so we'll just say, okay, let's minimize this. Post form, looks good. Here we should be returning the render element. Return, what do you want to return? I want to simply return a form. Okay, this form is not going to have any action, but rather on submit. What do you want to do? I want to use handle submit in that case. Okay, handle submit should not be used directly like this, because if you're using a use form, the handle submit should be used from the use form. This is the handle submit, but actually it doesn't magically knows what to do with the data. So this is going to be the method which is actually going to submit the data. The way how you do it is a little bit weird, but this is a method, and in this you pass on another method. So yeah, higher order functions, JavaScript at its peak. Yeah, this is how the React hook form, but don't worry if you'll watch these videos couple of times, you will be used to with the React hook forms. Very powerful, very useful. Okay, let's go back and use some of the class names to make it beautiful. Flex, and this one is going to be flex wrap. All right. Okay, next up is the most interesting part after the div of course. So we'll have a div, we'll have a class name, nothing much, we want to use the width of two by three, and we'll be using padding on xaxis of two, that's it. Okay, now comes the interesting part is we'll be designing our first input. Notice here, I'm using the input field that I designed earlier, that's it. But how we are controlling this input field, that is the most important part. First of all, let's pass on a label which we designed as a prop into this input. We'll be calling this one as simple title. All right. Placeholder, why are no suggestions coming in? Oh, these are props, my bad. Placeholder, oh, suggestions are not coming because this is not a regular HTML form, this is my custom component, that's why suggestions are not coming in. And we'll say title, we will be having a class name of margin bottom of four, there we go. Okay, now comes up the part where we actually use the use forms. Let me show you that, let me take you onto the website. So this is the register and the register and whatnot, use form, let's go ahead and use that. So if there is any example of the forms that would help us to understand this so much better. Okay, get started, and here it is. Okay, so how, oh, this is the one that I wanted to show you. So whenever you're using any input, this is the one which we discussed, handle, submit, and on submit, exactly like that. But when you're actually using any input field, this is the way how you actually monitor or govern that. Notice here, register your input into hooks, so we have to explicitly register these, each input inside the hooks so that they are available as values by invoking the register function. So we have to actually use this JavaScript, then have to extract or we can say destructure the register and then provide that, hey, this is the example that I'm using. So yeah, this is the one. Let me go back onto the code part. So this is where we start our JavaScript. We simply say register, there we go. This register is a method, that's how we register it. We are gonna call this one as title. Now it is registered as a title and we can provide more fields like required. There's a lot more that you can do, but we'll just go with the required as true. This is the part. Now notice here, now this input field is registered as title. So I'll go back and notice here when I say value and the name is title because every input field has a name and I gave it a name of title. Now, this will be monitored here. So wherever you pass on the value inside this into this use effect, it will keep on watching the values. If the name is a title, which it is, then only the set value will here. And again, watch will be responsible for continuously watching or monitoring this input field. Very interesting. So much difficult to do with the core, but this is much, much easier. Okay, now let's have another input field, which is slug, interesting one. Input, selfclosing, just like that. Okay, let's do one by one. First of all, label. That label is going to be slug and the space colon, something like that. And then we'll be having placeholder. Placeholder is going to be slug as well. And then we have class names, nothing much. Margin bottom of four, good enough. Okay, now let's come up onto the part where we registered it into the use form. How do we do that? We first of all, start our JavaScript, register, just like that, inside the register, we name it as slug, okay? And what should happen? How this slug should actually work? That automatically is being taken care by the watch itself. So I just go ahead and say this is required as true. All right, so this should be there. Okay, one more thing that we can do here is that we can actually have this input as slug transform as well. So let me just go ahead and work with that. So on input, what do we want to do? That's interesting one. Okay, let's start our JavaScript first. We will capture an event onto this one. And then we'll just go like this, curly braces, just like that. So I'll just go ahead and use set values because just because you have used the slug, remember, this slug is just returning the value. It's not doing anything, it just says set values. It's just returning everything to set values. But there is nothing we have said that what should be the value inside it? This is registering, giving the values, but we haven't said how to take the values back into this form and fill it up. That's what we are taking care of right now. So set value. Now we'll say that, hey, I'll set the value and my field name is slug, okay? And how do I get these values? So use the slug transform here. And then we'll be, in order to use the slug transform, we have to provide a value, okay? What we'll do is we'll say e.current target.value. And that's it. And we'll simply say should validate, and we'll be saying true. Let me walk you through one more time. Okay, notice here, right now we are not actually exporting the values. This is where we have done already this part. But now this input field is going to set some values into it and the setting of the value is going to happen via this on input only. That's the case. In the on input, we are saying that, hey, as soon as some inputs are being put into this input field, use the set value, which is given to us as a hook inside this hook, just a second. And here it is. So this was given to us. So notice here, we are not using thousands of set values or set field, set input field, set slug, get slug. No, we just use one thing, which is set value, and we use get values. To get any values out of any field, we just provide the name of that. To set any value in any of these fields, we just use one hook, which is set value. That is the advantage. Just two of these methods, set values, get values. And you can actually set and get values from pretty much any field at all. That is what makes me like, wow, this is too much how we are actually using this. All right. So now we have the set values. We actually use the set values here as well to provide that. But here we are actually using the set values on this particular input field. All right, quite an interesting one. Now let's use another one, which is our RTE. So that is easy one. We have already worked onto this one. So RTE could be selfclosing, just like that. Interesting. Oh, we need to get out of it. RTE, selfclosing, just like that. Pass on a couple of values. First of all, label. The label is going to be content, colon, just like that. We need to provide a name to this one. And the name is going to be just like that. And we'll say content. And then we have to provide a control. And we'll say control, just like that. Control, again, is given to us from here. Notice here, we got the control. This is exactly specifically designed to take control of the input fields, which are outside or third party inputs. And then we simply have some of the default values. If you have, give them. But right now, the default value is only for one thing, which is get values. Remember, I told you, get values. So if you want to get values from any field, just like that, let's call this one as content. Now imagine, if you have to deal up with these many forms, how many states you would be designing? So easy. OK, this value is all done. So now we'll close this div, which is the first portion of it. Now we need to go in the one third part of this one. And we'll go with the class name on the right part of it. So we'll just say 1 by 3. And we'll say, fix dash 2. All right. And in here, we are having two fields. One is the input field for the images. And another one is simply the field, which is just saying, is it active? Is it inactive? Something like that. So that's basic. OK, let's start with the input. And inside the input, it could be selfclosing. OK, label, featured image. And the type is going to be changed to file, file selector. And the class name is going to be margin bottom dash 4. Class name margin bottom dash 4. All right, what do you want to accept? That's the idea. We can pass on as many props as we want. So what do we want to accept? We want to accept image, which is PNG. We also want to image, which is JPGR. We also want to accept image, which is JPG. If you have more, you can just provide more of these acceptance fields. Basic HTML, nothing more in there. Then we have to register this field as well. So let's go ahead and do that, dot dot dot register. And this field will be known as image in the registration field. Again, basic required is true. Required, that's going to be true. I hope you notice the difference in here as well. All the fields are easily being registered in here. So this is just register. This is also just register. Only difference is when we don't have a control on that. Then we pass on the control to get the values from it automatically. Otherwise, the rest of the fields are just very straightforward. Register, register, just like that. OK, we can actually have it as required as true. But we can just simply say, if the post is there, then we don't want it. So if post is no post, just like that. OK, once we are done with this, then depends on the post, whether we are going to actually get a file preview or not, just like that. So let's also try that. So we'll say, if the post is there, then only we'll get a file preview. So we'll just go like that. And we'll say, inside this div, we'll have a class name. We'll say width is going to be full inside in here. And margin bottom is going to be 4. And inside this div, we'll be having an image. The source of the image, that is where things get interesting. We'll be using app write service, get file preview. And pass on this post dot featured image. Let's pass on that. If that will come up, if post is there, we will obviously get the featured image. And in the alt, let's use the title. Post dot title. We should be, technically, we don't need to use a question mark here because we're already checking it up here. So that is good enough. I think that's good. Let's add a class name here. Let's use a class name. And that should be rounded. Dash l g. There we go. All right. So this is the case when the post and featured image is there. Now we need to have to work with one more thing. We need to select the options for the user as well. Quite a lot. But this is what happens when you design complex applications. We have a select field. We can use it as selfclosing. All right. Move it up here. Let's provide the options. That's the first parameter we have to pass on. The options is going to be an array. So let's pass on an array. The first value is active. The second value is inactive. That's it. That's your option. The label is going to be status. And the class name. We just need some margin from bottom in all of these cases. And last but not the least is register it into the React form, React hook form, dot dot dot, register. And we want to register it with the status. Register it. And now let's provide. This is very optional. Required is going to be true. There we go. That's it. So select form is required. Now let's go ahead and use a button to submit it. OK. So inside the div, let's keep it inside the div itself, we'll be using a button. We'll be using our own button. So there we go. OK. This is the button that we have. And inside this button, we can have childrens. That's how we designed it. So if the post is there, then we'll call this button as update. If the post is not there, then we'll call it one as create or submit, whatever you like. All right. So this is the button. And inside the button, we can pass on more values. Like type of the button is going to be submit. And what else? Background color. BG color. These are the properties which we have given. So let's also use JavaScript here. If the post is there, then we'll be using BG green. So we'll say BG dash green suggestions, please. No suggestions. BG dash green dash 500. Otherwise, we'll just say undefined. All right. We can use another color as well, by the way. And one more thing we can just provide in here is class name with dash full. All right. So this is the form that we have. Again, we have studied a lot into this one. I totally, totally understand that piece, that part. But there is one more thing still remaining, which is the easy one, by the way. We haven't yet submitted anything. The submission part is definitely easiest among the all. But definitely, this is something you need to understand one by one how things are going up. Now, if the post is there, then obviously based on this, we'll be getting the value. So first of all, we have all the data. And by the way, all the data now we have, as soon as you submit the form, the values are being called and we have the data. We need to extract the data from a couple of resources. Let me show you that. It's easier to actually write the code than to explain that. So if the post is there, OK. If post is there, then we have to do something. Otherwise, we have to do something else. OK. So post was there already. OK. So first, let's extract the file. Let's get the file. File will be coming up from the data. Everything is stored inside the data. And we'll be having an image. And we'll be extracting this. OK. Now, what we're going to do is we are going to do something if we find the file. Otherwise, we'll be just putting a null inside this one. Rest of the checking automatically can be done by the app write itself. If it is there, then we want to use an app write service to upload the file. So let's go ahead and await this because this service takes time. And we're going to use app write service. We are going to use upload file. And in the upload file, we just pass on this data.image. And obviously, the path, which is in the first field. OK. So that's the part one. And this is the part. Now, again, we need to continue further if the file is there. If the file is there, then let's go ahead and delete this. If the file is there, then we are going to use app write service.delete file because we want to delete the previous file. Previous file is inside still in the post. So we'll say post.featured image. If file is there, go ahead and delete that. You can also go ahead and use an await here as well, if you wish. But I think it's good enough. It can do its job behind the scene as well. Depends on when we do more thorough checking, we can actually go ahead and work on with this. Now, let's call this one as DB post. And what we want to do is await app write service. And this one is going to be responsible for updating the post. For updating the post, provide me the ID first. So that can be extracted from post.dollarID. There we go. And then provide me all the data that you have. OK, what data do you have? I can just extract everything from the data itself. And one thing that you have to give me is the featured image to overwrite that featured image because we just uploaded that. That will be coming up from file if we have that. If we have the file, then give it file.dollarID. Otherwise, if you don't have it, just give me undefined so that if it is compulsory, app write can throw me an error. Now, continuing further, in this case, if the post was updated successfully, then let's redirect the user. So let's go ahead and work with that. If we have the DB post, if that's the case, we have the DB post, then let's use the navigate, which we created from use navigate. And we'll say go to slash post slash the slug of it, which we can get from like this. And we'll be having not the post, DB post, the newer one, DB post. And we'll get a dot dollar ID. There we go. Nice and easy. Keep on talking, keep on writing the code. That makes life so much easier. OK, this is the part where we have the post. What about when we don't have the post? In that case, we'll go with the else part. That means we are creating a fresh post. So let's upload the file first. Go like this. File, await, no, question. Like this, await, and then app write service. Please help me to upload a file. OK, how do we upload a file? By extracting it from data dot data dot image. And out of that image, the first value, which is the path, once you have uploaded that, then what should I do next? If I have the file, let's get that field properly set. Let's use this. If I have file, then what I want to do is I want to create a field ID, a file ID, sorry, field ID, file ID as file dot dollar ID. And then inside this data that I have access, I will create a new field, which is featured image, which will have this one, file ID. Could have done that in one line as well, but I'm more comfortable with this one. Now that you have all the data, you have also the access to featured image, which you uploaded first. Let's create a new post. So obviously, I'll say await app write service dot create post. Provide me all the data that you have. So first of all, let's give it all the data by destructuring it, and then also give it a user ID. A user ID can be given to you by simply user data. Remember, we have access to it in every component. And we can actually have a user data dot dollar ID. That's how you grab the ID. OK, now once you have done that, let's store that into a variable. Let's call this one as DB post. OK, once this is done, that means DB post is created. Now inside this, I want to check for another condition. If by this time the DB post is being created, let's navigate. Navigate, where do you want to navigate to? We want to navigate to slash post to the newer. There's only one post ID that we have, which is DB DB post. We need to use variables. We need to have DB post. And we'll extract the ID out of it. All right, so this is not too much, but you need to be very careful with what you are doing. That's why I always say don't code with the mouth shut. Always code by thinking of it. You can do one by one step by step all these process. This is almost kind of a standard practice. We always upload the files first. We usually create helpers for them, upload the file, get back the URL of the file, set your object properly, and then use helper files to upload the file, create the files, create the post, whatever you want to do. Quite an intensive video in itself, I would say that. And definitely took us a little bit while, well over one hour onto this video, but I think it's good enough. And that's majorly it, what we wanted to do. Now it's time that we actually assemble all of our components and start debugging them one by one. Obviously there are mistakes in it, but we'll figure them out. Let's catch up in the next video. Hey there everyone, Hithai Sheer, back again with another video. And in this video, we're going to continue our journey. We'll create two more components, which is sign up and the login. Now this could be done either in the pages or in the component, both are absolutely correct. I prefer to do it in the component, so that in the page, I just have to load one component and that's it, it brings all the functionality, but it's totally your choice. Maybe you want to just keep the components as purely just the UI part. I want to keep it as both the logic and the UI part, totally your decision. Now, once we are done with the login and sign up, then we'll be working on the posts because there are many posts, which will be available in the post page. So basically we'll be making a query, we'll get the data and we'll be just passing on to another component so that it can loop through it. Let me just share the screen, it will be much more easier. Hope you recovered well from the last video, it was quite intense. And that video requires you to spend at least one or two day with the documentation of React hook form, understand it better or probably repeat that, that always helps to understand code more. The more you see the code, the more you read the documentation, it gets much more clear with that. Over the time, things requires reputations, so that's why I highly, highly recommend that once you are done with this series, go it again for one more time, that will surely help you. Let me share the screen and let me walk you through that how and where we are going to work through. So this is the docs, I still read it to this day and there's always something more interesting going on in here. Now, one thing that we are not going to focus in this video is this part. We have already seen that how we can register any input field with the React hook form by this method and then everything is available in the data and that's why we have this data available. So register form states and watch and handle submit and whatnot, this is the data. So this is what we are having. All right, so we'll not worry on that part, rest of the part we will walk through again. Okay, so first of all, let's go into components, right click and new and this will be our first, let's start with the signup. Come on, write that, signup.jsx. Okay, so what goes into the signup? First of all, let's do rfce to get a React functional component. Now in this one, since this is a signup, we definitely 100% requires the auth service. So let's go ahead and grab the auth service. Auth service and that obviously is going to come from one directory back inside the app right and inside the auth. So that's our app service. We'll also be using some of the links in this one, we'll navigate the user forcefully once this is done, signup will either redirect him into the application or to login page, but that is going to be required. Let's go ahead and grab link and navigate, rather use navigate, use navigate. Come on, navigate. And these are going to come from React Router Dom. All right, we also will be using React, that is obvious. We will be managing some of the states as well. I'll walk you through not too much states because we'll be dependent majorly on the React hook form, but still there is a place we'll be using it. I'll walk you through with that. All right, so this is the all and obviously we'll be needing some of the buttons and all these basic components. So let's go ahead and grab a button and that button is going to come up from, we need to go in the same and the button.jsx. We need input and logo as well. So import, input, come on. Input from the same current directory that we are. Just grab input and the logo as well. Although there's nothing in our logo, but still we'll just import this. Logo from dot slash logo. All right, so components are there and obviously we'll be requesting some of the features. We'll be using use form. So let's bring them as well. First one, use form because I'll be using this left and right, use form. And that is going to come up from React hook form. And a little bit Redux also is required. Mainly use dispatch because I'll be dispatching some of the actions. Dispatch and that dispatch is from React Redux. All right, quite a lot of stuff that we have imported, but that's good, we got this one. Now let's see how we're going to do that. First of all, the easiest part is to use the use navigate. So I think let's do that. Easy part, I always love to do first, navigate. And that simply says, use navigate. There we go, that's it, easy part done. Let's create a state for the errors. And that's the reason why we are using use a state. Because right now the form, all the form has the capability to handle the errors as well. There are validations and whatnot and all of that, like there is a specific dedicated how to handle the errors as well. But I think I'll handle them better in the state. So I'll just use the state in this one. Error and that will be set, error. And for this, we'll be using use state. And by default, there will be nothing, no errors at all. We'll be also using the dispatch. So easy part, just like navigate, let's go ahead and use dispatch. And that will be coming up from use dispatch. So that whenever we want, we can just now use it. All right, now the next thing is that we obviously will be registering the user. So for registering the user, we need to use the use form. So I'll just go ahead and say const and we'll be saying register. And then there is handle submit. And this will be use form. All right, I hope now by this point, you understand the part that register is something which is what we use for dot dot dot register. I guess that one. And handle submit is the method by which we actually pass up. So anytime you use something like this handle submit, anytime you use the form, the React hook form, you cannot just directly pass on on submit. You have to have to go through with the handle submit, which further takes a function of on submit. And that's how basically it controls the entire form. So keep that in mind. Really sometimes when you create this, it's easy to actually forget that. Okay, so this is the basic. Now how we're going to create the user because handle submit requires a method to be passed on. We'll call this one as create. You can call this one as create user, create user on app, right? Totally your choice how you do it. I'm gonna call this one as simply create, create. And this one will be a sync operation. And this one is going to take data. Data obviously will come from the React hook forms. There we go. Now, first and foremost that what we're going to do, as soon as somebody clicks that, we are going to use set error to set the error or to reset the error basically to onto the initial state. Now let's go ahead and use a try catch. The catch part is easy. The catch part, we can just go ahead and say set error. We can use the state and we can say, hey, error, give me your message. That's it, super easy to handle in the try part. In the try part, we'll await obviously because that takes time. And we are going to use a service from the app, right? So let's call this one as auth service. That's what we called it. And from this, we are going to use the create account and we'll be passing on the data. That's it. Now let's hold this into a variable. Let's call this one as const user data. Once this is completed, then if we have the user data, then we can actually invoke a dispatch to save all of this data in our Redux. Otherwise, the error is there. So let's validate this. If we have user data, then we can simply go ahead and say, let's go ahead and get the current user. How can we get the current user? It's pretty simple actually. You can use auth service again. And from this, you can run the method of get current user just like this. And you will be having the access to whoever is the current user. This operation might take some time. So let's go ahead and use an await. In fact, I missed a couple of places await. And if you find them, just go ahead and add await for that. All of the upright operations should be awaited. Okay, let's go ahead and say further down. We can call this one as user data, no problem. We are inside the if block. Okay, now if we have user data, if we have user data at this point, which is our current user, we'll go ahead and fire up a dispatch. I don't think we need this one. We'll just do it a single line. We'll say dispatch, what event do you want to dispatch? I want to dispatch a login event. And the login event is going to be coming up with the data. So I'll just go ahead and say user data. So that's it. Fixing it up all in the user data. Did we brought in the login? I think we didn't brought the login. Doesn't look like, let's bring the login. Import, and we want to bring in the login. Come on, write that. Oh, looks like this is freezing. Nope. Oh, now it's working. Keyboards. And we will bring this up from, let's go one directory back inside the store, inside the auth slice. This is where we want to bring the login. And this is exactly the login that we are using in here. Once this is all done, let's force the user to navigate on the homepage. Maybe if you want to navigate to some other place, that's up to you. I'll use navigate. Where do you want to navigate? I'll just go ahead and say navigate to slash. All right, not a big deal. That's all what we wanted to do for this part. Now for this return part, I'll just copy and paste and give you the entire code because there is nothing more we are learning in this one. So I'll just go ahead and copy paste. All we are doing in this one is some flex box and classes and all of that. The important part we have already discussed that whenever we want to have these input fields, how to actually link them up. So notice here, this is how we are linking them up. We are saying dot dot dot register and then the name field is being registered. The email field is getting registered. The password field is getting registered and then a simple button which just says create account. And once we have this one, this form actually has, so notice here, we have the errors being handled here at this point. And notice here, the form is, as soon as the form is being submitted, we are using handle submit, which comes from the React hook form and we use the method create here. And that's how we designed it. The login is exactly same, almost exactly same. So that would be a good exercise for you to repeat. In case if you wish, you can pause the video right here and try this out. Again, it's not about all the time writing the live code. It's also about how you understand the code which is already written. That's also a good practice. So we just did that. All right, so signup is ready almost as component. Now we can go ahead and work on with another one, which is the login. Exactly same, nothing much to be differentiated there. And let's call this one as login.jsx. Okay, so rfce. And again, this return part will be copying and pasting, so nothing much more than that. Let's go ahead and borrow some stuff from the signup as well. Okay, let's in fact borrow everything because it's almost exactly same. And let's go ahead and work on with this one. Okay, instead of the login, this one is actually login, so we're using the login same. Dispatch, we are going to require, we are going to require auth service as well. Button inputs, pretty much all of them are going to be using just like this. And we're going to use login here, but this login might create some of the issues here. So let's just rename this one as auth login. Okay, makes the life a little bit easier, not much. But I think the rest of them are pretty good and pretty okay. All right, let's see how we're going to deal with that. First, the easy parts, let's go ahead and do that. Const, navigate. Navigate, that's going to become a from use. Navigate, there we go, this is ready. We need dispatch as well. So we're going to say dispatch, and that's going to come up from use. Dispatch, just like that, easy part. Then we need use form, so we'll be needing register, of course, that always goes. And we need to have handle, submit. And that's going to come up from use form. We have done that many times now. Okay, what else? We will be managing the errors, so let's go ahead and use a state for that. Error, set, error. And that's going to come up from use state, just like that. By default, the errors are going to be empty. Now we need to work on a method which says login. How do we handle the login part? Exactly same, nothing much different or difficult. Let's go ahead and say const login. We can say to login, because now we have renamed this one as auth login. In case you wish to call something else, that's totally on you. We'll say async, and this is going to say, hey, give me all the data. Call back just like this. And first step is to set the error. Very repetitive, very repetitive. Let's go ahead and fire up a try catch. The catch part is easy, as you all know. We can just simply go ahead and set error, and we'll say error.message. And you might be thinking a pattern here, repetitive. That's exactly what I want in the course itself, that, hey, things are repeated and you can try them. And once you build enough application, you will figure out, I can build anything. These are exactly the same thing. It's just the way how we handle the data and how we get that. So what we're going to call this one and this one, first of all, let's go ahead and use await. And the await is going to utilize an auth service. There we go, from the auth service, we are going to use a method of login, and we'll be providing all the data that you have. Let's call this one as session. Session, there we go. Feel free to call it anything. It doesn't really mean that you have to call it session. I'm just saying that, hey, this is session. Now, if we have the session or any data session, if we have the session, now, can I get a current user from the auth service? Because if there is a session, the login was successful. Technically, there should be a current user that I'm able to grab. So let's go ahead and say await auth service, come on, not that, auth service dot get current user. There we go. If I get that and I hold that into a variable, call this one as user data, feel free to call it whatever you like. If I have user data, then I can dispatch a login action. So I can just go ahead and say, if I have user data, then we can dispatch and I can do that in one line. I can go ahead and say dispatch. What do you want to dispatch? You might be thinking we'll be dispatched login, but remember, we actually login is now being known as auth login. So just go ahead and call this one as auth login. And auth login is a method which we are going to pass on user data. That's it. And user data is being passed on, so that's all good. Now let's redirect the user as well, navigate. Where do you want to navigate? Probably on slash, that's it. So there we go, told you it's not really difficult. At first, it looks difficult, but it is not very much. And in the login page, since we are using some of the tailwinds and other features, that's why I'm just copypasting. Otherwise, if you see that, there is nothing big that we are doing in here. So this whole thing at this point is nothing. It's just hardcoded values, just HTML and CSS. Even this portion till here, till this portion, everything is just hardcoded CSS, nothing more. Here we are handling the error. If the error is present, we are displaying the error in some red squiggly lines, just like that. And this is the form, this is the important part, which we discussed in the last video quite a lot. And we saw that how input could be registered or could be binded with the use form using this piece of code, which is nothing, dot, dot, dot, register. And we named this field as email required as true. That is it, that is it. This one is password field required, that's it. And as soon as the form is submitted, we have this form here. We use handle submit, which comes from the React hook form. We provide that method who is handling it actually. And that's it, that's it. Our component and everything is all done. Now, one more thing that we are going to do in this video is now moving on to the pages part, because now almost all the components, we have discussed that what we wanted to build. Now let's work with the pages one by one. And again, for the login and the signup page, there is nothing, we'll be just importing the values, but there is one page, which is post. This is something interesting. In the post, what we're going to do is, we're going to grab some data, and then we are going to simply kind of iterate over the values, and there's a lot of stuff that needs to go into this post as a page. Let me show you one by one how we are dealing with this and how we are working with this. All right, so the reason why this one post page that you see up there, yeah, there, is important, because this requires a little bit more of knowledge of how we are building this application. The way how we are building our application is we upload an image, no problem at all. Then we use an editor, which we brought from TinyMCE. That editor allows us to have an ordered list, ordered list, and bold, italics, colors, all these things, and save them in the database. Now how it saves in the database? It actually writes simple HTML with some inline elements and inline style sheets, and just store that as a text inside your database, that's how it works. In fact, every single element that you see around, which provides you VisiVic, that's how they work and they save. But the problem is that if you bring in just the pure HTML, you cannot display the pure HTML in any React component. So we need some more work to be done, and in fact, we need a little bit of help from this. So this is the package that is going to help, which is a HTML React parser. It's published three days ago, but it's pretty popular. You can see the weekly downloads, it's pretty crazy. What it does is now you can actually use a method parse once you actually import that and install that. And this is going to allow you to have HTML code, and in fact, inline CSS as well. And it works like this, react.createElement, in case you saw the previous videos where we discussed how React works internally, how JSX works internally. So this actually breaks down everything and helps you to just work with that. I found it really, really useful, so that's why we are going to install this. Let's go ahead and copy this and work with this. And this will be super helpful for us in the post as well. Let me go back. And first, let's go ahead and install this. Probably I'm not in the proper folder. Let's go ahead and open up. Okay. Let's verify this one more time that are we having installation properly or not? So we have React, HTML React parser. That's exactly what we want. Now coming back onto the post page, because rest of the things are pretty comparatively easy. The singular page, how we display the singular page, and the concept that only if you're author of the page, then you have the ability to edit it or to simply have a delete functionality. That is also a little tricky, not too much, but little bit something that we should explore together. So we'll be needing React. Obviously we'll be using useEffect. Come on, write it. UseEffect and we'll be using useState. All right. We'll be needing some of the elements from React Router as well. So we'll be needing them from React Router DOM. Okay. What do we need? We need link, we need useNavigate, and we need useParams. That is the most important. What is this useParams? It's really simple. Anything that you see in the URL, you can actually grab the value of it by using the useParams. It's super simple, super easy to work on with this one. We'll be needing app write service. App write service. Come on. App write service. If I can write that service, there we go. And this one is going to come up from one directory back. We'll go into app write and we'll go into config. Okay, what else? We need couple of components as well, specifically the button and the container. Import button from one directory back component and the button. We'll be needing container as well. Container and that container will come from one directory back inside the components, inside the container, inside that we have this container. Pretty long name, but we have that. Most importantly, let's have parts that is going to come up from the newly installed HTML React parser, and let's also have the use selector. I usually like to have all of them as I go as I need. I just work with them, but I know these things are going to come handy within a minute. So I just know let's have them. So React Redux, all right. If we need anything else, we can just work with that. Now how the post actually work, this post especially in the page. Now, if you are in the page, first of all, let's create a state to handle the post. So let's go ahead and say this is my post. This one is going to be set post. And that is going to come up from use state. By default, let's call it as null. There is nothing inside it. Then what we need is we need to extract the slug. So we say the slug, and the slug is going to come up from use params, that's it. One more thing you need to understand, the reason why we are calling this one as slug, that is something really important and useful for interview perspectives as well. If you go into main.jsx, notice here, we are calling this one up here as colon slug. This colon slug is the reason why I'm able to grab a slug from the use params. So keep that in mind, super important to know. Let's also grab the navigate. Const, navigate, navigate. And that's going to come from use, navigate, just like that, super easy. Okay, now how can I grab the user data? Okay, because why do we need user data? Because if you are a user and you are author, then we'll see that do you, should you get the delete and the edit button? First of all, let's grab the user data. User data, and that can come to me by using the use selector, simple react redux, and we'll simply say state. State.auth.userdata. User data. Okay, now I have the access to user data. Now, how can I verify that this post is written by you or not? Because post is also storing a user ID, and we can extract the user ID from the user data as well, so we can match both of them. So let's just say if we have the post, because post might be null. If the post is there, let's, and we have the user data as well, user data, then we can do something, otherwise we'll do something. Okay, we want to check if you have post, if you have user data, then we want to match it, that will be a true part, and otherwise it will be a false part. So we'll say this as a false. All right, how can we verify the true part? The true part can be verified by simply comparing them. So let's say post is going to have a field known as user ID. Is it equals to the user data? Which also has a field of ID, so dot dollar ID. So if both of them match, we'll be getting a result of true, otherwise false. Let's store that into a variable. So let's call this one as is author, and there we go. Now we are checking for the condition, if post is present, if user data is present, then if they matches, that's great, that's true, otherwise it's just a false. So now we have an access of the field that hey, this is how it works, and all of that. Okay, now we want to do something a little bit more onto that. We want to work with how the delete post will work, because deleting is interesting, okay. Let's write a simple method for that. Delete post, it's actually super simple, that's why we are handling it first. So how does a post gets deleted? Really simple, you just query to app write. So app write service has a method of delete file, not delete file, delete post, yep. You just have to provide the post ID to it, and I can extract this from the post dot dollar ID. So once I actually pass it on, I can use an await here, or if you wish, I can use a dot then, just like this. And if I receive a status, then I can go ahead and delete the file as well, because remember, we are not keeping the file at the same time. If the post is deleted, then let's go ahead and delete this. So I'll fire a callback. So in this case, if I receive that, hey, the status is there, it gives me a status, by the way, if you'll read the docs, once anything is deleted, it gives you back a status. So let's check in here, if the status is there, if status is present, then I'll go ahead and delete that. So we'll use app right service, and we'll say delete file, and still you have access to this post dot, and this time extract featured image, and now this image will be deleted. If you wish, you can put an await on this one, but if it does it in the behind the scene, I'm really okay with that, and I can just navigate. Totally up to you how you're designing your application. If this is really important step, you don't want to move it before this, you can put an await onto this one, that's also fine. Totally up to you that how you want to design your application. Okay, so far it's good, but there's one more thing. We got this slug, but we are not using this slug, because this is a post page. Individual post should be loaded as soon as the page, or somebody comes to this page, or this page loads, or this component loads. So yes, you guessed it right, we'll be using something known as use effect to actually do the exact same job. Use effect, and there we go, we'll be having our callback, and we need a dependency array as well. So this will be dependent on either the slug, there's any change, or if somebody navigates here, so we'll be running it on the both side. Now, how do we grab a slug? So if the slug is present, if we have slug, then go ahead and just query the app write. Hey app write, give me a post, so get post, not posts, only one, and for that you have to provide me a slug. Let's use promises.then. So if you get the post, let's go ahead and use a callback, if you get a post, what do you want to do? So if I get the post, I'll set the post, if post is there, then I'll go ahead and say set post, and in the post we'll be posting a post, too many posts. What in the else case? If we don't get this one, so in the else part, we can just go ahead and say, let's navigate. Let's navigate back onto the home because I was not able to grab that, so there is no point of loading anything. So that's it, pretty easy, now we were able to grab it. So delete post is pretty nice, nothing much we have to do. Okay, now let's go ahead and work on with this one. So return, I don't want to return anything just like this. I want to return only in the case of post. If the post is there, then let's go ahead and do something, otherwise you can go ahead and do something else. What something else do you want to do? You can put a message, couldn't find the post or something, but I'll just go ahead and do a null because rest of the things will be taken care by my use effect, but totally up to you. The reason why I'm actually explaining this so much is so that you understand the flow of the application, not just these memorized thing, that we have to always do this. It's your application, how you want to design it, how you want to handle the edge cases, this is how things are designed. So that's why I'm actually mentioning all this in such a detail. Okay, let's go up here. What do you want to do in this case? I'll first have a simple div, which will be having a class of py8. Okay, now inside this, let's open up a container. Container, there we go. Now inside this container, we'll be having a simple div with just post an image. So I'll just have a div and we'll be having some of the class names onto this one. Not really much interested in the classes or writing in front of you. I'll just copy and paste my classes, you get that. Now, once you're into this div, the first thing that we want to do is display an image. Now, how do we display an image? That's the question. Again, we can use our JavaScript and use app write for getting the image. So we can use an app write service and we can get a file preview. To get a file preview, we can use the post, which I already have for this particular page. And from this, I can use the featured image. There we go, we got our image. Now in the alt, let's use post title, maybe. We can simply say post.title, there we go. And it looks good. We have some of the class names as well into this one. And the class name is just rounded XL. Rounded dash XL. All right, so the image part is all done and this div looks great. Now, we also need to display the content. So just below this div, I'll open another div, which also has a class of W dash full and one more class of margin bottom dash six. All right, so this is my second div. And in this, I'll just do two things. I'll display the title as well as the content. Title is easy part. There is nothing big deal on to this. Again, one more. Div, let's use an H1 directly. I'll not get a div. H1 dot text dash to XL. Anything else? Font bold. Font bold. Now, how can I display this? Text, super easy. Use your JavaScript and simply say post dot title. Okay, no big deal. But how can I display the content? Because content is something where we have used editor and editor is storing all of this. So what we're going to do is in this case, what we're going to do is let's use a div, which will be having a class of browser dash CSS. These are custom classes. You can write them as well. But the most important thing is user JavaScript, but not ordinarily. You have to use a parse, which comes from the HTML react parser. And in this, I have to say post dot content. There we go. Told you it's super easy. Everything that we are storing, this is all thanks to this parse, which allows me to display the HTML content and everything that's inside there. So all of your formatting, like bold, italic, your colors, everything is being parsed properly. Now, one more thing that we have to do is, okay, this part you understand nicely, but there's one more thing. Now, on top of this image, I want to show the user that, can you actually delete this post, or can you just have an edit button, something like this, delete post or edit post, something like this. So for this, we'll optionally render something. So here is my JavaScript, and is author will give us a true or false. And based on this, we will display this. So let's use this one, just goes like this. We'll simply have a div, which has absolute dash right dash six. And these are classes to keep it at the very right top. That's it. Top dash six. So we have this div. Now inside this div, we'll have a simple link. The first one is going to allow the user to update this post. How can I update that? Super easy, nothing too much. I'll have the link. Okay. The most important part in this link is too, because this is something which does all the magic. So I'll use a back text where I want to go. I want to go to slash edit dash post. And to edit any post, I have to provide the slug after that, that's it. So I'll just use a slash and we'll provide an ID just like that. Suppose to dot dollar ID, that's it. Now you'll be redirected to slash edit post and edit post we haven't yet handled, but this will be handled here in the post. So that's it. All we have to do is just load all the things in the data. That's it. So this is the post that we have grabbed. Okay. The next thing is let's name this button as something. So let's call this one as inside this, let's give it a button. The button component that we have designed and let's call this one as edit. We have some classes for this one as well. All right. Actually not the classes. We have some of the properties onto this one. So I'll just paste this. So we have the background color green and the class name just like this. So one part is done that how this is being actually done in design. Similar to this, we also have a button. This time not the link, but we need just a button. So I'll just copy this, move outside of the link and we'll also keep this one. This one is going to be a delete button. And this button will have a simple on click. This one is going to be red. That's fine. Margin right. We don't need this into this one margin right. We just need one thing here. On click. Suggestions, no suggestions. Anyways, on click just like this and simply run delete post. That's it. Delete post already is handling things up here. So I think that is good enough. So this is something that is worth discussing of how things are being done, how you are able to parse these things. I hope that gives you a little bit of extra knowledge of how these professional applications are designed. And once you understand this, you can now build anything that you want basically. Something that's storing the code part or anything. You can just store them in using the editors and using the parts you can just display them. So that is it. Quite a long journey about this one. Still almost like half an hour. But I hope this has helped you to understand a lot about how applications are designed, how the workflow of the application works and you are building it along with me. I highly recommend that once you watch these videos, try to build them on your own. If you need help, take help from my GitHub. Not directly from the video, but if you feel uncomfortable even after that, then only take help from the videos itself. That's it for this one. Let's catch up in the next one. Hey there everyone. Hittai Sheer back again with another video. And in this video, we'll try to finish our app. It's almost done. We don't have anything major that we want to explain or we want to go through along with this. Rest of them is just importing the component, display them, that's pretty much it. Only couple of things are remaining, which I'll walk you through in this video. So let's go ahead and do that. And probably after that, we might need some kind of debugging, maybe some CSS is here and there, just minus stuff. Nothing much to be worried about. So one final thing to walk you through with the flow of the code is something. So let me share the screen and walk you through with that. So this is our screen. So in case you did notice that we have this post and inside this in the last video, we created this button which says edit, which takes you to slash edit slash slug. So in case you want to know, you forgot about how that works. We have this edit post slash slug in which the edit post is going to be the page that will be loaded. So if I just go ahead and click on this, this is something that we are importing from here. So page is edit post. So let's go into the edit post and see how we can actually manage that. So as you reach to the edit post, the first thing that should come to your mind is that I'm getting a slug and I can extract that slug using use params and I can use use effect to query the app right to bring that post. And that's exactly what you should be doing. So let's go ahead and grab it. I'll walk you through with the, usually what I do is I just go up here and start writing. So I need a post obviously. So let's go ahead and work with the post and that will be set post. And usually I rely too much on the auto import statements, just like this. In some cases, it doesn't work automatically. So I hate that part. All right. Next thing is we need to extract the slug. So let's go ahead and grab our slug and that slug is going to come up from use params. It doesn't give me. I hate it why it's not giving me suggestions. In most cases it does, but today it's not really happy with me. Okay, so we need a use params. So how we're going to get the use params, that's the question. I think that's from React Router DOM. So use params, no suggestions. Import from React Router DOM. Did I made a mistake? Yes. Use params. Yep, now it makes sense. Since we are here, let's also grab use navigate. Use navigate and let's also grab it. So navigate. And that's going to come up from use navigate, just like that. Okay. So these are the things that I have. Now the first thing that I would love to do now is to use the slug and get something from app right services. So we need to get app right services first. All right. Import app right service. And that's going to come up from one directory back inside the app right, inside the config. Let's now use use effect. And the use effect goes like this. It gives me a callback, just like that. And we have a dependency array. All right, so what's the dependency? Maybe if you change anything into the slug or if you navigate from here and there, these are my two dependency. Now coming up onto the part where we can go with that. Okay, so if I have a slug, then make a request. So let's check this. If you have a slug, then only make that request. So app right. And we are going to say get post one only, not the posts. And post can be taken up by the slug. We can use await here or you can use .then for the promise part. And then we'll say inside this, if you get a post, just like this, let's go here. Now, if we have post, let's set that post into my state. So if I have a post, let's go ahead and set this into set post. Post, there we go. If I don't have any post, so in that case, I'll just go ahead and say navigate. Where do you want to navigate? Totally up to you. I'm happy with the slash. All right, so this is the part where it's easily. Now this part here is even much more easy. The reason for that is I can just bring in container and the post form, which I've already created as a component. So that makes my life much more easier. Let's bring them. So import container and that's going to come up from one directory back inside the component. We have container and we have container. And we also need the post form. So import post form and that's going to come from one directory back inside the components. And we do have post form and inside that we have post form. Post form, there we go. And all I have to do is I can keep this stiff as it is, if you wish, and I'll say the padding on yaxis, let's be at six. We don't need this and we can say wrap everything inside the container, just like that. And inside this we'll be having a post form and it could be selfclosing and we need to pass on one param, which is post, which is post. All right, so post is coming up from my state. So that's it, told you. After this point, almost everything is super, super easy. Let me tell you one more thing. What happens when you simply go ahead and do add post? Now, I don't have to do too much of the things. I can just go ahead and say I want to import container and that container is going to come from one directory back inside the components. Container should have done an index.js there. I'll probably leave that as an exercise for you. There should be just one index file inside the components and I could have bring everything here, make my life much, much easier. But anyways, and we do have a post form and that's going to come from one directory back inside the component slash post form slash post form. And in here, I can just go and remove this. Again, same class name padding y6. And in here, wrap everything inside the container, just like always. And in here, you can just go ahead and say, hey, I'll have a post form. Post form, why did it brought it again? No idea, but anyways, we'll remove this one. Okay, so I told you it's super easy now because the post form component that we created in case you forgot that, it's okay. It's totally normal to understand that you forgot that. Remember everything is being done in here. So submit everything is there. We're just loading this component inside this one. So super, super easy. Now what happens when you actually work with the all post? Okay, in the all post, we'll just grab all the posts that are possible and we'll be working with that like. So let's first import app right service, service. And that's going to come from one directory back inside the app right, we need a config. And what else do we need? Probably that's it. I want to have all the posts, so const posts set posts. That's going to be use state. And by default, it's going to be an empty array. We want it to be tradable because there are many posts inside that. First thing is use effect. Use effect, just like that, have a callback. And there is probably nothing as a dependency array. When you put nothing inside the dependency array, that's also a good thing. That means it will run only and only once when the component mounts and that's it. So let's go up here and as soon as the component mounts, we'll use app right service. We'll say get posts this time S because we want to grab all of it. And we'll say that, hey, we'll get all the posts. We'll just take it in the array. And dot them. And if everything goes right, we'll be having the posts. And all we have to do that, if we have posts, if we have posts, just go ahead and use set posts just like that. And we'll say posts dot document. That's a little bit part on the app right side because the post in itself has an object or document. It has a couple of more things. By the way, if you wish to see more of it, just do a console log of the post. And then once you have the dot documents, that actually gives you an array. And again, by the way, I didn't vent it up on the very first go, I had to do a console log to understand what kind of document is something that I'm receiving back. And then I worked on this one. By the way, app right does a fantastic job in showing you what is something that you are receiving back when you're making a query or something like that. So fantastic job there. But yes, I needed to do a little bit of console log there. Now, the interesting part is we would be needing a postcard. So if you remember, we created this postcard in which you pass on the ID title and featured image and it displays that. So we'll be using this. So let's go ahead and bring that. I will bring container to container. Oh, nice suggestions. Finally, you are awake. And we'll be needing a postcard. Postcard, no suggestions. Ah, it's just understanding the things which are already being designed. Hate this. Should have been done auto, anyways, not complaining too much. Components and then we have postcard, okay. Moving back, this is going to require a couple of classes. We are gonna set the width of full and padding on Y8. Okay, so now moving ahead, let's clean this. First of all, let's wrap everything inside the container, just like that. Inside the container, we'll have a simple div. And in fact, this div can have a class of flex and flex dash wrap so that everything becomes a card and we can just easily shrink them up. Okay, now what we have to do, start your JavaScript because now we want to loop through the posts. Remember this? The posts, which is an array. So we'll be rendering this but conditionally. So we'll be saying that, hey, what we can do is posts.map and inside this, each post, we are going to call post. This is individual one, just goes like this. And I'm not gonna use curly braces, otherwise I have to explicitly return. So I'll use parenthesis for that. And I'll say, I'll be returning you a div with a class of padding dash two. And a width of one by four, dot width of one by four. I don't think so. It automatically takes it as emit abbreviation. Ah, it takes it. That's nice. By the way, it's dash. And since this is the one which is iterating over, so we will put a key onto this one and key is super easy post dot dollar IT. And once I'm in this, the component that I want to loop through is my post card, selfclosing, of course. It takes one prop. So what we're gonna do is, if you notice it carefully, I could have given it like this. So I can just go ahead and say, hey, post is equals to post, but it's not accepting these kinds of parameter in this way. So remember, the way how you design these components and what they expect the data, make sure you're careful about that. In our case, the post is expecting an object which has all these information. So don't pass it on directly in case you want to do so. So you have to pass on just an object and we are gonna destructure it. That's the important part. And that's it. It's gonna do the job. So I told you, it's very minute details now. We are all happy with this. Edit post we have worked on and home, there is nothing inside the home. What we can do is, home can also have the card. This is my all post, same. And on the home also, let's grab all the cards and do the same stuff. Okay, so let's go ahead and say all post. And we'll copy all of this. Home will also display the same stuff. So we'll paste it, all post. What do we need? The same stuff. Copy this. And in here, we'll just paste it. So we have post and all these stuff. Get post, blah, blah, stuff, looks okay. Now in this one, what we can do is, there are a couple of more things that we should have done. Okay, on the home page, if you have, like we haven't taken care of the cases in the all post when the array is zero. We can actually do that in the home and I can give that as a sample exercise for you. Okay, so this part is all okay. But what do you want to return when the array is zero? So let me just handle that case. If the post.length is actually zero, that means there is nothing inside the array, then you can simply go ahead and return that there is nothing to read. Otherwise, we can just wrap up the container, something like that. So let's go ahead and remove this part. Return, what do you want to return? No post to display, but let's actually do that in a better way. Let's grab everything from the all post. I'll grab this, copy this and I'll paste it. Okay, so container and we don't have this one to actually load. So we'll just remove this and we probably will have a simple H1, which says login to read posts. So probably there is nothing inside it or we can say there is no post to read, better message is login to read. So this is all the case when the if statement is working. If the statement doesn't get invoked, that means there is something inside the length. So in that case, we can actually use the same all post, copy that and we can just paste it up here that hey, the container is there and we are iterating through. So post.map, everything, postcard, it's exactly same. So now that you know how to handle the situation when the post is zero, you can do exactly same in the all post as well. Just write a simple if statement at line number 19. I can just mark it as to do for you. To do add case for array length zero. Yeah, not really the best sentence, but I think you can do the job. Okay, so the home part is done. What about the login part? This is the most easy part, but I think you will find a couple of bugs in this one. Let me show you why. The reason for that is we did everything inside this login. So we just need to import this component, but you will find it a little bit difficult if you don't know one simple thing, which is how to import this. So you probably might think that I'll just go ahead and say I'll import login and that will come up as one directory back inside the component, we do have login. The problem is our page is also called as login. This is really bad. So which one to use, which one not to use something like this. The easiest fixes, just use an aliasing. And let's call this one as login component. And notice here, this is what is giving you a problem that hey, import login, this is not how it works. So we need to actually change this a little bit. And I think this is the reason why I always say that it's always a good idea that these kinds of situations might happen with your component. So it's always a good idea to actually grab things like this. So let me show you an easy fix of that because that's a common scalability problem. Let me just show you that. We will just create a simple index file inside the component, new file, and call this one as index.js. And one by one, we'll be just importing everything and we'll be exporting that. That's all what we'll be doing in this one. This is much better of an approach. So if I go ahead and say login, and that login is going to come from ./login. Now I can go ahead and say export. And I can export all of this is like that. And I can export login. Now, once you do this kind of a thing, it's much easier. And you will notice that this import statement is not going to work because it's not export default. So you can actually just wrap this up inside the parentheses. And every time you bring that, it comes up like this. And this gives you the ability to call it as login. So you can rename the structures like this, or rename the page as login page, something like that. So that's also workable. But I think you get the idea that how to avoid these kinds of problems, good stuff to discuss. We'll have a simple class name and we'll say padding by eight. And now in here, I can just hit and enter and can say I'll have a login component. Selfclosing of course. So there we go. Much easier, much easier fix. Post page, we have already worked with that. Sign up exactly same. So for this sign up also, we'll import the sign up. Import sign up from pages. Nope, not from pages. Sign up from current directory and sign up. All we have to do is comma and say sign up. Now the advantage is I can actually bring the sign up and can rename them. So I can just go ahead and say import sign up from components, that's nice. And I can just say, get it as sign up component. And in here, we can just have a class name, which says padding by eight. And this one can hit and enter. And we can say sign up component. Selfclosing of course. So all right, a lot of stuff. And actually the better way of handling this entire thing in the component would be to grab everything that's there in the component and export in this way so that there is a consistency. And I don't have to name this because if you notice it, when we were building something like in the edit post, when we were bringing these things like post form, container, this is coming up from different. So there is a missing piece of consistency here. So at least one thing would be consistent is everything will come from dot slash components, that's it. So good stuff, but I think you get the perspective of how things are being done. And I'm happy that I was able to share all these details, production grades, scalability issues with you. The only thing remaining is to test the application and we're gonna do that in the next video. Let's catch up there. Hey there, everyone. Hithai Sheer back again with another video and welcome to the final video where I'll walk you through how I debug this application. Expecting that your application will work on the very first go is absolutely a wrong notion. And especially when somebody is teaching you, he's more focused on the teaching part and the flow part. So some mistakes are meant to be there. They are obviously going to be there. And yes, it took me really a lot of time to debug this. By a lot of time, I mean one hour, a little bit more than one hour. So in this video, I'll walk you through what all I did, how I debug the process, how I read the errors. This will help you to understand the entire flow of when you're done with the application or in between if you want to check it out, what all the processes you need to go through. So let's go ahead one by one and I'll walk you through. Currently the application is in the working form and I'll just give you the entire source code as well. But the most important part is to understand the psychology behind solving these bugs. And most important is read those damn errors. That's the secret ingredient. Okay, let me share the screen first. And one by one, let's go there. So what I did is I tried to run the application. So the first conflict that I saw immediately was in my app.jsx. So this is the first part. So in the app.jsx, there was nothing, absolutely. We didn't have anything. So we have to load some stuff. So in the return statement, as you can see, I brought in my headers and I brought in my footer so that in the header I can load up the navigation bar along with the logout button and the outlet as well. Now, not only that, I also wanted to figure out that whether the user is logged in or not. So how can I do it as soon as this component loads? Yes, you guessed it right, it was use effect. So I used the use effect hook along with the app.write services, just a simple method, get current user. If the current user is there, then that's great. Otherwise, let's allow the user to move on here and there. So what I did is I created a state loading and we used the dispatch just like that. And after that, we used a simple use effect and we simply went up with the auth service, get current user. If we get the user, that's great. Let's dispatch a login action that user is logged in. Otherwise, let's dispatch the loading as false. So based on that, we're just loading. If the loading is false, otherwise we don't load anything. That's pretty much it, I did. Once I did it and I moved on to the Chrome browser, so let me just walk you through with this one. So this Chrome browser. So what we saw in this one is we simply went up onto this one and tried to login in and we saw a whole lot of errors. And I tried to inspect this into the console and it gave me so many of the error. I looked into this one and the most first one, the error that I found is that it was not able to load the environment variable. So when I was teaching you in the React, I actually accidentally used all the React variable, not the VIT variable, but we actually use the VIT. So here's the simple solution. All you have to do is you have to say import meta.env.vit and then whatever you want to say and that's how it works. So I looked up into this one, found a solution for this one and went into my environment variable first and changed everything to VIT underscore VIT underscore just like this. So I'll just copy all of this and I'll also paste this into the sample so that in case you are going through with the VIT or React, whatever you are going for, you can just go with that. I'll obviously remove these ones because I don't want to push it. And of course, by the time you'll be watching the video, I would have removed these ones as well. So I'll just go ahead and paste it up and let's go ahead and comment this. In fact, in the sample, we can keep it, no problem at all. All right, so I'll just keep it in the sample. Once I did it in the sample, the next step was to change that into the conf.js as well. So this also got changed to VIT.app, right? The errors were pretty clear. Once you check the console log, it simply said, hey, I don't know what this process.env.vit, so I had to change this one, import.meta.env. So pretty first error that we caught up after managing our app.js. So this was the first problem that I saw. Then after that, I realized that in a lot of places, I have a couple of issues, like into this input file, I somehow missed these parentheses. So they were a little bit difficult to find at first. It just gave me an error on the signup screen that ID was missing. And I'm pretty sure that I gave you the ID. I checked up first of all about my auth.js, saying that, hey, I'm providing you the ID. It's ID.unique. Turns out, in the signup component itself, I was missing, in the input component, I was missing the ID just like this. I tried, it again gave me, hey, ID is missing. Come on, I'm giving you the ID. Why are you doing this to me? Then turns out, I realized that in this one, I actually forgot to import the ID from the app, right? Yeah, can't believe I did that, but yeah, these are the errors, these are the bugs. Once I have this ID in here, then obviously ID.unique works, and it started to do the signup for me. So that's one thing. And in the login also, if we are using, in the login, we don't use ID. So there's nothing much more onto this part. So this is a couple of things. Not only that, a couple of more things needed to be fixed. For example, in the footer, I actually forgot to import the logo that was giving me a bug, so I did that. After that, in the header.jsx, I actually imported these logo in a different format. So I used this one, which is a wrong. If you're doing an export default, this is not how we do it, but somehow accidentally I did it. So I looked a little bit on what all the things are missing. It was pretty straightforward errors. So I started with that. Once this is all done, I went up back into this, that hey, what all these things, couple of other components also were having some issues that hey, this was not imported properly or something. I work with that. Another error that I saw was here, that it says add post, but in the URL slug, it says add posts, so that is wrong. Obviously we didn't take, took care of this URL. So I went up and changed this to post. That is what we are handling in the, in the app dot, not in the app, main.jsx. So this is the one that we are handling, which is edit post and slug, not posts, there is no S. So a couple of things, just look out for the flow of your application that always works with how things are going on and how things are doing for you. So don't panic, read the errors one by one, step by step, try to figure it out, because what I've noticed is that errors sometimes are not in the place where you're looking up for or are expecting them. For example, in my case, I was expecting the ID might be something wrong in the auth.js and obviously it was that ID was missing here, but this was also pretty much unseen or I didn't expect it that I might have missed this parenthesis here, send the ID. So input file, I didn't expect it that it would be there, but it was there, so this is what we did. And apart from this, I've also added a couple of more CSS as well. It's not really required, but I have added the CSS up here. These are browser CSS, so when the browser CSS, if you see something like output or summary or details, iframes and all of that, by the way, they are available online on the website of framer, the parser of the package that we used, which one, I'll show you that, HTML React parser. So the CSS is available on a lot of resources there. So this is a couple of ways of how I fixed the application. Rest of the things worked nicely, but expecting their application will work immediately is a bad idea. One more thing which I noticed that gave me an error is this one. So when I try to upload an image, at the very first it gave me an error that hey, you don't have permission to upload. Turns out I have the permission for the guest that we did together, but we also need to give all the users the permission to do CRUD in the images. So you can just click on add roles and select individual users. If you want to give some users only the permission, but I wanted to give it to all users. So I just selected that and it just gave the permission to all of them. So this was one of the issues. So make sure you are aware of that. And now in the auth, you can see the user is being registered. You can work more on it if you want to build this application a little bit more complex, which I highly, highly recommend. We tried with that. Then in the database, we can just check out this is one post. I tried to have that. This is the post. So if I click on this YouTube and the blog, this is my first post. This is my first post title, content. I told you that the content is being stored in the HTML. So all your CSS, colors, everything is stored like this. That's why we used the React parser. A featured image, only the ID is getting us. Status is active and the user ID that we are storing. So pretty basics, how things are being done. Make sure you are aware of it. Make sure you try more of it. In the settings, I'll also mention that, hey, I actually said that all the users can actually do the CRUD operation with this document. So make sure this permission is also enabled. So in this entire application, we have seen that how the authentication works, how the database works, how the storage works. I'll try my best to actually have more on functions as well. But in case you didn't notice that on the App Right channel, one of my friend Dennis, he's creating a couple of videos on the official App Right channel about using functions in the App Right that are pretty cool. So go ahead and check them out in case you have some time. But this was all the application that I had. By the way, I will push the entire source code of this application so that you can match it, you can try it on my GitHub as well. Feel free to check out my GitHub, the entire code for the entire React course, plus this mega project is available for all of you. If you still find any issue, reach me out on my Discord or Twitter or Instagram, wherever you feel active, I'm pretty active on all social media. Reach me out, I'll try my best to create more videos if you find something that this was not clear, just reach me out, I will help you to understand it much, much easier way. I hope this video has, this entire project has given you some insight about how complex a real world application can be. A couple of things which are still missing in this application, which I think you can work on with this, is if I go ahead and say, all post ad posts are working fine, in case when I click on add post, there is a little bit CSS issue. So this featured image active was supposed to go here, I'll try to fix this up, that's one thing. And apart from that, if I go ahead and see all post, in this all post, these edit and delete button supposed to go over the image, probably I missed something. A rest of them are pretty easy and okay, so we can see that it's working nice. Let's try to log it out. Once I click on the log out button, it redirects me onto the login page, but it's up to you. We don't have still any logo, I would highly recommend you to try this out. The reason that I am actually leaving this application in a position where you can actually work a little bit more, because no matter how much you see me coding or you follow along with me, there will be bugs, there will be error. And if you add a couple of more features from your side, that actually makes you a good programmer. So try to add a little bit more or try to convert this application into a social media, because it's also same. Images are there, posts are there, so try to do build something like that. And this will give you a lot of confidence. If you face any trouble, reach me out on Twitter or on Discord, I would be super happy to help you out. Watch out for more of my videos and courses. I'm constantly making more courses, more videos on cutting edge, bleeding edge tech, as well as rock solid text as well, like Python's and JavaScript as well. And if you have some suggestions, do reach me out. I would love to have your feedback. That's it for this video. Hope you have enjoyed. It was a great, fantastic journey with all of you. I hope you will share the entire series so that I get more eyes. It would be really, really great if you can share on LinkedIn, but if you don't want to, that's okay, that's fine too. Anyways, that's it for this video. Let's catch up in the next one.
