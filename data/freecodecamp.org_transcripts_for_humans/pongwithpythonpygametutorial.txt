With timestamps:

00:00 - improve your Python and Pie game skills
00:02 - by building the classic pong game but
00:05 - with some new features Rohan created
00:07 - this course and it's a great project for
00:09 - beginners you will learn how Pi game can
00:12 - be leveraged to create engaging games
00:13 - with Unique Mechanics let's get started
00:17 - welcome to the Spy game ponkos this is
00:20 - where we modify the traditional pong
00:21 - game by adding in multiple new features
00:23 - such as increasing the movement speed at
00:25 - times all the way up to cloning the
00:26 - objects to confuse the opponent I am a
00:28 - content creator at snds we make videos
00:30 - about machine learning data science and
00:32 - some general programming videos in
00:34 - Python and pygame like this now I do
00:36 - want to mention that this course is for
00:37 - those who have intermediate knowledge of
00:39 - code so if you're able to understand the
00:41 - looping structures such as a y Loop and
00:43 - the for Loop and if you can understand
00:44 - the conditional statements such as the
00:45 - if alif and else then you should be good
00:47 - to watch this video but with that said
00:49 - if you're a complete beginner then you
00:50 - can still watch this video and see what
00:52 - you can write out of it now I will be
00:53 - using visual studio code as my code
00:55 - editor also make sure to install the pi
00:57 - game audio onto your computer I'm not
00:59 - going to go onto that because there's
01:01 - just kind of tutorials out there on how
01:03 - to install the buy game module so I'm
01:04 - just going to presume that you already
01:05 - have it installed now with all that said
01:07 - let's get into the video
01:09 - let's take a quick minute to tell you
01:11 - what Wayne will be covering in this
01:12 - course we will start with going by
01:14 - building the metrics of the original on
01:16 - game where we first create a window and
01:18 - then draw the required objects that is
01:19 - the ball and the paddles and then we
01:21 - will Define the movements for these and
01:23 - then the collisions such as the ball
01:24 - colliding with boundaries or the ball
01:26 - colliding with the paddles after this we
01:28 - will be building our first kind of new
01:30 - element which I'm going to name this as
01:32 - creative angles you will get to know
01:34 - about this in detail when you get to
01:36 - that part of the video then we will be
01:37 - creating two comprehensive brand new
01:39 - elements which I'm going to refer to as
01:41 - Gadget pair 1 and Gadget pair two the
01:44 - first pair will comprise of the smashed
01:45 - element which will smash the ball back
01:47 - onto the opponent and the Flash element
01:49 - which will teleport the paddle up or
01:51 - down to a specific distance and the
01:53 - second pair will comprise of the ball
01:54 - cloning and the paddle cloning which as
01:56 - the name suggests or creates a throne of
01:58 - the respective and then finally we will
02:00 - be adding in the scoreboard on the
02:02 - window followed by the end screen or the
02:04 - winning screen
02:05 - all right let's start with importing Pi
02:07 - game first import buy game and then I'm
02:09 - just going to go ahead and type pie game
02:11 - dot init
02:13 - you will have to initialize the module
02:15 - first before you do anything and now I
02:17 - will Define the width
02:18 - and the height of our window
02:20 - actually a thousand pixels
02:22 - comma 600 pixels and I will Define this
02:25 - inside the initial section
02:27 - and then to create a blank window which
02:30 - I'm going to call as WN you will need to
02:32 - type in pi game Dot
02:34 - display
02:35 - dot set underscore mode
02:38 - and inside this you will have to kind of
02:40 - given a single element which contains
02:41 - the dimensions so I will Define another
02:43 - Tuple inside this and then type in the
02:45 - width
02:46 - command height
02:48 - like that so what this does is it
02:51 - creates a blank IDM window with a width
02:53 - has thousand pixels and the height has
02:55 - 600 pixels
02:58 - so when you talk about the pi game
02:59 - window in particular let's say that this
03:01 - is a dummy window for our pygen window
03:03 - the initial position is always going to
03:06 - be here so this position will be called
03:07 - as 0 comma zero but then as we progress
03:10 - towards the right the x-axis is going to
03:12 - increase and then when you progress
03:13 - towards the downside the y-axis is going
03:15 - to increase so this position will be the
03:18 - maximum in terms of the y coordinate so
03:20 - when you go towards the right this is
03:21 - going to be thousand comma zero because
03:23 - this is the maximum point of the x-axis
03:25 - and as you go down this will be zero
03:27 - comma 600
03:28 - and then as you move towards the right
03:30 - this is going to be the maximum point
03:31 - that is 1000 comma 600. this is really
03:34 - useful when we want to define the
03:36 - positions of the objects that we want to
03:38 - draw on the screen and also the
03:39 - scoreboard on the top and left hand side
03:40 - and on the top right hand side as well
03:43 - now what I will do is create a main game
03:45 - Loop this is where all of our animations
03:47 - the visual effects and the Motion
03:48 - Graphics will be happening and they will
03:50 - be happening constantly to the updated
03:52 - latest statements so to do this I will
03:54 - Define a while loop and rather than
03:56 - keeping this as true like this I will
03:59 - Define a variable known as one and then
04:01 - make this true and give it over here so
04:04 - that if at some point we want to break
04:05 - out of the game or just toaster but no
04:07 - we can just simply make one as false so
04:10 - inside this main game Loop what I will
04:11 - be doing first is I will type in for I
04:14 - in High game
04:15 - dot event
04:18 - dot get
04:22 - so the way I like to explain this
04:24 - statement is whatever you do inside a pi
04:26 - game window let's say you're trying to
04:27 - press the quit button to exit the window
04:29 - Pi game will identify this Spy game will
04:32 - know that you have pressed the quit
04:33 - button but then it won't know what to do
04:35 - after that so what it does is let's say
04:37 - if the user has pressed the quit button
04:39 - then iGame will store this in
04:41 - pygame.event and what we're doing here
04:43 - is getting all of those events one by
04:45 - one and storing Sni like for example not
04:48 - only the quit button let's say the user
04:49 - is trying to press the up Arrow key to
04:51 - move the paddle up or the down arrow key
04:53 - to move the pedal down all of them all
04:55 - of the events are stored in eigen events
04:57 - and we're getting them one by one and
04:58 - storing it in I so that we can check for
05:01 - a particular event and take specific
05:03 - actions accordingly like for example
05:04 - when the user press the quit button then
05:06 - we will have to instruct the code to
05:08 - just close the window and break out of
05:10 - the loop or another example is just
05:12 - let's say if the user presses the up
05:14 - Arrow key then we have to make sure that
05:15 - we instruct the code to just move the
05:18 - paddle up when the up Arrow key is
05:20 - pressed
05:21 - I will check in for the quit type so if
05:23 - I DOT type
05:26 - is equal to equal to Pi game
05:29 - not quit
05:31 - this will check for if the user has
05:33 - pressed the quit button and it will
05:35 - return true if they have pressed the
05:37 - quit button and if this returns true
05:39 - then we can simply make run as false
05:42 - now before running this program let me
05:43 - just create another section and call
05:45 - this main Loop
05:50 - now let's run our code and see
05:57 - here you see a blank buy game and now it
06:00 - says High game window and then when you
06:01 - try to close the window
06:03 - it closes nice also there is one more
06:05 - thing that I want to mention
06:08 - is that you see here that it says eigen
06:10 - window you can just change this to
06:12 - whatever you want
06:15 - by just typing in pi game
06:18 - dot display dot set
06:22 - underscore caption and inside this you
06:24 - can type in whatever you want I will
06:25 - type in wrong but that's it like that
06:28 - now when you run this code
06:34 - you see there is pong but better over
06:36 - here nice
06:38 - now let's get started with drawing the
06:40 - objects and to draw anything inside the
06:42 - pi game window it will generally use the
06:44 - statement known as High game
06:46 - dots draw and then the shape that you
06:50 - want to draw in our case first we will
06:51 - draw the ball which will be Circle and
06:53 - inside this first you will have to
06:54 - mention where are you going to draw the
06:56 - circle which will be the window and then
06:58 - you will have to mention the color which
06:59 - will be blue for my case
07:01 - and then you will have to mention the
07:03 - dimensions or the positions of where you
07:05 - want to draw the ball which we will
07:06 - Define later I'm just going to call it
07:08 - ball X and well why
07:10 - and then we will also have to mention
07:12 - the radius
07:13 - so we will have to Define all of this so
07:16 - what I will do is create a color section
07:18 - in fact
07:20 - let me just do this right around here
07:24 - colors and first Define the blue color
07:26 - which will be in the RGB format which is
07:29 - going to be 0 comma 0 comma two five
07:32 - like that now I will Define another
07:34 - section for the ball
07:36 - and this will contain first radius
07:39 - which will be 15 pixels and then the
07:41 - balls x coordinate
07:47 - which will be
07:49 - the entire width
07:51 - by 2 minus the radius
07:55 - and similarly for the height
07:57 - right by two
08:00 - minus the radius like that
08:03 - the reason why I'm doing this is
08:04 - actually when you type in width by 2 the
08:07 - ball's radius or the center of the ball
08:09 - is just going to be placed towards the
08:11 - right rather than the center of the
08:12 - screen so when you type in y radius what
08:16 - you see is the ball will be placed at
08:18 - the exact center like we wanted to and
08:20 - similarly for the height as well so this
08:22 - way we keep the ball at the exact center
08:24 - which is what we want to achieve
08:27 - now when you run this code you should be
08:29 - able to see a ball
08:34 - and we don't so why do you think this is
08:37 - happening well because this statement is
08:39 - given to the buy game window but then it
08:41 - is not being executed because this is
08:43 - not updated to the latest statements so
08:45 - to do this what I will do is to type in
08:47 - iGame Dot display dot update so this way
08:53 - the game is updated the latest
08:54 - statements and it is being visually
08:56 - available as well so now when you run
08:58 - this code you will be able to see the
09:00 - ball
09:03 - nice
09:05 - and then similarly for the paddles we
09:07 - will type in pi game
09:08 - dot draw Dot backed and inside this we
09:12 - will have to mention where do we want to
09:14 - draw this rectangle which will be the
09:15 - window
09:16 - and then the color which will be red
09:19 - and then rather than just giving in the
09:21 - dimensions like we did for the circle we
09:23 - will have to type in a statement as Pi
09:24 - game
09:25 - Dot rect
09:27 - and then we will have to mention the
09:28 - position in terms of the x coordinate
09:30 - and then the what coordinate followed by
09:32 - the paddle's width and the battle side
09:33 - so for the positions we will have to do
09:36 - it two times one for the left and one
09:38 - for the right the battles
09:40 - X and then left hand side battles
09:44 - white coordinate and Then followed by
09:46 - the battle width which will be same for
09:47 - both
09:49 - Commander pedals height
09:54 - I will copy the statement
09:57 - and then paste it over here
10:02 - and then change this to right like that
10:07 - now we will have to Define each and
10:09 - every single thing
10:10 - so let's do this first I'm just going to
10:12 - define a section for the paddles
10:15 - which will ever call as paddles
10:17 - dimensions
10:19 - and inside this first let me just Define
10:21 - the paddle's width and the height which
10:22 - will be the same for both paddle bit
10:26 - manifold height
10:29 - I will call this 320
10:31 - and 120. and then in terms of the y
10:34 - coordinate both the battles are just
10:36 - going to be same so first I will Define
10:37 - titles y coordinate
10:42 - left paddles
10:44 - why
10:45 - which will be equal to right spell why
10:50 - which will be
10:52 - the entire height
10:53 - weight so minus the battle height
10:57 - 2.
10:59 - like that and that thought for the
11:01 - paddles x coordinate
11:03 - but the left will be
11:07 - and I will also Define simultaneously
11:09 - white as well
11:12 - for the left hand side it's just going
11:14 - to be 100 minus the paddles width
11:19 - by two
11:21 - and then but for the white will be the
11:22 - entire width
11:24 - minus this same so I'm just going to
11:27 - copy this
11:29 - and then put this inside parenthesis
11:31 - like this
11:33 - and I will also have to define the red
11:35 - color which will be
11:38 - in the RGB format once again so
11:41 - 255
11:43 - comma zero comma zero like that
11:46 - now we should be able to see two paddles
11:48 - on the screen along with the ball
11:50 - we do nice
11:53 - okay let's get started with the
11:54 - movements and as I did before I'm just
11:56 - going to start with the ball and the way
11:58 - I'm going to go with this is by creating
11:59 - a variable known as false velocity in
12:02 - terms of the exponent as well as for the
12:04 - y coordinate
12:06 - like that and then keep them to be one
12:09 - pixel comma one pixel so what I'm going
12:10 - to do here is add this velocity
12:12 - constantly to the original position of
12:14 - the ball so that the position
12:15 - continuously changes because we're going
12:17 - to put that inside the main gate Loop
12:18 - and to dehumanize this will appear as
12:20 - still the ball is moving so hopefully
12:22 - that makes sense when you look at the
12:24 - color when you look at the output it
12:25 - will make much more sense so let me just
12:27 - create the movement section
12:29 - and before that it will put this one
12:31 - into objects
12:34 - what's this one
12:36 - and also I have made this so that you
12:38 - can read the entire code like this
12:40 - rather than having them like this I will
12:41 - keep them like yeah so what I will do
12:44 - now is just add in the velocity to the
12:46 - original balls position so balls X will
12:49 - be
12:52 - um velocity X similarly dot by the Y
12:57 - as well
13:01 - now we haven't defined the bounces or
13:03 - the collisions itself but then I want to
13:05 - see if the ball is making some sort of a
13:07 - movement on the screen so let's just run
13:08 - a currency
13:14 - okay so first we see that the ball is
13:17 - moving but then it's leaving trails
13:19 - rather than just moving its original
13:20 - position so this can be simply corrected
13:22 - with a single line of code
13:25 - which I will explain in a second but
13:26 - first let me just type out whatever I
13:28 - want to
13:29 - whenever Phil
13:30 - enable
13:31 - and then the black color
13:35 - you find the black it's big zero or flat
13:37 - zero of green and zero of blue like that
13:39 - all right so here we add the initial
13:41 - positions of the object and we have also
13:43 - written down the statements that be used
13:45 - to update the positions of the ball so
13:47 - we expect the ball to kind of move like
13:50 - this because we're updating the
13:51 - positions and this updated position is
13:53 - used by the pygen draw statement so that
13:55 - it draws onto the screen in the new
13:57 - positions well it's mostly true in this
13:59 - case but it's mostly correct but there's
14:01 - just one catch here that is each time
14:04 - the new position is updated and each
14:07 - time pygen.raw statement draws on the
14:09 - window the new positions it doesn't
14:11 - erase the already existing position so
14:13 - what happens is
14:15 - this
14:18 - we see that the ball is being drawn onto
14:21 - the screen on top of the already
14:22 - existing wall position so is it a
14:24 - humanized this appearances so the ball
14:26 - is leading Trails so the way we correct
14:28 - this is by using the window.fill
14:31 - statement what this does is each time
14:33 - after we start the loop or end the loop
14:35 - we just fill the window with the black
14:36 - color and then draw the positions once
14:38 - again so that the already existing
14:40 - positions are pre-raced and the ball's
14:42 - new position is being drawn onto the
14:43 - screen and this appears as so the ball
14:45 - is moving to the human eyes so let's
14:46 - have a look at that
14:48 - what you see around here is the already
14:50 - existing position is being erased in the
14:52 - new position is being drawn each and
14:53 - every single time the loop is running
14:59 - now when we run this code we should not
15:01 - be seeing the ball leaving trails
15:07 - and yeah if the ball moves and it goes
15:09 - up the screen so what I'm going to do
15:10 - next is Define the bounces as to that if
15:13 - the ball hits the top boundary or the
15:15 - bottom boundary then we have to make
15:16 - sure that the ball is bouncing and then
15:18 - moving so just recall that the top
15:21 - boundary right here y position over here
15:23 - is going to be zero and then over here
15:25 - it is going to be 600.
15:27 - so first let me just reduce the velocity
15:30 - a little bit to make it
15:32 - 0.7
15:34 - and then 0.7 over here and now let's
15:36 - define a section named
15:38 - balls movement controls
15:44 - like that
15:45 - and then inside this I will use
15:47 - conditions to check if the ball is
15:49 - trying to go off the screen from the top
15:50 - side or the bottom side so if the balls
15:53 - like one is less than error equal to
15:56 - zero plus the radius because we're
15:58 - checking if the ball's end point is
16:00 - trying to touch the top boundary rather
16:02 - than the center so that's why we add in
16:04 - the radius like this and then similarly
16:06 - for the y coordinate in terms of the
16:08 - height so if volts white coordinate is
16:10 - greater than or equal to the entire
16:12 - height of the window this time minus the
16:14 - radius because again we're checking it
16:16 - for the end point rather than the enter
16:19 - if any of these conditions is true then
16:21 - we just basically reverse the direction
16:22 - of the fall in terms of the y coordinate
16:24 - alone
16:28 - like this so This Way the balls white
16:30 - coordinate Direction it's just changed
16:31 - but the magnitude stays the same so when
16:33 - you run this code
16:38 - we see that the ball bounces and it goes
16:39 - off the screen which is actually what we
16:41 - want so what I'm going to do next is to
16:43 - check if the ball is going offset the
16:45 - screen on the right hand side or the
16:46 - left hand side and if it does then we
16:48 - will have to reset the game and this
16:49 - time layer 2 will get the serve
16:52 - so this time we will have to manipulate
16:54 - using the x-axis so let's just stack for
16:56 - if the balls x coordinate is greater
16:59 - than or equal to the entire width
17:01 - minus the radius again similar reasons
17:04 - then
17:06 - we will have to retrieve the initial
17:07 - positions
17:09 - I will copy this
17:11 - and then paste it here
17:14 - and just change the world's velocity
17:20 - the reverse Direction and do the same
17:22 - for y as well
17:28 - like that so this time if the ball tries
17:30 - to go off of the screen then it resets
17:32 - to the center and then this time layer 2
17:34 - will get the serve and if the similar
17:36 - thing happens to the left-hand side
17:38 - player
17:39 - which is
17:41 - if voltex is lesser than or equal to
17:42 - zero which is the initial position plus
17:44 - the radius
17:46 - then again we will have to retrieve the
17:49 - initial position as well as that would
17:50 - initial
17:52 - velocity as well so I'm just going to
17:54 - copy this
17:55 - and paste it here now when you run this
17:58 - code
18:01 - we see that the ball is going to bounce
18:03 - and go off the screen similar thing
18:04 - happens here and then this goes on
18:06 - forever nice
18:08 - now let's start to make the paddles move
18:10 - based on the user's given input so first
18:13 - let me just Define the part of velocity
18:15 - right pedal below
18:18 - and then left parallel
18:22 - which will be zero as of now
18:25 - and then first I will check for the
18:27 - user's inputs so
18:29 - lfi DOT type is equal to High game
18:32 - dot key down
18:34 - this signifies to check if any of the
18:36 - keys on the keyboard is being pressed
18:38 - and it will return true based on that if
18:41 - it does then we will have to check what
18:43 - key is it so we will type in I dot key
18:48 - will be highgram dot k underscore up
18:52 - this is kind of a notation to signify
18:53 - you to check if the up Arrow key is
18:56 - being pressed and if it is then
18:59 - white battle velocity has to go up
19:05 - so we will make it to be
19:07 - negative 0.9 so this way we're
19:09 - subtracting the y coordinate position
19:11 - from the paddle so that it goes up like
19:13 - this
19:14 - and then we will do that similarly for
19:17 - the down arrow key as well
19:20 - High game
19:22 - okay underscore down
19:26 - again kind of a notation to signify the
19:28 - down arrow key is being pressed or not
19:30 - and if it is then right paddle velocity
19:33 - will be 0.9 this time we are increasing
19:36 - the y coordinate so that the paddle goes
19:38 - down
19:38 - similarly we will do that for the left
19:40 - hand side as well
19:42 - if I dot key
19:43 - equal to equal to and I will use the
19:45 - wasd controls because that is kind of
19:48 - standard annotation for the left hand
19:50 - side
19:50 - to Pi gan
19:53 - node K underscore W to check if the
19:56 - battle is trying to go up and if it is
19:57 - then
20:00 - left battle velocity will be negative
20:02 - 0.9 and then similarly
20:05 - we will check if
20:07 - idle key
20:11 - yes buy game
20:13 - dot k underscore a
20:17 - actually s works
20:19 - then we can make left hand side velocity
20:23 - to be 0.9 like that now I will add this
20:26 - to the movements
20:30 - y
20:32 - less equal to
20:34 - right pedal velocity and then similarly
20:36 - left file y
20:39 - Plus
20:40 - left battle velocity
20:44 - now when actually there's one more thing
20:46 - that I had to do to check if normal keys
20:48 - are being pressed we can check
20:52 - rather than using alif we will use if I
20:55 - DOT type
20:56 - is equal to equal to High Gain or key up
21:00 - which checks if normal further keys are
21:02 - being pressed or the already pressed key
21:04 - has been taken off if that's the case
21:06 - then we can make Auto velocity to be
21:08 - zero again
21:10 - velocity will be zero and then we will
21:12 - do that or
21:14 - a y coordinate so left-hand side battle
21:16 - as well now when you run this code you
21:17 - should be able to move both the paddles
21:19 - with the proper control
21:22 - so it moves nice and then this as well
21:24 - excellent
21:25 - now before getting to collisions I just
21:27 - want to make sure that the paddle
21:29 - doesn't go off the screen like this so
21:31 - to do this let's just create a section
21:33 - known as paddles movement controls and
21:35 - over here what I will do is first I will
21:37 - check if the paddle is trying to go
21:39 - beyond the boundaries so first let's
21:40 - type in for the left hand side adult
21:43 - if it's greater than or equal to the
21:45 - entire height minus the paddle height
21:48 - then we just keep it there
21:51 - equal to the entire height
21:54 - minus the battle height
21:57 - and similarly if it tries to go beyond
21:58 - the boundaries in terms of the y
22:00 - coordinate at the top side if left hand
22:02 - side paddle y
22:04 - is less than or equal to zero
22:07 - let me just keep it there
22:09 - that's battle y
22:11 - will be zero now we will do this for the
22:13 - right hand side by just copy pasting
22:15 - this
22:16 - Ctrl Z
22:19 - paste this here and then change this to
22:21 - right
22:29 - now let's run our currency
22:35 - and we see that the paddle is not going
22:37 - off the screen which is exactly what we
22:38 - wanted to happen
22:39 - over here as well nice now let's get to
22:42 - the collisions
22:44 - so the idea here is just very simple if
22:47 - the ball's position is somewhere within
22:49 - the range of the paddle's position in
22:50 - terms of the x coordinate and in terms
22:52 - of the y coordinate then we just have to
22:53 - make sure that the ball's Direction
22:54 - reverses only in the terms of the x
22:56 - coordinate
22:58 - again here we are in the initial
23:00 - positions and the first thing that I
23:02 - want to show you is whenever you type in
23:03 - left battle X or white battle X whenever
23:05 - you want the first initial positions of
23:07 - the battle it is always going to be on
23:09 - the top left hand side which is
23:10 - indicated by the small yellow circle
23:12 - when you actually want to access the
23:13 - initial position to the right paddle you
23:15 - just type in right paddle X and here as
23:17 - well the small yellow circle is
23:19 - indicating that so what we want is the
23:20 - Collision to happen on this face of the
23:23 - paddle that is on the right hand side
23:25 - face of the left-hand side paddle so
23:27 - what we have to do is also adding the
23:29 - paddle bit so that the position is now
23:31 - on to the phase where we want whereas
23:33 - when you get to White's battle we don't
23:35 - actually need to do that let me just
23:36 - show you here
23:38 - we see that the collisions has to happen
23:39 - on the left phase of this battle so we
23:42 - don't need to add in the paddle width
23:43 - whereas we do then the cursor is going
23:44 - to move towards the right hand side
23:45 - which is not actually what we want
23:48 - first I just want to cut this and paste
23:50 - it above movements
23:53 - paste it here
23:55 - and then Define collisions over here
24:02 - now let's just start by checking if the
24:04 - ball's X position is within the range of
24:06 - the battle's X position
24:08 - this shouldn't be greater than or equal
24:10 - to left battle X
24:14 - but then it should be less than or equal
24:16 - to the left battle X Plus
24:18 - the actual paddle of it
24:21 - like that
24:23 - then we will also have to make sure that
24:25 - the ball's y position is also on the
24:27 - range of the paddles y so let's add a y
24:31 - should be less than or equal to
24:34 - balls y
24:35 - which should be less than or equal to
24:40 - plus the battle type
24:43 - I did not
24:44 - and what we will do is first we will
24:46 - keep the ball at The Retreat phase or
24:48 - the edge of the paddle itself and then
24:51 - reverse the direction
24:52 - so balls X
24:55 - will be
24:58 - left battle X
25:00 - Mr battle whipped
25:03 - and then we reverse the direction in
25:05 - turn to the x button
25:07 - into equal to
25:10 - negative one we will do that for the
25:12 - right hand side battle as well but
25:13 - before that let me just run our code and
25:15 - see
25:16 - if the Collision is actually working for
25:17 - the left hand side
25:23 - it does nice so we just have to do that
25:25 - for the right hand side battle as well
25:26 - we will do that
25:29 - I'll just copy this
25:33 - and paste it here
25:36 - then change this to right first
25:48 - and then we won't need this anymore
25:50 - because we're just keeping it at the
25:52 - left face of the right hand side battle
25:53 - so we just keep it as it is and then
25:55 - reverse the direction now when you run
25:57 - our code and see
26:02 - we see that both the paddles are making
26:04 - collisions properly and
26:06 - we have Reflections nice
26:09 - so this is creative angles so so far
26:12 - we've kept the Velocity in terms of x to
26:14 - be equal to Velocity Y and we would
26:16 - always end up with the direction like
26:17 - this each and every single time the game
26:19 - resets and this is indicated by this
26:20 - green line so the ball would make a
26:22 - movement Direction like this and then it
26:24 - resets to the center now this time let's
26:27 - say I'm going to add in another
26:28 - statement let's say I'm going to keep
26:29 - velocity in terms of x to be in two
26:31 - times the velocity Y and then we would
26:33 - get an angle like this so the ball would
26:35 - move in this direction now again I will
26:37 - add in another statement and this time I
26:39 - will keep velocity y to mean two times
26:40 - velocity X and we will end up with an
26:42 - angle like this which is again indicated
26:44 - by this green line now the ball would
26:46 - make the movement like this
26:49 - and what I'm going to do is also do this
26:51 - for the top side as well so that in
26:52 - total we get six angles and then provide
26:55 - the machine the choice to choose first
26:57 - the ball should move on the top side or
26:58 - should it move on the bottom side and
27:00 - then change the respective angle of the
27:02 - three choices that is provided so let's
27:04 - take a look at the code implementation
27:06 - okay so now we will have to import
27:08 - random import condom and then I will
27:13 - create two new variables
27:15 - one for the direction at which the ball
27:17 - should move we will randomize that with
27:19 - zero and one zero signifying top and one
27:22 - is going to signify a button we will do
27:23 - that for the angle as well I will have
27:25 - three different angles
27:27 - zero will stand for y being 2 times of X
27:30 - and one where X and Y are the same and
27:33 - two where X is two times of Y now we
27:36 - will scroll down all the way to
27:38 - where we reset the game so right around
27:40 - here after retrieving the initial
27:42 - positions of the ball
27:44 - we will now have to randomize where the
27:46 - ball will move either the top side or
27:48 - the bottom side so first let's create a
27:49 - variable inside this and use the random
27:52 - Choice option
27:54 - to get a random choice
27:56 - of the direction
27:58 - and similarly we will do that for angle
28:00 - as well
28:01 - random.choice
28:05 - of angle like that
28:09 - now I will first check for the direction
28:11 - if Direction equal to zero that means
28:13 - that the ball will have to move top side
28:15 - so we have to keep the Velocity in terms
28:18 - of y coordinate to be negative but first
28:20 - I will also check for the angle if angle
28:23 - equals a zero
28:24 - then that means Y is going to be 2 times
28:26 - of x
28:27 - so ball velocity y
28:30 - current of all velocity X
28:34 - will be negative 1.4
28:38 - comma 0.7
28:40 - followed by if angle equal to one
28:45 - then we can have both of them to be same
28:49 - well velocity X
28:51 - will be negative 0.7 comma 0.7 like that
28:56 - and if the angle is equal to 2
29:03 - then ball velocity y comma ball velocity
29:06 - X
29:07 - will be of the software negative 0.7
29:09 - comma 1.4 like that
29:12 - now I will copy this and do that for the
29:15 - downward direction as well where
29:16 - Direction equals one
29:18 - I will paste it right around here
29:20 - I'm going to make direction to be one
29:23 - and then take off all of the negative
29:25 - signs
29:29 - like that and now since we randomized
29:32 - the direction in terms of top side or
29:34 - bottom side we won't need this a more
29:36 - whereas we will have to have ball
29:37 - velocity X
29:40 - cleaned it off
29:42 - and for the right hand side if the ball
29:44 - goes out of bounds from the left hand
29:46 - side so the ball has to move towards the
29:47 - right hand side so we can just copy this
29:49 - once again right round from here
29:52 - all the way down here
29:54 - Ctrl Z
29:57 - then I will paste it here
29:59 - and we don't need to have in this
30:01 - statement because we want the bulbs
30:02 - directly to move towards the right hand
30:04 - side rather than changing the direction
30:05 - towards the left so now when we run our
30:08 - code we should get three different
30:09 - creative angles each time the ball is
30:11 - reset so we run our currency
30:16 - let me see the first angle we see the
30:18 - second one and we see the third really
30:19 - nice
30:21 - I just want to show you the prompts of
30:23 - how the new element that we're trying to
30:24 - add into the game should look like it
30:26 - says active which means that it has to
30:28 - be manually activated by the user and it
30:31 - says once activated the next condition
30:32 - of the ball onto the paddle should
30:34 - reflect the ball back at 3.5 times the
30:37 - original speed as a surprise to the
30:38 - opponent this means that this is kind of
30:41 - a smash element and this has to be
30:42 - activated manually by the user
30:45 - this will be the logic that we will be
30:47 - implementing for the gadget so let's say
30:49 - that this is a given position and as
30:51 - soon as the pole comes to the bottom
30:52 - boundary we just use the statement to
30:54 - reflect the Bolt's Direction and it
30:56 - moves up so what happens here is the
30:58 - ball approaches towards the battle and
31:00 - as soon as it comes in contact with the
31:01 - paddle we other than just multiplying it
31:04 - with negative one we multiply it with
31:06 - negative 3.5 this way this negative sign
31:09 - ensures that the ball is reflected back
31:11 - but then this 3.5 ensures that the ball
31:13 - is moving very fast and it's a price the
31:15 - openness so that will be the logic that
31:17 - we will be working on for this gadget
31:18 - let's see how it works
31:21 - so for the gadgets first I will move
31:23 - outside the main game Loop and create a
31:25 - section for the gadgets
31:28 - like that
31:30 - also make sure to have some space here
31:33 - and over here what we can do is first I
31:36 - will create the activation variable to
31:38 - check if the gadget is being activated
31:40 - or not so left underscore Gadget
31:43 - will be equal to right underscore Gadget
31:47 - which by default is turned off
31:50 - if the gadget is turned on then this
31:52 - will become one for the respectives
31:54 - now I will create a variable for the
31:56 - maximum amount of gadgets so that will
31:57 - be left Gadget remaining
32:03 - which will be equal to the right
32:05 - Gadget remaining
32:09 - which will be 5 or my case you can have
32:12 - how much ever maximum Gadget as you wish
32:16 - now we will have to trigger the
32:18 - activation as an if a button is pressed
32:21 - then we will have to make sure that the
32:22 - gadget is being activated so to do this
32:24 - first it will go to I dot key faction
32:27 - over here first I will do for the arrows
32:30 - area if I dot key
32:34 - equals or equal to Pi game
32:37 - dot right
32:40 - that is the right arrow key and we will
32:41 - also have to make sure that the gadget
32:43 - remaining is
32:44 - greater than zero right the adjective
32:47 - remaining should be greater than zero
32:49 - then we can have the right Gadget
32:52 - to be activated
32:54 - equal to one like that and
32:57 - I will move down
33:00 - or the left hand side paddle
33:02 - if I dot key
33:05 - is equal to
33:08 - High game
33:09 - dot KD
33:14 - that is a right arrow for the asdw keys
33:18 - then and also I have to make sure that
33:20 - enough scattered remaining is greater
33:22 - than one left yard
33:27 - remaining is greater than zero
33:30 - then we can make the left schedule to be
33:33 - one that is the activated case
33:38 - equals one like that now I will scroll
33:41 - down and create a new section right
33:44 - around
33:44 - here
33:48 - Gadgets in action
33:53 - so we will first Define what the gadgets
33:55 - have to do it's just the same thing if
33:57 - the ball is within the range of the
33:59 - battle then rather than just reversing
34:01 - the direction alone we will reverse the
34:03 - direction in 3.5 times the original
34:05 - speed so I will copy this
34:08 - and first check if left Gadget is
34:11 - activated or not if left Gadget is equal
34:14 - to one
34:15 - then I will paste this
34:20 - and then rather than having this as
34:22 - negative one I will have this to be
34:23 - negative 3.5
34:26 - and now I will make the left Gadget
34:29 - to be zero
34:31 - and also
34:33 - left Gadget remaining minus equals one
34:36 - because we have to negate one each time
34:39 - our Gadget is being used so now we will
34:41 - do that for the right hand side Gadget
34:43 - as well
34:47 - if right Gadget
34:50 - and just scroll down a little bit equal
34:52 - to one
34:54 - and then we can copy this
34:59 - and paste it right around here
35:03 - like that
35:08 - and have this to be negative 3.5
35:11 - followed by right Gadget making it to be
35:12 - zero once again
35:17 - and we're doing this to make sure that
35:19 - once the reflection has happened once
35:22 - the bowl has been returned in 3.5 times
35:24 - the original speed the gadget is no
35:26 - longer effective they will have to
35:27 - activate it once again to make the same
35:30 - movement once again
35:31 - so rights Gadget remaining will again be
35:38 - negative equals one we will have to
35:40 - negate one so that the number of
35:43 - remaining gadgets is reduced each and
35:45 - every time they use the gadgets so now
35:47 - let's run our code and see if the gadget
35:48 - is working
35:52 - this is the original reflection speed
35:54 - now I've activated the gadget
35:57 - and it does really nice
36:00 - also the prompt says that as a slight
36:02 - indication to the opponent once the
36:03 - gadget is activated there should be a
36:05 - small circle inside the battle
36:07 - so to do this it's just very very simple
36:10 - we will go down to the objects section
36:12 - and over here
36:14 - let me just do this and
36:17 - check if left Gadget is first activated
36:19 - or not left Gadget equals one
36:23 - then we will have to draw something else
36:24 - I N Dot
36:26 - Raw
36:28 - but Circle
36:31 - and window
36:34 - white color we haven't defined white we
36:36 - will do that and then we will have to
36:39 - keep the ball within the rectangle that
36:41 - we created so we will do that by typing
36:44 - in left battle X
36:49 - plus 10
36:51 - and similarly in terms of Y as well left
36:53 - Arrow y
36:55 - plus 10 like that
36:58 - followed by the radius it's just
37:00 - radius is going to be let's say four it
37:03 - has to be a small circle
37:05 - and we will do that for the right hand
37:07 - side paddle as well if right Gadget is
37:09 - activated that means it should be one
37:12 - then Pi game dot draw in fact let's just
37:14 - copy this
37:18 - control Z
37:19 - paste it here
37:21 - and then change this to be
37:24 - right battle X and over here as well
37:29 - like that now we had to define the white
37:31 - colors I'm just going to go into the
37:32 - colors section
37:36 - and over here I will Define for white
37:39 - white will be
37:41 - 255 comma two five five comma two five
37:44 - five
37:45 - we will now run our currency if a slight
37:47 - indication circle is being drawn onto
37:49 - the paddle if the gadget is activated
37:54 - and we do we do for the right hand side
37:56 - battle now I'll do this for the left
37:58 - hand side as well
37:59 - yep it does work and once the Collision
38:01 - happens it goes off nice so the prompt
38:04 - for the flash Gadget says that active
38:06 - which again means that has to be
38:07 - manually activated by the user and it
38:09 - says immediately after activation the
38:11 - pattern should teleport itself towards
38:12 - the ball's current position in terms of
38:14 - the y coordinate
38:16 - the logic for the flash element is just
38:18 - very very simple let's take this for
38:20 - example the ball is approaching
38:22 - downwards as well as the battle but in
38:23 - some case if the battle is unable to
38:25 - reach the ball and if the gadget if the
38:27 - splash Gadget is being activated then we
38:29 - simply use this statement that is we
38:31 - just change the battle's y coordinate to
38:33 - Bear the balls while coordinate is and
38:35 - the battle teleports itself to the balls
38:37 - but what in it like this so let's take a
38:40 - look at the code implementation and see
38:41 - if this works
38:43 - now for the second Gadget we will check
38:46 - for the input from the user first
38:48 - Right Round Here
38:52 - if I dot key
38:54 - equal to
38:56 - highgame dot left this time
38:59 - okay left the left Arrow key
39:04 - and also make sure that right Gadget
39:06 - remaining is greater than zero
39:10 - then we make white Gadget
39:12 - 72.
39:15 - which signifies for the second Gadget we
39:17 - will do that over here as well if idle
39:20 - key
39:22 - equal to
39:24 - highgame dot a
39:28 - okay and let's go a like that
39:31 - and we will also have to make sure that
39:32 - the left Gadget remaining
39:36 - is greater than zero Omega bar
39:40 - then left Gadget
39:43 - will be two in this case now we will go
39:46 - down to the gadgets and action section
39:48 - and over here we will check if
39:52 - left Gadget
39:55 - two
39:56 - then we just make the left battle y
40:00 - that is the position of the paddle in
40:02 - terms of the y coordinate
40:05 - to be the ball's y coordinate itself
40:08 - like that and now we will have to make
40:10 - the left Gadget to be zero
40:14 - and also
40:16 - subtract a number
40:21 - from the number of gadgets remaining we
40:23 - will do that for the right hand side
40:24 - paddle as well
40:26 - if right
40:28 - we won't use Alice
40:30 - Alice
40:31 - right Gadget
40:34 - equal to two
40:39 - then make white paddle y
40:43 - to be equal to the both y coordinate
40:46 - like that make right Gadget to be zero
40:52 - and also
40:56 - subtract a number from the number of
40:58 - gadgets remaining like that
41:00 - let's run a code and see if the other
41:02 - Gadget is working as well when we press
41:04 - the left Arrow key and it does really
41:06 - nice we will do that for the left hand
41:07 - side paddle as well and it works
41:08 - beautifully now when you look at the
41:10 - prompt for the cloning Gadget you see
41:12 - that it's active and once activated the
41:15 - next Collision of the ball onto the
41:16 - paddle should clunk the ball to confuse
41:18 - the opponent one being original and the
41:20 - other one being duplicate
41:22 - this is going to be the logic that we
41:23 - will be putting into this gadget so if
41:26 - we take a look back we have defined the
41:27 - reflection physics for the ball we have
41:29 - also defined the condition physics for
41:30 - the wall and we've also made sure that
41:32 - the movements are working properly so
41:33 - what I'm going to do is just draw
41:35 - another Circle for the entire game and
41:37 - then put this on top of the ball such
41:39 - that it's just hidden behind it and I'm
41:42 - going to put each and every single
41:43 - metric the reflection the collisions and
41:45 - the movements exactly to be the same as
41:47 - for the original ball so that when the
41:49 - gadget is actually put into action let's
41:50 - say that the ball is moving in this
41:52 - direction so both the circles it's just
41:53 - simultaneously going to move in this
41:55 - direction and right as it approaches the
41:56 - paddle let's say in this direction it
41:58 - just does this both goes in different
42:00 - direction in terms of the y coordinate
42:02 - this is just by changing the dummy balls
42:04 - Direction in terms of the y coordinate
42:05 - and then they both Go in different
42:07 - directions one is going to be original
42:08 - and the other one is going to be
42:10 - duplicate meaning that the meaning that
42:12 - if the original ball comes in contact
42:14 - with the other paddle then the
42:15 - reflections happen normally whereas if
42:17 - the player 2 is confused and goes for
42:19 - the zombie ball then it will do nothing
42:21 - and then the game resets giving player
42:23 - one the point that's the whole point
42:25 - having this gadget let's take a look at
42:26 - the code implementation of how this
42:28 - works
42:29 - so we will have to make changes to all
42:31 - of the sections that is on your screen
42:33 - and we will start with from the balls
42:34 - section I'm just going to copy this
42:37 - and then paste it here this is called
42:39 - the creation of the dummy ball X so I'm
42:41 - just going to have namibal access the
42:43 - prefix dummy all X
42:46 - we'll do that over here as well
42:53 - and over here as well nice now we will
42:56 - need to scroll down all the way to balls
42:58 - movement controls and over here the
43:01 - logic is just going to be the same just
43:02 - going to copy the first if condition
43:04 - and then paste it
43:07 - just change the variable name to dummy
43:11 - over here as well
43:13 - and then we will reverse the direction
43:16 - or the meatball velocity like that and
43:20 - then inside this first we will have to
43:21 - retrieve the positions for the dummy
43:24 - ball as well so I'm just going to copy
43:25 - this and paste this here change the
43:27 - variable names to dummy
43:31 - and over here as well
43:33 - and then right inside the if condition I
43:36 - will
43:37 - actually copy this one as well and then
43:39 - paste it chase the names
43:42 - like that and change their names to
43:43 - dummy ball velocity
43:45 - we will do that over here as well
43:48 - similarity equal to
43:50 - this one
44:11 - so after completing all of those you
44:13 - will also have to remember that we have
44:15 - to change the direction in terms of the
44:16 - dummy ball as well so I'm just going to
44:18 - paste this and change the name to dummy
44:20 - like that
44:22 - and now we will have to do the same
44:23 - thing over here as well let's retrieve
44:25 - the positions by copying it
44:28 - and paste it here and then change the
44:29 - names
44:31 - dummy
44:36 - and then get inside the if condition to
44:39 - change the ball velocities
44:52 - we will do that over here as well copy
44:55 - this
45:16 - next we will have to get to the paddles
45:18 - collisions and inside the latest if that
45:20 - is the condition is just going to be the
45:21 - same rather than just changing the
45:23 - direction of the normal ball we're also
45:24 - going to change the direction of the
45:26 - dummy ball as well with the same
45:28 - condition so we're not going to declare
45:29 - that for the dummy ball I'm just going
45:30 - to change the direction directly
45:32 - if the original ball is in the contact
45:35 - of the paddles then this wall the dummy
45:37 - ball also should reverse the direction
45:38 - that's the logic we will have we will
45:41 - also have to do that over here but
45:42 - before that I will also retrieve the
45:43 - positions to keep that at the edge of
45:46 - the pedals
45:48 - hey stairs
45:49 - and then make this to becoming ball
45:53 - like that we will have to do it we will
45:55 - also have to do it over here as well
46:05 - now before getting to the gadgets and
46:07 - action section all that we have defined
46:08 - so far inside the gadgets section is for
46:11 - the gadget pair one we will also have to
46:12 - do this for the second Gadget but before
46:14 - that we will have to ask the user on
46:16 - which gadgets should they start with so
46:18 - what I'm going to do is before doing
46:19 - anything with pi game I will first
46:22 - declare the gadget Band by default is
46:25 - going to be one and then I will ask for
46:28 - the input of the user
46:29 - input enter your choice
46:32 - enter your choice
46:34 - will get a parent
46:40 - and then what we will do is actually
46:41 - first let me just convert this to ins
46:44 - then what we will do is we will first
46:46 - check for the condition if CH equal to
46:48 - one
46:49 - and we keep Gadget pair to V1
46:55 - that is CH equal to two
46:58 - then we will keep Gadget out E2
47:04 - now that's decided we will in fact
47:06 - scroll down to get it in action section
47:10 - and inside this what we will do is first
47:12 - copy all of this
47:16 - right around here and press down
47:18 - because what we will do is
47:21 - first check for the gadget Banner if
47:23 - yeah
47:26 - equal to one then we will execute all of
47:29 - the commands that inside this
47:31 - and if
47:32 - Gadget pad
47:36 - equal to two
47:39 - then you will have to then we will have
47:41 - to start with the cloning section that
47:43 - is ball cloning and paddle cloning so
47:44 - what we will do is as defined earlier
47:46 - we're just going to change the dummy
47:48 - balls Direction when the gadget is
47:49 - actually activated so what we will do is
47:51 - go to
47:52 - the left battles collisions and we will
47:55 - copy this
47:58 - and paste it here
48:03 - now rather than just changing the
48:04 - direction in terms of the x coordinate
48:06 - what we will do is we will also change
48:08 - the direction in terms of the y
48:09 - coordinate so that one ball will move
48:11 - towards the bottom side or the swap side
48:13 - and the other ball will move to the
48:15 - exact opposite intensity y coordinate so
48:17 - when we type in dummy ball
48:19 - velocity y
48:22 - and then multiply that
48:25 - into equal to minus one
48:28 - I forgot to mention one thing
48:30 - the let Gadget should be one
48:36 - then we will execute this condition so
48:39 - we'll put this in tab
48:42 - and then we will make lift Gadget to be
48:44 - zero
48:47 - and then Gadget remaining
48:50 - left Gadget remaining negative equal to
48:54 - one
48:56 - maybe we'll Simon Says stated that for
48:58 - the right hand side Gadget as well
49:02 - um tab if right Gadget
49:05 - equals one
49:07 - we will copy from the right Gadget right
49:10 - paddle collisions
49:16 - paste it here
49:18 - and what we will do is again
49:20 - change the dummy Bolt's Direction in
49:22 - terms of the white coordinate as well
49:24 - instead of equal to minus one
49:27 - and then make right Gadget to make a
49:29 - zero
49:32 - and then also
49:34 - make a white Gadget remaining
49:37 - negative equals one and we will get to
49:40 - movements and also add this for the
49:42 - normal as well
49:44 - tell me about X Plus equal to
49:47 - dummy ball velocity X followed by
49:51 - that mean for y
49:55 - plus two dummy ball velocity y
50:00 - you will also have to draw the circle so
50:02 - what we will do is I will copy this
50:06 - and then paste it over here maybe
50:10 - actually I will paste it over here
50:14 - dummy World section
50:18 - paste it here change this to dummy ball
50:21 - X
50:24 - change the name over here as well
50:31 - change this to like this
50:40 - we also come down to Gadgets in action
50:42 - section also make sure that the dummy
50:44 - ball is reflected back at 3.5 times the
50:46 - original speed as well because even
50:48 - though this comes under the gadget bar
50:49 - one we have to make sure that both the
50:51 - circles are making simultaneous movement
50:53 - so what I will do is
50:55 - just
50:56 - keep the dummy ball velocity X maybe
50:59 - negative
51:00 - 3.5 like that now we'll do this for the
51:05 - right Gadget as well
51:07 - get a statement
51:12 - and then keep this to me dummy
51:17 - like that
51:19 - and now let's run our currency
51:23 - so first we will have to enter our
51:25 - Gadget pair Choice I'm just going to
51:27 - keep this too because we're testing
51:29 - let me press enter
51:32 - we see originally that the ball is going
51:34 - in the same direction and then we're not
51:35 - seeing the second ball but then when you
51:37 - activate the gadget like this you see
51:39 - two walls like that very nice we will
51:42 - check that for the other side Gadget as
51:43 - well
51:45 - if I can hit
51:48 - yeah it's working very good and so here
51:51 - is the prompt of the final Gadget it
51:53 - again has to be manually activated by
51:55 - the user and it says immediately after
51:56 - activation the paddle should clone
51:58 - itself both being original and thus
52:00 - providing more area control
52:03 - logic is again just drawing the second
52:05 - paddle and on top of the original paddle
52:08 - and then make movements normally and
52:09 - simultaneously and whenever the gadget
52:11 - is activated we separate them by let's
52:13 - say 200 pixels by just adding into 100
52:15 - pixels and then it provides us that
52:17 - battle cloning effect so let's take a
52:19 - look at the code implementation of how
52:20 - this works as well
52:22 - again we will have to make changes to
52:24 - the necessary sections and we will start
52:26 - with the pedals Dimensions by creating
52:27 - the Second Battle and this time I'm
52:30 - going to have a prefix of second rather
52:32 - than having this to be dummy because
52:34 - this time the pedal is actually not
52:35 - being dummy like the ball so first I
52:37 - will copy this and paste it here
52:39 - and then add the prefix second
52:48 - and right round here as well
52:50 - like that and it will also
52:53 - create velocities for the
52:56 - second paddle what I will do is copy
52:59 - paste this and
53:00 - have second over here
53:03 - now we will get to the input section and
53:05 - over here we will have to check if the
53:07 - barrel key is being pressed and if it is
53:09 - then not only we should move the
53:11 - original pedal we will also have to move
53:13 - the Second Battle as well which is on
53:15 - top of the original battle
53:17 - Second Battle
53:19 - well
53:20 - geek40 0.9 negative zero nine like that
53:24 - you will do that over here as well
53:27 - second right velocity
53:29 - be closer 0.9 if the down arrow key is
53:33 - being pressed we will do that over here
53:34 - as well
53:45 - now we should get to paddles movement
53:49 - which is right round here and we just
53:52 - simply copy paste this this is just
53:54 - making sure that the paddle doesn't go
53:56 - off the screen either by the top side or
53:57 - the bottom side we will have to do that
53:58 - for the Second Battle as well so I'm
54:00 - just going to paste this and add the
54:02 - prefix second
54:17 - next we will have to get to paddles
54:19 - collisions and over here we can't just
54:20 - simply copy paste the conditions like
54:22 - this let me explain why
54:25 - so the reason why we can't just copy
54:27 - paste the collisions for the second
54:28 - paddle is because let's say if the ball
54:30 - is approaching towards the paddle and
54:32 - remember that there is two paddles one
54:34 - in bulb of the other so if we Define
54:36 - collisions for them both at the same
54:38 - time then there is going to be two
54:39 - collisions happening at the first
54:41 - Collision the ball will change the
54:42 - direction this way but since there is
54:44 - another arrow on top of this the
54:46 - direction is again going to change and
54:47 - anyways the ball is just going to go off
54:49 - the screen which is not actually what we
54:51 - want and the way we correct this is by
54:52 - first checking if the positions of these
54:54 - two paddles are not equal let's say if
54:57 - they are separated like this that is if
54:58 - the gadget is in action then if the ball
55:00 - is approaching towards top atlest the
55:02 - primary paddle then Collision would
55:04 - happen normally and then if we Define
55:05 - for the secondary paddle as well then
55:07 - again a collision is going to happen
55:08 - normally so that's the logic that we
55:10 - have to work on let's look at how that
55:12 - works
55:14 - and hence we will have to first Define a
55:16 - condition to check if the Second Battle
55:19 - velocity actually in Second Battle X or
55:22 - the Second Battle Y is equal to
55:25 - the original paddle
55:27 - which is the left paddle Y and if it is
55:30 - then we should only Define collisions
55:32 - while one of these I'm just going to
55:34 - keep the original pedal like that
55:36 - and we will have to do that if
55:38 - you check
55:40 - if they both are not equal
55:42 - not a closer
55:44 - left paddle y
55:48 - then we will first have to Define for
55:50 - this so we'll copy this
55:53 - and then paste it here and then it will
55:55 - also paste it once again because we will
55:57 - have to also do that for the Second
55:59 - Battle as well
56:01 - displays it here and then add the prefix
56:04 - second
56:15 - so now if the ball comes in contact with
56:17 - either of the paddles then it gets
56:19 - simply reflected back which is actually
56:21 - what we want now we will do that for the
56:24 - right hand side paddle as well let's
56:25 - check if the coordinates are the same if
56:28 - second white adult y
56:32 - equals it
56:33 - like out of Y
56:36 - then we can just have this as it is I'm
56:38 - going to stab and copy this
56:41 - get tritrons here and check if they both
56:44 - are not equal
56:46 - rights battle away second right out of Y
56:48 - not equal to
56:50 - white throttle why
56:53 - let me just paste it
56:55 - come over here
56:57 - and paste it once again
57:03 - now we can add the prefix second
57:17 - and then you get to the gadgets and
57:18 - accent section and scroll down to second
57:20 - pair and check if
57:22 - the left Gadget is equal to two that is
57:24 - the second Gadget if it is being
57:25 - activated
57:26 - so if
57:27 - actually others
57:30 - less Gadget equal to two
57:34 - then we keep the second
57:38 - left battle y
57:40 - to be
57:41 - left battle why
57:44 - Plus 200.
57:46 - now this will lead to the paddles
57:48 - learning itself to the human eye and
57:50 - then we can just simply make left Gadget
57:52 - to be zero
57:55 - and also subtracts one from the gadgets
57:57 - remaining
57:59 - left guys remaining minus equal to one
58:01 - we will do that for the right hand side
58:03 - as well
58:07 - and this right
58:09 - Gadget equal to two
58:13 - and then we just make the second right
58:15 - paddle
58:16 - y to me
58:19 - write about a y
58:21 - let's do 100.
58:23 - like that and make white Gadget to be
58:25 - zero
58:28 - also subtract one
58:30 - from the right Gadget remaining
58:33 - like that now we will get to the
58:35 - movements as well and over here we will
58:37 - Define for the Second Battle
58:39 - seconds left paddle apply plus equal to
58:43 - second left parallel well followed by a
58:46 - second
58:48 - right battle y
58:50 - plus equals a
58:52 - seconds
58:53 - right I don't know like that
58:56 - you will have to draw that over here so
58:57 - I will create another section
59:02 - battle
59:04 - and I will copy all the battles this and
59:08 - paste it over here
59:10 - and then just change
59:12 - this to the prefix seconds
59:22 - also I forgot to mention one thing when
59:23 - you get to the input section
59:25 - that is
59:27 - here we also have to make sure that when
59:30 - no key is being pressed
59:32 - then the second velocity is that is the
59:34 - second part of velocity should also be
59:36 - zero
59:38 - zero
59:40 - or by second right spiral velocity
59:43 - v0 as well now let's run on code and see
59:46 - if the second paddle is appearing on the
59:49 - screen when we activate the gadget so
59:50 - first let's type in two
59:58 - and we see that now we have only one
60:01 - paddle but when you press the left Arrow
60:03 - key or the a key then the left the
60:05 - second Gadget will be activated and if
60:06 - second Gadget is activated then we
60:07 - shouldn't see the paddle cloning like
60:09 - that we do nice
60:11 - so right around here when you activate
60:13 - the gadget like this and if the game
60:15 - resets originally we just want the game
60:16 - to reset with the paddles as well but
60:18 - that is not happening in this case
60:19 - because we haven't defined it to we will
60:21 - have to make sure that once the game
60:22 - resets the paddles also reset to its
60:25 - original position so the way we did it
60:27 - is by going to the
60:31 - volts movement control section over here
60:33 - once the game resets every time what we
60:35 - do is add in two lines over here that is
60:38 - the second
60:39 - left battle y will be let's battle y
60:44 - that is a resetting back to the original
60:45 - position
60:48 - we will do that for the right hand side
60:49 - paddle as well second right about y will
60:53 - be
60:54 - White's battle y like that
60:58 - and then we will do that for the second
61:00 - if as well that is if the ball goes at
61:01 - the screen on the left hand side
61:03 - then again second
61:06 - rights battle why will we write about
61:08 - why
61:10 - and we will do that for the left hand
61:12 - side battle second
61:14 - that's about a y equal to left paddle y
61:22 - now we should have everything according
61:24 - to our needs let's draw a currency
61:26 - type in two
61:32 - over here we'll activate my Gadget right
61:34 - round now
61:37 - click here as well
61:39 - trying to miss actually I can't miss
61:46 - and yeah over here we see that
61:48 - once the game resets the battle also
61:50 - reset which is actually what we want I
61:52 - will show it to you right here as well
61:53 - yep we get it all right all that is left
61:56 - down is just the scoreboard and the end
61:57 - screen so in order to calculate the
61:59 - score first we'll get to the initial
62:01 - section and then I will create two new
62:03 - variables layer one
62:07 - come on actually
62:09 - both will start off at zero so player
62:11 - two will also be equal to zero player
62:14 - one will be referring to the left hand
62:15 - side player and player 2 will be
62:16 - referring to the right hand side layer
62:18 - and we scroll down all the way to boss
62:19 - movement controls and over here we see
62:22 - that the ball is going off the screen by
62:24 - right hand side so we're here player one
62:27 - will get a point
62:29 - plus equal to one because since the ball
62:31 - is going off of the screen from the
62:33 - right hand side the left hand side
62:34 - player will get the point now if you
62:36 - scroll down to the other if condition
62:38 - over here ball goes up the screen from
62:40 - left hand side so player two will get a
62:41 - point this time okay so that's equal to
62:44 - one so that's how you calculate score
62:46 - now how do we write this on the window
62:48 - so I will scroll all the way down
62:51 - and over here before getting to the
62:53 - object section right around here
62:55 - after movements I will create a new
62:57 - section in the scoreboard
63:00 - so first we will need to get a font
63:01 - through which we have to write on the
63:03 - window we want to leave Pi game
63:07 - dot system font the font Dot
63:11 - sys font like that
63:13 - and then for Simplicity I will just use
63:16 - calibery and then we also have to
63:18 - mention the size which again for
63:20 - Simplicity I will be keeping that as two
63:23 - I will be keeping that as 32.
63:26 - now I will create another variable score
63:29 - and then I will type in font dot render
63:31 - this is just basically instructing the
63:33 - program to use the font that we just
63:36 - imported and and generate the text that
63:38 - I'm just going to type in which will be
63:40 - player
63:41 - one
63:42 - then do this
63:44 - plus SDR I'm just going to make the
63:46 - string
63:47 - of player one
63:50 - true and while we also have to mention
63:52 - the color
63:53 - I will just keep white authenticity
63:57 - now we have everything ready we just
63:59 - have to write this onto our window how
64:01 - do we do this we just type in
64:03 - window.blit
64:05 - we mentioned what we had to write in
64:07 - which is the score and then you also
64:08 - have to mention the positions so in
64:10 - terms of the x coordinate I will first
64:12 - keep this to be 25 and in y as well I'm
64:14 - just going to keep this 25.
64:16 - now I will just copy this
64:19 - and then paste this once again over here
64:22 - and then now change this to player 2.
64:26 - over here as well
64:28 - and then change the x coordinate to
64:30 - around about say 825 and keep y-axis as
64:33 - it is now we will quickly run a currency
64:38 - get the power to be two
64:44 - and yes it works we see player one
64:46 - scores one and play two score is one as
64:48 - well nice now we will also have to do
64:50 - that to mention the number of gadgets
64:53 - remaining so what I will do is first
64:55 - let's just name this to be score one
64:57 - and score two
65:02 - and what I will do is I will create
65:04 - another new variable Gadget
65:07 - left one
65:11 - and similarly actually just
65:14 - kept change it over here as well
65:17 - it's here
65:21 - well it can be font start render
65:25 - let's type in gadget left
65:29 - a space
65:33 - Plus
65:34 - can make the Str and
65:37 - Lefty as it remaining
65:40 - true
65:41 - followed by the color which I will add
65:43 - this as white
65:45 - like that
65:47 - and we will type in made out of Blitz
65:54 - Gadget left one
65:57 - the positions this time will be 25
66:01 - comma 65 we are just off placing it a
66:03 - little bit in terms of the y coordinate
66:05 - I will just copy this
66:08 - and paste it here maintenance to be
66:11 - Gadget left two
66:14 - and then make this
66:16 - right Gadget remaining and this to be
66:19 - 825
66:23 - so now let's just run a code and see if
66:26 - gadgets is being shown
66:28 - let's type in two
66:32 - and we see the number of gadgets left
66:33 - this Phi and the scoreboard is also
66:35 - ticking nice
66:37 - okay so all that is left out now is the
66:39 - end screen so let's scroll all the way
66:41 - down and create the section over here
66:46 - and inside this first we will create the
66:48 - winning font which is just the same
66:51 - thing
66:52 - but then I will keep the size to be 100
66:57 - and then now I will check if either of
66:59 - the players are greater than three
67:00 - points this is the winning cap this is
67:02 - the winning limit you can have the you
67:04 - can have whatever number you want but in
67:06 - just for Simplicity to show you that the
67:08 - end screen element is actually working
67:09 - I'm just going to keep it at three so
67:11 - that the end screen will be so that the
67:13 - game will end faster
67:14 - greater than or equal to three and what
67:17 - we do first is fill the window by using
67:19 - the window.fill statement with the black
67:21 - color
67:24 - and then we will type in the end screen
67:26 - variable to be font dot render actually
67:29 - winning a font dot render
67:34 - and then say player one
67:37 - one
67:42 - keep the anteriorist to be true
67:44 - and then mention the color I will keep
67:46 - this to be white which we already find
67:50 - and then blip this onto our window
67:51 - window.blit
67:54 - end screen
67:57 - mention the coordinates I'm just going
67:58 - to keep it to be 200 in terms of X and
68:00 - so 15 in terms of Y let's say and see if
68:02 - this is working I will also do this for
68:05 - the play itself as well just copy this
68:07 - paste it right around here
68:10 - then change this to player two
68:14 - that
68:16 - now let's run that code and see if it's
68:17 - working
68:20 - enter the guided choice to be one
68:23 - go over here
68:34 - right as player 2 gets three points it
68:36 - displays that player to one again really
68:38 - nice
68:40 - and here it is the modified Bongo now if
68:43 - you made it up to this point of the
68:44 - video then I just want to say thank you
68:46 - for sticking with me now I again do
68:48 - recommend to check our Channel now
68:49 - there's just tons more in there so
68:51 - that's it bye-bye hope you see that

Cleaned transcript:

improve your Python and Pie game skills by building the classic pong game but with some new features Rohan created this course and it's a great project for beginners you will learn how Pi game can be leveraged to create engaging games with Unique Mechanics let's get started welcome to the Spy game ponkos this is where we modify the traditional pong game by adding in multiple new features such as increasing the movement speed at times all the way up to cloning the objects to confuse the opponent I am a content creator at snds we make videos about machine learning data science and some general programming videos in Python and pygame like this now I do want to mention that this course is for those who have intermediate knowledge of code so if you're able to understand the looping structures such as a y Loop and the for Loop and if you can understand the conditional statements such as the if alif and else then you should be good to watch this video but with that said if you're a complete beginner then you can still watch this video and see what you can write out of it now I will be using visual studio code as my code editor also make sure to install the pi game audio onto your computer I'm not going to go onto that because there's just kind of tutorials out there on how to install the buy game module so I'm just going to presume that you already have it installed now with all that said let's get into the video let's take a quick minute to tell you what Wayne will be covering in this course we will start with going by building the metrics of the original on game where we first create a window and then draw the required objects that is the ball and the paddles and then we will Define the movements for these and then the collisions such as the ball colliding with boundaries or the ball colliding with the paddles after this we will be building our first kind of new element which I'm going to name this as creative angles you will get to know about this in detail when you get to that part of the video then we will be creating two comprehensive brand new elements which I'm going to refer to as Gadget pair 1 and Gadget pair two the first pair will comprise of the smashed element which will smash the ball back onto the opponent and the Flash element which will teleport the paddle up or down to a specific distance and the second pair will comprise of the ball cloning and the paddle cloning which as the name suggests or creates a throne of the respective and then finally we will be adding in the scoreboard on the window followed by the end screen or the winning screen all right let's start with importing Pi game first import buy game and then I'm just going to go ahead and type pie game dot init you will have to initialize the module first before you do anything and now I will Define the width and the height of our window actually a thousand pixels comma 600 pixels and I will Define this inside the initial section and then to create a blank window which I'm going to call as WN you will need to type in pi game Dot display dot set underscore mode and inside this you will have to kind of given a single element which contains the dimensions so I will Define another Tuple inside this and then type in the width command height like that so what this does is it creates a blank IDM window with a width has thousand pixels and the height has 600 pixels so when you talk about the pi game window in particular let's say that this is a dummy window for our pygen window the initial position is always going to be here so this position will be called as 0 comma zero but then as we progress towards the right the xaxis is going to increase and then when you progress towards the downside the yaxis is going to increase so this position will be the maximum in terms of the y coordinate so when you go towards the right this is going to be thousand comma zero because this is the maximum point of the xaxis and as you go down this will be zero comma 600 and then as you move towards the right this is going to be the maximum point that is 1000 comma 600. this is really useful when we want to define the positions of the objects that we want to draw on the screen and also the scoreboard on the top and left hand side and on the top right hand side as well now what I will do is create a main game Loop this is where all of our animations the visual effects and the Motion Graphics will be happening and they will be happening constantly to the updated latest statements so to do this I will Define a while loop and rather than keeping this as true like this I will Define a variable known as one and then make this true and give it over here so that if at some point we want to break out of the game or just toaster but no we can just simply make one as false so inside this main game Loop what I will be doing first is I will type in for I in High game dot event dot get so the way I like to explain this statement is whatever you do inside a pi game window let's say you're trying to press the quit button to exit the window Pi game will identify this Spy game will know that you have pressed the quit button but then it won't know what to do after that so what it does is let's say if the user has pressed the quit button then iGame will store this in pygame.event and what we're doing here is getting all of those events one by one and storing Sni like for example not only the quit button let's say the user is trying to press the up Arrow key to move the paddle up or the down arrow key to move the pedal down all of them all of the events are stored in eigen events and we're getting them one by one and storing it in I so that we can check for a particular event and take specific actions accordingly like for example when the user press the quit button then we will have to instruct the code to just close the window and break out of the loop or another example is just let's say if the user presses the up Arrow key then we have to make sure that we instruct the code to just move the paddle up when the up Arrow key is pressed I will check in for the quit type so if I DOT type is equal to equal to Pi game not quit this will check for if the user has pressed the quit button and it will return true if they have pressed the quit button and if this returns true then we can simply make run as false now before running this program let me just create another section and call this main Loop now let's run our code and see here you see a blank buy game and now it says High game window and then when you try to close the window it closes nice also there is one more thing that I want to mention is that you see here that it says eigen window you can just change this to whatever you want by just typing in pi game dot display dot set underscore caption and inside this you can type in whatever you want I will type in wrong but that's it like that now when you run this code you see there is pong but better over here nice now let's get started with drawing the objects and to draw anything inside the pi game window it will generally use the statement known as High game dots draw and then the shape that you want to draw in our case first we will draw the ball which will be Circle and inside this first you will have to mention where are you going to draw the circle which will be the window and then you will have to mention the color which will be blue for my case and then you will have to mention the dimensions or the positions of where you want to draw the ball which we will Define later I'm just going to call it ball X and well why and then we will also have to mention the radius so we will have to Define all of this so what I will do is create a color section in fact let me just do this right around here colors and first Define the blue color which will be in the RGB format which is going to be 0 comma 0 comma two five like that now I will Define another section for the ball and this will contain first radius which will be 15 pixels and then the balls x coordinate which will be the entire width by 2 minus the radius and similarly for the height right by two minus the radius like that the reason why I'm doing this is actually when you type in width by 2 the ball's radius or the center of the ball is just going to be placed towards the right rather than the center of the screen so when you type in y radius what you see is the ball will be placed at the exact center like we wanted to and similarly for the height as well so this way we keep the ball at the exact center which is what we want to achieve now when you run this code you should be able to see a ball and we don't so why do you think this is happening well because this statement is given to the buy game window but then it is not being executed because this is not updated to the latest statements so to do this what I will do is to type in iGame Dot display dot update so this way the game is updated the latest statements and it is being visually available as well so now when you run this code you will be able to see the ball nice and then similarly for the paddles we will type in pi game dot draw Dot backed and inside this we will have to mention where do we want to draw this rectangle which will be the window and then the color which will be red and then rather than just giving in the dimensions like we did for the circle we will have to type in a statement as Pi game Dot rect and then we will have to mention the position in terms of the x coordinate and then the what coordinate followed by the paddle's width and the battle side so for the positions we will have to do it two times one for the left and one for the right the battles X and then left hand side battles white coordinate and Then followed by the battle width which will be same for both Commander pedals height I will copy the statement and then paste it over here and then change this to right like that now we will have to Define each and every single thing so let's do this first I'm just going to define a section for the paddles which will ever call as paddles dimensions and inside this first let me just Define the paddle's width and the height which will be the same for both paddle bit manifold height I will call this 320 and 120. and then in terms of the y coordinate both the battles are just going to be same so first I will Define titles y coordinate left paddles why which will be equal to right spell why which will be the entire height weight so minus the battle height 2. like that and that thought for the paddles x coordinate but the left will be and I will also Define simultaneously white as well for the left hand side it's just going to be 100 minus the paddles width by two and then but for the white will be the entire width minus this same so I'm just going to copy this and then put this inside parenthesis like this and I will also have to define the red color which will be in the RGB format once again so 255 comma zero comma zero like that now we should be able to see two paddles on the screen along with the ball we do nice okay let's get started with the movements and as I did before I'm just going to start with the ball and the way I'm going to go with this is by creating a variable known as false velocity in terms of the exponent as well as for the y coordinate like that and then keep them to be one pixel comma one pixel so what I'm going to do here is add this velocity constantly to the original position of the ball so that the position continuously changes because we're going to put that inside the main gate Loop and to dehumanize this will appear as still the ball is moving so hopefully that makes sense when you look at the color when you look at the output it will make much more sense so let me just create the movement section and before that it will put this one into objects what's this one and also I have made this so that you can read the entire code like this rather than having them like this I will keep them like yeah so what I will do now is just add in the velocity to the original balls position so balls X will be um velocity X similarly dot by the Y as well now we haven't defined the bounces or the collisions itself but then I want to see if the ball is making some sort of a movement on the screen so let's just run a currency okay so first we see that the ball is moving but then it's leaving trails rather than just moving its original position so this can be simply corrected with a single line of code which I will explain in a second but first let me just type out whatever I want to whenever Phil enable and then the black color you find the black it's big zero or flat zero of green and zero of blue like that all right so here we add the initial positions of the object and we have also written down the statements that be used to update the positions of the ball so we expect the ball to kind of move like this because we're updating the positions and this updated position is used by the pygen draw statement so that it draws onto the screen in the new positions well it's mostly true in this case but it's mostly correct but there's just one catch here that is each time the new position is updated and each time pygen.raw statement draws on the window the new positions it doesn't erase the already existing position so what happens is this we see that the ball is being drawn onto the screen on top of the already existing wall position so is it a humanized this appearances so the ball is leading Trails so the way we correct this is by using the window.fill statement what this does is each time after we start the loop or end the loop we just fill the window with the black color and then draw the positions once again so that the already existing positions are preraced and the ball's new position is being drawn onto the screen and this appears as so the ball is moving to the human eyes so let's have a look at that what you see around here is the already existing position is being erased in the new position is being drawn each and every single time the loop is running now when we run this code we should not be seeing the ball leaving trails and yeah if the ball moves and it goes up the screen so what I'm going to do next is Define the bounces as to that if the ball hits the top boundary or the bottom boundary then we have to make sure that the ball is bouncing and then moving so just recall that the top boundary right here y position over here is going to be zero and then over here it is going to be 600. so first let me just reduce the velocity a little bit to make it 0.7 and then 0.7 over here and now let's define a section named balls movement controls like that and then inside this I will use conditions to check if the ball is trying to go off the screen from the top side or the bottom side so if the balls like one is less than error equal to zero plus the radius because we're checking if the ball's end point is trying to touch the top boundary rather than the center so that's why we add in the radius like this and then similarly for the y coordinate in terms of the height so if volts white coordinate is greater than or equal to the entire height of the window this time minus the radius because again we're checking it for the end point rather than the enter if any of these conditions is true then we just basically reverse the direction of the fall in terms of the y coordinate alone like this so This Way the balls white coordinate Direction it's just changed but the magnitude stays the same so when you run this code we see that the ball bounces and it goes off the screen which is actually what we want so what I'm going to do next is to check if the ball is going offset the screen on the right hand side or the left hand side and if it does then we will have to reset the game and this time layer 2 will get the serve so this time we will have to manipulate using the xaxis so let's just stack for if the balls x coordinate is greater than or equal to the entire width minus the radius again similar reasons then we will have to retrieve the initial positions I will copy this and then paste it here and just change the world's velocity the reverse Direction and do the same for y as well like that so this time if the ball tries to go off of the screen then it resets to the center and then this time layer 2 will get the serve and if the similar thing happens to the lefthand side player which is if voltex is lesser than or equal to zero which is the initial position plus the radius then again we will have to retrieve the initial position as well as that would initial velocity as well so I'm just going to copy this and paste it here now when you run this code we see that the ball is going to bounce and go off the screen similar thing happens here and then this goes on forever nice now let's start to make the paddles move based on the user's given input so first let me just Define the part of velocity right pedal below and then left parallel which will be zero as of now and then first I will check for the user's inputs so lfi DOT type is equal to High game dot key down this signifies to check if any of the keys on the keyboard is being pressed and it will return true based on that if it does then we will have to check what key is it so we will type in I dot key will be highgram dot k underscore up this is kind of a notation to signify you to check if the up Arrow key is being pressed and if it is then white battle velocity has to go up so we will make it to be negative 0.9 so this way we're subtracting the y coordinate position from the paddle so that it goes up like this and then we will do that similarly for the down arrow key as well High game okay underscore down again kind of a notation to signify the down arrow key is being pressed or not and if it is then right paddle velocity will be 0.9 this time we are increasing the y coordinate so that the paddle goes down similarly we will do that for the left hand side as well if I dot key equal to equal to and I will use the wasd controls because that is kind of standard annotation for the left hand side to Pi gan node K underscore W to check if the battle is trying to go up and if it is then left battle velocity will be negative 0.9 and then similarly we will check if idle key yes buy game dot k underscore a actually s works then we can make left hand side velocity to be 0.9 like that now I will add this to the movements y less equal to right pedal velocity and then similarly left file y Plus left battle velocity now when actually there's one more thing that I had to do to check if normal keys are being pressed we can check rather than using alif we will use if I DOT type is equal to equal to High Gain or key up which checks if normal further keys are being pressed or the already pressed key has been taken off if that's the case then we can make Auto velocity to be zero again velocity will be zero and then we will do that or a y coordinate so lefthand side battle as well now when you run this code you should be able to move both the paddles with the proper control so it moves nice and then this as well excellent now before getting to collisions I just want to make sure that the paddle doesn't go off the screen like this so to do this let's just create a section known as paddles movement controls and over here what I will do is first I will check if the paddle is trying to go beyond the boundaries so first let's type in for the left hand side adult if it's greater than or equal to the entire height minus the paddle height then we just keep it there equal to the entire height minus the battle height and similarly if it tries to go beyond the boundaries in terms of the y coordinate at the top side if left hand side paddle y is less than or equal to zero let me just keep it there that's battle y will be zero now we will do this for the right hand side by just copy pasting this Ctrl Z paste this here and then change this to right now let's run our currency and we see that the paddle is not going off the screen which is exactly what we wanted to happen over here as well nice now let's get to the collisions so the idea here is just very simple if the ball's position is somewhere within the range of the paddle's position in terms of the x coordinate and in terms of the y coordinate then we just have to make sure that the ball's Direction reverses only in the terms of the x coordinate again here we are in the initial positions and the first thing that I want to show you is whenever you type in left battle X or white battle X whenever you want the first initial positions of the battle it is always going to be on the top left hand side which is indicated by the small yellow circle when you actually want to access the initial position to the right paddle you just type in right paddle X and here as well the small yellow circle is indicating that so what we want is the Collision to happen on this face of the paddle that is on the right hand side face of the lefthand side paddle so what we have to do is also adding the paddle bit so that the position is now on to the phase where we want whereas when you get to White's battle we don't actually need to do that let me just show you here we see that the collisions has to happen on the left phase of this battle so we don't need to add in the paddle width whereas we do then the cursor is going to move towards the right hand side which is not actually what we want first I just want to cut this and paste it above movements paste it here and then Define collisions over here now let's just start by checking if the ball's X position is within the range of the battle's X position this shouldn't be greater than or equal to left battle X but then it should be less than or equal to the left battle X Plus the actual paddle of it like that then we will also have to make sure that the ball's y position is also on the range of the paddles y so let's add a y should be less than or equal to balls y which should be less than or equal to plus the battle type I did not and what we will do is first we will keep the ball at The Retreat phase or the edge of the paddle itself and then reverse the direction so balls X will be left battle X Mr battle whipped and then we reverse the direction in turn to the x button into equal to negative one we will do that for the right hand side battle as well but before that let me just run our code and see if the Collision is actually working for the left hand side it does nice so we just have to do that for the right hand side battle as well we will do that I'll just copy this and paste it here then change this to right first and then we won't need this anymore because we're just keeping it at the left face of the right hand side battle so we just keep it as it is and then reverse the direction now when you run our code and see we see that both the paddles are making collisions properly and we have Reflections nice so this is creative angles so so far we've kept the Velocity in terms of x to be equal to Velocity Y and we would always end up with the direction like this each and every single time the game resets and this is indicated by this green line so the ball would make a movement Direction like this and then it resets to the center now this time let's say I'm going to add in another statement let's say I'm going to keep velocity in terms of x to be in two times the velocity Y and then we would get an angle like this so the ball would move in this direction now again I will add in another statement and this time I will keep velocity y to mean two times velocity X and we will end up with an angle like this which is again indicated by this green line now the ball would make the movement like this and what I'm going to do is also do this for the top side as well so that in total we get six angles and then provide the machine the choice to choose first the ball should move on the top side or should it move on the bottom side and then change the respective angle of the three choices that is provided so let's take a look at the code implementation okay so now we will have to import random import condom and then I will create two new variables one for the direction at which the ball should move we will randomize that with zero and one zero signifying top and one is going to signify a button we will do that for the angle as well I will have three different angles zero will stand for y being 2 times of X and one where X and Y are the same and two where X is two times of Y now we will scroll down all the way to where we reset the game so right around here after retrieving the initial positions of the ball we will now have to randomize where the ball will move either the top side or the bottom side so first let's create a variable inside this and use the random Choice option to get a random choice of the direction and similarly we will do that for angle as well random.choice of angle like that now I will first check for the direction if Direction equal to zero that means that the ball will have to move top side so we have to keep the Velocity in terms of y coordinate to be negative but first I will also check for the angle if angle equals a zero then that means Y is going to be 2 times of x so ball velocity y current of all velocity X will be negative 1.4 comma 0.7 followed by if angle equal to one then we can have both of them to be same well velocity X will be negative 0.7 comma 0.7 like that and if the angle is equal to 2 then ball velocity y comma ball velocity X will be of the software negative 0.7 comma 1.4 like that now I will copy this and do that for the downward direction as well where Direction equals one I will paste it right around here I'm going to make direction to be one and then take off all of the negative signs like that and now since we randomized the direction in terms of top side or bottom side we won't need this a more whereas we will have to have ball velocity X cleaned it off and for the right hand side if the ball goes out of bounds from the left hand side so the ball has to move towards the right hand side so we can just copy this once again right round from here all the way down here Ctrl Z then I will paste it here and we don't need to have in this statement because we want the bulbs directly to move towards the right hand side rather than changing the direction towards the left so now when we run our code we should get three different creative angles each time the ball is reset so we run our currency let me see the first angle we see the second one and we see the third really nice I just want to show you the prompts of how the new element that we're trying to add into the game should look like it says active which means that it has to be manually activated by the user and it says once activated the next condition of the ball onto the paddle should reflect the ball back at 3.5 times the original speed as a surprise to the opponent this means that this is kind of a smash element and this has to be activated manually by the user this will be the logic that we will be implementing for the gadget so let's say that this is a given position and as soon as the pole comes to the bottom boundary we just use the statement to reflect the Bolt's Direction and it moves up so what happens here is the ball approaches towards the battle and as soon as it comes in contact with the paddle we other than just multiplying it with negative one we multiply it with negative 3.5 this way this negative sign ensures that the ball is reflected back but then this 3.5 ensures that the ball is moving very fast and it's a price the openness so that will be the logic that we will be working on for this gadget let's see how it works so for the gadgets first I will move outside the main game Loop and create a section for the gadgets like that also make sure to have some space here and over here what we can do is first I will create the activation variable to check if the gadget is being activated or not so left underscore Gadget will be equal to right underscore Gadget which by default is turned off if the gadget is turned on then this will become one for the respectives now I will create a variable for the maximum amount of gadgets so that will be left Gadget remaining which will be equal to the right Gadget remaining which will be 5 or my case you can have how much ever maximum Gadget as you wish now we will have to trigger the activation as an if a button is pressed then we will have to make sure that the gadget is being activated so to do this first it will go to I dot key faction over here first I will do for the arrows area if I dot key equals or equal to Pi game dot right that is the right arrow key and we will also have to make sure that the gadget remaining is greater than zero right the adjective remaining should be greater than zero then we can have the right Gadget to be activated equal to one like that and I will move down or the left hand side paddle if I dot key is equal to High game dot KD that is a right arrow for the asdw keys then and also I have to make sure that enough scattered remaining is greater than one left yard remaining is greater than zero then we can make the left schedule to be one that is the activated case equals one like that now I will scroll down and create a new section right around here Gadgets in action so we will first Define what the gadgets have to do it's just the same thing if the ball is within the range of the battle then rather than just reversing the direction alone we will reverse the direction in 3.5 times the original speed so I will copy this and first check if left Gadget is activated or not if left Gadget is equal to one then I will paste this and then rather than having this as negative one I will have this to be negative 3.5 and now I will make the left Gadget to be zero and also left Gadget remaining minus equals one because we have to negate one each time our Gadget is being used so now we will do that for the right hand side Gadget as well if right Gadget and just scroll down a little bit equal to one and then we can copy this and paste it right around here like that and have this to be negative 3.5 followed by right Gadget making it to be zero once again and we're doing this to make sure that once the reflection has happened once the bowl has been returned in 3.5 times the original speed the gadget is no longer effective they will have to activate it once again to make the same movement once again so rights Gadget remaining will again be negative equals one we will have to negate one so that the number of remaining gadgets is reduced each and every time they use the gadgets so now let's run our code and see if the gadget is working this is the original reflection speed now I've activated the gadget and it does really nice also the prompt says that as a slight indication to the opponent once the gadget is activated there should be a small circle inside the battle so to do this it's just very very simple we will go down to the objects section and over here let me just do this and check if left Gadget is first activated or not left Gadget equals one then we will have to draw something else I N Dot Raw but Circle and window white color we haven't defined white we will do that and then we will have to keep the ball within the rectangle that we created so we will do that by typing in left battle X plus 10 and similarly in terms of Y as well left Arrow y plus 10 like that followed by the radius it's just radius is going to be let's say four it has to be a small circle and we will do that for the right hand side paddle as well if right Gadget is activated that means it should be one then Pi game dot draw in fact let's just copy this control Z paste it here and then change this to be right battle X and over here as well like that now we had to define the white colors I'm just going to go into the colors section and over here I will Define for white white will be 255 comma two five five comma two five five we will now run our currency if a slight indication circle is being drawn onto the paddle if the gadget is activated and we do we do for the right hand side battle now I'll do this for the left hand side as well yep it does work and once the Collision happens it goes off nice so the prompt for the flash Gadget says that active which again means that has to be manually activated by the user and it says immediately after activation the pattern should teleport itself towards the ball's current position in terms of the y coordinate the logic for the flash element is just very very simple let's take this for example the ball is approaching downwards as well as the battle but in some case if the battle is unable to reach the ball and if the gadget if the splash Gadget is being activated then we simply use this statement that is we just change the battle's y coordinate to Bear the balls while coordinate is and the battle teleports itself to the balls but what in it like this so let's take a look at the code implementation and see if this works now for the second Gadget we will check for the input from the user first Right Round Here if I dot key equal to highgame dot left this time okay left the left Arrow key and also make sure that right Gadget remaining is greater than zero then we make white Gadget 72. which signifies for the second Gadget we will do that over here as well if idle key equal to highgame dot a okay and let's go a like that and we will also have to make sure that the left Gadget remaining is greater than zero Omega bar then left Gadget will be two in this case now we will go down to the gadgets and action section and over here we will check if left Gadget two then we just make the left battle y that is the position of the paddle in terms of the y coordinate to be the ball's y coordinate itself like that and now we will have to make the left Gadget to be zero and also subtract a number from the number of gadgets remaining we will do that for the right hand side paddle as well if right we won't use Alice Alice right Gadget equal to two then make white paddle y to be equal to the both y coordinate like that make right Gadget to be zero and also subtract a number from the number of gadgets remaining like that let's run a code and see if the other Gadget is working as well when we press the left Arrow key and it does really nice we will do that for the left hand side paddle as well and it works beautifully now when you look at the prompt for the cloning Gadget you see that it's active and once activated the next Collision of the ball onto the paddle should clunk the ball to confuse the opponent one being original and the other one being duplicate this is going to be the logic that we will be putting into this gadget so if we take a look back we have defined the reflection physics for the ball we have also defined the condition physics for the wall and we've also made sure that the movements are working properly so what I'm going to do is just draw another Circle for the entire game and then put this on top of the ball such that it's just hidden behind it and I'm going to put each and every single metric the reflection the collisions and the movements exactly to be the same as for the original ball so that when the gadget is actually put into action let's say that the ball is moving in this direction so both the circles it's just simultaneously going to move in this direction and right as it approaches the paddle let's say in this direction it just does this both goes in different direction in terms of the y coordinate this is just by changing the dummy balls Direction in terms of the y coordinate and then they both Go in different directions one is going to be original and the other one is going to be duplicate meaning that the meaning that if the original ball comes in contact with the other paddle then the reflections happen normally whereas if the player 2 is confused and goes for the zombie ball then it will do nothing and then the game resets giving player one the point that's the whole point having this gadget let's take a look at the code implementation of how this works so we will have to make changes to all of the sections that is on your screen and we will start with from the balls section I'm just going to copy this and then paste it here this is called the creation of the dummy ball X so I'm just going to have namibal access the prefix dummy all X we'll do that over here as well and over here as well nice now we will need to scroll down all the way to balls movement controls and over here the logic is just going to be the same just going to copy the first if condition and then paste it just change the variable name to dummy over here as well and then we will reverse the direction or the meatball velocity like that and then inside this first we will have to retrieve the positions for the dummy ball as well so I'm just going to copy this and paste this here change the variable names to dummy and over here as well and then right inside the if condition I will actually copy this one as well and then paste it chase the names like that and change their names to dummy ball velocity we will do that over here as well similarity equal to this one so after completing all of those you will also have to remember that we have to change the direction in terms of the dummy ball as well so I'm just going to paste this and change the name to dummy like that and now we will have to do the same thing over here as well let's retrieve the positions by copying it and paste it here and then change the names dummy and then get inside the if condition to change the ball velocities we will do that over here as well copy this next we will have to get to the paddles collisions and inside the latest if that is the condition is just going to be the same rather than just changing the direction of the normal ball we're also going to change the direction of the dummy ball as well with the same condition so we're not going to declare that for the dummy ball I'm just going to change the direction directly if the original ball is in the contact of the paddles then this wall the dummy ball also should reverse the direction that's the logic we will have we will also have to do that over here but before that I will also retrieve the positions to keep that at the edge of the pedals hey stairs and then make this to becoming ball like that we will have to do it we will also have to do it over here as well now before getting to the gadgets and action section all that we have defined so far inside the gadgets section is for the gadget pair one we will also have to do this for the second Gadget but before that we will have to ask the user on which gadgets should they start with so what I'm going to do is before doing anything with pi game I will first declare the gadget Band by default is going to be one and then I will ask for the input of the user input enter your choice enter your choice will get a parent and then what we will do is actually first let me just convert this to ins then what we will do is we will first check for the condition if CH equal to one and we keep Gadget pair to V1 that is CH equal to two then we will keep Gadget out E2 now that's decided we will in fact scroll down to get it in action section and inside this what we will do is first copy all of this right around here and press down because what we will do is first check for the gadget Banner if yeah equal to one then we will execute all of the commands that inside this and if Gadget pad equal to two then you will have to then we will have to start with the cloning section that is ball cloning and paddle cloning so what we will do is as defined earlier we're just going to change the dummy balls Direction when the gadget is actually activated so what we will do is go to the left battles collisions and we will copy this and paste it here now rather than just changing the direction in terms of the x coordinate what we will do is we will also change the direction in terms of the y coordinate so that one ball will move towards the bottom side or the swap side and the other ball will move to the exact opposite intensity y coordinate so when we type in dummy ball velocity y and then multiply that into equal to minus one I forgot to mention one thing the let Gadget should be one then we will execute this condition so we'll put this in tab and then we will make lift Gadget to be zero and then Gadget remaining left Gadget remaining negative equal to one maybe we'll Simon Says stated that for the right hand side Gadget as well um tab if right Gadget equals one we will copy from the right Gadget right paddle collisions paste it here and what we will do is again change the dummy Bolt's Direction in terms of the white coordinate as well instead of equal to minus one and then make right Gadget to make a zero and then also make a white Gadget remaining negative equals one and we will get to movements and also add this for the normal as well tell me about X Plus equal to dummy ball velocity X followed by that mean for y plus two dummy ball velocity y you will also have to draw the circle so what we will do is I will copy this and then paste it over here maybe actually I will paste it over here dummy World section paste it here change this to dummy ball X change the name over here as well change this to like this we also come down to Gadgets in action section also make sure that the dummy ball is reflected back at 3.5 times the original speed as well because even though this comes under the gadget bar one we have to make sure that both the circles are making simultaneous movement so what I will do is just keep the dummy ball velocity X maybe negative 3.5 like that now we'll do this for the right Gadget as well get a statement and then keep this to me dummy like that and now let's run our currency so first we will have to enter our Gadget pair Choice I'm just going to keep this too because we're testing let me press enter we see originally that the ball is going in the same direction and then we're not seeing the second ball but then when you activate the gadget like this you see two walls like that very nice we will check that for the other side Gadget as well if I can hit yeah it's working very good and so here is the prompt of the final Gadget it again has to be manually activated by the user and it says immediately after activation the paddle should clone itself both being original and thus providing more area control logic is again just drawing the second paddle and on top of the original paddle and then make movements normally and simultaneously and whenever the gadget is activated we separate them by let's say 200 pixels by just adding into 100 pixels and then it provides us that battle cloning effect so let's take a look at the code implementation of how this works as well again we will have to make changes to the necessary sections and we will start with the pedals Dimensions by creating the Second Battle and this time I'm going to have a prefix of second rather than having this to be dummy because this time the pedal is actually not being dummy like the ball so first I will copy this and paste it here and then add the prefix second and right round here as well like that and it will also create velocities for the second paddle what I will do is copy paste this and have second over here now we will get to the input section and over here we will have to check if the barrel key is being pressed and if it is then not only we should move the original pedal we will also have to move the Second Battle as well which is on top of the original battle Second Battle well geek40 0.9 negative zero nine like that you will do that over here as well second right velocity be closer 0.9 if the down arrow key is being pressed we will do that over here as well now we should get to paddles movement which is right round here and we just simply copy paste this this is just making sure that the paddle doesn't go off the screen either by the top side or the bottom side we will have to do that for the Second Battle as well so I'm just going to paste this and add the prefix second next we will have to get to paddles collisions and over here we can't just simply copy paste the conditions like this let me explain why so the reason why we can't just copy paste the collisions for the second paddle is because let's say if the ball is approaching towards the paddle and remember that there is two paddles one in bulb of the other so if we Define collisions for them both at the same time then there is going to be two collisions happening at the first Collision the ball will change the direction this way but since there is another arrow on top of this the direction is again going to change and anyways the ball is just going to go off the screen which is not actually what we want and the way we correct this is by first checking if the positions of these two paddles are not equal let's say if they are separated like this that is if the gadget is in action then if the ball is approaching towards top atlest the primary paddle then Collision would happen normally and then if we Define for the secondary paddle as well then again a collision is going to happen normally so that's the logic that we have to work on let's look at how that works and hence we will have to first Define a condition to check if the Second Battle velocity actually in Second Battle X or the Second Battle Y is equal to the original paddle which is the left paddle Y and if it is then we should only Define collisions while one of these I'm just going to keep the original pedal like that and we will have to do that if you check if they both are not equal not a closer left paddle y then we will first have to Define for this so we'll copy this and then paste it here and then it will also paste it once again because we will have to also do that for the Second Battle as well displays it here and then add the prefix second so now if the ball comes in contact with either of the paddles then it gets simply reflected back which is actually what we want now we will do that for the right hand side paddle as well let's check if the coordinates are the same if second white adult y equals it like out of Y then we can just have this as it is I'm going to stab and copy this get tritrons here and check if they both are not equal rights battle away second right out of Y not equal to white throttle why let me just paste it come over here and paste it once again now we can add the prefix second and then you get to the gadgets and accent section and scroll down to second pair and check if the left Gadget is equal to two that is the second Gadget if it is being activated so if actually others less Gadget equal to two then we keep the second left battle y to be left battle why Plus 200. now this will lead to the paddles learning itself to the human eye and then we can just simply make left Gadget to be zero and also subtracts one from the gadgets remaining left guys remaining minus equal to one we will do that for the right hand side as well and this right Gadget equal to two and then we just make the second right paddle y to me write about a y let's do 100. like that and make white Gadget to be zero also subtract one from the right Gadget remaining like that now we will get to the movements as well and over here we will Define for the Second Battle seconds left paddle apply plus equal to second left parallel well followed by a second right battle y plus equals a seconds right I don't know like that you will have to draw that over here so I will create another section battle and I will copy all the battles this and paste it over here and then just change this to the prefix seconds also I forgot to mention one thing when you get to the input section that is here we also have to make sure that when no key is being pressed then the second velocity is that is the second part of velocity should also be zero zero or by second right spiral velocity v0 as well now let's run on code and see if the second paddle is appearing on the screen when we activate the gadget so first let's type in two and we see that now we have only one paddle but when you press the left Arrow key or the a key then the left the second Gadget will be activated and if second Gadget is activated then we shouldn't see the paddle cloning like that we do nice so right around here when you activate the gadget like this and if the game resets originally we just want the game to reset with the paddles as well but that is not happening in this case because we haven't defined it to we will have to make sure that once the game resets the paddles also reset to its original position so the way we did it is by going to the volts movement control section over here once the game resets every time what we do is add in two lines over here that is the second left battle y will be let's battle y that is a resetting back to the original position we will do that for the right hand side paddle as well second right about y will be White's battle y like that and then we will do that for the second if as well that is if the ball goes at the screen on the left hand side then again second rights battle why will we write about why and we will do that for the left hand side battle second that's about a y equal to left paddle y now we should have everything according to our needs let's draw a currency type in two over here we'll activate my Gadget right round now click here as well trying to miss actually I can't miss and yeah over here we see that once the game resets the battle also reset which is actually what we want I will show it to you right here as well yep we get it all right all that is left down is just the scoreboard and the end screen so in order to calculate the score first we'll get to the initial section and then I will create two new variables layer one come on actually both will start off at zero so player two will also be equal to zero player one will be referring to the left hand side player and player 2 will be referring to the right hand side layer and we scroll down all the way to boss movement controls and over here we see that the ball is going off the screen by right hand side so we're here player one will get a point plus equal to one because since the ball is going off of the screen from the right hand side the left hand side player will get the point now if you scroll down to the other if condition over here ball goes up the screen from left hand side so player two will get a point this time okay so that's equal to one so that's how you calculate score now how do we write this on the window so I will scroll all the way down and over here before getting to the object section right around here after movements I will create a new section in the scoreboard so first we will need to get a font through which we have to write on the window we want to leave Pi game dot system font the font Dot sys font like that and then for Simplicity I will just use calibery and then we also have to mention the size which again for Simplicity I will be keeping that as two I will be keeping that as 32. now I will create another variable score and then I will type in font dot render this is just basically instructing the program to use the font that we just imported and and generate the text that I'm just going to type in which will be player one then do this plus SDR I'm just going to make the string of player one true and while we also have to mention the color I will just keep white authenticity now we have everything ready we just have to write this onto our window how do we do this we just type in window.blit we mentioned what we had to write in which is the score and then you also have to mention the positions so in terms of the x coordinate I will first keep this to be 25 and in y as well I'm just going to keep this 25. now I will just copy this and then paste this once again over here and then now change this to player 2. over here as well and then change the x coordinate to around about say 825 and keep yaxis as it is now we will quickly run a currency get the power to be two and yes it works we see player one scores one and play two score is one as well nice now we will also have to do that to mention the number of gadgets remaining so what I will do is first let's just name this to be score one and score two and what I will do is I will create another new variable Gadget left one and similarly actually just kept change it over here as well it's here well it can be font start render let's type in gadget left a space Plus can make the Str and Lefty as it remaining true followed by the color which I will add this as white like that and we will type in made out of Blitz Gadget left one the positions this time will be 25 comma 65 we are just off placing it a little bit in terms of the y coordinate I will just copy this and paste it here maintenance to be Gadget left two and then make this right Gadget remaining and this to be 825 so now let's just run a code and see if gadgets is being shown let's type in two and we see the number of gadgets left this Phi and the scoreboard is also ticking nice okay so all that is left out now is the end screen so let's scroll all the way down and create the section over here and inside this first we will create the winning font which is just the same thing but then I will keep the size to be 100 and then now I will check if either of the players are greater than three points this is the winning cap this is the winning limit you can have the you can have whatever number you want but in just for Simplicity to show you that the end screen element is actually working I'm just going to keep it at three so that the end screen will be so that the game will end faster greater than or equal to three and what we do first is fill the window by using the window.fill statement with the black color and then we will type in the end screen variable to be font dot render actually winning a font dot render and then say player one one keep the anteriorist to be true and then mention the color I will keep this to be white which we already find and then blip this onto our window window.blit end screen mention the coordinates I'm just going to keep it to be 200 in terms of X and so 15 in terms of Y let's say and see if this is working I will also do this for the play itself as well just copy this paste it right around here then change this to player two that now let's run that code and see if it's working enter the guided choice to be one go over here right as player 2 gets three points it displays that player to one again really nice and here it is the modified Bongo now if you made it up to this point of the video then I just want to say thank you for sticking with me now I again do recommend to check our Channel now there's just tons more in there so that's it byebye hope you see that
