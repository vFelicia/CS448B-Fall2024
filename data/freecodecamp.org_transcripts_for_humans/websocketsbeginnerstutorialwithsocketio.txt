With timestamps:

00:00 - websockets provide a way for a web
00:02 - browser and a server to communicate with
00:04 - each other continuously without having
00:07 - to close the connection after each
00:09 - exchange this makes it ideal for
00:11 - realtime applications like live chat or
00:14 - gaming where you need quick back and
00:16 - forth Communication in this course
00:19 - Nishant from cybernetico will teach you
00:21 - all about websockets with
00:24 - socket.io hey guys I am Nishant and
00:28 - welcome to websocket
00:30 - 101 in this series we are going to learn
00:34 - all about websockets if you want
00:36 - something brief check out my video on
00:39 - web sockets in 150 seconds so let's get
00:43 - started but first of all let's
00:45 - understand the basics what is a
00:48 - websocket and why do we need to use
00:50 - it so let's understand this in simpler
00:55 - terms if you are Developer and I know
00:58 - you are you must have have heard of
01:01 - HTTP which is the communication protocol
01:04 - widely used in web development so let me
01:07 - write this here
01:10 - HTTP it is the
01:13 - communication
01:17 - commuication
01:20 - protocol
01:22 - protocol okay fine it is a communication
01:25 - protocol widely used in web
01:28 - development for example example when we
01:31 - want to communicate with the back end
01:33 - from the front end to get some data or
01:37 - to post some data or to update some data
01:40 - or even delete it we make a request to
01:42 - the backend
01:43 - server this request is done through
01:46 - arest API or representational state
01:50 - transfer which basically connects the
01:52 - back end and the front end through a
01:54 - temporary link when we make request to
01:57 - the back end to get some data we use
02:00 - this HTTP
02:03 - protocol so let me write it here where
02:05 - is the arrow Mark I guess this one so
02:09 - when we make a request to the back end
02:13 - we use this
02:14 - so
02:17 - minute we use something called rest
02:22 - API which is
02:24 - basically getting the data from the back
02:27 - end using get request or sending data to
02:32 - the back end using post request so it
02:34 - has multiple types let me write
02:37 - them we have get we have post and so on
02:43 - like put delete patch all of them so
02:47 - these are done through something called
02:48 - rest apis so when we use HTTP what
02:52 - happens is one way connection is built
02:55 - from client to server so let's say that
03:00 - we need some data from the back end let
03:01 - me write it here let me make two
03:04 - squares this is the front end or the
03:06 - client
03:08 - side let's say this is the
03:12 - client
03:14 - similarly we have a server which is the
03:16 - back
03:18 - end so let's say we want some data when
03:21 - we submit a form or I can say when when
03:24 - we submit a form we want to send some
03:26 - data to the server okay this one second
03:29 - of
03:31 - form let's say we submit a
03:36 - form we will make a post request when we
03:39 - submit a form so the data will be sent
03:42 - through the payload to the server where
03:45 - it will be stored in the database from
03:47 - the back end so if I write to
03:50 - [Music]
03:53 - the DB so this is what we do when we
03:57 - call rest API
04:00 - we make a htb connection from client to
04:04 - server or from server to client so when
04:07 - we make a
04:08 - request like a post request using R API
04:12 - this will send us some data back also
04:15 - like a success or error message and code
04:20 - and we then see this data here true or
04:24 - anything or let's say
04:27 - 2011 or 200 also anything
04:31 - so in this case when we make a
04:35 - connection what is happening is we are
04:37 - making a request to the back end to
04:39 - store some data in the database and once
04:42 - it does it is sending us back a request
04:46 - code of 2011 it means
04:50 - success like this it means
04:53 - success this is known as R API call
04:58 - which is done through http connection
05:01 - which is the communication protocol as I
05:02 - said before so this whole thing makes
05:07 - one connection and once the success
05:10 - message we have seen on the front end
05:12 - this connection is closed so I can say
05:15 - this connection is
05:17 - temporary it is a temporary connection
05:20 - because once our data is back in our
05:24 - hands or let's say we get some Response
05:27 - Code of 2011 or 200
05:30 - or in some cases error codes the
05:32 - connection is closed and this means we
05:35 - are having or we finished one
05:40 - connection and it is
05:45 - closed correct it is closed this is
05:49 - known as a HTTP
05:53 - connection if you see on the screen now
05:57 - this is called HTTP connection and this
05:59 - is a response and request based type and
06:02 - one thing to notice is this is a one way
06:04 - communication because either the client
06:07 - will send to server and the server will
06:09 - respond back or server will send to the
06:12 - client and the client will respond back
06:15 - this means it is a oneway communication
06:18 - and the thing is this connection called
06:21 - HTTP this protocol it is
06:24 - stateless what I mean
06:26 - is each and every time we make a
06:28 - connection
06:30 - we have to specify some headers like
06:32 - tokens origin cookies and much more
06:36 - every time we make a request we need to
06:38 - repeat all those things tokens headers
06:42 - cookies Origins all of them it means it
06:47 - does not have any data where your header
06:49 - can be stored and the and the channel is
06:51 - closed when the communication happens or
06:54 - destroyed it is like sending someone a
06:56 - letter and expecting the reply back
06:59 - which could take days even months or
07:02 - even years in some cases this is called
07:05 - a HTTP connection now let's jump onto
07:08 - the web sockets what is a web socket so
07:10 - when we use a web socket we make a
07:12 - connection between server and the client
07:15 - that is similar to http okay let me just
07:19 - clear all this or just make it
07:24 - here let me write this as
07:28 - HTTP HT TP correct now let's talk about
07:32 - websockets that I have
07:35 - started web
07:40 - sockets so similar to http it is also a
07:44 - communication protocol but the thing is
07:47 - it is not so similar it has a major
07:50 - difference so when we use a web socket
07:52 - we make a connection request between the
07:55 - server and the client or the client and
07:57 - the server so initially what we do is we
08:01 - make a request just like this so let me
08:05 - just repeat these things here we have a
08:09 - let me just copy
08:11 - this so we are having a client and a
08:15 - server like this so initially in
08:17 - websockets what we will do is we will
08:19 - make a request connection from our
08:22 - client to server like this correct this
08:27 - is known as a hand check
08:29 - the initial
08:31 - connection if I write this
08:35 - as
08:36 - handshake this is the initial connection
08:39 - request from client to server
08:43 - initially so when this happens when the
08:49 - client will send a request of hand check
08:51 - to
08:52 - server the server will check all the
08:54 - things like headers Origins cookies and
08:57 - all like we do in HTTP request like in
09:01 - rest apis but the thing is this will
09:05 - happen only once at the
09:08 - beginning so basically what I want to
09:10 - say is with
09:12 - websockets we don't need to keep making
09:15 - connections each time the client needs
09:17 - something from server or the server
09:20 - needs something from the client the
09:22 - connection is like a permanent
09:23 - connection between the server and the
09:25 - client or the client and the server
09:28 - until we close the
09:30 - connection so what will happen here is
09:33 - when we make a request which is called a
09:35 - hand
09:36 - check if it is successful let me R this
09:40 - to a back arrow
09:46 - here so when this is successful we will
09:50 - get something called a success message
09:52 - here one
09:58 - sec wa which is mean which means
10:00 - connection
10:02 - established
10:03 - so now the connection between the server
10:08 - and the client is done it means our data
10:13 - can flow from server to client any time
10:18 - or at any time or from server to or from
10:21 - client to server as well what I mean is
10:23 - this is a permanent
10:25 - connection which means it is not it does
10:28 - not close
10:31 - so when a web soet is done when we make
10:36 - a web soet
10:37 - connection the connection is long lift
10:40 - connection until we close the
10:43 - connection so first of all we make a
10:45 - request from client to server and that's
10:48 - all any data from client to server will
10:51 - flow without any hasle or data from
10:55 - server to client will flow without any
10:57 - hassle it's like we socket is a two-way
11:00 - street allowing The Interchange of data
11:03 - between server and the client
11:05 - simultaneously in other words the client
11:07 - and server can send data to each other
11:10 - independently at any
11:12 - time this is called a web socket which
11:16 - is like a phone call initially when we
11:19 - call a person the connection is made and
11:23 - you can say pretty much anything which
11:25 - is received on the other end without any
11:27 - latency or delay but but why do we need
11:30 - to use websockets and when let's say
11:33 - that there are sen in real life where
11:36 - you want to have real time data which
11:40 - type of
11:41 - data real time so there is a tool called
11:47 - Google Docs which is basically a
11:51 - document editor from Google which uses
11:54 - data in real
11:55 - time what I mean is if you open one tab
11:59 - and use Google Docs and open another Tab
12:03 - and use Google Docs both on the same
12:06 - user then what happens is when you edit
12:09 - it on one end it will be on the other
12:11 - end so what I mean is when you edit on
12:14 - one end it will reflect on the other end
12:17 - without any latency imagine if Google
12:19 - Docs used HTTP we have to refresh our
12:24 - page every time we make a change on a
12:28 - document or if you want to receive some
12:30 - data on the document let's take some
12:32 - more examples where we prefer websockets
12:35 - over HTTP connection and they are if you
12:40 - are building a chart application or a
12:42 - trading app or a multiplayer dashboard
12:46 - because if you use HTTP we have to keep
12:49 - calling the apis to refresh the data
12:52 - which doesn't seem a good option The
12:54 - increased latency would have us want to
12:57 - throw our app in the dpin and this is
13:00 - why we use websockets now let's learn
13:02 - how to implement websockets so here I am
13:05 - having a library called WS which is a
13:07 - not just library for websockets but this
13:10 - is not what we need we need this a
13:13 - library called socket.io which is a
13:15 - improvement over web socket Library I
13:17 - mean this library because if you check
13:19 - documentation here let me open this
13:21 - introduction or we can say how it works
13:23 - no this introduction sorry so if you go
13:27 - down we have features and some of the
13:29 - features we don't have in WS it is a
13:32 - simple implementation of websockets so
13:35 - this is why we don't use this so throw
13:37 - it now this has long polling it means
13:41 - this will fall back to HTP Connection in
13:44 - the case web soet connection cannot be
13:46 - established then we have automatic
13:48 - reconnection it means under some
13:51 - condition the web socket connection can
13:53 - be broken between the client and the
13:55 - server and vice versa so this is why we
13:58 - have heartb mechanism in so IO which
14:01 - checks the connection status
14:03 - periodically then we have this packet
14:06 - buffering which means when we disconnect
14:09 - our packet will not be destroyed it will
14:12 - be buffered and sent to the server or
14:14 - the client upon the connection now if I
14:18 - click how it works this will tell us
14:21 - that this soer IJ sorry uses something
14:24 - called in IO for connection between
14:27 - client and server then we have something
14:30 - called a handshake which is basically
14:32 - the client telling server then we want
14:35 - to have a connection between us so this
14:38 - is the beginning of the socket
14:39 - connection now let me show you how to
14:43 - install socket. iio into a node just
14:47 - application by the way we can use this
14:49 - anywhere like any language on server we
14:51 - have JavaScript Java python goang rest
14:55 - and on client we have browser V chat I
14:58 - don't know what that is
14:59 - Java C++ swift. python. net rust cotlin
15:05 - PHP all this stuff and here you will
15:07 - find documentation of how to integrate
15:10 - so let me now come to installation and
15:13 - install the server and initialize it so
15:17 - first of all let me make a folder here
15:19 - called server now let me open Terminal
15:22 - and just do CD server clear the console
15:26 - first now let me initialize a
15:29 - package.json file using npm it will ask
15:32 - us the name of package so you can say
15:34 - just server uh version Let say same
15:37 - description of web socket implementation
15:41 - sorry
15:42 - implementation
15:44 - implementation entry point say
15:47 - server.js no test no no
15:51 - Nishant no yes so if you open server now
15:55 - we will see the package SN file here
15:57 - let's make a file called
16:00 - server.js where we will have our server
16:02 - code for this socket. iio Library so to
16:04 - install socket. IO we can just have npm
16:07 - install socket.io type it in here and
16:10 - enter and this will be listed in the
16:12 - package file here now we can choose the
16:14 - version as well now what we need is to
16:16 - have initialization on our screen click
16:18 - this tab we can have stand alone now we
16:21 - need to have HTTP server using nodejs so
16:24 - we can use this thing called create
16:26 - server from HTTP so if you open server
16:29 - let's make Con what is it create Server
16:31 - create server from HTTP which we'll use
16:34 - a required keyboard because it not as6
16:36 - module we are using common J so we can
16:38 - make HTTP the next thing we need is to
16:41 - have server capital S equals to require
16:44 - what is it the name is socket. iio now
16:46 - we need to initialize our server from
16:48 - HTTP as it says here we need to do const
16:51 - HTTP server equals to create server
16:53 - which will store its instance in the
16:56 - HTTP server variable we need to have
16:59 - this Io const Io or I can say socket
17:03 - equals to new server and then we can
17:05 - pass this H server in here with a bunch
17:07 - of options that I will add later so the
17:10 - options are optional we don't need this
17:12 - so in some cases we might need them now
17:14 - we need to have IO Doon sorry not IO
17:17 - socket Doon and then pass a event key
17:20 - this connection is called a event key
17:22 - which will tell the socket. I liity that
17:24 - we need a connection so just make it
17:27 - then this will take a call back fun
17:28 - function and then we can just have
17:30 - socket and just console it now let's
17:33 - make a HTTP connection so we can just do
17:36 - HTTP server dot what is it listen port
17:39 - number 3,000 and a call back function as
17:43 - second param or argument to say server
17:46 - is connected we can check if everything
17:49 - that we're doing here is
17:51 - correct yes it is correct so let me now
17:53 - run node server doj and we will see
17:57 - Server is connected this means means our
17:59 - server has been connected successfully
18:01 - now on the client side let's check close
18:03 - server and open client we have
18:05 - installation so here we need to include
18:07 - a CDN as a script but first let's make a
18:09 - folder called C make a file called
18:12 - index. HTML so I can just do this and
18:16 - say
18:17 - socket.io client so we can leave the
18:20 - body as it is but we need to add this
18:23 - CDN so just do and click save now this
18:26 - CDN is done we can also use npm for the
18:29 - client let's say in react or angular or
18:31 - something okay we also need to create a
18:33 - client server file so we can say
18:36 - index.js here and include this as well
18:39 - so I can say Crypt SRC okay SRC index.js
18:44 - and we are done here now we can run this
18:47 - as a live server here will open up in
18:49 - the browser now if you come over to
18:51 - index.js file we need to have the
18:53 - address of server which is sttp local L
18:56 - 3000 so to add it we can just make
18:59 - something like this Con socket equals to
19:02 - IO what is it HTTP local local host
19:06 - 3,000 then save the file now this is
19:08 - done what we need is to have socket. on
19:11 - using the connect event key and also we
19:14 - need to have a call function now here we
19:17 - can do something called Data or let
19:20 - response and do a console log of
19:22 - response so let's save it and check in
19:25 - the browser what we are getting if I
19:27 - open the browser open the console but we
19:30 - made a mistake here and that was we need
19:32 - to have this script after our CDN
19:36 - because this will load first and then
19:38 - this otherwise we can get some errors
19:41 - that we don't want here we are having
19:43 - this thing and if you now check the
19:45 - console we will see this errors so if I
19:48 - refresh once we will see access to xhtml
19:51 - request at this and this is blocked by
19:55 - course policy so when we get errors like
19:57 - this what we need to is just go to
20:00 - server and add CS with an origin of this
20:04 - which is the address of our client
20:06 - application save this file refresh this
20:09 - or memory restart server so let me do
20:12 - this again it is connected and now we
20:14 - are seeing this stuff if you in
20:17 - server.js we are consoling the socket
20:19 - object here and that is what we're
20:22 - having here this events server name all
20:27 - the stuff recovered data connected D
20:29 - because they're connected and such then
20:31 - we are having handshake headers which
20:34 - includes the host connection accept
20:37 - keyword and these stuff time secure it's
20:40 - not secure because I guess it is not
20:42 - https it's HTTP only now if I open the
20:45 - console on the content LIF refresh we
20:48 - will get undefined here because we're
20:50 - not sending anything we're just
20:52 - connecting here to our server now if you
20:54 - come to inspect open the network tab
20:59 - we have a tab here called WS for
21:01 - websockets just like f XR now let me
21:04 - refresh the page and we can see the
21:07 - initial handshake when we make a
21:09 - connection we have eio transport and Sid
21:11 - this is the unique ID for one user or a
21:14 - user if you open the soer io go to the
21:17 - how it work tab we can see this thing
21:20 - that we are having we are having Sid we
21:22 - are not specifying ping time interval
21:24 - and time out that is why it is not here
21:26 - because this is for hardbeat for pinging
21:29 - so this is what we can see here if we
21:31 - are connecting to websockets now let's
21:33 - send a message from our server to client
21:36 - see how to do that what we need to do is
21:38 - in this socket. on we need do socket.
21:41 - Emit and let's say we use a message
21:44 - event key call message and send some
21:46 - message like hello now if you come to
21:49 - here we can just do socket Doon with the
21:52 - same event key which was message that we
21:54 - are having here basically we're creating
21:56 - a room with a message event key and when
21:59 - we have the same event key in the client
22:01 - we can get the message and then a and
22:04 - then a console log here so we can just
22:05 - do data now if you open the console now
22:08 - we can see hello now we are sending a
22:10 - message from our server to client using
22:13 - this emit function that you can see here
22:16 - this emit now how to send the message
22:18 - from our client to server so in the
22:21 - socket on we can just do socket. emit
22:23 - again with the event key so let's make
22:25 - it message as well and let's send hell
22:28 - hello there in the server let me remove
22:32 - this console log and in here we can do
22:35 - socket do on with that event key that we
22:38 - are using to send data from client to
22:40 - server which is again message so we can
22:42 - just do message and then a console log
22:44 - so we can say data CG data save it and
22:47 - let me run the again and we can see this
22:50 - thing called hello there which we're
22:51 - sending from the client this message if
22:54 - I do this this will change automatically
22:56 - and let me just do hello there I am
22:59 - Nishan and we can see the message coming
23:01 - here in real time whenever this changes
23:04 - so this is how we can Implement
23:05 - websocket from server and from client
23:08 - side now let's build a multipl dashboard
23:11 - using websockets and react on the front
23:13 - end so first of all I will be using this
23:16 - Suite to create a react app so let me go
23:18 - over to vs code go to the client folder
23:22 - so CD client clear the console first now
23:26 - let's create a VAB using or for react so
23:29 - if we go down we can see npm create weit
23:32 - at theate latest so npm
23:35 - create we at theate latest to create the
23:39 - latest V tab so just give a DOT for all
23:44 - the project files to be installed and
23:46 - added to the client folder choose react
23:49 - here we will use JavaScript and we are
23:52 - done so now let's move to the client
23:54 - folder and see all the files here now do
23:57 - npm install
23:59 - it's installing all the dependencies
24:01 - from package as we need to add the
24:03 - socket. io client Library here so if you
24:07 - click where let's say
24:10 - initialization and if you go down we can
24:14 - see something here maybe not here go
24:17 - back and then click documentation then
24:20 - click
24:21 - client installation and if you go down
24:24 - we will see how to install it for react
24:27 - using nbm so just do this and you will
24:29 - see this in the package and file this
24:33 - socket. iio client here now let's start
24:36 - the react app using npm run Dev it's
24:39 - hosted on this link so if you open this
24:42 - you will see this now let me clear some
24:45 - things from
24:46 - app.jsx which are this or these things
24:50 - just let me clear this and rename this
24:53 - to let's say
24:55 - react multiplayer
24:59 - dashboard save and we can see we also
25:02 - don't need this so remove it we only
25:05 - need this and this H1 that we having the
25:09 - styles are inside app. CSS
25:12 - so I guess we don't need to have this or
25:16 - maybe if you open main. jsx sorry index.
25:21 - CSS we should have minan height as 100
25:24 - so if I clear this they should go on the
25:27 - top
25:29 - but the body okay one thing I don't
25:33 - think we need to just leave this here
25:35 - okay the name is here also let me remove
25:38 - also let me remove this count State and
25:42 - we logo and such also the we need the
25:45 - you state we need the use State letter
25:47 - so leave it here we can see react multip
25:51 - dashboard here now let me explain how it
25:54 - will work so for
25:56 - example let me have have two sides here
26:00 - one will be client so let me write
26:02 - client here where is the this one
26:05 - suppose that this is a client side so if
26:08 - I make this
26:10 - Excel place it here this one is the
26:12 - client side which is a react app our
26:16 - react app then we will have a
26:19 - server here so if I make some text here
26:23 - called server how to increase font size
26:26 - manually I don't think we can do this
26:29 - this one I think yes if we do this it
26:32 - will be big now we have client and we
26:36 - have a server first of all if you open
26:39 - server.js we already have a server
26:41 - connected here or the code to make a
26:44 - connection so the origin should be now
26:48 - this to avoid any cords errors so just
26:52 - place this origin here fine now when we
26:55 - make a
26:56 - connection and we don't need to have
26:59 - this as well so we now have a simple
27:02 - connection for socket. iio on the server
27:06 - using this code if you want to know how
27:09 - I did this just go back to my previous
27:12 - video in this playlist now how it will
27:16 - work is let me explain
27:19 - so we will create a form on the client
27:23 - side so if I just do a form here
27:28 - let's say we need to have a form on the
27:32 - client side so when a user opens the
27:38 - application he will see a form which
27:41 - will be input tag and once he puts his
27:44 - name and the
27:46 - score it will go to the back end so form
27:49 - will contain two Fields let's say
27:51 - name and form will have a name and core
27:56 - so suppose that a player playing a game
27:59 - and he wants to update a score like
28:02 - manually because we're not creating a
28:04 - full game so that we can upload or the
28:07 - scores are updated automatically when a
28:09 - user is playing a game he must submit
28:13 - his score with his name once it does
28:15 - that this will go to the server and this
28:20 - will be captured
28:22 - using
28:24 - so. so I can say this form data
28:28 - will be inside an object so let me write
28:32 - something like this here it will be
28:35 - inside an
28:36 - object and this object will have a name
28:39 - let's
28:40 - say P1 or player
28:43 - one and his score so score let's say
28:49 - 1,000 so I can make this smaller I guess
28:53 - maybe not smaller let's put it here so
28:55 - that we can see so yes
28:59 - this will go to the server
29:02 - here and
29:05 - then this core will be updated on the
29:08 - client side like we will send the data
29:12 - from client to
29:13 - server and without refreshing we should
29:16 - get them here as well on the client that
29:20 - was the purpose of
29:21 - websockets so it will go and display
29:25 - them in our application so I can just
29:28 - put it there and I can say this UI let
29:34 - me have the name and score so let's say
29:37 - name will
29:38 - be P1 in a table with a score 1,000 this
29:43 - is how it will work once we will have a
29:46 - form on the screen in the react Tab and
29:49 - once a user submits the form using his
29:52 - name and score this will go to the back
29:54 - end
29:56 - server here I am bad at
29:59 - creating vs like this so forgive me so
30:03 - it will go in the server and it will be
30:06 - sent back to the client in real time and
30:09 - it will be updated here on our screen
30:12 - now on the client side we need to have
30:14 - this IO from socket. IO client so you
30:17 - can just say IO from socket. IO client
30:22 - yes now we need do const socket
30:26 - instance equals to IO dot Non DOT just
30:32 - put the address here just like we did in
30:34 - the previous video so the address will
30:37 - be Local
30:40 - Host where is it Local Host 3,000 this
30:45 - is the address of our socket instance on
30:48 - the server this port number that we are
30:52 - using on the client side here now let me
30:56 - have a US effect hook and inside this
30:58 - effect we will learn a function so let
31:00 - me make it
31:03 - function
31:05 - connect
31:07 - socket not an add function this will be
31:11 - a regular function so we can say so.
31:16 - on
31:19 - connection and a call back then we can
31:22 - say so just take up aam from this call
31:26 - back say socket and add it
31:29 - here save and then run the function in
31:31 - the US effect H so are we running the
31:34 - client yes we are running so let me
31:36 - check in the console what we're getting
31:38 - okay we are not getting anything because
31:40 - we also need to run the server so I can
31:43 - just say CD
31:45 - server and node
31:49 - server.js it is now running so
31:52 - refresh and I guess we're connected here
31:54 - so if you see this on our server because
31:58 - we are also consoling here the socket
32:01 - object it means we're connected now the
32:05 - thing we need to do is we are connected
32:08 - here so let me collapse this console
32:11 - okay now according to this
32:13 - design we need to just have to create a
32:16 - form
32:17 - first so if I create a form using input
32:23 - TX save we will have an input now
32:27 - instead of creating input Fields
32:28 - directly like this we can make
32:30 - components so if I come to Source folder
32:34 - and make a folder called
32:36 - components let's make one now inance now
32:41 - instead of having input fails directly
32:44 - like this here now instead of having
32:47 - input Fails Like This Here directly we
32:50 - can make a component for input field so
32:54 - make a
32:55 - component what is spinning of comp
32:57 - component component
33:00 - folder in here make a file called input.
33:05 - jsx make it a functional component and
33:08 - then simply return one input tag here
33:12 - this will have a placeholder I can
33:15 - say which will come from props so if I
33:18 - get props from here and then the
33:21 - structure let I can say the name which
33:25 - will be
33:26 - placeholder from the props then place
33:29 - the
33:30 - placeholder
33:32 - here or we can directly pass the
33:35 - placeholder here so I can say
33:37 - placeholder then we don't need to do it
33:39 - because we're restructuring it directly
33:42 - now let's pass the placeholder here in
33:44 - this input component that we just
33:47 - made input from components input
33:51 - automatically imported here Place Holder
33:53 - will be equal to let's say
33:56 - enter you
33:58 - name and now we can see it let's style
34:01 - it a little bit so I can just give this
34:04 - a class
34:06 - name and then we can do input field so
34:12 - we can
34:13 - make one we can make a file for styling
34:18 - but let me do it in the app. CSS itself
34:21 - so I can just do input Field height
34:25 - let's say 10 RM
34:28 - okay too big maybe 2
34:31 - RM yes this is not fine then padding
34:35 - left 1
34:38 - RM h no one is too much
34:42 - say5 yes this is not fine also we can
34:46 - REM the outline as
34:49 - none fine we have entered your
34:52 - name and let me give a width okay do we
34:56 - have input fields somewhere here because
34:59 - we are seeing the previous Styles the
35:01 - button button hover media rout these
35:05 - things where is the
35:07 - input I guess not here where where where
35:12 - where
35:13 - where fine it is better if we don't have
35:16 - so we can just make width as 20
35:19 - R like this now it looks
35:23 - better we can type anything in here
35:26 - similarly make one for uh what for one
35:31 - for the score enter your
35:34 - score now let's have a little bit margin
35:37 - between them so come to app. CSS and
35:40 - here just give margin as 1 RM one is too
35:44 - much say 0.5 now we have a name and also
35:48 - one for score correct name and score
35:53 - this is we are having
35:55 - here fine now what we need to do is we
36:00 - need to create a function to capture the
36:02 - value from the and score so I can just
36:05 - say
36:06 - function uh handle input this will take
36:10 - an event fine so let me pass them in
36:14 - these
36:15 - components handle
36:17 - inputs similarly in the second one as
36:20 - well save in the input also D structured
36:24 - this and then just say on change handle
36:29 - input so we need to have the name and
36:32 - the value for name we need to pass some
36:36 - Dynamic names so I can say name which
36:38 - will be equal to name the field name and
36:42 - this will be equal to what
36:46 - score now get the name prop as well in
36:49 - the
36:50 - input the order does not matter matter
36:53 - so I can say name equal to name
36:59 - now if I just come to handle input and
37:02 - do a console log of the
37:04 - event we can get the event captured from
37:09 - the input field so if I type say Nishant
37:13 - we getting the input event here I need
37:17 - to filter through it so I can
37:20 - select the name and the
37:23 - value from this event do Target so
37:28 - basically we will Target the current
37:29 - element and extract the name and value
37:32 - from
37:33 - here then we can just do name as value
37:38 - so that it will become an object so also
37:41 - add an object parenthesis here if I type
37:45 - something like this again refresh it let
37:49 - me add my name Nishan so we are typing
37:53 - in the name field so we're getting name
37:55 - if I type score we will get score
37:57 - because this field this field is for
38:01 - score now we have a name and a value
38:05 - let's make a state using the use State
38:08 - hook which will
38:10 - be
38:12 - const data or we can say
38:17 - score set
38:20 - score which will be an object so use
38:24 - State and object
38:28 - so what we need to do is just set
38:31 - it but first let me grab the
38:34 - current key value pairs so I can say
38:39 - current object equals to an object with
38:44 - the properties here like this remove the
38:47 - console lock for
38:48 - now now we need to set this current
38:51 - object like this now if I console this
38:55 - current object we should get both of the
38:59 - elements inside for one user so if I
39:02 - refresh something is
39:04 - wrong current object is not defined
39:07 - sorry score not this current object
39:10 - because scope is the scope will not work
39:13 - outside the function because of
39:16 - closures so let me add the name Nishant
39:19 - Kumar and samsh called sorry not AG
39:22 - score called
39:24 - 1,000 like this now we're getting the
39:26 - data here properly
39:28 - like this and now we need to set this
39:30 - data or I can send the data to the back
39:35 - end server using
39:37 - socket.io so I can say function I can
39:40 - say emit data or you can say send scores
39:45 - so I can just do a console log of here
39:48 - here fine and we need to have button so
39:52 - I can say okay sorry a button we need
39:56 - send score
39:58 - or I can say publish score on click of
40:00 - the button we need to run the function
40:02 - that was send sces
40:06 - here so once we click the button also
40:09 - give it a class name and say send
40:14 - course and just give some margin on this
40:18 - button margin top say one RM as well
40:23 - fine now if I type this score we can see
40:26 - data here
40:28 - that is the object data from The
40:32 - Forum now what we need is to emit this
40:36 - data to the back end I mean the score
40:39 - data so we can just do it like
40:43 - this we are having a socket using this
40:46 - socket I can just do socket.
40:50 - emit this is a
40:53 - score for scores and then the score
40:58 - now when we click this button of publish
41:01 - course this will be sent to the back end
41:03 - using socket. imit
41:07 - function so save it and now we have to
41:11 - get it here and one more thing I want to
41:13 - do is make this socket as simple as IO
41:17 - so that we do iio Doon and now in this
41:21 - we can say socket.
41:25 - on so
41:28 - we are setting the scores using this key
41:30 - event key called scores so I can say
41:33 - scores and then a call back we can say
41:37 - sces and just do a console log off here
41:41 - sces like this open the terminal in the
41:46 - vs code open the server we can try this
41:50 - out but first I don't think we need this
41:54 - conso of socket just restart it once it
41:58 - is running refresh it here let's try it
42:01 - out let's enter the name called Nishant
42:04 - and score called 1,000 or 10,000 click
42:07 - publish
42:08 - course and it is indeed here the server
42:12 - sorry the name my name and the
42:16 - score let me create a global object so
42:20 - let and we have to store our scores
42:23 - inside this object so I can just say
42:28 - course equals
42:30 - to what we can say here okay in this
42:34 - course we need to store this data so I
42:37 - guess this should not be an array
42:39 - because we can have multiple scores so
42:41 - we can say this is an OB as an array so
42:45 - scores do
42:47 - push this
42:50 - scores so I can just rename this
42:54 - as player
42:57 - what happened player
43:00 - sces and then push it inside
43:03 - this now we can just do a console log of
43:07 - players scodes here and remove it
43:10 - because we can have multiple play
43:12 - players and then we can see it here but
43:15 - this will not work inside we need to
43:18 - just have it here so I guess restart
43:21 - server once more it is running let me
43:24 - open this in the new tab
43:28 - and just do name as Nishan or just say
43:33 - P1 for 1,000 or 10,000 click publish
43:38 - score it is here in this array now for
43:42 - second one let me do Play2 which is
43:45 - player two score
43:48 - 20,000 click publish score and now we're
43:51 - hitting both the scores here in this
43:55 - array that we are having in this console
43:58 - log it is now working I can say but the
44:01 - thing is we need to have some IDE as
44:05 - well which is which will be provided by
44:09 - the scores not the scores I can say
44:13 - socket so this socket is also having an
44:16 - ID so if I just do CLG socket.
44:21 - ID which is a unique ID for each socket
44:24 - connection so for this socket connection
44:28 - we are having an ID for this we are
44:30 - having an ID that we can see if I
44:33 - refresh both of them and I think we need
44:36 - to restart it again so restart just
44:39 - click P1 some sorry click P1 some score
44:45 - 10,000 click publish score and this ID
44:48 - is the socket ID that is unique for each
44:52 - socket connection so we can also store
44:55 - this here so with the sces we can sue we
44:59 - can do socket ID which will be ID simply
45:02 - and just destructure
45:04 - it now if I restart it once more we will
45:09 - have one extra socket ID
45:12 - field which is unique for each
45:14 - connection so if I do player one some
45:18 - score
45:20 - 20,000 publish
45:21 - it we have name as P1 scored as this and
45:25 - ID as this try for this one say
45:29 - P2 score will be say 30,000 click
45:33 - publish score and it is indeed here now
45:37 - that we're getting our scores here as
45:39 - player
45:40 - scores we need to imit this scores back
45:44 - to our client so I can just say uh
45:49 - socket
45:51 - emit I can say players sces and the
45:54 - value players
45:55 - sces so need the console here we can
45:58 - just see directly in our client so where
46:04 - to get it so I can just do
46:07 - it I
46:09 - guess
46:11 - here so we can say socket do on player
46:17 - SC okay what not on what do we do here
46:22 - socket. on yes the key name sorry event
46:26 - key name and
46:29 - say players codes then just do a console
46:33 - log of players
46:36 - codes now we will see this on our
46:39 - consoles so better to start our client
46:41 - server sorry better to restart our
46:45 - server I refresh
46:47 - them and let me try this as
46:50 - P1 score 20,000 publish
46:55 - them nothing happen happened okay the
46:58 - thing is we need to just have them when
47:00 - we click our
47:02 - button so if I type
47:04 - P1 30,000 publish it this data will be
47:09 - here and try this again with different
47:13 - player say 30,000 publish it his score
47:18 - will be on the scoreboard here but the
47:20 - problem is when we click
47:22 - publish the score for P1 or in P1 screen
47:26 - for P2 should be displayed in the
47:29 - console so what we will do is we will
47:31 - run this emit function on socket using
47:35 - set interval on every I can say 5
47:39 - Seconds set set interval say 5,000
47:43 - milliseconds and do socket. emit so that
47:48 - it emits the scores on our client side
47:53 - every five seconds so that if I now
47:57 - refresh the page or maybe start server
48:01 - once more after closing
48:03 - it it will limit the scores every 5
48:08 - seconds in our client side or on our
48:11 - client side so let's
48:14 - wait see what we're getting so currently
48:17 - we have nothing but if I type
48:21 - Nishant and the score of 30,000 publish
48:25 - the score
48:27 - now it is on line number
48:29 - 27 like in m to
48:32 - jsx and I think every 5 Seconds we will
48:35 - get the score
48:37 - updated but the problem is in our server
48:42 - we should have it outside because it is
48:45 - not getting triggered if we don't submit
48:48 - the
48:49 - score so I can just do it here as well
48:52 - like socket. emit so once weing the
48:55 - connection and and submit the form of
48:58 - our scores we can see our
49:02 - scores
49:03 - so what we can do is restart the server
49:07 - once
49:08 - more and do this this let's set P1
49:16 - 20,000
49:17 - publish same with
49:20 - P2 say
49:23 - 40,000 click
49:25 - publish every 5 Seconds seconds you will
49:27 - get the data
49:29 - displayed see I mean
49:32 - updated P1 and P2 let's start third one
49:36 - called
49:38 - P3 refresh it and let me just have P3
49:46 - here and then score of
49:49 - 50,000 publish
49:51 - it we now having score of P3 as well and
49:55 - it will reflect edly in the score of P2
49:59 - and in P1 as well see let me show you
50:03 - the scores and the names all we have
50:06 - left to do is display it in our UI so
50:10 - just make a state which will be an added
50:13 - state so const scores set scores equals
50:20 - to use State and empty
50:23 - array okay one problem is set all scores
50:27 - let's make
50:29 - it then just
50:32 - do this in our socket on player
50:37 - sces to map it we can just come here
50:40 - after publish
50:42 - button and do scores. map let's do the
50:47 - table so if I come to I can say
50:51 - table say HTML some simple HTML table
50:55 - from W3 sces like this so map current
51:01 - score and just return this
51:04 - table like this let me copy this table
51:07 - code will
51:10 - write so we need the TR first but the TR
51:14 - will
51:16 - be okay which where should we show the
51:19 - TR this this should be outside so just
51:23 - WP or just copy
51:27 - this entire table and copy the scores
51:30 - mapping function and we all need to do
51:33 - is just leave one TR which is table row
51:37 - save
51:39 - it and just do this so just let me paste
51:43 - it here and in here we can just map one
51:48 - TR with the okay this is the
51:52 - name what is this it is company contact
51:55 - and Country
51:57 - so in here we can just
52:00 - have only two of them score
52:04 - dot
52:06 - name is it name or something else I
52:09 - guess it is name
52:11 - yes and then the
52:14 - score not score we don't need the third
52:18 - TD so remove
52:20 - it
52:22 - and we need to
52:25 - have t T body as well
52:29 - because it is giving us an issue so just
52:33 - Place one t body as well so Place one t
52:36 - body as well refresh it is still
52:39 - there TR cannot appear as a child of
52:43 - table okay tboard should be after table
52:48 - now it is gone now let's just paste The
52:52 - Styling so if I just copy tdtr and table
52:56 - also
52:57 - th paste it place it and now we have the
53:01 - table the only problem is I think I am
53:06 - doing some mistakes our scoring if I
53:09 - check we have name and score okay it is
53:13 - fine but still we are not seeing
53:16 - anything so just make this as name and
53:20 - score refresh it
53:22 - once so let me try entering on my name
53:25 - called
53:27 - P1 core
53:29 - 20,000 publish it okay the problem here
53:32 - is we don't need to have background
53:35 - color for this and child so remove and
53:37 - now we will get this one more thing I
53:40 - want to do is
53:42 - just show the table only if we have
53:46 - scores otherwise just hide it so I can
53:49 - just make a condition here show the
53:50 - table when the
53:53 - length is more than zero
53:57 - otherwise simply show empty
54:04 - fragment okay
54:06 - table this should be here else empty
54:09 - fragment like this and we're done now
54:13 - let me just add P1 score
54:17 - 20,000 publish it the data will be here
54:21 - let me try for
54:24 - P2 for
54:27 - 30,000 publish it we can see the data of
54:30 - both P1 and P2 and it will be updated
54:34 - automatically let's try for
54:36 - P3 the score will be
54:39 - 40,000 publish it it will be here in
54:43 - some time whenever one user publishes
54:46 - this sces it will be automatically
54:49 - displayed for other users as well and
54:52 - this is how we can create a multipl
54:54 - dashboard using react and and socket.
54:58 - iio now let's perform CR operations
55:00 - using react nodejs and websockets but
55:03 - first of all let's understand what is
55:05 - cred so cred basically means create read
55:11 - update and delete that we perform on web
55:14 - applications so first of all let's
55:16 - create a react T here so make a folder
55:19 - called client that I already have let me
55:22 - navigate into that folder and do npm
55:27 - create V atate latest we need to have in
55:31 - the folder so just do react JavaScript
55:35 - nbmi or install and let me also open
55:40 - socket.io documentation
55:43 - client installation this we need to
55:46 - install in our client so install it so
55:50 - basically we will be using no database
55:53 - just a UT variable here we can say let's
55:56 - say data which will be an array or we
56:00 - can make this as crud let's start the
56:02 - app npm run Dev it has been started let
56:06 - me open client Source clear all the
56:09 - things from app so we don't need these
56:12 - things I mean we don't need this div and
56:16 - this div this card div so let me rename
56:19 - this to cud
56:21 - operations save it let me remove these
56:24 - two things as well fine
56:27 - now we have this on the screen crud
56:28 - operations so crud means as I said it
56:31 - means creating data reading it updating
56:35 - it and deleting it from the database or
56:38 - from some yes from some
56:41 - database but we don't have a database
56:43 - here we have a simple variable called C
56:47 - data so we using this to store our data
56:51 - no database we will use so what we need
56:53 - to do is now create a input field here
56:56 - or multiple input Fields so I can say
56:59 - input let's make this as
57:02 - placeholder enter your name save we will
57:07 - have an input enter name give a class
57:10 - name on the input for some styling say
57:14 - input field so let me copy this input
57:17 - field come to app.css
57:20 - let's write something here which will be
57:24 - height 1 RM or 1.5 RM what about this
57:28 - yes then padding left 5 RM fine let's
57:35 - give a width of 10 VH sorry 10 RM 10 RM
57:40 - we have entered your name let's also
57:43 - make multiple Fields like
57:46 - age
57:47 - interior age but we need to have them in
57:51 - different lines so I can just strap it
57:53 - in a div and give the div a class name
57:55 - of let's say what can we say form let me
58:00 - copy form Fields come to app. CSS and do
58:05 - form Fields display Flex Flex Direction
58:10 - column let's enter it align item Center
58:13 - we have a gap between them Gap one RM
58:16 - now we have inod name and age so we have
58:19 - two input fields we can add third one
58:22 - let's say
58:24 - interior what can we say inter youred
58:27 - age intered phone number and we have
58:31 - three Fields name age and phone number
58:34 - okay so we will use these three fields
58:37 - to send data from the UI to the
58:42 - server so how to do that first let me
58:45 - have a form Handler called let's
58:49 - say handle input let's hook it up on on
58:52 - these three input fields on
58:55 - change handle input let's also pass a
58:59 - prop called name on the input so this
59:02 - will be a name prop because it's a name
59:05 - input field this is an age input field
59:08 - this is a phone number input field so
59:10 - name let's say just phone this will take
59:13 - an event now when we destructure the
59:16 - name and value from the event to Target
59:19 - in this handle
59:21 - input now we need to make an
59:24 - object to store the key value appears as
59:27 - an object so first the name and its
59:30 - value now if you type let's say you type
59:33 - name Nishant the name will be the name
59:37 - because it's a name input field and the
59:39 - value will be
59:40 - Nishant like an object so let's me let
59:43 - me create one state here input or form
59:46 - inputs set form inputs equals to use
59:50 - State empty
59:53 - array no empty let's make it as an empty
59:58 - object Now set form
60:00 - inputs we'll take the previous input as
60:03 - well that it had and it will seure the
60:07 - previous and add the new one this object
60:11 - now we need to have a button as well so
60:13 - make a button and give this a name of
60:16 - add data
60:19 - save let's make a function
60:23 - con handle submit now let's use handle
60:28 - submit on click handle submit on this on
60:32 - click event on add data button we can
60:36 - console this form inputs in the handle
60:39 - submit function so when we click the
60:42 - button of add data we should see the
60:44 - data in the console so let's
60:46 - check name
60:49 - Nishant is
60:52 - 50 for number
60:54 - 1005 click add
60:57 - data we have object okay I think this
61:00 - should be destructured as well sorry now
61:03 - click add data again let's refresh
61:06 - first name Nishant is
61:10 - 50 phone number 105 now we will get all
61:14 - the input Fields like name Nishant age
61:16 - 50 and phone number this so let's send
61:19 - it to back end I in the server and it
61:22 - will be stored inside the Credit Data
61:25 - but first let's configure socket. iio so
61:29 - first import IO from socket.io client
61:34 - now let's create an instance of the
61:35 - client so const socket equals to IO and
61:40 - then we will use this server address
61:43 - which is Local Host 3,000 we need to
61:46 - start server as well but yes so just go
61:50 - into server folder CD
61:53 - server do node
61:57 - server.js it is running now now we are
62:00 - using socket here as our instance now we
62:03 - can just do socket. emit so let's say
62:06 - data and then just send form inputs here
62:09 - save now this data will be sent to the
62:12 - back end server here now we have to
62:16 - store this inside the credit so if I do
62:19 - socket do on to listen to the changes
62:23 - that we are sending from front end on
62:25 - the client we can just do this key name
62:29 - called data we are sending the data for
62:32 - inputs using emit function with the key
62:34 - of data so we will receive it here as
62:36 - well with same key name and to check the
62:39 - data we can say data and CLG data which
62:43 - will be in the console in the terminal
62:46 - in the server so let's check Let me
62:49 - refresh once and enter the name Nishant
62:52 - age say 86 phone number 999
62:56 - click add
62:57 - data and we don't see anything here I
63:00 - think we need to start it again now
63:02 - let's check again name Nishant age 86
63:07 - phone number one click add data and here
63:12 - it is we are seeing the data in real
63:14 - time in the console this data now all we
63:17 - need to do is push this data in the
63:18 - Credit Data array so
63:21 - push data now we can console the credit
63:24 - data which will be array so we can do it
63:27 - here as well cred data but will it be
63:32 - okay let's check is start the server it
63:34 - is empty initially now what we need to
63:37 - do is just refresh Nishant
63:41 - 86
63:42 - 900 click add data okay we don't see
63:45 - anything here because I think we're
63:47 - consoling it at the wrong place so we
63:50 - can do it in here as well so clear start
63:54 - refresh
63:56 - name
63:57 - Nishant
63:59 - 0 999 add data and we have the data in
64:04 - the array let's try for one more called
64:07 - UD let's say 90 and
64:10 - 9999 click add data and now we have
64:14 - another field called UD here in this
64:17 - array so we have done this create part
64:21 - so let's make this as done fine the
64:25 - second one is called read this read it
64:28 - means raing data and displaying this on
64:31 - the UI so we can just do it somewhere
64:35 - here after the form fails but first we
64:39 - need to send the data back to the front
64:41 - end this CR data this array to do that
64:44 - we need to do socket. imit say crud data
64:50 - and cred data to Simply send it now to
64:52 - get it first let's make an array
64:56 - const C data
64:59 - set C data equals to use State and array
65:03 - so we have cred data here which is an
65:05 - array now when need to get the data when
65:08 - we submit our form directly which ins
65:10 - inside the handle submit function so we
65:13 - can say socket do on set cred not not
65:17 - set cred data just cred data and crit
65:21 - data let's say CLG crit okay let me make
65:24 - this as data or maybe even response will
65:27 - work anything will work any variable
65:30 - name so if I now check the inspect
65:33 - refresh let's add the name I think
65:36 - restart it again the server here it is
65:38 - running refresh let's add
65:41 - name AG 100 number
65:44 - 999 add data now we're getting an array
65:48 - of object which contains our name age
65:53 - and phone number correct so we're
65:56 - getting the data now just set it in the
65:59 - set cred data and we need to map through
66:02 - it here so after the input fails and the
66:05 - button but the thing is we are seeing
66:06 - nothing here that is because we only set
66:10 - the data when we submit the form now to
66:13 - get it up periodically at some interval
66:16 - we can just set that interval set
66:18 - interval with 1,000 milliseconds or 1
66:21 - second of interval and then just emit
66:24 - the cred data
66:26 - on every 1 second save let's see the
66:28 - console and we can just do a console log
66:32 - here and one thing we I also need to do
66:34 - here is just do a use effect hook here
66:38 - and simply catch data coming from the
66:41 - server
66:43 - response now refresh so let's try again
66:47 - name Nishant is 0
66:51 - 7979 click add data and we get the data
66:55 - here
66:56 - so let's make this as an H2 not H1 now
66:59 - it's perfect similarly let's add for
67:03 - what the
67:04 - second data it was like age and one more
67:09 - called Data
67:12 - dot we have name age and phone number so
67:16 - it was
67:17 - phone save so we will get all the three
67:20 - datas so let's make a table so just like
67:23 - before let me grab a table grab this
67:26 - table from W3
67:28 - schools so we need to have this table
67:32 - again let's paste the table here and
67:36 - save it then wrap the entire table
67:41 - contents in t body because it's
67:45 - outdated this documentation on W3
67:48 - schools T now we need to have the
67:53 - styling tdtr t table and such just add
67:58 - that we have a table here like this now
68:03 - in this table let's name this as name
68:08 - age phone number save this we have name
68:13 - age and phone number now we don't need
68:15 - to have all these tis we can only have
68:18 - one TR and map it so just go pick R data
68:23 - remove this div come over here paste it
68:28 - copy the TR and simply paste it here so
68:31 - that it repeats itself so now we need to
68:35 - just
68:37 - do
68:39 - data do name this should
68:43 - be data do AG this should be data do
68:49 - phone save now we'll have three input
68:52 - Fields here but we also want to give a
68:55 - margin so I can just say Style
68:59 - Just margin top 1 RM this should be a
69:03 - string yeah we have the table here with
69:06 - the data now we also need to clear the
69:10 - input Fields when we submit so I can
69:12 - just do set CR data to empty object
69:17 - sorry not set CR data set form inputs
69:21 - like this now this will not work unless
69:24 - we give a value in them so value should
69:27 - be what the
69:29 - name form inputs. name and such so this
69:33 - should be a this should be form inputs
69:36 - dot name one sec do
69:41 - name this should be age this should be
69:46 - phone now refresh
69:49 - it and one thing you will notice is we
69:52 - will not get the data unless we submit
69:54 - the form
69:56 - so what we need to do is just call this
69:58 - in our use effect hook so use effect
70:02 - which will run on Mount and it will just
70:05 - do socket do on C data and this response
70:11 - now we'll get the data here on every one
70:15 - second so if even even if I refresh the
70:17 - data will be here let's try for another
70:20 - one called UD AG 90 phone number
70:24 - something click add data we have there
70:28 - but the data is not getting disappeared
70:30 - from here so I guess we need to do it
70:32 - name as
70:34 - empty age as
70:36 - empty and phone as
70:40 - empty
70:41 - refresh let's type UD no not UD why
70:46 - should we type let's say Raju age
70:49 - 9t phone number 77 something click add
70:54 - data now we have done the second one
70:57 - called Le operation so let me Mark it as
71:01 - this now that we have added how to add
71:04 - data and rate them let's work on edit
71:06 - and delete functionality so first of all
71:09 - what we will do is Let's Make a function
71:11 - e const get edit data so once we click
71:16 - this button that we have added edit and
71:19 - delete button I mean once we click edit
71:22 - button we should get the data that we
71:24 - are on for examp example let me explain
71:27 - again just first pass a data here so
71:30 - let's say that we clicked edit on this
71:32 - Nishant field this data should go to the
71:35 - function let's add data and set it
71:38 - inside this form input so I can say set
71:42 - form inputs data like this
71:45 - save we can try click edit and the data
71:49 - is here now let's make a state here
71:51 - called is
71:53 - edit set is edit it will be false
71:58 - initially a Boolean
72:00 - value so once we click this button here
72:03 - at the bottom edit button this text add
72:07 - data should change to edit data so we
72:09 - can do set edit as true like this so set
72:14 - edit is true for now and now let's
72:16 - handle the conditional logic here so if
72:21 - is edit is true we will show edit else
72:26 - it will show add simple data so click
72:32 - edit and it is now Ed data now we have
72:35 - to do same thing on this on click event
72:38 - as well but let's create one function
72:41 - here
72:42 - const uh let's say handle edit one sec
72:46 - no yeah it's fine handle edit and once
72:49 - we click the button we should send the
72:52 - edited data to the server first let me
72:55 - have this here where's the onli event on
72:59 - ADD here if is edit is true we need to
73:04 - trigger handle edit else handle submit
73:07 - now let's come to handle edit function
73:10 - and let's console this form inputs so I
73:14 - can say
73:15 - CG form inputs open the console if I
73:19 - refresh let's click edit on Nishant
73:23 - let's make the age to 30 click edit data
73:27 - and now you will see the edited data
73:29 - here and we have IDE as well that we
73:32 - need to add data and we also have ID
73:35 - that I have added here using a library
73:38 - called uu ID V4 from uu ID basically it
73:42 - generates a unique ID for us which is a
73:45 - number basically like this so we will
73:48 - use this ID to edit the data so we have
73:52 - the for inputs on handle let's send it
73:55 - to the back end so to send it to the
73:57 - back end we can just do socket. on edit
74:01 - data and then do form inputs now let's
74:05 - come to
74:06 - server and here on the connection we can
74:11 - do socket do on edit data this event key
74:16 - and we can simply console the response
74:18 - so if I do response CG response we need
74:21 - to restart the server again for this to
74:23 - work open server rest start so if I
74:26 - refresh this initially we have no data
74:29 - let's add age and okay fine let's now
74:33 - click edit and add the phone number
74:37 - click edit data and it is inside online
74:40 - number four okay we don't see it here
74:42 - okay the thing is we need to make emit
74:44 - here not on sorry so that data is
74:47 - emitted from the front end to the back
74:49 - end click edit data and now it is here
74:52 - the name age ID and phone number so in
74:56 - this function let's edit it first of all
74:59 - we need to find the index where we want
75:01 - to set this object in the array which is
75:05 - a Credit Data array so we can just do
75:08 - let
75:10 - current index equals to CED data do find
75:14 - Index this method find index will be
75:18 - used to find the index of the current
75:21 - element using the ID so let's say data
75:24 - data do
75:25 - ID if it is equal to response do ID we
75:30 - have ID in the response and we have an
75:33 - ID in the Creditor for this current
75:37 - index we have the current index let's
75:39 - check if current index is not equals to
75:43 - minus1 it means the index is valid and
75:46 - all we need to do is set it inside so I
75:49 - can do uh thre data current index equals
75:53 - to let's use
75:55 - this object which is a response and we
75:59 - also need to pass the previous data so I
76:01 - can say CCT data and current index let's
76:05 - add a comma and also destructure this so
76:09 - we're setting the previous data with the
76:12 - new data in this cred data array so if I
76:16 - just clear the console let start the
76:18 - server once more let's see what we have
76:21 - when we edit something so add the name
76:25 - age phone number add data so data is
76:29 - there let's edit it let's make the age
76:32 - to 90 click edit data and see the age
76:37 - has been changed to 90 and in the
76:39 - console as well now let's try to add
76:42 - something else like make this number as
76:46 - 5: 1 instead of 5 to 0 edit data and it
76:51 - has been changed so one more thing we
76:54 - can do is in the handle edit function
76:57 - once we submit we need to set this data
77:01 - back to false like we need to set is
77:04 - edit to false so that the button that we
77:07 - are having is changed to add data again
77:10 - so make this
77:11 - as false and let me remove this console
77:15 - log and last thing here set form
77:20 - inputs like this here save now let's
77:24 - change it again refresh click edit on
77:28 - Nishant no no sorry they should not be
77:30 - here they should be here where should I
77:33 - add this yeah here on handle edit now
77:38 - click edit change it to back to 5 to0
77:42 - click edit data and it has been changed
77:45 - in the form the data is gone we have no
77:47 - data populated here anymore now let's
77:49 - work on delete one so to delete our
77:52 - operation is similar let's make a
77:55 - function con handle delete this will
77:58 - take one ID only nothing else we need to
78:01 - pass so we can just do on click handle
78:05 - delete as we pass the current ID of this
78:10 - object that we're clicking so pass the
78:12 - ID like data do ID let's save it come to
78:17 - server let's make one for delete socket
78:20 - do on delete data and let's say we have
78:25 - a ID response now just like this we need
78:28 - to find the index of the current item
78:31 - we're clicking on using the current ID
78:33 - but here we won't have to use response.
78:36 - ID just use ID like this because we are
78:39 - getting only the ID now if current index
78:43 - let's add if current index not equals to
78:47 - minus1 we just need to do c data do
78:51 - splice let's add current index comma one
78:56 - because we want to remove one element
78:58 - from that so okay here we are having
79:01 - handle delete which is this now we have
79:05 - to pass this I to the server so what we
79:08 - can do is socket. emit delete data so
79:14 - this event
79:16 - key and simply pass the ID and that's
79:19 - all we can try this but first it needs a
79:23 - restart so do it it is running let's try
79:27 - it out say age name age and phone number
79:30 - let me add one more there age phone
79:34 - number add delete let's say UD deleted
79:38 - let's add one more called Raju AG 90
79:42 - phone number some random phone number
79:43 - let's add let's delete Nishant and it
79:48 - has gone so that's how it works the
79:50 - delete functionality as well so now we
79:53 - have covered create read let me Mark
79:56 - update and delete as well that covers
79:59 - our C operations using react nodejs and
80:04 - websockets using socket.io

Cleaned transcript:

websockets provide a way for a web browser and a server to communicate with each other continuously without having to close the connection after each exchange this makes it ideal for realtime applications like live chat or gaming where you need quick back and forth Communication in this course Nishant from cybernetico will teach you all about websockets with socket.io hey guys I am Nishant and welcome to websocket 101 in this series we are going to learn all about websockets if you want something brief check out my video on web sockets in 150 seconds so let's get started but first of all let's understand the basics what is a websocket and why do we need to use it so let's understand this in simpler terms if you are Developer and I know you are you must have have heard of HTTP which is the communication protocol widely used in web development so let me write this here HTTP it is the communication commuication protocol protocol okay fine it is a communication protocol widely used in web development for example example when we want to communicate with the back end from the front end to get some data or to post some data or to update some data or even delete it we make a request to the backend server this request is done through arest API or representational state transfer which basically connects the back end and the front end through a temporary link when we make request to the back end to get some data we use this HTTP protocol so let me write it here where is the arrow Mark I guess this one so when we make a request to the back end we use this so minute we use something called rest API which is basically getting the data from the back end using get request or sending data to the back end using post request so it has multiple types let me write them we have get we have post and so on like put delete patch all of them so these are done through something called rest apis so when we use HTTP what happens is one way connection is built from client to server so let's say that we need some data from the back end let me write it here let me make two squares this is the front end or the client side let's say this is the client similarly we have a server which is the back end so let's say we want some data when we submit a form or I can say when when we submit a form we want to send some data to the server okay this one second of form let's say we submit a form we will make a post request when we submit a form so the data will be sent through the payload to the server where it will be stored in the database from the back end so if I write to the DB so this is what we do when we call rest API we make a htb connection from client to server or from server to client so when we make a request like a post request using R API this will send us some data back also like a success or error message and code and we then see this data here true or anything or let's say 2011 or 200 also anything so in this case when we make a connection what is happening is we are making a request to the back end to store some data in the database and once it does it is sending us back a request code of 2011 it means success like this it means success this is known as R API call which is done through http connection which is the communication protocol as I said before so this whole thing makes one connection and once the success message we have seen on the front end this connection is closed so I can say this connection is temporary it is a temporary connection because once our data is back in our hands or let's say we get some Response Code of 2011 or 200 or in some cases error codes the connection is closed and this means we are having or we finished one connection and it is closed correct it is closed this is known as a HTTP connection if you see on the screen now this is called HTTP connection and this is a response and request based type and one thing to notice is this is a one way communication because either the client will send to server and the server will respond back or server will send to the client and the client will respond back this means it is a oneway communication and the thing is this connection called HTTP this protocol it is stateless what I mean is each and every time we make a connection we have to specify some headers like tokens origin cookies and much more every time we make a request we need to repeat all those things tokens headers cookies Origins all of them it means it does not have any data where your header can be stored and the and the channel is closed when the communication happens or destroyed it is like sending someone a letter and expecting the reply back which could take days even months or even years in some cases this is called a HTTP connection now let's jump onto the web sockets what is a web socket so when we use a web socket we make a connection between server and the client that is similar to http okay let me just clear all this or just make it here let me write this as HTTP HT TP correct now let's talk about websockets that I have started web sockets so similar to http it is also a communication protocol but the thing is it is not so similar it has a major difference so when we use a web socket we make a connection request between the server and the client or the client and the server so initially what we do is we make a request just like this so let me just repeat these things here we have a let me just copy this so we are having a client and a server like this so initially in websockets what we will do is we will make a request connection from our client to server like this correct this is known as a hand check the initial connection if I write this as handshake this is the initial connection request from client to server initially so when this happens when the client will send a request of hand check to server the server will check all the things like headers Origins cookies and all like we do in HTTP request like in rest apis but the thing is this will happen only once at the beginning so basically what I want to say is with websockets we don't need to keep making connections each time the client needs something from server or the server needs something from the client the connection is like a permanent connection between the server and the client or the client and the server until we close the connection so what will happen here is when we make a request which is called a hand check if it is successful let me R this to a back arrow here so when this is successful we will get something called a success message here one sec wa which is mean which means connection established so now the connection between the server and the client is done it means our data can flow from server to client any time or at any time or from server to or from client to server as well what I mean is this is a permanent connection which means it is not it does not close so when a web soet is done when we make a web soet connection the connection is long lift connection until we close the connection so first of all we make a request from client to server and that's all any data from client to server will flow without any hasle or data from server to client will flow without any hassle it's like we socket is a twoway street allowing The Interchange of data between server and the client simultaneously in other words the client and server can send data to each other independently at any time this is called a web socket which is like a phone call initially when we call a person the connection is made and you can say pretty much anything which is received on the other end without any latency or delay but but why do we need to use websockets and when let's say that there are sen in real life where you want to have real time data which type of data real time so there is a tool called Google Docs which is basically a document editor from Google which uses data in real time what I mean is if you open one tab and use Google Docs and open another Tab and use Google Docs both on the same user then what happens is when you edit it on one end it will be on the other end so what I mean is when you edit on one end it will reflect on the other end without any latency imagine if Google Docs used HTTP we have to refresh our page every time we make a change on a document or if you want to receive some data on the document let's take some more examples where we prefer websockets over HTTP connection and they are if you are building a chart application or a trading app or a multiplayer dashboard because if you use HTTP we have to keep calling the apis to refresh the data which doesn't seem a good option The increased latency would have us want to throw our app in the dpin and this is why we use websockets now let's learn how to implement websockets so here I am having a library called WS which is a not just library for websockets but this is not what we need we need this a library called socket.io which is a improvement over web socket Library I mean this library because if you check documentation here let me open this introduction or we can say how it works no this introduction sorry so if you go down we have features and some of the features we don't have in WS it is a simple implementation of websockets so this is why we don't use this so throw it now this has long polling it means this will fall back to HTP Connection in the case web soet connection cannot be established then we have automatic reconnection it means under some condition the web socket connection can be broken between the client and the server and vice versa so this is why we have heartb mechanism in so IO which checks the connection status periodically then we have this packet buffering which means when we disconnect our packet will not be destroyed it will be buffered and sent to the server or the client upon the connection now if I click how it works this will tell us that this soer IJ sorry uses something called in IO for connection between client and server then we have something called a handshake which is basically the client telling server then we want to have a connection between us so this is the beginning of the socket connection now let me show you how to install socket. iio into a node just application by the way we can use this anywhere like any language on server we have JavaScript Java python goang rest and on client we have browser V chat I don't know what that is Java C++ swift. python. net rust cotlin PHP all this stuff and here you will find documentation of how to integrate so let me now come to installation and install the server and initialize it so first of all let me make a folder here called server now let me open Terminal and just do CD server clear the console first now let me initialize a package.json file using npm it will ask us the name of package so you can say just server uh version Let say same description of web socket implementation sorry implementation implementation entry point say server.js no test no no Nishant no yes so if you open server now we will see the package SN file here let's make a file called server.js where we will have our server code for this socket. iio Library so to install socket. IO we can just have npm install socket.io type it in here and enter and this will be listed in the package file here now we can choose the version as well now what we need is to have initialization on our screen click this tab we can have stand alone now we need to have HTTP server using nodejs so we can use this thing called create server from HTTP so if you open server let's make Con what is it create Server create server from HTTP which we'll use a required keyboard because it not as6 module we are using common J so we can make HTTP the next thing we need is to have server capital S equals to require what is it the name is socket. iio now we need to initialize our server from HTTP as it says here we need to do const HTTP server equals to create server which will store its instance in the HTTP server variable we need to have this Io const Io or I can say socket equals to new server and then we can pass this H server in here with a bunch of options that I will add later so the options are optional we don't need this so in some cases we might need them now we need to have IO Doon sorry not IO socket Doon and then pass a event key this connection is called a event key which will tell the socket. I liity that we need a connection so just make it then this will take a call back fun function and then we can just have socket and just console it now let's make a HTTP connection so we can just do HTTP server dot what is it listen port number 3,000 and a call back function as second param or argument to say server is connected we can check if everything that we're doing here is correct yes it is correct so let me now run node server doj and we will see Server is connected this means means our server has been connected successfully now on the client side let's check close server and open client we have installation so here we need to include a CDN as a script but first let's make a folder called C make a file called index. HTML so I can just do this and say socket.io client so we can leave the body as it is but we need to add this CDN so just do and click save now this CDN is done we can also use npm for the client let's say in react or angular or something okay we also need to create a client server file so we can say index.js here and include this as well so I can say Crypt SRC okay SRC index.js and we are done here now we can run this as a live server here will open up in the browser now if you come over to index.js file we need to have the address of server which is sttp local L 3000 so to add it we can just make something like this Con socket equals to IO what is it HTTP local local host 3,000 then save the file now this is done what we need is to have socket. on using the connect event key and also we need to have a call function now here we can do something called Data or let response and do a console log of response so let's save it and check in the browser what we are getting if I open the browser open the console but we made a mistake here and that was we need to have this script after our CDN because this will load first and then this otherwise we can get some errors that we don't want here we are having this thing and if you now check the console we will see this errors so if I refresh once we will see access to xhtml request at this and this is blocked by course policy so when we get errors like this what we need to is just go to server and add CS with an origin of this which is the address of our client application save this file refresh this or memory restart server so let me do this again it is connected and now we are seeing this stuff if you in server.js we are consoling the socket object here and that is what we're having here this events server name all the stuff recovered data connected D because they're connected and such then we are having handshake headers which includes the host connection accept keyword and these stuff time secure it's not secure because I guess it is not https it's HTTP only now if I open the console on the content LIF refresh we will get undefined here because we're not sending anything we're just connecting here to our server now if you come to inspect open the network tab we have a tab here called WS for websockets just like f XR now let me refresh the page and we can see the initial handshake when we make a connection we have eio transport and Sid this is the unique ID for one user or a user if you open the soer io go to the how it work tab we can see this thing that we are having we are having Sid we are not specifying ping time interval and time out that is why it is not here because this is for hardbeat for pinging so this is what we can see here if we are connecting to websockets now let's send a message from our server to client see how to do that what we need to do is in this socket. on we need do socket. Emit and let's say we use a message event key call message and send some message like hello now if you come to here we can just do socket Doon with the same event key which was message that we are having here basically we're creating a room with a message event key and when we have the same event key in the client we can get the message and then a and then a console log here so we can just do data now if you open the console now we can see hello now we are sending a message from our server to client using this emit function that you can see here this emit now how to send the message from our client to server so in the socket on we can just do socket. emit again with the event key so let's make it message as well and let's send hell hello there in the server let me remove this console log and in here we can do socket do on with that event key that we are using to send data from client to server which is again message so we can just do message and then a console log so we can say data CG data save it and let me run the again and we can see this thing called hello there which we're sending from the client this message if I do this this will change automatically and let me just do hello there I am Nishan and we can see the message coming here in real time whenever this changes so this is how we can Implement websocket from server and from client side now let's build a multipl dashboard using websockets and react on the front end so first of all I will be using this Suite to create a react app so let me go over to vs code go to the client folder so CD client clear the console first now let's create a VAB using or for react so if we go down we can see npm create weit at theate latest so npm create we at theate latest to create the latest V tab so just give a DOT for all the project files to be installed and added to the client folder choose react here we will use JavaScript and we are done so now let's move to the client folder and see all the files here now do npm install it's installing all the dependencies from package as we need to add the socket. io client Library here so if you click where let's say initialization and if you go down we can see something here maybe not here go back and then click documentation then click client installation and if you go down we will see how to install it for react using nbm so just do this and you will see this in the package and file this socket. iio client here now let's start the react app using npm run Dev it's hosted on this link so if you open this you will see this now let me clear some things from app.jsx which are this or these things just let me clear this and rename this to let's say react multiplayer dashboard save and we can see we also don't need this so remove it we only need this and this H1 that we having the styles are inside app. CSS so I guess we don't need to have this or maybe if you open main. jsx sorry index. CSS we should have minan height as 100 so if I clear this they should go on the top but the body okay one thing I don't think we need to just leave this here okay the name is here also let me remove also let me remove this count State and we logo and such also the we need the you state we need the use State letter so leave it here we can see react multip dashboard here now let me explain how it will work so for example let me have have two sides here one will be client so let me write client here where is the this one suppose that this is a client side so if I make this Excel place it here this one is the client side which is a react app our react app then we will have a server here so if I make some text here called server how to increase font size manually I don't think we can do this this one I think yes if we do this it will be big now we have client and we have a server first of all if you open server.js we already have a server connected here or the code to make a connection so the origin should be now this to avoid any cords errors so just place this origin here fine now when we make a connection and we don't need to have this as well so we now have a simple connection for socket. iio on the server using this code if you want to know how I did this just go back to my previous video in this playlist now how it will work is let me explain so we will create a form on the client side so if I just do a form here let's say we need to have a form on the client side so when a user opens the application he will see a form which will be input tag and once he puts his name and the score it will go to the back end so form will contain two Fields let's say name and form will have a name and core so suppose that a player playing a game and he wants to update a score like manually because we're not creating a full game so that we can upload or the scores are updated automatically when a user is playing a game he must submit his score with his name once it does that this will go to the server and this will be captured using so. so I can say this form data will be inside an object so let me write something like this here it will be inside an object and this object will have a name let's say P1 or player one and his score so score let's say 1,000 so I can make this smaller I guess maybe not smaller let's put it here so that we can see so yes this will go to the server here and then this core will be updated on the client side like we will send the data from client to server and without refreshing we should get them here as well on the client that was the purpose of websockets so it will go and display them in our application so I can just put it there and I can say this UI let me have the name and score so let's say name will be P1 in a table with a score 1,000 this is how it will work once we will have a form on the screen in the react Tab and once a user submits the form using his name and score this will go to the back end server here I am bad at creating vs like this so forgive me so it will go in the server and it will be sent back to the client in real time and it will be updated here on our screen now on the client side we need to have this IO from socket. IO client so you can just say IO from socket. IO client yes now we need do const socket instance equals to IO dot Non DOT just put the address here just like we did in the previous video so the address will be Local Host where is it Local Host 3,000 this is the address of our socket instance on the server this port number that we are using on the client side here now let me have a US effect hook and inside this effect we will learn a function so let me make it function connect socket not an add function this will be a regular function so we can say so. on connection and a call back then we can say so just take up aam from this call back say socket and add it here save and then run the function in the US effect H so are we running the client yes we are running so let me check in the console what we're getting okay we are not getting anything because we also need to run the server so I can just say CD server and node server.js it is now running so refresh and I guess we're connected here so if you see this on our server because we are also consoling here the socket object it means we're connected now the thing we need to do is we are connected here so let me collapse this console okay now according to this design we need to just have to create a form first so if I create a form using input TX save we will have an input now instead of creating input Fields directly like this we can make components so if I come to Source folder and make a folder called components let's make one now inance now instead of having input fails directly like this here now instead of having input Fails Like This Here directly we can make a component for input field so make a component what is spinning of comp component component folder in here make a file called input. jsx make it a functional component and then simply return one input tag here this will have a placeholder I can say which will come from props so if I get props from here and then the structure let I can say the name which will be placeholder from the props then place the placeholder here or we can directly pass the placeholder here so I can say placeholder then we don't need to do it because we're restructuring it directly now let's pass the placeholder here in this input component that we just made input from components input automatically imported here Place Holder will be equal to let's say enter you name and now we can see it let's style it a little bit so I can just give this a class name and then we can do input field so we can make one we can make a file for styling but let me do it in the app. CSS itself so I can just do input Field height let's say 10 RM okay too big maybe 2 RM yes this is not fine then padding left 1 RM h no one is too much say5 yes this is not fine also we can REM the outline as none fine we have entered your name and let me give a width okay do we have input fields somewhere here because we are seeing the previous Styles the button button hover media rout these things where is the input I guess not here where where where where where fine it is better if we don't have so we can just make width as 20 R like this now it looks better we can type anything in here similarly make one for uh what for one for the score enter your score now let's have a little bit margin between them so come to app. CSS and here just give margin as 1 RM one is too much say 0.5 now we have a name and also one for score correct name and score this is we are having here fine now what we need to do is we need to create a function to capture the value from the and score so I can just say function uh handle input this will take an event fine so let me pass them in these components handle inputs similarly in the second one as well save in the input also D structured this and then just say on change handle input so we need to have the name and the value for name we need to pass some Dynamic names so I can say name which will be equal to name the field name and this will be equal to what score now get the name prop as well in the input the order does not matter matter so I can say name equal to name now if I just come to handle input and do a console log of the event we can get the event captured from the input field so if I type say Nishant we getting the input event here I need to filter through it so I can select the name and the value from this event do Target so basically we will Target the current element and extract the name and value from here then we can just do name as value so that it will become an object so also add an object parenthesis here if I type something like this again refresh it let me add my name Nishan so we are typing in the name field so we're getting name if I type score we will get score because this field this field is for score now we have a name and a value let's make a state using the use State hook which will be const data or we can say score set score which will be an object so use State and object so what we need to do is just set it but first let me grab the current key value pairs so I can say current object equals to an object with the properties here like this remove the console lock for now now we need to set this current object like this now if I console this current object we should get both of the elements inside for one user so if I refresh something is wrong current object is not defined sorry score not this current object because scope is the scope will not work outside the function because of closures so let me add the name Nishant Kumar and samsh called sorry not AG score called 1,000 like this now we're getting the data here properly like this and now we need to set this data or I can send the data to the back end server using socket.io so I can say function I can say emit data or you can say send scores so I can just do a console log of here here fine and we need to have button so I can say okay sorry a button we need send score or I can say publish score on click of the button we need to run the function that was send sces here so once we click the button also give it a class name and say send course and just give some margin on this button margin top say one RM as well fine now if I type this score we can see data here that is the object data from The Forum now what we need is to emit this data to the back end I mean the score data so we can just do it like this we are having a socket using this socket I can just do socket. emit this is a score for scores and then the score now when we click this button of publish course this will be sent to the back end using socket. imit function so save it and now we have to get it here and one more thing I want to do is make this socket as simple as IO so that we do iio Doon and now in this we can say socket. on so we are setting the scores using this key event key called scores so I can say scores and then a call back we can say sces and just do a console log off here sces like this open the terminal in the vs code open the server we can try this out but first I don't think we need this conso of socket just restart it once it is running refresh it here let's try it out let's enter the name called Nishant and score called 1,000 or 10,000 click publish course and it is indeed here the server sorry the name my name and the score let me create a global object so let and we have to store our scores inside this object so I can just say course equals to what we can say here okay in this course we need to store this data so I guess this should not be an array because we can have multiple scores so we can say this is an OB as an array so scores do push this scores so I can just rename this as player what happened player sces and then push it inside this now we can just do a console log of players scodes here and remove it because we can have multiple play players and then we can see it here but this will not work inside we need to just have it here so I guess restart server once more it is running let me open this in the new tab and just do name as Nishan or just say P1 for 1,000 or 10,000 click publish score it is here in this array now for second one let me do Play2 which is player two score 20,000 click publish score and now we're hitting both the scores here in this array that we are having in this console log it is now working I can say but the thing is we need to have some IDE as well which is which will be provided by the scores not the scores I can say socket so this socket is also having an ID so if I just do CLG socket. ID which is a unique ID for each socket connection so for this socket connection we are having an ID for this we are having an ID that we can see if I refresh both of them and I think we need to restart it again so restart just click P1 some sorry click P1 some score 10,000 click publish score and this ID is the socket ID that is unique for each socket connection so we can also store this here so with the sces we can sue we can do socket ID which will be ID simply and just destructure it now if I restart it once more we will have one extra socket ID field which is unique for each connection so if I do player one some score 20,000 publish it we have name as P1 scored as this and ID as this try for this one say P2 score will be say 30,000 click publish score and it is indeed here now that we're getting our scores here as player scores we need to imit this scores back to our client so I can just say uh socket emit I can say players sces and the value players sces so need the console here we can just see directly in our client so where to get it so I can just do it I guess here so we can say socket do on player SC okay what not on what do we do here socket. on yes the key name sorry event key name and say players codes then just do a console log of players codes now we will see this on our consoles so better to start our client server sorry better to restart our server I refresh them and let me try this as P1 score 20,000 publish them nothing happen happened okay the thing is we need to just have them when we click our button so if I type P1 30,000 publish it this data will be here and try this again with different player say 30,000 publish it his score will be on the scoreboard here but the problem is when we click publish the score for P1 or in P1 screen for P2 should be displayed in the console so what we will do is we will run this emit function on socket using set interval on every I can say 5 Seconds set set interval say 5,000 milliseconds and do socket. emit so that it emits the scores on our client side every five seconds so that if I now refresh the page or maybe start server once more after closing it it will limit the scores every 5 seconds in our client side or on our client side so let's wait see what we're getting so currently we have nothing but if I type Nishant and the score of 30,000 publish the score now it is on line number 27 like in m to jsx and I think every 5 Seconds we will get the score updated but the problem is in our server we should have it outside because it is not getting triggered if we don't submit the score so I can just do it here as well like socket. emit so once weing the connection and and submit the form of our scores we can see our scores so what we can do is restart the server once more and do this this let's set P1 20,000 publish same with P2 say 40,000 click publish every 5 Seconds seconds you will get the data displayed see I mean updated P1 and P2 let's start third one called P3 refresh it and let me just have P3 here and then score of 50,000 publish it we now having score of P3 as well and it will reflect edly in the score of P2 and in P1 as well see let me show you the scores and the names all we have left to do is display it in our UI so just make a state which will be an added state so const scores set scores equals to use State and empty array okay one problem is set all scores let's make it then just do this in our socket on player sces to map it we can just come here after publish button and do scores. map let's do the table so if I come to I can say table say HTML some simple HTML table from W3 sces like this so map current score and just return this table like this let me copy this table code will write so we need the TR first but the TR will be okay which where should we show the TR this this should be outside so just WP or just copy this entire table and copy the scores mapping function and we all need to do is just leave one TR which is table row save it and just do this so just let me paste it here and in here we can just map one TR with the okay this is the name what is this it is company contact and Country so in here we can just have only two of them score dot name is it name or something else I guess it is name yes and then the score not score we don't need the third TD so remove it and we need to have t T body as well because it is giving us an issue so just Place one t body as well so Place one t body as well refresh it is still there TR cannot appear as a child of table okay tboard should be after table now it is gone now let's just paste The Styling so if I just copy tdtr and table also th paste it place it and now we have the table the only problem is I think I am doing some mistakes our scoring if I check we have name and score okay it is fine but still we are not seeing anything so just make this as name and score refresh it once so let me try entering on my name called P1 core 20,000 publish it okay the problem here is we don't need to have background color for this and child so remove and now we will get this one more thing I want to do is just show the table only if we have scores otherwise just hide it so I can just make a condition here show the table when the length is more than zero otherwise simply show empty fragment okay table this should be here else empty fragment like this and we're done now let me just add P1 score 20,000 publish it the data will be here let me try for P2 for 30,000 publish it we can see the data of both P1 and P2 and it will be updated automatically let's try for P3 the score will be 40,000 publish it it will be here in some time whenever one user publishes this sces it will be automatically displayed for other users as well and this is how we can create a multipl dashboard using react and and socket. iio now let's perform CR operations using react nodejs and websockets but first of all let's understand what is cred so cred basically means create read update and delete that we perform on web applications so first of all let's create a react T here so make a folder called client that I already have let me navigate into that folder and do npm create V atate latest we need to have in the folder so just do react JavaScript nbmi or install and let me also open socket.io documentation client installation this we need to install in our client so install it so basically we will be using no database just a UT variable here we can say let's say data which will be an array or we can make this as crud let's start the app npm run Dev it has been started let me open client Source clear all the things from app so we don't need these things I mean we don't need this div and this div this card div so let me rename this to cud operations save it let me remove these two things as well fine now we have this on the screen crud operations so crud means as I said it means creating data reading it updating it and deleting it from the database or from some yes from some database but we don't have a database here we have a simple variable called C data so we using this to store our data no database we will use so what we need to do is now create a input field here or multiple input Fields so I can say input let's make this as placeholder enter your name save we will have an input enter name give a class name on the input for some styling say input field so let me copy this input field come to app.css let's write something here which will be height 1 RM or 1.5 RM what about this yes then padding left 5 RM fine let's give a width of 10 VH sorry 10 RM 10 RM we have entered your name let's also make multiple Fields like age interior age but we need to have them in different lines so I can just strap it in a div and give the div a class name of let's say what can we say form let me copy form Fields come to app. CSS and do form Fields display Flex Flex Direction column let's enter it align item Center we have a gap between them Gap one RM now we have inod name and age so we have two input fields we can add third one let's say interior what can we say inter youred age intered phone number and we have three Fields name age and phone number okay so we will use these three fields to send data from the UI to the server so how to do that first let me have a form Handler called let's say handle input let's hook it up on on these three input fields on change handle input let's also pass a prop called name on the input so this will be a name prop because it's a name input field this is an age input field this is a phone number input field so name let's say just phone this will take an event now when we destructure the name and value from the event to Target in this handle input now we need to make an object to store the key value appears as an object so first the name and its value now if you type let's say you type name Nishant the name will be the name because it's a name input field and the value will be Nishant like an object so let's me let me create one state here input or form inputs set form inputs equals to use State empty array no empty let's make it as an empty object Now set form inputs we'll take the previous input as well that it had and it will seure the previous and add the new one this object now we need to have a button as well so make a button and give this a name of add data save let's make a function con handle submit now let's use handle submit on click handle submit on this on click event on add data button we can console this form inputs in the handle submit function so when we click the button of add data we should see the data in the console so let's check name Nishant is 50 for number 1005 click add data we have object okay I think this should be destructured as well sorry now click add data again let's refresh first name Nishant is 50 phone number 105 now we will get all the input Fields like name Nishant age 50 and phone number this so let's send it to back end I in the server and it will be stored inside the Credit Data but first let's configure socket. iio so first import IO from socket.io client now let's create an instance of the client so const socket equals to IO and then we will use this server address which is Local Host 3,000 we need to start server as well but yes so just go into server folder CD server do node server.js it is running now now we are using socket here as our instance now we can just do socket. emit so let's say data and then just send form inputs here save now this data will be sent to the back end server here now we have to store this inside the credit so if I do socket do on to listen to the changes that we are sending from front end on the client we can just do this key name called data we are sending the data for inputs using emit function with the key of data so we will receive it here as well with same key name and to check the data we can say data and CLG data which will be in the console in the terminal in the server so let's check Let me refresh once and enter the name Nishant age say 86 phone number 999 click add data and we don't see anything here I think we need to start it again now let's check again name Nishant age 86 phone number one click add data and here it is we are seeing the data in real time in the console this data now all we need to do is push this data in the Credit Data array so push data now we can console the credit data which will be array so we can do it here as well cred data but will it be okay let's check is start the server it is empty initially now what we need to do is just refresh Nishant 86 900 click add data okay we don't see anything here because I think we're consoling it at the wrong place so we can do it in here as well so clear start refresh name Nishant 0 999 add data and we have the data in the array let's try for one more called UD let's say 90 and 9999 click add data and now we have another field called UD here in this array so we have done this create part so let's make this as done fine the second one is called read this read it means raing data and displaying this on the UI so we can just do it somewhere here after the form fails but first we need to send the data back to the front end this CR data this array to do that we need to do socket. imit say crud data and cred data to Simply send it now to get it first let's make an array const C data set C data equals to use State and array so we have cred data here which is an array now when need to get the data when we submit our form directly which ins inside the handle submit function so we can say socket do on set cred not not set cred data just cred data and crit data let's say CLG crit okay let me make this as data or maybe even response will work anything will work any variable name so if I now check the inspect refresh let's add the name I think restart it again the server here it is running refresh let's add name AG 100 number 999 add data now we're getting an array of object which contains our name age and phone number correct so we're getting the data now just set it in the set cred data and we need to map through it here so after the input fails and the button but the thing is we are seeing nothing here that is because we only set the data when we submit the form now to get it up periodically at some interval we can just set that interval set interval with 1,000 milliseconds or 1 second of interval and then just emit the cred data on every 1 second save let's see the console and we can just do a console log here and one thing we I also need to do here is just do a use effect hook here and simply catch data coming from the server response now refresh so let's try again name Nishant is 0 7979 click add data and we get the data here so let's make this as an H2 not H1 now it's perfect similarly let's add for what the second data it was like age and one more called Data dot we have name age and phone number so it was phone save so we will get all the three datas so let's make a table so just like before let me grab a table grab this table from W3 schools so we need to have this table again let's paste the table here and save it then wrap the entire table contents in t body because it's outdated this documentation on W3 schools T now we need to have the styling tdtr t table and such just add that we have a table here like this now in this table let's name this as name age phone number save this we have name age and phone number now we don't need to have all these tis we can only have one TR and map it so just go pick R data remove this div come over here paste it copy the TR and simply paste it here so that it repeats itself so now we need to just do data do name this should be data do AG this should be data do phone save now we'll have three input Fields here but we also want to give a margin so I can just say Style Just margin top 1 RM this should be a string yeah we have the table here with the data now we also need to clear the input Fields when we submit so I can just do set CR data to empty object sorry not set CR data set form inputs like this now this will not work unless we give a value in them so value should be what the name form inputs. name and such so this should be a this should be form inputs dot name one sec do name this should be age this should be phone now refresh it and one thing you will notice is we will not get the data unless we submit the form so what we need to do is just call this in our use effect hook so use effect which will run on Mount and it will just do socket do on C data and this response now we'll get the data here on every one second so if even even if I refresh the data will be here let's try for another one called UD AG 90 phone number something click add data we have there but the data is not getting disappeared from here so I guess we need to do it name as empty age as empty and phone as empty refresh let's type UD no not UD why should we type let's say Raju age 9t phone number 77 something click add data now we have done the second one called Le operation so let me Mark it as this now that we have added how to add data and rate them let's work on edit and delete functionality so first of all what we will do is Let's Make a function e const get edit data so once we click this button that we have added edit and delete button I mean once we click edit button we should get the data that we are on for examp example let me explain again just first pass a data here so let's say that we clicked edit on this Nishant field this data should go to the function let's add data and set it inside this form input so I can say set form inputs data like this save we can try click edit and the data is here now let's make a state here called is edit set is edit it will be false initially a Boolean value so once we click this button here at the bottom edit button this text add data should change to edit data so we can do set edit as true like this so set edit is true for now and now let's handle the conditional logic here so if is edit is true we will show edit else it will show add simple data so click edit and it is now Ed data now we have to do same thing on this on click event as well but let's create one function here const uh let's say handle edit one sec no yeah it's fine handle edit and once we click the button we should send the edited data to the server first let me have this here where's the onli event on ADD here if is edit is true we need to trigger handle edit else handle submit now let's come to handle edit function and let's console this form inputs so I can say CG form inputs open the console if I refresh let's click edit on Nishant let's make the age to 30 click edit data and now you will see the edited data here and we have IDE as well that we need to add data and we also have ID that I have added here using a library called uu ID V4 from uu ID basically it generates a unique ID for us which is a number basically like this so we will use this ID to edit the data so we have the for inputs on handle let's send it to the back end so to send it to the back end we can just do socket. on edit data and then do form inputs now let's come to server and here on the connection we can do socket do on edit data this event key and we can simply console the response so if I do response CG response we need to restart the server again for this to work open server rest start so if I refresh this initially we have no data let's add age and okay fine let's now click edit and add the phone number click edit data and it is inside online number four okay we don't see it here okay the thing is we need to make emit here not on sorry so that data is emitted from the front end to the back end click edit data and now it is here the name age ID and phone number so in this function let's edit it first of all we need to find the index where we want to set this object in the array which is a Credit Data array so we can just do let current index equals to CED data do find Index this method find index will be used to find the index of the current element using the ID so let's say data data do ID if it is equal to response do ID we have ID in the response and we have an ID in the Creditor for this current index we have the current index let's check if current index is not equals to minus1 it means the index is valid and all we need to do is set it inside so I can do uh thre data current index equals to let's use this object which is a response and we also need to pass the previous data so I can say CCT data and current index let's add a comma and also destructure this so we're setting the previous data with the new data in this cred data array so if I just clear the console let start the server once more let's see what we have when we edit something so add the name age phone number add data so data is there let's edit it let's make the age to 90 click edit data and see the age has been changed to 90 and in the console as well now let's try to add something else like make this number as 5 1 instead of 5 to 0 edit data and it has been changed so one more thing we can do is in the handle edit function once we submit we need to set this data back to false like we need to set is edit to false so that the button that we are having is changed to add data again so make this as false and let me remove this console log and last thing here set form inputs like this here save now let's change it again refresh click edit on Nishant no no sorry they should not be here they should be here where should I add this yeah here on handle edit now click edit change it to back to 5 to0 click edit data and it has been changed in the form the data is gone we have no data populated here anymore now let's work on delete one so to delete our operation is similar let's make a function con handle delete this will take one ID only nothing else we need to pass so we can just do on click handle delete as we pass the current ID of this object that we're clicking so pass the ID like data do ID let's save it come to server let's make one for delete socket do on delete data and let's say we have a ID response now just like this we need to find the index of the current item we're clicking on using the current ID but here we won't have to use response. ID just use ID like this because we are getting only the ID now if current index let's add if current index not equals to minus1 we just need to do c data do splice let's add current index comma one because we want to remove one element from that so okay here we are having handle delete which is this now we have to pass this I to the server so what we can do is socket. emit delete data so this event key and simply pass the ID and that's all we can try this but first it needs a restart so do it it is running let's try it out say age name age and phone number let me add one more there age phone number add delete let's say UD deleted let's add one more called Raju AG 90 phone number some random phone number let's add let's delete Nishant and it has gone so that's how it works the delete functionality as well so now we have covered create read let me Mark update and delete as well that covers our C operations using react nodejs and websockets using socket.io
