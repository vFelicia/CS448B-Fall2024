With timestamps:

00:00 - slow button is a senior front-end
00:01 - developer and popular YouTube video
00:03 - creator in this course he's going to
00:05 - teach you how to create a full stack Web
00:07 - Store using angular node.js and stripe
00:11 - if you're looking to build an e-commerce
00:12 - store you're in the right place because
00:14 - I'm going to show you how easy it is to
00:16 - build it in this tutorial I'm going to
00:18 - use angularjs typescript node.js and
00:21 - express.js and we are going to do start
00:23 - payment integration we are going to use
00:25 - angular material component library and
00:27 - we are going to use Tailwind to help us
00:29 - to start not Material component and this
00:32 - tutorial is only for teaching purposes
00:33 - so we are not going to be creating the
00:35 - real products but we are going to use
00:36 - fixer API in order to help us
00:39 - prerequisite for this video is to have
00:41 - no JS installed on your machine if you
00:43 - have angular fundamentals go check my
00:45 - course on YouTube if you're not sure and
00:46 - to create account on stripe.com it's
00:49 - free by the way and that's all that's
00:51 - our coding
00:52 - go with slova
00:59 - okay on my desktop the first thing which
01:01 - I want to open is my terminal so right
01:04 - click and I will open up the git bash
01:06 - here
01:07 - you can open up the terminal Powershell
01:09 - whatever you're using
01:11 - for me it's git bash now the first thing
01:14 - that you want to have is npm installed I
01:16 - assume that you already installed the
01:18 - npm now let's install the angular CLI
01:21 - this will help us to create new angular
01:23 - project and it will help us to create
01:25 - new components Services whatever we need
01:28 - inside of our angular application so in
01:30 - order to install it run npm I for
01:33 - install
01:34 - and angular
01:36 - forward slash
01:38 - CLI and the version is going to be
01:41 - 14.2.1 make sure to install the exactly
01:45 - the same version otherwise you may run
01:47 - into issues during the project
01:49 - development installation has been done
01:50 - let's clear this now we want to create
01:53 - new project it's really easy to install
01:55 - the new project once you have angular
01:57 - CLI installed so run the command NG new
02:00 - and now we need to pass the name of our
02:03 - application I will just name it store
02:06 - and I want to pass a couple of
02:08 - parameters so I want application to
02:11 - create default routing for us because
02:13 - we're going to have two pages then I
02:15 - want to remove the test so add a flag
02:18 - skip tests because you're not going to
02:21 - be
02:21 - dealing with tests in this tutorial and
02:24 - we want to have the application minimal
02:26 - so set the minimal flag
02:28 - like so
02:30 - this will take some time to create the
02:32 - application and install the packages I
02:35 - will be right back
02:36 - and application has been installed
02:38 - successfully the packages installed
02:40 - successfully and successfully
02:42 - initialized a git repository for us okay
02:45 - now we can close this
02:46 - and we can
02:48 - open the visual studio code
02:51 - so for me it's just Visual Studio code
02:53 - you may use some other
02:56 - code editors of your choice so open the
02:59 - folder
03:00 - and I created this folder on the desktop
03:02 - so it was called the store just select
03:06 - the folder
03:08 - I trust authors okay
03:12 - and now we want to open the terminal on
03:14 - the bottom
03:15 - of the vs code we can close the get
03:17 - started so the packages have been
03:20 - already installed as you can see we have
03:22 - the node modules installed and once
03:24 - again if you open up the package.json
03:26 - file make sure that you have the correct
03:29 - version of angular installed as you can
03:31 - see for me the angular core version is
03:34 - 14. so make sure to have the exactly the
03:36 - same version now in order to start we
03:38 - can just run Ng
03:41 - sir
03:44 - and this will start actually I'm running
03:46 - on the Powershell it may come with
03:49 - issues so I need to open up
03:51 - the git Bash
03:53 - and now just go NG serve
03:56 - [Music]
03:59 - this should start our local
04:01 - server it says do I want to share the
04:04 - pseudonymous usage data no I don't want
04:07 - to
04:09 - that has been disabled
04:11 - we just want to develop the application
04:12 - nothing else
04:14 - and once the compilation has been done
04:16 - we can open up the localhost 4200 and
04:20 - see that our app is running so the first
04:22 - thing that I want to do is I want to go
04:24 - to the source app and access our app
04:28 - component
04:30 - so inside of our template
04:35 - let's remove
04:36 - here this boilerplate code
04:40 - like so
04:43 - and put it out router output we can
04:45 - remove that as well this is the place
04:47 - where we are going to be placing our
04:49 - components so what I wanted to do the
04:52 - first thing is I want to add the angular
04:54 - material this is the library that we are
04:56 - going to be using for creating all the
04:58 - components so it's easier to develop and
05:01 - faster if I go to angular material
05:03 - documentation you can see the list on
05:06 - the sidebar you can see the list of all
05:07 - the components that I have in order to
05:09 - use the specific components for example
05:11 - like table
05:13 - you need to go to the API of this
05:16 - component and you can import it import
05:18 - this module inside of your app modules
05:22 - and you can see the examples how to use
05:24 - it you just need to go to view code and
05:27 - you can see and you can play around with
05:28 - it it's really easy to implement and I
05:31 - highly advise you to go to the material
05:33 - documentation website first before you
05:35 - start developing and play around with
05:36 - these components because these are the
05:38 - components that we are going to be using
05:40 - throughout the development
05:43 - now
05:45 - let me add the angular material in order
05:47 - to add it let me first clear the console
05:49 - I I will just run NG add at
05:57 - okay
05:58 - and you add as angular
06:02 - forward slash material
06:03 - [Music]
06:05 - like so
06:10 - would you like to proceed yes
06:16 - and installing all the packages
06:23 - you can save our app component.ts file
06:26 - it asks us what is the theme defaulting
06:30 - that you want to install and I will
06:32 - choose the first one as you can say as
06:34 - you can see here it says Indigo pink
06:36 - it's good enough for me so actually you
06:38 - need to be focused on the terminal to
06:41 - select the indigo set up Global angular
06:44 - material typography Styles yes
06:48 - include and enable animations yes so
06:52 - just click enter you can select the
06:54 - option with uh
06:56 - with the arrow up and the arrow down and
06:59 - just click enter when you want to
07:00 - confirm and with this we have added all
07:03 - the angular material uh files that we
07:06 - need now in order to use them inside of
07:08 - our application we actually need to open
07:10 - up the app modules file in here we need
07:13 - to install all the modulus and import
07:15 - them in order to use them so here inside
07:19 - of the Imports array let's just add all
07:22 - the components that we want to use so
07:24 - I'm going to be using the matte
07:27 - side now let's first import all the
07:30 - modules and later on we can just focus
07:32 - on developing and we don't have to
07:34 - play around with the configuration
07:36 - importing the modules and things like
07:38 - that so when I sign up module
07:42 - the next one is going to be
07:44 - matte grid
07:46 - list module this one is obviously for
07:49 - the grid the setting up is for our
07:51 - layout and basically we're going to have
07:53 - the sign up on the left side with the
07:55 - filters and the categories
07:57 - the next one is mat manual module
08:00 - we're going to have a couple of menus
08:02 - obviously
08:03 - then next one is going to be matte
08:06 - button module
08:09 - okay then math card module most of the
08:12 - elements is going to be
08:14 - placed inside of the card modules card
08:16 - module give you a nice uh Styles around
08:19 - your elements
08:20 - [Music]
08:21 - Mad Card module
08:23 - next one is matte icon module so we will
08:26 - we will have a couple of icons as well
08:28 - obviously and icon module matte
08:31 - X tension expansion module this one is
08:37 - going to be for the expansion expansion
08:39 - filters on the left sidebar
08:42 - next one is matte list module also for
08:45 - the left sidebar
08:47 - then Matt toolbar
08:51 - module this is going to be used in the
08:54 - header because we're going to have a
08:55 - couple of components that that are going
08:57 - to be using uh the toolbar
09:00 - next one is mat table
09:04 - module you're going to have table on the
09:06 - cart page then the next one is Matt
09:10 - badge
09:12 - module
09:14 - this one is for adding the badge uh
09:17 - inside of our cart icon because our cart
09:20 - icon is going to have a badge and
09:22 - displayed how many items is inside of
09:24 - the card so this module is for that
09:26 - that matte snack snack bar module
09:31 - this one is for displaying the
09:32 - information snack bar for displaying
09:35 - information uh to the user so maybe
09:37 - you're adding the item to the to the
09:38 - card or you're removing or maybe you're
09:40 - creating new product whatever you're
09:42 - doing you can notify the user for that
09:44 - and this module is for that
09:47 - and this sums up all the modules that
09:50 - you're going to be using now we just
09:51 - need to import these files because we
09:54 - have imported them inside of the Imports
09:56 - array but they need to be imported into
09:58 - this file so we can use the import on
10:01 - top and let's do this for all these
10:04 - modules so import
10:08 - ant
10:09 - module from
10:11 - angular material
10:14 - this one is from side nav you see the
10:18 - auto completion there and we can just
10:20 - copy paste this couple of times it's
10:22 - going to be easier for us
10:24 - so just copy paste
10:26 - like so and obviously we need to update
10:28 - the URL
10:30 - my menu matte button
10:33 - copies
10:37 - make sure to
10:39 - copy it correctly so we are replacing
10:41 - the same side module here then matte
10:45 - icon module
10:47 - then matte expansion module
10:51 - then Matt list module
10:56 - let me come let me paste a couple more
10:58 - times okay
11:00 - let's remove this
11:02 - dots
11:03 - commas actually then let me copy paste
11:07 - the other ones my toolbar that's table
11:10 - module
11:11 - that badge module
11:14 - and matte snack bar module
11:17 - okay let me remove these commas and now
11:20 - let me update so for the grid list it's
11:23 - going to be from grid list
11:25 - from menu is going to be from menu
11:29 - button is going to be angular material
11:31 - button
11:33 - cart is going to be from cart
11:36 - actually
11:38 - icon angular material icon
11:41 - expansion model from the expansion
11:45 - sign up
11:46 - actually toolbar is going to be from the
11:48 - toolbar
11:51 - table from the table
11:54 - batch from the badge
11:56 - snack bar
11:58 - from the snag bar and the list module
12:01 - from the angular material list module
12:05 - and now we have done a lot of stuff
12:07 - right nobody likes them
12:09 - the setup and the modules import but
12:11 - this once we once we've done this on the
12:13 - beginning we can focus on coding and we
12:15 - don't have to worry about what we have
12:17 - important and what we haven't so but the
12:19 - thing that that you need to know is that
12:21 - we're only importing the components that
12:23 - you need in our application and as you
12:25 - can see there are a bunch of components
12:27 - in the angular material but you're only
12:29 - using the ones and important ones that
12:31 - we're using that application
12:33 - the next thing that I want to import and
12:36 - create in our project is Tailwind
12:37 - Tailwind is utility CSS library and it
12:41 - helps you to
12:43 - that style but the position your
12:46 - elements easier so for the components we
12:48 - are using the angle material but for
12:50 - additional styling in the for faster
12:52 - development we're going to use the
12:54 - Tailwind
12:55 - so in order to to install it you can
12:57 - just go to tailwind and you can play
12:59 - around it's very nice utility library
13:01 - and they have really great documentation
13:03 - so whatever the property that you need
13:06 - to use you can search and find really
13:08 - easily
13:09 - okay
13:11 - so in order to install it uh you just
13:14 - follow up the documentation so as you
13:16 - can see npm install Dash the tail in CSS
13:19 - both CSS and auto prefixer these are all
13:21 - the packages that you need in order to
13:23 - to run the Tailwind so let's run that
13:25 - inside of the
13:27 - root folder run just this npm install
13:34 - once that is done let me clear the
13:36 - console
13:38 - we can initialize detailed in CSS so we
13:40 - need to create a configuration file make
13:43 - sure to copy it
13:48 - and now let's open up the token config
13:50 - file it's here in the root folder
13:52 - Tailwind config.js file the thing which
13:55 - we want to add as you can see here it
13:57 - says configure your template paths so we
14:00 - want to tell the Tailwind what are what
14:02 - are the templates that we want to style
14:03 - right to use so here we're basically
14:07 - targeting The Source folder and all the
14:10 - folders inside of the source folder
14:12 - these are stars that that are targeted
14:15 - in that
14:16 - and we want to Target all the files
14:19 - that I have extension HTML
14:22 - and typescript
14:25 - like so
14:27 - so this is how we are targeting
14:29 - all the templates inside of our
14:31 - application
14:32 - and now we need to import the utility
14:35 - classes in the base classes from the
14:37 - tailwind and we do that inside of the
14:39 - style CSS this is our main style and you
14:41 - can just go to the documentation and
14:43 - basically imp copy paste
14:45 - the code from the
14:48 - from this terminal
14:51 - and you can import it at the very top
14:53 - here
14:56 - [Music]
14:57 - okay
14:59 - and now let's just run our application
15:01 - and see if it runs correctly
15:06 - if you have done everything
15:09 - by the documentation
15:11 - it's going to run without any issues the
15:13 - links to all the commands from the get
15:16 - is going to be in the description box
15:17 - below and also link to the tailwind and
15:20 - angular material is going to be in the
15:21 - in the Box in the description so you can
15:24 - go and play around and learn a little
15:26 - bit about these libraries if you haven't
15:28 - before because they're super awesome and
15:30 - they will help you to develop your
15:32 - applications so now the comp the project
15:35 - has been compiled successfully and it
15:36 - can reload because we have removed
15:38 - everything from our app component file
15:40 - you can see that the project is empty
15:44 - now the first thing that we want to do
15:46 - once that everything has been set up
15:47 - correctly we want to create our first
15:49 - component and that is going to be our
15:51 - header components
15:53 - so what we can do here
15:55 - we can create new folder
15:58 - and the name of the folder is going to
16:00 - be components
16:02 - like so and inside of the components
16:04 - folder create new file
16:06 - and let's name it
16:09 - header or actually even better now let
16:12 - me show you what is the the best tool of
16:15 - the angular CLI if you want to generate
16:18 - a components Services pipes directives
16:21 - whatever you need inside of the angular
16:23 - you can use the CLI so here we are
16:26 - inside of the root folder and we can
16:27 - just navigate to The Source change
16:30 - directory to the source
16:32 - app
16:33 - components folder now let's generate new
16:35 - component you can do that easily by
16:37 - running the command NG generate G for
16:40 - Generate C for component and name of the
16:43 - components let's call it header
16:45 - component
16:47 - actually I'm running the Powershell and
16:49 - that's not going to work so
16:51 - I need to open up the git bash here
16:53 - sorry
16:54 - kid bash like so and I'll again let's
16:57 - change the change directory to Source
17:00 - app components and then NG generate
17:04 - component header
17:07 - like so
17:12 - just wait for a couple of seconds and as
17:14 - you can see you generate the component
17:15 - for us now what we can do here
17:18 - we can use this component
17:20 - copy paste the selector and we can go
17:23 - inside of the app component
17:24 - inside of your template just
17:31 - let me just
17:33 - tell your template just paste
17:36 - [Music]
17:37 - the tag name CSS selector and as you can
17:40 - see if I zoom in
17:42 - you can see that it says header works I
17:45 - can close the tailwind and angle
17:47 - material here
17:48 - now let's start actual developing of
17:51 - this application now we can close our
17:53 - app component file
17:54 - can shrink down our terminal
17:58 - okay inside of the header component if
18:01 - you want to use the external HTML file
18:03 - and not use the one inside of the TS
18:05 - file you can create new a new files so
18:08 - let's just create new file and name it
18:10 - header
18:11 - is removed it criminal case other Dot
18:15 - component.html
18:17 - this is the naming convention that you
18:19 - want to follow the first the name of the
18:22 - component dot component and then the
18:24 - extension right so we have usually
18:26 - header dot component.ts sometimes we
18:29 - have the CSS file so whatever you need
18:31 - and now
18:33 - you can remove this code and we need to
18:36 - include it we can remove the Styles as
18:38 - well and if we want to include the
18:40 - external HTML file that we just created
18:42 - just run type in the template URL
18:47 - property and for the value of the
18:50 - property just inside of the current
18:52 - directory targeting header dot component
18:56 - dot HTML like so
19:00 - and let me close all the other files
19:04 - and let me just open up the HTML file
19:07 - so
19:09 - as you already know this file is on the
19:11 - very top of our application
19:13 - and on this header we want to have the
19:16 - link to the home and we want to have the
19:18 - card
19:19 - so all the time you can see if we have
19:22 - added some components or actually the
19:24 - products to the card so on the very top
19:27 - we are going to use the matte toolbar
19:31 - component
19:32 - so we are start using the angular
19:35 - material component so this component
19:37 - gives you nice uh nice component that
19:40 - styles
19:41 - similar to the card and where you can
19:43 - Target and where you can place your tool
19:46 - tools basically so inside of it let's
19:50 - create first link to the home so like I
19:53 - said it's going to have the router
19:55 - link to the home
19:58 - slash home okay and we can type in code
20:01 - with slova store or you can name it I
20:04 - store or however you want to call it
20:06 - okay and on the right side
20:10 - just save that up
20:12 - and we get this we get this nice as you
20:14 - can see nice gray background here okay
20:18 - okay a couple of things I want to add
20:21 - here so the first thing I want to add
20:24 - the maximum bit to our container so I
20:27 - don't wanna our website to take the full
20:29 - width of every single device right
20:31 - because you can open it up on very large
20:33 - devices so set the max width to 7xl
20:38 - and set the MX to Auto this means that
20:42 - the module F and the right basically
20:43 - horizontal is going to be Auto and it's
20:45 - going to Center our container and let's
20:48 - add some border on the left and the
20:50 - right side or X like so
20:52 - now on the right side we want to add the
20:54 - icon so use the matte icon like I said
20:57 - it's going to be card icon and the name
21:00 - of the icon is shopping
21:02 - underscore cart
21:05 - like so
21:07 - and as you can see we got the icon now
21:10 - in order to style these two I want to
21:13 - actually apply some of these stallion
21:15 - Styles so I want to separate these two
21:17 - and place them on the edges just zoom
21:20 - out a little bit
21:23 - so in order to do that I just need to to
21:26 - run the class justify between
21:31 - like so and they're placed uh you know
21:34 - on the edges of this container
21:36 - in order to apply the justify between
21:38 - you basically need to have the element
21:40 - that has the display Flex Rule and the
21:43 - metal toolbar already has this rule set
21:44 - up
21:45 - now inside of the map icon you want to
21:48 - show the count of the items that are
21:52 - added to the to the icon how we use that
21:54 - how we do that is using the matte patch
21:57 - so add the input property matte badge
22:02 - and let's for now just add something
22:05 - statically let's add one
22:09 - and as you can see we get this item
22:12 - added so it's really easy and really
22:13 - fast as you can see to to style uh and
22:16 - add components using Gengar material if
22:19 - you want to change the color you can
22:20 - just use the matte batch color property
22:23 - badge
22:25 - or the attribute actually and I'm gonna
22:27 - use warn because this is going to add a
22:30 - red color to our batch that's very nice
22:33 - cool
22:35 - and now we want to add the button
22:39 - actually that is going to open the menu
22:41 - once we click on the shopping cart we
22:43 - want to add a menu so this button needs
22:46 - to
22:48 - surround our icon so let me
22:51 - let me move the icon inside of the
22:53 - button
22:54 - and this button is going to be matte
22:56 - icon button so this is the the component
23:00 - for the buttons that hold the icons
23:02 - obviously okay
23:04 - and then we want to add an attribute for
23:07 - the manual matte menu
23:10 - trigger 4. and here you define what are
23:13 - you triggering for so once you click on
23:15 - the button you want to trigger the menu
23:17 - and this is the name of the menu and
23:19 - below this we can add the matte menu
23:23 - okay let me just get back together
23:25 - component
23:27 - here below that add math menu
23:31 - like so
23:32 - and for the
23:34 - 40
23:36 - for the selector we are using the menu
23:38 - here this needs these two needs to be
23:40 - the same right
23:41 - so this is how you target the menu and
23:44 - add
23:46 - value as matte menu okay now instead of
23:50 - the menu let's set it there
23:54 - and let's have some classes okay
23:57 - so
23:59 - P3
24:01 - divide y divide solid
24:06 - okay so the first class adds padding on
24:10 - top bottom left right divide y adds the
24:13 - division so basically like a separator
24:15 - in between the rows inside of the this
24:17 - div and we want the separation to be
24:19 - solid
24:21 - so yeah it's gonna we're gonna see once
24:24 - we start adding some dips here let's add
24:26 - the first row the first row is gonna
24:28 - have the class
24:30 - uh also P for padding parting bottom
24:35 - three then Flex
24:37 - and justify
24:40 - justify between
24:44 - like so so basically we're adding some
24:46 - padding on the bottom we are setting
24:48 - this div uh as a display flex and we
24:51 - want to justify the items in between so
24:54 - just to set them on the edges right and
24:57 - inside of this div
24:59 - let's set a span for this band we're
25:02 - basically gonna say how many items do we
25:04 - have
25:05 - inside of our card so let's say three
25:07 - items
25:09 - are actually
25:11 - we are using here one so let's add one
25:14 - one
25:15 - and let's add items
25:19 - like so and let's add some margin on the
25:21 - right side so class 100 right 16. like
25:25 - so and on the right side we want to have
25:27 - the router link
25:29 - the router link
25:32 - to cart this is going to be the page
25:34 - that we're going to create later the
25:36 - card and the home page
25:38 - and the text
25:40 - is viewpark
25:42 - okay let's save that
25:45 - if you open we get to type two items
25:47 - here the one is the the length but
25:50 - basically the count of the items that we
25:52 - have inside of our card and the view
25:54 - card and let's make the items capital i
25:58 - like so
26:00 - then add another div inside of this div
26:03 - you're going to have all the items and
26:05 - once we start fetching the items we're
26:07 - gonna Loop uh we're gonna Loop and
26:09 - display everything that we fetch from
26:12 - the array of the items or the products
26:14 - but for now it's just gonna be static uh
26:17 - components
26:18 - let's add a deal with the class
26:21 - Flex again justify
26:24 - between
26:26 - and
26:28 - font
26:30 - light margin button too so again we are
26:32 - setting the div to the flex we want to
26:34 - separate the items on the edges of the
26:37 - container set the font to be light so to
26:39 - be very light and the margin that's a
26:42 - margin on the bar margin margin bottom
26:43 - two so inside of this div
26:46 - let's add item name like keyboard
26:50 - and the quantity is like one and then on
26:52 - the right side we want to add the price
26:54 - of it so let's add a class
26:57 - font bold
26:59 - not italic
27:02 - actually they shouldn't be italic as
27:04 - it's spam not an eye and let's add a
27:08 - price
27:10 - we can put that inside of the angular
27:12 - expression y we will see right now so if
27:15 - we add like 150 dollars only it's very
27:18 - expensive for a keyboard just add a pipe
27:21 - currency like so
27:23 - now if we save it we'll see that it will
27:25 - add
27:27 - here it adds here uh basically the the
27:31 - dollar sign the default currency is
27:33 - dollar but with the parameters here you
27:36 - can add a different occurrences I
27:39 - believe the dollar one as default that's
27:41 - not a problem for me
27:44 - uh the one thing that I want to add is I
27:46 - want to add some some padding here so
27:49 - inside of
27:53 - inside of this there actually we want to
27:56 - have a container
27:59 - here and let's put inside of this
28:02 - container all the
28:05 - products that we have so add a p y three
28:09 - so this means basically I had a padding
28:11 - on top and the bottom
28:13 - like so so there's some separation now
28:16 - when we start looping we can just start
28:18 - adding these these items like so and it
28:21 - will just add them below as you can see
28:23 - here
28:24 - and on the bottom let's add another div
28:27 - here we're gonna show the total summary
28:29 - so air attacks total
28:33 - and add another span
28:36 - here at a class on Bold
28:40 - and add like a total again we can use
28:43 - the currency pipe and let's say
28:47 - 450
28:49 - [Music]
28:50 - and let's use the currency pipe like so
28:54 - let's save that
28:57 - and I just want to add some separation
29:00 - so let's add here the class
29:05 - again let's add a flex
29:08 - justify
29:09 - between
29:12 - I had some padding on top and the bottom
29:16 - and let's use Font light as well
29:20 - like so
29:22 - okay now we have all these things
29:25 - and on the very bottom so underneath
29:29 - this total div I want to add two icons
29:32 - so the first one is going to be to
29:34 - remove everything from the card so to
29:36 - clear the card and the second one is
29:37 - going to be to go to the checkout right
29:40 - so add a div and let's add a class again
29:44 - potting padding top
29:46 - uh three you can start it is flex and
29:50 - justify between
29:52 - like so and inside of this
29:55 - add two buttons so this these are going
29:58 - to be the buttons so these are going to
30:00 - be the buttons that are going to hold
30:01 - the icons so add a class BG rows for the
30:05 - first one 600 this is going to add the
30:08 - red color to our to our button
30:11 - text White
30:14 - around it
30:15 - cool this is going to make a circle out
30:17 - of our button
30:19 - set the width to B9 and a height to be
30:23 - 9.
30:24 - okay and inside of our button let's add
30:28 - our icon
30:29 - icon and the first one is going to be
30:31 - remove underscore shopping
30:35 - underscore cards
30:37 - okay
30:39 - and if we say
30:42 - we get this remove card and and as you
30:45 - can see we added this background rows
30:47 - 600 this is the the different color and
30:50 - if you want to change the color so
30:52 - basically you just choose the the color
30:54 - that you want to add and with these
30:56 - numbers you're adding the shade so if I
30:58 - go and type in for example 300
31:01 - let me show you so it will basically
31:04 - show that the lighter version of of the
31:07 - roads and if you go like 900
31:09 - it will show you the darker version I
31:12 - like the 600 so I will leave it as it is
31:15 - here and let's copy paste this one we
31:18 - want to add another icon
31:21 - and this icon is actually gonna have
31:24 - it's going to be just a link so router
31:27 - link
31:29 - and let's it's gonna link to the record
31:32 - and the background is going to be green
31:33 - instead of rose
31:36 - everything else Remains the Same
31:40 - and yeah rounded tool means basically
31:42 - that we are added border radius so if
31:44 - you remove the border around is full let
31:47 - me show you
31:49 - [Music]
31:51 - it shows a square so that's why I'm
31:53 - adding router full and this is basically
31:55 - the width and the height of the button
31:58 - with
31:59 - W and H
32:01 - and with that we can complete it our
32:04 - menu and basically our header so now we
32:07 - can start actually developing our home
32:10 - page
32:10 - our landing page and in order to do that
32:13 - let's open up
32:14 - our source tree and inside of the app
32:17 - let's create a new folder and name it
32:19 - page
32:21 - Pages actually inside of the pages
32:25 - we're going to use the angular CLI
32:27 - here
32:30 - again CD into let me actually see where
32:33 - we are at any components CD on the
32:36 - topper directory and let's change
32:38 - directory to the pages
32:41 - okay
32:42 - and here we want to create new component
32:44 - NG generate component
32:47 - now let's call it home component
32:53 - it will take for a couple of seconds and
32:55 - as you can see it creates the component
32:57 - home components inside of the home
32:59 - folder
33:00 - and it updates the app module so if you
33:03 - go to the app module
33:05 - as you can see here
33:06 - we got the home component imported
33:09 - inside of this file and it has been
33:11 - imported into the Declarations array so
33:14 - in order to use the component if you
33:16 - haven't been using the Standalone
33:17 - component
33:19 - you need to import them inside of the
33:21 - module in order to use it
33:23 - now inside of the app routing module
33:26 - we want to add the first route
33:29 - so the name of this route is going to be
33:32 - home
33:35 - and the component
33:37 - that is going to be loading this is
33:39 - going to be the component that we just
33:41 - created so its name is home component
33:45 - like so
33:47 - and also what we want to do is
33:50 - we want to add this path as default so
33:54 - how we do that is
33:55 - we'd add another object and inside of
33:58 - this object we add a path
34:00 - to empty
34:02 - and we add redirect to
34:07 - home
34:09 - and add path match
34:11 - too full
34:14 - and make that as a string so what this
34:16 - does is basically if you enter the M3
34:19 - empty string so if you just go to
34:22 - localhost it will redirect to the home
34:25 - and then the component will home
34:27 - component will load this this is how it
34:29 - works so in order to load these routes
34:32 - we actually need to go to the app
34:34 - components folder and here we need to
34:37 - add the router Outlet
34:40 - like so
34:42 - and we need to close that
34:44 - tag
34:48 - like so and now we have the app
34:51 - component loading our com component
34:53 - actually so depending on the on the
34:56 - route it loads the correct component and
34:58 - as you can see if you just type in
35:00 - localhost 4000
35:03 - actually four thousand let me remove it
35:08 - the extension
35:10 - the protocol actually and we get the
35:13 - Home Route added to it and we get the
35:16 - homeworks
35:17 - so now we can close
35:19 - the app routing module we can close the
35:21 - app component
35:23 - we can close the header component and we
35:25 - can start developing our common
35:27 - component so let's open up the home
35:28 - component
35:30 - Pages home like so and once again let's
35:33 - remove this template
35:36 - as you will going to be creating the new
35:39 - folder new file template URL external
35:42 - HTML file so the name is going to be
35:44 - inside of the current
35:46 - folderhome.com component
35:50 - .html and we can copy this
35:53 - and just add new file here
35:56 - or you can use this option like so
36:01 - and save this
36:03 - okay now we can shrink down our terminal
36:07 - and let's start developing later HTML
36:09 - code so here we're going to use the
36:11 - matte
36:12 - drawer drawer container
36:16 - this is the component from angular
36:18 - material and what it does it basically
36:20 - creates a drawer or a sidebar which
36:23 - which it can pop up or stay always the
36:26 - open which is the case in this uh in
36:29 - this application so
36:31 - add a property Auto
36:34 - size to True which means that basically
36:36 - it's gonna
36:38 - true which means that it's going to
36:41 - recall recalculate what are the values
36:44 - and the width of the container elements
36:48 - and if there's something loading
36:49 - dynamically it's gonna Auto size it
36:51 - again
36:53 - let's add also we want to add a couple
36:56 - of more classes here so let's add a
36:59 - class uh let's set the mid height to be
37:02 - full so to take the full height of the
37:04 - window
37:05 - let's add a Max maximum width as we did
37:07 - on the same on the here on the toolbar
37:11 - maximum width to be
37:13 - 7xl now let's add MX photo so basically
37:17 - this means
37:19 - margin on the left and the right side
37:21 - horizontally
37:22 - to be Auto so it basically centers your
37:24 - container now let's add border on the
37:27 - left and on the right side
37:29 - like so
37:30 - okay
37:32 - so if we
37:34 - zoom out you can see that we have this
37:37 - container and we have borders on the
37:39 - left on the right side
37:40 - let me zoom in again
37:43 - okay
37:47 - and inside of this matte draw container
37:50 - we'll have one drawer which is basically
37:53 - like like I said uh
37:55 - the sidebar
37:57 - match drawer
38:00 - and the mode here is going to be side
38:06 - these modes can change the way how this
38:09 - drawer works yeah you can you can set it
38:12 - to overflow of the content but if it's
38:14 - set to side it means that it pushes the
38:16 - main content so it's not overflowing any
38:18 - any layout
38:20 - and we want to set it always to be
38:22 - opened
38:23 - open like so and let's just add
38:27 - uh some give here that says filters it's
38:31 - going to do it's going to be the
38:32 - categories but it says filters as you
38:33 - can see it's always open here so you
38:35 - cannot close it because we added this
38:37 - property
38:39 - and let's add some padding to this
38:41 - pairing six like so
38:44 - that's good
38:45 - [Music]
38:47 - okay
38:48 - now on the right side of this matte
38:51 - drawer container we're gonna have
38:54 - matte drawer
38:57 - content
39:00 - so this is going to take the biggest
39:02 - portion of our page my drawer content
39:04 - and I want to add some padding there as
39:06 - well so add padding six
39:09 - like so and here we're gonna create new
39:12 - a new component
39:14 - uh which is going to be called app
39:16 - products header so inside of our pages
39:19 - folder add new folder and name it
39:22 - components
39:23 - so this folder is going to hold all the
39:26 - components that are inside of the home
39:27 - page right so the components inside of
39:30 - the app folder are components that are
39:33 - that are being shared across the entire
39:35 - application inside of the pages we have
39:37 - the home and actually we need to place
39:40 - this component inside of the home page
39:42 - like so move it and now inside of this
39:46 - component let's create new components
39:49 - now let me see where we are at in our in
39:51 - our tree in the pages now it's CDs
39:54 - change directory inside of the
39:56 - components
40:00 - let me just see
40:02 - okay we need to change directory to home
40:06 - to components and now let's uh NG
40:09 - generate component now let's call it
40:13 - well what we said products
40:16 - products header
40:20 - this component is gonna have
40:22 - some elements that are going to help our
40:25 - us to sort and to display products
40:28 - differently
40:29 - okay
40:31 - and inside of let me just
40:35 - open this component and again let's
40:37 - create new file
40:40 - here like so and let's call it products
40:45 - Dash header
40:48 - dot com on end dot HTML
40:51 - now let's include that okay
40:55 - here instead of inside of the template
40:57 - just
40:58 - add
40:59 - that and let's
41:01 - change the property to the URL like so
41:04 - and let's remove the Styles here okay
41:06 - [Music]
41:09 - now we need to use this
41:12 - selector CSS selector and inside of the
41:15 - home component
41:16 - inside of the matte drawer content we'll
41:18 - just include
41:21 - just include that
41:23 - here
41:26 - like so and we can close the other
41:29 - components
41:33 - and we can just focus on the coding this
41:35 - part
41:37 - and on this component on the left side
41:40 - we will have a button that will change
41:42 - the Sorting ascending or descending and
41:45 - on the right side we'll have one button
41:47 - which will change the number of products
41:49 - that you display on the page and the
41:51 - third element is just to change the
41:52 - layout of these product items so let's
41:55 - begin we will place that inside of the
41:58 - Mad Card element
42:00 - and let's add some margin on the bottom
42:04 - so margin bottom four
42:07 - added another div
42:09 - and let's set a class of flex and
42:12 - justify
42:14 - between
42:16 - so again on this div we are setting this
42:19 - div to have the display as flags and
42:21 - they're justifying elements between them
42:24 - so it means that the one on the left
42:26 - side we're gonna have one button and on
42:28 - the other side we'll have two menus but
42:31 - they will be separated totally and they
42:32 - will be on the edges of this container
42:35 - okay
42:36 - now create another div and inside of
42:39 - this div let's create a button
42:40 - [Music]
42:42 - for that menu
42:44 - this button we will have
42:46 - matte matte button argument or property
42:50 - which will transform the regular button
42:52 - into the matte button so
42:54 - and it will have text sort by and let's
42:58 - add a dummy description let's say
43:02 - now we want to create a menu for this
43:04 - button so if I save this
43:08 - you can see that we created this button
43:11 - but let's create a menu so once we click
43:13 - on the sort we should get a menu and we
43:15 - can change the the ascending sorting by
43:18 - descending or ascending and we do that
43:20 - by passing the mat
43:22 - menu
43:24 - trigger four
43:26 - this is the property and we need to pass
43:29 - the name of the manual and the name is
43:31 - going to be sort by menu
43:34 - below this button let's create the menu
43:37 - and the menu is going to have matte menu
43:41 - tag
43:43 - and now let's give this name
43:45 - that we are using to Target this menu
43:48 - and we need to pass the math menu
43:52 - so by the sort by menu basically we are
43:54 - creating an ID we are adding the ID to
43:56 - this to this menu and that's how we
43:59 - target it and connect this matte menu
44:01 - with this button okay
44:04 - and now if you save that
44:06 - we should get an empty menu like so
44:09 - and in this menu which we should create
44:11 - two buttons which will change the
44:13 - Sorting the first one is going to be
44:16 - descending
44:18 - and the second one is going to be
44:20 - ascending
44:22 - and also
44:24 - let's add matte menu item
44:32 - property to both of these
44:35 - like so and now what we can do is we can
44:37 - create a sort
44:40 - variable which we can update so let me
44:44 - just check the HTML if it run this
44:45 - correctly it does as you can see
44:48 - and what we can do here is we can just
44:50 - create a variable and name it as a sort
44:53 - and give it a default value to sort
45:00 - and we can change this desk to the
45:04 - variable
45:06 - like so
45:08 - and then we can create a new method
45:11 - which will update this
45:14 - okay
45:15 - it
45:17 - probably does doesn't exist on the prop
45:19 - products so because it's sorts and task
45:23 - this is the name of the property
45:25 - sort by
45:27 - and sort needs to have the descending
45:29 - the default value not sort okay
45:34 - and we can create a create new function
45:37 - or actually method on sort updated
45:43 - this method is going to return the void
45:47 - so it's not going to return anything
45:49 - it's just going to update this variable
45:51 - here so it needs to accept new sort
45:54 - parameter
45:55 - to this type of string
45:58 - and all it does is
46:01 - it updates the sort on this one on this
46:04 - class
46:06 - to new new source equals new source
46:09 - like so later on we will emit this value
46:13 - and we will fetch the results but for
46:15 - now this this is just
46:17 - the regular functionality okay and now
46:21 - we need to call that method one click so
46:24 - here on click
46:26 - call the
46:28 - on sort
46:30 - updated method and for the first one
46:35 - send the description
46:37 - so in that description descending
46:39 - it's a little bit confusing and for the
46:42 - second one
46:44 - send the ascending
46:46 - like so
46:49 - and if I save this
46:50 - when we select you should change the
46:52 - value
46:54 - and later like I said we will go and
46:57 - basically
46:58 - emit the new value and we'll fetch the
47:01 - data according to this value
47:03 - so we will just sort it differently okay
47:07 - and with that we have completed the the
47:10 - left sorting manual let's proceed with
47:13 - the second part
47:14 - okay so on the right side let's create
47:18 - another div
47:20 - [Music]
47:22 - and let's set a class Flex again
47:25 - and items Center
47:28 - this means that we want to align the
47:30 - items horizontally
47:33 - not
47:34 - actually vertically so they need to be
47:36 - in in line with this sort by description
47:38 - everything needs to be in line okay
47:41 - so let's add another div
47:44 - and here we again uh want to create
47:47 - another menu so
47:50 - let's add a button again
47:53 - and this button is also going to be
47:54 - matte
47:57 - button
47:58 - and again let's add matte menu trigger
48:00 - matte menu
48:03 - trigger for property
48:06 - or and if you receive the menu it will
48:09 - actually be targeted and connected with
48:12 - the menu this is the ID that I was using
48:14 - so math
48:16 - manual and let's add
48:18 - the ID of menu and it's math menu I mean
48:21 - this could be more descriptive but on
48:25 - this component we only have these two
48:27 - menus so it should be it should be good
48:29 - enough
48:30 - okay
48:31 - and then
48:33 - here I want to add a text dream show and
48:38 - here we will basically uh show the
48:41 - number of items so let's add a new
48:43 - variable and uh let's call it call it
48:46 - items show count
48:49 - okay and let's create that new variable
48:51 - here
48:53 - items show count and let's set the
48:56 - default value to 12 I think yeah let's
48:59 - use 12. okay
49:00 - [Music]
49:01 - and if I save it here
49:04 - it showed well so basically showed 12
49:06 - items that that's what it means
49:09 - okay
49:10 - and what I want to add besides that is I
49:15 - want to add an icon and the name of the
49:17 - icon is expand more
49:19 - so that indicates that actually we want
49:22 - to we can open this one
49:24 - right
49:29 - and that's exactly something that we
49:31 - missed for the first menu so something
49:34 - that should indicate is sorting as well
49:36 - that
49:37 - if you want to have the expand
49:40 - here yeah that's more like it
49:42 - okay let me close it
49:46 - and now inside of this menu we'll we'll
49:48 - show different values similar like we
49:50 - did for the 41st menu and actually I can
49:54 - just copy paste this code so it's easier
49:57 - so from the first menu let's just copy
50:00 - the buttons
50:02 - because here we will also have the
50:04 - buttons and
50:06 - just for the first item let's set the
50:09 - value to 20 to 12. and let's create a
50:12 - new method once this one was called on
50:15 - sort updated and the new one is going to
50:17 - be called on items
50:20 - updated
50:22 - okay
50:23 - this one also doesn't return anything it
50:26 - just updates divide the value here
50:29 - so
50:33 - it will receive the count which is a
50:36 - number
50:36 - [Music]
50:38 - and it will update this dot items
50:42 - show count
50:44 - to equals to count
50:47 - okay
50:49 - and we can use this method now to update
50:51 - this to this value
50:54 - so instead of on sort we will call on
50:57 - items updated
50:59 - and here we will pass value of 12.
51:02 - okay
51:04 - [Music]
51:08 - here
51:09 - but let's add a couple more more items
51:13 - so the second one is going to be 24.
51:19 - 24 and the last one
51:22 - is going to be 36. so if you have any
51:25 - other preferences on how many items
51:27 - would you like to show on the page you
51:29 - can add them here
51:32 - let's save that up and if we try we can
51:36 - see that this updates the values like
51:39 - expected
51:40 - so right now this is static it doesn't
51:42 - change any data because we don't have
51:44 - any data yet but later it will update
51:46 - the number of items that we have on the
51:48 - page okay
51:50 - and the next thing which we want to add
51:53 - we want to add additional div and
51:55 - additional buttons where we can change
51:57 - the layout
51:58 - okay
52:00 - so we can close this div and let's add
52:02 - another button
52:06 - and this button is going to hold
52:09 - the matte icon and this icon
52:12 - it's going to be called a view list like
52:16 - so
52:18 - here
52:20 - and let's copy paste this two times
52:25 - the second one is going to be view
52:27 - module
52:27 - [Music]
52:29 - and the last one is going to be called
52:31 - View County
52:32 - [Music]
52:34 - and we get these three icons and right
52:37 - now they are static right but later on
52:39 - they will you know update
52:42 - our layout
52:44 - so what we can create the method which
52:46 - that we will use to to update our layout
52:49 - so let's create that on columns
52:55 - columns
52:56 - updated
52:58 - it perceives The Columns number which is
53:02 - a number
53:04 - and this doesn't return anything so
53:06 - return type is void here
53:10 - uh then we want to emit this value so we
53:14 - actually need to First create event
53:16 - emitter so let's add
53:19 - output
53:21 - and make sure to import the output from
53:23 - the angular core this is the way how you
53:26 - send the data outside of your component
53:28 - to parent components so create
53:31 - output
53:33 - and let's name it column
53:36 - columns count change like so and this
53:41 - will be new event
53:44 - emitter coming and make sure to import
53:46 - it as well from angular core
53:49 - okay
53:50 - and it will send a number so this is the
53:52 - number of columns you want to display in
53:54 - a row okay
53:56 - and what we can do here is basically
53:58 - just call this dot columns
54:02 - count change and just emit
54:05 - [Music]
54:06 - the number that we receive
54:10 - from the template
54:13 - like so
54:14 - now let's call
54:16 - this method inside of our HTML file
54:21 - here on click
54:26 - so here
54:28 - we have view list on the first one we
54:30 - want to show only one item per row
54:35 - okay
54:39 - on the second one
54:41 - I want to show
54:43 - three items per row and on the last one
54:45 - I want to show four items per row
54:49 - oops
54:51 - here make sure to put them inside of the
54:53 - parentheses
54:56 - and now we can catch that value inside
54:58 - of our parent component which is the
55:00 - header component
55:01 - so here
55:04 - inside of the app products header
55:06 - we have new events and that event is
55:09 - called
55:10 - uh let me just
55:12 - check what is the exact name columns
55:14 - count change
55:15 - okay
55:18 - and this is the event columns count
55:21 - change and when we call that event
55:25 - you can call new method
55:28 - on columns
55:32 - columns
55:34 - count change
55:39 - but we need to create this
55:41 - this method inside of our home component
55:43 - here
55:47 - and we will we will need to create a new
55:49 - variable which we will update and use
55:51 - inside of the inside of our layout you
55:54 - can set you can actually remove these
55:55 - styles
55:58 - we don't need the Stars here
56:00 - and let's create a
56:02 - let's create a new variable so the new
56:05 - variable is going to hold the number of
56:07 - items that we have per row so the
56:09 - columns that we have parole is three
56:11 - that is the default right
56:15 - that's right
56:18 - and
56:19 - what we want to do is basically to
56:21 - update this so This dot count
56:25 - these dot calls actually calls is equal
56:28 - to and we need to receive the cost
56:30 - number calls number which is a number
56:33 - and this method doesn't return anything
56:35 - so again it's void and these calls
56:39 - basically receives these this new number
56:42 - right
56:45 - and yeah I think that should that should
56:49 - so let's just try if this works we can
56:52 - go and open up the home component
56:55 - and inside of the global content you can
56:57 - just place the variable here
57:00 - and as you can see the default value is
57:02 - three
57:03 - let's see if you click on this one it
57:05 - should show one and if you click on this
57:07 - one it should show three actually Four
57:09 - yeah and on the middle one you should
57:11 - show three like so this works as
57:13 - expected so we can continue now and
57:16 - build our actually we can first build
57:18 - our categories or the filters on the
57:20 - left side okay so let's create another
57:22 - component and let me open up the
57:24 - terminal again
57:26 - here
57:30 - so inside of the components folder app
57:34 - pages home components folder let's
57:36 - create new one NG generate component and
57:40 - let's call it filters
57:42 - like so it will take a couple of seconds
57:47 - okay so it created a new component and
57:49 - it updated Source app app module so once
57:53 - again let me show you it adds new
57:55 - components inside of the app module so I
57:57 - don't have to do this manually so this
57:59 - is the beauty of the angular CLI and
58:02 - inside of the components open up the
58:04 - filters so this is the new component
58:06 - that we just created and again let's
58:08 - remove the styles
58:10 - and let's add external template URL
58:13 - template URL and we will create here new
58:17 - HTML file let's call it
58:19 - filters Dot component.html
58:23 - so let me copy this name and here in
58:26 - filters create new file with the same
58:30 - with the same name that we just
58:33 - placed inside of the component decorator
58:36 - okay
58:37 - let's first create
58:39 - Gories
58:42 - categories array
58:44 - so this component will hold the list of
58:47 - the categories that we can use to filter
58:50 - our our products on our website
58:53 - so let's create some dummy categories
58:55 - later on we will fetch this from the API
58:57 - so let's say shoes
59:00 - maybe Sports I don't know something that
59:02 - will you just need something to use into
59:05 - iterate through inside of our HTML file
59:08 - okay let me close the other files so we
59:11 - are not confused
59:12 - and then we will use
59:15 - another material component and it will
59:18 - be called matte expansion panel you'll
59:22 - remember this one
59:23 - so this component basically uh it's like
59:26 - a expansion penalty set so you will just
59:28 - see the name of the title of this panel
59:31 - and once you click on it you will expand
59:33 - and show you all the items inside of it
59:35 - so this uh
59:37 - let's show this panel only if we have
59:39 - the categories so NG if
59:43 - categories
59:45 - like so so if the categories do exist
59:47 - and they are not undefined show this
59:49 - otherwise just hide this panel
59:52 - inside of the matte expansion panel
59:54 - let's add matte expression expansion
59:57 - panel header
59:59 - let's remove this closing tag and let's
60:01 - add a new one inside of the header
60:04 - you just want to add a title which is
60:07 - matte
60:09 - panel
60:10 - title
60:13 - and it will be called
60:15 - categories like so okay
60:20 - let me remove caps lock and we'll have
60:22 - another
60:25 - matte
60:28 - selection
60:31 - list
60:33 - okay this is another matte tag
60:36 - selection always and it basically shows
60:39 - the
60:40 - the elements
60:42 - in the list so and it will it allows you
60:44 - to select one of the elements from the
60:46 - list
60:47 - and we want to be able only to select
60:51 - one item so that's why we need to pass
60:53 - the multiple multiple uh input false
60:58 - attribute so if you click on true here
61:01 - for the multiple we can select select
61:03 - multiple items inside of this math
61:05 - selection list okay
61:06 - and here we have Matt list options
61:12 - like so and we want to Loop through the
61:14 - categories array that we just created so
61:17 - create ng4
61:20 - and call that category
61:23 - of
61:25 - categories
61:26 - okay
61:28 - and set the value
61:31 - to be a category
61:34 - like so and inside of the
61:37 - this option we want to display a button
61:40 - [Music]
61:41 - and just place the category here
61:45 - like so
61:46 - if we save it actually there's one
61:50 - problem with this because we haven't
61:51 - included this component inside of our
61:54 - inside of our sidebar so that's the
61:56 - problem
61:57 - now take the selector
62:00 - and go inside of the home component HTML
62:04 - file and instead of these filters you
62:07 - need to place this component
62:09 - okay
62:10 - now we will see it
62:12 - okay there you go
62:15 - and if you click on the categories it
62:17 - expands and you get the shoes and the
62:19 - sports
62:20 - okay now we want to emit this value so
62:23 - once you click on like on the shoes on
62:25 - the sports as you can see you only
62:26 - select one of the items and we will have
62:29 - more items here more categories but once
62:31 - you select on the item we want to emit
62:34 - this value to the parent component and
62:35 - we can use the data to fetch the
62:37 - categories right so let's do that
62:40 - inside of the
62:41 - template
62:44 - here you can create new method
62:48 - yeah let's call it
62:50 - on show category
62:52 - on show category
62:56 - this one will return nothing so the term
62:59 - void and it will receive the category
63:02 - which is just a string
63:05 - and this string needs to emit this value
63:07 - so let's create new one
63:15 - and let me import the output from
63:17 - angular core
63:19 - like so and let's name it show category
63:23 - okay which is a new event emitter
63:28 - the event
63:29 - diameter okay and this one will receive
63:33 - the string
63:35 - actually with emit the string let me
63:37 - close the folder so you can see it
63:39 - it will emit the string and let's import
63:41 - even emitter from angular core as well
63:44 - and now when we call this method and
63:47 - then we pass the category we can emit
63:49 - this value so let's call this dot show
63:53 - category dot emit
63:55 - and pass category
63:57 - okay
63:58 - and let's call this method inside of our
64:01 - HTML component
64:03 - here inside of our button let's call
64:06 - click on click event
64:09 - call our method and pass the category
64:13 - [Music]
64:15 - okay now we can test this again
64:18 - uh the event name is the show category
64:22 - so here inside of our home component
64:27 - we can call this method show category
64:32 - and we can create new method that method
64:35 - can be called on show category
64:40 - and just pass the value I usually pass
64:42 - the value from the from the child events
64:45 - as event this is the parameter
64:48 - okay
64:50 - and inside of the TS class
64:53 - let's add this method
64:56 - this method again is not returning
64:58 - anything so it returns void
65:01 - and it needs to have one parameter which
65:05 - is the category
65:07 - and let's call it new category
65:11 - cut
65:13 - category like so and it will be the
65:16 - string value
65:17 - now
65:19 - uh we need to add the new property so
65:22 - let's call it category and let it be
65:26 - value string and
65:28 - undefined so it can be when you don't
65:31 - Define it initially it needs to take uh
65:34 - either of these two values so if you
65:36 - initialize it right away it can be just
65:38 - string but if you leave it undefined you
65:41 - need to add these values that are
65:43 - undefined
65:45 - okay so here we call this dot category
65:48 - and we assigned it new category value
65:52 - and we can just
65:53 - use this value to test it inside of our
65:55 - home component
65:57 - the same area how we are testing the
65:59 - columns Let's test category and once we
66:02 - click on one of these elements we should
66:04 - see these values inside of our component
66:06 - choose Sports it works as expected now
66:09 - the next thing which I want to create on
66:11 - the home page
66:13 - it's I want to display the product boxes
66:17 - here and it should and that should do it
66:19 - after that we should fetch the actual
66:21 - data and display it so let's just to sum
66:24 - up what we created here we created this
66:26 - card uh menu and actually I see that we
66:30 - are using the two SIM icons so that
66:32 - needs to be fixed uh this one is for
66:34 - removal of the cards and this one is
66:36 - actually for proceeding to the checkout
66:37 - so open the products header and any side
66:41 - of the products header
66:43 - no actually it's not inside of the
66:45 - product Setter it's actually in the
66:47 - header component so inside of the
66:48 - components folder Source app headers
66:52 - we have here components we have here the
66:56 - icons and one is remove shopping cart
66:58 - and the other one is also remove
67:00 - shopping cart so it needs to be just a
67:02 - shopping cart
67:04 - Let's test it yeah so this one should uh
67:07 - route us to the cart as you can see here
67:10 - and not to to remove the shopping cart
67:12 - yeah okay so we fixed that back so just
67:15 - to sum up we created this header with
67:17 - this uh Home Route link we created this
67:20 - card which shows the items we can go on
67:22 - a new the card you can remove everything
67:24 - from the car and you can proceed to the
67:26 - checkout and actually this is all static
67:28 - we just need to be implemented we added
67:30 - this sort menu we added this show a
67:33 - number of items menu we added this
67:36 - layout buttons and we added the
67:38 - categories on the left side now like I
67:40 - said just add the products on the middle
67:42 - and let's proceed to the next page and
67:44 - now in the home component HTML file
67:46 - let's remove this category variable
67:49 - and we'll add
67:51 - a wrapper to your product box component
67:55 - so I'm gonna use matte grid list
67:58 - component
68:00 - and this component basically is a grid
68:03 - so you just pass a tile child component
68:06 - and it separates them into columns and
68:09 - rows that's all it does so we want to
68:12 - set the gutter size which is actually
68:15 - the margin in between these elements so
68:19 - cutter size
68:21 - to 16.
68:23 - so it's 16 pixels
68:25 - for number of columns we want to change
68:27 - this dynamically depending on the
68:29 - buttons that we click here on the first
68:31 - one we want to have the column number
68:33 - one per Row in the in the middle three
68:36 - per row and the right one four per row
68:39 - but as we created this
68:42 - this variable
68:44 - dynamically
68:45 - already so
68:47 - we'll just passed the columns this
68:50 - variable
68:54 - and for the row height
68:56 - we also want to have this dynamically
68:59 - updated so let's create new variable
69:02 - named row height
69:05 - and let me go to the home TS file and
69:08 - here we have columns that error being
69:10 - three at the moment but we are updating
69:12 - the columns here so for the row height
69:16 - let's just create a new object that we
69:19 - can use to map the heights so
69:23 - create a constant named Ros
69:26 - core height
69:29 - and this will be an object
69:31 - and this object will have three values
69:34 - so the first value is obviously when you
69:37 - have one one column selected or one item
69:41 - Purl and it will have a height of 400
69:44 - right
69:45 - then the second value is when we have
69:47 - three items per row and this one we will
69:49 - have height of 335 and the last one is
69:53 - when we have four items per row
69:56 - it will have hypo 350. let's decide
69:59 - the type so the type is in
70:02 - object basically and the object has an
70:05 - ID
70:07 - number this is a key and it has value as
70:11 - number
70:12 - okay
70:13 - just set up the view wrap word wrap so
70:16 - that you can see
70:17 - okay
70:18 - [Music]
70:20 - now what we want to do is we want to set
70:21 - the row height depending on these
70:24 - columns here so we can use this constant
70:28 - foreign
70:31 - called this dot calls
70:34 - and as default one is three so we will
70:37 - have three columns as default the
70:39 - default height is going to be 335 but
70:42 - once we update the on column count
70:44 - change we want to update this value as
70:45 - well so
70:47 - we will basically call
70:50 - this assignment again
70:52 - and make sure to use this to refer to
70:55 - this variable here
70:57 - so this way we are getting updated
70:59 - narrow height dynamically as well here
71:03 - okay any side of our matte grid list we
71:06 - want to add
71:08 - another math component which is a child
71:10 - of math grid list and that is matte grid
71:14 - tile
71:16 - okay and we will use this one to Loop
71:18 - through the products array once we fetch
71:20 - them
71:21 - and now we want to create new components
71:23 - so let me open up
71:25 - the terminal
71:28 - here
71:29 - and change directory inside of the
71:32 - source app
71:34 - Pages home pages and components and
71:38 - inside of this uh folder let's create NG
71:41 - generate component and the name of the
71:43 - component Let It Be
71:45 - product box so this one will hold all
71:49 - the informations for the products in
71:51 - image a title description all these
71:54 - things that we want to display about
71:55 - about the products so as you can see it
71:57 - created a new product box component and
72:00 - and it updated
72:02 - app.module.ts file okay
72:05 - let me close that down
72:07 - and we can go into components folder and
72:10 - open up the products
72:12 - product box
72:14 - folder
72:16 - here
72:18 - what I want to do same as with the other
72:20 - components let me just remove this
72:22 - boilerplate and we want to create new
72:25 - components uh HTML file so product
72:30 - Dash box that component
72:33 - dot HTML okay
72:37 - and let's include this external HTML
72:39 - file so template URL is name of the
72:41 - property and make sure to refer to the
72:44 - current directory like so
72:46 - okay
72:49 - and we can close that
72:51 - now we can include this component so
72:54 - make sure to use the selector
72:56 - and include the selector inside of the
72:59 - home component in the math grid tile
73:03 - okay here
73:07 - you can close the home component
73:09 - and we can open up the product
73:12 - HTML file and let's close the other so
73:14 - that they are not confusing us okay
73:18 - so here again we're gonna have
73:21 - let me just
73:23 - enlarge the browser and you will have
73:27 - MAT card as the
73:30 - wrapper again obviously
73:33 - let's add some class so we want to
73:36 - add text Center
73:38 - [Music]
73:39 - to the math card because I want
73:41 - everything to be centered the title of
73:43 - the description and all this information
73:47 - okay so let's add another div
73:51 - and inside of this div let's add an
73:53 - image
73:54 - okay
73:56 - this image is going to have a class
74:00 - MB
74:01 - -1 which means margin bottom one
74:05 - and MX Auto which basically adds an auto
74:09 - margin on the left and the right side
74:11 - and Center is the image okay
74:14 - for the source
74:16 - okay
74:18 - and for the source you can use
74:19 - placeholder images there's a great
74:22 - website for it and just type in the
74:24 - source like so https colon forward slash
74:28 - forward slash via DOT placeholder.com
74:31 - forward slash and this is the actual
74:34 - size of the image that you want to put
74:36 - in I just put it like 150 but you can
74:38 - put whatever size do you want you know
74:41 - so and you basically get like a square
74:43 - well and you get the values of the image
74:46 - inside of it it's very useful if you
74:48 - want just have the placeholders while
74:50 - you're developing something
74:52 - okay
74:53 - and let's add
74:56 - height to be
74:58 - 200 pixels okay and this is how to add a
75:02 - custom height to your properties H
75:05 - stands for height and this way inside of
75:08 - the brackets you can add a custom value
75:10 - this is predefined value and this is the
75:13 - custom value custom value okay
75:15 - let's save that and this changes uh the
75:18 - image size okay
75:21 - now next to the image let's add another
75:23 - div and inside of this tip we're gonna
75:26 - add information about the product itself
75:30 - so let's add a class
75:32 - and set the width to full so this
75:34 - basically sets the width to 200 percent
75:36 - okay
75:38 - and inside of this
75:40 - uh do let's add another div
75:44 - in here let's add
75:46 - category of this product so let's name
75:49 - it
75:50 - shoot
75:52 - maybe okay
75:55 - then let's add a paragraph below that
75:59 - okay
76:01 - now let's add a class
76:05 - truncate
76:07 - okay and
76:12 - hover
76:15 - white space Dash normal
76:20 - okay what this does is basically if you
76:22 - have a text that is longer than this box
76:24 - it cuts off the text and adds Three Dots
76:27 - and when you hover over that text it
76:30 - shows you entire text Justin hover
76:33 - it's very useful when you have long
76:35 - titles you know so that's a title here
76:38 - like sneakers Maybe
76:42 - okay let me just change the view to
76:44 - Beaver wrap like so
76:47 - and that looks nice
76:53 - and now let's
76:55 - add another div here actually
76:57 - description so let's add a paragraph
77:00 - here and for the description Let's uh
77:03 - just add dummy text description and we
77:06 - will update that later on okay
77:09 - uh actually I see the text is not
77:11 - centered and that's why that the reason
77:13 - for that is because we miss here that
77:14 - the text
77:16 - the T on the end okay that's more like
77:19 - it
77:21 - and now below this div
77:25 - okay we want to add another div
77:29 - and let's set a class
77:31 - flex and justify
77:33 - [Music]
77:34 - so here at the bottom I want to display
77:37 - the price and I want to display here uh
77:40 - proceed to the checkout basically uh
77:42 - I'll actually to add to the cart so cart
77:45 - icon so that we can add this item to the
77:47 - card
77:47 - yeah
77:49 - so get a span here
77:52 - and let's add we use the class
77:56 - text Red 400.
77:59 - and let's use the currency pipe again to
78:02 - display the value of the older price
78:05 - let's use 150
78:07 - and just use the pipe
78:11 - currency
78:15 - like so and it displays
78:18 - the currency in correct format and on
78:21 - the right side I want to add a button
78:24 - and inside of this button let's add a
78:27 - matte icon
78:32 - but icon okay like so and let's add icon
78:37 - as
78:38 - shopping underscore card
78:40 - okay
78:42 - and let's just change the color of this
78:45 - uh of this icon class and set it to text
78:50 - Dash Gray
78:53 - Dash 500.
78:56 - okay that's much more subtle
78:59 - okay I think this looks very nice so the
79:02 - one thing that I want to change here is
79:04 - basically depending on your body's the
79:06 - layout select that we want to change
79:08 - uh this layout on our product box a
79:11 - little bit so when we are in full screen
79:13 - mode basically when we only have one
79:15 - column like in this case one column per
79:17 - row we want to show the image on the
79:20 - left side and we want to change the
79:22 - description the title in all this
79:24 - information on the right side here
79:26 - so that it takes more more space
79:29 - actually right and the image is bigger
79:31 - so how we can do that is we can create
79:33 - an input here which we will receive from
79:36 - the parent component
79:38 - and let's call that here
79:41 - so import input
79:44 - from angular core make sure to import it
79:46 - on top here
79:49 - initialize it and add a name full width
79:53 - mode
79:54 - and let's add a default value files
79:57 - false because when we load our
80:00 - application we will have three product
80:02 - product boxes per row so it's not going
80:05 - to be in the full width mode but only if
80:06 - somebody clicks on this first icon it's
80:09 - going to be one product box per row and
80:11 - then we are in full width mode okay and
80:14 - now we can use
80:16 - uh this property to alter the sum of the
80:18 - stars that we have okay and
80:22 - actually before we do that let's go to
80:24 - the home component
80:25 - and we can set this property on the
80:27 - product box so
80:29 - it's in full with
80:32 - mode only
80:35 - if columns is equal to one
80:38 - okay
80:42 - okay
80:43 - close that so if you go now and click
80:46 - like so you can see that actually this
80:49 - column is taking the entire place right
80:53 - uh but it's not taking the full width so
80:55 - let me go back to the home component
81:00 - and set here the width
81:03 - inside the class with full so it needs
81:05 - to take the full width of this entire
81:08 - container like so but the layout is
81:11 - different so we want to change that okay
81:14 - okay so here
81:16 - the first thing that I want to do
81:18 - is
81:20 - I want to Center the text only if we are
81:23 - not in the full uh full width mode so
81:26 - here we can use mg class to create this
81:28 - conditional right
81:30 - and here I will add an object basically
81:38 - an object and inside of the object add
81:40 - text Center class only
81:44 - if you are not in
81:46 - full
81:48 - bit mode like so and I will copy this
81:51 - so because we are going to use this
81:52 - quite some time
81:54 - and also I want to change the height of
81:56 - this image so where is our image it's
81:58 - here so let's add again
82:01 - NG class
82:04 - and let's add basically
82:07 - add a
82:09 - add an object and let's add a height of
82:12 - 200. 200 pixels only
82:16 - if we are not in the full height so
82:18 - basically if we are in default mode
82:21 - otherwise increase the height to
82:26 - use the 365 360 pixels
82:30 - that's really okay like so and make sure
82:33 - to wrap that
82:35 - in the quotes here as well because this
82:39 - is the index of the object
82:41 - and 360 if it's in full width mode
82:46 - and I want to
82:48 - yeah
82:50 - put the
82:52 - quotes like so
82:54 - so let's try this
82:58 - okay now switch to the full width mode
83:00 - and you can see that the text is
83:02 - centered
83:03 - actually on the left side actually it's
83:04 - not centered it's a line on the left
83:06 - side and the image size it's bigger and
83:09 - if you we switch back to the default
83:12 - layout it's going back okay
83:14 - the the different
83:16 - layout we want to achieve
83:19 - and still but we want to move the image
83:23 - on the left side and this description on
83:25 - the right side so how we can do that
83:28 - is
83:29 - we want to add
83:32 - for this div we want to add property
83:35 - Flex so let's add again NG class
83:42 - and let's add Flex
83:44 - if it's in full width mode
83:46 - okay
83:49 - like soy and you can see now it's in the
83:52 - full width mode basically
83:53 - on the left side
83:55 - we have this and description on the
83:57 - right side
83:58 - but we still need some some more styling
84:00 - because it doesn't look that great
84:02 - either so we can go and add some padding
84:04 - and the other properties so here let's
84:07 - add
84:08 - NG class
84:12 - okay and let's add some pot padding left
84:15 - in the on the right side
84:18 - and let's add a flex and flex direction
84:21 - to column and justify between
84:27 - okay
84:32 - okay like so
84:34 - let me just
84:37 - make sure to to apply this rule if you
84:40 - are in full width mode and make sure to
84:41 - surround
84:43 - these classes
84:45 - read the quotes
84:46 - and that you're spelling is correctly so
84:48 - what you're doing here here is we're
84:50 - setting this div to the flex mode or
84:53 - basically display flex and the flex
84:55 - direction is two columns it's not it's
84:58 - not for rows and we are just basically
85:00 - justifying in between
85:02 - if we save it
85:05 - and test it
85:07 - okay that looks much better he has some
85:09 - space around it much much better
85:12 - and I think basically we're done except
85:15 - the fact that I want to display uh this
85:17 - description only if we are in public
85:18 - mode so go to NG if this is going to be
85:21 - easy only it in in full width mode so
85:25 - when we are on default we don't show the
85:26 - description and when we switch on it on
85:29 - the full width mode we show the
85:31 - description yeah
85:34 - okay
85:36 - and that's all I wanted to do now let's
85:38 - test the layout and how it looks if we
85:41 - go to the home page and let's copy paste
85:45 - it this metric tile a couple of times
85:48 - I'm going to just copy it
85:51 - like so
85:54 - okay
85:56 - let me just copy it I'll lose focus
86:00 - for like five or six times like so
86:02 - and let's see what we got
86:05 - okay
86:06 - so as you can see this is the default
86:09 - layout where we have three items per row
86:11 - and if you click on the first one on
86:15 - this layout we get one item per row
86:18 - and we can click on the third one we get
86:20 - the four items per row and this looks uh
86:23 - and it looks and works as expected with
86:26 - this we basically have completed the
86:28 - home page so we created everything uh
86:30 - which which is static here but the only
86:33 - thing that I want to do here now is I
86:35 - want to implement the API
86:37 - apart from this page you will have a
86:39 - card page and actually we can first go
86:41 - and create card page because maybe we
86:43 - should start first with implementing all
86:46 - the static files first and then we can
86:48 - dig in into developing uh and
86:50 - integrating the API into it so let's do
86:53 - that first let's create another page
86:55 - okay so let me close all these files
86:58 - and let me open the terminal
87:02 - let me see where we are at in the
87:05 - directory and let's change directory to
87:08 - the pages so City a couple of times and
87:12 - now we're in the pages director here we
87:14 - want to create new card components
87:17 - or actually a new page component so run
87:20 - the command NG generate component and
87:23 - call it cart
87:24 - okay
87:28 - it will take a couple of seconds to
87:29 - generate it like so
87:32 - and once again we can close everything
87:34 - and we have this card component so what
87:37 - we want to do here is we want to set the
87:39 - routes
87:40 - you want to set new route in order to
87:42 - load this page so let's just
87:45 - copy paste this first route
87:49 - and change the path to be car
87:52 - the component that is going to load this
87:54 - is going to be cart component
87:56 - make sure that the car component is
87:58 - imported at the very top here
88:02 - okay and close that
88:05 - we can close the terminal as well
88:08 - and now let's open up the cart component
88:11 - and let's test it out this route so if
88:14 - we click on and now navigate to to the
88:17 - card
88:18 - you get this card Works which is actual
88:21 - html text here right so once again
88:25 - remove the Styles and let's give an
88:28 - external HTML file
88:30 - okay
88:33 - so template URL
88:35 - and make sure to navigate to the current
88:37 - directory and we'll call it cart
88:41 - dot component dot HTML
88:45 - okay
88:48 - and let's create that file
88:51 - like so
88:54 - okay well on this component we're gonna
88:56 - create uh basically material table and
88:59 - we're going to display all the
89:00 - information before the user goes and
89:02 - buys the product so we need to create at
89:04 - the moment we don't have the real data
89:06 - and we don't have the functionality
89:08 - working for the cart itself so we need
89:11 - to create a dummy card object and
89:14 - let's do that
89:16 - so we will have a card
89:20 - which which is going to be the card
89:22 - a card of type and we don't have this
89:24 - type yet but it will receive the items
89:27 - already
89:28 - so let's create new folder
89:32 - inside of the application and let's call
89:34 - it models
89:39 - make sure that is inside of the app
89:41 - component not inside of the pages
89:44 - and here we can create new file for the
89:46 - card
89:48 - so basically in this folder we will
89:51 - create definition for our interfaces and
89:54 - create new file and name it
89:57 - card.model.ts okay
90:00 - and the first thing that I want to
90:02 - create is export interface just shrink
90:06 - this down enter interface card item
90:11 - okay and this card item is going to have
90:14 - a couple of properties so product
90:17 - is going to beat up string
90:19 - name is going to be type shrinkle as
90:22 - well price
90:24 - is going to be type of number
90:27 - quantity
90:29 - is going to be type of number
90:32 - and the ID of the card item is going to
90:34 - be number as well
90:36 - so here we are making the definition of
90:38 - our data that we're going to receive and
90:40 - pass through the application
90:42 - and we're gonna export interface cart
90:45 - this is the one that we just used in our
90:49 - card component
90:50 - and this one is going to have the items
90:52 - array so it it's basically array of
90:57 - card item that we just created here
90:59 - okay
91:02 - and with this we have created definition
91:04 - uh for a card
91:06 - okay so we can import that
91:09 - here add import from Source app models
91:13 - car dot model OKAY like so
91:16 - you can save it and now let's actually
91:18 - create uh some dummy object
91:22 - you can just copy
91:24 - you can copy the object definition from
91:26 - here
91:29 - so it's easier
91:33 - for the product
91:36 - let's just say
91:38 - choose or actually uh the product is
91:41 - going to take the image of the product
91:44 - so let's just copy the placeholder that
91:46 - we used before here
91:48 - okay
91:50 - the name
91:51 - is going to be sneakers
91:56 - price 150
91:59 - I'm making this up so party one
92:03 - okay make sure that you format the
92:05 - subject correctly and for the idea let's
92:07 - add the ID to one as well
92:09 - okay like so so we have Now default
92:11 - object
92:12 - okay
92:14 - and what I want to do next is we want to
92:17 - add a property that we will use inside
92:19 - of our our table so that property is
92:22 - called data source
92:24 - and this property is going to receive
92:26 - the card item array you know
92:29 - like so and make sure to Define it as a
92:31 - rate
92:34 - okay and
92:36 - let's assign it to empty array at the
92:39 - beginning right
92:42 - and
92:43 - we can assign in inside of the NG on and
92:46 - it repeats the data source is equal to
92:49 - this Dot card dot items okay
92:53 - but once we hook up the API we'll fetch
92:57 - the data and then we will feed this data
93:00 - source from there okay the last thing
93:02 - that I want to add here is I want to add
93:04 - the columns so displayed
93:08 - columns
93:12 - call displayed columns okay and this is
93:16 - going to be type string array
93:18 - well
93:21 - like so and let's just create this this
93:25 - array okay so these are the columns that
93:27 - we are going to show in the table so we
93:28 - will show the product
93:32 - name second one I mean I could copy
93:36 - paste but yeah this will work as well
93:38 - price
93:40 - uh the next one is quantity okay
93:45 - the currently
93:47 - the next one is going to be total this
93:49 - is the total amount that the user needs
93:51 - to pay and the action uh column in this
93:55 - column we're going to display a couple
93:57 - of buttons so if if user wants to remove
93:59 - the product from the table from the cart
94:02 - actually okay
94:05 - let's save this
94:06 - and let's open up the cart so now we can
94:09 - start creating our table
94:10 - again you already know we're going to
94:13 - use math card for a wrapper
94:16 - and uh we will only display this ngf
94:21 - the
94:22 - card.items.land is existing so basically
94:25 - only if we have uh you know the length
94:28 - of the of the card items otherwise we
94:31 - want to show a message to the user so
94:33 - let's copy paste this
94:36 - that user needs to buy something in
94:37 - order to get uh display to this product
94:39 - right so what we can create here
94:43 - and you can add a paragraph that says
94:47 - your
94:49 - card is empty
94:52 - and let's add a button where you can
94:54 - navigate back to the home start shopping
95:00 - and let's set it
95:01 - matte
95:04 - raised
95:05 - button so basically we are assigning
95:08 - raise button so uh quest to it
95:11 - and router link so that they can
95:15 - navigate to the Home where they can see
95:18 - uh
95:19 - the products so let's change the layout
95:22 - to wordbrap so you can see everything
95:23 - and if I save this for now as you can
95:27 - see the card items length is empty and
95:29 - basically it's not actually uh it's it
95:32 - shows both of these uh cards because
95:36 - we use where the card item length exists
95:39 - we want to show this only if there is no
95:41 - card item land
95:44 - and about how we can test it is
95:45 - basically we can just remove this
95:47 - this first item that we have in inside
95:50 - of the this array
95:52 - and we should get yeah we should get
95:54 - this and we get redirected here
95:57 - how we can get back is we should click
95:59 - on view card because we assigned the
96:01 - card route here okay let's give back
96:06 - this product to the items array and we
96:09 - should see our card
96:10 - which is empty because we haven't
96:12 - created anything yet there so let's
96:14 - start creating our table okay
96:17 - so let me shrink this
96:20 - and here on top let's create table
96:24 - let's add a probably math
96:27 - table like so
96:29 - and data source here we will pass the
96:32 - data source that we created
96:35 - like so and let's add some classes
96:39 - so let's add a class
96:41 - Matt
96:43 - elevation
96:45 - elevation
96:48 - a lab
96:52 - C8 this is going to add you need to make
96:55 - sure that you spell correctly otherwise
96:57 - it's not going to be applied in the
96:58 - application
97:00 - now this is going to add some Shadow on
97:03 - below the table Yeah and set the width
97:05 - to full
97:07 - also I want to add a container to our
97:10 - matte card so I can add class actually
97:14 - the maximum width of our container so
97:16 - add a maximum width to 7 Excel this is
97:19 - the same as we did on the home page and
97:22 - let's Center it so use the MX Auto and
97:25 - this is something which we can use for
97:27 - the bottom red card as well here
97:30 - so if we go and check out here
97:33 - if you enlarge
97:36 - actually you cannot see it because it's
97:39 - big but here you can see when it's on
97:40 - 100 basically it's not taking the full
97:42 - width of the window it has the maximum
97:45 - width okay
97:47 - like so
97:50 - okay
97:52 - and now it's on inside of the table
97:54 - let's add the First Column or actually
97:58 - we can first add the rows so we'll have
98:00 - actually three type of rows first one is
98:03 - the header the second one is the regular
98:05 - row and then and the last one is the
98:07 - footer so table row here and the first
98:11 - one is going to be format header row
98:15 - like I said this is for the
98:18 - 40 table headers
98:20 - and it also needs to have that head row
98:22 - definition so Matt another
98:25 - row definition and this one is going to
98:28 - be the display columns that we created
98:30 - here
98:35 - okay I have a typo called
98:38 - like so columns
98:41 - here and make sure to add the to Matt
98:44 - had the row definition here
98:46 - okay
98:47 - let's create another one
98:50 - so the next one is going to be for the
98:53 - regular table row
98:55 - so Matt row and again we we need to have
99:00 - Matt
99:01 - row definition
99:07 - and here we're gonna Loop to the items
99:09 - so what we're going to do is we Define
99:11 - let row
99:13 - and basically columns
99:15 - are going to get information from these
99:18 - paid accounts here
99:21 - okay
99:24 - and the last one is table footer
99:26 - so again Matt
99:28 - footer
99:30 - row
99:31 - and we also want to give it a definition
99:34 - matte footer
99:37 - row definition is equal to these plate
99:40 - columns
99:41 - [Music]
99:43 - so these are the placeholders in which
99:45 - we are going to render our uh table data
99:49 - right
99:50 - so table cells actually so this is what
99:54 - you want to create first and now you can
99:55 - go and create these columns so let's
99:58 - create NG container
100:03 - like so
100:05 - and the first one is going to be product
100:07 - so matte column
100:10 - definitely it stands for definition it's
100:13 - going to give you a product this is the
100:15 - the key that you're accessing the data
100:17 - source so it needs to match with these
100:20 - columns basically from the items itself
100:23 - so if you want to display a particular
100:25 - property from the object you would use
100:29 - this math column definition here
100:31 - now you can access that
100:33 - so let's add a table
100:36 - header for this one and let's add a
100:39 - definition to it so matte
100:42 - together so this is important in order
100:45 - to add all the functionalities that
100:48 - Matt's table has so you when you add
100:50 - this this property to it it can add
100:53 - additional like sorting or filtering all
100:55 - these things that material table has so
100:58 - that's why you're writing it and you
101:00 - want to test match together
101:03 - cell definition
101:05 - okay and for the title we're gonna
101:09 - say this is going to be product
101:12 - and now let's create a table at the
101:16 - actual table cell and for the table cell
101:18 - you need to pass the math
101:21 - cell and again Matt cell definition
101:27 - and we will go we will Define what is
101:31 - the name of the element
101:32 - and we'll just call it elements and this
101:35 - is how we access the property from the
101:37 - object with with this variable that we
101:40 - Define in the math cell definition okay
101:43 - so we can we can open the image
101:48 - image attribute image of our element
101:51 - sorry and the source is going to be
101:53 - element dot product
101:57 - so this is the product property here so
102:00 - we will access this one this URL
102:03 - element of product
102:06 - okay
102:07 - and make sure to surround that with the
102:10 - curly braces so that you are inside of
102:12 - the angular expression let's add an alt
102:15 - as product
102:18 - and let's add some classes class make it
102:21 - width to be 100 pixels
102:26 - okay let's close that bracket and let's
102:28 - add some margin on the top and the
102:30 - bottom to five pixels okay
102:32 - [Music]
102:34 - and let's create a footer
102:36 - photocell so 3D
102:39 - let's add again
102:41 - matte footer
102:44 - cell okay let's add a definition for
102:47 - this footer mat footer
102:50 - cell definition and you can only this
102:53 - amp you don't have to assign anything to
102:55 - it so in the footer we want to display
102:58 - a button here
103:01 - which will say continue shopping
103:02 - basically
103:03 - Matt
103:04 - is going to be the same but we can just
103:07 - copy paste it from this one
103:10 - but we will update the text to continue
103:13 - shopping instead of start shopping okay
103:18 - continue shopping like so let's save
103:21 - this and see what we got
103:24 - okay uh we don't get anything displayed
103:27 - in our table let me just check the
103:29 - console okay I have some error so let's
103:31 - debug it together
103:33 - and the reason why we are getting this
103:35 - error is because
103:37 - as you can see here we Define these paid
103:39 - columns and we are defining name so it
103:42 - reports the name error because the
103:44 - product has been found here if you have
103:47 - the medical on the finishing product
103:48 - right but we are missing the name so if
103:51 - we go and remove these products here
103:54 - these columns and just comment them out
104:00 - we should get the first column right
104:05 - for two to make the table work as we as
104:08 - we expected but as you can see the first
104:11 - column has uh the table header here
104:14 - product it has the table cell with the
104:18 - image here and at the bottom in the
104:21 - footer it has a button that says
104:23 - continue shopping like so so let's
104:26 - uncomment these others and let's add
104:29 - them
104:30 - okay
104:34 - now let's just copy paste this container
104:39 - and for the second one the definition of
104:42 - the column is name
104:45 - the title of this one is going to be
104:48 - name obviously instead of the image
104:51 - we want to just display the elements
104:56 - dot name
104:59 - okay and what we can do here we can just
105:01 - copy paste this one a couple of more
105:03 - times
105:06 - actually
105:08 - uh yeah
105:10 - for the bottom I don't want to display
105:12 - the continue button again so let me
105:15 - remove this button so for the
105:18 - footer cell this is going to be an empty
105:21 - right
105:22 - and uh for the for this one as well I
105:25 - want to apply some style because some
105:27 - names of of uh particular products could
105:30 - be very large very long actually so
105:33 - let's apply
105:34 - uh one class so that we can actually
105:37 - truncate the width of the of the title
105:40 - so let's add phone k and the maximum
105:43 - width is excess
105:46 - so we are setting here the maximum width
105:48 - of this element and if it's longer than
105:51 - this maximum width it will just cut it
105:54 - off and show the dots that's what I
105:56 - wanted to to display now I can copy this
106:01 - and paste it so the next one that we
106:03 - need uh is price okay
106:07 - so the title
106:09 - the column definition is price
106:12 - the title is price as well
106:16 - and here instead of the paragraph
106:19 - I mean we can use the paragraph
106:22 - but
106:23 - let's just add the property price
106:27 - and let's use the currents
106:30 - but as well
106:33 - or we can even remove the paragraph
106:35 - because we don't we don't need to apply
106:37 - any Styles whatsoever
106:39 - okay
106:41 - and let's copy it again
106:48 - the next one is quantity
106:51 - let me copy that so the math column
106:54 - definition is quantity
106:55 - the title is also quantity with upper
106:59 - first case and the property is quantity
107:02 - but we want to remove this currency pipe
107:05 - here
107:06 - okay
107:09 - let me copy this one
107:11 - and paste it
107:13 - the next one is total
107:17 - okay so the marathon definition is total
107:23 - the title is total as well and here
107:26 - as well for the toll we just want to
107:30 - add element dot total
107:34 - like so
107:35 - and on the footer you actually want to
107:37 - display because
107:40 - we will have on each row the total
107:43 - amount
107:44 - how all the prices and on the very
107:46 - bottom we want to display the the total
107:50 - grand total amount so let's just add a
107:54 - here let's just add
107:56 - new span
107:59 - here let's add some class font
108:02 - Dash ball so make it bold add some
108:05 - padding five
108:07 - and let's
108:09 - now let's set the display to block in
108:12 - order to apply this padding and so we
108:16 - need to set this block
108:17 - and we'll create new method get total
108:21 - and we'll pass the card
108:23 - dot items and again we will use
108:27 - the currency pipe make sure to wrap that
108:30 - inside of the
108:31 - angular bracket so it's in inside of the
108:33 - expression
108:35 - okay and let's define this get total
108:38 - method inside of our card component so
108:42 - here
108:43 - so this method is going to return
108:47 - [Music]
108:49 - number
108:53 - and it receives in items
108:57 - which are type of card item
109:00 - array
109:02 - okay and what we want to do
109:08 - is we want to go and map items
109:14 - dot map
109:16 - and here we can access the item and what
109:19 - we want to do
109:20 - you want to take the item price
109:23 - and multiply that with item dot quantity
109:29 - so here what we are doing basically is
109:31 - we are going uh looping through the
109:32 - items
109:34 - and we're taking the item price and the
109:36 - quantity that it has and then we want to
109:38 - add all of that so we can use reduce
109:42 - and instead of we reduce we always have
109:43 - the previous value
109:45 - and the current value
109:48 - so and all we are doing here is
109:49 - basically taking the previous value and
109:51 - adding the current value on and we need
109:53 - to set the initial value here which will
109:56 - be the zero
109:58 - okay
109:59 - and it shows the error here because we
110:01 - are not returning the number you so we
110:04 - will need to add return in order to
110:07 - satisfy satisfy this rule okay like so
110:10 - and now we created this method let me
110:12 - just indent it a little bit so
110:14 - let's start in the same line okay
110:17 - and so using this method we are getting
110:19 - the total price
110:22 - total price for Insider uh card
110:25 - basically not not just per product and
110:28 - row but for the entire you know entire
110:30 - card yes okay let me see that was the
110:35 - total and last one is the action
110:37 - [Music]
110:39 - okay
110:40 - so let's actually copy paste
110:45 - previous
110:47 - column and let's copy paste the
110:50 - definition so it's action
110:54 - and for the title we don't want to say
110:58 - we don't want to add the title actually
111:01 - but we want to add a button here so
111:03 - let's add a button
111:05 - and we will use this button to clear
111:08 - to clear
111:10 - entire card clear all so to style it
111:14 - let's add a matte
111:16 - raised button so this transforms the
111:20 - director button into matte matte button
111:23 - and let's add a color worn so that it's
111:26 - actually red
111:29 - color
111:31 - worn and let's add a class
111:34 - float
111:36 - right
111:38 - okay so let's save that let's save this
111:40 - one
111:41 - foreign and we get our table as you can
111:45 - see here
111:47 - what I wanted to add
111:50 - a part from the buttons on top I want to
111:53 - add buttons Pro as well here so let me
111:58 - just find that so here instead of the
112:02 - element the total
112:05 - okay I can remove that and here on the
112:08 - bottom
112:09 - I can remove the total as well
112:12 - here
112:14 - and here we want to add an icon
112:18 - so basically inside of the button
112:22 - and let's add a class off
112:25 - Matt Mini
112:28 - Fab
112:30 - okay
112:31 - this will give us like a small button
112:34 - with the rounded style styling okay and
112:39 - let's add a color
112:41 - worn so it's red
112:43 - and let's set a class
112:47 - float
112:48 - right like so
112:50 - and the name of the icon is closed
112:54 - okay so we get actually yes the name of
112:58 - the icon but we need to import the matte
113:02 - icon element and just name it as close
113:07 - and we get this button nice and styled
113:10 - okay and if we go and just let let me
113:13 - try and copy paste
113:15 - this product once again like so
113:18 - and change the like the ID to two for
113:21 - example
113:23 - we will get two items per row and we can
113:25 - remove you know each and one of them
113:27 - okay one thing I'm noticing here
113:30 - actually is that we are missing the
113:32 - total values here so these need to be
113:35 - total values per row so if you have
113:37 - quantity like two or three or five and
113:39 - this is the total value that you're
113:40 - getting so
113:43 - if we go go to them to the total
113:48 - column actually can see that we are
113:51 - using element total and that's something
113:53 - that we don't have so what we want to do
113:56 - here is element dot quantity
114:01 - like here
114:04 - times element
114:06 - dot price
114:09 - and let's format that in the currency
114:12 - pipe as well
114:14 - okay
114:15 - and let's wrap it
114:18 - to the
114:20 - apprentices like so and now let's test
114:23 - it
114:25 - and as you can see we get the values and
114:28 - what if we go and change the quantity
114:29 - let's say for the second product we have
114:32 - three items
114:34 - this one
114:36 - and we get 450 the personality is 150
114:40 - quantity is three and now the total
114:42 - price is getting updated
114:44 - but ideally uh to increase the quantity
114:47 - we want to do that here so let's
114:50 - add a couple buttons so that user is
114:53 - able to update the quantity if you want
114:56 - so let's wrap the spam
115:00 - with the quantity and let's add a couple
115:03 - buttons here so let's set a button
115:06 - for removal of the for reducing the
115:09 - quantity and let's style it with matte
115:12 - icon
115:15 - button like so
115:17 - now let's add matte icon inside of it
115:22 - and the name will be removed okay
115:27 - like so so that user can remove and
115:30 - let's add another one
115:33 - afterwards and let's call this one add
115:37 - and actually this is the actual name of
115:39 - the it's not that we are calling it like
115:41 - that so is the actual name
115:43 - of the button okay
115:47 - and you can see that this sneakers is
115:49 - not actually online with all of this
115:51 - element and the reason for that is
115:53 - that we are using the paragraph So and
115:56 - it adds some margin on the bottom what
115:59 - we can do is
116:00 - we can change this
116:03 - into span
116:05 - here
116:07 - and
116:10 - and it gets aligned and make sure to
116:12 - add actually we can we can test this so
116:15 - let's see if it works or not so let's
116:17 - add some gibberish long text and see if
116:20 - it gets cut off
116:22 - as you can see it doesn't work
116:24 - the reason for that is
116:27 - we need to set the property block to it
116:30 - and now it works because the span by
116:32 - default is not a block element so okay
116:35 - it doesn't work
116:37 - okay let's just remove this rubbish tag
116:39 - and let's
116:40 - add the element name and don't forget to
116:43 - add the block display block property
116:46 - okay the last thing that I forgot to add
116:49 - here I think this looks nice the only
116:51 - thing that is missing is we want the
116:54 - actual button to go and
116:57 - to you know do the actual shopping right
117:00 - so to proceed to the checkout so let's
117:03 - find the actions here actions column
117:07 - and for the footer let's add the button
117:10 - for that let's add a button
117:15 - and this button will say proceed to the
117:17 - checkout
117:19 - okay it's gonna be
117:23 - uh it's going to be math raised
117:27 - button
117:28 - and it's gonna say
117:31 - Pro seed to
117:35 - check out
117:37 - you can make this one uh color set the
117:40 - color to be primary so it stands out and
117:43 - let's float it to right so let's add a
117:45 - class quote right
117:48 - okay
117:52 - let's go back to card and here we have
117:54 - the procedure checkout
117:57 - okay instead of implementing the API
117:59 - first I think that it makes much more
118:01 - sense to First implement the logic of
118:03 - the card and when I say the card I mean
118:06 - uh let me just enlarge this and when and
118:09 - when I say card I mean by adding and
118:12 - removing the items from the card right
118:14 - in reading them on different places for
118:17 - example if you want to read the items
118:19 - from the card
118:21 - here on the menu and we want to read
118:23 - them here as well on this card page so
118:26 - let's Implement that okay
118:29 - uh let me actually
118:32 - minimize this entirely and we can focus
118:35 - more on coding here so what I want to
118:37 - open here is I want to open the home
118:40 - page
118:40 - and on the home page
118:43 - with your product box
118:46 - here
118:47 - and I want to add a new event basically
118:51 - so on this button which is basically
118:54 - this shopping cart here I want to add
118:57 - this product information to the new
118:59 - service that we will create just in a
119:01 - bit
119:02 - okay
119:04 - so let's add a click
119:07 - on quick event
119:11 - let's call uh
119:13 - on add to cart
119:17 - okay
119:19 - now let's create this method so let me
119:22 - close all the other files
119:24 - let's open the typescript file here
119:29 - and let's add this method
119:31 - so this method is not going to be
119:33 - returning anything so the return type is
119:36 - void and we are also not passing
119:38 - anything so what this method does it's
119:41 - going to emit the product that we are
119:43 - going to get from the input but for now
119:46 - as we are not getting uh as we don't
119:48 - have anything we are not catching the
119:49 - actual data let's create this product
119:52 - as uh as a diamond datum and the type of
119:56 - this product is going to be
119:57 - product but yes we don't have this
120:00 - product uh
120:02 - interface created yet let's do that so
120:04 - inside of the models create new file and
120:07 - name it product.model.ts
120:10 - [Music]
120:11 - like so
120:13 - okay and now let's create new interface
120:15 - export interface
120:18 - product
120:20 - and this interface is going to have an
120:22 - ID with step number
120:25 - title which is type string
120:28 - price which is type of number
120:33 - category
120:35 - step of string
120:37 - [Music]
120:38 - description
120:41 - which is type of string as well and the
120:43 - image
120:45 - this type of string so these are all the
120:47 - properties of the product that we're
120:48 - gonna use
120:50 - and we're exporting this make sure so
120:52 - that you are able to import it in the
120:54 - file that you need so here we can just
120:55 - go and import it on top so import
120:58 - product make sure that it's imported
121:00 - and now let's uh it can be actually
121:03 - product or undefined because once when
121:07 - we implement the API we will pass this
121:09 - uh through the input same thing as we
121:11 - are doing here here with the full width
121:13 - mode and while it's fetching the data
121:15 - this product can be undefined for a
121:17 - little bit of time right
121:19 - but now let's uh create an array which
121:22 - is a dummy data and we can just copy
121:24 - from this product the object definition
121:27 - so it's easier to create this object
121:30 - number let's add one
121:33 - title
121:35 - what we can create
121:37 - we can create sneakers
121:40 - sneakers
121:42 - price 150 by the way I'm not sure if the
121:45 - spelling of synchronous is correct so
121:47 - sorry about that if it's not category
121:49 - shoes
121:51 - [Music]
121:53 - description
121:56 - I'll just put the description board
121:59 - and for the image again we can use the
122:02 - one that we are using here
122:04 - placeholder
122:08 - okay
122:10 - so instead of this string let's put this
122:13 - placeholder and like so
122:15 - okay now what we can do is we can go
122:19 - and
122:22 - use this product to emit
122:24 - but in order to tell me this product we
122:26 - need to create event emitter so let's
122:29 - add an output
122:31 - again this is the way how you
122:32 - communicate uh with the child and the
122:34 - priority component
122:36 - okay output and we will give an event
122:39 - name to add add to
122:42 - cart which is a new event
122:45 - emitter
122:47 - okay and make sure that you import both
122:49 - of the output and event emitter on top
122:53 - here from angular core
122:56 - and what we can do
122:58 - we can call this dot add to cart and
123:01 - emit
123:02 - our product this dot product
123:07 - so it basically means that somebody
123:09 - clicked
123:10 - uh on this shopping cart and he wants to
123:14 - add this this product to the shopping
123:17 - cart yes
123:18 - so now we need to catch this this method
123:21 - in inside of our home component so
123:25 - let's go to the let's close
123:29 - these components
123:31 - and inside of the home component let's
123:33 - scroll to the product box
123:36 - actually we can remove these ones and we
123:39 - will
123:42 - create Dynamic ones later on so from the
123:46 - app product box
123:49 - okay we have new event
123:52 - and let me set the view to word wrap as
123:55 - well here so that you can see
123:57 - all the classes okay
124:01 - and the attributes okay so we will get
124:03 - an event which is called add to cart
124:08 - and we want to create new method here on
124:11 - add to cart and for all the events that
124:15 - I'm passing from the child I'm using the
124:18 - same attribute name which is called the
124:19 - event that's just naming convention that
124:21 - I like to follow
124:22 - but you don't have to obviously
124:24 - now let's create this method now it will
124:27 - try an error because we don't have this
124:29 - method created yet so on add to cart
124:33 - and
124:35 - uh this method is going to return
124:37 - nothing so the written type is void
124:41 - and we want to create a new basically
124:44 - service that we are going to be using
124:45 - where we can store the date the actual
124:49 - data so let's do that inside of the app
124:52 - folder let's create new folder and call
124:54 - it services
124:56 - okay and actually let me just
125:01 - comment that this is how to cut because
125:03 - it's showing us an error and it looks
125:06 - like we are doing something wrong I
125:07 - don't like to see errors okay let me
125:10 - open up the terminal
125:12 - and
125:14 - let me see where we are at so we are at
125:17 - the pages so City on the upper the right
125:20 - directory and change into Services okay
125:22 - and here we want to let me just clear
125:24 - the console and here we want to generate
125:27 - NG G for Generate service so s is for
125:32 - service and the name of the service is
125:33 - going to be cart service okay
125:38 - let's take just couple of seconds to
125:40 - create this service okay so it created
125:42 - this card service but you can see it
125:44 - hasn't updated the app module so we will
125:46 - need manually to import this service
125:48 - so if you go to deep Services you have
125:52 - the card service and what we want to do
125:55 - is we want to go to app.module
125:58 - and we want to inject our service
126:00 - in the providers array here and make
126:03 - sure to import
126:05 - from the card service here so so that we
126:07 - can use it and it's imported here on the
126:10 - top
126:11 - okay I can close the terminal
126:13 - and save this up close the module
126:16 - and now we can import this service or
126:19 - actually we can first Define all the
126:21 - things that we want and that we need
126:23 - inside of this service
126:24 - so service is going to hold one property
126:27 - that will be used across our application
126:29 - so it will be named cart obviously and
126:31 - it's going to be new Behavior subject
126:35 - here and you need to import it from rxjs
126:39 - okay and the type of this Behavior
126:42 - subject subject is going to be card
126:45 - so the card model that we defined in the
126:47 - in the models card dot model okay
126:50 - and we need to set the default value
126:53 - which is going to be uh object with
126:55 - empty array of items like so
126:59 - so why how do we use this card uh
127:02 - Behavior subject is basically it holds
127:05 - the initial value and once we update for
127:07 - example we add new products to the card
127:10 - it just adds new value to these items
127:12 - array and in every single component that
127:15 - we want inside of our application we can
127:16 - subscribe to this behavioral subject and
127:19 - we can receive the new values and update
127:21 - the UI that's how it works okay so in
127:24 - this card service we want to add a
127:28 - snack bar
127:30 - stack bar components so we will use
127:33 - private underscore snack bar and the
127:36 - type of this uh Services called math
127:39 - math snack bar like so so make sure to
127:42 - import it as well here on the top and
127:44 - what this component or service actually
127:47 - does it displays the information to the
127:49 - user so once we add the product uh to
127:52 - the cart we want to display the
127:54 - information that we have successfully
127:55 - added this product right so now let's
127:58 - add a method add to cart
128:03 - this is the method that we I was talking
128:06 - about so this method is not going to be
128:08 - returning anything so the type is going
128:10 - to be void because we're just going to
128:12 - update this card
128:14 - uh object and we're going to emit uh but
128:17 - we're gonna have a item receive and the
128:20 - type of the item is going to be card
128:21 - item
128:22 - okay
128:24 - and make sure again to import it on the
128:26 - top
128:27 - so now we're gonna create new items
128:30 - array and this is going to be
128:34 - because we don't want to affect uh this
128:38 - default
128:40 - this original card object so we can
128:43 - destructure that object and create new
128:45 - array and we can just go reference to
128:48 - this Dot card
128:50 - dot value we're accessing this Behavior
128:53 - subject with the value
128:55 - dot items okay like so
128:58 - here and now we can
129:00 - find the actual item because uh when
129:04 - we're adding items inside of this card
129:07 - we could be adding the same product
129:09 - multiple times so we just want to
129:10 - increase the quantity and if there is no
129:13 - such product inside of the card we just
129:15 - want to add it right so let's do that
129:17 - so let's define const items
129:21 - in car so we are trying to find if there
129:24 - is there is this item already added in
129:26 - the cart items
129:28 - dot find and
129:31 - [Music]
129:32 - here we have an item
129:34 - and we're just gonna check if the item
129:37 - the ID is equal to the item that we
129:40 - passed here it's argument
129:44 - dot ID
129:45 - so if this find method finds an items an
129:50 - item it means that this is not going to
129:53 - be null
129:54 - or undefined so we can check here if
129:58 - if it exits if it already exists in the
130:01 - card
130:02 - in the card we just want to increase the
130:04 - quantity so let's just item
130:07 - or actually this is not multiple this
130:09 - should be a singular
130:11 - item in card so if item in
130:14 - card
130:15 - is there
130:17 - just increase the quantity by one
130:21 - let's use the shorthand plus equals one
130:24 - otherwise we want to push
130:26 - this to the items array so otherwise we
130:29 - want to else we want to use items
130:34 - dot push
130:36 - this item
130:38 - okay
130:39 - so otherwise you're pushing this new
130:41 - item to this items array
130:43 - in all and what we want to do at the at
130:46 - the at this very end this Dot card we
130:49 - just want to emit this value so that
130:51 - every single component that is
130:53 - subscribed to the card can catch that
130:55 - value so please Dot card dot next
130:58 - and we can emit the object with items
131:02 - so basically this is the exactly the
131:04 - same as writing items or items but the
131:07 - shorthand is just to remove the key and
131:10 - value and you get the same now what we
131:12 - want to do is we want to open up the
131:13 - snack bar these third underscore stack
131:15 - bar this is that service that displays
131:17 - the user's information so it's very
131:19 - useful
131:20 - and we can for the first argument we
131:22 - want to pass the text one item added
131:27 - two card
131:29 - and the second argument you want to pass
131:31 - the text that you want to show on the
131:33 - button so let's say okay
131:36 - and the third argument is object and we
131:39 - can set the duration of the of this uh
131:42 - pop-up of the stack bar so after this
131:44 - amount of milliseconds it's gonna close
131:48 - so let's set it to 3000 which means
131:50 - three seconds it's gonna it's gonna
131:52 - stand there for three seconds okay
131:55 - and now let's just uh console.log
131:59 - uh this Dot card dot value okay so that
132:04 - we can see in the log what we're
132:06 - updating
132:07 - and here inside of the home component we
132:11 - can inject the service that we just
132:12 - created
132:13 - okay so go to
132:17 - private
132:18 - card service
132:21 - and imported card service
132:24 - okay so it's important on the top from
132:27 - Source app services card.service
132:29 - and now we can use this service okay so
132:32 - here I'm going to add to cart we are
132:34 - actually receiving the value here
132:38 - from this event from App product box
132:41 - okay
132:43 - and
132:46 - this parameter is product
132:50 - in the type of this is product
132:54 - product interface that we created as
132:55 - well here it's imported on the top in
132:58 - the models product model
133:00 - now what we want to do is we want just
133:01 - to call this dot servicecardservice dot
133:04 - on add to cart and we want to pass an
133:07 - object okay so the product is different
133:10 - from the cards card item so we want to
133:13 - uh send different parameters
133:17 - or actual properties so the product is
133:20 - product
133:24 - product
133:25 - dot image
133:28 - the name
133:30 - is product dot title and this is the
133:33 - beauty of the typescript you'll get all
133:35 - the properties uh you know show it to
133:39 - you so you don't have to think about
133:40 - them the price is product
133:43 - dot price
133:46 - quantity
133:48 - quantity is going to be 1 because we are
133:50 - just setting one item and the ID is
133:52 - going to be product ID
133:55 - dot ID okay and if you're wondering why
133:59 - the naming Convention of this uh
134:02 - interfaces is like this is I'm I'm
134:04 - mapping uh the API that I'm going to be
134:07 - using and that we are going to be using
134:09 - in this tutorial uses these exact name
134:13 - fields so this is how I created this
134:15 - object so that they match the API data
134:18 - contracts so that's why that's the
134:19 - reason for it okay so now let's go and
134:23 - save this home component let's say the
134:26 - HTML file and let's try to add an item
134:29 - to the array so if I go and inspect we
134:32 - should see uh the value of the card
134:36 - okay let me clear the console and
134:38 - enlarge so you can see it
134:40 - if I click on
134:41 - one item has been added to the card and
134:44 - we can close okay or actually close this
134:46 - out to three seconds and we get log from
134:48 - the card service if I expand the items
134:50 - we can we can see that inside of the
134:51 - items array we get now one product and
134:55 - we get the all the information that we
134:56 - passed now let's test if we click again
134:58 - we should get still one item but it
135:01 - should increase the quantity
135:03 - to two Okay let's try that
135:06 - so let's click again one item added to
135:09 - the card okay and let's see we again get
135:12 - uh the same log from the card service
135:14 - and if we expand it
135:16 - we can see that the quantity has been
135:18 - increased to two so this works as
135:19 - expected
135:21 - okay the next thing which I wanted to do
135:23 - here is I want the actual card menu to
135:27 - be updated because as you can see we
135:28 - added two products but still it says
135:31 - here one and we want to make this
135:33 - Dynamic and to Loop through all of these
135:36 - items and to show the actual price here
135:38 - so let's do that
135:40 - so where we can handle it all of this
135:42 - using the cart components so let me
135:45 - close all these files
135:47 - and let's open up
135:49 - the header components in the app folder
135:53 - and let's open up the headers
135:55 - here and what we are going to have in
135:57 - this component is we're going to have
135:59 - cart which is going to be subscribed in
136:01 - the home component and passed in this
136:04 - header component so
136:07 - will help private
136:09 - underscore card this type of card and
136:12 - let's initialize the default values so
136:14 - it's going to have the items property
136:16 - which is going to be an empty array at
136:18 - the beginning
136:20 - and make sure to import a card
136:24 - the another thing that that we we need
136:26 - is the items quantity
136:30 - as you can see right now we are
136:32 - displaying this static one value but we
136:35 - want to update that
136:36 - based on the number of items and the
136:38 - quantity of those items in the in the
136:42 - in the card itself
136:44 - engineering is not going to be used in
136:47 - our in this component so we can actually
136:49 - remove it
136:50 - if you want to use a little bit of
136:52 - cleanup and here we want to receive the
136:56 - actual card so we will have an input
137:00 - let's initialize it
137:02 - so make sure to import the input
137:05 - and we will create a getter and Setter
137:07 - that's why I'm using the underscore the
137:09 - card because this is the naming
137:11 - convention that usually programmers do
137:13 - when you have underscore card it means
137:14 - that this is the private field okay so
137:17 - we will get set here together so get our
137:21 - card which is type of card
137:24 - and we'll just return this
137:27 - uh underscore card here so this is the
137:30 - getter and now let's set the setter so
137:33 - to set card
137:35 - fill the receiver cartridge type of card
137:39 - and here we will set this
137:42 - card equals to the card
137:44 - and also every time that card changes we
137:47 - want to update this item quantity
137:49 - if we don't have a field for iOS
137:51 - quantity so we need to actually create
137:53 - this logic so what we can do is we can
137:56 - you can use this item quantity and we
137:58 - can Loop 3D card items
138:01 - colored items and what we can do is
138:04 - first we get the object with different
138:06 - fields but we only need the quantity
138:08 - here so so what we need to do we need to
138:11 - add that we need to map our item
138:14 - and only get the array with with the
138:17 - quantities so item dot quantity
138:21 - so what we are doing here is basically
138:23 - using discard items array and instead of
138:27 - the objects we are transforming that you
138:29 - only have the quantity and then we can
138:31 - use that quantity to add up and get the
138:34 - final items quantity so we can use
138:37 - reduce
138:38 - to do so and again reduce uses the
138:42 - previous and the current values as
138:45 - argument
138:47 - and you need to set the initial value
138:49 - which is zero in this case and all we do
138:52 - is we use and add the previous value
138:55 - with the current value
138:57 - and we get the final quantity so again
139:00 - views the items array which is basically
139:02 - a array of color item objects let me
139:05 - transform that into array of only
139:08 - quantities and then we just add them up
139:11 - right and that's how we update the items
139:13 - quantity okay
139:15 - and now what we can do is we can go to
139:18 - our HTML file and we can update
139:22 - let me see
139:25 - where is our
139:27 - okay so here we have actually one items
139:31 - and we can update this value to be the
139:34 - quantity items
139:37 - just copy the property name and it's
139:39 - quantity
139:44 - like so and for the Mad badge here
139:50 - we can also add this value so it's
139:53 - Dynamic okay so at the beginning is
139:55 - going to be
139:56 - always zero and we want to check
140:00 - if it's zero we don't want to display it
140:02 - so set the map
140:04 - that you can use this property for that
140:06 - math batch hidden
140:09 - equals if
140:12 - if there is no out of quantity so it
140:14 - should it should hide it
140:17 - okay let me just see
140:19 - okay I have a typo here
140:21 - I have uppercase i
140:23 - so let's say again and as you can see it
140:26 - removed this icon
140:28 - okay what we can do here is we can check
140:31 - if uh do we if we have items in the card
140:35 - then we want to display this this part
140:38 - if we don't uh we don't wanna so let's
140:41 - add NG if
140:43 - basically uh we want to say NG if
140:49 - if there is uh sorry card dot items dot
140:52 - went like so only if there is car items
140:55 - dot Lan we want to show this uh this
140:59 - this div and now let's Loop through
141:01 - record items and display this
141:03 - information
141:04 - so what we can do here
141:06 - you can just use ng4 Loop
141:11 - or equals let
141:13 - item of card. items
141:18 - in here instead of the keyboard
141:21 - you can use
141:23 - item Dot
141:25 - name
141:26 - and here we can use that in the quantity
141:29 - item Dot
141:31 - dot quantity
141:35 - like so
141:38 - and here instead of the this hard-coded
141:41 - price we want to use the price
141:44 - or actually just item dot price like so
141:48 - okay
141:50 - and for the total here
141:53 - we want to use the get total
141:56 - method that total method which we
141:59 - actually created already in the Pro in
142:01 - the card component
142:04 - so
142:06 - price
142:10 - card actually
142:13 - item.car.items here
142:16 - card dot items what we need to pass is
142:19 - we want to pass all the items to the get
142:21 - total method so that it can go Loop
142:24 - through all of them and calculate the
142:26 - the final value right
142:29 - and let's use this method let's create
142:33 - this method so inside of the header
142:38 - the total this one it will receive
142:41 - return actual number
142:44 - and it will get the
142:48 - items
142:52 - items away
142:56 - of items which is actually added this
143:00 - type of array of
143:03 - card item okay
143:07 - net card component card item okay like
143:10 - so
143:12 - and what we want to do here is showing
143:14 - the error because we are not returning
143:15 - anything what we can do is we don't want
143:18 - to duplicate the code that we have so we
143:19 - can go into Pages card and card
143:22 - component and get this method which is
143:25 - already created get total here
143:28 - you can copy it
143:30 - inside of our service and access this
143:33 - method from two places
143:35 - so here we can
143:37 - add this method
143:39 - and now inside of the card component
143:43 - you can call this
143:45 - method so let's add private underscore
143:48 - or actually card service and name it
143:52 - card
143:52 - and add the type of the card service
143:54 - make sure that the card service is
143:56 - imported on top here and now we can
143:59 - instead of
144:00 - and Define this method we can just call
144:03 - this uh start service method so return
144:08 - this Dot card service
144:10 - and return the method that we just
144:11 - created get total and plastic items
144:15 - here
144:16 - like so
144:17 - and we can create this exactly the same
144:19 - method
144:22 - in the
144:23 - okay let's save this
144:25 - exactly the same method here in the
144:27 - header and it will receive in return
144:31 - uh the the total amount
144:35 - okay so what it's reporting is that we
144:37 - haven't imported the card service so
144:40 - let's do that private cart service right
144:44 - private means that we are going to only
144:46 - going to use this inside of our class
144:48 - component we're not going to use it
144:50 - inside of the HTML so if you want to use
144:52 - your services inside of the HTML you
144:54 - would avoid this private keyword
144:57 - okay card service and let's add the
145:01 - definition of the cart service and it
145:04 - and make sure again it's imported on the
145:07 - very top here
145:08 - let's save this and let's save this and
145:12 - the last thing that that I want to add
145:14 - here and since we are on the shopping
145:16 - cart let's add a method for removing or
145:19 - actually clearing the shopping cart okay
145:22 - so what I want to do is I want to add
145:25 - a new method
145:28 - here on your move shopping cart
145:31 - so when you're on click event
145:35 - let's add uh on clear card this method
145:40 - is not going to receive any argument
145:43 - because
145:44 - you just want to empty the card animate
145:47 - on clear card
145:49 - okay so and we want to let me say this
145:52 - and I want to create a service inside of
145:54 - the card
145:55 - so that actually it can be used on
145:57 - multiple places okay let's go to the
146:00 - card service
146:01 - I can remove this log that we had before
146:06 - and here let's create this method here
146:09 - this method is not going to return
146:11 - anything it's not receiving any
146:13 - arguments
146:14 - so the only thing that we are doing here
146:17 - is here is we are emitting the empty
146:20 - resetted value for our cartilage so we
146:22 - will just call the next with items array
146:25 - empty
146:27 - okay like so and we can display this
146:30 - information to the user this style snack
146:32 - bar dot open
146:36 - card is clear
146:40 - and again let's add okay text for a
146:44 - button and let's set the duration
146:48 - duration to 3000 milliseconds or three
146:51 - seconds if it's easier for you now let's
146:54 - just call this method inside of our add
146:56 - a component here
146:59 - please Dot card service
147:02 - dot clear card okay
147:05 - like so
147:08 - and now we have completed everything
147:10 - except the fact that we are passing this
147:12 - card object so we need to subscribe to
147:15 - our card service for this uh actually
147:18 - for this Behavior subject and we want to
147:20 - update our menu
147:22 - as you can see right now this is empty
147:24 - but if we add something to our cart we
147:27 - know that it gets added because we
147:28 - logged it and tested before but if we
147:31 - open up our card it's not getting any
147:32 - values so it's because we are not
147:35 - sending this card object
147:37 - uh to this to this component so where we
147:40 - need to do that is close this header
147:41 - component and open up the component
147:44 - where this scatter component is placed
147:46 - and that's inside of the our root
147:49 - component
147:50 - so that's inside of the let's just
147:54 - in the app component here
147:56 - okay we have here app header
147:59 - you can remove this title we are not
148:01 - using it and we can create new cart
148:04 - property in the name and the type of
148:07 - this card property is going to be card
148:09 - and let's add the default values like we
148:12 - use yeah but like we usually do so the
148:15 - items array
148:16 - like so and it's empty array now we want
148:19 - to implement the NG on init
148:22 - life cycle hook
148:25 - on on in it and make sure that it's
148:29 - imported from the angular core
148:31 - now let's implement it so here energy on
148:34 - connect
148:34 - [Music]
148:36 - this basically method runs when the when
148:38 - the components are starts initialization
148:42 - okay and we want to include our card
148:45 - service in the Constructor so
148:48 - let's define the private cart
148:51 - service
148:52 - this type of card service
148:55 - here and again it's being imported on
148:57 - the top
148:58 - and now when the component is
149:00 - initializing we want to call this Dot
149:02 - card service
149:04 - and we want to subscribe to our cart
149:06 - property
149:07 - so subscribe there
149:10 - and it will receive back a card once it
149:13 - gets updated
149:15 - and all we want to do is we want to
149:17 - update our card property here this card
149:20 - is equal to cart
149:23 - okay
149:24 - and now what we can do here is we can
149:26 - use this card and pass that to our
149:29 - header component
149:30 - and that's exactly here
149:33 - so cart is equal to
149:36 - uh card let me just created
149:38 - okay
149:40 - and let's test this out so now we should
149:43 - get this card component updated as well
149:45 - so if I click
149:48 - you get here notification that actually
149:50 - we get one item added there and if we
149:52 - open up we can see that we have one
149:54 - items and it's basically sneakers
149:57 - quantity one and this the price and this
149:59 - is the total price let's try to increase
150:01 - the quantity
150:03 - so we have added another item we get the
150:05 - quantity to two and we actually see that
150:07 - we added a quantity two so let's see if
150:11 - we add additional product
150:12 - so let's say or actually I think this is
150:15 - enough for just testing purposes later
150:17 - we will try with the actual data but for
150:19 - now it's it's it's okay so the next
150:21 - thing that I want to apply is once
150:24 - somebody uh
150:25 - ask a product to the card he wants to go
150:28 - to view the card and here we want to
150:29 - update this card page be the cart as
150:32 - well so we need to subscribe to the card
150:34 - from the card uh page component as well
150:36 - and to Loop and display all this
150:38 - information there as well so let's do
150:40 - that so in order to do that let's close
150:43 - the app component and let's open the
150:46 - Pages folder and open up the cart
150:48 - component okay
150:51 - so here we want to subscribe to our new
150:54 - created cart item
150:57 - so let's just call this Dot card service
151:00 - Dot
151:02 - cart dot subscribe
151:06 - here we get back
151:08 - new card
151:10 - which is type of card okay
151:12 - and all we want to do here is we want to
151:15 - update our card with this new one
151:19 - underscore card okay like so and let's
151:22 - set the data source
151:24 - here two card items
151:28 - okay
151:30 - [Music]
151:31 - let's refresh
151:34 - your card is empty you're not saving
151:36 - this into local storage this could be a
151:38 - fun exercise for you guys but for this
151:40 - tutorial I'm not going to handle this in
151:42 - the local storage so every time that we
151:44 - actually refresh it's going to lose the
151:46 - state you can fix this with local
151:48 - storage and sell save all the
151:50 - information there
151:51 - so let's add a couple of uh items to the
151:55 - card and now let's view the card and as
151:57 - you can see we got two uh items in the
152:00 - in the card and it's actually displaying
152:02 - now this information so the next thing
152:04 - which I wanted to implement is let's
152:07 - implement this clear all so that we can
152:09 - actually clear this card so let's add
152:12 - this method
152:15 - so on clear card
152:21 - it's not returning anything because we
152:22 - just want to clear a card and here we
152:25 - will just call this Dot card service
152:28 - dot clear card we already Define this
152:30 - method
152:31 - okay and now we want to
152:34 - call this method
152:38 - this method on clear card once you click
152:42 - on the clear all so let's find this
152:45 - clear all button so it's under the
152:47 - actions
152:48 - here
152:51 - and let me grab this so
152:53 - you can see
152:55 - view word wrap so you can see everything
152:58 - and here on the button let's add clear
153:01 - all let's add a click
153:03 - click is equal to one clear card
153:08 - now let's try again so start shopping
153:10 - let's add one item
153:13 - let's view a card click clear all and
153:15 - card is clear and we get the message
153:17 - okay
153:19 - start shopping so what we want to do
153:22 - next is
153:23 - let's add so if I add some products here
153:27 - new card so let's add this clear so we
153:31 - want to remove only this rope so maybe
153:32 - we have a couple of items maybe we have
153:34 - like three or four products in the card
153:36 - and we want to remove the specific one
153:38 - so we don't want to clear entire uh card
153:41 - so let's add that method so
153:46 - let me just see where that method is so
153:48 - it's on this here on this element
153:51 - okay
153:54 - and let's add a click event
153:56 - here
153:58 - click event
153:59 - and the name of this event is going to
154:02 - be on remove
154:06 - unremove
154:08 - from card make sure it's camel kids
154:12 - okay copy that
154:14 - let's head over to the card component
154:17 - and here let's create a new method
154:20 - and it's going to be called
154:22 - on your mobile phone card
154:24 - okay and actually we need to pass an
154:27 - element here
154:29 - because we want to remove only one
154:31 - element so only move from cart and let's
154:33 - pass the supplement
154:35 - okay
154:37 - any side of the only move from cart is
154:40 - not going to return anything so return
154:42 - type is void but it's going to receive
154:45 - an item
154:46 - which is cart item okay
154:50 - and we will gonna create this method
154:52 - inside of this service so this Dot card
154:54 - service
154:55 - [Music]
154:56 - and we'll name it remove from cart
155:00 - you from cards like so
155:04 - and we'll pass an item here
155:06 - now let's define this method the card
155:09 - service
155:10 - open up the card service
155:12 - here
155:14 - and let's add this new
155:17 - method it's not
155:19 - it's not going to return anything it's
155:21 - just going to update the cart object and
155:25 - emit that
155:26 - so what we are going to do here we're
155:29 - going to receive item
155:33 - this type of card item
155:37 - let me show you the part item like so
155:40 - and we want to Loop through the cards uh
155:43 - elements so this is the card
155:46 - dot value dot items and we want to
155:49 - filter there are multiple ways in order
155:51 - to remove an item from the array but we
155:54 - can use filter for this one you can
155:56 - choose your own way so basically we get
155:58 - the item inside of the loop and you just
156:03 - check if the item dot ID
156:05 - is not equal to item dot ID so basically
156:09 - all the elements all the items in the
156:11 - array that are they don't have the ID
156:14 - from this item are going to pass this so
156:17 - we are only removing one item from the
156:19 - array and we want to store this to new
156:22 - constant and name it filter filter
156:26 - items like so
156:28 - okay and all you want to do now next is
156:31 - we want to update this Dot card dot next
156:37 - update the items
156:39 - complete filtered items
156:42 - and we want to show corresponding
156:44 - message to the user did these dot
156:46 - underscore snackbar dot open
156:50 - and the message will be one item
156:53 - renewed from car
156:56 - Dot and let's add control
156:59 - text okay and let's add duration
157:03 - to 300 milliseconds or three seconds
157:06 - again
157:07 - okay
157:09 - okay let's save this all this stuff
157:13 - and we can try this now so start
157:16 - shopping
157:18 - and let's add a couple of items into
157:21 - into the card you can view card and we
157:23 - remove actually this is not going to be
157:25 - tested properly uh because we only have
157:28 - one item in the card but once we are
157:30 - added the API you can see that we are
157:32 - only removing the row and it at the end
157:35 - as you can see it works as expected one
157:37 - item has been removed from the card
157:39 - okay the next thing that I want to
157:41 - implement let me just add one item again
157:44 - and so
157:46 - what I want to add is basically I want
157:47 - to add this quantity feature so we want
157:51 - to be able to update the quantity inside
157:53 - of our cart page
157:55 - so let's create it so let's first uh add
157:59 - the addition so this is going to be
158:00 - easier
158:02 - so we want to find this method for the
158:04 - quantity
158:06 - here a quantity and this is the button
158:09 - for removal and we want the button for
158:12 - addition okay so let's add a new
158:15 - event click
158:21 - click and on click we want to add new
158:24 - method which is called on ADD who wanted
158:27 - to
158:29 - be okay and it will pass the element as
158:32 - argument
158:33 - so it's this element okay
158:37 - and let's add
158:39 - this okay
158:43 - sorry my mouse is jumping around let me
158:46 - just see on ADD remove from card and
158:51 - foreign
158:52 - quantity here let me copy it
158:55 - and let's add this method here
159:00 - when you have the quantity so this
159:02 - method is again is not returning
159:05 - anything
159:07 - but it's accepting the item
159:11 - which is a type of cart item
159:15 - and this method has already been created
159:17 - so we will just call this the service
159:19 - card service dot add to cart and we'll
159:23 - just pass an item and it will go to this
159:26 - card service and this add to cart method
159:28 - and you'll check if this item is in the
159:30 - card
159:31 - if it is it will increase the quantity
159:33 - and since it's already in the card it
159:35 - should increase the quantity right away
159:37 - so let's start start shopping
159:40 - add item to the card okay now let's go
159:43 - and view the card and let's try
159:46 - and yes the quantity is getting updated
159:48 - as you can see
159:50 - and the total uh price is getting
159:53 - updated as well the total and here the
159:56 - total
159:58 - okay the next thing that you want to add
159:59 - is to remove the quantity which is not
160:01 - working
160:02 - but let's add that so let's go to the on
160:05 - ad quantity and let's add new event
160:07 - let's copy this
160:09 - here let's add new click event here and
160:14 - for this one
160:16 - let's call it on remove quantity
160:20 - one remote quantity okay
160:22 - like so let's copy it
160:25 - in here let's add this method and remove
160:27 - quantity is going to be similar
160:31 - uh like the previous one so it's going
160:33 - to have items
160:35 - what are actually the item that is
160:37 - called Adam
160:38 - his argument and it's not going to
160:40 - return anything okay and we are going to
160:42 - create new method because we don't have
160:44 - this method in the cart yet so but let's
160:46 - call it this Dot card service
160:49 - dot on or actually just call it remove
160:53 - one DT okay and pass the item
160:58 - now let's copy this
161:00 - method definition and let's create new
161:03 - one
161:04 - okay so let's
161:06 - here in the card service let's add new
161:09 - method here and this method is going to
161:12 - receive new items so just add item this
161:16 - card item
161:18 - and the return type is going to be void
161:21 - because we are not going to return
161:22 - anything
161:23 - okay
161:26 - now let's
161:27 - what we want to do here is we want to
161:29 - Loop through the array of the item same
161:32 - as we did here on the on the on the add
161:36 - to items but we want to Mark what is the
161:39 - quantity that we want to remove so
161:42 - face Dot card Dot
161:45 - value dot items and just map
161:50 - we access the item inside of the array
161:53 - here
161:54 - and we want to check
161:57 - okay if
162:01 - this item
162:03 - the ID is equal to the past item.ie is
162:06 - it if it's equal to this one so this is
162:09 - the item if you want to remove the
162:10 - quantity so
162:12 - here we want to remove item dot quantity
162:17 - let's use the short syntax minus minus
162:19 - so here we are removing the quantity but
162:22 - the one thing there is one Edge case we
162:23 - want to check if the quantity is zero so
162:25 - it basically means that uh this this
162:29 - item should be removed from the card
162:31 - right so if if we hit like zero if if we
162:34 - are like on five we just hit minus minus
162:37 - and it's four and that's fine we're good
162:39 - to go but if you are like on one and we
162:41 - hit minus minus we hit the zero and it
162:43 - means that this product needs to be
162:44 - removed uh from the card so what we can
162:47 - do is again check here if item
162:50 - dot quantity
162:52 - is equal equal to equal to zero we can
162:55 - actually mark this item for removal so
162:57 - let's create another uh variable let
163:00 - item or removal
163:04 - and this is going to be part type of
163:06 - cards item or
163:09 - undefined
163:12 - okay
163:14 - so if if this is the if the quantity is
163:17 - zero item for removal is equal to item
163:23 - okay
163:25 - and then
163:27 - once we updated this we can just return
163:29 - the item
163:30 - mapped item
163:32 - return
163:33 - [Music]
163:34 - like so so here we are mapping the this
163:38 - array and basically we are updating the
163:40 - quantity property
163:42 - and once we map uh this array we want to
163:45 - store this inside of the variable so
163:47 - let's call it flat
163:50 - filtered items
163:52 - like so
163:54 - and now we want to check if
163:57 - we Mark any items for removal and we
164:00 - will call the method that we already
164:01 - created for removing the items from the
164:03 - card right so if there's item for
164:05 - removal called
164:07 - this Dot
164:09 - uh remove from cart and pass in filtered
164:13 - items
164:16 - or actually yes I don't know actually we
164:18 - need to pass the item for removal
164:21 - so it's this one okay
164:24 - because we only want to pass one one
164:27 - argument
164:28 - one property
164:30 - and we want to update the filtered items
164:34 - okay
164:36 - with the results that we have
164:39 - and filtered items is returning in an
164:41 - error what is not accessible to cart
164:43 - item
164:47 - okay let's see so what is not assignable
164:50 - to
164:51 - filter items so what we can do here is
164:54 - we can set the type
164:57 - but actually
164:58 - we are not returning anything from the
165:00 - car so that's why it's uh showing us the
165:03 - error so we need to return something
165:05 - from the card here
165:07 - okay another thing that I want to do
165:09 - here is not only that I want to remove
165:11 - from the card but I also don't want to
165:13 - duplicate the notifications so as you
165:16 - can see if we add the notifications here
165:20 - this dot discover stack bar
165:24 - dot open
165:31 - one item removed
165:34 - card
165:36 - and let's click
165:38 - let's add the OK and the duration
165:41 - inside of the configuration object
165:44 - duration to 300 milliseconds you can see
165:48 - here and we also want to obviously this
165:51 - Dot
165:52 - a DOT card the teammate the new value
165:54 - right these dot next and we want to emit
165:58 - the items filtered items okay
166:02 - but the problem with this is you're
166:03 - calling this remove card and it's also
166:07 - notifying the user
166:09 - so what we can do is you can send a flag
166:11 - so
166:13 - uh
166:14 - like so at a flag do we want to notify
166:17 - the users or not and add here one
166:20 - property so notify
166:24 - or even update
166:27 - update
166:29 - which is equal by defaulty true
166:32 - and here we can check
166:34 - if
166:38 - [Music]
166:40 - if we want to update
166:43 - then
166:46 - I'll update the card and send the
166:49 - notification otherwise you will get two
166:51 - notifications and we also need to re uh
166:53 - to return something so that we actually
166:55 - get this value right
166:57 - okay so we just need to return from the
166:59 - remove from card these filtered items
167:03 - okay
167:07 - so return
167:09 - filtered items so it means that we are
167:12 - returning
167:15 - array
167:17 - off
167:19 - cards item
167:21 - like so and now it should work
167:25 - if we save it
167:27 - let's try now
167:30 - so start shopping
167:32 - let's add a couple of items in the card
167:35 - actually seven of them now if we go
167:37 - let's try minus we're reducing the
167:40 - quantity
167:41 - in plus we are increasing the quantity
167:43 - and let's see what happens if we hit the
167:46 - zero
167:48 - boom it empties the shopping cart and
167:51 - with this we have covered most of the
167:53 - use cases that we wanted for our
167:55 - shopping cart and the last piece of our
167:59 - application is left to be done is
168:00 - basically we want to implement the API
168:03 - so let's do that next
168:04 - so let me close all these files and we
168:06 - need to create another service and this
168:08 - service is going to handle the API
168:10 - request to this fixed or apis so in case
168:13 - you missed it you're going to be using
168:16 - pick store API and the links to this API
168:18 - is going to be in the description
168:19 - obviously and I highly advise you to go
168:23 - into reader docs there are much much
168:24 - more properties and more endpoints that
168:27 - we are going to be using in this
168:28 - tutorial but just in case you want to
168:31 - check and maybe you want to build your
168:32 - own version of the uh store you can go
168:35 - and check it out it's uh the good thing
168:37 - about this uh fixer API it's really easy
168:40 - to access all the data that we need and
168:43 - the Simplicity is what you want
168:45 - especially when you're just learning all
168:46 - these
168:47 - topics okay
168:50 - now let's open up the terminal and we
168:53 - are in the in the services folder and
168:55 - what we can do is we can go and type in
168:57 - NG generate service and name it as store
169:01 - this is going to be uh actual
169:06 - store service yes so click enter and it
169:10 - will take a couple of seconds
169:12 - to make it and once again we want to go
169:15 - and import this service inside of the
169:18 - providers array into the app module so
169:22 - here store type in store service and
169:25 - make sure it's imported on the top here
169:28 - now let's close it
169:31 - open up the storage service the service
169:34 - that we just created here okay
169:36 - so
169:37 - here what we want to do is we want to
169:39 - import the HTTP client first so this is
169:41 - the client that we're going to use in
169:43 - order to fetch the data so add the
169:46 - private HTTP client and the type is HTTP
169:51 - client here and it's getting imported on
169:54 - the top from the angular common http
169:57 - and let's add the base URL for our API
170:00 - request so add a constant
170:03 - store underscore pass base underscore
170:08 - URL and the URL is HTTP s which is the
170:13 - secure protocol or four slash forward
170:15 - slash
170:16 - fake store
170:19 - api.com okay
170:23 - like so and we want to create a get all
170:26 - products
170:28 - method
170:30 - and this method is going to receive two
170:33 - arguments the first one is the limit
170:36 - and set the default limit to 12. and the
170:39 - second argument is going to be sort
170:42 - which is going to be the default sorting
170:44 - which is going to be this which stands
170:46 - for uh descending right
170:49 - the return type of this uh this method
170:52 - is going to be observable
170:54 - and make sure to import it from the rxjs
170:57 - and this observable is going to return
170:59 - the type of product array so array
171:04 - product
171:05 - and again uh make sure to import this
171:09 - product from on the very top it's
171:12 - showing there because we are not
171:13 - returning anything at the moment so but
171:15 - we're gonna fix that just in a second so
171:17 - return
171:18 - this dot HTTP client
171:22 - and we're going to use get method here
171:24 - and this get method is going to return
171:26 - array of product
171:29 - here
171:33 - oops not that just array of product here
171:37 - let's copy that
171:39 - okay let me just type it in
171:43 - array of product okay like so and then
171:48 - inside of the parentheses let's add the
171:51 - first argument is the URL of of the API
171:54 - so let's use the page URL
171:59 - store base URL and then you just use the
172:03 - four slash products
172:05 - okay with this you will get all the uh
172:08 - the products but we want to apply the
172:10 - limit and we want to apply the sort as
172:11 - well so what we can do here we can add
172:14 - now question mark sort is equal to and
172:17 - let's
172:18 - add the sword
172:21 - and we can also add
172:24 - a limit so limit
172:27 - is equal to
172:29 - limit
172:30 - okay
172:32 - and with this we can get our products
172:35 - and the place where we are going to call
172:37 - this is actually in the home page
172:39 - component so open up
172:43 - we just shrimp down this middle and open
172:45 - up the home page component and here
172:47 - inside of the NG on in it we're going to
172:50 - call this com uh call this method but
172:52 - first let's create a
172:54 - the variable where we're going to store
172:56 - this so we're going to store this inside
172:58 - of the products
172:59 - a variable and it's going to be the
173:01 - property type array of products
173:05 - okay
173:07 - and at the beginning is going to be
173:08 - undefined so that's why you need to pass
173:10 - the undefined type as well here
173:14 - uh we need to sort
173:19 - variable as well in the default value is
173:22 - just descending and the count
173:25 - is basically the number of items that we
173:28 - want to display right so let's set it to
173:31 - 12 which is default one okay
173:34 - okay and we want to have an
173:37 - production products
173:39 - uh subscription
173:43 - products subscription uh
173:47 - variable this variable is going to
173:49 - contain our subscription and once we
173:51 - destroy the component we want to remove
173:53 - anything because we don't have we don't
173:55 - want to have any memory leaks I will
173:57 - show you how to do that so the type of
173:59 - this is going to be subscription
174:01 - you can import it from rxjs here
174:06 - like so and at the beginning
174:09 - it's going to be undefined
174:12 - okay
174:13 - now we want to import our service inside
174:15 - of the Constructor so here let's add a
174:18 - comma private
174:20 - store service
174:22 - and type is store service okay and again
174:26 - make sure to to import that from our
174:28 - services folder here on top
174:31 - and now inside of the engine in it we
174:33 - can call this
174:36 - foreign
174:41 - so that we can call a couple of times
174:43 - when you're changing the filters the and
174:46 - the other uh other sorting and showing
174:49 - the columns menu uh functions so let's
174:53 - create this get products
174:56 - method and this method is not returning
174:58 - anything or receiving so it's just going
175:01 - to update the products here
175:05 - so uh this dot let's call it this dot
175:09 - store
175:10 - service
175:12 - dot get all products
175:15 - and what we want to pass in is we want
175:17 - to pass this dot uh count
175:21 - and twist.sort
175:26 - okay like so
175:28 - and then we want to subscribe to this
175:31 - method
175:33 - and once we receive the products
175:37 - products
175:39 - we want to update our products
175:41 - property
175:44 - these dot products equals to underscore
175:46 - products
175:49 - like so
175:51 - and don't forget the products
175:53 - subscription
175:55 - so what we want to do is we want to
175:57 - store this subscription to this variable
175:59 - we use this.subscription
176:01 - product subscription and equal to this
176:03 - and now what we want to do is we want to
176:05 - implement NG and destroy
176:09 - on Destroy and make sure to import the
176:12 - on Destroy here on top it's reporting
176:14 - the error because we are not
176:15 - implementing NG on Destroy and we are
176:17 - set at VR so what you want to do here is
176:20 - mg on Destroy and it's not returning
176:23 - anything so we got this nice Auto
176:25 - completion and we just want to check if
176:27 - this Dot uh products subscription exists
176:32 - so if we created a subscription we want
176:34 - to unsubscribe is the product
176:37 - subscription Dot unsubscribe otherwise
176:41 - if you navigate to home page and card
176:43 - page for a couple of times
176:45 - you may end up creating a couple of
176:47 - subscriptions and uh you will result in
176:50 - memory leaks and that's something that
176:53 - you don't want to have on your
176:54 - application especially as your
176:55 - application grows you may start losing
176:58 - uh keep start losing the track of it so
177:01 - what we want to do now is we want to use
177:03 - the app products box here basically and
177:07 - we want to Loop to the array
177:10 - of the products that we just attached
177:12 - here actually we may end up with an
177:15 - error because I don't see my layout so
177:16 - let me see what we actually got here
177:22 - oh actually it's reporting that we
177:23 - haven't injected HTTP client inside of
177:26 - our HTTP uh inside of our app module so
177:29 - what we what we need to do uh basically
177:32 - we are using inside of our store service
177:34 - we're using this hdb client but it's not
177:37 - imported inside of our
177:39 - application so what we need to do is we
177:42 - need to go to the import survey
177:44 - an imported http
177:47 - HTTP client module here and now we can
177:51 - use the HTTP requests
177:53 - close that
177:54 - and are up now our application is back
177:57 - you can go to the home component that
178:00 - because the store component and let's
178:02 - use
178:03 - these products
178:05 - array and now let's go to the HTML file
178:09 - and let's
178:10 - make this Dynamic product box so on the
178:13 - matte grid tile let's implement the ng4
178:18 - and G4 and let's product rate product
178:21 - variable of products and what we want to
178:24 - do is we want to pass this product to
178:26 - our air product
178:28 - component so here
178:31 - product
178:32 - is equal to product
178:35 - [Music]
178:36 - now let's go to the app product box
178:39 - which is in the components folder
178:41 - product box here
178:43 - and we want to add an input for this
178:46 - product so here we are hardcoding this
178:49 - but we want to remove it
178:52 - and we want to create this as an input
178:55 - okay now you can save this and save this
178:58 - and we should get our products here so
179:01 - let's see if this works
179:04 - okay I see uh this works because we are
179:08 - getting some more products that we
179:09 - created but actually the only thing
179:11 - which is missing is on our product box
179:13 - we're using the static data that's a
179:15 - problem
179:16 - so what we need to do is instead of
179:19 - creating this uh static data we can
179:22 - actually use the product that we just
179:24 - got so let's do that
179:26 - here in the source
179:28 - we can use okay
179:31 - you can use product
179:33 - dot image
179:36 - for the H5 we can use this is the
179:40 - category so call it product Dot
179:45 - category
179:50 - okay let's save that up
179:53 - okay so product image it's not possible
179:55 - because our object is undefined so what
179:57 - we want to do here is we want to check
179:58 - if we do get the product or not
180:00 - otherwise
180:02 - or we can even check uh we can check on
180:04 - two places so one one of the places
180:06 - where you can track you can check here
180:08 - so basically you can do NG if product so
180:11 - this way there's not going to be a
180:13 - chance that this product is undefined as
180:15 - as you can see here we're getting the
180:17 - images and we're getting the categories
180:19 - the sneakers is uh snack bar so it's a
180:23 - chocolate snack bar it's not the shoes
180:24 - so this is wrong naming everything is
180:28 - wrong so let's fix that up
180:31 - how we can do this is we can access the
180:34 - property of product
180:36 - dot name this is the name of the product
180:39 - let's change the view to the word wrap
180:42 - so you can see everything for the
180:44 - description
180:45 - we can add
180:47 - okay let me just see product name so
180:52 - property name doesn't exist on type
180:54 - product okay this is a good thing of the
180:57 - typescript or let's see what is the name
180:58 - of the actual product uh the name is the
181:01 - title actually okay so product dot title
181:05 - then for the description
181:08 - as you can see now it works and you can
181:11 - see now that we have that front truncate
181:14 - uh class it's working so we have this
181:17 - very large title and so it's cutting
181:19 - this off and once we hover over it shows
181:21 - the entire title
181:23 - okay
181:24 - so what is left to be done so once we
181:27 - switch over on on one uh one product per
181:31 - row layout we get this description which
181:33 - is static right now so let's fix this
181:38 - okay
181:39 - let me just
181:41 - increase the
181:43 - this layout okay like so
181:46 - and so for the description we want to
181:49 - use the
181:50 - product dot description
181:55 - here and close the brackets and for the
181:57 - price we want to use the product dot
181:59 - price
182:00 - here
182:01 - product dot price
182:04 - like so
182:05 - and let's test now
182:07 - how it works okay as you can see we are
182:10 - getting these prices different now
182:13 - so we're getting these titles we're
182:14 - getting this uh these categories and if
182:18 - we and if we change the layout mode we
182:21 - get a description as well here
182:23 - obviously the format of the images is
182:25 - not exactly the same in every product so
182:27 - this is why we get these inconsistencies
182:30 - but I don't mind that to be honest okay
182:33 - so this is the the different layout
182:34 - Inlet now let's test if we add different
182:36 - products to our card item so you can see
182:39 - we add a couple of items we added four
182:41 - of them and you can see we get the the
182:44 - description we get a title we get the
182:45 - the total amount that we are uh with we
182:50 - are supposed to pay so if you go and
182:52 - click on view card you can actually see
182:54 - that you get all this product updated
182:55 - into the card and here we can update the
182:57 - quantity
182:58 - like like I said uh and we can remove
183:01 - the quantity here and we can remove the
183:03 - one item per row and we can also clear
183:05 - the card let's test that out here
183:08 - and we can now return back
183:11 - so uh the thing which I wanted to
183:13 - implement next is actually let me just
183:16 - show you
183:17 - so the thing that we want to implement
183:18 - is once we click on the sort description
183:21 - or sort by descending or ascending or
183:25 - when we click on show 12 or 24 or 36 we
183:29 - want to fetch again all these products
183:31 - and send different parameters
183:34 - so what we need to do is we need to go
183:36 - to
183:37 - the home component here
183:40 - and inside of the home component we want
183:43 - to catch this sort and account being
183:45 - changed so the actual component that
183:49 - holds this counted sort is the actual
183:52 - app products header so here in the app
183:54 - products header you're changing these
183:56 - values and we need to emit these values
183:58 - so let's open this file
184:02 - in here
184:03 - basically we have this sword and I'm so
184:05 - count we want to create this as output
184:09 - so let's create two outputs and emit
184:11 - these values so we can just
184:13 - copy paste this a couple of times
184:16 - and let's rename these two items count
184:20 - change
184:23 - and the last one is going to be sort
184:26 - of change and it's going to emit this
184:28 - string type
184:30 - okay
184:31 - so when you change when we change the
184:33 - sort we want to emit the new value so
184:36 - this Dot uh sort change dot emit
184:44 - and we want to emit the new value which
184:46 - is basically new sort
184:50 - okay
184:52 - and on the uh items count change
184:56 - or
184:57 - yes
185:01 - we want to emit new value so this dot
185:03 - items count change
185:05 - emit new values so account
185:09 - like so
185:12 - and don't forget to emit this field
185:15 - okay and now we can catch this item
185:17 - count count change and sort change
185:19 - inside of our home component so let's go
185:23 - to the home component and here let's
185:25 - change the view to word wrap
185:27 - okay and let's add two more events
185:34 - okay
185:35 - and let's copy paste the name of the
185:38 - event so the one the first one is items
185:40 - count change okay
185:44 - so this is the basically when you're
185:45 - changing this item count so 12 24 36
185:51 - so basically we need to set the limit to
185:53 - the request
185:55 - uh items count change and then we want
185:58 - to call the method
186:00 - on
186:01 - items
186:03 - account
186:04 - change
186:08 - event and let's create this method here
186:11 - inside of the home component
186:14 - and let's add it here at the bottom
186:17 - and item is called change this method is
186:19 - not going to return anything so it's
186:21 - going to be void
186:22 - but what is going to be it's going to
186:25 - receive
186:26 - a new description so description is
186:29 - going to be a type of string or actually
186:32 - not description sorry this is going to
186:34 - receive the count which is going to be a
186:37 - number
186:38 - and we want to update this Dot
186:42 - count is equal to count
186:46 - or we can rename this to new account so
186:48 - let's be done you have the overlap for
186:51 - the new account like so and we want to
186:56 - okay so it says that it's not assignable
186:59 - to string so what we can do is see here
187:01 - is we can
187:03 - change this to string okay
187:08 - so we can change this format from number
187:09 - to a string
187:11 - and then we can call again this Dot
187:14 - get products so what we are doing here
187:17 - is basically we are updating the con
187:19 - count variable and we are calling this
187:21 - get products
187:23 - a method which actually uses this dot
187:25 - count and this.sort on the second method
187:28 - we want to update the sort and again
187:30 - call this product so let's take this
187:34 - sort change
187:35 - okay
187:36 - home
187:38 - so this is new event Source change
187:40 - and we will create new method on sort
187:43 - change which will also send the Sorting
187:47 - new sorting value
187:50 - copy this save it and let's create this
187:54 - new one so
187:55 - on sort change
187:58 - and we will have new sort
188:01 - this type of string
188:03 - it doesn't return anything so the return
188:05 - type is void and we will update this Dot
188:09 - uh the name of the property is 200
188:12 - update you sort this dot sort
188:15 - is equal to new sort okay and then again
188:19 - we want to call this dot get all
188:21 - products because we want to
188:23 - I'll catch again
188:25 - and with this let's test it out and
188:28 - let's open the console so that we can
188:29 - see if uh we what is the the actual
188:33 - values from the network tab okay
188:37 - let's refresh the page
188:41 - okay and we get the first
188:43 - initial request which actually sends the
188:46 - sort is description a limit to 12. what
188:49 - if we set the limit to let's say 24
188:53 - refresh is the page
188:55 - it says the new request which is fix our
188:58 - API products sort is again description
189:00 - and the limit now is 24. what if we
189:03 - change the value to the ascending
189:06 - it refreshes the page again and sends
189:09 - another request and now the sort is
189:11 - ascending the limit is 24. so as you can
189:13 - see this is dynamic and these filters
189:15 - work as expected
189:18 - uh the next thing we should we want to
189:20 - do is we want to use these categories so
189:22 - as you can see this is starting now so
189:23 - we want to fetch all the categories uh
189:26 - that we have
189:27 - and we want to once we click on this
189:29 - category we want to display only the
189:31 - items and the products from that
189:33 - category so let's do that we need to
189:35 - open up
189:36 - the
189:39 - services and let's open up the store
189:41 - service
189:42 - okay so we need to get so we need to add
189:44 - another method
189:46 - here so the name of this method is
189:49 - yet all categories
189:53 - in this method
189:55 - doesn't return doesn't accept any
189:57 - parameters but it returns an observable
190:00 - observable
190:01 - and the type of this observable is array
190:04 - of strings array of strings okay
190:08 - like so so we want to return
190:11 - please dot HTTP client dot get
190:14 - and uh
190:16 - this get method it will return again
190:18 - array of strings
190:21 - okay
190:22 - like so and then inside of the
190:27 - get method we want to pass
190:29 - the base URL which is
190:32 - store
190:35 - base URL and then we want to add forward
190:38 - slash
190:39 - products
190:40 - four slash categories
190:43 - like so
190:45 - okay
190:47 - now we can close this store service and
190:49 - we want to go into inside of the
190:52 - uh home component and we have filters
190:55 - inside of these filters we want to
190:57 - include this store service here
190:59 - and as you can see
191:02 - as you can see we are hardcoding the
191:04 - categories here so we want to
191:06 - make this dynamic so include the private
191:09 - service store service
191:13 - store service and make sure again to
191:15 - import it on the top and here inside
191:17 - inside of the engine in it this dot
191:20 - store service dot get all categories
191:23 - call this method
191:25 - okay
191:28 - and then we want to just update these
191:30 - category so these categories
191:32 - actually needs to be
191:36 - undefined at the beginning so
191:38 - it's array of
191:40 - strings and or undefined
191:44 - like so and what we want to do here
191:47 - we are basically getting
191:50 - you need to subscribe
191:52 - here without subscribe
191:55 - and when we get view response back
191:59 - once back we just want to update the pro
192:02 - the categories array these dot
192:04 - categories equals to respond
192:07 - okay
192:08 - and also don't forget that we want to
192:11 - create category subscription variables
192:13 - so that we can unsubscribe once we leave
192:15 - the home page so let's name it
192:17 - categories
192:20 - categories subscription
192:23 - and this is type of subscription
192:27 - imported from rxjs and we want to assign
192:30 - this variable here
192:33 - categories subscription
192:36 - again
192:38 - let's Implement NG on Destroy
192:41 - on Destroy here
192:43 - and let's add it on the very bottom on
192:46 - this way
192:47 - and we just want to check if this
192:49 - subscription exists if
192:53 - this Dot
192:55 - category subscription
192:58 - exist
192:59 - if it's if it's not undefined and
193:02 - actually it's showing the error because
193:03 - it doesn't have initializer and that's
193:05 - why because at the beginning it's
193:07 - undefined so if it exists we want just
193:09 - to unsubscribe from it please dot
193:11 - category subscription Dot
193:14 - unsubscribe like so
193:17 - [Music]
193:18 - okay and basically
193:21 - this component should be working now as
193:23 - you can see we get all these values but
193:26 - now we need to catch this uh event
193:29 - emitter that we are emitting these
193:31 - categories inside of our home component
193:33 - and update let me just close
193:37 - this value and
193:39 - this files actually let me just see what
193:41 - is the type of the event
193:43 - so inside of the filters the event is
193:45 - show category so we want to when we
193:47 - click on the category here
193:49 - button click on the category we are
193:52 - basically emitting this value here
193:55 - and we want to Cache that inside of the
193:57 - home component so inside of the home
193:59 - component we have this show category
194:01 - actually we have already this this
194:03 - method created so this show category and
194:06 - we are updating this category so now
194:07 - what we want to do is we want to call
194:09 - this get products
194:11 - here this
194:16 - Target products like so but the only
194:19 - thing that we that we are missing inside
194:21 - of this get products
194:23 - is we are missing this category
194:25 - so this dot let me change the word wraps
194:30 - so this dot category so that we can
194:34 - actually apply this category to the
194:35 - actual request so
194:37 - now we need to need to change our get
194:40 - our products
194:42 - method here and we need to add
194:45 - additional
194:46 - property so let's add property which is
194:49 - called category and make it as optional
194:53 - that's why we add this question mark and
194:56 - the type of this is just string okay
195:00 - and now let's add here so so here
195:03 - actually after the products we want to
195:05 - add another
195:08 - expression so we want to check if there
195:10 - is a category string
195:13 - there's category string we want to add
195:16 - four stash got it
195:18 - category and just add this category
195:22 - otherwise we want to pass an empty
195:25 - string like so
195:27 - so basically what we're doing here just
195:31 - change the word wrap so what we're doing
195:33 - here is just we are just checking if
195:35 - there is category if it is we're adding
195:37 - the category namespace and the category
195:41 - itself otherwise we just return the
195:43 - string so it the API endpoint Remains
195:46 - the Same so let's test that out so if
195:49 - you click on the categories and let's
195:51 - say we click on the men's clothing
195:54 - and as you can see we only get these
195:56 - products for the main closing if you
195:57 - click on jewelry you get only the
195:59 - jewelry if you click on the electronics
196:01 - you only get the electronics and it's it
196:05 - works as a spec that and the last piece
196:07 - of the puzzle is to integrate the
196:09 - payment and the checkout and the actual
196:11 - ordering flow so like I said at the
196:13 - beginning of this video is that you need
196:15 - to go on shop.com and you just need to
196:18 - go and to create your account so just go
196:20 - to stripe.com
196:22 - and you need to sign up here
196:25 - so I already signed up and once you are
196:28 - signed up and signed in you can go to
196:29 - the dashboard
196:31 - and once you access the dashboard
196:33 - there's a section for the developers so
196:35 - here on the right top you can click on
196:37 - the developers and
196:40 - in the test mode you need to activate
196:41 - your account in order to get the real
196:45 - live data so here we have the API keys
196:47 - that we are going to be using inside of
196:49 - our application in order to integrate
196:51 - the stripe okay so let's start doing the
196:55 - implementation
196:57 - let me close all of this
196:59 - files and the first thing that we want
197:01 - to do is we want to install a stripe.js
197:04 - package that we are going to be using so
197:06 - make sure that you're inside of the root
197:08 - folder and then let's do npm install
197:12 - let me just shrink down this window npm
197:15 - install add stripe
197:18 - or slash stripe Dash JS and the version
197:22 - is going to be 1.35.0
197:27 - like so
197:29 - it'll take a couple of seconds to
197:31 - install
197:34 - okay
197:36 - so once again make sure that you're
197:38 - installing the correct version and the
197:39 - same version as I'm doing here
197:42 - and now we need to include the stripe as
197:44 - well inside of the index.html file so
197:48 - make sure to go to the basically source
197:51 - folder and Target the index.html file
197:54 - and we want to include this inside of
197:56 - the head so add
197:58 - a script
198:00 - like so and just add a source
198:03 - https
198:06 - four slash forward slash js.stripe
198:09 - .com and version three
198:13 - and this way we have included the stripe
198:17 - into our application
198:18 - okay
198:19 - I can close the index is index.html file
198:22 - let me open up the terminal now and let
198:24 - me just restart
198:26 - or server
198:29 - now we need to go to the checkout page
198:32 - so open up the pages card actually card
198:36 - page not the checkout page
198:38 - and here we have checkout button
198:41 - on the very bottom here proceed to the
198:43 - checkout so we want to create a method
198:46 - that will
198:47 - call this checkout so here on click
198:53 - call on checkout
198:56 - method so let's call this method
199:00 - here inside of the car component and
199:03 - let's add it on the very bottom what we
199:05 - can do
199:06 - is we will add this method on the card
199:09 - service itself so this method doesn't
199:12 - return anything so the type is going to
199:14 - be void
199:16 - and we need to include the hdb client
199:19 - here
199:20 - what we can do we can also extract this
199:23 - call to the to the service separatus a
199:26 - different service but we can include it
199:28 - into this one as well so
199:30 - let's call it
199:33 - private
199:35 - HD3 now we are just including the HTTP
199:38 - client HTTP client here and make sure
199:42 - again that it's imported you just
199:44 - enlarge it make sure that it's imported
199:46 - on top here
199:48 - and now inside of our on checkout what
199:51 - we're going to do is we want to call the
199:53 - stripe service and let me show you so we
199:57 - are first making the post request so
199:58 - this dot http
200:01 - http
200:03 - Dot HTTP client so we are targeting this
200:08 - service
200:10 - and make the post request
200:13 - and the post request that we are going
200:14 - to make is going to be the request to
200:16 - our local server server that is going to
200:19 - handle this post request and make
200:21 - request by itself on the stripe then it
200:25 - will return the session ID and using
200:27 - that session ID we can open up the
200:29 - checkout page so you will see
200:32 - uh the URL of this request is going to
200:34 - be HTTP it's going to be our local
200:36 - server so localhost and we're gonna open
200:40 - that up on the port
200:43 - 42
200:45 - 442 like so
200:47 - and
200:48 - slash
200:50 - checkout okay
200:53 - and inside of the object we want to
200:57 - uh to pass items
200:59 - so this
201:01 - Dot cards dot items and we can handle
201:05 - these items inside of the server and
201:07 - send that to the stripe okay and once we
201:11 - get the response back so once we uh
201:14 - receive something from the server we can
201:16 - subscribe to it and this is going to be
201:18 - async compression
201:20 - and the result uh
201:22 - we will put a type of any
201:26 - because we don't have any type
201:27 - definition here defined it's a little
201:29 - bit outside of the scope of this
201:31 - tutorial so first we need to load the
201:33 - stripes so let's stripe is equal await
201:36 - and this is why this is a async
201:38 - compression because we need to load the
201:39 - stripe here inside of this uh subscribe
201:42 - subscribe uh scope so we need to use the
201:47 - load stripe method from the package that
201:51 - we installed so make sure to import here
201:53 - import load Stripe from add stripe sap
201:56 - Dash JS so this is the method that we
201:59 - are using to load the stripe and inside
202:01 - of the parenthesis we need to pass the
202:04 - key that we have on our dashboard so
202:06 - once again go to describe.com enter the
202:09 - dashboard
202:12 - and go to your dashboard once you're
202:13 - logged in
202:19 - go to the developers Tab and API keys
202:22 - and the key that we need is this
202:25 - publishable okay and click to copy set
202:28 - copy it obviously you'll need to copy
202:31 - your own key
202:32 - it needs to be different than mine
202:34 - obviously and let me close this and once
202:38 - we load the stripe what we can do is we
202:40 - can use a swipe
202:42 - and we can call the method redirect to
202:46 - check out and how we do that is
202:49 - from the session itself on the server we
202:52 - will return uh session ID and we just
202:55 - need to pass the session ID and that's
202:57 - how we open the checkout so session ID
203:00 - is going to be result here that we
203:03 - respond back and we will just return an
203:04 - ID there
203:06 - like so
203:09 - okay
203:10 - and now let me save this checkout now in
203:12 - order this to work obviously we need to
203:14 - create a local server and run it on the
203:17 - port 4242 and create this post endpoint
203:21 - checkout
203:22 - so let's do that okay let me create a
203:25 - new folder inside of the inside of the
203:27 - root so just create new folder and name
203:31 - it server okay
203:33 - and let me initialize we need a new
203:36 - node.js application so let me just
203:40 - see where we are at we are in the root
203:42 - folder
203:44 - okay so CD into
203:46 - server here inside of the server folder
203:49 - we want to initialize new node
203:51 - applications so run npm in it and
203:54 - Dash why so we don't want any sub
203:56 - questions we just want to initialize the
203:59 - plane node.js application and here you
204:04 - need to install three things so we want
204:06 - to use express.js
204:08 - a framework for our node application we
204:11 - want to install the course because we
204:13 - are going to create some across origin
204:15 - resource requests and we want to install
204:18 - the stripe obviously so let's run npm
204:21 - install course
204:24 - a version is going to be
204:26 - 2.8.5
204:28 - the next one is Express and the version
204:31 - is going to be 4.18
204:34 - 0.1 and the last one is stripe and the
204:38 - version is
204:39 - 10
204:40 - .7.0
204:45 - okay and let me close this card
204:47 - components and let me open up our new
204:50 - server folder okay let's open let's open
204:53 - up the package.json file and and as you
204:55 - can see we have created this new project
204:57 - and installed our three dependencies
204:59 - here so now what we need to do is we
205:02 - need to create our our main file so
205:04 - let's name it server.js like so okay
205:10 - and now inside of this
205:12 - This Server let's create our application
205:14 - so first we need to include the
205:16 - libraries that we need the the good
205:19 - thing about this server is and strike is
205:21 - that they already built couple of pages
205:23 - like success Pages redirect cancel all
205:26 - these Pages for us so we will later on
205:28 - just download these assets and place
205:30 - them in the public folder and once you
205:32 - complete the ordering we can redirect
205:34 - users to these pages so we don't have to
205:37 - build that part I mean you could but
205:39 - this is easier and more faster okay
205:41 - first import the express so comes
205:44 - Express
205:46 - this require
205:49 - Express
205:51 - the next one which we want to import is
205:54 - course
205:55 - otherwise if you don't import and use
205:57 - the course it you will get an error when
205:59 - you're trying to make the cross origin
206:01 - requests so this one requires course
206:05 - and the next one is body parser so this
206:08 - one is for for parsing body uh the the
206:10 - data that we're sending between the
206:12 - servers so as it as it tells by its name
206:14 - body parser
206:16 - and it requires body dash parcel okay
206:21 - like so so now what you can do we need
206:23 - to initialize our application const app
206:25 - is equal Express and we just call the
206:28 - Express without any arguments there
206:31 - the next thing
206:33 - okay the next thing that I want to do is
206:35 - I want to set the app to use the the
206:39 - public folder so let's create a new
206:40 - folder
206:41 - public
206:44 - and let me open up
206:46 - the stripe
206:51 - check out flow so let me show you this
206:54 - so like I said they already have
206:56 - checkout flow built yeah so let's
206:59 - explore this
207:01 - as you can see they have already built
207:03 - all of this and so you don't have to do
207:05 - this these kind of things and spend your
207:07 - time into building like success page and
207:11 - um maybe fail failures page so you can
207:14 - go and click here on the top Explorer
207:16 - documents and it can go on quick start
207:19 - here
207:22 - and once you're here you basically can
207:24 - just copy paste all this entire code if
207:26 - you want to but I can just go and
207:28 - download this and we can use the
207:30 - checkout success and cancel HTML files
207:33 - and just include them inside of our
207:35 - public folder
207:38 - okay
207:43 - just make sure it's downloaded
207:49 - okay so here we have downloaded here and
207:52 - now I can use this public folder and
207:55 - extract it okay
207:58 - actually I need to open up revealing the
208:00 - file explorer it would be good it can
208:02 - work directly from the zip file but it
208:04 - doesn't so let's remove the public
208:06 - folder and let's just include this
208:08 - public folder here okay so in this
208:10 - public folder we have this cancel HTML
208:13 - checkout HTML and success HTML files you
208:15 - will actually only use the cancel and
208:17 - success the checkout HTML file is not
208:20 - going to be used in this tutorial so
208:22 - let's close this checkout
208:25 - page and now inside of the our express
208:28 - application app.use we want to use this
208:31 - folder so in order in order to access
208:33 - this
208:35 - uh these assets from the public folder
208:37 - we need to call Express dot static and
208:40 - pass the name of the folder which is
208:42 - public
208:45 - okay like so
208:47 - now we need to set the body parser so
208:49 - call the app.use
208:51 - and call the body parser and set the URL
208:55 - and code it to
208:57 - extended as false
209:00 - this basically extended is by default uh
209:03 - true so it enables the objects and
209:06 - arrays to be encoded inside of the URL
209:08 - which we don't want
209:10 - so let me just copy paste this one and
209:13 - also what we're going to do is we want
209:14 - to create Json
209:16 - Json application we want to use the
209:18 - application slash Json for for app
209:21 - obviously
209:22 - and now let's use the course
209:25 - so we need to set it up so app that use
209:29 - and call the course
209:33 - we need to set the origin so basically
209:35 - we are enabling course here origin true
209:38 - and we want to enable the headers as
209:41 - well otherwise they will be omitted so
209:43 - set the credentials too true as well
209:46 - okay like so
209:48 - and now let's see let's load the stripes
209:50 - so cons stripe
209:53 - this vehicle is equal to require
209:56 - and now he here we need to include the
209:59 - code
210:01 - and the token from the stripe itself so
210:03 - here we need to call the strike method
210:05 - we're requiring stripe and then we are
210:08 - calling the method with the key so once
210:10 - again let's go to describe.com
210:17 - here and let's go to the dashboard
210:21 - foreign
210:23 - let's go to the developers in API keys
210:25 - and we need to open up this secret key
210:28 - so reveal task key and we can click to
210:30 - copy
210:32 - we can close this now
210:35 - and we can pass this key here to our
210:37 - server
210:38 - okay like so obviously like I said you
210:41 - need to create your own servers and you
210:43 - need to create your own keys right
210:46 - here please don't use mine
210:48 - okay
210:49 - and now let's create a new post endpoint
210:52 - so add the post
210:54 - okay and the name of this request like
210:58 - we created inside of the checkout so if
211:01 - we go to the public folder and sorry
211:04 - here inside of the source
211:07 - app pages cards and here we created this
211:12 - checkout endpoint so let's use that here
211:16 - let's check out
211:18 - and this is going to be async
211:22 - callback so here we have re request we
211:27 - have response and we have the next which
211:29 - will handle the errors in case anything
211:31 - comes up so let's build try catch block
211:34 - here
211:35 - you get this Auto completed from the
211:37 - IntelliJ
211:38 - sorry from the visual studio code and we
211:41 - will create a session
211:44 - variable which we will use to pass that
211:46 - back to our request here in the cart and
211:49 - we will pass back the ID from the
211:51 - session so that we can open up
211:54 - check out okay so
211:57 - what what we are going to do here is
211:59 - basically we are calling the stripe so
212:01 - we are called await on stripe dot
212:04 - checkout
212:07 - uh check
212:10 - out Dot sessions okay
212:14 - and you call the create method
212:17 - create like so you need to if you need
212:20 - to pass an object
212:22 - in inside of this object we'll pass uh
212:25 - the data about our product that we want
212:28 - to to you know to buy
212:30 - so the first argument is line
212:33 - underscore items
212:35 - and here we will use the request that we
212:38 - got in the body so request.body and we
212:43 - will send as you can see here
212:45 - from our client
212:50 - here from our client we are sending
212:53 - items
212:54 - so we can access the items here request
212:57 - body dot items
212:59 - and what we want to do is we want to map
213:01 - this array
213:04 - okay
213:06 - so
213:07 - here we can access the item and what we
213:11 - will return here
213:13 - is a new object and inside of this
213:15 - object let me just make an implicit
213:17 - return
213:19 - okay
213:22 - so you just surround this by the
213:24 - parentheses
213:26 - and this is implicit return and now
213:28 - inside of the object
213:30 - set the currency
213:33 - currency to be uh USD
213:37 - like so
213:39 - set the product
213:40 - underscore Theta
213:43 - to be okay new object and inside of this
213:46 - object we want to pass the name and the
213:48 - images so the name is going to be item
213:51 - dot name
213:53 - and the images we actually have only one
213:55 - image so images but it accept the array
213:57 - of images so use the item dot product
214:00 - okay
214:03 - like so
214:04 - and this is for product data
214:06 - then we need to send the unit amount so
214:09 - this is the quantity unit underscore
214:12 - amount
214:15 - actually unit amount is the actual price
214:19 - so you go to item dot dot price and we
214:23 - we need to multiply that with 100
214:26 - because they use that in sense and we we
214:29 - want to use that in dollars okay
214:33 - and
214:36 - okay let me close this
214:42 - the next uh parameter that we need to
214:45 - send is the mode so the mode needs to be
214:47 - payment there are multiple ways uh there
214:50 - are multiple modes actually and there
214:52 - are subscriptions one-time payments and
214:54 - this is actually one-time payment so
214:56 - that is what we are selling here and the
214:59 - next thing is the success URL
215:02 - success underscore URL so once the
215:05 - payment has been done successfully we
215:07 - will redirect the user to this URL and
215:10 - actually let me make this double code
215:12 - Codes as well so that we have
215:14 - a same standard and the USD here
215:17 - so let's use the double quotes here
215:19 - always
215:22 - okay so success URL is going to be the
215:26 - the success HTML file from our public
215:30 - folder
215:32 - so-called httpe uh colon forward slash
215:36 - forward slash localhost
215:39 - four two four two and then success
215:43 - dot HTML okay and then we want to
215:48 - add Castle URL as well
215:54 - cancel underscore URL and just add the
215:57 - cancel file
215:59 - what you can do now is you can obviously
216:01 - go and update the success HTML file for
216:04 - example here it says mail to orders it's
216:07 - example we can do
216:09 - collab or
216:11 - code dot dot slower
216:15 - you know add Gmail
216:20 - .com
216:22 - like so and copy paste this as well so
216:25 - that we have custom
216:27 - success page
216:29 - you can make this much better obviously
216:31 - but this is just this this will do it
216:34 - right and instead of the catch error
216:37 - we just want to pass the error back so
216:40 - call the next
216:42 - and we actually need to to catch the
216:46 - arrow here and just pass the error back
216:47 - like so and the last thing I forgot to
216:50 - do is basically we want to return back
216:52 - like I said the session so use the
216:55 - response dot status
216:58 - 200 and respond in the Json format and
217:02 - just having the session okay
217:05 - so we are sending this session entirely
217:07 - here and and the last part actually
217:10 - which I forgot is to open up the port
217:12 - and open up the actual application so
217:14 - app.listen
217:16 - and the port that we said that we're
217:18 - going to be using 424242
217:20 - and what you want to do is we just want
217:22 - to cancel out
217:24 - log
217:26 - f is running
217:28 - on
217:30 - for two
217:33 - four two four two forty just forty forty
217:35 - okay
217:37 - and now we can open up the terminal and
217:39 - start our application inside of the
217:41 - server run node and name of the file is
217:44 - server.js
217:46 - app is running on four two four two
217:48 - forty okay and our client app is running
217:51 - as well so let's try it
217:54 - let me pressure the application
217:59 - let's select a couple of products here
218:04 - open up the card
218:06 - let's go to the cart page
218:08 - here let's continue proceed to the
218:10 - checkout
218:14 - okay this can this can take a couple of
218:16 - seconds let me open that inspect tool in
218:19 - case we have some errors okay we are
218:21 - getting some error so let me just see
218:22 - and if we open up
218:24 - the console log we can see that the
218:26 - request hasn't been correct so let me
218:28 - see the server
218:30 - what it says
218:32 - okay let's see we are getting some
218:34 - errors so item is not
218:37 - fine we are getting
218:39 - okay received unknown parameters unit
218:42 - amount okay so obviously we have been
218:45 - sending the wrong format so what we can
218:47 - do is we can open up the stripe
218:49 - documentation
218:51 - here
218:52 - and we can just copy paste the correct
218:55 - format so inside of here inside of the
218:58 - Align items let's just copy paste this
219:00 - object
219:03 - okay so here line items it's basically
219:06 - this object
219:07 - let's replace it here
219:12 - okay
219:15 - and now
219:16 - okay let me just see we're mapping
219:19 - here
219:20 - we're closing we need another
219:23 - brackets so make sure that you have
219:25 - right spelling okay and now for the
219:28 - currency
219:29 - USD for the name we will use
219:33 - item dot name
219:35 - for the images
219:37 - like we said we have only one image so
219:39 - use the item dot product inside of the
219:42 - array
219:43 - okay for the unit amount we will use
219:45 - item dot price and we will increase it
219:49 - by 100 and for the quantity we want
219:54 - item dot quantity
219:56 - like so
219:57 - let me restart the server
220:01 - okay mode server
220:03 - the app is running on 4242
220:06 - okay let me
220:07 - move this here
220:09 - and now let me refresh to see what we
220:13 - get so if I go now at the bottom you can
220:15 - proceed to the checkout if I click on
220:18 - that here
220:20 - okay it's loading
220:24 - and now we get uh our checkout page so
220:27 - as you can see we have these products we
220:29 - have the total amount and we have all
220:32 - this information to fill in so we can
220:34 - type in just test email
220:38 - at gmail.com
220:40 - for the testing you need to use 424242
220:44 - [Music]
220:45 - then for the month it doesn't matter for
220:49 - CSV doesn't matter the name of the card
220:50 - it's lava
220:53 - and let's click pay
220:56 - no thanks I don't want to save
221:00 - okay we appreciate your business
221:03 - and they basically got the checkout page
221:06 - okay this is expired link because my
221:08 - accidentally uh click on back
221:11 - but if we go to stripe dashboard we
221:15 - should check out and see if we got this
221:16 - payment processed so let's go to the
221:19 - dashboard
221:22 - let's go to the payments here
221:26 - and this is the last one
221:28 - and as you can see we got our products
221:31 - in the dashboard
221:32 - uh and these are the details so slova
221:36 - test Gmail and all of this so what we
221:39 - can do and ask next is let me open up
221:41 - our application again
221:43 - local school localhost 4000.
221:46 - okay let me just change the protocol to
221:49 - remove the secure one
221:51 - okay
221:53 - so what we can do here is
221:55 - we can integrate the shipping so it is
221:58 - we have integrated the payments but if
222:00 - you're ordering something you want to
222:01 - integrate the shipping as well so this
222:03 - is like just a donation uh but if you
222:05 - want to add shipping options so you can
222:08 - go to the documentation of the stripe
222:10 - you have here stripe docs payments
222:13 - checkout and the shipping and what we
222:16 - can do we can just pass these shipping
222:19 - options right
222:21 - so let me see uh we have added these
222:26 - line items and let me just copy this
222:28 - entire part because
222:30 - you can customize it but you don't have
222:32 - to so let's copy it entirely
222:35 - and let's see
222:37 - okay
222:38 - here before the line items let's copy
222:41 - this shipping details
222:44 - like so
222:45 - and if you want to customize something
222:48 - you can easily do that so but basically
222:50 - the options are regular so here you can
222:53 - update like the shipping countries here
222:55 - is at U.S and Canada
222:57 - shipping options
222:58 - as you can see we have like the fixed
223:01 - amount this is like free shipping so the
223:03 - amount is zero the second option is to
223:05 - have uh shipping for 1500 USD dollars
223:09 - and you can like display name all these
223:12 - properties you can alter if you want so
223:14 - let me just in that this code okay
223:17 - like so so let's try this now let's save
223:20 - this
223:22 - let's restart our server
223:25 - okay app is running
223:28 - and now let's test it what we can do
223:30 - here let's select jewelry let's add a
223:34 - couple of products
223:36 - like so
223:38 - let's go to the card your card let me
223:42 - open up the console
223:44 - so we can go proceeded at checkout
223:47 - here
223:49 - and let's see
223:52 - okay we do get now the shipping as well
223:54 - so as you can see on the other on the
223:56 - left side we do have all the products
223:58 - that we created and the total View and
224:01 - the shipping is free
224:02 - okay we have you know two options free
224:04 - shipping and next day sir so if you
224:06 - click on the next day sir you get 15 if
224:09 - you click on free shipping it will take
224:11 - five or seven uh business days so for
224:14 - the email you can test we test at test
224:17 - Dot
224:19 - com name slova
224:22 - uh address one test
224:25 - I just do test
224:27 - for the city
224:30 - New York zip code
224:33 - Virginia this is all random obviously
224:36 - and for the card information 424242 just
224:39 - for two
224:41 - okay you can enter whatever you want
224:43 - here for the CV
224:45 - and if we want to go to pay let's see I
224:48 - don't want to thank uh to save it's
224:50 - recessing should be successful we
224:53 - appreciate your business if you have any
224:54 - questions please email call me swallow I
224:56 - want to save this and if I go now to the
224:59 - to the stripe.com
225:02 - here let's open up the dashboard again
225:07 - and let's see under the payments
225:12 - here we have the last transaction and
225:15 - here you can see
225:17 - all the information so his key are the
225:19 - owner information the address where you
225:21 - want to ship your order and everything
225:24 - looks as expected so with this we have
225:27 - actually completed our application so
225:30 - let me so let me navigate back and let
225:32 - me review what we have created in this
225:34 - tutorial so basically what we did is we
225:37 - created this home page
225:39 - with all of these products which we can
225:41 - uh sort or by ascending or descending we
225:45 - also created this menu where we can
225:46 - choose different number of items that
225:48 - you want to display on our current page
225:50 - we also have the options to change the
225:53 - layout depending on how we want to look
225:56 - and we also have the options and the
225:58 - filters on the left side to filter our
226:00 - categories like Tony's Jewelry men's
226:02 - clothing and so on also there are
226:05 - options obviously because this is a
226:07 - store to add these items to the cart you
226:09 - can open the cart and preview what we
226:11 - have there we can clear the card so this
226:13 - is now empty
226:15 - then again if you want to proceed and
226:17 - buy some new things we can add them then
226:20 - we can proceed to the checkout just
226:21 - click on the Green
226:24 - and here on the checkout we have list of
226:27 - all the items that we added to the card
226:28 - we can increase the quantity we can
226:30 - remove the quantity if you want and just
226:33 - let's say buy only this one man casual
226:37 - sling fit uh
226:39 - this t-shirt and we can proceed to the
226:42 - checkout
226:43 - if you click on proceed to the checkout
226:45 - if you click on proceed to the checkout
226:48 - we get this checkout form where we can
226:50 - enter all the shipping details and the
226:53 - card information and we can submit that
226:55 - to our stripe dashboard and with this we
226:59 - basically build our e-commerce store I
227:01 - hope you enjoyed it and I hope you
227:03 - learned something new well that's all
227:05 - for this angular video thanks for
227:07 - stopping by and don't forget to
227:09 - subscribe
227:12 - code with sloba
227:14 - [Music]
227:16 - thank you for watching the entire video
227:18 - to see more angular tutorials click here
227:21 - [Music]
227:23 - foreign

Cleaned transcript:

slow button is a senior frontend developer and popular YouTube video creator in this course he's going to teach you how to create a full stack Web Store using angular node.js and stripe if you're looking to build an ecommerce store you're in the right place because I'm going to show you how easy it is to build it in this tutorial I'm going to use angularjs typescript node.js and express.js and we are going to do start payment integration we are going to use angular material component library and we are going to use Tailwind to help us to start not Material component and this tutorial is only for teaching purposes so we are not going to be creating the real products but we are going to use fixer API in order to help us prerequisite for this video is to have no JS installed on your machine if you have angular fundamentals go check my course on YouTube if you're not sure and to create account on stripe.com it's free by the way and that's all that's our coding go with slova okay on my desktop the first thing which I want to open is my terminal so right click and I will open up the git bash here you can open up the terminal Powershell whatever you're using for me it's git bash now the first thing that you want to have is npm installed I assume that you already installed the npm now let's install the angular CLI this will help us to create new angular project and it will help us to create new components Services whatever we need inside of our angular application so in order to install it run npm I for install and angular forward slash CLI and the version is going to be 14.2.1 make sure to install the exactly the same version otherwise you may run into issues during the project development installation has been done let's clear this now we want to create new project it's really easy to install the new project once you have angular CLI installed so run the command NG new and now we need to pass the name of our application I will just name it store and I want to pass a couple of parameters so I want application to create default routing for us because we're going to have two pages then I want to remove the test so add a flag skip tests because you're not going to be dealing with tests in this tutorial and we want to have the application minimal so set the minimal flag like so this will take some time to create the application and install the packages I will be right back and application has been installed successfully the packages installed successfully and successfully initialized a git repository for us okay now we can close this and we can open the visual studio code so for me it's just Visual Studio code you may use some other code editors of your choice so open the folder and I created this folder on the desktop so it was called the store just select the folder I trust authors okay and now we want to open the terminal on the bottom of the vs code we can close the get started so the packages have been already installed as you can see we have the node modules installed and once again if you open up the package.json file make sure that you have the correct version of angular installed as you can see for me the angular core version is 14. so make sure to have the exactly the same version now in order to start we can just run Ng sir and this will start actually I'm running on the Powershell it may come with issues so I need to open up the git Bash and now just go NG serve this should start our local server it says do I want to share the pseudonymous usage data no I don't want to that has been disabled we just want to develop the application nothing else and once the compilation has been done we can open up the localhost 4200 and see that our app is running so the first thing that I want to do is I want to go to the source app and access our app component so inside of our template let's remove here this boilerplate code like so and put it out router output we can remove that as well this is the place where we are going to be placing our components so what I wanted to do the first thing is I want to add the angular material this is the library that we are going to be using for creating all the components so it's easier to develop and faster if I go to angular material documentation you can see the list on the sidebar you can see the list of all the components that I have in order to use the specific components for example like table you need to go to the API of this component and you can import it import this module inside of your app modules and you can see the examples how to use it you just need to go to view code and you can see and you can play around with it it's really easy to implement and I highly advise you to go to the material documentation website first before you start developing and play around with these components because these are the components that we are going to be using throughout the development now let me add the angular material in order to add it let me first clear the console I I will just run NG add at okay and you add as angular forward slash material like so would you like to proceed yes and installing all the packages you can save our app component.ts file it asks us what is the theme defaulting that you want to install and I will choose the first one as you can say as you can see here it says Indigo pink it's good enough for me so actually you need to be focused on the terminal to select the indigo set up Global angular material typography Styles yes include and enable animations yes so just click enter you can select the option with uh with the arrow up and the arrow down and just click enter when you want to confirm and with this we have added all the angular material uh files that we need now in order to use them inside of our application we actually need to open up the app modules file in here we need to install all the modulus and import them in order to use them so here inside of the Imports array let's just add all the components that we want to use so I'm going to be using the matte side now let's first import all the modules and later on we can just focus on developing and we don't have to play around with the configuration importing the modules and things like that so when I sign up module the next one is going to be matte grid list module this one is obviously for the grid the setting up is for our layout and basically we're going to have the sign up on the left side with the filters and the categories the next one is mat manual module we're going to have a couple of menus obviously then next one is going to be matte button module okay then math card module most of the elements is going to be placed inside of the card modules card module give you a nice uh Styles around your elements Mad Card module next one is matte icon module so we will we will have a couple of icons as well obviously and icon module matte X tension expansion module this one is going to be for the expansion expansion filters on the left sidebar next one is matte list module also for the left sidebar then Matt toolbar module this is going to be used in the header because we're going to have a couple of components that that are going to be using uh the toolbar next one is mat table module you're going to have table on the cart page then the next one is Matt badge module this one is for adding the badge uh inside of our cart icon because our cart icon is going to have a badge and displayed how many items is inside of the card so this module is for that that matte snack snack bar module this one is for displaying the information snack bar for displaying information uh to the user so maybe you're adding the item to the to the card or you're removing or maybe you're creating new product whatever you're doing you can notify the user for that and this module is for that and this sums up all the modules that you're going to be using now we just need to import these files because we have imported them inside of the Imports array but they need to be imported into this file so we can use the import on top and let's do this for all these modules so import ant module from angular material this one is from side nav you see the auto completion there and we can just copy paste this couple of times it's going to be easier for us so just copy paste like so and obviously we need to update the URL my menu matte button copies make sure to copy it correctly so we are replacing the same side module here then matte icon module then matte expansion module then Matt list module let me come let me paste a couple more times okay let's remove this dots commas actually then let me copy paste the other ones my toolbar that's table module that badge module and matte snack bar module okay let me remove these commas and now let me update so for the grid list it's going to be from grid list from menu is going to be from menu button is going to be angular material button cart is going to be from cart actually icon angular material icon expansion model from the expansion sign up actually toolbar is going to be from the toolbar table from the table batch from the badge snack bar from the snag bar and the list module from the angular material list module and now we have done a lot of stuff right nobody likes them the setup and the modules import but this once we once we've done this on the beginning we can focus on coding and we don't have to worry about what we have important and what we haven't so but the thing that that you need to know is that we're only importing the components that you need in our application and as you can see there are a bunch of components in the angular material but you're only using the ones and important ones that we're using that application the next thing that I want to import and create in our project is Tailwind Tailwind is utility CSS library and it helps you to that style but the position your elements easier so for the components we are using the angle material but for additional styling in the for faster development we're going to use the Tailwind so in order to to install it you can just go to tailwind and you can play around it's very nice utility library and they have really great documentation so whatever the property that you need to use you can search and find really easily okay so in order to install it uh you just follow up the documentation so as you can see npm install Dash the tail in CSS both CSS and auto prefixer these are all the packages that you need in order to to run the Tailwind so let's run that inside of the root folder run just this npm install once that is done let me clear the console we can initialize detailed in CSS so we need to create a configuration file make sure to copy it and now let's open up the token config file it's here in the root folder Tailwind config.js file the thing which we want to add as you can see here it says configure your template paths so we want to tell the Tailwind what are what are the templates that we want to style right to use so here we're basically targeting The Source folder and all the folders inside of the source folder these are stars that that are targeted in that and we want to Target all the files that I have extension HTML and typescript like so so this is how we are targeting all the templates inside of our application and now we need to import the utility classes in the base classes from the tailwind and we do that inside of the style CSS this is our main style and you can just go to the documentation and basically imp copy paste the code from the from this terminal and you can import it at the very top here okay and now let's just run our application and see if it runs correctly if you have done everything by the documentation it's going to run without any issues the links to all the commands from the get is going to be in the description box below and also link to the tailwind and angular material is going to be in the in the Box in the description so you can go and play around and learn a little bit about these libraries if you haven't before because they're super awesome and they will help you to develop your applications so now the comp the project has been compiled successfully and it can reload because we have removed everything from our app component file you can see that the project is empty now the first thing that we want to do once that everything has been set up correctly we want to create our first component and that is going to be our header components so what we can do here we can create new folder and the name of the folder is going to be components like so and inside of the components folder create new file and let's name it header or actually even better now let me show you what is the the best tool of the angular CLI if you want to generate a components Services pipes directives whatever you need inside of the angular you can use the CLI so here we are inside of the root folder and we can just navigate to The Source change directory to the source app components folder now let's generate new component you can do that easily by running the command NG generate G for Generate C for component and name of the components let's call it header component actually I'm running the Powershell and that's not going to work so I need to open up the git bash here sorry kid bash like so and I'll again let's change the change directory to Source app components and then NG generate component header like so just wait for a couple of seconds and as you can see you generate the component for us now what we can do here we can use this component copy paste the selector and we can go inside of the app component inside of your template just let me just tell your template just paste the tag name CSS selector and as you can see if I zoom in you can see that it says header works I can close the tailwind and angle material here now let's start actual developing of this application now we can close our app component file can shrink down our terminal okay inside of the header component if you want to use the external HTML file and not use the one inside of the TS file you can create new a new files so let's just create new file and name it header is removed it criminal case other Dot component.html this is the naming convention that you want to follow the first the name of the component dot component and then the extension right so we have usually header dot component.ts sometimes we have the CSS file so whatever you need and now you can remove this code and we need to include it we can remove the Styles as well and if we want to include the external HTML file that we just created just run type in the template URL property and for the value of the property just inside of the current directory targeting header dot component dot HTML like so and let me close all the other files and let me just open up the HTML file so as you already know this file is on the very top of our application and on this header we want to have the link to the home and we want to have the card so all the time you can see if we have added some components or actually the products to the card so on the very top we are going to use the matte toolbar component so we are start using the angular material component so this component gives you nice uh nice component that styles similar to the card and where you can Target and where you can place your tool tools basically so inside of it let's create first link to the home so like I said it's going to have the router link to the home slash home okay and we can type in code with slova store or you can name it I store or however you want to call it okay and on the right side just save that up and we get this we get this nice as you can see nice gray background here okay okay a couple of things I want to add here so the first thing I want to add the maximum bit to our container so I don't wanna our website to take the full width of every single device right because you can open it up on very large devices so set the max width to 7xl and set the MX to Auto this means that the module F and the right basically horizontal is going to be Auto and it's going to Center our container and let's add some border on the left and the right side or X like so now on the right side we want to add the icon so use the matte icon like I said it's going to be card icon and the name of the icon is shopping underscore cart like so and as you can see we got the icon now in order to style these two I want to actually apply some of these stallion Styles so I want to separate these two and place them on the edges just zoom out a little bit so in order to do that I just need to to run the class justify between like so and they're placed uh you know on the edges of this container in order to apply the justify between you basically need to have the element that has the display Flex Rule and the metal toolbar already has this rule set up now inside of the map icon you want to show the count of the items that are added to the to the icon how we use that how we do that is using the matte patch so add the input property matte badge and let's for now just add something statically let's add one and as you can see we get this item added so it's really easy and really fast as you can see to to style uh and add components using Gengar material if you want to change the color you can just use the matte batch color property badge or the attribute actually and I'm gonna use warn because this is going to add a red color to our batch that's very nice cool and now we want to add the button actually that is going to open the menu once we click on the shopping cart we want to add a menu so this button needs to surround our icon so let me let me move the icon inside of the button and this button is going to be matte icon button so this is the the component for the buttons that hold the icons obviously okay and then we want to add an attribute for the manual matte menu trigger 4. and here you define what are you triggering for so once you click on the button you want to trigger the menu and this is the name of the menu and below this we can add the matte menu okay let me just get back together component here below that add math menu like so and for the 40 for the selector we are using the menu here this needs these two needs to be the same right so this is how you target the menu and add value as matte menu okay now instead of the menu let's set it there and let's have some classes okay so P3 divide y divide solid okay so the first class adds padding on top bottom left right divide y adds the division so basically like a separator in between the rows inside of the this div and we want the separation to be solid so yeah it's gonna we're gonna see once we start adding some dips here let's add the first row the first row is gonna have the class uh also P for padding parting bottom three then Flex and justify justify between like so so basically we're adding some padding on the bottom we are setting this div uh as a display flex and we want to justify the items in between so just to set them on the edges right and inside of this div let's set a span for this band we're basically gonna say how many items do we have inside of our card so let's say three items are actually we are using here one so let's add one one and let's add items like so and let's add some margin on the right side so class 100 right 16. like so and on the right side we want to have the router link the router link to cart this is going to be the page that we're going to create later the card and the home page and the text is viewpark okay let's save that if you open we get to type two items here the one is the the length but basically the count of the items that we have inside of our card and the view card and let's make the items capital i like so then add another div inside of this div you're going to have all the items and once we start fetching the items we're gonna Loop uh we're gonna Loop and display everything that we fetch from the array of the items or the products but for now it's just gonna be static uh components let's add a deal with the class Flex again justify between and font light margin button too so again we are setting the div to the flex we want to separate the items on the edges of the container set the font to be light so to be very light and the margin that's a margin on the bar margin margin bottom two so inside of this div let's add item name like keyboard and the quantity is like one and then on the right side we want to add the price of it so let's add a class font bold not italic actually they shouldn't be italic as it's spam not an eye and let's add a price we can put that inside of the angular expression y we will see right now so if we add like 150 dollars only it's very expensive for a keyboard just add a pipe currency like so now if we save it we'll see that it will add here it adds here uh basically the the dollar sign the default currency is dollar but with the parameters here you can add a different occurrences I believe the dollar one as default that's not a problem for me uh the one thing that I want to add is I want to add some some padding here so inside of inside of this there actually we want to have a container here and let's put inside of this container all the products that we have so add a p y three so this means basically I had a padding on top and the bottom like so so there's some separation now when we start looping we can just start adding these these items like so and it will just add them below as you can see here and on the bottom let's add another div here we're gonna show the total summary so air attacks total and add another span here at a class on Bold and add like a total again we can use the currency pipe and let's say 450 and let's use the currency pipe like so let's save that and I just want to add some separation so let's add here the class again let's add a flex justify between I had some padding on top and the bottom and let's use Font light as well like so okay now we have all these things and on the very bottom so underneath this total div I want to add two icons so the first one is going to be to remove everything from the card so to clear the card and the second one is going to be to go to the checkout right so add a div and let's add a class again potting padding top uh three you can start it is flex and justify between like so and inside of this add two buttons so this these are going to be the buttons so these are going to be the buttons that are going to hold the icons so add a class BG rows for the first one 600 this is going to add the red color to our to our button text White around it cool this is going to make a circle out of our button set the width to B9 and a height to be 9. okay and inside of our button let's add our icon icon and the first one is going to be remove underscore shopping underscore cards okay and if we say we get this remove card and and as you can see we added this background rows 600 this is the the different color and if you want to change the color so basically you just choose the the color that you want to add and with these numbers you're adding the shade so if I go and type in for example 300 let me show you so it will basically show that the lighter version of of the roads and if you go like 900 it will show you the darker version I like the 600 so I will leave it as it is here and let's copy paste this one we want to add another icon and this icon is actually gonna have it's going to be just a link so router link and let's it's gonna link to the record and the background is going to be green instead of rose everything else Remains the Same and yeah rounded tool means basically that we are added border radius so if you remove the border around is full let me show you it shows a square so that's why I'm adding router full and this is basically the width and the height of the button with W and H and with that we can complete it our menu and basically our header so now we can start actually developing our home page our landing page and in order to do that let's open up our source tree and inside of the app let's create a new folder and name it page Pages actually inside of the pages we're going to use the angular CLI here again CD into let me actually see where we are at any components CD on the topper directory and let's change directory to the pages okay and here we want to create new component NG generate component now let's call it home component it will take for a couple of seconds and as you can see it creates the component home components inside of the home folder and it updates the app module so if you go to the app module as you can see here we got the home component imported inside of this file and it has been imported into the Declarations array so in order to use the component if you haven't been using the Standalone component you need to import them inside of the module in order to use it now inside of the app routing module we want to add the first route so the name of this route is going to be home and the component that is going to be loading this is going to be the component that we just created so its name is home component like so and also what we want to do is we want to add this path as default so how we do that is we'd add another object and inside of this object we add a path to empty and we add redirect to home and add path match too full and make that as a string so what this does is basically if you enter the M3 empty string so if you just go to localhost it will redirect to the home and then the component will home component will load this this is how it works so in order to load these routes we actually need to go to the app components folder and here we need to add the router Outlet like so and we need to close that tag like so and now we have the app component loading our com component actually so depending on the on the route it loads the correct component and as you can see if you just type in localhost 4000 actually four thousand let me remove it the extension the protocol actually and we get the Home Route added to it and we get the homeworks so now we can close the app routing module we can close the app component we can close the header component and we can start developing our common component so let's open up the home component Pages home like so and once again let's remove this template as you will going to be creating the new folder new file template URL external HTML file so the name is going to be inside of the current folderhome.com component .html and we can copy this and just add new file here or you can use this option like so and save this okay now we can shrink down our terminal and let's start developing later HTML code so here we're going to use the matte drawer drawer container this is the component from angular material and what it does it basically creates a drawer or a sidebar which which it can pop up or stay always the open which is the case in this uh in this application so add a property Auto size to True which means that basically it's gonna true which means that it's going to recall recalculate what are the values and the width of the container elements and if there's something loading dynamically it's gonna Auto size it again let's add also we want to add a couple of more classes here so let's add a class uh let's set the mid height to be full so to take the full height of the window let's add a Max maximum width as we did on the same on the here on the toolbar maximum width to be 7xl now let's add MX photo so basically this means margin on the left and the right side horizontally to be Auto so it basically centers your container now let's add border on the left and on the right side like so okay so if we zoom out you can see that we have this container and we have borders on the left on the right side let me zoom in again okay and inside of this matte draw container we'll have one drawer which is basically like like I said uh the sidebar match drawer and the mode here is going to be side these modes can change the way how this drawer works yeah you can you can set it to overflow of the content but if it's set to side it means that it pushes the main content so it's not overflowing any any layout and we want to set it always to be opened open like so and let's just add uh some give here that says filters it's going to do it's going to be the categories but it says filters as you can see it's always open here so you cannot close it because we added this property and let's add some padding to this pairing six like so that's good okay now on the right side of this matte drawer container we're gonna have matte drawer content so this is going to take the biggest portion of our page my drawer content and I want to add some padding there as well so add padding six like so and here we're gonna create new a new component uh which is going to be called app products header so inside of our pages folder add new folder and name it components so this folder is going to hold all the components that are inside of the home page right so the components inside of the app folder are components that are that are being shared across the entire application inside of the pages we have the home and actually we need to place this component inside of the home page like so move it and now inside of this component let's create new components now let me see where we are at in our in our tree in the pages now it's CDs change directory inside of the components let me just see okay we need to change directory to home to components and now let's uh NG generate component now let's call it well what we said products products header this component is gonna have some elements that are going to help our us to sort and to display products differently okay and inside of let me just open this component and again let's create new file here like so and let's call it products Dash header dot com on end dot HTML now let's include that okay here instead of inside of the template just add that and let's change the property to the URL like so and let's remove the Styles here okay now we need to use this selector CSS selector and inside of the home component inside of the matte drawer content we'll just include just include that here like so and we can close the other components and we can just focus on the coding this part and on this component on the left side we will have a button that will change the Sorting ascending or descending and on the right side we'll have one button which will change the number of products that you display on the page and the third element is just to change the layout of these product items so let's begin we will place that inside of the Mad Card element and let's add some margin on the bottom so margin bottom four added another div and let's set a class of flex and justify between so again on this div we are setting this div to have the display as flags and they're justifying elements between them so it means that the one on the left side we're gonna have one button and on the other side we'll have two menus but they will be separated totally and they will be on the edges of this container okay now create another div and inside of this div let's create a button for that menu this button we will have matte matte button argument or property which will transform the regular button into the matte button so and it will have text sort by and let's add a dummy description let's say now we want to create a menu for this button so if I save this you can see that we created this button but let's create a menu so once we click on the sort we should get a menu and we can change the the ascending sorting by descending or ascending and we do that by passing the mat menu trigger four this is the property and we need to pass the name of the manual and the name is going to be sort by menu below this button let's create the menu and the menu is going to have matte menu tag and now let's give this name that we are using to Target this menu and we need to pass the math menu so by the sort by menu basically we are creating an ID we are adding the ID to this to this menu and that's how we target it and connect this matte menu with this button okay and now if you save that we should get an empty menu like so and in this menu which we should create two buttons which will change the Sorting the first one is going to be descending and the second one is going to be ascending and also let's add matte menu item property to both of these like so and now what we can do is we can create a sort variable which we can update so let me just check the HTML if it run this correctly it does as you can see and what we can do here is we can just create a variable and name it as a sort and give it a default value to sort and we can change this desk to the variable like so and then we can create a new method which will update this okay it probably does doesn't exist on the prop products so because it's sorts and task this is the name of the property sort by and sort needs to have the descending the default value not sort okay and we can create a create new function or actually method on sort updated this method is going to return the void so it's not going to return anything it's just going to update this variable here so it needs to accept new sort parameter to this type of string and all it does is it updates the sort on this one on this class to new new source equals new source like so later on we will emit this value and we will fetch the results but for now this this is just the regular functionality okay and now we need to call that method one click so here on click call the on sort updated method and for the first one send the description so in that description descending it's a little bit confusing and for the second one send the ascending like so and if I save this when we select you should change the value and later like I said we will go and basically emit the new value and we'll fetch the data according to this value so we will just sort it differently okay and with that we have completed the the left sorting manual let's proceed with the second part okay so on the right side let's create another div and let's set a class Flex again and items Center this means that we want to align the items horizontally not actually vertically so they need to be in in line with this sort by description everything needs to be in line okay so let's add another div and here we again uh want to create another menu so let's add a button again and this button is also going to be matte button and again let's add matte menu trigger matte menu trigger for property or and if you receive the menu it will actually be targeted and connected with the menu this is the ID that I was using so math manual and let's add the ID of menu and it's math menu I mean this could be more descriptive but on this component we only have these two menus so it should be it should be good enough okay and then here I want to add a text dream show and here we will basically uh show the number of items so let's add a new variable and uh let's call it call it items show count okay and let's create that new variable here items show count and let's set the default value to 12 I think yeah let's use 12. okay and if I save it here it showed well so basically showed 12 items that that's what it means okay and what I want to add besides that is I want to add an icon and the name of the icon is expand more so that indicates that actually we want to we can open this one right and that's exactly something that we missed for the first menu so something that should indicate is sorting as well that if you want to have the expand here yeah that's more like it okay let me close it and now inside of this menu we'll we'll show different values similar like we did for the 41st menu and actually I can just copy paste this code so it's easier so from the first menu let's just copy the buttons because here we will also have the buttons and just for the first item let's set the value to 20 to 12. and let's create a new method once this one was called on sort updated and the new one is going to be called on items updated okay this one also doesn't return anything it just updates divide the value here so it will receive the count which is a number and it will update this dot items show count to equals to count okay and we can use this method now to update this to this value so instead of on sort we will call on items updated and here we will pass value of 12. okay here but let's add a couple more more items so the second one is going to be 24. 24 and the last one is going to be 36. so if you have any other preferences on how many items would you like to show on the page you can add them here let's save that up and if we try we can see that this updates the values like expected so right now this is static it doesn't change any data because we don't have any data yet but later it will update the number of items that we have on the page okay and the next thing which we want to add we want to add additional div and additional buttons where we can change the layout okay so we can close this div and let's add another button and this button is going to hold the matte icon and this icon it's going to be called a view list like so here and let's copy paste this two times the second one is going to be view module and the last one is going to be called View County and we get these three icons and right now they are static right but later on they will you know update our layout so what we can create the method which that we will use to to update our layout so let's create that on columns columns updated it perceives The Columns number which is a number and this doesn't return anything so return type is void here uh then we want to emit this value so we actually need to First create event emitter so let's add output and make sure to import the output from the angular core this is the way how you send the data outside of your component to parent components so create output and let's name it column columns count change like so and this will be new event emitter coming and make sure to import it as well from angular core okay and it will send a number so this is the number of columns you want to display in a row okay and what we can do here is basically just call this dot columns count change and just emit the number that we receive from the template like so now let's call this method inside of our HTML file here on click so here we have view list on the first one we want to show only one item per row okay on the second one I want to show three items per row and on the last one I want to show four items per row oops here make sure to put them inside of the parentheses and now we can catch that value inside of our parent component which is the header component so here inside of the app products header we have new events and that event is called uh let me just check what is the exact name columns count change okay and this is the event columns count change and when we call that event you can call new method on columns columns count change but we need to create this this method inside of our home component here and we will we will need to create a new variable which we will update and use inside of the inside of our layout you can set you can actually remove these styles we don't need the Stars here and let's create a let's create a new variable so the new variable is going to hold the number of items that we have per row so the columns that we have parole is three that is the default right that's right and what we want to do is basically to update this so This dot count these dot calls actually calls is equal to and we need to receive the cost number calls number which is a number and this method doesn't return anything so again it's void and these calls basically receives these this new number right and yeah I think that should that should so let's just try if this works we can go and open up the home component and inside of the global content you can just place the variable here and as you can see the default value is three let's see if you click on this one it should show one and if you click on this one it should show three actually Four yeah and on the middle one you should show three like so this works as expected so we can continue now and build our actually we can first build our categories or the filters on the left side okay so let's create another component and let me open up the terminal again here so inside of the components folder app pages home components folder let's create new one NG generate component and let's call it filters like so it will take a couple of seconds okay so it created a new component and it updated Source app app module so once again let me show you it adds new components inside of the app module so I don't have to do this manually so this is the beauty of the angular CLI and inside of the components open up the filters so this is the new component that we just created and again let's remove the styles and let's add external template URL template URL and we will create here new HTML file let's call it filters Dot component.html so let me copy this name and here in filters create new file with the same with the same name that we just placed inside of the component decorator okay let's first create Gories categories array so this component will hold the list of the categories that we can use to filter our our products on our website so let's create some dummy categories later on we will fetch this from the API so let's say shoes maybe Sports I don't know something that will you just need something to use into iterate through inside of our HTML file okay let me close the other files so we are not confused and then we will use another material component and it will be called matte expansion panel you'll remember this one so this component basically uh it's like a expansion penalty set so you will just see the name of the title of this panel and once you click on it you will expand and show you all the items inside of it so this uh let's show this panel only if we have the categories so NG if categories like so so if the categories do exist and they are not undefined show this otherwise just hide this panel inside of the matte expansion panel let's add matte expression expansion panel header let's remove this closing tag and let's add a new one inside of the header you just want to add a title which is matte panel title and it will be called categories like so okay let me remove caps lock and we'll have another matte selection list okay this is another matte tag selection always and it basically shows the the elements in the list so and it will it allows you to select one of the elements from the list and we want to be able only to select one item so that's why we need to pass the multiple multiple uh input false attribute so if you click on true here for the multiple we can select select multiple items inside of this math selection list okay and here we have Matt list options like so and we want to Loop through the categories array that we just created so create ng4 and call that category of categories okay and set the value to be a category like so and inside of the this option we want to display a button and just place the category here like so if we save it actually there's one problem with this because we haven't included this component inside of our inside of our sidebar so that's the problem now take the selector and go inside of the home component HTML file and instead of these filters you need to place this component okay now we will see it okay there you go and if you click on the categories it expands and you get the shoes and the sports okay now we want to emit this value so once you click on like on the shoes on the sports as you can see you only select one of the items and we will have more items here more categories but once you select on the item we want to emit this value to the parent component and we can use the data to fetch the categories right so let's do that inside of the template here you can create new method yeah let's call it on show category on show category this one will return nothing so the term void and it will receive the category which is just a string and this string needs to emit this value so let's create new one and let me import the output from angular core like so and let's name it show category okay which is a new event emitter the event diameter okay and this one will receive the string actually with emit the string let me close the folder so you can see it it will emit the string and let's import even emitter from angular core as well and now when we call this method and then we pass the category we can emit this value so let's call this dot show category dot emit and pass category okay and let's call this method inside of our HTML component here inside of our button let's call click on click event call our method and pass the category okay now we can test this again uh the event name is the show category so here inside of our home component we can call this method show category and we can create new method that method can be called on show category and just pass the value I usually pass the value from the from the child events as event this is the parameter okay and inside of the TS class let's add this method this method again is not returning anything so it returns void and it needs to have one parameter which is the category and let's call it new category cut category like so and it will be the string value now uh we need to add the new property so let's call it category and let it be value string and undefined so it can be when you don't Define it initially it needs to take uh either of these two values so if you initialize it right away it can be just string but if you leave it undefined you need to add these values that are undefined okay so here we call this dot category and we assigned it new category value and we can just use this value to test it inside of our home component the same area how we are testing the columns Let's test category and once we click on one of these elements we should see these values inside of our component choose Sports it works as expected now the next thing which I want to create on the home page it's I want to display the product boxes here and it should and that should do it after that we should fetch the actual data and display it so let's just to sum up what we created here we created this card uh menu and actually I see that we are using the two SIM icons so that needs to be fixed uh this one is for removal of the cards and this one is actually for proceeding to the checkout so open the products header and any side of the products header no actually it's not inside of the product Setter it's actually in the header component so inside of the components folder Source app headers we have here components we have here the icons and one is remove shopping cart and the other one is also remove shopping cart so it needs to be just a shopping cart Let's test it yeah so this one should uh route us to the cart as you can see here and not to to remove the shopping cart yeah okay so we fixed that back so just to sum up we created this header with this uh Home Route link we created this card which shows the items we can go on a new the card you can remove everything from the car and you can proceed to the checkout and actually this is all static we just need to be implemented we added this sort menu we added this show a number of items menu we added this layout buttons and we added the categories on the left side now like I said just add the products on the middle and let's proceed to the next page and now in the home component HTML file let's remove this category variable and we'll add a wrapper to your product box component so I'm gonna use matte grid list component and this component basically is a grid so you just pass a tile child component and it separates them into columns and rows that's all it does so we want to set the gutter size which is actually the margin in between these elements so cutter size to 16. so it's 16 pixels for number of columns we want to change this dynamically depending on the buttons that we click here on the first one we want to have the column number one per Row in the in the middle three per row and the right one four per row but as we created this this variable dynamically already so we'll just passed the columns this variable and for the row height we also want to have this dynamically updated so let's create new variable named row height and let me go to the home TS file and here we have columns that error being three at the moment but we are updating the columns here so for the row height let's just create a new object that we can use to map the heights so create a constant named Ros core height and this will be an object and this object will have three values so the first value is obviously when you have one one column selected or one item Purl and it will have a height of 400 right then the second value is when we have three items per row and this one we will have height of 335 and the last one is when we have four items per row it will have hypo 350. let's decide the type so the type is in object basically and the object has an ID number this is a key and it has value as number okay just set up the view wrap word wrap so that you can see okay now what we want to do is we want to set the row height depending on these columns here so we can use this constant foreign called this dot calls and as default one is three so we will have three columns as default the default height is going to be 335 but once we update the on column count change we want to update this value as well so we will basically call this assignment again and make sure to use this to refer to this variable here so this way we are getting updated narrow height dynamically as well here okay any side of our matte grid list we want to add another math component which is a child of math grid list and that is matte grid tile okay and we will use this one to Loop through the products array once we fetch them and now we want to create new components so let me open up the terminal here and change directory inside of the source app Pages home pages and components and inside of this uh folder let's create NG generate component and the name of the component Let It Be product box so this one will hold all the informations for the products in image a title description all these things that we want to display about about the products so as you can see it created a new product box component and and it updated app.module.ts file okay let me close that down and we can go into components folder and open up the products product box folder here what I want to do same as with the other components let me just remove this boilerplate and we want to create new components uh HTML file so product Dash box that component dot HTML okay and let's include this external HTML file so template URL is name of the property and make sure to refer to the current directory like so okay and we can close that now we can include this component so make sure to use the selector and include the selector inside of the home component in the math grid tile okay here you can close the home component and we can open up the product HTML file and let's close the other so that they are not confusing us okay so here again we're gonna have let me just enlarge the browser and you will have MAT card as the wrapper again obviously let's add some class so we want to add text Center to the math card because I want everything to be centered the title of the description and all this information okay so let's add another div and inside of this div let's add an image okay this image is going to have a class MB 1 which means margin bottom one and MX Auto which basically adds an auto margin on the left and the right side and Center is the image okay for the source okay and for the source you can use placeholder images there's a great website for it and just type in the source like so https colon forward slash forward slash via DOT placeholder.com forward slash and this is the actual size of the image that you want to put in I just put it like 150 but you can put whatever size do you want you know so and you basically get like a square well and you get the values of the image inside of it it's very useful if you want just have the placeholders while you're developing something okay and let's add height to be 200 pixels okay and this is how to add a custom height to your properties H stands for height and this way inside of the brackets you can add a custom value this is predefined value and this is the custom value custom value okay let's save that and this changes uh the image size okay now next to the image let's add another div and inside of this tip we're gonna add information about the product itself so let's add a class and set the width to full so this basically sets the width to 200 percent okay and inside of this uh do let's add another div in here let's add category of this product so let's name it shoot maybe okay then let's add a paragraph below that okay now let's add a class truncate okay and hover white space Dash normal okay what this does is basically if you have a text that is longer than this box it cuts off the text and adds Three Dots and when you hover over that text it shows you entire text Justin hover it's very useful when you have long titles you know so that's a title here like sneakers Maybe okay let me just change the view to Beaver wrap like so and that looks nice and now let's add another div here actually description so let's add a paragraph here and for the description Let's uh just add dummy text description and we will update that later on okay uh actually I see the text is not centered and that's why that the reason for that is because we miss here that the text the T on the end okay that's more like it and now below this div okay we want to add another div and let's set a class flex and justify so here at the bottom I want to display the price and I want to display here uh proceed to the checkout basically uh I'll actually to add to the cart so cart icon so that we can add this item to the card yeah so get a span here and let's add we use the class text Red 400. and let's use the currency pipe again to display the value of the older price let's use 150 and just use the pipe currency like so and it displays the currency in correct format and on the right side I want to add a button and inside of this button let's add a matte icon but icon okay like so and let's add icon as shopping underscore card okay and let's just change the color of this uh of this icon class and set it to text Dash Gray Dash 500. okay that's much more subtle okay I think this looks very nice so the one thing that I want to change here is basically depending on your body's the layout select that we want to change uh this layout on our product box a little bit so when we are in full screen mode basically when we only have one column like in this case one column per row we want to show the image on the left side and we want to change the description the title in all this information on the right side here so that it takes more more space actually right and the image is bigger so how we can do that is we can create an input here which we will receive from the parent component and let's call that here so import input from angular core make sure to import it on top here initialize it and add a name full width mode and let's add a default value files false because when we load our application we will have three product product boxes per row so it's not going to be in the full width mode but only if somebody clicks on this first icon it's going to be one product box per row and then we are in full width mode okay and now we can use uh this property to alter the sum of the stars that we have okay and actually before we do that let's go to the home component and we can set this property on the product box so it's in full with mode only if columns is equal to one okay okay close that so if you go now and click like so you can see that actually this column is taking the entire place right uh but it's not taking the full width so let me go back to the home component and set here the width inside the class with full so it needs to take the full width of this entire container like so but the layout is different so we want to change that okay okay so here the first thing that I want to do is I want to Center the text only if we are not in the full uh full width mode so here we can use mg class to create this conditional right and here I will add an object basically an object and inside of the object add text Center class only if you are not in full bit mode like so and I will copy this so because we are going to use this quite some time and also I want to change the height of this image so where is our image it's here so let's add again NG class and let's add basically add a add an object and let's add a height of 200. 200 pixels only if we are not in the full height so basically if we are in default mode otherwise increase the height to use the 365 360 pixels that's really okay like so and make sure to wrap that in the quotes here as well because this is the index of the object and 360 if it's in full width mode and I want to yeah put the quotes like so so let's try this okay now switch to the full width mode and you can see that the text is centered actually on the left side actually it's not centered it's a line on the left side and the image size it's bigger and if you we switch back to the default layout it's going back okay the the different layout we want to achieve and still but we want to move the image on the left side and this description on the right side so how we can do that is we want to add for this div we want to add property Flex so let's add again NG class and let's add Flex if it's in full width mode okay like soy and you can see now it's in the full width mode basically on the left side we have this and description on the right side but we still need some some more styling because it doesn't look that great either so we can go and add some padding and the other properties so here let's add NG class okay and let's add some pot padding left in the on the right side and let's add a flex and flex direction to column and justify between okay okay like so let me just make sure to to apply this rule if you are in full width mode and make sure to surround these classes read the quotes and that you're spelling is correctly so what you're doing here here is we're setting this div to the flex mode or basically display flex and the flex direction is two columns it's not it's not for rows and we are just basically justifying in between if we save it and test it okay that looks much better he has some space around it much much better and I think basically we're done except the fact that I want to display uh this description only if we are in public mode so go to NG if this is going to be easy only it in in full width mode so when we are on default we don't show the description and when we switch on it on the full width mode we show the description yeah okay and that's all I wanted to do now let's test the layout and how it looks if we go to the home page and let's copy paste it this metric tile a couple of times I'm going to just copy it like so okay let me just copy it I'll lose focus for like five or six times like so and let's see what we got okay so as you can see this is the default layout where we have three items per row and if you click on the first one on this layout we get one item per row and we can click on the third one we get the four items per row and this looks uh and it looks and works as expected with this we basically have completed the home page so we created everything uh which which is static here but the only thing that I want to do here now is I want to implement the API apart from this page you will have a card page and actually we can first go and create card page because maybe we should start first with implementing all the static files first and then we can dig in into developing uh and integrating the API into it so let's do that first let's create another page okay so let me close all these files and let me open the terminal let me see where we are at in the directory and let's change directory to the pages so City a couple of times and now we're in the pages director here we want to create new card components or actually a new page component so run the command NG generate component and call it cart okay it will take a couple of seconds to generate it like so and once again we can close everything and we have this card component so what we want to do here is we want to set the routes you want to set new route in order to load this page so let's just copy paste this first route and change the path to be car the component that is going to load this is going to be cart component make sure that the car component is imported at the very top here okay and close that we can close the terminal as well and now let's open up the cart component and let's test it out this route so if we click on and now navigate to to the card you get this card Works which is actual html text here right so once again remove the Styles and let's give an external HTML file okay so template URL and make sure to navigate to the current directory and we'll call it cart dot component dot HTML okay and let's create that file like so okay well on this component we're gonna create uh basically material table and we're going to display all the information before the user goes and buys the product so we need to create at the moment we don't have the real data and we don't have the functionality working for the cart itself so we need to create a dummy card object and let's do that so we will have a card which which is going to be the card a card of type and we don't have this type yet but it will receive the items already so let's create new folder inside of the application and let's call it models make sure that is inside of the app component not inside of the pages and here we can create new file for the card so basically in this folder we will create definition for our interfaces and create new file and name it card.model.ts okay and the first thing that I want to create is export interface just shrink this down enter interface card item okay and this card item is going to have a couple of properties so product is going to beat up string name is going to be type shrinkle as well price is going to be type of number quantity is going to be type of number and the ID of the card item is going to be number as well so here we are making the definition of our data that we're going to receive and pass through the application and we're gonna export interface cart this is the one that we just used in our card component and this one is going to have the items array so it it's basically array of card item that we just created here okay and with this we have created definition uh for a card okay so we can import that here add import from Source app models car dot model OKAY like so you can save it and now let's actually create uh some dummy object you can just copy you can copy the object definition from here so it's easier for the product let's just say choose or actually uh the product is going to take the image of the product so let's just copy the placeholder that we used before here okay the name is going to be sneakers price 150 I'm making this up so party one okay make sure that you format the subject correctly and for the idea let's add the ID to one as well okay like so so we have Now default object okay and what I want to do next is we want to add a property that we will use inside of our our table so that property is called data source and this property is going to receive the card item array you know like so and make sure to Define it as a rate okay and let's assign it to empty array at the beginning right and we can assign in inside of the NG on and it repeats the data source is equal to this Dot card dot items okay but once we hook up the API we'll fetch the data and then we will feed this data source from there okay the last thing that I want to add here is I want to add the columns so displayed columns call displayed columns okay and this is going to be type string array well like so and let's just create this this array okay so these are the columns that we are going to show in the table so we will show the product name second one I mean I could copy paste but yeah this will work as well price uh the next one is quantity okay the currently the next one is going to be total this is the total amount that the user needs to pay and the action uh column in this column we're going to display a couple of buttons so if if user wants to remove the product from the table from the cart actually okay let's save this and let's open up the cart so now we can start creating our table again you already know we're going to use math card for a wrapper and uh we will only display this ngf the card.items.land is existing so basically only if we have uh you know the length of the of the card items otherwise we want to show a message to the user so let's copy paste this that user needs to buy something in order to get uh display to this product right so what we can create here and you can add a paragraph that says your card is empty and let's add a button where you can navigate back to the home start shopping and let's set it matte raised button so basically we are assigning raise button so uh quest to it and router link so that they can navigate to the Home where they can see uh the products so let's change the layout to wordbrap so you can see everything and if I save this for now as you can see the card items length is empty and basically it's not actually uh it's it shows both of these uh cards because we use where the card item length exists we want to show this only if there is no card item land and about how we can test it is basically we can just remove this this first item that we have in inside of the this array and we should get yeah we should get this and we get redirected here how we can get back is we should click on view card because we assigned the card route here okay let's give back this product to the items array and we should see our card which is empty because we haven't created anything yet there so let's start creating our table okay so let me shrink this and here on top let's create table let's add a probably math table like so and data source here we will pass the data source that we created like so and let's add some classes so let's add a class Matt elevation elevation a lab C8 this is going to add you need to make sure that you spell correctly otherwise it's not going to be applied in the application now this is going to add some Shadow on below the table Yeah and set the width to full also I want to add a container to our matte card so I can add class actually the maximum width of our container so add a maximum width to 7 Excel this is the same as we did on the home page and let's Center it so use the MX Auto and this is something which we can use for the bottom red card as well here so if we go and check out here if you enlarge actually you cannot see it because it's big but here you can see when it's on 100 basically it's not taking the full width of the window it has the maximum width okay like so okay and now it's on inside of the table let's add the First Column or actually we can first add the rows so we'll have actually three type of rows first one is the header the second one is the regular row and then and the last one is the footer so table row here and the first one is going to be format header row like I said this is for the 40 table headers and it also needs to have that head row definition so Matt another row definition and this one is going to be the display columns that we created here okay I have a typo called like so columns here and make sure to add the to Matt had the row definition here okay let's create another one so the next one is going to be for the regular table row so Matt row and again we we need to have Matt row definition and here we're gonna Loop to the items so what we're going to do is we Define let row and basically columns are going to get information from these paid accounts here okay and the last one is table footer so again Matt footer row and we also want to give it a definition matte footer row definition is equal to these plate columns so these are the placeholders in which we are going to render our uh table data right so table cells actually so this is what you want to create first and now you can go and create these columns so let's create NG container like so and the first one is going to be product so matte column definitely it stands for definition it's going to give you a product this is the the key that you're accessing the data source so it needs to match with these columns basically from the items itself so if you want to display a particular property from the object you would use this math column definition here now you can access that so let's add a table header for this one and let's add a definition to it so matte together so this is important in order to add all the functionalities that Matt's table has so you when you add this this property to it it can add additional like sorting or filtering all these things that material table has so that's why you're writing it and you want to test match together cell definition okay and for the title we're gonna say this is going to be product and now let's create a table at the actual table cell and for the table cell you need to pass the math cell and again Matt cell definition and we will go we will Define what is the name of the element and we'll just call it elements and this is how we access the property from the object with with this variable that we Define in the math cell definition okay so we can we can open the image image attribute image of our element sorry and the source is going to be element dot product so this is the product property here so we will access this one this URL element of product okay and make sure to surround that with the curly braces so that you are inside of the angular expression let's add an alt as product and let's add some classes class make it width to be 100 pixels okay let's close that bracket and let's add some margin on the top and the bottom to five pixels okay and let's create a footer photocell so 3D let's add again matte footer cell okay let's add a definition for this footer mat footer cell definition and you can only this amp you don't have to assign anything to it so in the footer we want to display a button here which will say continue shopping basically Matt is going to be the same but we can just copy paste it from this one but we will update the text to continue shopping instead of start shopping okay continue shopping like so let's save this and see what we got okay uh we don't get anything displayed in our table let me just check the console okay I have some error so let's debug it together and the reason why we are getting this error is because as you can see here we Define these paid columns and we are defining name so it reports the name error because the product has been found here if you have the medical on the finishing product right but we are missing the name so if we go and remove these products here these columns and just comment them out we should get the first column right for two to make the table work as we as we expected but as you can see the first column has uh the table header here product it has the table cell with the image here and at the bottom in the footer it has a button that says continue shopping like so so let's uncomment these others and let's add them okay now let's just copy paste this container and for the second one the definition of the column is name the title of this one is going to be name obviously instead of the image we want to just display the elements dot name okay and what we can do here we can just copy paste this one a couple of more times actually uh yeah for the bottom I don't want to display the continue button again so let me remove this button so for the footer cell this is going to be an empty right and uh for the for this one as well I want to apply some style because some names of of uh particular products could be very large very long actually so let's apply uh one class so that we can actually truncate the width of the of the title so let's add phone k and the maximum width is excess so we are setting here the maximum width of this element and if it's longer than this maximum width it will just cut it off and show the dots that's what I wanted to to display now I can copy this and paste it so the next one that we need uh is price okay so the title the column definition is price the title is price as well and here instead of the paragraph I mean we can use the paragraph but let's just add the property price and let's use the currents but as well or we can even remove the paragraph because we don't we don't need to apply any Styles whatsoever okay and let's copy it again the next one is quantity let me copy that so the math column definition is quantity the title is also quantity with upper first case and the property is quantity but we want to remove this currency pipe here okay let me copy this one and paste it the next one is total okay so the marathon definition is total the title is total as well and here as well for the toll we just want to add element dot total like so and on the footer you actually want to display because we will have on each row the total amount how all the prices and on the very bottom we want to display the the total grand total amount so let's just add a here let's just add new span here let's add some class font Dash ball so make it bold add some padding five and let's now let's set the display to block in order to apply this padding and so we need to set this block and we'll create new method get total and we'll pass the card dot items and again we will use the currency pipe make sure to wrap that inside of the angular bracket so it's in inside of the expression okay and let's define this get total method inside of our card component so here so this method is going to return number and it receives in items which are type of card item array okay and what we want to do is we want to go and map items dot map and here we can access the item and what we want to do you want to take the item price and multiply that with item dot quantity so here what we are doing basically is we are going uh looping through the items and we're taking the item price and the quantity that it has and then we want to add all of that so we can use reduce and instead of we reduce we always have the previous value and the current value so and all we are doing here is basically taking the previous value and adding the current value on and we need to set the initial value here which will be the zero okay and it shows the error here because we are not returning the number you so we will need to add return in order to satisfy satisfy this rule okay like so and now we created this method let me just indent it a little bit so let's start in the same line okay and so using this method we are getting the total price total price for Insider uh card basically not not just per product and row but for the entire you know entire card yes okay let me see that was the total and last one is the action okay so let's actually copy paste previous column and let's copy paste the definition so it's action and for the title we don't want to say we don't want to add the title actually but we want to add a button here so let's add a button and we will use this button to clear to clear entire card clear all so to style it let's add a matte raised button so this transforms the director button into matte matte button and let's add a color worn so that it's actually red color worn and let's add a class float right okay so let's save that let's save this one foreign and we get our table as you can see here what I wanted to add a part from the buttons on top I want to add buttons Pro as well here so let me just find that so here instead of the element the total okay I can remove that and here on the bottom I can remove the total as well here and here we want to add an icon so basically inside of the button and let's add a class off Matt Mini Fab okay this will give us like a small button with the rounded style styling okay and let's add a color worn so it's red and let's set a class float right like so and the name of the icon is closed okay so we get actually yes the name of the icon but we need to import the matte icon element and just name it as close and we get this button nice and styled okay and if we go and just let let me try and copy paste this product once again like so and change the like the ID to two for example we will get two items per row and we can remove you know each and one of them okay one thing I'm noticing here actually is that we are missing the total values here so these need to be total values per row so if you have quantity like two or three or five and this is the total value that you're getting so if we go go to them to the total column actually can see that we are using element total and that's something that we don't have so what we want to do here is element dot quantity like here times element dot price and let's format that in the currency pipe as well okay and let's wrap it to the apprentices like so and now let's test it and as you can see we get the values and what if we go and change the quantity let's say for the second product we have three items this one and we get 450 the personality is 150 quantity is three and now the total price is getting updated but ideally uh to increase the quantity we want to do that here so let's add a couple buttons so that user is able to update the quantity if you want so let's wrap the spam with the quantity and let's add a couple buttons here so let's set a button for removal of the for reducing the quantity and let's style it with matte icon button like so now let's add matte icon inside of it and the name will be removed okay like so so that user can remove and let's add another one afterwards and let's call this one add and actually this is the actual name of the it's not that we are calling it like that so is the actual name of the button okay and you can see that this sneakers is not actually online with all of this element and the reason for that is that we are using the paragraph So and it adds some margin on the bottom what we can do is we can change this into span here and and it gets aligned and make sure to add actually we can we can test this so let's see if it works or not so let's add some gibberish long text and see if it gets cut off as you can see it doesn't work the reason for that is we need to set the property block to it and now it works because the span by default is not a block element so okay it doesn't work okay let's just remove this rubbish tag and let's add the element name and don't forget to add the block display block property okay the last thing that I forgot to add here I think this looks nice the only thing that is missing is we want the actual button to go and to you know do the actual shopping right so to proceed to the checkout so let's find the actions here actions column and for the footer let's add the button for that let's add a button and this button will say proceed to the checkout okay it's gonna be uh it's going to be math raised button and it's gonna say Pro seed to check out you can make this one uh color set the color to be primary so it stands out and let's float it to right so let's add a class quote right okay let's go back to card and here we have the procedure checkout okay instead of implementing the API first I think that it makes much more sense to First implement the logic of the card and when I say the card I mean uh let me just enlarge this and when and when I say card I mean by adding and removing the items from the card right in reading them on different places for example if you want to read the items from the card here on the menu and we want to read them here as well on this card page so let's Implement that okay uh let me actually minimize this entirely and we can focus more on coding here so what I want to open here is I want to open the home page and on the home page with your product box here and I want to add a new event basically so on this button which is basically this shopping cart here I want to add this product information to the new service that we will create just in a bit okay so let's add a click on quick event let's call uh on add to cart okay now let's create this method so let me close all the other files let's open the typescript file here and let's add this method so this method is not going to be returning anything so the return type is void and we are also not passing anything so what this method does it's going to emit the product that we are going to get from the input but for now as we are not getting uh as we don't have anything we are not catching the actual data let's create this product as uh as a diamond datum and the type of this product is going to be product but yes we don't have this product uh interface created yet let's do that so inside of the models create new file and name it product.model.ts like so okay and now let's create new interface export interface product and this interface is going to have an ID with step number title which is type string price which is type of number category step of string description which is type of string as well and the image this type of string so these are all the properties of the product that we're gonna use and we're exporting this make sure so that you are able to import it in the file that you need so here we can just go and import it on top so import product make sure that it's imported and now let's uh it can be actually product or undefined because once when we implement the API we will pass this uh through the input same thing as we are doing here here with the full width mode and while it's fetching the data this product can be undefined for a little bit of time right but now let's uh create an array which is a dummy data and we can just copy from this product the object definition so it's easier to create this object number let's add one title what we can create we can create sneakers sneakers price 150 by the way I'm not sure if the spelling of synchronous is correct so sorry about that if it's not category shoes description I'll just put the description board and for the image again we can use the one that we are using here placeholder okay so instead of this string let's put this placeholder and like so okay now what we can do is we can go and use this product to emit but in order to tell me this product we need to create event emitter so let's add an output again this is the way how you communicate uh with the child and the priority component okay output and we will give an event name to add add to cart which is a new event emitter okay and make sure that you import both of the output and event emitter on top here from angular core and what we can do we can call this dot add to cart and emit our product this dot product so it basically means that somebody clicked uh on this shopping cart and he wants to add this this product to the shopping cart yes so now we need to catch this this method in inside of our home component so let's go to the let's close these components and inside of the home component let's scroll to the product box actually we can remove these ones and we will create Dynamic ones later on so from the app product box okay we have new event and let me set the view to word wrap as well here so that you can see all the classes okay and the attributes okay so we will get an event which is called add to cart and we want to create new method here on add to cart and for all the events that I'm passing from the child I'm using the same attribute name which is called the event that's just naming convention that I like to follow but you don't have to obviously now let's create this method now it will try an error because we don't have this method created yet so on add to cart and uh this method is going to return nothing so the written type is void and we want to create a new basically service that we are going to be using where we can store the date the actual data so let's do that inside of the app folder let's create new folder and call it services okay and actually let me just comment that this is how to cut because it's showing us an error and it looks like we are doing something wrong I don't like to see errors okay let me open up the terminal and let me see where we are at so we are at the pages so City on the upper the right directory and change into Services okay and here we want to let me just clear the console and here we want to generate NG G for Generate service so s is for service and the name of the service is going to be cart service okay let's take just couple of seconds to create this service okay so it created this card service but you can see it hasn't updated the app module so we will need manually to import this service so if you go to deep Services you have the card service and what we want to do is we want to go to app.module and we want to inject our service in the providers array here and make sure to import from the card service here so so that we can use it and it's imported here on the top okay I can close the terminal and save this up close the module and now we can import this service or actually we can first Define all the things that we want and that we need inside of this service so service is going to hold one property that will be used across our application so it will be named cart obviously and it's going to be new Behavior subject here and you need to import it from rxjs okay and the type of this Behavior subject subject is going to be card so the card model that we defined in the in the models card dot model okay and we need to set the default value which is going to be uh object with empty array of items like so so why how do we use this card uh Behavior subject is basically it holds the initial value and once we update for example we add new products to the card it just adds new value to these items array and in every single component that we want inside of our application we can subscribe to this behavioral subject and we can receive the new values and update the UI that's how it works okay so in this card service we want to add a snack bar stack bar components so we will use private underscore snack bar and the type of this uh Services called math math snack bar like so so make sure to import it as well here on the top and what this component or service actually does it displays the information to the user so once we add the product uh to the cart we want to display the information that we have successfully added this product right so now let's add a method add to cart this is the method that we I was talking about so this method is not going to be returning anything so the type is going to be void because we're just going to update this card uh object and we're going to emit uh but we're gonna have a item receive and the type of the item is going to be card item okay and make sure again to import it on the top so now we're gonna create new items array and this is going to be because we don't want to affect uh this default this original card object so we can destructure that object and create new array and we can just go reference to this Dot card dot value we're accessing this Behavior subject with the value dot items okay like so here and now we can find the actual item because uh when we're adding items inside of this card we could be adding the same product multiple times so we just want to increase the quantity and if there is no such product inside of the card we just want to add it right so let's do that so let's define const items in car so we are trying to find if there is there is this item already added in the cart items dot find and here we have an item and we're just gonna check if the item the ID is equal to the item that we passed here it's argument dot ID so if this find method finds an items an item it means that this is not going to be null or undefined so we can check here if if it exits if it already exists in the card in the card we just want to increase the quantity so let's just item or actually this is not multiple this should be a singular item in card so if item in card is there just increase the quantity by one let's use the shorthand plus equals one otherwise we want to push this to the items array so otherwise we want to else we want to use items dot push this item okay so otherwise you're pushing this new item to this items array in all and what we want to do at the at the at this very end this Dot card we just want to emit this value so that every single component that is subscribed to the card can catch that value so please Dot card dot next and we can emit the object with items so basically this is the exactly the same as writing items or items but the shorthand is just to remove the key and value and you get the same now what we want to do is we want to open up the snack bar these third underscore stack bar this is that service that displays the user's information so it's very useful and we can for the first argument we want to pass the text one item added two card and the second argument you want to pass the text that you want to show on the button so let's say okay and the third argument is object and we can set the duration of the of this uh popup of the stack bar so after this amount of milliseconds it's gonna close so let's set it to 3000 which means three seconds it's gonna it's gonna stand there for three seconds okay and now let's just uh console.log uh this Dot card dot value okay so that we can see in the log what we're updating and here inside of the home component we can inject the service that we just created okay so go to private card service and imported card service okay so it's important on the top from Source app services card.service and now we can use this service okay so here I'm going to add to cart we are actually receiving the value here from this event from App product box okay and this parameter is product in the type of this is product product interface that we created as well here it's imported on the top in the models product model now what we want to do is we want just to call this dot servicecardservice dot on add to cart and we want to pass an object okay so the product is different from the cards card item so we want to uh send different parameters or actual properties so the product is product product dot image the name is product dot title and this is the beauty of the typescript you'll get all the properties uh you know show it to you so you don't have to think about them the price is product dot price quantity quantity is going to be 1 because we are just setting one item and the ID is going to be product ID dot ID okay and if you're wondering why the naming Convention of this uh interfaces is like this is I'm I'm mapping uh the API that I'm going to be using and that we are going to be using in this tutorial uses these exact name fields so this is how I created this object so that they match the API data contracts so that's why that's the reason for it okay so now let's go and save this home component let's say the HTML file and let's try to add an item to the array so if I go and inspect we should see uh the value of the card okay let me clear the console and enlarge so you can see it if I click on one item has been added to the card and we can close okay or actually close this out to three seconds and we get log from the card service if I expand the items we can we can see that inside of the items array we get now one product and we get the all the information that we passed now let's test if we click again we should get still one item but it should increase the quantity to two Okay let's try that so let's click again one item added to the card okay and let's see we again get uh the same log from the card service and if we expand it we can see that the quantity has been increased to two so this works as expected okay the next thing which I wanted to do here is I want the actual card menu to be updated because as you can see we added two products but still it says here one and we want to make this Dynamic and to Loop through all of these items and to show the actual price here so let's do that so where we can handle it all of this using the cart components so let me close all these files and let's open up the header components in the app folder and let's open up the headers here and what we are going to have in this component is we're going to have cart which is going to be subscribed in the home component and passed in this header component so will help private underscore card this type of card and let's initialize the default values so it's going to have the items property which is going to be an empty array at the beginning and make sure to import a card the another thing that that we we need is the items quantity as you can see right now we are displaying this static one value but we want to update that based on the number of items and the quantity of those items in the in the in the card itself engineering is not going to be used in our in this component so we can actually remove it if you want to use a little bit of cleanup and here we want to receive the actual card so we will have an input let's initialize it so make sure to import the input and we will create a getter and Setter that's why I'm using the underscore the card because this is the naming convention that usually programmers do when you have underscore card it means that this is the private field okay so we will get set here together so get our card which is type of card and we'll just return this uh underscore card here so this is the getter and now let's set the setter so to set card fill the receiver cartridge type of card and here we will set this card equals to the card and also every time that card changes we want to update this item quantity if we don't have a field for iOS quantity so we need to actually create this logic so what we can do is we can you can use this item quantity and we can Loop 3D card items colored items and what we can do is first we get the object with different fields but we only need the quantity here so so what we need to do we need to add that we need to map our item and only get the array with with the quantities so item dot quantity so what we are doing here is basically using discard items array and instead of the objects we are transforming that you only have the quantity and then we can use that quantity to add up and get the final items quantity so we can use reduce to do so and again reduce uses the previous and the current values as argument and you need to set the initial value which is zero in this case and all we do is we use and add the previous value with the current value and we get the final quantity so again views the items array which is basically a array of color item objects let me transform that into array of only quantities and then we just add them up right and that's how we update the items quantity okay and now what we can do is we can go to our HTML file and we can update let me see where is our okay so here we have actually one items and we can update this value to be the quantity items just copy the property name and it's quantity like so and for the Mad badge here we can also add this value so it's Dynamic okay so at the beginning is going to be always zero and we want to check if it's zero we don't want to display it so set the map that you can use this property for that math batch hidden equals if if there is no out of quantity so it should it should hide it okay let me just see okay I have a typo here I have uppercase i so let's say again and as you can see it removed this icon okay what we can do here is we can check if uh do we if we have items in the card then we want to display this this part if we don't uh we don't wanna so let's add NG if basically uh we want to say NG if if there is uh sorry card dot items dot went like so only if there is car items dot Lan we want to show this uh this this div and now let's Loop through record items and display this information so what we can do here you can just use ng4 Loop or equals let item of card. items in here instead of the keyboard you can use item Dot name and here we can use that in the quantity item Dot dot quantity like so and here instead of the this hardcoded price we want to use the price or actually just item dot price like so okay and for the total here we want to use the get total method that total method which we actually created already in the Pro in the card component so price card actually item.car.items here card dot items what we need to pass is we want to pass all the items to the get total method so that it can go Loop through all of them and calculate the the final value right and let's use this method let's create this method so inside of the header the total this one it will receive return actual number and it will get the items items away of items which is actually added this type of array of card item okay net card component card item okay like so and what we want to do here is showing the error because we are not returning anything what we can do is we don't want to duplicate the code that we have so we can go into Pages card and card component and get this method which is already created get total here you can copy it inside of our service and access this method from two places so here we can add this method and now inside of the card component you can call this method so let's add private underscore or actually card service and name it card and add the type of the card service make sure that the card service is imported on top here and now we can instead of and Define this method we can just call this uh start service method so return this Dot card service and return the method that we just created get total and plastic items here like so and we can create this exactly the same method in the okay let's save this exactly the same method here in the header and it will receive in return uh the the total amount okay so what it's reporting is that we haven't imported the card service so let's do that private cart service right private means that we are going to only going to use this inside of our class component we're not going to use it inside of the HTML so if you want to use your services inside of the HTML you would avoid this private keyword okay card service and let's add the definition of the cart service and it and make sure again it's imported on the very top here let's save this and let's save this and the last thing that that I want to add here and since we are on the shopping cart let's add a method for removing or actually clearing the shopping cart okay so what I want to do is I want to add a new method here on your move shopping cart so when you're on click event let's add uh on clear card this method is not going to receive any argument because you just want to empty the card animate on clear card okay so and we want to let me say this and I want to create a service inside of the card so that actually it can be used on multiple places okay let's go to the card service I can remove this log that we had before and here let's create this method here this method is not going to return anything it's not receiving any arguments so the only thing that we are doing here is here is we are emitting the empty resetted value for our cartilage so we will just call the next with items array empty okay like so and we can display this information to the user this style snack bar dot open card is clear and again let's add okay text for a button and let's set the duration duration to 3000 milliseconds or three seconds if it's easier for you now let's just call this method inside of our add a component here please Dot card service dot clear card okay like so and now we have completed everything except the fact that we are passing this card object so we need to subscribe to our card service for this uh actually for this Behavior subject and we want to update our menu as you can see right now this is empty but if we add something to our cart we know that it gets added because we logged it and tested before but if we open up our card it's not getting any values so it's because we are not sending this card object uh to this to this component so where we need to do that is close this header component and open up the component where this scatter component is placed and that's inside of the our root component so that's inside of the let's just in the app component here okay we have here app header you can remove this title we are not using it and we can create new cart property in the name and the type of this card property is going to be card and let's add the default values like we use yeah but like we usually do so the items array like so and it's empty array now we want to implement the NG on init life cycle hook on on in it and make sure that it's imported from the angular core now let's implement it so here energy on connect this basically method runs when the when the components are starts initialization okay and we want to include our card service in the Constructor so let's define the private cart service this type of card service here and again it's being imported on the top and now when the component is initializing we want to call this Dot card service and we want to subscribe to our cart property so subscribe there and it will receive back a card once it gets updated and all we want to do is we want to update our card property here this card is equal to cart okay and now what we can do here is we can use this card and pass that to our header component and that's exactly here so cart is equal to uh card let me just created okay and let's test this out so now we should get this card component updated as well so if I click you get here notification that actually we get one item added there and if we open up we can see that we have one items and it's basically sneakers quantity one and this the price and this is the total price let's try to increase the quantity so we have added another item we get the quantity to two and we actually see that we added a quantity two so let's see if we add additional product so let's say or actually I think this is enough for just testing purposes later we will try with the actual data but for now it's it's it's okay so the next thing that I want to apply is once somebody uh ask a product to the card he wants to go to view the card and here we want to update this card page be the cart as well so we need to subscribe to the card from the card uh page component as well and to Loop and display all this information there as well so let's do that so in order to do that let's close the app component and let's open the Pages folder and open up the cart component okay so here we want to subscribe to our new created cart item so let's just call this Dot card service Dot cart dot subscribe here we get back new card which is type of card okay and all we want to do here is we want to update our card with this new one underscore card okay like so and let's set the data source here two card items okay let's refresh your card is empty you're not saving this into local storage this could be a fun exercise for you guys but for this tutorial I'm not going to handle this in the local storage so every time that we actually refresh it's going to lose the state you can fix this with local storage and sell save all the information there so let's add a couple of uh items to the card and now let's view the card and as you can see we got two uh items in the in the card and it's actually displaying now this information so the next thing which I wanted to implement is let's implement this clear all so that we can actually clear this card so let's add this method so on clear card it's not returning anything because we just want to clear a card and here we will just call this Dot card service dot clear card we already Define this method okay and now we want to call this method this method on clear card once you click on the clear all so let's find this clear all button so it's under the actions here and let me grab this so you can see view word wrap so you can see everything and here on the button let's add clear all let's add a click click is equal to one clear card now let's try again so start shopping let's add one item let's view a card click clear all and card is clear and we get the message okay start shopping so what we want to do next is let's add so if I add some products here new card so let's add this clear so we want to remove only this rope so maybe we have a couple of items maybe we have like three or four products in the card and we want to remove the specific one so we don't want to clear entire uh card so let's add that method so let me just see where that method is so it's on this here on this element okay and let's add a click event here click event and the name of this event is going to be on remove unremove from card make sure it's camel kids okay copy that let's head over to the card component and here let's create a new method and it's going to be called on your mobile phone card okay and actually we need to pass an element here because we want to remove only one element so only move from cart and let's pass the supplement okay any side of the only move from cart is not going to return anything so return type is void but it's going to receive an item which is cart item okay and we will gonna create this method inside of this service so this Dot card service and we'll name it remove from cart you from cards like so and we'll pass an item here now let's define this method the card service open up the card service here and let's add this new method it's not it's not going to return anything it's just going to update the cart object and emit that so what we are going to do here we're going to receive item this type of card item let me show you the part item like so and we want to Loop through the cards uh elements so this is the card dot value dot items and we want to filter there are multiple ways in order to remove an item from the array but we can use filter for this one you can choose your own way so basically we get the item inside of the loop and you just check if the item dot ID is not equal to item dot ID so basically all the elements all the items in the array that are they don't have the ID from this item are going to pass this so we are only removing one item from the array and we want to store this to new constant and name it filter filter items like so okay and all you want to do now next is we want to update this Dot card dot next update the items complete filtered items and we want to show corresponding message to the user did these dot underscore snackbar dot open and the message will be one item renewed from car Dot and let's add control text okay and let's add duration to 300 milliseconds or three seconds again okay okay let's save this all this stuff and we can try this now so start shopping and let's add a couple of items into into the card you can view card and we remove actually this is not going to be tested properly uh because we only have one item in the card but once we are added the API you can see that we are only removing the row and it at the end as you can see it works as expected one item has been removed from the card okay the next thing that I want to implement let me just add one item again and so what I want to add is basically I want to add this quantity feature so we want to be able to update the quantity inside of our cart page so let's create it so let's first uh add the addition so this is going to be easier so we want to find this method for the quantity here a quantity and this is the button for removal and we want the button for addition okay so let's add a new event click click and on click we want to add new method which is called on ADD who wanted to be okay and it will pass the element as argument so it's this element okay and let's add this okay sorry my mouse is jumping around let me just see on ADD remove from card and foreign quantity here let me copy it and let's add this method here when you have the quantity so this method is again is not returning anything but it's accepting the item which is a type of cart item and this method has already been created so we will just call this the service card service dot add to cart and we'll just pass an item and it will go to this card service and this add to cart method and you'll check if this item is in the card if it is it will increase the quantity and since it's already in the card it should increase the quantity right away so let's start start shopping add item to the card okay now let's go and view the card and let's try and yes the quantity is getting updated as you can see and the total uh price is getting updated as well the total and here the total okay the next thing that you want to add is to remove the quantity which is not working but let's add that so let's go to the on ad quantity and let's add new event let's copy this here let's add new click event here and for this one let's call it on remove quantity one remote quantity okay like so let's copy it in here let's add this method and remove quantity is going to be similar uh like the previous one so it's going to have items what are actually the item that is called Adam his argument and it's not going to return anything okay and we are going to create new method because we don't have this method in the cart yet so but let's call it this Dot card service dot on or actually just call it remove one DT okay and pass the item now let's copy this method definition and let's create new one okay so let's here in the card service let's add new method here and this method is going to receive new items so just add item this card item and the return type is going to be void because we are not going to return anything okay now let's what we want to do here is we want to Loop through the array of the item same as we did here on the on the on the add to items but we want to Mark what is the quantity that we want to remove so face Dot card Dot value dot items and just map we access the item inside of the array here and we want to check okay if this item the ID is equal to the past item.ie is it if it's equal to this one so this is the item if you want to remove the quantity so here we want to remove item dot quantity let's use the short syntax minus minus so here we are removing the quantity but the one thing there is one Edge case we want to check if the quantity is zero so it basically means that uh this this item should be removed from the card right so if if we hit like zero if if we are like on five we just hit minus minus and it's four and that's fine we're good to go but if you are like on one and we hit minus minus we hit the zero and it means that this product needs to be removed uh from the card so what we can do is again check here if item dot quantity is equal equal to equal to zero we can actually mark this item for removal so let's create another uh variable let item or removal and this is going to be part type of cards item or undefined okay so if if this is the if the quantity is zero item for removal is equal to item okay and then once we updated this we can just return the item mapped item return like so so here we are mapping the this array and basically we are updating the quantity property and once we map uh this array we want to store this inside of the variable so let's call it flat filtered items like so and now we want to check if we Mark any items for removal and we will call the method that we already created for removing the items from the card right so if there's item for removal called this Dot uh remove from cart and pass in filtered items or actually yes I don't know actually we need to pass the item for removal so it's this one okay because we only want to pass one one argument one property and we want to update the filtered items okay with the results that we have and filtered items is returning in an error what is not accessible to cart item okay let's see so what is not assignable to filter items so what we can do here is we can set the type but actually we are not returning anything from the car so that's why it's uh showing us the error so we need to return something from the card here okay another thing that I want to do here is not only that I want to remove from the card but I also don't want to duplicate the notifications so as you can see if we add the notifications here this dot discover stack bar dot open one item removed card and let's click let's add the OK and the duration inside of the configuration object duration to 300 milliseconds you can see here and we also want to obviously this Dot a DOT card the teammate the new value right these dot next and we want to emit the items filtered items okay but the problem with this is you're calling this remove card and it's also notifying the user so what we can do is you can send a flag so uh like so at a flag do we want to notify the users or not and add here one property so notify or even update update which is equal by defaulty true and here we can check if if we want to update then I'll update the card and send the notification otherwise you will get two notifications and we also need to re uh to return something so that we actually get this value right okay so we just need to return from the remove from card these filtered items okay so return filtered items so it means that we are returning array off cards item like so and now it should work if we save it let's try now so start shopping let's add a couple of items in the card actually seven of them now if we go let's try minus we're reducing the quantity in plus we are increasing the quantity and let's see what happens if we hit the zero boom it empties the shopping cart and with this we have covered most of the use cases that we wanted for our shopping cart and the last piece of our application is left to be done is basically we want to implement the API so let's do that next so let me close all these files and we need to create another service and this service is going to handle the API request to this fixed or apis so in case you missed it you're going to be using pick store API and the links to this API is going to be in the description obviously and I highly advise you to go into reader docs there are much much more properties and more endpoints that we are going to be using in this tutorial but just in case you want to check and maybe you want to build your own version of the uh store you can go and check it out it's uh the good thing about this uh fixer API it's really easy to access all the data that we need and the Simplicity is what you want especially when you're just learning all these topics okay now let's open up the terminal and we are in the in the services folder and what we can do is we can go and type in NG generate service and name it as store this is going to be uh actual store service yes so click enter and it will take a couple of seconds to make it and once again we want to go and import this service inside of the providers array into the app module so here store type in store service and make sure it's imported on the top here now let's close it open up the storage service the service that we just created here okay so here what we want to do is we want to import the HTTP client first so this is the client that we're going to use in order to fetch the data so add the private HTTP client and the type is HTTP client here and it's getting imported on the top from the angular common http and let's add the base URL for our API request so add a constant store underscore pass base underscore URL and the URL is HTTP s which is the secure protocol or four slash forward slash fake store api.com okay like so and we want to create a get all products method and this method is going to receive two arguments the first one is the limit and set the default limit to 12. and the second argument is going to be sort which is going to be the default sorting which is going to be this which stands for uh descending right the return type of this uh this method is going to be observable and make sure to import it from the rxjs and this observable is going to return the type of product array so array product and again uh make sure to import this product from on the very top it's showing there because we are not returning anything at the moment so but we're gonna fix that just in a second so return this dot HTTP client and we're going to use get method here and this get method is going to return array of product here oops not that just array of product here let's copy that okay let me just type it in array of product okay like so and then inside of the parentheses let's add the first argument is the URL of of the API so let's use the page URL store base URL and then you just use the four slash products okay with this you will get all the uh the products but we want to apply the limit and we want to apply the sort as well so what we can do here we can add now question mark sort is equal to and let's add the sword and we can also add a limit so limit is equal to limit okay and with this we can get our products and the place where we are going to call this is actually in the home page component so open up we just shrimp down this middle and open up the home page component and here inside of the NG on in it we're going to call this com uh call this method but first let's create a the variable where we're going to store this so we're going to store this inside of the products a variable and it's going to be the property type array of products okay and at the beginning is going to be undefined so that's why you need to pass the undefined type as well here uh we need to sort variable as well in the default value is just descending and the count is basically the number of items that we want to display right so let's set it to 12 which is default one okay okay and we want to have an production products uh subscription products subscription uh variable this variable is going to contain our subscription and once we destroy the component we want to remove anything because we don't have we don't want to have any memory leaks I will show you how to do that so the type of this is going to be subscription you can import it from rxjs here like so and at the beginning it's going to be undefined okay now we want to import our service inside of the Constructor so here let's add a comma private store service and type is store service okay and again make sure to to import that from our services folder here on top and now inside of the engine in it we can call this foreign so that we can call a couple of times when you're changing the filters the and the other uh other sorting and showing the columns menu uh functions so let's create this get products method and this method is not returning anything or receiving so it's just going to update the products here so uh this dot let's call it this dot store service dot get all products and what we want to pass in is we want to pass this dot uh count and twist.sort okay like so and then we want to subscribe to this method and once we receive the products products we want to update our products property these dot products equals to underscore products like so and don't forget the products subscription so what we want to do is we want to store this subscription to this variable we use this.subscription product subscription and equal to this and now what we want to do is we want to implement NG and destroy on Destroy and make sure to import the on Destroy here on top it's reporting the error because we are not implementing NG on Destroy and we are set at VR so what you want to do here is mg on Destroy and it's not returning anything so we got this nice Auto completion and we just want to check if this Dot uh products subscription exists so if we created a subscription we want to unsubscribe is the product subscription Dot unsubscribe otherwise if you navigate to home page and card page for a couple of times you may end up creating a couple of subscriptions and uh you will result in memory leaks and that's something that you don't want to have on your application especially as your application grows you may start losing uh keep start losing the track of it so what we want to do now is we want to use the app products box here basically and we want to Loop to the array of the products that we just attached here actually we may end up with an error because I don't see my layout so let me see what we actually got here oh actually it's reporting that we haven't injected HTTP client inside of our HTTP uh inside of our app module so what we what we need to do uh basically we are using inside of our store service we're using this hdb client but it's not imported inside of our application so what we need to do is we need to go to the import survey an imported http HTTP client module here and now we can use the HTTP requests close that and are up now our application is back you can go to the home component that because the store component and let's use these products array and now let's go to the HTML file and let's make this Dynamic product box so on the matte grid tile let's implement the ng4 and G4 and let's product rate product variable of products and what we want to do is we want to pass this product to our air product component so here product is equal to product now let's go to the app product box which is in the components folder product box here and we want to add an input for this product so here we are hardcoding this but we want to remove it and we want to create this as an input okay now you can save this and save this and we should get our products here so let's see if this works okay I see uh this works because we are getting some more products that we created but actually the only thing which is missing is on our product box we're using the static data that's a problem so what we need to do is instead of creating this uh static data we can actually use the product that we just got so let's do that here in the source we can use okay you can use product dot image for the H5 we can use this is the category so call it product Dot category okay let's save that up okay so product image it's not possible because our object is undefined so what we want to do here is we want to check if we do get the product or not otherwise or we can even check uh we can check on two places so one one of the places where you can track you can check here so basically you can do NG if product so this way there's not going to be a chance that this product is undefined as as you can see here we're getting the images and we're getting the categories the sneakers is uh snack bar so it's a chocolate snack bar it's not the shoes so this is wrong naming everything is wrong so let's fix that up how we can do this is we can access the property of product dot name this is the name of the product let's change the view to the word wrap so you can see everything for the description we can add okay let me just see product name so property name doesn't exist on type product okay this is a good thing of the typescript or let's see what is the name of the actual product uh the name is the title actually okay so product dot title then for the description as you can see now it works and you can see now that we have that front truncate uh class it's working so we have this very large title and so it's cutting this off and once we hover over it shows the entire title okay so what is left to be done so once we switch over on on one uh one product per row layout we get this description which is static right now so let's fix this okay let me just increase the this layout okay like so and so for the description we want to use the product dot description here and close the brackets and for the price we want to use the product dot price here product dot price like so and let's test now how it works okay as you can see we are getting these prices different now so we're getting these titles we're getting this uh these categories and if we and if we change the layout mode we get a description as well here obviously the format of the images is not exactly the same in every product so this is why we get these inconsistencies but I don't mind that to be honest okay so this is the the different layout Inlet now let's test if we add different products to our card item so you can see we add a couple of items we added four of them and you can see we get the the description we get a title we get the the total amount that we are uh with we are supposed to pay so if you go and click on view card you can actually see that you get all this product updated into the card and here we can update the quantity like like I said uh and we can remove the quantity here and we can remove the one item per row and we can also clear the card let's test that out here and we can now return back so uh the thing which I wanted to implement next is actually let me just show you so the thing that we want to implement is once we click on the sort description or sort by descending or ascending or when we click on show 12 or 24 or 36 we want to fetch again all these products and send different parameters so what we need to do is we need to go to the home component here and inside of the home component we want to catch this sort and account being changed so the actual component that holds this counted sort is the actual app products header so here in the app products header you're changing these values and we need to emit these values so let's open this file in here basically we have this sword and I'm so count we want to create this as output so let's create two outputs and emit these values so we can just copy paste this a couple of times and let's rename these two items count change and the last one is going to be sort of change and it's going to emit this string type okay so when you change when we change the sort we want to emit the new value so this Dot uh sort change dot emit and we want to emit the new value which is basically new sort okay and on the uh items count change or yes we want to emit new value so this dot items count change emit new values so account like so and don't forget to emit this field okay and now we can catch this item count count change and sort change inside of our home component so let's go to the home component and here let's change the view to word wrap okay and let's add two more events okay and let's copy paste the name of the event so the one the first one is items count change okay so this is the basically when you're changing this item count so 12 24 36 so basically we need to set the limit to the request uh items count change and then we want to call the method on items account change event and let's create this method here inside of the home component and let's add it here at the bottom and item is called change this method is not going to return anything so it's going to be void but what is going to be it's going to receive a new description so description is going to be a type of string or actually not description sorry this is going to receive the count which is going to be a number and we want to update this Dot count is equal to count or we can rename this to new account so let's be done you have the overlap for the new account like so and we want to okay so it says that it's not assignable to string so what we can do is see here is we can change this to string okay so we can change this format from number to a string and then we can call again this Dot get products so what we are doing here is basically we are updating the con count variable and we are calling this get products a method which actually uses this dot count and this.sort on the second method we want to update the sort and again call this product so let's take this sort change okay home so this is new event Source change and we will create new method on sort change which will also send the Sorting new sorting value copy this save it and let's create this new one so on sort change and we will have new sort this type of string it doesn't return anything so the return type is void and we will update this Dot uh the name of the property is 200 update you sort this dot sort is equal to new sort okay and then again we want to call this dot get all products because we want to I'll catch again and with this let's test it out and let's open the console so that we can see if uh we what is the the actual values from the network tab okay let's refresh the page okay and we get the first initial request which actually sends the sort is description a limit to 12. what if we set the limit to let's say 24 refresh is the page it says the new request which is fix our API products sort is again description and the limit now is 24. what if we change the value to the ascending it refreshes the page again and sends another request and now the sort is ascending the limit is 24. so as you can see this is dynamic and these filters work as expected uh the next thing we should we want to do is we want to use these categories so as you can see this is starting now so we want to fetch all the categories uh that we have and we want to once we click on this category we want to display only the items and the products from that category so let's do that we need to open up the services and let's open up the store service okay so we need to get so we need to add another method here so the name of this method is yet all categories in this method doesn't return doesn't accept any parameters but it returns an observable observable and the type of this observable is array of strings array of strings okay like so so we want to return please dot HTTP client dot get and uh this get method it will return again array of strings okay like so and then inside of the get method we want to pass the base URL which is store base URL and then we want to add forward slash products four slash categories like so okay now we can close this store service and we want to go into inside of the uh home component and we have filters inside of these filters we want to include this store service here and as you can see as you can see we are hardcoding the categories here so we want to make this dynamic so include the private service store service store service and make sure again to import it on the top and here inside inside of the engine in it this dot store service dot get all categories call this method okay and then we want to just update these category so these categories actually needs to be undefined at the beginning so it's array of strings and or undefined like so and what we want to do here we are basically getting you need to subscribe here without subscribe and when we get view response back once back we just want to update the pro the categories array these dot categories equals to respond okay and also don't forget that we want to create category subscription variables so that we can unsubscribe once we leave the home page so let's name it categories categories subscription and this is type of subscription imported from rxjs and we want to assign this variable here categories subscription again let's Implement NG on Destroy on Destroy here and let's add it on the very bottom on this way and we just want to check if this subscription exists if this Dot category subscription exist if it's if it's not undefined and actually it's showing the error because it doesn't have initializer and that's why because at the beginning it's undefined so if it exists we want just to unsubscribe from it please dot category subscription Dot unsubscribe like so okay and basically this component should be working now as you can see we get all these values but now we need to catch this uh event emitter that we are emitting these categories inside of our home component and update let me just close this value and this files actually let me just see what is the type of the event so inside of the filters the event is show category so we want to when we click on the category here button click on the category we are basically emitting this value here and we want to Cache that inside of the home component so inside of the home component we have this show category actually we have already this this method created so this show category and we are updating this category so now what we want to do is we want to call this get products here this Target products like so but the only thing that we that we are missing inside of this get products is we are missing this category so this dot let me change the word wraps so this dot category so that we can actually apply this category to the actual request so now we need to need to change our get our products method here and we need to add additional property so let's add property which is called category and make it as optional that's why we add this question mark and the type of this is just string okay and now let's add here so so here actually after the products we want to add another expression so we want to check if there is a category string there's category string we want to add four stash got it category and just add this category otherwise we want to pass an empty string like so so basically what we're doing here just change the word wrap so what we're doing here is just we are just checking if there is category if it is we're adding the category namespace and the category itself otherwise we just return the string so it the API endpoint Remains the Same so let's test that out so if you click on the categories and let's say we click on the men's clothing and as you can see we only get these products for the main closing if you click on jewelry you get only the jewelry if you click on the electronics you only get the electronics and it's it works as a spec that and the last piece of the puzzle is to integrate the payment and the checkout and the actual ordering flow so like I said at the beginning of this video is that you need to go on shop.com and you just need to go and to create your account so just go to stripe.com and you need to sign up here so I already signed up and once you are signed up and signed in you can go to the dashboard and once you access the dashboard there's a section for the developers so here on the right top you can click on the developers and in the test mode you need to activate your account in order to get the real live data so here we have the API keys that we are going to be using inside of our application in order to integrate the stripe okay so let's start doing the implementation let me close all of this files and the first thing that we want to do is we want to install a stripe.js package that we are going to be using so make sure that you're inside of the root folder and then let's do npm install let me just shrink down this window npm install add stripe or slash stripe Dash JS and the version is going to be 1.35.0 like so it'll take a couple of seconds to install okay so once again make sure that you're installing the correct version and the same version as I'm doing here and now we need to include the stripe as well inside of the index.html file so make sure to go to the basically source folder and Target the index.html file and we want to include this inside of the head so add a script like so and just add a source https four slash forward slash js.stripe .com and version three and this way we have included the stripe into our application okay I can close the index is index.html file let me open up the terminal now and let me just restart or server now we need to go to the checkout page so open up the pages card actually card page not the checkout page and here we have checkout button on the very bottom here proceed to the checkout so we want to create a method that will call this checkout so here on click call on checkout method so let's call this method here inside of the car component and let's add it on the very bottom what we can do is we will add this method on the card service itself so this method doesn't return anything so the type is going to be void and we need to include the hdb client here what we can do we can also extract this call to the to the service separatus a different service but we can include it into this one as well so let's call it private HD3 now we are just including the HTTP client HTTP client here and make sure again that it's imported you just enlarge it make sure that it's imported on top here and now inside of our on checkout what we're going to do is we want to call the stripe service and let me show you so we are first making the post request so this dot http http Dot HTTP client so we are targeting this service and make the post request and the post request that we are going to make is going to be the request to our local server server that is going to handle this post request and make request by itself on the stripe then it will return the session ID and using that session ID we can open up the checkout page so you will see uh the URL of this request is going to be HTTP it's going to be our local server so localhost and we're gonna open that up on the port 42 442 like so and slash checkout okay and inside of the object we want to uh to pass items so this Dot cards dot items and we can handle these items inside of the server and send that to the stripe okay and once we get the response back so once we uh receive something from the server we can subscribe to it and this is going to be async compression and the result uh we will put a type of any because we don't have any type definition here defined it's a little bit outside of the scope of this tutorial so first we need to load the stripes so let's stripe is equal await and this is why this is a async compression because we need to load the stripe here inside of this uh subscribe subscribe uh scope so we need to use the load stripe method from the package that we installed so make sure to import here import load Stripe from add stripe sap Dash JS so this is the method that we are using to load the stripe and inside of the parenthesis we need to pass the key that we have on our dashboard so once again go to describe.com enter the dashboard and go to your dashboard once you're logged in go to the developers Tab and API keys and the key that we need is this publishable okay and click to copy set copy it obviously you'll need to copy your own key it needs to be different than mine obviously and let me close this and once we load the stripe what we can do is we can use a swipe and we can call the method redirect to check out and how we do that is from the session itself on the server we will return uh session ID and we just need to pass the session ID and that's how we open the checkout so session ID is going to be result here that we respond back and we will just return an ID there like so okay and now let me save this checkout now in order this to work obviously we need to create a local server and run it on the port 4242 and create this post endpoint checkout so let's do that okay let me create a new folder inside of the inside of the root so just create new folder and name it server okay and let me initialize we need a new node.js application so let me just see where we are at we are in the root folder okay so CD into server here inside of the server folder we want to initialize new node applications so run npm in it and Dash why so we don't want any sub questions we just want to initialize the plane node.js application and here you need to install three things so we want to use express.js a framework for our node application we want to install the course because we are going to create some across origin resource requests and we want to install the stripe obviously so let's run npm install course a version is going to be 2.8.5 the next one is Express and the version is going to be 4.18 0.1 and the last one is stripe and the version is 10 .7.0 okay and let me close this card components and let me open up our new server folder okay let's open let's open up the package.json file and and as you can see we have created this new project and installed our three dependencies here so now what we need to do is we need to create our our main file so let's name it server.js like so okay and now inside of this This Server let's create our application so first we need to include the libraries that we need the the good thing about this server is and strike is that they already built couple of pages like success Pages redirect cancel all these Pages for us so we will later on just download these assets and place them in the public folder and once you complete the ordering we can redirect users to these pages so we don't have to build that part I mean you could but this is easier and more faster okay first import the express so comes Express this require Express the next one which we want to import is course otherwise if you don't import and use the course it you will get an error when you're trying to make the cross origin requests so this one requires course and the next one is body parser so this one is for for parsing body uh the the data that we're sending between the servers so as it as it tells by its name body parser and it requires body dash parcel okay like so so now what you can do we need to initialize our application const app is equal Express and we just call the Express without any arguments there the next thing okay the next thing that I want to do is I want to set the app to use the the public folder so let's create a new folder public and let me open up the stripe check out flow so let me show you this so like I said they already have checkout flow built yeah so let's explore this as you can see they have already built all of this and so you don't have to do this these kind of things and spend your time into building like success page and um maybe fail failures page so you can go and click here on the top Explorer documents and it can go on quick start here and once you're here you basically can just copy paste all this entire code if you want to but I can just go and download this and we can use the checkout success and cancel HTML files and just include them inside of our public folder okay just make sure it's downloaded okay so here we have downloaded here and now I can use this public folder and extract it okay actually I need to open up revealing the file explorer it would be good it can work directly from the zip file but it doesn't so let's remove the public folder and let's just include this public folder here okay so in this public folder we have this cancel HTML checkout HTML and success HTML files you will actually only use the cancel and success the checkout HTML file is not going to be used in this tutorial so let's close this checkout page and now inside of the our express application app.use we want to use this folder so in order in order to access this uh these assets from the public folder we need to call Express dot static and pass the name of the folder which is public okay like so now we need to set the body parser so call the app.use and call the body parser and set the URL and code it to extended as false this basically extended is by default uh true so it enables the objects and arrays to be encoded inside of the URL which we don't want so let me just copy paste this one and also what we're going to do is we want to create Json Json application we want to use the application slash Json for for app obviously and now let's use the course so we need to set it up so app that use and call the course we need to set the origin so basically we are enabling course here origin true and we want to enable the headers as well otherwise they will be omitted so set the credentials too true as well okay like so and now let's see let's load the stripes so cons stripe this vehicle is equal to require and now he here we need to include the code and the token from the stripe itself so here we need to call the strike method we're requiring stripe and then we are calling the method with the key so once again let's go to describe.com here and let's go to the dashboard foreign let's go to the developers in API keys and we need to open up this secret key so reveal task key and we can click to copy we can close this now and we can pass this key here to our server okay like so obviously like I said you need to create your own servers and you need to create your own keys right here please don't use mine okay and now let's create a new post endpoint so add the post okay and the name of this request like we created inside of the checkout so if we go to the public folder and sorry here inside of the source app pages cards and here we created this checkout endpoint so let's use that here let's check out and this is going to be async callback so here we have re request we have response and we have the next which will handle the errors in case anything comes up so let's build try catch block here you get this Auto completed from the IntelliJ sorry from the visual studio code and we will create a session variable which we will use to pass that back to our request here in the cart and we will pass back the ID from the session so that we can open up check out okay so what what we are going to do here is basically we are calling the stripe so we are called await on stripe dot checkout uh check out Dot sessions okay and you call the create method create like so you need to if you need to pass an object in inside of this object we'll pass uh the data about our product that we want to to you know to buy so the first argument is line underscore items and here we will use the request that we got in the body so request.body and we will send as you can see here from our client here from our client we are sending items so we can access the items here request body dot items and what we want to do is we want to map this array okay so here we can access the item and what we will return here is a new object and inside of this object let me just make an implicit return okay so you just surround this by the parentheses and this is implicit return and now inside of the object set the currency currency to be uh USD like so set the product underscore Theta to be okay new object and inside of this object we want to pass the name and the images so the name is going to be item dot name and the images we actually have only one image so images but it accept the array of images so use the item dot product okay like so and this is for product data then we need to send the unit amount so this is the quantity unit underscore amount actually unit amount is the actual price so you go to item dot dot price and we we need to multiply that with 100 because they use that in sense and we we want to use that in dollars okay and okay let me close this the next uh parameter that we need to send is the mode so the mode needs to be payment there are multiple ways uh there are multiple modes actually and there are subscriptions onetime payments and this is actually onetime payment so that is what we are selling here and the next thing is the success URL success underscore URL so once the payment has been done successfully we will redirect the user to this URL and actually let me make this double code Codes as well so that we have a same standard and the USD here so let's use the double quotes here always okay so success URL is going to be the the success HTML file from our public folder socalled httpe uh colon forward slash forward slash localhost four two four two and then success dot HTML okay and then we want to add Castle URL as well cancel underscore URL and just add the cancel file what you can do now is you can obviously go and update the success HTML file for example here it says mail to orders it's example we can do collab or code dot dot slower you know add Gmail .com like so and copy paste this as well so that we have custom success page you can make this much better obviously but this is just this this will do it right and instead of the catch error we just want to pass the error back so call the next and we actually need to to catch the arrow here and just pass the error back like so and the last thing I forgot to do is basically we want to return back like I said the session so use the response dot status 200 and respond in the Json format and just having the session okay so we are sending this session entirely here and and the last part actually which I forgot is to open up the port and open up the actual application so app.listen and the port that we said that we're going to be using 424242 and what you want to do is we just want to cancel out log f is running on for two four two four two forty just forty forty okay and now we can open up the terminal and start our application inside of the server run node and name of the file is server.js app is running on four two four two forty okay and our client app is running as well so let's try it let me pressure the application let's select a couple of products here open up the card let's go to the cart page here let's continue proceed to the checkout okay this can this can take a couple of seconds let me open that inspect tool in case we have some errors okay we are getting some error so let me just see and if we open up the console log we can see that the request hasn't been correct so let me see the server what it says okay let's see we are getting some errors so item is not fine we are getting okay received unknown parameters unit amount okay so obviously we have been sending the wrong format so what we can do is we can open up the stripe documentation here and we can just copy paste the correct format so inside of here inside of the Align items let's just copy paste this object okay so here line items it's basically this object let's replace it here okay and now okay let me just see we're mapping here we're closing we need another brackets so make sure that you have right spelling okay and now for the currency USD for the name we will use item dot name for the images like we said we have only one image so use the item dot product inside of the array okay for the unit amount we will use item dot price and we will increase it by 100 and for the quantity we want item dot quantity like so let me restart the server okay mode server the app is running on 4242 okay let me move this here and now let me refresh to see what we get so if I go now at the bottom you can proceed to the checkout if I click on that here okay it's loading and now we get uh our checkout page so as you can see we have these products we have the total amount and we have all this information to fill in so we can type in just test email at gmail.com for the testing you need to use 424242 then for the month it doesn't matter for CSV doesn't matter the name of the card it's lava and let's click pay no thanks I don't want to save okay we appreciate your business and they basically got the checkout page okay this is expired link because my accidentally uh click on back but if we go to stripe dashboard we should check out and see if we got this payment processed so let's go to the dashboard let's go to the payments here and this is the last one and as you can see we got our products in the dashboard uh and these are the details so slova test Gmail and all of this so what we can do and ask next is let me open up our application again local school localhost 4000. okay let me just change the protocol to remove the secure one okay so what we can do here is we can integrate the shipping so it is we have integrated the payments but if you're ordering something you want to integrate the shipping as well so this is like just a donation uh but if you want to add shipping options so you can go to the documentation of the stripe you have here stripe docs payments checkout and the shipping and what we can do we can just pass these shipping options right so let me see uh we have added these line items and let me just copy this entire part because you can customize it but you don't have to so let's copy it entirely and let's see okay here before the line items let's copy this shipping details like so and if you want to customize something you can easily do that so but basically the options are regular so here you can update like the shipping countries here is at U.S and Canada shipping options as you can see we have like the fixed amount this is like free shipping so the amount is zero the second option is to have uh shipping for 1500 USD dollars and you can like display name all these properties you can alter if you want so let me just in that this code okay like so so let's try this now let's save this let's restart our server okay app is running and now let's test it what we can do here let's select jewelry let's add a couple of products like so let's go to the card your card let me open up the console so we can go proceeded at checkout here and let's see okay we do get now the shipping as well so as you can see on the other on the left side we do have all the products that we created and the total View and the shipping is free okay we have you know two options free shipping and next day sir so if you click on the next day sir you get 15 if you click on free shipping it will take five or seven uh business days so for the email you can test we test at test Dot com name slova uh address one test I just do test for the city New York zip code Virginia this is all random obviously and for the card information 424242 just for two okay you can enter whatever you want here for the CV and if we want to go to pay let's see I don't want to thank uh to save it's recessing should be successful we appreciate your business if you have any questions please email call me swallow I want to save this and if I go now to the to the stripe.com here let's open up the dashboard again and let's see under the payments here we have the last transaction and here you can see all the information so his key are the owner information the address where you want to ship your order and everything looks as expected so with this we have actually completed our application so let me so let me navigate back and let me review what we have created in this tutorial so basically what we did is we created this home page with all of these products which we can uh sort or by ascending or descending we also created this menu where we can choose different number of items that you want to display on our current page we also have the options to change the layout depending on how we want to look and we also have the options and the filters on the left side to filter our categories like Tony's Jewelry men's clothing and so on also there are options obviously because this is a store to add these items to the cart you can open the cart and preview what we have there we can clear the card so this is now empty then again if you want to proceed and buy some new things we can add them then we can proceed to the checkout just click on the Green and here on the checkout we have list of all the items that we added to the card we can increase the quantity we can remove the quantity if you want and just let's say buy only this one man casual sling fit uh this tshirt and we can proceed to the checkout if you click on proceed to the checkout if you click on proceed to the checkout we get this checkout form where we can enter all the shipping details and the card information and we can submit that to our stripe dashboard and with this we basically build our ecommerce store I hope you enjoyed it and I hope you learned something new well that's all for this angular video thanks for stopping by and don't forget to subscribe code with sloba thank you for watching the entire video to see more angular tutorials click here foreign
