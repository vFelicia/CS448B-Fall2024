With timestamps:

00:00 - so what's going on YouTube my name is
00:01 - Meho alright we're gonna learn about
00:04 - react native what it is and what is used
00:08 - basically we'll just take a look at that
00:10 - in this tutorial only and just go over
00:13 - through some basic building blocks like
00:16 - doing basic stuffs like navigation and
00:18 - all transitions then some API fetching
00:22 - HTTP requests timers and all that stuff
00:25 - which basically you would need to
00:28 - actually create a working of functional
00:31 - react native application and so let's
00:36 - start from the first question what the
00:39 - heck this react native is many of you
00:41 - might know but some of you do not have
00:44 - any idea who I just stumbled upon here
00:47 - somehow on this channel and now are
00:49 - watching this tutorial randomly so for
00:52 - you guys what react native is is that
00:55 - it's a way to write cross-platform
00:57 - applications on JavaScript so if you
01:02 - know JavaScript then probably you can
01:05 - get started at react native immediately
01:09 - because what react native does is that
01:13 - it provides you a way to write
01:16 - JavaScript and then react native would
01:18 - turn that JavaScript into your native
01:23 - code it does not really turn that into a
01:26 - native code if you take a look at under
01:29 - the hood but let's just keep that
01:31 - abstracted and let's just as you that
01:33 - react native somehow does some magic and
01:35 - turn your JavaScript code into native
01:38 - code and basically once you're done with
01:41 - that your application actually wants
01:46 - native so it's not running into a
01:50 - browser or something which some hybrid
01:53 - application frameworks like ionic to
01:56 - react native actually runs native code
01:59 - on your device plus it's super fast to
02:02 - do it's super easy to learn you just
02:04 - have to learn JavaScript if you have
02:06 - already launched our script or you have
02:09 - been working with JavaScript for some
02:10 - time then you're good to go basically
02:13 - for Android and iOS now the downsides of
02:18 - react native is that basically you
02:19 - cannot read almost every app with it I
02:22 - usually prefer to go with react native
02:26 - for smaller and quicker apps and
02:29 - sometimes some big apps as well but
02:33 - react native I guess is not suitable for
02:35 - developing high end performance things
02:38 - like games or something like that
02:39 - because in that case native is still the
02:43 - best the react native still compiles to
02:45 - native but I guess with native you have
02:48 - a lot of gears in hand to tweak the
02:52 - controls we're gonna discuss how to set
02:55 - up react native environment and
02:57 - basically get started working with react
03:00 - native to get started with react native
03:02 - we need to obviously set up its
03:04 - environment and all that stuff first so
03:06 - first things first how do we actually
03:08 - set up reactivate it so if you go to the
03:11 - official website you can see that we
03:13 - have got a nice get started link here
03:15 - alright the confusion starts here now
03:18 - there are two sanctions sections you can
03:21 - see Quick Start and building projects
03:23 - with native code now most of the people
03:25 - who dive into react native for the first
03:30 - time get started with these this Quick
03:33 - Start pen which is basically just a
03:36 - couple of lines and you're good to go
03:37 - now as good seems at least for me I
03:42 - think this create react native app is
03:45 - not the best choice because it runs on
03:49 - xbox Island which I personally do not
03:51 - really like because Expo kind of limits
03:55 - you and a lot of things because react
03:58 - native on its own is like you're writing
04:01 - JavaScript plus you can do a lot of
04:03 - tweaking and on that stuff with the
04:05 - native code as well but when you use
04:07 - something like Expo you get bundled
04:09 - right so you are not allowed to move out
04:12 - of a specific room so if you want to go
04:15 - with this Expo one you can but I would
04:18 - go with native code by building projects
04:21 - with native code and once you do this
04:23 - what you have to do is obviously go
04:26 - ahead and
04:27 - I've node installed on your computer now
04:30 - if you do not know what node is then let
04:34 - me just show you what do you actually
04:36 - mean by let's say yeah just gotta go to
04:40 - a directory let me just zoom in here a
04:43 - little let's say I go to home directory
04:48 - and let's just let's what we have in
04:57 - here so say YouTube it is and then we go
05:03 - with let's just remove this react native
05:08 - directory for now and let's just create
05:13 - react native again
05:16 - alright so now all you need to do
05:19 - basically is have node installed and
05:22 - again you can do that by following
05:24 - instructions here now make sure you
05:27 - select your target as target OSS Android
05:30 - for now because obviously iOS can only
05:32 - be developed on a Mac which is kind of
05:34 - which kind of sucks but it's okay we are
05:38 - good with Android only right now so if
05:41 - your Mac OS user then you can install
05:43 - node with Bri you or basically there's a
05:47 - video of mine which shows you exactly
05:49 - how to set up latest version of node and
05:51 - NPM on your system I'll just leave that
05:53 - link in the description so if you want
05:55 - to set up node or NPM you can watch that
05:57 - alright you can skip this watchman tool
06:00 - if you want it's not really required so
06:03 - once you're done with this you need to
06:05 - install the react native CLI so to do
06:08 - that again you have to just do NPM
06:10 - install react native CLI and make sure
06:14 - you install it globally by writing the -
06:16 - G flag and since I already have that
06:19 - installed I guess it should not take me
06:21 - a lot of time a lot of time so you can
06:24 - see that it's just fetched local copy of
06:27 - that thing right and yeah one more thing
06:32 - what you want to do is make sure you run
06:35 - your NPM around four point something
06:38 - version this is the problem you're gonna
06:40 - face
06:41 - later on when you use your react native
06:43 - applications that you cannot really run
06:45 - npm on version safe right so this is why
06:49 - i'm running version 4.6.1 because i'm
06:51 - using react native to create code amps
06:54 - bilap so that's why npm basically npm
06:59 - version 5 is not really compatible with
07:01 - react native the last time i checked so
07:04 - if you face any problems and you find
07:06 - out that your npm version is version 5
07:11 - point something or above then what you
07:13 - want to do is npm install g npm and a do
07:17 - it version here right
07:19 - in my case it's 4.6.1 alright with that
07:23 - being said now once you have done that
07:25 - you should have your react native CLI
07:28 - onboard and after this what you want to
07:32 - do is obviously have installed android
07:34 - studio now you need android studio
07:37 - jdk and all that stuff because remember
07:42 - reactant 8 is actually developing native
07:44 - apps for you so just go ahead and
07:46 - download the JDK and how you do that is
07:51 - basically see you accept the License
07:58 - Agreement first and then select your
08:00 - operating system or means Mac OSX 64 bit
08:04 - and just download this and run it you
08:07 - should be good to go once you do that
08:09 - just go ahead and download the Android
08:12 - studio as well once you do download
08:15 - Android studio I already have that up
08:16 - and running as well you would be
08:19 - provided with android sdk sdk platforms
08:22 - and all that stuff
08:24 - you would also have a Android virtual
08:25 - device do I do not really recommend you
08:28 - can just directly you know work with
08:31 - your real Android device if you have one
08:33 - if you don't have one that's another
08:35 - thing so you can't create an Android
08:37 - virtual device which we will see later
08:38 - on as we proceed alright so under studio
08:43 - is pretty straightforward if you have if
08:45 - you guys have ever worked with it I just
08:47 - haven't downloaded and it will just
08:48 - start downloading right on once you just
08:51 - you just have to install it you do not
08:53 - really need to use Abbot's to do
08:55 - to work with react native just because I
08:58 - know it studio brings all that STK stuff
09:00 - together all right
09:02 - once you have downloaded just install
09:04 - Android studio and you can see that
09:06 - building a react native app with native
09:08 - code however requires Android 6
09:10 - marshmallow SDK in particular so react
09:13 - native right now may be uses Android 6
09:16 - SDK I'm not sure because they're saying
09:18 - it I believe they use that but sure
09:21 - enough you can use another targeted SDK
09:24 - later on in your application because hey
09:27 - you remember react native is running
09:28 - native code so if you're coming from an
09:30 - Android development background you must
09:33 - know there's a file called Android
09:35 - manifest and will not create al and all
09:37 - that stuff you're gonna find exact same
09:39 - files in your react native project as
09:41 - well so if you do not have any idea what
09:44 - the heck these terms are don't worry
09:45 - about that we'll gradually learn them
09:47 - later on but for now I'll just remember
09:50 - that your react native right now is
09:52 - targeting this Android 6 platform and by
09:55 - targeting that means that your app would
09:57 - be most optimized developed for this
10:00 - thing and for backward compatibility you
10:03 - have to add some sort of code or
10:05 - something forward compatibility for
10:08 - forward compatibility as as well so yeah
10:11 - so here we are and you do not need to
10:17 - really do all of this stuff just make
10:20 - sure you install this Android 6 our let
10:24 - me just give me a second here alright so
10:27 - you see something like this when you
10:29 - launch Android studio right and what we
10:33 - actually have to do here is basically
10:35 - you have to go to like your Android
10:41 - studio and you would probably see
10:43 - something like a bunch of hello world
10:46 - kind of stuff here don't worry about
10:48 - that it's not really useful what you
10:50 - just have to do is just go right here to
10:53 - this SDK manager little boy this Android
10:57 - with an arrow on his head just go to
11:00 - Android SDK manager Android SDK SDK
11:03 - platforms and make sure you install this
11:05 - Android marshmallow and at 6:00 you see
11:07 - I have installed that already
11:09 - to stick on it and click ok it will
11:11 - download that and install it for you
11:13 - that's basically it what you have to do
11:16 - or the SDK one and you can see that we
11:19 - need something some else something else
11:22 - as well like Google APs and what is to
11:25 - give which we had already done Intel x86
11:27 - atom 64 system image and all this stuff
11:30 - and basically you would find all of that
11:32 - stuff right here inside here SDK
11:35 - platforms is here is to get tools you
11:37 - can find that stuff here right you have
11:42 - to install these SDK tools as well then
11:45 - once you're done with this sdk tools
11:48 - thing you see that you have installed
11:51 - this 23 point 0.1 and stick your tools
11:55 - and just go ahead select these 23 point
12:01 - whatever what it will latest version is
12:03 - it doesn't matter and click on ok right
12:06 - once you do all of that stuff all you
12:09 - have to do next is configure these
12:14 - variables by adding them to your bash
12:17 - profile and for the Windows guys what
12:19 - you have to do is if you go right here
12:23 - you have to add it to your path right so
12:26 - how do you add it to your path well for
12:29 - the Windows people you have to
12:31 - right-click on your this PC icon then
12:34 - you have to go to somewhere like
12:37 - advanced settings of your computer then
12:40 - you would see environment variables and
12:42 - then basically add those stuff for Linux
12:44 - and Mac OS users just copy the stuff and
12:52 - mine tomorrow just copy the stuff and go
12:56 - ahead inside your terminal right here
12:59 - just opened your bash profile or no -
13:09 - well
13:14 - bash bash profile hit is right so just
13:21 - open your bashful file provided file and
13:27 - just copy and paste this stuff right
13:31 - here which we see inside so you will
13:34 - have set up your all those variables for
13:38 - Windows guys again as a tool you just
13:40 - have to go to system settings and
13:42 - basically add environment variables just
13:46 - google how to add environment variables
13:48 - and you should be good to go right once
13:50 - you're done with all of that stuff right
13:52 - what you have to do is go to your
13:55 - project in which you want to actually
13:58 - write good of your Android application
14:04 - and iOS application in my cases go down
14:07 - YouTube react native and right here you
14:09 - have to say react native in it and then
14:12 - your project name let's just name it
14:14 - hello world and hit enter now you can
14:17 - see that it creates a kind of a
14:19 - walkthrough kind of thing so you see
14:22 - that it's installing all the required
14:25 - packages it's it's using yarn right now
14:28 - but you can make use of NPM as well they
14:30 - they mostly work in a similar way or the
14:33 - package store JSON file so anyway yeah
14:35 - so let me just grab the Sun pick it
14:39 - right here you can see that we just did
14:41 - react native in it our project name then
14:46 - you can actually do all of the stuff
14:51 - later on it's not really required right
14:53 - now I'll tell you how to do this this is
14:58 - all cool right so what you have to do
15:00 - right now first of all is this make sure
15:03 - this thing right here goes well and if
15:06 - it does not go well then go ahead and
15:09 - repeat the steps make sure you have
15:12 - added the environment variables
15:15 - correctly when those guys you have to
15:17 - add it to your path variables inside
15:19 - your this PC settings Advanced Settings
15:21 - environment variables and then selecting
15:23 - path variables you can easily see how to
15:25 - do that by selecting this way
15:26 - those here see just like that open
15:30 - system pain system security gene
15:32 - settings advanced tab environment
15:33 - variables click on new and just like
15:35 - that right Mac and Linux guys I hope you
15:39 - can do it yourself because you have been
15:40 - working on with bash and all that stuff
15:43 - at least I believe Linux people at least
15:46 - work with that stuff all the time so you
15:49 - just have to copy and paste this inside
15:51 - your bash profile and this is bash RC
15:53 - basically on a Linux system bash profile
15:57 - on a Mac system and once you have done
15:59 - that and still the error is there then
16:04 - there might be some problem with
16:06 - installation of your Android studio SDK
16:08 - and all that stuff make sure to check
16:11 - all of that as well
16:12 - and if the still if still the error
16:15 - persists then you can ask that and
16:17 - commence and I'll be just happy to help
16:19 - you so let me just really quickly wait
16:26 - here for it to complete it might take a
16:35 - little bit time for you for the first
16:38 - time because in my case it might be
16:40 - fetching a lot of stuff from the cache
16:42 - itself but for you it would be
16:44 - downloading all that stuff so you see
16:46 - that I am looks like I am already done
16:50 - alright you can see that it's set up on
16:54 - my end and hopefully should be set up on
16:56 - yours as well and basically that's it
16:59 - for this video and in the next video and
17:01 - we're just gonna show you a very basic
17:03 - hello world with react native which is
17:05 - basically just already prepared for us
17:07 - we just need to run an emulator and fire
17:09 - it up
17:13 - / through basic file system and how
17:16 - react actually organizes its files so
17:19 - that it's easier to work for you later
17:22 - on with the application for the
17:24 - structure and all that stuff so let's
17:26 - get into it alright so coming to the
17:29 - file structure off we have right here
17:31 - for react native is that if we see
17:35 - something like this if we start from the
17:37 - top you would see that we have two
17:39 - folders which is Android and iOS now
17:42 - these are basically the only folders you
17:45 - would spend most of your time in right
17:48 - because Android consists of two files
17:51 - which are used to build the application
17:53 - for Android platform and similarly on
17:56 - the similar basis iOS is used you can
17:59 - see these all these X Cassatt files if
18:01 - you are coming from an Xcode background
18:03 - so these files would be similar to you
18:06 - so these are basically the files for the
18:10 - iOS stuff right and for Android you can
18:12 - see that we inside the app we have
18:14 - builder crater file as I told you
18:16 - earlier on
18:17 - then inside SRC we also have the
18:19 - manifest file which is basically the
18:22 - same thing as if you're working with
18:24 - Android studio right so these are the
18:28 - two folders which would be looking all
18:31 - along this series so I'm just gonna skip
18:33 - over them right now and coming to normal
18:35 - duels obviously because it's running on
18:37 - JavaScript we can have our additional
18:40 - modules with us and which would be
18:43 - installed inside the node modules folder
18:45 - and once the app is compiled then all of
18:49 - that stuff would be basically just
18:50 - managed by react you do not need to
18:52 - worry about that then come to the babel
18:54 - RC file which is just the file
18:57 - consisting of one line for now just sets
18:59 - the preset to react native nothing
19:01 - fancier here then this is buck config
19:04 - file this is not really required because
19:08 - this is there's a system called buck
19:11 - build something used by Facebook but
19:14 - we're not gonna make use of this so we
19:16 - do not need really need to know what's
19:18 - going on with this file right so same on
19:21 - a similar basis this is flow config file
19:23 - then we have the gate files so that
19:27 - you can actually just check out your
19:29 - project to a github repository as well
19:32 - so these are files which would help you
19:34 - then again watch one configuration file
19:36 - nothing plans you're here then comes the
19:40 - apt or cheers file right so after JS
19:43 - file if you see here you would see
19:45 - something familiar right now be when we
19:48 - would run the application you would see
19:50 - that basically the things you see here
19:52 - are the ones which you see on the app so
19:55 - you see that it kind of looks like HTML
19:57 - but not really view text looks like they
20:00 - are this is HTML but it looks like we
20:04 - are making use of some native elements
20:06 - right like the view container the text
20:09 - container or all that stuff so we'd come
20:11 - to that later on then we have the advert
20:14 - JSON file which just consists of the
20:16 - name and you know stuff like that
20:19 - related to your application pretty
20:21 - handful stuff so the next thing is
20:25 - indexed or chairs and basically this is
20:27 - the file which is boost which bootstraps
20:31 - your application right so this is the
20:33 - first file which react native enters so
20:38 - yeah you can see that we are importing
20:41 - the app from here the same file here and
20:43 - putting it into index dot J's and we are
20:46 - just registering the component with the
20:48 - app right then our package dot JSON is
20:51 - obviously the file which consists of all
20:54 - the dependencies and all that's fancier
20:55 - stuff so that's all for this video I
20:58 - guess and file structure is quite simple
21:01 - for react native not much of things
21:03 - going on so that's all for this video
21:05 - and in the next video I'm gonna show you
21:06 - how we can run this dummy project on a
21:08 - real Android device for now
21:14 - in this tutorial I'm just gonna show you
21:16 - how to set up your Android device
21:17 - correctly so that your bills are
21:19 - happening and basically you're just
21:20 - ready to go and code so let's get
21:23 - started alright so this would be a
21:25 - helloworld tutorial so let's just go
21:28 - ahead and create one so now if we take a
21:30 - look inside the code what I want you to
21:33 - do first of all before actually starting
21:36 - off with the hello world just go to your
21:37 - android folder and just go to this local
21:41 - the properties file if this does not
21:43 - exist
21:43 - then create this file right once you
21:47 - create this file I want Union I want you
21:49 - to determine what operating system
21:51 - you're running and hopefully you know
21:52 - that I believe and if you do know then
21:56 - just go ahead and choose one of the
21:58 - lines which is according to your
22:00 - operating system so right now I'm
22:03 - running OS X so that's what I'm just
22:05 - gonna keep this line and move the other
22:08 - two right and just save this basically
22:12 - this virus is telling the react native
22:15 - where the SDK is located for Android
22:19 - right and once you do that basically we
22:22 - are good to go so now you can just go to
22:24 - lab degeus and change this to hello
22:27 - world with just some text and this is
22:30 - again not an error because vs code is
22:34 - just complaining that this should be in
22:36 - a tight code file not a J's file not a
22:38 - problem really but it's okay so there we
22:42 - are and once you're done with that just
22:44 - go ahead to your terminal and write
22:46 - react native run Android and hit enter
22:51 - now I have my personal Android device
22:54 - connected right here if you can see this
22:58 - one right so we can just wait for this
23:03 - bill to complete and then I would
23:05 - actually be able to run this application
23:08 - on a real Android device which is the
23:10 - same right here you can see I can move
23:12 - this around with my finger without
23:15 - actually touching the screen right so
23:20 - here we are and let react native build
23:23 - the application and meanwhile what I can
23:26 - do is inside and
23:27 - tab right here I can see react native
23:31 - run iOS and simulator would be iPhone 8
23:38 - plus now you cannot do this if you are
23:40 - running anything other than Mac OS X
23:43 - because I OS development unfortunately
23:46 - can only be done on Apple devices so
23:49 - once you do that you can see that I
23:51 - already have my terminal my hip
23:54 - simulator running with me so there we
23:59 - are let's just wait for both of these to
24:02 - complete now this this might take quite
24:05 - some time for first time building but
24:08 - subsequent builds would be faster right
24:11 - this is because this just needs to set
24:13 - up all that stuff first of all and then
24:16 - later on it could be faster and if you
24:18 - see right here this gets opened right
24:22 - now what the heck is this well this is a
24:24 - metro builder bundler and this opens for
24:28 - Android right and what this means is
24:31 - that whenever you change some files some
24:33 - JavaScript files where your application
24:35 - needs to inform let's just say your
24:37 - phone or maybe your phone needs to
24:40 - inform that yeah something is building
24:42 - right so this is done by this thing so
24:45 - you just need to keep this open in the
24:47 - background and you can see the progress
24:49 - of building bundling P device right now
24:54 - on my Android device as well if you can
24:56 - see that you can see that we get a
24:58 - message of loading from localhost put
25:00 - 881 so yeah that's basically what's
25:03 - happening right now and if we see iOS
25:08 - bills well some sort of stuff is going
25:12 - on here let's just not disturb this
25:14 - thing and let's just get back to our
25:16 - Android build stuff all right you can
25:19 - see that our Android Android bundler is
25:22 - 100% done so let's just see what's up on
25:25 - my screen
25:25 - hey it's hello world from react native
25:28 - so you can see this is a truly native
25:31 - application running on your device on
25:34 - your android phone right now coded in
25:37 - JavaScript right and this is a real
25:39 - Android device
25:41 - actually real because I'm just mirroring
25:43 - my phone on the Mac OS the iPhone build
25:47 - seems to take some time but it's okay
25:51 - let's just wait right to build okay so
25:56 - it looks like we got it so we'd say this
25:59 - build succeeded and it also install and
26:02 - launch so let's just see how it's
26:04 - looking like so you can see that it's
26:07 - now our bundler is again bundling the
26:10 - iOS app let's just wait for it to
26:14 - complete loading all right you can see
26:17 - that we get a nice little hello world in
26:20 - the center of the screen on our iOS
26:22 - device as well so if you take a look and
26:26 - if I just bring this down you can see
26:28 - that we are running the same piece of
26:30 - code on two different operating systems
26:33 - using react native that's the power of
26:36 - react native
26:40 - we're gonna discuss about how the hello
26:42 - world program actually works and in
26:44 - general how react native overall works
26:47 - so let's get started so in this video
26:51 - let's just see how the hello world which
26:53 - we had coded earlier is actually working
26:55 - alright so if we come to our Android
26:58 - project right now as I said AB Dutchess
27:01 - is the only point of entry right now
27:03 - basically the point of entries indexed
27:06 - or chase but you know it's indexed OCS
27:10 - actually includes the app file here so
27:13 - we can just say like that and we can
27:15 - actually just get rid of this probes
27:17 - right here and replace it something like
27:21 - this I'm just gonna explain in a minute
27:24 - what these props are not in a minute but
27:27 - maybe in the next tutorial but we'll
27:29 - just go through over what's happening
27:31 - here so before starting this web series
27:34 - I believe that you have at least the
27:36 - basic knowledge of how es6 and stuff
27:39 - like that actually is working because if
27:42 - you do not know about that then it would
27:43 - be kind of difficult for you to follow
27:45 - along the series because react native
27:48 - would mostly be using es6 all along so
27:51 - yeah I guess you need to actually just
27:54 - make sure you are up to date with the
27:56 - es6 stuff all right with that being done
27:59 - first of all what we are doing is we are
28:02 - importing the main react framework and
28:04 - the component from the react stuff right
28:07 - and then we are importing this platform
28:10 - which is basically just used to
28:13 - differentiate between different kind of
28:15 - platforms right so for example you can
28:17 - see that instructions would be for
28:20 - example for iOS would be shown this one
28:22 - and for Android will be shown this one
28:24 - so platform-specific work would be done
28:27 - with the help of this library or a
28:30 - module which we are importing from the
28:31 - reactive module itself right next is
28:35 - style sheet now style sheet is something
28:37 - which would be used to actually create
28:40 - and basically apply CSS to your react
28:44 - native component and said CSS like CSS
28:46 - because it's not really CSS right
28:49 - obviously because your code boils don't
28:51 - native code but it's
28:53 - it looks like CSS but you would see that
28:57 - it's mostly flexbox and not mostly its
29:00 - react native who works on a flexbox
29:02 - layout system right so you would be able
29:06 - to use of make use of stuff like flex
29:09 - one you know like flex crew and stuff
29:12 - like that in your style sheets and apply
29:17 - them later on to your views right now
29:21 - text is you can say it's a kind of
29:25 - component which would render your text
29:28 - right so it's just used to display some
29:31 - text on your application and view is the
29:37 - container component you can think it off
29:39 - like a box in which all of your other
29:43 - components like text and you know
29:46 - basically other components would go
29:47 - could go in right so what the heck are
29:52 - you actually seeing here if you ask me
29:54 - well what this is is this part is known
29:59 - as j6 now j6 and what it does is that it
30:03 - allows you to write HTML inside of a
30:06 - JavaScript if you have never seen this
30:08 - it might look a bit episode to you that
30:11 - how the heck are we actually writing
30:12 - HTML net but if you're coming from a
30:15 - react.js background or basically you
30:17 - just know GS x then you should be able
30:20 - to catch up real quick but for those of
30:22 - you who do not have any idea
30:24 - basically what DP or what we are doing
30:26 - here essentially is that this app is a
30:29 - component and basically everything is a
30:31 - component in react.js as well as in
30:34 - react native so app is a component whose
30:38 - view looks like this and by view what I
30:41 - mean is the template of that particular
30:44 - component so component could have a
30:46 - template it's logic which would be the
30:48 - functions which would go here so you can
30:50 - just go ahead and create my function
30:52 - here and this would be kind of the logic
30:55 - of some sort of function you would do
30:57 - and then this render function is called
30:59 - which basically just you know
31:04 - gets the view template of the particular
31:07 - component and displays it on the screen
31:09 - so this is our very basic add component
31:13 - which just renders simple hello world on
31:16 - the screen and that bottom of the screen
31:19 - we have is just the Styles where we have
31:21 - a style sheet that creators used to
31:24 - actually create a kind of a style sheet
31:26 - which is kind of stuffed object again
31:28 - whose key consists of the name of the
31:31 - you know you can say a selector or
31:33 - basically you can say the class name or
31:35 - something like that because well how you
31:37 - apply is like style as a prop name now
31:40 - this is a prop which I was talking about
31:42 - earlier equal to your whatever object
31:46 - you want to style with right so we're
31:48 - gonna come back to all of this later on
31:50 - as you proceed but this is just a
31:52 - high-level general overview of how this
31:56 - hello world app works and if you are
31:58 - following along if you have understood
32:00 - this then it's great because we have
32:04 - done quite some stuff and this and if
32:06 - you understand everything it's awesome
32:07 - if not then don't worry we're gonna
32:09 - cover all of this bits and pieces later
32:12 - on as well as we proceed with the
32:14 - individual tutorials
32:19 - we're gonna take a look at what props
32:21 - are in react native and basically why
32:24 - the heck would you need that and all
32:26 - that stuff because you're gonna make use
32:28 - of props all the time in your react
32:30 - native application so it's just easy to
32:32 - you know just understand it later
32:34 - earlier and then you would be able to
32:37 - relate a lot of stuff later on so if we
32:39 - take a look inside our code right here
32:42 - which is from the last tutorial you can
32:44 - see that we are actually making use of
32:46 - props right here so what props are
32:48 - basically is that the they give extra
32:53 - information to your components as I said
32:55 - this text component or this view
32:58 - component right here would have very
33:01 - specific functions associated with it
33:04 - right now we are making use of the
33:05 - inbuilt components later on we can
33:07 - create our own custom components as well
33:09 - but for now let's just say I want to
33:11 - display text with some southern-style
33:14 - right so what I'm gonna do is make use
33:16 - of the style property which is
33:18 - associated with this component right
33:20 - prop stands for property obviously if
33:22 - you are not able to relate it to LA so
33:25 - let's just say I would give you another
33:29 - example let's just say you want to
33:30 - display an image in your application so
33:34 - what you're gonna do is right here image
33:36 - and if I hit tab does it import it for
33:40 - me
33:40 - no not really going to import import the
33:43 - image component here as well so once you
33:46 - do that what happens now is that now you
33:49 - have an image right here you go okay
33:53 - sounds good but what the heck does this
33:55 - image it can do well you need to give it
33:58 - additional information like the source
34:01 - of the image you want to load right so
34:03 - the source of this image would be and
34:07 - I'm just I'm just gonna explain what the
34:09 - syntax here is would be let's just say
34:13 - URI would be something like my awesome
34:19 - side coms - my awesome image dot PNG
34:24 - something like that so now you're
34:26 - telling this component right here to
34:28 - have this property which gives it some
34:33 - formation right and what the heck the
34:35 - syntax is is basically this comes from
34:37 - the JSX so if you want to have a
34:41 - variable kind of a variable think inside
34:44 - your attribute value in GSX
34:48 - what you have to do is just include that
34:50 - inside the curly braces if you do
34:53 - something like this this would be static
34:54 - value right right now since you're
34:57 - making use of an object so I'm inserting
34:59 - an object here which contains all this
35:01 - stuff so I need to make use of this at
35:03 - this curly braces here you can also do
35:06 - something like this like constant image
35:10 - info and then do it like this and then
35:14 - pass in your image info here it's one on
35:16 - the same thing but because I'm just
35:18 - writing this object right here directly
35:20 - you can do it separately as well so
35:22 - again this style style stored welcome I
35:25 - can basically just get this stuff here
35:28 - just put it right here and there we go
35:32 - it's one on the same thing right
35:34 - so you do not need to really you know
35:37 - just wonder around what this curly brace
35:40 - mean it's the style you have a variable
35:42 - placeholder right here for the value or
35:45 - basically dynamic something dynamic is
35:47 - coming inside JSX
35:48 - right so that's basically it for the
35:51 - prop section and basically if you are
35:53 - creating your own components then you
35:55 - would be able to define what kind of
35:56 - props you want to receive and what
35:59 - happens with your component and all that
36:00 - stuff later on would come to us when you
36:03 - when we would discuss our own custom
36:05 - components but for now you would have to
36:08 - query the documentation to see what
36:11 - components you have for what props you
36:14 - have for a given component right so if
36:17 - you see we could actually can we get the
36:21 - list of components from here I'm not
36:26 - sure so okay it does not let me go more
36:33 - backwards in the code so I guess not so
36:37 - yeah you could just refer the
36:38 - documentation otherwise you can just
36:42 - follow along and just see what kind of
36:44 - props I'm making use of and you should
36:46 - be good
36:50 - started with state in react native
36:53 - alright so if we take a look inside
36:56 - the code you would see that actually I
36:58 - have the app already running on my real
37:01 - device and you could use an emulator as
37:03 - well I'm just using my real device here
37:05 - so it does not really matter
37:07 - okay so what's we learned about props in
37:10 - the last video was that properties are
37:14 - basically these things which are
37:16 - associated with your components and
37:18 - which could be passed down into
37:21 - something known as your child components
37:24 - which would come to later on right but
37:26 - what state means every component has a
37:30 - particular state right so what that
37:34 - means is that if you change the state of
37:37 - your component and my state I mean a
37:39 - particular object in that component
37:41 - react would smartly check what stuff was
37:46 - changed in that particular state and
37:48 - which stuff your component needs to be
37:50 - updated off okay so let's just break
37:53 - this into code example right so first of
37:57 - all let me just get rid of all of this
37:59 - stuff which is not really required and
38:02 - clean it up a little bit so that it's
38:03 - easier for you to see right so we can
38:10 - just keep style sheet I guess get rid of
38:13 - this then text we can just get rid of
38:16 - the image as well here for now
38:18 - there we are alright so now what I need
38:21 - to do is just create a constructor here
38:24 - constructor and I believe you know what
38:27 - this constructor is it's just es6
38:30 - right now what I'm going to do is save
38:33 - this but state is a black object right
38:35 - so this state is actually a really
38:38 - special kind of object it's not just a
38:41 - regular check right now it's monitored
38:44 - by react in the background and whenever
38:46 - I call let's just say this dot said
38:51 - state right if there's something
38:53 - appreciable to be changed then this
38:56 - render method would be called again
38:58 - right so if I use my state variable
39:00 - somewhere in the inside the render
39:02 - method
39:02 - and the said state is called which
39:04 - changes by state variable then what
39:07 - happens is that this component is
39:10 - rear-ended after detecting what
39:13 - particular things are changed right so
39:15 - let's just see a quick example of that
39:16 - so what I'm gonna do here is let's just
39:20 - say okay what I'm gonna do is basically
39:25 - let's just say I'm gonna get rid of this
39:28 - star welcome or basically what we can do
39:33 - is just include this as an array and I
39:38 - can say that this is like custom styles
39:43 - something like this dot custom styles
39:46 - right so what happens now or instead of
39:49 - legs this state custom styles right so
39:55 - what's that what's what I'm doing here
39:56 - is that applying style start welcome
39:58 - which is this block of styles to my text
40:01 - component right now and this thing as
40:04 - well which I'm gonna develop which I'm
40:06 - gonna write here really soon so don't
40:09 - worry about what style does is it's just
40:11 - an example to show what state does right
40:14 - now so I'm gonna say this dot state dot
40:17 - custom styles let's just say this is a
40:20 - custom style and if you follow along you
40:23 - could see that we can set an opacity of
40:25 - let's just say 0 right and what I can do
40:30 - is let's just say I can create a set
40:33 - interval here and I can say something
40:36 - like every 1 second what I want to do is
40:43 - do something like this at set state I'm
40:47 - gonna say my custom styles is actually
40:50 - consisting of opacity of 1 right so what
40:54 - that means is that every second I'm
40:57 - changing something in my main state of
40:59 - the component right so the react react
41:02 - application should technically rerender
41:05 - my component with the updated Styles
41:08 - right ok so let's just go to device and
41:11 - if I just shake my device here
41:15 - I'm hit on reload here you would see
41:19 - that the development server don't okay
41:30 - let's just try to run the bundle again
41:37 - let's see what's happening here so it
41:41 - saves me this is not allowed before
41:44 - super ok cool so we can just call super
41:48 - here and we should be good to go I
41:50 - believe let's just go back to the
41:52 - terminal and see if it's building or not
41:55 - alright so you can see that we have 100%
41:58 - of the build and now if I just take one
42:02 - more time shake my device here hit
42:06 - reload you would see that it does not
42:10 - blink because because opacity is not
42:16 - really the style which you can apply on
42:19 - a text field right so let's just change
42:22 - this from color from varsity to color
42:25 - and let's just say I just want to make
42:27 - this color of let's just be queen and
42:33 - let's just say I just give it a default
42:36 - color of blue here so it will start with
42:40 - blue and it will just toggle between red
42:43 - green red green red green and so on and
42:45 - so forth let's try one more time here I
42:49 - go
42:50 - shake it reload it starts with Red Queen
42:54 - then it's always green
42:58 - okay because yeah obviously you is not
43:03 - turning it back to red right so looking
43:10 - to say here that if this dot state dot
43:15 - custom style start color is red then
43:19 - turn it to green
43:23 - otherwise don't it do good just like
43:28 - that one more time let's just shake our
43:31 - device and you can see how fast these
43:34 - bills are because you're not really from
43:38 - building the whole application itself
43:41 - that's what react native does behind the
43:43 - scene for you so now you can see that we
43:45 - have red green red cream toggling colors
43:47 - with us and basically that is possible
43:51 - because of the state so you see that we
43:53 - do not have any sort of logic which
43:55 - updates which rear Enders this component
43:59 - when the state changes right so react
44:03 - does it automatically on its end that's
44:05 - basically how state works and mostly in
44:08 - bigger application what we that is
44:12 - something known as Redux but it's way
44:15 - too early for things like Redux to be
44:18 - discussed but right now states would be
44:21 - good for us to go and basically would
44:24 - help us to manage the state the actual
44:27 - state of the component how the component
44:29 - remembers stuff we're gonna take a look
44:32 - at what the style sheets are react
44:35 - native and basically this create a
44:37 - little application as well surrounding
44:40 - around that concept
44:41 - so let's it start ok so now you can see
44:44 - that on the Left I have my device open
44:46 - again and on the right we can see the
44:49 - code which is which was responsible in
44:51 - the last tutorial for this toggling of
44:53 - this color so let's just get rid of all
44:55 - of this stuff and let's just see what
44:59 - these style sheets are ok so what's the
45:02 - deal with them is and I mean let me just
45:05 - actually just change it to tabs yep all
45:10 - right so what's happening here is that
45:13 - basically you create some sort of styles
45:18 - in react just like you do on the web and
45:21 - react native converts them into native
45:25 - properties associated with those
45:27 - particular elements right so for example
45:30 - you can position of you somewhere you
45:33 - can basically change the properties like
45:36 - color of
45:36 - texts its opacity and background and
45:40 - stuff like that so what we have right
45:43 - now is which react native what's the
45:47 - thing is that all the layouts would be
45:50 - actually flexbox based right so what
45:53 - that means is that every view container
45:56 - here every element is basically would
46:00 - follow the flexbox system which comes
46:02 - from the web on with CSS right so by
46:06 - that what I mean is that all these
46:08 - elements have by default a display flex
46:11 - property associated with them and you
46:13 - cannot actually change it
46:14 - reactors works on flex box system so
46:17 - what we can do is basically right here
46:19 - we can try to create a very simple kind
46:23 - of like an interface so what that would
46:26 - be is let us say half the screen would
46:31 - be let's say red half to be green right
46:34 - so this is our container let me just go
46:37 - ahead and create another view here let
46:39 - me just say that I have Styles dot half
46:43 - with this right and that in this view
46:48 - and what I'm gonna do is just lift leave
46:51 - this container with Flex of 1 which
46:52 - means this space if I get all the space
46:56 - if it's the only child just if I content
46:59 - link let me just get rid of these first
47:01 - and let me just get rid of this as well
47:05 - all right so what I'm gonna do now is
47:07 - say let's say half as flicks off fund
47:13 - and then background color
47:15 - or let's say red how this was named is
47:22 - half one rate let's just get a name this
47:28 - half - I'm gonna do a similar thing to
47:31 - this we're gonna do here see half right
47:39 - so what's the thing here and again by
47:41 - default on the web flex box follows a
47:45 - flex direction of row right but on react
47:48 - native it follows by
47:50 - for the flex direction of Gollum so now
47:53 - if I just go back to my device shake it
47:56 - a little here just reloaded you should
48:00 - see that we get a red and a blue column
48:03 - here just reposition this right here so
48:08 - you see that our half one is red and our
48:10 - half Dube is blue and as you can see
48:13 - that by default it follows a flex
48:15 - direction of column instead of row so if
48:17 - you want the row then you can specify
48:19 - the here flex direction and then grow
48:22 - and it's safe and actually I can just
48:25 - enable something known as hot
48:29 - freeloading here so you should be able
48:32 - to see changes without me shaking that
48:34 - device so if I just remove the statement
48:37 - again it's safe you can see that hot
48:40 - reloading at its best I can just do it
48:43 - automatically right so that's the thing
48:46 - okay now let this is go ahead and create
48:48 - some complex layouts right so what we
48:52 - can do now and basically if you just
48:54 - know how to play around with flex box
48:55 - it's kind of easy to do so we can say
48:58 - like style start half to one and we can
49:04 - just say a similar thing on half to two
49:10 - and four here I can say half to one it
49:16 - has the same flex up one again and
49:19 - background color of less you see Queen
49:28 - it's also flex of one and background
49:31 - color is yellow right let me just get a
49:38 - comma here and now if you go ahead and
49:42 - see you can see that okay
49:44 - it kind of is not looking like it should
49:48 - and the reason for that is because what
49:51 - we want basically is that yeah it's
49:56 - actually working fine because as I said
49:58 - flex box works in the Flex direction of
50:02 - column
50:03 - all we can do is change this half do
50:05 - right here do flex direction of row
50:11 - right you can see that actually would we
50:18 - can just dismiss that you can see that
50:20 - now we have got a bigger element and
50:22 - then two smaller elements in their way
50:24 - now again it really depends on how much
50:28 - you know about flexbox layouts right so
50:30 - you can just practice them on the web
50:31 - and that would be kind of similar thing
50:33 - on the on here as well so here's a way
50:37 - to actually displayed in do is to one
50:40 - ratio so Green takes sixty six point six
50:44 - six percent of the width and this yellow
50:47 - takes thirty three point three three and
50:49 - there we are
50:50 - so basically now you can just go ahead
50:52 - and include some sort of text with them
50:55 - as well so this is two one right and you
51:02 - can do a similar thing here with saying
51:06 - this was - - under cells one right so
51:12 - now if we take a look you see that it's
51:14 - kind of ugly
51:15 - so what we can do is just apply a style
51:18 - of let's say style stop text here to
51:22 - every text element and we can customize
51:26 - them thereafter just like that
51:31 - so we can say color is white then this
51:37 - is a font size versus a turkey like that
51:43 - and one more thing what I want to do
51:46 - here is say that these half ones and
51:51 - half tools right here have a justified
51:54 - content of center and again if you can
51:58 - observe that these JavaScript values
52:00 - follows camel casing right so what
52:04 - happens here is that if the CSS property
52:07 - was like this then you remove the - and
52:10 - you make the next letters first word
52:14 - capital first letter next words first
52:17 - largely so here we are justify content
52:20 - center-aligned
52:21 - items Center as well so this would the
52:25 - center the text inside the block
52:27 - similarly we can do this to do one and
52:30 - do two and again this would when you
52:35 - make them equal width here and there
52:39 - looks exchanges from yellow to let's
52:42 - just say um black so that the text is
52:46 - visible because here I can see it on my
52:48 - device straight away that it was
52:49 - invisible so I knew so here we are
52:53 - and now if I take a look you can see
52:55 - that we got a Tech Center and all that
52:58 - great stuff right so okay one more thing
53:02 - let's see we can see that half to one
53:06 - and half to do are sharing a lot of
53:07 - common stuff by it apart from the
53:09 - background color they are actually same
53:11 - so what we can do is this we can make
53:14 - something like half DX as a class
53:18 - actually I can just apply all that
53:20 - common stuff right here because it's a
53:22 - good practice as well as well as it will
53:24 - just make the code much cleaner and
53:28 - easier to read I can just get rid of
53:31 - this from that color right so now what I
53:39 - want to do is basically apply have 2x to
53:43 - pull up these elements so how would I do
53:45 - that well to do that what I'm gonna do
53:47 - is instead of supplying this just an
53:50 - object I'll supply this an array of
53:52 - objects and they would be applied in the
53:54 - order in which you supply them so I'm
53:57 - gonna supply it half to X right here I'm
53:59 - gonna say styles got half to X and
54:02 - similarly to our here style start have
54:10 - 2x and right now it does not really
54:12 - matter because the property is to do not
54:14 - you know overlap each other so the
54:18 - precedence does not really matter here
54:20 - now you can see that our code looks much
54:23 - more cleaner and less than the previous
54:27 - one and we can just apply multiple style
54:29 - sheets to our elements
54:32 - so yeah that's basically it and you can
54:35 - basically supply any object you want
54:37 - here you can just associate it Sociedad
54:39 - up check with your state as well and
54:42 - then you would update that variable your
54:46 - render function would be called and your
54:49 - CSS applied styles would be updated as
54:53 - well to that element I'm just gonna show
54:56 - you how to work with text input and
54:58 - react native and basically just allows
55:00 - you to get input from the user and
55:03 - you're gonna make use of text but all
55:05 - the way because you know forms are
55:08 - almost everywhere in every application
55:10 - so for example if you want to create a
55:13 - form to asks about users information or
55:16 - maybe like you're creating some sort of
55:19 - game or something that you want users
55:22 - name and you know the cases are endless
55:24 - so let's just take a look at how to
55:26 - actually write a very basic text input
55:29 - code so right now you can see that I
55:31 - have with me the previous code the codes
55:35 - from the previous tutorial so let's just
55:36 - get rid of all of this right and there's
55:40 - a scare of get rid of this one as well
55:43 - except for this container one right so
55:49 - now what I want to do is inside this
55:51 - view why the heck
55:59 - there we are okay so now what I want to
56:02 - do is basically inside this view I'm
56:08 - going to write text input right here and
56:11 - I can just import it from text input
56:14 - just like that I'm gonna say something
56:17 - like that right
56:18 - so you can see that I immediately get a
56:20 - text input so when I click on that you
56:23 - can see that I can actually type stuff
56:26 - around right so since this is an actual
56:29 - device so I can just create it from my
56:31 - end as well all right so what we want
56:34 - however is you can actually customize it
56:39 - with the various properties and methods
56:41 - associated with it so if we take a look
56:43 - add those you can see right here in the
56:46 - documentation if you just open this and
56:49 - go a little down you can see all the
56:50 - properties on the props associated with
56:53 - it so you can see that we have got a
56:55 - bunch of stuff like editable and maximum
56:58 - length number of lines on blur on change
57:01 - so if we can do is basically target
57:03 - something like unchanged X so you can
57:06 - see that it's definition is called back
57:08 - is called when text inputs change and
57:11 - the difference between on change call
57:14 - back that is calm and takes two inputs
57:15 - text changes and this is that this on
57:21 - change when it would be called then it
57:23 - would not pass the updated text to your
57:27 - function right so that's the basic only
57:31 - difference so if you just want to listen
57:32 - to if the text has changed then use this
57:35 - one and if you want to get that text as
57:38 - well along with that so you see you can
57:40 - use this one so let's just go ahead and
57:42 - implement this on change text and how we
57:45 - do that is simply doing like unchanged
57:48 - text and again as I told you in JSX
57:51 - you have to use this curly braces so
57:53 - that you are actually including dynamic
57:57 - content here right so I'm gonna say this
57:59 - dot handle change text right and again a
58:06 - couple of things here what I'm gonna do
58:08 - is basically find this
58:14 - another reason for this is because we
58:20 - bind a function whenever you know if you
58:24 - want to use some sort of things which
58:27 - are actually associated with this class
58:29 - in this function for example let's just
58:31 - say you want to access state in this
58:34 - function handle change takes so you can
58:37 - access this state only when this of this
58:42 - particular this in this particular
58:44 - function points to this class and
58:46 - basically this is how JavaScript works
58:48 - so I assume that you know a little bit
58:50 - about it it's it's kind of on the
58:53 - advanced side of JavaScript but it's
58:55 - okay I guess you should know this so
58:57 - this if points to this class then only
59:00 - you can access the state obviously that
59:02 - makes sense because state is a property
59:04 - of this class right here but what
59:06 - happens is that methods like these when
59:09 - called from props do not necessarily
59:12 - have the value of this associated with
59:16 - this particular class because the
59:18 - context of this is actually set in to
59:21 - set to whatever function that is being
59:25 - called whatever the calling function
59:27 - wherever the calling function belongs
59:29 - right so let me just give you a quick
59:34 - recap of this so for example if you have
59:37 - let's say an object let's just say this
59:39 - is an object let me just comment this
59:42 - whole thing or let's just leave it like
59:44 - that only so if I have like functioned
59:47 - by function and basically not like that
59:56 - function and then you do like console
60:00 - dot log this right so when you do like X
60:04 - dot function then this points to this
60:07 - particular object right but when you do
60:10 - like something like if you have this
60:13 - function outside
60:18 - like that when you do like function to
60:22 - then this actually points to the window
60:24 - global inside if you're working with
60:26 - with obviously right so what I wanted to
60:29 - say here is that the context of this
60:31 - right here this right here could change
60:34 - whenever depending upon how this on
60:37 - change text is called right so to avoid
60:40 - that what we do is we just bind this
60:43 - function we just force this function to
60:46 - actually follow the dis of this class
60:51 - only all the time right so let's just
60:55 - get rid of or just get rid of this thing
60:58 - and you only need to bind this if you
61:00 - want to actually access something from
61:01 - this class if there's no use then you
61:03 - can just remove this line so what I'm
61:06 - gonna do here is just say this dot set
61:10 - state and again I need this I need to
61:13 - use the spine because I'm using set
61:14 - state which would only be available if I
61:17 - am pointing to this particular class so
61:20 - I'm gonna first of all let me just say
61:21 - this this is value is empty I can say
61:29 - here and I believe it's not really value
61:35 - but because if you set the value of text
61:54 - default value I believe it was yep so
61:58 - yeah if you set up a value of additive
62:01 - of a text input then you would not be
62:03 - able to change it so you need to set
62:05 - default values so this dot state dot
62:07 - value now we're going to say and it me
62:11 - something like that and basically right
62:16 - here we can say value is and actually we
62:20 - can just get the new text here now we're
62:25 - going to say new text right similar on a
62:31 - similar note we can say you are writing
62:36 - this top state dot value something like
62:41 - that where you have to actually reflect
62:43 - the change as you are writing it so let
62:48 - me just reload it right here and okay so
62:54 - the application has stopped let's just
62:59 - see why let's just go to our module
63:07 - bundler let me just try to run it one
63:12 - more time
63:18 - Oh obviously because you cannot have
63:22 - Dexter's floating like that right so now
63:26 - I feel reloaded one more time you can
63:30 - see that you are writing edit me is what
63:33 - I get here and now if I try to did it
63:35 - like remove it you can see that it
63:40 - updates with me right so whatever I'm
63:43 - writing here it's good it gets reflected
63:45 - into the state and what the heck
63:49 - okay so react native run on red might
63:53 - have just reinstall the app so again if
63:56 - you can see it's basically the same
63:58 - thing right so now what you can do
64:01 - basically as a task is that create a
64:05 - basic layout of login right so how would
64:09 - you do that I can just give you a little
64:11 - bit of you know a starter so what you
64:14 - can do is basically say something like
64:19 - username right and you can actually
64:23 - enter this whole thing in a view as well
64:27 - password right and I'll just leave that
64:32 - button bar to you so I'm gonna say this
64:35 - is container flex one a handful X
64:39 - Direction is obviously column so we can
64:40 - just see justify contents enter and you
64:46 - can see it gets us right there and I can
64:49 - just say padding of 20 as well
64:52 - so that we get a little bit of distance
64:54 - right so now you can see that we have
64:58 - got a little nice-looking layout I
65:01 - believe and there's a problem again
65:03 - because you cannot have like username
65:06 - and password reflecting the same thing
65:08 - so use the name and basically you can
65:12 - just keep it in a state or you can just
65:15 - you know get it when you tap on that
65:21 - button as well it's kind of useful for
65:24 - example if you're creating an
65:25 - application where you want the user to
65:27 - enter pin and as the user types 1 2 3 4
65:31 - digits are with you and you can just
65:34 - basically verify it so there you have to
65:37 - just constantly keep your UI and your
65:40 - model in sync but here I guess you can
65:43 - just omit that but anyways so how do you
65:47 - change stakes and yeah basically I can
65:51 - guess we can just get rid of the state
65:55 - here right and basically this one as
66:02 - well new text we can just console here
66:08 - and not really let's just say how do
66:17 - user name changes so for example here
66:28 - you
66:44 - you're gonna take a look at something
66:46 - known as uncontrolled hand control
66:48 - components and what's basically the
66:50 - difference between them so let's get
66:52 - into it
66:52 - alright so here we are with our little
66:55 - dirty applications in the last video and
66:58 - let's us first of all get rid of these
67:02 - methods right here and this one as well
67:07 - there we are there we go and it's safe
67:11 - alright so so far so good now the thing
67:15 - is if you take a look at the last video
67:17 - what we did is that we have to retrieve
67:20 - value of this text input somehow right
67:23 - so what we did first of all is just
67:27 - assigned a state variable to its value
67:30 - and unchanged text we just updated that
67:33 - state variable so that we get the value
67:37 - all the time so the UI and the reactions
67:41 - code react native code is always in sync
67:44 - right so that's a way and the way is you
67:49 - just get this input value whenever you
67:51 - want to for example like on click of a
67:54 - button or you know some action or
67:57 - whatever so it's a specific event right
68:00 - so for example if we if I create a
68:02 - button right here
68:03 - so say this button has a title of hello
68:07 - to save this just include this button
68:12 - here as well so you can see that we get
68:15 - a nice little hello here and what I want
68:17 - to do basically is that when it's
68:19 - pressed this dot button pressed let's
68:24 - just assign this dot button press this
68:27 - button first don't find this right and
68:31 - we can just say button pressed it's a
68:34 - method here so what I want to do is
68:37 - basically get username and password
68:41 - values right so one way is to just like
68:46 - we did earlier but I'll just first of
68:48 - all have explore the other way which is
68:51 - like constant username they're getting
68:54 - that username value and password getting
68:57 - the password
68:58 - before that what I want to do show you
69:00 - is something known as shake it here
69:06 - debug Jace remotely so what it does when
69:09 - you click on it it will open Chrome
69:11 - inside your Chrome browser of actually a
69:18 - react native debugger inside your Chrome
69:20 - browser and you would be pretty much
69:23 - able to access your JavaScript right
69:27 - here so what we can do is basically say
69:30 - something like reference we want to riff
69:34 - for this input field right so what I
69:36 - want to do is say something like a riff
69:39 - and then these curly braces input and
69:43 - I'm gonna say this dot user name is
69:46 - input all right what the heck happened
69:49 - here well this is basically kind of like
69:54 - doing like ID is username in HTML right
70:00 - pretty much you have done this thing so
70:03 - now you can access this input through
70:06 - this dot username right so I'm just
70:09 - gonna get rid of this and say a similar
70:11 - thing to this password I'm just putting
70:17 - an underscore here because I don't want
70:19 - to just randomly by mistake use another
70:22 - variable name user name and they said
70:24 - it's property overwrite its property so
70:26 - it's it's just like it's kind of private
70:29 - but it's not but anyways so what I want
70:32 - to do now is just basically say console
70:35 - dot log they start username this dot
70:39 - password let's just see what this has
70:42 - gotten for us and basically before that
70:46 - what I want to do is just nothing okay
70:51 - so let's just save this and type
70:53 - something type something and hit hello
70:58 - here right and you can see right here if
71:01 - i zoom in a little we get username and
71:04 - password here so if I could like this
71:09 - property last native text you see that
71:11 - we get
71:11 - the actual text f G we see which is in
71:14 - username right and on similar basis we
71:17 - can get last native text on this right
71:20 - so this is like kind of loading your
71:23 - value on demand so I can see username as
71:25 - this that user name dot last natives Tex
71:29 - if I spell it right yep I've got some
71:33 - password is this dot password dot last
71:36 - native text I can just see username
71:41 - password just like that just get rid of
71:45 - this as well it's safe and it's a you
71:50 - again because react native is stolen and
71:53 - here we are so now if I enter SFU and
71:57 - ffff hello because I'm not sure why I
72:02 - did that
72:02 - so f fu is username and F F F is
72:05 - password right now this is a one-way now
72:08 - this thing the width I have done it
72:11 - right now is called uncontrolled
72:13 - uncontrolled component and basically
72:15 - it's not really uncontrolled component
72:18 - in react native this control that
72:20 - uncontrolled analogy is I've just stolen
72:25 - it from react.js because in react cheese
72:28 - and this is the concept right so
72:31 - uncontrolled components are like this so
72:34 - Android is managing its value and it's
72:37 - giving you to whenever you want to
72:40 - access it all right you do not have
72:42 - access to it all the time for to make it
72:45 - a controlled component what you need to
72:47 - do is first of all we no longer need
72:51 - this reference and what we can do is
72:53 - just say default value of this dot state
72:59 - dot username and I can say like on
73:02 - change text is text and I can say this
73:08 - dot set State username is text how
73:15 - similar basis we can do this thing have
73:19 - this one as well password
73:23 - password as text there we are I can just
73:27 - initialize the state with a blank object
73:30 - if you wish or yeah that should be good
73:33 - I guess right so now what I want to do
73:36 - is get rid of these two ones as well so
73:39 - now I always have access to this
73:41 - username and this store password
73:44 - irrespective if I press the button or
73:46 - not so we always have access to username
73:50 - and password because react is now
73:52 - managing those values instead of letting
73:55 - the host platform in this case Android
73:58 - to manage it right if I had same now and
74:01 - if I just entered something like this
74:04 - and hit hello you can see that we get
74:08 - undefined because this dot stayed on
74:16 - username not username like that and they
74:19 - stopped state dot password let's just
74:22 - try one more time hello and I can see
74:29 - that we get just like before but this
74:31 - time react is managing so this is a
74:33 - controlled component now the thing is
74:37 - that you react actually recommends you d
74:41 - always but really always use control but
74:43 - in most of the cases use control
74:45 - components that's okay to use controlled
74:48 - components but the thing is that if you
74:50 - do not really need to interact with
74:53 - these components a lot what I believe is
74:55 - that you are kind of like you know
74:58 - updating state at every keystroke so it
75:01 - might not really hurt performance that
75:03 - much but I guess you could just go ahead
75:06 - with an uncontrolled approach if you're
75:10 - not really interacting with the
75:11 - component at all so you can do that
75:15 - otherwise it's equally good if you're
75:17 - just going a controlled way as well
75:19 - basically just having this controlled as
75:23 - a control component gives you a lot more
75:25 - power than uncontrolled one we're gonna
75:28 - take to look at how to create our own
75:31 - calculator yes you heard that right
75:34 - and react native from the very scratch
75:37 - so let's start off by creating some
75:41 - applications in react because it's kind
75:43 - of monotone us to just go through over
75:46 - everything in react like thousands of
75:48 - components and how everything works and
75:50 - then at the end of the series you would
75:52 - be like what the hell am I supposed to
75:54 - do with all that stuff so I've decided
75:57 - to break this down into little
75:59 - applications built with react native
76:01 - let's start with one calculator and
76:05 - we're gonna see how we go along with
76:06 - that so let's get into it so you can see
76:10 - that right now I have my calculator open
76:12 - now obviously we are not going to make
76:15 - such a UI and functionality-wise
76:18 - application like not gonna do this
76:21 - animation kind of stuff and like all
76:24 - that stuff right now in react native
76:27 - because it's kind of like that wants to
76:29 - do but we're gonna come to that as we go
76:33 - along in the series so you can see right
76:35 - here what we need is first of all a
76:37 - place to actually show the stuff user
76:42 - wants to do then here would be a result
76:44 - and then right here we have our buttons
76:48 - plus the operational buttons right so
76:52 - let's just assign a little bit of UI for
76:55 - this in this video so what we're gonna
76:58 - do is first of all define let's say
77:02 - style start resolve here which should
77:05 - contain our result just like that
77:07 - then what we want is view style as
77:09 - Styles dot I'm not really result but our
77:14 - or you can say that it's result it's
77:17 - just what the result of what user is
77:20 - typing and then we can say calculation
77:23 - here right and then what we want is view
77:29 - style Styles down buttons and like that
77:35 - I'm gonna say that this is view style
77:38 - style start let's say numbers
77:45 - and on the right what we have is style
77:49 - start operations right so that basically
77:55 - is the whole complete layout which we're
77:58 - going to need the parent layout at least
78:00 - so let's just now use styles and yeah we
78:05 - can use actually you would be thinking
78:07 - that what the heck is the difference
78:08 - between actually style sheets start
78:10 - create and just using a regular
78:12 - JavaScript object well the thing is that
78:16 - you should always use style sheet not
78:18 - create because when you don't use it and
78:21 - react cannot actually validate your keys
78:23 - and all that stuff and basically this
78:25 - kind of like some sort of optimization
78:28 - as well which reactors under the hood so
78:30 - in short it does not hurt to actually
78:32 - use style sheet or create all the time
78:34 - when you're creating styles so just
78:36 - stick with that so with tapping down
78:38 - let's just create some Styles now now
78:41 - for the container part what we need it's
78:43 - just a flex one so that it gives us full
78:45 - screen right now then for the result
78:48 - moving in right now it's less to see I
78:52 - give it a flex of one right I give it a
78:57 - so say background color of red for now
79:01 - so that it's visible to us then for
79:04 - calculation pad I'm gonna give it a flex
79:07 - off or let me just give it a flex of two
79:11 - here
79:11 - flicks off one here right and I'm just
79:15 - gonna make it background color of green
79:20 - right then for this part for buttons
79:25 - what I want first of all is basically
79:28 - like I want to display these buttons in
79:32 - a column right so what I'm gonna do here
79:34 - is say flex direction as column or
79:39 - actually in row I want to display this
79:41 - in group right because by default
79:44 - react.js displays everything in columns
79:47 - so I want to display in in a row has two
79:51 - elements so there we are then for the
79:56 - next part what we have is numbers
79:59 - numbers go right here I'm just gonna say
80:04 - this has a background color of let's say
80:08 - yellow for now again so that it's just
80:12 - visible nothing to do with original
80:16 - application which we would be developing
80:19 - an operations would be bagging color off
80:21 - let's just say how many colors are there
80:26 - versus a black for now right and let's
80:30 - just give them a flex property as well
80:32 - and for the buttons what we can say is
80:34 - this flex grow one so that it just
80:37 - occupies all the remaining space so
80:40 - numbers could be flicks of let's say d3
80:45 - I'm not really sure we have to play
80:47 - around numbers here and I can give it a
80:50 - flex of one here so there we are and now
80:54 - if we take a look at what we have
80:58 - actually done so to do that let's just
81:00 - go back to terminal and do a react
81:02 - native run Android here so react would
81:07 - fire the application real quick and by
81:10 - the time we are waiting for that to
81:14 - happen let's just see how we're gonna
81:16 - create these numbers so to create them
81:20 - again we will need to have one two three
81:23 - four separate views inside our numbers
81:27 - which would contain rows of elements
81:29 - right because we cannot have grid
81:32 - layouts and all that fancy stuff and
81:34 - react yet because it just supports a
81:37 - single display and holy crap we use not
81:39 - imported that is so cool
81:42 - let's just import that and here we are
81:44 - well it kind of looks bad
81:47 - because the result is stupid right so
81:51 - what we can do instead is instead of
81:55 - using flex flow here let's just say I
81:57 - have a flex off we have 2 plus 1 3 and 7
82:02 - so it takes 70% width of the screen
82:04 - right it takes 20% and it takes 10%
82:09 - height not the weight sorry
82:12 - so there we are with a very basically
82:14 - out for our calculator
82:17 - we're gonna take a look at how we can
82:20 - actually go along and build the
82:22 - internals of our parent layouts and
82:25 - let's get into it really quick so um we
82:29 - can just create some buttons here by as
82:33 - I said in the last video by creating
82:35 - rows of buttons so I'm gonna say style
82:38 - start row here right so this would be
82:41 - our rows and we're gonna need one two
82:47 - three four four rows right here so we're
82:50 - gonna say you one two three four just
82:54 - like that and for each row we're gonna
82:57 - need a button it's so button title and
83:01 - I'm just gonna give it a title off let's
83:04 - just say zero for now to every rule
83:10 - just like that so we're gonna have one
83:14 - two three we're gonna have one two three
83:19 - and we're gonna have one two three and
83:24 - you're gonna have one two three
83:26 - there we are right and button is not
83:31 - defined very well let's just import this
83:34 - guy and there we are okay so what the
83:37 - heck is this so what we want to do
83:39 - actually is display these elements
83:42 - inside a row right so I'm gonna say
83:45 - right here as flex direction of row as
83:51 - simple as that so you can see we get
83:54 - these elements now but what's the deal
83:59 - with them is that we want these rows to
84:06 - be equal in height all of them and
84:09 - occupy all the space so there we are
84:11 - that's a start and what we can say is if
84:19 - I'm not wrong just if I content we'll
84:22 - have to take a look at this Center
84:24 - aligned items
84:27 - stretch stre TCH or it could be other
84:31 - way around as well I'm not really sure
84:32 - yes it is I believe
84:41 - um okay so we have just a Content value
84:47 - of let's just okay give it a central the
84:53 - I believe there used to be a stretch so
84:58 - anyways let's say this is spaced around
85:01 - instead so that we get nice little buns
85:05 - buttons like that
85:06 - okay so now we have buttons so what we
85:09 - want to do is basically add these
85:11 - operational buttons as well so to do
85:14 - that again we're gonna make use of and
85:16 - actually we can just kind of make use of
85:20 - the buttons here directly because these
85:27 - buttons actually are one single row one
85:31 - two one what the heck
85:34 - one two give me a second here all right
85:40 - one two three four there we are
85:46 - and if we save this take a look just
85:51 - like that again but style start
85:55 - operation right so what we're gonna do
86:00 - here is say that it's flex Direction is
86:04 - obviously column but I want justify
86:09 - content as based around here as well so
86:14 - that we get something like that right so
86:17 - actually I guess we should just take a
86:20 - look at the docs to see what justify
86:23 - content here accepts and you can see
86:28 - that it accepts flex start flex and
86:30 - center space between space around and
86:33 - space evenly alright so how about if I
86:37 - want to stretch it line items stretch
86:43 - stre TCH I'm not sure I guess it used to
86:48 - be somewhere but it's okay
86:52 - stretch okay so alright anyways so here
87:05 - we are
87:06 - but that kind of looks funny Louis's
87:08 - reverted back to Center at least for now
87:10 - so here we are with the basic layout we
87:15 - want in here is for the result part text
87:19 - style styles dot result text right we
87:28 - can say just basically like one to one
87:33 - just like that and for calculation
87:37 - always the same eleven times eleven here
87:39 - and for calculation part what we're
87:42 - gonna do is say a similar thing style
87:46 - styles dot calculation text and again we
87:53 - are doing all of this in a single file
87:56 - but don't worry about that we're gonna
87:59 - take a look we're gonna learn how to
88:00 - split reaction react native code into
88:04 - multiple modules because that's
88:05 - essentially what you're gonna do all the
88:07 - time because that's a best practice
88:12 - actually just modularizing your code so
88:14 - calculation takes what I want to do with
88:17 - this is font size as 20 color that's
88:25 - white and similarly to not really
88:30 - calculation text I believe to resolve
88:32 - text that's what I wanted
88:34 - so result text here we are for
88:39 - calculation takes what I want to do is
88:41 - font size that's 14 and color as white
88:46 - too
88:48 - and there we are
88:50 - so let's just increase this a little bit
88:53 - more 30 Alice's bracket 24
88:58 - all right so now we just want you to
89:00 - central and that stuff so I'm just gonna
89:04 - say it was sold right here if you see
89:07 - just if I content on flex and just if I
89:13 - contended I guess when you're working
89:16 - with the Flex direction of column it's
89:20 - kind of like it always confuses me it's
89:23 - kind of like justifies along the y-axis
89:26 - let's see Center aligned items flex and
89:35 - yeah so it was complete guess rates and
89:39 - just worked out just fine so we're gonna
89:41 - need a similar one on our calculation
89:46 - pad as well so there we are here we go
89:53 - so this is the basic layout of our
89:56 - calculator right now I know we need to
89:59 - expand these buttons we're gonna take a
90:00 - look at that in the next videos and we
90:04 - need to change this content as well all
90:06 - along all these buttons and all these
90:09 - numbers should be right
90:14 - and let's just make a little bit more
90:16 - usable and customizable
90:18 - okay so right now you can see that we
90:21 - have these tiny little ugly buttons
90:24 - right here with us so let's just make
90:27 - them full width and height and do that
90:30 - actually what we have to do is not use
90:32 - this button but use something else let's
90:35 - just say touchable opacity and what this
90:38 - is is basically just like a button but
90:44 - it just responds to your touch nicely so
90:48 - I can just say that this is something
90:52 - like that and if I just change it for
90:56 - one row right now there we are
91:01 - let's save it okay we just need button
91:06 - for now so yeah touchable opacity needs
91:13 - you to add a text node so we'll need to
91:18 - change it here as well so now we can see
91:28 - right here is that if I touch on this
91:34 - kind of response if you can see so let's
91:39 - say this is dialog button right here
91:41 - with us so here we are
91:52 - right and right here if I just go ahead
91:54 - and say button
91:57 - pals flex one align items
92:04 - stretch line self as stretch as well and
92:12 - this should be obviously stains right so
92:22 - we can see now that the statue below
92:25 - Vasa T thing responds even if I tap
92:28 - right here right instead of on that zero
92:31 - so that means our button is kind of
92:34 - working for now so what we can say is
92:37 - just instead is just make it like just
92:43 - if I content center and a line items
92:47 - Center because we would be any real
92:50 - listening to the touchable opacity right
92:55 - here instead so let's just see you can
92:58 - see that it would get messy really
93:00 - quickly right here if we continue to
93:03 - develop code like this so what I'm gonna
93:05 - do is actually develop this whole button
93:07 - section separately so let's just say I
93:10 - do something like for let I equal zero
93:17 - high as less than three I plus plus
93:19 - which is the number of one two three
93:23 - four let's just make it for number of
93:26 - rows for let I equal four let J equals
93:30 - zero J is less than three J plus plus
93:35 - right for now if we can do let's just
93:39 - say that to let two elements is
93:46 - something like that or we can just say
93:50 - something like view or actually let's
93:57 - just keep in an empty array so what we
93:59 - can do right here let's just say lit row
94:07 - is also an empty array and right here
94:11 - what I'm gonna say is add row dot push
94:15 - touchable opacity and basically this
94:18 - block of code right here I'm just gonna
94:23 - copy this and let's just change it to I
94:28 - or a rather I plus one right and here
94:36 - I'm gonna say elements dot push and what
94:42 - I want to push is a view style of style
94:46 - start row with the our row in it and
94:52 - here we go so I hope it makes sense I
94:55 - can just name it rows so that it makes
94:57 - more sense right so we have our all that
95:04 - stuff now so right now what I can just
95:07 - basically do is go ahead and delete all
95:09 - of this and just say and actually till
95:15 - here and just say rows right if I hit
95:21 - save you can see that we get it right
95:25 - but it kind of is not really what we
95:29 - want so it would be kind of like this so
95:32 - you can see the that we get one two
95:34 - three two three four three four five or
95:37 - the hell okay let's see so you might
95:44 - want to just debug this stuff later on
95:46 - so I'm just gonna assume that I got
95:47 - numbers in the right place I'll just
95:49 - take a look at why they are not in the
95:52 - right place it's it's somewhere in this
95:53 - logic so you can just figure it out
95:54 - yourself so what I want instead right
95:58 - now is to just basically show you can
96:00 - see that all of these buttons now
96:02 - respond to the touch so we can say that
96:05 - I can give it a property of like style
96:09 - start button text right and I can just
96:14 - go ahead and create this as well and say
96:17 - that it's as a four
96:18 - size of let's say 25 maybe or let us say
96:27 - 30 right so here we are with our buttons
96:33 - right here for the calculator and
96:37 - similarly what we can do for our
96:42 - operations is a similar thing right here
96:46 - so actually let's just fix it right here
96:50 - quickly actually to fix this what we can
96:54 - do is just say let nums is let's see 1 2
97:03 - 3 4 5 6 7 8 9 and actually for the last
97:13 - row we had to actually walk out of the
97:17 - loop because last row is not really you
97:23 - know numbers all numbers so it's kind of
97:26 - like I'm not sure there's 0 in middle
97:30 - and there's an equal to a belief at the
97:33 - end but again I'm not really sure so
97:36 - let's just keep it 0 0 and equal to 1
97:38 - now
97:38 - I'll just see in the calculator later on
97:40 - so now I can just say here as nums of I
97:45 - and J right and we get our correct
97:51 - output now so that is one way and
97:55 - similarly what we can do is for the
97:59 - operations we can name them like plus
98:03 - minus multiply divide 1 2 3 4 right so
98:11 - what I'm gonna do is now let's just say
98:14 - I copy this well actually we do not need
98:18 - to copy it at all we can just say let k
98:21 - equal to 0 and actually we can just make
98:22 - use of I again because this is scoped
98:28 - inside the function
98:29 - so I'm just gonna say I plus plus again
98:33 - just like that so again let's just see
98:38 - let ops something like this so I'm gonna
98:43 - say ops dot push and then this whole
98:48 - stuff right here which we had earlier
98:52 - with the exception that again this is a
98:55 - button in fact but this would be
98:58 - operations and this could be the bet
99:01 - index only that's not a problem so here
99:04 - we are and let's just name this ops here
99:08 - and operations of I should be sufficient
99:11 - here and there we go so what we can do
99:17 - here is instead of just applying the
99:21 - button takes class what I can do is
99:23 - apply another class style start white
99:26 - well let's just say which is we'll just
99:29 - mix it white right so there we are with
99:36 - our basic calculator interface with the
99:40 - buttons working kind of right at least
99:44 - responding to the touch but the result
99:48 - and the calculation power is still the
99:51 - same so we're gonna take a look at that
99:53 - in the next tutorial
99:59 - so right now you can see that our
100:01 - calculator interface kind of looks
100:04 - complete
100:05 - I believe the buttons are in place the
100:08 - buttons buttons kind of respond a little
100:12 - well as well and they are full
100:14 - read/write so you can just click here
100:16 - and we'll just respond right you can
100:20 - click here and the four would respond so
100:22 - if we just if you can just draw the
100:23 - boundaries then you would be able to see
100:25 - that these are actually enclosed inside
100:28 - a boundary right okay so anyways first
100:31 - of all let me just fix this that this
100:33 - should be a dot right here right and
100:36 - what we have for now is that too we have
100:42 - to actually get the function get some
100:49 - sort of function called whenever I click
100:51 - on this button so let's just go ahead
100:53 - and create this so I'm gonna say that
100:55 - this is something like button pressed
101:02 - right so I'm just gonna say that I would
101:05 - just get the you know text of that
101:10 - particular button let's just see so
101:13 - right here what we can say is something
101:16 - like when I click on this on on press I
101:25 - believe so once you do that what I want
101:29 - to do is just call this function right
101:31 - here this dot button press with the
101:34 - argument of Nam's
101:36 - I and J rights effects go ahead and save
101:41 - this and for this console dot log this
101:45 - as well it's safe and if you just go
101:49 - ahead and shake my device here a little
101:51 - and enable and actually it's already
101:54 - enabled so we should be able to see it
101:56 - somewhere right here so you can see that
102:00 - our app right here is enabled
102:07 - so it's just bugging about that we
102:11 - should add a key property so that kind
102:14 - of fits well with react so I can just do
102:16 - that on these warnings would go away so
102:18 - it's not a problem right here so what we
102:20 - can do now is tap a button so one two
102:24 - three four five six seven eight nine
102:27 - zero dot and equal to okay
102:31 - everything is responding correctly right
102:33 - so what we want to do is basically once
102:36 - we tap on these particular buttons I
102:38 - want to update this thing right so what
102:42 - I want to do here is say for example
102:45 - first of all let me just get the view
102:49 - right here which is responsible for this
102:52 - and this is our this one this view right
102:55 - so we want to do is basically set this
102:59 - text to something like this dot state
103:06 - dot let's just say result text because
103:11 - again as I told you earlier if I change
103:14 - my state variable somewhere then the
103:17 - rendered render call would automatically
103:18 - be called by react under the hood and it
103:21 - will just update that particular thing
103:24 - that particular component right so what
103:26 - I can do right here is just say well
103:29 - actually right here we can just keep the
103:31 - result text blank it does not really
103:32 - matter if it's smell it just does not
103:34 - print that so what I'm gonna do is say
103:37 - this that said State and I'm gonna say
103:40 - result text is whatever the text was so
103:44 - this dot State that result text plus our
103:47 - update text right here which comes from
103:50 - the button right so if I save this and
103:53 - see like one two if I type close so you
103:58 - can see that it reflects right here so
104:00 - if I can just remove this and say 12.54
104:04 - like that or five four nine something
104:07 - like that now the problem with this is
104:09 - obviously like if I type equal to then
104:12 - it this writes that as well because it's
104:15 - not really distinguishing right now
104:17 - between the different kind of numbers
104:21 - the only thing which is not a number
104:23 - really right now here is this equal to
104:25 - sign because a decimal can be you know
104:28 - you can regard it as a number because it
104:31 - is used with numbers so what you want to
104:33 - do is add a little bit of validation
104:35 - here so let's just add an equal to
104:38 - validation so I'm just gonna say if text
104:39 - is equal to an equal to well in that
104:43 - case what we want is we want the actual
104:48 - result so far which we have right here
104:50 - so I'm just gonna say calculate result
104:54 - here with this dot state dot result text
104:58 - like that and actually we can just
105:01 - return from here as well so I'm just
105:04 - gonna say actually this should be this
105:07 - right so I'm just gonna say calculate
105:09 - result I'm just gonna say text here we
105:13 - could have just access it here also but
105:16 - yeah actually we can just do it right
105:19 - here as well because we have access to
105:21 - state and all the methods right so what
105:23 - I'm gonna do is this a constant
105:26 - text is my result text so we actually
105:30 - need to now parse this text basically
105:35 - like you have to broke break this text
105:38 - into tokens and then perform all the
105:41 - operations accordingly right so we're
105:43 - gonna learn a little bit of tricks here
105:46 - how computers actually do calculation so
105:49 - that's basically how we are gonna going
105:51 - to proceed so when you actually enter a
105:53 - huge kind of like 3 plus 3 times 6 let's
106:01 - just say raise to the power of 5 divided
106:04 - by 2 plus 7 all that stuff so how a
106:09 - computer would read that we'll just take
106:11 - a look at that later on right when we
106:13 - come to parsing this text right so that
106:18 - could be an example for us so for now we
106:22 - have fixed the equal to problem so you
106:25 - can see that if I tap on equal to we do
106:27 - not really get that equal to type and
106:29 - again what we can do is just basically
106:34 - not allow
106:35 - a lot of zeroes in the front it's okay
106:38 - to have zeroes like that but it's not
106:41 - really okay to have zeros a lot of
106:43 - zeroes in the front right and actually
106:45 - what we need to do is add a back button
106:47 - to the app as well and if you just take
106:50 - a look inside the calculator will be
106:54 - happy the delete button right here right
106:57 - so what we have is 1 2 3 4 5 but how's
107:02 - it working division multiplication minus
107:06 - and plus plus minus multiplication
107:09 - division 3 1 2 3 4 1 2 3 4 5 ok yes so
107:17 - the rules are uneven the number of rules
107:21 - are uneven in this case so now we can
107:23 - just do that that should be easy for us
107:25 - now we just have to add a let's say
107:29 - let's just keep it D for now to delete
107:33 - the text right and what we can do is
107:36 - basically let it wait and what I want to
107:40 - do now is if I type something and if I
107:43 - press this D button right here
107:45 - I want this text last element to be
107:52 - deleted now this is a little bit of
107:54 - tricky part here because right here we
107:57 - are just generalizing it over the loop
107:59 - so what we want to do instead is what we
108:04 - can do is let me just think I guess we
108:09 - could add each of them separately or
108:13 - what we can do is just on press we can
108:18 - pass in this function let's just say
108:22 - this is operate actually we have to do
108:27 - this startup right here and say
108:29 - operations of I right so once we have
108:33 - that what we can do is call this operate
108:36 - function with the operation right I'm
108:41 - just going to switch over this operation
108:43 - because why the hell not
108:45 - so I'm gonna see case D which is the
108:48 - delete in our case what I want is that I
108:51 - want to update the state again remember
108:54 - this text right here is set with the set
108:57 - state so what we have is let's say we
109:00 - gonna text back again this dot state dot
109:04 - result text which gives us this text
109:08 - right here back to us right okay so what
109:12 - I want to do now is actually just split
109:14 - it so what you can do is this slice it
109:16 - or just you know convert it into an
109:18 - array and just do it in one line so I'm
109:21 - just gonna do it in one line I split it
109:23 - by every character then what I want to
109:25 - do is just you know I'm actually we can
109:30 - just do like text dot pop I guess it's
109:34 - pop for back and unshifted for front so
109:37 - we should be good so once we have done
109:40 - that and actually we can say let text
109:44 - here right here and takes job joint I'll
109:47 - actually you could just run a slice call
109:49 - here as well I don't really remember its
109:51 - syntax otherwise I would have done that
109:52 - but here we are simply with the split
109:55 - call as well so now what we have is that
110:00 - we want to update the state again so I'm
110:01 - just gonna call and said state method
110:03 - right here and say result text is again
110:06 - equal to our text right here so if I hit
110:09 - save now and if I just type something
110:12 - like five by five head D you can see
110:15 - that it gets erased and obviously that's
110:16 - a bad example because all that just was
110:19 - same so if I write one two three and
110:24 - okay how it did it add a comma itself if
110:29 - I delete it okay so here we are with our
110:34 - first bug I'm not really sure how it did
110:38 - that let's just reload it so if I add
110:41 - like five five five five five five one
110:45 - two three
110:46 - how the hell did that come up here there
110:50 - so if I do delete now so it saves me
110:54 - this top state dot result text dot split
110:58 - is not a function okay well why is it
111:10 - not I believe we can just console dot
111:15 - log R they start state dot result text
111:19 - here every time so that we can just see
111:23 - in the console what exactly is going on
111:25 - so if I just reload it here
111:28 - so if I write five five five numbers
111:31 - like that and delete a lot of times so
111:34 - we see that if I hit delete a lot of
111:36 - times we get this thing so let's just
111:39 - see it in the debugger so we have it
111:48 - correctly wait a second what exactly is
111:52 - happening here oh this is oh obviously
112:00 - because this should go like here because
112:03 - we cannot just split over an array again
112:05 - right so if I do like this now and hit
112:10 - delete yeah it makes sense now because
112:12 - what I was doing here is that I was just
112:14 - joining it but I'm I was not storing
112:16 - this result anywhere right so it just it
112:19 - was just a waste call so now you can
112:21 - type basically anything like if I just
112:24 - remove this dot and all that stuff I had
112:27 - delete to delete that and here you are
112:29 - it's just a basic implementation of the
112:32 - typing feature for now
112:37 - so here we are with our tutorial from
112:41 - the last video I don't know what that
112:44 - means but anyways so let's just proceed
112:46 - where we have been doing so far so in
112:50 - this video I just want to add support
112:52 - for these plus minus and multiplication
112:55 - buttons as well here and actually we can
112:57 - see that we do not see the division
113:00 - button and the reason for that is that
113:04 - because we are omitting that and
113:07 - actually we can just make it a little
113:09 - bit more dynamic by just replacing this
113:12 - for with or actually not this one this
113:16 - for with the length of this but it does
113:18 - not really matter because in calculators
113:20 - we have very fixed operations available
113:23 - with us especially in the one which we
113:25 - are coding right now right so here we
113:30 - are with our little division sign back
113:32 - with us so now what we want to do is
113:36 - just say that to when it's not D when
113:42 - it's something like say plus so again I
113:45 - just want to add it for now
113:48 - to the screen because we're gonna
113:51 - tokenize all our text later on so it
113:54 - should be kind of easy for us so four
113:57 - plus four minus four plus four minus and
114:03 - for multiplication and for division what
114:09 - I want is just at a basic validation
114:11 - that our text is not really black
114:15 - there's something at least to the left
114:18 - of it right because that's what we
114:20 - really want I don't want a person to
114:22 - start with a plus sign because that does
114:24 - not make sense
114:25 - so what we can do is just say that if
114:30 - state this dot state dot text is equal
114:35 - to blank that means the user is directly
114:37 - pressing these buttons which we do not
114:39 - really want so I just want to say return
114:43 - just like that and actually this should
114:45 - be the case in our case D as well
114:49 - because I
114:51 - want the user to go beyond anything it
114:54 - does not really make sense because movie
114:57 - are doing essentially here if you take a
114:59 - look inside the console you can see that
115:02 - we get a blank element splitting on a
115:05 - blank element right here you can see it
115:08 - does not really make any sense
115:10 - because it returns us a array of zero
115:14 - length so when we split on that we pop
115:16 - it we get nothing
115:18 - so we get we joined it with nothing to
115:21 - get a string back an empty string so
115:23 - yeah it kind of works out itself but we
115:26 - can actually just add this validation
115:27 - right here so if it's not the case then
115:30 - what we want to do actually just make it
115:33 - shorten in a single line so that we can
115:35 - just space save two lines whenever
115:38 - necessary there we go so now if that's
115:41 - not the case then what we want to have
115:43 - is just this not set state as a result
115:50 - text is this dot state dot result text
115:54 - plus our operation right there
115:58 - operation there we are so now if you
116:03 - just see something like this plus this
116:09 - minus this all right looks good now
116:12 - another thing which I want to do is on
116:14 - the button pressed if this thing is a
116:17 - Cali is an equal to button so obviously
116:20 - what I want to do is verify a little bit
116:24 - of results a little bit of you know
116:27 - things right here that first of all what
116:31 - we can see is let me just say let me
116:34 - just think about it what we can do is
116:38 - just see if text dot or actually should
116:48 - we just open eyes everything first let
116:50 - me just think here so we can actually
116:53 - ultimately we have two tokenize the text
116:56 - anyway right so yeah I guess we should
117:00 - dokkan eyes all the text first and then
117:03 - proceed onwards and back
117:04 - organizing what I mean is that if our
117:07 - text is something like this so I can
117:09 - just convert it into like three then
117:12 - plus then three then star and then six
117:17 - and then power and all that so they're
117:20 - not really like that and it's just like
117:22 - splitting character by character but
117:23 - obviously like in the order of how it
117:26 - should be organized so yeah I guess then
117:29 - that's it for this video I believe
117:30 - because in the next video I will be just
117:32 - showing you how to organize all of this
117:35 - stuff once you press calculator once you
117:38 - actually press an equal to and obviously
117:39 - we can fix this little bug right here
117:42 - which just allows us to type for single
117:45 - sign multiple times so what we can do
117:48 - right here for now is just say if this
117:51 - dot state of text is blank or this dot
117:56 - state dot text dot let me see
118:03 - split dot two let's see op equals two or
118:12 - let's just say this is our character
118:15 - right so what I want now is actually
118:20 - test whether this is okay let's just
118:25 - take it this way let me just clear stuff
118:28 - so I'm just gonna get the last character
118:30 - last character I'm just doing it so that
118:33 - it's easier for you to see and follow
118:35 - along so this gives us our last
118:37 - character inside this field for example
118:40 - a minus for now and what I want to do if
118:43 - last character dot are actually not like
118:48 - that
118:48 - if operations dot index of the last
118:52 - character is not equal to negative one
118:56 - that means that means that last
119:00 - character is in fact an operation so
119:03 - what I want to do is just return because
119:06 - I do not want to have two simultaneous
119:08 - operations right so again what we can do
119:11 - is just and actually not like that
119:15 - because the operation could consist of
119:17 - delete
119:18 - character as well which we want to allow
119:19 - so we can say is greater than zero right
119:24 - so it omits our delete character and
119:27 - actually let me just move it actually
119:31 - let's just change this to a class
119:34 - property instead so this start
119:37 - operations there we go and I'm just
119:39 - gonna say this start operations just
119:41 - like that and move it into our
119:44 - constructor just like that
119:47 - all right so here we are now what I want
119:50 - to do is actually I have already done
119:52 - that so let us hit save and see if we
119:55 - can see anything okay we get a split off
120:00 - off undefined because it's not text it's
120:05 - actually result text it's safe reload
120:11 - plus operations was not different
120:15 - because this is test dot operations
120:17 - that's well that's embarrassing
120:19 - anyway so let's just save it reload Wow
120:26 - plus minus does not work very well
120:30 - divide yep does not work and if I hit
120:34 - delete it works perfectly fine so there
120:37 - we are with a little bit of more
120:39 - validation
120:42 - so if we see right here inside the code
120:44 - we had last time is that basically we
120:47 - can just tap on some numbers and add
120:51 - some operations as well and there's kind
120:53 - of a little validation as we were going
120:55 - along as we type all the stuff right so
120:59 - we can actually delete them as well and
121:02 - so on and so forth so what we want to do
121:05 - now is as I said when we want to
121:08 - calculate the result we want to parse
121:11 - some text like this so if you just
121:14 - consul not log this text first it's save
121:18 - and let's just reload the app what the
121:21 - heck does react
121:22 - sometimes this you know does not reload
121:26 - on savings
121:27 - let me just manually reload here right
121:30 - here by hitting reload
121:32 - there we are so now if you just take a
121:36 - look like if it's a say 21 + 54 and what
121:44 - I'm gonna do is this press this equal to
121:46 - right here let's see what we have inside
121:49 - our console we have 21 + 250 volt right
121:54 - so what we want to do now is basically
121:57 - calculate this right so this is easy but
122:00 - with operations like doing like times 8
122:05 - minus this divided by this stuff like
122:09 - this what we want to do is just follow a
122:12 - kind of a standard or something now
122:14 - there are I guess two standards I'm not
122:16 - really sure what I know which off is
122:19 - both mass which is like you have to
122:21 - follow brackets first then off which is
122:26 - not really a mathematical operator right
122:29 - here inside our calculator then division
122:33 - then multiplication then addition then
122:38 - subtraction right so if there are
122:40 - brackets you have to follow brackets
122:41 - first and then sleeve this then division
122:45 - and multiplication then addition and
122:47 - subtraction right so we can do that so
122:51 - to do that what we have is the first way
122:54 - is basically there are two ways to
122:56 - calculate this text right so what we
122:58 - want to do is like let's see you might
123:01 - want to have like split the character
123:05 - with each character or maybe like I
123:08 - trade over yeah splitting and I trading
123:12 - over each of the character like that so
123:16 - now you're gonna say if character is
123:18 - your special character something like
123:20 - this or you can just use an array and
123:23 - test if their character is actually
123:25 - included in that particular array then
123:27 - you want to do something right so this
123:30 - is a basic logical implementation of a
123:33 - calculator but what we can do since we
123:35 - are making use of react native and again
123:38 - if you remember we are running
123:40 - JavaScript right so we can cheat a
123:43 - little here so what I'm gonna do instead
123:45 - of this all this brainstorming and
123:48 - finding out what stuff goes where and
123:51 - aligning brackets and all that stuff
123:53 - what we can do instead is make use of
123:56 - our old good but in famous friend you
124:00 - all so you all is actually used to
124:03 - evaluate a value which is in a string
124:07 - right so if I try to do you Val this
124:11 - value right here eval 21 plus 55 let's
124:17 - just say you see that we get this if I
124:20 - do eval off like alert you see I get an
124:23 - alert so eval is basically used to
124:26 - evaluate a string as a JavaScript code
124:30 - you should never use this on user input
124:33 - but we're gonna use this on user input I
124:36 - know right because of two reasons first
124:40 - of all this is not a web application so
124:42 - doing an email of alert is not going to
124:45 - work really because we have not made our
124:48 - app sophisticated enough to have
124:51 - JavaScript functions executed inside our
124:54 - Java running runtime environment right
124:57 - so this could possess a problem if we
125:00 - are kind of allowing anything to be
125:04 - typed on the keyboard and then
125:05 - evaluating it but since we are
125:07 - restricting the user input
125:09 - - only numbers basically and these signs
125:14 - we can pretty much hope that they're not
125:17 - able to type characters and you know
125:19 - kind of self XSS them so yeah so it's I
125:24 - guess safe to do so if I do like eval of
125:26 - text so if I just console.log this as
125:31 - well so yeah let me just comment this
125:35 - out for first let's just freaking reload
125:40 - this application enable library loading
125:43 - there we go
125:43 - basically actually I just flashed my
125:47 - phone's Rob so that's why I guess I lost
125:51 - some options here so it's Android 8.1
125:55 - quite impressive it's it's actually a
125:58 - resurrect remix ROM so if you have use
126:01 - that it's kind of smooth til now works
126:04 - awesome I'm really liking it so yeah and
126:09 - if I do like 22 times 11 and then if I
126:14 - just dismiss this equals 2 and then if a
126:18 - good like console you see you see that
126:21 - we get 22 times 11 is equal to 242 which
126:25 - is in fact what JavaScript would tell
126:27 - you anyway because that's the result
126:29 - javascript calculated right so we want
126:32 - to do is now basically update this value
126:35 - and set our results right so what I'm
126:37 - gonna do is say this dot set state and
126:41 - I'm gonna say actually what do we call
126:44 - this so we are kind of like saying that
126:52 - this is calculation text so let's just
126:54 - name it that calculation text and there
126:59 - we go so what I'm gonna do right here is
127:02 - again just initialize it for the stake
127:05 - of sanity here and what I'm gonna do is
127:11 - just say that I just want to set the
127:14 - state with the heck are we this dot set
127:17 - state calculation text is eval which is
127:21 - evaluating
127:23 - the input supplied by the user so if I
127:26 - just dismiss this on 66 plus 55 equals
127:32 - 121 there we are
127:34 - I'll actually disused dummy placeholder
127:37 - with 121 only I believe so that's kind
127:40 - of like and it's completely random right
127:43 - you see that kind of works properly now
127:47 - there could be a couple of problems here
127:49 - for example if I just write plus and hit
127:52 - equal to you see that we get unexpected
127:55 - end of input
127:55 - that's because we are trying to evaluate
127:58 - something like evaluate to plus right so
128:05 - this is the problem so obviously we do
128:07 - not we cannot just leave everything on
128:10 - eval so we need to do some sort of
128:12 - validation at our end as well before
128:14 - actually executing this function
128:19 - so lets us get into the validation of
128:22 - this text before we actually hit it and
128:25 - if we see what we have right here is
128:29 - that how we are calculating this is if
128:37 - we press equal to we see that we call
128:41 - this function but actually before
128:42 - calling this function what I want to do
128:45 - is just validate the text as well so to
128:49 - alidade the text what I want to do is
128:52 - just basically say something like this
128:56 - dot do Ally date and this not calculate
129:01 - result so what it will do basically is
129:03 - that if this function returns false then
129:05 - obviously the second condition for the
129:07 - ant would not run so this returns true
129:10 - then our this function would actually
129:13 - run so we can safely just implement our
129:15 - logic right here so again we're gonna
129:17 - just get the text first with this dot
129:19 - state dot result text right here all
129:23 - right so now as of now what I can just
129:26 - imagine as a case is that we just leave
129:31 - an operator right there so if we do like
129:35 - something like if text at sli's negative
129:39 - one is equal to like plus or actually
129:46 - like we can just switch over it as well
129:48 - if you want we can actually just create
129:52 - an array as well of these operators
129:53 - there are so many ways to do it single
129:55 - thing in JavaScript sometimes so take
129:59 - stuff slice negative 1 is equal to or
130:02 - actually what are you go to right here
130:04 - KS plus K is minus K is multiplication
130:09 - case division and we just return rate
130:15 - turn false right and I just return true
130:21 - otherwise all right there we go so now
130:27 - what I want to do is just basically try
130:30 - out it again and dismiss
130:33 - and I say let me just try it from here
130:37 - one day so if I just say equal to I get
130:41 - when you do very well at a plus and then
130:44 - right equal to okay the app does not
130:46 - crash that seems right fifty five equal
130:50 - to that's great so now if I try to do
130:53 - like something like fifty five point and
130:55 - then do equal to then also it does not
130:57 - crash and mainly it does not because you
131:00 - can see whenever eval would crash then
131:03 - your so with your application you see
131:06 - that actually in JavaScript numbers are
131:08 - not really you know it does not really
131:12 -  about if you leave a decimal right
131:14 - here so you see that X is still 55 right
131:17 - here even if you like fifty five dot
131:19 - right so it's not a big deal so yeah
131:23 - that's basically that's how you would a
131:25 - little bit of validation to your input
131:28 - feed right here
131:33 - so right now I have the regular
131:35 - calculator opened up and right here is
131:38 - the calculator which we have right so we
131:41 - have a couple of things to do first of
131:43 - all in the UI we need to update the
131:46 - colors so let's just do that really
131:47 - quickly so right here if we take a look
131:51 - where we are setting these colors and
131:53 - all is actually inside our stylesheet
131:56 - right or basically the react styles so
132:00 - what we want to do is just locate this
132:02 - yellow green columns and update them
132:05 - accordingly
132:06 - so to update it the colors let's just do
132:10 - a quick Google search right here say
132:13 - calculator Android let's just leave this
132:17 - we do not need here images and let's
132:24 - just pick this one because we would be
132:27 - able to just extract the colors just
132:30 - like that and actually this is a little
132:32 - trick I use if you did not know about it
132:34 - well there you go then so here it is our
132:38 - hex value for the yellow pad there we go
132:46 - and our hex value for the buttons on the
132:53 - right
132:54 - could be just mmm let's see
132:59 - instead of doing it a black versat there
133:05 - we go so instead of doing it a color
133:09 - white are we doing it correct numbers is
133:16 - a view we need to actually style the
133:19 - text right so actually not even the text
133:25 - these numbers right so yeah let's just
133:28 - do one thing let's just remove this
133:30 - color from here and instead what we want
133:34 - to do is actually style dot button text
133:37 - which is what you want to modify and
133:40 - give it a color of white and just like
133:43 - that and once we do that you can see
133:46 - that
133:47 - basically our calculator already and
133:49 - instead of this red and cream let's just
133:52 - make it right and right hit save and
133:58 - data let's just add a key property here
134:00 - as well so that react doesn't complain
134:03 - about it so for the key we can just give
134:05 - it a key of nums of IJ only because
134:09 - that's unique you have to keep your key
134:11 - unique and kind of you know relatable as
134:14 - well you can just throw in math dot
134:15 - random sure you can but just it's just
134:19 - preferable so if you have got some sort
134:21 - of unique identifier in your data then
134:26 - just go ahead and use that as the key
134:28 - reactors needs it so that it has a track
134:32 - of all the elements right and here we do
134:36 - not have that
134:37 - so just operations of I know this dot
134:49 - operations what the heck am I even doing
134:52 - this doll operations of I and there we
134:57 - are so this looks much more like a
135:00 - calculator and oh why the heck do we
135:03 - have another one in here each child in
135:07 - an array or a traitor should be a unique
135:09 - key we are doing that aren't we or does
135:16 - react expect us to do it here also so
135:23 - let's just see there we are and I
135:30 - believe we should be fine now
135:33 - yep okay it's it looks like kind of
135:37 - looks like a calculator not bad I
135:40 - believe but the obvious problem right
135:43 - here is that we start from here from
135:46 - here the buttons 1 2 3 4 5 6 7 8 9 and
135:50 - the actual calculator starts from the
135:52 - bottom so it's kind of like okay and
135:55 - again we can just keep it del instead of
135:58 - D
135:59 - and that's actually just easy you have
136:02 - to you can just make these as constants
136:05 - as well at the top so that you don't
136:07 - have to modify it everywhere if you
136:09 - change it once right so I just prefer to
136:12 - do that so you can do that as well but
136:14 - here since it's a small program we can
136:16 - just do a little bit of manual shifting
136:19 - right so now if we just it's safe so it
136:25 - looks much more like this right and we
136:28 - can do some sort of operations as well
136:31 - and holy crap so we have a white colored
136:34 - text here so we need to update that as
136:36 - well so very hard let's see let's see
136:43 - let's see here we are calculation text
136:47 - should be black and same for the result
136:56 - text should be black hit save there we
137:00 - are
137:00 - 22 plus 55 what it is hey it's 77 not
137:06 - bad can your calculator do it 22 plus 55
137:11 - well obviously this calculator does not
137:15 - really require us to press equal to
137:17 - write and actually pressing equal to mix
137:21 - it and large so that's a task I want to
137:23 - keep do you guys now detect how you
137:26 - would create a functionality like this
137:28 - so obviously you have to make use of
137:31 - state variable here instead of like
137:35 - doing calculations when you click on
137:38 - equal to right so that you can update
137:40 - and you know change the state on a
137:42 - regular basis how the text changes right
137:45 - also make trying to make this font size
137:47 - a little bit bigger this one actually
137:49 - and remove the bold it looks like it's
137:53 - bolded so try to use a different font or
137:55 - thinner font and make it enlarge as well
137:58 - and you would basically good to go so
138:01 - that's all for our react native
138:03 - calculator applications if you liked it
138:05 - and don't forget to subscribe and thank
138:07 - you for watching

Cleaned transcript:

so what's going on YouTube my name is Meho alright we're gonna learn about react native what it is and what is used basically we'll just take a look at that in this tutorial only and just go over through some basic building blocks like doing basic stuffs like navigation and all transitions then some API fetching HTTP requests timers and all that stuff which basically you would need to actually create a working of functional react native application and so let's start from the first question what the heck this react native is many of you might know but some of you do not have any idea who I just stumbled upon here somehow on this channel and now are watching this tutorial randomly so for you guys what react native is is that it's a way to write crossplatform applications on JavaScript so if you know JavaScript then probably you can get started at react native immediately because what react native does is that it provides you a way to write JavaScript and then react native would turn that JavaScript into your native code it does not really turn that into a native code if you take a look at under the hood but let's just keep that abstracted and let's just as you that react native somehow does some magic and turn your JavaScript code into native code and basically once you're done with that your application actually wants native so it's not running into a browser or something which some hybrid application frameworks like ionic to react native actually runs native code on your device plus it's super fast to do it's super easy to learn you just have to learn JavaScript if you have already launched our script or you have been working with JavaScript for some time then you're good to go basically for Android and iOS now the downsides of react native is that basically you cannot read almost every app with it I usually prefer to go with react native for smaller and quicker apps and sometimes some big apps as well but react native I guess is not suitable for developing high end performance things like games or something like that because in that case native is still the best the react native still compiles to native but I guess with native you have a lot of gears in hand to tweak the controls we're gonna discuss how to set up react native environment and basically get started working with react native to get started with react native we need to obviously set up its environment and all that stuff first so first things first how do we actually set up reactivate it so if you go to the official website you can see that we have got a nice get started link here alright the confusion starts here now there are two sanctions sections you can see Quick Start and building projects with native code now most of the people who dive into react native for the first time get started with these this Quick Start pen which is basically just a couple of lines and you're good to go now as good seems at least for me I think this create react native app is not the best choice because it runs on xbox Island which I personally do not really like because Expo kind of limits you and a lot of things because react native on its own is like you're writing JavaScript plus you can do a lot of tweaking and on that stuff with the native code as well but when you use something like Expo you get bundled right so you are not allowed to move out of a specific room so if you want to go with this Expo one you can but I would go with native code by building projects with native code and once you do this what you have to do is obviously go ahead and I've node installed on your computer now if you do not know what node is then let me just show you what do you actually mean by let's say yeah just gotta go to a directory let me just zoom in here a little let's say I go to home directory and let's just let's what we have in here so say YouTube it is and then we go with let's just remove this react native directory for now and let's just create react native again alright so now all you need to do basically is have node installed and again you can do that by following instructions here now make sure you select your target as target OSS Android for now because obviously iOS can only be developed on a Mac which is kind of which kind of sucks but it's okay we are good with Android only right now so if your Mac OS user then you can install node with Bri you or basically there's a video of mine which shows you exactly how to set up latest version of node and NPM on your system I'll just leave that link in the description so if you want to set up node or NPM you can watch that alright you can skip this watchman tool if you want it's not really required so once you're done with this you need to install the react native CLI so to do that again you have to just do NPM install react native CLI and make sure you install it globally by writing the G flag and since I already have that installed I guess it should not take me a lot of time a lot of time so you can see that it's just fetched local copy of that thing right and yeah one more thing what you want to do is make sure you run your NPM around four point something version this is the problem you're gonna face later on when you use your react native applications that you cannot really run npm on version safe right so this is why i'm running version 4.6.1 because i'm using react native to create code amps bilap so that's why npm basically npm version 5 is not really compatible with react native the last time i checked so if you face any problems and you find out that your npm version is version 5 point something or above then what you want to do is npm install g npm and a do it version here right in my case it's 4.6.1 alright with that being said now once you have done that you should have your react native CLI onboard and after this what you want to do is obviously have installed android studio now you need android studio jdk and all that stuff because remember reactant 8 is actually developing native apps for you so just go ahead and download the JDK and how you do that is basically see you accept the License Agreement first and then select your operating system or means Mac OSX 64 bit and just download this and run it you should be good to go once you do that just go ahead and download the Android studio as well once you do download Android studio I already have that up and running as well you would be provided with android sdk sdk platforms and all that stuff you would also have a Android virtual device do I do not really recommend you can just directly you know work with your real Android device if you have one if you don't have one that's another thing so you can't create an Android virtual device which we will see later on as we proceed alright so under studio is pretty straightforward if you have if you guys have ever worked with it I just haven't downloaded and it will just start downloading right on once you just you just have to install it you do not really need to use Abbot's to do to work with react native just because I know it studio brings all that STK stuff together all right once you have downloaded just install Android studio and you can see that building a react native app with native code however requires Android 6 marshmallow SDK in particular so react native right now may be uses Android 6 SDK I'm not sure because they're saying it I believe they use that but sure enough you can use another targeted SDK later on in your application because hey you remember react native is running native code so if you're coming from an Android development background you must know there's a file called Android manifest and will not create al and all that stuff you're gonna find exact same files in your react native project as well so if you do not have any idea what the heck these terms are don't worry about that we'll gradually learn them later on but for now I'll just remember that your react native right now is targeting this Android 6 platform and by targeting that means that your app would be most optimized developed for this thing and for backward compatibility you have to add some sort of code or something forward compatibility for forward compatibility as as well so yeah so here we are and you do not need to really do all of this stuff just make sure you install this Android 6 our let me just give me a second here alright so you see something like this when you launch Android studio right and what we actually have to do here is basically you have to go to like your Android studio and you would probably see something like a bunch of hello world kind of stuff here don't worry about that it's not really useful what you just have to do is just go right here to this SDK manager little boy this Android with an arrow on his head just go to Android SDK manager Android SDK SDK platforms and make sure you install this Android marshmallow and at 600 you see I have installed that already to stick on it and click ok it will download that and install it for you that's basically it what you have to do or the SDK one and you can see that we need something some else something else as well like Google APs and what is to give which we had already done Intel x86 atom 64 system image and all this stuff and basically you would find all of that stuff right here inside here SDK platforms is here is to get tools you can find that stuff here right you have to install these SDK tools as well then once you're done with this sdk tools thing you see that you have installed this 23 point 0.1 and stick your tools and just go ahead select these 23 point whatever what it will latest version is it doesn't matter and click on ok right once you do all of that stuff all you have to do next is configure these variables by adding them to your bash profile and for the Windows guys what you have to do is if you go right here you have to add it to your path right so how do you add it to your path well for the Windows people you have to rightclick on your this PC icon then you have to go to somewhere like advanced settings of your computer then you would see environment variables and then basically add those stuff for Linux and Mac OS users just copy the stuff and mine tomorrow just copy the stuff and go ahead inside your terminal right here just opened your bash profile or no well bash bash profile hit is right so just open your bashful file provided file and just copy and paste this stuff right here which we see inside so you will have set up your all those variables for Windows guys again as a tool you just have to go to system settings and basically add environment variables just google how to add environment variables and you should be good to go right once you're done with all of that stuff right what you have to do is go to your project in which you want to actually write good of your Android application and iOS application in my cases go down YouTube react native and right here you have to say react native in it and then your project name let's just name it hello world and hit enter now you can see that it creates a kind of a walkthrough kind of thing so you see that it's installing all the required packages it's it's using yarn right now but you can make use of NPM as well they they mostly work in a similar way or the package store JSON file so anyway yeah so let me just grab the Sun pick it right here you can see that we just did react native in it our project name then you can actually do all of the stuff later on it's not really required right now I'll tell you how to do this this is all cool right so what you have to do right now first of all is this make sure this thing right here goes well and if it does not go well then go ahead and repeat the steps make sure you have added the environment variables correctly when those guys you have to add it to your path variables inside your this PC settings Advanced Settings environment variables and then selecting path variables you can easily see how to do that by selecting this way those here see just like that open system pain system security gene settings advanced tab environment variables click on new and just like that right Mac and Linux guys I hope you can do it yourself because you have been working on with bash and all that stuff at least I believe Linux people at least work with that stuff all the time so you just have to copy and paste this inside your bash profile and this is bash RC basically on a Linux system bash profile on a Mac system and once you have done that and still the error is there then there might be some problem with installation of your Android studio SDK and all that stuff make sure to check all of that as well and if the still if still the error persists then you can ask that and commence and I'll be just happy to help you so let me just really quickly wait here for it to complete it might take a little bit time for you for the first time because in my case it might be fetching a lot of stuff from the cache itself but for you it would be downloading all that stuff so you see that I am looks like I am already done alright you can see that it's set up on my end and hopefully should be set up on yours as well and basically that's it for this video and in the next video and we're just gonna show you a very basic hello world with react native which is basically just already prepared for us we just need to run an emulator and fire it up / through basic file system and how react actually organizes its files so that it's easier to work for you later on with the application for the structure and all that stuff so let's get into it alright so coming to the file structure off we have right here for react native is that if we see something like this if we start from the top you would see that we have two folders which is Android and iOS now these are basically the only folders you would spend most of your time in right because Android consists of two files which are used to build the application for Android platform and similarly on the similar basis iOS is used you can see these all these X Cassatt files if you are coming from an Xcode background so these files would be similar to you so these are basically the files for the iOS stuff right and for Android you can see that we inside the app we have builder crater file as I told you earlier on then inside SRC we also have the manifest file which is basically the same thing as if you're working with Android studio right so these are the two folders which would be looking all along this series so I'm just gonna skip over them right now and coming to normal duels obviously because it's running on JavaScript we can have our additional modules with us and which would be installed inside the node modules folder and once the app is compiled then all of that stuff would be basically just managed by react you do not need to worry about that then come to the babel RC file which is just the file consisting of one line for now just sets the preset to react native nothing fancier here then this is buck config file this is not really required because this is there's a system called buck build something used by Facebook but we're not gonna make use of this so we do not need really need to know what's going on with this file right so same on a similar basis this is flow config file then we have the gate files so that you can actually just check out your project to a github repository as well so these are files which would help you then again watch one configuration file nothing plans you're here then comes the apt or cheers file right so after JS file if you see here you would see something familiar right now be when we would run the application you would see that basically the things you see here are the ones which you see on the app so you see that it kind of looks like HTML but not really view text looks like they are this is HTML but it looks like we are making use of some native elements right like the view container the text container or all that stuff so we'd come to that later on then we have the advert JSON file which just consists of the name and you know stuff like that related to your application pretty handful stuff so the next thing is indexed or chairs and basically this is the file which is boost which bootstraps your application right so this is the first file which react native enters so yeah you can see that we are importing the app from here the same file here and putting it into index dot J's and we are just registering the component with the app right then our package dot JSON is obviously the file which consists of all the dependencies and all that's fancier stuff so that's all for this video I guess and file structure is quite simple for react native not much of things going on so that's all for this video and in the next video I'm gonna show you how we can run this dummy project on a real Android device for now in this tutorial I'm just gonna show you how to set up your Android device correctly so that your bills are happening and basically you're just ready to go and code so let's get started alright so this would be a helloworld tutorial so let's just go ahead and create one so now if we take a look inside the code what I want you to do first of all before actually starting off with the hello world just go to your android folder and just go to this local the properties file if this does not exist then create this file right once you create this file I want Union I want you to determine what operating system you're running and hopefully you know that I believe and if you do know then just go ahead and choose one of the lines which is according to your operating system so right now I'm running OS X so that's what I'm just gonna keep this line and move the other two right and just save this basically this virus is telling the react native where the SDK is located for Android right and once you do that basically we are good to go so now you can just go to lab degeus and change this to hello world with just some text and this is again not an error because vs code is just complaining that this should be in a tight code file not a J's file not a problem really but it's okay so there we are and once you're done with that just go ahead to your terminal and write react native run Android and hit enter now I have my personal Android device connected right here if you can see this one right so we can just wait for this bill to complete and then I would actually be able to run this application on a real Android device which is the same right here you can see I can move this around with my finger without actually touching the screen right so here we are and let react native build the application and meanwhile what I can do is inside and tab right here I can see react native run iOS and simulator would be iPhone 8 plus now you cannot do this if you are running anything other than Mac OS X because I OS development unfortunately can only be done on Apple devices so once you do that you can see that I already have my terminal my hip simulator running with me so there we are let's just wait for both of these to complete now this this might take quite some time for first time building but subsequent builds would be faster right this is because this just needs to set up all that stuff first of all and then later on it could be faster and if you see right here this gets opened right now what the heck is this well this is a metro builder bundler and this opens for Android right and what this means is that whenever you change some files some JavaScript files where your application needs to inform let's just say your phone or maybe your phone needs to inform that yeah something is building right so this is done by this thing so you just need to keep this open in the background and you can see the progress of building bundling P device right now on my Android device as well if you can see that you can see that we get a message of loading from localhost put 881 so yeah that's basically what's happening right now and if we see iOS bills well some sort of stuff is going on here let's just not disturb this thing and let's just get back to our Android build stuff all right you can see that our Android Android bundler is 100% done so let's just see what's up on my screen hey it's hello world from react native so you can see this is a truly native application running on your device on your android phone right now coded in JavaScript right and this is a real Android device actually real because I'm just mirroring my phone on the Mac OS the iPhone build seems to take some time but it's okay let's just wait right to build okay so it looks like we got it so we'd say this build succeeded and it also install and launch so let's just see how it's looking like so you can see that it's now our bundler is again bundling the iOS app let's just wait for it to complete loading all right you can see that we get a nice little hello world in the center of the screen on our iOS device as well so if you take a look and if I just bring this down you can see that we are running the same piece of code on two different operating systems using react native that's the power of react native we're gonna discuss about how the hello world program actually works and in general how react native overall works so let's get started so in this video let's just see how the hello world which we had coded earlier is actually working alright so if we come to our Android project right now as I said AB Dutchess is the only point of entry right now basically the point of entries indexed or chase but you know it's indexed OCS actually includes the app file here so we can just say like that and we can actually just get rid of this probes right here and replace it something like this I'm just gonna explain in a minute what these props are not in a minute but maybe in the next tutorial but we'll just go through over what's happening here so before starting this web series I believe that you have at least the basic knowledge of how es6 and stuff like that actually is working because if you do not know about that then it would be kind of difficult for you to follow along the series because react native would mostly be using es6 all along so yeah I guess you need to actually just make sure you are up to date with the es6 stuff all right with that being done first of all what we are doing is we are importing the main react framework and the component from the react stuff right and then we are importing this platform which is basically just used to differentiate between different kind of platforms right so for example you can see that instructions would be for example for iOS would be shown this one and for Android will be shown this one so platformspecific work would be done with the help of this library or a module which we are importing from the reactive module itself right next is style sheet now style sheet is something which would be used to actually create and basically apply CSS to your react native component and said CSS like CSS because it's not really CSS right obviously because your code boils don't native code but it's it looks like CSS but you would see that it's mostly flexbox and not mostly its react native who works on a flexbox layout system right so you would be able to use of make use of stuff like flex one you know like flex crew and stuff like that in your style sheets and apply them later on to your views right now text is you can say it's a kind of component which would render your text right so it's just used to display some text on your application and view is the container component you can think it off like a box in which all of your other components like text and you know basically other components would go could go in right so what the heck are you actually seeing here if you ask me well what this is is this part is known as j6 now j6 and what it does is that it allows you to write HTML inside of a JavaScript if you have never seen this it might look a bit episode to you that how the heck are we actually writing HTML net but if you're coming from a react.js background or basically you just know GS x then you should be able to catch up real quick but for those of you who do not have any idea basically what DP or what we are doing here essentially is that this app is a component and basically everything is a component in react.js as well as in react native so app is a component whose view looks like this and by view what I mean is the template of that particular component so component could have a template it's logic which would be the functions which would go here so you can just go ahead and create my function here and this would be kind of the logic of some sort of function you would do and then this render function is called which basically just you know gets the view template of the particular component and displays it on the screen so this is our very basic add component which just renders simple hello world on the screen and that bottom of the screen we have is just the Styles where we have a style sheet that creators used to actually create a kind of a style sheet which is kind of stuffed object again whose key consists of the name of the you know you can say a selector or basically you can say the class name or something like that because well how you apply is like style as a prop name now this is a prop which I was talking about earlier equal to your whatever object you want to style with right so we're gonna come back to all of this later on as you proceed but this is just a highlevel general overview of how this hello world app works and if you are following along if you have understood this then it's great because we have done quite some stuff and this and if you understand everything it's awesome if not then don't worry we're gonna cover all of this bits and pieces later on as well as we proceed with the individual tutorials we're gonna take a look at what props are in react native and basically why the heck would you need that and all that stuff because you're gonna make use of props all the time in your react native application so it's just easy to you know just understand it later earlier and then you would be able to relate a lot of stuff later on so if we take a look inside our code right here which is from the last tutorial you can see that we are actually making use of props right here so what props are basically is that the they give extra information to your components as I said this text component or this view component right here would have very specific functions associated with it right now we are making use of the inbuilt components later on we can create our own custom components as well but for now let's just say I want to display text with some southernstyle right so what I'm gonna do is make use of the style property which is associated with this component right prop stands for property obviously if you are not able to relate it to LA so let's just say I would give you another example let's just say you want to display an image in your application so what you're gonna do is right here image and if I hit tab does it import it for me no not really going to import import the image component here as well so once you do that what happens now is that now you have an image right here you go okay sounds good but what the heck does this image it can do well you need to give it additional information like the source of the image you want to load right so the source of this image would be and I'm just I'm just gonna explain what the syntax here is would be let's just say URI would be something like my awesome side coms my awesome image dot PNG something like that so now you're telling this component right here to have this property which gives it some formation right and what the heck the syntax is is basically this comes from the JSX so if you want to have a variable kind of a variable think inside your attribute value in GSX what you have to do is just include that inside the curly braces if you do something like this this would be static value right right now since you're making use of an object so I'm inserting an object here which contains all this stuff so I need to make use of this at this curly braces here you can also do something like this like constant image info and then do it like this and then pass in your image info here it's one on the same thing but because I'm just writing this object right here directly you can do it separately as well so again this style style stored welcome I can basically just get this stuff here just put it right here and there we go it's one on the same thing right so you do not need to really you know just wonder around what this curly brace mean it's the style you have a variable placeholder right here for the value or basically dynamic something dynamic is coming inside JSX right so that's basically it for the prop section and basically if you are creating your own components then you would be able to define what kind of props you want to receive and what happens with your component and all that stuff later on would come to us when you when we would discuss our own custom components but for now you would have to query the documentation to see what components you have for what props you have for a given component right so if you see we could actually can we get the list of components from here I'm not sure so okay it does not let me go more backwards in the code so I guess not so yeah you could just refer the documentation otherwise you can just follow along and just see what kind of props I'm making use of and you should be good started with state in react native alright so if we take a look inside the code you would see that actually I have the app already running on my real device and you could use an emulator as well I'm just using my real device here so it does not really matter okay so what's we learned about props in the last video was that properties are basically these things which are associated with your components and which could be passed down into something known as your child components which would come to later on right but what state means every component has a particular state right so what that means is that if you change the state of your component and my state I mean a particular object in that component react would smartly check what stuff was changed in that particular state and which stuff your component needs to be updated off okay so let's just break this into code example right so first of all let me just get rid of all of this stuff which is not really required and clean it up a little bit so that it's easier for you to see right so we can just keep style sheet I guess get rid of this then text we can just get rid of the image as well here for now there we are alright so now what I need to do is just create a constructor here constructor and I believe you know what this constructor is it's just es6 right now what I'm going to do is save this but state is a black object right so this state is actually a really special kind of object it's not just a regular check right now it's monitored by react in the background and whenever I call let's just say this dot said state right if there's something appreciable to be changed then this render method would be called again right so if I use my state variable somewhere in the inside the render method and the said state is called which changes by state variable then what happens is that this component is rearended after detecting what particular things are changed right so let's just see a quick example of that so what I'm gonna do here is let's just say okay what I'm gonna do is basically let's just say I'm gonna get rid of this star welcome or basically what we can do is just include this as an array and I can say that this is like custom styles something like this dot custom styles right so what happens now or instead of legs this state custom styles right so what's that what's what I'm doing here is that applying style start welcome which is this block of styles to my text component right now and this thing as well which I'm gonna develop which I'm gonna write here really soon so don't worry about what style does is it's just an example to show what state does right now so I'm gonna say this dot state dot custom styles let's just say this is a custom style and if you follow along you could see that we can set an opacity of let's just say 0 right and what I can do is let's just say I can create a set interval here and I can say something like every 1 second what I want to do is do something like this at set state I'm gonna say my custom styles is actually consisting of opacity of 1 right so what that means is that every second I'm changing something in my main state of the component right so the react react application should technically rerender my component with the updated Styles right ok so let's just go to device and if I just shake my device here I'm hit on reload here you would see that the development server don't okay let's just try to run the bundle again let's see what's happening here so it saves me this is not allowed before super ok cool so we can just call super here and we should be good to go I believe let's just go back to the terminal and see if it's building or not alright so you can see that we have 100% of the build and now if I just take one more time shake my device here hit reload you would see that it does not blink because because opacity is not really the style which you can apply on a text field right so let's just change this from color from varsity to color and let's just say I just want to make this color of let's just be queen and let's just say I just give it a default color of blue here so it will start with blue and it will just toggle between red green red green red green and so on and so forth let's try one more time here I go shake it reload it starts with Red Queen then it's always green okay because yeah obviously you is not turning it back to red right so looking to say here that if this dot state dot custom style start color is red then turn it to green otherwise don't it do good just like that one more time let's just shake our device and you can see how fast these bills are because you're not really from building the whole application itself that's what react native does behind the scene for you so now you can see that we have red green red cream toggling colors with us and basically that is possible because of the state so you see that we do not have any sort of logic which updates which rear Enders this component when the state changes right so react does it automatically on its end that's basically how state works and mostly in bigger application what we that is something known as Redux but it's way too early for things like Redux to be discussed but right now states would be good for us to go and basically would help us to manage the state the actual state of the component how the component remembers stuff we're gonna take a look at what the style sheets are react native and basically this create a little application as well surrounding around that concept so let's it start ok so now you can see that on the Left I have my device open again and on the right we can see the code which is which was responsible in the last tutorial for this toggling of this color so let's just get rid of all of this stuff and let's just see what these style sheets are ok so what's the deal with them is and I mean let me just actually just change it to tabs yep all right so what's happening here is that basically you create some sort of styles in react just like you do on the web and react native converts them into native properties associated with those particular elements right so for example you can position of you somewhere you can basically change the properties like color of texts its opacity and background and stuff like that so what we have right now is which react native what's the thing is that all the layouts would be actually flexbox based right so what that means is that every view container here every element is basically would follow the flexbox system which comes from the web on with CSS right so by that what I mean is that all these elements have by default a display flex property associated with them and you cannot actually change it reactors works on flex box system so what we can do is basically right here we can try to create a very simple kind of like an interface so what that would be is let us say half the screen would be let's say red half to be green right so this is our container let me just go ahead and create another view here let me just say that I have Styles dot half with this right and that in this view and what I'm gonna do is just lift leave this container with Flex of 1 which means this space if I get all the space if it's the only child just if I content link let me just get rid of these first and let me just get rid of this as well all right so what I'm gonna do now is say let's say half as flicks off fund and then background color or let's say red how this was named is half one rate let's just get a name this half I'm gonna do a similar thing to this we're gonna do here see half right so what's the thing here and again by default on the web flex box follows a flex direction of row right but on react native it follows by for the flex direction of Gollum so now if I just go back to my device shake it a little here just reloaded you should see that we get a red and a blue column here just reposition this right here so you see that our half one is red and our half Dube is blue and as you can see that by default it follows a flex direction of column instead of row so if you want the row then you can specify the here flex direction and then grow and it's safe and actually I can just enable something known as hot freeloading here so you should be able to see changes without me shaking that device so if I just remove the statement again it's safe you can see that hot reloading at its best I can just do it automatically right so that's the thing okay now let this is go ahead and create some complex layouts right so what we can do now and basically if you just know how to play around with flex box it's kind of easy to do so we can say like style start half to one and we can just say a similar thing on half to two and four here I can say half to one it has the same flex up one again and background color of less you see Queen it's also flex of one and background color is yellow right let me just get a comma here and now if you go ahead and see you can see that okay it kind of is not looking like it should and the reason for that is because what we want basically is that yeah it's actually working fine because as I said flex box works in the Flex direction of column all we can do is change this half do right here do flex direction of row right you can see that actually would we can just dismiss that you can see that now we have got a bigger element and then two smaller elements in their way now again it really depends on how much you know about flexbox layouts right so you can just practice them on the web and that would be kind of similar thing on the on here as well so here's a way to actually displayed in do is to one ratio so Green takes sixty six point six six percent of the width and this yellow takes thirty three point three three and there we are so basically now you can just go ahead and include some sort of text with them as well so this is two one right and you can do a similar thing here with saying this was under cells one right so now if we take a look you see that it's kind of ugly so what we can do is just apply a style of let's say style stop text here to every text element and we can customize them thereafter just like that so we can say color is white then this is a font size versus a turkey like that and one more thing what I want to do here is say that these half ones and half tools right here have a justified content of center and again if you can observe that these JavaScript values follows camel casing right so what happens here is that if the CSS property was like this then you remove the and you make the next letters first word capital first letter next words first largely so here we are justify content centeraligned items Center as well so this would the center the text inside the block similarly we can do this to do one and do two and again this would when you make them equal width here and there looks exchanges from yellow to let's just say um black so that the text is visible because here I can see it on my device straight away that it was invisible so I knew so here we are and now if I take a look you can see that we got a Tech Center and all that great stuff right so okay one more thing let's see we can see that half to one and half to do are sharing a lot of common stuff by it apart from the background color they are actually same so what we can do is this we can make something like half DX as a class actually I can just apply all that common stuff right here because it's a good practice as well as well as it will just make the code much cleaner and easier to read I can just get rid of this from that color right so now what I want to do is basically apply have 2x to pull up these elements so how would I do that well to do that what I'm gonna do is instead of supplying this just an object I'll supply this an array of objects and they would be applied in the order in which you supply them so I'm gonna supply it half to X right here I'm gonna say styles got half to X and similarly to our here style start have 2x and right now it does not really matter because the property is to do not you know overlap each other so the precedence does not really matter here now you can see that our code looks much more cleaner and less than the previous one and we can just apply multiple style sheets to our elements so yeah that's basically it and you can basically supply any object you want here you can just associate it Sociedad up check with your state as well and then you would update that variable your render function would be called and your CSS applied styles would be updated as well to that element I'm just gonna show you how to work with text input and react native and basically just allows you to get input from the user and you're gonna make use of text but all the way because you know forms are almost everywhere in every application so for example if you want to create a form to asks about users information or maybe like you're creating some sort of game or something that you want users name and you know the cases are endless so let's just take a look at how to actually write a very basic text input code so right now you can see that I have with me the previous code the codes from the previous tutorial so let's just get rid of all of this right and there's a scare of get rid of this one as well except for this container one right so now what I want to do is inside this view why the heck there we are okay so now what I want to do is basically inside this view I'm going to write text input right here and I can just import it from text input just like that I'm gonna say something like that right so you can see that I immediately get a text input so when I click on that you can see that I can actually type stuff around right so since this is an actual device so I can just create it from my end as well all right so what we want however is you can actually customize it with the various properties and methods associated with it so if we take a look add those you can see right here in the documentation if you just open this and go a little down you can see all the properties on the props associated with it so you can see that we have got a bunch of stuff like editable and maximum length number of lines on blur on change so if we can do is basically target something like unchanged X so you can see that it's definition is called back is called when text inputs change and the difference between on change call back that is calm and takes two inputs text changes and this is that this on change when it would be called then it would not pass the updated text to your function right so that's the basic only difference so if you just want to listen to if the text has changed then use this one and if you want to get that text as well along with that so you see you can use this one so let's just go ahead and implement this on change text and how we do that is simply doing like unchanged text and again as I told you in JSX you have to use this curly braces so that you are actually including dynamic content here right so I'm gonna say this dot handle change text right and again a couple of things here what I'm gonna do is basically find this another reason for this is because we bind a function whenever you know if you want to use some sort of things which are actually associated with this class in this function for example let's just say you want to access state in this function handle change takes so you can access this state only when this of this particular this in this particular function points to this class and basically this is how JavaScript works so I assume that you know a little bit about it it's it's kind of on the advanced side of JavaScript but it's okay I guess you should know this so this if points to this class then only you can access the state obviously that makes sense because state is a property of this class right here but what happens is that methods like these when called from props do not necessarily have the value of this associated with this particular class because the context of this is actually set in to set to whatever function that is being called whatever the calling function wherever the calling function belongs right so let me just give you a quick recap of this so for example if you have let's say an object let's just say this is an object let me just comment this whole thing or let's just leave it like that only so if I have like functioned by function and basically not like that function and then you do like console dot log this right so when you do like X dot function then this points to this particular object right but when you do like something like if you have this function outside like that when you do like function to then this actually points to the window global inside if you're working with with obviously right so what I wanted to say here is that the context of this right here this right here could change whenever depending upon how this on change text is called right so to avoid that what we do is we just bind this function we just force this function to actually follow the dis of this class only all the time right so let's just get rid of or just get rid of this thing and you only need to bind this if you want to actually access something from this class if there's no use then you can just remove this line so what I'm gonna do here is just say this dot set state and again I need this I need to use the spine because I'm using set state which would only be available if I am pointing to this particular class so I'm gonna first of all let me just say this this is value is empty I can say here and I believe it's not really value but because if you set the value of text default value I believe it was yep so yeah if you set up a value of additive of a text input then you would not be able to change it so you need to set default values so this dot state dot value now we're going to say and it me something like that and basically right here we can say value is and actually we can just get the new text here now we're going to say new text right similar on a similar note we can say you are writing this top state dot value something like that where you have to actually reflect the change as you are writing it so let me just reload it right here and okay so the application has stopped let's just see why let's just go to our module bundler let me just try to run it one more time Oh obviously because you cannot have Dexter's floating like that right so now I feel reloaded one more time you can see that you are writing edit me is what I get here and now if I try to did it like remove it you can see that it updates with me right so whatever I'm writing here it's good it gets reflected into the state and what the heck okay so react native run on red might have just reinstall the app so again if you can see it's basically the same thing right so now what you can do basically as a task is that create a basic layout of login right so how would you do that I can just give you a little bit of you know a starter so what you can do is basically say something like username right and you can actually enter this whole thing in a view as well password right and I'll just leave that button bar to you so I'm gonna say this is container flex one a handful X Direction is obviously column so we can just see justify contents enter and you can see it gets us right there and I can just say padding of 20 as well so that we get a little bit of distance right so now you can see that we have got a little nicelooking layout I believe and there's a problem again because you cannot have like username and password reflecting the same thing so use the name and basically you can just keep it in a state or you can just you know get it when you tap on that button as well it's kind of useful for example if you're creating an application where you want the user to enter pin and as the user types 1 2 3 4 digits are with you and you can just basically verify it so there you have to just constantly keep your UI and your model in sync but here I guess you can just omit that but anyways so how do you change stakes and yeah basically I can guess we can just get rid of the state here right and basically this one as well new text we can just console here and not really let's just say how do user name changes so for example here you you're gonna take a look at something known as uncontrolled hand control components and what's basically the difference between them so let's get into it alright so here we are with our little dirty applications in the last video and let's us first of all get rid of these methods right here and this one as well there we are there we go and it's safe alright so so far so good now the thing is if you take a look at the last video what we did is that we have to retrieve value of this text input somehow right so what we did first of all is just assigned a state variable to its value and unchanged text we just updated that state variable so that we get the value all the time so the UI and the reactions code react native code is always in sync right so that's a way and the way is you just get this input value whenever you want to for example like on click of a button or you know some action or whatever so it's a specific event right so for example if we if I create a button right here so say this button has a title of hello to save this just include this button here as well so you can see that we get a nice little hello here and what I want to do basically is that when it's pressed this dot button pressed let's just assign this dot button press this button first don't find this right and we can just say button pressed it's a method here so what I want to do is basically get username and password values right so one way is to just like we did earlier but I'll just first of all have explore the other way which is like constant username they're getting that username value and password getting the password before that what I want to do show you is something known as shake it here debug Jace remotely so what it does when you click on it it will open Chrome inside your Chrome browser of actually a react native debugger inside your Chrome browser and you would be pretty much able to access your JavaScript right here so what we can do is basically say something like reference we want to riff for this input field right so what I want to do is say something like a riff and then these curly braces input and I'm gonna say this dot user name is input all right what the heck happened here well this is basically kind of like doing like ID is username in HTML right pretty much you have done this thing so now you can access this input through this dot username right so I'm just gonna get rid of this and say a similar thing to this password I'm just putting an underscore here because I don't want to just randomly by mistake use another variable name user name and they said it's property overwrite its property so it's it's just like it's kind of private but it's not but anyways so what I want to do now is just basically say console dot log they start username this dot password let's just see what this has gotten for us and basically before that what I want to do is just nothing okay so let's just save this and type something type something and hit hello here right and you can see right here if i zoom in a little we get username and password here so if I could like this property last native text you see that we get the actual text f G we see which is in username right and on similar basis we can get last native text on this right so this is like kind of loading your value on demand so I can see username as this that user name dot last natives Tex if I spell it right yep I've got some password is this dot password dot last native text I can just see username password just like that just get rid of this as well it's safe and it's a you again because react native is stolen and here we are so now if I enter SFU and ffff hello because I'm not sure why I did that so f fu is username and F F F is password right now this is a oneway now this thing the width I have done it right now is called uncontrolled uncontrolled component and basically it's not really uncontrolled component in react native this control that uncontrolled analogy is I've just stolen it from react.js because in react cheese and this is the concept right so uncontrolled components are like this so Android is managing its value and it's giving you to whenever you want to access it all right you do not have access to it all the time for to make it a controlled component what you need to do is first of all we no longer need this reference and what we can do is just say default value of this dot state dot username and I can say like on change text is text and I can say this dot set State username is text how similar basis we can do this thing have this one as well password password as text there we are I can just initialize the state with a blank object if you wish or yeah that should be good I guess right so now what I want to do is get rid of these two ones as well so now I always have access to this username and this store password irrespective if I press the button or not so we always have access to username and password because react is now managing those values instead of letting the host platform in this case Android to manage it right if I had same now and if I just entered something like this and hit hello you can see that we get undefined because this dot stayed on username not username like that and they stopped state dot password let's just try one more time hello and I can see that we get just like before but this time react is managing so this is a controlled component now the thing is that you react actually recommends you d always but really always use control but in most of the cases use control components that's okay to use controlled components but the thing is that if you do not really need to interact with these components a lot what I believe is that you are kind of like you know updating state at every keystroke so it might not really hurt performance that much but I guess you could just go ahead with an uncontrolled approach if you're not really interacting with the component at all so you can do that otherwise it's equally good if you're just going a controlled way as well basically just having this controlled as a control component gives you a lot more power than uncontrolled one we're gonna take to look at how to create our own calculator yes you heard that right and react native from the very scratch so let's start off by creating some applications in react because it's kind of monotone us to just go through over everything in react like thousands of components and how everything works and then at the end of the series you would be like what the hell am I supposed to do with all that stuff so I've decided to break this down into little applications built with react native let's start with one calculator and we're gonna see how we go along with that so let's get into it so you can see that right now I have my calculator open now obviously we are not going to make such a UI and functionalitywise application like not gonna do this animation kind of stuff and like all that stuff right now in react native because it's kind of like that wants to do but we're gonna come to that as we go along in the series so you can see right here what we need is first of all a place to actually show the stuff user wants to do then here would be a result and then right here we have our buttons plus the operational buttons right so let's just assign a little bit of UI for this in this video so what we're gonna do is first of all define let's say style start resolve here which should contain our result just like that then what we want is view style as Styles dot I'm not really result but our or you can say that it's result it's just what the result of what user is typing and then we can say calculation here right and then what we want is view style Styles down buttons and like that I'm gonna say that this is view style style start let's say numbers and on the right what we have is style start operations right so that basically is the whole complete layout which we're going to need the parent layout at least so let's just now use styles and yeah we can use actually you would be thinking that what the heck is the difference between actually style sheets start create and just using a regular JavaScript object well the thing is that you should always use style sheet not create because when you don't use it and react cannot actually validate your keys and all that stuff and basically this kind of like some sort of optimization as well which reactors under the hood so in short it does not hurt to actually use style sheet or create all the time when you're creating styles so just stick with that so with tapping down let's just create some Styles now now for the container part what we need it's just a flex one so that it gives us full screen right now then for the result moving in right now it's less to see I give it a flex of one right I give it a so say background color of red for now so that it's visible to us then for calculation pad I'm gonna give it a flex off or let me just give it a flex of two here flicks off one here right and I'm just gonna make it background color of green right then for this part for buttons what I want first of all is basically like I want to display these buttons in a column right so what I'm gonna do here is say flex direction as column or actually in row I want to display this in group right because by default react.js displays everything in columns so I want to display in in a row has two elements so there we are then for the next part what we have is numbers numbers go right here I'm just gonna say this has a background color of let's say yellow for now again so that it's just visible nothing to do with original application which we would be developing an operations would be bagging color off let's just say how many colors are there versus a black for now right and let's just give them a flex property as well and for the buttons what we can say is this flex grow one so that it just occupies all the remaining space so numbers could be flicks of let's say d3 I'm not really sure we have to play around numbers here and I can give it a flex of one here so there we are and now if we take a look at what we have actually done so to do that let's just go back to terminal and do a react native run Android here so react would fire the application real quick and by the time we are waiting for that to happen let's just see how we're gonna create these numbers so to create them again we will need to have one two three four separate views inside our numbers which would contain rows of elements right because we cannot have grid layouts and all that fancy stuff and react yet because it just supports a single display and holy crap we use not imported that is so cool let's just import that and here we are well it kind of looks bad because the result is stupid right so what we can do instead is instead of using flex flow here let's just say I have a flex off we have 2 plus 1 3 and 7 so it takes 70% width of the screen right it takes 20% and it takes 10% height not the weight sorry so there we are with a very basically out for our calculator we're gonna take a look at how we can actually go along and build the internals of our parent layouts and let's get into it really quick so um we can just create some buttons here by as I said in the last video by creating rows of buttons so I'm gonna say style start row here right so this would be our rows and we're gonna need one two three four four rows right here so we're gonna say you one two three four just like that and for each row we're gonna need a button it's so button title and I'm just gonna give it a title off let's just say zero for now to every rule just like that so we're gonna have one two three we're gonna have one two three and we're gonna have one two three and you're gonna have one two three there we are right and button is not defined very well let's just import this guy and there we are okay so what the heck is this so what we want to do actually is display these elements inside a row right so I'm gonna say right here as flex direction of row as simple as that so you can see we get these elements now but what's the deal with them is that we want these rows to be equal in height all of them and occupy all the space so there we are that's a start and what we can say is if I'm not wrong just if I content we'll have to take a look at this Center aligned items stretch stre TCH or it could be other way around as well I'm not really sure yes it is I believe um okay so we have just a Content value of let's just okay give it a central the I believe there used to be a stretch so anyways let's say this is spaced around instead so that we get nice little buns buttons like that okay so now we have buttons so what we want to do is basically add these operational buttons as well so to do that again we're gonna make use of and actually we can just kind of make use of the buttons here directly because these buttons actually are one single row one two one what the heck one two give me a second here all right one two three four there we are and if we save this take a look just like that again but style start operation right so what we're gonna do here is say that it's flex Direction is obviously column but I want justify content as based around here as well so that we get something like that right so actually I guess we should just take a look at the docs to see what justify content here accepts and you can see that it accepts flex start flex and center space between space around and space evenly alright so how about if I want to stretch it line items stretch stre TCH I'm not sure I guess it used to be somewhere but it's okay stretch okay so alright anyways so here we are but that kind of looks funny Louis's reverted back to Center at least for now so here we are with the basic layout we want in here is for the result part text style styles dot result text right we can say just basically like one to one just like that and for calculation always the same eleven times eleven here and for calculation part what we're gonna do is say a similar thing style styles dot calculation text and again we are doing all of this in a single file but don't worry about that we're gonna take a look we're gonna learn how to split reaction react native code into multiple modules because that's essentially what you're gonna do all the time because that's a best practice actually just modularizing your code so calculation takes what I want to do with this is font size as 20 color that's white and similarly to not really calculation text I believe to resolve text that's what I wanted so result text here we are for calculation takes what I want to do is font size that's 14 and color as white too and there we are so let's just increase this a little bit more 30 Alice's bracket 24 all right so now we just want you to central and that stuff so I'm just gonna say it was sold right here if you see just if I content on flex and just if I contended I guess when you're working with the Flex direction of column it's kind of like it always confuses me it's kind of like justifies along the yaxis let's see Center aligned items flex and yeah so it was complete guess rates and just worked out just fine so we're gonna need a similar one on our calculation pad as well so there we are here we go so this is the basic layout of our calculator right now I know we need to expand these buttons we're gonna take a look at that in the next videos and we need to change this content as well all along all these buttons and all these numbers should be right and let's just make a little bit more usable and customizable okay so right now you can see that we have these tiny little ugly buttons right here with us so let's just make them full width and height and do that actually what we have to do is not use this button but use something else let's just say touchable opacity and what this is is basically just like a button but it just responds to your touch nicely so I can just say that this is something like that and if I just change it for one row right now there we are let's save it okay we just need button for now so yeah touchable opacity needs you to add a text node so we'll need to change it here as well so now we can see right here is that if I touch on this kind of response if you can see so let's say this is dialog button right here with us so here we are right and right here if I just go ahead and say button pals flex one align items stretch line self as stretch as well and this should be obviously stains right so we can see now that the statue below Vasa T thing responds even if I tap right here right instead of on that zero so that means our button is kind of working for now so what we can say is just instead is just make it like just if I content center and a line items Center because we would be any real listening to the touchable opacity right here instead so let's just see you can see that it would get messy really quickly right here if we continue to develop code like this so what I'm gonna do is actually develop this whole button section separately so let's just say I do something like for let I equal zero high as less than three I plus plus which is the number of one two three four let's just make it for number of rows for let I equal four let J equals zero J is less than three J plus plus right for now if we can do let's just say that to let two elements is something like that or we can just say something like view or actually let's just keep in an empty array so what we can do right here let's just say lit row is also an empty array and right here what I'm gonna say is add row dot push touchable opacity and basically this block of code right here I'm just gonna copy this and let's just change it to I or a rather I plus one right and here I'm gonna say elements dot push and what I want to push is a view style of style start row with the our row in it and here we go so I hope it makes sense I can just name it rows so that it makes more sense right so we have our all that stuff now so right now what I can just basically do is go ahead and delete all of this and just say and actually till here and just say rows right if I hit save you can see that we get it right but it kind of is not really what we want so it would be kind of like this so you can see the that we get one two three two three four three four five or the hell okay let's see so you might want to just debug this stuff later on so I'm just gonna assume that I got numbers in the right place I'll just take a look at why they are not in the right place it's it's somewhere in this logic so you can just figure it out yourself so what I want instead right now is to just basically show you can see that all of these buttons now respond to the touch so we can say that I can give it a property of like style start button text right and I can just go ahead and create this as well and say that it's as a four size of let's say 25 maybe or let us say 30 right so here we are with our buttons right here for the calculator and similarly what we can do for our operations is a similar thing right here so actually let's just fix it right here quickly actually to fix this what we can do is just say let nums is let's see 1 2 3 4 5 6 7 8 9 and actually for the last row we had to actually walk out of the loop because last row is not really you know numbers all numbers so it's kind of like I'm not sure there's 0 in middle and there's an equal to a belief at the end but again I'm not really sure so let's just keep it 0 0 and equal to 1 now I'll just see in the calculator later on so now I can just say here as nums of I and J right and we get our correct output now so that is one way and similarly what we can do is for the operations we can name them like plus minus multiply divide 1 2 3 4 right so what I'm gonna do is now let's just say I copy this well actually we do not need to copy it at all we can just say let k equal to 0 and actually we can just make use of I again because this is scoped inside the function so I'm just gonna say I plus plus again just like that so again let's just see let ops something like this so I'm gonna say ops dot push and then this whole stuff right here which we had earlier with the exception that again this is a button in fact but this would be operations and this could be the bet index only that's not a problem so here we are and let's just name this ops here and operations of I should be sufficient here and there we go so what we can do here is instead of just applying the button takes class what I can do is apply another class style start white well let's just say which is we'll just mix it white right so there we are with our basic calculator interface with the buttons working kind of right at least responding to the touch but the result and the calculation power is still the same so we're gonna take a look at that in the next tutorial so right now you can see that our calculator interface kind of looks complete I believe the buttons are in place the buttons buttons kind of respond a little well as well and they are full read/write so you can just click here and we'll just respond right you can click here and the four would respond so if we just if you can just draw the boundaries then you would be able to see that these are actually enclosed inside a boundary right okay so anyways first of all let me just fix this that this should be a dot right here right and what we have for now is that too we have to actually get the function get some sort of function called whenever I click on this button so let's just go ahead and create this so I'm gonna say that this is something like button pressed right so I'm just gonna say that I would just get the you know text of that particular button let's just see so right here what we can say is something like when I click on this on on press I believe so once you do that what I want to do is just call this function right here this dot button press with the argument of Nam's I and J rights effects go ahead and save this and for this console dot log this as well it's safe and if you just go ahead and shake my device here a little and enable and actually it's already enabled so we should be able to see it somewhere right here so you can see that our app right here is enabled so it's just bugging about that we should add a key property so that kind of fits well with react so I can just do that on these warnings would go away so it's not a problem right here so what we can do now is tap a button so one two three four five six seven eight nine zero dot and equal to okay everything is responding correctly right so what we want to do is basically once we tap on these particular buttons I want to update this thing right so what I want to do here is say for example first of all let me just get the view right here which is responsible for this and this is our this one this view right so we want to do is basically set this text to something like this dot state dot let's just say result text because again as I told you earlier if I change my state variable somewhere then the rendered render call would automatically be called by react under the hood and it will just update that particular thing that particular component right so what I can do right here is just say well actually right here we can just keep the result text blank it does not really matter if it's smell it just does not print that so what I'm gonna do is say this that said State and I'm gonna say result text is whatever the text was so this dot State that result text plus our update text right here which comes from the button right so if I save this and see like one two if I type close so you can see that it reflects right here so if I can just remove this and say 12.54 like that or five four nine something like that now the problem with this is obviously like if I type equal to then it this writes that as well because it's not really distinguishing right now between the different kind of numbers the only thing which is not a number really right now here is this equal to sign because a decimal can be you know you can regard it as a number because it is used with numbers so what you want to do is add a little bit of validation here so let's just add an equal to validation so I'm just gonna say if text is equal to an equal to well in that case what we want is we want the actual result so far which we have right here so I'm just gonna say calculate result here with this dot state dot result text like that and actually we can just return from here as well so I'm just gonna say actually this should be this right so I'm just gonna say calculate result I'm just gonna say text here we could have just access it here also but yeah actually we can just do it right here as well because we have access to state and all the methods right so what I'm gonna do is this a constant text is my result text so we actually need to now parse this text basically like you have to broke break this text into tokens and then perform all the operations accordingly right so we're gonna learn a little bit of tricks here how computers actually do calculation so that's basically how we are gonna going to proceed so when you actually enter a huge kind of like 3 plus 3 times 6 let's just say raise to the power of 5 divided by 2 plus 7 all that stuff so how a computer would read that we'll just take a look at that later on right when we come to parsing this text right so that could be an example for us so for now we have fixed the equal to problem so you can see that if I tap on equal to we do not really get that equal to type and again what we can do is just basically not allow a lot of zeroes in the front it's okay to have zeroes like that but it's not really okay to have zeros a lot of zeroes in the front right and actually what we need to do is add a back button to the app as well and if you just take a look inside the calculator will be happy the delete button right here right so what we have is 1 2 3 4 5 but how's it working division multiplication minus and plus plus minus multiplication division 3 1 2 3 4 1 2 3 4 5 ok yes so the rules are uneven the number of rules are uneven in this case so now we can just do that that should be easy for us now we just have to add a let's say let's just keep it D for now to delete the text right and what we can do is basically let it wait and what I want to do now is if I type something and if I press this D button right here I want this text last element to be deleted now this is a little bit of tricky part here because right here we are just generalizing it over the loop so what we want to do instead is what we can do is let me just think I guess we could add each of them separately or what we can do is just on press we can pass in this function let's just say this is operate actually we have to do this startup right here and say operations of I right so once we have that what we can do is call this operate function with the operation right I'm just going to switch over this operation because why the hell not so I'm gonna see case D which is the delete in our case what I want is that I want to update the state again remember this text right here is set with the set state so what we have is let's say we gonna text back again this dot state dot result text which gives us this text right here back to us right okay so what I want to do now is actually just split it so what you can do is this slice it or just you know convert it into an array and just do it in one line so I'm just gonna do it in one line I split it by every character then what I want to do is just you know I'm actually we can just do like text dot pop I guess it's pop for back and unshifted for front so we should be good so once we have done that and actually we can say let text here right here and takes job joint I'll actually you could just run a slice call here as well I don't really remember its syntax otherwise I would have done that but here we are simply with the split call as well so now what we have is that we want to update the state again so I'm just gonna call and said state method right here and say result text is again equal to our text right here so if I hit save now and if I just type something like five by five head D you can see that it gets erased and obviously that's a bad example because all that just was same so if I write one two three and okay how it did it add a comma itself if I delete it okay so here we are with our first bug I'm not really sure how it did that let's just reload it so if I add like five five five five five five one two three how the hell did that come up here there so if I do delete now so it saves me this top state dot result text dot split is not a function okay well why is it not I believe we can just console dot log R they start state dot result text here every time so that we can just see in the console what exactly is going on so if I just reload it here so if I write five five five numbers like that and delete a lot of times so we see that if I hit delete a lot of times we get this thing so let's just see it in the debugger so we have it correctly wait a second what exactly is happening here oh this is oh obviously because this should go like here because we cannot just split over an array again right so if I do like this now and hit delete yeah it makes sense now because what I was doing here is that I was just joining it but I'm I was not storing this result anywhere right so it just it was just a waste call so now you can type basically anything like if I just remove this dot and all that stuff I had delete to delete that and here you are it's just a basic implementation of the typing feature for now so here we are with our tutorial from the last video I don't know what that means but anyways so let's just proceed where we have been doing so far so in this video I just want to add support for these plus minus and multiplication buttons as well here and actually we can see that we do not see the division button and the reason for that is that because we are omitting that and actually we can just make it a little bit more dynamic by just replacing this for with or actually not this one this for with the length of this but it does not really matter because in calculators we have very fixed operations available with us especially in the one which we are coding right now right so here we are with our little division sign back with us so now what we want to do is just say that to when it's not D when it's something like say plus so again I just want to add it for now to the screen because we're gonna tokenize all our text later on so it should be kind of easy for us so four plus four minus four plus four minus and for multiplication and for division what I want is just at a basic validation that our text is not really black there's something at least to the left of it right because that's what we really want I don't want a person to start with a plus sign because that does not make sense so what we can do is just say that if state this dot state dot text is equal to blank that means the user is directly pressing these buttons which we do not really want so I just want to say return just like that and actually this should be the case in our case D as well because I want the user to go beyond anything it does not really make sense because movie are doing essentially here if you take a look inside the console you can see that we get a blank element splitting on a blank element right here you can see it does not really make any sense because it returns us a array of zero length so when we split on that we pop it we get nothing so we get we joined it with nothing to get a string back an empty string so yeah it kind of works out itself but we can actually just add this validation right here so if it's not the case then what we want to do actually just make it shorten in a single line so that we can just space save two lines whenever necessary there we go so now if that's not the case then what we want to have is just this not set state as a result text is this dot state dot result text plus our operation right there operation there we are so now if you just see something like this plus this minus this all right looks good now another thing which I want to do is on the button pressed if this thing is a Cali is an equal to button so obviously what I want to do is verify a little bit of results a little bit of you know things right here that first of all what we can see is let me just say let me just think about it what we can do is just see if text dot or actually should we just open eyes everything first let me just think here so we can actually ultimately we have two tokenize the text anyway right so yeah I guess we should dokkan eyes all the text first and then proceed onwards and back organizing what I mean is that if our text is something like this so I can just convert it into like three then plus then three then star and then six and then power and all that so they're not really like that and it's just like splitting character by character but obviously like in the order of how it should be organized so yeah I guess then that's it for this video I believe because in the next video I will be just showing you how to organize all of this stuff once you press calculator once you actually press an equal to and obviously we can fix this little bug right here which just allows us to type for single sign multiple times so what we can do right here for now is just say if this dot state of text is blank or this dot state dot text dot let me see split dot two let's see op equals two or let's just say this is our character right so what I want now is actually test whether this is okay let's just take it this way let me just clear stuff so I'm just gonna get the last character last character I'm just doing it so that it's easier for you to see and follow along so this gives us our last character inside this field for example a minus for now and what I want to do if last character dot are actually not like that if operations dot index of the last character is not equal to negative one that means that means that last character is in fact an operation so what I want to do is just return because I do not want to have two simultaneous operations right so again what we can do is just and actually not like that because the operation could consist of delete character as well which we want to allow so we can say is greater than zero right so it omits our delete character and actually let me just move it actually let's just change this to a class property instead so this start operations there we go and I'm just gonna say this start operations just like that and move it into our constructor just like that all right so here we are now what I want to do is actually I have already done that so let us hit save and see if we can see anything okay we get a split off off undefined because it's not text it's actually result text it's safe reload plus operations was not different because this is test dot operations that's well that's embarrassing anyway so let's just save it reload Wow plus minus does not work very well divide yep does not work and if I hit delete it works perfectly fine so there we are with a little bit of more validation so if we see right here inside the code we had last time is that basically we can just tap on some numbers and add some operations as well and there's kind of a little validation as we were going along as we type all the stuff right so we can actually delete them as well and so on and so forth so what we want to do now is as I said when we want to calculate the result we want to parse some text like this so if you just consul not log this text first it's save and let's just reload the app what the heck does react sometimes this you know does not reload on savings let me just manually reload here right here by hitting reload there we are so now if you just take a look like if it's a say 21 + 54 and what I'm gonna do is this press this equal to right here let's see what we have inside our console we have 21 + 250 volt right so what we want to do now is basically calculate this right so this is easy but with operations like doing like times 8 minus this divided by this stuff like this what we want to do is just follow a kind of a standard or something now there are I guess two standards I'm not really sure what I know which off is both mass which is like you have to follow brackets first then off which is not really a mathematical operator right here inside our calculator then division then multiplication then addition then subtraction right so if there are brackets you have to follow brackets first and then sleeve this then division and multiplication then addition and subtraction right so we can do that so to do that what we have is the first way is basically there are two ways to calculate this text right so what we want to do is like let's see you might want to have like split the character with each character or maybe like I trade over yeah splitting and I trading over each of the character like that so now you're gonna say if character is your special character something like this or you can just use an array and test if their character is actually included in that particular array then you want to do something right so this is a basic logical implementation of a calculator but what we can do since we are making use of react native and again if you remember we are running JavaScript right so we can cheat a little here so what I'm gonna do instead of this all this brainstorming and finding out what stuff goes where and aligning brackets and all that stuff what we can do instead is make use of our old good but in famous friend you all so you all is actually used to evaluate a value which is in a string right so if I try to do you Val this value right here eval 21 plus 55 let's just say you see that we get this if I do eval off like alert you see I get an alert so eval is basically used to evaluate a string as a JavaScript code you should never use this on user input but we're gonna use this on user input I know right because of two reasons first of all this is not a web application so doing an email of alert is not going to work really because we have not made our app sophisticated enough to have JavaScript functions executed inside our Java running runtime environment right so this could possess a problem if we are kind of allowing anything to be typed on the keyboard and then evaluating it but since we are restricting the user input only numbers basically and these signs we can pretty much hope that they're not able to type characters and you know kind of self XSS them so yeah so it's I guess safe to do so if I do like eval of text so if I just console.log this as well so yeah let me just comment this out for first let's just freaking reload this application enable library loading there we go basically actually I just flashed my phone's Rob so that's why I guess I lost some options here so it's Android 8.1 quite impressive it's it's actually a resurrect remix ROM so if you have use that it's kind of smooth til now works awesome I'm really liking it so yeah and if I do like 22 times 11 and then if I just dismiss this equals 2 and then if a good like console you see you see that we get 22 times 11 is equal to 242 which is in fact what JavaScript would tell you anyway because that's the result javascript calculated right so we want to do is now basically update this value and set our results right so what I'm gonna do is say this dot set state and I'm gonna say actually what do we call this so we are kind of like saying that this is calculation text so let's just name it that calculation text and there we go so what I'm gonna do right here is again just initialize it for the stake of sanity here and what I'm gonna do is just say that I just want to set the state with the heck are we this dot set state calculation text is eval which is evaluating the input supplied by the user so if I just dismiss this on 66 plus 55 equals 121 there we are I'll actually disused dummy placeholder with 121 only I believe so that's kind of like and it's completely random right you see that kind of works properly now there could be a couple of problems here for example if I just write plus and hit equal to you see that we get unexpected end of input that's because we are trying to evaluate something like evaluate to plus right so this is the problem so obviously we do not we cannot just leave everything on eval so we need to do some sort of validation at our end as well before actually executing this function so lets us get into the validation of this text before we actually hit it and if we see what we have right here is that how we are calculating this is if we press equal to we see that we call this function but actually before calling this function what I want to do is just validate the text as well so to alidade the text what I want to do is just basically say something like this dot do Ally date and this not calculate result so what it will do basically is that if this function returns false then obviously the second condition for the ant would not run so this returns true then our this function would actually run so we can safely just implement our logic right here so again we're gonna just get the text first with this dot state dot result text right here all right so now as of now what I can just imagine as a case is that we just leave an operator right there so if we do like something like if text at sli's negative one is equal to like plus or actually like we can just switch over it as well if you want we can actually just create an array as well of these operators there are so many ways to do it single thing in JavaScript sometimes so take stuff slice negative 1 is equal to or actually what are you go to right here KS plus K is minus K is multiplication case division and we just return rate turn false right and I just return true otherwise all right there we go so now what I want to do is just basically try out it again and dismiss and I say let me just try it from here one day so if I just say equal to I get when you do very well at a plus and then right equal to okay the app does not crash that seems right fifty five equal to that's great so now if I try to do like something like fifty five point and then do equal to then also it does not crash and mainly it does not because you can see whenever eval would crash then your so with your application you see that actually in JavaScript numbers are not really you know it does not really about if you leave a decimal right here so you see that X is still 55 right here even if you like fifty five dot right so it's not a big deal so yeah that's basically that's how you would a little bit of validation to your input feed right here so right now I have the regular calculator opened up and right here is the calculator which we have right so we have a couple of things to do first of all in the UI we need to update the colors so let's just do that really quickly so right here if we take a look where we are setting these colors and all is actually inside our stylesheet right or basically the react styles so what we want to do is just locate this yellow green columns and update them accordingly so to update it the colors let's just do a quick Google search right here say calculator Android let's just leave this we do not need here images and let's just pick this one because we would be able to just extract the colors just like that and actually this is a little trick I use if you did not know about it well there you go then so here it is our hex value for the yellow pad there we go and our hex value for the buttons on the right could be just mmm let's see instead of doing it a black versat there we go so instead of doing it a color white are we doing it correct numbers is a view we need to actually style the text right so actually not even the text these numbers right so yeah let's just do one thing let's just remove this color from here and instead what we want to do is actually style dot button text which is what you want to modify and give it a color of white and just like that and once we do that you can see that basically our calculator already and instead of this red and cream let's just make it right and right hit save and data let's just add a key property here as well so that react doesn't complain about it so for the key we can just give it a key of nums of IJ only because that's unique you have to keep your key unique and kind of you know relatable as well you can just throw in math dot random sure you can but just it's just preferable so if you have got some sort of unique identifier in your data then just go ahead and use that as the key reactors needs it so that it has a track of all the elements right and here we do not have that so just operations of I know this dot operations what the heck am I even doing this doll operations of I and there we are so this looks much more like a calculator and oh why the heck do we have another one in here each child in an array or a traitor should be a unique key we are doing that aren't we or does react expect us to do it here also so let's just see there we are and I believe we should be fine now yep okay it's it looks like kind of looks like a calculator not bad I believe but the obvious problem right here is that we start from here from here the buttons 1 2 3 4 5 6 7 8 9 and the actual calculator starts from the bottom so it's kind of like okay and again we can just keep it del instead of D and that's actually just easy you have to you can just make these as constants as well at the top so that you don't have to modify it everywhere if you change it once right so I just prefer to do that so you can do that as well but here since it's a small program we can just do a little bit of manual shifting right so now if we just it's safe so it looks much more like this right and we can do some sort of operations as well and holy crap so we have a white colored text here so we need to update that as well so very hard let's see let's see let's see here we are calculation text should be black and same for the result text should be black hit save there we are 22 plus 55 what it is hey it's 77 not bad can your calculator do it 22 plus 55 well obviously this calculator does not really require us to press equal to write and actually pressing equal to mix it and large so that's a task I want to keep do you guys now detect how you would create a functionality like this so obviously you have to make use of state variable here instead of like doing calculations when you click on equal to right so that you can update and you know change the state on a regular basis how the text changes right also make trying to make this font size a little bit bigger this one actually and remove the bold it looks like it's bolded so try to use a different font or thinner font and make it enlarge as well and you would basically good to go so that's all for our react native calculator applications if you liked it and don't forget to subscribe and thank you for watching
