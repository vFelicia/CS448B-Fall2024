With timestamps:

00:00 - the mediator design pattern is a pattern
00:02 - that provides a central authority
00:04 - through which the different components
00:06 - of an application may communicate if a
00:09 - unit of code has too many direct
00:10 - relationships between components it may
00:13 - be time to have a central point of
00:14 - control that components can communicate
00:16 - through this diagram shows what the
00:19 - mediator design pattern is like you have
00:21 - one mediator up here and then you have
00:23 - these other components called colleagues
00:25 - that communicate through the mediator
00:27 - and then the mediator communicates back
00:29 - to the other colleagues an analogy would
00:31 - be an airport traffic control system
00:34 - so a tower this would be the mediator
00:37 - right here handles what planes can take
00:39 - off and land because all communications
00:42 - are done from the plains to the control
00:44 - tower so flight 77 communicates to air
00:48 - traffic control that they're ready to
00:50 - land and so the air traffic control
00:53 - tells flight 112 that they have to wait
00:54 - a little bit before they land the planes
00:57 - are not communicating between each other
00:59 - they're all communicating to the control
01:02 - tower and then the control tower
01:03 - communicates back to the planes so the
01:05 - centralized controller is mediating all
01:08 - the communication this design pattern
01:10 - can be implemented in different ways but
01:12 - here is a simple example in this example
01:15 - we have participants that are joining a
01:17 - chat session by registering with a chat
01:20 - room which is the mediator so the
01:22 - mediator in this example is the chat
01:24 - room right here and the mediator is
01:27 - going to define an interface for
01:28 - communicating with colleague objects
01:31 - it's going to maintain references to the
01:33 - colleague objects and it's going to
01:34 - manage central control over the
01:36 - operations now in this example that the
01:39 - colleagues are going to be the
01:40 - participants right it's right up here
01:42 - and these are going to be mediated by
01:44 - the mediator and each instance is going
01:47 - to make maintain a reference to the
01:49 - mediator
01:50 - so in this example the participant is
01:53 - going to have a name and then it's going
01:54 - to have the reference to the mediator
01:56 - which is the chat room it starts off
01:58 - with it with null and there's two
02:00 - functions that the participants can do
02:02 - they can send
02:03 - where they're going to send a message to
02:06 - people in the chat room so it's going to
02:08 - pass you're going to pass in the message
02:10 - and who you're sending the message to
02:12 - and when you call this message it's
02:14 - actually going to call the mediator this
02:16 - dot chatroom dot send so the chat room
02:19 - is defined up here and we're gonna do
02:21 - the send method from the chat room and
02:23 - send over the message this which is the
02:27 - reference to the participant sending the
02:28 - message and two who we're sending the
02:30 - message to
02:32 - and then to receive a message
02:34 - we're just going to have the message and
02:37 - from and we're just going to console.log
02:39 - the message
02:40 - so let's look through the chat room now
02:42 - so we're going to maintain a list of
02:44 - participants here which is just an empty
02:47 - object right now
02:48 - and then you can register with the chat
02:52 - room by passing in the participant and
02:54 - so we're going to add to this
02:57 - participant's object the the name and
03:00 - set to the participant and here we're
03:02 - going to do set the chat room to this so
03:06 - up here in the participant the chat room
03:08 - is now going to be set to the current
03:10 - chat room
03:11 - and remember the participant calls the
03:13 - chat room that send function here so
03:16 - it's defined here where we pass in a
03:18 - message who it's from and who it's to if
03:22 - it's too
03:22 - someone in particular
03:24 - it's just going to be a single message
03:27 - we're going to call 2 dot receive
03:29 - remember 2 is the participant receiving
03:31 - the message and we're going to call the
03:32 - receive function and pass the message
03:34 - into the from if you do not pass in who
03:37 - the message is to we're going to
03:39 - broadcast the message to all the
03:42 - participants in the chat room so we're
03:44 - going to run this for loop that goes
03:46 - through every participant in the chat
03:48 - room and you can see instead of just
03:50 - calling the receive function on who
03:52 - we're sending it to it's going to call
03:54 - the receive function on every
03:56 - participant in the chat room so it gets
03:58 - sent to everybody so let's see how that
04:00 - works we're going to create five
04:02 - participants here with five different
04:03 - names
04:04 - and then we're going to create the chat
04:06 - room here and then we're going to
04:08 - register all those participants with the
04:10 - chat room so they've all entered the
04:12 - chat room
04:13 - now here we're going to call quincy.send
04:16 - and we're going to pass in how is it
04:17 - going and we're not going to pass in who
04:20 - this message is going to
04:21 - so it's just going to go to to everybody
04:24 - and the next few messages we're actually
04:27 - going to pass in who it's going to and
04:29 - each of these messages goes to quincy so
04:32 - when we run this you'll see in the
04:33 - console that those just go to one person
04:36 - so let's run that so you can see the
04:38 - first few messages
04:40 - quincy sends a message to all four of
04:42 - the other people how's it going how's it
04:43 - going how's it going how's it going and
04:45 - that just happened just because of this
04:48 - and then the next messages only get sent
04:50 - to one person so you can see the rest of
04:53 - these messages here are these messages
04:56 - sent directly to quincy so our chat room
04:59 - is mediating all of these messages
05:02 - thanks for watching my name is beau
05:04 - carnes don't forget to subscribe and
05:06 - remember use your code for good

Cleaned transcript:

the mediator design pattern is a pattern that provides a central authority through which the different components of an application may communicate if a unit of code has too many direct relationships between components it may be time to have a central point of control that components can communicate through this diagram shows what the mediator design pattern is like you have one mediator up here and then you have these other components called colleagues that communicate through the mediator and then the mediator communicates back to the other colleagues an analogy would be an airport traffic control system so a tower this would be the mediator right here handles what planes can take off and land because all communications are done from the plains to the control tower so flight 77 communicates to air traffic control that they're ready to land and so the air traffic control tells flight 112 that they have to wait a little bit before they land the planes are not communicating between each other they're all communicating to the control tower and then the control tower communicates back to the planes so the centralized controller is mediating all the communication this design pattern can be implemented in different ways but here is a simple example in this example we have participants that are joining a chat session by registering with a chat room which is the mediator so the mediator in this example is the chat room right here and the mediator is going to define an interface for communicating with colleague objects it's going to maintain references to the colleague objects and it's going to manage central control over the operations now in this example that the colleagues are going to be the participants right it's right up here and these are going to be mediated by the mediator and each instance is going to make maintain a reference to the mediator so in this example the participant is going to have a name and then it's going to have the reference to the mediator which is the chat room it starts off with it with null and there's two functions that the participants can do they can send where they're going to send a message to people in the chat room so it's going to pass you're going to pass in the message and who you're sending the message to and when you call this message it's actually going to call the mediator this dot chatroom dot send so the chat room is defined up here and we're gonna do the send method from the chat room and send over the message this which is the reference to the participant sending the message and two who we're sending the message to and then to receive a message we're just going to have the message and from and we're just going to console.log the message so let's look through the chat room now so we're going to maintain a list of participants here which is just an empty object right now and then you can register with the chat room by passing in the participant and so we're going to add to this participant's object the the name and set to the participant and here we're going to do set the chat room to this so up here in the participant the chat room is now going to be set to the current chat room and remember the participant calls the chat room that send function here so it's defined here where we pass in a message who it's from and who it's to if it's too someone in particular it's just going to be a single message we're going to call 2 dot receive remember 2 is the participant receiving the message and we're going to call the receive function and pass the message into the from if you do not pass in who the message is to we're going to broadcast the message to all the participants in the chat room so we're going to run this for loop that goes through every participant in the chat room and you can see instead of just calling the receive function on who we're sending it to it's going to call the receive function on every participant in the chat room so it gets sent to everybody so let's see how that works we're going to create five participants here with five different names and then we're going to create the chat room here and then we're going to register all those participants with the chat room so they've all entered the chat room now here we're going to call quincy.send and we're going to pass in how is it going and we're not going to pass in who this message is going to so it's just going to go to to everybody and the next few messages we're actually going to pass in who it's going to and each of these messages goes to quincy so when we run this you'll see in the console that those just go to one person so let's run that so you can see the first few messages quincy sends a message to all four of the other people how's it going how's it going how's it going how's it going and that just happened just because of this and then the next messages only get sent to one person so you can see the rest of these messages here are these messages sent directly to quincy so our chat room is mediating all of these messages thanks for watching my name is beau carnes don't forget to subscribe and remember use your code for good
