With timestamps:

00:00 - [Music]
00:19 - so
00:30 - [Music]
00:46 - [Applause]
00:47 - [Music]
00:50 - without further ado where have we been
00:52 - these past several weeks we'll recall
00:54 - that over the past couple of weeks we've
00:55 - been introducing web programming and
00:57 - most recently did we try to tie together
00:59 - a lot of the topics from the past few
01:01 - weeks html and css and javascript and
01:03 - then python and then another framework
01:05 - another piece of software called flask
01:07 - that just made it easier and more
01:08 - possible to build web-based applications
01:11 - and the simplest example of that last
01:12 - week recall looked a little something
01:14 - like this and this past week with the
01:16 - problems on similarities and survey have
01:18 - you been building your own web-based
01:20 - applications but they haven't quite had
01:22 - all of the pieces that you might want to
01:24 - assemble into a web-based app and so
01:26 - today we'll fill in those final blanks
01:28 - but recall that we've been trying to
01:29 - frame these applications not as one-offs
01:32 - or just tools that you built but it's
01:33 - part of a common paradigm or methodology
01:36 - and indeed when you're learning computer
01:37 - science and software engineering you
01:39 - start to notice patterns in the software
01:41 - and the code that you're writing and
01:43 - humans tend to adopt these patterns
01:44 - because they save you time and then
01:45 - everyone can kind of speak the same
01:47 - language so to speak so mvc was the
01:50 - acronym we introduced last week model
01:51 - view controller and that just speaks to
01:53 - this paradigm whereby you organize
01:55 - certain type of code in one file certain
01:57 - types of other code in another file so
01:58 - your python code goes in application.pi
02:01 - your html goes in your html files your
02:03 - css and your css files and so forth but
02:05 - what we didn't have last week was this
02:07 - thing here really model generally refers
02:10 - to your data and while survey your most
02:12 - recent problem did have data a csv file
02:15 - that's arguably a model csv is not
02:17 - terribly expressive you can pretty much
02:19 - just write rows text file rows to a text
02:22 - file not unlike a spreadsheet but you
02:24 - can't really query it you can't easily
02:25 - insert or delete you pretty much would
02:27 - have to reconstruct the whole file and
02:29 - indeed that's exactly what i did back in
02:31 - the day the very first web-based
02:32 - application i wrote back in sophomore or
02:35 - junior year was the freshman intramural
02:37 - website and all i had available to me
02:40 - both technologically and conceptually
02:42 - were csv files i had no idea what
02:44 - databases were didn't realize how much
02:45 - easier they could make my life so i
02:47 - stored all of the data behind these
02:49 - links here just in very simple text
02:51 - files but today will give you so much
02:53 - more power and especially if you're
02:55 - coming into the class with an interest
02:57 - in applying cs to other fields in
02:59 - medicine or the arts or any world in
03:02 - which there's data particularly in stem
03:04 - and data science and the like realize
03:06 - that sql has really become this uh this
03:08 - uh incredibly powerful language with
03:11 - which to solve problem in those and so
03:13 - many domains and ultimately what you're
03:14 - build this coming week your very last
03:18 - cs50 problem set you have now peaked
03:20 - just about um will be cs50 finance a
03:23 - web-based application by which you can
03:25 - buy or or buy and sell stocks and so
03:27 - what you're going to do this coming week
03:29 - is write code that implements a web
03:31 - application that resembles this whereby
03:33 - your users and yourself will be able to
03:35 - register for an account log into that
03:37 - account you'll be given for free thanks
03:39 - to us 10 000 virtual dollars and then
03:42 - you can go ahead and buy and sell stocks
03:44 - via their symbol using this application
03:46 - so for instance if i go ahead and
03:47 - register myself here let's say username
03:49 - mailin password12345
03:53 - shouldn't have said that go ahead and
03:54 - register here you'll see that by default
03:56 - i get this free ten thousand dollars in
03:58 - virtual cash you know what i'm gonna go
04:00 - ahead and buy myself a share of maybe
04:02 - netflix whose symbol is nflx i'm gonna
04:05 - go ahead and try to buy one share voila
04:07 - and now you'll see that not only do i
04:09 - have less cash left about nine thousand
04:11 - six hundred dollars i now own a share of
04:13 - stock and if we reload this throughout
04:15 - the lecture frankly the price might go a
04:17 - little up or a little down because this
04:19 - web application you'll build will also
04:21 - talk to an api an application
04:23 - programming interface so some
04:25 - third-party website that provides you
04:27 - with stock data so you ask it for the
04:29 - current price of a stock it gives you an
04:31 - answer in json format if you recall our
04:33 - short discussion of that and you'll
04:34 - integrate it ultimately into this
04:36 - interface so this will be the
04:37 - culmination of so many of the ideas and
04:39 - the building blocks which you've
04:40 - experimented but we need a few final
04:43 - pieces today so first and foremost when
04:46 - i registered for this site i created an
04:48 - account and indeed i can go ahead and
04:49 - log out now and if i go ahead and log
04:51 - back in if no one's stolen my password
04:54 - yet i can see my account and only my
04:57 - account
04:58 - but we haven't yet seen any mechanism in
05:00 - code whereby you can implement this
05:02 - notion of logging in right what is the
05:04 - underlying logic by which a website
05:06 - knows that you are logged in or you're
05:09 - not logged in right clearly when i went
05:11 - to this website just a moment ago it
05:13 - prompted me to log in because i was not
05:15 - because i had logged out but how did it
05:17 - know that and now that i am logged in
05:19 - how does it know that i can click on
05:21 - quote to get just a stock quote or buy
05:24 - just to buy a stock or sell why does it
05:26 - not prompt me every time i click a link
05:29 - to log back in
05:31 - with my username or password
05:33 - what do you think
05:34 - little files that
05:36 - saves the data inside your browser's
05:37 - cache to let you know that they know
05:39 - what's going on yeah cookies little
05:40 - files that get saved by websites on your
05:42 - computer now odds are most everyone here
05:44 - has probably heard in some form cookies
05:45 - bad
05:47 - maybe bad privacy invading yes okay so
05:50 - true
05:51 - but most of the web would not work
05:53 - without them so someone else what do you
05:55 - understand a cookie to be
05:58 - what is a cookie
06:00 - basically
06:00 - [Music]
06:03 - yeah it saves your information somehow
06:04 - you don't have to so you don't have to
06:06 - put it in every time so in simplest form
06:07 - it's exactly a combination of those
06:09 - answers whereby when i log into a
06:10 - website you could imagine that website
06:12 - just remembering my username and my
06:14 - password by just saving them in a little
06:16 - file on my mac or pc so that the next
06:19 - time i visit a web page it just
06:20 - automatically sends them for me so that
06:22 - the human doesn't have to type them
06:24 - again and again now let's find fault
06:25 - with that feels like that would work but
06:28 - what's the downside of that
06:30 - naive implementation
06:32 - what do you think instinctively
06:35 - the data's just out there right you know
06:37 - i have people in uh you know in the
06:39 - office or at home or in a uh in a
06:41 - library that i might not want to just be
06:43 - able to walk up to that computer and
06:44 - just see this little text file planted
06:46 - on my computer because then they could
06:48 - log into my account by just digging
06:49 - around so it feels a little invasive
06:51 - indeed that's one of the threats of
06:52 - cookies so it turns out cookies or
06:54 - websites tend not to do that at least if
06:56 - they're implemented well they instead
06:58 - just plant a really big random number on
07:01 - your hard drive or in your computer's
07:03 - ram or memory so one two three four five
07:05 - six seven like some really big number
07:06 - maybe with letters and numbers maybe
07:08 - even some punctuation that uniquely
07:10 - identifies me and thereafter anytime i
07:14 - click a link on that same website after
07:16 - logging in my browser thanks to http the
07:18 - language that browsers and server speak
07:20 - that we discussed a few weeks back just
07:21 - magically sends that same big random
07:24 - number to the server again and again and
07:26 - so long as the server remembers that
07:28 - that big random number corresponds to
07:30 - username malen it can figure out whose
07:33 - account to show and why is it a big
07:35 - random number why is it not just my
07:38 - password or my username
07:41 - why am i proposing that it'd be a big
07:43 - random number
07:48 - exactly in computer science randomness
07:50 - is this incredibly powerful ingredient
07:52 - if you pick a big enough word or a big
07:54 - enough string or sentence the
07:56 - probability that some random adversary
07:58 - or bad person on the internet is going
08:00 - to be able to guess or try to guess that
08:02 - value is just so low it's just not
08:04 - realistically ever going to happen in
08:06 - your lifetime statistically and so
08:07 - randomness gives us that capability and
08:09 - so you can think about this
08:10 - metaphorically in the real world as
08:11 - being like a hand stamp if you've ever
08:13 - gone to uh like an amusement park or a
08:16 - bar or club where you have to show your
08:18 - id or you have to pay for a ticket on
08:19 - the way in sometimes they'll stamp you
08:22 - with either visible or invisible ink and
08:24 - that's largely for efficiency so that
08:26 - thereafter when you're in the amusement
08:27 - park you can kind of come and go and you
08:28 - don't have to repay or reprocess if
08:30 - you're in the bar the club you don't
08:32 - have to keep showing your id they can
08:33 - check once and then more efficiently let
08:35 - you come and go as you please because
08:37 - you're just presenting your hand or this
08:38 - virtual hand stamp to the the bouncer or
08:41 - to the gatekeeper at those places so
08:43 - cookies are exactly like that
08:44 - unbeknownst to us all this time anytime
08:46 - you visit a website into which you've
08:48 - logged in your browser is secretly but
08:50 - usefully presenting a hand stamp to that
08:53 - server to remind it who you are or
08:55 - rather not really who you are but of
08:58 - that big random number so that if the
09:00 - server remembers who that number belongs
09:03 - to it can figure out whose account to
09:06 - then show so put more concretely if i
09:08 - actually pull up some of the http
09:10 - examples that we looked at in the past
09:12 - let's consider this in context so almost
09:14 - everyone here has probably used gmail at
09:15 - some point and you log in generally via
09:17 - page like this so it might be infrequent
09:19 - because you're not often prompted to log
09:21 - into gmail because of surprise surprise
09:24 - cookies from google being on your
09:25 - computer but let's see where those come
09:27 - from so when you request google or
09:29 - gmail.com you might send in a virtual
09:32 - envelope so to speak from your mac or pc
09:33 - to the server a message like this
09:35 - families who have not seen this before
09:37 - this is what your browser is actually
09:38 - sending to a server in order to request
09:40 - a home page of gmail.com now i'm going
09:42 - to simplify this a little bit because
09:44 - there's a bunch of redirects http 302s
09:46 - and 301s involved that aren't that
09:48 - interesting today so let's just assume
09:50 - that gmail responds immediately
09:52 - typically gmail would respond with this
09:54 - saying 200 okay here's the login page
09:57 - and here's a web page in text slash html
09:59 - format but once you've logged in what
10:02 - gmail actually does is it also sends
10:04 - this recall that we called these things
10:06 - h http headers key value pair separated
10:10 - by colons that are sort of semi-secretly
10:13 - sent from browser to server and from
10:14 - server to browser now we more
10:16 - sophisticated developer types can see
10:18 - this stuff right you can open up
10:20 - chrome's network tab and start poking
10:22 - around and it's it's not secret per se
10:24 - it's just most people don't know it's
10:25 - there and what google and other
10:27 - companies are doing is they literally
10:29 - send a header called set dash cookie the
10:32 - value of which is that big random value
10:35 - that the server has decided for you your
10:37 - browser assuming that it speaks http
10:40 - properly should then save that value in
10:43 - ram your computer's memory or on your
10:45 - hard drive and then every other click
10:47 - you make on gmail.com
10:49 - should send not just headers like this
10:52 - but it should send kind of the opposite
10:54 - header just cookie not set cookie but
10:56 - cookie which is the presentation of that
10:58 - handstand and so every time you click a
11:00 - page on gmail or facebook or almost any
11:03 - website into which you've logged in
11:05 - those cookies have been planted on your
11:06 - computer now recently in both the europe
11:09 - and in the us have laws been passed that
11:11 - are increasingly putting pressure
11:12 - on companies that operate
11:14 - internationally to present you with
11:16 - cookie-based information right you get
11:18 - these little pop-ups increasingly and
11:20 - you've been getting them for years in
11:21 - europe saying are you can we plant
11:23 - cookies on your computer so given all of
11:26 - this what might happen if you say no no
11:28 - cookies on my computer
11:32 - you're going to have to keep logging in
11:33 - right if you take away this fundamental
11:35 - http feature much of the web breaks or
11:38 - the user experience deteriorates
11:40 - significantly now the flip side is
11:42 - cookies can be used not only for good so
11:44 - to speak but also for evil it turns out
11:46 - that there's a lot of ads on the
11:48 - internet of course and that's what
11:49 - drives a lot of the revenue that makes
11:50 - it all possible those ads typically come
11:52 - from image tags in your html or script
11:55 - tags or some of the html tags we have
11:57 - seen in the class but they go to third
11:59 - party servers somewhere else dot com and
12:02 - the problem arises with cookies when
12:04 - those third parties are allowed to plant
12:06 - cookies on your computer because if you
12:08 - go to google and you go to facebook and
12:11 - you go to twitter bunches of websites
12:12 - suppose they all have some middleman
12:14 - advertising service advertising on each
12:16 - of these websites that middleman so to
12:18 - speak because they
12:20 - have their
12:21 - ads and therefore their http headers on
12:24 - this site and this site in this site
12:26 - there are big third parties out there
12:28 - lots of them advertising networks that
12:30 - know everywhere little old you is going
12:33 - because they see your cookie appearing
12:35 - from multiple different other sites and
12:37 - so here's where cookies become not a
12:39 - computer science engineering feat but
12:41 - really a threat to one's privacy because
12:43 - they can be used so easily
12:45 - for tracking and frankly at t and
12:47 - verizon as an aside got into trouble
12:49 - then even not enough people know this
12:51 - some years back when they started
12:53 - injecting forcibly
12:55 - additional http headers similar in
12:57 - spirit to this to all of people's cell
12:59 - phone traffic so not things you could
13:01 - even opt out of initially because this
13:04 - was a way too for advertisers and for
13:05 - themselves to be able to track users so
13:07 - these http headers on which cookies are
13:10 - based are very powerful but also very
13:14 - invasive and we're only now starting to
13:15 - see societally and politically pushback
13:17 - on this very simple mechanism that
13:19 - hopefully we as cs types just understand
13:21 - the mechanics of and therefore now the
13:23 - implications
13:24 - so let's see this in context for
13:26 - instance let me go ahead and open up a
13:28 - relatively small example in cs50 ide for
13:32 - those unfamiliar cs50 ide is a web-based
13:34 - application by which you can write
13:36 - programs in the cloud just using any
13:38 - browser on a mac or pc i'm going to go
13:40 - ahead and into my account here
13:42 - and i'm going to go into store and i'm
13:44 - going to go into the templates directory
13:47 - and show that this example here has a
13:49 - few files this will look familiar to
13:50 - students in the room application.pi is
13:52 - the web-based application and then we
13:53 - have some template files so to speak in
13:56 - my terminal window here i'm going to go
13:58 - ahead and adjust my keyboard go into
14:00 - this directory called store in source 8
14:02 - which is available online and i'm going
14:03 - to go ahead and do flask run which for
14:06 - those unfamiliar is the command via
14:08 - which you can start a web server and
14:09 - start running a web-based application so
14:12 - now that i have that i'm going to go
14:14 - ahead and visit exactly this url here
14:17 - and we'll see a relatively simple and
14:19 - super ugly web store let me go ahead and
14:22 - zoom in a bit and this web store allows
14:24 - me to buy three things foos bars and
14:27 - basses whatever those are and this is a
14:28 - very simple
14:30 - e-commerce like site where i just have
14:32 - to type the quantity of foos bars and
14:33 - basses that i want and then i can go
14:35 - ahead and buy them so i'm going to go
14:37 - ahead and say give me one
14:39 - how about zero bars and two bazes and
14:43 - i'm going to go ahead and click purchase
14:45 - and now you'll see my shopping cart but
14:47 - if i continue shopping you'll see that
14:48 - it resets just like if you keep browsing
14:50 - amazon or whatever other website but if
14:52 - you want to check your shopping cart
14:53 - again notice it's remembered what i'm
14:56 - looking for and in fact you know what
14:57 - i'm going to go ahead and close the
14:58 - window oops i actually lost the website
15:00 - but you know what if i go back to that
15:02 - url and reopen i see the storefront but
15:05 - if i view my shopping cart it has
15:07 - remembered my state so notice the power
15:10 - now of cookies is not just to remember
15:11 - with a hand stamp who you are but now
15:14 - you can remember anything about that
15:16 - user that you want right a shopping cart
15:18 - on amazon or any website is like the
15:20 - best example of this because it would be
15:22 - horrible horrible horrible for user
15:23 - experience or ux if every time you click
15:25 - the darn link you lost the contents of
15:27 - your shopping cart because the website
15:28 - forgot who you are so this is a
15:31 - compelling feature to remember and it's
15:33 - cookies that implement this feature too
15:35 - because more generally what's going on
15:36 - with cookies is this when you set a
15:39 - cookie using the set cookie header that
15:42 - looked like this
15:44 - there is a key value pair to the right
15:46 - that we might call session and that has
15:48 - the value value is the hand stamp
15:51 - session is just a term of art that
15:53 - refers to this abstraction that you can
15:55 - think of really as a shopping cart but
15:56 - it doesn't have to have anything to do
15:58 - with actual shopping or e-commerce it's
16:00 - just a container in which you can store
16:02 - stuff so this is telling the website
16:05 - that my session value my hand stamp is
16:07 - one two three four five and big really
16:09 - random number the website can then say
16:12 - you know what i'm gonna store
16:14 - a container for you let's call it a
16:16 - python dictionary or dict for you inside
16:19 - of which i can put anything i want and
16:21 - so in fact when you go to a shopping
16:23 - cart like this
16:24 - what is the server actually doing well
16:26 - upon seeing your hand stamp and
16:28 - realizing oh you are user one two three
16:30 - four five six seven oh that's user name
16:32 - malen let me go ahead and grab the
16:34 - dictionary the python dict from memory
16:37 - or even from a csv file if you want and
16:39 - show you the contents of your shopping
16:41 - cart meanwhile if someone else brian
16:43 - visits the same exact website and logs
16:45 - in with his account he's going to
16:46 - present a different handstand presumably
16:48 - and so the website can look for a
16:50 - different dictionary and show brian the
16:52 - different contents of his shopping cart
16:54 - and the same for everyone in this room
16:56 - so this simple mechanism i mean consider
16:58 - the power this is just a stupid text
17:01 - value key colon value and from all of
17:04 - that does all of the web's capabilities
17:06 - now come and we won't look in too much
17:08 - detail into the code here but let me
17:09 - show one snippet of it if i go into
17:12 - application.pi the magic that makes this
17:14 - possible in flask is just to import this
17:17 - additional feature you'll recall from
17:19 - the past couple of problems you've
17:20 - worked on you import from flask a few
17:23 - things render template redirect request
17:26 - well if you add session to that list
17:27 - which is the code abstraction of this
17:29 - hand stamp idea what you can now do is
17:32 - this let me scroll down to the juicy
17:34 - part here and notice that you can do
17:36 - lines of code now and for the next cs50
17:39 - finance problem lines of code like this
17:42 - session is just a python dictionary or
17:44 - dict you can index into it using any
17:47 - word foo or bar or baz just like you
17:50 - could with dictionaries more generally
17:52 - and you can store and knit anything you
17:53 - want in my case i want to store a number
17:55 - zero foos or one foo or two foods or
17:58 - whatever so i can simply convert to an
18:00 - int the user's requests forms item
18:03 - whatever that is and let me wave my hand
18:05 - at some of the code above because it
18:06 - just kind of sets the whole thing up but
18:08 - the new line of code the new feature
18:10 - that now will empower us to build
18:11 - something like a stock trading website
18:13 - is quite simply this line here because
18:16 - what you can also do to remember that a
18:17 - user is logged in just go ahead and
18:19 - store in this so-called session a value
18:22 - of like true and if the value true is
18:24 - there you can infer that the human is
18:26 - logged in and if there's no such value
18:27 - in the dictionary they are not
18:30 - logged in and so we'll hold your hand a
18:32 - bit more in the next problem set with
18:34 - this introduction of cs50 finance and
18:36 - we'll write some of the code that
18:37 - handles the login so you can see by
18:38 - example how to do this but it'll be up
18:40 - to you thereafter to start remembering
18:42 - what stocks a user actually has using
18:45 - sessions to retain the fact that they've
18:48 - logged in already
18:49 - alright so that was a lot all at once
18:51 - but any questions on cookies and the
18:54 - future they provide these things called
18:56 - sessions
18:58 - anything at all yeah
19:04 - is the session saved on the user side or
19:06 - the server really good question and the
19:08 - answer can be it depends you could store
19:11 - it on the user's client on their browser
19:13 - and as a gentleman up here proposed
19:15 - earlier you could or over here propose
19:17 - you could theoretically store like
19:19 - literally their username and password
19:20 - maybe i proposed that earlier on their
19:22 - computer and that's bad for the reasons
19:23 - that we surmised earlier but you could
19:25 - also store the contents of their
19:27 - shopping cart foos bars and basses
19:29 - that's not quite as invasive as storing
19:31 - their password but if you're buying
19:32 - things you don't really want people
19:33 - knowing that is then invasive so maybe
19:35 - we can do better and better is often
19:37 - stored on the server so a well-designed
19:39 - website will typically store only this
19:42 - big random value the hand stamp on the
19:44 - mac or pc and then all of the
19:46 - interesting and maybe sensitive stuff is
19:48 - stored in a database or a csv file or
19:50 - just the server's ram or memory like in
19:52 - a global variable good question
19:55 - other questions
19:58 - other questions
20:00 - all right so that's one problem solved
20:04 - we know now we can implement login forms
20:06 - and we know that we can remember that
20:08 - people are logged in so let's just
20:09 - stipulate that is now possible but over
20:11 - the past couple of weeks it's not been
20:13 - incredibly powerful to only have access
20:15 - to things like csv files comma separated
20:18 - values which create the illusion of like
20:20 - excel and google spreadsheets and apple
20:22 - numbers like columns and rows why well
20:25 - it's pretty much linear search for
20:26 - everything right a csv file is just rows
20:28 - and rows and rows and rows of data and
20:30 - if you want to search for anything in
20:32 - that file like you might have wanted to
20:34 - for your survey implementation how do
20:36 - you find it well you open the file with
20:38 - open you maybe use a for loop and
20:40 - iterate over every single line looking
20:42 - for some value and then you close the
20:44 - file that is big o of n in the worst
20:46 - case the thing you care about is at the
20:47 - very end and that's not terribly
20:49 - efficient now you can append to files
20:51 - pretty efficiently recall that when we
20:53 - open files with quote unquote a for
20:55 - append mode we did this with a brief
20:56 - example instead of w for write you can
20:58 - help get the operating systems help and
21:00 - add rows to the file at the very bottom
21:02 - which is more efficient but you can't
21:05 - insert things in the middle very
21:06 - efficiently you can't delete things very
21:08 - easily you would have to literally for
21:10 - those kinds of scenarios open the file
21:12 - read the whole darn thing then write out
21:14 - parts of it or add to it as you're
21:16 - writing out and so humans years ago
21:18 - realized well this is stupid all of us
21:20 - humans in the world are constantly
21:21 - writing code to open files change files
21:24 - save files why don't a few of us do an
21:26 - even better job of implementing that
21:28 - feature and then share it with the world
21:30 - and thus were born effectively databases
21:32 - and these days there's so many different
21:33 - types of databases you might be familiar
21:36 - with tools commercial software like
21:37 - oracle or sql server or microsoft access
21:40 - and an open source world there's
21:42 - postgres and mysql and sql lite and
21:44 - others and many of them as even those
21:47 - names imply use a special language
21:49 - called sql structured query language
21:51 - which is the very last language we'll
21:53 - introduce you to in cs50 unless you go
21:55 - off on your own with final projects to
21:56 - pick up something more but with sql do
21:58 - you have the ability to select data from
22:00 - a database to insert it to delete it to
22:02 - update it all of the things that you
22:04 - could absolutely do with python and csvs
22:06 - it would just be so darn tedious to
22:08 - write those lines of code yourself so
22:11 - what's the right mental model here is i
22:13 - claim essentially a database like most
22:16 - everyone in this room has probably used
22:18 - google spreadsheets and if you've not
22:19 - probably excel or maybe apple numbers uh
22:22 - so these are spreadsheets and they're
22:24 - essentially what you could call a
22:26 - relational database relational implying
22:28 - that there's relationships among the
22:30 - various data in the rows and the columns
22:31 - decided by you or whoever made it and
22:33 - this is a spreadsheet of course and it
22:35 - has uh rows where your entity your
22:38 - actual data goes and columns and what's
22:41 - noteworthy about the columns it's just
22:43 - conventional to do what with the columns
22:45 - especially in that first row
22:47 - yeah put some header values right you
22:49 - could certainly put them in the left
22:51 - it's just humans prefer it seems to read
22:53 - top to bottom instead of left to all the
22:54 - way to the right so we just adopted a
22:56 - convention years ago that your columns
22:58 - represent different types of data and
22:59 - the rows represent different uh values
23:03 - for those fields or for those columns so
23:05 - to speak so if you wanted to store like
23:07 - a spreadsheet of values for a bunch of
23:09 - students in a class or in a university
23:11 - one column might be id number like their
23:13 - harvard id or their yale id another
23:15 - column might be their name their email
23:17 - address phone number age and so forth
23:20 - and you could just lay that all out you
23:21 - can make it pretty and boldface the top
23:23 - and organize things and sort it but at
23:25 - some point this isn't quite the right
23:27 - tool and in fact i ran into this in grad
23:29 - school years ago where i was analyzing
23:30 - large sets of data and it was just
23:32 - convenient to double click on a csv file
23:34 - open it in excel and just manipulate it
23:35 - and do answer the data questions that i
23:37 - had but back in the day excel actually
23:40 - had a limit of 65
23:42 - 536 rows
23:44 - sounds like a lot
23:46 - and that's 2 to the 16th power if you
23:48 - caught the reference there but so humans
23:51 - at microsoft decided years ago that's
23:52 - enough um and frankly it kind of was
23:55 - because even in the thousands of rows
23:57 - like my mac just became unusable because
23:58 - there was just too much memory being
24:00 - used so it was a just impractical limit
24:02 - anyway but at some point you might want
24:05 - to store 65 537 rows of data or
24:09 - hundreds of thousands of rows or
24:11 - millions of rows or even more i mean
24:12 - there's so many websites google and
24:14 - facebook and others that surely do this
24:16 - already you can't just use a program on
24:18 - your mac or pc anymore you need to use
24:19 - fancier software but that fancier
24:21 - software often still works the same way
24:24 - you have one main file called a
24:26 - spreadsheet in our human world but in
24:28 - the server world you might call it a
24:29 - database instead and whereas in our
24:32 - human world we might have things called
24:33 - sheets or individual spreadsheets within
24:35 - the bigger file in a database you're
24:37 - going to have things called tables but
24:39 - they're the exact same thing with rows
24:41 - and columns and so when we want to
24:42 - actually store data we can actually
24:45 - store it in exactly those ways so let me
24:47 - go ahead and do this let me go ahead and
24:49 - open up google spreadsheets just as
24:51 - representative of a database and let me
24:54 - go ahead and create a new file here
24:56 - so new spreadsheet
24:59 - and just so that we can represent things
25:01 - like students i'm going to call this
25:02 - spreadsheet students and over here i'm
25:04 - going to put their id number and their
25:07 - name and what are some other fields i
25:08 - rattled off for that come to mind
25:11 - email
25:12 - say again dorm good
25:16 - sport okay so sports they want to do
25:19 - sure that's fine
25:20 - a little longer
25:22 - what else
25:24 - graduation graduation year age okay good
25:26 - so graduation year
25:28 - age
25:30 - concentration okay and we could probably
25:32 - keep going and it just gets wider and
25:33 - wider and these are my my columns if you
25:35 - will or the fields in the database and
25:37 - you know frankly i could name this if i
25:39 - really want to be tidy here and i could
25:41 - call this students and you know what
25:43 - maybe i should call this not students
25:44 - but university because i might want to
25:46 - have another tab here that i will
25:48 - preemptively name to say faculty and
25:51 - faculty probably have id numbers and
25:52 - they have names and they probably have
25:54 - departments for instance and they also
25:56 - probably have emails and so forth so
25:59 - phone number is another one but i might
26:01 - want to kind of cluster these different
26:03 - types of data in different spreadsheets
26:05 - because they're kind of apples and
26:06 - oranges there might be some overlap but
26:08 - they're distinct and so i have different
26:09 - sheets in the database world you do the
26:11 - exact same thing except you call the
26:13 - whole thing a database and you call
26:14 - these things tables to be clear but more
26:17 - importantly with a real database so to
26:19 - speak you have to be a little more
26:21 - proactive about telling the database
26:23 - what types of data you want to store now
26:25 - those of you who've used google
26:26 - spreadsheets and apple numbers in excel
26:28 - know that you can go to like the format
26:29 - menu or the data menu or whatever and
26:31 - you can show things to different decimal
26:33 - places you can turn things to percents
26:35 - and you can format the data but that
26:37 - doesn't tend to have any functional
26:38 - impact on your data it's just an
26:40 - aesthetic detail like how long or short
26:42 - do you want to show the numbers to be in
26:44 - your columns and cells but with
26:46 - databases you can actually provide juicy
26:48 - hints to the database that will help
26:50 - that database store and find data for
26:53 - you more efficiently
26:56 - for instance there's this laundry list
26:58 - of data types to which we have access in
27:00 - sql so sql is the language with which
27:02 - we're going to be able to query a
27:03 - database frankly in uh something like
27:06 - google spreadsheets and microsoft excel
27:08 - how do you find data we usually hit like
27:10 - command f or control f and you search
27:12 - for it that's not very programmatic you
27:14 - can do it with macros and such and we'll
27:15 - do this with code but with sql you're
27:17 - going to have to make a few decisions
27:18 - first sql
27:20 - supports a few different data types at
27:22 - least in one of its forms so it turns
27:24 - out there's a lot of competition out
27:25 - there sql is a general language but
27:28 - different companies and different
27:29 - non-profit groups have come up with
27:31 - their own dialects so much like we
27:33 - humans might speak uh bunches of us
27:35 - might speak spanish well there's
27:36 - different variations of spanish not to
27:38 - mention many many many other languages
27:40 - and so similarly in the programming
27:41 - world is there sort of a common subset
27:43 - of words in a language but then
27:45 - different companies and different people
27:46 - might have added and subtracted their
27:47 - own features just because they think
27:49 - that's better for their use cases so in
27:52 - sql lite which is the database
27:54 - technology we will use in cs50 ide and
27:57 - android uses this and it's very popular
27:59 - in other contexts too ios as well they
28:02 - only have a few data types blob of all
28:04 - things integer numeric real and text now
28:07 - what does that mean well it turns out it
28:08 - means different things with different
28:10 - databases and another popular database
28:11 - is called postgres or postgres sql this
28:14 - is a very popular one for high
28:16 - performing websites so if you're trying
28:18 - to build a business you're trying to
28:19 - make an application used by everyone on
28:20 - campus generally you would use a fancier
28:22 - technology than sql lite which is by
28:24 - definition lightweight and you'd use
28:26 - something like postgres and so we'll
28:28 - introduce you to
28:29 - both of these dialects along the way
28:31 - because each of them allows us to do
28:32 - different things with a different degree
28:34 - of precision so in sql let's claim even
28:38 - though it's a simplification there are
28:39 - at least these data types when deciding
28:42 - what type of data to store in your
28:43 - database table you have to decide not
28:45 - just what it's called like id and name
28:47 - and email and dorm you have to decide
28:49 - what data type it is so we've kind of
28:51 - come full circle because the last time
28:52 - we did this was in what language
28:55 - c so in sql 2 you do this but it's not
28:58 - to be nitpicky it's to actually improve
29:00 - performance so this is to help you get
29:02 - at that data more efficiently because
29:03 - the more the server the database knows
29:05 - about your data the faster it can find
29:07 - it essentially so in the world of
29:09 - databases you generally have to decide
29:11 - not just to store an integer but either
29:13 - a small int an integer or a big ant and
29:16 - generally speaking at least in
29:18 - most databases this might be two bytes
29:21 - this might be four bytes this might be
29:22 - eight bytes so let's maybe impress the
29:24 - families here if you have a 32-bit
29:27 - integer or four bytes what's the biggest
29:29 - integer you can store in your database
29:33 - four billion
29:35 - someone please impress
29:37 - four billion is exactly correct and it
29:39 - might be 4 billion positive values or
29:41 - maybe it's only 2 billion if you also
29:43 - want to have 2 billion or so negative
29:45 - numbers as well
29:46 - big int uses 64 bits which is just
29:49 - massively massively bigger and tiny int
29:52 - or small inch rather there's also tiny
29:54 - int and some dialects small ant is just
29:56 - two bytes and it actually counts up as
29:57 - high as 65
30:00 - 535 as i alluded to earlier so you just
30:03 - need to decide now why would you choose
30:05 - one over the other when you could just
30:06 - use big int and store small numbers and
30:08 - big numbers alike well why might you
30:10 - just intuitively not want to make all of
30:12 - your integer values in a database big
30:14 - ends it's just simple give me as much
30:16 - headroom as i want
30:19 - yeah you're just using memory
30:21 - unnecessarily right why use more memory
30:23 - than you need to now arguably got
30:25 - memory's so cheap these days computers
30:26 - are getting bigger and faster so in some
30:28 - contexts it's not a big deal but if you
30:30 - have lots of data and every one of your
30:33 - rows in a database is two bytes bigger
30:35 - than it needs to be and you have a
30:37 - million rows i mean that's already huge
30:40 - numbers of bytes that you're just
30:41 - wasting and throwing away so it behooves
30:43 - you to actually give some thought to
30:44 - these data types of course you don't
30:46 - want to go too small because if you use
30:48 - a small inch or maybe even an integer
30:50 - but business is so darn good that you
30:52 - have over 4 billion users or 4 billion
30:56 - rows or 4 billion foos and bars and
30:58 - basses that have been sold which
31:00 - absolutely happens to the googles and
31:01 - facebooks of the world you better start
31:04 - using 64 bits
31:06 - to represent unique values instead of
31:08 - just 32 because eventually you'll run
31:10 - out well what else besides integer
31:12 - values in sql you might want to use
31:14 - floating point values those are real
31:15 - numbers that have decimal points in them
31:17 - this is quite like c they're called a
31:18 - little something different and
31:19 - annoyingly it uses two words in this
31:21 - case but a real number is a 32-bit value
31:24 - that is a floating point value like a
31:25 - float in c and double precision is like
31:28 - a double in c which is 64 bits and that
31:30 - just lets you get even finer grain
31:32 - control over the decimal point as we've
31:34 - seen because of course you can't
31:35 - represent numbers precisely because of
31:38 - imprecision as we've seen in both python
31:40 - and c numeric is kind of a catch-all for
31:42 - a bunch of number related things that
31:44 - aren't quite integers or reals
31:45 - necessarily
31:47 - boolean a true or false value
31:49 - dates if you want to literally store
31:50 - like year year year year dash month
31:52 - month dash day day in a standard
31:55 - computer format even though human
31:56 - cultures vary how they write that date
31:58 - time if you want to have a date and a
31:59 - time right after it uh numeric is
32:02 - actually a solution to a problem turns
32:04 - out that finally after all this time we
32:07 - have a built-in mechanism for storing
32:09 - numbers precisely and this is perfectly
32:12 - timed because in cs50 finance when
32:14 - you're dealing with money it'd kind of
32:16 - be nice if you don't accidentally round
32:18 - off how much money someone has either
32:20 - slightly lower slightly higher those of
32:22 - you may be families especially because
32:24 - from a few movies back in the day if you
32:26 - ever saw superman 3
32:28 - this is how some money was made by
32:30 - shaving fractions of pennies off of
32:32 - computer systems and more modernly
32:34 - office spa
32:35 - office space
32:36 - did this as well big scam trying to
32:38 - round off these pennies well you if you
32:39 - use the right technology in language
32:42 - with sql you can actually specify a
32:44 - numeric data type which is like a
32:46 - floating point value but you specify
32:48 - essentially the total number of digits
32:50 - you want to handle and how many of them
32:52 - should be after the decimal point so
32:54 - it's common in stock markets to actually
32:56 - use four decimal points of precision so
32:57 - not just cents the uh to the tenths and
32:59 - the hundreds place but to the thousands
33:01 - and ten thousands place you can now
33:03 - specify that with a value of four
33:05 - for precision and you don't have to
33:07 - worry about those round off area errors
33:09 - we've talked about before time and time
33:11 - stamps just how much time has passed
33:12 - since a gate and date and time are also
33:14 - available to you in sql and then lastly
33:17 - here
33:18 - text values turns out you have a choice
33:20 - of values for when it comes to deciding
33:22 - how many characters to use to store your
33:24 - data you can use char which just like in
33:26 - c with an array you have to decide in
33:29 - advance for a string how many bytes to
33:31 - use and if you say char 8 you are
33:32 - getting 8 bytes and if the name is malen
33:34 - m-a-l-a-n you are wasting three or if we
33:37 - null terminate it two of those bytes but
33:40 - sql introduces a solution that python
33:42 - kind of gave us too varchar as the name
33:45 - kind of implies variable number of chars
33:47 - allows you to specify just an upper
33:49 - bound so if you know that one of your
33:51 - columns is going to be called name and a
33:53 - person's name might be m-a-l-a-n like
33:55 - five letters or maybe certainly more for
33:57 - people with longer last names or first
33:58 - names you can say varchar
34:01 - 100 and that's the upper bound on how
34:04 - long it is but the database will be
34:05 - smart if you only need five characters
34:07 - or five bytes it won't waste 95 others
34:10 - for you it will optimize that for you
34:13 - and then lastly text if you want to
34:15 - store tens of thousands like paragraphs
34:17 - or pages of text that's even bigger than
34:19 - varchar where you don't necessarily want
34:21 - a well-defined upper bound you just want
34:23 - a good chunk of memory but there's
34:25 - implications here and just quickly char
34:27 - and varchar seem like not even
34:30 - complementary just char seems
34:31 - unnecessary why paint yourself into a
34:33 - corner and say give me only eight bytes
34:35 - when you could just say ah give me up to
34:37 - 100 bytes and you
34:40 - the database server figure out how many
34:41 - to actually use
34:43 - like why do these two data types exist
34:45 - yeah
34:46 - time
34:49 - yeah so time is spot on it might
34:51 - actually take longer to use one data
34:53 - type or the other how could that
34:55 - possibly be well if you've got a value
34:57 - like char
34:58 - where you specify a precise number of
35:00 - characters like eight if you think about
35:02 - the columns in google spreadsheets in
35:04 - excel every one of those columns uh that
35:07 - sells is exactly the same with right
35:09 - it's eight bytes eight bytes eight bytes
35:11 - eight bytes and as soon as you have
35:13 - perfectly constant
35:15 - offsets this is by
35:17 - 0 this is 8 this is 16. this is 24 this
35:20 - is 32 and so forth you reintroduce the
35:22 - capability that in c we had with arrays
35:25 - you have random access doing simple
35:26 - simple arithmetic multiplication
35:28 - addition and subtraction you can just
35:30 - jump to any element in a column if it's
35:33 - using the same number of bytes for every
35:36 - cell but with varchar if you need to
35:38 - have small uh very narrow cells and wide
35:42 - cells you're going to have what's called
35:43 - a ragged array where one side of it the
35:45 - left-hand side so to speak is going to
35:47 - be very straight and rigid but the other
35:49 - side might kind of vary based on how
35:50 - long the word is in that column and to
35:53 - your point about time it's going to take
35:54 - the computer more time to search a
35:56 - varchar field because it can't just jump
35:59 - to the third element it has to search
36:01 - all of them potentially but thankfully
36:03 - at the end of the day databases don't do
36:04 - that they don't just evolve into linear
36:06 - search csvs dissolve for our purposes
36:08 - into linear search the magic and the
36:11 - sort of intellectual property and the
36:12 - secret sauce so to speak that goes into
36:14 - databases oracle sql server microsoft
36:16 - access postgres mysql and sqlite is that
36:19 - really smart computer scientists have
36:21 - decided to implement algorithms and
36:23 - fancy data structures often tree based
36:26 - if you recall our discussion of binary
36:28 - trees or
36:29 - tries and hash tables and those fancier
36:31 - data structures they have baked those
36:33 - kinds of data structures and designs
36:35 - into their database software they've
36:37 - made it freely available or commercially
36:39 - available and so we now just have an
36:41 - abstraction called the database into
36:43 - which we can store data and just read it
36:45 - update it write it and change it quickly
36:47 - without having to implement all of that
36:49 - low-level plumbing ourselves and so
36:51 - that's ultimately what a database is
36:53 - going to give us but we have to actually
36:54 - have access to a database to do that and
36:57 - we need to actually decide first to help
36:59 - the database by telling it what to store
37:02 - where
37:03 - and how to store it as a type so why
37:06 - don't we do this let me go ahead and do
37:08 - exactly that with a couple of examples
37:11 - let me go ahead
37:12 - and open up cs50 ide again our web-based
37:15 - programming environment and let me go
37:17 - into
37:19 - our terminal window so for those
37:21 - unfamiliar terminal window is just this
37:22 - black and white or this blue and white
37:24 - window in which you can type commands
37:26 - and rather than point and click and
37:27 - double click on things you can only do
37:29 - things textually in this window and it
37:30 - turns out that in the world of sql lite
37:33 - we can actually use a command called
37:35 - sqlite3 which allows us to create a
37:38 - database so in our human world for csvs
37:41 - you've seen how in code you can just
37:42 - create rows and columns you can
37:43 - literally type it in a text box uh
37:45 - sqlite and is a database technology that
37:48 - uses binary format zeros and ones and so
37:50 - you're going to have to actually store
37:52 - your data differently using a program so
37:54 - if i want to make a file called for
37:56 - instance
37:57 - frosh ims.db
38:00 - i can literally say sqlite3 frosh imdb
38:03 - and then i'm in this program this is a
38:05 - text based program by which i can create
38:07 - my rows and columns and it by design is
38:09 - going to be a little arcane for a moment
38:10 - it's going to look a little cryptic but
38:12 - if i want to go ahead and create a table
38:14 - like a spreadsheet in here i'm going to
38:15 - literally type create table i'm going to
38:17 - call this registrants just like last
38:19 - week when we were looking at frosh i
38:21 - am's examples and the freshman
38:22 - intramural sports program has students
38:24 - registering for sports so i'm going to
38:25 - have a registrance table here i'm going
38:27 - to go ahead now and specify that i want
38:30 - a few columns for this database table
38:33 - one of which i want to call id one of
38:35 - which i want to call name and one of
38:37 - which i want to call dorm so i'm going
38:38 - to keep whoops
38:39 - i didn't mean to hit enter let me just
38:41 - clean this up so now i have three
38:43 - columns id name and dorm and if i were
38:45 - to hit enter theoretically it should
38:47 - create a database it's not going to be
38:49 - graphical like excel or google
38:50 - spreadsheets but it will exist in my ide
38:53 - in a file called froshims.db but i can't
38:55 - just hit enter yet because i have to
38:57 - tell the database a bit more i need to
38:59 - tell it that you know what my id value
39:01 - should probably be an integer and you
39:03 - know what my name should probably be
39:07 - char varchar
39:09 - what should the name of a student be
39:11 - stored as
39:13 - varchar okay so varchar because they're
39:15 - going to vary right if you can think of
39:16 - bunches of your friends they might have
39:18 - short names or long names okay what's
39:20 - the upper bound what's the length of
39:21 - your friend's uh your friend's longest
39:23 - name
39:24 - [Music]
39:26 - 16
39:27 - hi is anyone in here
39:29 - having a name first name and last that's
39:31 - longer than 16.
39:34 - oh 50. sorry i heard 16 i thought
39:36 - because you're not going to be able to
39:37 - register for frosh iems because the
39:39 - database is going to truncate it and as
39:40 - an aside if you've ever gone to a
39:42 - website and tried typing into a form
39:44 - field and either your keyboard stops
39:46 - working or you do type a long word or
39:48 - paragraph in and then you hit enter and
39:50 - it's some of it's gone well that's
39:52 - because the database likely can only
39:54 - store so many bytes and frankly this
39:56 - often happens on customer service forums
39:58 - right if they don't really want you
39:59 - being too verbose with the customer
40:00 - support staff they'll cap the length of
40:03 - the field into which you're typing and
40:04 - they're also doing that on the database
40:06 - but also probably for practical human
40:07 - reasons they don't want to read a big
40:09 - complaint that's this long as well so
40:10 - 50. anyone have a name longer than 50
40:13 - characters
40:16 - and jersey and not many names but you
40:17 - know what we have technology to answer
40:19 - this
40:20 - longest name in
40:22 - world um and it's this guy guinness book
40:25 - of world records is probably right
40:27 - so his name
40:29 - is uh barnaby marmaduke aloysius benji
40:32 - cobweb dartanian
40:34 - eggbert felix gasper humbert ignatius
40:36 - jaden
40:37 - casper leroy maximilian nettie abba
40:39 - julio pepin quillum rosencrantz sexton
40:42 - teddy upwood vivatma weyland xylon
40:46 - yardley zachary usansky but he also goes
40:49 - by nick apparently so but okay let me go
40:53 - ahead and highlight this and i just i
40:55 - could count this manually but i'm sure
40:57 - someone has made a website to count
40:59 - characters in a string there we go
41:01 - letter count.com
41:03 - okay let's go ahead and paste that in
41:04 - count the characters 225 so nick will
41:07 - not be registering unless we don't
41:09 - support just 16 or 50 looks like we need
41:11 - at least 225. so at some point you do
41:14 - have to make a decision and honestly
41:15 - it's not always obvious you do have to
41:17 - specify that varchar is going to be
41:19 - could be 16 could be 50 could be 225 but
41:23 - you know what if he has kids so let's
41:24 - just round up a bit
41:26 - and call it varchar 255 honestly only
41:28 - because it was a convention so back in
41:30 - the day 255 tended to be the max length
41:33 - for this field in older databases and
41:34 - that at least feels like it's probably
41:36 - enough wiggle room for names but you
41:38 - have to make a judgment call at some
41:40 - point we could ignore the problem and
41:41 - say a thousand characters
41:43 - but if that's never really going to
41:45 - happen and you're potentially wasting
41:46 - space you probably shouldn't because
41:47 - even though it's an upper bound you're
41:49 - sacrificing something like time
41:51 - potentially to search that field if
41:52 - you're just uh telling the database uh
41:55 - that it's going to be bigger than it
41:56 - ever actually will be it needs to be
41:58 - more finely hinted so what about dorm oh
42:01 - god now we have to do this again how do
42:03 - we do it with dorm
42:05 - what's the longest length of a dorm or a
42:07 - house on campus
42:10 - i don't like like
42:12 - ker for timer house maybe but you know
42:15 - honestly at some point it doesn't matter
42:18 - too much but being consistent is what
42:20 - matters it's a matter of style it's a
42:21 - matter of design at some point you know
42:23 - you don't have to nitpick every little
42:24 - value but you should probably pick some
42:26 - reasonable value that you could justify
42:27 - to a roommate or to a colleague or to a
42:29 - teaching fellow and then say this feels
42:31 - like enough without it being actually
42:33 - excessive and there's one last thing i'm
42:35 - going to do here is just end my thought
42:37 - with a semicolon i apologize they're
42:39 - back but at the end of my thought here
42:41 - if i haven't made any typographical
42:43 - errors and i'm going to go ahead and hit
42:44 - enter nothing seems to happen and
42:46 - ironically in cs50 in programming
42:49 - nothing happening is usually a good
42:50 - thing because it means no errors have
42:52 - happened if in sql lite i type schema i
42:55 - can actually just see a regurgitation
42:57 - of the table i just created but more
42:59 - importantly i can start to insert data
43:01 - into this now unfortunately it's not yet
43:03 - graphical but if i want to insert data
43:06 - into this i can do this insert into
43:09 - registrants well what do you want to
43:10 - insert i want to go ahead and insert an
43:13 - id a name and a dorm well with what
43:15 - values well with these values uh the id
43:17 - will be the first registrant will be one
43:19 - the first one to register will be brian
43:21 - and his dorm brian where'd you live
43:25 - penny packer
43:26 - so it's good that might be close to four
43:28 - time or two uh lengthwise so i'm gonna
43:30 - go ahead and do this here is an example
43:32 - of a sql statement create table is one
43:35 - verb or expression you can use insert
43:37 - into is another you specify the name of
43:39 - the table the fields of the table and
43:41 - then values and now i'm capitalizing
43:43 - just to make clear what are sql commands
43:46 - and what are actually just words i the
43:48 - human developer chose but it's just a
43:50 - convention these uppercase words could
43:51 - probably be lowercase in most contexts
43:53 - too but it helps things i think visually
43:55 - to distinguish now i go ahead and hit
43:57 - enter nothing seemed to happen that's
43:58 - probably a good thing let's go ahead and
44:00 - register one other person i'll be the
44:01 - second registrant so maybe david from
44:04 - matthews
44:05 - and so matthew's here enter and now if i
44:08 - want to select all of the students in
44:10 - the database i can go ahead and say
44:12 - select
44:13 - from or you know what let's select
44:15 - everything as denoted in many languages
44:17 - by star from registrants semicolon enter
44:21 - and there we have it it's kind of a tiny
44:23 - super simple lightweight database but
44:25 - there are my rows and columns much like
44:27 - excel and google spreadsheets would lay
44:28 - them out for me but it gets better than
44:31 - this suppose i want to search this
44:33 - database for all of the students who
44:35 - registered for matthews and suppose that
44:37 - time passes and more students actually
44:39 - register for frosh ims i can actually
44:41 - filter this data i can do something like
44:43 - select star from
44:45 - registrants where
44:48 - dorm equals quote unquote matthews and
44:51 - so i can filter it hit enter and now i
44:53 - get back just one row and if you mine
44:55 - starts to wander wow if i could
44:57 - introduce python or javascript into this
44:59 - you know what i could do i could
45:00 - probably get back not this this ascii
45:02 - based table this text table maybe i
45:04 - could get back an actual list of rows so
45:07 - that i can actually do something with
45:08 - that data and that's indeed where we're
45:10 - going with this so if i want to select
45:11 - someone else i could do maybe select uh
45:14 - just the name from registrant where dorm
45:19 - equals matthews if i only care about
45:21 - knowing who registered i could do that
45:23 - and whittle it down to even less data so
45:25 - already in just these few commands i can
45:27 - express so much more functionality than
45:29 - you could with a csv to do this in csv
45:31 - you would have had to write all of these
45:33 - lines of python code yourself what if
45:35 - brian moved so brian really didn't like
45:37 - the union dorm so we're going to go
45:38 - ahead and update registrants and set
45:41 - dorm equal to where do you want to move
45:43 - to
45:44 - canaday uh where
45:47 - i could do this a few ways what's your
45:49 - instinct how could i identify brian and
45:51 - only brian so i don't want to move to uh
45:53 - canaday uh how do we move just brian
45:58 - yeah maybe we could do whoops where
46:00 - name equals quote unquote brian and
46:02 - enter i like this but someone find fault
46:05 - with this if you could
46:07 - uh if there's two brians we're moving
46:09 - both of them or all three of them so
46:10 - maybe better honestly would be to say
46:13 - let's just say where the id equals one
46:16 - now of course i need to know brian's
46:17 - harvard id number or whatnot but this is
46:19 - going to be more precise because the
46:21 - supposition here is that the leftmost
46:23 - column our id field by human convention
46:26 - should be unique so that it uniquely
46:28 - identifies the room so we can have as
46:29 - many brians as we want but we're not
46:31 - going to confuse them if i go ahead and
46:33 - hit enter now nothing seems to happen
46:35 - but if i select star from registrants
46:37 - again and hit enter notice now brian has
46:41 - indeed been moved to canada so there's
46:43 - so many other things brian you know what
46:45 - you're not very good at sports the team
46:46 - concluded so delete from registrants
46:50 - uh where id equals one and now if we
46:53 - select star from registrants we have i
46:56 - guess just me left but brian is gone as
46:58 - well so we have the ability to insert to
47:00 - select to update and delete and create
47:02 - all the while while filtering and we've
47:04 - only just scratched the surface here of
47:06 - what's possible because it turns out we
47:08 - can store so much data in these
47:09 - databases all of our students all of our
47:11 - faculty if you're a company you can
47:12 - start to store all of the products in
47:14 - your database all of the orders all of
47:16 - your customers but as soon as you start
47:18 - going down that road well gee what's a
47:19 - customer customers have names
47:21 - and id numbers uh and maybe email
47:24 - addresses and postal addresses those are
47:26 - going to get messy phone numbers which
47:27 - are kind of like integers but not quite
47:28 - so there's so many questions we still
47:30 - need to answer but
47:32 - feels like it's time for some fruit and
47:33 - some muffins so why don't we go ahead
47:35 - and take a five minute break turn on
47:36 - some music parents need to depart that's
47:38 - fine and we'll see you back here in five
47:39 - or so minutes
47:41 - all right so we're back and where we
47:42 - left off was exactly here using sequel
47:45 - light 3 which is the version 3 of the
47:47 - sequel light command which is just a
47:50 - text-based interface to the technology
47:52 - that we should think of as sql lite sql
47:55 - lite is interesting and it's lightweight
47:56 - in the sense that it's not a server it's
47:58 - not fancy software that you have to run
48:00 - it literally stores all of your data in
48:02 - a file but that by convention ends in db
48:05 - or maybe even dot sql lite but it's just
48:08 - a binary file zeros and ones it's not
48:10 - text that you can open with excel or
48:12 - something like that so it's not a csv so
48:14 - it's stored on file this means that you
48:16 - don't need a particular experience with
48:19 - setting up a database server you don't
48:20 - need memory and software to actually run
48:23 - on the computer you can store everything
48:24 - locally but you do pay a price because
48:26 - recall from our past discussions disks
48:28 - are slow and if you're storing your data
48:31 - on the disk it's not going to be nearly
48:32 - as fast as storing it only in ram and
48:34 - that's why these other technologies like
48:36 - postgres and mysql and microsoft access
48:38 - and sql server and oracle exist those
48:41 - are fancier products where someone
48:43 - literally does double click an icon or
48:45 - run a command that runs a program that
48:47 - stays running in the computer's memory
48:49 - and gives you even better performance
48:51 - but for our purposes pedagogically sql
48:53 - light is handy but we're still going to
48:55 - ask the questions about data types
48:56 - because sqlite does support fancier data
48:59 - types like those in postgres and sql
49:01 - server
49:02 - at mysql and oracle and those are the
49:04 - lowercase ones we introduced a bit ago
49:06 - but honestly this is going to get
49:07 - tedious quickly like even i rarely
49:09 - remember exactly the right syntax when
49:11 - creating tables the order in which
49:13 - everything has to go so i tend to use a
49:15 - graphical user interface or gui myself
49:17 - and there's lots of tools out there but
49:19 - we've built one that's free and open
49:20 - source into cs50 iede that just makes it
49:23 - a little easier to edit your sql tables
49:25 - so i'm going to go ahead and exit out of
49:28 - sql lite whoops exit out of sql lite and
49:30 - i'm going to go ahead over here
49:32 - and you'll notice that we have all of
49:34 - the files from today including most
49:35 - recently frosh iems.db that is the file
49:38 - i created with sql lite3 but if you
49:41 - double click it when using cs50 ide it's
49:44 - actually going to open a program that's
49:45 - called php light admin it happens to be
49:47 - written in another language called php
49:49 - has nothing to do with databases just
49:51 - the name of the product here but it's a
49:53 - tool that using pretty simple html
49:56 - tables just gives us a graphical user
49:58 - interface over the exact same
50:00 - functionality and personally i just find
50:02 - this easier to use and pedagogically
50:03 - it's going to be better because it's
50:05 - going to show us the available data
50:07 - types for our table so for instance
50:09 - notice here there's a lot going on on
50:11 - the screen but a lot of this is just
50:12 - uninteresting details but notice here i
50:16 - see a table called registrants and then
50:18 - i can browse it i can see its structure
50:20 - i can execute manual sql by typing it in
50:23 - i can search it insert i can do bunches
50:25 - of things to it and that's why this
50:26 - graphical user interface is just
50:27 - convenient let me go ahead and click on
50:29 - registrants and by default you'll see
50:31 - these tabs now browse structure sql and
50:35 - then a bunch of others and notice over
50:37 - here you'll see the one row and the one
50:39 - registrant who actually remains because
50:41 - when we last left off we
50:43 - removed brian forcibly from the team so
50:46 - suppose i want to go ahead and add more
50:48 - rows just for the sake of discussion i
50:49 - can just do it manually here i can go in
50:51 - here and i can say
50:53 - let's say the third player is going to
50:55 - be
50:56 - veronica i think she was also in matthew
50:59 - so i can just type that in here and i
51:01 - can just go ahead and click insert but
51:03 - what's nice about php lighted man is
51:05 - that it will not only insert the rows
51:07 - for you
51:08 - it will show you the sql like code with
51:10 - which you could have done it yourself so
51:13 - it's a nice visual reinforcement of that
51:14 - exact same command and you'll notice
51:16 - they use double quotes instead of my
51:17 - single quotes before they're sometimes
51:19 - interchangeable but not always so it's a
51:20 - wonderful way of just learning how you
51:22 - can actually do this with the right sql
51:24 - code so you're not over simplifying it
51:26 - with the gui but you know what let's do
51:28 - this i'm going to go ahead
51:29 - and start over because i want to make
51:31 - some better decisions i'm going to go
51:33 - ahead and literally right click or
51:34 - control click this delete frosh i am db
51:37 - and let's actually start this from
51:39 - scratch now previously when i did this i
51:41 - could have in my terminal window gone
51:44 - ahead and done sqlite three and then uh
51:46 - what was it frosh ims.db and created the
51:49 - file for now i'm going to actually just
51:51 - go ahead and touch a file called that
51:53 - name which is a simple command that just
51:54 - literally creates it but puts nothing in
51:56 - it just so i have an empty file and
51:58 - you'll see that it just popped up again
52:00 - on the left hand side which is handy and
52:02 - now i can double click this version of
52:03 - it which has nothing in it yet and i'm
52:05 - back to php light admin but notice no
52:08 - table in database so let's start to ask
52:10 - some of the harder questions as to
52:12 - actually how to create data in a
52:14 - database so let me go ahead and go to
52:17 - this field here create new table on
52:19 - database frosh iems i'll go ahead and
52:21 - call it registrants again but how many
52:23 - fields um so let's go with id
52:26 - name and dorm what else
52:29 - email i heard earlier age i heard
52:32 - earlier
52:34 - sorry sports do you want excuse me
52:36 - sports you want to be in okay six fields
52:38 - six fields let's go with that so it's
52:39 - actually you know seven fields i want
52:40 - phone numbers too this time so let me go
52:42 - ahead and click go and now you'll see
52:44 - just a gooey way of prompting you for
52:46 - all the answers to the same questions as
52:48 - before and maybe this is clear or maybe
52:49 - it's not but it's just an alternative to
52:51 - the
52:52 - memorizing exactly what the commands
52:53 - need to be so top to bottom here's all
52:56 - of the fields i need to decide on
52:57 - ironically the fields is just a synonym
53:00 - for columns and yet my columns are
53:01 - currently laid out in rows but that's
53:03 - just a ui issue so let me go ahead and
53:05 - decide by convention my first field is
53:08 - almost always id or probably should be
53:10 - and we'll see why this is powerful in
53:12 - just a little bit the data type for that
53:14 - by convention should be integer unless
53:17 - you've got a lot of data like a facebook
53:18 - and then big it might make more sense
53:20 - but notice this drop down actually gives
53:22 - us a nice menu of options just as before
53:25 - and you'll see in gray text the category
53:28 - or in fancy terms the affinity of these
53:30 - various types in sql lite and in
53:32 - lowercase black words here you'll see
53:34 - the actual data type supported by big
53:37 - popular databases like postgres that you
53:39 - might want to use for your final
53:40 - projects in fact we're introducing these
53:41 - with an eye tour you're using these for
53:43 - final projects in the cloud not in cs50
53:45 - ide but actually getting your own domain
53:47 - name and putting your website if you do
53:48 - a web app out there so here we have all
53:51 - of my available types and under integer
53:52 - i'm going to go ahead and literally
53:54 - choose integer for my id all right next
53:56 - go ahead and zoom out let me go ahead
53:58 - and choose a student's name before did
54:00 - we do did we decide on char varchar
54:03 - okay varchar in what size
54:06 - 255 so the user interface here just
54:08 - allows me to type it in so the syntax is
54:10 - a little different because it's a gui
54:11 - but 255 but you know what the last field
54:14 - was dorm
54:15 - that too i think we said var char so let
54:17 - me choose that and 255 though this one's
54:20 - a little more debatable i'm not sure
54:21 - what the right number is so in the
54:22 - absence of clarity i'm just going to
54:24 - standardize on some same value without
54:26 - being too wasteful but notice there's a
54:28 - few questions here that we haven't come
54:29 - to but our perfect segue earlier hinted
54:32 - at this it turns out you need to make a
54:33 - few other decisions when designing a
54:35 - database
54:36 - if you know in advance that one of your
54:38 - fields is like the primary piece of data
54:41 - to uniquely identify users that's what's
54:43 - going to be called a primary key the
54:44 - column or field that guaranteed is going
54:48 - to identify users uniquely so if you've
54:50 - got two brians each of them is going to
54:51 - have its own id that therefore is your
54:54 - primary key not the name field brian so
54:57 - i'm going to tell the database this is
54:59 - the primary key and it's going to help
55:01 - me keep track of that uniqueness
55:03 - moreover this is a fancy feature before
55:05 - i was manually and very arbitrarily
55:07 - saying brian will be number one i'll be
55:09 - number two veronica will be number three
55:11 - that's tedious like computers should be
55:12 - able to solve that problem for me i
55:14 - don't want to think about who is id
55:15 - number what you can auto increment a
55:17 - field so if i actually check this box
55:20 - sql for me will just plus plus plus plus
55:23 - the id field every time i insert a new
55:25 - name in a new dorm i don't have to even
55:27 - bother specifying an id anymore now
55:29 - there's another column here not null
55:31 - where you can specify this column should
55:33 - never be null and this is important
55:34 - because if you're building a website
55:36 - that has important data that you must
55:38 - have from the users like your app won't
55:40 - work without the user's uh username or
55:42 - their password or their email address
55:44 - you can say not null and your database
55:47 - will ensure that you can't even insert a
55:49 - row into this database unless you give
55:51 - it a value for that field so it helps
55:54 - you protect you against yourself because
55:56 - you could certainly implement that
55:57 - logically in python or any language but
55:59 - the database is a
56:01 - final gauntlet as well default value
56:04 - doesn't really make sense here but for
56:06 - certain types of fields you can say
56:07 - database insert the current time or the
56:10 - current uh date for me now why might you
56:12 - want that why date and time
56:15 - by default
56:17 - why might that be useful
56:20 - when the account was created when they
56:22 - bought a foo when they shipped the bar
56:24 - any number of reasons you might just
56:25 - want to know what is the time right now
56:26 - we don't have to write code for that the
56:28 - database can answer those questions for
56:29 - you so just so much more functionality
56:31 - than we got of course with csvs alone so
56:34 - name should it be a primary key
56:36 - no otherwise we couldn't have two brians
56:38 - and generally your primary key will be
56:40 - one field though theoretically you could
56:41 - make joint columns if you wanted but
56:43 - generally it'll be a single one should
56:45 - we auto increment brian so it's like
56:47 - well
56:48 - brian 28
56:50 - or brian 2 brian 3 and so forth no
56:52 - doesn't really make sense not null
56:55 - probably i want all of the freshman's
56:57 - names so that we know who's signing up
56:59 - for sports and dorm yeah not null but oh
57:01 - corner case
57:03 - can anyone think of a corner case where
57:05 - dorm maybe should kind of sort of be
57:06 - null
57:08 - they commute they're off campus you know
57:09 - it's not many students but if you have
57:11 - one percent five percent of students
57:12 - living off campus this is a design
57:14 - question now and you all of us have
57:16 - probably visited some website where you
57:18 - just can't fill out the form in the
57:20 - right way because you don't fit their
57:21 - mold or their expectations and that's
57:23 - just because of a poor design decision
57:25 - so let's allow it to be null just in
57:26 - case now what else we said a phone
57:28 - number was one i proposed
57:31 - gosh there's no fun phone number type
57:34 - so what do you want to go with
57:39 - i'm sorry
57:41 - varchar okay so we can pick varchar and
57:43 - maybe use like 10 or so for 10 digits in
57:46 - the u.s at least though maybe like 12
57:48 - with the dashes or 13 with the
57:50 - parentheses or
57:52 - what's that oh i hear murmuring
57:56 - sorry
57:57 - a small ant and just treat it as a
57:59 - number maybe that could work too another
58:01 - alternative
58:02 - anything else
58:06 - a precision so a specific number
58:12 - good so not a bad instinct but it turns
58:14 - out with uh the numeric data type where
58:16 - you specify scale as it's called the
58:18 - total number of digits in precision
58:20 - that's almost that's generally meant for
58:22 - floating point value so real numbers
58:23 - with decimal points because even though
58:26 - you're specifying a max limit you don't
58:28 - require that many digits it's just a max
58:41 - yeah
58:42 - we can kind of find faults i think in
58:44 - both of these ideas though both of them
58:45 - are reasonable if you allow for char or
58:47 - varchar i could type in like foo or bar
58:50 - or baz and not a number so maybe we
58:52 - should go with in but can someone think
58:54 - of a counter example to why you
58:55 - shouldn't use integer
59:00 - variable length but if we actually do
59:02 - the math maybe 65 maybe there's enough
59:05 - bytes there we could use a big end and
59:06 - that gives us a really long phone number
59:08 - so there's probably a reasonable max
59:10 - yeah
59:16 - hyphens in parentheses we have to decide
59:18 - do we want to support those and honestly
59:20 - all of us are perhaps a little u.s
59:21 - centric right now uh but
59:23 - most of us here but you know when you
59:24 - make a local call in some zones like you
59:26 - type 0 first and some human might type 0
59:28 - as their number but what's going to
59:29 - happen if you type 0 into an integer
59:31 - field
59:33 - you're going to ignore it so now we're
59:34 - there's that corner case so damn it like
59:36 - there's no way to solve this problem it
59:38 - would seem so what's best
59:40 - we have to make a compromise and just
59:42 - accept that we have to solve this with
59:44 - code
59:46 - varchar all right so varchars or char
59:49 - all right so let's maybe let's simplify
59:51 - the problem no one from outside the u.s
59:52 - can take freshman intramural sports that
59:54 - simplifies the world because if we only
59:56 - support u.s phone numbers now we can say
59:58 - 10 digits and if we say you know what i
60:00 - don't care about the hyphens or the
60:01 - parentheses i can use code javascript or
60:03 - python to throw away the syntax and i
60:06 - can just store 10 digits maybe char 10
60:09 - is sufficient 3 for the area code then
60:11 - the rest of the number the all seven
60:13 - digits thereof but you could find fault
60:15 - with this too and we're really
60:16 - alienating the international population
60:18 - on campus and so but again these are
60:20 - just non-obvious design decisions and so
60:22 - here we are at the end of the semester
60:24 - we don't always have good answers and
60:25 - reasonable people will disagree but let
60:27 - me simplify our assumptions and just do
60:29 - us numbers 10 digits and trust that i
60:31 - will use code in python or some other
60:34 - language to throw away the syntax the
60:36 - punctuation and whatnot of parentheses
60:38 - and hyphens and i'll make sure the human
60:40 - hasn't typed in any letters of the
60:42 - alphabet i can do that in code and you
60:43 - know we can do that even in javascript
60:45 - when the human submits a form um let's
60:48 - uh we'll leave for the end sports what
60:50 - was it sports
60:54 - sports they might want to do so this is
60:56 - a good example of you shouldn't really
60:57 - have spaces in your field name so the
60:59 - convention would be sports they really
61:02 - or might or let's just call it sports um
61:05 - in this case
61:06 - we'll come back to that i think there
61:07 - were two other ideas we had phone number
61:11 - email email okay email is a good one
61:13 - what should that one be there's no email
61:15 - type unfortunately even though there is
61:17 - an html an input type for email
61:20 - what's that
61:21 - var yeah var i feel like we probably
61:23 - need a vartar here and but here a little
61:25 - non-obvious what is the longest email
61:26 - address in the world
61:28 - maybe it's nix
61:30 - nick so i i don't know but let's pick a
61:32 - reasonable upper bound that we can maybe
61:34 - be comfortable with as a group
61:36 - and let's see
61:37 - anything else here no okay and then
61:39 - what's the one more field
61:41 - oh great oh but age let's go with age so
61:43 - age finally something simple
61:46 - what do you want this to be
61:49 - small ants right you're not gonna you
61:51 - can we will not support people older
61:52 - than 65 535 years old
61:57 - someone want to find fault with this
61:58 - idea though
62:04 - i would argue there's no one right
62:05 - answer to any of these
62:09 - months well but oh it depends do we want
62:12 - months
62:20 - so you're assuming we want birth date i
62:22 - think i've called it age so maybe that's
62:24 - the problem like if it's age small it's
62:27 - fine like you can be zero years old or
62:28 - 65 000 years old we have a good range
62:32 - if it's age i think we're okay but i
62:34 - think you allude to a good point which
62:36 - is why would we maybe want to store
62:38 - birth date and not age
62:42 - and the damn thing's always changing
62:44 - otherwise right like i'm gonna have to
62:45 - update my database tomorrow and then the
62:47 - next day let alone every hour or every
62:50 - minute just because my users ages are
62:52 - changing like that seems silly let me
62:54 - instead fix a value so do something like
62:57 - birth date
62:59 - birth date maybe specify not an in but
63:01 - let's actually use the date field not
63:03 - time we could store time if we really
63:05 - care what time they were born on a
63:07 - certain day
63:08 - but here i can say date is going to be a
63:11 - little better because now i know in
63:12 - python javascript even c i can do a
63:15 - little bit of math and if i know they
63:16 - were born on such and such a day and
63:18 - month and year well i'll just subtract
63:20 - that from the current day month and year
63:22 - and figure out how many days or years
63:23 - old they are so better design decision
63:26 - there perhaps but we do have to
63:27 - standardize the format we can't just
63:29 - allow people from the us and europe and
63:31 - asia to all kind of choose their own
63:32 - formats sql standardizes this year year
63:35 - year year dash month month dash day day
63:38 - and that's the value of having these
63:39 - data types again all right so how about
63:42 - sports the last one
63:45 - varchar all right what's the longest
63:48 - number of words in the sport
63:51 - i did say might want to do so i could
63:53 - get up there but uh 255 probably makes
63:55 - the most sense maybe unless they're very
63:57 - athletic
63:59 - yeah i here too i don't know but just
64:01 - for the sake of opening up possibilities
64:03 - when you think the human might be a
64:05 - little expository and actually write a
64:06 - paragraph of all the sports they're
64:08 - involved in or whatnot or even bigger
64:10 - than a paragraph text is even bigger
64:12 - sports this probably isn't compelling
64:13 - and i'll change it back to varchar but
64:15 - if someone is typing in like their
64:16 - college essay into the um the the common
64:18 - application or if you're asking people
64:20 - to paste their resumes or the like you
64:22 - might want to use text because i have no
64:24 - idea how many words someone's going to
64:25 - have text allows you to store even more
64:27 - data but it stores it a little
64:28 - differently it tends to store it not in
64:30 - the column but using pointers if you
64:32 - recall from a few weeks back it uses the
64:34 - equivalent of that to store it like over
64:35 - there which takes a little more time to
64:37 - get to so again there's just a trade-off
64:39 - here so uh we could do varchar 255 makes
64:42 - me a little nervous so i'm going to go
64:44 - with another common value 1024 it's a
64:47 - power of two but there's no one right
64:49 - answer here but these are the
64:50 - non-obvious design decisions we have to
64:52 - make if i didn't make any mistakes here
64:54 - i'm going to go ahead and click create
64:56 - and
64:57 - table has been created you can even see
64:59 - now all of the data that's been created
65:01 - there and voila if i go back to frosh
65:04 - ims and i go back to the registrants
65:06 - table not only can i browse it there's
65:08 - nothing in there yet i can look at the
65:10 - structure and actually see all of those
65:12 - same values and edit some of them like
65:14 - renaming but you can't completely
65:15 - mutilate it you might have to start over
65:17 - if you make too many changes all right
65:19 - any questions then about this yeah
65:25 - uh why do i use 10 24 instead of 10 23
65:27 - typically when you choose a mac oh
65:30 - uh convention i i can't justify this 255
65:33 - was the max because i think one of the
65:34 - bytes was reserved for some value
65:36 - historically
65:37 - but that's not really the case that
65:39 - bound has been lifted and
65:41 - uh no good reason
65:45 - the nowadays yes back years ago 255 was
65:48 - an actual limit and so it got adopted
65:50 - now i don't know i just picked powers of
65:51 - two often my next go-to would be 2048
65:54 - 4096 and so forth just because yeah
65:57 - what's the difference between our charge
66:00 - varchar what's the difference between
66:01 - varchar and char char uses a fixed
66:04 - number of bytes no matter how many of
66:07 - them you are using the advantage of
66:09 - which is your columns conceptually are
66:11 - perfectly straight on both the left edge
66:13 - and the right edge which means you have
66:15 - random access because every cell is some
66:18 - fixed number of bytes from the rest
66:20 - varchar uses like a ragged array as it's
66:22 - called where one side the right hand
66:24 - side is shorter longer in different
66:26 - cells so there's only a maximum length
66:28 - on each of those cells but searching it
66:30 - can be slower as a result because you
66:31 - can't just jump to sell to sell you have
66:33 - to follow the lengths of those things
66:36 - that's the trade-off yeah
66:41 - oh if i wanted to add the edu an
66:42 - education field now and modify the table
66:45 - if you realize too late oh darn like i
66:47 - need to actually add something to this
66:48 - in the gui tool we can add one fields to
66:51 - the end of the table literally so let's
66:52 - do that let me go ahead and click go
66:54 - i'll be prompted with a similar form but
66:56 - smaller i can go ahead and type in
66:58 - something like education let me propose
67:00 - this is varchar maybe 255 that we could
67:03 - have that debate too i'm going to go
67:05 - ahead and say
67:06 - add field and now notice that the table
67:09 - has been altered successfully it
67:10 - actually it's for whatever reason it's
67:12 - not showing me the code for that
67:13 - particular command but there's literally
67:15 - an alter command in sql that would allow
67:18 - you to change it and if i go back to the
67:19 - structure now you'll see that i have
67:21 - another column called education shown
67:24 - ironically here is a row yeah
67:28 - good question does the order of the
67:30 - columns matter fundamentally no by
67:32 - convention you would typically put the
67:34 - id first and then i personally by design
67:36 - put like the most important fields next
67:38 - like name feels like the right choice
67:40 - maybe email feels like the right choice
67:41 - though i clearly thought of it a little
67:43 - too late this time it's not easy in sql
67:45 - light to reorder things but in other
67:46 - databases you can so there it's more of
67:49 - a human convention
67:50 - uh yeah
67:55 - good question is it a convention have
67:56 - one single primary key or can you have
67:58 - multiple by definition you can only have
68:00 - one but that primary key can span
68:03 - multiple columns so we haven't seen a
68:06 - use case for this yet but there are
68:08 - scenarios in which you would want to say
68:10 - i want to guarantee that these two
68:11 - columns together are unique but not each
68:14 - individual one unique but we won't
68:16 - encounter that just yet
68:18 - other questions
68:23 - and yeah was a not known field really
68:25 - good question what if you had added uh
68:28 - education after you already had real
68:30 - data in there but you specified not null
68:32 - which is problematic because what is the
68:34 - educational backgrounds of the previous
68:35 - people typically what the database would
68:37 - do is either reject it or it would just
68:39 - put the empty string quote unquote so
68:41 - it's not technically null but there's
68:42 - nothing actually there it's just a
68:44 - string of length zero really good
68:46 - question
68:47 - all right so what can we now do that's a
68:49 - little more powerful about this well let
68:50 - me go ahead and quickly insert some data
68:52 - here i'm going to keep most of it blank
68:54 - but you know what i'm not even going to
68:55 - bother with id brian you're back on the
68:57 - team
68:58 - let's go ahead and insert brian
69:01 - let's go ahead now into registrants
69:03 - again let's go ahead and
69:04 - add veronica again
69:06 - so i'm just inserting a few rows
69:08 - manually and again notice it's executing
69:10 - all of this for me without me having to
69:12 - bother typing it out but i absolutely
69:14 - could in fact just for good measure
69:15 - let's do one manually if i click the sql
69:17 - tab notice that i get a default
69:19 - suggestion here that is the syntax with
69:21 - which you can select everything or i can
69:22 - just type in uh insert into registrants
69:26 - but now if i only want to insert a name
69:27 - i don't have to do all the columns i can
69:30 - just say go ahead and insert here aaron
69:32 - for instance semicolon zoom out and
69:35 - click go
69:36 - that seemed to work if i go back to
69:38 - browse now aaron is in there as well but
69:40 - you'll see the difference the query
69:42 - that's being generated automatically by
69:43 - the gui was lazily just inserting quote
69:46 - unquote this so-called empty string of
69:48 - length zero
69:49 - i by omitting even mention of those
69:51 - columns was deliberately inserting null
69:53 - so frankly my database is getting a
69:55 - little messy here so you generally don't
69:56 - use php light admin or gui to insert
69:59 - data you might use it to conveniently
70:01 - create your tables and kind of get your
70:02 - application ready but then you're going
70:04 - to write code ultimately and that's the
70:05 - direction we're going i'm going to go
70:07 - ahead and insert one more person oh i
70:08 - forgot i'm not on the team at all
70:10 - because we started over so let me put
70:11 - myself back on the team
70:13 - david and let me go ahead and click
70:15 - insert go back to registrants and now
70:17 - you'll see there's four of us my id
70:18 - change because they've been inserted in
70:20 - different orders but notice all of the
70:22 - auto incrementing has been happening
70:24 - magically for me and that's useful
70:26 - because i don't have to even think about
70:27 - it and who cares what my id is i just
70:29 - need to have in many cases in a database
70:32 - a unique id so now let's actually write
70:34 - a little bit
70:36 - of code right thus far we haven't done
70:38 - anything useful we've shown you like
70:40 - this black and white window in which you
70:41 - can like select insert and update data
70:43 - but that doesn't really solve any
70:45 - problems we know about yet we have this
70:46 - graphical web-based interface via which
70:48 - you can create tables and add data but
70:50 - who cares we're trying to solve actual
70:52 - problems and the problems of late have
70:54 - been to build software that solve any
70:56 - number of human problems like surveying
70:58 - users and showing the results or finding
71:00 - similarities and documents so suppose
71:02 - the problem at hand now is to actually
71:04 - build something like the frosh im's
71:05 - website and let students register and
71:08 - then see who is registered well back in
71:09 - my day i fairly lazily for lack of
71:12 - technical know-how just emailed the
71:14 - registrations to the proctor or the ra
71:16 - who was managing the intramural sports
71:18 - program but i they later started putting
71:20 - it in csv files suppose now version
71:23 - three 20 years later i want to store it
71:25 - in an actual database how can i actually
71:27 - do that and then see the results well
71:29 - let me go into the ide again
71:32 - and open up for instance
71:34 - a new file
71:36 - that i'll go ahead and call lecture.pi
71:38 - and suppose i just want to write a
71:40 - simple python program via which to
71:42 - select data from a database so it turns
71:45 - out i can do a few things here first of
71:46 - all let me go ahead and do
71:49 - let's say
71:51 - from cs50 i previously have done things
71:53 - like import get string and get int and
71:56 - so forth it turns out that the cs50
71:57 - library for python also supports sql and
72:00 - it's going to give us a function called
72:02 - execute that will let you execute any
72:05 - sql command
72:06 - but in python code so instead of pulling
72:09 - up sql lite3 via my own hands or going
72:12 - to a graphical user interface php
72:13 - lighted man i can write code that talks
72:16 - directly to
72:17 - froshims.db and eliminate all of those
72:19 - tools altogether and just now write code
72:22 - so how do i do this i'm going to declare
72:24 - a variable called db for database so i
72:26 - could call it anything i want and i'm
72:27 - going to go ahead and call this sql
72:29 - function and i'm going to pass in a
72:30 - somewhat funky looking string as an
72:32 - argument but it's a standard convention
72:34 - to say what database technology do you
72:36 - want to use then you do colon slash
72:39 - slash so it's three slashes not the
72:41 - usual two in a url and i'm going to
72:43 - specify um
72:45 - frosh
72:46 - ims.db
72:48 - this now will give me a python variable
72:50 - called database that is kind of like a
72:52 - portal if you will into that database
72:54 - file that i can send selects and inserts
72:57 - and deletes and updates to how do i do
72:59 - this well if at the end of the day i
73:01 - want to execute the equivalent of select
73:03 - star from
73:05 - registrants
73:07 - how do i do that well i'm just in a text
73:09 - editor right this is cs50 ide i'm just
73:11 - typing text moreover i'm typing text in
73:14 - a python file and this is not python and
73:16 - indeed the ide has this little red x
73:18 - saying can't do this
73:20 - but i could pass sql code as an input to
73:24 - a python function and let that function
73:26 - talk to the database and indeed that's
73:28 - what we're going to get here from cs50s
73:30 - library i'm going to go ahead and do
73:31 - this you know what access the database
73:33 - and execute the following
73:37 - sql code quote unquote that
73:40 - close parenthesis now what is select
73:43 - return by
73:44 - convention what should it return well in
73:48 - in sql light 3 we just saw kind of a
73:50 - pretty text-based table right with like
73:52 - lines and slashes that looked like a
73:54 - table but it was just text php light
73:56 - admin we actually saw html tables when i
73:58 - browse the database and i proposed
74:00 - verbally a bit ago that you know what if
74:01 - i were to get back all of this data in
74:03 - code what data type would i like it to
74:05 - be handed to me as
74:09 - you know rows i want rows from a table
74:12 - show me all the students who've
74:13 - registered what data structure in python
74:15 - seems apt
74:16 - and just a list right a list that's
74:18 - ordered from first row to last row so
74:20 - we'll call that a list or an array back
74:22 - in the day of c so you know what i'm
74:24 - going to assume that's correct and if i
74:25 - read the documentation i would see that
74:26 - it's correct cs50s execute function if
74:28 - you use select returns to a list of rows
74:31 - it might have zero rows if there's no
74:33 - matches but it might have a thousand
74:34 - rows if there's lots of matches i'm
74:36 - going to store those results whatever
74:38 - they are in my rows array now suppose i
74:40 - want to print out who has registered in
74:43 - my database from whatever frosh i am's
74:45 - website exists i'm assuming students
74:47 - have registered on the web now i'm just
74:48 - the proctor or the ra who's actually now
74:51 - trying to manipulate the data and do
74:52 - something with it so what can i do well
74:54 - for row and rows what do i want to do
74:57 - let me go ahead and just print out
75:00 - that so and so registered so so and so
75:03 - registered well how do i plug in so and
75:05 - so well there's a few ways to do this
75:08 - and let's see first of all i could use
75:10 - my placeholder syntax for print and then
75:13 - i want to print out the row but what do
75:15 - i want from that row
75:17 - what columns are in any row in this
75:19 - database
75:22 - id and name and dorm and phone and
75:25 - sports well it turns out those are going
75:27 - to be handed to you as python
75:28 - dictionaries or dict structures so i can
75:30 - just say row quote unquote name here and
75:33 - i'll use single quotes just to make more
75:34 - clear what's going on here and then i
75:36 - need to make one fix how do i
75:40 - f for format string so it looks a little
75:42 - cryptic but this is just python stuff
75:44 - now the only thing that's new is sql but
75:45 - if we stipulate that sql when using this
75:48 - execute function it's just going to hand
75:49 - you a list of rows each of which is a
75:53 - dictionary so that you can get at this
75:54 - column or this column id your name or
75:56 - dorm this would seem to be now a nice
75:58 - convergence of this week now with the
76:00 - past couple of weeks so let me go ahead
76:02 - and save this let me go ahead and view
76:03 - my console so i have a terminal window
76:06 - and let me go ahead and run python of
76:08 - lecture.pie and in just a moment if i
76:11 - cross my fingers i should hopefully see
76:13 - who has registered
76:15 - amazing i've seen who's registered now
76:18 - there's one line of output that i didn't
76:19 - uh expect which is just this one this is
76:21 - the library just being pedagogically
76:22 - helpful it's showing me every command
76:24 - that i sent to the database but you'll
76:26 - see that so and so has registered so
76:28 - this is kind of interesting it's kind of
76:30 - a stupid program right because most
76:32 - proctors aren't going to be like hacking
76:33 - frosh ims by using a terminal window and
76:35 - running python scripts they're probably
76:37 - going to want to do this via a web page
76:38 - and actually see who is registered but
76:40 - if we have the ability in python code to
76:42 - do this like iteration what could i do
76:44 - instead of
76:45 - instead of just printing to the screen
76:47 - what could i print out per last week and
76:48 - per the past problem set
76:50 - i could print out html right like each
76:52 - of the students who registered kind of
76:54 - feels like an opportunity for like an
76:55 - unordered list or an ordered list or a
76:57 - table or whatever you can now generate
76:59 - html so let me do this let me actually
77:02 - go into an example made in advance what
77:05 - if i went ahead and opened up
77:07 - layout.html
77:08 - here is a simple layout for a web
77:10 - application using flask for those
77:11 - unfamiliar this is mostly html plus a
77:14 - technology called jinja which is a
77:16 - web-based technology for generating
77:18 - websites dynamically the body of this
77:20 - page is clearly what's of interest and
77:22 - you know what i bet i could do some
77:24 - logic right in there so let me go ahead
77:26 - and do this let me go ahead and create
77:29 - uh let's say a new file let's call this
77:32 - application
77:33 - dot pi i'm going to go ahead and just
77:35 - for time save do a little bit of copy
77:37 - paste to save myself some keystrokes so
77:39 - here's a very simple web app and this is
77:42 - going to be my to-do so if i go in here
77:44 - to templates let me open up index.html
77:47 - and let me go ahead
77:48 - into here so long story short here's
77:51 - where we're going with this what if i
77:53 - instead generate an unordered list using
77:56 - code from last week but i use my for
77:58 - loop here inside of my web app instead
78:00 - of actually just with a simple
78:02 - lecture.pie file well recall that i
78:04 - could do something like this i can have
78:06 - a jinja loop so i could say something
78:08 - like for row in rows and then down here
78:12 - i can whoops preemptively say something
78:14 - like
78:15 - n4 which is our weird syntax from last
78:18 - week and then in here i can just do a
78:19 - list item and then if i want to show who
78:22 - registered what do i type here
78:26 - in between these curly braces if each
78:28 - row represents a registrant
78:31 - row
78:32 - name
78:33 - registered i can just do something like
78:35 - this so same idea i'm just wrapping it
78:37 - with a little bit of html now let me go
78:39 - to my application.pi file because i'm
78:41 - going to have to fill in some blanks and
78:42 - let me see how can i do this well
78:44 - ultimately i want to return the result
78:46 - of rendering a template called
78:48 - index.html for families unfamiliar this
78:51 - is just a line of code that says go show
78:52 - that file to the user but i don't want
78:55 - to just show them the file as is but
78:57 - let's at least get this set up i'm
78:58 - worried that
79:00 - it might not work yet because i need to
79:02 - get the actual data so how can i get all
79:04 - the rows for my registrants well i can
79:06 - do rows gets
79:08 - db.execute and i can go ahead and select
79:11 - star from registrants and store that in
79:14 - there this file is called froshims.db
79:16 - that i created earlier and everything
79:18 - else is just flask stuff from last week
79:20 - nothing else is new the only thing
79:21 - that's new is this line here
79:24 - this line here and now this line here
79:27 - where i'm using sql
79:29 - inside of a python call by passing it as
79:31 - an argument to a function called execute
79:33 - how do i pass the rows to index.html
79:38 - yeah like rows equals rows is the
79:39 - convention we've adopted you could call
79:40 - it anything you want x equals y but this
79:42 - is a little more straightforward so this
79:44 - is saying hey database get me all of the
79:45 - rows for my registrants and then render
79:47 - the template index.html and pass in
79:49 - these rows and now if i hold my breath
79:52 - and run flask run
79:56 - no syntax errors if i go ahead and visit
79:58 - this here and open
80:00 - damn it
80:01 - the tab i see an internal server error
80:04 - so teachable moment families let's go
80:06 - back into the browser window here and
80:09 - see what happened okay template syntax
80:11 - error so pretty stupid mistake it looks
80:13 - like i expected a square bracket instead
80:16 - of a curly brace that's fixable let me
80:17 - go into index.html and oh i didn't
80:20 - finish my thought so that's some of the
80:22 - frustrations of programming for those
80:24 - who are seeing this for the first time
80:25 - let me save that
80:27 - let me go back to the browser here
80:30 - and we'll just reload oh my god
80:32 - voila now i have a web page via which
80:35 - you can see who has registered but you
80:37 - know what we can make this more powerful
80:39 - recall that we've been playing with http
80:41 - for some time and if this is the url i'm
80:42 - accessing recall that we played around
80:44 - with like re-implementing search
80:46 - functionality well what if i want to
80:47 - support search such that i can just
80:49 - visit q equals and then search for
80:52 - people named say brian and see how many
80:54 - brians are registered could we add
80:56 - support for something like this well
80:58 - maybe let me go back into the ide
81:00 - into application.pi and let me go ahead
81:02 - and say something like this
81:04 - q equals
81:06 - request.args get q to see if anything is
81:09 - actually there and then let me go ahead
81:11 - and do this
81:13 - select star from registrants
81:16 - where
81:17 - let me see q
81:19 - where what's name equals
81:21 - q but i need a placeholder so maybe i
81:24 - should do this and as soon as i do this
81:25 - i need a what
81:27 - f for a format string so i could just
81:29 - create on the fly a sql command that
81:32 - plugs in the value of q between those
81:34 - curly braces to express the logic of
81:37 - select all of the registrants whose
81:38 - names equal brian or veronica or
81:41 - whoever's name i typed in let me go back
81:43 - to the browser here
81:45 - let me go over and do something like
81:47 - this now uh question mark q equals brian
81:50 - cross my fingers as before
81:52 - damn it okay and
81:55 - what did i do wrong here
82:00 - what did i do wrong here
82:02 - this is subtle
82:04 - and we're seeing it for the first time
82:08 - it thinks there's a column called brian
82:11 - but why would it think that well what
82:12 - i've effectively done is sent in this
82:15 - brian is not a keyword in sql and
82:17 - because it's an actual string that i'm
82:19 - comparing against what i really need to
82:22 - be doing is this otherwise sqlite is
82:24 - going to think it's like the name of a
82:26 - column or something i pre-created so we
82:28 - have to fix this but that's okay i can
82:30 - put the quotes there but i should
82:32 - probably put
82:33 - the queue there in quotes let's save
82:36 - this go back to the browser
82:38 - reload
82:39 - and there we go now we have
82:41 - functionality for brian and so with this
82:43 - basic building block what have we done
82:45 - well in sql we have several commands at
82:47 - our disposal creating a table which
82:48 - frankly gets tedious by typing it out i
82:51 - myself tend to use and recommend php
82:53 - ligament just to create your table and
82:54 - get it going but then you can certainly
82:56 - manually with sql light 3 or php light
82:58 - admin insert or update or delete or
83:01 - select information once it's actually in
83:03 - the database and that's pretty powerful
83:05 - but once you do that you can now use
83:07 - that same new syntax that new language
83:09 - sql passing it in as an input with a
83:11 - string to our execute function and now
83:14 - start pulling any data you want from
83:16 - your database last week with csv files
83:18 - if you wanted to do this you'd have to
83:20 - open the csv file use a for loop to
83:22 - iterate over it look over every column
83:23 - in row for your data then pass it in and
83:26 - that's fine that's correct that's not
83:27 - bad but it's tedious and you're
83:29 - reinventing the wheel again and again
83:30 - and there's no filtration built in as
83:32 - there is to sql itself
83:34 - so you now have a more sophisticated
83:36 - tool in your toolkit so to speak with
83:38 - which to solve that same
83:40 - kind of problem
83:42 - any questions then
83:44 - on this technique
83:47 - all right well let's look at a bigger
83:49 - database and see how where we can go
83:52 - with this so if you go on the course's
83:53 - website you'll see a larger database
83:55 - that's actually available in multiple
83:56 - formats sql lite which we'll see in a
83:58 - moment but also google spreadsheets
84:00 - because frankly it's a lot more pleasant
84:01 - to like look at your rows and columns in
84:03 - a gui than it is necessarily with uh the
84:05 - file itself so this happens to be a free
84:08 - and open source sample database like
84:09 - some guy years ago took his actual
84:12 - itunes database all the music he'd ever
84:14 - bought he wrote a program to like
84:16 - analyze apple's file format in itunes
84:18 - and extract all of the data that seemed
84:20 - to be stored about him i think was the
84:22 - story and just made it publicly
84:23 - available as a sample database for
84:25 - students and teachers to just use to
84:27 - manipulate data but what's interesting
84:29 - is that this database demonstrates some
84:31 - other principles that we really haven't
84:33 - touched on for instance if i were to
84:37 - store again and again all of these
84:40 - students who are registering for frosh
84:42 - ims what do you start to see
84:45 - in certain fields well i was a little
84:46 - lazy and i didn't bother typing in
84:48 - everyone's dorm but suppose that
84:50 - hundreds of students have registered for
84:52 - frosh iambs a lot of them are going to
84:53 - be from matthews some from pennybacker
84:55 - some from canada some from weld and
84:57 - bunches of other buildings on campus it
84:59 - starts to get a little ridiculous when
85:01 - you see matthews matthews matthews
85:03 - matthews matthews like a hundred or more
85:05 - times if there's like 1 600 freshmen
85:07 - there's a lot of kids in matthews that's
85:09 - a lot of bites to store m-a-t-t uh h-e-w
85:13 - i don't know it's not doesn't matter how
85:15 - it's spelled that's a lot of bytes to
85:17 - actually store in your database again
85:19 - and again and again
85:20 - feels like there should be an
85:21 - opportunity to factor out the
85:23 - commonalities and what humans do with
85:24 - databases is once they recognize that a
85:26 - recurring pattern of data same darn
85:28 - strings again and again and again you
85:30 - know what rather than use m a now it
85:32 - matters m a t t h e w s which is eight
85:36 - bytes or p e n n y p a c k e r which is
85:41 - 11 then we have a lot of bytes being
85:44 - used again and again and again to store
85:45 - all of these storms you know what what's
85:47 - better than 11 bytes or 8 bytes let's
85:49 - just use an int or let's even use a
85:51 - small ant 2 bytes or four bytes to
85:54 - represent dorms so instead of storing
85:56 - matthews let's just store the number ten
85:58 - and instead of penny packer let's just
86:00 - store the number eleven thereby using
86:02 - some bytes but fewer
86:04 - and therefore saving bytes in the long
86:06 - run and so what this database
86:08 - demonstrates is exactly that principle
86:11 - certainly when it comes to music where
86:13 - artists have multiple albums and artists
86:15 - have multiple songs it's probably a
86:17 - little silly in a musical database to
86:19 - store the name of the album again and
86:21 - again and again and again for all 10 or
86:22 - 12 or 20 tracks or songs on that
86:25 - particular album so what this person did
86:26 - was this notice here we have a whole
86:29 - bunch of sheets or in database speak
86:31 - these would be tables and notice that
86:32 - these tables have columns and notice
86:34 - that these columns are album id in the
86:36 - album table
86:38 - album id and title but notice what he
86:40 - did very cleverly with this field artist
86:43 - id
86:44 - artists or singers have lots of songs to
86:46 - their name eventually and so he's
86:48 - assigned each of them a unique value or
86:50 - apple did and itunes underneath the hood
86:52 - so how do i know what this artist's name
86:55 - is how would you figure this out i mean
86:57 - it's not that interesting to us humans
86:58 - to know ooh artist id number two
87:02 - this is j what's that
87:04 - yeah we need another table with artists
87:06 - which is right over here so let me go
87:08 - ahead and look there so if i want to see
87:10 - let's see let there be rock artist
87:11 - number one let's go to the artist table
87:14 - and turns out ac dc the band is who
87:16 - created that now we've added a step here
87:19 - which maybe is costing us a little bit
87:21 - of time but it's going to save a space
87:22 - in the long run if i'm not storing long
87:24 - artists names although acdc isn't
87:26 - terribly long again and again and again
87:28 - now which is better well it's a
87:29 - trade-off are you more comfortable
87:31 - wasting space and storing everything
87:33 - together or do you prefer to save space
87:36 - and just spend a little more time
87:37 - joining the data back together but it's
87:39 - going to be really annoying if now if i
87:41 - want to make a website that shows me the
87:43 - names of the songs that i have in a
87:44 - database and the artists for them let
87:46 - alone the albums and more of that the
87:48 - titles of the tracks and so forth feels
87:50 - like that's three queries right like
87:52 - select the album select the artist
87:54 - select uh the the titles but no with sql
87:57 - you can collapse that all together
88:00 - because notice in this table here artist
88:02 - there's a column called artist id that's
88:05 - numbers and notice if you kind of
88:06 - picture this it's like the fingertips
88:08 - here let's propose metaphorically
88:10 - represent the artist id if i go into
88:13 - album now notice that we have album id
88:16 - and title but we also have artist id and
88:19 - so if you imagine these two tables
88:20 - sharing this common
88:23 - this common column what if we kind of
88:26 - stitch them together like this lining up
88:28 - one on the left the other on the right
88:30 - thereby reconstructing all of the
88:31 - information and duplicating it as needed
88:34 - so that i get back just the album and
88:36 - the title and the artist well how can i
88:38 - express that well let me go ahead into
88:40 - cs50 ide where i have a copy of this
88:43 - file let me close all of my tabs from
88:45 - earlier and go into this file
88:49 - called lecture.db and in lecture.db
88:53 - in php light admin will see all of those
88:56 - same tables and i literally just
88:58 - imported it into sql lite you'll see all
89:00 - the same tables we can browse album just
89:02 - as before and we just see a different
89:03 - format for the same data it's the same
89:04 - data from the google spreadsheet which
89:06 - is just more user-friendly and let me go
89:08 - ahead and do this i could of course
89:11 - select star from
89:13 - album
89:14 - where
89:15 - uh artist id equals one to get back all
89:19 - of acdc's albums and indeed here i have
89:22 - two they have for those about to rock uh
89:24 - we salute you and let there be rock they
89:26 - have two but notice the rows i got back
89:28 - contain only what information
89:31 - album id
89:32 - title
89:33 - and artist id i just know as a human
89:36 - that oh these are ac dc's albums but
89:38 - what if i want to know well okay i see
89:40 - that artist id is one so all right well
89:42 - let me open like another tab here and
89:44 - now let me select star from
89:46 - artist where
89:48 - artist id equals uh one and so if i want
89:52 - to learn something about that artist let
89:54 - me go ahead and zoom out click go and
89:56 - okay now i get ac dc well this is great
89:58 - now i have two
90:00 - results two sets of rows this is stupid
90:02 - like now i'm just creating work for
90:04 - myself by having two return values i
90:06 - could call db execute twice but there's
90:08 - a better way it turns out sql allows you
90:11 - to join tables just using sql itself so
90:14 - i'm going to go ahead and do this i'm
90:15 - going to go ahead and select star
90:17 - from
90:18 - album
90:19 - but also
90:20 - from artist
90:22 - uh where
90:23 - album dot artist id
90:26 - let me scroll to the right equals artist
90:29 - dot artist id
90:31 - so notice i'm saying select everything
90:33 - from two tables but only do so where the
90:37 - album tables artist id column has the
90:40 - same value as the artist tables
90:43 - artist id column that's kind of the
90:45 - stitching metaphorically of my fingers
90:46 - together looking for that common column
90:49 - if i go ahead and click go
90:51 - wow
90:52 - look at what i've just constructed it's
90:54 - a lot of information but i have album id
90:57 - and title
90:58 - i have artist id still but i have the
91:00 - name of that artist all together so if
91:02 - you now uh let your mind wander back to
91:05 - the php the python code oh i could now
91:07 - get a whole bunch of rows containing
91:09 - everything i care about all at once i
91:11 - don't need two select queries i can join
91:13 - these tables in this way and i use join
91:15 - very deliberately it turns out that
91:16 - there's another way to express the same
91:18 - thing instead of using that comma syntax
91:20 - i did you might see as well this select
91:23 - star from artist join
91:26 - album on artist
91:30 - uh dot uh artist id
91:33 - equals let me scroll over album dot
91:36 - artist id this is gonna have the exact
91:38 - same effect but you might just find that
91:40 - it reads a little more intuitively to
91:42 - you select everything from the result of
91:45 - joining these two tables how do you want
91:46 - to join them well join them on this
91:49 - equaling that just another way of
91:51 - expressing the same id and if i click go
91:53 - i get back the same information so
91:55 - ultimately with joins do we have the
91:57 - ability to reassemble data so on the one
91:59 - hand it's just good practice to
92:01 - normalize your database identify columns
92:03 - that have lots and lots and lots of
92:05 - redundancy and only store that
92:06 - information once for instance cs50
92:09 - finance if you're supporting many
92:10 - different users every time malin or
92:12 - brian or veronica buys a stock feels
92:14 - like it'd be a little silly to store
92:16 - malen or brian or veronica along with
92:19 - netflix the symbol and the number of
92:20 - shares one of us bought because male and
92:22 - male and male and mainland can appear
92:24 - all throughout the database and what if
92:25 - i change my username or my name or
92:27 - someone gets married and therefore it
92:28 - changes like why do you create that
92:30 - messiness for yourself instead
92:32 - give brian and veronica and me and
92:34 - everyone else a unique id and when they
92:36 - buy something just store their user id
92:40 - or customer id or however you want to
92:42 - think about it just like with album id
92:44 - and artist id and so normalizing a
92:46 - database is all about finding those
92:48 - commonalities and moving the data into
92:50 - its own table and if you care about
92:51 - rejoining it just use sql to reconstruct
92:54 - that view of the data so to speak so
92:56 - what else can we do here
92:58 - as well it turns out that there is in
93:01 - sql not just primary keys but there's
93:02 - unique constraints in some databases
93:04 - where you can specify this isn't my
93:06 - primary key but i want it to be unique
93:08 - you can specify that something should be
93:09 - indexed so it turns out that if you just
93:12 - know there's a field in your database
93:13 - that you want to be able to search on
93:15 - very efficiently you can index it in
93:17 - advance and you'll see or be able to do
93:19 - this if you like for final projects or
93:21 - even for the next problem set if you'd
93:22 - like but what this enables are queries
93:25 - like this if i want to go ahead and
93:27 - search for for instance um
93:30 - let's say
93:31 - what would be a good example rock i'm
93:34 - interested in rock so if i want to go
93:37 - into my sql tab here i could say
93:39 - something like this select star from
93:42 - album
93:43 - where
93:44 - name not equals but where name is like
93:48 - and then i'm going to say rock but if i
93:50 - want any number of characters to come
93:52 - before that word i can use a percent
93:53 - sign and if any number of characters
93:55 - after i can use a percent sign these are
93:57 - like wild cards in most languages you
93:58 - would use star in sql you use percent
94:01 - signs but it means the same thing and if
94:03 - i go ahead and say go
94:04 - now i get back oh i got wrong lecture
94:08 - album
94:09 - oh title i think is what i wanted let me
94:10 - try that again sorry where title
94:14 - like rock let me go ahead and click go
94:16 - and voila here are all of the albums in
94:19 - the database that have the word rock in
94:21 - them now as an aside this table has a
94:24 - lot of more albums in it and it frankly
94:27 - it's small enough though it has hundreds
94:28 - of rows maybe a few thousand rows none
94:30 - of us humans are really going to notice
94:32 - how slow linear search is but if you
94:34 - start having thousands of rows tens of
94:36 - thousands of rows millions of rows not
94:38 - having an index means that searching for
94:40 - something like rock is going to start at
94:42 - the top and search every darn field all
94:44 - the way to the bottom big o of n if you
94:46 - instead tell the database i know i'm
94:48 - going to be searching on this column a
94:49 - lot please index it for me here comes
94:52 - the secret sauce sql light oracle
94:54 - microsoft access and so forth they will
94:56 - using their own intellectual property
94:58 - build up some fancy data structures
95:00 - trees or hash tables or whatever in
95:02 - memory store the data for you in uh
95:05 - trans uh uh
95:07 - invisibly in that format so that when
95:09 - you do ask for a question like show me
95:10 - all the albums like rock they can answer
95:12 - you in a
95:14 - much faster time than linear and that
95:16 - too is what you get with sql that you
95:18 - don't get with csvs csvs are by nature
95:21 - only linear so we can do better but you
95:23 - the programmer have to help the database
95:25 - and actually give it those hints not
95:26 - just the types but also hints like this
95:28 - and as an aside there's also the notion
95:30 - of foreign keys where if you really want
95:31 - to lock things down you can specify that
95:33 - if you ever see an album id in another
95:35 - table it if it's a primary key in the
95:38 - album table by definition any other
95:40 - table it's going to be called a foreign
95:42 - key because it doesn't really belong
95:43 - there but it's referencing a column
95:46 - elsewhere so there's a lot more
95:47 - technology and vocabulary and you're
95:49 - welcome to dive in deeper and odds are
95:50 - many of you will for final projects by
95:52 - nature of wanting certain features among
95:54 - them even the ones we've seen like auto
95:55 - incrementing and not null as an si2 sql
95:58 - even has functions and for data
95:59 - scientists and statisticians it's super
96:01 - useful to be able to just do math and
96:03 - summaries of data right within sql
96:05 - without ever writing python code or r or
96:07 - anything else built into sql light and
96:09 - other and other databases or functions
96:11 - like this for average counting things
96:12 - getting the min max sum and so forth all
96:15 - of that you get for free with a lot of
96:17 - databases all it takes in the context of
96:19 - python is a line like this
96:21 - but but but but
96:23 - there are some problems
96:25 - and let's end by taking a look at two
96:27 - fundamental problems and threats that
96:29 - are too often underappreciated and in
96:31 - fact we have to fix a very serious
96:33 - vulnerability that i introduced into my
96:35 - very own code earlier but first the
96:37 - so-called race condition in survey uh
96:41 - you or rather let's see suppose that we
96:44 - think back at the very start of the
96:45 - semester most of you signed up for a
96:48 - github account for the very first time
96:50 - and you went to github.com signup for
96:51 - those unfamiliar github is a website
96:53 - where you can save and store a
96:54 - programming code that you've written and
96:56 - want to collaborate with others on and
96:57 - you chose a username and let me go ahead
96:59 - and try choosing a username like say j
97:02 - harvard for john harvard notice that the
97:04 - website immediately said the username is
97:06 - taken all right that's useful and you
97:08 - can probably guess how this is done
97:09 - maybe a little javascript using ajax
97:11 - talking to the server getting the
97:13 - response changing the html or the css or
97:15 - whatever might take some time to wire
97:17 - all that together but that's probably
97:19 - what's going on so let me try like a
97:21 - really long random username that is not
97:26 - taken
97:27 - hey it's available
97:29 - but
97:31 - probably it's not a good thing that i'm
97:32 - streaming this on the internet because
97:33 - if i wait long enough i bet someone
97:34 - could for playful reasons just sign up
97:36 - for this let alone anyone in this room
97:38 - but you've just told me it's available
97:40 - okay so good i'm really excited i've got
97:42 - my username let me go ahead and type in
97:44 - my email address mainlandharbor.edu my
97:47 - password one two three four five take a
97:48 - few moments there verify my account and
97:50 - so forth and i click submit
97:52 - suppose that i'm told momentarily sorry
97:55 - that username has been taken could that
97:57 - happen
97:59 - yeah i mean if any of you were trying to
98:00 - mess with me like right now you would
98:02 - have signed up for that username and
98:03 - beaten me to the punch so that when i
98:05 - hit join i get an error that's the
98:07 - definition of a race condition where two
98:10 - people or two users or two computers or
98:12 - two threads if we really roll back to
98:13 - our discussion of threads in scratch are
98:15 - trying to do the same thing at roughly
98:18 - the same time and if those two things
98:21 - threads or humans check the state of a
98:23 - variable which is a fancy way of saying
98:25 - is the username available they both get
98:27 - back answers but then some number of
98:29 - split seconds later then they make a
98:31 - decision based on that information there
98:33 - is a window of time either split seconds
98:35 - or even seconds or minutes where the
98:37 - state of that variable could of course
98:39 - change so if you too literally right now
98:40 - on your laptop type that very long
98:42 - username all of us would probably be
98:44 - told like green light it's available but
98:47 - only one of us is actually going to get
98:48 - it and that's because of a race
98:50 - condition literally all of us might be
98:52 - racing to sign up for that value and
98:54 - it's when state can change in between
98:56 - things happening this is a bad thing
98:58 - because it makes your data vulnerable to
99:01 - changes by someone you don't necessarily
99:03 - intend or if the database isn't smart
99:06 - you might be able to do especially bad
99:07 - things atms are a canonical example of
99:09 - this if you had a malicious adversary
99:12 - trying to log into like two bank
99:13 - accounts at once or two physical
99:14 - machines at once either with two cards
99:16 - or with two counts and two laptops you
99:18 - could imagine both of them trying to
99:19 - deduct like a hundred dollars from the
99:21 - same account
99:22 - instantly because imagine a poorly
99:25 - implemented bank website it checks the
99:27 - accounts
99:28 - account balance of the user logged in do
99:29 - you have a hundred dollars if the answer
99:31 - is yes
99:32 - maybe both websites are going to say yes
99:34 - you may deduct a hundred dollars you hit
99:36 - enter and voila you deduct 100 the user
99:39 - gets it somehow because it's transferred
99:40 - to some other account but the bank
99:42 - thinks it only did that once deducts a
99:44 - hundred but you've just walked away with
99:46 - 200 because you got i made a decision
99:48 - based on the same answer in two
99:50 - different threads or two different
99:52 - programs or two different computers so
99:54 - long story short this can happen even in
99:56 - the real world an example i was taught
99:58 - by my
99:58 - advisor years ago was this uh suppose um
100:02 - you and your roommates have a little
100:03 - dorm fridge and you're in the habit of
100:04 - course of of drinking a lot of of milk
100:07 - and so uh the the fridge has run out of
100:10 - milk and you come home the first
100:11 - roommate after classes and you're like
100:13 - oh i really need a drink of milk and so
100:15 - you check the fridge there's nothing
100:16 - there so you close the fridge and you
100:17 - walk into the square go to cvs and get
100:20 - in line and to buy some milk meanwhile
100:21 - your other your roommate comes home also
100:23 - they really need a drink of milk and so
100:25 - they check the state of the variable ah
100:28 - no milk close the fridge and then walk
100:30 - to like tommy's convenience or some
100:32 - other place nearby and get in line for
100:34 - some milk you of course then both get
100:35 - home eventually and what happens now
100:38 - damn it now you have twice as much milk
100:40 - and you know one milk goes bad quickly
100:42 - so now this is a problem a very bad
100:44 - problem you have twice as much milk as
100:45 - you could possibly drink but what's the
100:47 - origin of that problem fundamentally
100:50 - because you're out of something you're
100:51 - out of something but
100:53 - you need it but why did i end up with
100:56 - two
100:57 - there's no flag right there's no
100:59 - indication there's no sharing of state
101:01 - you both inspected the value of the
101:02 - variable made a decision independently
101:04 - on it but the state of that variable
101:05 - changed on one of you because when one
101:07 - of you came home the later person damn
101:09 - like the milk has already been refilled
101:12 - so how do you solve this in the real
101:13 - world how could you avoid this problem
101:15 - you could just one never do errands for
101:17 - your roommate
101:19 - it says
101:21 - get this mag yes a shopping list right
101:23 - gone for milk arrested development
101:24 - always leave a note right you could you
101:26 - could convey that information you could
101:28 - more uh dramatically lock the
101:30 - refrigerator right padlock the thing and
101:32 - so your roommate can't inspect the state
101:35 - of the refrigerator while you are gone
101:37 - therefore not making us vulnerable to
101:39 - this and i use the word lock
101:40 - deliberately because in databases that's
101:42 - how they solve this there is a feature
101:43 - in databases called locks or fancier
101:46 - versions of this are called transactions
101:48 - whereby you can guarantee something
101:49 - called atomicity
101:51 - where atomicity means you can do
101:53 - multiple things back to back to back
101:55 - without getting interrupted so in the
101:57 - case of a bank it is possible with sql
102:00 - using slightly fancier syntax that we
102:01 - won't dive into today to solve this
102:03 - problem by saying you know what begin
102:05 - the following transaction check the
102:07 - state of the bank account deduct this
102:09 - amount of money and now commit the
102:10 - results and while i'm doing that lock
102:13 - everyone else out don't let any other
102:15 - customer or any other user do exactly
102:18 - that information that touches the same
102:20 - data until i am done long story short
102:22 - you pay a price perhaps you're literally
102:24 - preventing your roommate from accessing
102:26 - the fridge and that's annoying or you're
102:28 - preventing other customers from doing
102:29 - transactions so hopefully the computer
102:31 - is fast at this and you're fasted
102:32 - shopping but you've at least ensured
102:35 - that you have atomicity no operation can
102:37 - get inserted into your sequence of
102:39 - operations as by your roommate or some
102:42 - other computer or threat so that's a
102:44 - problem with databases that we're only
102:46 - going to skirt over
102:47 - and github might solve this how well by
102:49 - just not caring potentially i don't know
102:51 - what's going to happen if multiple of us
102:52 - try i'm guessing they will just give n
102:54 - minus one of us an error message saying
102:56 - sorry that username is no longer
102:57 - available think about this if you've
102:59 - ever bought airline tickets this is a
103:00 - solved problem in that industry it would
103:02 - be really annoying if you just spent
103:03 - like an hour of stressful price hunting
103:06 - for a good airplane ticket you start
103:08 - checking out after adding it to your
103:09 - shopping cart and five minutes later
103:10 - after your name and email address and
103:12 - credit card number the ticket's gone so
103:14 - what do airlines do they often give you
103:16 - like a five minute window and some of
103:17 - the fancier websites show you the clock
103:19 - saying we guarantee this for the next
103:21 - five minutes hotels might do this too
103:23 - where they lock the refrigerator for you
103:25 - by somehow altering the database to say
103:27 - no one else can buy this ticket or this
103:29 - room for the next five minutes much like
103:31 - the note or the padlock so those kinds
103:33 - of things are all around us but let's
103:36 - look one final example that's the worst
103:38 - uh threat of all is this
103:41 - previously i allowed myself to search by
103:44 - name so q equals brian or q equals david
103:47 - or veronica or the like and what did i
103:49 - do with that information well if we go
103:50 - back into the ide and actually look at
103:52 - that file in application.pi
103:55 - i simply
103:56 - formatted it using an f string inside of
103:59 - this sql string but what if my users
104:02 - were a little bit malicious and suppose
104:04 - that someone doesn't want to just search
104:06 - for brian but you know what suppose they
104:08 - do something like my query is
104:11 - delete from registrants
104:14 - where
104:15 - sorry brian name equals brian
104:19 - something like this now this is not
104:21 - valid at the moment because this string
104:24 - while i'm certainly allowed to type it
104:26 - in is going to get plugged into
104:28 - my code but in the wrong place logically
104:31 - like i'm going to look for someone's
104:33 - name called delete from registrants
104:34 - where name equals which is just
104:35 - nonsensical it will return zero results
104:38 - but what if i do something like this
104:41 - where i say
104:42 - brian
104:43 - or
104:44 - delete from registrants where i kind of
104:46 - finish the thought that the programmer
104:48 - had and then start my own new thought or
104:51 - another way of doing this is to use
104:52 - special syntax semicolon something like
104:54 - this long story short i could contrive a
104:57 - human malicious input that finishes the
105:00 - programmer's thought and returned zero
105:01 - rows but by the way also sneaks one
105:04 - additional rogue query into the database
105:07 - this is what's known as a sql injection
105:09 - attack and if you naively and very very
105:12 - very and badly and incorrectly write
105:15 - code like i did don't ever do this
105:18 - you will be vulnerable to exactly this
105:20 - attack because
105:21 - you are blindly plugging in the user's
105:23 - input to a string that you are then
105:25 - passing to a database this is a
105:27 - fundamental flaw in lots of applications
105:29 - lots of languages where you have to
105:32 - distrust your users it doesn't matter if
105:34 - it's for just students on campus or it's
105:35 - just for you and your friends never ever
105:37 - ever trust users input because either
105:40 - someone's going to mistype something and
105:41 - something's going to go awry or you're
105:42 - going to have like a bad apple trying to
105:44 - hack into your website or your
105:45 - application by trying these kinds of
105:47 - commands and you have to always write
105:50 - code defensively so how to do this
105:52 - there's a bunch of ways but it turns out
105:54 - that what's dangerous about something
105:56 - like i just typed in is that it's the
105:58 - semicolon for instance and it's the
106:00 - quote marks over uh elsewhere so the
106:02 - safest thing to do is no matter what the
106:04 - user types in escape things you can use
106:07 - special syntax we saw this in c
106:08 - generally putting a backslash in front
106:10 - of something means don't have let it
106:12 - have its default behavior instead treat
106:14 - it specially so you could use special
106:16 - code in python that just says remove any
106:18 - bad characters or replace things frankly
106:20 - you've probably been to a website where
106:22 - you've been told sorry you can't use
106:24 - that character in your password or sorry
106:26 - you can't use that in your username
106:27 - that's just dumb like that is the lazy
106:29 - approach to this there is no reason to
106:31 - prevent users from typing any characters
106:33 - into their keyboard for their password
106:35 - maybe even their username that's kind of
106:37 - a lazy way of defending against this by
106:39 - saying i don't trust any percent signs
106:41 - any semicolons any dashes any
106:42 - apostrophes rather just escape things
106:45 - but it's silly for all of us in this
106:47 - room to write our own code for scaping
106:49 - user's input or scrubbing it as it's
106:51 - called or sanitizing it as it's called
106:53 - same things
106:54 - why don't we just use a library now
106:56 - there's many libraries out there the one
106:58 - that we're using at the moment is cs50s
106:59 - and the execute function does this for
107:02 - us instead of using f strings which you
107:04 - should not use like this you should
107:06 - instead do this
107:08 - if you want to plug in a placeholder
107:09 - value to a sql query you literally use a
107:12 - standard convention that we have adopted
107:13 - too where you just put in a variable's
107:15 - name but with a colon in front of it and
107:17 - it can be anything it can be q it can be
107:19 - x it doesn't matter but you want to just
107:21 - plug in some value there so i'm going to
107:23 - call it name by convention then you
107:25 - close your quote and finish your thought
107:27 - and then you go ahead and pass in the
107:29 - actual value
107:31 - name equals q
107:33 - and now you have constructed dynamically
107:36 - a sql string with a placeholder that is
107:39 - not python's own curly brace placeholder
107:42 - this is a special sql convention where
107:44 - you say plug-in value here what value
107:46 - will plug in this
107:48 - names value cue whatever the human is
107:51 - typed in and what our execute function
107:53 - will do for you is all of the fancy
107:55 - backslashing and all of the escaping and
107:57 - will protect you from the user's data
107:59 - and this is how truly simple it is it
108:01 - doesn't have to be cs50s library this is
108:03 - ever so common in all languages but too
108:05 - few people know about it and use it and
108:08 - so half the time you read about some
108:09 - database getting hacked or your data
108:11 - getting stolen it is because of a stupid
108:13 - oversight like that so just use
108:16 - libraries and escape users input we can
108:18 - see this now more concretely all the
108:20 - undergrads in the room have surely
108:22 - logged in to either yale's website or
108:24 - harvard's website which looks a little
108:25 - something like this here you're prompted
108:27 - for your login name and your password or
108:28 - your harvard key or the like well how
108:31 - does this take effect in real terms if i
108:33 - were to type in my email address but
108:35 - then weird syntax like this let's look
108:37 - at an example quote or quote unquote 1
108:40 - equals quote 1. notice it's not balanced
108:42 - like it's kind of missing a quote over
108:44 - here missing a quote over here because
108:45 - the presumption is that maybe harvard is
108:48 - vulnerable to this i don't think they
108:49 - are
108:50 - but suppose that the code running
108:52 - harvard key and harvard's login page
108:55 - looks a little something like this this
108:57 - is bad this is dangerous because they're
108:58 - just using f strings or format strings
109:00 - which are just going to blindly plug
109:02 - anything in there but if you instead
109:05 - uh use and so if you let the human type
109:08 - in something cryptic like that notice
109:09 - what has happened logically where
109:11 - username equals me at
109:12 - example.emailprovider.com
109:14 - and password equals quote unquote so
109:16 - nothing or one equals one
109:19 - and y one equals one well notice if i go
109:21 - back notice that there's a quote here
109:23 - and a quote here and the reason that i
109:25 - didn't finish my second quote here or my
109:27 - second quote here is because i'm
109:29 - assuming as a bad guy like i think
109:31 - harvard is just going to blindly plug my
109:33 - input into a single quotes of their own
109:36 - therefore i can finish their thought
109:37 - nonsensically but notice logically what
109:39 - happens select all users from the
109:41 - database where the username is me at
109:43 - exampleemailprovider.com and the
109:44 - password is nothing or
109:46 - one equals one well when does one equal
109:49 - one
109:50 - like always so this will always return
109:53 - users from the database and presumably
109:55 - therefore let me log in as one of those
109:58 - users so incredibly simple to defend
110:01 - against this just use placeholder syntax
110:04 - and distrust and sanitize user's input
110:06 - the syntax and sql in the cs50 library
110:08 - is quite simply with that colon but in
110:10 - other libraries it might be quite the
110:11 - same so now you are all uh families and
110:14 - students alike inaugurated into the
110:17 - small class of folks in the world who
110:18 - understand particularly geeky humor you
110:20 - might notice this meme that's gone
110:22 - around the internet for many years now
110:23 - where someone either
110:25 - maliciously or humorously decided to
110:28 - paint this over their
110:30 - license plate
110:32 - let's enhance
110:34 - why would someone do this
110:40 - scanners yeah like toll booths are kind
110:41 - of going away at least in the us and
110:43 - they instead have like cameras or
110:44 - readers that are scanning the front of
110:46 - your car and trying to optically
110:48 - do ocr optical character recognition on
110:50 - your license plate and the presumption
110:52 - here is maybe in some municipality
110:54 - there's some badly written code where
110:55 - they just blindly plug your license
110:57 - plate into their code and hopefully you
110:59 - finish the thought where
111:01 - zu066 whatever that is as part of the
111:03 - license plate but semicolon drop
111:06 - database table dot dot dot and we don't
111:09 - even look at that because drop is pretty
111:10 - extreme it literally deletes a database
111:13 - itself but this is a nice way
111:15 - of of getting off the hook from a toll
111:19 - price and most canonical perhaps xkcd is
111:22 - a very popular cartoon strip it's
111:24 - particularly geek oriented and you'll
111:25 - perhaps understand this joke now as well
111:29 - among cs circles
111:42 - i can hear the laughter making its way
111:44 - through so for here on out if you take
111:46 - nothing else away remember little bobby
111:48 - tables with pset or final will you
111:51 - actually implement cs50 finance and
111:52 - coalesce all these ideas thank you so
111:54 - much to all of our families for joining
111:55 - and we will see you next time

Cleaned transcript:

so without further ado where have we been these past several weeks we'll recall that over the past couple of weeks we've been introducing web programming and most recently did we try to tie together a lot of the topics from the past few weeks html and css and javascript and then python and then another framework another piece of software called flask that just made it easier and more possible to build webbased applications and the simplest example of that last week recall looked a little something like this and this past week with the problems on similarities and survey have you been building your own webbased applications but they haven't quite had all of the pieces that you might want to assemble into a webbased app and so today we'll fill in those final blanks but recall that we've been trying to frame these applications not as oneoffs or just tools that you built but it's part of a common paradigm or methodology and indeed when you're learning computer science and software engineering you start to notice patterns in the software and the code that you're writing and humans tend to adopt these patterns because they save you time and then everyone can kind of speak the same language so to speak so mvc was the acronym we introduced last week model view controller and that just speaks to this paradigm whereby you organize certain type of code in one file certain types of other code in another file so your python code goes in application.pi your html goes in your html files your css and your css files and so forth but what we didn't have last week was this thing here really model generally refers to your data and while survey your most recent problem did have data a csv file that's arguably a model csv is not terribly expressive you can pretty much just write rows text file rows to a text file not unlike a spreadsheet but you can't really query it you can't easily insert or delete you pretty much would have to reconstruct the whole file and indeed that's exactly what i did back in the day the very first webbased application i wrote back in sophomore or junior year was the freshman intramural website and all i had available to me both technologically and conceptually were csv files i had no idea what databases were didn't realize how much easier they could make my life so i stored all of the data behind these links here just in very simple text files but today will give you so much more power and especially if you're coming into the class with an interest in applying cs to other fields in medicine or the arts or any world in which there's data particularly in stem and data science and the like realize that sql has really become this uh this uh incredibly powerful language with which to solve problem in those and so many domains and ultimately what you're build this coming week your very last cs50 problem set you have now peaked just about um will be cs50 finance a webbased application by which you can buy or or buy and sell stocks and so what you're going to do this coming week is write code that implements a web application that resembles this whereby your users and yourself will be able to register for an account log into that account you'll be given for free thanks to us 10 000 virtual dollars and then you can go ahead and buy and sell stocks via their symbol using this application so for instance if i go ahead and register myself here let's say username mailin password12345 shouldn't have said that go ahead and register here you'll see that by default i get this free ten thousand dollars in virtual cash you know what i'm gonna go ahead and buy myself a share of maybe netflix whose symbol is nflx i'm gonna go ahead and try to buy one share voila and now you'll see that not only do i have less cash left about nine thousand six hundred dollars i now own a share of stock and if we reload this throughout the lecture frankly the price might go a little up or a little down because this web application you'll build will also talk to an api an application programming interface so some thirdparty website that provides you with stock data so you ask it for the current price of a stock it gives you an answer in json format if you recall our short discussion of that and you'll integrate it ultimately into this interface so this will be the culmination of so many of the ideas and the building blocks which you've experimented but we need a few final pieces today so first and foremost when i registered for this site i created an account and indeed i can go ahead and log out now and if i go ahead and log back in if no one's stolen my password yet i can see my account and only my account but we haven't yet seen any mechanism in code whereby you can implement this notion of logging in right what is the underlying logic by which a website knows that you are logged in or you're not logged in right clearly when i went to this website just a moment ago it prompted me to log in because i was not because i had logged out but how did it know that and now that i am logged in how does it know that i can click on quote to get just a stock quote or buy just to buy a stock or sell why does it not prompt me every time i click a link to log back in with my username or password what do you think little files that saves the data inside your browser's cache to let you know that they know what's going on yeah cookies little files that get saved by websites on your computer now odds are most everyone here has probably heard in some form cookies bad maybe bad privacy invading yes okay so true but most of the web would not work without them so someone else what do you understand a cookie to be what is a cookie basically yeah it saves your information somehow you don't have to so you don't have to put it in every time so in simplest form it's exactly a combination of those answers whereby when i log into a website you could imagine that website just remembering my username and my password by just saving them in a little file on my mac or pc so that the next time i visit a web page it just automatically sends them for me so that the human doesn't have to type them again and again now let's find fault with that feels like that would work but what's the downside of that naive implementation what do you think instinctively the data's just out there right you know i have people in uh you know in the office or at home or in a uh in a library that i might not want to just be able to walk up to that computer and just see this little text file planted on my computer because then they could log into my account by just digging around so it feels a little invasive indeed that's one of the threats of cookies so it turns out cookies or websites tend not to do that at least if they're implemented well they instead just plant a really big random number on your hard drive or in your computer's ram or memory so one two three four five six seven like some really big number maybe with letters and numbers maybe even some punctuation that uniquely identifies me and thereafter anytime i click a link on that same website after logging in my browser thanks to http the language that browsers and server speak that we discussed a few weeks back just magically sends that same big random number to the server again and again and so long as the server remembers that that big random number corresponds to username malen it can figure out whose account to show and why is it a big random number why is it not just my password or my username why am i proposing that it'd be a big random number exactly in computer science randomness is this incredibly powerful ingredient if you pick a big enough word or a big enough string or sentence the probability that some random adversary or bad person on the internet is going to be able to guess or try to guess that value is just so low it's just not realistically ever going to happen in your lifetime statistically and so randomness gives us that capability and so you can think about this metaphorically in the real world as being like a hand stamp if you've ever gone to uh like an amusement park or a bar or club where you have to show your id or you have to pay for a ticket on the way in sometimes they'll stamp you with either visible or invisible ink and that's largely for efficiency so that thereafter when you're in the amusement park you can kind of come and go and you don't have to repay or reprocess if you're in the bar the club you don't have to keep showing your id they can check once and then more efficiently let you come and go as you please because you're just presenting your hand or this virtual hand stamp to the the bouncer or to the gatekeeper at those places so cookies are exactly like that unbeknownst to us all this time anytime you visit a website into which you've logged in your browser is secretly but usefully presenting a hand stamp to that server to remind it who you are or rather not really who you are but of that big random number so that if the server remembers who that number belongs to it can figure out whose account to then show so put more concretely if i actually pull up some of the http examples that we looked at in the past let's consider this in context so almost everyone here has probably used gmail at some point and you log in generally via page like this so it might be infrequent because you're not often prompted to log into gmail because of surprise surprise cookies from google being on your computer but let's see where those come from so when you request google or gmail.com you might send in a virtual envelope so to speak from your mac or pc to the server a message like this families who have not seen this before this is what your browser is actually sending to a server in order to request a home page of gmail.com now i'm going to simplify this a little bit because there's a bunch of redirects http 302s and 301s involved that aren't that interesting today so let's just assume that gmail responds immediately typically gmail would respond with this saying 200 okay here's the login page and here's a web page in text slash html format but once you've logged in what gmail actually does is it also sends this recall that we called these things h http headers key value pair separated by colons that are sort of semisecretly sent from browser to server and from server to browser now we more sophisticated developer types can see this stuff right you can open up chrome's network tab and start poking around and it's it's not secret per se it's just most people don't know it's there and what google and other companies are doing is they literally send a header called set dash cookie the value of which is that big random value that the server has decided for you your browser assuming that it speaks http properly should then save that value in ram your computer's memory or on your hard drive and then every other click you make on gmail.com should send not just headers like this but it should send kind of the opposite header just cookie not set cookie but cookie which is the presentation of that handstand and so every time you click a page on gmail or facebook or almost any website into which you've logged in those cookies have been planted on your computer now recently in both the europe and in the us have laws been passed that are increasingly putting pressure on companies that operate internationally to present you with cookiebased information right you get these little popups increasingly and you've been getting them for years in europe saying are you can we plant cookies on your computer so given all of this what might happen if you say no no cookies on my computer you're going to have to keep logging in right if you take away this fundamental http feature much of the web breaks or the user experience deteriorates significantly now the flip side is cookies can be used not only for good so to speak but also for evil it turns out that there's a lot of ads on the internet of course and that's what drives a lot of the revenue that makes it all possible those ads typically come from image tags in your html or script tags or some of the html tags we have seen in the class but they go to third party servers somewhere else dot com and the problem arises with cookies when those third parties are allowed to plant cookies on your computer because if you go to google and you go to facebook and you go to twitter bunches of websites suppose they all have some middleman advertising service advertising on each of these websites that middleman so to speak because they have their ads and therefore their http headers on this site and this site in this site there are big third parties out there lots of them advertising networks that know everywhere little old you is going because they see your cookie appearing from multiple different other sites and so here's where cookies become not a computer science engineering feat but really a threat to one's privacy because they can be used so easily for tracking and frankly at t and verizon as an aside got into trouble then even not enough people know this some years back when they started injecting forcibly additional http headers similar in spirit to this to all of people's cell phone traffic so not things you could even opt out of initially because this was a way too for advertisers and for themselves to be able to track users so these http headers on which cookies are based are very powerful but also very invasive and we're only now starting to see societally and politically pushback on this very simple mechanism that hopefully we as cs types just understand the mechanics of and therefore now the implications so let's see this in context for instance let me go ahead and open up a relatively small example in cs50 ide for those unfamiliar cs50 ide is a webbased application by which you can write programs in the cloud just using any browser on a mac or pc i'm going to go ahead and into my account here and i'm going to go into store and i'm going to go into the templates directory and show that this example here has a few files this will look familiar to students in the room application.pi is the webbased application and then we have some template files so to speak in my terminal window here i'm going to go ahead and adjust my keyboard go into this directory called store in source 8 which is available online and i'm going to go ahead and do flask run which for those unfamiliar is the command via which you can start a web server and start running a webbased application so now that i have that i'm going to go ahead and visit exactly this url here and we'll see a relatively simple and super ugly web store let me go ahead and zoom in a bit and this web store allows me to buy three things foos bars and basses whatever those are and this is a very simple ecommerce like site where i just have to type the quantity of foos bars and basses that i want and then i can go ahead and buy them so i'm going to go ahead and say give me one how about zero bars and two bazes and i'm going to go ahead and click purchase and now you'll see my shopping cart but if i continue shopping you'll see that it resets just like if you keep browsing amazon or whatever other website but if you want to check your shopping cart again notice it's remembered what i'm looking for and in fact you know what i'm going to go ahead and close the window oops i actually lost the website but you know what if i go back to that url and reopen i see the storefront but if i view my shopping cart it has remembered my state so notice the power now of cookies is not just to remember with a hand stamp who you are but now you can remember anything about that user that you want right a shopping cart on amazon or any website is like the best example of this because it would be horrible horrible horrible for user experience or ux if every time you click the darn link you lost the contents of your shopping cart because the website forgot who you are so this is a compelling feature to remember and it's cookies that implement this feature too because more generally what's going on with cookies is this when you set a cookie using the set cookie header that looked like this there is a key value pair to the right that we might call session and that has the value value is the hand stamp session is just a term of art that refers to this abstraction that you can think of really as a shopping cart but it doesn't have to have anything to do with actual shopping or ecommerce it's just a container in which you can store stuff so this is telling the website that my session value my hand stamp is one two three four five and big really random number the website can then say you know what i'm gonna store a container for you let's call it a python dictionary or dict for you inside of which i can put anything i want and so in fact when you go to a shopping cart like this what is the server actually doing well upon seeing your hand stamp and realizing oh you are user one two three four five six seven oh that's user name malen let me go ahead and grab the dictionary the python dict from memory or even from a csv file if you want and show you the contents of your shopping cart meanwhile if someone else brian visits the same exact website and logs in with his account he's going to present a different handstand presumably and so the website can look for a different dictionary and show brian the different contents of his shopping cart and the same for everyone in this room so this simple mechanism i mean consider the power this is just a stupid text value key colon value and from all of that does all of the web's capabilities now come and we won't look in too much detail into the code here but let me show one snippet of it if i go into application.pi the magic that makes this possible in flask is just to import this additional feature you'll recall from the past couple of problems you've worked on you import from flask a few things render template redirect request well if you add session to that list which is the code abstraction of this hand stamp idea what you can now do is this let me scroll down to the juicy part here and notice that you can do lines of code now and for the next cs50 finance problem lines of code like this session is just a python dictionary or dict you can index into it using any word foo or bar or baz just like you could with dictionaries more generally and you can store and knit anything you want in my case i want to store a number zero foos or one foo or two foods or whatever so i can simply convert to an int the user's requests forms item whatever that is and let me wave my hand at some of the code above because it just kind of sets the whole thing up but the new line of code the new feature that now will empower us to build something like a stock trading website is quite simply this line here because what you can also do to remember that a user is logged in just go ahead and store in this socalled session a value of like true and if the value true is there you can infer that the human is logged in and if there's no such value in the dictionary they are not logged in and so we'll hold your hand a bit more in the next problem set with this introduction of cs50 finance and we'll write some of the code that handles the login so you can see by example how to do this but it'll be up to you thereafter to start remembering what stocks a user actually has using sessions to retain the fact that they've logged in already alright so that was a lot all at once but any questions on cookies and the future they provide these things called sessions anything at all yeah is the session saved on the user side or the server really good question and the answer can be it depends you could store it on the user's client on their browser and as a gentleman up here proposed earlier you could or over here propose you could theoretically store like literally their username and password maybe i proposed that earlier on their computer and that's bad for the reasons that we surmised earlier but you could also store the contents of their shopping cart foos bars and basses that's not quite as invasive as storing their password but if you're buying things you don't really want people knowing that is then invasive so maybe we can do better and better is often stored on the server so a welldesigned website will typically store only this big random value the hand stamp on the mac or pc and then all of the interesting and maybe sensitive stuff is stored in a database or a csv file or just the server's ram or memory like in a global variable good question other questions other questions all right so that's one problem solved we know now we can implement login forms and we know that we can remember that people are logged in so let's just stipulate that is now possible but over the past couple of weeks it's not been incredibly powerful to only have access to things like csv files comma separated values which create the illusion of like excel and google spreadsheets and apple numbers like columns and rows why well it's pretty much linear search for everything right a csv file is just rows and rows and rows and rows of data and if you want to search for anything in that file like you might have wanted to for your survey implementation how do you find it well you open the file with open you maybe use a for loop and iterate over every single line looking for some value and then you close the file that is big o of n in the worst case the thing you care about is at the very end and that's not terribly efficient now you can append to files pretty efficiently recall that when we open files with quote unquote a for append mode we did this with a brief example instead of w for write you can help get the operating systems help and add rows to the file at the very bottom which is more efficient but you can't insert things in the middle very efficiently you can't delete things very easily you would have to literally for those kinds of scenarios open the file read the whole darn thing then write out parts of it or add to it as you're writing out and so humans years ago realized well this is stupid all of us humans in the world are constantly writing code to open files change files save files why don't a few of us do an even better job of implementing that feature and then share it with the world and thus were born effectively databases and these days there's so many different types of databases you might be familiar with tools commercial software like oracle or sql server or microsoft access and an open source world there's postgres and mysql and sql lite and others and many of them as even those names imply use a special language called sql structured query language which is the very last language we'll introduce you to in cs50 unless you go off on your own with final projects to pick up something more but with sql do you have the ability to select data from a database to insert it to delete it to update it all of the things that you could absolutely do with python and csvs it would just be so darn tedious to write those lines of code yourself so what's the right mental model here is i claim essentially a database like most everyone in this room has probably used google spreadsheets and if you've not probably excel or maybe apple numbers uh so these are spreadsheets and they're essentially what you could call a relational database relational implying that there's relationships among the various data in the rows and the columns decided by you or whoever made it and this is a spreadsheet of course and it has uh rows where your entity your actual data goes and columns and what's noteworthy about the columns it's just conventional to do what with the columns especially in that first row yeah put some header values right you could certainly put them in the left it's just humans prefer it seems to read top to bottom instead of left to all the way to the right so we just adopted a convention years ago that your columns represent different types of data and the rows represent different uh values for those fields or for those columns so to speak so if you wanted to store like a spreadsheet of values for a bunch of students in a class or in a university one column might be id number like their harvard id or their yale id another column might be their name their email address phone number age and so forth and you could just lay that all out you can make it pretty and boldface the top and organize things and sort it but at some point this isn't quite the right tool and in fact i ran into this in grad school years ago where i was analyzing large sets of data and it was just convenient to double click on a csv file open it in excel and just manipulate it and do answer the data questions that i had but back in the day excel actually had a limit of 65 536 rows sounds like a lot and that's 2 to the 16th power if you caught the reference there but so humans at microsoft decided years ago that's enough um and frankly it kind of was because even in the thousands of rows like my mac just became unusable because there was just too much memory being used so it was a just impractical limit anyway but at some point you might want to store 65 537 rows of data or hundreds of thousands of rows or millions of rows or even more i mean there's so many websites google and facebook and others that surely do this already you can't just use a program on your mac or pc anymore you need to use fancier software but that fancier software often still works the same way you have one main file called a spreadsheet in our human world but in the server world you might call it a database instead and whereas in our human world we might have things called sheets or individual spreadsheets within the bigger file in a database you're going to have things called tables but they're the exact same thing with rows and columns and so when we want to actually store data we can actually store it in exactly those ways so let me go ahead and do this let me go ahead and open up google spreadsheets just as representative of a database and let me go ahead and create a new file here so new spreadsheet and just so that we can represent things like students i'm going to call this spreadsheet students and over here i'm going to put their id number and their name and what are some other fields i rattled off for that come to mind email say again dorm good sport okay so sports they want to do sure that's fine a little longer what else graduation graduation year age okay good so graduation year age concentration okay and we could probably keep going and it just gets wider and wider and these are my my columns if you will or the fields in the database and you know frankly i could name this if i really want to be tidy here and i could call this students and you know what maybe i should call this not students but university because i might want to have another tab here that i will preemptively name to say faculty and faculty probably have id numbers and they have names and they probably have departments for instance and they also probably have emails and so forth so phone number is another one but i might want to kind of cluster these different types of data in different spreadsheets because they're kind of apples and oranges there might be some overlap but they're distinct and so i have different sheets in the database world you do the exact same thing except you call the whole thing a database and you call these things tables to be clear but more importantly with a real database so to speak you have to be a little more proactive about telling the database what types of data you want to store now those of you who've used google spreadsheets and apple numbers in excel know that you can go to like the format menu or the data menu or whatever and you can show things to different decimal places you can turn things to percents and you can format the data but that doesn't tend to have any functional impact on your data it's just an aesthetic detail like how long or short do you want to show the numbers to be in your columns and cells but with databases you can actually provide juicy hints to the database that will help that database store and find data for you more efficiently for instance there's this laundry list of data types to which we have access in sql so sql is the language with which we're going to be able to query a database frankly in uh something like google spreadsheets and microsoft excel how do you find data we usually hit like command f or control f and you search for it that's not very programmatic you can do it with macros and such and we'll do this with code but with sql you're going to have to make a few decisions first sql supports a few different data types at least in one of its forms so it turns out there's a lot of competition out there sql is a general language but different companies and different nonprofit groups have come up with their own dialects so much like we humans might speak uh bunches of us might speak spanish well there's different variations of spanish not to mention many many many other languages and so similarly in the programming world is there sort of a common subset of words in a language but then different companies and different people might have added and subtracted their own features just because they think that's better for their use cases so in sql lite which is the database technology we will use in cs50 ide and android uses this and it's very popular in other contexts too ios as well they only have a few data types blob of all things integer numeric real and text now what does that mean well it turns out it means different things with different databases and another popular database is called postgres or postgres sql this is a very popular one for high performing websites so if you're trying to build a business you're trying to make an application used by everyone on campus generally you would use a fancier technology than sql lite which is by definition lightweight and you'd use something like postgres and so we'll introduce you to both of these dialects along the way because each of them allows us to do different things with a different degree of precision so in sql let's claim even though it's a simplification there are at least these data types when deciding what type of data to store in your database table you have to decide not just what it's called like id and name and email and dorm you have to decide what data type it is so we've kind of come full circle because the last time we did this was in what language c so in sql 2 you do this but it's not to be nitpicky it's to actually improve performance so this is to help you get at that data more efficiently because the more the server the database knows about your data the faster it can find it essentially so in the world of databases you generally have to decide not just to store an integer but either a small int an integer or a big ant and generally speaking at least in most databases this might be two bytes this might be four bytes this might be eight bytes so let's maybe impress the families here if you have a 32bit integer or four bytes what's the biggest integer you can store in your database four billion someone please impress four billion is exactly correct and it might be 4 billion positive values or maybe it's only 2 billion if you also want to have 2 billion or so negative numbers as well big int uses 64 bits which is just massively massively bigger and tiny int or small inch rather there's also tiny int and some dialects small ant is just two bytes and it actually counts up as high as 65 535 as i alluded to earlier so you just need to decide now why would you choose one over the other when you could just use big int and store small numbers and big numbers alike well why might you just intuitively not want to make all of your integer values in a database big ends it's just simple give me as much headroom as i want yeah you're just using memory unnecessarily right why use more memory than you need to now arguably got memory's so cheap these days computers are getting bigger and faster so in some contexts it's not a big deal but if you have lots of data and every one of your rows in a database is two bytes bigger than it needs to be and you have a million rows i mean that's already huge numbers of bytes that you're just wasting and throwing away so it behooves you to actually give some thought to these data types of course you don't want to go too small because if you use a small inch or maybe even an integer but business is so darn good that you have over 4 billion users or 4 billion rows or 4 billion foos and bars and basses that have been sold which absolutely happens to the googles and facebooks of the world you better start using 64 bits to represent unique values instead of just 32 because eventually you'll run out well what else besides integer values in sql you might want to use floating point values those are real numbers that have decimal points in them this is quite like c they're called a little something different and annoyingly it uses two words in this case but a real number is a 32bit value that is a floating point value like a float in c and double precision is like a double in c which is 64 bits and that just lets you get even finer grain control over the decimal point as we've seen because of course you can't represent numbers precisely because of imprecision as we've seen in both python and c numeric is kind of a catchall for a bunch of number related things that aren't quite integers or reals necessarily boolean a true or false value dates if you want to literally store like year year year year dash month month dash day day in a standard computer format even though human cultures vary how they write that date time if you want to have a date and a time right after it uh numeric is actually a solution to a problem turns out that finally after all this time we have a builtin mechanism for storing numbers precisely and this is perfectly timed because in cs50 finance when you're dealing with money it'd kind of be nice if you don't accidentally round off how much money someone has either slightly lower slightly higher those of you may be families especially because from a few movies back in the day if you ever saw superman 3 this is how some money was made by shaving fractions of pennies off of computer systems and more modernly office spa office space did this as well big scam trying to round off these pennies well you if you use the right technology in language with sql you can actually specify a numeric data type which is like a floating point value but you specify essentially the total number of digits you want to handle and how many of them should be after the decimal point so it's common in stock markets to actually use four decimal points of precision so not just cents the uh to the tenths and the hundreds place but to the thousands and ten thousands place you can now specify that with a value of four for precision and you don't have to worry about those round off area errors we've talked about before time and time stamps just how much time has passed since a gate and date and time are also available to you in sql and then lastly here text values turns out you have a choice of values for when it comes to deciding how many characters to use to store your data you can use char which just like in c with an array you have to decide in advance for a string how many bytes to use and if you say char 8 you are getting 8 bytes and if the name is malen malan you are wasting three or if we null terminate it two of those bytes but sql introduces a solution that python kind of gave us too varchar as the name kind of implies variable number of chars allows you to specify just an upper bound so if you know that one of your columns is going to be called name and a person's name might be malan like five letters or maybe certainly more for people with longer last names or first names you can say varchar 100 and that's the upper bound on how long it is but the database will be smart if you only need five characters or five bytes it won't waste 95 others for you it will optimize that for you and then lastly text if you want to store tens of thousands like paragraphs or pages of text that's even bigger than varchar where you don't necessarily want a welldefined upper bound you just want a good chunk of memory but there's implications here and just quickly char and varchar seem like not even complementary just char seems unnecessary why paint yourself into a corner and say give me only eight bytes when you could just say ah give me up to 100 bytes and you the database server figure out how many to actually use like why do these two data types exist yeah time yeah so time is spot on it might actually take longer to use one data type or the other how could that possibly be well if you've got a value like char where you specify a precise number of characters like eight if you think about the columns in google spreadsheets in excel every one of those columns uh that sells is exactly the same with right it's eight bytes eight bytes eight bytes eight bytes and as soon as you have perfectly constant offsets this is by 0 this is 8 this is 16. this is 24 this is 32 and so forth you reintroduce the capability that in c we had with arrays you have random access doing simple simple arithmetic multiplication addition and subtraction you can just jump to any element in a column if it's using the same number of bytes for every cell but with varchar if you need to have small uh very narrow cells and wide cells you're going to have what's called a ragged array where one side of it the lefthand side so to speak is going to be very straight and rigid but the other side might kind of vary based on how long the word is in that column and to your point about time it's going to take the computer more time to search a varchar field because it can't just jump to the third element it has to search all of them potentially but thankfully at the end of the day databases don't do that they don't just evolve into linear search csvs dissolve for our purposes into linear search the magic and the sort of intellectual property and the secret sauce so to speak that goes into databases oracle sql server microsoft access postgres mysql and sqlite is that really smart computer scientists have decided to implement algorithms and fancy data structures often tree based if you recall our discussion of binary trees or tries and hash tables and those fancier data structures they have baked those kinds of data structures and designs into their database software they've made it freely available or commercially available and so we now just have an abstraction called the database into which we can store data and just read it update it write it and change it quickly without having to implement all of that lowlevel plumbing ourselves and so that's ultimately what a database is going to give us but we have to actually have access to a database to do that and we need to actually decide first to help the database by telling it what to store where and how to store it as a type so why don't we do this let me go ahead and do exactly that with a couple of examples let me go ahead and open up cs50 ide again our webbased programming environment and let me go into our terminal window so for those unfamiliar terminal window is just this black and white or this blue and white window in which you can type commands and rather than point and click and double click on things you can only do things textually in this window and it turns out that in the world of sql lite we can actually use a command called sqlite3 which allows us to create a database so in our human world for csvs you've seen how in code you can just create rows and columns you can literally type it in a text box uh sqlite and is a database technology that uses binary format zeros and ones and so you're going to have to actually store your data differently using a program so if i want to make a file called for instance frosh ims.db i can literally say sqlite3 frosh imdb and then i'm in this program this is a text based program by which i can create my rows and columns and it by design is going to be a little arcane for a moment it's going to look a little cryptic but if i want to go ahead and create a table like a spreadsheet in here i'm going to literally type create table i'm going to call this registrants just like last week when we were looking at frosh i am's examples and the freshman intramural sports program has students registering for sports so i'm going to have a registrance table here i'm going to go ahead now and specify that i want a few columns for this database table one of which i want to call id one of which i want to call name and one of which i want to call dorm so i'm going to keep whoops i didn't mean to hit enter let me just clean this up so now i have three columns id name and dorm and if i were to hit enter theoretically it should create a database it's not going to be graphical like excel or google spreadsheets but it will exist in my ide in a file called froshims.db but i can't just hit enter yet because i have to tell the database a bit more i need to tell it that you know what my id value should probably be an integer and you know what my name should probably be char varchar what should the name of a student be stored as varchar okay so varchar because they're going to vary right if you can think of bunches of your friends they might have short names or long names okay what's the upper bound what's the length of your friend's uh your friend's longest name 16 hi is anyone in here having a name first name and last that's longer than 16. oh 50. sorry i heard 16 i thought because you're not going to be able to register for frosh iems because the database is going to truncate it and as an aside if you've ever gone to a website and tried typing into a form field and either your keyboard stops working or you do type a long word or paragraph in and then you hit enter and it's some of it's gone well that's because the database likely can only store so many bytes and frankly this often happens on customer service forums right if they don't really want you being too verbose with the customer support staff they'll cap the length of the field into which you're typing and they're also doing that on the database but also probably for practical human reasons they don't want to read a big complaint that's this long as well so 50. anyone have a name longer than 50 characters and jersey and not many names but you know what we have technology to answer this longest name in world um and it's this guy guinness book of world records is probably right so his name is uh barnaby marmaduke aloysius benji cobweb dartanian eggbert felix gasper humbert ignatius jaden casper leroy maximilian nettie abba julio pepin quillum rosencrantz sexton teddy upwood vivatma weyland xylon yardley zachary usansky but he also goes by nick apparently so but okay let me go ahead and highlight this and i just i could count this manually but i'm sure someone has made a website to count characters in a string there we go letter count.com okay let's go ahead and paste that in count the characters 225 so nick will not be registering unless we don't support just 16 or 50 looks like we need at least 225. so at some point you do have to make a decision and honestly it's not always obvious you do have to specify that varchar is going to be could be 16 could be 50 could be 225 but you know what if he has kids so let's just round up a bit and call it varchar 255 honestly only because it was a convention so back in the day 255 tended to be the max length for this field in older databases and that at least feels like it's probably enough wiggle room for names but you have to make a judgment call at some point we could ignore the problem and say a thousand characters but if that's never really going to happen and you're potentially wasting space you probably shouldn't because even though it's an upper bound you're sacrificing something like time potentially to search that field if you're just uh telling the database uh that it's going to be bigger than it ever actually will be it needs to be more finely hinted so what about dorm oh god now we have to do this again how do we do it with dorm what's the longest length of a dorm or a house on campus i don't like like ker for timer house maybe but you know honestly at some point it doesn't matter too much but being consistent is what matters it's a matter of style it's a matter of design at some point you know you don't have to nitpick every little value but you should probably pick some reasonable value that you could justify to a roommate or to a colleague or to a teaching fellow and then say this feels like enough without it being actually excessive and there's one last thing i'm going to do here is just end my thought with a semicolon i apologize they're back but at the end of my thought here if i haven't made any typographical errors and i'm going to go ahead and hit enter nothing seems to happen and ironically in cs50 in programming nothing happening is usually a good thing because it means no errors have happened if in sql lite i type schema i can actually just see a regurgitation of the table i just created but more importantly i can start to insert data into this now unfortunately it's not yet graphical but if i want to insert data into this i can do this insert into registrants well what do you want to insert i want to go ahead and insert an id a name and a dorm well with what values well with these values uh the id will be the first registrant will be one the first one to register will be brian and his dorm brian where'd you live penny packer so it's good that might be close to four time or two uh lengthwise so i'm gonna go ahead and do this here is an example of a sql statement create table is one verb or expression you can use insert into is another you specify the name of the table the fields of the table and then values and now i'm capitalizing just to make clear what are sql commands and what are actually just words i the human developer chose but it's just a convention these uppercase words could probably be lowercase in most contexts too but it helps things i think visually to distinguish now i go ahead and hit enter nothing seemed to happen that's probably a good thing let's go ahead and register one other person i'll be the second registrant so maybe david from matthews and so matthew's here enter and now if i want to select all of the students in the database i can go ahead and say select from or you know what let's select everything as denoted in many languages by star from registrants semicolon enter and there we have it it's kind of a tiny super simple lightweight database but there are my rows and columns much like excel and google spreadsheets would lay them out for me but it gets better than this suppose i want to search this database for all of the students who registered for matthews and suppose that time passes and more students actually register for frosh ims i can actually filter this data i can do something like select star from registrants where dorm equals quote unquote matthews and so i can filter it hit enter and now i get back just one row and if you mine starts to wander wow if i could introduce python or javascript into this you know what i could do i could probably get back not this this ascii based table this text table maybe i could get back an actual list of rows so that i can actually do something with that data and that's indeed where we're going with this so if i want to select someone else i could do maybe select uh just the name from registrant where dorm equals matthews if i only care about knowing who registered i could do that and whittle it down to even less data so already in just these few commands i can express so much more functionality than you could with a csv to do this in csv you would have had to write all of these lines of python code yourself what if brian moved so brian really didn't like the union dorm so we're going to go ahead and update registrants and set dorm equal to where do you want to move to canaday uh where i could do this a few ways what's your instinct how could i identify brian and only brian so i don't want to move to uh canaday uh how do we move just brian yeah maybe we could do whoops where name equals quote unquote brian and enter i like this but someone find fault with this if you could uh if there's two brians we're moving both of them or all three of them so maybe better honestly would be to say let's just say where the id equals one now of course i need to know brian's harvard id number or whatnot but this is going to be more precise because the supposition here is that the leftmost column our id field by human convention should be unique so that it uniquely identifies the room so we can have as many brians as we want but we're not going to confuse them if i go ahead and hit enter now nothing seems to happen but if i select star from registrants again and hit enter notice now brian has indeed been moved to canada so there's so many other things brian you know what you're not very good at sports the team concluded so delete from registrants uh where id equals one and now if we select star from registrants we have i guess just me left but brian is gone as well so we have the ability to insert to select to update and delete and create all the while while filtering and we've only just scratched the surface here of what's possible because it turns out we can store so much data in these databases all of our students all of our faculty if you're a company you can start to store all of the products in your database all of the orders all of your customers but as soon as you start going down that road well gee what's a customer customers have names and id numbers uh and maybe email addresses and postal addresses those are going to get messy phone numbers which are kind of like integers but not quite so there's so many questions we still need to answer but feels like it's time for some fruit and some muffins so why don't we go ahead and take a five minute break turn on some music parents need to depart that's fine and we'll see you back here in five or so minutes all right so we're back and where we left off was exactly here using sequel light 3 which is the version 3 of the sequel light command which is just a textbased interface to the technology that we should think of as sql lite sql lite is interesting and it's lightweight in the sense that it's not a server it's not fancy software that you have to run it literally stores all of your data in a file but that by convention ends in db or maybe even dot sql lite but it's just a binary file zeros and ones it's not text that you can open with excel or something like that so it's not a csv so it's stored on file this means that you don't need a particular experience with setting up a database server you don't need memory and software to actually run on the computer you can store everything locally but you do pay a price because recall from our past discussions disks are slow and if you're storing your data on the disk it's not going to be nearly as fast as storing it only in ram and that's why these other technologies like postgres and mysql and microsoft access and sql server and oracle exist those are fancier products where someone literally does double click an icon or run a command that runs a program that stays running in the computer's memory and gives you even better performance but for our purposes pedagogically sql light is handy but we're still going to ask the questions about data types because sqlite does support fancier data types like those in postgres and sql server at mysql and oracle and those are the lowercase ones we introduced a bit ago but honestly this is going to get tedious quickly like even i rarely remember exactly the right syntax when creating tables the order in which everything has to go so i tend to use a graphical user interface or gui myself and there's lots of tools out there but we've built one that's free and open source into cs50 iede that just makes it a little easier to edit your sql tables so i'm going to go ahead and exit out of sql lite whoops exit out of sql lite and i'm going to go ahead over here and you'll notice that we have all of the files from today including most recently frosh iems.db that is the file i created with sql lite3 but if you double click it when using cs50 ide it's actually going to open a program that's called php light admin it happens to be written in another language called php has nothing to do with databases just the name of the product here but it's a tool that using pretty simple html tables just gives us a graphical user interface over the exact same functionality and personally i just find this easier to use and pedagogically it's going to be better because it's going to show us the available data types for our table so for instance notice here there's a lot going on on the screen but a lot of this is just uninteresting details but notice here i see a table called registrants and then i can browse it i can see its structure i can execute manual sql by typing it in i can search it insert i can do bunches of things to it and that's why this graphical user interface is just convenient let me go ahead and click on registrants and by default you'll see these tabs now browse structure sql and then a bunch of others and notice over here you'll see the one row and the one registrant who actually remains because when we last left off we removed brian forcibly from the team so suppose i want to go ahead and add more rows just for the sake of discussion i can just do it manually here i can go in here and i can say let's say the third player is going to be veronica i think she was also in matthew so i can just type that in here and i can just go ahead and click insert but what's nice about php lighted man is that it will not only insert the rows for you it will show you the sql like code with which you could have done it yourself so it's a nice visual reinforcement of that exact same command and you'll notice they use double quotes instead of my single quotes before they're sometimes interchangeable but not always so it's a wonderful way of just learning how you can actually do this with the right sql code so you're not over simplifying it with the gui but you know what let's do this i'm going to go ahead and start over because i want to make some better decisions i'm going to go ahead and literally right click or control click this delete frosh i am db and let's actually start this from scratch now previously when i did this i could have in my terminal window gone ahead and done sqlite three and then uh what was it frosh ims.db and created the file for now i'm going to actually just go ahead and touch a file called that name which is a simple command that just literally creates it but puts nothing in it just so i have an empty file and you'll see that it just popped up again on the left hand side which is handy and now i can double click this version of it which has nothing in it yet and i'm back to php light admin but notice no table in database so let's start to ask some of the harder questions as to actually how to create data in a database so let me go ahead and go to this field here create new table on database frosh iems i'll go ahead and call it registrants again but how many fields um so let's go with id name and dorm what else email i heard earlier age i heard earlier sorry sports do you want excuse me sports you want to be in okay six fields six fields let's go with that so it's actually you know seven fields i want phone numbers too this time so let me go ahead and click go and now you'll see just a gooey way of prompting you for all the answers to the same questions as before and maybe this is clear or maybe it's not but it's just an alternative to the memorizing exactly what the commands need to be so top to bottom here's all of the fields i need to decide on ironically the fields is just a synonym for columns and yet my columns are currently laid out in rows but that's just a ui issue so let me go ahead and decide by convention my first field is almost always id or probably should be and we'll see why this is powerful in just a little bit the data type for that by convention should be integer unless you've got a lot of data like a facebook and then big it might make more sense but notice this drop down actually gives us a nice menu of options just as before and you'll see in gray text the category or in fancy terms the affinity of these various types in sql lite and in lowercase black words here you'll see the actual data type supported by big popular databases like postgres that you might want to use for your final projects in fact we're introducing these with an eye tour you're using these for final projects in the cloud not in cs50 ide but actually getting your own domain name and putting your website if you do a web app out there so here we have all of my available types and under integer i'm going to go ahead and literally choose integer for my id all right next go ahead and zoom out let me go ahead and choose a student's name before did we do did we decide on char varchar okay varchar in what size 255 so the user interface here just allows me to type it in so the syntax is a little different because it's a gui but 255 but you know what the last field was dorm that too i think we said var char so let me choose that and 255 though this one's a little more debatable i'm not sure what the right number is so in the absence of clarity i'm just going to standardize on some same value without being too wasteful but notice there's a few questions here that we haven't come to but our perfect segue earlier hinted at this it turns out you need to make a few other decisions when designing a database if you know in advance that one of your fields is like the primary piece of data to uniquely identify users that's what's going to be called a primary key the column or field that guaranteed is going to identify users uniquely so if you've got two brians each of them is going to have its own id that therefore is your primary key not the name field brian so i'm going to tell the database this is the primary key and it's going to help me keep track of that uniqueness moreover this is a fancy feature before i was manually and very arbitrarily saying brian will be number one i'll be number two veronica will be number three that's tedious like computers should be able to solve that problem for me i don't want to think about who is id number what you can auto increment a field so if i actually check this box sql for me will just plus plus plus plus the id field every time i insert a new name in a new dorm i don't have to even bother specifying an id anymore now there's another column here not null where you can specify this column should never be null and this is important because if you're building a website that has important data that you must have from the users like your app won't work without the user's uh username or their password or their email address you can say not null and your database will ensure that you can't even insert a row into this database unless you give it a value for that field so it helps you protect you against yourself because you could certainly implement that logically in python or any language but the database is a final gauntlet as well default value doesn't really make sense here but for certain types of fields you can say database insert the current time or the current uh date for me now why might you want that why date and time by default why might that be useful when the account was created when they bought a foo when they shipped the bar any number of reasons you might just want to know what is the time right now we don't have to write code for that the database can answer those questions for you so just so much more functionality than we got of course with csvs alone so name should it be a primary key no otherwise we couldn't have two brians and generally your primary key will be one field though theoretically you could make joint columns if you wanted but generally it'll be a single one should we auto increment brian so it's like well brian 28 or brian 2 brian 3 and so forth no doesn't really make sense not null probably i want all of the freshman's names so that we know who's signing up for sports and dorm yeah not null but oh corner case can anyone think of a corner case where dorm maybe should kind of sort of be null they commute they're off campus you know it's not many students but if you have one percent five percent of students living off campus this is a design question now and you all of us have probably visited some website where you just can't fill out the form in the right way because you don't fit their mold or their expectations and that's just because of a poor design decision so let's allow it to be null just in case now what else we said a phone number was one i proposed gosh there's no fun phone number type so what do you want to go with i'm sorry varchar okay so we can pick varchar and maybe use like 10 or so for 10 digits in the u.s at least though maybe like 12 with the dashes or 13 with the parentheses or what's that oh i hear murmuring sorry a small ant and just treat it as a number maybe that could work too another alternative anything else a precision so a specific number good so not a bad instinct but it turns out with uh the numeric data type where you specify scale as it's called the total number of digits in precision that's almost that's generally meant for floating point value so real numbers with decimal points because even though you're specifying a max limit you don't require that many digits it's just a max yeah we can kind of find faults i think in both of these ideas though both of them are reasonable if you allow for char or varchar i could type in like foo or bar or baz and not a number so maybe we should go with in but can someone think of a counter example to why you shouldn't use integer variable length but if we actually do the math maybe 65 maybe there's enough bytes there we could use a big end and that gives us a really long phone number so there's probably a reasonable max yeah hyphens in parentheses we have to decide do we want to support those and honestly all of us are perhaps a little u.s centric right now uh but most of us here but you know when you make a local call in some zones like you type 0 first and some human might type 0 as their number but what's going to happen if you type 0 into an integer field you're going to ignore it so now we're there's that corner case so damn it like there's no way to solve this problem it would seem so what's best we have to make a compromise and just accept that we have to solve this with code varchar all right so varchars or char all right so let's maybe let's simplify the problem no one from outside the u.s can take freshman intramural sports that simplifies the world because if we only support u.s phone numbers now we can say 10 digits and if we say you know what i don't care about the hyphens or the parentheses i can use code javascript or python to throw away the syntax and i can just store 10 digits maybe char 10 is sufficient 3 for the area code then the rest of the number the all seven digits thereof but you could find fault with this too and we're really alienating the international population on campus and so but again these are just nonobvious design decisions and so here we are at the end of the semester we don't always have good answers and reasonable people will disagree but let me simplify our assumptions and just do us numbers 10 digits and trust that i will use code in python or some other language to throw away the syntax the punctuation and whatnot of parentheses and hyphens and i'll make sure the human hasn't typed in any letters of the alphabet i can do that in code and you know we can do that even in javascript when the human submits a form um let's uh we'll leave for the end sports what was it sports sports they might want to do so this is a good example of you shouldn't really have spaces in your field name so the convention would be sports they really or might or let's just call it sports um in this case we'll come back to that i think there were two other ideas we had phone number email email okay email is a good one what should that one be there's no email type unfortunately even though there is an html an input type for email what's that var yeah var i feel like we probably need a vartar here and but here a little nonobvious what is the longest email address in the world maybe it's nix nick so i i don't know but let's pick a reasonable upper bound that we can maybe be comfortable with as a group and let's see anything else here no okay and then what's the one more field oh great oh but age let's go with age so age finally something simple what do you want this to be small ants right you're not gonna you can we will not support people older than 65 535 years old someone want to find fault with this idea though i would argue there's no one right answer to any of these months well but oh it depends do we want months so you're assuming we want birth date i think i've called it age so maybe that's the problem like if it's age small it's fine like you can be zero years old or 65 000 years old we have a good range if it's age i think we're okay but i think you allude to a good point which is why would we maybe want to store birth date and not age and the damn thing's always changing otherwise right like i'm gonna have to update my database tomorrow and then the next day let alone every hour or every minute just because my users ages are changing like that seems silly let me instead fix a value so do something like birth date birth date maybe specify not an in but let's actually use the date field not time we could store time if we really care what time they were born on a certain day but here i can say date is going to be a little better because now i know in python javascript even c i can do a little bit of math and if i know they were born on such and such a day and month and year well i'll just subtract that from the current day month and year and figure out how many days or years old they are so better design decision there perhaps but we do have to standardize the format we can't just allow people from the us and europe and asia to all kind of choose their own formats sql standardizes this year year year year dash month month dash day day and that's the value of having these data types again all right so how about sports the last one varchar all right what's the longest number of words in the sport i did say might want to do so i could get up there but uh 255 probably makes the most sense maybe unless they're very athletic yeah i here too i don't know but just for the sake of opening up possibilities when you think the human might be a little expository and actually write a paragraph of all the sports they're involved in or whatnot or even bigger than a paragraph text is even bigger sports this probably isn't compelling and i'll change it back to varchar but if someone is typing in like their college essay into the um the the common application or if you're asking people to paste their resumes or the like you might want to use text because i have no idea how many words someone's going to have text allows you to store even more data but it stores it a little differently it tends to store it not in the column but using pointers if you recall from a few weeks back it uses the equivalent of that to store it like over there which takes a little more time to get to so again there's just a tradeoff here so uh we could do varchar 255 makes me a little nervous so i'm going to go with another common value 1024 it's a power of two but there's no one right answer here but these are the nonobvious design decisions we have to make if i didn't make any mistakes here i'm going to go ahead and click create and table has been created you can even see now all of the data that's been created there and voila if i go back to frosh ims and i go back to the registrants table not only can i browse it there's nothing in there yet i can look at the structure and actually see all of those same values and edit some of them like renaming but you can't completely mutilate it you might have to start over if you make too many changes all right any questions then about this yeah uh why do i use 10 24 instead of 10 23 typically when you choose a mac oh uh convention i i can't justify this 255 was the max because i think one of the bytes was reserved for some value historically but that's not really the case that bound has been lifted and uh no good reason the nowadays yes back years ago 255 was an actual limit and so it got adopted now i don't know i just picked powers of two often my next goto would be 2048 4096 and so forth just because yeah what's the difference between our charge varchar what's the difference between varchar and char char uses a fixed number of bytes no matter how many of them you are using the advantage of which is your columns conceptually are perfectly straight on both the left edge and the right edge which means you have random access because every cell is some fixed number of bytes from the rest varchar uses like a ragged array as it's called where one side the right hand side is shorter longer in different cells so there's only a maximum length on each of those cells but searching it can be slower as a result because you can't just jump to sell to sell you have to follow the lengths of those things that's the tradeoff yeah oh if i wanted to add the edu an education field now and modify the table if you realize too late oh darn like i need to actually add something to this in the gui tool we can add one fields to the end of the table literally so let's do that let me go ahead and click go i'll be prompted with a similar form but smaller i can go ahead and type in something like education let me propose this is varchar maybe 255 that we could have that debate too i'm going to go ahead and say add field and now notice that the table has been altered successfully it actually it's for whatever reason it's not showing me the code for that particular command but there's literally an alter command in sql that would allow you to change it and if i go back to the structure now you'll see that i have another column called education shown ironically here is a row yeah good question does the order of the columns matter fundamentally no by convention you would typically put the id first and then i personally by design put like the most important fields next like name feels like the right choice maybe email feels like the right choice though i clearly thought of it a little too late this time it's not easy in sql light to reorder things but in other databases you can so there it's more of a human convention uh yeah good question is it a convention have one single primary key or can you have multiple by definition you can only have one but that primary key can span multiple columns so we haven't seen a use case for this yet but there are scenarios in which you would want to say i want to guarantee that these two columns together are unique but not each individual one unique but we won't encounter that just yet other questions and yeah was a not known field really good question what if you had added uh education after you already had real data in there but you specified not null which is problematic because what is the educational backgrounds of the previous people typically what the database would do is either reject it or it would just put the empty string quote unquote so it's not technically null but there's nothing actually there it's just a string of length zero really good question all right so what can we now do that's a little more powerful about this well let me go ahead and quickly insert some data here i'm going to keep most of it blank but you know what i'm not even going to bother with id brian you're back on the team let's go ahead and insert brian let's go ahead now into registrants again let's go ahead and add veronica again so i'm just inserting a few rows manually and again notice it's executing all of this for me without me having to bother typing it out but i absolutely could in fact just for good measure let's do one manually if i click the sql tab notice that i get a default suggestion here that is the syntax with which you can select everything or i can just type in uh insert into registrants but now if i only want to insert a name i don't have to do all the columns i can just say go ahead and insert here aaron for instance semicolon zoom out and click go that seemed to work if i go back to browse now aaron is in there as well but you'll see the difference the query that's being generated automatically by the gui was lazily just inserting quote unquote this socalled empty string of length zero i by omitting even mention of those columns was deliberately inserting null so frankly my database is getting a little messy here so you generally don't use php light admin or gui to insert data you might use it to conveniently create your tables and kind of get your application ready but then you're going to write code ultimately and that's the direction we're going i'm going to go ahead and insert one more person oh i forgot i'm not on the team at all because we started over so let me put myself back on the team david and let me go ahead and click insert go back to registrants and now you'll see there's four of us my id change because they've been inserted in different orders but notice all of the auto incrementing has been happening magically for me and that's useful because i don't have to even think about it and who cares what my id is i just need to have in many cases in a database a unique id so now let's actually write a little bit of code right thus far we haven't done anything useful we've shown you like this black and white window in which you can like select insert and update data but that doesn't really solve any problems we know about yet we have this graphical webbased interface via which you can create tables and add data but who cares we're trying to solve actual problems and the problems of late have been to build software that solve any number of human problems like surveying users and showing the results or finding similarities and documents so suppose the problem at hand now is to actually build something like the frosh im's website and let students register and then see who is registered well back in my day i fairly lazily for lack of technical knowhow just emailed the registrations to the proctor or the ra who was managing the intramural sports program but i they later started putting it in csv files suppose now version three 20 years later i want to store it in an actual database how can i actually do that and then see the results well let me go into the ide again and open up for instance a new file that i'll go ahead and call lecture.pi and suppose i just want to write a simple python program via which to select data from a database so it turns out i can do a few things here first of all let me go ahead and do let's say from cs50 i previously have done things like import get string and get int and so forth it turns out that the cs50 library for python also supports sql and it's going to give us a function called execute that will let you execute any sql command but in python code so instead of pulling up sql lite3 via my own hands or going to a graphical user interface php lighted man i can write code that talks directly to froshims.db and eliminate all of those tools altogether and just now write code so how do i do this i'm going to declare a variable called db for database so i could call it anything i want and i'm going to go ahead and call this sql function and i'm going to pass in a somewhat funky looking string as an argument but it's a standard convention to say what database technology do you want to use then you do colon slash slash so it's three slashes not the usual two in a url and i'm going to specify um frosh ims.db this now will give me a python variable called database that is kind of like a portal if you will into that database file that i can send selects and inserts and deletes and updates to how do i do this well if at the end of the day i want to execute the equivalent of select star from registrants how do i do that well i'm just in a text editor right this is cs50 ide i'm just typing text moreover i'm typing text in a python file and this is not python and indeed the ide has this little red x saying can't do this but i could pass sql code as an input to a python function and let that function talk to the database and indeed that's what we're going to get here from cs50s library i'm going to go ahead and do this you know what access the database and execute the following sql code quote unquote that close parenthesis now what is select return by convention what should it return well in in sql light 3 we just saw kind of a pretty textbased table right with like lines and slashes that looked like a table but it was just text php light admin we actually saw html tables when i browse the database and i proposed verbally a bit ago that you know what if i were to get back all of this data in code what data type would i like it to be handed to me as you know rows i want rows from a table show me all the students who've registered what data structure in python seems apt and just a list right a list that's ordered from first row to last row so we'll call that a list or an array back in the day of c so you know what i'm going to assume that's correct and if i read the documentation i would see that it's correct cs50s execute function if you use select returns to a list of rows it might have zero rows if there's no matches but it might have a thousand rows if there's lots of matches i'm going to store those results whatever they are in my rows array now suppose i want to print out who has registered in my database from whatever frosh i am's website exists i'm assuming students have registered on the web now i'm just the proctor or the ra who's actually now trying to manipulate the data and do something with it so what can i do well for row and rows what do i want to do let me go ahead and just print out that so and so registered so so and so registered well how do i plug in so and so well there's a few ways to do this and let's see first of all i could use my placeholder syntax for print and then i want to print out the row but what do i want from that row what columns are in any row in this database id and name and dorm and phone and sports well it turns out those are going to be handed to you as python dictionaries or dict structures so i can just say row quote unquote name here and i'll use single quotes just to make more clear what's going on here and then i need to make one fix how do i f for format string so it looks a little cryptic but this is just python stuff now the only thing that's new is sql but if we stipulate that sql when using this execute function it's just going to hand you a list of rows each of which is a dictionary so that you can get at this column or this column id your name or dorm this would seem to be now a nice convergence of this week now with the past couple of weeks so let me go ahead and save this let me go ahead and view my console so i have a terminal window and let me go ahead and run python of lecture.pie and in just a moment if i cross my fingers i should hopefully see who has registered amazing i've seen who's registered now there's one line of output that i didn't uh expect which is just this one this is the library just being pedagogically helpful it's showing me every command that i sent to the database but you'll see that so and so has registered so this is kind of interesting it's kind of a stupid program right because most proctors aren't going to be like hacking frosh ims by using a terminal window and running python scripts they're probably going to want to do this via a web page and actually see who is registered but if we have the ability in python code to do this like iteration what could i do instead of instead of just printing to the screen what could i print out per last week and per the past problem set i could print out html right like each of the students who registered kind of feels like an opportunity for like an unordered list or an ordered list or a table or whatever you can now generate html so let me do this let me actually go into an example made in advance what if i went ahead and opened up layout.html here is a simple layout for a web application using flask for those unfamiliar this is mostly html plus a technology called jinja which is a webbased technology for generating websites dynamically the body of this page is clearly what's of interest and you know what i bet i could do some logic right in there so let me go ahead and do this let me go ahead and create uh let's say a new file let's call this application dot pi i'm going to go ahead and just for time save do a little bit of copy paste to save myself some keystrokes so here's a very simple web app and this is going to be my todo so if i go in here to templates let me open up index.html and let me go ahead into here so long story short here's where we're going with this what if i instead generate an unordered list using code from last week but i use my for loop here inside of my web app instead of actually just with a simple lecture.pie file well recall that i could do something like this i can have a jinja loop so i could say something like for row in rows and then down here i can whoops preemptively say something like n4 which is our weird syntax from last week and then in here i can just do a list item and then if i want to show who registered what do i type here in between these curly braces if each row represents a registrant row name registered i can just do something like this so same idea i'm just wrapping it with a little bit of html now let me go to my application.pi file because i'm going to have to fill in some blanks and let me see how can i do this well ultimately i want to return the result of rendering a template called index.html for families unfamiliar this is just a line of code that says go show that file to the user but i don't want to just show them the file as is but let's at least get this set up i'm worried that it might not work yet because i need to get the actual data so how can i get all the rows for my registrants well i can do rows gets db.execute and i can go ahead and select star from registrants and store that in there this file is called froshims.db that i created earlier and everything else is just flask stuff from last week nothing else is new the only thing that's new is this line here this line here and now this line here where i'm using sql inside of a python call by passing it as an argument to a function called execute how do i pass the rows to index.html yeah like rows equals rows is the convention we've adopted you could call it anything you want x equals y but this is a little more straightforward so this is saying hey database get me all of the rows for my registrants and then render the template index.html and pass in these rows and now if i hold my breath and run flask run no syntax errors if i go ahead and visit this here and open damn it the tab i see an internal server error so teachable moment families let's go back into the browser window here and see what happened okay template syntax error so pretty stupid mistake it looks like i expected a square bracket instead of a curly brace that's fixable let me go into index.html and oh i didn't finish my thought so that's some of the frustrations of programming for those who are seeing this for the first time let me save that let me go back to the browser here and we'll just reload oh my god voila now i have a web page via which you can see who has registered but you know what we can make this more powerful recall that we've been playing with http for some time and if this is the url i'm accessing recall that we played around with like reimplementing search functionality well what if i want to support search such that i can just visit q equals and then search for people named say brian and see how many brians are registered could we add support for something like this well maybe let me go back into the ide into application.pi and let me go ahead and say something like this q equals request.args get q to see if anything is actually there and then let me go ahead and do this select star from registrants where let me see q where what's name equals q but i need a placeholder so maybe i should do this and as soon as i do this i need a what f for a format string so i could just create on the fly a sql command that plugs in the value of q between those curly braces to express the logic of select all of the registrants whose names equal brian or veronica or whoever's name i typed in let me go back to the browser here let me go over and do something like this now uh question mark q equals brian cross my fingers as before damn it okay and what did i do wrong here what did i do wrong here this is subtle and we're seeing it for the first time it thinks there's a column called brian but why would it think that well what i've effectively done is sent in this brian is not a keyword in sql and because it's an actual string that i'm comparing against what i really need to be doing is this otherwise sqlite is going to think it's like the name of a column or something i precreated so we have to fix this but that's okay i can put the quotes there but i should probably put the queue there in quotes let's save this go back to the browser reload and there we go now we have functionality for brian and so with this basic building block what have we done well in sql we have several commands at our disposal creating a table which frankly gets tedious by typing it out i myself tend to use and recommend php ligament just to create your table and get it going but then you can certainly manually with sql light 3 or php light admin insert or update or delete or select information once it's actually in the database and that's pretty powerful but once you do that you can now use that same new syntax that new language sql passing it in as an input with a string to our execute function and now start pulling any data you want from your database last week with csv files if you wanted to do this you'd have to open the csv file use a for loop to iterate over it look over every column in row for your data then pass it in and that's fine that's correct that's not bad but it's tedious and you're reinventing the wheel again and again and there's no filtration built in as there is to sql itself so you now have a more sophisticated tool in your toolkit so to speak with which to solve that same kind of problem any questions then on this technique all right well let's look at a bigger database and see how where we can go with this so if you go on the course's website you'll see a larger database that's actually available in multiple formats sql lite which we'll see in a moment but also google spreadsheets because frankly it's a lot more pleasant to like look at your rows and columns in a gui than it is necessarily with uh the file itself so this happens to be a free and open source sample database like some guy years ago took his actual itunes database all the music he'd ever bought he wrote a program to like analyze apple's file format in itunes and extract all of the data that seemed to be stored about him i think was the story and just made it publicly available as a sample database for students and teachers to just use to manipulate data but what's interesting is that this database demonstrates some other principles that we really haven't touched on for instance if i were to store again and again all of these students who are registering for frosh ims what do you start to see in certain fields well i was a little lazy and i didn't bother typing in everyone's dorm but suppose that hundreds of students have registered for frosh iambs a lot of them are going to be from matthews some from pennybacker some from canada some from weld and bunches of other buildings on campus it starts to get a little ridiculous when you see matthews matthews matthews matthews matthews like a hundred or more times if there's like 1 600 freshmen there's a lot of kids in matthews that's a lot of bites to store matt uh hew i don't know it's not doesn't matter how it's spelled that's a lot of bytes to actually store in your database again and again and again feels like there should be an opportunity to factor out the commonalities and what humans do with databases is once they recognize that a recurring pattern of data same darn strings again and again and again you know what rather than use m a now it matters m a t t h e w s which is eight bytes or p e n n y p a c k e r which is 11 then we have a lot of bytes being used again and again and again to store all of these storms you know what what's better than 11 bytes or 8 bytes let's just use an int or let's even use a small ant 2 bytes or four bytes to represent dorms so instead of storing matthews let's just store the number ten and instead of penny packer let's just store the number eleven thereby using some bytes but fewer and therefore saving bytes in the long run and so what this database demonstrates is exactly that principle certainly when it comes to music where artists have multiple albums and artists have multiple songs it's probably a little silly in a musical database to store the name of the album again and again and again and again for all 10 or 12 or 20 tracks or songs on that particular album so what this person did was this notice here we have a whole bunch of sheets or in database speak these would be tables and notice that these tables have columns and notice that these columns are album id in the album table album id and title but notice what he did very cleverly with this field artist id artists or singers have lots of songs to their name eventually and so he's assigned each of them a unique value or apple did and itunes underneath the hood so how do i know what this artist's name is how would you figure this out i mean it's not that interesting to us humans to know ooh artist id number two this is j what's that yeah we need another table with artists which is right over here so let me go ahead and look there so if i want to see let's see let there be rock artist number one let's go to the artist table and turns out ac dc the band is who created that now we've added a step here which maybe is costing us a little bit of time but it's going to save a space in the long run if i'm not storing long artists names although acdc isn't terribly long again and again and again now which is better well it's a tradeoff are you more comfortable wasting space and storing everything together or do you prefer to save space and just spend a little more time joining the data back together but it's going to be really annoying if now if i want to make a website that shows me the names of the songs that i have in a database and the artists for them let alone the albums and more of that the titles of the tracks and so forth feels like that's three queries right like select the album select the artist select uh the the titles but no with sql you can collapse that all together because notice in this table here artist there's a column called artist id that's numbers and notice if you kind of picture this it's like the fingertips here let's propose metaphorically represent the artist id if i go into album now notice that we have album id and title but we also have artist id and so if you imagine these two tables sharing this common this common column what if we kind of stitch them together like this lining up one on the left the other on the right thereby reconstructing all of the information and duplicating it as needed so that i get back just the album and the title and the artist well how can i express that well let me go ahead into cs50 ide where i have a copy of this file let me close all of my tabs from earlier and go into this file called lecture.db and in lecture.db in php light admin will see all of those same tables and i literally just imported it into sql lite you'll see all the same tables we can browse album just as before and we just see a different format for the same data it's the same data from the google spreadsheet which is just more userfriendly and let me go ahead and do this i could of course select star from album where uh artist id equals one to get back all of acdc's albums and indeed here i have two they have for those about to rock uh we salute you and let there be rock they have two but notice the rows i got back contain only what information album id title and artist id i just know as a human that oh these are ac dc's albums but what if i want to know well okay i see that artist id is one so all right well let me open like another tab here and now let me select star from artist where artist id equals uh one and so if i want to learn something about that artist let me go ahead and zoom out click go and okay now i get ac dc well this is great now i have two results two sets of rows this is stupid like now i'm just creating work for myself by having two return values i could call db execute twice but there's a better way it turns out sql allows you to join tables just using sql itself so i'm going to go ahead and do this i'm going to go ahead and select star from album but also from artist uh where album dot artist id let me scroll to the right equals artist dot artist id so notice i'm saying select everything from two tables but only do so where the album tables artist id column has the same value as the artist tables artist id column that's kind of the stitching metaphorically of my fingers together looking for that common column if i go ahead and click go wow look at what i've just constructed it's a lot of information but i have album id and title i have artist id still but i have the name of that artist all together so if you now uh let your mind wander back to the php the python code oh i could now get a whole bunch of rows containing everything i care about all at once i don't need two select queries i can join these tables in this way and i use join very deliberately it turns out that there's another way to express the same thing instead of using that comma syntax i did you might see as well this select star from artist join album on artist uh dot uh artist id equals let me scroll over album dot artist id this is gonna have the exact same effect but you might just find that it reads a little more intuitively to you select everything from the result of joining these two tables how do you want to join them well join them on this equaling that just another way of expressing the same id and if i click go i get back the same information so ultimately with joins do we have the ability to reassemble data so on the one hand it's just good practice to normalize your database identify columns that have lots and lots and lots of redundancy and only store that information once for instance cs50 finance if you're supporting many different users every time malin or brian or veronica buys a stock feels like it'd be a little silly to store malen or brian or veronica along with netflix the symbol and the number of shares one of us bought because male and male and male and mainland can appear all throughout the database and what if i change my username or my name or someone gets married and therefore it changes like why do you create that messiness for yourself instead give brian and veronica and me and everyone else a unique id and when they buy something just store their user id or customer id or however you want to think about it just like with album id and artist id and so normalizing a database is all about finding those commonalities and moving the data into its own table and if you care about rejoining it just use sql to reconstruct that view of the data so to speak so what else can we do here as well it turns out that there is in sql not just primary keys but there's unique constraints in some databases where you can specify this isn't my primary key but i want it to be unique you can specify that something should be indexed so it turns out that if you just know there's a field in your database that you want to be able to search on very efficiently you can index it in advance and you'll see or be able to do this if you like for final projects or even for the next problem set if you'd like but what this enables are queries like this if i want to go ahead and search for for instance um let's say what would be a good example rock i'm interested in rock so if i want to go into my sql tab here i could say something like this select star from album where name not equals but where name is like and then i'm going to say rock but if i want any number of characters to come before that word i can use a percent sign and if any number of characters after i can use a percent sign these are like wild cards in most languages you would use star in sql you use percent signs but it means the same thing and if i go ahead and say go now i get back oh i got wrong lecture album oh title i think is what i wanted let me try that again sorry where title like rock let me go ahead and click go and voila here are all of the albums in the database that have the word rock in them now as an aside this table has a lot of more albums in it and it frankly it's small enough though it has hundreds of rows maybe a few thousand rows none of us humans are really going to notice how slow linear search is but if you start having thousands of rows tens of thousands of rows millions of rows not having an index means that searching for something like rock is going to start at the top and search every darn field all the way to the bottom big o of n if you instead tell the database i know i'm going to be searching on this column a lot please index it for me here comes the secret sauce sql light oracle microsoft access and so forth they will using their own intellectual property build up some fancy data structures trees or hash tables or whatever in memory store the data for you in uh trans uh uh invisibly in that format so that when you do ask for a question like show me all the albums like rock they can answer you in a much faster time than linear and that too is what you get with sql that you don't get with csvs csvs are by nature only linear so we can do better but you the programmer have to help the database and actually give it those hints not just the types but also hints like this and as an aside there's also the notion of foreign keys where if you really want to lock things down you can specify that if you ever see an album id in another table it if it's a primary key in the album table by definition any other table it's going to be called a foreign key because it doesn't really belong there but it's referencing a column elsewhere so there's a lot more technology and vocabulary and you're welcome to dive in deeper and odds are many of you will for final projects by nature of wanting certain features among them even the ones we've seen like auto incrementing and not null as an si2 sql even has functions and for data scientists and statisticians it's super useful to be able to just do math and summaries of data right within sql without ever writing python code or r or anything else built into sql light and other and other databases or functions like this for average counting things getting the min max sum and so forth all of that you get for free with a lot of databases all it takes in the context of python is a line like this but but but but there are some problems and let's end by taking a look at two fundamental problems and threats that are too often underappreciated and in fact we have to fix a very serious vulnerability that i introduced into my very own code earlier but first the socalled race condition in survey uh you or rather let's see suppose that we think back at the very start of the semester most of you signed up for a github account for the very first time and you went to github.com signup for those unfamiliar github is a website where you can save and store a programming code that you've written and want to collaborate with others on and you chose a username and let me go ahead and try choosing a username like say j harvard for john harvard notice that the website immediately said the username is taken all right that's useful and you can probably guess how this is done maybe a little javascript using ajax talking to the server getting the response changing the html or the css or whatever might take some time to wire all that together but that's probably what's going on so let me try like a really long random username that is not taken hey it's available but probably it's not a good thing that i'm streaming this on the internet because if i wait long enough i bet someone could for playful reasons just sign up for this let alone anyone in this room but you've just told me it's available okay so good i'm really excited i've got my username let me go ahead and type in my email address mainlandharbor.edu my password one two three four five take a few moments there verify my account and so forth and i click submit suppose that i'm told momentarily sorry that username has been taken could that happen yeah i mean if any of you were trying to mess with me like right now you would have signed up for that username and beaten me to the punch so that when i hit join i get an error that's the definition of a race condition where two people or two users or two computers or two threads if we really roll back to our discussion of threads in scratch are trying to do the same thing at roughly the same time and if those two things threads or humans check the state of a variable which is a fancy way of saying is the username available they both get back answers but then some number of split seconds later then they make a decision based on that information there is a window of time either split seconds or even seconds or minutes where the state of that variable could of course change so if you too literally right now on your laptop type that very long username all of us would probably be told like green light it's available but only one of us is actually going to get it and that's because of a race condition literally all of us might be racing to sign up for that value and it's when state can change in between things happening this is a bad thing because it makes your data vulnerable to changes by someone you don't necessarily intend or if the database isn't smart you might be able to do especially bad things atms are a canonical example of this if you had a malicious adversary trying to log into like two bank accounts at once or two physical machines at once either with two cards or with two counts and two laptops you could imagine both of them trying to deduct like a hundred dollars from the same account instantly because imagine a poorly implemented bank website it checks the accounts account balance of the user logged in do you have a hundred dollars if the answer is yes maybe both websites are going to say yes you may deduct a hundred dollars you hit enter and voila you deduct 100 the user gets it somehow because it's transferred to some other account but the bank thinks it only did that once deducts a hundred but you've just walked away with 200 because you got i made a decision based on the same answer in two different threads or two different programs or two different computers so long story short this can happen even in the real world an example i was taught by my advisor years ago was this uh suppose um you and your roommates have a little dorm fridge and you're in the habit of course of of drinking a lot of of milk and so uh the the fridge has run out of milk and you come home the first roommate after classes and you're like oh i really need a drink of milk and so you check the fridge there's nothing there so you close the fridge and you walk into the square go to cvs and get in line and to buy some milk meanwhile your other your roommate comes home also they really need a drink of milk and so they check the state of the variable ah no milk close the fridge and then walk to like tommy's convenience or some other place nearby and get in line for some milk you of course then both get home eventually and what happens now damn it now you have twice as much milk and you know one milk goes bad quickly so now this is a problem a very bad problem you have twice as much milk as you could possibly drink but what's the origin of that problem fundamentally because you're out of something you're out of something but you need it but why did i end up with two there's no flag right there's no indication there's no sharing of state you both inspected the value of the variable made a decision independently on it but the state of that variable changed on one of you because when one of you came home the later person damn like the milk has already been refilled so how do you solve this in the real world how could you avoid this problem you could just one never do errands for your roommate it says get this mag yes a shopping list right gone for milk arrested development always leave a note right you could you could convey that information you could more uh dramatically lock the refrigerator right padlock the thing and so your roommate can't inspect the state of the refrigerator while you are gone therefore not making us vulnerable to this and i use the word lock deliberately because in databases that's how they solve this there is a feature in databases called locks or fancier versions of this are called transactions whereby you can guarantee something called atomicity where atomicity means you can do multiple things back to back to back without getting interrupted so in the case of a bank it is possible with sql using slightly fancier syntax that we won't dive into today to solve this problem by saying you know what begin the following transaction check the state of the bank account deduct this amount of money and now commit the results and while i'm doing that lock everyone else out don't let any other customer or any other user do exactly that information that touches the same data until i am done long story short you pay a price perhaps you're literally preventing your roommate from accessing the fridge and that's annoying or you're preventing other customers from doing transactions so hopefully the computer is fast at this and you're fasted shopping but you've at least ensured that you have atomicity no operation can get inserted into your sequence of operations as by your roommate or some other computer or threat so that's a problem with databases that we're only going to skirt over and github might solve this how well by just not caring potentially i don't know what's going to happen if multiple of us try i'm guessing they will just give n minus one of us an error message saying sorry that username is no longer available think about this if you've ever bought airline tickets this is a solved problem in that industry it would be really annoying if you just spent like an hour of stressful price hunting for a good airplane ticket you start checking out after adding it to your shopping cart and five minutes later after your name and email address and credit card number the ticket's gone so what do airlines do they often give you like a five minute window and some of the fancier websites show you the clock saying we guarantee this for the next five minutes hotels might do this too where they lock the refrigerator for you by somehow altering the database to say no one else can buy this ticket or this room for the next five minutes much like the note or the padlock so those kinds of things are all around us but let's look one final example that's the worst uh threat of all is this previously i allowed myself to search by name so q equals brian or q equals david or veronica or the like and what did i do with that information well if we go back into the ide and actually look at that file in application.pi i simply formatted it using an f string inside of this sql string but what if my users were a little bit malicious and suppose that someone doesn't want to just search for brian but you know what suppose they do something like my query is delete from registrants where sorry brian name equals brian something like this now this is not valid at the moment because this string while i'm certainly allowed to type it in is going to get plugged into my code but in the wrong place logically like i'm going to look for someone's name called delete from registrants where name equals which is just nonsensical it will return zero results but what if i do something like this where i say brian or delete from registrants where i kind of finish the thought that the programmer had and then start my own new thought or another way of doing this is to use special syntax semicolon something like this long story short i could contrive a human malicious input that finishes the programmer's thought and returned zero rows but by the way also sneaks one additional rogue query into the database this is what's known as a sql injection attack and if you naively and very very very and badly and incorrectly write code like i did don't ever do this you will be vulnerable to exactly this attack because you are blindly plugging in the user's input to a string that you are then passing to a database this is a fundamental flaw in lots of applications lots of languages where you have to distrust your users it doesn't matter if it's for just students on campus or it's just for you and your friends never ever ever trust users input because either someone's going to mistype something and something's going to go awry or you're going to have like a bad apple trying to hack into your website or your application by trying these kinds of commands and you have to always write code defensively so how to do this there's a bunch of ways but it turns out that what's dangerous about something like i just typed in is that it's the semicolon for instance and it's the quote marks over uh elsewhere so the safest thing to do is no matter what the user types in escape things you can use special syntax we saw this in c generally putting a backslash in front of something means don't have let it have its default behavior instead treat it specially so you could use special code in python that just says remove any bad characters or replace things frankly you've probably been to a website where you've been told sorry you can't use that character in your password or sorry you can't use that in your username that's just dumb like that is the lazy approach to this there is no reason to prevent users from typing any characters into their keyboard for their password maybe even their username that's kind of a lazy way of defending against this by saying i don't trust any percent signs any semicolons any dashes any apostrophes rather just escape things but it's silly for all of us in this room to write our own code for scaping user's input or scrubbing it as it's called or sanitizing it as it's called same things why don't we just use a library now there's many libraries out there the one that we're using at the moment is cs50s and the execute function does this for us instead of using f strings which you should not use like this you should instead do this if you want to plug in a placeholder value to a sql query you literally use a standard convention that we have adopted too where you just put in a variable's name but with a colon in front of it and it can be anything it can be q it can be x it doesn't matter but you want to just plug in some value there so i'm going to call it name by convention then you close your quote and finish your thought and then you go ahead and pass in the actual value name equals q and now you have constructed dynamically a sql string with a placeholder that is not python's own curly brace placeholder this is a special sql convention where you say plugin value here what value will plug in this names value cue whatever the human is typed in and what our execute function will do for you is all of the fancy backslashing and all of the escaping and will protect you from the user's data and this is how truly simple it is it doesn't have to be cs50s library this is ever so common in all languages but too few people know about it and use it and so half the time you read about some database getting hacked or your data getting stolen it is because of a stupid oversight like that so just use libraries and escape users input we can see this now more concretely all the undergrads in the room have surely logged in to either yale's website or harvard's website which looks a little something like this here you're prompted for your login name and your password or your harvard key or the like well how does this take effect in real terms if i were to type in my email address but then weird syntax like this let's look at an example quote or quote unquote 1 equals quote 1. notice it's not balanced like it's kind of missing a quote over here missing a quote over here because the presumption is that maybe harvard is vulnerable to this i don't think they are but suppose that the code running harvard key and harvard's login page looks a little something like this this is bad this is dangerous because they're just using f strings or format strings which are just going to blindly plug anything in there but if you instead uh use and so if you let the human type in something cryptic like that notice what has happened logically where username equals me at example.emailprovider.com and password equals quote unquote so nothing or one equals one and y one equals one well notice if i go back notice that there's a quote here and a quote here and the reason that i didn't finish my second quote here or my second quote here is because i'm assuming as a bad guy like i think harvard is just going to blindly plug my input into a single quotes of their own therefore i can finish their thought nonsensically but notice logically what happens select all users from the database where the username is me at exampleemailprovider.com and the password is nothing or one equals one well when does one equal one like always so this will always return users from the database and presumably therefore let me log in as one of those users so incredibly simple to defend against this just use placeholder syntax and distrust and sanitize user's input the syntax and sql in the cs50 library is quite simply with that colon but in other libraries it might be quite the same so now you are all uh families and students alike inaugurated into the small class of folks in the world who understand particularly geeky humor you might notice this meme that's gone around the internet for many years now where someone either maliciously or humorously decided to paint this over their license plate let's enhance why would someone do this scanners yeah like toll booths are kind of going away at least in the us and they instead have like cameras or readers that are scanning the front of your car and trying to optically do ocr optical character recognition on your license plate and the presumption here is maybe in some municipality there's some badly written code where they just blindly plug your license plate into their code and hopefully you finish the thought where zu066 whatever that is as part of the license plate but semicolon drop database table dot dot dot and we don't even look at that because drop is pretty extreme it literally deletes a database itself but this is a nice way of of getting off the hook from a toll price and most canonical perhaps xkcd is a very popular cartoon strip it's particularly geek oriented and you'll perhaps understand this joke now as well among cs circles i can hear the laughter making its way through so for here on out if you take nothing else away remember little bobby tables with pset or final will you actually implement cs50 finance and coalesce all these ideas thank you so much to all of our families for joining and we will see you next time
