With timestamps:

00:00 - the singleton design pattern limits the
00:02 - number of instances of a particular
00:04 - object to just one the single instance
00:07 - is called the singleton
00:08 - this is useful when exactly one object
00:11 - is needed to to coordinate actions
00:13 - across the system you may use a
00:15 - singleton as the source of config
00:16 - settings for a web app or on the client
00:18 - side for for anything initially with an
00:20 - api key
00:22 - singletons also serve as a shared
00:23 - resource namespace which isolates
00:26 - implementation code from the global
00:28 - namespace so as to provide a single
00:30 - point of access for functions name
00:32 - spacing your code is a primary use of
00:34 - singletons a well-known use case for
00:36 - this is jquery
00:37 - jquery itself is a singleton
00:40 - because singletons involve a global
00:42 - instance many people don't like them but
00:44 - it's important to know about them there
00:46 - are many ways to create a singleton i'm
00:48 - going to explain one implementation of a
00:50 - singleton that comes from eddie azmani's
00:52 - book learning javascript design patterns
00:55 - so we're going to create the singleton
00:57 - here as this function
00:58 - and we are going to create a varan
01:01 - instant a variable called instance that
01:03 - stores a reference to the singleton
01:06 - now we are going to
01:08 - create what properties and functions are
01:10 - inside the singleton here
01:13 - so first we're going to create the
01:15 - private methods and variables now this
01:17 - is basically just an example of how it
01:19 - would work but anything here are going
01:21 - to be the private methods and variables
01:24 - we have the private method which just
01:26 - does the console.log in private
01:29 - var private variable i am also private
01:32 - private random number with we just get a
01:34 - random number so
01:35 - none of these
01:37 - methods and variables can be accessed
01:39 - from
01:40 - the singleton instance they can only be
01:42 - accessed from within the singleton so
01:46 - here are the public methods and
01:48 - variables
01:49 - so
01:50 - public method
01:51 - is a function consulate log the public
01:53 - can see me and the public property i am
01:55 - also public get random number function
01:59 - return private random number so that's
02:01 - the only way that you can get to the
02:04 - private functions and methods and
02:06 - variables
02:07 - is if one of these public methods and
02:10 - variables references it so the get
02:12 - random number public method is going to
02:14 - reference the private random number
02:16 - variable and that's how you can get
02:18 - access to it
02:20 - down here is where you're going to get
02:22 - the instance of the single 10. so
02:26 - um
02:27 - all of this co let me go back up for a
02:29 - second all this code is in this init
02:33 - function this init function returns all
02:35 - the things that the singleton is going
02:37 - to do
02:38 - and then
02:39 - down here
02:41 - um
02:42 - as part of the singleton you are going
02:44 - to run that init function to get the
02:48 - instance of the singleton the only
02:50 - function on the singleton
02:53 - variable up here
02:55 - is get instance
02:58 - this is a public func public method and
03:01 - this
03:02 - this function is going to say if there
03:05 - is no instance if an instance hasn't
03:06 - been created then instance equals init
03:10 - where we're going to run that init
03:12 - function up here and it's going to give
03:14 - us all this all this
03:16 - however if a function has if an instance
03:19 - has already been created we're just
03:21 - going to return the instance that's been
03:22 - created
03:23 - so let's go down and show how you would
03:26 - use this here's where we're going to
03:28 - create an instance of the singleton var
03:30 - single a equals my singleton dot get
03:32 - instance
03:34 - var single b
03:35 - equals my singleton dot get instance now
03:38 - this instance
03:40 - is going to give us the same instance as
03:43 - before
03:44 - the way we're going to demonstrate it is
03:46 - this
03:47 - this random number math.random so each
03:49 - instance should have a completely
03:51 - different random number inside
03:53 - so
03:55 - first i'm going to just show single a
03:57 - dot public method is just a method up
04:00 - here that says the public can see me and
04:02 - then
04:03 - console.log single to a public property
04:06 - it's going to do the i am also public
04:08 - now here's where we're going to see that
04:09 - they're the same instance console.log
04:12 - single a get random number
04:14 - equals equals equals single b get random
04:16 - number so
04:17 - different instances should have
04:18 - different random numbers so if they're
04:20 - the same instance this should show as
04:22 - true so i'm going to run that
04:26 - and look the public can see me i am also
04:28 - public and true they are both the same
04:31 - instance so we can create as many
04:34 - instances as we want but they're all the
04:36 - exact same instance
04:39 - well thanks for watching check the links
04:41 - in the descriptions for more information
04:43 - about singletons my name is beau carnes
04:45 - don't forget to subscribe and remember
04:47 - use your code for good

Cleaned transcript:

the singleton design pattern limits the number of instances of a particular object to just one the single instance is called the singleton this is useful when exactly one object is needed to to coordinate actions across the system you may use a singleton as the source of config settings for a web app or on the client side for for anything initially with an api key singletons also serve as a shared resource namespace which isolates implementation code from the global namespace so as to provide a single point of access for functions name spacing your code is a primary use of singletons a wellknown use case for this is jquery jquery itself is a singleton because singletons involve a global instance many people don't like them but it's important to know about them there are many ways to create a singleton i'm going to explain one implementation of a singleton that comes from eddie azmani's book learning javascript design patterns so we're going to create the singleton here as this function and we are going to create a varan instant a variable called instance that stores a reference to the singleton now we are going to create what properties and functions are inside the singleton here so first we're going to create the private methods and variables now this is basically just an example of how it would work but anything here are going to be the private methods and variables we have the private method which just does the console.log in private var private variable i am also private private random number with we just get a random number so none of these methods and variables can be accessed from the singleton instance they can only be accessed from within the singleton so here are the public methods and variables so public method is a function consulate log the public can see me and the public property i am also public get random number function return private random number so that's the only way that you can get to the private functions and methods and variables is if one of these public methods and variables references it so the get random number public method is going to reference the private random number variable and that's how you can get access to it down here is where you're going to get the instance of the single 10. so um all of this co let me go back up for a second all this code is in this init function this init function returns all the things that the singleton is going to do and then down here um as part of the singleton you are going to run that init function to get the instance of the singleton the only function on the singleton variable up here is get instance this is a public func public method and this this function is going to say if there is no instance if an instance hasn't been created then instance equals init where we're going to run that init function up here and it's going to give us all this all this however if a function has if an instance has already been created we're just going to return the instance that's been created so let's go down and show how you would use this here's where we're going to create an instance of the singleton var single a equals my singleton dot get instance var single b equals my singleton dot get instance now this instance is going to give us the same instance as before the way we're going to demonstrate it is this this random number math.random so each instance should have a completely different random number inside so first i'm going to just show single a dot public method is just a method up here that says the public can see me and then console.log single to a public property it's going to do the i am also public now here's where we're going to see that they're the same instance console.log single a get random number equals equals equals single b get random number so different instances should have different random numbers so if they're the same instance this should show as true so i'm going to run that and look the public can see me i am also public and true they are both the same instance so we can create as many instances as we want but they're all the exact same instance well thanks for watching check the links in the descriptions for more information about singletons my name is beau carnes don't forget to subscribe and remember use your code for good
